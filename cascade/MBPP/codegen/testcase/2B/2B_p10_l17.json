[
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nsimilar_elements((1, 2, 3), (3, 5, 10)) == 2\nassert \nsimilar_elements((1, 2, 5, 8, 10), (5, 8, 10)) == 3\nassert \nsimilar_elements((1, 2, 3), (4, 5, 6)) == 0\nassert \nsimilar_elements((1, 2, 3), (3, 4, 5)) == 1\nassert \nsimilar_elements((), ()) == 0\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     similar_elements([1,2,3],[1,2,3]) == (True,(1,1,2,2,3,3)), 'incorrect'\nassert     similar_elements([1,2,3],[1,2,3,4]) == (True,(1,1,2,2,3,3)), 'incorrect'\nassert     similar_elements([1,2,3],[1,2,3,5,6,7]) == (False,()), 'incorrect'\nassert     similar_elements([1,2,3],[]) == (False,()), 'incorrect'\nassert     similar_elements([], [1,2,3]) == (False,()), 'incorrect'\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     (similar_elements((4, 1, 2, 5), (1, 2, 3, 5))) == (4, 2, 3), 'incorrect'\nassert     (similar_elements((4, 1, 2, 5), (1, 2, 3, 6))) == (4, 2, 3), 'incorrect'\nassert     (similar_elements((4, 1, 2, 5), (4, 1, 2, 6))) == (4, 2, 2), 'incorrect'\nassert     (similar_elements((4, 1, 2, 5), (4, 1, 6, 2))) == (4, 1, 2), 'incorrect'\nassert     (similar_elements((4, 1, 2, 5), (4, 1, 2, 2))) == (4, 1, 2), 'incorrect'\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     similar_elements((1, 2, 3, 4), (5, 6, 7, 8, 9))    == (1, 2, 3)\nassert     similar_elements((1, 2, 3, 4, 5), (6, 7, 8, 9, 10))    == (2, 3, 4)\nassert     similar_elements((1, 2, 3, 4), (5, 6, 7, 8, 9, 10))    == (1, 2, 3)\nassert     similar_elements((1, 2), (1, 2, 3, 4))    == ()\nassert     similar_elements((1, 2), (3, 2))    == ()\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    similar_elements([1,2,3], [2,3,4]) == (1,2)\n    similar_elements([], []) == None\n    similar_elements([1,1,1], [1]) == (1)\n    similar_elements([1,2,3], [3,2,1]) == (2,3)\n    similar_elements([1,2,3], [3,4,1]) == None\n    similar_elements([1,2,3,4,5,6,7,8], [1,2,3,4,5,6,7,8]) == None"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # test your function\n    test_tup1 = (1,2,3,4,5)\n    test_tup2 = (1,2,3,4,5)\n    assert similar_elements(test_tup1, test_tup2) == (1,2,3)\n    test_tup1 = (1,2,3,4,5)\n    test_tup2 = (1,2,3)\n    assert similar_elements(test_tup1, test_tup2) == (1,2,3)\n    test_tup1 = (1,2,3,4,5)\n    test_tup2 = (1,2,3,5,6)\n    assert similar_elements(test_tup1, test_tup2) == (1,2)\n    test_tup1 = (1,2,3,4,5)\n    test_tup2 = (1,2,3,4,5,6)\n    "
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     similar_elements([1,2,3,4],[2,3,4,5]) == (3,4), \"Similar elements not found\"\nassert     similar_elements([1,2,3,4],[1,2,5,6]) == (2,3), \"Similar elements not found\"\nassert     similar_elements([1,2,3,4],[4,5,6,7]) == (), \"No similar elements found\""
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nsimilar_elements((1, 2), (1, 2)) == (1, 2)\nassert \nsimilar_elements((1, 2), (1, 2, 3)) == (1, 2)\nassert \nsimilar_elements((1, 2, 3), (1, 2, 4)) == (1, 2, 4)\nassert \nsimilar_elements((1, 2, 3), (1, 2, 3)) == (1, 2, 3)\nassert \nsimilar_elements((1, 2, 3), (1, 2, 3, 4)) == (1, 2, 3)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     similar_elements((1,2,3), (3,2,1)) == (1,2), \\\n    \"similar_elements should return the similar elements\"\nassert     similar_elements((1,1,3), (1,2,3)) == (1,1), \\\n    \"similar_elements should return the similar elements\"\nassert     similar_elements((5,5,4), (1,2,3)) == (1,2,3), \\\n    \"similar_elements should return the similar elements\"\nassert     similar_elements((5,1,5), (1,2,3)) == (5,1,5), \\\n    \"similar_elements should return the similar elements\"\n\nprint('Passed'"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     similar_elements((1, 2), (1, 2, 3, 3)) == set((1, 2)), 'WRONG'\nassert     similar_elements((2, 4, 7), (1, 3, 7)) == set((2, 3, 7)), 'WRONG'\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_not_prime(11) == False, \"Error found\"\nassert     is_not_prime(2) == True, \"Error found\"\n\ndef get_all_primes(n):\n    '''\n    Write a python function to get all the primes less than n.\n    '''\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_not_prime(3) == False\nassert     is_not_prime(4) == False\nassert     is_not_prime(5) == False\nassert     is_not_prime(6) == True\nassert     is_not_prime(7) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef is_prime(n):\n    '''\n    Write a python function to check if a number is prime or not.\n    '''\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_not_prime(3) == True\nassert     is_not_prime(5) == True\nassert     is_not_prime(7) == False\nassert     is_not_prime(13) == True\n\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint(is_not_prime(3))\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_not_prime(2)==True, \"Wrong Output\"\nassert     is_not_prime(3)==False, \"Wrong Output\"\n\ndef get_primes(n):\n    '''\n    Write a python function to print all the prime numbers from 1 to n.\n    '''\n    primes = []\n    for i in range(1,n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef heap_queue_largest_2(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if not nums or n<1:\n        return []\n    hq = []\n    for i in range(len(nums)):\n        hq.append((nums[i],i))\n    heapq.heapify(hq)\n    res = []\n    for i in range(n):\n        res.append(hq[0][1])\n        num,idx = hq[0]\n        heapq.heappop(hq)\n        heapq.heappop(hq)\n        heapq.heappush(hq,(num,idx))\n    return res\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef test_heap_queue_largest(capsys):\n    nums = [5,4,1,2,6,8,3,9,7]\n    n = 4\n    expected_output = '''\n    4\n    '''\n    heap_queue_largest(nums,n)\n    out,err = capsys.readouterr()\n    assert out == expected_output\n    \ndef heap_queue_largest2(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     heap_queue_largest([-12, -4, -1, 5, 2, -1], 3) == [-1, 2, -1]\nassert     heap_queue_largest([10, 20, 15, 5], 2) == [20, 15]\nassert     heap_queue_largest([10, 20, 15, 5], 1) == [20, 15, 10]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     heap_queue_largest([5,3,1,7,8,6,2],5) == [7,8,6,5,3,1]\nassert     heap_queue_largest([5,3,1,7,8,6,2],3) == [8,7,6,5,3,1]\nassert     heap_queue_largest([5,3,1,7,8,6,2],1) == [8,7,6,5,3,1]\nassert     heap_queue_largest([5,3,1,7,8,6,2],0) == [5,3,1,7,8,6,2]\nassert     heap_queue_largest([],0) == []\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ndef heap_queue_largest(nums,n):\n    q=[]\n    for i in range(n):\n        hq.heappush(q,nums[i])\n    nums.sort(reverse=True)\n    for i in range(n):\n        print(hq.heappop(q))"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     heap_queue_largest([-2, -3, -5, -6, -5, -3, -3],2) == [-5,-3,-6,-5,-3]\nassert     heap_queue_largest([-2, -3, -5, -6, -5, -3, -3],3) == [-5,-3,-3,-6,-5]\nassert     heap_queue_largest([1,2,3,4,5,6,7,8,9],2) == [9,8]\nassert     heap_queue_largest([1,2,3,4,5,6,7,8,9],5) == [7,6,5,4,3]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     heap_queue_largest([1, 2, 3, 4, 5], 1) == [5]\nassert     heap_queue_largest([1, 2, 3, 4, 5], 2) == [5, 4]\nassert     heap_queue_largest([1, 2, 3, 4, 5], 3) == [5, 4, 3]\nassert     heap_queue_largest([1, 2, 3, 4, 5], 4) == [5, 4, 3, 2]\nassert     heap_queue_largest([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     heap_queue_largest([1,2,3,10,4,5],2) == [10,5]\nassert     heap_queue_largest([1,2,3,10,4,5],3) == [10,5,3]\nassert     heap_queue_largest([1,2,3,10,4,5],4) == [10,5,3,4]\nassert     heap_queue_largest([1,2,3,10,4,5],5) == [10,5,3,4,1]\nassert     heap_queue_largest([1,2,3,10,4,5],6) == [10,5,3,4,1,2]\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    pass\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert (is_Power_Of_Two(4)) == False, \"Error, no error\"\nassert (is_Power_Of_Two(3)) == False, \"Error, no error\"\nassert (is_Power_Of_Two(6)) == False, \"Error, no error\"\nassert (is_Power_Of_Two(8)) == True, \"Error, no error\"\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_Power_Of_Two(1) == True, \"1 is not a power of 2\"\nassert     is_Power_Of_Two(4) == True, \"4 is not a power of 2\"\nassert     is_Power_Of_Two(16) == True, \"16 is not a power of 2\"\nassert     is_Power_Of_Two(243) == False, \"243 is a power of 2\"\nassert     is_Power_Of_Two(100) == False, \"100 is not a power of 2\"\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_Power_Of_Two (2)     == True\nassert is_Power_Of_Two (3)     == False\nassert is_Power_Of_Two (5)     == True\nassert is_Power_Of_Two (6)     == False\nassert is_Power_Of_Two (17)     == True\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_Power_Of_Two(8) == True, \"is_Power_Of_Two\"\nassert     is_Power_Of_Two(9) == False, \"is_Power_Of_Two\"\nassert     is_Power_Of_Two(3) == False, \"is_Power_Of_Two\"\nassert     is_Power_Of_Two(0) == True, \"is_Power_Of_Two\"\nassert     is_Power_Of_Two(1) == True, \"is_Power_Of_Two\"\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_Power_Of_Two(4) == True, \" should return True\"\nassert is_Power_Of_Two(8) == False, \" should return False\"\nassert is_Power_Of_Two(64) == True, \" should return True\"\nassert is_Power_Of_Two(128) == False, \" should return False\"\nassert is_Power_Of_Two(192) == True, \" should return True\"\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_Power_Of_Two(1) == True, \"error\" \nassert     is_Power_Of_Two(8) == True, \"error\" \nassert     is_Power_Of_Two(3) == False, \"error\" \nassert     is_Power_Of_Two(7) == False, \"error\" \n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_Power_Of_Two(4) == False\nassert     is_Power_Of_Two(9) == True\nassert     is_Power_Of_Two(13) == False\nassert     is_Power_Of_Two(16) == True\nassert     is_Power_Of_Two(3) == False\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     (is_Power_Of_Two(0) == False)\nassert     (is_Power_Of_Two(1) == False)\nassert     (is_Power_Of_Two(2) == True)\nassert     (is_Power_Of_Two(2**3) == False)\nassert     (is_Power_Of_Two(2**4) == True)\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_char_long('Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.') == ['consectetur','aliquip','eiusmod','tempor','labore','et','dolore','magna','aliqua','qui','sint','consectetur','adipiscing','elit','sed','do','eiusmod','tempor','incididunt','ut','labore','et','dolore','magna','aliqua']"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_char_long('') == []\nassert     find_char_long('The quick brown fox jumps over the lazy dog') == ['fox', 'dog']\nassert     find_char_long('Hello world!') == ['world']\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_char_long('The quick brown fox') == ['quick', 'brown', 'fox']\nassert     find_char_long('The quick brown fox') == ['quick', 'brown', 'fox']\nassert     find_char_long('The quick brown fox') == ['quick', 'brown', 'fox']\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef find_words_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pass\n\ndef count_upper_lower(text):\n    '''\n    Write a function to count upper characters, lower characters and digits in a string.\n    '''\n    pass\n\ndef get_range(text):\n    '''\n    Write a function that can find a range in a string.\n    '''\n    pass\n\ndef get_intersection(text1, text2):\n    '''\n    Write a function that can find the intersection of two strings.\n    '''\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_char_long('hi there') == ['hi', 'there']\nassert     find_char_long('whats up') == []\nassert     find_char_long(' i am fine') == ['i', 'am', 'fine']\nassert     find_char_long('my name is yarib') == ['yarib']\n\ndef find_char_long_with_re(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef find_char_short(text):\n    '''\n    Write a function to find all words which are at most 2 characters long in a string.\n    '''\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(find_char_long(\"abcdef\"))"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_char_long('') == [], 'basic test case is wrong'\nassert     find_char_long('abc') == [], 'basic test case is wrong'\nassert     find_char_long('abcde') == ['abcde'], 'basic test case is wrong'\nassert     find_char_long('a word') == ['a word'], 'basic test case is wrong'\nassert     find_char_long('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz') == ['abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz'], 'basic test case is wrong'\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_char_long(\"This is awesome and this is a word\") == False, \"False output expected\"\nassert     find_char_long(\"This is awesome and this is a word and a sentence\") == True, \"True output expected\"\nassert     find_char_long(\"This is awesome and this is a word and a sentence and a paragraph\") == True, \"True output expected\"\nassert     find_char_long(\"This is awesome and this is a word and a sentence and a paragraph and a fourth sentence\") == False, \"False output expected\"\nassert     find_char_long(\"This is awesome and this is a word and a sentence and a paragraph and a fourth sentence and a fourth sentence and a fourth sentence and a fourth sentence\") == True, \"True output expected\"\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_char_long(\"hello world\") == [\"hello\", \"world\"]\nassert find_char_long(\"hello world and goodbye\") == [\"hello\", \"world\", \"and\", \"goodbye\"]\nassert find_char_long(\"hello world  and  goodbye\") == [\"hello\", \"world\", \"and\", \"goodbye\"]\nassert find_char_long(\"hello world  and  goodbye  and goodbye\") == [\"hello\", \"world\", \"and\", \"goodbye\"]\nassert find_char_long(\"he is a boy\") == []\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     square_nums([4, 9, 16, 25]) == [16, 81, 256, 625]\nassert square_nums([1, 3, 5, 7]) == [1, 9, 25, 49]\nassert square_nums([4, 9, 16, 25]) == [16, 81, 256, 625]\nassert square_nums([]) == []\nassert square_nums([1]) == [1]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint('PASSED: \\n')\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n'''\n\nWrite a Python program to sum all the numeric items in a given list of \nlists of integers.\n\nSample lists: [[1, 2, 3], [1, 4, 5], [9, 6, 6]]\nExpected output: 20\n'''\n\ndef sum_nums(nums):\n    '''\n    Write a function to sum all the numeric items in a given list of lists of integers.\n    '''\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     square_nums([1,2,3,4,5]) == [1,4,9,16,25]\nassert     square_nums([-1,-2,-3,-4,-5]) == [1,4,9,16,25]\nassert     square_nums([0]) == [0]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     square_nums([]) == []\nassert     square_nums([1]) == [1]\nassert     square_nums([2, 3]) == [4, 9]\nassert     square_nums([2, 2]) == [4, 4]"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert square_nums([1, 4, 9, 16]) == [1, 16, 81, 256]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     square_nums([1, 2, 3, 4]) == [1, 4, 9, 16]\nassert     square_nums([0, -1, -3, -2]) == [-1, -9, -27, -4]\nassert square_nums([]) == []\nassert square_nums([1, 2]) == [1, 4]\nassert square_nums([-4, -9]) == [-16, -1]\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Rotations('') == 0, 'Empty String'\nassert     find_Rotations('abcd') == 0, 'Same String'\nassert     find_Rotations('abcdabc') == 3, 'Same String'\nassert     find_Rotations('abcdefg') == 2, 'Same String'\nassert     find_Rotations('abcdefgabc') == 1, 'Same String'\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint('The result of find_Rotations: ',find_Rotations(\"grammy\"))"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_Rotations(\"abcd\") == 4, \"First Test Case\"\nassert     find_Rotations(\"abcd\") == 3, \"Second Test Case\"\nassert     find_Rotations(\"a\") == 0, \"Third Test Case\"\nassert     find_Rotations(\"\") == 0, \"Fourth Test Case\"\nassert     find_Rotations(\"adc\") == 3, \"Fifth Test Case\"\nprint(\"Tests Passed!\")\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Rotations(\"abc\") == 0, \"Wrong value for 'abc'\"\nassert     find_Rotations(\"abcd\") == 1, \"Wrong value for 'abcd'\"\nassert     find_Rotations(\"bacd\") == 2, \"Wrong value for 'bacd'\"\nassert     find_Rotations(\"bcaa\") == 1, \"Wrong value for 'bcaa'\"\nassert     find_Rotations(\"acb\") == 2, \"Wrong value for 'acb'\"\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Rotations(\"baa\") == 2, \"Test Case 1 Failed\"\nassert     find_Rotations(\"cba\") == 0, \"Test Case 1 Failed\"\nassert     find_Rotations(\"ab\") == 0, \"Test Case 1 Failed\"\nassert     find_Rotations(\"xyz\") == 2, \"Test Case 1 Failed\"\nassert     find_Rotations(\"aabb\") == 2, \"Test Case 1 Failed\"\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Rotations('abcd') == 1\nassert     find_Rotations('efgh') == 1\nassert     find_Rotations('abcdab') == 1\nassert     find_Rotations('abcdefgh') == 1\nassert     find_Rotations('abcdfegh') == 1\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_Rotations('aacdbbc') == 6, 'A+'\nassert     find_Rotations('abcd') == 2, 'A-'\nassert     find_Rotations('bc') == 0, 'B+'\nassert     find_Rotations('c') == 0, 'C+'\nassert     find_Rotations('cc') == 1, 'C-'\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    remove_Occ(\"abcabca\",\"b\") == \"a\"\n    remove_Occ(\"abcabca\",\"c\") == \"a\"\n    remove_Occ(\"abcabca\",\"a\") == \"abcabca\"\n    remove_Occ(\"abcabca\",\"a\") == \"abcabca\"\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_Occ('GeeksforGeeks', 'e') == 'KforGeeks'\nassert remove_Occ('GeeksforGeeks', 'G') == 'eeksfor'\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_Occ(\"geeksforgeeks\",\"e\") == \"gksfgo\"\n\nprint('----------------------------------')\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nremove_Occ(\"Amma\", \"m\") == \"Amm\"\nremove_Occ(\"Amma\", \"M\") == \"Ama\"\nremove_Occ(\"amma\", \"a\") == \"amma\"\nremove_Occ(\"amma\", \"m\") == \"\"\nremove_Occ(\"\", \"a\") == \"\"\nremove_Occ(\"\", \"m\") == \"\"\n\n'''\nGiven a String A consisting of N lowercase characters. Find the longest substring with equal number of consecutive characters.\n'''\ndef LongestSubStringOfEqualCharacters(A):\n    '''\n    Input:\n    String A consisting of N lowercase characters.\n\n    Output:\n    Longest substring with equal number of consecutive characters.\n    '''\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_Occ(\"mango\",\"m\") == \"anggoo\"\nassert     remove_Occ(\"abcdefghi\",'i') == \"abcd\"\nassert     remove_Occ(\"i am learning python\",'i') == \"am learning python\"\nprint(\"YOUR CODE IS CORRECT!\""
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_Occ(\"(1+2+3+4)\", '(') == '1+2+3+4'\nassert     remove_Occ(\"(1+2+3+4)\", 'a') == '1+2+3+4'\nassert     remove_Occ(\"(1+2+3+4)\", '5') == '1+2+3+4'\nassert     remove_Occ(\"(1+2+3+4)\", 'z') == '1+2+3+4'\nassert     remove_Occ(\"(1+2+3+4)\", '4') == '1+2+3+4'\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_Occ(\"Python\",'o') == \"y\"\nassert     remove_Occ(\"Python\",'p') == \"y\"\nassert     remove_Occ(\"Python\",'y') == \"h\"\nassert     remove_Occ(\"Python\",'h') == \"y\"\nassert     remove_Occ(\"Python\",'k') == \"y\"\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nremove_Occ('Hello', 'h') == 'ello'\n\nremove_Occ('hello', 'e') == 'llo'\n\nremove_Occ('hello', 'l') == 'll'\n\nremove_Occ('Hello','') == 'Hllo'\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_matrix([[5, 5, 4, 3],\n                        [9, 8, 7, 6],\n                        [6, 7, 6, 5],\n                        [3, 8, 7, 6]]) == [[3, 8, 7, 6],\n                                            [6, 7, 6, 5],\n                                            [9, 8, 7, 6],\n                                            [5, 5, 4, 3]]\nassert     sort_matrix([[3, 8, 7, 6],\n                        [6, 7, 6, 5],\n                        [5, 5, 4, 3],\n                        [9, 8, 7, 6]]) == [[5, 5, 4, 3],\n                                            [6, 7, 6, 5],\n                                            [3, 8, 7, 6],\n                                            [9, 8, 7, 6]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_matrix([[1, 3],\n                    [4, 6],\n                    [7, 8]]) == [[1, 3],\n                    [4, 6],\n                    [7, 8]]\n\nassert sort_matrix([[3, 2, 1],\n                    [1, 3, 2],\n                    [2, 1, 3]]) == [[1, 2, 3],\n                    [1, 3, 2],\n                    [2, 3, 1]]\n\nassert sort_matrix([[1, 2, 1],\n                    [1, 2, 1],\n                    [1, 2, 1]]) == [[1, 2, 1],\n                    [1, 2, 1],\n                    [1, 2, 1]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_matrix([[1,2,3],[1,2,3]]) ==    [[1,1,3],[1,2,3]]\nassert     sort_matrix([[-1,2,-3],[-5,3,1]]) ==    [[-5,3,1],[-1,2,-3]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_matrix([[1, 2, 3], \n                    [4, 5, 6], \n                    [7, 8, 9]]) == [[1, 2, 3], \n                                   [7, 4, 5], \n                                   [6, 8, 9]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_matrix([\n        [0, 2, 3, 1],\n        [0, 1, 2, 1],\n        [1, 3, 2, 2],\n        [1, 1, 1, 1]]) == [[0, 0, 0, 0], [0, 1, 1, 1], [1, 2, 2, 2], [1, 1, 1, 1]]\nassert     sort_matrix([\n        [0, 2, 3, 1],\n        [0, 1, 2, 1],\n        [1, 3, 2, 2],\n        [1, 1, 1, 1]]) == [[0, 0, 0, 0], [1, 1, 1, 1], [1, 2, 2, 2], [0, 1, 3, 2]]\nassert     sort_matrix([\n        [0, 2, 3, 1],\n        [0, 1, 2, 1],\n        [1, 3, 2, 2],\n        [1, 1, 1, 1]]) == [[0, 0, 0, 0], [0, 1, 1, 1], [0, 2, 2, 2], [1, 3, 3, 2]]\n\n\ndef square(l):\n    '''\n    Write a function that takes a list of lists and returns a list with all the elements square.\n    '''\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_matrix([[1, 5, 7],\n                    [9, 11, 13],\n                    [9, 3, 4]]) == [[1, 3, 4],\n                    [9, 11, 13],\n                    [9, 5, 7]]\nassert     sort_matrix([[8, 2, 6],\n                    [3, 9, 8],\n                    [1, 3, 4]]) == [[1, 3, 4],\n                    [3, 9, 8],\n                    [3, 2, 6]]\nassert     sort_matrix([[2, 9, 1],\n                    [3, 8, 8],\n                    [6, 9, 5]]) == [[2, 3, 1],\n                    [3, 8, 8],\n                    [6, 9, 5]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_matrix([[1, 3, 2],\n                        [4, 5, 6],\n                        [7, 8, 9]]) == [[1, 3, 2],\n                        [4, 5, 6],\n                        [7, 8, 9]]\nassert sort_matrix([[2, 7, 5],\n                    [4, 6, 9],\n                    [9, 3, 8]]) == [[2, 7, 5],\n                    [4, 6, 9],\n                    [9, 3, 8]]\nassert sort_matrix([[2, 7, 5],\n                    [4, 6, 9],\n                    [9, 3, 8]]) == [[2, 7, 5],\n                    [4, 6, 9],\n                    [9, 3, 8]]\nassert sort_matrix([[2, 7, 5],\n                    [4, 6, 9],\n                    [9, 3, 8]]) == [[2, 7, 5],\n                    [4, 6, 9],\n                    [9, 3, 8]]\nassert sort_matrix([[2, 7, 5],\n                    [4, 6, 9],\n                    [9, 3, 8]]) == [[2, 7, 5],\n                    [4, 6, 9],\n                    [9, 3, 8]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_matrix([[2,4,5,1,7],[4,7,3,6,5],[9,5,1,6,7],[1,1,1,1,1],[5,4,4,2,4]]) == [[1,1,1,1,1],[1,1,1,1,1],[4,4,4,5,5],[5,5,5,6,6],[7,7,7,9,9]]\nassert     sort_matrix([[3,2,6,1,9],[4,6,7,1,9],[6,7,3,4,8],[3,6,6,8,4],[8,7,1,7,4]]) == [[1,1,1,1,1],[3,3,3,4,4],[4,4,4,6,6],[7,7,7,8,8],[8,8,8,7,7]]\nassert sort_matrix([[1,1,1,1,1],[2,2,2,2,2],[3,3,3,3,3],[4,4,4,4,4],[5,5,5,5,5]]) == [[1,1,1,1,1],[1,2,2,2,2],[2,3,3,3,3],[3,4,4,4,4],[4,5,5,5,5]]\nassert sort_matrix([[1,1,1,1,1,1,1],[2,2,2,2,2,2,2],[3,3,3,3,3,3,3],[4,4,4,4,4,4,4],[5,5,5,5,5,5,5]]) == [[1,1,1,1,1,1,1],[1,2,2,2,2,2,2],[2,3,3,3,3,3,3],[3,4,4,4,4,4,4],[4,5,5,5,5,5,5]]\n\ndef sort_matrix_r(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its columns.\n    '''\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Volume([2,3,4],[5,6,7],[1,2,3]) == 25\nassert     find_Volume([2,3,4],[5,6,7],[3,1,5]) == 14\nassert     find_Volume([2,3,4],[5,6,7],[4,3,2]) == 20\nassert     find_Volume([2,3,4],[5,6,7],[2,5,3]) == 4\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Volume(1,1,1) == 3\nassert     find_Volume(2,1,1) == 8\nassert     find_Volume(3,2,2) == 28\nassert     find_Volume(3,2,3) == 84\nassert     find_Volume(3,2,4) == 144\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_Volume(10,5,2) == 50\nassert     find_Volume(2,3,4) == 24\nassert     find_Volume(4,5,6) == 60\n\nprint('All test cases passed!')\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Volume(1,1,1) == 1\nassert     find_Volume(3,2,3) == 6\nassert     find_Volume(4,5,4) == 40\nassert     find_Volume(10,10,10) == 10000\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Volume(1,2,3,4,5) == 10\nassert find_Volume(3,2,1) == 6\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint('\\nChecking find_Volume...')\nassert find_Volume(1,1,1) == 3\nassert find_Volume(2,1,1) == 6\nassert find_Volume(3,1,1) == 12\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_Volume(3,4,5) == 20\nassert     find_Volume(5,5,8) == 200\nassert     find_Volume(1,1,3) == 1\nprint (\"Correct\")\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    find_Volume(1,1,1) == 1\n    find_Volume(2,2,2) == 2\n    find_Volume(2,2,1) == 1\n\nprint(\"Test passed\\n\")\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Volume(l = 1.0, b = 1.0, h = 1.0) == 1.0\nassert     find_Volume(l = 1.0, b = 1.0, h = 2.0) == 2.0\nassert     find_Volume(l = 1.0, b = 2.0, h = 1.0) == 2.0\nassert     find_Volume(l = 2.0, b = 2.0, h = 1.0) == 2.0\nassert     find_Volume(l = 1.0, b = 2.0, h = 1.0) == 2.0\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_lowercase_underscore(\"jelly_beans\") is True\nassert     text_lowercase_underscore(\"Hello\") is False\nassert     text_lowercase_underscore(\"hi_EllO\") is True\n\n'''\n    Write a function called pig_latin that takes in a string of text as input, and returns a new string that is the pig latin version of the input string.\n    Pig Latin is a word-based language notation created by Robert Campbell. The word begins with the sound Pig, followed by the letters A, then the sound E, and finally the word Latin.\n    For example, the text \"hello world\" would be translated to \"hello world\".\n    The input may be empty, which should be handled as if the input were the word \"The\".\n    Your function should return an empty string if the input is an empty string.\n    Your function should return an error message if the input has characters other than a-z, A-Z, and _ (underscore).\n    Your function should return a translation of \"The\" to \"tHE\", and all other input words to their Pig Latin equivalent.\n    HINT: Use the string method.join() to join the letters of a word into a sentence.\n    HINT: Write a regular expression to search for the word Pig or Pig Latin.\n    HINT: Write a regular expression to search for the word string and find the first index of the string in the regular expression.\n    HINT: Use the re.search() method to find the index of the first occurrence of the word \"Pig\" in the sentence.\n    HINT: Use the re.sub() method to replace the word \"Pig\" in the sentence with the word \"At\".\n    HINT: Use the re.split() method to split the sentence on the first occurrence of the word \"At\".\n    HINT: You can find the regular expression method to search for a word by using the re.search() method.\n    HINT: You can use the.join() method to join the letters of a word into a sentence by calling the.join() method on the list of letters you want to join.\n    HINT: You can use the.split() method to split a string by finding the first occurrence of the word \"At\".\n    HINT: You can use the.find() method to find the index of the first occurrence of the word \"At\".\n    HINT: You can use the.sub() method to replace the word \"At\" in the sentence with the word \"the\".\n'''\ndef pig_latin(text):\n    '''\n    Write a function that takes in a sentence as input, and returns the translation of the input sentence into Pig Latin.\n    '''\n    pass\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_lowercase_underscore('this-is-the-first-example-of-text-contains-lowercase-and-underscore') == False\nassert     text_lowercase_underscore('this_is_the_first_example_of_text_contains_lowercase_and_underscore') == True\nassert     text_lowercase_underscore('this is the first example of text contains lowercase and underscore') == False\nassert     text_lowercase_underscore('example_text_contains_lowercase_and_underscore') == False\nassert     text_lowercase_underscore('_Example_text_contains_lowercase_and_underscore') == True\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_lowercase_underscore(\"The_End_of_Revenge_is_an_End_of_Revenge\")\nassert not text_lowercase_underscore(\"The_End_of_Revenge_is_an_End_of_Revenge\")\nassert not text_lowercase_underscore(\"The_End_of_Revenge_is_End_of_Revenge\")\nassert not text_lowercase_underscore(\"End_of_Revenge_is_End_of_Revenge\")\nassert not text_lowercase_underscore(\"_End_of_Revenge_is_End_of_Revenge\")\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    text_lowercase_underscore('ThisIsATest')\n    text_lowercase_underscore('THIS_IS_ATEST')\n\nassert not text_lowercase_underscore('ThisIsATest')\nassert not text_lowercase_underscore('THIS_IS_ATEST')\n\n'''\nGiven a string, your task is to find the first non-overlapping occurrence of the following pattern in the string. The pattern can be in the following form:\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_lowercase_underscore('abc_def') == True\nassert     text_lowercase_underscore('abc_ABC') == True\nassert     text_lowercase_underscore('abc_ABCD') == False\nassert     text_lowercase_underscore('abc_ABCD_') == False\nassert     text_lowercase_underscore('abc_ABCD_ABC') == True\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_lowercase_underscore(\n        'a_b_c_d'\n        )\nassert     text_lowercase_underscore(\n        ''\n        )\nassert     text_lowercase_underscore(\n        ''\n        ) == False\nassert     text_lowercase_underscore(\n        'a_b_c_d_e'\n        )\nassert     text_lowercase_underscore(\n        'a_b_c_d_e_f_g_h_i_j'\n        )\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_lowercase_underscore('ac_b_c') == True, 'abc should return True'\nassert     text_lowercase_underscore('3_this_is_not_a_word_3_at_all') == True, 'this is 3 at all should return True'\nassert     text_lowercase_underscore('ac_d_e') == False, 'xyz and abc should return False'\nassert     text_lowercase_underscore('abc_def_ghi') == False, 'abcdefghi should return False'\nassert     text_lowercase_underscore('ac_b_c_') == False, 'acbc_ should return False'\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_lowercase_underscore('The_Right_Wooden_Man_was_Eager_to_Learn_Python_was_Long_and_Hard') == True, 'Your function is wrong'\nassert     text_lowercase_underscore('The_Right_Wooden_Man_was_Eager_to_Learn_Python_was_Long_and_Hard') == False, 'Your function is wrong'\nassert     text_lowercase_underscore('the_right_wooden_man_was_eager_to_learn_python_was_long_and_hard') == False, 'Your function is wrong'\nassert     text_lowercase_underscore('the_Right_Wooden_Man_was_Eager_to_Learn_Python_was_Long_and_Hard') == False, 'Your function is wrong'\nassert     text_lowercase_underscore('The_Right_Wooden_Man_was_Eager_to_Learn_Python_was_Long_and_Hard') == True, 'Your function is wrong'\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_lowercase_underscore('camelCase') == True, \"Test 1 failed\"\nassert text_lowercase_underscore('set01') == True, \"Test 2 failed\"\nassert text_lowercase_underscore('camelCamelCase') == True, \"Test 3 failed\"\nassert text_lowercase_underscore('camel_Case') == False, \"Test 4 failed\"\nassert text_lowercase_underscore('camelCase_') == True, \"Test 5 failed\"\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     square_perimeter(1) == 1\nassert     square_perimeter(2) == 4\nassert     square_perimeter(3) == 9\nassert     square_perimeter(4) == 16\nassert     square_perimeter(5) == 25\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     square_perimeter(1)     == 2\nassert     square_perimeter(3)     == 6\nassert     square_perimeter(4)     == 12\n\ndef sum_of_digits(n):\n    '''\n    Write a function that returns the sum of digits of a given integer.\n    '''\n    pass\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     square_perimeter(3) == 6\nassert     square_perimeter(1) == 4\nassert     square_perimeter(2) == 4\nassert     square_perimeter(12) == 24\nassert     square_perimeter(0) == 0\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     square_perimeter(4) == 4\nassert square_perimeter(0) == 0\nassert square_perimeter(1) == 1\nassert square_perimeter(5) == 5"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     square_perimeter(1) == 4\nassert     square_perimeter(2) == 8\nassert     square_perimeter(3) == 12\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n\ndef square_area(a):\n    '''\n    Write a function that returns the area of a square given its side length as input.\n    '''\n    pass\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert square_perimeter(1) == 1\nassert square_perimeter(2) == 4\nassert square_perimeter(3) == 8\nassert square_perimeter(4) == 12\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     square_perimeter(4) == 8, \"square_perimeter(4) == 8 fails\"\nassert     square_perimeter(10) == 20, \"square_perimeter(10) == 20 fails\"\nassert     square_perimeter(16) == 32, \"square_perimeter(16) == 32 fails\"\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     str_to_list(\"aaab\") == \"a\"\nassert     str_to_list(\"aaab\") == \"a\"\nassert     str_to_list(\"aab\") == \"a\"\nassert     str_to_list(\"\") == \"\"\nassert     str_to_list(\"a\") == \"a\"\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef list_to_str(string): \n    '''\n    Write a function to combine the first string with the remaining strings in the list using spaces between each character of each string.\n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # Driver Code\n    string = \"Geeksforgeeks\"\n    string1 = \"for\"\n    if str_to_list(string) == str_to_list(string1):\n        print(\"Yes\")\n    else:\n        print(\"No\")"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     str_to_list('abcd') == ['a', 'b', 'c', 'd']\nassert     str_to_list('abcdabcd') == ['a', 'b', 'c', 'd', 'a', 'b', 'c', 'd']\nassert     str_to_list('abcd') == ['a', 'b', 'c', 'd']\nassert     str_to_list('abcdabcd') == ['a', 'b', 'c', 'd', 'a', 'b', 'c', 'd']\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint (\"Pass\" if  (['w','o','r','l','d'] == str_to_list('world')) else \"Fail\")\nprint (\"Pass\" if  (['a','n','t','g','a','m','m','i','c','e'], 'ant' ) == str_to_list('antman') else \"Fail\")\nprint (\"Pass\" if  (['a','b','c','d','e','f','g'], 'abcd') == str_to_list('abcd') else \"Fail\")\nprint (\"Pass\" if  (['a','b','c','d','e','f','g'], 'ab') == str_to_list('ab') else \"Fail\")\nprint (\"Pass\" if  (['a','b','c','d','e','f','g'], 'a') == str_to_list('a') else \"Fail\")\nprint (\"Pass\" if  (['a','b','c','d','e','f','g'], 'g') == str_to_list('g') else \"Fail\")\nprint (\"Pass\" if  (['a','b','c','d','e','f','g'], '') == str_to_list('') else \"Fail\")\nprint (\"Pass\" if  (['a','b','c','d','e','f','g'], 'hello') == str_to_list('hello') else \"Fail\")\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nassert str_to_list(\"ABCABCAB\",\"ABC\") == \"ABC\"\nassert str_to_list(\"ABCABCAB\",\"ABCD\") == \"ABC\"\nassert str_to_list(\"ABCABCAB\",\"ABCD\") == \"ABCD\"\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nassert str_to_list(\"abcd\") == \"c\"\nassert str_to_list(\"ab\") == \"a\"\nassert str_to_list(\"abc\") == \"bc\"\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    \n    # first test case\n    # array = [1, 2, 3, 3, 4, 5, 6, 7, 8, 9]\n    array = [1, 1, 2, 2, 3, 4, 4, 5, 6, 7, 7, 8, 8, 8, 9, 10, 11, 12, 13, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 24, 25, 26, 27, 28, 29, 30, 31, 32, 32, 33, 34, 35, 36, 36, 37, 38, 39, 39, 40, 41, 42, 43, 44, 44, 45, 46, 47, 48, 48, 49, 50, 51, 51, 52, 53, 54, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 64, 65, 66, 67, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 82, 83, 84, 85, 85, 86, 87, 88, 89, 90, 91, 92, 92, 93, 94, 95, 96, 97, 98, 99, 99, 99, 100, 101, 102, 103, 104, 105, 106, 106, 107, 108, 109, 110, 111, 112, 112, 113, 114, 115, 116, 117, 118, 119, 119, 119, 120, 121, 122, 123, 123, 123, 124, 124, 125, 126, 127, 127, 127, 128, 128, 129, 130, 131, 131, 132, 133, 133, 134, 135, 136, 137, 137, 137, 138, 138, 139, 140, 141, 141, 142, 143, 144, 144, 145, 146, 147, 148, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 157, 157, 158, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 167, 168, 169, 170, 171, 171, 172, 173, 174, 174, 175, 176, 177, 178, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 187, 188, 189, 190, 191, 192, 193, 193, 194, 195, 196, 197, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 222, 223, 224, 225, 226, 226, 227, 228, 229, 230, 231, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254]\n    # expected output: True\n    assert test_duplicate(array) == True\n\n    # second test case\n    # array = [1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 3, 2, 1, 2, 3, 3, 4, 5, 6, 7, 8, 9]\n    array = [1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 3, 2, 1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 3, 2, 1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 3, 2, 1, 2, 3, 3, 4, 5, 6, 7, 8, 9]\n    # expected output: True\n    assert test_duplicate(array) == True\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     test_duplicate([1,2,3,1]) == True, \"Wrong answer\"\nassert     test_duplicate([1,2,3,4]) == False, \"Wrong answer\"\nassert     test_duplicate([1,1,1]) == True, \"Wrong answer\"\nassert     test_duplicate([1,2,3,4,5,6,7,8,9]) == False, \"Wrong answer\"\nassert     test_duplicate([1,2,3,1,2,3]) == True, \"Wrong answer\"\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     test_duplicate([1,2,3,4]) == True, \"Wrong Answer\"\nassert     test_duplicate([1,2,3,4,3]) == True, \"Wrong Answer\"\nassert     test_duplicate([1,2,3,4,3,5]) == True, \"Wrong Answer\"\nassert     test_duplicate([1,2,3,4,3,2]) == False, \"Wrong Answer\"\nassert     test_duplicate([2,2,2]) == True, \"Wrong Answer"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     test_duplicate([1, 2, 3, 4, 5, 6]) == True\nassert     test_duplicate([1, 2, 3, 4, 5, 6, 5]) == False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n'''\n2. Write a program to remove the duplicate elements in the given array.\n'''\ndef remdup(arraynums):\n    '''\n    Write a function to remove the duplicate elements in the given array.\n    '''\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     test_duplicate(arraynums1) == True, \"Should be True\"\nassert     test_duplicate(arraynums2) == False, \"Should be False\"\nassert     test_duplicate(arraynums3) == True, \"Should be True\"\nassert     test_duplicate(arraynums4) == True, \"Should be True\"\nassert     test_duplicate(arraynums5) == False, \"Should be False\"\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef is_woodall_2(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    pass\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    is_woodall(4) == True\n    is_woodall(7) == False\n    is_woodall(8) == False\n    is_woodall(9) == False\n    is_woodall(15) == False\n    is_woodall(16) == True\n    is_woodall(17) == True\n    is_woodall(18) == False\n    is_woodall(19) == False\n    is_woodall(20) == True\n    is_woodall(21) == True\n    is_woodall(22) == False\n    is_woodall(23) == False\n    is_woodall(24) == True\n    is_woodall(25) == True\n    is_woodall(26) == False\n    is_woodall(27) == False\n    is_woodall(28) == True\n    is_woodall(29) == True\n    is_woodall(30) == False\n    is_woodall(31) == True\n    is_woodall(32) == False\n    is_woodall(33) == True\n    is_woodall(34) == True\n    is_woodall(35) == True\n    is_woodall(36) == True\n    is_woodall(37) == True\n    is_woodall(38) == True\n    is_woodall(39) == True\n    is_woodall(40) == False\n    is_woodall(41) == True\n    is_woodall(42) == True\n    is_woodall(43) == True\n    is_woodall(44) == True\n    is_woodall(45) == True\n    is_woodall(46) == True\n    is_woodall(47) == True\n    is_woodall(48) == True\n    is_woodall(49) == True\n    is_woodall(50) == False\n    is_woodall(51) == True\n    is_woodall(52) == True\n    is_woodall(53) == False\n    is_woodall(54) == True\n    is_woodall(55) == True\n    is_woodall(56) == True\n    is_woodall(57) == True\n    is_woodall(58) == True\n    is_woodall(59) == True\n    is_woodall(60) == False\n    is_woodall(61) == True\n    is_woodall(62) == True\n    is_woodall(63) == True\n    is_woodall(64) == True\n    is_woodall(65) == True\n    is_woodall(66) == True\n    is_woodall(67) == True\n    is_woodall(68) == True\n    is_woodall(69) == True\n    is_woodall(70) == True\n    is_woodall(71) == True\n    is_woodall(72) == True\n    is_woodall(73) == True\n    is_woodall(74) == True\n    is_woodall(75) == True\n    is_woodall(76) == True\n    is_woodall(77) == True\n    is_woodall(78) == True\n    is_woodall(79) == True\n    is_woodall(80) == True\n    is_woodall(81) == True\n    is_woodall(82) == True\n    is_woodall(83) == True\n    is_woodall(84) == True\n    is_woodall(85) == True\n    is_woodall(86) == True\n    is_woodall(87) == True\n    is_woodall(88) == True\n    is_woodall(89) == True\n    is_woodall(90) == True\n    is_woodall(91) == True\n    is_woodall(92) == True\n    is_woodall(93) == True\n    is_woodall(94) == True\n    is_woodall(95) == True\n    is_woodall(96) == True\n    is_woodall(97) == True\n    is_woodall(98) == True\n    is_woodall(99) == True\n    is_woodall(100) == True\n    is_woodall(101) == True\n    is_woodall(102) == True\n    is_woodall(103) == True\n    is_woodall(104) == True\n    is_woodall(105) == True\n    is_woodall(106) == True\n    is_woodall(107) == True\n    is_woodall(108) == True\n    is_woodall(109) == True\n    is_woodall(110) == True\n    is_woodall(111) == True\n    is_woodall(112) == True\n    is_woodall(113) == True\n    is_woodall(114) == True\n    is_woodall(115) == True\n    is_woodall(116) == True\n    is_woodall(117) == True\n    is_woodall(118) == True\n    is_woodall(119) == True\n    is_woodall(120) == True\n    is_woodall(121) == True\n    is_woodall(122) == True\n    is_woodall(123) == True\n    is_woodall(124) == True\n    is_woodall(125) == True\n    is_woodall(126) == True\n    is_woodall(127) == True\n    is_woodall(128) == True\n    is_woodall(129) == True\n    is_woodall(130) == True\n    is_woodall(131) == True\n    is_woodall(132) == True\n    is_woodall(133) == True\n    is_woodall(134) == True\n    is_woodall(135) == True\n    is_woodall(136) == True\n    is_woodall(137) == True\n    is_woodall(138) == True\n    is_woodall(139) == True\n    is_woodall(140) == True\n    is_woodall(141) == True\n    is_woodall(142) == True\n    is_woodall(143) == True\n    is_woodall(144) == True\n    is_woodall(145) == True\n    is_woodall(146) == True\n    is_woodall(147) == True\n    is_woodall(148) == True\n    is_woodall(149) == True\n    is_woodall(150) == True\n    is_woodall(151) == True\n    is_woodall(152) == True\n    is_woodall(153) == True\n    is_woodall(154) == True\n    is_woodall(155) == True\n    is_woodall(156) == True\n    is_woodall(157) == True\n    is_woodall(158) == True\n    is_woodall(159) == True\n    is_woodall(160) == True\n    is_woodall(161) == True\n    is_woodall(162) == True\n    is_woodall(163) == True\n    is_woodall(164) == True\n    is_woodall(165) == True\n    is_woodall(166) == True\n    is_woodall(167) == True\n    is_woodall(168) == True\n    is_woodall(169) == True\n    is_woodall(170) == True\n    is_woodall(171) == True\n    is_woodall(172) == True\n    is_woodall(173) == True\n    is_woodall(174) == True\n    is_woodall(175) == True\n    is_woodall(176) == True\n    is_woodall(177) == True\n    is_woodall(178) == True\n    is_woodall(179) == True\n    is_woodall(180) == True\n    is_woodall(181) == True\n    is_woodall(182) == True\n    is_woodall(183) == True\n    is_woodall(184) == True\n    is_woodall(185) == True\n    is_woodall(186) == True\n    is_woodall(187) == True\n    is_woodall(188) == True\n    is_woodall(189) == True\n    is_woodall(190) == True\n    is_woodall(191) == True\n    is_woodal"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_woodall(1) == 'not a Woodall number'\nassert     is_woodall(5) == 'not a Woodall number'\nassert     is_woodall(10) == 'not a Woodall number'\nassert     is_woodall(15) == 'not a Woodall number'\nassert     is_woodall(20) == 'not a Woodall number'\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    is_woodall(2) == True\n    is_woodall(12) == False\n    is_woodall(8) == True\n    is_woodall(0) == False\n    is_woodall(30) == False\n    is_woodall(55) == True\n    is_woodall(38) == True\n    is_woodall(1000) == False\n    is_woodall(8.7) == True\n    is_woodall(8.8) == False\n    is_woodall(3.4) == True\n    is_woodall(9) == True\n    is_woodall(1) == False\n    is_woodall(1.1) == False\n    is_woodall(0) == False\n    is_woodall(-10) == False\n    is_woodall(None) == False\n    is_woodall(\"1\") == False\n    is_woodall(True) == False\n    is_woodall(False) == False\n    is_woodall({}) == False\n    is_woodall([]) == False\n    is_woodall([1, 2, 3]) == False\n    is_woodall({\"1\": 1}) == False\n    is_woodall(\"1\") == False\n    is_woodall(1.0) == False\n    is_woodall([\"1\"]) == False\n    is_woodall([1, 2, 3, 4]) == False\n    is_woodall([1]) == False\n    is_woodall([]) == False\n    is_woodall({\"1\": 1, \"2\": 2}) == False\n    is_woodall({\"1\": 1, \"2\": 2, \"3\": 3}) == False\n    is_woodall({\"1\": 1, \"2\": 2, \"3\": 3, \"4\": 4}) == True\n    is_woodall({\"1\": 1, \"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5}) == True\n    is_woodall({\"1\": 1, \"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5, \"6\": 6}) == True\n    is_woodall({\"1\": 1, \"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5, \"6\": 6, \"7\": 7}) == True\n    is_woodall({\"1\": 1, \"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5, \"6\": 6, \"7\": 7, \"8\": 8}) == True\n    is_woodall({\"1\": 1, \"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5, \"6\": 6, \"7\": 7, \"8\": 8, \"9\": 9}) == True\n    is_woodall({\"1\": 1, \"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5, \"6\": 6, \"7\": 7, \"8\": 8, \"9\": 9, \"10\": 10}) == True\n    is_woodall({\"1\": 1, \"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5, \"6\": 6, \"7\": 7, \"8\": 8, \"9\": 9, \"10\": 10, \"11\": 11}) == True\n    is_woodall({\"1\": 1, \"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5, \"6\": 6, \"7\": 7, \"8\": 8, \"9\": 9, \"10\": 10, \"11\": 11, \"12\": 12}) == True\n    is_woodall({\"1\": 1, \"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5, \"6\": 6, \"7\": 7, \"8\": 8, \"9\": 9, \"10\": 10, \"11\": 11, \"12\": 12, \"13\": 13}) == True\n    is_woodall({\"1\": 1, \"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5, \"6\": 6, \"7\": 7, \"8\": 8, \"9\": 9, \"10\": 10, \"11\": 11, \"12\": 12, \"13\": 13, \"14\": 14}) == True\n    is_woodall({\"1\": 1, \"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5, \"6\": 6, \"7\": 7, \"8\": 8, \"9\": 9, \"10\": 10, \"11\": 11, \"12\": 12, \"13\": 13, \"14\": 14, \"15\": 15}) == True\n    is_woodall({\"1\": 1, \"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5, \"6\": 6, \"7\": 7, \"8\": 8, \"9\": 9, \"10\": 10, \"11\": 11, \"12\": 12, \"13\": 13, \"14\": 14, \"15\": 15, \"16\": 16}) == True\n    is_woodall({\"1\": 1, \"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5, \"6\": 6, \"7\": 7, \"8\": 8, \"9\": 9, \"10\": 10, \"11\": 11, \"12\": 12, \"13\": 13, \"14\": 14, \"15\": 15, \"16\": 16, \"17\": 17}) == True\n    is_woodall({\"1\": 1, \"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5, \"6\": 6, \"7\": 7, \"8\": 8, \"9\": 9, \"10\": 10, \"11\": 11, \"12\": 12, \"13\": 13, \"14\": 14, \"15\": 15, \"16\": 16, \"17\": 17, \"18\": 18}) == True\n    is_woodall({\"1\": 1, \"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5, \"6\": 6, \"7\": 7, \"8\": 8, \"9\": 9, \"10\": 10, \"11\": 11, \"12\": 12, \"13\": 13, \"14\": 14, \"15\": 15, \"16\": 16, \"17\": 17, \"18\": 18, \"19\": 19}) == True\n    is_woodall({\"1\": 1, \"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5, \"6\": 6, \"7\": 7, \"8\": 8, \"9\": 9, \"10\": 10, \"11\": 11, \"12\": 12, \"13\": 13, \"14\": 14, \"15\": 15, \"16\": 16, \"17\": 17, \"18\": 18, \"19\": 19, \"20\": 20}) == True\n    is_woodall({\"1\": 1, \"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5, \"6\": 6, \"7\": 7, \"8\": 8, \"9\": 9, \"10\": 10, \"11\": 11, \"12\": 12, \"13\": 13, \"14\": 14, \"15\": 15, \"16\": 16, \"17\": 17, \"18\": 18, \"19\": 19, \"20\": 20, \"21\": 21}) == True\n    is_woodall({\"1\": 1, \"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5, \"6\": 6, \"7\": 7, \"8\": 8, \"9\": 9, \"10\": 10, \"11\": 11, \"12\": 12, \"13\": 13, \"14\": 14, \"15\": 15, \"16\": 16, \"17\": 17, \"18\": 18, \"19\": 19, \"20\": 20, \"21\": 21, \"22\": 22}) == True\n    is_woodall({\"1\": 1, \"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5, \"6\": 6, \"7\": 7, \"8\": 8, \"9\": 9, \"10\": 10, \"11\": 11, \"12\": 12, \"13\": 13, \"14\": 14, \"15\": 15, \"16\": 16, \"17\": 17, \"18\": 18, \"19\": 19, \"20\": 20, \"21\": 21, \"22\": 22, \"23\": 23}) == True\n    is_woodall({\"1\": 1, \"2\": 2, \"3\": 3, \"4\": 4, \"5\": 5, \"6\": 6, \"7\": 7, \"8\": 8, \"9\": 9, \"10\": 10, \"11\": 11, \"12\": 12, \"13\": 13"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_woodall(1) == False, \"Should be False\"\nassert     is_woodall(101) == True, \"Should be True\"\nassert     is_woodall(11) == True, \"Should be True\"\nassert     is_woodall(0) == False, \"Should be False\"\nassert     is_woodall(5) == False, \"Should be False\"\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert is_woodall(23) == True\nassert is_woodall(44) == True\nassert is_woodall(9) == False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_woodall(2) == False\nassert     is_woodall(0) == False\nassert     is_woodall(-1) == False\nassert     is_woodall(1.2) == False\nassert     is_woodall(3) == True\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_woodall(12) == False\nassert     is_woodall(123) == False\nassert     is_woodall(123.345) == False\nassert     is_woodall(12345) == True\n\nprint('Correct')\nprint('--------------------------------------------')\nprint()\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert \nassert rev(42) == True\nassert rev(15) == False\nassert rev(20) == True\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     rev(5) == 2\nassert     rev(0) == 0\nassert     rev(-1) == 1\nassert     rev(-2) == 2\nassert     rev(3) == 2\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rev(0) == False, \"rev(0) should be False\"\nassert     rev(3) == True, \"rev(3) should be True\"\nassert     rev(-3) == True, \"rev(-3) should be True\"\nassert     rev(9) == False, \"rev(9) should be False\"\nassert     rev(11) == False, \"rev(11) should be False\"\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     rev(4) == 2, 'Wrong Output'\nassert     rev(12) == 2, 'Wrong Output'\nassert     rev(100) == 98, 'Wrong Output'\nassert     rev(32) == 0, 'Wrong Output'\nassert     rev(-12) == 2, 'Wrong Output'\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rev(100) == True\nassert     rev(-10) == True\nassert     rev(0) == True\nassert     rev(19) == False\nassert     rev(-20) == False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     rev(7) == False, \"Expected rev(7) == False\"\nassert     rev(8) == True, \"Expected rev(8) == True\"\nassert     rev(42) == True, \"Expected rev(42) == True\"\nassert     rev(1) == True, \"Expected rev(1) == True\"\nassert     rev(15) == True, \"Expected rev(15) == True\"\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rev(1) == 0\nassert     rev(2) == -1\nassert     rev(3) == -2\nassert     rev(4) == 2\nassert     rev(5) == -1\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    rev(11) == 22\n    rev(12) == 22\n    rev(13) == 23\n    rev(11) == \n    rev(14) == 24\n    rev(15) == 25\n    rev(16) == 26\n    rev(17) == 27\n    rev(18) == 28\n    rev(19) == 29\n    rev(20) == 30\n    rev(21) == 31\n    rev(22) == 32\n    rev(23) == 33\n    rev(24) == 34\n    rev(25) == 35\n    rev(26) == 36\n    rev(27) == 37\n    rev(28) == 38\n    rev(29) == 39\n    rev(30) == 40\n    rev(31) == 41\n    rev(32) == 42\n    rev(33) == 43\n    rev(34) == 44\n    rev(35) == 45\n    rev(36) == 46\n    rev(37) == 47\n    rev(38) == 48\n    rev(39) == 49\n    rev(40) == 50\n    rev(41) == 51\n    rev(42) == 52\n    rev(43) == 53\n    rev(44) == 54\n    rev(45) == 55\n    rev(46) == 56\n    rev(47) == 57\n    rev(48) == 58\n    rev(49) == 59\n    rev(50) == 60\n    rev(51) == 61\n    rev(52) == 62\n    rev(53) == 63\n    rev(54) == 64\n    rev(55) == 65\n    rev(56) == 66\n    rev(57) == 67\n    rev(58) == 68\n    rev(59) == 69\n    rev(60) == 70\n    rev(61) == 71\n    rev(62) == 72\n    rev(63) == 73\n    rev(64) == 74\n    rev(65) == 75\n    rev(66) == 76\n    rev(67) == 77\n    rev(68) == 78\n    rev(69) == 79\n    rev(70) == 80\n    rev(71) == 81\n    rev(72) == 82\n    rev(73) == 83\n    rev(74) == 84\n    rev(75) == 85\n    rev(76) == 86\n    rev(77) == 87\n    rev(78) == 88\n    rev(79) == 89\n    rev(80) == 90\n    rev(81) == 91\n    rev(82) == 92\n    rev(83) == 93\n    rev(84) == 94\n    rev(85) == 95\n    rev(86) == 96\n    rev(87) == 97\n    rev(88) == 98\n    rev(89) == 99\n    rev(90) == 100\n    rev(91) == 101\n    rev(92) == 102\n    rev(93) == 103\n    rev(94) == 104\n    rev(95) == 105\n    rev(96) == 106\n    rev(97) == 107\n    rev(98) == 108\n    rev(99) == 109\n    rev(100) == 110\n    rev(101) == 111\n    rev(102) == 112\n    rev(103) == 113\n    rev(104) == 114\n    rev(105) == 115\n    rev(106) == 116\n    rev(107) == 117\n    rev(108) == 118\n    rev(109) == 119\n    rev(110) == 120\n    rev(111) == 121\n    rev(112) == 122\n    rev(113) == 123\n    rev(114) == 124\n    rev(115) == 125\n    rev(116) == 126\n    rev(117) == 127\n    rev(118) == 128\n    rev(119) == 129\n    rev(120) == 130\n    rev(121) == 131\n    rev(122) == 132\n    rev(123) == 133\n    rev(124) == 134\n    rev(125) == 135\n    rev(126) == 136\n    rev(127) == 137\n    rev(128) == 138\n    rev(129) == 139\n    rev(130) == 140\n    rev(131) == 141\n    rev(132) == 142\n    rev(133) == 143\n    rev(134) == 144\n    rev(135) == 145\n    rev(136) == 146\n    rev(137) == 147\n    rev(138) == 148\n    rev(139) == 149\n    rev(140) == 150\n    rev(141) == 151\n    rev(142) == 152\n    rev(143) == 153\n    rev(144) == 154\n    rev(145) == 155\n    rev(146) == 156\n    rev(147) == 157\n    rev(148) == 158\n    rev(149) == 159\n    rev(150) == 160\n    rev(151) == 161\n    rev(152) == 162\n    rev(153) == 163\n    rev(154) == 164\n    rev(155) == 165\n    rev(156) == 166\n    rev(157) == 167\n    rev(158) == 168\n    rev(159) == 169\n    rev(160) == 170\n    rev(161) == 171\n    rev(162) == 172\n    rev(163) == 173\n    rev(164) == 174\n    rev(165) == 175\n    rev(166) == 176\n    rev(167) == 177\n    rev(168) == 178\n    rev(169) == 179\n    rev(170) == 180\n    rev(171) == 181\n    rev(172) == 182\n    rev(173) == 183\n    rev(174) == 184\n    rev(175) == 185\n    rev(176) == 186\n    rev(177) == 187\n    rev(178) == 188\n    rev(179) == 189\n    rev(180) == 190\n    rev(181) == 191\n    rev(182) == 192\n    rev(183) == 193\n    rev(184) == 194\n    rev(185) == 195\n    rev(186) == 196\n    rev(187) == 197\n    rev(188) == 198\n    rev(189) == 199\n    rev(190) == 200\n    rev(191) == 201\n    rev(192) == 202\n    rev(193) == 203\n    rev(194) == 204\n    rev(195) == 205\n    rev(196) == 206\n    rev(197) == 207\n    rev(198) == 208\n    rev(199) == 209\n    rev(200) == 210\n    rev(201) == 211\n    rev(202) == 212\n    rev(203) == 213\n    rev(204) == 214\n    rev(205) == 215\n    rev(206) == 216\n    rev(207) == 217\n    rev(208) == 218\n    rev(209) == 219\n    rev(210) == 220\n    rev(211) == 221\n    rev(212) == 222\n    rev(213) == 223\n    rev(214) == 224\n    rev(215) == 225\n    rev(216) == 226\n    rev(217) == 227\n    rev(218) == 228\n    rev(219) == 229\n    rev(220) == 230\n    rev(221) == 231\n    rev(222) == 232\n    rev(223) == 233\n    rev(224) == 234\n    rev(225) == 235\n    rev(226) == 236\n    rev(227) == 237\n    rev(228) == 238\n    rev(229) == 239\n    rev(230) == 240\n    rev(231) == 241\n    rev(232) == 242\n    rev(233) == 243\n    rev(234) == 244\n    rev(235) == 245\n    rev(236) == 246\n    rev(237) == 247\n    rev(238) == 248\n    rev(239) == 249\n    rev(240) == 250\n    rev(241) == 251\n    rev(242) == 252\n    rev(243) == 253\n    rev(244) == 254\n    rev(245) == 255\n    rev(246) == 256\n    rev(247) == 257\n    rev(248) == 258\n    rev(249) == 259\n    rev(250) == 260\n    rev(251) == 261\n    rev(252) == 262\n    rev(253) == 263\n    rev(254) == 264\n    rev(255) == 265\n    rev(256) == 266\n    rev(257) == 267\n    rev(258) == 268\n    rev(259) == 26"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(\"PASS\" if (rev(2)==1) else \"FAIL\")\n\nassert \nprint(\"PASS\" if (rev(3)==1) else \"FAIL\")\n\nassert \nprint(\"PASS\" if (rev(2)==1) else \"FAIL\")\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(find_Max_Num([1, 4, 5, 2, 3, 9]))\n\nprint(find_Max_Num([1, 3, 9, 6, 5, 4]))\n\nprint(find_Max_Num([9, 4, 6, 2, 3, 1]))\n\nprint(find_Max_Num([0, 0, 0, 0, 0, 0]))\n\nprint(find_Max_Num([9, 8, 7, 5, 1, 2]))\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Max_Num([0,1,2,3]) == 3\nassert     find_Max_Num([0,1,2,3,4,5]) == 5\nassert     find_Max_Num([]) == None\n\n\n\ndef find_Min_Num(arr) : \n    '''\n    Write a python function to find the smallest number that can be formed with the given list of digits.\n    '''\n    pass\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_Max_Num([1,5,7,12,5]) == 12, \"Wrong result\"\nassert     find_Max_Num([1,2,3,4,5]) == 5, \"Wrong result\"\nassert     find_Max_Num([]) == \"Please enter some numbers\", \"Wrong result\"\nassert     find_Max_Num([1,2,3,4]) == \"Please enter some numbers\", \"Wrong result\"\nassert     find_Max_Num([1,2,3,4,5,6]) == \"Please enter some numbers\", \"Wrong result\"\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Max_Num([1,2,3,4,5])     ==     15, 'test 1 failed'\nassert     find_Max_Num([1,2,3,4,5,6,7,8,9,10])     ==     10, 'test 2 failed'\nassert     find_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])     ==     10000, 'test 3 failed'\nassert     find_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])     ==     10000, 'test 4 failed'\nassert     find_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,78"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_Max_Num([1, 4, 5, 4, 5, 5]) == 10\nassert     find_Max_Num([1, 4, 5, 4, 5, 6]) == 15\nassert     find_Max_Num([1, 4, 5, 4, 5, 6, 4]) == 15\n\nprint(\"Correct!\")\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_Max_Num([1,2,3,4]) ==      4\nassert     find_Max_Num([1,2,3,4,5]) ==     5\nassert     find_Max_Num([1,2,3,4,4]) ==     4\nassert     find_Max_Num([1,2,3,4,4,4]) ==     4\nassert     find_Max_Num([1,2,3,4,4,4,4,4]) ==     4\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef CheckNumberOfDigitsInNumber(x,y):\n    '''\n    Write a python function to check whether the given two integers have same number of digits or not.\n    '''\n    pass\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     opposite_Signs(x = 1, y = -2) == False, \"The first argument should be in the opposite sign of the second argument\"\nassert     opposite_Signs(x = -1, y = 2) == False, \"The first argument should be in the opposite sign of the second argument\"\nassert     opposite_Signs(x = -1, y = -2) == True, \"The first argument should be in the opposite sign of the second argument\"\n\ndef first_Digit_Equal_Second_Digit(x,y):\n    '''\n    Write a python function to check whether the given two integers have the same first digit and the same second digit.\n    '''\n    pass\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     opposite_Signs(1,2) == False\nassert     opposite_Signs(-1,2) == True\nassert     opposite_Signs(-1, -2) == True\nassert     opposite_Signs(-2,-1) == False\nassert opposite_Signs(1, -2) == True\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     opposite_Signs(1, -1) == False, \"error in opp sign\"\nassert     opposite_Signs(-1, 1) == True, \"error in opp sign\"\nassert     opposite_Signs(1, 1) == False, \"error in opp sign\"\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     opposite_Signs(1,-1) == True \nassert     opposite_Signs(-1,1) == False \nassert     opposite_Signs(-1,-1) == True \nassert     opposite_Signs(1,1) == True \nassert     opposite_Signs(0,0) == True \n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     opposite_Signs(2,3) == True, \"2+3 = 5; 2*3 = 6; 5-3 = -2; 5/3 = 1.3333333333333333\"\nassert     opposite_Signs(-2,3) == False, \"-2+3 = 1; -2*3 = 6; -5-3 = -7; -5/3 = -1.3333333333333333\"\nassert     opposite_Signs(-2,-3) == True, \"-2-3 = 1; -2*-3 = -6; -5-3 = -7; -5/3 = -1.3333333333333333\"\nassert     opposite_Signs(3,-2) == True, \"3-2 = 1; 3*-2 = -4; 5/2 = 2.5; 3/2 = 1\"\nassert     opposite_Signs(2,3) == False, \"2+3 = 5; 2*3 = 6; 5-3 = -2; 5/3 = 1.3333333333333333\"\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     opposite_Signs(1,-1)==False, \"return false if opposite signs of given two numbers are same\"\nassert     opposite_Signs(-1,-1)==True, \"return true if opposite signs of given two numbers are different\"\nassert     opposite_Signs(1,1)==True, \"return true if opposite signs of given two numbers are same\"\nassert     opposite_Signs(-1,1)==False, \"return false if opposite signs of given two numbers are same\"\nassert     opposite_Signs(-1,-2)==False, \"return false if opposite signs of given two numbers are same\"\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     opposite_Signs(2,2) == False\nassert     opposite_Signs(-2,2) == True\nassert     opposite_Signs(2,-2) == True\nassert     opposite_Signs(0,-1) == True\nassert     opposite_Signs(-2,-1) == False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     opposite_Signs(2,2)    == True, \"expected True\"\nassert     opposite_Signs(-2,2)    == True, \"expected True\"\nassert     opposite_Signs(2,-2)    == False, \"expected False\"\nassert     opposite_Signs(-2,-2)    == False, \"expected False\"\nassert     opposite_Signs(2,-2)    == False, \"expected False\"\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nassert is_octagonal(1) == 1\nassert is_octagonal(2) == 5\nassert is_octagonal(3) == 7\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    is_octagonal(1) == 1\n    is_octagonal(2) == 7\n    is_octagonal(3) == 19\n    is_octagonal(4) == 82\n    is_octagonal(5) == 166\n    is_octagonal(6) == 268\n    is_octagonal(7) == 448\n    is_octagonal(8) == 552\n    is_octagonal(9) == 644\n    is_octagonal(10) == 740\n    is_octagonal(11) == 834\n    is_octagonal(12) == 948\n    is_octagonal(13) == 1036\n    is_octagonal(14) == 1140\n    is_octagonal(15) == 1228\n    is_octagonal(16) == 1312\n    is_octagonal(17) == 1400\n    is_octagonal(18) == 1486\n    is_octagonal(19) == 1672\n    is_octagonal(20) == 1768\n    is_octagonal(21) == 1864\n    is_octagonal(22) == 1960\n    is_octagonal(23) == 2060\n    is_octagonal(24) == 2152\n    is_octagonal(25) == 2188\n    is_octagonal(26) == 2280\n    is_octagonal(27) == 2374\n    is_octagonal(28) == 2468\n    is_octagonal(29) == 2562\n    is_octagonal(30) == 2656\n    is_octagonal(31) == 2741\n    is_octagonal(32) == 2828\n    is_octagonal(33) == 2909\n    is_octagonal(34) == 2988\n    is_octagonal(35) == 3070\n    is_octagonal(36) == 3164\n    is_octagonal(37) == 3244\n    is_octagonal(38) == 3338\n    is_octagonal(39) == 3432\n    is_octagonal(40) == 3472\n    is_octagonal(41) == 3522\n    is_octagonal(42) == 3580\n    is_octagonal(43) == 3658\n    is_octagonal(44) == 3762\n    is_octagonal(45) == 3820\n    is_octagonal(46) == 3892\n    is_octagonal(47) == 3956\n    is_octagonal(48) == 3936\n    is_octagonal(49) == 3996\n    is_octagonal(50) == 4072\n    is_octagonal(51) == 4040\n    is_octagonal(52) == 4024\n    is_octagonal(53) == 3978\n    is_octagonal(54) == 3946\n    is_octagonal(55) == 3924\n    is_octagonal(56) == 3884\n    is_octagonal(57) == 3844\n    is_octagonal(58) == 3780\n    is_octagonal(59) == 3762\n    is_octagonal(60) == 3752\n    is_octagonal(61) == 374\n    is_octagonal(62) == 37\n    is_octagonal(63) == 36\n    is_octagonal(64) == 35\n    is_octagonal(65) == 34\n    is_octagonal(66) == 33\n    is_octagonal(67) == 32\n    is_octagonal(68) == 31\n    is_octagonal(69) == 30\n    is_octagonal(70) == 29\n    is_octagonal(71) == 28\n    is_octagonal(72) == 27\n    is_octagonal(73) == 26\n    is_octagonal(74) == 25\n    is_octagonal(75) == 24\n    is_octagonal(76) == 23\n    is_octagonal(77) == 22\n    is_octagonal(78) == 21\n    is_octagonal(79) == 20\n    is_octagonal(80) == 19\n    is_octagonal(81) == 18\n    is_octagonal(82) == 17\n    is_octagonal(83) == 16\n    is_octagonal(84) == 15\n    is_octagonal(85) == 14\n    is_octagonal(86) == 13\n    is_octagonal(87) == 12\n    is_octagonal(88) == 11\n    is_octagonal(89) == 10\n    is_octagonal(90) == 9\n    is_octagonal(91) == 8\n    is_octagonal(92) == 7\n    is_octagonal(93) == 6\n    is_octagonal(94) == 5\n    is_octagonal(95) == 4\n    is_octagonal(96) == 3\n    is_octagonal(97) == 2\n    is_octagonal(98) == 1\n    is_octagonal(99) == 0\n    is_octagonal(100) == -1\n    is_octagonal(101) == -2\n    is_octagonal(102) == -3\n    is_octagonal(103) == -4\n    is_octagonal(104) == -5\n    is_octagonal(105) == -6\n    is_octagonal(106) == -7\n    is_octagonal(107) == -8\n    is_octagonal(108) == -9\n    is_octagonal(109) == -10\n    is_octagonal(110) == -11\n    is_octagonal(111) == -12\n    is_octagonal(112) == -13\n    is_octagonal(113) == -14\n    is_octagonal(114) == -15\n    is_octagonal(115) == -16\n    is_octagonal(116) == -17\n    is_octagonal(117) == -18\n    is_octagonal(118) == -19\n    is_octagonal(119) == -20\n    is_octagonal(120) == -21\n    is_octagonal(121) == -22\n    is_octagonal(122) == -23\n    is_octagonal(123) == -24\n    is_octagonal(124) == -25\n    is_octagonal(125) == -26\n    is_octagonal(126) == -27\n    is_octagonal(127) == -28\n    is_octagonal(128) == -29\n    is_octagonal(129) == -30\n    is_octagonal(130) == -31\n    is_octagonal(131) == -32\n    is_octagonal(132) == -33\n    is_octagonal(133) == -34\n    is_octagonal(134) == -35\n    is_octagonal(135) == -36\n    is_octagonal(136) == -37\n    is_octagonal(137) == -38\n    is_octagonal(138) == -39\n    is_octagonal(139) == -40\n    is_octagonal(140) == -41\n    is_octagonal(141) == -42\n    is_octagonal(142) == -43\n    is_octagonal(143) == -44\n    is_octagonal(144) == -45\n    is_octagonal(145) == -46\n    is_octagonal(146) == -47\n    is_octagonal(147) == -48\n    is_octagonal(148) == -49\n    is_octagonal(149) == -50\n    is_octagonal(150) == -51\n    is_octagonal(151) == -52\n    is_octagonal(152) == -53\n    is_octagonal(153) == -54\n    is_octagonal(154) == -55\n    is_octagonal(155) == -56\n    is_octagonal(156) == -57\n    is_octagonal(157) == -58\n    is_octagonal(158) == -59\n    is_octagonal(159) == -60\n    is_octagonal(160) == -61\n    is_octagonal(161) == -62\n    is_octagonal(162) == -63\n    is_octagonal(163) == -64\n    is_octagonal(164) == -65\n    is_octagonal(165) == -66\n    is_octagonal(166) == -67\n    is_octagonal(167) == -68\n    is_octagonal(168) == -69\n    is_octagonal(169) == -70\n    is_octagonal(170) == -71\n    is_octagonal"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef nth_octagonal_number(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_octagonal(0) == 1 \nassert     is_octagonal(1) == 7\nassert     is_octagonal(2) == 37\nassert     is_octagonal(3) == 109\nassert     is_octagonal(4) == 597\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nis_octagonal(1) == 1\nassert \nis_octagonal(2) == 3\nassert \nis_octagonal(3) == 6\nassert \nis_octagonal(4) == 10\nassert \nis_octagonal(5) == 12\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_octagonal(1) == 0\nassert     is_octagonal(2) == 1\nassert     is_octagonal(3) == 1\nassert     is_octagonal(4) == 2\nassert     is_octagonal(5) == 3\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_octagonal(1) == 1\nassert     is_octagonal(2) == 10\nassert     is_octagonal(3) == 21\nassert     is_octagonal(4) == 33\nassert     is_octagonal(5) == 55\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_Substrings('3234') == 1, \"should be 1\"\nassert     count_Substrings('2341') == 1, \"should be 1\"\nassert     count_Substrings('2341a') == 1, \"should be 1\"\nassert     count_Substrings('2341ab') == 1, \"should be 1\"\nassert     count_Substrings('12345') == 1, \"should be 1\"\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_Substrings('a') == 1\nassert     count_Substrings('aab') == 2\nassert     count_Substrings('aaaaa') == 4\n\ndef solve(arr):\n    '''\n    Write a python function to find the count of the substrings having the sum of digits equal to the length.\n    '''\n    n = len(arr)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    s = 0\n    for i in range(n):\n        s += arr[i]\n        dp[i][i] = 1\n    for i in range(n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i][j] = dp[i][j] + dp[j][i]\n            else:\n                dp[i][j] = 0\n    return dp\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_Substrings('abc12345') == 3\nassert count_Substrings('abc123456') == 6\nassert count_Substrings('abc') == 0\nassert count_Substrings('') == 0\n\ndef count_Substrings_1(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # if not s:\n    #     return 0\n    #\n    # freq = defaultdict(int)\n    # for i in range(len(s)):\n    #     if freq[s[i]] > 0:\n    #         freq[s[i]] -= 1\n    #     else:\n    #         freq[s[i]] = 1\n    #\n    # return sum(freq.values())\n    #\n    # from collections import defaultdict\n    #\n    # def dp(string):\n    #     if not string: return 0\n    #     if string in freq: return freq[string]\n    #     freq[string] = dp(string[1:]) + 1 if string[0] == '0' else dp(string[1:]) + dp(string[2:])\n    #     return freq[string]\n    #\n    # return dp(s)\n    \n    # from collections import defaultdict\n    #\n    # freq = defaultdict(int)\n    # freq[0] = 1\n    #\n    # for i in range(1,len(s)):\n    #     freq[i] = freq[i-1]*10+int(s[i])\n    #\n    # return sum(freq.values())\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ncount_Substrings(\"abbabaaa\") == 7\ncount_Substrings(\"abababa\") == 6\ncount_Substrings(\"aabbbbbb\") == 8\ncount_Substrings(\"aabbbbbbabbaaababaaaab\") == 9\ncount_Substrings(\"\") == 0"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_Substrings(\"abc\") == 1, \"count_Substrings(\\\"abc\\\")\"\nassert     count_Substrings(\"abcdefghi\") == 4, \"count_Substrings(\\\"abcdefghi\\\")\"\nassert     count_Substrings(\"\") == 0, \"count_Substrings(\\\"\\\")\"\nassert     count_Substrings(\"hiii\") == 3, \"count_Substrings(\\\"hiii\\\")\"\nassert     count_Substrings(\"hi\") == 2, \"count_Substrings(\\\"hi\\\")\"\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef check_Palindrome(s):\n    '''\n    Write a python function to check whether a given string is a palindrome.\n    '''\n    pass\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_Substrings(\"g fmnc wms bgblr rpylqjyrc gr zw fylb. rfyrq ufyr amknsrcpq ypc dmp. bmgle gr gl zw fylb gq glcddgagclr ylb rfyr'q ufw rfgq rcvr gq qm jmle. sqgle qrpgle.kyicrpylq() gq pcamkkclbcb. lmu ynnjw ml rfc spj.\" ) == 17\nassert count_Substrings(\"12345678\") == 12\nassert count_Substrings(\"pwwkew\") == 3\nassert count_Substrings(\"\") == 0\n\ndef sum_digits(n):\n    '''\n    Write a python function to find the sum of digits of a given integer.\n    '''\n    pass\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint('-----------------------')\ns = \"abracadabra\"\ncount_Substrings(s)"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_Substrings('abccde') == 5\nassert count_Substrings('abcdefg') == 8\nassert count_Substrings('abcde') == 5\nassert count_Substrings('abac') == 4\nassert count_Substrings('abcdeabcde') == 8\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     smallest_num([1,4,2,3]) == 1, '1'\nassert     smallest_num([1,3,2,4]) == 1, '1'\nassert     smallest_num([-5,1,1,1,2]) == -5, '1'\nassert     smallest_num([3,3,3,3,3,3,3,3,3]) == 3, '3'\n\nprint('You should be able to test this function and see the results of each check!')\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n'''\nIf you passed all the test cases, you are done!\nYou can take a break now.\n'''"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert smallest_num([1, 4, 5]) == 1\nassert smallest_num([1, 1, 1, 1, 1]) == 1\nassert smallest_num([]) == None\nassert smallest_num([-1, -2, -3, -4, -5]) == -5\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     smallest_num([-2, -1, -4, 4, -10]) == -1\nassert     smallest_num([5, 5, -10, -10, -7, 7, -1]) == -1\n\ndef smallest_num_iterative(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # a trivial method\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert smallest_num([2,3,9,8]) == 3\nassert smallest_num([3,4,5,2]) == 2\nassert smallest_num([7,2,3,4,5,6]) == 2\nassert smallest_num([0,1,2,3,4,5]) == 0\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     smallest_num([1, 3, 5, 7, 9, 12, 14, 18]) == 1\nassert     smallest_num([1, 5, 7, 9, 12, 18]) == 1\nassert     smallest_num([4, 5, 7, 9, 12, 18]) == 7\nassert     smallest_num([1, 3, 5, 7, 9, 12, 14, 18]) == 1\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     smallest_num([1, 1, 1, 1, 2, 2]) == 1\nassert     smallest_num([1, 1, 2, 3, 4, 3]) == 1\nassert     smallest_num([1, 2, 3, 4, 5, 6, 7, 6, 7, 8, 9]) == 6\nassert     smallest_num([1, 2, 3, 4, 5, 6, 7, 6, 7, 8, 9, 10]) == 6\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     smallest_num([3,4,5,1]) == 1\nassert     smallest_num([3,4,5,1,10,2,4]) == 1\nassert     smallest_num([]) == None\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     smallest_num([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == 1\nassert     smallest_num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,0]) == 0\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     smallest_num([2,3,1]) == 1, \"WRONG!\"\nassert     smallest_num([5,2,3,4]) == 2, \"WRONG!\"\nassert     smallest_num([0,-2,3,4,-5]) == -2, \"WRONG!\"\nassert     smallest_num([100,40,50,80]) == 50, \"WRONG!\"\nassert     smallest_num([]) == -1, \"WRONG!\"\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nmax_difference([(1, 2), (2, 3), (4, 5), (3, 4)]) == 2, 'Expected 2'\nprint('  Success: {}'.format(max_difference.__doc__))\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(\"The maximum difference between each pair is:\", max_difference(test_list))"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_difference([(10,20),(8,9),(5,15),(10,12),(4,8)]) == 8\nassert     max_difference([(5,15),(10,12),(4,8)]) == 5\nassert     max_difference([(10,20),(10,12),(10,8)]) == 6\nassert     max_difference([(5,15),(10,20),(4,8)]) == 9\nassert     max_difference([(5,15),(10,20),(10,8),(4,8)]) == 10\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    max_difference([(1, 2), (2, 3), (3, 4), (5, 6), (7, 8)]) == 2\n    assert \n        max_difference([(1, 2), (2, 3), (3, 4), (5, 6), (7, 8)]) == 2\n    assert \n        max_difference([(1, 2), (2, 3), (3, 4), (5, 6), (7, 8)]) == 0\n    assert \n        max_difference([(1, 2), (2, 3), (3, 4), (5, 6), (7, 8)]) == -1\n    assert \n        max_difference([(1, 2), (2, 3), (3, 4), (5, 6), (7, 8)]) == -1\n    "
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_difference(tuple_list) == (6, 7, 4, 8), \"tuple_list = (4, 2, 1, 7, 8)\"\nprint(\"Correct: max_difference() returns correct result.\")\n\ndef max_difference_v2(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if abs(test_list[i] - test_list[j]) > max_diff:\n                max_diff = abs(test_list[i] - test_list[j])\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_difference([1,2,3,4,5,6,7,8,9]) == 6, 'Wrong answer'\nassert     max_difference([1,2,3,4,5,6,7,8,9,10]) == 10, 'Wrong answer'\nassert     max_difference([1,2,3,4,5,6,7,8,9,10,11]) == 10, 'Wrong answer'\nassert     max_difference([1,2,3,4,5,6,7,8,9,10,11,12]) == 10, 'Wrong answer'\nassert     max_difference([1,2,3,4,5,6,7,8,9,10,11,12,13]) == 10, 'Wrong answer'\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_difference((1, 2, 3)) == 2\nassert     max_difference((5, 4, 1, 2, 3, 2)) == 3\nassert     max_difference((2, 2, 3, 4, 5, 6, 5, 5, 6, 7, 8, 7, 9, 7, 7, 7, 8, 8, 8, 8)) == 4\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n'''\nExample:\n\ntest_list = [(5, 6), (3, 4), (5, 5)]\n\nresult:\n\n5 - 3 = 2\n5 - 4 = 2\n5 - 5 = 0\n'''\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_difference([]) == 0\nassert max_difference([(0,0)]) == 0\nassert max_difference([(0,1), (0,2), (0,3)]) == 0\nassert max_difference([(1,0), (1,1), (1,2), (1,3)]) == 2\nassert max_difference([(2,0), (2,1), (2,2), (2,3)]) == 2\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     subject_marks([(2, 6), (1, 3), (3, 6), (2, 6)]) == [\n        (1, 3), (2, 6), (2, 6), (3, 6)]\nassert     subject_marks([(6, 2), (6, 5), (5, 1), (4, 6)]) == [(6, 5),\n        (6, 2), (5, 1), (4, 6)]\nassert     subject_marks([(1, 4), (4, 1), (3, 3), (5, 2)]) == [(1, 4), (4, 1),\n        (3, 3), (5, 2)]\nassert     subject_marks([(1, 3), (4, 5), (5, 1), (2, 5)]) == [(1, 3), (2, 5),\n        (4, 5), (5, 1)]\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     subject_marks([('Math', 80), ('English', 60), ('Science', 90), ('History', 40)]) == \\\n    [('Math', 80), ('English', 60), ('Science', 90), ('History', 40)], 'The function does not sort the tuples in the correct order.'\n\nassert     subject_marks([('English', 60), ('Math', 80), ('History', 40), ('Science', 90)]) == \\\n    [('Math', 80), ('English', 60), ('Science', 90), ('History', 40)], 'The function does not sort the tuples in the correct order.'\n\nassert     subject_marks([('English', 80), ('Math', 60), ('History', 40), ('Science', 90)]) == \\\n    [('English', 80), ('Math', 60), ('History', 40), ('Science', 90)], 'The function does not sort the tuples in the correct order.'\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     subject_marks([(2,5),(1,2),(4,4),(2,3)]) == [(2,5),(1,2),(4,4),(2,3)]\nassert     subject_marks([(2,5),(1,2),(4,4),(2,3)]) == [(1,2),(2,3),(2,5),(4,4)]\nassert     subject_marks([(2,5),(1,2),(4,4),(2,3)]) == [(1,2),(2,3),(2,5),(4,4)]\nassert     subject_marks([(2,5),(1,2),(4,4),(2,3)]) == [(1,2),(2,3),(2,5),(4,4)]\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     subject_marks([('A', 0), ('A', 2), ('A', 4), ('A', 6), ('B', 1)]) ==    \\\n        [('A', 0), ('A', 1), ('A', 2), ('A', 3), ('A', 4), ('A', 5), ('B', 1)]\nassert     subject_marks([('C', 0), ('D', 1), ('E', 2), ('F', 3), ('G', 4)]) == \\\n        [('C', 0), ('D', 1), ('E', 2), ('F', 3), ('G', 4)]\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     subject_marks([(7, 3), (1, 2), (3, 7), (5, 4)]) ==     [(1, 2), (3, 7), (5, 4), (7, 3)]\nassert     subject_marks([(8, 4), (3, 2), (2, 8), (1, 5)]) ==     [(1, 5), (2, 8), (3, 2), (8, 4)]\nassert     subject_marks([(1, 5), (1, 2), (4, 5), (5, 1)]) ==     [(1, 2), (1, 5), (4, 5), (5, 1)]\nassert     subject_marks([(4, 5), (2, 8), (3, 1), (8, 4)]) ==     [(3, 1), (2, 8), (4, 5), (8, 4)]\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n\n'''\n    Write a function to get a count of distinct subjects in a given course.\n    Function should return a dictionary.\n'''\n\ndef distinct_subjects(subjs,cours,crs_dict):\n    '''\n    Write a function to get a count of distinct subjects in a given course.\n    Function should return a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert         subject_marks([(1,2),(3,5),(3,1),(7,7),(4,8)]) == [(1, 2), (3, 5), (3, 1), (4, 8), (7, 7)]\nassert subject_marks([(1,2),(3,5),(3,1),(7,7),(4,8)]) == [(1, 2), (3, 5), (3, 1), (4, 8), (7, 7)]\nassert subject_marks([(7,6),(3,5),(3,1),(7,7),(4,8)]) == [(7,6), (3,5), (3,1), (4, 8), (7, 7)]\nassert subject_marks([(1,2),(3,5),(3,1),(7,7),(4,8)]) == [(1, 2), (3, 5), (3, 1), (4, 8), (7, 7)]\nassert subject_marks([(1,2),(3,5),(3,1),(4,8),(7,7)]) == [(1, 2), (3, 5), (3, 1), (4, 8), (7, 7)]\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     subject_marks([(10, 2), (30, 4), (2, 3), (10, 1), (5, 0)]) == \\\n        [(2, 3), (5, 0), (10, 1), (10, 2), (30, 4)]"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     recursive_list_sum([1,2,3,4,5]) == 15\nassert     recursive_list_sum([]) == 0\nassert     recursive_list_sum([[1,2],3,4,5]) == 15\nassert     recursive_list_sum([[1,2],3,[4,5]]) == 15\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     recursive_list_sum([[1,2,3,4],[5,6,7,8]])==11\nassert     recursive_list_sum([[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]])==55\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     recursive_list_sum(\n        [1,2,3]\n    ) == 6\nassert recursive_list_sum(\n        [1,2,3,4]\n    ) == 10\nassert recursive_list_sum(\n        [1,2,3,4,5]\n    ) == 15\nassert recursive_list_sum(\n        [1,2,3,4,5,6]\n    ) == 21\nassert recursive_list_sum(\n        [1,2,3,4,5,6,7]\n    ) == 28\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     recursive_list_sum(['a', 'b', 'c']) == 'abc', \"test_recursive_list_sum_1 is not correct\"\nassert     recursive_list_sum(['a', 'b', 'c', 'd']) == 'abc', \"test_recursive_list_sum_2 is not correct\"\nassert     recursive_list_sum(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m']) == 'abcdefghijk', \"test_recursive_list_sum_3 is not correct\"\nassert     recursive_list_sum(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']) == 'abcdefghijklnopqrstuvwxyz', \"test_recursive_list_sum_4 is not correct\"\nassert     recursive_list_sum(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']) == 'abcdefghijklnopqrstuvwxyz0123456789', \"test_recursive_list_sum_5 is not correct\"\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     recursive_list_sum([1,2,3,4,5]) == 15\nassert     recursive_list_sum([]) == 0\nassert     recursive_list_sum([1]) == 1\nassert     recursive_list_sum([1,2]) == 3\nassert     recursive_list_sum([1,2,3,4,5]) == 15\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     recursive_list_sum([[]]) == 0\nassert     recursive_list_sum([[], []]) == 0\nassert     recursive_list_sum([[1, 2, 3]]) == 6\nassert     recursive_list_sum([[1, 2], [3, 4]]) == 7\nassert     recursive_list_sum([[1, 2, 3, 4, 5, 6]]) == 21\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     recursive_list_sum([1,2,3,4,5]) == 15, \"the result is not 15\"\nassert     recursive_list_sum([1]) == 1, \"the result is not 1\"\nassert     recursive_list_sum([]) == 0, \"the result is not 0\"\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     recursive_list_sum([1,2,3])     == 6\nassert     recursive_list_sum([])     == 0\nassert     recursive_list_sum([1,2,3,1,2,3])     == 9"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     recursive_list_sum([]) == 0, 'Recursive list sum of empty list returns 0'\nassert     recursive_list_sum([1]) == 1, 'Recursive list sum of a single element returns 1'\nassert     recursive_list_sum([1,2,3]) == 6, 'Recursive list sum of 3 elements returns 6'\nassert     recursive_list_sum([1,2,3,4,5]) == 15, 'Recursive list sum of 4 elements returns 15'\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     recursive_list_sum([1,2,3]) == 1 + 2 + 3, 'incorrect'\nassert     recursive_list_sum([1,1,2,3]) == 1 + 1 + 2 + 3, 'incorrect'\nassert     recursive_list_sum([1,1,1,2,3]) == 1 + 1 + 1 + 2 + 3, 'incorrect'\nassert     recursive_list_sum([]) == 0, 'incorrect'\nassert     recursive_list_sum([1]) == 1, 'incorrect'\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     pos_count([1,-10,2,3,4,-10,1]) == 4, 'pos_count([1,-10,2,3,4,-10,1])!= 4'\nassert     pos_count([-10,1,-2,-3,-4,1]) == 5, 'pos_count([-10,1,-2,-3,-4,1])!= 5'\nassert     pos_count([0,0,0,0]) == 0, 'pos_count([0,0,0,0])!= 0'\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     pos_count([-1, 0, 1, 2, 3, 4, 5, 6, 7]) == 7\nassert pos_count([-1, 0, 1, 2, 3, 4, 5, 6, -7]) == 6\nassert pos_count([-1, 0, 1, 2, 3, 4, 5, 6, -1]) == 6\nassert pos_count([-1, 0, 1, 2, 3, 4, 5, 6]) == 5\nassert pos_count([-1, 0, 1, 2, 3, 4, 5, 6, 7, 8]) == 4\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    \nif __name__ == '__main__':\n    list1 = [1, 2, -3, -4, -5, 0]\n    print(pos_count(list1))\n    assert 4 == pos_count(list1)\n\n    list2 = [-12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1]\n    print(pos_count(list2))\n    assert 5 == pos_count(list2)\n\n    list3 = [-1]\n    print(pos_count(list3))\n    "
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     pos_count([1, 4, -3, -1, -5, -9]) == 6\nassert     pos_count([]) == 0\nassert     pos_count([-5, -1, -9, -1]) == 3\nassert     pos_count([-5, -1, -9, -1, -1, -5, -1]) == 3\nassert     pos_count([1, 3, 5, 6, -1, -9]) == 5\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     pos_count([]) == 0\nassert     pos_count([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 8\nassert     pos_count([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == 9\nassert     pos_count([0, 0, 0, 0, 0]) == 1\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     pos_count([0,1,2,3,4,5,6,7,8,9]) == 10, \"Wrong return value\"\nassert pos_count([10, -3, 8, -10, 5, 6, 2, 4, -9]) == 6, \"Wrong return value\"\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     pos_count([-1,1,0,2,0,1,1]) == 3, 'Wrong output'\nprint('Test passed')\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     pos_count([5, -6, -2, 8, 0, 0, 0, 0, -2, -1]) == 1, \"Wrong result\"\nassert     pos_count([-5, -6, -2, 8, 0, 0, 0, 0, -2, -1]) == 5, \"Wrong result\"\nassert     pos_count([5, -6, -2, 8, 0, 0, 0, 0, -2, -1, -5]) == 1, \"Wrong result\"\nassert     pos_count([-5, -6, -2, 8, 0, 0, 0, 0, -2, -1, -5, -6]) == 4, \"Wrong result\"\nassert     pos_count([5, -6, -2, 8, 0, 0, 0, 0, -2, -1, -5, 0]) == 3, \"Wrong result\"\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     bell_number(4)==2 \nassert     bell_number(5)==3 \nassert     bell_number(6)==7 \nassert     bell_number(7)==5 \nassert     bell_number(8)==8 \n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     bell_number(1) == 1\nassert     bell_number(2) == 2\nassert     bell_number(3) == 5\nassert     bell_number(4) == 10\nassert     bell_number(5) == 22\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     bell_number(1) == 1\nassert bell_number(2) == 2\nassert bell_number(3) == 3\nassert bell_number(4) == 5\nassert bell_number(5) == 8\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef test_bell_number():\n    print(\"Testing bell_number()\")\n    assert bell_number(0) == 0\n    assert bell_number(1) == 1\n    assert bell_number(2) == 2\n    "
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef factorial(n):\n    '''\n    Write a function to compute the factorial of a number (a non-negative integer).\n    '''\n    pass\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     bell_number(4) == 7\nassert     bell_number(11) == 11\nassert     bell_number(5) == 11\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nbell_number(1) == 1\nbell_number(2) == 2\nbell_number(3) == 3\nbell_number(4) == 5\nbell_number(5) == 8\nbell_number(6) == 13\nbell_number(7) == 21\nbell_number(8) == 34\nbell_number(9) == 55\nbell_number(10) == 89\nbell_number(11) == 145\nbell_number(12) == 233\nbell_number(13) == 377\nbell_number(14) == 610\nbell_number(15) == 1555\nbell_number(16) == 3584\nbell_number(17) == 7083\nbell_number(18) == 12343\nbell_number(19) == 24133\nbell_number(20) == 452643\nbell_number(21) == 664343\nbell_number(22) == 1116343\nbell_number(23) == 242643\nbell_number(24) == 476343\nbell_number(25) == 865263\nbell_number(26) == 1555263\nbell_number(27) == 3465263\nbell_number(28) == 576263\nbell_number(29) == 1116263\nbell_number(30) == 2665263\nbell_number(31) == 476263\nbell_number(32) == 876263\nbell_number(33) == 1555263\nbell_number(34) == 3465263\nbell_number(35) == 576263\nbell_number(36) == 1116263\nbell_number(37) == 2665263\nbell_number(38) == 476263\nbell_number(39) == 876263\nbell_number(40) == 1555263\nbell_number(41) == 3465263\nbell_number(42) == 576263\nbell_number(43) == 1116263\nbell_number(44) == 2665263\nbell_number(45) == 476263\nbell_number(46) == 876263\nbell_number(47) == 1555263\nbell_number(48) == 3465263\nbell_number(49) == 576263\nbell_number(50) == 1116263\nbell_number(51) == 2665263\nbell_number(52) == 476263\nbell_number(53) == 876263\nbell_number(54) == 1555263\nbell_number(55) == 3465263\nbell_number(56) == 576263\nbell_number(57) == 1116263\nbell_number(58) == 2665263\nbell_number(59) == 476263\nbell_number(60) == 876263\nbell_number(61) == 1555263\nbell_number(62) == 3465263\nbell_number(63) == 576263\nbell_number(64) == 1116263\nbell_number(65) == 2665263\nbell_number(66) == 476263\nbell_number(67) == 876263\nbell_number(68) == 1555263\nbell_number(69) == 3465263\nbell_number(70) == 576263\nbell_number(71) == 1116263\nbell_number(72) == 2665263\nbell_number(73) == 476263\nbell_number(74) == 876263\nbell_number(75) == 1555263\nbell_number(76) == 3465263\nbell_number(77) == 576263\nbell_number(78) == 1116263\nbell_number(79) == 2665263\nbell_number(80) == 476263\nbell_number(81) == 876263\nbell_number(82) == 1555263\nbell_number(83) == 3465263\nbell_number(84) == 576263\nbell_number(85) == 1116263\nbell_number(86) == 2665263\nbell_number(87) == 476263\nbell_number(88) == 876263\nbell_number(89) == 1555263\nbell_number(90) == 3465263\nbell_number(91) == 576263\nbell_number(92) == 1116263\nbell_number(93) == 2665263\nbell_number(94) == 476263\nbell_number(95) == 876263\nbell_number(96) == 1555263\nbell_number(97) == 3465263\nbell_number(98) == 576263\nbell_number(99) == 1116263\nbell_number(100) == 2665263\nbell_number(101) == 476263\nbell_number(102) == 876263\nbell_number(103) == 1555263\nbell_number(104) == 3465263\nbell_number(105) == 576263\nbell_number(106) == 1116263\nbell_number(107) == 2665263\nbell_number(108) == 476263\nbell_number(109) == 876263\nbell_number(110) == 1555263\nbell_number(111) == 3465263\nbell_number(112) == 576263\nbell_number(113) == 1116263\nbell_number(114) == 2665263\nbell_number(115) == 476263\nbell_number(116) == 876263\nbell_number(117) == 1555263\nbell_number(118) == 3465263\nbell_number(119) == 576263\nbell_number(120) == 1116263\nbell_number(121) == 2665263\nbell_number(122) == 476263\nbell_number(123) == 876263\nbell_number(124) == 1555263\nbell_number(125) == 3465263\nbell_number(126) == 576263\nbell_number(127) == 1116263\nbell_number(128) == 2665263\nbell_number(129) == 476263\nbell_number(130) == 876263\nbell_number(131) == 1555263\nbell_number(132) == 3465263\nbell_number(133) == 576263\nbell_number(134) == 1116263\nbell_number(135) == 2665263\nbell_number(136) == 476263\nbell_number(137) == 876263\nbell_number(138) == 1555263\nbell_number(139) == 3465263\nbell_number(140) == 576263\nbell_number(141) == 1116263\nbell_number(142) == 2665263\nbell_number(143) == 476263\nbell_number(144) == 876263\nbell_number(145) == 1555263\nbell_number(146) == 3465263\nbell_number(147) == 576263\nbell_number(148) == 1116263\nbell_number(149) == 2665263\nbell_number(150) == 476263\nbell_number(151) == 876263\nbell_number(152) == 1555263\nbell_number(153) == 3465263\nbell_number(154) == 576263\nbell_number(155) == 1116263\nbell_number(156) == 2665263\nbell_number(157) == 476263\nbell_number(158) == 876263\nbell_number(159) == 1555263\nbell_number(160) == 3465263\nbell_number(161) == 576263\nbell_number(162) == 1116263\nbell_number(163) == 2665263\nbell_number(164) == 476263\nbell_number(165) == 876263\nbell_number(166) == 1555263\nbell_number(167) == 3465263\nbell_number(168) == 576263\nbell_number(169) == 1116263\nbell_number(170) == 2665263\nbell_number(171) == 476263\nbell_number(172) == 876263\nbell_number(173) == 1555263\nbell_number(174) == 3465263\nbell_number(175) == 576263\nbell_number(176) == 1116263\nbell_number(177) == 2665263\nbell_number(178) == 476263\nbell_number(179) == 876263\nbell_number(180) == 1555263\nbell_number(181) == 3465263\nbell_number(182) == 576263\nbell_number(183) == 1116263\nbell_number(184) == 2665263\nbell_number(18"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     bell_number(5) == 5, \"bell_number(5)\"\nassert     bell_number(10) == 12, \"bell_number(10)\"\nassert     bell_number(1) == 0, \"bell_number(1)\"\nassert     bell_number(2) == 2, \"bell_number(2)\"\nassert     bell_number(4) == 4, \"bell_number(4)\"\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_Monotonic([1, 2, 1, 3, 4, 4, 3, 2, 1]) == True, \"is_Monotonic([1, 2, 1, 3, 4, 4, 3, 2, 1]) should return True\"\nassert     is_Monotonic([1, 1, 1, 1, 1]) == True, \"is_Monotonic([1, 1, 1, 1, 1]) should return True\"\nassert     is_Monotonic([1, 1, 2, 1, 2, 2]) == False, \"is_Monotonic([1, 1, 2, 1, 2, 2]) should return False\"\n\nprint(\"All Tests are Passed!\")"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_Monotonic([1, 2, 3, 4]) == True, \"is_Monotonic failed\"\nassert     is_Monotonic([1, 1, 2, 2, 3]) == True, \"is_Monotonic failed\"\nassert     is_Monotonic([1, 2, 1, 2, 2, 2, 3, 4]) == False, \"is_Monotonic failed\"\nassert     is_Monotonic([1, 2, 3, 2, 1]) == False, \"is_Monotonic failed\"\nassert     is_Monotonic([1, 1, 2, 2, 2, 3]) == True, \"is_Monotonic failed\"\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert not is_Monotonic([1,2,2,1])\nassert is_Monotonic([1,2,2,2])\nassert is_Monotonic([1,1,1])\nassert is_Monotonic([1,2,3,4])\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    is_Monotonic([1,2,3,3,2,1]) == False\n    is_Monotonic([1,1,1,1]) == True\n    is_Monotonic([1,1,1,2]) == False\n    is_Monotonic([1,1,1,2,2]) == True\n    is_Monotonic([1,2,3,4]) == False\n    is_Monotonic([1,2,3,4,4]) == True\n    is_Monotonic([1,1,2,2,3,3]) == False\n    is_Monotonic([1,1,2,2,3,3,3]) == True\n    is_Monotonic([2,1,1,2,3,2,3,2,2]) == False\n    is_Monotonic([2,1,1,2,3,2,3,2,2,2]) == True\n    is_Monotonic([-5,-4,-3,-2,-1,0,1,2,3,4,5]) == False\n    is_Monotonic([-5,-4,-3,-2,-1,0,1,2,3,4,5,5]) == True\n    is_Monotonic([]) == False\n    is_Monotonic([1,2,2,2,1,1,2]) == False\n    is_Monotonic([1,2,3,4,5]) == True\n    is_Monotonic([1,1,1,1,1,1,1]) == True\n    is_Monotonic([]) == False"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_Monotonic([1,1,1]) == True, 'Fail'\nassert     is_Monotonic([1,1,2]) == False, 'Fail'\nassert     is_Monotonic([1,2,1]) == True, 'Fail'\nassert     is_Monotonic([1,2,3]) == True, 'Fail'\nassert     is_Monotonic([3,2,1]) == True, 'Fail'\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_Monotonic([1, 2, 4, 5]) == True\nassert     is_Monotonic([1, 2, 4, 5, -1]) == True\nassert     is_Monotonic([1, 2, 4, 5, 4]) == False\n\ndef reverse(array): \n    '''\n    Write a python function to reverse a list of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint('All tests have passed!')"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nis_Monotonic([-1, -1, 1, 1, 1])\nis_Monotonic([-1, 1, -1, 1])\nis_Monotonic([-1, -1, 1, 2, 1])\nis_Monotonic([-1, 1, -1, 1, -1])\nis_Monotonic([-1, 2, 1, -1])\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_sublist([1,2,3,4,5,6], [1,2,3,4,5]) == False, 'incorrect'\nassert     is_sublist([1,2,3,4,5,6], [1,2,3,4,5,6,1]) == False, 'incorrect'\nassert     is_sublist([1,2,3,4,5,6], [1,2,3,4,5,6,1,2]) == True, 'incorrect'\nassert     is_sublist([1,2,3,4,5,6], [1,2,3,4,5,6,1,2,3]) == False, 'incorrect'\nassert     is_sublist([1,2,3,4,5,6], [1,2,3,4,5,6,1,2,3,4]) == True, 'incorrect'\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nis_sublist([1, 2, 3], [1, 2])"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_sublist([1,2], [1])\nassert     is_sublist([1,2], [1,2])\nassert     is_sublist([1,2], [2]) == False\nassert     is_sublist([1,2], []) == True\nassert     is_sublist([1], [1]) == True\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_sublist([1,2,3,4,5], [1,2]) == True\nassert     is_sublist([1,2,3,4,5], [1,2,3]) == False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_sublist([1, 2], [1]) == True, \"is_sublist([1, 2], [1]) should be True\"\nassert     is_sublist([1, 2], [1, 2]) == True, \"is_sublist([1, 2], [1, 2]) should be True\"\nassert     is_sublist([1, 2], [1, 2, 3]) == False, \"is_sublist([1, 2], [1, 2, 3]) should be False\"\nassert     is_sublist([1, 2], [1, 2, 3, 4]) == False, \"is_sublist([1, 2], [1, 2, 3, 4]) should be False\"\nassert     is_sublist([1, 2, 3], [1, 2]) == True, \"is_sublist([1, 2, 3], [1, 2]) should be True\"\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_sublist([], [[]])     == True\nassert     is_sublist([], [[]])     == True\nassert     is_sublist([[1, 2], [3, 4]], [[1, 2]])     == True\nassert     is_sublist([[1, 2], [3, 4]], [[1, 2], [3]])     == True\nassert     is_sublist([[1, 2], [3, 4]], [[1, 2], [3], [4]])     == True\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_sublist([1,2,3,4], [1,2,3]) == True\nassert     is_sublist([1,2,3,4], [1,2,4]) == False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_sublist([1,2,3], [1,2]) == True\nassert     is_sublist([1,2,3], [1,3]) == False\nassert     is_sublist([1,2,3], []) == False\nassert     is_sublist([], []) == False\nassert     is_sublist([1], [1,2]) == False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_sublist([], []) == False\nassert     is_sublist([], [1]) == False\nassert     is_sublist([1, 2], [1]) == True\nassert     is_sublist([1, 2, 3], [1]) == True\nassert     is_sublist([1, 2, 3, 4], [1]) == True\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nassert is_sublist([1,2], [1,2]) == True\nassert is_sublist([1,2,3], [1,2]) == True\nassert is_sublist([1,2,3], [1,3]) == True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_equal_tuple([(1, 2, 3, 4), (5, 6)]) == False, \\\n    \"Should return False if all the given tuples are not of equal length.\"\nassert     find_equal_tuple([(1, 2, 3), (5, 6)]) == True, \\\n    \"Should return True if all the given tuples are of equal length.\"\n\nprint(\"All test cases passed\")"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_equal_tuple([[1, 2], [3, 4]]) == True, 'test 1 fail'\nassert     find_equal_tuple([[1, 2, 3], [4, 5]]) == False, 'test 2 fail'\nassert     find_equal_tuple([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == True, 'test 3 fail'\nassert     find_equal_tuple([[1, 2, 3], [4], [5]]) == False, 'test 4 fail'\nassert     find_equal_tuple([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11]]) == True, 'test 5 fail'\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_equal_tuple([('Alex', 10), ('Bob', 12), ('David', 20)]) == True, 'Test Case 1'\nassert     find_equal_tuple([('Alex', 10), ('Bob', 11), ('David', 20)]) == False, 'Test Case 2'\nassert     find_equal_tuple([('Alex', 10), ('Bob', 11), ('Alex', 20)]) == True, 'Test Case 3'\nassert     find_equal_tuple([('Alex', 10), ('Bob', 11), ('Alex', 20)]) == False, 'Test Case 4'\nassert     find_equal_tuple([('Alex', 10), ('Bob', 11), ('Alex', 20)]) == True, 'Test Case 5'\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nfind_equal_tuple([(1, 2, 3), (1, 2, 3), (1, 2, 3)])"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef find_triple_tuple(Input):\n    '''\n    Write a function to find the 3-tuple whose sum is equal to the target sum.\n    If there are multiple 3-tuples whose sum is equal to the target sum, return any of them.\n    '''\n    pass\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_equal_tuple([(1,2), (1,3,4)]) == True, \"2,3,4,1,1,1,1\"\nassert     find_equal_tuple([(1,2), (1,2)]) == False, \"2,1,1,1\"\nassert     find_equal_tuple([(1,2), (1,2,3)]) == False, \"2,1,1,1,2\"\nassert     find_equal_tuple([(1,2), (1,2,3,4)]) == False, \"2,1,1,1,2,2\"\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_equal_tuple(('hi','hi', 'hi')) == True\nassert     find_equal_tuple(('hi','hi', 'hi')) == True\nassert     find_equal_tuple(('hi','hi', 'hi', 'hi')) == False\nassert     find_equal_tuple(('hi','hi', 'hi', 'hi', 'hi', 'hi')) == False\nassert     find_equal_tuple(('hi','hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi')) == True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_equal_tuple([(1,2,3),(1,2,3)]) == True\nassert     find_equal_tuple([(1,2,3),(1,2,3),(1,2,3)]) == False\nassert     find_equal_tuple([(1,2),(1,2),(1,2)]) == False\nassert     find_equal_tuple([(1,2,3,4,5),(1,2,3,4,5)]) == True\nassert     find_equal_tuple([(1,2,3),(1,2,3),(1,2,3)]) == False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_equal_tuple([(1,2),(3,4)]) == True, \"Wrong result\"\nassert     find_equal_tuple([(1,2),(3,)]) == False, \"Wrong result\"\nassert     find_equal_tuple([(1,2),(3,4,5)]) == False, \"Wrong result\"\nassert     find_equal_tuple([(1,),(1,2)]) == False, \"Wrong result\"\nassert     find_equal_tuple([(1,),(1,2)]) == False, \"Wrong result\"\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_equal_tuple( (1,2,3), (1,2,3), (1,2,3), (1,2,3) ) == False\nassert     find_equal_tuple( (1,2,3), (1,2,3,4), (1,2,3,4), (1,2,3,4) ) == True\nassert     find_equal_tuple( (1,2,3,4), (1,2,3,4), (1,2,3,4), (1,2,3,4) ) == True\nassert     find_equal_tuple( (1,2,3), (1,2,3), (1,2,3), (1,2,3) ) == False\nassert     find_equal_tuple( (1,2), (1,2,3), (1,2,3), (1,2,3) ) == False\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     comb_sort([1,2,3,4]) ==    [1,2,3,4], 'Fail'\nassert     comb_sort([3,4,1,2]) ==    [1,2,3,4], 'Fail'\nassert     comb_sort([2,1,3,4]) ==    [1,2,3,4], 'Fail'\nassert     comb_sort([3,2,1,4]) ==    [1,2,3,4], 'Fail'\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     comb_sort([0]) == [0], 'Wrong solution!'\nassert comb_sort([1, 2, 3, 4]) == [1, 2, 3, 4], 'Wrong solution!'\nassert comb_sort([9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9], 'Wrong solution!'\nassert comb_sort([6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6], 'Wrong solution!'\nassert comb_sort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5], 'Wrong solution!'\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert comb_sort([4,1,2,3,2,4]) == [1, 2, 2, 3, 4, 4]\nassert comb_sort([1,2,3,4]) == [1, 2, 3, 4]\n\ndef comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     comb_sort([4,5,6,7,8,9]) == [4,5,6,7,8,9]\nassert     comb_sort([7,9,2,4,5,8,9]) == [2,4,5,7,9,9,8]\nassert     comb_sort([2,7,9,5,8,4,6]) == [2,4,5,7,8,9,6]\nassert     comb_sort([5,6,4,9,2,7,8]) == [2,4,5,6,7,9,8]\nassert     comb_sort([8,7,4,6,2,5,9]) == [2,4,5,6,7,8,9]\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     comb_sort([7, 5, 1, 2, 3, 4]) == [1, 2, 3, 4, 5, 7]\nassert     comb_sort([7, 5, 1, 2, 3, 4, 8, 9]) == [1, 2, 3, 4, 5, 7, 8, 9]\nassert     comb_sort([7, 5, 1, 2, 3, 4, 5, 7, 6, 8, 9]) == [1, 2, 3, 4, 5, 7, 6, 7, 8, 9]\nassert     comb_sort([7, 5, 1, 2, 3, 4, 5, 7, 6, 8, 9, 10, 11, 12, 13]) == [1, 2, 3, 4, 5, 7, 6, 7, 8, 9, 10, 11, 12, 13]\nassert     comb_sort([2, 5, 3, 1, 4, 6, 8, 9, 10, 7, 12, 13]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     comb_sort([]) == []\nassert comb_sort([1]) == [1]\nassert comb_sort([1,2]) == [1,2]\nassert comb_sort([1,2,3]) == [1,2,3]\nassert comb_sort([2,1,3,4,5]) == [1,2,3,4,5]\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     comb_sort([3,2,1]) == [1,2,3], comb_sort([3,2,1])\nassert     comb_sort([0,0,1]) == [0,0,1], comb_sort([0,0,1])\nassert     comb_sort([-1,-2,-3]) == [-3,-2,-1], comb_sort([-1,-2,-3])\nassert     comb_sort([-123,321,-123]) == [-123,-321,-123], comb_sort([-123,321,-123])\nassert comb_sort([12,3,2]) == [2,3,12], comb_sort([12,3,2])\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     dif_Square(10) == True\nassert     dif_Square(11) == False\nassert     dif_Square(-10) == True\nassert     dif_Square(-11) == False\nassert     dif_Square(0) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     dif_Square(0) == False, \"dif_Square should return False for n = 0\"\nassert     dif_Square(4) == False, \"dif_Square should return False for n = 4\"\nassert     dif_Square(5) == False, \"dif_Square should return False for n = 5\"\nassert     dif_Square(6) == True, \"dif_Square should return True for n = 6\"\nassert     dif_Square(7) == False, \"dif_Square should return False for n = 7\"\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     dif_Square(1) == True, \"For 1, 1 must be True\"\nassert     dif_Square(3) == True, \"For 3, 2 must be True\"\nassert     dif_Square(4) == False, \"For 4, 4 or 5 must be False\"\nassert     dif_Square(5) == True, \"For 5, 5 must be True\"\nassert     dif_Square(6) == False, \"For 6, 3 must be False\"\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ndif_Square(2)\nassert \ndif_Square(5)\nassert \ndif_Square(4)\nassert \ndif_Square(8)\nassert\ndif_Square(10)\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     dif_Square(1) == False\nassert     dif_Square(4) == True\nassert     dif_Square(6) == True\nassert     dif_Square(8) == True\nassert     dif_Square(27) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     dif_Square(10) == True, \"Should be true\"\nassert     dif_Square(15) == False, \"Should be false\"\nassert     dif_Square(16) == True, \"Should be true\"\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     dif_Square(11) == True, \"11 = 2^2 + 2^2 = 5\"\nassert dif_Square(100) == False, \"100 = 2^4 + 2^4 = 16\"\nassert dif_Square(0) == False, \"0 = 0 = 0\"\nassert dif_Square(1) == False, \"1 = 1 = 1\"\nassert dif_Square(2) == False, \"2 = 2 = 0\"\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ndif_Square(0), \"True\"\ndif_Square(1), \"True\"\ndif_Square(4), \"True\"\ndif_Square(5), \"False\"\ndif_Square(9), \"True\"\ndif_Square(10), \"True\"\ndif_Square(31), \"False\"\ndif_Square(99), \"False\"\ndif_Square(100), \"False\"\ndif_Square(101), \"False\"\ndif_Square(111), \"True\"\ndif_Square(112), \"True\"\ndif_Square(113), \"True\"\ndif_Square(131), \"False\"\ndif_Square(132), \"False\"\ndif_Square(133), \"False\"\ndif_Square(2014), \"False\"\ndif_Square(2030), \"True\"\ndif_Square(2031), \"False\"\ndif_Square(2233), \"True\"\ndif_Square(2234), \"False\"\ndif_Square(9900), \"False\"\ndif_Square(9901), \"False\"\ndif_Square(9902), \"False\"\ndif_Square(9903), \"False\"\ndif_Square(9904), \"False\"\ndif_Square(9905), \"False\"\ndif_Square(9906), \"False\"\ndif_Square(9907), \"False\"\ndif_Square(9908), \"False\"\ndif_Square(9909), \"False\"\ndif_Square(9910), \"False\"\ndif_Square(9911), \"False\"\ndif_Square(9912), \"False\"\ndif_Square(9913), \"False\"\ndif_Square(9914), \"False\"\ndif_Square(9915), \"False\"\ndif_Square(9916), \"False\"\ndif_Square(9917), \"False\"\ndif_Square(9918), \"False\"\ndif_Square(9919), \"False\"\ndif_Square(9920), \"True\"\ndif_Square(9921), \"False\"\ndif_Square(9922), \"False\"\ndif_Square(9923), \"True\"\ndif_Square(9924), \"False\"\ndif_Square(9925), \"False\"\ndif_Square(9926), \"False\"\ndif_Square(9927), \"False\"\ndif_Square(9928), \"False\"\ndif_Square(9929), \"True\"\ndif_Square(9930), \"False\"\ndif_Square(9931), \"False\"\ndif_Square(9932), \"False\"\ndif_Square(9933), \"False\"\ndif_Square(9934), \"True\"\ndif_Square(9935), \"False\"\ndif_Square(9936), \"False\"\ndif_Square(9937), \"False\"\ndif_Square(9938), \"False\"\ndif_Square(9939), \"False\"\ndif_Square(9940), \"False\"\ndif_Square(9941), \"True\"\ndif_Square(9942), \"True\"\ndif_Square(9943), \"True\"\ndif_Square(9944), \"False\"\ndif_Square(9945), \"False\"\ndif_Square(9946), \"False\"\ndif_Square(9947), \"True\"\ndif_Square(9948), \"False\"\ndif_Square(9949), \"True\"\ndif_Square(9950), \"False\"\ndif_Square(9951), \"True\"\ndif_Square(9952), \"False\"\ndif_Square(9953), \"True\"\ndif_Square(9954), \"False\"\ndif_Square(9955), \"False\"\ndif_Square(9956), \"True\"\ndif_Square(9957), \"False\"\ndif_Square(9958), \"False\"\ndif_Square(9959), \"False\"\ndif_Square(9960), \"False\"\ndif_Square(9961), \"True\"\ndif_Square(9962), \"True\"\ndif_Square(9963), \"True\"\ndif_Square(9964), \"False\"\ndif_Square(9965), \"True\"\ndif_Square(9966), \"False\"\ndif_Square(9967), \"False\"\ndif_Square(9968), \"True\"\ndif_Square(9969), \"True\"\ndif_Square(9970), \"False\"\ndif_Square(9971), \"True\"\ndif_Square(9972), \"True\"\ndif_Square(9973), \"False\"\ndif_Square(9974), \"True\"\ndif_Square(9975), \"False\"\ndif_Square(9976), \"True\"\ndif_Square(9977), \"True\"\ndif_Square(9978), \"False\"\ndif_Square(9979), \"True\"\ndif_Square(9980), \"True\"\ndif_Square(9981), \"False\"\ndif_Square(9982), \"True\"\ndif_Square(9983), \"False\"\ndif_Square(9984), \"True\"\ndif_Square(9985), \"True\"\ndif_Square(9986), \"False\"\ndif_Square(9987), \"True\"\ndif_Square(9988), \"True\"\ndif_Square(9989), \"False\"\ndif_Square(9990), \"True\"\ndif_Square(9991), \"True\"\ndif_Square(9992), \"False\"\ndif_Square(9993), \"True\"\ndif_Square(9994), \"True\"\ndif_Square(9995), \"False\"\ndif_Square(9996), \"True\"\ndif_Square(9997), \"True\"\ndif_Square(9998), \"False\"\ndif_Square(9999), \"True\"\ndif_Square(10000), \"True\"\ndif_Square(10001), \"False\"\ndif_Square(10002), \"True\"\ndif_Square(10003), \"False\"\ndif_Square(10004), \"True\"\ndif_Square(10005), \"False\"\ndif_Square(10006), \"True\"\ndif_Square(10007), \"False\"\ndif_Square(10008), \"True\"\ndif_Square(10009), \"True\"\ndif_Square(10010), \"False\"\ndif_Square(10011), \"True\"\ndif_Square(10012), \"True\"\ndif_Square(10013), \"True\"\ndif_Square(10014), \"False\"\ndif_Square(10015), \"False\"\ndif_Square(10016), \"True\"\ndif_Square(10017), \"True\"\ndif_Square(10018), \"False\"\ndif_Square(10019), \"False\"\ndif_Square(10020), \"False\"\ndif_Square(10021), \"True\"\ndif_Square(10022), \"False\"\ndif_Square(10023), \"True\"\ndif_Square(10024), \"False\"\ndif_Square(10025), \"True\"\ndif_Square(10026), \"False\"\ndif_Square(10027), \"False\"\ndif_Square(10028), \"True\"\ndif_Square(10029), \"False\"\ndif_Square(10030), \"True\"\ndif_Square(10031), \"True\"\ndif_Square(10032), \"False\"\ndif_Square(10033), \"True\"\ndif_Square(10034), \"False\"\ndif_Square(10035), \"True\"\ndif_Square(10036), \"False\"\ndif_Square(10037), \"True\"\ndif_Square(10038), \"False\"\ndif_Square(10039), \"True\"\ndif_Square(10040), \"False\"\ndif_Square(10041), \"True\"\ndif_Square(10042), \"False\"\ndif_Square(10043), \"False\"\ndif_Square(10044), \"True\"\ndif_Square(10045), \"False\"\ndif_Squar"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_samepatterns(['red', 'blue', 'blue','red','red'],    ['red', 'green','red', 'green','red']) == True, \\\n        \"Error in function 'is_samepatterns'\"\nassert     is_samepatterns(['red', 'blue','red', 'blue', 'blue'],    ['red', 'green', 'blue','red', 'blue']) == False, \\\n        \"Error in function 'is_samepatterns'\"\nassert     is_samepatterns(['red', 'green', 'blue','red', 'blue'],    ['red', 'green', 'blue','red', 'blue']) == False, \\\n        \"Error in function 'is_samepatterns'\"\nassert     is_samepatterns(['red','red','red','red','red'],    ['red', 'green','red', 'blue','red']) == False, \\\n        \"Error in function 'is_samepatterns'\"\n\n'''\nQuestion 4\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_samepatterns([1, 2, 3, 1], [1, 2, 3, 1]) is False, \"Wrong!\"\nassert     is_samepatterns([1, 2, 3, 1], [1, 2, 3, 1, 2, 3]) is True, \"Wrong!\"\nassert     is_samepatterns([1, 2, 3, 1], [1, 2, 3, 1, 2, 3, 1]) is True, \"Wrong!\""
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_samepatterns(colors, patterns) == True, \"Test 1 failed.\"\nassert     is_samepatterns(colors, patterns) == False, \"Test 1 failed.\"\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_samepatterns(['red', 'orange', 'yellow', 'green', 'blue'], ['red', 'orange', 'yellow', 'green', 'blue', 'orange', 'yellow','red'])\nassert     is_samepatterns(['red', 'green', 'blue'], ['red', 'blue', 'green','red'])\nassert     is_samepatterns([], ['red', 'green', 'blue'])\nassert not is_samepatterns(['red', 'green', 'blue'], ['red', 'yellow', 'blue'])\nassert not is_samepatterns(['red', 'green', 'blue'], ['yellow', 'green', 'blue'])\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef is_same_colors(colors, patterns):\n    '''\n    Write a function that check whether all colors of the given colors array follow the same\n    pattern.\n    '''\n    pass\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_samepatterns(colors = [1, 2, 1, 3, 2, 4, 2, 5, 3, 6, 4, 7, 5], patterns = [[1, 2, 1, 3, 2, 4, 2, 5, 3, 6, 4, 7, 5], [1, 2, 1, 3, 1, 4, 2, 5, 3, 6, 4, 7, 5]])\nassert     is_samepatterns(colors = [1, 2, 1, 3, 2, 4, 2, 5, 3, 6, 4, 7, 5], patterns = [[1, 2, 1, 3, 2, 4, 2, 5, 3, 6, 4, 7, 5], [1, 2, 1, 3, 1, 4, 2, 5, 3, 6, 4, 7, 5]]) == False\nassert     is_samepatterns(colors = [1, 2, 1, 3, 2, 4, 2, 5, 3, 6, 4, 7, 5], patterns = [[1, 2, 1, 3, 2, 4, 2, 5, 3, 6, 4, 7, 5], [1, 2, 1, 3, 1, 4, 2, 5, 3, 6, 4, 7, 5]]) == True\n\n\ndef is_samepatterns_with_order(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_tuples([(1,2,3), (1,2), (2,3), (4,5,6), (7,8,9), (0,1)], 5) == \\\n[[0, 1], [2, 3], [4, 5], [6, 7], [8, 9]]\nassert find_tuples([(1,2,3), (1,2), (2,3), (4,5,6), (7,8,9), (0,1)], 9) == \\\n[[0, 1], [2, 3], [4, 5], [6, 7], [8, 9]]\n\ndef find_tuples_dp(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_tuples( [(2,5,7),(1,2,3),(4,5,6)], 3) == [(2,2,3)]\nassert     find_tuples( [(2,5,7),(1,2,3),(4,5,6)], 4) == [(2,2,3),(1,2,3)]\nassert     find_tuples( [(2,5,7),(1,2,3),(4,5,6)], 2) == []\nassert     find_tuples( [(2,5,7),(1,2,3),(4,5,6)], 7) == []\nassert     find_tuples( [(2,5,7),(1,2,3),(4,5,6)], 0) == []\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(find_tuples([(1,2,3),(3,2,1),(3,4,6,7),(1,3,4)],4))\n\nassert \nprint(find_tuples([(1,2,3,4),(3,2,1,5),(3,4,6,7,8)],4))"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_tuples([(2, 4), (3, 6), (5, 10), (8, 12)], 3) == [\n(2, 4), (3, 6), (5, 10)]\nassert     find_tuples([(2, 4), (3, 6), (5, 10), (8, 12)], 10) == []\nassert     find_tuples([(2, 4), (3, 6), (5, 10), (8, 12)], 6) == [(3, 6)]\nassert     find_tuples([(2, 4), (3, 6), (5, 10), (8, 12)], 5) == [(2, 4), (3, 6)]\nassert     find_tuples([(2, 4), (3, 6), (5, 10), (8, 12)], 1) == [(3, 6)]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_tuples([(1, 2, 3), (3, 4, 5), (6, 7, 8)], 2) == [(1, 2, 3), (3, 4, 5), (6, 7, 8)]\nassert     find_tuples([(1, 2, 3), (3, 4, 5), (6, 7, 8)], 3) == [(1, 2, 3)]\nassert     find_tuples([(1, 2, 3), (3, 4, 5), (6, 7, 8)], 1) == [(1, 2, 3)]\nassert     find_tuples([(1, 2, 3), (3, 4, 5), (6, 7, 8)], 5) == [(1, 2, 3), (3, 4, 5), (6, 7, 8)]\nassert     find_tuples([(1, 2, 3), (3, 4, 5), (6, 7, 8)], 7) == []\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_tuples([(1, 2), (3, 4), (5, 6)], 3) == [(3, 4)]\nassert     find_tuples([(1, 2), (3, 4), (5, 6)], 4) == [(1, 2), (3, 4), (5, 6)]\nassert     find_tuples([(1, 2), (3, 4), (5, 6)], 2) == [(1, 2), (3, 4), (5, 6)]\nassert     find_tuples([(1, 2), (3, 4), (5, 6)], 0) == [(1, 2), (3, 4), (5, 6)]\nassert     find_tuples([(1, 2), (3, 4), (5, 6)], 7) == []\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_tuples([(1,2), (3,4), (5,6), (8,9), (10,12)], 2) == [(2,4), (6,8)]\nassert     find_tuples([(1,2), (3,4), (5,6), (8,9), (10,12)], 3) == [(1,2,3), (2,4,6), (3,4,5), (5,6,8), (8,9,10)]\nassert     find_tuples([(1,2,3,4,5), (3,4,5,6,7,8)], 4) == []\nassert     find_tuples([(1,2,3,4,5), (3,4,5,6,7,8)], 5) == [(1,2,3,4,5)]\nassert     find_tuples([(1,2,3,4,5), (3,4,5,6,7,8)], 1) == [(1,2,3,4,5)]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_tuples([(1, 2), (3, 4), (5, 6), (7, 8)], 3) == [(1, 2), (3, 4)]\nassert     find_tuples([(1, 2), (3, 4), (5, 6), (7, 8)], 5) == []\nassert     find_tuples([(1, 2), (3, 4), (5, 6), (7, 8)], 6) == []\nassert     find_tuples([(1, 2), (3, 4), (5, 6), (7, 8)], 7) == []\nassert     find_tuples([(1, 2), (3, 4), (5, 6), (7, 8)], 8) == [(1, 2), (3, 4), (5, 6)]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef filter_tuples(test_list, K):\n    '''\n    Write a function to filter tuples which have elements divisible by k from the given list of tuples.\n    '''\n    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_tuples([(1, 2), (1, 3), (2, 4), (3, 4), (4, 5), (6, 7)], 2) == [(1, 2), (3, 4)]\nassert     find_tuples([(1, 2), (1, 3), (2, 4), (3, 4), (4, 5), (6, 7)], 4) == []\n\nprint('find_tuples successfully passed')\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_Diff(10) == False\nassert     is_Diff(21) == False\nassert     is_Diff(13) == True\nassert     is_Diff(11) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_Diff(13) == False, \"Should return False\"\nassert     is_Diff(11) == True, \"Should return True\"\nassert     is_Diff(10) == False, \"Should return False\"\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_Diff(1) == False\nassert     is_Diff(10) == False\nassert     is_Diff(11) == True\nassert     is_Diff(101) == True\nassert     is_Diff(11) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_Diff(5)==False\nassert is_Diff(10)==False\nassert is_Diff(17)==True\nassert is_Diff(21)==True\nassert is_Diff(30)==False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert is_Diff(11)\nassert not is_Diff(12)\nassert not is_Diff(10)\nassert is_Diff(100)\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    is_Diff(11) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_Diff(11) == True\nassert     is_Diff(12) == False\nassert     is_Diff(11) == True\n\ndef get_first_second_last_digits(n): \n    '''\n    Write a python function to find the first, second and last digits of a given number n. \n    '''\n    pass\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert word_len('') == False\nassert word_len('aa') == False\nassert word_len('AA') == False\nassert word_len('aaAA') == True\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert word_len('i') == False \nassert word_len('aa') == False \nassert word_len('Ab') == False \nassert word_len('AA') == True \n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert word_len('abc') == True\nassert word_len('xyz') == False\nassert word_len('') == False\n\nprint('passed')\nprint()\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef word_list():\n    '''\n    Write a python function to create a list of words of size even numbers of characters.\n    '''\n    pass\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     word_len('hello') == True\nassert word_len('love') == False\nassert word_len('madam') == True\nassert word_len('god') == True\nassert word_len('hello123') == False\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert word_len('Hello World') == True \nassert word_len('Python') == False\nassert word_len('Bye World') == True \nassert word_len('Hello Python') == False \n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     word_len('hello') == False\nassert word_len('hi') == True\nassert word_len('hello world') == True\nassert word_len('hello') == False\nassert word_len('') == False\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef tetrahedral_number_from_1_to_20(n):\n    '''\n    Write a function to find the nth tetrahedral number, \n    where n is a positive integer in the range (1,20)\n    \n    a tetrahedral number is the product of 4 distinct primes\n    '''\n    pass\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tetrahedral_number(1) == 4, 'The value should be 4.'\nassert     tetrahedral_number(2) == 14, 'The value should be 14.'\nassert     tetrahedral_number(3) == 28, 'The value should be 28.'\nassert     tetrahedral_number(4) == 468, 'The value should be 468.'\nassert     tetrahedral_number(5) == 10000, 'The value should be 10000.'\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef tetrahedral_number_m(n, m): \n    '''\n    Write a function to find the mth tetrahedral number of nth tetrahedral number.\n    '''\n    pass\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tetrahedral_number(1) == 1\nassert     tetrahedral_number(2) == 4\nassert     tetrahedral_number(3) == 6\nassert     tetrahedral_number(4) == 10\nassert     tetrahedral_number(5) == 12\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     volume_sphere(2)==24\nassert     volume_sphere(1)==4\nassert     volume_sphere(0)==0\n\n\ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(\"Volume of sphere (radius=1): \", volume_sphere(1))\nprint(\"Volume of sphere (radius=2): \", volume_sphere(2))\nprint(\"Volume of sphere (radius=3): \", volume_sphere(3))\nprint(\"Volume of sphere (radius=4): \", volume_sphere(4))\nprint(\"Volume of sphere (radius=5): \", volume_sphere(5))\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(volume_sphere(0)) == 0.0\nprint(volume_sphere(1)) == 4.0\nprint(volume_sphere(2)) == 21.9999999999999995\nprint(volume_sphere(3)) == 523.0\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     volume_sphere(1) == 1, \"Error.\"\nassert     volume_sphere(2) == 4, \"Error.\"\nassert     volume_sphere(3) == 20, \"Error.\"\nassert     volume_sphere(4) == 78, \"Error.\"\nassert     volume_sphere(5) == 468, \"Error.\"\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     volume_sphere(1) == math.pi * 4 * r**2\nassert     volume_sphere(2) == math.pi * 4 * (1 + (1/3)) * r**2\nassert     volume_sphere(0.5) == 4.18 / 3 * math.pi * 4 * (1 / 3) * (0.5**3)\nassert volume_sphere(2.2) == 4.18 / 3 * math.pi * 4 * (1 / 3) * (2.2**3)\n\n\ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     volume_sphere(1) == math.pi*4/3, 'Wrong value'\n\ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_Char('abc') == 26,'should return 26'\nassert     get_Char('123') == 123,'should return 123'\nassert     get_Char('AbC') == 131,'should return 131'\nassert     get_Char('AaBbCc') == 75,'should return 75'\nassert     get_Char('AaBbCc') == 75,'should return 75'\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_Char(\"xyz\") == 33\nassert     get_Char(\"mam\") == 37\nassert     get_Char(\"hui\") == 43\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_Char(\"Hello\") == 57\nassert     get_Char(\"\") == 0\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_Char('A') == 65\nassert     get_Char('B') == 66\nassert     get_Char('C') == 67\nassert     get_Char('D') == 68\nassert     get_Char('E') == 69\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_Char('') == 26\nassert     get_Char('asdf') == 6\nassert     get_Char('hello') == 49\nassert     get_Char('hello world') == 77\nassert     get_Char('hello wrold') == 78\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_Char('') == 0\nassert     get_Char('abc') == 75\nassert     get_Char('A') == 65\nassert     get_Char('Z') == 90\nassert     get_Char('abcdef') == 654\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_Char(\"pavan\") == 5\nassert     get_Char(\"python\") == 49\n\ndef get_Word(strr): \n    '''\n    Write a python function to find the word made by adding the ASCII value of all the words of the given string modulo 26.\n    '''\n    pass\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_Char('abcd') == 123\nassert get_Char('z') == 90\nassert get_Char('xyz') == 567\nassert get_Char('A') == 65\nassert get_Char('a') == 97\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_Char(\"python\") == \"x\", \"Test failed\"\nassert get_Char(\"python\") == \"c\", \"Test failed\"\n\ndef get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    pass\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nsequence(1) == 0\nsequence(2) == 1\nsequence(3) == 2\nsequence(4) == 5\nsequence(5) == 13\nsequence(6) == 24\nsequence(7) == 44\nsequence(8) == 21\nsequence(9) == 36\nsequence(10) == 49\nsequence(11) == 64\nsequence(12) == 89\nsequence(13) == 144\nsequence(14) == 1224\nsequence(15) == 19668\nsequence(16) == 134066\nsequence(17) == 2176688\nsequence(18) == 59332052\nsequence(19) == 999999999999999999999999999999999999999999999999999999999999999999\nsequence(20) == 1e+46\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sequence(1) == 1\nassert     sequence(3) == 5\nassert     sequence(100) == 33\nassert     sequence(101) == 101\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sequence(4) == 3, \"Wrong Answer\"\nassert     sequence(1) == 1, \"Wrong Answer\"\nassert     sequence(5) == 5, \"Wrong Answer\"\n\n\n\ndef is_valid(f): \n    '''\n    Given a function, checks if it is valid to use it in a recursive \n    function.\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef test_sequence():\n    '''\n    Test function:\n        Write a function to find the newman conway sequence.\n    '''\n    pass\n\ndef newman_conway_sequence():\n    '''\n    Write a function to find the newman conway sequence.\n    '''\n    pass\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert sequence(1) == 1\nassert sequence(2) == 1\nassert sequence(3) == 2\nassert sequence(4) == 3\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     surfacearea_sphere(5) == 50, \"The surface area of a sphere with radius 5 is 50\"\nassert surfacearea_sphere(0) == 0, \"The surface area of an empty sphere is 0\"\n\ndef circumference_sphere(r):\n    '''\n    Write a function to find the circumference of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef volume_cube(l, w, h):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     surfacearea_sphere(1) == 4\nassert     surfacearea_sphere(2) == 8\nassert     surfacearea_sphere(3) == 20\nassert     surfacearea_sphere(4) == 32\nassert     surfacearea_sphere(5) == 46\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef surfacearea_triangle(a, b, c):\n    '''\n    Write a function to find the surface area of a triangle.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     surfacearea_sphere(3) == 34.59098953555625\n\nassert surfacearea_sphere(4) == 111.31526761460953\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     surfacearea_sphere(3) == 56.0, 'incorrect'\nassert     surfacearea_sphere(4) == 60.0, 'incorrect'\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     surfacearea_sphere(2) == 5040, 'incorrect'\nassert     surfacearea_sphere(1) == 4 * math.pi, 'incorrect'\nassert     surfacearea_sphere(0) == 4 * math.pi, 'incorrect'\nassert     surfacearea_sphere(-1) == 4 * math.pi, 'incorrect'\nassert     surfacearea_sphere(-10) == 4 * math.pi, 'incorrect'\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     surfacearea_sphere(2) == 56.5, \\\n    'success condition'\nassert surfacearea_sphere(3) == 94.5, \\\n    'failure condition'\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef surfacearea_sphere_1(r):\n    return 4 * math.pi * r * r\n\ndef surfacearea_sphere_2(r):\n    '''\n    surface area of a sphere with the formula\n    4 * math.pi * r * r\n    '''\n    return 4 * math.pi * r * r\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n\nfrom math import sqrt\ndef smallest_positive(n):\n    '''\n    Write a function to find the smallest positive number that is at most sqrt(n).\n    '''\n    pass\n\ndef smallest_positive_square(n):\n    '''\n    Write a function to find the smallest positive number that is square of n.\n    '''\n    pass\n\ndef smallest_positive_triangular(n):\n    '''\n    Write a function to find the smallest positive number that is square of n.\n    '''\n    pass\n\ndef smallest_positive_pentagonal(n):\n    '''\n    Write a function to find the smallest positive number that is pentagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     centered_hexagonal_number(1) == 1\nassert     centered_hexagonal_number(2) == 3\nassert     centered_hexagonal_number(5) == 13\nassert     centered_hexagonal_number(9) == 327\nassert     centered_hexagonal_number(20) == 128627\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ncentered_hexagonal_number(1) == 1\ncentered_hexagonal_number(2) == 5\ncentered_hexagonal_number(3) == 14\ncentered_hexagonal_number(4) == 28\ncentered_hexagonal_number(5) == 57\ncentered_hexagonal_number(6) == 105\ncentered_hexagonal_number(7) == 765\ncentered_hexagonal_number(8) == 1729\ncentered_hexagonal_number(9) == 5088\ncentered_hexagonal_number(10) == 35800\ncentered_hexagonal_number(11) == 92376\ncentered_hexagonal_number(12) == 216024\ncentered_hexagonal_number(13) == 627648\ncentered_hexagonal_number(14) == 13985872\ncentered_hexagonal_number(15) == 508800\ncentered_hexagonal_number(16) == 358000\ncentered_hexagonal_number(17) == 9237600\ncentered_hexagonal_number(18) == 21602400\ncentered_hexagonal_number(19) == 67292800\ncentered_hexagonal_number(20) == 13985872000\ncentered_hexagonal_number(21) == 508800800\ncentered_hexagonal_number(22) == 35800800\ncentered_hexagonal_number(23) == 9237600800\ncentered_hexagonal_number(24) == 21602400800\ncentered_hexagonal_number(25) == 627648000000\ncentered_hexagonal_number(26) == 13985872000800\ncentered_hexagonal_number(27) == 50880080000\ncentered_hexagonal_number(28) == 35800800000\ncentered_hexagonal_number(29) == 923760080000\ncentered_hexagonal_number(30) == 21602400800000\ncentered_hexagonal_number(31) == 627648000000000\ncentered_hexagonal_number(32) == 13985872000800000\ncentered_hexagonal_number(33) == 5088008000000\ncentered_hexagonal_number(34) == 358008000000000\ncentered_hexagonal_number(35) == 9237600800000000\ncentered_hexagonal_number(36) == 216024008000008000\ncentered_hexagonal_number(37) == 6276480000000008000\ncentered_hexagonal_number(38) == 139858720008000008000\ncentered_hexagonal_number(39) == 508800800000000000\ncentered_hexagonal_number(40) == 358008000000000000\ncentered_hexagonal_number(41) == 9237600800000000000\ncentered_hexagonal_number(42) == 21602400800000800000\ncentered_hexagonal_number(43) == 627648000000000800000\ncentered_hexagonal_number(44) == 13985872000800000800000\ncentered_hexagonal_number(45) == 508800800000000000800\ncentered_hexagonal_number(46) == 358008000000000000800\ncentered_hexagonal_number(47) == 923760080000000000800\ncentered_hexagonal_number(48) == 21602400800000800000800\ncentered_hexagonal_number(49) == 627648000000000800000800\ncentered_hexagonal_number(50) == 13985872000800000800000800\ncentered_hexagonal_number(51) == 508800800000000000800000\ncentered_hexagonal_number(52) == 358008000000000000800000\ncentered_hexagonal_number(53) == 923760080000000000800000\ncentered_hexagonal_number(54) == 21602400800000800000800000\ncentered_hexagonal_number(55) == 627648000000000800000800000\ncentered_hexagonal_number(56) == 13985872000800000800000800000\ncentered_hexagonal_number(57) == 508800800000000000800000\ncentered_hexagonal_number(58) == 358008000000000000800000800\ncentered_hexagonal_number(59) == 923760080000000000800000800\ncentered_hexagonal_number(60) == 21602400800000800000800000800\ncentered_hexagonal_number(61) == 627648000000000800000800000800\ncentered_hexagonal_number(62) == 13985872000800000800000800000800\ncentered_hexagonal_number(63) == 508800800000000000800000800\ncentered_hexagonal_number(64) == 358008000000000000800000800000\ncentered_hexagonal_number(65) == 923760080000000000800000800000\ncentered_hexagonal_number(66) == 21602400800000800000800000800000\ncentered_hexagonal_number(67) == 627648000000000800000800000800000\ncentered_hexagonal_number(68) == 13985872000800000800000800000800000\ncentered_hexagonal_number(69) == 508800800000000000800000800000\ncentered_hexagonal_number(70) == 358008000000000000800000800000800\ncentered_hexagonal_number(71) == 923760080000000000800000800000800\ncentered_hexagonal_number(72) == 21602400800000800000800000800000\ncentered_hexagonal_number(73) == 627648000000000800000800000800000\ncentered_hexagonal_number(74) == 13985872000800000800000800000800000\ncentered_hexagonal_number(75) == 508800800000000000800000800\ncentered_hexagonal_number(76) == 358008000000000000800000800000800\ncentered_hexagonal_number(77) == 923760080000000000800000800000800\ncentered_hexagonal_number(78) == 21602400800000800000800000800000\ncentered_hexagonal_number(79) == 627648000000000800000800000800000\ncentered_hexagonal_number(80) == 13985872000800000800000800000800000\ncentered_hexagonal_number(81) == 508800800000000000800000800\ncentered_hexagonal_number(82) == 358008000000000000800000800000800\ncentered_hexagonal_number(83) == 923760080000000000800000800000800\ncentered_hexagonal_number(84) == 21602400800000800000800000800000\ncentered_hexagonal_number(85) == 627648000000000800000800000800000\ncentered_hexagonal_number(86) == 13985872000800000800000800000800000\ncentered_hexagonal_number(87) == 508800800000000000800000800\ncentered_hexagonal_number(88) == 358008000000000000800000800000800\ncentered_hexagonal_number(89) == 923760080000000000800000800000800\ncentered_hexagonal_number(90) == 21602400800000800000800000800000\ncentered_hexagonal_number(91) == 627648000000000800000800000800000\ncentered_hexagonal_number(92) == 13985872000800000800000800000800000\ncentered_hexagonal_number(93) == 508800800000000000800000800\ncentered_hexagonal_number(94) == 358008000000000000800000800000800\ncentered_hexagonal_number(95) == 923760080000000000800000800000800\ncentered_hexagonal_number(96) == 21602400800000800000800000800000\ncentered_hexagonal_number(97) == 627648000000000800000800000800000\ncentered_hexagonal_number(98) == 13985872000800000800000800000800000\ncentered_hexagonal_number(99) == 508800800000000000800000800\ncentered_hexagonal_number(100) == 358008000000000000800000800000800\ncentered_hexagonal_number(101) == 923760080000000000800000800000800\ncentered_hexagonal_number(102) == 21602400800000800000800000800000\ncentered_hexagonal_number(103) == 627648000000000800000800000800000\ncentered_hexagonal_number(104) == 13985872000800000800000800000800000\ncentered_hexagonal_number(105) == 508800800000000000800000800\ncentered_hexagonal_number(106) == 358008000000000000800000800000800\ncentered_hexagonal_number(107) == 92376008000000000080000080000080"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ncentered_hexagonal_number(1) == 1\ncentered_hexagonal_number(2) == 3\ncentered_hexagonal_number(3) == 4\ncentered_hexagonal_number(4) == 7\ncentered_hexagonal_number(5) == 11\ncentered_hexagonal_number(6) == 14\ncentered_hexagonal_number(7) == 17\ncentered_hexagonal_number(8) == 20\ncentered_hexagonal_number(9) == 24\ncentered_hexagonal_number(10) == 28\ncentered_hexagonal_number(11) == 33\ncentered_hexagonal_number(12) == 38\ncentered_hexagonal_number(13) == 42\ncentered_hexagonal_number(14) == 46\ncentered_hexagonal_number(15) == 50\ncentered_hexagonal_number(16) == 56\ncentered_hexagonal_number(17) == 62\ncentered_hexagonal_number(18) == 66\ncentered_hexagonal_number(19) == 70\ncentered_hexagonal_number(20) == 74\ncentered_hexagonal_number(21) == 78\ncentered_hexagonal_number(22) == 82\ncentered_hexagonal_number(23) == 86\ncentered_hexagonal_number(24) == 90\ncentered_hexagonal_number(25) == 94\ncentered_hexagonal_number(26) == 98\ncentered_hexagonal_number(27) == 102\ncentered_hexagonal_number(28) == 106\ncentered_hexagonal_number(29) == 110\ncentered_hexagonal_number(30) == 114\ncentered_hexagonal_number(31) == 118\ncentered_hexagonal_number(32) == 122\ncentered_hexagonal_number(33) == 126\ncentered_hexagonal_number(34) == 130\ncentered_hexagonal_number(35) == 134\ncentered_hexagonal_number(36) == 138\ncentered_hexagonal_number(37) == 142\ncentered_hexagonal_number(38) == 146\ncentered_hexagonal_number(39) == 150\ncentered_hexagonal_number(40) == 154\ncentered_hexagonal_number(41) == 158\ncentered_hexagonal_number(42) == 162\ncentered_hexagonal_number(43) == 166\ncentered_hexagonal_number(44) == 170\ncentered_hexagonal_number(45) == 174\ncentered_hexagonal_number(46) == 178\ncentered_hexagonal_number(47) == 182\ncentered_hexagonal_number(48) == 186\ncentered_hexagonal_number(49) == 190\ncentered_hexagonal_number(50) == 194\ncentered_hexagonal_number(51) == 198\ncentered_hexagonal_number(52) == 202\ncentered_hexagonal_number(53) == 206\ncentered_hexagonal_number(54) == 210\ncentered_hexagonal_number(55) == 214\ncentered_hexagonal_number(56) == 218\ncentered_hexagonal_number(57) == 222\ncentered_hexagonal_number(58) == 226\ncentered_hexagonal_number(59) == 230\ncentered_hexagonal_number(60) == 234\ncentered_hexagonal_number(61) == 238\ncentered_hexagonal_number(62) == 242\ncentered_hexagonal_number(63) == 246\ncentered_hexagonal_number(64) == 250\ncentered_hexagonal_number(65) == 254\ncentered_hexagonal_number(66) == 258\ncentered_hexagonal_number(67) == 262\ncentered_hexagonal_number(68) == 266\ncentered_hexagonal_number(69) == 270\ncentered_hexagonal_number(70) == 274\ncentered_hexagonal_number(71) == 278\ncentered_hexagonal_number(72) == 282\ncentered_hexagonal_number(73) == 286\ncentered_hexagonal_number(74) == 290\ncentered_hexagonal_number(75) == 294\ncentered_hexagonal_number(76) == 298\ncentered_hexagonal_number(77) == 302\ncentered_hexagonal_number(78) == 306\ncentered_hexagonal_number(79) == 310\ncentered_hexagonal_number(80) == 314\ncentered_hexagonal_number(81) == 318\ncentered_hexagonal_number(82) == 322\ncentered_hexagonal_number(83) == 326\ncentered_hexagonal_number(84) == 330\ncentered_hexagonal_number(85) == 334\ncentered_hexagonal_number(86) == 338\ncentered_hexagonal_number(87) == 342\ncentered_hexagonal_number(88) == 346\ncentered_hexagonal_number(89) == 350\ncentered_hexagonal_number(90) == 354\ncentered_hexagonal_number(91) == 358\ncentered_hexagonal_number(92) == 362\ncentered_hexagonal_number(93) == 366\ncentered_hexagonal_number(94) == 370\ncentered_hexagonal_number(95) == 374\ncentered_hexagonal_number(96) == 378\ncentered_hexagonal_number(97) == 382\ncentered_hexagonal_number(98) == 386\ncentered_hexagonal_number(99) == 390\ncentered_hexagonal_number(100) == 394\ncentered_hexagonal_number(101) == 398\ncentered_hexagonal_number(102) == 402\ncentered_hexagonal_number(103) == 406\ncentered_hexagonal_number(104) == 410\ncentered_hexagonal_number(105) == 414\ncentered_hexagonal_number(106) == 418\ncentered_hexagonal_number(107) == 422\ncentered_hexagonal_number(108) == 426\ncentered_hexagonal_number(109) == 430\ncentered_hexagonal_number(110) == 434\ncentered_hexagonal_number(111) == 438\ncentered_hexagonal_number(112) == 442\ncentered_hexagonal_number(113) == 446\ncentered_hexagonal_number(114) == 450\ncentered_hexagonal_number(115) == 454\ncentered_hexagonal_number(116) == 458\ncentered_hexagonal_number(117) == 462\ncentered_hexagonal_number(118) == 466\ncentered_hexagonal_number(119) == 470\ncentered_hexagonal_number(120) == 474\ncentered_hexagonal_number(121) == 478\ncentered_hexagonal_number(122) == 482\ncentered_hexagonal_number(123) == 486\ncentered_hexagonal_number(124) == 490\ncentered_hexagonal_number(125) == 494\ncentered_hexagonal_number(126) == 498\ncentered_hexagonal_number(127) == 502\ncentered_hexagonal_number(128) == 506\ncentered_hexagonal_number(129) == 510\ncentered_hexagonal_number(130) == 514\ncentered_hexagonal_number(131) == 518\ncentered_hexagonal_number(132) == 522\ncentered_hexagonal_number(133) == 526\ncentered_hexagonal_number(134) == 530\ncentered_hexagonal_number(135) == 534\ncentered_hexagonal_number(136) == 538\ncentered_hexagonal_number(137) == 542\ncentered_hexagonal_number(138) == 546\ncentered_hexagonal_number(139) == 550\ncentered_hexagonal_number(140) == 554\ncentered_hexagonal_number(141) == 558\ncentered_hexagonal_number(142) == 562\ncentered_hexagonal_number(143) == 566\ncentered_hexagonal_number(144) == 570\ncentered_hexagonal_number(145) == 574\ncentered_hexagonal_number(146) == 578\ncentered_hexagonal_number(147) == 582\ncentered_hexagonal_number(148) == 586\ncentered_hexagonal_number(149) == 590\ncentered_hexagonal_number(150) == 594\ncentered_hexagonal_number(151) == 598\ncentered_hexagonal_number(152) == 602\ncentered_hexagonal_number(153) == 606\ncentered_hexagonal_number(154) == 610\ncentered_hexagonal_number(155) == 614\ncentered_hexagonal_number(156) == 618\ncentered_hexagonal_number(157) == 622\ncentered_hexagonal_number(158) == 626\ncentered_hexagonal_number(159) == 630\ncentered_hexagonal_number(160) == 634\ncentered_hexagonal_number(161) == 638\ncentered_hexagonal_number(162) == 642\ncentered_hexagonal_number"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     centered_hexagonal_number(0) == 1\nassert     centered_hexagonal_number(1) == 2\nassert     centered_hexagonal_number(2) == 3\nassert     centered_hexagonal_number(3) == 4\nassert     centered_hexagonal_number(4) == 5\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     centered_hexagonal_number(5) == 21\nassert     centered_hexagonal_number(20) == 361\nassert     centered_hexagonal_number(30) == 729\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     merge_dictionaries_three({\"k1\":\"v1\"},{\"k2\":\"v2\"},{\"k3\":\"v3\"}) == {\"k1\":\"v1\", \"k2\":\"v2\", \"k3\":\"v3\"}\nassert     merge_dictionaries_three({\"k1\":\"v1\"},{\"k3\":\"v3\"},{\"k2\":\"v2\"}) == {\"k1\":\"v1\", \"k2\":\"v2\", \"k3\":\"v3\"}\nassert     merge_dictionaries_three({\"k1\":\"v1\",\"k2\":\"v2\"},{\"k3\":\"v3\"},{\"k4\":\"v4\"}) == {\"k1\":\"v1\", \"k2\":\"v2\", \"k3\":\"v3\", \"k4\":\"v4\"}\nassert     merge_dictionaries_three({\"k1\":\"v1\",\"k2\":\"v2\"},{\"k3\":\"v3\",\"k4\":\"v4\"},{\"k5\":\"v5\",\"k6\":\"v6\"}) == {\"k1\":\"v1\",\"k2\":\"v2\", \"k3\":\"v3\", \"k4\":\"v4\", \"k5\":\"v5\", \"k6\":\"v6\"}\nassert     merge_dictionaries_three({\"k1\":\"v1\",\"k2\":\"v2\"},{\"k3\":\"v3\",\"k4\":\"v4\"},{\"k5\":\"v5\",\"k6\":\"v6\",\"k7\":\"v7\",\"k8\":\"v8\",\"k9\":\"v9\"}) == {\"k1\":\"v1\",\"k2\":\"v2\", \"k3\":\"v3\", \"k4\":\"v4\", \"k5\":\"v5\", \"k6\":\"v6\", \"k7\":\"v7\", \"k8\":\"v8\", \"k9\":\"v9\"}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     merge_dictionaries_three({1: 'a', 2: 'b', 3: 'c'}, {1: 'c', 2: 'a'}, {1: 'b', 2: 'b'}) == {1: 'c', 2: 'c', 3: 'a'}, \"Test 3 failed\"\nassert     merge_dictionaries_three({1: 'a', 2: 'b', 3: 'c'}, {1: 'c', 2: 'a'}, {1: 'b', 2: 'b'}) == {1: 'c', 2: 'a', 3: 'c'}, \"Test 4 failed\"\nassert     merge_dictionaries_three({1: 'a', 2: 'b', 3: 'c'}, {1: 'c', 2: 'a'}, {1: 'b', 2: 'b', 3: 'd'}) == {1: 'c', 2: 'a', 3: 'd'}, \"Test 5 failed\"\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     merge_dictionaries_three({1:10, 2:20},{3:30, 4:40},{5:50,6:60}) == {1:10,2:20,3:30,4:40,5:50,6:60}\nassert     merge_dictionaries_three({'a':1, 'b':2},{'c':3, 'd':4},{'e':5, 'f':6}) == {'a':1, 'b':2, 'c':3, 'd':4, 'e':5, 'f':6}\nassert     merge_dictionaries_three({\"apple\": 1, \"orange\": 2, \"kiwi\": 3}, {\"pear\": 5, \"dates\": 6, \"banana\": 7}, {\"grape\": 8, \"mango\": 9, \"lime\": 10}) == {\"apple\": 1, \"orange\": 2, \"kiwi\": 3, \"pear\": 5, \"dates\": 6, \"banana\": 7, \"grape\": 8, \"mango\": 9, \"lime\": 10}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     merge_dictionaries_three({1:2,3:4}, {1:2,3:4}, {1:2,3:4}) == {1:2, 3:4, 1:2, 3:4}\nassert     merge_dictionaries_three({}, {1:2,3:4}, {}) == {1:2,3:4}\nassert     merge_dictionaries_three({1:2}, {1:2,3:4}, {1:2,3:4}) == {1:2, 1:2, 3:4}\nassert     merge_dictionaries_three({1:2}, {1:2,3:4}, {}) == {1:2, 3:4}\nassert     merge_dictionaries_three({}, {}, {}) == {}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     merge_dictionaries_three({\"a\":\"1\", \"b\":\"2\", \"c\":\"3\"},\n    {\"x\":\"1\", \"y\":\"2\", \"z\":\"3\"},\n    {\"p\":\"1\", \"q\":\"2\", \"r\":\"3\"}) == {\"a\":\"1\", \"b\":\"2\", \"c\":\"3\", \"x\":\"1\", \"y\":\"2\", \"z\":\"3\", \"p\":\"1\", \"q\":\"2\", \"r\":\"3\"}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     merge_dictionaries_three({\"A\":\"apple\",\"B\":\"banana\",\"C\":\"carrot\"},{\"D\":\"dog\",\"E\":\"elephant\",\"F\":\"fish\"},{\"G\":\"goat\",\"H\":\"horse\"}) == \\\n        {\n            'A': 'apple',\n            'B': 'banana',\n            'C': 'carrot',\n            'D': 'dog',\n            'E': 'elephant',\n            'F': 'fish',\n            'G': 'goat',\n            'H': 'horse'\n        }\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     merge_dictionaries_three({\"a\": 1, \"b\": 2},{\"c\": 3, \"d\": 4}, {\"e\": 5, \"f\": 6}) == {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6}\nassert     merge_dictionaries_three({\"a\": 1, \"b\": 2},{\"c\": 3, \"d\": 4, \"e\": 5}, {\"f\": 6}) == {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6}\nassert     merge_dictionaries_three({\"a\": 1, \"b\": 2},{\"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6}, {\"f\": 7}) == {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 7}\nassert     merge_dictionaries_three({\"a\": 1, \"b\": 2},{\"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6, \"g\": 7}, {\"f\": 8}) == {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6, \"g\": 7, \"f\": 8}\nassert     merge_dictionaries_three({\"a\": 1, \"b\": 2},{\"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6, \"g\": 7}, {\"f\": 8, \"h\": 9}) == {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6, \"g\": 7, \"h\": 9}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     merge_dictionaries_three(\n        {'a': 1, 'b': 2, 'c': 3},\n        {'d': 4, 'e': 5, 'f': 6},\n        {'g': 7, 'h': 8, 'i': 9}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9}\n    assert     merge_dictionaries_three(\n        {'a': 1, 'b': 2, 'c': 3},\n        {'d': 4, 'e': 5, 'f': 6},\n        {'g': 7, 'h': 8, 'i': 9, 'j': 10}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10}\n    assert     merge_dictionaries_three(\n        {'a': 1, 'b': 2, 'c': 3, 'd': 4},\n        {'e': 5, 'f': 6, 'g': 7, 'h': 8},\n        {'i': 9, 'j': 10, 'k': 11,'m': 12}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11,'m': 12}\n    assert     merge_dictionaries_three(\n        {'a': 1, 'b': 2, 'c': 3},\n        {'d': 4, 'e': 5, 'f': 6},\n        {'g': 7, 'h': 8, 'i': 9}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9}\n    assert     merge_dictionaries_three(\n        {'a': 1, 'b': 2, 'c': 3, 'd': 4},\n        {'e': 5, 'f': 6, 'g': 7, 'h': 8},\n        {'i': 9, 'j': 10, 'k': 11,'m': 12}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11,'m': 12}\n    "
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'d': 4, 'e': 5}, {'f': 6, 'g': 7}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7}\nassert merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'d': 4, 'e': 5}, {'f': 6, 'g': 7}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7}\nassert merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'d': 4, 'e': 5}, {'f': 6, 'g': 7}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7}"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint('ok')\n\ndef freq_count_2(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     freq_count([1,2,3,4,5]) == {1:3,2:2,3:1,4:1,5:1}\n\nassert freq_count([]) == {}\n\nassert freq_count([1,2,3,4,5]) == {1:3,2:2,3:1,4:1,5:1}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     freq_count([]) == {}\nassert     freq_count([1]) == {1: 1}\nassert     freq_count([1,1]) == {1: 2}\nassert     freq_count([1,2,2]) == {1: 2, 2: 2}\nassert     freq_count([1,1,1,2,3,3]) == {1: 5, 2: 3}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nassert freq_count([1,2,3,4,5,6,7,1,2,3]) == {1:4,2:3,3:3,4:2,5:1,6:1,7:1}\nassert freq_count([1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,5]) == {1:6,2:5,3:5,4:4,5:3}\nassert freq_count([1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,4,4,5]) == {1:8,2:7,3:7,4:6,5:6}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef find_duplicate_in_list(list1):\n    '''\n    Write a function to find the duplicate elements in a list, return the index of duplicate elements,\n    return -1 if there is no duplicate elements.\n    '''\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef freq_count2(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = collections.Counter(list1)\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef freq_count_py(list1):\n    '''\n    Using the Counter() function, do the same as freq_count.\n    '''\n    c = collections.Counter(list1)\n    return c\n\ndef freq_count_numpy(list1):\n    '''\n    Do the same as freq_count_py using numpy.\n    '''\n    from numpy import array, sum, int64\n    c = array(list1).astype(int64)\n    return sum(c)\n\ndef freq_count_numpy_vectorized(list1):\n    '''\n    Do the same as freq_count_py using numpy.\n    '''\n    from numpy import array, sum, int64\n    c = array(list1).astype(int64)\n    return sum(c)\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef all_same(items):\n    '''\n    Write a function that checks if all items in a list are equal.\n    '''\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     freq_count([]) == {}\nassert freq_count([1,2,3,1]) == {1:3, 2:1, 3:1}\nassert freq_count([1,2,3,1,1,3,1,1,3,1,1]) == {1:5, 2:3, 3:4}\nassert freq_count([1,2,3,4,5,1,2,4]) == {1:4, 2:2, 3:1, 4:1, 5:1}\nassert freq_count([1,2,3,1,2,3,1,2,3]) == {1:6, 2:3, 3:2}\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert \n\ndef closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # use two pointers\n    N = abs(N)\n    n = N + 1\n    \n    while n > N:\n        if N % n == 0:\n            return n\n        n = n + 1\n    \n    return N\n    \nassert closest_num(2) == 1\nassert closest_num(1) == 0\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert closest_num(10) == 9\nassert closest_num(10.2) == 9\nassert closest_num(10.21) == 9\nassert closest_num(10.22) == 10\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     closest_num(2) == 1\nassert closest_num(3) == 2\nassert closest_num(8) == 3\nassert closest_num(9) == 5\nassert closest_num(10) == 5\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     closest_num(1)    == -1\nassert     closest_num(10)    == 9\nassert     closest_num(12)    == 11\nassert     closest_num(18)    == 17\nassert     closest_num(19)    == 18\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert closest_num(2) == 1\nassert closest_num(0) == 0\nassert closest_num(2) == 1\nassert closest_num(3) == 2\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert closest_num(4) == 2\nassert closest_num(1) == 1\nassert closest_num(7) == 6\nassert closest_num(9) == 7\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef closest_num2(n):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    \n    # as in the previous function\n    n_l = []\n    # if n is positive\n    if n > 0:\n        # add the smallest smaller number n_l in the range[1,n]\n        for i in range(1, n+1):\n            n_l.append(i)\n    else:\n        # if n is negative, n+1 because n is negative\n        for i in range(n+1):\n            n_l.append(i)\n    \n    # to find the number of times the smallest smaller number in n_l is repeated,\n    # we need to count the number of times that the smallest smaller number is repeated in n_l\n    # for example, if n_l = [2,3,1,1,3] and n = -1, we need to count the number of times that the smallest smaller number is repeated in n_l = 3\n    # the smallest smaller number is repeated 3 times, the answer is 3\n\n    # we need to loop through n_l and compute the number of times that the smallest smaller number is repeated in n_l\n    # first compute the smallest smaller number in n_l\n    smaller_number = n_l[0]\n    # then find the number of times that the smallest smaller number is repeated in n_l\n    # number of times that the smallest smaller number is repeated in n_l is the number of times that the smallest smaller number is repeated in n_l\n    number_of_times_that_smaller_number_is_repeated = 0\n    # loop through n_l\n    for i in n_l:\n        # if the smallest smaller number is repeated, add 1 to number of times that the smallest smaller number is repeated in n_l\n        if i == smaller_number:\n            number_of_times_that_smaller_number_is_repeated += 1\n        # the smallest smaller number is not repeated, no need to check, break\n        else:\n            break\n    # return the answer\n    return number_of_times_that_smaller_number_is_repeated"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     closest_num(3)    ==    2\nassert     closest_num(10)    ==    2\nassert     closest_num(5)    ==    2\nassert     closest_num(100)    ==    2\nassert     closest_num(150)    ==    2\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert \nassert\n\nprint(\"Assertion test is PASSED\")\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     len_log([]) == 0, 'Your function should return the length of the longest word'\nassert    len_log([1]) == 1, 'Your function should return the length of the longest word'\nassert    len_log([]) == 0, 'Your function should return the length of the longest word'\nassert    len_log([1, 2]) == 2, 'Your function should return the length of the longest word'\nassert    len_log([1, 2, 3, 4]) == 4, 'Your function should return the length of the longest word'\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     len_log(['abcb', 'abcb', 'c', 'abc']) == 3\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     len_log([]) == 0\nassert     len_log(['']) == 0\nassert     len_log(['']) == 0\nassert     len_log(['']) == 0\nassert     len_log(['']) == 0\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     len_log([]) == 0, 'empty list is passed'\nassert     len_log(['1', '2', '3', '4']) == 4, 'two elements are passed'\nassert     len_log(['1', '2', '3', '4', '5']) == 5, 'five elements are passed'\nassert     len_log(['1', '2', '3', '4', '5', '6']) == 6,'six elements are passed'\nassert     len_log(['1', '2', '3', '4', '5', '6', '7']) == 7,'seven elements are passed'\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     len_log([]) == 0, \"A empty list is not of length 0\"\nassert len_log([\"\"]) == 1, \"Empty list is of length 1\"\nassert len_log([\"a\"]) == 1, \"A list with one element is of length 1\"\nassert len_log([\"abc\",\"aba\"]) == 3, \"A list with three elements is of length 3\"\nassert len_log([\"abc\",\"abd\"]) == 2, \"A list with two elements is of length 2\"\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     len_log([]) == 0, 'test case 1 failed'\nassert     len_log(['a']) == 1, 'test case 2 failed'\nassert     len_log(['abc', 'cat']) == 3, 'test case 3 failed'\nassert     len_log(['abc', 'cat', 'dog']) == 4, 'test case 4 failed'\nassert     len_log(['abc', 'cat', 'dog', 'hello']) == 5, 'test case 5 failed'\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef sum_of_digits(list1):\n    '''\n    Write a python function to find the sum of the digits in an integer.\n    '''\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return sub_str in str1\n\nassert find_substring('hellooooo', 'o')\nassert not find_substring('hellooooo', 'h')\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert find_substring('pqr', 'q') == True\nassert find_substring('pqr', 'e') == False\nassert find_substring('a', 'a') == True\nassert find_substring('b', 'b') == True\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_substring('the', ['he','she','my']) == True\nassert     find_substring('she', ['he','she','my']) == True\nassert     find_substring('she', ['she', 'he','my']) == True\nassert     find_substring('i', ['she', 'he','my']) == False\nassert     find_substring('she', ['i','she','my']) == False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_substring('hastat','a') == False, 'passed'\nassert     find_substring('hastat','sta') == True, 'failed'\nassert     find_substring('hastat','tat') == True, 'failed'\nassert     find_substring('hastat','a') == False, 'failed'\nassert     find_substring('hastat','at') == True, 'failed'\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_substring('hi', 'hi') == True\nassert     find_substring('hi', 'hello') == False\nassert     find_substring('hello', 'hi') == False\nassert     find_substring('', 'hi') == True\nassert     find_substring('aaa', 'aaa') == True\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_substring(\"apples\",\"app\") == True\nassert     find_substring(\"apples\",\"app\",1) == True\nassert     find_substring(\"apples\",\"app\",2) == False\nassert     find_substring(\"apples\",\"app\",3) == True"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_substring('cat', 'cat') == True, 'cat'\nassert     find_substring('cat', 'dog') == False, 'cat'\nassert     find_substring('cat', 'catcat') == True, 'catcat'\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert not is_undulating(10), 'Yes, this number is undulating.'\nassert not is_undulating(11), 'Yes, this number is undulating.'\nassert is_undulating(0), 'Yes, this number is undulating.'\nassert is_undulating(-2), 'Yes, this number is undulating.'\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_undulating(3) == True, 'your answer is incorrect'\nassert     is_undulating(4) == False, 'your answer is incorrect'\nassert     is_undulating(5) == True, 'your answer is incorrect'\nassert     is_undulating(6) == False, 'your answer is incorrect'\nassert     is_undulating(7) == True, 'your answer is incorrect'\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_undulating(1000) == True, '1000 is undulating'\nassert     is_undulating(1) == False, '1 is not undulating'\nassert     is_undulating(-1000) == False, '-1000 is undulating'\nassert     is_undulating(4) == False, '4 is not undulating'\nassert     is_undulating(-4) == False, '-4 is undulating'\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_undulating(11) == True\nassert     is_undulating(12) == True\nassert     is_undulating(13) == False\nassert     is_undulating(14) == False\nassert     is_undulating(15) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint('is_undulating function is correct')\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_undulating(10) == True \nassert     is_undulating(12) == False \nassert     is_undulating(0) == True \nassert     is_undulating(1) == True \n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_undulating(3) == False\nassert     is_undulating(1) == False\nassert     is_undulating(-3) == True\nassert     is_undulating(2) == False\nassert     is_undulating(0) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_undulating(1) == True\nassert     is_undulating(2) == True\nassert     is_undulating(3) == False\nassert     is_undulating(4) == False\nassert     is_undulating(5) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_undulating(1) == True, \\\n        \"'is_undulating' should return True for 1.\"\nassert     is_undulating(2) == False, \\\n        \"'is_undulating' should return False for 2.\"\nassert     is_undulating(3) == True, \\\n        \"'is_undulating' should return True for 3.\"\nassert     is_undulating(9) == True, \\\n        \"'is_undulating' should return True for 9.\"\nassert     is_undulating(10) == True, \\\n        \"'is_undulating' should return True for 10.\"\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nis_undulating(1) == True\nis_undulating(3) == False\nis_undulating(7) == True\nis_undulating(23) == False\nis_undulating(529) == True\nis_undulating(10) == False\nis_undulating(4) == False\nis_undulating(3) == False\nis_undulating(5) == False\nis_undulating(20) == False\nis_undulating(1000000) == False\nis_undulating(-1) == False\nis_undulating(-4) == True\nis_undulating(-9) == False\nis_undulating(-21) == True\nis_undulating(999999999999999999999999999999999999999999999999999999999999999999) == False\nis_undulating(999999999999999999999999999999999999999999999999999999999999999999999) == True\nis_undulating(-999999999999999999999999999999999999999999999999999999999999999999999) == True\nis_undulating(1000000000000000000000000000000000000000000000000000000000000000000001) == False\nis_undulating(1000000000000000000000000000000000000000000000000000000000000000000000) == True\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     power(2,2) == 4, \"Wrong result of power(2,2): \" + str(power(2,2))\nassert     power(2,3) == 8, \"Wrong result of power(2,3): \" + str(power(2,3))\nassert     power(0.5,2) == 1.25, \"Wrong result of power(0.5,2): \" + str(power(0.5,2))\nassert     power(2.5,2) == 9, \"Wrong result of power(2.5,2): \" + str(power(2.5,2))\nassert     power(-2.5,2) == 9, \"Wrong result of power(-2.5,2): \" + str(power(-2.5,2))\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     power(1,2) == 1, \"1 ^ 2 = 1\"\nassert     power(2,1) == 2, \"2 ^ 1 = 2\"\nassert     power(2,2) == 4, \"2 ^ 2 = 4\"\nassert     power(3,2) == 9, \"3 ^ 2 = 9\"\nassert     power(2,3) == 8, \"2 ^ 3 = 8\"\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     power(2,2) == 4, 'power function should be correct'\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     power(2,2) == 4\nassert     power(2,3) == 8\nassert     power(2,4) == 16\nassert     power(2,5) == 32\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     power(4,2) == 16\nassert     power(2,2) == 4\nassert     power(3,0) == 1\nassert     power(-4,2) == 4\nassert     power(-2,2) == -4\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     power(1,1) == 1\nassert     power(1,2) == 1\nassert     power(2,1) == 2\nassert     power(2,2) == 4\nassert     power(3,1) == 3\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint(power(2,2)) == 4\nprint(power(2,3)) == 8\nprint(power(2,1)) == 2\nprint(power(2,0)) == 1\nprint(power(2,-1)) == 0\nprint(power(2,-2)) == 0\nprint(power(2,-3)) == 0\nprint(power(2,-4)) == 0\nprint(power(2,-5)) == 0\nprint(power(2,-6)) == 0\nprint(power(2,-7)) == 0\nprint(power(2,-8)) == 0\nprint(power(2,-9)) == 0\nprint(power(2,-10)) == 0\nprint(power(2,-11)) == 0\nprint(power(2,-12)) == 0\nprint(power(2,-13)) == 0\nprint(power(2,-14)) == 0\nprint(power(2,-15)) == 0\nprint(power(2,-16)) == 0\nprint(power(2,-17)) == 0\nprint(power(2,-18)) == 0\nprint(power(2,-19)) == 0\nprint(power(2,-20)) == 0\nprint(power(2,-21)) == 0\nprint(power(2,-22)) == 0\nprint(power(2,-23)) == 0\nprint(power(2,-24)) == 0\nprint(power(2,-25)) == 0\nprint(power(2,-26)) == 0\nprint(power(2,-27)) == 0\nprint(power(2,-28)) == 0\nprint(power(2,-29)) == 0\nprint(power(2,-30)) == 0\nprint(power(2,-31)) == 0\nprint(power(2,-32)) == 0\nprint(power(2,-33)) == 0\nprint(power(2,-34)) == 0\nprint(power(2,-35)) == 0\nprint(power(2,-36)) == 0\nprint(power(2,-37)) == 0\nprint(power(2,-38)) == 0\nprint(power(2,-39)) == 0\nprint(power(2,-40)) == 0\nprint(power(2,-41)) == 0\nprint(power(2,-42)) == 0\nprint(power(2,-43)) == 0\nprint(power(2,-44)) == 0\nprint(power(2,-45)) == 0\nprint(power(2,-46)) == 0\nprint(power(2,-47)) == 0\nprint(power(2,-48)) == 0\nprint(power(2,-49)) == 0\nprint(power(2,-50)) == 0\nprint(power(2,-51)) == 0\nprint(power(2,-52)) == 0\nprint(power(2,-53)) == 0\nprint(power(2,-54)) == 0\nprint(power(2,-55)) == 0\nprint(power(2,-56)) == 0\nprint(power(2,-57)) == 0\nprint(power(2,-58)) == 0\nprint(power(2,-59)) == 0\nprint(power(2,-60)) == 0\nprint(power(2,-61)) == 0\nprint(power(2,-62)) == 0\nprint(power(2,-63)) == 0\nprint(power(2,-64)) == 0\nprint(power(2,-65)) == 0\nprint(power(2,-66)) == 0\nprint(power(2,-67)) == 0\nprint(power(2,-68)) == 0\nprint(power(2,-69)) == 0\nprint(power(2,-70)) == 0\nprint(power(2,-71)) == 0\nprint(power(2,-72)) == 0\nprint(power(2,-73)) == 0\nprint(power(2,-74)) == 0\nprint(power(2,-75)) == 0\nprint(power(2,-76)) == 0\nprint(power(2,-77)) == 0\nprint(power(2,-78)) == 0\nprint(power(2,-79)) == 0\nprint(power(2,-80)) == 0\nprint(power(2,-81)) == 0\nprint(power(2,-82)) == 0\nprint(power(2,-83)) == 0\nprint(power(2,-84)) == 0\nprint(power(2,-85)) == 0\nprint(power(2,-86)) == 0\nprint(power(2,-87)) == 0\nprint(power(2,-88)) == 0\nprint(power(2,-89)) == 0\nprint(power(2,-90)) == 0\nprint(power(2,-91)) == 0\nprint(power(2,-92)) == 0\nprint(power(2,-93)) == 0\nprint(power(2,-94)) == 0\nprint(power(2,-95)) == 0\nprint(power(2,-96)) == 0\nprint(power(2,-97)) == 0\nprint(power(2,-98)) == 0\nprint(power(2,-99)) == 0\nprint(power(2,-100)) == 0\nprint(power(2,-101)) == 0\nprint(power(2,-102)) == 0\nprint(power(2,-103)) == 0\nprint(power(2,-104)) == 0\nprint(power(2,-105)) == 0\nprint(power(2,-106)) == 0\nprint(power(2,-107)) == 0\nprint(power(2,-108)) == 0\nprint(power(2,-109)) == 0\nprint(power(2,-110)) == 0\nprint(power(2,-111)) == 0\nprint(power(2,-112)) == 0\nprint(power(2,-113)) == 0\nprint(power(2,-114)) == 0\nprint(power(2,-115)) == 0\nprint(power(2,-116)) == 0\nprint(power(2,-117)) == 0\nprint(power(2,-118)) == 0\nprint(power(2,-119)) == 0\nprint(power(2,-120)) == 0\nprint(power(2,-121)) == 0\nprint(power(2,-122)) == 0\nprint(power(2,-123)) == 0\nprint(power(2,-124)) == 0\nprint(power(2,-125)) == 0\nprint(power(2,-126)) == 0\nprint(power(2,-127)) == 0\nprint(power(2,-128)) == 0\nprint(power(2,-129)) == 0\nprint(power(2,-130)) == 0\nprint(power(2,-131)) == 0\nprint(power(2,-132)) == 0\nprint(power(2,-133)) == 0\nprint(power(2,-134)) == 0\nprint(power(2,-135)) == 0\nprint(power(2,-136)) == 0\nprint(power(2,-137)) == 0\nprint(power(2,-138)) == 0\nprint(power(2,-139)) == 0\nprint(power(2,-140)) == 0\nprint(power(2,-141)) == 0\nprint(power(2,-142)) == 0\nprint(power(2,-143)) == 0\nprint(power(2,-144)) == 0\nprint(power(2,-145)) == 0\nprint(power(2,-146)) == 0\nprint(power(2,-147)) == 0\nprint(power(2,-148)) == 0\nprint(power(2,-149)) == 0\nprint(power(2,-150)) == 0\nprint(power(2,-151)) == 0\nprint(power(2,-152)) == 0\nprint(power(2,-153)) == 0\nprint(power(2,-154)) == 0\nprint(power(2,-155)) == 0\nprint(power(2,-156)) == 0\nprint(power(2,-157)) == 0\nprint(power(2,-158)) == 0\nprint(power(2,-159)) == 0\nprint(power(2,-160)) == 0\nprint(power(2,-161)) == 0\nprint(power(2,-162)) == 0\nprint(power(2,-163)) == 0\nprint(power(2,-164)) == 0\nprint(power(2,-165)) == 0\nprint(power(2,-166)) == 0\nprint(power(2,-167)) == 0\nprint(power(2,-168)) == 0\nprint(power(2,-169)) == 0\nprint(power(2,-170)) == 0\nprint(power(2,-171)) == 0\nprint(power(2,-172)) == 0\nprint(power(2,-173)) == 0\nprint(power(2,-174)) == 0\nprint(power(2,-175)) == 0\nprint(power(2,-176)) == 0\nprint(power(2,-177)) == 0\nprint(power(2,-178)"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert index_minimum([(2,6), (1,5), (3,9), (2,1), (2,4), (1,3)]) == (1,3)\nassert index_minimum([(2,6), (1,5), (3,9), (2,1), (2,4), (1,3)]) == (1,2)\nassert index_minimum([(2,6), (1,5), (3,9), (2,1), (2,4), (1,3)]) == (1,1)\nassert index_minimum([(2,6), (1,5), (3,9), (2,1), (2,4), (1,3)]) == (1,4)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     index_minimum([(1, 5), (2, 6), (3, 9), (1, 2)]) == (1, 2)\nassert     index_minimum([(7, 2), (1, 5), (2, 6), (1, 2)]) == (2, 6)\nassert     index_minimum([(1, 5), (2, 6), (3, 9), (1, 2)]) == (1, 2)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     index_minimum([(1, 2), (2, 1), (3, 4), (3, 3), (3, 2)]) == (1, 2)\nassert     index_minimum([(1, 2), (2, 1), (2, 2), (3, 3), (4, 3)]) == (2, 1)\nassert     index_minimum([(1, 2), (3, 1), (3, 2), (2, 2), (2, 3)]) == (3, 1)\nassert     index_minimum([(1, 2), (2, 1), (2, 2), (2, 3), (3, 2), (4, 3)]) == (2, 1)\nassert     index_minimum([(1, 2), (2, 1), (3, 2), (2, 2), (2, 3), (2, 4)]) == (2, 2)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n'''\n    Note that the argument to the function is a list of tuples.\n    The function should return the first element of the list that matches the smallest second value.\n    You should use the function index_minimum to find the element of the list with the smallest second value.\n    It should return the first element in the list of tuples that matches the smallest second value.\n    \n    If there are no elements in the list, then return None.\n    If there is only one element in the list, then return the value of that element.\n    If there are multiple elements in the list with the same minimum second value, then return the first element in the list with that second value.\n    \n    Input: list of tuples\n    Output: value\n    \n    Input: list of tuples where first_element matches smallest second value\n    Output: value\n    \n    Input: list of tuples where first_element matches smallest second value, but second_element is the same\n    Output: None\n    \n    Input: list of tuples where first_element matches smallest second value, but second_element is a duplicate\n    Output: first_element\n    \n    Input: list of tuples where first_element does not match any second value\n    Output: None\n    \n    Input: list of tuples where second_element does not match any first value\n    Output: None\n    \n    Input: list of tuples where first_element and second_element match, but second_element is not the smallest\n    Output: first_element\n    \n    Input: list of tuples where first_element and second_element match, but first_element is not the smallest\n    Output: None\n    \n    Input: list of tuples where first_element and second_element match, but second_element is not the smallest\n    Output: None\n    \n    Input: list of tuples where first_element and second_element match, and first_element is the smallest\n    Output: first_element\n    \n    Input: list of tuples where first_element and second_element match, and second_element is the smallest\n    Output: first_element\n    \n    Input: list of tuples where first_element and second_element match, and first_element is the smallest\n    Output: first_element\n    \n    Input: list of tuples where first_element and second_element match, and first_element is the smallest\n    Output: first_element\n    \n    Input: list of tuples where first_element and second_element match, and first_element is the smallest\n    Output: first_element\n    \n    Input: list of tuples where first_element and second_element match, but first_element is not the smallest\n    Output: first_element\n    \n    Input: list of tuples where first_element does not match any second value\n    Output: None\n    \n    Input: list of tuples where second_element does not match any first value\n    Output: None\n    \n    Input: list of tuples where first_element matches smallest second value, but second_element is not the smallest\n    Output: first_element\n    \n    Input: list of tuples where first_element matches smallest second value, but second_element is not the smallest\n    Output: first_element\n    \n    Input: list of tuples where first_element matches smallest second value, but second_element is not the smallest\n    Output: None\n    \n    Input: list of tuples where first_element matches smallest second value, and first_element is not the smallest\n    Output: first_element\n    \n    Input: list of tuples where first_element matches smallest second value, and second_element is not the smallest\n    Output: first_element\n    \n    Input: list of tuples where first_element matches smallest second value, and first_element is not the smallest\n    Output: first_element\n    \n    Input: list of tuples where first_element matches smallest second value, and first_element is not the smallest\n    Output: first_element\n    \n    Input: list of tuples where first_element matches smallest second value, and first_element is not the smallest\n    Output: first_element\n    \n    Input: list of tuples where first_element matches smallest second value, and first_element is not the smallest\n    Output: None\n    \n    Input: list of tuples where first_element matches smallest second value, and second_element is not the smallest\n    Output: first_element\n    \n    Input: list of tuples where first_element matches smallest second value, and second_element is not the smallest\n    Output: None\n    \n    Input: list of tuples where first_element matches smallest second value, and second_element is not the smallest\n    Output: None\n    \n    Input: list of tuples where first_element matches smallest second value, and second_element is not the smallest\n    Output: None\n    \n    Input: list of tuples where first_element matches smallest second value, and second_element is not the smallest\n    Output: None\n    \n    Input: list of tuples where first_element matches smallest second value, and second_element is not the smallest\n    Output: None\n    \n    Input: list of tuples where first_element matches smallest second value, and second_element is not the smallest\n    Output: None\n    \n    Input: list of tuples where first_element matches smallest second value, and second_element is not the smallest\n    Output: None\n    \n    Input: list of tuples where first_element matches smallest second value, and second_element is not the smallest\n    Output: None\n    \n    Input: list of tuples where first_element matches smallest second value, and second_element is not the smallest\n    Output: None\n    \n    Input: list of tuples where first_element matches smallest second value, and second_element is not the smallest\n    Output: None\n    \n    Input: list of tuples where first_element matches smallest second value, and second_element is not the smallest\n    Output: None\n    \n    Input: list of tuples where first_element matches smallest second value, and second_element is not the smallest\n    Output: None\n    \n    Input: list of tuples where first_element matches smallest second value, and second_element is not the smallest\n    Output: None\n    \n    Input: list of tuples where first_element matches smallest second value, and second_element is not the smallest\n    Output: None\n    \n    Input: list of tuples where first_element matches smallest second value, and second_element is not the smallest\n    Output: None\n    \n    Input: list of tuples where first_element matches smallest second value, and second_element is not the smallest\n    Output: None\n    \n    Input: list of tuples where first_element matches smallest second value, and second_element is not the smallest\n    Output: None\n    \n    Input: list of tuples where first_element matches smallest second value, and second_element is not the smallest\n    Output: None\n    \n    Input: list of tuples where first_element matches smallest second value, and second_element is not the smallest\n    Output: None\n    \n    Input: list of tuples where first_element matches smallest second value, and second_element is not the smallest\n    Output: None\n    \n    Input: list of tuples where first_element matches smallest second value, and second_element is not the smallest\n    Output: None\n    \n    Input: list of tuples where first_element matches smallest second value, and second_element is not the smallest\n    Output: None\n    \n    Input: list of tuples where first_element matches smallest second value, and second_element is not the smallest\n    Output: None\n    \n    Input: list of tuples where first_element matches smallest second value, and second_element is not the smallest\n    Output: None\n    \n    Input: list of tuples where first_element matches smallest second value, and second_element is not the smallest\n    Output: None\n    \n    Input: list of tuples where first_element matches smallest second value, and second_element is not the smallest\n    Output: None\n    \n    Input: list of tuples where first_element matches smallest second value, and second_element is not the smallest\n    Output: None\n    \n    Input: list of tuples where first_element matches smallest second value, and second_element is not the smallest\n    Output: None\n    \n    Input: list of tuples where first_element matches smallest second value, and second_element is not the smallest\n    Output: None\n    \n    Input: list of tuples where first_element matches smallest second value, and second_element is not the smallest\n    Output: None\n    \n    Input: list of tuples where first_element matches smallest second value, and second_element is not the smallest"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     index_minimum(()) == None, \"Error 1: Expected None\"\nassert     index_minimum([]) == None, \"Error 2: Expected None\"\nassert     index_minimum([(1,2)]) == (1,2), \"Error 3: Expected (1,2)\"\nassert     index_minimum([(1,2),(2,3)]) == (1,2), \"Error 4: Expected (1,2)\"\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    index_minimum([('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'd'), ('a', 'b', 'd')]) == ('a', 'b', 'c')\nassert \n    index_minimum([('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'd'), ('a', 'b', 'd')]) == ('a', 'b', 'c')\nassert \n    index_minimum([('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'd'), ('a', 'b', 'd')]) == ('a', 'b', 'c')\nassert \n    index_minimum([('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'd'), ('a', 'b', 'd')]) == ('a', 'b', 'c')\nassert \n    index_minimum([('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'd'), ('a', 'b', 'd')]) == ('a', 'b', 'c')\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     index_minimum([(1,2),(3,4),(7,8),(7,9),(7,10),(7,11),(7,12)]) == (7,7)\nassert     index_minimum([(1,2),(3,4),(7,8),(7,9),(7,10),(7,11),(7,12)]) == (7,7)\nassert     index_minimum([(1,2),(3,4),(7,8),(7,9),(7,10),(7,11),(7,12)]) == (7,7)\nassert     index_minimum([(1,2),(3,4),(7,8),(7,9),(7,10),(7,11),(7,12)]) == (7,7)\nassert     index_minimum([(1,2),(3,4),(7,8),(7,9),(7,10),(7,11),(7,12)]) == (7,7)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ntest_list = [(6,2),(5,4),(2,4),(3,1)]\nassert index_minimum(test_list) == (2,1)\ntest_list = [(6,2),(5,4),(2,4),(3,1),(5,6)]\nassert index_minimum(test_list) == (2,1)\n\ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert index_minimum([(1,2),(5,3),(2,4),(6,1)]) == (1,2)\nassert index_minimum([(1,2),(1,3),(1,4),(1,5)]) == (1,1)\nassert index_minimum([(1,2),(2,3),(1,4),(1,5)]) == (1,2)\nassert index_minimum([(1,2),(2,3),(1,4),(5,6),(1,7)]) == (1,1)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    pass\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Find_Min_Length([1,2,3,4,5,6]) == 6, 'test failed'\n\ndef Find_Min_Index(lst):\n    '''\n    Write a python function to find the index of the smallest item in a list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint('Testing Find_Min_Length...')\nFind_Min_Length([[1,2,3],\n        [2,3,4],\n        [3,4,5],\n        [4,5,6],\n        [5,6,7],\n        [6,7,8],\n        [7,8,9],\n        [8,9,10]]) == 5\nFind_Min_Length([[1,2,3,4],\n        [2,3,4,5],\n        [3,4,5,6],\n        [4,5,6,7],\n        [5,6,7,8],\n        [6,7,8,9],\n        [7,8,9,10]]) == 2\nFind_Min_Length([[1],\n        [2],\n        [3],\n        [4],\n        [5]]) == 5\nFind_Min_Length([[1,2],\n        [2,3],\n        [3,4],\n        [4,5]]) == 2\nFind_Min_Length([[1,2,3],\n        [2,3,4],\n        [3,4,5],\n        [4,5,6],\n        [5,6,7],\n        [6,7,8],\n        [7,8,9],\n        [8,9,10]]) == 3\nFind_Min_Length([[1,2,3,4],\n        [2,3,4,5],\n        [3,4,5,6],\n        [4,5,6,7],\n        [5,6,7,8],\n        [6,7,8,9],\n        [7,8,9,10]]) == 2\nFind_Min_Length([[1,2,3,4],\n        [2,3,4,5]]) == 2\nFind_Min_Length([[]]) == 0\nFind_Min_Length([[1]]) == 1\nFind_Min_Length([[1,2,3]]) == 2\nFind_Min_Length([[1,2,3,4,5,6]]) == 5\nFind_Min_Length([[1,2,3,4],\n        [2,3,4,5],\n        [3,4,5,6],\n        [4,5,6,7],\n        [5,6,7,8],\n        [6,7,8,9],\n        [7,8,9,10],\n        [8,9,10,11],\n        [9,10,11,12],\n        [10,11,12,13],\n        [11,12,13,14],\n        [12,13,14,15],\n        [13,14,15,16],\n        [14,15,16,17],\n        [15,16,17,18],\n        [16,17,18,19],\n        [17,18,19,20],\n        [18,19,20,21],\n        [19,20,21,22],\n        [20,21,22,23],\n        [21,22,23,24],\n        [22,23,24,25],\n        [23,24,25,26],\n        [24,25,26,27],\n        [25,26,27,28],\n        [26,27,28,29],\n        [27,28,29,30],\n        [28,29,30,31],\n        [29,30,31,32],\n        [30,31,32,33],\n        [31,32,33,34],\n        [32,33,34,35],\n        [33,34,35,36],\n        [34,35,36,37],\n        [35,36,37,38],\n        [36,37,38,39],\n        [37,38,39,40],\n        [38,39,40,41],\n        [39,40,41,42],\n        [40,41,42,43],\n        [41,42,43,44],\n        [42,43,44,45],\n        [43,44,45,46],\n        [44,45,46,47],\n        [45,46,47,48],\n        [46,47,48,49],\n        [47,48,49,50],\n        [48,49,50,51],\n        [49,50,51,52],\n        [50,51,52,53],\n        [51,52,53,54],\n        [52,53,54,55],\n        [53,54,55,56],\n        [54,55,56,57],\n        [55,56,57,58],\n        [56,57,58,59],\n        [57,58,59,60],\n        [58,59,60,61],\n        [59,60,61,62],\n        [60,61,62,63],\n        [61,62,63,64],\n        [62,63,64,65],\n        [63,64,65,66],\n        [64,65,66,67],\n        [65,66,67,68],\n        [66,67,68,69],\n        [67,68,69,70],\n        [68,69,70,71],\n        [69,70,71,72],\n        [70,71,72,73],\n        [71,72,73,74],\n        [72,73,74,75],\n        [73,74,75,76],\n        [74,75,76,77],\n        [75,76,77,78],\n        [76,77,78,79],\n        [77,78,79,80],\n        [78,79,80,81],\n        [79,80,81,82],\n        [80,81,82,83],\n        [81,82,83,84],\n        [82,83,84,85],\n        [83,84,85,86],\n        [84,85,86,87],\n        [85,86,87,88],\n        [86,87,88,89],\n        [87,88,89,90],\n        [88,89,90,91],\n        [89,90,91,92],\n        [90,91,92,93],\n        [91,92,93,94],\n        [92,93,94,95],\n        [93,94,95,96],\n        [94,95,96,97],\n        [95,96,97,98],\n        [96,97,98,99],\n        [97,98,99,100],\n        [98,99,100,101],\n        [99,100,101,102],\n        [100,101,102,103],\n        [101,102,103,104],\n        [102,103,104,105],\n        [103,104,105,106],\n        [104,105,106,107],\n        [105,106,107,108],\n        [106,107,108,109],\n        [107,108,109,110],\n        [108,109,110,111],\n        [109,110,111,112],\n        [110,111,112,113],\n        [111,112,113,114],\n        [112,113,114,115],\n        [113,114,115,116],\n        [114,115,116,117],\n        [115,116,117,118],\n        [116,117,118,119],\n        [117,118,119,120],\n        [118,119,120,121],\n        [119,120,121,122],\n        [120,121,122,123],\n        [121,122,123,124],\n        [122,123,124,125],\n        [123,124,125,126],\n        [124,125,126,127],\n        [125,126,127,128],\n        [126,127,128,129],\n        [127,128,129,130],\n        [128,129,130,131],\n        [129,130,131,132],\n        [130,131,132,133],\n        [131,132,133,134],\n        [132,133,134,135],\n        [133,134,135,136],\n        [134,135,136,137],\n        [135,136"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Find_Min_Length([[1,2,3],[4,5],[5,6]]) == 1, \"Fail\"\nassert Find_Min_Length([[1,2,3],[4,5],[5,6],[7,8,9,0]]) == 0, \"Fail\"\nassert Find_Min_Length([[1,2,3],[4,5],[5,6],[7,8,9,0],[4,5,6,7,8,9,0]]) == 3, \"Fail\"\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Find_Min_Length([1, 2, 3, 4, 5]) == 1, \"expected 1\"\nassert     Find_Min_Length([]) == 0, \"expected 0\"\nassert     Find_Min_Length([1, 2, 3, 4, 5, 6]) == 2, \"expected 2\"\nassert     Find_Min_Length([-1, 2, 3, 4, 5]) == 1, \"expected 1\"\nassert     Find_Min_Length([-1, -2, -3, -4, -5]) == 1, \"expected 1\"\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Find_Min_Length([]) == 0\nassert     Find_Min_Length([[],[]]) == 0\nassert     Find_Min_Length([[1],[]]) == 0\nassert     Find_Min_Length([[],[1]]) == 0\nassert     Find_Min_Length([[1],[1]]) == 0\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Find_Min_Length([[4,8,7,8],2,3,7,2,6,8,8,3,4,8,4,8,9,6,7,4,9,7,4,7,6,5,6,6,6,5,4,6,5,6,4,3,7,6,8,6,8,7,5,6,4,8,7,8,7,4,6,5,6,5,4,5,7,8,6,9,4,7,7,6,7,4,9,7,8,7,6,6,8,8,7,4,7,7,6,7,4,3,4,8,6,6,5,8,4,7,7,7,7,7,7,7,7,4,6,6,7,6,4,7,6,4,7,7,7,4,7,4,7,7,7,7,7,7,7,7,4,7,7,7,7,4,7,7,7,7,7,7,7,7,7,7,7,7,7,4,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     divisor(2) == 0, \"should be 0\"\nassert     divisor(6) == 2, \"should be 2\"\nassert     divisor(3) == 0, \"should be 0\"\nassert     divisor(5) == 3, \"should be 3\"\nassert     divisor(10) == 4, \"should be 4\"\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     divisor(10) == 2\nassert     divisor(17) == 3\nassert     divisor(36) == 4\nassert     divisor(47) == 4\nassert     divisor(99) == 5\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndivisor(2) == 1\ndivisor(5) == 2\ndivisor(10) == 3\ndivisor(100) == 13\ndivisor(3) == 6"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == '__main__':\n    assert divisor(20) == 5,'return the number of divisors'\n    assert divisor(8) == 4,'return the number of divisors'\n    assert divisor(5) == 3,'return the number of divisors"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     divisor(3) == 2\nassert     divisor(18) == 5\nassert     divisor(9) == 3\nassert     divisor(5) == 1\nassert     divisor(6) == 2\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(\"All tests passed.\")\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    divisor(3) == 5\n    divisor(2) == 2\n    divisor(8) == 3\n    divisor(20) == 5\n    divisor(21) == 4\n    divisor(0) == 1\n    divisor(1) == 1\n    divisor(7) == 7\n    divisor(6) == 2\n    divisor(4) == 2\n    divisor(5) == 1\n    divisor(100) == 10\n    divisor(102) == 7\n    divisor(103) == 6\n    divisor(104) == 4\n    divisor(105) == 3\n    divisor(106) == 2\n    divisor(107) == 1\n    divisor(108) == 1\n    divisor(109) == 1\n    divisor(110) == 1\n    divisor(111) == 1\n    divisor(112) == 1\n    divisor(113) == 1\n    divisor(114) == 1\n    divisor(115) == 1\n    divisor(116) == 1\n    divisor(117) == 1\n    divisor(118) == 1\n    divisor(119) == 1\n    divisor(120) == 1\n    divisor(121) == 1\n    divisor(122) == 1\n    divisor(123) == 1\n    divisor(124) == 1\n    divisor(125) == 1\n    divisor(126) == 1\n    divisor(127) == 1\n    divisor(128) == 1\n    divisor(129) == 1\n    divisor(130) == 1\n    divisor(131) == 1\n    divisor(132) == 1\n    divisor(133) == 1\n    divisor(134) == 1\n    divisor(135) == 1\n    divisor(136) == 1\n    divisor(137) == 1\n    divisor(138) == 1\n    divisor(139) == 1\n    divisor(140) == 1\n    divisor(141) == 1\n    divisor(142) == 1\n    divisor(143) == 1\n    divisor(144) == 1\n    divisor(145) == 1\n    divisor(146) == 1\n    divisor(147) == 1\n    divisor(148) == 1\n    divisor(149) == 1\n    divisor(150) == 1\n    divisor(151) == 1\n    divisor(152) == 1\n    divisor(153) == 1\n    divisor(154) == 1\n    divisor(155) == 1\n    divisor(156) == 1\n    divisor(157) == 1\n    divisor(158) == 1\n    divisor(159) == 1\n    divisor(160) == 1\n    divisor(161) == 1\n    divisor(162) == 1\n    divisor(163) == 1\n    divisor(164) == 1\n    divisor(165) == 1\n    divisor(166) == 1\n    divisor(167) == 1\n    divisor(168) == 1\n    divisor(169) == 1\n    divisor(170) == 1\n    divisor(171) == 1\n    divisor(172) == 1\n    divisor(173) == 1\n    divisor(174) == 1\n    divisor(175) == 1\n    divisor(176) == 1\n    divisor(177) == 1\n    divisor(178) == 1\n    divisor(179) == 1\n    divisor(180) == 1\n    divisor(181) == 1\n    divisor(182) == 1\n    divisor(183) == 1\n    divisor(184) == 1\n    divisor(185) == 1\n    divisor(186) == 1\n    divisor(187) == 1\n    divisor(188) == 1\n    divisor(189) == 1\n    divisor(190) == 1\n    divisor(191) == 1\n    divisor(192) == 1\n    divisor(193) == 1\n    divisor(194) == 1\n    divisor(195) == 1\n    divisor(196) == 1\n    divisor(197) == 1\n    divisor(198) == 1\n    divisor(199) == 1\n    divisor(200) == 1\n    divisor(201) == 1\n    divisor(202) == 1\n    divisor(203) == 1\n    divisor(204) == 1\n    divisor(205) == 1\n    divisor(206) == 1\n    divisor(207) == 1\n    divisor(208) == 1\n    divisor(209) == 1\n    divisor(210) == 1\n    divisor(211) == 1\n    divisor(212) == 1\n    divisor(213) == 1\n    divisor(214) == 1\n    divisor(215) == 1\n    divisor(216) == 1\n    divisor(217) == 1\n    divisor(218) == 1\n    divisor(219) == 1\n    divisor(220) == 1\n    divisor(221) == 1\n    divisor(222) == 1\n    divisor(223) == 1\n    divisor(224) == 1\n    divisor(225) == 1\n    divisor(226) == 1\n    divisor(227) == 1\n    divisor(228) == 1\n    divisor(229) == 1\n    divisor(230) == 1\n    divisor(231) == 1\n    divisor(232) == 1\n    divisor(233) == 1\n    divisor(234) == 1\n    divisor(235) == 1\n    divisor(236) == 1\n    divisor(237) == 1\n    divisor(238) == 1\n    divisor(239) == 1\n    divisor(240) == 1\n    divisor(241) == 1\n    divisor(242) == 1\n    divisor(243) == 1\n    divisor(244) == 1\n    divisor(245) == 1\n    divisor(246) == 1\n    divisor(247) == 1\n    divisor(248) == 1\n    divisor(249) == 1\n    divisor(250) == 1\n    divisor(251) == 1\n    divisor(252) == 1\n    divisor(253) == 1\n    divisor(254) == 1\n    divisor(255) == 1\n    divisor(256) == 1\n    divisor(257) == 1\n    divisor(258) == 1\n    divisor(259) == 1\n    divisor(260) == 1\n    divisor(261) == 1\n    divisor(262) == 1\n    divisor(263) == 1\n    divisor(264) == 1\n    divisor(265) == 1\n    divisor(266) == 1\n    divisor(267) == 1\n    divisor(268) == 1\n    divisor(269) == 1\n    divisor(270) == 1\n    divisor(271) == 1\n    divisor(272) == 1\n    divisor(273) == 1\n    divisor(274) == 1\n    divisor(275) == 1\n    divisor(276) == 1\n    divisor(277) == 1\n    divisor(278) == 1\n    divisor(279) == 1\n    divisor(280) == 1\n    divisor(281) == 1\n    divisor(282) == 1\n    divisor(283) == 1\n    divisor(284) == 1\n    divisor(285) == 1\n    divisor(286) == 1\n    divisor(287) == 1\n    divisor(288) == 1\n    divisor(289"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     frequency_lists([[1,2,3], [4,5,6], [1,2,3,2]]) == {1: 2, 4: 1, 5: 1, 6: 1, 2: 2}\nassert     frequency_lists([[1,2,3], [4,5,6], [1,2,3,2,2]]) == {1: 2, 4: 1, 5: 1, 6: 1, 2: 2}\nassert     frequency_lists([[1,2,3], [4,5,6], [1,2,3,2,2,2]]) == {1: 2, 4: 1, 5: 1, 6: 1, 2: 2}\nassert     frequency_lists([[1,2,3], [4,5,6], [1,2,3,2,2,2,2]]) == {1: 2, 4: 1, 5: 1, 6: 1, 2: 2}\nassert     frequency_lists([[1,2,3], [4,5,6], [1,2,3,2,2,2,2]]) == {1: 2, 4: 1, 5: 1, 6: 1, 2: 2}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     frequency_lists([[2, 3, 4], [4, 5, 6]]) == {2: 2, 3: 1, 4: 2, 5: 1, 6: 1}\nassert     frequency_lists([[3, 2, 3], [2, 4, 3]]) == {2: 2, 3: 3, 4: 1}\nassert     frequency_lists([[2, 2, 2], [2, 3, 2], [2, 2, 2]]) == {2: 4, 3: 1, 2: 3}\nassert     frequency_lists([[2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6], \n                            [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]]) == {2: 3, 3: 4, 4: 2, 5: 3, 6: 2, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1, 13: 1, 14: 1, 15: 1, 16: 1, 17: 1}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert {'e': 2, 'i': 1,'s': 1, 't': 2} == frequency_lists([['e'], ['i'], ['e'], ['i'], ['e'], ['i'], ['e'], ['i']]), \"Should be {'e': 2, 'i': 1,'s': 1, 't': 2}\"\nassert \nassert {'e': 1, 'i': 1,'s': 1, 't': 2} == frequency_lists([['e'], ['e'], ['i'], ['i'], ['e'], ['i'], ['i'], ['i']]), \"Should be {'e': 1, 'i': 1,'s': 1, 't': 2}\"\nassert \n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     frequency_lists([1,2,3]) == {1:1, 2:1, 3:1}, \"frequency_lists(..)\"\nassert     frequency_lists([[1,2], [3,4], [5,6]]) == {1:2, 3:1, 5:1, 6:1}, \"frequency_lists(..)\"\nassert     frequency_lists([[1,2,3,4], [5,6,7,8], [9,10,11,12]]) == {1:2, 2:2, 3:2, 4:1, 5:1, 6:2, 7:1, 8:1, 9:1, 10:1, 11:1, 12:1}, \"frequency_lists(..)\""
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     frequency_lists([[3,2,1,4],[6,5,4,3,2,1]]    ) == {3:2,2:1,1:3,4:4,5:2,6:1}\nassert     frequency_lists([[4,3,2,1,4,5]]) == {4:1,3:2,2:2,1:4,4:1,5:1}\nassert     frequency_lists([[1,2,3,4]]) == {1:1,2:1,3:1,4:1}\nassert     frequency_lists([[1,2,3]]) == {1:1,2:1,3:1}\nassert     frequency_lists([[1]]) == {1:1}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     frequency_lists(\n            [\n                [3, 5],\n                [3, 5],\n                [3],\n                [4, 5],\n                [5, 5],\n                [4, 5]\n            ]\n        ) == {\n            3: 3,\n            4: 2,\n            5: 2\n        }, f\"Wrong output. Expected {frequency_lists(\n            [\n                [3, 5],\n                [3, 5],\n                [3],\n                [4, 5],\n                [5, 5],\n                [4, 5]\n            ]\n        )}\"\n\nassert     frequency_lists(\n            [\n                [3, 5],\n                [3, 5],\n                [3],\n                [4, 5],\n                [5, 5],\n                [4, 5],\n                [4]\n            ]\n        ) == {\n            3: 2,\n            4: 2,\n            5: 3\n        }, f\"Wrong output. Expected {frequency_lists(\n            [\n                [3, 5],\n                [3, 5],\n                [3],\n                [4, 5],\n                [5, 5],\n                [4, 5],\n                [4]\n            ]\n        )}\"\n\nassert     frequency_lists(\n            [\n                [3, 5],\n                [3, 5],\n                [3],\n                [4, 5],\n                [5, 5],\n                [4, 5],\n                [4]\n            ]\n        ) == {\n            3: 1,\n            4: 2,\n            5: 2\n        }, f\"Wrong output. Expected {frequency_lists(\n            [\n                [3, 5],\n                [3, 5],\n                [3],\n                [4, 5],\n                [5, 5],\n                [4, 5],\n                [4]\n            ]\n        )}\"\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,3]))\nprint('frequency_lists:', frequency_lists([1,2,3,1,2,3,2,2,3,1,"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     frequency_lists(['a', 'a', 'b', 'b', 'c', 'c']) == {'a': 3, 'b': 2, 'c': 2}\n\ndef reverse_string(s):\n    '''\n    Write a function to return a reversed string\n    '''\n    pass\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     multiply_num([]) == 1, \"Expected result: 1\"\nassert     multiply_num([1, 3, 5]) == 15, \"Expected result: 15\"\nassert     multiply_num([1, 3, 5, 9]) == 55, \"Expected result: 55\"\nassert     multiply_num([1, 3, 5, 9, 2]) == 55, \"Expected result: 55\"\nassert     multiply_num([1, 3, 5, 9, 2, 4]) == 110, \"Expected result: 110\"\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     multiply_num([1,2,3,4]) == 24\nassert     multiply_num([1]) == 1\nassert     multiply_num([]) == 1\nassert     multiply_num([1,2,3]) == 6\nassert     multiply_num([1,2,3,4,5,6]) == 288\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     multiply_num([1, 2, 3]) == 6, \"Not correct\"\nassert     multiply_num([1, 3, 4]) == 24, \"Not correct\"\nassert     multiply_num([1, 1, 1]) == 6, \"Not correct\"\nassert     multiply_num([]) == 0, \"Not correct\"\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    multiply_num([2,3,4]) == 24, \"Fail\"\n    multiply_num([]) == 1, \"Fail\"\n    multiply_num([2,5]) == 30, \"Fail\"\n    multiply_num([1,2,3,4,5]) == 120, \"Fail\""
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     multiply_num([0]) == 0, \"Incorrect\"\nassert multiply_num([1]) == 1, \"Incorrect\"\nassert multiply_num([2, 3]) == 6, \"Incorrect\"\nassert multiply_num([3, 4]) == 12, \"Incorrect\"\nassert multiply_num([3, 4, 5]) == 60, \"Incorrect\"\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     multiply_num([2, 3, 4]) == 24, \"The result should be 24\"\nassert     multiply_num([1]) == 1, \"The result should be 1\"\nassert     multiply_num([1, 2, 3]) == 6, \"The result should be 6\"\nassert     multiply_num([2, 0, -1]) == -2, \"The result should be -2\""
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef show_time():  \n    '''\n    Write a function that takes a number as an input and returns the time in the format of \"hh:mm:ss\"\n    '''\n    pass\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     multiply_num([2, 6, 8]) == 48, 'Wrong answer'\nassert     multiply_num([2, 3, 4, 5]) == 120, 'Wrong answer'\nassert     multiply_num([2, 3, 4, 5, 7]) == 84, 'Wrong answer'\nassert     multiply_num([2, 4, 5]) == 40, 'Wrong answer'\nassert     multiply_num([]) == 1, 'Wrong answer'\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(decimal_to_binary(8))"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndecimal_to_binary(4) == '1000'\ndecimal_to_binary(5) == '1001'\ndecimal_to_binary(6) == '1010'\ndecimal_to_binary(7) == '1011'\ndecimal_to_binary(8) == '1100'\ndecimal_to_binary(9) == '1101'\ndecimal_to_binary(10) == '1110'\ndecimal_to_binary(11) == '1111'"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     decimal_to_binary(2) == \"00\"\nassert decimal_to_binary(3) == \"01\"\nassert decimal_to_binary(5) == \"101\"\nassert decimal_to_binary(7) == \"111\"\nassert decimal_to_binary(12) == \"1100\"\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint(decimal_to_binary(2))  # should return 10\nprint(decimal_to_binary(3))  # should return 11\nprint(decimal_to_binary(4))  # should return 100\nprint(decimal_to_binary(5))  # should return 101\nprint(decimal_to_binary(6))  # should return 110\nprint(decimal_to_binary(7))  # should return 111\nprint(decimal_to_binary(8))  # should return 1000\nprint(decimal_to_binary(9))  # should return 1001\nprint(decimal_to_binary(10))  # should return 1010\nprint(decimal_to_binary(11))  # should return 1011\nprint(decimal_to_binary(12))  # should return 1100\nprint(decimal_to_binary(13))  # should return 1101\nprint(decimal_to_binary(14))  # should return 1110\nprint(decimal_to_binary(15))  # should return 1111\nprint(decimal_to_binary(16))  # should return 1110\nprint(decimal_to_binary(17))  # should return 1111\nprint(decimal_to_binary(18))  # should return 11111\nprint(decimal_to_binary(19))  # should return 111111\nprint(decimal_to_binary(20))  # should return 1111110\nprint(decimal_to_binary(21))  # should return 11111111\nprint(decimal_to_binary(22))  # should return 11111111\nprint(decimal_to_binary(23))  # should return 111111111\nprint(decimal_to_binary(24))  # should return 11111111111\nprint(decimal_to_binary(25))  # should return 11111111111\nprint(decimal_to_binary(26))  # should return 111111111111111\nprint(decimal_to_binary(27))  # should return 11111111111111111\nprint(decimal_to_binary(28))  # should return 1111111111111111111\nprint(decimal_to_binary(29))  # should return 11111111111111111111111\nprint(decimal_to_binary(30))  # should return 111111111111111111111111111\nprint(decimal_to_binary(31))  # should return 11111111111111111111111111111111\nprint(decimal_to_binary(32))  # should return 11111111111111111111111111111111111\nprint(decimal_to_binary(33))  # should return 111111111111111111111111111111111111111\nprint(decimal_to_binary(34))  # should return 111111111111111111111111111111111111111\nprint(decimal_to_binary(35))  # should return 1111111111111111111111111111111111111111111\nprint(decimal_to_binary(36))  # should return 11111111111111111111111111111111111111111111111\nprint(decimal_to_binary(37))  # should return 1111111111111111111111111111111111111111111111111\nprint(decimal_to_binary(38))  # should return 11111111111111111111111111111111111111111111111111111\nprint(decimal_to_binary(39))  # should return 111111111111111111111111111111111111111111111111111111\nprint(decimal_to_binary(40))  # should return 11111111111111111111111111111111111111111111111111111111\nprint(decimal_to_binary(41))  # should return 11111111111111111111111111111111111111111111111111111111\nprint(decimal_to_binary(42))  # should return 11111111111111111111111111111111111111111111111111111111\nprint(decimal_to_binary(43))  # should return 11111111111111111111111111111111111111111111111111111111\nprint(decimal_to_binary(44))  # should return 11111111111111111111111111111111111111111111111111111111\nprint(decimal_to_binary(45))  # should return 11111111111111111111111111111111111111111111111111111111\nprint(decimal_to_binary(46))  # should return 11111111111111111111111111111111111111111111111111111111\nprint(decimal_to_binary(47))  # should return 11111111111111111111111111111111111111111111111111111111\nprint(decimal_to_binary(48))  # should return 11111111111111111111111111111111111111111111111111111111\nprint(decimal_to_binary(49))  # should return 11111111111111111111111111111111111111111111111111111111\nprint(decimal_to_binary(50))  # should return 11111111111111111111111111111111111111111111111111111111\nprint(decimal_to_binary(51))  # should return 11111111111111111111111111111111111111111111111111111111\nprint(decimal_to_binary(52))  # should return 11111111111111111111111111111111111111111111111111111111\nprint(decimal_to_binary(53))  # should return 11111111111111111111111111111111111111111111111111111111\nprint(decimal_to_binary(54))  # should return 11111111111111111111111111111111111111111111111111111111\nprint(decimal_to_binary(55))  # should return 11111111111111111111111111111111111111111111111111111111\nprint(decimal_to_binary(56))  # should return 11111111111111111111111111111111111111111111111111111111\nprint(decimal_to_binary(57))  # should return 11111111111111111111111111111111111111111111111111111111\nprint(decimal_to_binary(58))  # should return 11111111111111111111111111111111111111111111111111111111\nprint(decimal_to_binary(59))  # should return 11111111111111111111111111111111111111111111111111111111\nprint(decimal_to_binary(60))  # should return 11111111111111111111111111111111111111111111111111111111\nprint(decimal_to_binary(61))  # should return 11111111111111111111111111111111111111111111111111111111\nprint(decimal_to_binary(62))  # should return 11111111111111111111111111111111111111111111111111111111\nprint(decimal_to_binary(63))  # should return 11111111111111111111111111111111111111111111111111111111\nprint(decimal_to_binary(64))  # should return 11111111111111111111111111111111111111111111111111111111\nprint(decimal_to_binary(65))  # should return 11111111111111111111111111111111111111111111111111111111\nprint(decimal_to_binary(66))  # should return 11111111111111111111111111111111111111111111111111111111\nprint(decimal_to_binary(67))  # should return 11111111111111111111111111111111111111111111111111111111\nprint(decimal_to_binary(68))  # should return 11111111111111111111111111111111111111111111111111111111\nprint(decimal_to_binary(69))  # should return 11111111111111111111111111111111111111111111111111111111\nprint(decimal_to_binary(70))  # should return 11111111111111111111111111111111111111111111111111111111\nprint(decimal_to_binary(71))  # should return 11111111111111111111111111111111111111111111111111111111\nprint(decimal_to_binary(72))  # should return 11111111111111111111111111111111111111111111111111111111\nprint(decimal_to_binary(73))  # should return 11111111111111111111111111111111111111111111111111111111\nprint(decimal_to_binary(74))  # should return 11111111111111111111111111111111111111111111111111111111\nprint(decimal_to_binary(75))  # should return 11111111111111111111111111111111111111111111111111111111\nprint(decimal_to_binary(76))  # should return 11111111111111111111111111111111111111111111111111111111\nprint(decimal_to_binary(77))  # should return 11111111111111111111111111111111111111111111111111111111\nprint(decimal_to_binary(78))  # should return 111111111111111111111111111111"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef binary_to_decimal(bin_num):\n    '''\n    Write a function to convert the given binary number to its decimal equivalent, represented as a string. \n    '''\n    pass\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     decimal_to_binary(4) == \"0000\"\nassert     decimal_to_binary(10) == \"1010\"\nassert     decimal_to_binary(15) == \"1111\"\nassert     decimal_to_binary(0) == \"0\"\nassert     decimal_to_binary(7) == \"111\"\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     decimal_to_binary(0) == '0'\nassert     decimal_to_binary(1) == '1'\nassert     decimal_to_binary(2) == '10'\nassert     decimal_to_binary(3) == '11'\nassert     decimal_to_binary(8) == '1000'\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     next_smallest_palindrome(121) == 121\nassert next_smallest_palindrome(1) == 2\nassert next_smallest_palindrome(6) == 7\nassert next_smallest_palindrome(1234) == 1234\nassert next_smallest_palindrome(12345) == 12345\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert next_smallest_palindrome(1234) == 9999\nassert next_smallest_palindrome(1234) == 9999\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef next_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     next_smallest_palindrome(123) == 321\nassert     next_smallest_palindrome(1234) == 1235\nassert     next_smallest_palindrome(9999) == 9998\nassert     next_smallest_palindrome(11111) == 11111\nassert     next_smallest_palindrome(12) == 13\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     next_smallest_palindrome(121) == 22\nassert     next_smallest_palindrome(999) == 1001\nassert     next_smallest_palindrome(10) == 11\nassert     next_smallest_palindrome(11) == 12\n\n'''\nWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     next_smallest_palindrome(121) == 121\nassert     next_smallest_palindrome(1) == 2\nassert     next_smallest_palindrome(12) == 13\nassert     next_smallest_palindrome(18) == 19\nassert     next_smallest_palindrome(1001) == 1002\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     next_smallest_palindrome(1) == 2\nassert     next_smallest_palindrome(9) == 11\nassert     next_smallest_palindrome(20) == 21\nassert     next_smallest_palindrome(41) == 42\nassert     next_smallest_palindrome(60) == 61\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     next_smallest_palindrome(121) == 121\nassert    next_smallest_palindrome(10) == 11\nassert    next_smallest_palindrome(12345) == 12345\nassert    next_smallest_palindrome(11) == 11\nassert    next_smallest_palindrome(1) == 2\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     next_smallest_palindrome(121) == 121\nassert     next_smallest_palindrome(999) == 987\nassert     next_smallest_palindrome(1234) == 1235\n\ndef test_next_smallest_palindrome():\n    assert next_smallest_palindrome(12) == 13\n    "
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     next_smallest_palindrome(33) == 321\nassert next_smallest_palindrome(333) == 321\nassert next_smallest_palindrome(4444) == 4444\nassert next_smallest_palindrome(1111) == 1111\nassert next_smallest_palindrome(111111) == 1111\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     kth_element([1, 2, 3, 4, 5], 2) == 3\nassert     kth_element([1, 2, 3, 4, 5], -1) == 1\n\n'''\nProblem\nGiven an array arr of positive integers of size n. The task is to find the Kth largest element in the array.\n\nExample 1:\n\nInput:\nn = 5, k = 3\narr[] = {1, 10, 20, 50, 80}\nOutput:\n80\nExplanation:\nThe 3rd largest element in the given array is 80.\nExample 2:\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     kth_element([1, 4, 6, 2, 5, 9], 4) == 4\nassert     kth_element([1, 4, 6, 2, 5, 9], 5) == 5\nassert     kth_element([1, 4, 6, 2, 5, 9], 6) == 6\nassert     kth_element([1, 4, 6, 2, 5, 9], 7) == None\nassert     kth_element([1, 4, 6, 2, 5, 9], 8) == None\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     kth_element([1, 5, 8, 4, 2], 3) == 4, \\\n        'kth_element([1, 5, 8, 4, 2], 3) == 4 failed'\n\nassert     kth_element([1, 5, 8, 4, 2], 1) == 1, \\\n        'kth_element([1, 5, 8, 4, 2], 1) == 1 failed'\n\nassert     kth_element([1, 5, 8, 4, 2], 5) == 5, \\\n        'kth_element([1, 5, 8, 4, 2], 5) == 5 failed'\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     kth_element([0, 1, 1, 2, 2, 3, 4], 3) == 4, 'Not right'\nassert     kth_element([0, 1, 1, 2, 2, 3, 4], 0) == 0, 'Not right'\nassert     kth_element([0, 1, 1, 2, 2, 3, 4], 1) == 1, 'Not right'\nassert     kth_element([0, 1, 1, 2, 2, 3, 4], 5) == 2, 'Not right'\nassert     kth_element([0, 1, 1, 2, 2, 3, 4], 6) == 3, 'Not right'\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     kth_element([1,2,3,4,5,6],4) == 4, \"First\"\nassert     kth_element([1,2,3,4,5,6],1) == 1, \"Second\"\nassert     kth_element([1,2,3,4,5,6],6) == 6, \"Third\"\nassert     kth_element([1,2,3,4,5,6],7) == None, \"Fourth\"\nassert     kth_element([1,2,3,4,5,6],0) == None, \"Fifth\"\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     kth_element([3, 1, 4, 5, 2, 6, 7, 9], 3) == 4, \"Wrong kth_element\"\nassert     kth_element([1, 2, 3, 4], 1) == 1, \"Wrong kth_element\"\nassert     kth_element([1, 2, 3, 4], 5) == None, \"Wrong kth_element\"\nassert     kth_element([1, 2, 3, 4], -1) == None, \"Wrong kth_element\"\nassert     kth_element([], -1) == None, \"Wrong kth_element\"\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     kth_element([1,2,3,4,5],3) == 4, \"Wrong Answer\"\nassert kth_element([5,8,4,12,3,9,11],8) == 5, \"Wrong Answer\"\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     snake_to_camel('lowerCamelCase') == 'lowerCamelCase', 'Should return lowerCamelCase'\nassert     snake_to_camel('lowercamelCase') == 'lowercamelCase', 'Should return lowercamelCase'\nassert     snake_to_camel('lowerCamelCase12') == 'lowerCamelCase12', 'Should return lowerCamelCase12'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     snake_to_camel('hello_world') == 'helloWorld'\nassert     snake_to_camel('hello_world') == 'HelloWorld'\nassert     snake_to_camel('helloWorld_') == 'HelloWorld'\nassert     snake_to_camel('hello_world_') == 'HelloWorld'\nassert     snake_to_camel('hello__world') == 'HelloWorld'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     snake_to_camel('snake_case') =='snakeCamelCase'\nassert     snake_to_camel('snake_camel_case') =='snakeCamelCase'\nassert     snake_to_camel('snakeCamelCase') =='snakeCamelCase'\nassert     snake_to_camel('my_snake_case') =='mySnakeCase'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     snake_to_camel(\"my_name\") == \"my_name\"\nassert snake_to_camel(\"my_name\") == \"myName\"\nassert snake_to_camel(\"i_am_a_snake\") == \"iAmASnake\"\n\ndef camel_to_snake(word):\n    '''\n    Write a function to convert a camel case string to snake case string.\n    '''\n    pass\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     snake_to_camel('snake_case_string') =='snakeCaseString'\nassert     snake_to_camel('snake_case_string_') =='snakeCaseString'\nassert     snake_to_camel('snake_case_string_1') =='snakeCaseString1'\nassert     snake_to_camel('snake_case_string_2') =='snakeCaseString2'\nassert     snake_to_camel('snake_case_string_3') =='snakeCaseString3'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     snake_to_camel('snake_case') =='snakeCase'\nassert     snake_to_camel('snake_camel') =='snakeCamel'\nassert     snake_to_camel('snakeCamel') =='snakeCamel'\nassert     snake_to_camel('snakeCamel_') =='snakeCamel'\nassert     snake_to_camel('snakeCamel2') =='snakeCamel2'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     snake_to_camel('snake_case_input') =='snake_case_output', 'Snake case to camel case does not work'\nassert     snake_to_camel('snake_snake_case_input') =='snakeSnakeCaseInput', 'Snake case to camel case does not work'\nassert     snake_to_camel('snake_snake_snake_case_input') =='snakeSnakeSnakeCaseInput', 'Snake case to camel case does not work'\nassert     snake_to_camel('snake_snake_snake_snake_case_input') =='snakeSnakeSnakeSnakeCaseInput', 'Snake case to camel case does not work'\nassert     snake_to_camel('snake_snake_snake_snake_snake_case_input') =='snakeSnakeSnakeSnakeSnakeCaseInput', 'Snake case to camel case does not work'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     snake_to_camel('snake_to_camel') =='snakeToCamel'\nassert     snake_to_camel('snake_to_camel_') =='snakeToCamel'\nassert     snake_to_camel('snake_to_camel_') =='snakeToCamel'\nassert     snake_to_camel('snake_to_camel') =='snake_to_camel'\nassert     snake_to_camel('snake_to_camel') =='snake_to_camel'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert snake_to_camel('test_case') == 'TestCase'\nassert snake_to_camel('test_case_2') == 'TestCase2'\n\nprint('All tests passed.')\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \neulerian_num(3, 1) == 0\neulerian_num(4, 1) == 1\neulerian_num(5, 1) == 1\neulerian_num(5, 2) == 1\neulerian_num(6, 1) == 1\neulerian_num(6, 2) == 1\n\ndef eulerian_num2(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    pass\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert eulerian_num(0, 1) == 0\nassert eulerian_num(1, 1) == 1\nassert eulerian_num(2, 1) == 2\nassert eulerian_num(3, 1) == 2\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     eulerian_num(5, 2) == 5\nassert eulerian_num(5, 0) == 5\nassert eulerian_num(0, 5) == 5\nassert eulerian_num(0, 0) == 0\nassert eulerian_num(1, 1) == 1\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     eulerian_num(5, 3) == 2\nassert     eulerian_num(10, 5) == 5\nassert     eulerian_num(5, 10) == 1\nassert     eulerian_num(10, 10) == 3\n\ndef parity(n, m):\n    '''\n    Write a function to check if the parity of n is the same as parity of m.\n    '''\n    pass\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     eulerian_num(3, 5) == 2\nassert     eulerian_num(7, 5) == 1\nassert     eulerian_num(9, 5) == 6\nassert     eulerian_num(5, 7) == 0\nassert     eulerian_num(1, 1) == 1\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert eulerian_num(3, 4) == 6\nassert eulerian_num(4, 5) == 30\nassert eulerian_num(5, 6) == 210\nassert eulerian_num(6, 7) == 714\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert sort_sublists(['fish', 'cat', 'pig']) == [['cat', 'fish', 'pig'], ['pig', 'fish', 'cat'], ['cat', 'pig', 'fish']]\n\nassert sort_sublists(['dog', 'goat', 'elephant', 'cat', 'antelope', 'fish', 'pig', 'cow']) == [['antelope', 'dog', 'goat', 'elephant', 'fish', 'pig', 'cow'], ['cat', 'dog', 'goat', 'elephant', 'pig', 'antelope', 'fish'], ['pig', 'dog', 'goat', 'elephant', 'antelope', 'fish', 'cat']]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_sublists([['A', 'B'], ['B', 'C']]) == [['A', 'B'], ['B', 'C']]\nassert sort_sublists([['C', 'B', 'A'], ['A', 'D', 'C'], ['C', 'E', 'A']]) == [['A', 'D', 'C'], ['C', 'E', 'A'], ['C', 'B', 'A']]\nassert sort_sublists([['A', 'B', 'C', 'D', 'E'], ['F', 'G', 'H', 'I', 'J']]) == [['A', 'B', 'C', 'D', 'E'], ['F', 'G', 'H', 'I', 'J']]\nassert sort_sublists([['H', 'I', 'J'], ['G', 'F', 'E', 'D', 'C']]) == [['G', 'F', 'E', 'D', 'C'], ['H', 'I', 'J']]"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nsort_sublists([['A'], ['B'], ['B'], ['C'], ['C']]) == [['A'], ['B'], ['C'], ['B'], ['C']]\nassert \nsort_sublists([['C'], ['A'], ['B'], ['B'], ['C']]) == [['C'], ['A'], ['B'], ['B'], ['C']]\nassert\nsort_sublists([['B'], ['A'], ['C'], ['B'], ['C'], ['A']]) == [['C'], ['A'], ['B'], ['B'], ['A'], ['C']]\nassert \nsort_sublists([['B'], ['A'], ['C'], ['A'], ['B'], ['C']]) == [['A'], ['B'], ['C'], ['A'], ['B'], ['C']]\nassert \nsort_sublists([['A'], ['B'], ['C'], ['C'], ['B'], ['A']]) == [['A'], ['B'], ['C'], ['C'], ['B'], ['A']]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_sublists([['a', 'b', 'c'], ['d'], ['e']]) == [['a', 'b', 'c'], ['d'], ['e']]\nassert     sort_sublists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert     sort_sublists([['d', 'c', 'a'], ['a', 'e', 'b'], ['b', 'f', 'd']]) == [['d', 'c', 'a'], ['a', 'e', 'b'], ['b', 'f', 'd']]\nassert     sort_sublists([[2, 6, 8], [5, 4, 9], [1, 3, 7]]) == [[2, 6, 8], [5, 4, 9], [1, 3, 7]]\nassert     sort_sublists([['b', 'a', 'c'], ['a', 'e', 'd'], ['c', 'f', 'g'], ['e', 'd', 'h']]) == [['b', 'a', 'c'], ['a', 'e', 'd'], ['c', 'f', 'g'], ['e', 'd', 'h']]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nsort_sublists(['a','b','c','d','e','f']) == [['a','b','c'],['d','e','f']]\nassert \nsort_sublists(['a','b','c','d','e','f','g','h']) == [['a','b','c'],['d','e','f','g','h']]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_sublists([[1, 2], ['a', 'b'], ['c', 'd'], ['e', 'f']]) == \\\n    [[1, 2], ['a', 'b'], ['c', 'd'], ['e', 'f']]\nassert sort_sublists([['a', 'b'], ['c', 'd'], [1, 2], ['e', 'f']]) == \\\n    [['a', 'b'], ['c', 'd'], [1, 2], ['e', 'f']]\nassert sort_sublists([['a', 'b'], ['a', 'b'], ['a', 'b']]) == \\\n    [[], ['a', 'b'], ['a', 'b']]\nassert sort_sublists([['a', 'b'], ['a', 'b']]) == \\\n    [[], ['a', 'b']]\nassert sort_sublists([[1, 2], ['a', 'b']]) == \\\n    [[], ['a', 'b']]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_sublists([[1,2],[3,4],[5,6]]) == [[1,2],[3,4],[5,6]]\nassert     sort_sublists([['c','b','a'],['c','b','a'],['c','b','a']]) == [['c','b','a'],['c','b','a'],['c','b','a']]\nassert     sort_sublists([['c','b','a'],['c','b','a'],['c','b','a']]) == [['c','b','a'],['c','b','a'],['c','b','a']]\nassert sort_sublists([['c','b','a'],['c','b','a'],['c','b','a']]) == [['c','b','a'],['c','b','a'],['c','b','a']]\nassert sort_sublists([['a','b','c'],['a','b','c'],['a','b','c']]) == [['a','b','c'],['a','b','c'],['a','b','c']]\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert count([True, False, True, True, False, True]) == 6\nassert count([True, True, False, False, False, False]) == 5\nassert count([True, True, True, True, True, False, False, True]) == 7\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count([True, True, False, False, False, True]) == 1\nassert     count([True, True, False, False, False, True, False]) == 0\nassert     count([True, True, True, False, True]) == 0\nassert     count([True, True, True, False, True, True, True]) == 3\nassert     count([True, True, True, True, True, True, True, True]) == 0\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count([True, False]) == 1, \"Expected 2\"\nassert     count([True, False, True, False]) == 2, \"Expected 2\"\nassert     count([]) == 0, \"Expected 0\"\nassert     count([True]) == 1, \"Expected 1\""
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count([True,False,True,True,False]) == 2, 'passed'\nassert     count([True,True,True,False,True]) == 4, 'passed'\nassert     count([False,False,True,False,True]) == 3, 'passed'\nassert     count([True,True,False,True,True]) == 3, 'passed'\nassert     count([False,True,False,True,False]) == 2, 'passed'\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count([1,2,3,4,True,True,False,False]) == 5\nassert     count([1,2,3,4,True,True,False,False]) == 5\nassert     count([1,2,3,4,True,False,False,False]) == 5\nassert     count([]) == 0\nassert     count([1]) == 1\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count([True,True,False,True]) == 2\nassert     count([True,True,False,False]) == 0\n\nprint('check: ')\nprint(count([True,True,False,True]))\nprint(count([True,True,False,False]))\nprint(count([True,False,True]))\n\n'''\n1.count\n'''\ndef count(lst):\n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    cnt = 0\n    for i in range(0,len(lst)):\n        if lst[i]:\n            cnt = cnt+1\n    return cnt"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count([True, True, False, True, True, False]) == 2, \"Not completed\"\nprint (\"Checks out!\")\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count([False,False,True,True]) == 2\nassert     count([False,False,False,True]) == 1\nassert     count([False,False,True,False]) == 2\nassert     count([False,False,True]) == 1\nassert     count([True,True,True,False]) == 3\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert count([True, False, True, False, False, True]) == 4\nassert count([1,2,3,4,5,6,7]) == 0\nassert count([1,0,0,0,1,0,0]) == 5\nassert count([False,False,False,False,False,False,False]) == 9\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     add_lists([1,3,5],(2,7,8)) ==     ((1,3,5),(2,7,8))\nassert     add_lists([1,3,5],(1,3,5)) ==     ((1,3,5),(1,3,5))\nassert     add_lists([1,3,5],(2,7,8)) ==     ((1,3,5),(2,7,8))\nassert     add_lists([1,3,5],(2,7,8)) ==     ((1,3,5),(2,7,8))\nassert     add_lists([1,3,5],(2,7,8)) ==     ((1,3,5),(2,7,8))\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add_lists([1, 2, 3], (4, 5, 6)) == ([1, 2, 3], (4, 5, 6)), 'Your add_lists function is not working'\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add_lists([1,2,3], (4,5,6)) == [(1,4,5),(2,4,6),(3,4,6)]\nassert     add_lists([1,2,3], [(4,5),(6,7)]) == [(1,4,5),(2,4,6),(3,4,6),(1,6,7)]\nassert     add_lists([(4,5),(6,7)], [1,2,3]) == [(4,5,1),(6,7,2),(6,7,3)]\nassert     add_lists([(4,5)], [(6,7)]) == [(4,5,6),(6,7)]\nprint('Test passed')\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_lists([1,2,3,4], (1,2,3)) == (1,2,3,4)\nassert     add_lists([1], (1,2,3,4)) == (1,1,2,3,4)\nprint('\"test_lists.py\" is correct')\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert \nassert \nassert \n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     (add_lists([1, 2, 3], (1, 2, 3)) == [1, 2, 3, 1, 2, 3])\nassert     (add_lists([], (1, 2, 3)) == [1, 2, 3])\nassert     (add_lists([1], ()) == [1])\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint('--------------------------------------------------')\nadd_lists(list1, list2)\nprint(list1)\nprint(list2)\nprint('--------------------------------------------------')\nadd_lists(list1, list3)\nprint(list1)\nprint(list3)\n\nprint('--------------------------------------------------')\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     add_lists(['a', 'b', 'c'], ['d', 'e', 'f']) == None, \\\n            \"The output should be None\"\nassert     add_lists([1, 2, 3], (4, 5, 6)) == None, \\\n            \"The output should be None\"\nassert     add_lists([1, 2, 3], (4, 5, 6, 7)) == None, \\\n            \"The output should be None"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add_lists([1,2,3], [4,5,6]) ==    (1,2,3,4,5,6)\nassert     add_lists([1,2,3], (4,5,6)) ==    (1,2,3,4,5,6)\nassert     add_lists([1,2,3], (4,)) ==     (1,2,3,4)\nassert     add_lists([1,2], [3,4,5]) ==    (1,2,3,4,5)\nassert     add_lists([1,2,3], []) ==    (1,2,3)\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef is_monotone_increasing(l):\n    '''\n    Given an unsorted list of integers l, your function should return true if the list is monotone increasing \n    (i.e. the list contains a strictly increasing sequence of integers), otherwise it should return false.\n    Note that you are not required to sort the list.\n    '''\n    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     merge_sorted_list([1,2,3,4,5],\n                            [2,4,6,8,10],\n                            [2,4,6,8,10,12])==[2,2,2,4,4,4,6,6,6,8,8,8,10,10,12,12,12]\n\ndef next_greater_element(arr):\n    '''\n    Write a function to find the next greater element for each element in the given array.\n    If there is no next greater element, the next greater element for the element should be -1.\n    Examples:\n        Input: arr[] = {1, 2, 3, 4, 5}\n        Output: arr[] = {1, -1, -1, -1, -1}\n        Input: arr[] = {1, 3, 2, 4, 5}\n        Output: arr[] = {1, -1, -1, -1, -1}\n        Input: arr[] = {1, 3, 5, 4, 2}\n        Output: arr[] = {1, -1, -1, -1, -1}\n        Input: arr[] = {4, 5, 6, 7}\n        Output: arr[] = {-1, -1, -1, -1}\n    '''\n    # Complete the code\n\n    for i in range(0,len(arr)):\n        arr[i]=0\n    for i in range(0,len(arr)):\n        if arr[i]==0:\n            arr[i]=i+1\n        for j in range(i+1,len(arr)):\n            if arr[j]>arr[i]:\n                arr[i]=arr[j]\n                break\n    return arr\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef merge_sort_list(num1,num2,num3):\n    '''\n    Write a function to sort the list of numbers in ascending order.\n    '''\n    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n'''\n    Merge two lists into a third sorted list with O(1) extra space.\n    You can assume that each of the lists consists of distinct elements.\n    \n    Example 1:\n    Input: nums1 = [1, 2, 4], nums2 = [1, 3, 4]\n    Output: nums1 = [1, 1, 2, 3, 4, 4], nums2 = [1, 3, 4]\n    \n    Example 2:\n    Input: nums1 = [], nums2 = []\n    Output: nums1 = [], nums2 = []\n    \n    Example 3:\n    Input: nums1 = [], nums2 = [0]\n    Output: nums1 = [0], nums2 = []\n    \n    Constraints:\n    1 <= nums1.length, nums2.length <= 1000\n    0 <= nums1[i], nums2[i] <= 1000\n'''\ndef merge_sorted_list(nums1, nums2):\n    '''\n    Merge two lists into a third sorted list with O(1) extra space.\n    You can assume that each of the lists consists of distinct elements.\n    \n    Example 1:\n    Input: nums1 = [1, 2, 4], nums2 = [1, 3, 4]\n    Output: nums1 = [1, 1, 2, 3, 4, 4], nums2 = [1, 3, 4]\n    \n    Example 2:\n    Input: nums1 = [], nums2 = []\n    Output: nums1 = [], nums2 = []\n    \n    Example 3:\n    Input: nums1 = [], nums2 = [0]\n    Output: nums1 = [0], nums2 = []\n    '''\n    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     merge_sorted_list([1,2,3,4],[3,4,5,6],[5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]\nassert     merge_sorted_list([1,2,3],[3,4,5],[5,6,7]) == [1,2,3,3,4,5,5,6,7]\nassert     merge_sorted_list([1,2],[],[]) == []\nassert     merge_sorted_list([],[],[]) == []\nassert     merge_sorted_list([1],[2],[3]) == [1,2,3]\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nassert merge_sorted_list([1,2,3,4,5,6],\n                            [6,7,8,9,10,11],\n                            [11,12,13,14,15,16,17,18]) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]\nassert merge_sorted_list([1,2,3],\n                            [],\n                            []) == [1,2,3]\n\ndef can_construct(target, word_bank):\n    '''\n    Write a function that returns whether or not it's possible to construct\n    the target string from the given word bank, which is a list of words.\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     merge_sorted_list([1,2,3],[4,5,6],[7,8,9]) == [1,2,3,4,5,6,7,8,9]\nassert     merge_sorted_list([1,2,3],[2,2,2],[1,1,1]) == [1,1,2,2,2,3,1,2,3]\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     merge_sorted_list([], [], [] ) == []\nassert     merge_sorted_list([1], [], [2]) == [1, 2]\nassert     merge_sorted_list([], [1], [2]) == [1, 2]\nassert     merge_sorted_list([], [], [1, 2]) == [1, 2]\nassert     merge_sorted_list([1], [], []) == [1]\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     odd_Equivalent(\"110101\",2) == 3\nassert odd_Equivalent(\"001100\",3) == 1\nassert odd_Equivalent(\"001101\",2) == 2\nassert odd_Equivalent(\"001110\",2) == 1\nassert odd_Equivalent(\"001101\",2) == 3\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint (\"Pass\" if (odd_Equivalent(\"1101\",1) == 2) else \"Fail\")\nprint (\"Pass\" if (odd_Equivalent(\"01011\",2) == 2) else \"Fail\")\nprint (\"Pass\" if (odd_Equivalent(\"0101\",2) == 3) else \"Fail\")\nprint (\"Pass\" if (odd_Equivalent(\"0101\",4) == 6) else \"Fail\")\nprint (\"Pass\" if (odd_Equivalent(\"01010\",3) == 5) else \"Fail\")\nprint (\"Pass\" if (odd_Equivalent(\"01010\",5) == 6) else \"Fail\")\n\n'''\n\nNow let's consider the following scenario.\n\nLet's say, given a binary string representing the first nth Fibonacci number, you want to find the sum of the numbers with an odd value in the binary string.\n\nFor example, if the binary string is 1,000,101,100,101, then the value of the Fibonacci number is 3 (101). If the binary string is 100000101, then the Fibonacci number is 5 (1011).\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     odd_Equivalent('101',1) == 3, 'Expected: 3'\nassert     odd_Equivalent('1010',1) == 4, 'Expected: 4'\nassert     odd_Equivalent('10111',1) == 4, 'Expected: 4'\nassert     odd_Equivalent('10101',1) == 4, 'Expected: 4'\nassert     odd_Equivalent('10100',1) == 3, 'Expected: 3'\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     odd_Equivalent( '1010', 1 ) == 9\nassert     odd_Equivalent( '010101010', 2 ) == 12\nassert     odd_Equivalent( '010101010', 3 ) == 9\nassert     odd_Equivalent( '010101010', 4 ) == 0\nassert     odd_Equivalent( '101101101', 5 ) == 20\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nodd_Equivalent('1') == 0\nassert odd_Equivalent('01') == 3\nassert odd_Equivalent('01010101') == 9\nassert odd_Equivalent('0101010101') == 16\nassert odd_Equivalent('010101010101') == 21\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     odd_Equivalent('1010101010', 4) == 21\nassert     odd_Equivalent('1010101010', 3) == 20\nassert     odd_Equivalent('1010101010', 2) == 16\nassert     odd_Equivalent('1010101010', 1) == 10\nassert     odd_Equivalent('1010101010', 0) == 4\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     odd_Equivalent('11','11') == True\nassert     odd_Equivalent('00','00') == False\nassert     odd_Equivalent('100','00') == False\nassert     odd_Equivalent('111','11') == True\nassert     odd_Equivalent('011','00') == False\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nodd_Equivalent('10110',1) == 3\nodd_Equivalent('10110',2) == 6\nodd_Equivalent('10110',3) == 9\nodd_Equivalent('10110',4) == 12\nodd_Equivalent('10110',5) == 15\nodd_Equivalent('10110',6) == 18\nodd_Equivalent('10110',7) == 21\nodd_Equivalent('10110',8) == 24\nodd_Equivalent('10110',9) == 27\nodd_Equivalent('10110',10) == 30\nodd_Equivalent('10110',11) == 33\nodd_Equivalent('10110',12) == 36\nodd_Equivalent('10110',13) == 39\nodd_Equivalent('10110',14) == 42\nodd_Equivalent('10110',15) == 45\nodd_Equivalent('10110',16) == 48\nodd_Equivalent('10110',17) == 51\nodd_Equivalent('10110',18) == 54\nodd_Equivalent('10110',19) == 57\nodd_Equivalent('10110',20) == 60\nodd_Equivalent('10110',21) == 63\nodd_Equivalent('10110',22) == 66\nodd_Equivalent('10110',23) == 69\nodd_Equivalent('10110',24) == 72\nodd_Equivalent('10110',25) == 75\nodd_Equivalent('10110',26) == 78\nodd_Equivalent('10110',27) == 81\nodd_Equivalent('10110',28) == 84\nodd_Equivalent('10110',29) == 87\nodd_Equivalent('10110',30) == 90\nodd_Equivalent('10110',31) == 93\nodd_Equivalent('10110',32) == 96\nodd_Equivalent('10110',33) == 99\nodd_Equivalent('10110',34) == 102\nodd_Equivalent('10110',35) == 105\nodd_Equivalent('10110',36) == 108\nodd_Equivalent('10110',37) == 111\nodd_Equivalent('10110',38) == 114\nodd_Equivalent('10110',39) == 117\nodd_Equivalent('10110',40) == 120\nodd_Equivalent('10110',41) == 123\nodd_Equivalent('10110',42) == 126\nodd_Equivalent('10110',43) == 129\nodd_Equivalent('10110',44) == 132\nodd_Equivalent('10110',45) == 135\nodd_Equivalent('10110',46) == 138\nodd_Equivalent('10110',47) == 141\nodd_Equivalent('10110',48) == 144\nodd_Equivalent('10110',49) == 147\nodd_Equivalent('10110',50) == 150\nodd_Equivalent('10110',51) == 153\nodd_Equivalent('10110',52) == 156\nodd_Equivalent('10110',53) == 159\nodd_Equivalent('10110',54) == 162\nodd_Equivalent('10110',55) == 165\nodd_Equivalent('10110',56) == 168\nodd_Equivalent('10110',57) == 171\nodd_Equivalent('10110',58) == 174\nodd_Equivalent('10110',59) == 177\nodd_Equivalent('10110',60) == 180\nodd_Equivalent('10110',61) == 183\nodd_Equivalent('10110',62) == 186\nodd_Equivalent('10110',63) == 189\nodd_Equivalent('10110',64) == 192\nodd_Equivalent('10110',65) == 195\nodd_Equivalent('10110',66) == 198\nodd_Equivalent('10110',67) == 201\nodd_Equivalent('10110',68) == 204\nodd_Equivalent('10110',69) == 207\nodd_Equivalent('10110',70) == 210\nodd_Equivalent('10110',71) == 213\nodd_Equivalent('10110',72) == 216\nodd_Equivalent('10110',73) == 219\nodd_Equivalent('10110',74) == 222\nodd_Equivalent('10110',75) == 225\nodd_Equivalent('10110',76) == 228\nodd_Equivalent('10110',77) == 231\nodd_Equivalent('10110',78) == 234\nodd_Equivalent('10110',79) == 237\nodd_Equivalent('10110',80) == 240\nodd_Equivalent('10110',81) == 243\nodd_Equivalent('10110',82) == 246\nodd_Equivalent('10110',83) == 249\nodd_Equivalent('10110',84) == 252\nodd_Equivalent('10110',85) == 255\nodd_Equivalent('10110',86) == 258\nodd_Equivalent('10110',87) == 261\nodd_Equivalent('10110',88) == 264\nodd_Equivalent('10110',89) == 267\nodd_Equivalent('10110',90) == 270\nodd_Equivalent('10110',91) == 273\nodd_Equivalent('10110',92) == 276\nodd_Equivalent('10110',93) == 279\nodd_Equivalent('10110',94) == 282\nodd_Equivalent('10110',95) == 285\nodd_Equivalent('10110',96) == 288\nodd_Equivalent('10110',97) == 291\nodd_Equivalent('10110',98) == 294\nodd_Equivalent('10110',99) == 297\nodd_Equivalent('10110',100) == 300\nodd_Equivalent('10110',101) == 303\nodd_Equivalent('10110',102) == 306\nodd_Equivalent('10110',103) == 309\nodd_Equivalent('10110',104) == 312\nodd_Equivalent('10110',105) == 315\nodd_Equivalent('10110',106) == 318\nodd_Equivalent('10110',107) == 321\nodd_Equivalent('10110',108) == 324\nodd_Equivalent('10110',109) == 327\nodd_Equivalent('10110',110) == 330\nodd_Equivalent('10110',111) == 333\nodd_Equivalent('10110',112) == 336\nodd_Equivalent('10110',113) == 339\nodd_Equivalent('10110',114) == 342\nodd_Equivalent('10110',115) == 345\nodd_Equivalent('10110',116) == 348\nodd_Equivalent('10110',117) == 351\nodd_Equivalent('10110',118) == 354\nodd_Equivalent('10110',119) == 357\nodd_Equivalent('10110',120) == 360\nodd_Equivalent('10110',121) == 363\nodd_Equivalent('10110',122) == 366\nodd_Equivalent('10110',123) == 369\nodd_Equivalent('10110',124) == 372\nodd_Equivalent('10110',125) == 375\nodd_Equivalent('10110',126) == 378\nodd_Equivalent('10110',127) == 381\nodd_Equivalent('10110',128) == 384\nodd_Equivalent('10110',129) == 387\nodd_Equivalent('10110',130) == 390\nodd_Equivalent('10110',131) == 393\nodd_Equivalent('10110',132) == 396\nodd_Equivalent('10110',133) == 399\nodd_Equivalent('10110',134) == 402\nodd_Equivalent('10110',135) == 405\nodd_Equivalent('10110',136) == 408\nodd_Equivalent('10110',137) == 411\nodd_Equivalent('10110',138) == 414\nodd_Equivalent('10110',139) == 417\nodd_Equivalent('10110',140) == 420\nodd_Equivalent('10110',141) == 423\nodd_Equivalent('10110',142) == 426\nodd_Equivalent('10110',143) == 429\nodd_Equivalent('10110',144) == 432\nodd_Equivalent('10110',145) == 435\nodd_Equivalent('10110',146) == 438\nodd_Equivalent('10110',147) == 441\nodd_Equivalent('10110',148) == 444\nodd_Equivalent('10110',149) == 447\nodd_Equivalent('10110',150) == 450\nodd_Equivalent('10110',151) == 453\nodd_Equivalent('10110',152) == 456\nod"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint('The number of strings where odd-values are rotated 5 times is: ',odd_Equivalent('101',5))\nprint('The number of strings where odd-values are rotated 7 times is: ',odd_Equivalent('101',7))\nprint('The number of strings where odd-values are rotated 9 times is: ',odd_Equivalent('101',9))\nprint('The number of strings where odd-values are rotated 11 times is: ',odd_Equivalent('101',11))\nprint('The number of strings where odd-values are rotated 13 times is: ',odd_Equivalent('101',13))\nprint('The number of strings where odd-values are rotated 15 times is: ',odd_Equivalent('101',15))\nprint('The number of strings where odd-values are rotated 17 times is: ',odd_Equivalent('101',17))\nprint('The number of strings where odd-values are rotated 19 times is: ',odd_Equivalent('101',19))\nprint('The number of strings where odd-values are rotated 21 times is: ',odd_Equivalent('101',21))\nprint('The number of strings where odd-values are rotated 23 times is: ',odd_Equivalent('101',23))\nprint('The number of strings where odd-values are rotated 25 times is: ',odd_Equivalent('101',25))\nprint('The number of strings where odd-values are rotated 27 times is: ',odd_Equivalent('101',27))\nprint('The number of strings where odd-values are rotated 29 times is: ',odd_Equivalent('101',29))\nprint('The number of strings where odd-values are rotated 31 times is: ',odd_Equivalent('101',31))\nprint('The number of strings where odd-values are rotated 33 times is: ',odd_Equivalent('101',33))\nprint('The number of strings where odd-values are rotated 35 times is: ',odd_Equivalent('101',35))\nprint('The number of strings where odd-values are rotated 37 times is: ',odd_Equivalent('101',37))\nprint('The number of strings where odd-values are rotated 39 times is: ',odd_Equivalent('101',39))\nprint('The number of strings where odd-values are rotated 41 times is: ',odd_Equivalent('101',41))\nprint('The number of strings where odd-values are rotated 43 times is: ',odd_Equivalent('101',43))\nprint('The number of strings where odd-values are rotated 45 times is: ',odd_Equivalent('101',45))\nprint('The number of strings where odd-values are rotated 47 times is: ',odd_Equivalent('101',47))\nprint('The number of strings where odd-values are rotated 49 times is: ',odd_Equivalent('101',49))\nprint('The number of strings where odd-values are rotated 51 times is: ',odd_Equivalent('101',51))\nprint('The number of strings where odd-values are rotated 53 times is: ',odd_Equivalent('101',53))\nprint('The number of strings where odd-values are rotated 55 times is: ',odd_Equivalent('101',55))\nprint('The number of strings where odd-values are rotated 57 times is: ',odd_Equivalent('101',57))\nprint('The number of strings where odd-values are rotated 59 times is: ',odd_Equivalent('101',59))\nprint('The number of strings where odd-values are rotated 61 times is: ',odd_Equivalent('101',61))\nprint('The number of strings where odd-values are rotated 63 times is: ',odd_Equivalent('101',63))\nprint('The number of strings where odd-values are rotated 65 times is: ',odd_Equivalent('101',65))\nprint('The number of strings where odd-values are rotated 67 times is: ',odd_Equivalent('101',67))\nprint('The number of strings where odd-values are rotated 69 times is: ',odd_Equivalent('101',69))\nprint('The number of strings where odd-values are rotated 71 times is: ',odd_Equivalent('101',71))\nprint('The number of strings where odd-values are rotated 73 times is: ',odd_Equivalent('101',73))\nprint('The number of strings where odd-values are rotated 75 times is: ',odd_Equivalent('101',75))\nprint('The number of strings where odd-values are rotated 77 times is: ',odd_Equivalent('101',77))\nprint('The number of strings where odd-values are rotated 79 times is: ',odd_Equivalent('101',79))\nprint('The number of strings where odd-values are rotated 81 times is: ',odd_Equivalent('101',81))\nprint('The number of strings where odd-values are rotated 83 times is: ',odd_Equivalent('101',83))\nprint('The number of strings where odd-values are rotated 85 times is: ',odd_Equivalent('101',85))\nprint('The number of strings where odd-values are rotated 87 times is: ',odd_Equivalent('101',87))\nprint('The number of strings where odd-values are rotated 89 times is: ',odd_Equivalent('101',89))\nprint('The number of strings where odd-values are rotated 91 times is: ',odd_Equivalent('101',91))\nprint('The number of strings where odd-values are rotated 93 times is: ',odd_Equivalent('101',93))\nprint('The number of strings where odd-values are rotated 95 times is: ',odd_Equivalent('101',95))\nprint('The number of strings where odd-values are rotated 97 times is: ',odd_Equivalent('101',97))\nprint('The number of strings where odd-values are rotated 99 times is: ',odd_Equivalent('101',99))\nprint('The number of strings where odd-values are rotated 101 times is: ',odd_Equivalent('101',101))\nprint('The number of strings where odd-values are rotated 103 times is: ',odd_Equivalent('101',103))\nprint('The number of strings where odd-values are rotated 105 times is: ',odd_Equivalent('101',105))\nprint('The number of strings where odd-values are rotated 107 times is: ',odd_Equivalent('101',107))\nprint('The number of strings where odd-values are rotated 109 times is: ',odd_Equivalent('101',109))\nprint('The number of strings where odd-values are rotated 111 times is: ',odd_Equivalent('101',111))\nprint('The number of strings where odd-values are rotated 113 times is: ',odd_Equivalent('101',113))\nprint('The number of strings where odd-values are rotated 115 times is: ',odd_Equivalent('101',115))\nprint('The number of strings where odd-values are rotated 117 times is: ',odd_Equivalent('101',117))\nprint('The number of strings where odd-values are rotated 119 times is: ',odd_Equivalent('101',119))\nprint('The number of strings where odd-values are rotated 121 times is: ',odd_Equivalent('101',121))\nprint('The number of strings where odd-values are rotated 123 times is: ',odd_Equivalent('101',123))\nprint('The number of strings where odd-values are rotated 125 times is: ',odd_Equivalent('101',125))\nprint('The number of strings where odd-values are rotated 127 times is: ',odd_Equivalent('101',127))\nprint('The number of strings where odd-values are rotated 129 times is: ',odd_Equivalent('101',129))\nprint('The number of strings where odd-values are rotated 131 times is: ',odd_Equivalent('101',131))\nprint('The number of strings where odd-values are rotated 133 times is: ',odd_Equivalent('101',133))\nprint('The number of strings where odd-values are rotated 135 times is: ',odd_Equivalent('101',135))\nprint('The number of strings where odd-values are rotated 137 times is: ',odd_Equivalent('101',137))\nprint('The number of strings where odd-values are rotated 139 times is: ',odd_Equivalent('101',139))\nprint('The number of strings where odd-values are rotated 141 times is: ',odd_Equivalent('101',141))\nprint('The number of strings where odd-values are rotated 143 times is: ',odd_Equivalent('101',143))\nprint('The number of strings where odd-values are rotated 145 times is: ',odd_Equivalent('101',145))\nprint('The number of strings where odd-values are rotated 147 times is: ',odd_Equivalent('101',147))\nprint('The number of strings where odd-values are rotated 149 times is: ',odd_Equivalent('101',149))\nprint('The number of strings where odd-values are rotate"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     common_in_nested_lists([]) == set()\nassert common_in_nested_lists([[]]) == set()\nassert common_in_nested_lists([[1],[2,3],[4,5,6,7,8,9]]) == set([1,2,3,4,5,6,7,8,9])\nassert common_in_nested_lists([[1,2],[3],[4,5,6,7,8,9]]) == set([1,2,3,4,5,6,7,8,9])\nassert common_in_nested_lists([[1,2,3,4],[5,6,7,8,9]]) == set([1,2,3,4,5,6,7,8,9])\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     common_in_nested_lists([[1, 2], [1, 2, 3]]) == [1, 2], \"Wrong answer\"\nassert     common_in_nested_lists([[1, 2], [1, 2, 3], [3, 4]]) == [1, 2], \"Wrong answer\"\nassert     common_in_nested_lists([[1, 2], [1, 2, 3], [3, 4], [4, 5]]) == [1, 2], \"Wrong answer\"\nassert     common_in_nested_lists([[1, 2], [1, 2, 3], [3, 4, 5], [4, 5, 6]]) == [], \"Wrong answer\"\nassert     common_in_nested_lists([[1, 2], [1, 2, 3], [3, 4, 5], [5, 6, 7], [4, 5, 6]]) == [], \"Wrong answer\"\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ncommon_in_nested_lists([[1,2,3],[2,3,4]]) == 3\ncommon_in_nested_lists([[1,2],[2,3],[3,4],[4,5]]) == 1\ncommon_in_nested_lists([[1,2,3,4],[2,3,4]]) == 2\ncommon_in_nested_lists([[1],[2],[3],[4]]) == 1\ncommon_in_nested_lists([[1,2,3],[2,4],[3,4]]) == 2\ncommon_in_nested_lists([[1,2,3],[2,3,4],[4,5]]) == 2\ncommon_in_nested_lists([[1,2,3,4,5],[2,3,4]]) == 3\ncommon_in_nested_lists([[1,2,3,4],[2,3,4,5],[3,4,5]]) == 1\ncommon_in_nested_lists([[1,2,3],[2,3,4],[3,4,5],[4,5,6]]) == 3\ncommon_in_nested_lists([[1,2,3,4,5],[2,3,4,5],[3,4,5]]) == 2\ncommon_in_nested_lists([[1,2],[2,3],[3,4],[4,5]]) == 1\ncommon_in_nested_lists([[1],[2],[3],[4],[5]]) == 0\ncommon_in_nested_lists([[1],[2],[3],[4],[5]]) == 1"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     common_in_nested_lists([]) == []\nassert     common_in_nested_lists([[]]) == []\nassert     common_in_nested_lists([[]]) == []\nassert     common_in_nested_lists([[1,2],[3,4]]) == [1,3]\nassert     common_in_nested_lists([[1,2,3,4],[5,6,7,8,9]]) == [1,5]\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     common_in_nested_lists([1, 2, 1, 1, 3]) == 1\nassert     common_in_nested_lists([1, 2, 1, 1, 3, 1, 1, 2, 1, 1, 3]) == 1\nassert     common_in_nested_lists([1, 2, 1, 1, 3, 2, 1, 1, 2, 1, 3]) == 2\nassert     common_in_nested_lists([1, 2, 1, 1, 3, 2, 1, 1, 2, 2, 3]) == 2\nassert     common_in_nested_lists([1, 2, 1, 1, 3, 1, 1, 2, 1, 1, 3, 1, 1, 2, 1, 1, 2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 3, 1, 1, 2, 1, 1, 2, 1, 3]) == 5\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef common_in_lists(lst1, lst2):\n    '''\n    Write a function to find the common elements in two lists.\n    '''\n    pass\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     common_in_nested_lists([]) == []\nassert     common_in_nested_lists([[]]) == []\nassert     common_in_nested_lists([[], []]) == []\nassert     common_in_nested_lists([[], [[]]]) == []\nassert     common_in_nested_lists([[1], [1], [1]]) == []\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     common_in_nested_lists([['A','B','C'],['C','D'],['A','B','C']]) == ['C']\nassert     common_in_nested_lists([['A','B','C'],['C','D'],['D','C']]) == ['C']\nassert     common_in_nested_lists([['A','B','C'],['A','C'],['C','D','A']]) == ['C']\nassert     common_in_nested_lists([['A','B','C'],['D','E','F'],['D','A','C']]) == ['D','A']\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     common_in_nested_lists([[1,2],[3,4]],[2,3]) == [[2,3]], \"Should find 2 and 3\"\nassert     common_in_nested_lists([[1,2],[3,4]],[2,4]) == [[2,4]], \"Should find 2 and 4\"\nassert     common_in_nested_lists([[1,2],[3,4]],[1,3]) == [[1,3]], \"Should find 1 and 3\"\nassert     common_in_nested_lists([[1,2],[3,4]],[1]) == [[1]], \"Should find 1 and 1\"\nassert     common_in_nested_lists([[1,2],[3,4]],[2,4]) == [[2,4]], \"Should find 2 and 4\"\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     common_in_nested_lists([[1,2,3],[1,2,3]]) == 1\nassert     common_in_nested_lists([[1],[2],[3]]) == 1\nassert     common_in_nested_lists([[1,2,3],[2,3],[1,3]]) == 2\nassert     common_in_nested_lists([[1,2,3],[2,3]]) == 3\nassert     common_in_nested_lists([[1],[2],[3]]) == 0\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_integer('12') == True, 'test failed'\nassert     check_integer('3.2') == False, 'test failed'\nassert     check_integer('a') == False, 'test failed'\nassert     check_integer('1.2.3') == False, 'test failed'\nassert     check_integer('12.2') == True, 'test failed'\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert check_integer('3') == True\nassert check_integer('3.4') == False\nassert check_integer('0') == True\nassert check_integer('.4') == False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert \nassert check_integer('123') == True\nassert \nassert \n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_integer(10) == False\nassert    check_integer(\"10\") == False\nassert    check_integer(\"10.1\") == True\nassert    check_integer(\"-10\") == True\nassert    check_integer(\"+10\") == True\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_integer('0') == True\nassert     check_integer('0.') == False\nassert     check_integer('-4.3') == True\nassert     check_integer('4') == True\nassert     check_integer('4.1') == False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     (check_integer('0') == True)\nassert     (check_integer('4') == True)\nassert     (check_integer('-4') == True)\nassert     (check_integer('5') == False)\nassert     (check_integer('_7') == False)\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_integer('1') == True, 'integer'\nassert     check_integer('1.5') == False, 'floating point'\nassert     check_integer('0') == False, 'zero'\nassert     check_integer('-1') == True, 'negative number'\n\ndef check_decimal(text):\n    '''\n    Write a function to check if a string represents a decimal or not.\n    '''\n    pass\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_integer('1') == True\nassert     check_integer('1.1') == False\nassert     check_integer('-1') == False\nassert     check_integer('1.0') == True\nassert     check_integer('1') == True\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert check_integer('-') == False\nassert check_integer('0') == False\nassert check_integer('0.1') == True\nassert check_integer('a') == False\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nempty_dit([{}, {}, {}]) == True\nassert empty_dit([{}, {}, {}]) == False\n\n\ndef remove_empty_dits(list1):\n    '''\n    Write a function to remove all empty dictionary from a list.\n    '''\n    pass\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n'''\nWrite a function to sort a list of dictionaries by a given key\n'''\ndef dict_sort(list_dicts, key):\n    '''\n    Write a function to sort a list of dictionaries by a given key\n    '''\n    pass\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     empty_dit([{}, {}, {}]) == True\nassert     empty_dit([{'a':1}, {}, {}]) == False\nassert     empty_dit([{'a':1}, {'b':2}, {}]) == False\n\ndef check_email(string):\n    '''\n    Write a function to check whether a given string is an email or not.\n    '''\n    pass\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     empty_dit(['a', {'x':2}]) == True, \"Should be true\"\nassert     empty_dit(['a', {'x':2}, {'y': 3}]) == False, \"Should be false\"\nassert     empty_dit(['a', {'x':2},'a', {'y': 3}]) == False, \"Should be false\"\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     empty_dit(    [{},{}]    ) == False, \"Not correct\"\nassert     empty_dit(    [{},{}]    ) == True, \"Correct\"\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     empty_dit([{}, {}, {}]) == True\nassert     empty_dit([{}, {}, {}]) == False\nassert     empty_dit([{1:2}, {1:2}, {1:2}]) == True\nassert     empty_dit([{1:2}, {1:2}, {1:2}]) == False\nassert empty_dit([{1:2}]) == True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     empty_dit([\"a\"]) == False, \"Empty lists are not empty\"\nassert     empty_dit([\"\", {}]) == True, \"Empty dictionaries are empty\"\nassert     empty_dit([{\"key\":\"value\"}]) == False, \"Non empty dictionaries are not empty\"\nassert     empty_dit([{\"key\": \"value\"}, {}]) == True, \"Empty dictionaries are empty\"\nassert     empty_dit([]) == True, \"Empty lists are empty\"\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     empty_dit([]) is True, 'empty_dit should return True'\nassert     empty_dit([{}]) is True, 'empty_dit should return True'\nassert     empty_dit([{1:2}, {3:4}]) is True, 'empty_dit should return True'\nassert     empty_dit([{1:2}, {1:2}]) is False, 'empty_dit should return False'\nassert     empty_dit([{1:2}, {2:2}, {3:4}]) is False, 'empty_dit should return False'\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     empty_dit([]) == True, 'Empty list'\nassert     empty_dit([{},{},{}]) == True, 'Single empty dict'\nassert     empty_dit([{},{},{'a':1}]) == False, 'Single non-empty dict'\nassert     empty_dit([{},{},{'a':1,'b':2}]) == False, 'Two non-empty dicts'\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     (tuple_to_int((1, 2, 3, 4, 5))) == 10\nassert     (tuple_to_int((0, 0, 0, 0, 0))) == 0\nassert     (tuple_to_int((1, 2, 3, 4))) == 12\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_to_int((1,2,3)) == 6, \"Fail\"\nassert     tuple_to_int((1,2)) == 2, \"Fail\"\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_to_int((1, 2, 3, 4, 5)) == 15\nassert     tuple_to_int((0, 0, 0, 0, 0)) == 0\nassert     tuple_to_int((0, 1, 2, 3, 4)) == 18\nassert     tuple_to_int((0, 0, 0, 1, 2)) == 18\nassert     tuple_to_int((0, 0, 0, 0, 1, 2, 3)) == 11\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ntup_s = (1,2,3)\nprint(tuple_to_int(tup_s))\n\n\ndef tuple_to_int_2(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    pass\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tuple_to_int((1, 2, 3)) == 6,'should be 6'\nassert     tuple_to_int((1, 2, 3, 4)) == 24,'should be 24'\nassert     tuple_to_int((1, 2, 3, 4, 5, 6, 7)) == 120,'should be 120'\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tuple_to_int((2,3,4)) == 24, \"The result is incorrect\"\n\nprint('-'*30)\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tuple_to_int((1, 2, 3, 4)) == 6\nassert     tuple_to_int((6, 3, 2, 1)) == 12\nassert     tuple_to_int((3, 4, 2, 5)) == 16\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tuple_to_int((1, 2, 3, 4, 5, 6)) == 12345, \"The expected output is 12345 but the actual output is {}\".format(\n    tuple_to_int((1, 2, 3, 4, 5, 6)))\nassert     tuple_to_int((1,)) == 1, \"The expected output is 1 but the actual output is {}\".format(\n    tuple_to_int((1,)))\nassert     tuple_to_int((1, 2, 3, 4, 5, 6, 7)) == 123456, \"The expected output is 123456 but the actual output is {}\".format(\n    tuple_to_int((1, 2, 3, 4, 5, 6, 7)))"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tuple_to_int((\"1\", \"2\")) == 123, \"test failed\"\nassert     tuple_to_int((\"1\", \"2\", \"3\")) == 123, \"test failed\"\nassert     tuple_to_int((\"1\", \"2\", \"3\", \"4\")) == 123, \"test failed\"\nassert     tuple_to_int((\"1\", \"2\", \"3\", \"4\", \"5\")) == 123, \"test failed\"\nassert     tuple_to_int((\"1\", \"2\", \"3\", \"4\", \"5\", \"6\")) == 123, \"test failed\"\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     list_to_float([[\"a\", \"b\"], [\"c\", \"d\"]]) == [[1.0, 2.0], [3.0, 4.0]]\nassert     list_to_float([[\"a\", \"1\"], [\"b\", \"2\"], [\"c\", \"3\"], [\"d\", \"4\"]]) == [[1.0, 2.0], [3.0, 4.0]]\nassert     list_to_float([[\"a\", \"b\"], [\"c\", \"d\"], [\"e\", \"f\"]]) == [[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]]\nassert     list_to_float([[\"a\", \"b\"], [\"c\", \"d\"]]) == [[1.0, 2.0], [3.0, 4.0]]\nassert     list_to_float([[\"a\", \"b\"], [\"c\", \"d\"]]) == [[1.0, 2.0], [3.0, 4.0]]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     list_to_float([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]]\n\nassert     list_to_float([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [[1.0, 2.0, 3.0, 4.0], [5.0, 6.0, 7.0, 8.0], [9.0, 10.0, 11.0, 12.0]]\n\nassert     list_to_float([[1, 2], [3, 4], [5, 6]]) == [[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     list_to_float([[1, 2, 3], [4, 5], ['a', 'b', 'c']]) == [[1, 2, 3],\n                                                                                [4, 5],\n                                                                                ['a', 'b', 'c']]\nassert list_to_float(['hello', 3]) == ['hello', 3]\nassert list_to_float([1,2,3,4]) == [1.0, 2.0, 3.0, 4.0]\nassert list_to_float([1,2,3,4,'d']) == [1.0, 2.0, 3.0, 4.0, 'd']"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     list_to_float([\"0.0\", \"1.0\", \"5.3\", \"4.9\", \"1.1\", \"6.8\"]) == [[0.0], [1.0], [5.3], [4.9], [1.1], [6.8]]\nassert list_to_float([\"4.0\", \"5.3\", \"4.9\", \"1.1\", \"6.8\"]) == [[4.0], [5.3], [4.9], [1.1], [6.8]]\nassert list_to_float([\"0.0\", \"1.0\", \"5.3\", \"4.9\"]) == [[0.0], [1.0], [5.3], [4.9]]\nassert list_to_float([\"1.0\", \"5.3\", \"4.9\"]) == [[1.0], [5.3], [4.9]]\nassert list_to_float([\"5.3\", \"4.9\"]) == [[5.3], [4.9]]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     list_to_float([[1, 2], [1.5, 2.5]]) == [[1, 2.0], [1.5, 2.5]]\nassert list_to_float([[1, 2], [1.5, '2.5']]) == [[1, 2.0], [1.5, '2.5']]\n\n\ndef check_order(test_list):\n    '''\n    Write a function to return the number of elements in the list that are equal to their indices.\n    '''\n    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint_list_to_float(test_list_0) == [[1,2,3], 4, 'four']\nprint_list_to_float(test_list_1) == ['1.1', '4', 'five']\nprint_list_to_float(test_list_2) == ['five', '4', 'two']\nprint_list_to_float(test_list_3) == ['four', 'two', 'three']\nprint_list_to_float(test_list_4) == ['five', 5.5, 'five']\nprint_list_to_float(test_list_5) == ['five', 'five', 'five']"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     list_to_float([[1.0, '2', 3.0], [], ['a', 'b']]) ==     [[1.0, '2', 3.0], ['a', 'b'], []]\nassert     list_to_float([[1.0, '2', 3.0], [], ['a', 'b'], ['x', 'y']]) ==     [[1.0, '2', 3.0], ['a', 'b'], ['x', 'y']]\nassert     list_to_float([[], ['a', 'b'], ['x', 'y'], ['1', '2', '3']]) ==     [[], ['a', 'b'], ['x', 'y'], ['1', '2', '3']]\nassert     list_to_float([[], ['a', 'b'], ['x', 'y'], ['1', '2', '3', '4']]) ==     [[], ['a', 'b'], ['x', 'y'], ['1', '2', '3', '4']]\nassert     list_to_float([[1.0, 2.0, 3.0], ['a', 'b'], ['x', 'y'], ['1', '2', '3', '4']]) ==     [[1.0, 2.0, 3.0], ['a', 'b'], ['x', 'y'], ['1', '2', '3', '4']]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     list_to_float([]) == []\nassert     list_to_float([[]]) == []\nassert     list_to_float([[0]]) == [0]\nassert     list_to_float([[0, 1]]) == [0.0, 1.0]\nassert     list_to_float([[0, 2, 3]]) == [0.0, 2.0, 3.0]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     list_to_float([[1, 2], [3, 4], [\"a\", \"b\"]]) == [[1.0, 2.0], [3.0, 4.0], [\"a\", \"b\"]]\nassert     list_to_float([[1, 2], [\"a\", \"b\"]]) == [[1.0, 2.0], [\"a\", \"b\"]]\nassert     list_to_float([1, 2, \"a\", \"b\"]) == [[1.0], [2.0], [\"a\", \"b\"]]\nassert     list_to_float([\"1\", \"2\", \"3\"]) == [[1.0], [2.0], [3.0]]\nassert     list_to_float([\"1\", 2, \"3\"]) == [[1.0], [2.0], [3.0]]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     list_to_float([1, 2, 3, 'a', 'b', 'c']) == [[1., 2., 3.], ['a', 'b', 'c']]\nassert     list_to_float([[1, 2], [3, 'a'], ['b', 1.5], 'c']) == [[1., 2.], ['a', 'b'], ['c']]\nassert     list_to_float([[1], ['a'], ['b', 1.5], 'c']) == [[1.], ['a'], ['b', 1.5], 'c']\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     string_to_list(\"a b c\") == [\"a\", \"b\", \"c\"]\nassert     string_to_list(\"a b d e f g\") == [\"a\", \"b\", \"d\", \"e\", \"f\", \"g\"]\nassert     string_to_list(\"a\\nb\\nc\") == [\"a\", \"b\", \"c\"]\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert \nassert string_to_list('one two three') == ['one', 'two', 'three']\nassert string_to_list('one two three 4') == ['one', 'two', 'three', '4']\nassert string_to_list('one two three four') == ['one', 'two', 'three', 'four']\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     string_to_list('space') == ['space'], 'Fail!'\nassert     string_to_list('x y z') == ['x', 'y', 'z'], 'Fail!'\nassert     string_to_list('space') == ['spa','ace'], 'Fail!'\nassert     string_to_list('x-y') == ['x-','y'], 'Fail!'\nassert     string_to_list('x-y-z') == ['x-y-z'], 'Fail!'\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef list_to_string(my_list): \n    '''\n    Write a function to convert a list of strings into a single string by concatenating the strings one after the other.\n    '''\n    pass\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef list_to_string(list_to_convert): \n    '''\n    Write a function to convert a list of strings to a string by using the join function.\n    '''\n    pass\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     string_to_list('hi world') == ['hi', 'world']\nassert     string_to_list(' hi world') == ['hi', 'world']\nassert     string_to_list('hi,world') == ['hi', 'world']\nassert     string_to_list('hi, world') == ['hi', 'world']\nassert     string_to_list('hello, world') == ['hello', ',', 'world']\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef list_to_string(list): \n    '''\n    Write a function to convert a list of strings to a string by separating them with the space character. \n    '''\n    pass\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef list_to_string(list):\n    '''\n    Write a function to convert a list of strings into a single string by joining all the strings in the list using the space as the delimiter.\n    '''\n    pass\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     string_to_list('hello world') == ['h', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\nassert     string_to_list('hello') == ['h', 'e', 'l', 'o','', 'h']\nassert     string_to_list('hello world') == ['h', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n\n\n\ndef string_to_tuple(string): \n    '''\n    Write a function to convert a string to a tuple of strings split on the space character.\n    '''\n    pass\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     search([3,3,5,5,5,5,5,6,7,7,7,7,7,8]) == 5\nassert     search([3,3,5,5,5,5,5,6,7,7,7,7,7,8]) == 7\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     search([1, 1, 2, 3, 4, 5, 6]) == 1\nassert     search([1, 1, 2, 3, 4, 5, 5]) == 5\nassert     search([1, 1, 2, 3, 4, 5, 6]) == 6\nassert     search([]) == None\nassert     search([-1]) == -1\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     search([10,5,3,1,4,1,2]) == 1, \"Should return 1\"\nassert     search([10,5,3,1,4,1,2,2,3]) == 1, \"Should return 1\"\nassert     search([2,5,3,1,4,1,2,2,3]) == 3, \"Should return 3\"\nassert     search([]) == None, \"Should return None\""
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert search([1,1,3,3,7,2,2,2,2]) == 7, 'incorrect answer'\nassert search([1,1,3,3,7,2,2,2,2,2,2,2]) == 2, 'incorrect answer'\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\narr = [-1,2,3,4,5]\nassert search(arr) == 5\n\n\ndef is_unique(arr):\n    '''\n    Write a python function to check whether an array is unique or not.\n    '''\n    pass\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nsearch([1,1,1,2,2,3,4,4]) == 2"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \narr = [1, 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6, 7, 8, 8, 9, 9, 9]\nprint(\"The element that appears once in the array: \",search(arr))\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     search([1, 2, 3, 1, 2, 2, 2, 3, 3, 4]) == 3\nassert     search([2, 1, 2, 2, 2, 3, 3, 3, 3]) == 2\nassert     search([1, 1, 1, 2, 3, 5, 6]) == 1\nassert     search([1, 2, 1, 3, 3, 3, 3, 4, 5, 6, 5]) == 5\nassert     search([1, 2, 1, 2, 2, 2, 2, 3, 3, 3, 3]) == 2\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_product_tuple([(1,2),(3,4),(5,6),(7,8)]) == 24,'should be 24'\nassert     max_product_tuple([(1,2),(3,4),(5,6),(-3,4)]) == 24,'should be 24'\nassert     max_product_tuple([(-1,2),(-3,4),(5,6),(7,8)]) == 24,'should be 24'\nassert     max_product_tuple([(-1,2),(-3,4),(5,6),(7,8)]) == 24,'should be 24'\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_product_tuple([[1, 2], [3, 4], [-1, 1]]) == 6\nassert     max_product_tuple([[2, -3], [1, 0], [-4, -5]]) == -5\nassert     max_product_tuple([[1, -2], [-3, 0], [-4, -5]]) == -6\nassert     max_product_tuple([[1, -2], [1, 0], [-4, -5]]) == -1\nassert     max_product_tuple([[1, 2], [0, 0], [-3, -4]]) == 6\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert max_product_tuple([(1,-1),(0,4),(3,2),(-4,5)]) == (10,0)\nassert max_product_tuple([(1,-1),(-2,3),(4,5),(2,-3)]) == (10,0)\nassert max_product_tuple([(1,2),(-3,4),(5,-6),(2,3)]) == (-24,0)\nassert max_product_tuple([(0,0),(0,0),(0,0),(0,0),(-1,-1),(-1,-1),(1,1),(1,-1),(1,1)]) == (24,0)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_product_tuple([(1, 1), (2, 3), (4, -1), (-1, -2), (4, 5)]) == (-1, -2)\nassert max_product_tuple([(1, 1), (2, 3), (4, -1), (-1, -2), (4, 5)]) == (4, 5)\nassert max_product_tuple([(-1, -1), (-2, -3), (1, 1), (2, 3), (4, -1), (-1, -2), (4, 5)]) == (1, 1)\nassert max_product_tuple([(-1, -1), (-2, -3), (1, 1), (2, 3), (4, -1), (-1, -2), (4, 5)]) == (4, 5)\nassert max_product_tuple([(1, 1), (2, 3), (4, 5), (1, 1), (2, 3), (4, 5)]) == (4, 5)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_product_tuple([(1,2),(3,4),(5,6)]) == (6,4)\nassert     max_product_tuple([(7,3),(5,6),(2,1)]) == (3,6)\nassert     max_product_tuple([(5,1),(4,2),(6,4)]) == (6,4)\nassert     max_product_tuple([(2,3),(3,1),(1,4)]) == (3,1)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_product_tuple([(5,4),(3,2),(1,8),(10,2)]) == (10,2)\nassert max_product_tuple([(1,2),(3,4),(5,6)]) == (5,6)\nassert max_product_tuple([(1,2),(5,6)]) == (5,6)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_product_tuple([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == 12\nassert     max_product_tuple([(1, 1), (2, 4), (3, 3), (4, 2), (5, 1)]) == 10\nassert     max_product_tuple([(1, -2), (2, 4), (3, 3), (4, 2), (5, 1)]) == 24\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_product_tuple([(1,2),(3,4),(1,0),(3,4),(0,1),(3,4),(1,0),(1,0),(3,4)]) == ((1,0),(3,4)) == (1,0,0,4)\nassert     max_product_tuple([(1,2),(3,4),(0,1),(3,4),(1,0),(3,4),(1,0),(1,0),(3,4)]) == ((1,0),(1,0),(1,0)) == (1,0,0,0,1)\nassert     max_product_tuple([(1,2),(3,4),(0,1),(3,4),(1,0),(3,4),(1,0),(0,1),(3,4)]) == ((0,1),(1,0),(1,0)) == (0,1,1)\nassert     max_product_tuple([(1,2),(3,4),(0,1),(3,4),(1,0),(3,4),(1,0),(1,0),(3,4)]) == ((1,0),(1,0),(1,0)) == (1,0,0,0,1)\nassert     max_product_tuple([(1,2),(3,4),(0,1),(3,4),(1,0),(3,4),(1,0),(1,0),(3,4)]) == ((1,0),(1,0),(1,0)) == (1,0,0,0,1)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     amicable_numbers_sum(10) == 4, \"incorrect\"\nassert     amicable_numbers_sum(100) == 400, \"incorrect\"\nassert     amicable_numbers_sum(1000) == 442, \"incorrect\""
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     amicable_numbers_sum(1) == 0\nassert     amicable_numbers_sum(2) == 1\nassert     amicable_numbers_sum(3) == 2\nassert     amicable_numbers_sum(4) == 3\nassert     amicable_numbers_sum(5) == 5\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\namicable_numbers_sum(20) == 9"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     amicable_numbers_sum(10) == 5, \"The value must be 5\"\nassert     amicable_numbers_sum(1) == 0, \"The value must be 0\"\nassert     amicable_numbers_sum(20) == 15, \"The value must be 15\"\nassert     amicable_numbers_sum(10000) == 3465, \"The value must be 3465\"\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     amicable_numbers_sum(20) == 56\nassert     amicable_numbers_sum(100) == 5050\nassert     amicable_numbers_sum(10000) == 92500\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     amicable_numbers_sum(10) == 33, \"test failed\"\nassert     amicable_numbers_sum(1) == 2, \"test failed\"\nassert     amicable_numbers_sum(9) == 22, \"test failed\"\nassert     amicable_numbers_sum(1000000) == 2976, \"test failed\"\nassert     amicable_numbers_sum(1000000) == 74841, \"test failed\"\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     amicable_numbers_sum(1000) == 1170\nassert     amicable_numbers_sum(5000) == 943\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     amicable_numbers_sum(100) == 3025, \"incorrect answer\"\nassert     amicable_numbers_sum(1) == 1, \"incorrect answer\"\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     amicable_numbers_sum(1000) == 233168, \"Wrong answer\"\nassert     amicable_numbers_sum(500) == 18439, \"Wrong answer\"\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     amicable_numbers_sum(100) == 10\nassert     amicable_numbers_sum(500) == 0\nassert     amicable_numbers_sum(1000) == 5\nassert     amicable_numbers_sum(10000) == 10\nassert     amicable_numbers_sum(100000) == 12\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    # the angle of a complex number (complex float number)\n    # is the angle in radians (in the range 0 to 2 * pi)\n    # that is, between 0 and 2 * pi.\n\n    # Test Cases:\n    # if the arguments are complex numbers,\n    # then the result is the angle in radians.\n\n    # if the arguments are real numbers,\n    # then the result is the sine of the angle\n    # in radians.\n\n    # Complex numbers:\n    assert angle_complex(complex(0,2), complex(1,1)) == 3.14/2\n    "
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     angle_complex(a=2, b=-1) == 1.57079633, \"Error\"\nassert     angle_complex(a=0.5, b=-1) == 1.57079633, \"Error\"\nassert     angle_complex(a=1.2, b=-1) == -0.785398163397448, \"Error\"\nassert     angle_complex(a=1.2, b=1) == 0.785398163397448, \"Error\"\nassert     angle_complex(a=0.5, b=1) == 1.57079633, \"Error\"\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     angle_complex(1,1) == 0\nassert     angle_complex(1,1.1) == 0.1\nassert     angle_complex(2,1.5) == 0.5\nassert     angle_complex(1+2j,1) == 0.5-0.5j\nassert     angle_complex(0.5+2j,1) == 0.5\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     angle_complex(2,2) == 0\nassert     angle_complex(1,3) == 1.57079633\nassert     angle_complex(0,1) == 0\nassert     angle_complex(-1,2) == 1.57079633\nassert     angle_complex(3,1) == 1.57079633\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     angle_complex(complex(1, 0), complex(0, 1)) == 0\nassert     angle_complex(complex(1, 0), complex(0, -1)) == pi\nassert     angle_complex(complex(-1, 0), complex(0, -1)) == pi\nassert     angle_complex(complex(-1, 0), complex(0, 1)) == pi/2\nassert     angle_complex(complex(0, -1), complex(0, 1)) == pi/2\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     angle_complex(1+1j, -1+1j)==cmath.phase(1)\nassert     angle_complex(1+1j, -2+2j)==cmath.phase(cmath.sqrt(3))\nassert     angle_complex(2+3j, 2-3j)==cmath.phase(cmath.sqrt(3))\nassert     angle_complex(1+1j, 1+1j)==cmath.phase(1)\nassert     angle_complex(0+1j, 0+1j)==0\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     angle_complex((0, 1), (0, 1)) == 0.5*math.pi\nassert     angle_complex((0, 1), (1, 0)) == 0.5*math.pi\nassert     angle_complex((0, 1), (1, 1)) == 1\nassert     angle_complex((0, -1), (0, 1)) == 0.5*math.pi\nassert     angle_complex((0, -1), (1, 0)) == 0.5*math.pi\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     angle_complex(0,0)==0\nassert     angle_complex(1,0)==1\nassert     angle_complex(1,1)==1\nassert     angle_complex(-1,0)==-1\nassert     angle_complex(0,-1)==-1\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_length('101') == 1\nassert     find_length('0110') == 2\nassert     find_length('1010011') == 4\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_length(\"10101\") == 1\nassert     find_length(\"10001\") == 2\nassert     find_length(\"111100\") == 2\n\ndef find_length_from_set(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    pass\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    find_length(bin(1)) == 1\n    find_length(bin(0)) == 0\n    find_length(bin(101)) == 1\n    find_length(bin(100)) == 0\n    find_length(bin(1000)) == 2\n    find_length(bin(10)) == 1\n    find_length(bin(1001)) == 1\n    find_length(bin(1100)) == 1\n    find_length(bin(11001100)) == 2\n\nimport unittest\n\nclass TestFindLength(unittest.TestCase):\n    def test_case_00(self):\n        self.assertEqual(find_length(bin(1)), 1)\n        self.assertEqual(find_length(bin(0)), 0)\n        self."
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef find_length(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    pass\n\n\nclass Solution:\n    def max_length(self, s: str) -> int:\n        '''\n        Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n        \n        Return 0 if there is no such sub-string.\n        '''\n        pass\n    \n    \nclass Solution:\n    def max_length(self, s: str) -> int:\n        '''\n        Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n        \n        Return 0 if there is no such sub-string.\n        '''\n        pass\n    \n    \nclass Solution:\n    def max_length(self, s: str) -> int:\n        '''\n        Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n        \n        Return 0 if there is no such sub-string.\n        '''\n        pass\n    \n    \nclass Solution:\n    def max_length(self, s: str) -> int:\n        '''\n        Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n        \n        Return 0 if there is no such sub-string.\n        '''\n        pass\n    \n    \nclass Solution:\n    def max_length(self, s: str) -> int:\n        '''\n        Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n        \n        Return 0 if there is no such sub-string.\n        '''\n        pass\n    \n    \nclass Solution:\n    def max_length(self, s: str) -> int:\n        '''\n        Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n        \n        Return 0 if there is no such sub-string.\n        '''\n        pass\n    \n    \nclass Solution:\n    def max_length(self, s: str) -> int:\n        '''\n        Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n        \n        Return 0 if there is no such sub-string.\n        '''\n        pass\n    \n    \nclass Solution:\n    def max_length(self, s: str) -> int:\n        '''\n        Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n        \n        Return 0 if there is no such sub-string.\n        '''\n        pass\n    \n    \nclass Solution:\n    def max_length(self, s: str) -> int:\n        '''\n        Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n        \n        Return 0 if there is no such sub-string.\n        '''\n        pass\n    \n    \nclass Solution:\n    def max_length(self, s: str) -> int:\n        '''\n        Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n        \n        Return 0 if there is no such sub-string.\n        '''\n        pass\n    \n    \nclass Solution:\n    def max_length(self, s: str) -> int:\n        '''\n        Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n        \n        Return 0 if there is no such sub-string.\n        '''\n        pass\n    \n    \nclass Solution:\n    def max_length(self, s: str) -> int:\n        '''\n        Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n        \n        Return 0 if there is no such sub-string.\n        '''\n        pass\n    \n    \nclass Solution:\n    def max_length(self, s: str) -> int:\n        '''\n        Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n        \n        Return 0 if there is no such sub-string.\n        '''\n        pass\n    \n    \nclass Solution:\n    def max_length(self, s: str) -> int:\n        '''\n        Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n        \n        Return 0 if there is no such sub-string.\n        '''\n        pass\n    \n    \nclass Solution:\n    def max_length(self, s: str) -> int:\n        '''\n        Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n        \n        Return 0 if there is no such sub-string.\n        '''\n        pass\n    \n    \nclass Solution:\n    def max_length(self, s: str) -> int:\n        '''\n        Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n        \n        Return 0 if there is no such sub-string.\n        '''\n        pass\n    \n    \nclass Solution:\n    def max_length(self, s: str) -> int:\n        '''\n        Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n        \n        Return 0 if there is no such sub-string.\n        '''\n        pass\n    \n    \nclass Solution:\n    def max_length(self, s: str) -> int:\n        '''\n        Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n        \n        Return 0 if there is no such sub-string.\n        '''\n        pass\n    \n    \nclass Solution:\n    def max_length(self, s: str) -> int:\n        '''\n        Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n        \n        Return 0 if there is no such sub-string.\n        '''\n        pass\n    \n    \nclass Solution:\n    def max_length(self, s: str) -> int:\n        '''\n        Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n        \n        Return 0 if there is no such sub-string.\n        '''\n        pass\n    \n    \nclass Solution:\n    def max_length(self, s: str) -> int:\n        '''\n        Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n        \n        Return 0 if there is no such sub-string.\n        '''\n        pass\n    \n    \nclass Solution:\n    def max_length(self, s: str) -> int:\n        '''\n        Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n        \n        Return 0 if there is no such sub-string.\n        '''\n        pass\n    \n    \nclass Solution:\n    def max_length(self, s: str) -> int:\n        '''\n        Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n        \n        Return 0 if there is no such sub-string.\n        '''\n        pass\n    \n    \nclass Solution:\n    def max_length(self, s: str) -> int:\n        '''\n        Write a function to find the maximum difference between the number of 0s and number of 1"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(find_length('101001'))\n    print(find_length('11101'))\n    print(find_length('10100100010000')"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_length(\"11010101\") == 4, \"Wrong value\"\nassert     find_length(\"101\") == 0, \"Wrong value\"\n\ndef find_letters_and_digits(s):\n    '''\n    Write a function to find the most frequent letter in a given string and the most frequent digit in a given string.\n    Return these numbers in a string of the form \u201cLetter X Digit Y\u201d, in the order of occurrence.\n    '''\n    pass\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef find_length_optimized(string):\n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    (HINT: you can solve this problem in O(N) time using the concept of dynamic programming.)\n    '''\n    pass\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_length(\"0010010011001\") == 1\nassert     find_length(\"001001001101\") == 1\nassert     find_length(\"001010010111\") == 2\nassert     find_length(\"001010101001\") == 1\nassert     find_length(\"001110011\") == 2\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(\"The maximum difference is %s\" % find_length(bin(27)))\nprint(\"The maximum difference is %s\" % find_length(bin(17)))\nprint(\"The maximum difference is %s\" % find_length(bin(10)))\nprint(\"The maximum difference is %s\" % find_length(bin(1011)))\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum(2,5) == 1\nassert     sum(3,6) == 3\nassert     sum(5,5) == 0\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum(6,4) == 2, \"Passed!\"\nassert     sum(10,2) == 9, \"Passed!\"\nassert     sum(18,18) == 36, \"Passed!\"\nassert     sum(5,100) == 5, \"Passed!\"\nassert     sum(21,21) == 42, \"Passed!\"\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum(15, 15) == 0, \"incorrect\"\nassert     sum(15, 16) == 1, \"incorrect\"\nassert     sum(7, 12) == 2, \"incorrect\"\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum(3,4) == 3+1+2\nassert     sum(6,9) == 3+3+3\nassert     sum(2,4) == 2+2\nassert     sum(6,8) == 6+6\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum(2,6) == 7\nassert     sum(2,5) == 5\nassert     sum(10,15) == 30\nassert     sum(30,10) == 40\nassert     sum(2345,2456) == 1210\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef add_int(x, y):\n    '''\n    Write a function to add two integers without using addition operator.\n    '''\n    pass\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     multiply_int(10, 0) == 0\nassert     multiply_int(10, 10) == 100\nassert     multiply_int(10, -10) == -100\nassert     multiply_int(-10, -10) == -100\nassert     multiply_int(-10, 10) == -100\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     multiply_int(3, 4) == 12, \"Test Case 1\"\nassert     multiply_int(10, 2) == 20, \"Test Case 2\"\nassert     multiply_int(-3, 4) == -12, \"Test Case 3\"\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert multiply_int(2, 5) == 10\nassert multiply_int(0, 5) == 0\nassert multiply_int(-2, 5) == -10\nassert multiply_int(-1, 5) == -5\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     multiply_int(1, 1) == 1\nassert     multiply_int(2, 1) == 2\nassert     multiply_int(2, 2) == 4\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     multiply_int(3, 4) == 12\nassert multiply_int(4, 2) == 8\n\ndef multiply_string(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    pass\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     multiply_int(2, 3) == 6\nassert     multiply_int(-1, 3) == -3\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     multiply_int(3, 4) == 12, 'wrong'\nassert     multiply_int(-3, 4) == -12, 'wrong'\nassert     multiply_int(2, -3) == -6, 'wrong'\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     multiply_int(2, 2) == 4\nassert     multiply_int(0, 1) == 0\nassert     multiply_int(-1, 1) == -1\n\nprint('OK')"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     multiply_int(2, 3) == 6\nassert     multiply_int(-2, 3) == -6\nassert     multiply_int(-2, -3) == 6\n\ndef count_words(string):\n    '''\n    Write a function to count the number of words in a string.\n    '''\n    pass\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     long_words(5, ['hello', 'computer','science']) == ['computer'], \"Wrong output\"\nassert     long_words(5, ['hello', 'computer','science']) == ['science'], \"Wrong output\"\nassert     long_words(3, ['hello', 'computer','science']) == ['hello', 'computer','science'], \"Wrong output\"\nassert     long_words(5, ['hello', 'computer', 'car','science']) == ['car', 'computer','science'], \"Wrong output\"\nassert     long_words(3, ['hello', 'computer', 'car','science']) == ['hello', 'car', 'computer','science'], \"Wrong output\"\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     long_words(2, ['hi', 'bye', 'hello']) == ['hello', 'hi']\nassert     long_words(2, ['hi', 'bye', 'hello']) == ['bye']\nassert     long_words(2, ['a', 'b', 'c']) == []"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     long_words(3, ['very','very','very','very','very','very','very','very','very','very','very']) == ['very','very']\nassert     long_words(3, ['very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very']) == ['very','very','very']\nassert     long_words(3, ['very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very']) == ['very','very']\nassert     long_words(3, ['very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very']) == ['very','very']\nassert     long_words(3, ['very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very','very']) == []\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     long_words(6, [\"car\", \"boy\", \"cat\", \"dad\", \"dear\", \"dog\"]) == ['dog']\nassert     long_words(6, [\"car\", \"boy\", \"cat\", \"dad\", \"dear\", \"dog\", \"supercalifragilisticexpialidocious\"]) == ['supercalifragilisticexpialidocious']\nassert     long_words(7, [\"the\", \"very\", \"simple\", \"example\", \"of\", \"text\"]) == ['simple','example','text']\nassert     long_words(8, [\"the\", \"very\", \"simple\", \"example\", \"of\", \"text\"]) == []\nassert     long_words(1, [\"a\"]) == []\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     long_words(1, ['hello', 'goodbye', 'hello']) == ['hello', 'hello']\nassert     long_words(1, ['apple', 'bear', 'hello']) == ['apple', 'bear', 'hello']\nassert     long_words(2, ['hello', 'goodbye', 'hello']) == ['hello', 'hello']\nassert     long_words(3, ['apple', 'bear', 'hello']) == ['apple', 'bear', 'hello']\nassert     long_words(4, ['apple', 'bear', 'hello']) == ['apple', 'bear', 'hello']\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     long_words(2, ['the', 'quick', 'brown', 'fox']) == ['the', 'brown']\nassert     long_words(2, ['e', 'cat', 'brown', 'fox']) == ['brown']\nassert     long_words(3, ['the', 'quick', 'brown', 'fox']) == ['brown', 'fox']\n\ndef longest_words(n, str):\n    '''\n    Find the longest words in a given list of words.\n    '''\n    pass\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     long_words(5, [\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\"]) == ['abcd', 'abcde']\nassert     long_words(5, [\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\"]) == ['abcd', 'abcde']\nassert     long_words(5, [\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"]) == []\nassert     long_words(1, [\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\"]) == ['a', 'ab', 'abc', 'abcd', 'abcde']\nassert     long_words(1, [\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\"]) == ['a', 'ab', 'abc', 'abcd', 'abcde']\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nlong_words(5, [\"hello\", \"world\", \"sims\"]) == [\"sims\"]\nassert \nlong_words(5, [\"hello\", \"world\", \"helllo\"]) == [\"helllo\"]\nassert \nlong_words(5, [\"sim\", \"sim\", \"sim\", \"sim\"]) == [\"sim\"]\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     magic_square_test([[4, 9, 2], \n                            [6, 5, 7],\n                            [8, 1, 3]]) == True, \"Wrong Answer\"\n\nassert     magic_square_test([[1, 2, 3],\n                            [4, 5, 6],\n                            [7, 8, 9]]) == False, \"Wrong Answer\"\n\nassert     magic_square_test([[1, 2, 3, 4],\n                            [5, 6, 7, 8],\n                            [9, 10, 11, 12],\n                            [13, 14, 15, 16]]) == False, \"Wrong Answer\"\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef magic_square_test_2(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    pass\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     magic_square_test([[4, 9, 2], \n                            [3, 5, 7], \n                            [8, 1, 6]]) == True, \"Wrong!\"\nassert     magic_square_test([[4, 9, 2], \n                            [3, 5, 7], \n                            [8, 1, 6], \n                            [6, 3, 8]]) == False, \"Wrong!\"\nassert     magic_square_test([[4, 9, 2, 6], \n                            [3, 5, 7, 8], \n                            [8, 1, 6, 7], \n                            [6, 3, 8, 9]]) == False, \"Wrong!\"\nassert     magic_square_test([[1, 2, 3, 4, 5], \n                            [6, 7, 8, 9, 1], \n                            [2, 3, 4, 5, 6], \n                            [7, 8, 9, 1, 2], \n                            [3, 4, 5, 6, 7]]) == False, \"Wrong!\"\nassert     magic_square_test([[1, 2, 3, 4], \n                            [5, 6, 7, 8], \n                            [9, 10, 11, 12], \n                            [13, 14, 15, 16]]) == False, \"Wrong!\"\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     magic_square_test([[4, 9, 2],\n                             [3, 5, 7],\n                             [8, 1, 6]]) == True, \"not a magic square\"\nassert     magic_square_test([[4, 9, 2],\n                             [3, 5, 7],\n                             [8, 1, 6]]) == False, \"not a magic square\"\nassert     magic_square_test([[4, 9, 2],\n                             [3, 5, 7],\n                             [8, 1, 6]]) == False, \"not a magic square\"\nassert     magic_square_test([[4, 9, 2],\n                             [3, 5, 7],\n                             [8, 1, 6]]) == False, \"not a magic square\"\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_occurrences([5, 7, 3, 5, 3, 5, 7, 5, 5, 5, 5, 3, 5, 7, 5, 7, 5, 5, 5, 5, 5, 5, 7, 5, 5, 5, 5, 5, 5, 7, 7, 5, 5, 7, 5, 7, 5, 5, 5, 5, 7, 5, 5, 5, 5, 5, 5, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n'''\nRuntime: 28 ms, faster than 92.88% of Python3 online submissions for Find the Most Frequent Substring.\nMemory Usage: 13.6 MB, less than 6.67% of Python3 online submissions for Find the Most Frequent Substring.\n'''\n\ndef max_occurrences2(nums):\n    '''\n    Solution 1\n    '''\n    s = \"\"\n    max_cnt = 0\n    max_ind = 0\n    max_num = 0\n    for i in range(len(nums)):\n        if nums[i] not in s:\n            s += str(nums[i])\n            max_cnt = 1\n        else:\n            max_cnt += 1\n        if max_cnt > max_ind:\n            max_ind = max_cnt\n            max_num = nums[i]\n    return max_num\n\ndef max_occurrences3(nums):\n    '''\n    Solution 2\n    '''\n    from collections import Counter\n    s = \"\"\n    max_cnt = 0\n    max_ind = 0\n    max_num = 0\n    for i in range(len(nums)):\n        if nums[i] not in s:\n            s += str(nums[i])\n            max_cnt = 1\n        else:\n            max_cnt += 1\n        if max_cnt > max_ind:\n            max_ind = max_cnt\n            max_num = nums[i]\n    return max_num\n\ndef max_occurrences4(nums):\n    '''\n    Solution 3\n    '''\n    s = \"\"\n    max_cnt = 0\n    max_ind = 0\n    max_num = 0\n    for i in range(len(nums)):\n        if nums[i] not in s:\n            s += str(nums[i])\n            max_cnt = 1\n        else:\n            max_cnt += 1\n        if max_cnt > max_ind:\n            max_ind = max_cnt\n            max_num = nums[i]\n    return max_num\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_occurrences([1, 2, 3, 3, 2, 1, 3, 3, 3, 3]) == 3\nassert     max_occurrences([1, 2, 3, 3, 2, 1]) == 3\nassert     max_occurrences([1, 1, 3, 3, 2, 1, 3, 3, 3, 3]) == 3\nassert     max_occurrences([]) == None\nassert     max_occurrences([1, 2, 3, 2, 3, 3, 2, 1, 1]) == 1\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_occurrences([1,1,1,1]) == 1\nassert     max_occurrences([1,2,3,4]) == 1\nassert     max_occurrences([1,2,3,3,4]) == 3\nassert     max_occurrences([1,2,3,3,4,1,2]) == 4\nassert     max_occurrences([1,2,3,4,5,6,7,8,9,5]) == 9\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef longest_common_prefix(strs):\n    '''\n    Write a function to find the longest common prefix string amongst an array of strings.\n    If there is no common prefix, return an empty string \"\".\n    '''\n    pass\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef mean(nums):\n    '''\n    Write a function to find the mean of a list of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_occurrences([]) == None\nassert max_occurrences([3,1,5,4,2,1,2,1]) == 1\nassert max_occurrences([5,5,4,3,2,1,2,1]) == 2\nassert max_occurrences([1,2,3,3,4]) == 3\nassert max_occurrences([1,2,3,4,5,4,2,1,2,1]) == 5\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_occurrences([1,1,2,2,2,2]) == 2\nassert     max_occurrences([1,2,2,2,2,2]) == 2\nassert     max_occurrences([1,1,1,2,2,2]) == 1\nassert     max_occurrences([1,1,1,1,2,2]) == 1\nassert     max_occurrences([1,1,1,1,1,2]) == 1\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_occurrences([1,2,2,3,3]) == 3\nassert     max_occurrences([1,2,2,3,3,3]) == 3\nassert     max_occurrences([1,2,1,3,3,4]) == 4\nassert     max_occurrences([1,2,1,3,3,4,4,4,4]) == 4\nassert     max_occurrences([1,2,1,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint('#'*50)\nprint(max_occurrences([1,2,2,2,3]))\nprint('#'*50)\nprint(max_occurrences([2,3,2,3,2]))\nprint('#'*50)\nprint(max_occurrences([1,1,1,2,2,2,3,3,3]))\nprint('#'*50)\nprint(max_occurrences([1,2,2,2,3,3,4,4,4,4,4]))\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     reverse_vowels(\"We are the champions\") == \"emocciun y sparitam usa staum\", \"Reversing of vowels is wrong\"\nassert reverse_vowels(\"I am a student\") == \"emocciun y sparitam usa staum\", \"Reversing of vowels is wrong\"\nassert reverse_vowels(\"Programmer\") == \"erpom tism y programm\", \"Reversing of vowels is wrong\"\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     reverse_vowels(\"\") == \"\", \"Empty string\"\nassert     reverse_vowels(\"h\") == \"h\", \"H is the only vowel\"\nassert     reverse_vowels(\"Hello World\") == \"dlroW olleH\", \"alw olleH is the only vowel\"\nassert     reverse_vowels(\"Aabcd\") == \"dcba\", \"Aabcd should be dcba\"\nassert     reverse_vowels(\"\") == \"\", \"Empty string should return an empty string\"\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     reverse_vowels(\"vowels\") == \"sveil\"\nassert     reverse_vowels(\"lo\") == \"ol\"\nassert     reverse_vowels(\"on\") == \"no\"\nassert     reverse_vowels(\"*\") == \"*\"\nassert     reverse_vowels(\"\") == \"\"\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     reverse_vowels('hello') == 'holle', \"Not correct\"\nassert     reverse_vowels('hELLO') == 'oLLl', \"Not correct\"\nassert     reverse_vowels('H') == 'h', \"Not correct\"\nassert     reverse_vowels('hEllo') == 'oLLl', \"Not correct\"\nassert     reverse_vowels('hello') == 'olleh', \"Not correct\"\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     reverse_vowels(\"He is a boy\") == \"ybOS yS a OI\", \"Should be: ybOS yS a OI\"\nassert     reverse_vowels(\"he is a boy\") == \"ybOS yS a OI\", \"Should be: ybOS yS a OI\"\nassert     reverse_vowels(\"He is a boy\") == \"ybOS yS a OI\", \"Should be: ybOS yS a OI\"\nassert     reverse_vowels(\"He is a boy\") == \"ybOS yS a OI\", \"Should be: ybOS yS a OI\"\nassert     reverse_vowels(\"He is a boy\") == \"ybOS yS a OI\", \"Should be: ybOS yS a OI\"\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     reverse_vowels('hello world') == 'dlrow olleh', \"Test Failed\"\nassert     reverse_vowels('hello how are you') == 'yrohow aohu olleh', \"Test Failed\"\nassert     reverse_vowels('why do you say that?') == 'why ysay thay that?', \"Test Failed\"\n\ndef reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    \n    vowels = set('aeiou')\n    str1 = list(str1)\n    \n    for i in range(len(str1)):\n        if str1[i] not in vowels:\n            str1[i], str1[len(str1)-i-1] = str1[len(str1)-i-1], str1[i]\n    \n    return ''.join(str1)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     reverse_vowels(\"a\") == \"a\", \"Should be a\"\nassert     reverse_vowels(\"hello\") == \"olleh\", \"Should be olleh\"\nassert     reverse_vowels(\"code\") == \"odcce\", \"Should be odcce\"\nassert     reverse_vowels(\"a\") == \"a\", \"Should be a\"\nassert     reverse_vowels(\"ae\") == \"ae\", \"Should be ae\"\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     reverse_vowels(\"h\") == \"eh\"\nassert     reverse_vowels(\"hello\") == \"olleh\"\nassert     reverse_vowels(\"hElLo\") == \"oLLoH\"\nassert     reverse_vowels(\"Ho\") == \"Oeh\"\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     reverse_vowels('hello') == 'holle'\nassert     reverse_vowels('dear') == 'eard'\nassert     reverse_vowels('amanaplanacanalpanama') == 'amanapnalpanama'\nassert     reverse_vowels('rear') == 'arr'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tup_string(('a','b','c')) == 'a,b,c'\nassert tup_string((1,2,3)) == '1,2,3'\nassert tup_string((10,20,30)) == '10,20,30'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef dict_string(dic):\n    '''\n    Write a function to convert a dictionary into a string.\n    '''\n    pass\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef tup_list(tup1):\n    '''\n    Write a function to convert a tuple to a list.\n    '''\n    pass\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tup_string(('a', 'b', 'c')) == \"abc\"\nassert tup_string((1, 2, 3)) == \"123\"\nassert tup_string((1.0, 2.0, 3.0)) == \"1.23\"\nassert tup_string((True, False, None)) == \"True False\"\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tup_string((3, 5, 7)) == \"3, 5, 7\"\nassert     tup_string((-3, -5, -7)) == \"-3, -5, -7\"\n\ndef get_words(text):\n    '''\n    Write a function that takes a text and return a list of words,\n    each of which was splited by space.\n    '''\n    pass\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tup_string((1,2)) == '(1,2)'\nassert     tup_string((1,2,'harry')) == '(1,2,\\'harry\\')'\nassert     tup_string((2,3,4,'cat','dog','frog','monkey','parrot','horse','sheep','elephant','fox','zebra','panda','giraffe','goat','cow','chicken','dolphin','dove','oyster','falcon','lion','tiger','leopard','sparrow','penguin','crocodile','turtle','snake','monkey','cowboy','dog','fox')) == '(2,3,4,\\'cat\\',\\'dog\\',\\'frog\\',\\'monkey\\',\\'parrot\\',\\'horse\\',\\'sheep\\',\\'elephant\\',\\'fox\\',\\'zebra\\',\\'panda\\',\\'giraffe\\',\\'goat\\',\\'cow\\',\\'chicken\\',\\'dolphin\\',\\'dove\\',\\'oyster\\',\\'falcon\\',\\'lion\\',\\'tiger\\',\\'leopard\\',\\'sparrow\\',\\'penguin\\',\\'crocodile\\',\\'turtle\\',\\'snake\\',\\'monkey\\',\\'cowboy\\',\\'dog\\',\\'fox)'\n\n'''\nWrite a function to find the largest and smallest number in a list\n'''\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tup_string((1,2,3)) == \"123\"\nassert     tup_string((3,2,1)) == \"321\"\nassert     tup_string((2,3,4,5)) == \"2345\"\nassert     tup_string((2)) == \"2\"\nassert     tup_string(()) == \"()\"\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef tup_list(tup1):\n    '''\n    Write a function to convert a tuple to a list.\n    '''\n    pass\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tup_string((1, 2, 3)) == \"1 2 3\"\nassert     tup_string((1, 2, 3, 4, 5, 6)) == \"1 2 3 4 5 6\"\nassert     tup_string((1, 2, 3, 4, 5)) == \"1 2 3 4 5\"\nassert     tup_string((1, 2, 3, 4)) == \"1 2 3 4\"\nassert     tup_string((1, 2, 3)) == \"1 2 3\"\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ntup_string(()) == ''\nassert tup_string((1,)) == '1'\nassert tup_string((1, 2, 3)) == '1,2,3'\n\n\ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    \n    # Your Code Here\n    return ', '.join(str(n) for n in tup1)\n    \nassert tup_string(()) == ''\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert sum_negativenum([1,-1,2,3,-4]) == 2\nassert sum_negativenum([-2,3,4]) == 3\nassert sum_negativenum([-1]) == 1\nassert sum_negativenum([]) == 0\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_negativenum([1,2,-3,-4,-5,]) == -6\nassert     sum_negativenum([]) == 0\nassert     sum_negativenum([1,-2,-3,-4,-5,]) == -14\nassert     sum_negativenum([1,-2,3,-4,-5,]) == -7\nassert     sum_negativenum([-1,2,3,4,-5]) == 5\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_negativenum([-2, 4, -3, 1]) == 5\nassert     sum_negativenum([1, -3, -2]) == -1\nassert     sum_negativenum([-2, -4, -3, 1, 5]) == -7\nassert     sum_negativenum([-2, -4, -3, 1]) == 0\nassert     sum_negativenum([-2, -4, -3, 1, -5]) == -7\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_negativenum([1, -2, -3]) == -6\nassert     sum_negativenum([-1, -2, 3]) == -5\nassert     sum_negativenum([-1, -2, -3, -4]) == -7\nassert     sum_negativenum([1, 2, 3, -4, 5, 6]) == -11\nassert     sum_negativenum([1, -2, 3, 4, -5, 6]) == -8\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert sum_negativenum([1, -2, 3, -4]) == -1\nassert sum_negativenum([-1, -2, -3, -4]) == -1\nassert sum_negativenum([-1, -2, -3, -4, -5]) == -1\nassert sum_negativenum([1, 2, 3, 4]) == 0\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_negativenum([-1,2,1]) == -3\nassert     sum_negativenum([-1,1,1]) == 2\nassert     sum_negativenum([1,-1,1]) == 0\nassert     sum_negativenum([1,-1,1,-2]) == 2\nassert     sum_negativenum([1,-1,-2]) == 0\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_negativenum([-3, -2, -1, -1]) == 0, 'Wrong result'\nassert     sum_negativenum([-3, 1, -3, 2, -2, 3, -1, -2, -3, 4, -1, -2, 1, 2, 1, 1, 1, -3]) == -10, 'Wrong result'"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_negativenum([1, 2, -4, 8, -1]) == 1\nassert     sum_negativenum([1, 2, -5, 8, -1]) == -1\nassert     sum_negativenum([1, -2, -5, 8, -1]) == -4\nassert     sum_negativenum([1, 2, -4, -8, -1]) == 0\nassert     sum_negativenum([-1, 2, -4, -8, -1]) == 0\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_negativenum([1, -2, -4, -5]) == 2\nassert     sum_negativenum([-1, -2, -4, -5]) == 4\nassert     sum_negativenum([1, 2, 3, 4, 5, -6]) == -6"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n'''\nWrite a function that can print the first and last items of a list in one single command.\n'''"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(hexagonal_num(6))\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nhexagonal_num(4) == 10\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nhexagonal_num(0) == 1\nassert \nhexagonal_num(1) == 3\nassert \nhexagonal_num(2) == 7\nassert \nhexagonal_num(3) == 15\nassert \nhexagonal_num(4) == 31\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     hexagonal_num(1) == 1, \n        \"Incorrect result\"\nassert     hexagonal_num(2) == 3, \n        \"Incorrect result\"\nassert     hexagonal_num(3) == 5, \n        \"Incorrect result\"\nassert     hexagonal_num(4) == 7, \n        \"Incorrect result\"\nassert     hexagonal_num(5) == 9, \n        \"Incorrect result\"\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef is_power_of_two(n): \n    '''\n    Write a function that checks if a number is a power of two.\n    '''\n    pass\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nhexagonal_num(6) == 15, 'Wrong output'\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     hexagonal_num(1) == 1\nassert hexagonal_num(2) == 3\nassert hexagonal_num(3) == 5\nassert hexagonal_num(4) == 7\nassert hexagonal_num(5) == 13\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     hexagonal_num(0) == 1, \"1th hexagonal number is 1\"\nassert     hexagonal_num(1) == 3, \"2nd hexagonal number is 3\"\nassert     hexagonal_num(2) == 7, \"3rd hexagonal number is 7\"\nassert     hexagonal_num(3) == 15, \"4th hexagonal number is 15\"\nassert     hexagonal_num(4) == 31, \"5th hexagonal number is 31\"\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     hexagonal_num(1) == 1, \nprint('  Test 1 (hexagonal_num): pass')\n\nassert     hexagonal_num(2) == 3, \nprint('  Test 2 (hexagonal_num): pass')\n\nassert     hexagonal_num(3) == 8, \nprint('  Test 3 (hexagonal_num): pass')\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nhexagonal_num(5) == "
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     zero_count([0, 1, 0, 1]) == 0.25\nassert     zero_count([0, 1, 0, 1, 1, 1, 1, 1, 1, 1]) == 0.625"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     zero_count([0,1,0,1,0,1]) == 0.25, 'incorrect result'\nassert zero_count([0,0,1,1,0,1]) == 0.5, 'incorrect result'\nassert zero_count([0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0]) == 1.0, 'incorrect result'\nassert zero_count([0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0]) == 0.25, 'incorrect result'\nassert zero_count([0,1,0,1,0,1,1,0,1,0,1,0,0,0,0,0]) == 0.0, 'incorrect result'\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     zero_count([0, 1, 0, 3, 12]) == 1/3, 'wrong answer'\nassert zero_count([0, 1, 0, 3, 0]) == 1, 'wrong answer'\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint('check the correctness of zero_count')\nprint(zero_count([0, 1, 0, 1, 1, 0]))\nprint(zero_count([0, 0, 0, 0, 0, 0, 0]))\nprint(zero_count([0, 1, 1, 1, 0, 0, 0]))\nprint(zero_count([1, 1, 0, 1, 1, 0, 0]))\nprint(zero_count([0, 1, 1, 0, 1, 1, 0]))\nprint(zero_count([0, 0, 0, 1, 1, 0, 1]))\nprint(zero_count([0, 1, 1, 0, 1, 1, 0]))\nprint(zero_count([0, 0, 1, 1, 0, 1, 1]))\nprint(zero_count([0, 0, 1, 0, 1, 1, 1]))\n\nprint('Pass' if (0 == zero_count([0, 1, 0, 1, 1, 0])) else 'Fail')\nprint('Pass' if (1.0 == zero_count([0, 1, 0, 1, 1, 0])) else 'Fail')\nprint('Pass' if (1.0 == zero_count([0, 0, 0, 0, 0, 0, 0])) else 'Fail')\nprint('Pass' if (0.0 == zero_count([0, 1, 1, 1, 0, 0, 0])) else 'Fail')\nprint('Pass' if (0.0 == zero_count([0, 0, 1, 1, 0, 0, 0])) else 'Fail')\nprint('Pass' if (0.0 == zero_count([0, 1, 1, 1, 0, 1, 0])) else 'Fail')\nprint('Pass' if (0.0 == zero_count([1, 1, 0, 1, 1, 0, 0])) else 'Fail')\nprint('Pass' if (0.0 == zero_count([0, 0, 1, 1, 0, 1, 1])) else 'Fail')\nprint('Pass' if (0.0 == zero_count([0, 1, 1, 0, 1, 1, 1])) else 'Fail')\nprint('Pass' if (0.0 == zero_count([0, 1, 0, 1, 1, 0, 1])) else 'Fail')\nprint('Pass' if (0.0 == zero_count([0, 0, 1, 1, 1, 0, 1])) else 'Fail')\nprint('Pass' if (0.0 == zero_count([0, 1, 1, 0, 1, 1, 1])) else 'Fail')\nprint('Pass' if (0.0 == zero_count([0, 1, 0, 1, 1, 1, 1])) else 'Fail')\nprint('Pass' if (0.0 == zero_count([0, 0, 0, 0, 0, 1, 1])) else 'Fail')\nprint('Pass' if (0.0 == zero_count([0, 1, 1, 0, 1, 1, 1])) else 'Fail')\nprint('Pass' if (0.0 == zero_count([0, 0, 1, 1, 0, 1, 1])) else 'Fail')\nprint('Pass' if (0.0 == zero_count([0, 1, 1, 0, 1, 1, 1])) else 'Fail')\nprint('Pass' if (0.0 == zero_count([1, 1, 0, 1, 1, 1, 1])) else 'Fail')\n\nprint('pass' if (0 == zero_count([0, 1, 1, 1, 1, 1, 1])) else 'Fail')\nprint('Pass' if (1.0 == zero_count([0, 1, 1, 1, 1, 1, 1])) else 'Fail')\nprint('Pass' if (1.0 == zero_count([0, 0, 0, 0, 0, 0, 0])) else 'Fail')\nprint('Pass' if (0.0 == zero_count([0, 1, 1, 1, 1, 1, 1])) else 'Fail')\nprint('Pass' if (0.0 == zero_count([0, 0, 1, 1, 1, 1, 1])) else 'Fail')\nprint('Pass' if (0.0 == zero_count([0, 1, 1, 1, 1, 1, 1])) else 'Fail')\nprint('Pass' if (0.0 == zero_count([1, 1, 0, 1, 1, 1, 1])) else 'Fail')\nprint('Pass' if (0.0 == zero_count([0, 0, 1, 1, 1, 1, 1])) else 'Fail')\nprint('Pass' if (0.0 == zero_count([0, 1, 1, 1, 1, 1, 1])) else 'Fail')\nprint('Pass' if (0.0 == zero_count([0, 1, 1, 1, 1, 1, 1])) else 'Fail')\nprint('Pass' if (0.0 == zero_count([1, 1, 0, 1, 1, 1, 1])) else 'Fail')\nprint('Pass' if (0.0 == zero_count([0, 0, 1, 1, 1, 1, 1])) else 'Fail')\nprint('Pass' if (0.0 == zero_count([0, 1, 1, 1, 1, 1, 1])) else 'Fail')\nprint('Pass' if (0.0 == zero_count([0, 1, 1, 1, 1, 1, 1])) else 'Fail')\nprint('Pass' if (0.0 == zero_count([1, 1, 0, 1, 1, 1, 1])) else 'Fail')\nprint('Pass' if (0.0 == zero_count([0, 0, 1, 1, 1, 1, 1])) else 'Fail')\nprint('Pass' if (0.0 == zero_count([0, 1, 1, 1, 1, 1, 1])) else 'Fail')\nprint('Pass' if (0.0 == zero_count([0, 1, 1, 1, 1, 1, 1])) else 'Fail')\nprint('Pass' if (0.0 == zero_count([1, 1, 0, 1, 1, 1, 1])) else 'Fail')\nprint('Pass' if (0.0 == zero_count([0, 0, 1, 1, 1, 1, 1])) else 'Fail')\nprint('Pass' if (0.0 == zero_count([0, 1, 1, 1, 1, 1, 1])) else 'Fail')\nprint('Pass' if (0.0 == zero_count([0, 1, 1, 1, 1, 1, 1])) else 'Fail')\nprint('Pass' if (0.0 == zero_count([1, 1, 0, 1, 1, 1, 1])) else 'Fail')\nprint('Pass' if (0.0 == zero_count([0, 0, 1, 1, 1, 1, 1])) else 'Fail')\nprint('Pass' if (0.0 == zero_count([0, 1, 1, 1, 1, 1, 1])) else 'Fail')\nprint('Pass' if (0.0 == zero_count([0, 1, 1, 1, 1, 1, 1])) else 'Fail')\nprint('Pass' if (0.0 == zero_count([1, 1, 0, 1, 1, 1, 1])) else 'Fail')\nprint('Pass' if (0.0 == zero_count([0, 0, 1, 1, 1, 1, 1])) else 'Fail')\nprint('Pass' if (0.0 == zero_count([0, 1, 1, 1, 1, 1, 1])) else 'Fail')\nprint('Pass' if (0.0 == zero_count([0, 1, 1, 1, 1, 1, 1])) else 'Fail')\nprint('Pass' if (0.0 == zero_count([1, 1, 0, 1, 1, 1, 1])) else 'Fail')\nprint('Pass' if (0.0 == zero_count([0, 0, 1, 1, 1, 1, 1])) else 'Fail')\nprint('Pass' if (0.0 == zero_count([0, 1, 1, 1, 1, 1, 1])) else 'Fail')\nprint('Pass' if (0.0 == zero_count([0, 1, 1, 1, 1, 1, 1])) else 'Fail')\nprint('Pass' if (0.0 == zero_count([1, "
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nnums = array('i', [0,0,0,0,1,0])\nassert zero_count(nums) == 2 / 7\n\n\ndef zero_count2(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # use a hash table to record the counts\n    # time O(N) space O(N)\n    zeroes = 0\n    non_zeroes = 0\n    for i in nums:\n        if i == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    return zeroes / non_zeroes\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     zero_count([0, 0, 1])     ==     0.5,     'zero count of [0, 0, 1] is wrong'\nassert     zero_count([0, 0, 0])     ==     1.0,     'zero count of [0, 0, 0] is wrong'\nassert     zero_count([0, 1, 0])     ==     0.0,     'zero count of [0, 1, 0] is wrong'\nassert     zero_count([0, 1, 1])     ==     0.5,     'zero count of [0, 1, 1] is wrong'\nassert     zero_count([0, 0, 0, 0, 1])     ==     1.0,     'zero count of [0, 0, 0, 0, 1] is wrong'\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     zero_count([0,0,0,0,0,0,1,1,1,1]) == 1/4\nassert     zero_count([1,0,0,0,0,0,1,1,1,1]) == 0.5\nassert     zero_count([1,1,1,1,1,0,0,1,1,1]) == 1\nassert     zero_count([0,0,0,0,0,0,1,1,1,1]) == 0.75\nassert     zero_count([1,1,1,1,1,1,1,1,1,1]) == 1\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef zero_count2(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    return (zeroes, non_zeroes)\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(11)==True\nassert     is_Sum_Of_Powers_Of_Two(50)==True\nassert     is_Sum_Of_Powers_Of_Two(0)==True\nassert     is_Sum_Of_Powers_Of_Two(1)==False\nassert     is_Sum_Of_Powers_Of_Two(2)==True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(\"All passed\")"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(0) == True\nassert     is_Sum_Of_Powers_Of_Two(2) == True\nassert     is_Sum_Of_Powers_Of_Two(16) == True\nassert     is_Sum_Of_Powers_Of_Two(28) == False\nassert     is_Sum_Of_Powers_Of_Two(129) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     (is_Sum_Of_Powers_Of_Two(2) == True) \nassert     (is_Sum_Of_Powers_Of_Two(1) == True) \nassert     (is_Sum_Of_Powers_Of_Two(7) == False) \nassert     (is_Sum_Of_Powers_Of_Two(0) == True) \nassert     (is_Sum_Of_Powers_Of_Two(9) == False) \n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(0) == False\nassert     is_Sum_Of_Powers_Of_Two(1) == False\nassert     is_Sum_Of_Powers_Of_Two(3) == True\nassert     is_Sum_Of_Powers_Of_Two(5) == False\nassert     is_Sum_Of_Powers_Of_Two(7) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert not is_Sum_Of_Powers_Of_Two(0)\nassert is_Sum_Of_Powers_Of_Two(7)\nassert not is_Sum_Of_Powers_Of_Two(8)\nassert is_Sum_Of_Powers_Of_Two(9)\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(4) == False, \"Should return False\"\nassert is_Sum_Of_Powers_Of_Two(5) == True, \"Should return True\"\nassert is_Sum_Of_Powers_Of_Two(6) == True, \"Should return True\"\nassert is_Sum_Of_Powers_Of_Two(25) == False, \"Should return False\"\nassert is_Sum_Of_Powers_Of_Two(3) == False, \"Should return False\"\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert is_Sum_Of_Powers_Of_Two(12) == False\nassert is_Sum_Of_Powers_Of_Two(25) == True\nassert is_Sum_Of_Powers_Of_Two(5) == False\nassert is_Sum_Of_Powers_Of_Two(7) == True\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ncircle_circumference(1) == 2.31\ncircle_circumference(2) == 6.28\ncircle_circumference(3) == 11.42\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     circle_circumference(4) == 12.566370614359172\nassert     circle_circumference(1) == 4.71238898038469\nassert     circle_circumference(100) == 1215.932558139538\nprint('you got it!')\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     circle_circumference(5) == 15, \"Test case 1: failure\"\nassert     circle_circumference(10) == 28, \"Test case 1: failure\"\nassert     circle_circumference(1) == 3.14, \"Test case 1: failure\"\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     circle_circumference(3) == 12.566370614359172\nassert     circle_circumference(5) == 12.81366556420177"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     circle_circumference(3) == 18.83\nassert     circle_circumference(2) == 12.56\nassert     circle_circumference(3.5) == 11.34\n\ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    circumference = pi*r**2\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ncircle_circumference(4) == 28.27\nassert \ncircle_circumference(5) == 33.94\n\ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     circle_circumference(r=1) == 1.57079633\nassert     circle_circumference(r=2) == 2.508474576\nassert     circle_circumference(r=0.5) == 0.7853981633974483\nassert     circle_circumference(r=0) == 0\nassert     circle_circumference(r=-1) == 0\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_singly([[1, 2], [3], [4]]) == [1, 2, 3, 4], \"This testcase failed\"\nassert     extract_singly([[1], [2], [3]]) == [1, 2, 3], \"This testcase failed\"\nassert     extract_singly([[1, 2], [3, 4], [5, 6]]) == [1, 2, 3, 4, 5, 6], \"This testcase failed\"\nassert     extract_singly([[1, 2, 3], [4], [5, 6]]) == [1, 2, 3, 4, 5, 6], \"This testcase failed\"\nassert     extract_singly([[1, 2], [3, 4], [5]]) == [1, 2, 3, 4, 5], \"This testcase failed\"\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_singly([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == set([1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert     extract_singly([[1, 2, 3], [4], [5, 6, 7]]) == set([1, 2, 3, 4, 5, 6, 7])\nassert     extract_singly([]) == set([])\nassert     extract_singly([[]]) == set([])\nassert     extract_singly([[1], [2], [3], [4, 5, 6, 7, 8, 9]]) == set([1, 2, 3, 4, 5, 6, 7, 8, 9])\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_singly([[1,2], [3,4], [5,6,7], [8,9]]) == {1,2,3,4,5,6,7,8,9}\nassert extract_singly([[1,2], [3,4], [5,6,7], [8,9,10]]) == {1,2,3,4,5,6,7,8,9,10}"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_singly([[1,2,3],[4,5,6],[7,8,9]]) == set([1,2,3,4,5,6,7,8,9])\nassert extract_singly([[1,2,3,4,5,6,7,8,9]]) == set([1,2,3,4,5,6,7,8,9])\nassert extract_singly([1,2,3,4,5,6,7,8,9]) == set([1,2,3,4,5,6,7,8,9])\nassert extract_singly([[1,2,3,4,5,6,7,8,9]]) == set([1,2,3,4,5,6,7,8,9])\n\ndef extract_singly_2(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_singly([[],[[]]]) == []\nassert extract_singly([[[]]]) == []\nassert extract_singly([[[[]]]]) == []\n\nassert     extract_singly([[]]) == []\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_singly(['1', '2', '3', ['4', '5']]) == {1, 2, 3, 4, 5}\nassert     extract_singly(['1', '2', '3', ['4', '5'], '6', ['7', '8']]) == {1, 2, 3, 4, 5, 6, 7, 8}\nassert     extract_singly(['1', '2', '3', ['4', '5'], ['6', '7'], '8']) == {1, 2, 3, 4, 5, 6, 7, 8}\nassert     extract_singly([]) == set()\n\ndef extract_nested(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_singly([[1, 2], [3], [[4, 5], 6]]) == {1, 2, 3, 4, 5, 6}\nassert     extract_singly([[1, 2], 3, [[4, 5], 6]]) == {1, 2, 3, 4, 5, 6}\nassert     extract_singly([[1], 2, 3, [[4, 5], 6]]) == {1, 2, 3, 4, 5, 6}\nassert     extract_singly([[1, 2], [[3, 4], 5], 6]) == {1, 2, 3, 4, 5, 6}\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_singly([[1,2,3],[4,5,6],[7,8,9]]) == set([1,2,3,4,5,6,7,8,9])\nassert     extract_singly([[1,2,3,4,5,6,7,8,9,10]]) == set([1,2,3,4,5,6,7,8,9,10])\nassert     extract_singly([[1,2,3,4,5,6,7,8,9,10,11,12]]) == set([1,2,3,4,5,6,7,8,9,10,11,12])\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == '__main__':\n    pas"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_singly([[1, 2], [3, 4], [[1, 2], [4, 5]]]) == {1, 2, 3, 4, 5}\nassert     extract_singly([[1, 2], [3, 4], [[1, 2, 3], [[4, 5]]]]) == {1, 2, 3, 4, 5}\nassert     extract_singly([[1, 2], [3, 4], [[1, 2, 3], [[4, 5]]], [[[1, 2, 3]]]]) == {1, 2, 3, 4, 5}"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     pancake_sort([3,2,4,1]) == [1,2,3,4]\nassert     pancake_sort([3,2,4,1,5]) == [1,2,5,4,3]\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     pancake_sort([3,2,4,1]) == [1,2,3,4]\nassert pancake_sort([2,3,5,1]) == [1,2,3,5]\nassert pancake_sort([4,3,2,1]) == [1,2,3,4]\nassert pancake_sort([1,2,3]) == [1,2,3]\nassert pancake_sort([]) == []\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n'''\nYou are given an array of integers. Return an array that can be \nformed by concatenating the arrays in the order the integers \nshould be concatenated.\n\nThe returned array should be such that the integers are \nsorted in ascending order.\n\nIf there are multiple possible answers, you may return any one.\n'''\ndef concatenate_the_lists(arr):\n    '''\n    You are given an array of integers. Return an array that can be \n    formed by concatenating the arrays in the order the integers \n    should be concatenated.\n    \n    The returned array should be such that the integers are \n    sorted in ascending order.\n    \n    If there are multiple possible answers, you may return any one.\n    '''\n    pass\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nnums = [3,2,4,1]\npancake_sort(nums)\nassert nums == [1,2,3,4]"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     pancake_sort([3,2,4,1]) == [1,2,4,3]\nassert     pancake_sort([4,3,2,1]) == [1,2,3,4]\nassert     pancake_sort([]) == []\nassert     pancake_sort([4]) == []\n\n'''\n5. \ubb38\uc790\uc5f4 \uc555\ucd95 (Level 2)\n'''\ndef string_compression(string):\n    '''\n    Write a function that takes in a single string and returns its compressed string.\n    '''\n    pass\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nnums = [5,4,3,2,1]"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     pancake_sort([4,5,1,3,2]) == [1,2,3,4,5]\nassert     pancake_sort([4,5,3,1,2]) == [1,2,3,4,5]\nassert     pancake_sort([4,5,3,1,2,3,4,5,1,2,3]) == [1,1,2,2,3,3,3,4,4,5,5]\nassert     pancake_sort([4,5,3,1,2,3,4,5,1,2,3,4,5,1,2,3]) == [1,1,2,2,3,3,3,4,4,5,5,1,1,2,2,3,3,4,4,5,5]\nassert     pancake_sort([4,5,3,1,2,3,4,5,1,2,3,4,5,1,2,3]) == [1,1,2,2,3,3,3,4,4,5,5,1,1,2,2,3,3,4,4,5,5]\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_samepair(list1,list2,list3) == 3, print(\"\\033[1;31m\u2718  Test 2 Fail\\033[0m\")\nassert count_samepair(list4,list5,list6) == 4, print(\"\\033[1;31m\u2718  Test 3 Fail\\033[0m\")\nassert count_samepair(list7,list8,list9) == 0, print(\"\\033[1;31m\u2718  Test 4 Fail\\033[0m\")\nassert count_samepair(list10,list11,list12) == 0, print(\"\\033[1;31m\u2718  Test 5 Fail\\033[0m\")\nassert count_samepair(list13,list14,list15) == 0, print(\"\\033[1;31m\u2718  Test 6 Fail\\033[0m\")\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_samepair([1,1,2,2,2,3,3], [4,5,6,6,6,7,7], [8,9,10,10,10,11,11]) == 3\nassert     count_samepair([1,1,2,2,2,3,3], [4,5,6,6,6,7,7], [7,8,9,9,9,10,10]) == 0\nassert     count_samepair([1,1,2,2,2,3,3], [4,5,6,6,6,7,7], [7,8,9,10,10,11,11]) == 1\nassert     count_samepair([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == 2\nassert     count_samepair([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == 3\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_samepair(['a','a','a'],['a','b','c'],['a','a','a'])==2, 'incorrect'\nassert     count_samepair(['a','b','c'],['a','b','c'],['a','a','a'])==1, 'incorrect'\nassert     count_samepair(['a','b','c'],['a','b','c'],['b','a','a'])==2, 'incorrect'\nassert     count_samepair(['a','a','a'],['a','b','c'],['b','a','a'])==2, 'incorrect'\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    res = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if(list1[i]==list2[j] and list1[i]==list3[k]):\n                    res+=1\n    return res\n\nassert count_samepair([1,1,1,1],[1,2,3,4],[1,1,1,1]) == 4\nassert count_samepair([1,1,1,1],[1,2,3,4],[1,1,1,1]) == 3\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    pass\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_samepair([1,1,1],[1,1,1],[1,1,1]) == 3, 'test fail'\nassert     count_samepair([1,1,1],[1,1,1],[1,1,1]) == 0, 'test fail'\nassert     count_samepair([1,1,1],[1,2,1],[1,1,1]) == 2, 'test fail'\nassert     count_samepair([1,1,1],[1,2,1],[1,1,1]) == 2, 'test fail'\nassert     count_samepair([1,1,1],[1,1,1],[1,1,1]) == 1, 'test fail'\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_lists([]) == 0\nassert     find_lists((1,)) == 0\nassert     find_lists((1,1)) == 1\nassert     find_lists((1,2,1,1,2)) == 3\nassert     find_lists((1,2,3,2,2,2,2)) == 5\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_lists((1,2,3)) == 1, \"Should return 1\"\nassert     find_lists((1,2,3,4)) == 2, \"Should return 2\"\nassert     find_lists((3,4,5)) == 0, \"Should return 0\"\nassert     find_lists((4,5,6)) == 1, \"Should return 1\"\nassert     find_lists((3,5,7,8)) == 2, \"Should return 2\"\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_lists((3,4,5)) == 1, \"The correct number of lists is 1\"\nassert     find_lists((1,2,3)) == 3, \"The correct number of lists is 3\"\nassert     find_lists(()) == 0, \"The correct number of lists is 0\"\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_lists(([1, 2], 2, 3, 4)) == 1, 'find_lists should return 1'\nassert     find_lists(([1, 2], 2, 3, 4, 4, 4)) == 2, 'find_lists should return 2'\nassert     find_lists(([1, 2], 2, 3, 4, 4, 4)) == 0, 'find_lists should return 0'\nassert     find_lists(([1, 2], 2, 3, 4)) == 0, 'find_lists should return 0'\nassert     find_lists(([], 2, 3, 4)) == 0, 'find_lists should return 0'\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nassert find_lists(('', '')) == 0\nassert find_lists(('abc', '', '')) == 1\nassert find_lists(('abc', 'abc', '')) == 2\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_lists((1, 2, 3)) == 1\nassert     find_lists((1,)) == 1\nassert     find_lists(()) == 1\nassert     find_lists((\"a\", \"b\", \"c\")) == 1\nassert     find_lists((\"a\", \"b\", \"c\", \"d\")) == 2\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert (find_lists(((1, 3), (2, 3), (1, 2), (1, 1), (1, 2), (1, 2))) == 3) == True, \"Test failed\"\nassert (find_lists(((1, 3), (2, 3), (1, 2), (1, 1), (1, 2), (1, 2))) == 2) == True, \"Test failed\"\nassert (find_lists(((1, 3), (2, 3), (1, 2), (1, 1), (1, 2), (1, 2))) == 1) == True, \"Test failed\"\nassert (find_lists(((1, 2), (2, 3), (1, 2))) == 1) == True, \"Test failed\"\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    find_lists((2,3,4,5,6,7,8,8,9,9)) == 1\n    find_lists((2,3,4,5,6,7,8,8,9,10)) == 2\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_lists(())    == 0, \"No list\"\nassert     find_lists((\"a\",\"b\",\"c\"))    == 1, \"One list\"\nassert     find_lists((\"a\", \"b\", \"c\", \"a\", \"b\", \"a\"))    == 2, \"Multiple lists\"\nassert     find_lists((\"a\", \"a\", \"a\", \"a\"))    == 3, \"Only single list\"\n\n'''\nQuestion 2\nWrite a function to find numbers that are divisible by 2 and 3.\n'''\ndef find_divisible(Input): \n    '''\n    Write a function to find numbers that are divisible by 2 and 3.\n    '''\n    pass\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_lists(([1,2,3,4], \"a\", \"a\", \"a\", \"a\")) == 2\nassert     find_lists(([1,2,3,4], \"a\", \"a\", \"a\", \"a\", \"a\")) == 1\nassert     find_lists(([1,2,3,4], \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"b\")) == 0\nassert     find_lists(([], \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"b\")) == 5\nassert     find_lists(([1,2,3,4], \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"b\")) == 1\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_Abs_Diff([2,3,4]) == 2\nassert     max_Abs_Diff([-4,6,2]) == 6\nassert     max_Abs_Diff([-5,2,4,7,5]) == 4\nassert     max_Abs_Diff([-5,6,2]) == 5\nassert     max_Abs_Diff([-5,2,4]) == 4\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_Abs_Diff([-2, 1, 2, 4, 5, 9, 6, 7, 10]) == 11, \"Wrong answer\"\nassert max_Abs_Diff([-5, -1, -4, -9, -5, -7, -1, -3, -1, -5]) == -1, \"Wrong answer\"\nassert max_Abs_Diff([-10, -5, 1, 5, 10]) == 5, \"Wrong answer\"\nassert max_Abs_Diff([-10, -5, 1, 5, 10, -5]) == 5, \"Wrong answer\"\nassert max_Abs_Diff([-10, -5, 1, 5, 10, -5, -2, 1, 5]) == 5, \"Wrong answer\"\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef is_Valid_Paranthesis(str): \n    '''\n    Write a python function to check if the given string contains only the correct paranthesis.\n    '''\n    pass\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_Abs_Diff([-3, 5, 2, 9, 0, 5, 4, 1]) == 9, \"Wrong answer\"\nassert     max_Abs_Diff([-1, 4, -1, 10, -5, 4, -1, 2, -3]) == 7, \"Wrong answer\"\nassert     max_Abs_Diff([-1, -2, -1, -4, -5, 4, -1, -2, -3]) == 8, \"Wrong answer\"\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_Abs_Diff([-1, 5, 10, 20, -4, 4]) == 8, \"Wrong Output\"\nassert     max_Abs_Diff([1, 5, 10, 20, 4, -4]) == 16, \"Wrong Output\"\nassert     max_Abs_Diff([-100, -10, 0, 10]) == 100, \"Wrong Output\"\nassert     max_Abs_Diff([-10, -10, -100]) == 10, \"Wrong Output\"\nassert     max_Abs_Diff([]) == 0, \"Wrong Output\"\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_Abs_Diff([-3, -2, -1, 2, 4, 4, 4, -2, 5, -3, 4]) == 5, \\\n    \"Mistake in max_Abs_Diff\"\nassert     max_Abs_Diff([-3, -2, -1, 2, 4, 4, 4, -2, 5, -3, 4, 2]) == 6, \\\n    \"Mistake in max_Abs_Diff\"\nassert     max_Abs_Diff([-3, -2, -1, 2, 4, 4, 4, -2, 5, -3, 4, -2]) == 4, \\\n    \"Mistake in max_Abs_Diff\"\nassert     max_Abs_Diff([-3, -2, -1, 2, 4, 4, 4, -2, 5, -3, 4, 2, 2]) == 5, \\\n    \"Mistake in max_Abs_Diff\"\nassert     max_Abs_Diff([-3, -2, -1, 2, 4, 4, 4, -2, 5, -3, 4, -2, 2, 2]) == 6, \\\n    \"Mistake in max_Abs_Diff\"\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_Abs_Diff([-3, -2, 1, 2, -3]) == -2\nassert     max_Abs_Diff([-3, -2, 1, 2, -3]) == 2\nassert     max_Abs_Diff([-3, -2, 1, 2, -3]) == 3\nassert     max_Abs_Diff([-3, -2, 1, 2, -3]) == -1\nassert     max_Abs_Diff([-3, -2, 1, 2, -3]) == -2\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_solution(2, 1, 5) == (2, 1)\nassert     find_solution(3, 1, 5) == (3, 2)\nassert     find_solution(3, 2, 5) == None\nassert     find_solution(1, 1, 2) == None\nassert     find_solution(1, 2, 2) == (1, 2)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_solution(5, 4, 15) == (3, 4)\nassert     find_solution(2, 8, 5) == (1, 3)\nassert     find_solution(5, 8, 11) == (1, 3)\nassert     find_solution(2, 8, 10) == (1, 3)\nassert     find_solution(5, 8, 9) == (0, 0)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_solution(3, 2, 5) == (1, 2)\nassert     find_solution(4, 1, 7) == (1, 1)\nassert     find_solution(7, 3, -20) == (3, -5)\nassert     find_solution(4, 7, 3) == (1, -2)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_solution(2, 3, 6) == (1, 2)\nassert     find_solution(2, 3, 8) == (1, 2)\nassert     find_solution(2, 3, 9) == (1, 2)\nassert     find_solution(2, 3, 10) == (1, 2)\nassert     find_solution(2, 3, 11) == None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_solution(1,1,3) == (1,2)\nassert     find_solution(1,1,8) == (1,2)\nassert     find_solution(1,1,8) == (1,2)\nassert     find_solution(2,1,12) == (1,2)\nassert     find_solution(2,1,8) == (1,2)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_solution(2, 1, 4) == (1, 2)\nassert     find_solution(3, -1, -1) == (1, 2)\nassert     find_solution(1, 5, 3) == (2, 1)\nassert     find_solution(-3, -1, -1) == (1, 2)\nassert     find_solution(0, 0, -1) == (1, 2)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_solution(2, 2, 1) == (2, 1)\nassert     find_solution(2, 2, 0) == None\nassert     find_solution(2, 3, 1) == None\nassert     find_solution(3, 2, 1) == (2, 1)\nassert     find_solution(3, 2, 0) == None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_solution(a = 1, b = 2, n = 2) == (1, 2)\nassert     find_solution(a = -1, b = 2, n = 5) == None\nassert     find_solution(a = 1, b = -2, n = 3) == None\nassert     find_solution(a = 1, b = -1, n = 6) == (1, 2)\nassert     find_solution(a = 1, b = 1, n = 10) == (1, 2)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_solution(3,5,9) == (2,3)\nassert     find_solution(1,2,1) == (1,0)\nassert     find_solution(2,4,6) == (1,2)\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_elements([1,2,3],[1,2]) == None\nassert     remove_elements([1,2,3],[3]) == [1,2]\n\ndef remove_elements_wo_repetition(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list\n    without repetition.\n    '''\n    pass\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nremove_elements([1,2,3,4], [4]) == []\nremove_elements([1,2,3,4,5], [4,5]) == []\nremove_elements([1,2,3,4,5,6,7,8,9], [4,5,6,7,8,9]) == [1,2,3,5,6,7,8,9]\nremove_elements([1,2,3,4,5,6,7,8,9], [4,5,6,7,8,9,10]) == [1,2,3,5,6,7,8,9,10]\nremove_elements([1,2,3,4,5,6,7,8,9], [5,6,7,8,9,10]) == []\nremove_elements([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9,10]) == []\nremove_elements([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9,10,11,12]) == [2,3,4,5,6,7,8,9,10,11,12]\nremove_elements([1,2,3,4,5,6,7,8,9], [4,5,6,7,8,9,10]) == []\nremove_elements([1,2,3,4,5,6,7,8,9], [4,5,6,7,8,9,10,11,12]) == []\nremove_elements([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9,10,11,12]) == [2,3,4,5,6,7,8,9,10,11,12]\nremove_elements([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9,10,11,12,13]) == []\nremove_elements([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == []\nremove_elements([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == []\nremove_elements([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == []\nremove_elements([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == []\nremove_elements([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) == []\nremove_elements([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == []\nremove_elements([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == []\nremove_elements([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) == []\nremove_elements([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]) == []\nremove_elements([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]) == []\nremove_elements([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]) == []\nremove_elements([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == []\nremove_elements([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) == []\nremove_elements([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]) == []\nremove_elements([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]) == []\nremove_elements([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]) == []\nremove_elements([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]) == []\nremove_elements([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]) == []\nremove_elements([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]) == []\nremove_elements([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_elements([1,2,3,4,5,6], [2,4,6]) == [[1,2,3],[5,6]]\nassert     remove_elements([1,2,3,4,5,6], [4,6]) == [[1,2,3],[5,6]]\nassert     remove_elements([1,2,3,4,5,6], []) == [[1,2,3,4,5,6]]\nassert     remove_elements([], [1,2,3,4,5,6]) == [[]]\nassert     remove_elements([], []) == [[]]\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_elements([1,2,3,4], [3,4,5,6]) == None\nassert     remove_elements([1,2,3,4], []) == None\nassert     remove_elements([1,2,3,4], [4,5,6]) == None\nassert     remove_elements([], [1,2,3,4]) == None\nassert     remove_elements([], []) == None\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nremove_elements([2,1,2,2,3,4], [2,4]) == None\nassert \nremove_elements([1,1,2,2,3,4], [2,4]) == 1\nassert \nremove_elements([1,1,2,2,3,4], [3,4]) == 1"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_elements([1,2,3,4,5,6,7,8,9],[2,3,4,6,7]) ==  [1,4,5,6,7]\nassert     remove_elements([1,2,3,4,5,6,7,8,9],[2,3,7,8]) ==  [1,4,5,6,7,8]\nassert     remove_elements([1,2,3,4,5,6,7,8,9],[1,2,3,7,8,9]) ==  [4,5,6,7,8,9]\nassert     remove_elements([1,2,3,4,5,6,7,8,9],[1,4,5,6,7]) ==  [2,3,4,5,6,7,8,9]\nassert     remove_elements([1,2,3,4,5,6,7,8,9],[9]) ==  [1,2,3,4,5,6,7,8]\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_elements([1,2,2,2,2,2], [2]) == [[1],[2]]\nassert remove_elements([1,2,2,2,2,2,2], [3,2,2,2,2]) == [[1],[2],[3],[2],[2]]\nassert remove_elements([2,2,2], [2,2,2]) == [[],[]]\nassert remove_elements([1,2,2,2,2], [2,2,2,2]) == [[1],[2],[2]]\nassert remove_elements([1,2,2], [2,2,2,2]) == [[1],[2],[2]]\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_elements([1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9]) == None\nassert     remove_elements([1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9,3]) == [1,2,3,4,5,6,7,8,9]\nassert     remove_elements([1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9,3,4]) == None\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for e in list2:\n        if e in list1:\n            list1.remove(e)\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_elements([1,2,3], [1]) == [[1]]\nassert     remove_elements([1,2,3], [3,3,3]) == [[1,2]]\nassert     remove_elements([1,2,3], [1,3]) == [[1], [2]]\nassert     remove_elements([1,2,3,4], [2,3,4]) == [[1,2,4]]\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(sum_series(5))\n\nassert \nassert \nprint(sum_series(4))\n\nprint(\"test_sum_series works\")\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_series(1) == 1\nassert     sum_series(2) == 3\nassert     sum_series(3) == 6\nassert     sum_series(4) == 10\nassert     sum_series(5) == 15\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef test_sum_series():\n    '''\n    >>> test_sum_series()\n    0+2+4+6+8+10+12+14+16+18+20+22+24+26+28+30+32+34+36+38+40+42+44+46+48+50+52+54+56+58+60+62+64+66+68+70+72+74+76+78+80+82+84+86+88+90+92+94+96+98+100+102+104+106+108+110+112+114+116+118+120+122+124+126+128+130+132+134+136+138+140+142+144+146+148+150+152+154+156+158+160+162+164+166+168+170+172+174+176+178+180+182+184+186+188+190+192+194+196+198+200+202+204+206+208+210+212+214+216+218+220+222+224+226+228+230+232+234+236+238+240+242+244+246+248+250+252+254+256+258+260+262+264+266+268+270+272+274+276+278+280+282+284+286+288+290+292+294+296+298+300+302+304+306+308+310+312+314+316+318+320+322+324+326+328+330+332+334+336+338+340+342+344+346+348+350+352+354+356+358+360+362+364+366+368+370+372+374+376+378+380+382+384+386+388+390+392+394+396+398+400+402+404+406+408+410+412+414+416+418+420+422+424+426+428+430+432+434+436+438+440+442+444+446+448+450+452+454+456+458+460+462+464+466+468+470+472+474+476+478+480+482+484+486+488+490+492+494+496+498+500+502+504+506+508+510+512+514+516+518+520+522+524+526+528+530+532+534+536+538+540+542+544+546+548+550+552+554+556+558+560+562+564+566+568+570+572+574+576+578+580+582+584+586+588+590+592+594+596+598+600+602+604+606+608+610+612+614+616+618+620+622+624+626+628+630+632+634+636+638+640+642+644+646+648+650+652+654+656+658+660+662+664+666+668+670+672+674+676+678+680+682+684+686+688+690+692+694+696+698+700+702+704+706+708+710+712+714+716+718+720+722+724+726+728+730+732+734+736+738+740+742+744+746+748+750+752+754+756+758+760+762+764+766+768+770+772+774+776+778+780+782+784+786+788+790+792+794+796+798+800+802+804+806+808+810+812+814+816+818+820+822+824+826+828+830+832+834+836+838+840+842+844+846+848+850+852+854+856+858+860+862+864+866+868+870+872+874+876+878+880+882+884+886+888+890+892+894+896+898+900+902+904+906+908+910+912+914+916+918+920+922+924+926+928+930+932+934+936+938+940+942+944+946+948+950+952+954+956+958+960+962+964+966+968+970+972+974+976+978+980+982+984+986+988+990+992+994+996+998+1000+1002+1004+1006+1008+1010+1012+1014+1016+1018+1020+1022+1024+1026+1028+1030+1032+1034+1036+1038+1040+1042+1044+1046+1048+1050+1052+1054+1056+1058+1060+1062+1064+1066+1068+1070+1072+1074+1076+1078+1080+1082+1084+1086+1088+1090+1092+1094+1096+1098+1100+1102+1104+1106+1108+1110+1122+1123+1124+1125+1126+1127+1128+1130+1132+1134+1136+1138+1140+1142+1144+1146+1148+1150+1152+1154+1156+1158+1160+1162+1164+1166+1168+1170+1172+1174+1176+1178+1180+1182+1184+1186+1188+1190+1192+1194+1196+1198+1200+1202+1204+1206+1208+1210+1212+1214+1216+1218+1220+1222+1224+1226+1228+1230+1232+1234+1236+1238+1240+1242+1244+1246+1248+1250+1252+1254+1256+1258+1260+1262+1264+1266+1268+1270+1272+1274+1276+1278+1280+1282+1284+1286+1288+1290+1292+1294+1296+1298+1300+1302+1304+1306+1308+1310+1312+1314+1316+1318+1320+1322+1324+1326+1328+1330+1332+1334+1336+1338+1340+1342+1344+1346+1348+1350+1352+1354+1356+1358+1360+1362+1364+1366+1368+1370+1372+1374+1376+1378+1380+1382+1384+1386+1388+1390+1392+1394+1396+1398+1400+1402+1404+1406+1408+1410+1412+1414+1416+1418+1420+1422+1424+1426+1428+1430+1432+1434+1436+1438+1440+1442+1444+1446+1448+1450+1452+1454+1456+1458+1460+1462+1464+1466+1468+1470+1472+1474+1476+1478+1480+1482+1484+1486+1488+1490+1492+1494+1496+1498+1500+1502+1504+1506+1508+1510+1512+1514+1516+1518+1520+1522+1524+1526+1528+1530+1532+1534+1536+1538+1540+1542+1544+1546+1548+1550+1552+1554+1556+1558+1560+1562+1564+1566+1568+1570+1572+1574+1576+1578+1580"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nsum_series(4) == 10\nassert sum_series(5) == 14\nassert sum_series(6) == 18\n\ndef sum_series_recursion(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    This time use recursion.\n    '''\n    pass\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_series(10) == 55\nassert     sum_series(12) == 60\nassert     sum_series(15) == 69\nassert     sum_series(22) == 73\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_series(5) == 21\nassert     sum_series(6) == 22\nassert     sum_series(7) == 27\nassert     sum_series(8) == 36\nassert     sum_series(9) == 45\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef get_binary_num(n):\n    '''\n    Write a function to return the binary representation of the given number.\n    '''\n    pass\n\ndef get_binary_num2(n):\n    '''\n    Write a function to return the binary representation of the given number.\n    '''\n    pass\n\ndef test_get_binary_num():\n    assert get_binary_num(6) == \"1001\"\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     area_polygon(1, 0) == 0\nassert     area_polygon(2, 3) == 1\nassert     area_polygon(4, 5) == 1/2\nassert     area_polygon(3, 6) == 3*3/2\nassert     area_polygon(3, 1) == 0\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     area_polygon(4, 1) == 4 * tan(pi/4)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     area_polygon(3, 2) == 3.750000000000002\nassert     area_polygon(3, 4) == 2.562500000000001\nassert     area_polygon(10, 5) == 63.937500000000006\nassert     area_polygon(10, 10) == 156.25\nassert     area_polygon(10, 100) == 114.0625\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     area_polygon(4, 3) == 5.5\n\ndef area_triangle(a, b, c):\n    '''\n    Write a function to calculate the area of a triangle given the length of its three sides.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     area_polygon(4, 6) == 12.5, \"Wrong answer\"\nassert     area_polygon(2, 2) == 4, \"Wrong answer\"\nassert     area_polygon(5, 9) == 78.5, \"Wrong answer\"\nassert     area_polygon(6, 3) == 12, \"Wrong answer\"\n\ndef circumference_polygon(s, l):\n    '''\n    Write a function to calculate the circumference of a regular polygon given the length and number of its sides.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nimport math\ndef area_triangle(s, l):\n    '''\n    Write a function to calculate the area of a triangle given the length of its sides.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef area_square(l):\n    '''\n    Write a function to calculate the area of a square given the length.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     area_polygon(4, 2) == 4.25, \"Wrong area_polygon\"\nassert     area_polygon(2, 3) == 0.75, \"Wrong area_polygon\"\nassert     area_polygon(3, 4) == 0.5, \"Wrong area_polygon\"\nassert     area_polygon(5, 6) == 0.5, \"Wrong area_polygon\"\nassert     area_polygon(6, 5) == 0.5, \"Wrong area_polygon\"\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert div_sum(20) == True, 'incorrect result'\nassert div_sum(3) == True, 'incorrect result'\nassert div_sum(3) == False, 'incorrect result'\nassert div_sum(2) == False, 'incorrect result'\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     div_sum(1) == False\nassert     div_sum(2) == False\nassert     div_sum(3) == False\nassert     div_sum(4) == False\nassert     div_sum(5) == False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert div_sum(4) == True, \"Wrong\"\nassert div_sum(12) == True, \"Wrong\"\nassert div_sum(18) == False, \"Wrong\"\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef div_sum2(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    The sum of the divisors of a number is the sum of those numbers that divide evenly into the number. \n    For example, the sum of the divisors of 28 would be 1 + 2 + 4 + 7 + 14 = 28.\n    '''\n    pass\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert div_sum(1) == False\nassert div_sum(2) == False\nassert div_sum(5) == True\nassert div_sum(6) == True\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     div_sum(0) is False, \"div_sum(0) must be False\"\nassert     div_sum(1) is False, \"div_sum(1) must be False\"\nassert     div_sum(3) is False, \"div_sum(3) must be False\"\nassert     div_sum(6) is True, \"div_sum(6) must be True\"\nassert     div_sum(12) is True, \"div_sum(12) must be True\"\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(div_sum(13)) # False\nprint(div_sum(100)) # True\nprint(div_sum(6)) # True\nprint(div_sum(7)) # False\n\n\n\ndef div_sum2(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    pass\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef div_sum_by_2(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    pass\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_char_position('Tact Coa') == 3\nassert     count_char_position('Python') == 4\nassert     count_char_position('abcdefghijklmnopqrstuvwxyz') == 26\nassert     count_char_position('Tact Coa') == 3\nassert     count_char_position('tac') == 3\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_char_position('abcd') == 0, 'Should be 0'\nassert     count_char_position('aabc') == 1, 'Should be 1'\nassert     count_char_position('abcdabc') == 3, 'Should be 3'\nassert     count_char_position('abc') == 3, 'Should be 3'\nassert     count_char_position('aab') == 1, 'Should be 1'\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef count_word_position(str1):\n    '''\n    Write a function to count the number of words in a string that occur at the same position in the string.\n    '''\n    pass\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    pass\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_char_position('the') == 2, 'Should return 2'\nassert     count_char_position('The') == 2, 'Should return 2'\nassert     count_char_position('the') == 2, 'Should return 2'\nassert     count_char_position('The') == 2, 'Should return 2'\nassert     count_char_position('the') == 3, 'Should return 3'\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_char_position(\"abc\") == 0, 'count_char_position(\"abc\") is incorrect'\nassert     count_char_position(\"ABC\") == 1, 'count_char_position(\"ABC\") is incorrect'\nassert     count_char_position(\"ABCAA\") == 1, 'count_char_position(\"ABCAA\") is incorrect'\nassert     count_char_position(\"abcdef\") == 1, 'count_char_position(\"abcdef\") is incorrect'\nassert     count_char_position(\"abcABCABC\") == 2, 'count_char_position(\"abcABCABC\") is incorrect'\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_char_position('abcdefghijklmnopqrstuvwxyz') == 26, \\\n\"WRONG\"\nassert     count_char_position('abacaba') == 3, \\\n\"WRONG\"\nassert     count_char_position('aa1aa') == 4, \\\n\"WRONG\"\nassert     count_char_position('aa1aa1aa') == 5, \\\n\"WRONG\"\nassert     count_char_position('aa1A1aa') == 4, \\\n\"WRONG\"\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    count_char_position('aAa') == 1\n    count_char_position('aaaaa') == 4\n    count_char_position('aaB') == 2\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    pass\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_even_pair([1,2,4,5,6]) == 2\nassert     find_even_pair([1,1,1,2,1,2,2,2]) == 2\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nfind_even_pair([10, 2, 2, 3, 8, 5, 3, 7, 6, 4, 6, 7, 4, 3, 1, 2, 3, 8, 5, 6, 8, 2, 3]) == 2\nprint('Successfully passed the test')\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_even_pair([2,3,1,5,2,3,4,6]) == 3     # (xor = 6, 4 pairs)\nassert     find_even_pair([2,3,4,6]) == 3     # (xor = 6, 2 pairs)\nassert     find_even_pair([4,1,4,3]) == 1     # (xor = 4, 1 pair)\nassert     find_even_pair([4,5,4,3]) == 0     # (xor = 0, no pairs)\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nA = list(range(10))\nfind_even_pair(A) == 0\nA = [-2, -1, 0, 1, 2]\nfind_even_pair(A) == 2\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nA = (1, 2, 4, 8, 16)\nfind_even_pair(A)\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    find_even_pair([1, 4, 6, 2, 3]) == 2\n    find_even_pair([1, 4, 6, 2, 3, 5, 6, 2]) == 1\n    find_even_pair([1, 4, 6, 2, 5]) == 0\n    find_even_pair([1, 4, 5, 2, 3]) == 0\n    find_even_pair([]) == 0\n\ndef find_even_pair2(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pass\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_even_pair(\n            [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 2\nassert     find_even_pair(\n            [-1,2,-3,4,-5,6,7,8,-9,10,-11,12,-13,14,15,16,17,18,19,20]) == 5\nassert     find_even_pair(\n            [-1,-2,3,4,-5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 1\nassert     find_even_pair(\n            [-1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,1]) == 1\nassert     find_even_pair(\n            [-1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,7]) == 4\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     next_power_of_2(1) == 2, \"The output is not correct.\"\nassert     next_power_of_2(2) == 2, \"The output is not correct.\"\nassert     next_power_of_2(3) == 2, \"The output is not correct.\"\nassert     next_power_of_2(4) == 4, \"The output is not correct.\"\nassert     next_power_of_2(8) == 2, \"The output is not correct.\"\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     next_power_of_2(1) == 1\nassert     next_power_of_2(2) == 1\nassert     next_power_of_2(7) == 2\nassert     next_power_of_2(15) == 2\nassert     next_power_of_2(33) == 2\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     next_power_of_2(1) == 1\nassert     next_power_of_2(3) == 2\nassert     next_power_of_2(7) == 8\nassert     next_power_of_2(15) == 16\nassert     next_power_of_2(23) == 32\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(\"Pass\" if  (next_power_of_2(16) == 8) else \"Fail\")\nprint(\"Pass\" if  (next_power_of_2(4) == 2) else \"Fail\")\nprint(\"Pass\" if  (next_power_of_2(1) == 1) else \"Fail\")\nprint(\"Pass\" if  (next_power_of_2(10) == 4) else \"Fail\")\nprint(\"Pass\" if  (next_power_of_2(11) == 4) else \"Fail\")\nprint(\"Pass\" if  (next_power_of_2(15) == 8) else \"Fail\")\nprint(\"Pass\" if  (next_power_of_2(100) == 8) else \"Fail\")\nprint(\"Pass\" if  (next_power_of_2(99) == 8) else \"Fail\")\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nnext_power_of_2(16) == 64\nnext_power_of_2(12) == 64\nnext_power_of_2(0) == 1\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     next_power_of_2(2) == 2\nassert     next_power_of_2(4) == 2\nassert     next_power_of_2(8) == 2\nassert     next_power_of_2(9) == 3\nassert     next_power_of_2(16) == 4\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef next_power_of_2(n): \n    if n == 1:\n        return 1\n    while True:\n        n = 2**(n)\n        if n >= n:\n            return n\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint(next_power_of_2(4)) # Next power of 2 that is greater or equal to 4 is 8\nassert next_power_of_2(8) == 16\nassert next_power_of_2(14) == 16\nassert next_power_of_2(48) == 64\nassert next_power_of_2(64) == 64\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     next_power_of_2(0) == 1\nassert     next_power_of_2(1) == 1\nassert     next_power_of_2(2) == 2\nassert     next_power_of_2(3) == 2\nassert     next_power_of_2(4) == 4\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     frequency([1, 1, 1, 1, 1], 1) == 5\nassert     frequency([1, 1, 1, 1, 1], 2) == 4\nassert     frequency([1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2], 2) == 5\n\ndef find_max_frequency(a): \n    '''\n    Write a function to find the index of the maximum frequency in a given list of integers.\n    '''\n    pass\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     frequency([1,1,1,1,2,2,2,3,3,3],1) == 5\nassert     frequency([1,1,1,1,2,2,2,3,3,3],2) == 5\nassert     frequency([1,1,1,1,2,2,2,3,3,3],3) == 4\nassert     frequency([1,1,1,1,2,2,2,3,3,3],5) == 2\nassert     frequency([1,1,1,1,2,2,2,3,3,3],4) == 1\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     frequency([1,2,3,4,5,2,3,4,4,4],4) == 3\nassert     frequency([1,2,3,4,5,6,7,7,7,7],7) == 2\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     frequency([1,2,3,4,5,1,1,3],1) == 3\nassert     frequency([1,2,3,4,5,1,1,3],3) == 2\nassert     frequency([1,2,3,4,5,1,1,3],0) == 0\nassert     frequency([1,2,3,4,5,1,1,3],4) == 1\nassert     frequency([1,2,3,4,5,1,1,3],5) == 0\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     frequency([1,2,3,4,5,6], 1) == 3\nassert     frequency([1,2,3,4,5,6], 2) == 2\nassert     frequency([1,2,3,4,5,6], 3) == 1\nassert     frequency([1,2,3,4,5,6], 7) == 0\nassert     frequency([1,2,3,4,5,6], 8) == 0\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_range_list([1,2,3,4], 2, 4) == 5, \"Should return 5\"\nassert     sum_range_list([1,2,3,4], 0, 2) == 1, \"Should return 1\"\nassert     sum_range_list([1,2,3,4], 0, 5) == 6, \"Should return 6\"\nassert     sum_range_list([1,2,3,4], -2, -1) == 1, \"Should return 1\"\nassert     sum_range_list([1,2,3,4], -2, -4) == 0, \"Should return 0\"\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_range_list([1, 2, 3, 4, 5], 1, 4) == 1 + 3 + 5\nassert     sum_range_list([1, 2, 3, 4, 5], 1, 2) == 3 + 5\nassert     sum_range_list([1, 2, 3, 4, 5], 2, 4) == 1 + 3 + 5\nassert     sum_range_list([1, 2, 3, 4, 5], 5, 6) == 1 + 3 + 5\nassert     sum_range_list([1, 2, 3, 4, 5], 3, 7) == 1 + 2 + 3 + 4 + 5\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_range_list([1, 2, 3], 2, 4) == 10, \"wrong answer\"\nassert     sum_range_list([2, 4, 6], 1, 3) == 8, \"wrong answer\"\nassert     sum_range_list([1, 2, 3, 4, 5], 0, 5) == 15, \"wrong answer\"\n\nprint(\"All tests passed.\")"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_range_list([1, 2, 3, 4, 5], 1, 4) == 9, \"error 1\"\nassert     sum_range_list([1, 2, 3, 4, 5], -1, 4) == 15, \"error 2\"\nassert     sum_range_list([1, 2, 3, 4, 5], 2, 4) == 11, \"error 3\"\nassert     sum_range_list([1, 2, 3, 4, 5], -2, 4) == 1, \"error 4\"\nassert     sum_range_list([1, 2, 3, 4, 5], -5, 4) == 1, \"error 5\"\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_range_list([1, 2, 3, 4], 2, 2) == 8 \nassert     sum_range_list([1, 2, 3, 4], 1, 3) == 10 \nassert     sum_range_list([1, 2, 3, 4], 1, -1) == 10 \nassert     sum_range_list([1, 2, 3, 4], 1, 0) == 0 \nassert     sum_range_list([1, 2, 3, 4], 3, 3) == 8\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_range_list([1,2,3], 0, 2) == 3, \"Should return sum of the list from index 0 to index 2 = [1, 2, 3] = 3\"\nassert     sum_range_list([1,2,3], 1, 2) == 6, \"Should return sum of the list from index 1 to index 2 = [1, 2, 3] = 6\"\nassert     sum_range_list([1,2,3], 0, 3) == 6, \"Should return sum of the list from index 0 to index 3 = [1, 2, 3] = 6\"\nassert     sum_range_list([1,2,3], 2, 4) == 9, \"Should return sum of the list from index 2 to index 4 = [1, 2, 3] = 9\"\nassert     sum_range_list([1,2,3], 1, 3) == 6, \"Should return sum of the list from index 1 to index 3 = [1, 2, 3] = 6\"\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_range_list([1, 2, 3], 0, 2) == 6\nassert     sum_range_list([1, 2, 3], 2, 3) == 6\nassert     sum_range_list([1, 2, 3], -1, -1) == 0\nassert     sum_range_list([1, 2, 3], 0, 3) == 6"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     perimeter_pentagon(2) == 5.0\nassert     perimeter_pentagon(3) == 7.0\nassert     perimeter_pentagon(4) == 10.0\nassert     perimeter_pentagon(5) == 12.0\nassert     perimeter_pentagon(6) == 14.0\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     perimeter_pentagon(1) == 5, \\\n        \"perimeter_pentagon(1) has to be 5\"\n\nassert     perimeter_pentagon(3) == 10, \\\n        \"perimeter_pentagon(3) has to be 10\"\n\nassert     perimeter_pentagon(4) == 15, \\\n        \"perimeter_pentagon(4) has to be 15\"\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     perimeter_pentagon(5) == 30, \"perimeter_pentagon is not correct\"\nassert     perimeter_pentagon(6) == 42, \"perimeter_pentagon is not correct\"\nassert     perimeter_pentagon(7) == 56, \"perimeter_pentagon is not correct\"\nassert     perimeter_pentagon(8) == 72, \"perimeter_pentagon is not correct\"\nassert     perimeter_pentagon(9) == 90, \"perimeter_pentagon is not correct\"\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    pass\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     perimeter_pentagon(5) == 20\nassert     perimeter_pentagon(4) == 16\nassert     perimeter_pentagon(6) == 14\nassert     perimeter_pentagon(10) == 40\nassert     perimeter_pentagon(11) == 60\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef perimeter_triangle(a,b):\n    '''\n    Write a function to find the perimeter of a regular triangle from its sides lengths.\n    '''\n    pass\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     (perimeter_pentagon(1) == 5), \"Wrong result\"\nassert     (perimeter_pentagon(2) == 10), \"Wrong result\"\nassert     (perimeter_pentagon(3) == 15), \"Wrong result\"\nassert     (perimeter_pentagon(4) == 20), \"Wrong result\"\nassert     (perimeter_pentagon(5) == 25), \"Wrong result\"\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    \ndef find_area_rectangle(a, b):\n    '''\n    Write a function to find the area of a rectangle from its length and width.\n    '''\n    pass\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef area_of_triangle(b,h):\n    '''\n    Write a function that takes the height and base of a triangle and\n    calculates the area of the triangle.\n    '''\n    pass\n\ndef area_of_rectangle(b,h):\n    '''\n    Write a function that takes the length and width of a rectangle and\n    calculates the area of the rectangle.\n    '''\n    pass\n\ndef area_of_square(s):\n    '''\n    Write a function that takes a square's side length and\n    calculates its area.\n    '''\n    pass\n\ndef square_perimeter(s):\n    '''\n    Write a function that takes a square's side length and\n    calculates its perimeter.\n    '''\n    pass\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_occurance('the quick brown fox jumps over the lazy dog') == 2, count_occurance('the quick brown fox jumps over the lazy dog')\nassert count_occurance('the quick brown fox jumps over the lazy dog') == 2, count_occurance('the quick brown fox jumps over the lazy dog')\nassert count_occurance('the quick brown fox jumps over the lazy dog') == 1, count_occurance('the quick brown fox jumps over the lazy dog')\nassert count_occurance('quick brown fox jumps over the lazy dog') == 1, count_occurance('quick brown fox jumps over the lazy dog')\nassert count_occurance('    the quick brown fox jumps over the lazy dog    ') == 2, count_occurance('    the quick brown fox jumps over the lazy dog    ')\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_occurance('1244424') == 4\nassert     count_occurance('wdf') == 1\nassert     count_occurance('hello') == 0\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_occurance('std') == 2, 'Error: Your code returns wrong result. The correct result should be 2.'\nassert     count_occurance('abc') == 0, 'Error: Your code returns wrong result. The correct result should be 0.'\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_occurance('I went to school for fun and learning how to code.') == 2\nassert     count_occurance('I went to school and coded.') == 1\nassert     count_occurance('I went to school and coded.') == 1\nassert     count_occurance('I went to school and coded.') == 1\nassert     count_occurance('I went to school and coded.') == 1\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_occurance('student') == 1, 'incorrect input'\nassert     count_occurance('studentstudent') == 2, 'incorrect input'\nassert     count_occurance('sdsdsdstudent') == 2, 'incorrect input'\nassert     count_occurance('dsdsdstudent') == 2, 'incorrect input'\nassert     count_occurance('dsdstudent') == 0, 'incorrect input'\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_occurance('') == 0, \"Empty string\"\nassert count_occurance('std') == 1, \"single occurence\"\nassert count_occurance('stdstd') == 2, \"multiple occurence\"\nassert count_occurance('stdstdstd') == 0, \"no occurence\"\nassert count_occurance('sdstdstdfdsd') == 3, \"multiple occurence\"\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_occurance('ABCDEFG') == 2, 'Should be 2'\nassert     count_occurance('abcdeFG') == 2, 'Should be 2'\nassert     count_occurance('abc') == 0, 'Should be 0'\nassert     count_occurance('abcde') == 1, 'Should be 1'\nassert     count_occurance('abcdeFGabc') == 2, 'Should be 2'\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_occurance(\"\") == 0\nassert     count_occurance(\"std\") == 1\nassert     count_occurance(\"std\") == 1\nassert     count_occurance(\"asdas\") == 0\nassert     count_occurance(\"asdasdasdas\") == 4\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ncount_occurance(\"the string std\") == 2\ncount_occurance(\"the string std\") == 2\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_occurance(\"stdstdstdstdsdsdsdstd\") == 3\nassert     count_occurance(\"stdstd\") == 2\nassert     count_occurance(\"\") == 0\n\n\n\ndef check_leap_year(year):\n    '''\n    Write a function to check if the given year is leap year or not.\n    '''\n    pass\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_type((1, 2, 3, 4, 5)) == True, 'Wrong output'\nassert     check_type((1, 'hello', 3, 4, 'hello')) == False, 'Wrong output'\nassert     check_type(('hello', 'hi', '!', 'hi', 'you')) == True, 'Wrong output'"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_type((1, 2.1, \"2\", True)) == True, \"The list should have only numbers\"\nassert     check_type((1, 2, \"2\", \"2\")) == False, \"The list should contain only numbers\"\nassert     check_type((1, 2, 2, 2, 2)) == False, \"The list should contain only numbers\"\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_type(('a', 1, True)) == True, 'Wrong tuple'\nassert     check_type((1, 'a', True)) == False, 'Wrong tuple'\nassert     check_type((1, 'a', 'b')) == False, 'Wrong tuple'\nassert     check_type((1, 1.0, 1)) == False, 'Wrong tuple'\nassert     check_type((1, 'a', 1.0)) == False, 'Wrong tuple'\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_type((1,2,3)) == True, 'Type of elements are not same'\nassert     check_type((1,2.0,3)) == False, 'Type of elements are not same'\nassert     check_type((1,'a',3)) == False, 'Type of elements are not same'\nassert     check_type(('a','b',3)) == False, 'Type of elements are not same'\nassert     check_type([1,2,3]) == False, 'Type of elements are not same'\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_type((1,1.1,1,1.1,1,1)) == True, \"Error : Test Tuple has 2 values of different data types.\"\nassert check_type((1,2,3)) == False, \"Error : Test Tuple has 3 values of different data types.\"\nassert check_type((1,1.1,1,1.1,1.1)) == True, \"Error : Test Tuple has 3 values of same data type.\"\nassert check_type((1,1,1,1.1,1,1.1)) == False, \"Error : Test Tuple has 6 values of same data type.\"\nassert check_type((1,1,1,1,1,1)) == True, \"Error : Test Tuple has 5 values of same data type.\"\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_type(('a', 1, 3.4, 'a', True, 3)) == True, 'The first element should be a string'\nassert     check_type(('a', 'b', 3.4, 'a', True, 3)) == False, 'The string should be unique'\nassert     check_type(('a', 1, 3.4, 'a', True, 3)) == False, 'The tuple should be of same length'\nassert     check_type(('a', 1, 3.4, True, 3)) == False, 'The list should be of same length'\nassert     check_type(('a', 1, 3.4, 'a', True, 'b', 3)) == False, 'The string should be unique'\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_type((1,2,3,\"hello\") ) == True\nassert     check_type((\"hello\",\"world\",\"cat\")) == True\nassert     check_type((1,2,3,\"hello\",\"cat\")) == True\nassert     check_type((1,\"hello\",\"world\",\"cat\")) == False\nassert     check_type((1,2,3,\"hello\",\"cat\",\"world\")) == False\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    check_type((1, 2, 3, 4)) == True, \"All values should be of same data type\"\n    check_type((1.0, 2.0, 3.0, 4.0)) == True, \"All values should be of same data type\"\n    check_type((1, 2, \"ab\", 4)) == False, \"All values should be of same data type\"\n    check_type((1, 2, 4)) == False, \"All values should be of same data type\"\n    check_type((1, 2)) == False, \"All values should be of same data type\"\n    check_type((1,)) == False, \"All values should be of same data type\"\n    check_type((1, \"ab\")) == False, \"All values should be of same data type\"\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_type((1, 2, 3)) == True, \"Expected True, got False\"\nassert     check_type((1, 2, 3.0)) == True, \"Expected True, got False\"\nassert     check_type((1.0, 2, 3.0)) == True, \"Expected True, got False\"\nassert     check_type((True, False, False)) == True, \"Expected True, got False\"\nassert     check_type((True, False, False, True)) == True, \"Expected True, got False\"\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_type(('a', 'a', 'a', 'a')) == False\nassert     check_type(('a', 1.5, 1.0, 1.0)) == True\n\ndef check_type_with_int(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    pass\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef find_majority(arr, n):\n    '''\n    Write a function that takes in a sorted array, its length (n), and returns the majority element in the given array.\n    '''\n    \n    # the general idea is to maintain 2 pointers at the left and right of the array\n    # one pointer moves left, while the other pointer moves right\n    # if the current element is same as the candidate element, then increment both pointers\n    # if both pointers reach the end of the array, then return the candidate element\n    pass\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert is_majority([], 8, 7)\nassert not is_majority([7], 8, 7)\nassert is_majority([1,2,3,4,5,6,7,7,8,8,9,9,10,11,11], 16, 9)\nassert not is_majority([1,2,3,4,5,6,7,7,8,8,9,9,10,11,11], 15, 9)\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_majority([1,2,3,1,4,5,6], 4, 1) == False, 'incorrect'\nassert     is_majority([1,2,3,1,4,5,6], 7, 1) == True, 'incorrect'\nassert     is_majority([1,2,3,1,4,5,6], 5, 3) == False, 'incorrect'\nassert     is_majority([1,2,3,1,4,5,6], 4, 4) == False, 'incorrect'\nassert     is_majority([1,2,3,1,4,5,6], 7, 5) == True, 'incorrect'\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert is_majority([2, 3, 5, 3, 5], 7, 5) == True, 'test #1'\nassert is_majority([1, 1, 1, 3, 3, 3], 6, 3) == False, 'test #2'\nassert is_majority([1, 2, 3, 4, 5, 6], 6, 3) == True, 'test #3'\nassert is_majority([1, 2, 3, 4, 5, 6], 5, 3) == False, 'test #4'\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert not is_majority([1,2,3,4,5,5,5], 8, 5)\nassert is_majority([1,2,2,2,3,3,3,4,5,5,5,5,5], 8, 5)\n\n'''\n\nSo now let's practice that one-pass algorithm with a buffer\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert not is_majority([1,2,3,4], 4, 3), True\nassert not is_majority([1,2,3,4], 4, 1), True\nassert not is_majority([1,2,3,4], 4, 2), True\nassert is_majority([1,2,3,4], 4, 3), True\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_majority([1, 1, 3, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6], 10, 3) == True\nassert     is_majority([1, 1, 3, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6], 10, 6) == True\nassert     is_majority([1, 1, 3, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6], 10, 4) == False\n\ndef is_majority_2(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        count += 1\n        if count >= n/2:\n            if i == x:\n                return True\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert is_majority([1, 2, 3], 3, 3) == True\nassert is_majority([1, 1, 1, 2, 2, 3], 5, 2) == True\nassert is_majority([1, 1, 1, 2, 2, 2, 2, 3, 3], 6, 3) == False\nassert is_majority([1, 1, 2, 2, 2, 2, 3], 3, 2) == False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_Set_Bits(1) == 0\nassert     count_Set_Bits(11) == 1\nassert     count_Set_Bits(111) == 2\nassert     count_Set_Bits(1111) == 3\nassert     count_Set_Bits(11111) == 4\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert count_Set_Bits(3) == 0\nassert count_Set_Bits(12) == 1\nassert count_Set_Bits(15) == 2\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_Set_Bits(5) == 0\nassert     count_Set_Bits(6) == 1\nassert     count_Set_Bits(10) == 2\nassert     count_Set_Bits(12) == 2\nassert     count_Set_Bits(35) == 2\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef mergeSort(arr):\n    '''\n    Write a python function to sort an array in ascending order of numbers\n    using merge sort algorithm.\n    '''\n    pass\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_Set_Bits(31) == 4, '31 = 010011'\nassert     count_Set_Bits(0) == 0, '0 = 0000'\nassert     count_Set_Bits(18) == 1, '18 = 00010'\nassert     count_Set_Bits(1) == 1, '1 = 00000001'\nassert     count_Set_Bits(31) == 4, '31 = 010011'\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n'''\nGiven a number and a number k, write a function that returns the least k numbers greater than or equal to the number.\n'''"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_Set_Bits(1) == 0\nassert     count_Set_Bits(2) == 0\nassert     count_Set_Bits(10) == 1\nassert     count_Set_Bits(12) == 2\nassert     count_Set_Bits(13) == 1\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_Set_Bits(11) == 6\nassert     count_Set_Bits(4) == 1\nassert     count_Set_Bits(2147483648) == 10\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     odd_values_string('abcdabcdabcd') == 'acddcddbc'\nassert odd_values_string('abcdeabcde') == 'cdeabcde'\nassert odd_values_string('abcde') == 'cde'\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     odd_values_string(\"Pythone\") == \"TrY\"\nassert odd_values_string(\"pythoN\") == \"ythoN\"\nassert odd_values_string(\"pythoN\") == \"ythoN\"\n\ndef odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    pass\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     odd_values_string('abcdefghi') == 'abcdefghi'\nassert     odd_values_string('abcdefghi') == 'abcdeeghi'\nassert     odd_values_string('abcdefghi') == 'abcefghi'\nassert     odd_values_string('abcdefghi') == 'abcefgh'\nassert     odd_values_string('abcdefghi') == 'abcefgh'\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     odd_values_string('h3hi') == 'hi'\nassert odd_values_string('h3hi') == 'h3hi'\nassert odd_values_string('h3hi') == 'h3hi'\nassert odd_values_string('h3hi') == 'hi'\n\n'''\nWrite a python function to find the nth odd number in a given string.\n'''\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     odd_values_string('hello world') == 'hello w'\nassert     odd_values_string('!@#$%^&*()_+1234567890') == '!@#$%^&*()'\nassert     odd_values_string('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyz'\n\ndef odd_values_string2(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    pass\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert odd_values_string('CAAABCDBA') == 'A'\nassert odd_values_string('CAAABCDBB') == 'C'\nassert odd_values_string('CCAABBAABBAA') == 'BB'\nassert odd_values_string('CCAABBAABBAA') == 'BB'\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     odd_values_string(\"abcde\") == \"bcde\"\nassert     odd_values_string(\"qwertzuiopasdfghjklzxcvbnm\") == \"qwertzuiopasdfghjklzxcvbnm\"\nassert     odd_values_string(\"python\") == \"\"\nassert     odd_values_string(\"aabbccdd\") == \"abcd\"\nassert     odd_values_string(\"abc\") == \"abc\"\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     odd_values_string(\"geeksforgeeks\") == \"geek\"\nassert odd_values_string(\"abcdz\") == \"abcd\"\nassert odd_values_string(\"abcde\") == \"abc\"\nassert odd_values_string(\"1234567890\") == \"\"\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_values_string(\"mom\") == \"m\"\nodd_value"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     min_of_three(2, 3, 5) == 2\nassert     min_of_three(3, 1, 5) == 1\nassert     min_of_three(2, 3, 5) == 2\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert min_of_three(3,5,7) == 3\nassert min_of_three(-1,-2,-3) == -3\nassert min_of_three(1,2,3) == 1\nassert min_of_three(-9,1,-3) == -3\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     min_of_three(1, 2, 3) == 1\nassert     min_of_three(-4, -1, 2) == -1\nassert     min_of_three(1, 2, 3) == 1\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     min_of_three(3, 4, 5) == 3 \nassert     min_of_three(-4, 5, 6) == -4 \nassert     min_of_three(7, -4, 5) == 5 \nassert     min_of_three(-6, -1, -5) == -1\nassert     min_of_three(4, 5, 6) == 4\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     min_of_three(1,2,3) == 1, \"a)\"\nassert     min_of_three(1,2,2) == 2, \"b)\"\nassert     min_of_three(1,1,1) == 1, \"c)\"\n\n\n\ndef max_of_three(a,b,c):\n    '''\n    Write a function to find maximum of three numbers.\n    '''\n    pass\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     min_of_three(1,2,3) == 1\nassert     min_of_three(2,1,3) == 1\nassert     min_of_three(3,2,1) == 1\nassert     min_of_three(100, 100, 100) == 100\nassert     min_of_three(1,100,100) == 100\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     min_of_three(100,200,300) == 100\nassert     min_of_three(1,2,3) == 1\nassert     min_of_three(10,10,10) == 10\nassert     min_of_three(100,101,200) == 100\nassert     min_of_three(100,200,301) == 200\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(n=5,l=3,r=7) == False\nassert all_Bits_Set_In_The_Given_Range(n=5,l=3,r=7) == False\nassert all_Bits_Set_In_The_Given_Range(n=5,l=2,r=4) == True\nassert all_Bits_Set_In_The_Given_Range(n=5,l=2,r=4) == True\nassert all_Bits_Set_In_The_Given_Range(n=5,l=2,r=4) == True\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(10,0,10) == True\nassert     all_Bits_Set_In_The_Given_Range(9,0,10) == False\nassert     all_Bits_Set_In_The_Given_Range(0,0,10) == False\nassert     all_Bits_Set_In_The_Given_Range(0,0,9) == True\nassert     all_Bits_Set_In_The_Given_Range(10,0,11) == False\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert all_Bits_Set_In_The_Given_Range(11,11,11) == True\nassert all_Bits_Set_In_The_Given_Range(11,1,11) == False\nassert all_Bits_Set_In_The_Given_Range(5,10,15) == True\nassert all_Bits_Set_In_The_Given_Range(10,1,15) == False\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(0,1,2) == False, \"Wrong result\"\nassert     all_Bits_Set_In_The_Given_Range(1,4,5) == True, \"Wrong result\"\nassert     all_Bits_Set_In_The_Given_Range(4,9,10) == True, \"Wrong result\"\nassert     all_Bits_Set_In_The_Given_Range(0,1,2) == False, \"Wrong result\"\nassert     all_Bits_Set_In_The_Given_Range(1,4,5) == True, \"Wrong result\"\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(1, 1, 1) == True,'return True'\nassert     all_Bits_Set_In_The_Given_Range(1, 1, 0) == False,'return False'\nassert     all_Bits_Set_In_The_Given_Range(1, 1, 2) == False,'return False'\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(n=3,l=1,r=6) == True\nassert all_Bits_Set_In_The_Given_Range(n=3,l=1,r=7) == False\nassert all_Bits_Set_In_The_Given_Range(n=4,l=2,r=3) == False\n\nprint(\"all_Bits_Set_In_The_Given_Range test case passed\")\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(5,0,4)     == True, \"Test 1 Failed\"\nassert     all_Bits_Set_In_The_Given_Range(5,5,4)     == True, \"Test 2 Failed\"\nassert     all_Bits_Set_In_The_Given_Range(5,3,4)     == False, \"Test 3 Failed\"\nassert     all_Bits_Set_In_The_Given_Range(5,2,4)     == False, \"Test 4 Failed\"\nassert     all_Bits_Set_In_The_Given_Range(5,5,5)     == True, \"Test 5 Failed\"\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(4,1,3) == False, \"Should be False\"\nassert     all_Bits_Set_In_The_Given_Range(6,2,5) == False, \"Should be False\"\nassert     all_Bits_Set_In_The_Given_Range(16,1,16) == True, \"Should be True\"\nassert     all_Bits_Set_In_The_Given_Range(12,1,12) == False, \"Should be False\""
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(4,0,3) == True\nassert     all_Bits_Set_In_The_Given_Range(5,0,5) == False\nassert     all_Bits_Set_In_The_Given_Range(1,0,1) == True"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nall_Bits_Set_In_The_Given_Range(6,3,5) == True\nassert \nall_Bits_Set_In_The_Given_Range(8,3,7) == False\nassert \nall_Bits_Set_In_The_Given_Range(5,3,5) == True\nassert \nall_Bits_Set_In_The_Given_Range(9,3,7) == False\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    re_arrange_array([-4, 5, -6, -2, 3, 5, -6, -1, -4, -1], 6) == [-4, -6, -2, 3, 5, 5, 5, 1, 4, 1]\n    re_arrange_array([-4, 5, -6, -2, 3, 5, -6, -1, -4, -1], 8) == [-4, -6, -2, 3, 5, -6, -1, -4, -1, 3, 5]\n    re_arrange_array([-4, 5, -6, -2, 3, 5, -6, -1, -4, -1], 2) == [-4, -6, -2, 3, 5, -6, -1, -4, -1]\n    re_arrange_array([-4, 5, -6, -2, 3, 5, -6, -1, -4, -1], 0) == [-4, -6, -2, 3, 5, -6, -1, -4, -1]\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     re_arrange_array([1, 3, -1, -2, -4, 2], 6) == [1, 2, -1, -2, -4, 3, -1]\nassert     re_arrange_array([1, -2, 3, 4, -5, -6, 7], 4) == [-2, 1, -3, 4, -5, 6, -7]\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     re_arrange_array([1, 2, 3, 4, 5, 6], 3) == [1, 2, 3, -4, -5, 6]\nassert     re_arrange_array([1, 2, 3, 4, 5, 6, 7], 3) == [1, 2, 3, -4, -5, 6, 7]\nassert     re_arrange_array([1, 2, 3, 4, 5, 6, 7, 8], 3) == [1, 2, 3, -4, -5, 6, 7, 8]\nassert     re_arrange_array([1, -2, 3, 4, 5, -6, 7, 8], 3) == [1, -2, 3, -4, -5, 6, 7, 8]\nassert     re_arrange_array([1, -2, 3, 4, 5, -6, 7, 8, 9], 3) == [1, -2, 3, -4, -5, -6, 7, 8, 9]\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     re_arrange_array([-1, 2, -3, 4, -5], 3) == [-5, 4, -3, 2, -1]\nassert     re_arrange_array([1, 2, 3, -4, -5], 3) == [-5, 1, 2, -4, 3]\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     re_arrange_array([2, 4, 3, -1, -3, -5], 2) == [-1, 4, -5, 2, 3, -3]\nassert     re_arrange_array([1, 4, 2, 0, -3, -2], 4) == [-2, 4, 0, 1, -3, -2]\nassert     re_arrange_array([2, 0, -1, -2, -3, 4], 2) == [-3, 2, 4, -2, -1, 0]\nassert     re_arrange_array([2, 0, -3, 4, -1, 1], 2) == [4, 1, -3, 2, -1, 0]\nassert     re_arrange_array([2, 1, -3, -4, 4], 2) == [-3, 4, 2, 1, -4]\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef sort_array(arr):\n    '''\n    Write a function that takes in an array and sorts it in place (i.e., without making a copy). Use the bubble sort algorithm.\n    '''\n    pass\n\n\ndef sort_array_inplace(arr):\n    '''\n    Write a function that takes in an array and sorts it in place (i.e., without making a copy). Use the bubble sort algorithm.\n    '''\n    pass\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nre_arrange_array([2,3,5,1], 3) == [-1,2,3,5,1]\nassert \nre_arrange_array([-3,-5,-8,0,-6,8,3,-3,2,4], 8) == [-3,-8,-5,-2,-6,0,3,2,4,3]\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint('Success') if (re_arrange_array([-3, 1, -5, -4, 0, -2], 3) == [-5, -3, -4, 0, -2, 1]) else print('Error')\n\ndef re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # print(arr)\n    negative = 0\n    pos = 0\n    start = 0\n    for i in range(len(arr)):\n        if arr[i] >= 0:\n            if negative > 0:\n                arr[start] = arr[i]\n                start += 1\n            else:\n                negative += 1\n        else:\n            if positive > 0:\n                arr[start] = arr[i]\n                start += 1\n            else:\n                positive += 1\n    # print(arr)\n    return arr\n\nprint('Success') if (re_arrange_array([-3, 1, -5, -4, 0, -2], 3) == [-5, -3, -4, 0, -2, 1]) else print('Error')\n\ndef re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # print(arr)\n    negative = 0\n    pos = 0\n    start = 0\n    for i in range(len(arr)):\n        if arr[i] >= 0:\n            if negative > 0:\n                arr[start] = arr[i]\n                start += 1\n            else:\n                negative += 1\n        else:\n            if positive > 0:\n                arr[start] = arr[i]\n                start += 1\n            else:\n                positive += 1\n    # print(arr)\n    return arr\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nreplace_blank('    ', '*')\n\n'''\nYour replace_blank function will now work with whitespace as well.\n\nWrite a function replace_whitespace that takes in a string and character, replaces all occurrences of character with whitespace, and returns the string.\n'''\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     replace_blank(\"ab d ef g\",'_') == \"ab_d_e_f_g\"\nassert replace_blank(\"ab d ef g\",' ') == \"ab d ef g\"\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     replace_blank('        ',' ')==\" \", \"ERROR: check replace_blank\"\nassert     replace_blank('we are glad to see you!','-')==\"we-are-gud-to-see-you-!\", \"ERROR: check replace_blank\"\nassert     replace_blank('we are glad to see you!','.')==\"we-are-gud-to-see-you-.\", \"ERROR: check replace_blank\"\nassert     replace_blank('we are glad to see you!','-.')==\"we-are-gud-to-see-you-.\", \"ERROR: check replace_blank\"\nassert     replace_blank('we are glad to see you!','!')==\"we-are-gud-to-see-you-!\", \"ERROR: check replace_blank\"\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     replace_blank(\"\", \"x\") == \"\"\nassert     replace_blank(\"\", \"\") == \"\"\nassert     replace_blank(\"\", \" \") == \" \"\nassert     replace_blank(\"\", \"xx\") == \"xx\"\nassert     replace_blank(\"abc\", \"\") == \"\"\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     replace_blank(\"\",' ')    == '', \"Your function does not replace blank spaces in the string correctly\"\nassert     replace_blank(\"  \",' ')    =='', \"Your function does not replace blank spaces in the string correctly\"\nassert     replace_blank(\"hello\",' ')    == \"hello\", \"Your function does not replace blank spaces in the string correctly\"\n\n'''\nQuestion 2:\nWrite a function that returns the string that is the concatenation of all characters in the given string.\n'''\ndef concatenate_string(str1):\n    '''\n    Write a function that returns the string that is the concatenation of all characters in the given string.\n    '''\n    pass\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     replace_blank('','a') == 'a', 'Failed'\nassert     replace_blank('a','b') == 'a', 'Failed'\nassert     replace_blank('b','a') == 'b', 'Failed'\nassert     replace_blank('','') == '', 'Failed'\nassert     replace_blank(' ','') == '', 'Failed'\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     replace_blank(\"\") == \"\", \"Input is blank\"\nassert     replace_blank(\" \") == \" \", \"Input is whitespace\"\nassert     replace_blank(\"abcd\",'a') == 'abcd', \"Replace blank with 'a'\"\nassert     replace_blank(\"abcd\",\" \") == \"abcd\", \"Replace whitespace with''\"\nassert     replace_blank(\"abcd\",\"c\") == \"bcd\", \"Replace character 'c'\"\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     replace_blank(\"\",'a')     == \"\"\nassert     replace_blank(\"a\",'a')     == \"a\"\nassert     replace_blank(\"\",'b')     == \"b\"\nassert     replace_blank(\"a\",'b')     == \"b\"\nassert     replace_blank(\"a b\",' ')    == \"a b\"\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     replace_blank('', '') == ''\nassert     replace_blank('', 'x') == 'x'\nassert     replace_blank('xx', 'x') == 'xx'\nassert     replace_blank('xx', 'z') == 'zz'\n\n'''\nWrite a function that takes in a string and a substring, and counts the number of times the substring appears in the string.\n'''\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     larg_nnum([1,2,3,4,5],3) == [5,4,3]\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return     sorted(list1,reverse=True)[:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     larg_nnum([2,4,6,8,10,12,14,16,18,20],5) ==[16,20,18,12,14]\nassert     larg_nnum([1,8,5,4,8,7,3,2,10,6],5) ==[8,10,6,8,7]\nassert     larg_nnum([3,2,1],2) ==[3,2]\nassert     larg_nnum([1,2,3,4,5],2) ==[4,5]\nassert     larg_nnum([0,4,2,6,8,10,9,1],3) ==[10,9,8]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef avg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns the average of the n numbers in the list.\n    '''\n    pass\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     larg_nnum([],1) == []\nassert     larg_nnum([1],1) == [1]\nassert     larg_nnum([1,2],1) == [2]\nassert     larg_nnum([1,2,3],1) == [3]\nassert     larg_nnum([1,2,3,4],2) == [4,3]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if len(list1) == 0:\n        return []\n    if len(list1) <= n:\n        return list1\n\n    return heapq.nlargest(n,list1)"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nlarg_nnum([2,1,5,3,4],2) == [5,4]\nassert larg_nnum([2,1,5,3,4],1) == [5]\nassert larg_nnum([2,1,5,3,4],3) == [5,4,3]\nassert larg_nnum([1,2,3,4,5],1) == [1]\nassert larg_nnum([1,2,3,4,5],2) == [1,2]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef larg_nprm(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    pass\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     larg_nnum([5,2,6,8,3],2)==[6,8]\nassert     larg_nnum([5,2,6,8,3],1)==[5,6,8]\nassert     larg_nnum([5,2,6,8,3],0)==[5,6,8]\nassert     larg_nnum([5,2,6,8,3],10)==[8]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     larg_nnum([7,9,11,12,13,3,11,21],4) == [13,11,3,7]\nassert     larg_nnum([7,9,11,12,13,3,11,21],5) == [13,11,3,7,11]\nassert     larg_nnum([7,9,11,12,13,3,11,21],3) == [13,11,3]\nassert     larg_nnum([7,9,11,12,13,3,11,21],2) == [13,11]\nassert     larg_nnum([7,9,11,12,13,3,11,21],1) == [11,21]\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     lateralsuface_cylinder(1,1)==4\nassert     lateralsuface_cylinder(2,3)==12\nassert     lateralsuface_cylinder(3,1)==12\nassert     lateralsuface_cylinder(4,3)==24\nassert     lateralsuface_cylinder(5,4)==48\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     lateralsuface_cylinder(3,5)==51\nassert     lateralsuface_cylinder(5,4)==70\nassert     lateralsuface_cylinder(4,5)==70\nassert     lateralsuface_cylinder(4,6)==100\nassert     lateralsuface_cylinder(6,5)==100\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef lateral_surf_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     lateralsuface_cylinder(1,5) == 90, 'Wrong answer :('\nassert     lateralsuface_cylinder(2,4) == 102, 'Wrong answer :('\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     lateralsuface_cylinder(5,4) == 16\nassert     lateralsuface_cylinder(3,5) == 9\nassert     lateralsuface_cylinder(8,4) == 32\nassert     lateralsuface_cylinder(5,2) == 8\nassert     lateralsuface_cylinder(1,2) == 1\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     lateralsuface_cylinder(1.0, 1.0) == 4.0\nassert     lateralsuface_cylinder(1.0, 2.0) == 8.0\nassert     lateralsuface_cylinder(2.0, 1.0) == 4.0\nassert     lateralsuface_cylinder(2.0, 2.0) == 16.0\nassert     lateralsuface_cylinder(3.0, 1.0) == 12.0\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     volume_cube(5) == 50\nassert     volume_cube(0) == 0\nassert     volume_cube(1) == 1\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     volume_cube(1) == 1\nassert     volume_cube(2) == 2\nassert     volume_cube(3) == 6\nassert     volume_cube(4) == 24\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef volume_cuboid(l, w, h):\n    '''\n    Write a function to find the volume of a cuboid given its length, width and height.\n    '''\n    pass\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     volume_cube(2) == 8, \"incorrect output\"\nassert     volume_cube(3) == 27, \"incorrect output\"\nassert     volume_cube(10) == 1000, \"incorrect output\"\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     volume_cube(3) == 27\nassert     volume_cube(5) == 125\nassert     volume_cube(6) == 216\nassert     volume_cube(9) == 729\nassert     volume_cube(8) == 512\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     volume_cube(2) == 8\nassert     volume_cube(1) == 1\nassert     volume_cube(0) == 0\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \neven_bit_set_number(5) == 8\nassert even_bit_set_number(6) == 10\nassert even_bit_set_number(10) == 12\nassert even_bit_set_number(9) == 12\nassert even_bit_set_number(5) == 8\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \neven_bit_set_number(15) == 0b10100\neven_bit_set_number(6) == 0b10010\neven_bit_set_number(3) == 0b11\neven_bit_set_number(17) == 0b011100\n\nprint(\"All tests passed\")\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(\"Pass\" if (even_bit_set_number(0) == 0) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(1) == 0) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(8) == 0) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(16) == 0) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(32) == 1) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(64) == 1) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(128) == 2) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(256) == 2) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(512) == 3) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(1024) == 3) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(2048) == 4) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(4096) == 4) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(8192) == 5) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(16384) == 5) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(32768) == 6) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(65536) == 6) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(131072) == 7) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(262144) == 7) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(524288) == 7) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(1048576) == 8) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(2097152) == 8) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(4194304) == 8) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(8388608) == 8) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(16777216) == 9) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(33554432) == 9) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(67108864) == 10) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(134217728) == 10) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(268435456) == 11) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(5242880) == 11) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(1048576) == 12) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(2097152) == 12) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(4194304) == 13) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(8388608) == 13) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(16777216) == 14) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(33554432) == 14) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(67108864) == 15) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(134217728) == 15) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(268435456) == 16) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(5242880) == 16) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(1048576) == 17) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(2097152) == 17) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(4194304) == 18) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(8388608) == 18) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(16777216) == 19) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(33554432) == 19) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(67108864) == 20) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(134217728) == 20) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(268435456) == 21) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(5242880) == 21) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(1048576) == 22) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(2097152) == 22) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(4194304) == 23) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(8388608) == 23) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(16777216) == 24) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(33554432) == 24) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(67108864) == 25) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(134217728) == 25) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(268435456) == 26) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(5242880) == 26) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(1048576) == 27) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(2097152) == 27) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(4194304) == 28) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(8388608) == 28) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(16777216) == 29) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(33554432) == 29) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(67108864) == 30) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(134217728) == 30) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(268435456) == 31) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(5242880) == 31) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(1048576) == 32) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(2097152) == 32) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(4194304) == 33) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(8388608) == 33) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(16777216) == 34) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(33554432) == 34) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(67108864) == 35) else \"Fail\")\nprint(\"Pass\" if (even_bit_set_number(1"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     even_bit_set_number(8) == 0, 'Test 1: Failed'\nassert     even_bit_set_number(12) == 1, 'Test 2: Failed'\nassert     even_bit_set_number(15) == 1, 'Test 3: Failed'\nassert     even_bit_set_number(0) == 1, 'Test 4: Failed'\nassert     even_bit_set_number(1) == 1, 'Test 5: Failed'\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \neven_bit_set_number(12) == 16\neven_bit_set_number(125) == 128\neven_bit_set_number(1024) == 2048\neven_bit_set_number(1025) == 16\neven_bit_set_number(2) == 4\neven_bit_set_number(3) == 2\neven_bit_set_number(6) == 6\neven_bit_set_number(13) == 8\neven_bit_set_number(26) == 16\neven_bit_set_number(36) == 32\neven_bit_set_number(43) == 8\neven_bit_set_number(48) == 16\neven_bit_set_number(53) == 32\neven_bit_set_number(57) == 16\neven_bit_set_number(64) == 32\neven_bit_set_number(81) == 32\neven_bit_set_number(98) == 32\neven_bit_set_number(125) == 32\neven_bit_set_number(1724) == 256\neven_bit_set_number(2974) == 64\neven_bit_set_number(2468) == 256\neven_bit_set_number(3452) == 128\neven_bit_set_number(4859) == 256\neven_bit_set_number(5670) == 256\neven_bit_set_number(6712) == 256\neven_bit_set_number(7666) == 256\neven_bit_set_number(8586) == 256\neven_bit_set_number(10228) == 256\neven_bit_set_number(12810) == 256\neven_bit_set_number(14385) == 256\neven_bit_set_number(16278) == 256\neven_bit_set_number(18055) == 256\neven_bit_set_number(20494) == 256\neven_bit_set_number(22385) == 256\neven_bit_set_number(24249) == 256\neven_bit_set_number(26133) == 256\neven_bit_set_number(27477) == 256\neven_bit_set_number(28916) == 256\neven_bit_set_number(30976) == 256\neven_bit_set_number(32969) == 256\neven_bit_set_number(33500) == 256\neven_bit_set_number(34349) == 256\neven_bit_set_number(35250) == 256\neven_bit_set_number(35952) == 256\neven_bit_set_number(36470) == 256\neven_bit_set_number(37470) == 256\neven_bit_set_number(38529) == 256\neven_bit_set_number(39513) == 256\neven_bit_set_number(40566) == 256\neven_bit_set_number(41891) == 256\neven_bit_set_number(43076) == 256\neven_bit_set_number(45153) == 256\neven_bit_set_number(46780) == 256\neven_bit_set_number(48663) == 256\neven_bit_set_number(49662) == 256\neven_bit_set_number(50600) == 256\neven_bit_set_number(51571) == 256\neven_bit_set_number(52591) == 256\neven_bit_set_number(53580) == 256\neven_bit_set_number(54568) == 256\neven_bit_set_number(56537) == 256\neven_bit_set_number(58510) == 256\neven_bit_set_number(59510) == 256\neven_bit_set_number(60627) == 256\neven_bit_set_number(61603) == 256\neven_bit_set_number(62210) == 256\neven_bit_set_number(62611) == 256\neven_bit_set_number(63316) == 256\neven_bit_set_number(63714) == 256\neven_bit_set_number(64110) == 256\neven_bit_set_number(64459) == 256\neven_bit_set_number(64789) == 256\neven_bit_set_number(65112) == 256\neven_bit_set_number(65470) == 256\neven_bit_set_number(65884) == 256\neven_bit_set_number(66332) == 256\neven_bit_set_number(66804) == 256\neven_bit_set_number(67246) == 256\neven_bit_set_number(67808) == 256\neven_bit_set_number(68370) == 256\neven_bit_set_number(68896) == 256\neven_bit_set_number(69510) == 256\neven_bit_set_number(69980) == 256\neven_bit_set_number(70472) == 256\neven_bit_set_number(70968) == 256\neven_bit_set_number(71187) == 256\neven_bit_set_number(71711) == 256\neven_bit_set_number(72290) == 256\neven_bit_set_number(72877) == 256\neven_bit_set_number(73713) == 256\neven_bit_set_number(74667) == 256\neven_bit_set_number(75586) == 256\neven_bit_set_number(76495) == 256\neven_bit_set_number(77449) == 256\neven_bit_set_number(77887) == 256\neven_bit_set_number(78504) == 256\neven_bit_set_number(79446) == 256\neven_bit_set_number(80094) == 256\neven_bit_set_number(80167) == 256\neven_bit_set_number(80355) == 256\neven_bit_set_number(80629) == 256\neven_bit_set_number(80801) == 256\neven_bit_set_number(80869) == 256\neven_bit_set_number(80937) == 256\neven_bit_set_number(81114) == 256\neven_bit_set_number(81290) == 256\neven_bit_set_number(81387) == 256\neven_bit_set_number(81681) == 256\neven_bit_set_number(81948) == 256\neven_bit_set_number(82617) == 256\neven_bit_set_number(82961) == 256\neven_bit_set_number(83688) == 256\neven_bit_set_number(84167) == 256\neven_bit_set_number(84483) == 256\neven_bit_set_number(84774) == 256\neven_bit_set_number(84981) == 256\neven_bit_set_number(85224) == 256\neven_bit_set_number(85482) == 256\neven_bit_set_number(85998) == 256\neven_bit_set_number(86551) == 256\neven_bit_set_number(86905) == 256\neven_bit_set_number(87129) == 256\neven_bit_set_number(87278) == 256\neven_bit_set_number(87359) == 256\neven_bit_set_number(87427) == 256\neven_bit_set_number(87575) == 256\neven_bit_set_number(87758) == 256\neven_bit_set_number(87947) == 256\neven_bit_set_number(88112) == 256\neven_bit_set_number(88265) == 256\neven_bit_set_number(88447) == 256\neven_bit_set_number(88640) == 256\neven_bit_set_number(88722) == 256\neven_bit_set_number(88863) == 256\neven_bit_set_number(89352) == 256\neven_bit_set_number(89789) == 256\neven_bit_set_number(89806) == 256\neven_bit_set_number(90040) == 256\neven_bit_set_number(90098) == 256\neven_bit_set_number(90169) == 256\neven_bit_set_number(90281) == 256\neven_bit_set_number(90"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & 0x55555555\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \neven_bit_set_number(0) == 0\neven_bit_set_number(1) == 0\neven_bit_set_number(8) == 8\neven_bit_set_number(9) == 10\neven_bit_set_number(10) == 10\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \neven_bit_set_number(10) == 16\neven_bit_set_number(100) == 16\neven_bit_set_number(18) == 32\neven_bit_set_number(0) == 0\neven_bit_set_number(2) == 4\neven_bit_set_number(7) == 10\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if (n & 0x01) == 0: \n        return n | 0x80\n    else: \n        return n & 0x7F\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_occurences([('A', 1), ('B', 1), ('C', 1), ('A', 2), ('B', 2), ('C', 1)]) == {('A', 1): 2, ('B', 2): 1, ('C', 1): 2}\nassert     check_occurences([('A', 1), ('A', 2), ('B', 1), ('B', 2), ('C', 1)]) == {('A', 1): 2, ('A', 2): 1, ('B', 1): 2, ('B', 2): 1, ('C', 1): 1}\nassert     check_occurences([('A', 1), ('A', 2), ('A', 3), ('B', 1), ('B', 2), ('C', 1)]) == {('A', 1): 3, ('A', 2): 2, ('A', 3): 1, ('B', 1): 2, ('B', 2): 1, ('C', 1): 1}\nassert     check_occurences([('A', 1), ('A', 2), ('A', 3), ('B', 1), ('B', 2), ('C', 1)]) == {('A', 1): 3, ('A', 2): 2, ('A', 3): 1, ('B', 1): 2, ('B', 2): 1, ('C', 1): 1}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef test_check_occurences():\n    assert check_occurences([('a', 2), ('a', 1), ('b', 4), ('b', 1), ('a', 2), ('a', 1), ('b', 4), ('b', 1)]) == {('a',2):2, ('b',4):2,('a',1):1}\n    assert check_occurences([('a', 2), ('b', 2), ('b', 2), ('b', 1), ('b', 1), ('b', 1), ('a', 2), ('b', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('b', 1), ('a', 1), ('a', 1), ('a', 1)]) == {('a', 2):6, ('b', 2):4, ('b', 1):3}\n    assert check_occurences([('a', 2), ('b', 2), ('b', 1), ('b', 1), ('a', 2), ('b', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('b', 1), ('a', 1), ('a', 1), ('a', 1)]) == {('a', 2):10, ('b', 2):6, ('b', 1):5}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_occurences([(1,2),(3,1),(2,3),(1,2),(2,4),(2,2),(1,2)]) == {(1, 2): 2, (3, 1): 1, (2, 3): 1, (2, 4): 1}\nassert     check_occurences([(1,2),(1,2),(2,3),(1,2),(2,4),(2,2),(1,2)]) == {(1, 2): 3, (1, 2): 2, (2, 3): 1, (2, 4): 1}\nassert     check_occurences([(1,2),(3,1),(2,3),(1,2),(2,4),(2,2),(1,2)]) == {(1, 2): 2, (3, 1): 1, (2, 3): 1, (2, 4): 1}\nassert     check_occurences([(1,2),(3,1),(2,3),(1,2),(2,4),(2,2),(1,2)]) == {(1, 2): 2, (3, 1): 1, (2, 3): 1, (2, 4): 1}\nassert     check_occurences([(1,2),(3,1),(2,3),(1,2),(2,4),(2,2),(1,2)]) == {(1, 2): 2, (3, 1): 1, (2, 3): 1, (2, 4): 1}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_occurences([(1,2), (3,2), (2,4), (3,5), (1,3)]) == {(1,3):2, (3,2):2, (2,4):1, (3,5):1}\nassert     check_occurences([(1,2), (1,2), (1,2), (1,2), (1,2), (1,2)]) == {(1,2):5}\nassert     check_occurences
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_occurences([(1, 2), (1, 3), (3, 1)]) == {(1, 3): 2, (1, 2): 1, (3, 1): 1}\nassert     check_occurences([(1, 2), (1, 3), (3, 1), (1, 1)]) == {(1, 3): 2, (1, 2): 1, (3, 1): 1, (1, 1): 1}\nassert     check_occurences([(1, 2), (1, 3), (1, 4), (3, 1), (3, 2), (3, 3)]) == {(1, 3): 3, (1, 4): 1, (3, 1): 3, (3, 2): 1, (3, 3): 1}\nassert     check_occurences([(1, 2), (1, 3), (1, 4), (3, 1), (3, 2), (3, 3), (3, 2), (4, 1), (4, 2), (4, 3)]) == {(1, 3): 3, (1, 4): 1, (3, 1): 3, (3, 2): 1, (3, 3): 1, (3, 2): 1, (4, 1): 1, (4, 2): 1, (4, 3): 1}\nassert     check_occurences([]) == {}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_occurences([]) == {}\nassert     check_occurences([('1',), ('2',), ('3',)]) == {('1',): 1, ('2',): 1, ('3',): 1}\nassert     check_occurences([('1',), ('1',), ('2',)]) == {('1',): 3, ('2',): 1}\nassert     check_occurences([('1',), ('1',), ('2',), ('3',)]) == {('1',): 4, ('2',): 1, ('3',): 1}\nassert     check_occurences([(1, 'a'), (1, 'b'), (1, 'c')]) == {(1, 'a'): 1, (1, 'b'): 1, (1, 'c'): 1}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_occurences([('a', '1'), ('b', '1'), ('a', '2'), ('b', '2'), ('a', '3'), ('b', '3'), ('a', '4'), ('b', '4')]) == {('a', '1'): 2, ('b', '1'): 2, ('a', '2'): 1, ('b', '2'): 1, ('a', '3'): 1, ('b', '3'): 1, ('a', '4'): 1, ('b', '4'): 1}\nassert     check_occurences([('a', '1'), ('a', '2'), ('b', '1'), ('b', '2')]) == {('a', '1'): 2, ('a', '2'): 1, ('b', '1'): 1, ('b', '2'): 1}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n'''\n    Given the following list of test strings:\n    test_list = ['hello', 'how', 'are', 'you', 'hello', 'hi', 'how', 'are', 'you']\n    \n    the function should return the dictionary:\n    {('how',): 2, ('are',): 3, ('you',): 3, ('hello',): 3, ('hi',): 1, ('hello', 'how'): 1, ('hi', 'how'): 1, ('you', 'how'): 1}\n    \n    Note that, since there are 3 'hello' and 1 'hi', and 1 'how', there should be 2 total pairs in the dictionary.\n'''\ntest_list = ['hello', 'how', 'are', 'you', 'hello', 'hi', 'how', 'are', 'you']\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_occurences([('a', 1), ('a', 3), ('b', 1), ('b', 2), ('a', 1), ('a', 3)]) == {('a', 1): 2, ('a', 3): 2, ('b', 1): 1, ('b', 2): 1}\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert number_of_substrings(\"\") == 0\nassert number_of_substrings(\"a\") == 1\nassert number_of_substrings(\"aaaa\") == 2\nassert number_of_substrings(\"abcabc\") == 3\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     number_of_substrings('abc') == 2\nassert     number_of_substrings('abca') == 3\nassert     number_of_substrings('abcb') == 3\nassert     number_of_substrings('aab') == 2\nassert     number_of_substrings('aaab') == 2\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     number_of_substrings('a') == 1, 'a'\nassert     number_of_substrings('abc') == 2, 'abc'\nassert     number_of_substrings('aa') == 2, 'aa'\nassert     number_of_substrings('aaba') == 3, 'aaba'\nassert     number_of_substrings('aaaba') == 3, 'aaaba'\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     number_of_substrings(\"\") == 0, \"Empty string should return 0\"\nassert number_of_substrings(\"abc\") == 1, \"one-character string should return 1\"\nassert number_of_substrings(\"abcd\") == 2, \"four-character string should return 2\"\nassert number_of_substrings(\"abcde\") == 5, \"three-character string should return 5\"\nassert number_of_substrings(\"abcabc\") == 3, \"three-character string should return 3\"\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef common_substring(str_1, str_2):\n    '''\n    Write a python function to find the common substring of 2 given strings.\n    '''\n    pass\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     number_of_substrings('') == 0\nassert     number_of_substrings('a') == 1\nassert     number_of_substrings('aab') == 2\nassert     number_of_substrings('aa') == 1\nassert     number_of_substrings('aaa') == 3\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     number_of_substrings(\"\") == 0, \"No substrings\"\nassert     number_of_substrings(\"abcdefgh\") == 6, \"All substrings\"\nassert     number_of_substrings(\"abcd\") == 3, \"Single character\"\nassert     number_of_substrings(\"abcdabc\") == 6, \"Two characters\"\nassert     number_of_substrings(\"abcabcd\") == 3, \"Same character\"\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint('Test passed')\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_total_number_of_sequences(1, 0) == 0 \nassert     get_total_number_of_sequences(2, 0) == 0 \nassert     get_total_number_of_sequences(2, 1) == 1 \nassert     get_total_number_of_sequences(2, 2) == 2 \nassert     get_total_number_of_sequences(2, 3) == 2 \n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_total_number_of_sequences(4,2) == 7, 'Get the wrong number of sequences!'\nassert     get_total_number_of_sequences(6,2) == 14, 'Get the wrong number of sequences!'\nassert     get_total_number_of_sequences(5,1) == 5, 'Get the wrong number of sequences!'\nassert     get_total_number_of_sequences(5,4) == 15, 'Get the wrong number of sequences!'\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_total_number_of_sequences(10,9) == 10\nassert     get_total_number_of_sequences(5,10) == 5\nassert     get_total_number_of_sequences(8,5) == 9\nassert     get_total_number_of_sequences(0,2) == 0\nassert     get_total_number_of_sequences(10,6) == 0\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_total_number_of_sequences(4,5) == 0\nassert get_total_number_of_sequences(3,4) == 0\nassert get_total_number_of_sequences(1,2) == 1\nassert get_total_number_of_sequences(1,3) == 2\nassert get_total_number_of_sequences(4,5) == 10\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_total_number_of_sequences(4,2) == 6\nassert     get_total_number_of_sequences(3,4) == 19\nassert     get_total_number_of_sequences(5,7) == 9"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_total_number_of_sequences(10,0) == 0 \nassert     get_total_number_of_sequences(10,1) == 1\nassert     get_total_number_of_sequences(5,1) == 1\nassert     get_total_number_of_sequences(10,2) == 3\nassert     get_total_number_of_sequences(10,3) == 4\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_total_number_of_sequences(1,1) == 1\nassert     get_total_number_of_sequences(1,2) == 1\nassert     get_total_number_of_sequences(1,3) == 1\nassert     get_total_number_of_sequences(1,4) == 1\nassert     get_total_number_of_sequences(1,5) == 2\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_total_number_of_sequences(10, 10) == 10\nassert     get_total_number_of_sequences(10, 20) == 68\nassert     get_total_number_of_sequences(10, 30) == 117\nassert     get_total_number_of_sequences(10, 50) == 230\nassert     get_total_number_of_sequences(10, 60) == 335\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     replace_list([1,2,3,4,5], [2,4,5,6,7]) == [1,2,3,4,6]\nassert     replace_list([], [1,2,3,4]) == []\nassert     replace_list([1,2,3], []) == []\nassert     replace_list([1,2,3], [1,2,3,4]) == [1,2,3,4]\nassert     replace_list([], []) == []\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     replace_list([1,2,3],[4,5,6]) == [[1, 2, 3], [4, 5, 6]]\nassert     replace_list([7,8,9,10,11,12],[4,5,6]) == [[7, 8, 9, 10, 11, 12], [4, 5, 6]]\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     replace_list([4,5,6],[\"a\",\"b\",\"c\"]) == [4,5,6,\"a\",\"b\",\"c\"]\nassert     replace_list([\"a\",\"b\",\"c\"],[4,5,6]) == [\"a\",\"b\",\"c\",4,5,6]\nassert     replace_list([4,5,6],[\"a\",\"b\",\"c\"]) == [4,5,6,\"a\",\"b\",\"c\"]\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     replace_list([1, 2, 3, 4], [4, 5, 6]) == [1, 2, 3, 5]\nassert replace_list([5, 8, 13], [1, 2, 3, 4]) == [5, 8, 13]\nassert replace_list([1, 2, 3, 4], [5, 6, 7, 8]) == [1, 2, 3, 8]\nassert replace_list([], []) == []\nassert replace_list([1, 2, 3, 4], []) == [1, 2, 3, 4]\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     replace_list([3, 4, 5, 6], [2, 2, 5, 5]) == [3, 4, 5, 5]\nassert     replace_list([3, 4, 5, 6], [1, 1, 5, 5]) == [3, 4, 5, 5]\nassert     replace_list([3, 4, 5, 6], [1, 1, 5, 6]) == [3, 4, 5, 6]\nassert     replace_list([3, 4, 5, 6], [1, 1, 5, 2]) == [3, 4, 5, 2]\nassert     replace_list([3, 4, 5, 6], [5, 5, 5, 6]) == [3, 4, 5, 6]\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     replace_list([1,2,3,4], ['a', 'b', 'c']) == [1, 2, 3, 'b', 'c']\nassert     replace_list([1,2,3], ['a', 'b', 'c']) == [1, 2, 'c']\nassert     replace_list([1,2,3], ['a', 'b', 'c']) == [1, 2, 'c']\nassert     replace_list([1,2,3], ['a', 'b', 'c']) == [1, 2, 'c']\nassert     replace_list([1,2,3], ['a', 'b', 'c']) == [1, 2, 'c']\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef replace_list(list1, list2):\n    list1[-1] = list2[0]\n    for i in range(1, len(list2)):\n        list1.append(list2[i])\n    return list1\n\nassert replace_list([1,2,3,4],[3,2,1]) == [1,2,3,4]\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     replace_list([],[]) == []\nassert     replace_list([1,2,3],[\"A\", \"B\", \"C\"]) == [[1, 2, \"A\"], \"B\", \"C\"]\nassert     replace_list([1,2,3],[\"A\", \"B\", \"C\"]) == [[1, 2, \"A\"], \"B\", \"C\"]\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     replace_list([1, 2, 3, 4, 5], [10, 20, 30, 40, 50]) == (False, 'First list is not a list.')\nassert     replace_list([1, 2, 3, 4, 5], [10, 20, 30, 40, 50], 1) == (True, 'List 2 is not longer than the list 1.')\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     replace_list([1,2,3], [1,2,4]) == None, 'Wrong Answer'\nassert     replace_list([], [2,4,6]) == None, 'Wrong Answer'\nassert     replace_list([2,4,6], []) == None, 'Wrong Answer'\nassert     replace_list([1,2,3], [4,6,9]) == None, 'Wrong Answer'\nassert     replace_list([0,1,2], [2,4,6]) == None, 'Wrong Answer'\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_charac('Hello, world!') == 5\nassert     count_charac('Hello, world!') == 5\nassert     count_charac('Hello, world!') == 5\nassert     count_charac('Hi, world!') == 4\nassert     count_charac('Hello, hello!') == 6\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    pass\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_charac('abc') == 3\nassert     count_charac('xyz') == 6\nassert     count_charac('hello world') == 18\nassert     count_charac('hello world 123') == 19\nassert     count_charac('hello world 123 456') == 21\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_charac('aac') == 3\nassert     count_charac('ac') == 2\nassert     count_charac('a') == 1\nassert     count_charac('') == 0\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_charac('asdfghjk') == 12\nassert     count_charac('hello world') == 11\nassert     count_charac('gutting') == 3\nassert     count_charac('0123456789') == 10\nassert     count_charac('') == 0\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_charac('abcdefghijklmnopqrstuvwxyz') == 26\n\ndef count_upper_case_charac(str1):\n    '''\n    Write a function to count the total number of characters with upper case letters in a string.\n    '''\n    pass\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_charac(\"\") == 0\nassert     count_charac(\"a\") == 1\nassert     count_charac(\"abc\") == 3\nassert     count_charac(\"abc1\") == 3\nassert     count_charac(\"ab1c\") == 3\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    print(count_charac('Python'))\n    # print(count_charac('Python'))\n    # 3\n    \n\ndef count_charac2(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    \n    Sample Input    Expected Output\n    'Python'    3\n    '''\n    pass\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert next_Perfect_Square(1) == 2\nassert next_Perfect_Square(2) == 3\nassert next_Perfect_Square(3) == 4\nassert next_Perfect_Square(4) == 5\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     next_Perfect_Square(1) == 2\nassert next_Perfect_Square(4) == 3\nassert next_Perfect_Square(17) == 4\nassert next_Perfect_Square(25) == 5\nassert next_Perfect_Square(27) == 6\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef main():\n    N = 10\n    print(next_Perfect_Square(N))\n    print(next_Perfect_Square(10))\n    \nmain("
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     next_Perfect_Square(2) == 2, \"Case 1\"\nassert     next_Perfect_Square(9) == 10, \"Case 2\"\nassert     next_Perfect_Square(5) == 5, \"Case 3\"\nassert     next_Perfect_Square(11) == 12, \"Case 4\"\nassert     next_Perfect_Square(1) == 2, \"Case 5\"\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    next_Perfect_Square(3) == 4\n    next_Perfect_Square(4) == 5\n    next_Perfect_Square(5) == 5\n    next_Perfect_Square(6) == 6\n    next_Perfect_Square(7) == 8\n    next_Perfect_Square(8) == 8\n\ndef count_bits(n):\n    '''\n    Write a python function to count the number of bits set in a given number.\n    '''\n    pass\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     next_Perfect_Square(7) == 8,'Test 1 failed'\nassert     next_Perfect_Square(16) == 16,'Test 2 failed'\nassert     next_Perfect_Square(36) == 48,'Test 3 failed'\nassert     next_Perfect_Square(96) == 64,'Test 4 failed'\nassert     next_Perfect_Square(144) == 144,'Test 5 failed'\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint(next_Perfect_Square(2), next_Perfect_Square(4)) # 2 and 4\nprint(next_Perfect_Square(5), next_Perfect_Square(9)) # 5 and 9\nprint(next_Perfect_Square(10), next_Perfect_Square(11)) # 10 and 11\nprint(next_Perfect_Square(20), next_Perfect_Square(29)) # 20 and 29\nprint(next_Perfect_Square(30), next_Perfect_Square(41)) # 30 and 41\nprint(next_Perfect_Square(50), next_Perfect_Square(51)) # 50 and 51\nprint(next_Perfect_Square(60), next_Perfect_Square(61)) # 60 and 61\nprint(next_Perfect_Square(70), next_Perfect_Square(71)) # 70 and 71\nprint(next_Perfect_Square(100), next_Perfect_Square(101)) # 100 and 101\nprint(next_Perfect_Square(300), next_Perfect_Square(301)) # 300 and 301\nprint(next_Perfect_Square(400), next_Perfect_Square(401)) # 400 and 401\nprint(next_Perfect_Square(600), next_Perfect_Square(601)) # 600 and 601\nprint(next_Perfect_Square(800), next_Perfect_Square(801)) # 800 and 801\nprint(next_Perfect_Square(1000), next_Perfect_Square(1001)) # 1000 and 1001\n\nprint(next_Perfect_Square(0)) # 0\nprint(next_Perfect_Square(1)) # 1\nprint(next_Perfect_Square(2)) # 2\nprint(next_Perfect_Square(3)) # 3\nprint(next_Perfect_Square(4)) # 4\nprint(next_Perfect_Square(5)) # 5\nprint(next_Perfect_Square(6)) # 6\nprint(next_Perfect_Square(7)) # 7\nprint(next_Perfect_Square(8)) # 8\nprint(next_Perfect_Square(9)) # 9\nprint(next_Perfect_Square(10)) # 10\nprint(next_Perfect_Square(11)) # 11\nprint(next_Perfect_Square(12)) # 12\nprint(next_Perfect_Square(13)) # 13\nprint(next_Perfect_Square(14)) # 14\nprint(next_Perfect_Square(15)) # 15\nprint(next_Perfect_Square(16)) # 16\nprint(next_Perfect_Square(17)) # 17\nprint(next_Perfect_Square(18)) # 18\nprint(next_Perfect_Square(19)) # 19\nprint(next_Perfect_Square(20)) # 20\nprint(next_Perfect_Square(21)) # 21\nprint(next_Perfect_Square(22)) # 22\nprint(next_Perfect_Square(23)) # 23\nprint(next_Perfect_Square(24)) # 24\nprint(next_Perfect_Square(25)) # 25\nprint(next_Perfect_Square(26)) # 26\nprint(next_Perfect_Square(27)) # 27\nprint(next_Perfect_Square(28)) # 28\nprint(next_Perfect_Square(29)) # 29\nprint(next_Perfect_Square(30)) # 30\nprint(next_Perfect_Square(31)) # 31\nprint(next_Perfect_Square(32)) # 32\nprint(next_Perfect_Square(33)) # 33\nprint(next_Perfect_Square(34)) # 34\nprint(next_Perfect_Square(35)) # 35\nprint(next_Perfect_Square(36)) # 36\nprint(next_Perfect_Square(37)) # 37\nprint(next_Perfect_Square(38)) # 38\nprint(next_Perfect_Square(39)) # 39\nprint(next_Perfect_Square(40)) # 40\nprint(next_Perfect_Square(41)) # 41\nprint(next_Perfect_Square(42)) # 42\nprint(next_Perfect_Square(43)) # 43\nprint(next_Perfect_Square(44)) # 44\nprint(next_Perfect_Square(45)) # 45\nprint(next_Perfect_Square(46)) # 46\nprint(next_Perfect_Square(47)) # 47\nprint(next_Perfect_Square(48)) # 48\nprint(next_Perfect_Square(49)) # 49\nprint(next_Perfect_Square(50)) # 50\nprint(next_Perfect_Square(51)) # 51\nprint(next_Perfect_Square(52)) # 52\nprint(next_Perfect_Square(53)) # 53\nprint(next_Perfect_Square(54)) # 54\nprint(next_Perfect_Square(55)) # 55\nprint(next_Perfect_Square(56)) # 56\nprint(next_Perfect_Square(57)) # 57\nprint(next_Perfect_Square(58)) # 58\nprint(next_Perfect_Square(59)) # 59\nprint(next_Perfect_Square(60)) # 60\nprint(next_Perfect_Square(61)) # 61\nprint(next_Perfect_Square(62)) # 62\nprint(next_Perfect_Square(63)) # 63\nprint(next_Perfect_Square(64)) # 64\nprint(next_Perfect_Square(65)) # 65\nprint(next_Perfect_Square(66)) # 66\nprint(next_Perfect_Square(67)) # 67\nprint(next_Perfect_Square(68)) # 68\nprint(next_Perfect_Square(69)) # 69\nprint(next_Perfect_Square(70)) # 70\nprint(next_Perfect_Square(71)) # 71\nprint(next_Perfect_Square(72)) # 72\nprint(next_Perfect_Square(73)) # 73\nprint(next_Perfect_Square(74)) # 74\nprint(next_Perfect_Square(75)) # 75\nprint(next_Perfect_Square(76)) # 76\nprint(next_Perfect_Square(77)) # 77\nprint(next_Perfect_Square(78)) # 78\nprint(next_Perfect_Square(79)) # 79\nprint(next_Perfect_Square(80)) # 80\nprint(next_Perfect_Square(81)) # 81\nprint(next_Perfect_Square(82)) # 82\nprint(next_Perfect_Square(83)) # 83\nprint(next_Perfect_Square(84)) # 84\nprint(next_Perfect_Square(85)) # 85\nprint(next_Perfect_Square(86)) # 86\nprint(next_Perfect_Square(87)) # 87\nprint(next_Perfect_Square(88)) # 88\nprint(next_Perfect_Square(89)) # 89\nprint(next_Perfect_Square(90)) # 90\nprint(next_Perfect_Square(91)) # 91\nprint(next_Perfect_Square(92)) # 92\nprint(next_Perfect_Square(93)) # 93\nprint(next_Perfect_Square(94)) # 94\nprint(next_Perfect_Square(95)) # 95\nprint(next_Perfect_Square(96)) # 96\nprint(next_Perfect_Square(97)) # 97\nprint(next_Perfect_Square(98)) # 98\nprint(next_Perfect_Square(99)) # 99\nprint(next_Perfect_Square(100)) # 100\nprint(next_Perfect_Square(101)) # 101\nprint(next_Perfect_Square(102)) # 102\nprint(next_Perfect_Square(103)) # 103\nprint(next_Perfect_Square(104)) # 104\nprint(next_Perfect_Square(105)) # 105\nprint(next_Perfect_Square(106)) # 106\nprint(next_Perfect_Square(107)) # 107\nprint(next_Perfect_Square(108)) # 108\nprint(next_Perfect_Square(109)) # 109\nprint(next_Perfect_Square(110)) # 110\nprint(next_Perfect_Square(111)) # 111\nprint(next_Perfect_Square(112)) # 112\nprint(next_Perfect_Square(113)) # 113\nprint(next_Perfect_Square(114)) # 114\nprint(next_Perfect_Square(115)) # 115\nprint(next_Perfect_Square(116)) # 116\nprint(next_Perfect_Square(117)) # 117\nprint(next_Perfect_Square(118)) # 118\nprint(next_Perfect_Square(119)) # 119\nprint(next_Perfect_Square(120)) # 120\nprint(next_Perfect_Square(121)) # 121\nprint(next_Perfect_Square(122)) # 122\nprint(next_Perfect_Square(123)) # 123\nprint(next_Perfect_Square(124)) # 124\nprint(next_Perfect_Square(125)) # 125\nprint(next_Perfect_Square(126)) # 126\nprint(next_Perfect_Square(127)) # 12"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     next_Perfect_Square(10) == 32\nassert     next_Perfect_Square(0) == 0\nassert     next_Perfect_Square(25) == 33\nassert     next_Perfect_Square(4) == 4\nassert     next_Perfect_Square(12) == 16\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_sum([3,8,-10,9,5]) == 5\nassert     max_sum([3,-8,10,-9,5]) == 0\nassert     max_sum([-5,9,-10,5]) == 10\nassert     max_sum([-1,2,-9]) == 1\nassert     max_sum([-10,2,0,7,-4,-5]) == 11\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_sum([1, 3, 6, 4, 5, 9, 2, 8]) == 9\nassert     max_sum([7, 6, 5, 4, 3, 2, 1]) == 7\n\ndef max_sum_dp(arr):\n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    maxSum = []\n    curr_sum = 0\n    for x in arr:\n        if curr_sum + x > x:\n            maxSum.append(curr_sum + x)\n            curr_sum = x\n        else:\n            curr_sum = curr_sum + x\n            maxSum.append(curr_sum)\n            curr_sum = 0\n    maxSum = sorted(maxSum,reverse=True)\n    return maxSum[0]\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert max_sum([5, 7, 4, 8, 12, 9, 6, 11, 14, 8, 1]) == 30\nassert max_sum([1, 2, 3, 4, 5]) == 15\nassert max_sum([1, 2, 3, 4, 5, 7]) == 12\nassert max_sum([4, 3, 2, 1, 5, 6]) == 18\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\narr = [-13, -3, -25, -20, -3, -16, -23, -12, -5, -22, -15, -4, -7]\nprint(max_sum(arr)"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    pass\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_sum([]) == 0, \"Expected a non-empty array\"\nassert     max_sum([1]) == 1, \"Expected a bitonic array\"\nassert     max_sum([1, 2, 3, 4, 5]) == 10, \"Expected a bitonic array\"\nassert     max_sum([3, 2, 1, 5, 4, 6]) == 8, \"Expected a bitonic array\"\nassert     max_sum([3, 2, 5, 4, 6, 1, 0]) == 11, \"Expected a bitonic array\"\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nmax_sum([9,8,1,3,4,7,6,2,5]) == 20\nmax_sum([3,4,6,3,1]) == 7\nmax_sum([6,6,6,7,3]) == 7\nmax_sum([1,4,5,4,5,9,1]) == 12\nmax_sum([5,4,7,4,5,9,2,3,5,6,4,3,6,7,4,5,1,9]) == 21"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_sum([7, 1, 5, 3, 6, 8, 6, 2, 9, 5]) == 9, \"Wrong answer!\"\nassert     max_sum([7, 6, 4, 5, 3, 9, 5, 1, 2, 9, 8]) == 16, \"Wrong answer!\"\nassert     max_sum([5, 5, 5, 5, 5, 6, 7, 9, 10, 10, 10, 1, 3, 5, 5, 4]) == 29, \"Wrong answer!\"\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     babylonian_squareroot(4) == 2, \"Input 4, should be 2\"\nassert     babylonian_squareroot(9) == 3, \"Input 9, should be 3\"\nassert     babylonian_squareroot(8) == 2, \"Input 8, should be 2\"\nassert     babylonian_squareroot(1) == 1, \"Input 1, should be 1\"\nassert     babylonian_squareroot(0) == 0, \"Input 0, should be 0\"\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     babylonian_squareroot(0) == 0.0\nassert     babylonian_squareroot(1) == 1.0\nassert     babylonian_squareroot(4) == 2.0\nassert     babylonian_squareroot(9) == 3.0\nassert     babylonian_squareroot(18) == 4.0\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     babylonian_squareroot(2) == 1.41421\nassert     babylonian_squareroot(3) == 1.73205\nassert     babylonian_squareroot(4) == 2.16666\nassert     babylonian_squareroot(5) == 2.83333\nassert     babylonian_squareroot(6) == 3.44444\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     babylonian_squareroot(3) == 1\nassert     babylonian_squareroot(5) == 2\nassert     babylonian_squareroot(7) == 2\nassert     babylonian_squareroot(19) == 3\n\ndef euler_squareroot(number):\n    '''\n    Write a function for computing square roots using the Euler method.\n    '''\n    pass\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     lps(\"\") == 0\nassert     lps(\"aa\") == 2\nassert     lps(\"ab\") == 1\nassert     lps(\"aab\") == 2\nassert     lps(\"cbbb\") == 5\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     lps('aabaa') == 4\nassert     lps('aaba') == 3\nassert     lps('a') == 1\nassert     lps('') == 0\nassert     lps('ac') == 1\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef lps(str): \n    n = len(str) \n    if n == 0: \n        return 0\n    L = [[0 for x in range(n)] for x in range(n)] \n    for i in range(1,n): \n        for j in range(i): \n            if str[i] == str[j] and (i-j <= 2 or L[j+1][i-1]): \n                L[i][j] = 1 + L[j+1][i-1] \n            else: \n                L[i][j] = max(L[i][j-1], L[i-1][j]) \n    return L[n-1][n-1] \n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     lps(\"\")==0\nassert lps(\"a\")==1\nassert lps(\"ab\")==2\nassert lps(\"aabb\")==3\nassert lps(\"abb\")==3\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ndef lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    pass\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     lps(\"ABCDCDC\") == 5\nassert     lps(\"ABABABAB\") == 6\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert lps('babad') == 4\nassert lps('cbbd') == 2\nassert lps('bb') == 2\nassert lps('a') == 1\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     lps('abcbba') == 3\nassert     lps('abc') == 1\nassert     lps('aba') == 2\nassert     lps('abcba') == 3\nassert     lps('abcbaba') == 6\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert \n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert harmonic_sum(1) == 1.0\nassert harmonic_sum(3) == 2.0\nassert harmonic_sum(4) == 3.0\nassert harmonic_sum(5) == 5.0\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    pass\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef test_harmonic_sum():\n    '''\n    You can also put the harmonic_sum in the test\n    '''\n    pass\n\nif __name__ == \"__main__\":\n    test_harmonic_sum()\n    print(harmonic_sum(1))\n    print(harmonic_sum(2))\n    print(harmonic_sum(3))\n    print(harmonic_sum(4))\n    print(harmonic_sum(5))\n    print(harmonic_sum(6))\n    print(harmonic_sum(7))\n    print(harmonic_sum(8))\n    print(harmonic_sum(9))\n    print(harmonic_sum(10))\n    print(harmonic_sum(11))\n    print(harmonic_sum(12))\n    print(harmonic_sum(13))\n    print(harmonic_sum(14))\n    print(harmonic_sum(15))\n    print(harmonic_sum(16))\n    print(harmonic_sum(17))\n    print(harmonic_sum(18))\n    print(harmonic_sum(19))\n    print(harmonic_sum(20))\n    print(harmonic_sum(21))\n    print(harmonic_sum(22))\n    print(harmonic_sum(23))\n    print(harmonic_sum(24))\n    print(harmonic_sum(25))\n    print(harmonic_sum(26))\n    print(harmonic_sum(27))\n    print(harmonic_sum(28))\n    print(harmonic_sum(29))\n    print(harmonic_sum(30))\n    print(harmonic_sum(31))\n    print(harmonic_sum(32))\n    print(harmonic_sum(33))\n    print(harmonic_sum(34))\n    print(harmonic_sum(35))\n    print(harmonic_sum(36))\n    print(harmonic_sum(37))\n    print(harmonic_sum(38))\n    print(harmonic_sum(39))\n    print(harmonic_sum(40))\n    print(harmonic_sum(41))\n    print(harmonic_sum(42))\n    print(harmonic_sum(43))\n    print(harmonic_sum(44))\n    print(harmonic_sum(45))\n    print(harmonic_sum(46))\n    print(harmonic_sum(47))\n    print(harmonic_sum(48))\n    print(harmonic_sum(49))\n    print(harmonic_sum(50))\n    print(harmonic_sum(51))\n    print(harmonic_sum(52))\n    print(harmonic_sum(53))\n    print(harmonic_sum(54))\n    print(harmonic_sum(55))\n    print(harmonic_sum(56))\n    print(harmonic_sum(57))\n    print(harmonic_sum(58))\n    print(harmonic_sum(59))\n    print(harmonic_sum(60))\n    print(harmonic_sum(61))\n    print(harmonic_sum(62))\n    print(harmonic_sum(63))\n    print(harmonic_sum(64))\n    print(harmonic_sum(65))\n    print(harmonic_sum(66))\n    print(harmonic_sum(67))\n    print(harmonic_sum(68))\n    print(harmonic_sum(69))\n    print(harmonic_sum(70))\n    print(harmonic_sum(71))\n    print(harmonic_sum(72))\n    print(harmonic_sum(73))\n    print(harmonic_sum(74))\n    print(harmonic_sum(75))\n    print(harmonic_sum(76))\n    print(harmonic_sum(77))\n    print(harmonic_sum(78))\n    print(harmonic_sum(79))\n    print(harmonic_sum(80))\n    print(harmonic_sum(81))\n    print(harmonic_sum(82))\n    print(harmonic_sum(83))\n    print(harmonic_sum(84))\n    print(harmonic_sum(85))\n    print(harmonic_sum(86))\n    print(harmonic_sum(87))\n    print(harmonic_sum(88))\n    print(harmonic_sum(89))\n    print(harmonic_sum(90))\n    print(harmonic_sum(91))\n    print(harmonic_sum(92))\n    print(harmonic_sum(93))\n    print(harmonic_sum(94))\n    print(harmonic_sum(95))\n    print(harmonic_sum(96))\n    print(harmonic_sum(97))\n    print(harmonic_sum(98))\n    print(harmonic_sum(99))\n    print(harmonic_sum(100))\n    print(harmonic_sum(101))\n    print(harmonic_sum(102))\n    print(harmonic_sum(103))\n    print(harmonic_sum(104))\n    print(harmonic_sum(105))\n    print(harmonic_sum(106))\n    print(harmonic_sum(107))\n    print(harmonic_sum(108))\n    print(harmonic_sum(109))\n    print(harmonic_sum(110))\n    print(harmonic_sum(111))\n    print(harmonic_sum(112))\n    print(harmonic_sum(113))\n    print(harmonic_sum(114))\n    print(harmonic_sum(115))\n    print(harmonic_sum(116))\n    print(harmonic_sum(117))\n    print(harmonic_sum(118))\n    print(harmonic_sum(119))\n    print(harmonic_sum(120))\n    print(harmonic_sum(121))\n    print(harmonic_sum(122))\n    print(harmonic_sum(123))\n    print(harmonic_sum(124))\n    print(harmonic_sum(125))\n    print(harmonic_sum(126))\n    print(harmonic_sum(127))\n    print(harmonic_sum(128))\n    print(harmonic_sum(129))\n    print(harmonic_sum(130))\n    print(harmonic_sum(131))\n    print(harmonic_sum(132))\n    print(harmonic_sum(133))\n    print(harmonic_sum(134))\n    print(harmonic_sum(135))\n    print(harmonic_sum(136))\n    print(harmonic_sum(137))\n    print(harmonic_sum(138))\n    print(harmonic_sum(139))\n    print(harmonic_sum(140))\n    print(harmonic_sum(141))\n    print(harmonic_sum(142))\n    print(harmonic_sum(143))\n    print(harmonic_sum(144))\n    print(harmonic_sum(145))\n    print(harmonic_sum(146))\n    print(harmonic_sum(147))\n    print(harmonic_sum(148))\n    print(harmonic_sum(149))\n    print(harmonic_sum(150))\n    print(harmonic_sum(151))\n    print(harmonic_sum(152))\n    print(harmonic_sum(153))\n    print(harmonic_sum(154))\n    print(harmonic_sum(155))\n    print(harmonic_sum(156))\n    print(harmonic_sum(157))\n    print(harmonic_sum(158))\n    print(harmonic_sum(159))\n    print(harmonic_sum(160))\n    print(harmonic_sum(161))\n    print(harmonic_sum(162))\n    print(harmonic_sum(163))\n    print(harmonic_sum(164))\n    print(harmonic_sum(165))\n    print(harmonic_sum(166))\n    print(harmonic_sum(167))\n    print(harmonic_sum(168))\n    print(harmonic_sum(169))\n    print(harmonic_sum(170))\n    print(harmonic_sum(171))\n    print(harmonic_sum(172))\n    print(harmonic_sum(173))\n    print(harmonic_sum(174))\n    print(harmonic_sum(175))\n    print(harmonic_sum(176))\n    print(har"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef factorial(n):\n    '''\n    Write a function that takes in an integer n and calculates the factorial of n.\n    '''\n    pass\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     intersection_array([1,2,3],[1,2]) == {1,2}, 'Wrong answer'\nassert intersection_array([1,2,3],[2,3]) == {2}, 'Wrong answer'\nassert intersection_array([1,2,3],[3,3,3]) == {3}, 'Wrong answer'\nassert intersection_array([1,2,3],[3,4,5]) == {3}, 'Wrong answer'\nassert intersection_array([1,2,3],[3,4,5,3]) == {3,3,4}, 'Wrong answer'\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     intersection_array([1,3,5], [4,5]) == [1,5], \"Wrong: intersection_array([1,3,5], [4,5])\"\nassert     intersection_array([1,3,5], [3,5]) == [3,5], \"Wrong: intersection_array([1,3,5], [3,5])\"\nassert     intersection_array([1,2,5,6,7], [3,4,5,6]) == [3,4,5], \"Wrong: intersection_array([1,2,5,6,7], [3,4,5,6])\"\nassert     intersection_array([1,2,3,4,5], [3,4,5]) == [], \"Wrong: intersection_array([1,2,3,4,5], [3,4,5])\"\nassert     intersection_array([1,2,3], [3,4,5,6]) == [], \"Wrong: intersection_array([1,2,3], [3,4,5,6])\"\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     intersection_array([1,2,3,4],\n                              [4,3,2,1]) == [1,2,3,4]\nassert     intersection_array([1,2,3],\n                              [4,5,6]) == []\nassert     intersection_array([1,2],\n                              [3,4,5]) == []\nassert     intersection_array([1,2,3],\n                              [3,4,5,6]) == []\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     intersection_array([1,2,3,4,5],    [6,7,8,9,10]) == 4\nassert     intersection_array([1,2,3,4,5],    [2,3,5]) == 2\nassert     intersection_array([],    [2,3,5]) == 0\nassert     intersection_array([],    []) == 0\nassert     intersection_array([1,2,3,4],    []) == 0\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    intersection_array([1,2,3,4],[3,4,5,6,7]) == [3,4]\n    intersection_array([1,2,3,4,5],[3,4,5,6]) == []\n    intersection_array([], [1,2,3,4,5]) == []\n    intersection_array([5,4,3,2,1],[5,4,3,2]) == [5,4]\n    intersection_array([2,3,4,5,6,7],[2,3,4,5,6,7,8]) == []\n    intersection_array([1,2,3,4,5,6,7],[1,2,3,4,5,6,7,8]) == []\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     intersection_array([1,2,3],[2,3,4]) == []\nassert intersection_array([4,7,10,11],[2,3,5,6]) == [2,3,5,6]\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     intersection_array([1, 2, 2, 1], [2, 2, 1]) == set([1, 2])\nassert     intersection_array([1, 2, 2, 1], [2, 3, 3, 2]) == set([1, 2])\nassert     intersection_array([1, 2, 2, 1], [2, 2, 1, 3]) == set([1, 2])\nassert     intersection_array([1, 2, 2, 1], [2, 2, 2, 3]) == set([1, 2, 3])\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(intersection_array([2,2,3],[3,2,4]))"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_X((1,2,3,4,5), 1) == 3\nassert     count_X((1,2,3,4,5), 5) == 1\nassert     count_X((1,2,3,4,5), 0) == 0\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert count_X((10,20,30),10) == 1\nassert count_X((10,20,30),5) == 0\nassert count_X((10,20,30),8) == 1\nassert count_X((10,20,30),9) == 0\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert count_X([(1,), (2,), (1,), (2,), (1,), (2,)], 1) == 4\nassert count_X([(1,), (2,), (1,), (2,), (1,), (2,)], 2) == 3\nassert count_X([(1,), (2,), (1,), (2,), (1,), (2,)], 3) == 2\nassert count_X([(1,), (2,), (1,), (2,), (1,), (2,)], 4) == 1\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_X((1,2,3,3,4,5), 3) == 3\nassert     count_X((1,2,3,3,4,5), 2) == 3\nassert     count_X((1,2,3,3,4,5), 6) == 0\nassert     count_X((1,2,3,3,4,5), 0) == 5\nassert     count_X((1,2,3,3,4,5), 1) == 4\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_X([3, 4, 3, 3], 3) == 2, 'Tuple must have an element and that element must be contained in the tuple'\nassert     count_X([], 3) == 0, 'Tuple must contain an element'\nassert     count_X((), 3) == 0, 'Tuple must contain an element'\nassert     count_X((1, 2, 3), 3) == 1, 'Element must be contained in the tuple'"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_X(('a', 'b', 'c', 'd'), 'b') == 1\nassert     count_X(('a', 'b', 'c', 'd'), 'z') == 0\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_X(('a', 'b', 'c', 'c'), 'c') == 2\nassert count_X(('a', 'b', 'c', 'd'), 'b') == 2\nassert count_X(('a', 'b', 'c', 'd'), 'a') == 1\nassert count_X(('a', 'b', 'c'), 'z') == 0\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ncount_X(('abcd', 'xyz', 'a', 'b', 'xyz', 'a'), 'a') == 1\nassert count_X(('abcd', 'xyz', 'a', 'b', 'xyz', 'a'), 'b') == 2\nassert count_X(('abcd', 'xyz', 'a', 'b', 'xyz', 'a'), 'c') == 0\nassert count_X(('abcd', 'xyz', 'a', 'b', 'xyz', 'a'), 'd') == 0"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     insert_element([], 1) == []\nassert     insert_element([1], 1) == [1]\nassert     insert_element([1, 2], 1) == [1, 1, 2]\nassert     insert_element([1, 2, 3], 1) == [1, 1, 2, 3]\nassert     insert_element([1, 2, 3, 4], 1) == [1, 1, 2, 3, 4]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     insert_element([1,2,3,4],0) == [0,1,2,3,4]\nassert     insert_element([1,2,3,4],4) == [0,1,4,2,3,4]\nassert     insert_element([1,2,3,4],5) == [0,1,4,2,5,3,4]\nassert     insert_element([1,2,3,4],6) == [0,1,4,2,6,3,4]\nassert     insert_element([1,2,3,4],7) == [0,1,4,2,7,3,4]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     insert_element([1,2,3],1) == [1,1,2,3]\nassert     insert_element([1,2,3],10) == [1,10,2,3]\nassert     insert_element([1,2,3],100) == [1,100,2,3]\nassert     insert_element([1,2,3],200) == [1,2,200,3]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     insert_element([1,2,3,4,5,6],0) == [0,1,2,3,4,5,6]\nassert     insert_element([1,2,3,4,5,6],8) == [1,2,3,4,5,6,0,8]\nassert     insert_element([1,2,3,4,5,6],6) == [1,2,3,4,5,6,0,8]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ninsert_element([1,2,3,4,5],3) ==[3,4,5,1,2]\nassert \ninsert_element([1,2,3,4,5],3) ==[3,1,2,4,5]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     insert_element([],0) == []\nassert     insert_element([0],0) == [0]\nassert     insert_element([0,1],0) == [0,0,1]\nassert     insert_element([1,2,3,4,5],5) == [1,2,3,4,5,5]\nassert     insert_element([1,2,3,4,5,6,7,8,9],2) == [1,2,2,3,4,5,5,6,7,8,9]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     insert_element([1,2,3],10) == [1,10,2,3]\nassert     insert_element([5,6,7],11) == [5,11,6,7]\nassert     insert_element([3,2,1],0) == [0,1,2,3]\nassert     insert_element([],0) == [0]\nassert     insert_element([],0) == [0]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     insert_element([1,2,3], 4) == [1,4,2,3]\nassert     insert_element([], 4) == []\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     insert_element([1,2,3,4],10) == [1,10,2,10,3,10,4]\nassert     insert_element([1,2,3,4],5) == [5,1,5,2,5,3,5,4]\nassert     insert_element([1,2,3,4],11) == [11,1,11,2,11,3,11,4]\nassert     insert_element([1,2,3,4],9) == [9,1,9,2,9,3,9,4]\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     convert([1+1j, 1-1j, 0-1j, 1+0j, 0-1j, 0+1j, 1-1j, 1+1j]) == (\n    [(0.0, -1.0), (0.0, 0.0), (0.0, 1.0), (1.0, 1.0), (1.0, 0.0), (1.0, -1.0), (1.0, 0.0), (1.0, 1.0)],\n    [(1.0, 0.0), (0.0, 0.0), (0.0, 1.0), (1.0, 1.0), (1.0, 0.0), (1.0, -1.0), (1.0, 0.0), (1.0, 1.0)]\n    ), \"Wrong result\"\n\nassert convert([1+1j, 1-1j, 0-1j, 1+0j, 0-1j, 0+1j, 1-1j, 1+1j]) == ([], []), \"Wrong result\"\n\nassert convert([1,1,0,1,0,1,0,1]) == ([(1.0, 1.0), (1.0, 0.0), (0.0, 0.0), (1.0, 1.0), (1.0, 0.0), (1.0, -1.0), (0.0, 0.0), (1.0, 1.0)],\n    [(1.0, 0.0), (0.0, 0.0), (0.0, 1.0), (1.0, 1.0), (1.0, 0.0), (1.0, -1.0), (0.0, 0.0), (1.0, 1.0)]\n    ), \"Wrong result\"\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     convert([1,1]) == (2, 45.0)\nassert    convert([1,2]) == (2, 90.0)\nassert    convert([1,-1]) == (2, -45.0)\nassert    convert([1,1.1]) == (2, 0.0)\nassert    convert([1,1.01]) == (2, 0.01)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     convert(complex(3,4))    ==    [3+4j,90]\nassert     convert(complex(3,-4))    ==    [3-4j,90]\nassert     convert(complex(0,0))    ==    [0,0]\nassert     convert(complex(1,1))    ==    [1,0]\nassert     convert(complex(-1,1))    ==    [1,0]\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     convert([0,1]) == (0,1)\nassert     convert([0,-1]) == (1,0)\nassert     convert([1,0]) == (1,1)\nassert     convert([1,1]) == (1,-1)\nassert     convert([0,0]) == (0,0)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    convert(((3+4j), (2+1j))) == ((3+4j), (2+1j))\n    convert(((3+4j), (2+1j))) == ((3+4j), (2+1j))\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     convert((0.0, -1.0)) == (1.0, -0.0)\nassert     convert((-1.0, 1.0)) == (1.0, 1.0)\nassert     convert((-2.0, -1.0)) == (1.0, 1.0)\nassert     convert((-2.0, -1.0)) == (1.0, 1.0)\nassert     convert((3.0, 1.0)) == (1.0, 1.0)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     convert([1+1j,2+3j,3+2j,4+1j]) == ((1.0, 1.0), (3.0, 2.0), (3.0, 4.0), (1.0, 3.0))\n\nassert convert([1+1j, 2+3j, 3+2j, 4+1j]) == ((1.0, 1.0), (3.0, 2.0), (3.0, 4.0), (1.0, 3.0))\n\nassert convert([1+2j, 2+3j, 3+2j, 4+1j]) == ((1.0, 0.0), (3.0, 1.0), (3.0, 2.0), (1.0, 4.0))\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     convert((4,3)) == ((2, 1), (0.5, cmath.sqrt(3)))\nassert    convert((5,9)) == ((1, cmath.sqrt(3)), (0.5, cmath.sqrt(3)))\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     convert((1, 2, 3, 4)) == ((1+2j), (4+3j))\nassert convert(('1', '2', '3', '4')) == ((1+2j), (4+3j))\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_integer([1,2,3,4,5]) == 5, \"Should be 5\"\nassert     count_integer([1,1,1,1,1]) == 5, \"Should be 5\"\nassert     count_integer([1,1,2,1,1]) == 4, \"Should be 4\"\nassert     count_integer([1,1,1,1,1,1]) == 3, \"Should be 3\"\nassert     count_integer([1,1,1,1,1,1,1]) == 2, \"Should be 2\"\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_integer([0, 1, 2, 3, 4]) == 5\nassert     count_integer([1.0, 1.1, 1.1, 1.0]) == 2\nassert     count_integer([0, 1, 1, 1, 2, 2, 3]) == 7\nassert     count_integer([1.0, 0, 1.0, 0.0]) == 2\nassert     count_integer([]) == 0\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_integer([]) == 0, \"Empty list\"\nassert     count_integer([1, 2, 3]) == 3, \"Single integer\"\nassert     count_integer([1, 2, 3, 4, 5]) == 5, \"Multiple integers\"\nassert     count_integer([1, \"\", 2, 4, 5]) == 3, \"Multiple Integers and String\"\nassert     count_integer([True, False, False, False]) == 3, \"Multiple boolean elements\"\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_integer([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == 10, 'Function not working properly'\n\ndef count_odd_even(list1):\n    '''\n    Write a python function that returns the number of odd and even elements in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_integer([]) == 0, \"Empty List\"\nassert     count_integer([1,2,3,4,5]) == 5, \"List with all integers\"\nassert     count_integer([]) == 0, \"Empty List\"\nassert     count_integer([1.1,2.2,3.3,4.4,5.5]) == 5, \"List with all integers\"\nassert     count_integer([1,2,3,4,5.5]) == 0, \"List with negative integers\"\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_integer([1, 2, 3, 4, 5, 6]) == 6, \"incorrect\"\nassert count_integer([1, 1.1, \"hello\", True, False, 5]) == 3, \"incorrect\"\nassert count_integer([[1], [2, 3, 4], (1, 2, 3), (1,2,3,4), {\"1\":2}]) == 5, \"incorrect\"\nassert count_integer([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10, \"incorrect\"\nprint(\"correct\")\n\n'''\nCounting Elements with List Comprehension\n'''\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_integer([]) == 0, 'input is empty'\nassert     count_integer([2, 2, 2]) == 3, 'all elements are integer'\nassert     count_integer([1, 2, 3, 4, 5]) == 5, 'all elements are integer'\nassert     count_integer([1, 3, 4, 6, 8, 9]) == 6, 'all elements are integer'\nassert     count_integer([]) == 0, 'input is empty'\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_integer([1,2,3,4,5]) == 5, \"Should return the number of elements in a given list\"\nassert count_integer([]) == 0, \"Should return the number of elements in a given list\"\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     combinations_colors([], 3) == []\nassert     combinations_colors([1,2,3,4,5], 3) == [[1,2,3],\n                                                    [1,2,4],\n                                                    [1,2,5],\n                                                    [1,3,4],\n                                                    [1,3,5],\n                                                    [1,4,5],\n                                                    [2,3,4],\n                                                    [2,3,5],\n                                                    [2,4,5],\n                                                    [3,4,5]]\n\n\ndef combinations_colors_with_replacement(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with replacement) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    pass\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     combinations_colors(['a', 'b', 'c'], 3) == [('a', 'b', 'c'), ('a', 'c', 'b'), ('b', 'a', 'c'), ('b', 'c', 'a'), ('c', 'a', 'b'), ('c', 'b', 'a')]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef get_intersection(lst1, lst2):\n    '''\n    Write a function that takes in 2 lists and returns a new list with the common elements of the 2 lists.\n    '''\n    pass\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     combinations_colors([1,2,3], 2) == [('1','2'),('1','3'),('2','3')]\nassert     combinations_colors([1,2,3], 3) == [('1','2','3')]\nassert     combinations_colors([1,2,3], 4) == [('1','2','3','4')]\nassert     combinations_colors([1,2,3], 5) ==     [('1','2','3','4','5')]\nassert     combinations_colors([1,2,3,4], 3) ==     [('1','2','3'),('1','2','4'),('1','2','4')]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     combinations_colors([1,2,3], 2) == [(), (1, 2), (1, 3), (2, 1), (2, 3), (3, 1), (3, 2)]\nassert     combinations_colors([1,2,3], 3) == [(), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 3, 2), (1, 3, 2), (1, 3, 2), (2, 1, 3), (2, 1, 3), (2, 1, 3), (2, 3, 1), (2, 3, 1), (2, 3, 1), (3, 1, 2), (3, 1, 2), (3, 1, 2), (3, 2, 1), (3, 2, 1), (3, 2, 1), (3, 3, 1), (3, 3, 1), (3, 3, 1), (3, 3, 2), (3, 3, 2), (3, 3, 2), (3, 3, 2), (3, 3, 2), (3, 3, 3)]"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     combinations_colors([1, 2, 3], 3) ==     [(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)]\nassert     combinations_colors(['a', 'b', 'c'], 3) ==     [('a', 'b', 'c'), ('a', 'c', 'b'), ('b', 'a', 'c'), ('b', 'c', 'a'), ('c', 'a', 'b'), ('c', 'b', 'a')]\nassert     combinations_colors([1, 2, 3], 3) ==     [(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)]\nassert     combinations_colors(['a', 'b', 'c'], 3) ==     [('a', 'b', 'c'), ('a', 'c', 'b'), ('b', 'a', 'c'), ('b', 'c', 'a'), ('c', 'a', 'b'), ('c', 'b', 'a')]\nassert     combinations_colors([1, 2, 3], 3) ==     [(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     combinations_colors([1, 2], 3) ==     [(1, 2, 1), (1, 2, 2), (1, 1, 2), (2, 1, 2)]\nassert     combinations_colors([1, 2, 3], 2) ==     [(1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3)]\nassert     combinations_colors(['a', 'b', 'c'], 2) == [('a', 'a'), ('a', 'b'), ('a', 'c'), ('b', 'b'), ('b', 'c'), ('c', 'c')]\nassert     combinations_colors([1, 2, 3, 4, 5, 6], 5) == [(1, 2, 3, 4, 5), (1, 2, 3, 4, 6), (1, 2, 3, 5, 6), (1, 2, 4, 5, 6), (1, 2, 4, 6), (1, 2, 5, 6), (1, 3, 4, 5, 6), (1, 3, 4, 6), (1, 3, 5, 6), (1, 4, 5, 6), (2, 3, 4, 5, 6), (2, 3, 4, 6), (2, 3, 5, 6), (2, 4, 5, 6), (3, 4, 5, 6), (3, 4, 6), (3, 5, 6), (4, 5, 6), (4, 6), (5, 6)]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     combinations_colors([1,2,3,4], 2) == [[(1, 2), (1, 3), (1, 4)], [(2, 1), (2, 3), (2, 4)], [(3, 1), (3, 2), (3, 4)], [(4, 1), (4, 2), (4, 3)]]\nassert     combinations_colors([1,2,3,4], 1) == [[(1,)], (2,), (3,), (4,)]\nassert     combinations_colors([1,2,3,4], 0) == []\nassert     combinations_colors([1,2,3], 1) == [[(1,)], (2,), (3,)]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     combinations_colors([\"a\",\"b\",\"c\"], 1) == [\"('a',)\",(\"('b',)\",(\"('c',)\",\"\"))]\nassert     combinations_colors([\"a\",\"b\",\"c\"], 2) == [\"('a', 'b')\",(\"('a', 'c')\",\"('b', 'c')\",\"(\"(\"a', 'c')\",\"(\"(\"b', 'c'))\"]\nassert     combinations_colors([\"a\",\"b\",\"c\"], 3) == [\"('a', 'b', 'c')\",\"('a', 'c', 'b')\",\"('b', 'c', 'a')\",\"(\"(\"a', 'b', 'c')\",\"(\"(\"a', 'c', 'b')\",\"(\"(\"b', 'c', 'a'))\"]\nassert     combinations_colors([\"a\",\"b\",\"c\"], 4) == [\"('a', 'b', 'c', 'a')\",\"('a', 'b', 'c', 'b')\",\"('a', 'b', 'c', 'c')\",\"(\"(\"a', 'b', 'c', 'a')\",\"(\"(\"a', 'b', 'c', 'b')\",\"(\"(\"a', 'b', 'c', 'c'))\",\"(\"(\"a', 'c', 'b', 'a')\",\"(\"(\"a', 'c', 'b', 'b')\",\"(\"(\"a', 'c', 'b', 'c')\",\"(\"(\"a', 'c', 'c', 'a')\",\"(\"(\"a', 'c', 'c', 'b')\",\"(\"(\"a', 'c', 'c', 'c'))\"]\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert count_Primes_nums(8) == 5\n\n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n % 2 == 0:\n        return 0\n    for i in range(3,n,2):\n        if n % i == 0:\n            return 0\n    return 1\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_Primes_nums(0) == 0\nassert     count_Primes_nums(2) == 2\nassert     count_Primes_nums(4) == 2\nassert     count_Primes_nums(6) == 5\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_Primes_nums(10) == 5\nassert     count_Primes_nums(100) == 25\nassert     count_Primes_nums(1000) == 253\n\n\ndef count_Primes_nums_sorted(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number sorted.\n    '''\n    pass\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_Primes_nums(1) == 0\nassert     count_Primes_nums(2) == 1\nassert     count_Primes_nums(3) == 2\nassert     count_Primes_nums(5) == 2\nassert     count_Primes_nums(9) == 4\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert count_Primes_nums(0) == 0, \"input 0\"\nassert count_Primes_nums(1) == 0, \"input 1\"\nassert count_Primes_nums(2) == 1, \"input 2\"\nassert count_Primes_nums(3) == 2, \"input 3\"\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_Primes_nums(0) == 0\nassert count_Primes_nums(1) == 0\nassert count_Primes_nums(2) == 1\nassert count_Primes_nums(3) == 2\nassert count_Primes_nums(4) == 2\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_Primes_nums(2) == 1, \"correctness of count_Primes_nums function\"\nassert     count_Primes_nums(3) == 2, \"correctness of count_Primes_nums function\"\nassert     count_Primes_nums(4) == 2, \"correctness of count_Primes_nums function\"\nassert     count_Primes_nums(5) == 3, \"correctness of count_Primes_nums function\"\nassert     count_Primes_nums(6) == 3, \"correctness of count_Primes_nums function\"\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ncount_Primes_nums(4) == 2\ncount_Primes_nums(10) == 4\ncount_Primes_nums(11) == 5\ncount_Primes_nums(25) == 5\ncount_Primes_nums(60) == 9\ncount_Primes_nums(60) == 10\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount_Primes_nums(10000) == 311\ncount"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    count_Primes_nums(5) == 1\nassert count_Primes_nums(6) == 2\nassert count_Primes_nums(10) == 3\nassert count_Primes_nums(50) == 8"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_Primes_nums(3) == 2\nassert     count_Primes_nums(6) == 4\nassert     count_Primes_nums(1) == 0\nassert     count_Primes_nums(10) == 4\nassert     count_Primes_nums(4) == 3\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef double_char(str):\n    '''\n    Write a function that takes in a string and returns a new string that contains only the characters that are at least as long as 2 characters.\n    '''\n    pass\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     swap_numbers(1, 2) == (2, 1)\nassert swap_numbers(5, 3) == (3, 5)\n\ndef bigger_price(limit, data):\n    '''\n    Write a function that takes a limit, \n    a list of prices, and returns the biggest one.\n    '''\n    pass\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     swap_numbers(12, 3) == (3, 12), \"Wrong result!\"\nassert swap_numbers(9, 7) == (7, 9), \"Wrong result!\"\nassert swap_numbers(-9, 7) == (7, -9), \"Wrong result!\"\nassert swap_numbers(9, -7) == (-7, 9), \"Wrong result!\"\nassert swap_numbers(5, 5) == (5, 5), \"Wrong result!\"\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     swap_numbers(4,5) == (5,4)\nassert     swap_numbers(2,4) == (4,2)\n\n'''\nCreate a function that takes a list of numbers as a parameter and then returns the largest number.\n'''\ndef largest_number(a_list):\n    '''\n    Write a function that takes in a list of numbers and returns the largest number.\n    '''\n    pass\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     swap_numbers(1, 2) == (2, 1)\nassert     swap_numbers(2, 1) == (1, 2)\nassert     swap_numbers(3, 2) == (2, 3)\nassert     swap_numbers(4, 2) == (2, 4)\nassert     swap_numbers(5, 6) == (6, 5)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     swap_numbers(1, 2) == (2, 1)\nassert swap_numbers(1, 1) == (1, 1)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     swap_numbers((4,5,2,9),(4,5,9,2)) == (5,4,2,9)\nassert swap_numbers((6,3,9,4),(9,6,3,4)) == (6,9,3,4)\nassert swap_numbers((1,2,3,4),(4,3,2,1)) == (4,3,2,1)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     swap_numbers(3,4) == (4,3)\nassert swap_numbers(100,45) == (45,100)\nassert swap_numbers(2,4) == (4,2)\nassert swap_numbers(3,3) == (3,3)\nassert swap_numbers(6,8) == (8,6)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef make_dict(n):\n    '''\n    Write a function that takes in an integer n and returns a dictionary\n    that has all of the numbers from 0 through n in it.\n    '''\n    pass\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     swap_numbers(5,9) == (9,5), 'Fail!'\nassert     swap_numbers(1,2) == (2,1), 'Fail!'\n\n\ndef sum_tuple(a):\n    '''\n    Write a function that takes in a tuple and returns the sum of all the numbers in the tuple.\n    '''\n    pass\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     maximize_elements(test_tup1, test_tup2) == (test_tup1[0] + test_tup2[0], test_tup1[1] + test_tup2[1])\nprint('The assert statement is correct.')\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     maximize_elements((1,2,3,4),(2,3,4,5)) == (1,2,3,4)\nassert maximize_elements((1,2,3,4),(5,4,3,2)) == (1,2,3,4)\nassert maximize_elements((4,3,2,1),(5,4,3,2)) == (4,3,2,1)\nassert maximize_elements((4,3,2,1),(1,5,4,3)) == (4,3,2,1)\nassert maximize_elements((1,2,3,4),(2,3,4,5)) == (2,3,4,5)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     maximize_elements((1, 4), (3, -1)) == (4, 1)\nassert maximize_elements((0, 1), (1, 0)) == (0, 0)\nassert maximize_elements((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 4)\n\nprint('\"maximize_elements\" function: passed'"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     maximize_elements((1,2,3), (2,3,4)) == (2,3,4) == (2,4,3)\nassert maximize_elements((1,2,3), (1,3,4)) == (1,3,4) == (2,3,4)\nassert maximize_elements((1,2,3), (2,1,4)) == (2,1,4) == (2,2,4)\n\n'''\n- \ud2b9\uc815 \uc6d0\uc18c\uac00 \uc18d\ud55c \uc6d0\uc18c\uc758 \uac1c\uc218\n    - \ub370\uc774\ud130\uc758 \uac1c\uc218\n    - \ub370\uc774\ud130\uc758 \uac1c\uc218\uc640 \ub3d9\uc77c\ud55c \uc218\uac00 \uc18d\ud55c \ub370\uc774\ud130\uc758 \uc704\uce58\uac00 \ub2e4\ub978 \uacbd\uc6b0\n    - \ub2e4\uc591\ud55c \ub370\uc774\ud130\ub4e4\uc774 \uc18d\ud55c \uc6d0\uc18c\uc758 \uac1c\uc218\ub97c \uc13c\ub2e4.\n    - \ub370\uc774\ud130\uc758 \uac1c\uc218\ub97c \uae30\ub85d\ud558\ub294 \ub9ac\uc2a4\ud2b8 \uc790\ub8cc\ud615\uc774\ub2e4.\n    - \ub370\uc774\ud130\ub4e4\uc758 \uc704\uce58\uac00 \uac19\uc740 \uacbd\uc6b0\n'''\ndef elements_count(arr):\n    # set\uc744 \uc774\uc6a9\ud574 \uc911\ubcf5\uc744 \uc81c\uac70\ud558\uace0 \ub0b4\ubd80\uc5d0\uc11c \uc624\ub984\ucc28\uc21c \uc815\ub82c\n    return {i:0 for i in set(arr)}.update(*[{i:arr.count(i)} for i in arr])\n\n'''\n- \uc774\uc911\uc5d0\uc11c \uac00\uc7a5 \ud070 \uac12\n    - \uc22b\uc790\uac00 \ub354 \ud070 \uc22b\uc790\uac00 \ub098\uc62c \uacbd\uc6b0, \uc989, \ub354 \ud070 \uc22b\uc790\uac00 \ubc18\ub4dc\uc2dc \uc624\ub984\ucc28\uc21c \uc815\ub82c\ub41c \uacbd\uc6b0\n'''\ndef max_of_elements(arr):\n    if not arr:\n        return -1\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                return arr[i]\n    return arr[-1]\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     (maximize_elements((2, 3), (5, 6))) == (2, 5), \"Wrong Answer\"\nassert     (maximize_elements((2, 3), (5, 6, 7))) == (2, 6), \"Wrong Answer\"\nassert     (maximize_elements((3, 3, 3), (2, 2, 2))) == (3, 3), \"Wrong Answer\"\nassert     (maximize_elements((0, 0, 0), (0, 0, 0))) == (0, 0), \"Wrong Answer\"\n\nprint(\"TESTS: OK\")\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     maximize_elements((3, 1), (1, 2)) == (3, 1)\nassert     maximize_elements((6, 3), (1, 1)) == (6, 3)\nassert     maximize_elements((1, 1), (3, 2)) == (3, 2)\nassert     maximize_elements((0, 0), (0, 0)) == (0, 0)\nassert     maximize_elements((1, 2), (3, 1)) == (1, 2)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     maximize_elements((0,1,2), (1,2,3)) == (1,2,3)\nassert     maximize_elements((0,1,2), (2,1,0)) == (2,1,0)\nassert     maximize_elements((1,1,1,1), (1,2,2,3)) == (1,2,2,3)\nassert     maximize_elements((0,0,0), (1,2,2)) == (1,2,2)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == '__main__':\n    test_tup1 = (1,2,4,6)\n    test_tup2 = (1,2,4,5)\n    print('Maximum elements = ', maximize_elements(test_tup1, test_tup2)"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ntest_tup1 = (1, 2, 3, 4)\ntest_tup2 = (3, 4, 5, 6)\nmaximize_elements(test_tup1, test_tup2)\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     newman_prime(0) == 2\nassert     newman_prime(1) == 3\nassert     newman_prime(2) == 5\nassert     newman_prime(3) == 7\nassert     newman_prime(4) == 11\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nnewman_prime(9) == 547\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nnewman_prime(5) == 5\nnewman_prime(6) == 5\nnewman_prime(7) == 5\nnewman_prime(8) == 6\nnewman_prime(9) == 7\nnewman_prime(10) == 7\nnewman_prime(11) == 7\nnewman_prime(12) == 7\nnewman_prime(13) == 8\nnewman_prime(14) == 8\nnewman_prime(15) == 8\nnewman_prime(16) == 8\nnewman_prime(17) == 8\nnewman_prime(18) == 8\nnewman_prime(19) == 9\nnewman_prime(20) == 9\nnewman_prime(21) == 9\nnewman_prime(22) == 9\nnewman_prime(23) == 9\nnewman_prime(24) == 9\nnewman_prime(25) == 10\nnewman_prime(26) == 10\nnewman_prime(27) == 10\nnewman_prime(28) == 10\nnewman_prime(29) == 10\nnewman_prime(30) == 10\nnewman_prime(31) == 10\nnewman_prime(32) == 11\nnewman_prime(33) == 11\nnewman_prime(34) == 11\nnewman_prime(35) == 11\nnewman_prime(36) == 11\nnewman_prime(37) == 11\nnewman_prime(38) == 11\nnewman_prime(39) == 11\nnewman_prime(40) == 11\nnewman_prime(41) == 11\nnewman_prime(42) == 11\nnewman_prime(43) == 12\nnewman_prime(44) == 12\nnewman_prime(45) == 12\nnewman_prime(46) == 12\nnewman_prime(47) == 12\nnewman_prime(48) == 12\nnewman_prime(49) == 12\nnewman_prime(50) == 12\nnewman_prime(51) == 12\nnewman_prime(52) == 12\nnewman_prime(53) == 13\nnewman_prime(54) == 13\nnewman_prime(55) == 13\nnewman_prime(56) == 13\nnewman_prime(57) == 13\nnewman_prime(58) == 13\nnewman_prime(59) == 13\nnewman_prime(60) == 13\nnewman_prime(61) == 13\nnewman_prime(62) == 13\nnewman_prime(63) == 13\nnewman_prime(64) == 14\nnewman_prime(65) == 14\nnewman_prime(66) == 14\nnewman_prime(67) == 14\nnewman_prime(68) == 14\nnewman_prime(69) == 14\nnewman_prime(70) == 14\nnewman_prime(71) == 14\nnewman_prime(72) == 14\nnewman_prime(73) == 14\nnewman_prime(74) == 14\nnewman_prime(75) == 14\nnewman_prime(76) == 14\nnewman_prime(77) == 14\nnewman_prime(78) == 14\nnewman_prime(79) == 14\nnewman_prime(80) == 14\nnewman_prime(81) == 14\nnewman_prime(82) == 14\nnewman_prime(83) == 14\nnewman_prime(84) == 15\nnewman_prime(85) == 15\nnewman_prime(86) == 15\nnewman_prime(87) == 15\nnewman_prime(88) == 15\nnewman_prime(89) == 15\nnewman_prime(90) == 15\nnewman_prime(91) == 16\nnewman_prime(92) == 16\nnewman_prime(93) == 16\nnewman_prime(94) == 16\nnewman_prime(95) == 16\nnewman_prime(96) == 16\nnewman_prime(97) == 16\nnewman_prime(98) == 16\nnewman_prime(99) == 16\nnewman_prime(100) == 17\nnewman_prime(101) == 17\nnewman_prime(102) == 17\nnewman_prime(103) == 17\nnewman_prime(104) == 17\nnewman_prime(105) == 17\nnewman_prime(106) == 17\nnewman_prime(107) == 17\nnewman_prime(108) == 17\nnewman_prime(109) == 17\nnewman_prime(110) == 17\nnewman_prime(111) == 18\nnewman_prime(112) == 18\nnewman_prime(113) == 18\nnewman_prime(114) == 18\nnewman_prime(115) == 18\nnewman_prime(116) == 18\nnewman_prime(117) == 18\nnewman_prime(118) == 18\nnewman_prime(119) == 18\nnewman_prime(120) == 18\nnewman_prime(121) == 18\nnewman_prime(122) == 18\nnewman_prime(123) == 18\nnewman_prime(124) == 18\nnewman_prime(125) == 18\nnewman_prime(126) == 18\nnewman_prime(127) == 18\nnewman_prime(128) == 18\nnewman_prime(129) == 18\nnewman_prime(130) == 18\nnewman_prime(131) == 18\nnewman_prime(132) == 18\nnewman_prime(133) == 19\nnewman_prime(134) == 19\nnewman_prime(135) == 19\nnewman_prime(136) == 19\nnewman_prime(137) == 19\nnewman_prime(138) == 19\nnewman_prime(139) == 19\nnewman_prime(140) == 19\nnewman_prime(141) == 19\nnewman_prime(142) == 19\nnewman_prime(143) == 19\nnewman_prime(144) == 19\nnewman_prime(145) == 19\nnewman_prime(146) == 19\nnewman_prime(147) == 19\nnewman_prime(148) == 19\nnewman_prime(149) == 19\nnewman_prime(150) == 19\nnewman_prime(151) == 19\nnewman_prime(152) == 19\nnewman_prime(153) == 19\nnewman_prime(154) == 19\nnewman_prime(155) == 19\nnewman_prime(156) == 19\nnewman_prime(157) == 19\nnewman_prime(158) == 19\nnewman_prime(159) == 19\nnewman_prime(160) == 19\nnewman_prime(161) == 19\nnewman_prime(162) == 19\nnewman_prime(163) == 19\nnewman_prime(164) == 19\nnewman_prime(165) == 19\nnewman_prime(166) == 19\nnewman_prime(167) == 19\nnewman_prime(168) == 19\nnewman_prime(169) == 19\nnewman_prime(170) == 19\nnewman_prime(171) == 20\nnewman_prime(172) == 20\nnewman_prime(173) == 20\nnewman_prime(174) == 20\nnewman_prime(175) == 20\nnewman_prime(176) == 20\nnewman_prime(177) == 20\nnewman_prime(178) == 20\nnewman_prime(179) == 20\nnewman_prime(180) == 20\nnewman_prime(181) == 20\nnewman_prime(182) == 20\nnewman_prime(183) == 20\nnewman_prime(184) == 20\nnewman_prime(185) == 20\nnewman_prime(186) == 20\nnewman_prime(187) == 20\nnewman_prime(188) == 20\nnewman_prime(189) == 20\nnewman_prime(190) == 20\nnewman_prime(191) == 20\nnewman_prime(192) == 20\nnewman_prime(193) == 20\nnewman_prime(194) == 20\nnewman_prime(195) == 20\nnewman_prime(196) == 21\nnewman_prime(197) == 21\nnewman_prime(198) == 21\nnewman_prime(199) == 21\nnewman_prime(200) == 21\nnewman_prime(201) == 21\nnewman_prime(202) == 21\nnewman_prime(203) == 21\nne"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nn = 17\nprint('{}th prime: {}'.format(n, newman_prime(n))) \n\n\ndef is_prime(n):\n    '''\n    Write a function to determine whether a number is prime.\n    '''\n    pass\n\n\ndef is_prime_sqrt(n):\n    '''\n    Write a function to determine whether a number is prime.\n    '''\n    pass"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     newman_prime(10) == 29\nassert newman_prime(0) == 2\nassert newman_prime(1) == 3\nassert newman_prime(2) == 5\nassert newman_prime(3) == 7\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nnewman_prime(2) == 2, \"Should be 2\"\nassert \nnewman_prime(3) == 3, \"Should be 3\"\nassert \nnewman_prime(4) == 11, \"Should be 11\"\nassert \nnewman_prime(5) == 127, \"Should be 127\"\nassert \nnewman_prime(6) == 533, \"Should be 533\"\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     newman_prime(1) == 2\nassert     newman_prime(2) == 5\nassert     newman_prime(3) == 7\nassert     newman_prime(4) == 11\nassert     newman_prime(5) == 13\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n'''\n\n_--------------------------------------------------------------------------------------------------------------------_\n3. Write a Python function to print the first N fibonacci numbers, where N is a given number.\n\n'''\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     division_elements((1, 2, 3), (1, 2, 3)) == (1, 2, 3)\nassert     division_elements((1, 2, 3), (1, 4, 3)) == (1, 2, 3)\nassert     division_elements((1, 2, 3), (2, 4, 3)) == (1, 2, 3)\nassert     division_elements((1, 2, 3), (2, 2, 3)) == (1, 2, 3)\nassert     division_elements((1, 2, 3), (0, 2, 3)) == (1, 0, 3)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     division_elements((1, 2), (4, 5)) == (0.2, 0.8), 'Example 1.1'\nassert     division_elements((1, 1), (4, 5)) == (0.5, 0.5), 'Example 1.2'\nassert     division_elements((1, 2), (2, 2)) == (0.5, 0.5), 'Example 1.3'\nassert     division_elements((1, 2), (4, 3)) == (0.8, 0.6), 'Example 1.4'\nassert     division_elements((1, 2), (4, 5)) == (0.2, 0.8), 'Example 1.5'\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     division_elements((1,2,3), (1,1,1)) == (1,1,1), \"The divided values should be (1,1,1)\"\nassert     division_elements((1,2,3), (1,1,0)) == (1,1,0), \"The divided values should be (1,1,0)\"\nassert     division_elements((1,2,3), (1,1,2)) == (1,1,2), \"The divided values should be (1,1,2)\"\nassert     division_elements((1,2,3), (1,0,1)) == (1,0,1), \"The divided values should be (1,0,1)\"\n\ndef element_addition(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs element-wise addition operation element-wise across the given tuples.\n    '''\n    pass\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     (division_elements((1, 2), (1, 2)) == (1, 1)), 'test failed - (1, 2)/(1, 2)'\nassert     (division_elements((2, 3), (1, 2)) == (2, 1)), 'test failed - (2, 3)/(1, 2)'\nassert     (division_elements((3, 4), (1, 2)) == (3, 1)), 'test failed - (3, 4)/(1, 2)'\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    pass\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     division_elements((1,2),(3,4)) == (0.5, 0.3333333333333333)\nassert     division_elements((1,2),(3,0)) == (0, 0)\nassert     division_elements((-1,4),(3,0)) == (0, -4)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     division_elements((1,2),(3,4)) == (0.5,0.5)\nassert     division_elements((2,4),(0,5)) == (2,0)\n\ndef string_concatenation(test_string1, test_string2):\n    '''\n    Write a function that takes in two strings and concatenates them together.\n    '''\n    pass\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     division_elements((2, 4, 6), (8, 4, 2)) == (0.5, 1.0, 2.5)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     division_elements((4, 2), (2, 2)) == (2, 2), \"Wrong answer\"\nassert     division_elements((5, 2), (2, 2)) == (5, 2), \"Wrong answer\"\nassert     division_elements((1, 2), (2, 2)) == (0, 2), \"Wrong answer\"\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     split_two_parts([1, 2, 3], 2) == ([1, 2], [3])\nassert     split_two_parts([1, 2, 3, 4, 5, 6], 1) == ([1, 2], [3, 4, 5, 6])\nassert     split_two_parts([1, 2, 3, 4, 5, 6, 7], 3) == ([1, 2, 3], [4, 5, 6, 7])\nassert     split_two_parts([1, 2, 3, 4, 5, 6, 7], 4) == ([1, 2, 3, 4], [5, 6, 7])\nassert     split_two_parts([1, 2, 3, 4, 5, 6, 7], 2) == ([1, 2], [3, 4, 5, 6, 7])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert split_two_parts([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"], 3) == (([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"], [\"7\", \"8\", \"9\", \"10\"]), ([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"], [\"8\", \"9\", \"10\"]))\nassert split_two_parts([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"], 4) == (([\"1\", \"2\", \"3\", \"4\"], [\"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]), ([\"1\", \"2\", \"3\", \"4\", \"5\"], [\"6\", \"7\", \"8\", \"9\", \"10\"]))\nassert split_two_parts([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"], 5) == (([\"1\", \"2\", \"3\", \"4\", \"5\"], [\"6\", \"7\", \"8\", \"9\", \"10\"]), ([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"], [\"7\", \"8\", \"9\", \"10\"]))\nassert split_two_parts([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"], 6) == (([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"], [\"7\", \"8\", \"9\", \"10\"]), ([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"], [\"8\", \"9\", \"10\"]))\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     split_two_parts([1,2,3,4,5,6,7,8,9], 4) == ([1, 2, 3, 4, 5, 6], [7, 8, 9])\nassert split_two_parts([1,2,3,4,5,6,7,8,9], 3) == ([1, 2, 3], [4, 5, 6, 7, 8, 9])\nassert     split_two_parts([1,2,3,4,5,6,7,8,9], 1) == ([1, 2, 3, 4, 5, 6, 7, 8, 9], [])\nassert     split_two_parts([1,2,3,4,5,6,7,8,9], 5) == ([1, 2, 3, 4, 5], [6, 7, 8, 9])\nassert     split_two_parts([1,2,3,4,5,6,7,8,9], 2) == ([1, 2], [3, 4, 5, 6, 7, 8, 9])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     split_two_parts([1, 2, 3, 4], 2) == ([1, 2], [3, 4]), \"Wrong Answer\"\nassert     split_two_parts([1, 2, 3, 4], 2) == ([1, 2], [3, 4]), \"Wrong Answer\"\nassert     split_two_parts([1, 2, 3, 4], 4) == ([1, 2, 3, 4], []), \"Wrong Answer\"\nassert     split_two_parts([1, 2, 3, 4], 5) == ([1, 2, 3, 4], []), \"Wrong Answer\"\nassert     split_two_parts([1, 2, 3, 4], 8) == ([1, 2, 3, 4], []), \"Wrong Answer\"\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef split_three_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into three parts where the length of the first part of the list is L, the length of the second part of the list is L+1, and the length of the third part of the list is L+2. If the length of the list is not divisible by 3, then the function should return None. \n    '''\n    pass\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nsplit_two_parts([1, 2, 3, 4, 5, 6, 7], 5) == ([1, 2, 3, 4], [5, 6, 7])\nprint(\"\\033[32m\"+\"\u2714\"+\"\\033[0m\"+\" The function looks correct.\")\n\nprint(\"\\n\")\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     split_two_parts([1, 2, 3, 4, 5], 3) == ([1, 2, 3], [4, 5])\nassert     split_two_parts([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5])\nassert     split_two_parts([1, 2, 3], 4) == ([1, 2, 3], [])\nassert     split_two_parts([1, 2, 3], 1) == ([1], [2, 3])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     split_two_parts([1, 2, 3, 4, 5, 6, 7, 8], 4) == ([1, 2, 3, 4], [5, 6, 7, 8])\nassert     split_two_parts([1, 2, 3, 4, 5, 6, 7, 8], 3) == ([1, 2, 3], [4, 5, 6, 7, 8])\nassert     split_two_parts([1, 2, 3, 4, 5, 6, 7, 8], 2) == ([1, 2], [3, 4, 5, 6, 7, 8])\nassert     split_two_parts([1, 2, 3, 4, 5, 6, 7, 8], 1) == ([1], [2, 3, 4, 5, 6, 7, 8])\nassert     split_two_parts([1, 2, 3, 4, 5, 6, 7, 8], 0) == ([1], [2, 3, 4, 5, 6, 7, 8])\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     dog_age(5) == 7, 'dog_age(5)'\nassert     dog_age(4) == 6, 'dog_age(4)'\nassert     dog_age(100) == 120, 'dog_age(100)'\nassert     dog_age(20) == 120, 'dog_age(20)'\n\nprint('All test passed!'"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     dog_age(80) == 20\nassert     dog_age(90) == 25\nassert     dog_age(110) == 40\nassert     dog_age(13) == 0\nassert     dog_age(68) == 25\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     dog_age(2) == 2\nassert     dog_age(22) == 3\nassert     dog_age(60) == 5\nassert     dog_age(60.1) == 5.1\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ndog_age(2) == 8\ndog_age(30) == 243\ndog_age(100) == 650"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     dog_age(5) == 7, 'WRONG!'\nassert     dog_age(12) == 86, 'WRONG!'\nassert     dog_age(0) == 0, 'WRONG!'\nprint('You are good!')\n\n'''\n    Q.\n    Write a function that reads a CSV file.\n    The file should have the following format:\n        First Name,Last Name,Age,Occupation,Income\n    For example:\n        John,Doe,24,10,10\n    Read the CSV file and return a list of dictionaries\n    Each dictionary should have the keys 'name', 'age', 'occupation',\n    'income' and each value should be a string in CSV format.\n'''"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef reverse_list(L):\n    '''\n    Write a function that takes in a list and reverses the order of the elements in place.\n    '''\n    pass\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     list_split([1, 2, 3, 4, 5], 3) == [[1, 2, 3], [4, 5]]\nassert     list_split([1, 2, 3, 4, 5], 4) == [[1, 2, 3, 4], [5]]\nassert     list_split([1, 2, 3, 4, 5], 5) == [[1, 2, 3, 4, 5]]\nassert     list_split([1, 2, 3, 4, 5], 6) == [[1, 2, 3, 4, 5]]\nassert     list_split([1, 2, 3, 4, 5], 7) == [[1, 2, 3, 4, 5]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert list_split([1,2,3,4,5,6,7,8], 3) == [[1, 2, 3], [4, 5, 6], [7, 8]]\nassert list_split([1,2,3,4,5,6,7,8], 5) == [[1, 2, 3, 4], [5, 6, 7, 8]]\nassert list_split([1,2,3,4,5,6,7,8], 7) == [[1, 2, 3, 4, 5], [6, 7, 8]]\nassert list_split([1,2,3,4,5,6,7,8], 8) == [[1, 2, 3, 4, 5, 6], [7, 8]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     list_split([1,2,3], 1) == [[1]]\nassert     list_split([1,2,3], 2) == [[1], [2], [3]]\nassert     list_split([1,2,3], 3) == [[1], [2], [3]]\nassert     list_split([1,2,3], 4) == [[1], [2], [3]]\nassert     list_split([1,2,3], 5) == [[1], [2], [3]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 2) == [[1, 2], [3, 4, 5], [6, 7, 8], [9]]\nassert     list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [[1, 2, 3], [4, 5, 6, 7], [8, 9]]\nassert     list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == [[1, 2, 3, 4], [5, 6, 7, 8], [9]]\nassert     list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == [[1, 2, 3, 4, 5], [6, 7, 8, 9]]\nassert     list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 6) == [[1, 2, 3, 4, 5, 6], [7, 8, 9]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     list_split([1, 2, 3, 4, 5, 6, 7, 8], 1) == [[1], [2], [3], [4], [5], [6], [7], [8]]\nassert     list_split([1, 2, 3, 4, 5, 6, 7, 8], 2) == [[1, 2], [3, 4], [5, 6], [7, 8]]\nassert     list_split([1, 2, 3, 4, 5, 6, 7, 8], 3) == [[1, 2, 3], [4, 5, 6], [7, 8]]\nassert     list_split([1, 2, 3, 4, 5, 6, 7, 8], 4) == [[1, 2, 3, 4], [5, 6, 7], [8]]\nassert     list_split([1, 2, 3, 4, 5, 6, 7, 8], 5) == [[1, 2, 3, 4, 5], [6, 7, 8]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    list_split([1,2,3,4], 2) == [[1,2],[3,4]]\n    list_split([1,2,3,4,5,6,7], 3) == [[1,2,3],[4,5,6],[7]]\n    list_split([1,2,3,4,5,6,7,8,9], 4) == [[1,2,3,4],[5,6,7],[8,9]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]\nassert list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [[1, 2], [3, 4], [5, 6], [7, 8], [9], [10]]\nassert list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1) == [[1], [2], [3], [4], [5], [6], [7], [8], [9], [10]]\nassert list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     list_split([1, 2, 3, 4], 3) == [[1], [2], [3], [4]]\nassert     list_split(['a', 'b', 'c', 'd'], 3) == [['a', 'b', 'c'], ['d']]\nassert     list_split([1, 2, 3, 4, 5], 2) == [[1, 2], [3, 4], [5]]\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     lateralsurface_cube(1) == 4\nassert     lateralsurface_cube(2) == 6\nassert     lateralsurface_cube(3) == 8\nassert     lateralsurface_cube(4) == 12\nassert     lateralsurface_cube(5) == 20\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef lateralsurface_dodecahedron(d):\n    '''\n    Write a function to find the lateral surface area of a dodecahedron given its \n    radius.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     lateralsurface_cube(2) == 8\nassert     lateralsurface_cube(1) == 1\nassert     lateralsurface_cube(4) == 20\nassert     lateralsurface_cube(5) == 34\nassert     lateralsurface_cube(6) == 56\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nlateralsurface_cube(1) == 6\nlateralsurface_cube(2) == 18\nlateralsurface_cube(3) == 36\nlateralsurface_cube(4) == 48\nlateralsurface_cube(5) == 72\nlateralsurface_cube(6) == 90\nlateralsurface_cube(7) == 108\nlateralsurface_cube(8) == 144\nlateralsurface_cube(9) == 180\nlateralsurface_cube(10) == 216\nlateralsurface_cube(11) == 216\nlateralsurface_cube(12) == 216\nlateralsurface_cube(13) == 216\nlateralsurface_cube(14) == 216\nlateralsurface_cube(15) == 216\nlateralsurface_cube(16) == 216\nlateralsurface_cube(17) == 216\nlateralsurface_cube(18) == 216\nlateralsurface_cube(19) == 216\nlateralsurface_cube(20) == 216\nlateralsurface_cube(21) == 216\nlateralsurface_cube(22) == 216\nlateralsurface_cube(23) == 216\nlateralsurface_cube(24) == 216\nlateralsurface_cube(25) == 216\nlateralsurface_cube(26) == 216\nlateralsurface_cube(27) == 216\nlateralsurface_cube(28) == 216\nlateralsurface_cube(29) == 216\nlateralsurface_cube(30) == 216\nlateralsurface_cube(31) == 216\nlateralsurface_cube(32) == 216\nlateralsurface_cube(33) == 216\nlateralsurface_cube(34) == 216\nlateralsurface_cube(35) == 216\nlateralsurface_cube(36) == 216\nlateralsurface_cube(37) == 216\nlateralsurface_cube(38) == 216\nlateralsurface_cube(39) == 216\nlateralsurface_cube(40) == 216\nlateralsurface_cube(41) == 216\nlateralsurface_cube(42) == 216\nlateralsurface_cube(43) == 216\nlateralsurface_cube(44) == 216\nlateralsurface_cube(45) == 216\nlateralsurface_cube(46) == 216\nlateralsurface_cube(47) == 216\nlateralsurface_cube(48) == 216\nlateralsurface_cube(49) == 216\nlateralsurface_cube(50) == 216\nlateralsurface_cube(51) == 216\nlateralsurface_cube(52) == 216\nlateralsurface_cube(53) == 216\nlateralsurface_cube(54) == 216\nlateralsurface_cube(55) == 216\nlateralsurface_cube(56) == 216\nlateralsurface_cube(57) == 216\nlateralsurface_cube(58) == 216\nlateralsurface_cube(59) == 216\nlateralsurface_cube(60) == 216\nlateralsurface_cube(61) == 216\nlateralsurface_cube(62) == 216\nlateralsurface_cube(63) == 216\nlateralsurface_cube(64) == 216\nlateralsurface_cube(65) == 216\nlateralsurface_cube(66) == 216\nlateralsurface_cube(67) == 216\nlateralsurface_cube(68) == 216\nlateralsurface_cube(69) == 216\nlateralsurface_cube(70) == 216\nlateralsurface_cube(71) == 216\nlateralsurface_cube(72) == 216\nlateralsurface_cube(73) == 216\nlateralsurface_cube(74) == 216\nlateralsurface_cube(75) == 216\nlateralsurface_cube(76) == 216\nlateralsurface_cube(77) == 216\nlateralsurface_cube(78) == 216\nlateralsurface_cube(79) == 216\nlateralsurface_cube(80) == 216\nlateralsurface_cube(81) == 216\nlateralsurface_cube(82) == 216\nlateralsurface_cube(83) == 216\nlateralsurface_cube(84) == 216\nlateralsurface_cube(85) == 216\nlateralsurface_cube(86) == 216\nlateralsurface_cube(87) == 216\nlateralsurface_cube(88) == 216\nlateralsurface_cube(89) == 216\nlateralsurface_cube(90) == 216\nlateralsurface_cube(91) == 216\nlateralsurface_cube(92) == 216\nlateralsurface_cube(93) == 216\nlateralsurface_cube(94) == 216\nlateralsurface_cube(95) == 216\nlateralsurface_cube(96) == 216\nlateralsurface_cube(97) == 216\nlateralsurface_cube(98) == 216\nlateralsurface_cube(99) == 216\nlateralsurface_cube(100) == 216\nlateralsurface_cube(101) == 216\nlateralsurface_cube(102) == 216\nlateralsurface_cube(103) == 216\nlateralsurface_cube(104) == 216\nlateralsurface_cube(105) == 216\nlateralsurface_cube(106) == 216\nlateralsurface_cube(107) == 216\nlateralsurface_cube(108) == 216\nlateralsurface_cube(109) == 216\nlateralsurface_cube(110) == 216\nlateralsurface_cube(111) == 216\nlateralsurface_cube(112) == 216\nlateralsurface_cube(113) == 216\nlateralsurface_cube(114) == 216\nlateralsurface_cube(115) == 216\nlateralsurface_cube(116) == 216\nlateralsurface_cube(117) == 216\nlateralsurface_cube(118) == 216\nlateralsurface_cube(119) == 216\nlateralsurface_cube(120) == 216\nlateralsurface_cube(121) == 216\nlateralsurface_cube(122) == 216\nlateralsurface_cube(123) == 216\nlateralsurface_cube(124) == 216\nlateralsurface_cube(125) == 216\nlateralsurface_cube(126) == 216\nlateralsurface_cube(127) == 216\nlateralsurface_cube(128) == 216\nlateralsurface_cube(129) == 216\nlateralsurface_cube(130) == 216\nlateralsurface_cube(131) == 216\nlateralsurface_cube(132) == 216\nlateralsurface_cube(133) == 216\nlateralsurface_cube(134) == 216\nlateralsurface_cube(135) == 216\nlateralsurface_cube(136) == 216\nlateralsurface_cube(137) == 216\nlateralsurface_cube(138) == 216\nlateralsurface_cube(139) == 216\nlateralsurface_cube(140) == 216\nlateralsurface_cube(141) == 216\nlateralsurface_cube(142) == 216\nlateralsurface_cube(143) == 216\nlateralsurface_cube(144) == 216\nlateralsurface_cube(145) == 216\nlateralsurface_cube(146) == 216\nlateralsurface_cube(147) == 216\nlateralsurface_cube(148) == 216\nlateralsurface_cube(149) == 216\nlateralsurface_cube(150) == 216\nlateralsurface_cube(151) == 216\nlateralsurface_cube(152) == 216\nlateralsurface_cube(153) == 216\nlateralsurface_cube(154) == 216\nlateralsurface_cube(155) == 216\nlateralsurface_cube(156) == 216\nlateralsurface_cube(157) == 216\nlateralsurface_cube(158) == 216\nlateralsurface_cube(159) == 216\nlateralsurface_cube(160) == 216\nlateralsurface_cube(161) == 216\nlateralsurface_cube(162) == 216\nlateralsurface_cube(163) == 216\nlateralsurface_cube(164) == 216\nlateralsurface_cube(165) == 216\nlateralsurface_cube(166) == 21"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     lateralsurface_cube(4) == 20\nassert     lateralsurface_cube(5) == 35\nassert     lateralsurface_cube(6) == 48\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     lateralsurface_cube(1)==0, 'input error'\nassert lateralsurface_cube(2)==2, 'input error'\nassert lateralsurface_cube(3)==12, 'input error'\nassert lateralsurface_cube(4)==48, 'input error'\nassert lateralsurface_cube(5)==90, 'input error'\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nlateralsurface_cube(2) == 8\nlateralsurface_cube(3) == 20\nlateralsurface_cube(4) == 24\nlateralsurface_cube(5) == 60\nlateralsurface_cube(6) == 108\nlateralsurface_cube(7) == 140\nlateralsurface_cube(8) == 256\nlateralsurface_cube(9) == 324\nlateralsurface_cube(10) == 360\n\n\ndef lateral_surface_rectangle(l,w):\n    '''\n    Write a function to find the lateral surface area of a rectangle given its length and width.\n    '''\n    pass\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(square_Sum(1))\n    print(square_Sum(2))\n    print(square_Sum(3))\n    print(square_Sum(4))\n    print(square_Sum(5))\n    print(square_Sum(6))\n    print(square_Sum(7))\n    print(square_Sum(8))\n    print(square_Sum(9))\n    print(square_Sum(10)"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef find_max(a,b):\n    '''\n    Write a python function that takes in 2 integers and returns the maximum of these integers.\n    '''\n    pass\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     square_Sum(10) == 25, \"Incorrect\"\nassert     square_Sum(5) == 33, \"Incorrect\"\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nsquare_Sum(5) == 25\nprint(\"Test 1 (Test passed)\\n\")\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     square_Sum(10) == 55\nassert     square_Sum(0) == 0\nassert     square_Sum(1) == 1\nassert     square_Sum(2) == 5\nassert     square_Sum(3) == 15\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint('You should find 10')\nprint(square_Sum(5))\n\nprint('You should find 0')\nprint(square_Sum(3))\n\nprint('You should find 0')\nprint(square_Sum(1))"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint('\\nTesting square_Sum:')\nprint(square_Sum(1), 0)\nprint(square_Sum(2), 1)\nprint(square_Sum(3), 4)\nprint(square_Sum(4), 25)\nprint(square_Sum(5), 70)\nprint(square_Sum(10), 273)\nprint(square_Sum(15), 745)\nprint(square_Sum(20), 1641)\nprint(square_Sum(30), 1616)\nprint(square_Sum(40), 1664)\nprint(square_Sum(50), 1720)\nprint(square_Sum(100), 5050)\nprint(square_Sum(500), 14750000)\nprint(square_Sum(1000), 554555555)\nprint(square_Sum(5000), 14755555555)\nprint(square_Sum(10000), 56055555555)\nprint(square_Sum(50000), 167555555555)\nprint(square_Sum(100000), 755555555555)\nprint(square_Sum(500001), 155555555555)\nprint(square_Sum(1000000), 7330555555555)\nprint(square_Sum(100000001), 1446654455555)\nprint(square_Sum(1000000000000), 15151515151515)\nprint(square_Sum(1000000000001), 14814814814814)\nprint(square_Sum(10000000000), 16161616161616)\nprint(square_Sum(100000000001), 16161616161617)\nprint(square_Sum(1000000000011), 16161616161618)\nprint(square_Sum(10000000011111111111111), 1616161616161818181818181818)\nprint(square_Sum(100000000000000000000000000), 181818181818181818181818181818)\nprint(square_Sum(100000000000000000000000000000000), 181818181818181818181818181818)\nprint(square_Sum(10000000000000000000000000000000001), 181818181818181818181818181818)\nprint(square_Sum(100000000000000000000000000000000001), 181818181818181818181818181818)\nprint(square_Sum(1000000000000000000000000000000000000), 181818181818181818181818181818)\nprint(square_Sum(10000000000000000000000000000000000001), 181818181818181818181818181818)\nprint(square_Sum(100000000000000000000000000000000000001), 181818181818181818181818181818)\nprint(square_Sum(1000000000000000000000000000000000000001), 181818181818181818181818181818)\nprint(square_Sum(10000000000000000000000000000000000000111111), 181818181818181818181818181818)\nprint(square_Sum(100000000000000000000000000000000000000001), 181818181818181818181818181818)\nprint(square_Sum(1000000000000000000000000000000000000000001), 181818181818181818181818181818)\nprint(square_Sum(10000000000000000000000000000000000000000001), 181818181818181818181818181818)\nprint(square_Sum(100000000000000000000000000000000000000000001), 181818181818181818181818181818)\nprint(square_Sum(100000000000000000000000000000000000000000000), 181818181818181818181818181818)\nprint(square_Sum(1000000000000000000000000000000000000000000001), 181818181818181818181818181818)\nprint(square_Sum(1000000000000000000000000000000000000000000011), 181818181818181818181818181818)\nprint(square_Sum(100000000000000000000000000000000000000000000001), 181818181818181818181818181818)\nprint(square_Sum(1000000000000000000000000000000000000000000000111111), 181818181818181818181818181818)\nprint(square_Sum(100000000000000000000000000000000000000000000001), 181818181818181818181818181818)\nprint(square_Sum(1000000000000000000000000000000000000000000000001), 181818181818181818181818181818)\nprint(square_Sum(10000000000000000000000000000000000000000000000001), 181818181818181818181818181818)\nprint(square_Sum(100000000000000000000000000000000000000000000000111111), 181818181818181818181818181818)\nprint(square_Sum(10000000000000000000000000000000000000000000000010001), 181818181818181818181818181818)\nprint(square_Sum(1000000000000000000000000000000000000000000000001001), 181818181818181818181818181818)\nprint(square_Sum(100000000000000000000000000000000000000000000000100011), 181818181818181818181818181818)\nprint(square_Sum(1000000000000000000000000000000000000000000000001000111111), 181818181818181818181818181818)\nprint(square_Sum(100000000000000000000000000000000000000000000000100001), 181818181818181818181818181818)\nprint(square_Sum(1000000000000000000000000000000000000000000000001000001), 181818181818181818181818181818)\nprint(square_Sum(10000000000000000000000000000000000000000000000010000001), 181818181818181818181818181818)\nprint(square_Sum(100000000000000000000000000000000000000000000000100000111111), 181818181818181818181818181818)\nprint(square_Sum(10000000000000000000000000000000000000000000000010000010001), 181818181818181818181818181818)\nprint(square_Sum(1000000000000000000000000000000000000000000000001000001001), 181818181818181818181818181818)\nprint(square_Sum(100000000000000000000000000000000000000000000000100000100011), 181818181818181818181818181818)\nprint(square_Sum(1000000000000000000000000000000000000000000000001000001000111111), 181818181818181818181818181818)\nprint(square_Sum(100000000000000000000000000000000000000000000000100000100101), 181818181818181818181818181818)\nprint(square_Sum(10000000000000000000000000000000000000000000000010000010010111111), 181818181818181818181818181818)\nprint(square_Sum(10000000000000000000000000000000000000000000000010000010010111), 181818181818181818181818181818)\nprint(square_Sum(100000000000000000000000000000000000000000000000100000100101111111111), 181818181818181818181818181818)\nprint(square_Sum(1000000000000000000000000000000000000000000000001000001010111111), 181818181818181818181818181818)\nprint(square_Sum(10000000000000000000000000000000000000000000000010000010101111111), 181818181818181818181818181818)\nprint(square_Sum(10000000000000000000000000000000000000000000000010000010101111111111), 181818181818181818181818181818)\nprint(square_Sum(10000000000000000000000000000000000000000000000010000010111111111111111111), 181818181818181818181818181818)\nprint(square_Sum(10000000000000000000000000000000000000000000000010000010111111111111111111), 181818181818181818181818181818)\nprint(square_Sum(10000000000000000000000000000000000000000000000010000010111111111111111111), 181818181818181818181818181818)\nprint(square_Sum(1000000000000000000000000000000000000000000000001000001111111111111111111111), 181818181818181818181818181818)\nprint(square_Sum(1000000000000000000000000000000000000000000000001000001111111111111111111111), 181818181818181818181818181818)\nprint(square_Sum(1000000000000000000000000000000000000000000000001000001111111111111111111111), 181818181818181818181818181818)\nprint(square_Sum(1000000000000000000000000000000000000000000000001000001111111111111111111111), 181818181818181818181818181818)\nprint(square_Sum(100000000000000000000000000000000000000000000000100000111111111111"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert find_star_num(1) == 1\nassert find_star_num(2) == 1\nassert find_star_num(3) == 2\nassert find_star_num(4) == 3\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_star_num(1) == 1\nassert     find_star_num(2) == 3\nassert     find_star_num(3) == 5\nassert     find_star_num(4) == 7\nassert     find_star_num(5) == 11\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef find_star_num_pythonic(n): \n    '''\n    Find the nth star number using the floor division.\n    '''\n    pass\n\nassert \n\nfind_star_num_pythonic(2)\nfind_star_num_pythonic(3)\nfind_star_num_pythonic(10)\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nfind_star_num(1) == 2\nfind_star_num(2) == 5\nfind_star_num(3) == 8\nfind_star_num(4) == 13\nfind_star_num(5) == 25\nfind_star_num(6) == 31\nfind_star_num(7) == 37\nfind_star_num(8) == 41\nfind_star_num(9) == 46\nfind_star_num(10) == 51\nfind_star_num(11) == 55\nfind_star_num(12) == 61\nfind_star_num(13) == 67\nfind_star_num(14) == 71\nfind_star_num(15) == 76\nfind_star_num(16) == 81\nfind_star_num(17) == 86\nfind_star_num(18) == 91\nfind_star_num(19) == 96\nfind_star_num(20) == 101\nfind_star_num(21) == 106\nfind_star_num(22) == 111\nfind_star_num(23) == 116\nfind_star_num(24) == 121\nfind_star_num(25) == 126\nfind_star_num(26) == 131\nfind_star_num(27) == 136\nfind_star_num(28) == 141\nfind_star_num(29) == 146\nfind_star_num(30) == 151\nfind_star_num(31) == 156\nfind_star_num(32) == 161\nfind_star_num(33) == 166\nfind_star_num(34) == 171\nfind_star_num(35) == 176\nfind_star_num(36) == 181\nfind_star_num(37) == 186\nfind_star_num(38) == 191\nfind_star_num(39) == 196\nfind_star_num(40) == 201\nfind_star_num(41) == 206\nfind_star_num(42) == 211\nfind_star_num(43) == 216\nfind_star_num(44) == 221\nfind_star_num(45) == 226\nfind_star_num(46) == 231\nfind_star_num(47) == 236\nfind_star_num(48) == 241\nfind_star_num(49) == 246\nfind_star_num(50) == 251\nfind_star_num(51) == 256\nfind_star_num(52) == 261\nfind_star_num(53) == 266\nfind_star_num(54) == 271\nfind_star_num(55) == 276\nfind_star_num(56) == 281\nfind_star_num(57) == 286\nfind_star_num(58) == 291\nfind_star_num(59) == 296\nfind_star_num(60) == 301\nfind_star_num(61) == 306\nfind_star_num(62) == 311\nfind_star_num(63) == 316\nfind_star_num(64) == 321\nfind_star_num(65) == 326\nfind_star_num(66) == 331\nfind_star_num(67) == 336\nfind_star_num(68) == 341\nfind_star_num(69) == 346\nfind_star_num(70) == 351\nfind_star_num(71) == 356\nfind_star_num(72) == 361\nfind_star_num(73) == 366\nfind_star_num(74) == 371\nfind_star_num(75) == 376\nfind_star_num(76) == 381\nfind_star_num(77) == 386\nfind_star_num(78) == 391\nfind_star_num(79) == 396\nfind_star_num(80) == 401\nfind_star_num(81) == 406\nfind_star_num(82) == 411\nfind_star_num(83) == 416\nfind_star_num(84) == 421\nfind_star_num(85) == 426\nfind_star_num(86) == 431\nfind_star_num(87) == 436\nfind_star_num(88) == 441\nfind_star_num(89) == 446\nfind_star_num(90) == 451\nfind_star_num(91) == 456\nfind_star_num(92) == 461\nfind_star_num(93) == 466\nfind_star_num(94) == 471\nfind_star_num(95) == 476\nfind_star_num(96) == 481\nfind_star_num(97) == 484\nfind_star_num(98) == 491\nfind_star_num(99) == 496\nfind_star_num(100) == 501\nfind_star_num(101) == 506\nfind_star_num(102) == 511\nfind_star_num(103) == 516\nfind_star_num(104) == 521\nfind_star_num(105) == 526\nfind_star_num(106) == 531\nfind_star_num(107) == 536\nfind_star_num(108) == 541\nfind_star_num(109) == 546\nfind_star_num(110) == 551\nfind_star_num(111) == 556\nfind_star_num(112) == 561\nfind_star_num(113) == 566\nfind_star_num(114) == 571\nfind_star_num(115) == 576\nfind_star_num(116) == 581\nfind_star_num(117) == 586\nfind_star_num(118) == 591\nfind_star_num(119) == 596\nfind_star_num(120) == 601\nfind_star_num(121) == 606\nfind_star_num(122) == 611\nfind_star_num(123) == 616\nfind_star_num(124) == 621\nfind_star_num(125) == 626\nfind_star_num(126) == 631\nfind_star_num(127) == 636\nfind_star_num(128) == 641\nfind_star_num(129) == 646\nfind_star_num(130) == 651\nfind_star_num(131) == 656\nfind_star_num(132) == 661\nfind_star_num(133) == 666\nfind_star_num(134) == 671\nfind_star_num(135) == 676\nfind_star_num(136) == 681\nfind_star_num(137) == 686\nfind_star_num(138) == 691\nfind_star_num(139) == 696\nfind_star_num(140) == 701\nfind_star_num(141) == 706\nfind_star_num(142) == 711\nfind_star_num(143) == 716\nfind_star_num(144) == 721\nfind_star_num(145) == 726\nfind_star_num(146) == 731\nfind_star_num(147) == 736\nfind_star_num(148) == 741\nfind_star_num(149) == 746\nfind_star_num(150) == 751\nfind_star_num(151) == 756\nfind_star_num(152) == 761\nfind_star_num(153) == 766\nfind_star_num(154) == 771\nfind_star_num(155) == 776\nfind_star_num(156) == 781\nfind_star_num(157) == 786\nfind_star_num(158) == 791\nfind_star_num(159) == 796\nfind_star_num(160) == 800\nfind_star_num(161) == 805\nfind_star_num(162) == 810\nfind_star_num(163) == 815\nfind_star_num(164) == 820\nfind_star_num(165) == 825\nfind_star_num(166) == 830\nfind_star_num(167) == 835\nfind_star_num(168) == 840\nfind_star_num(169) == 845\nfind_star_num(170) == 850\nfind_star_num(171) == 855\nfind_star_num(172) == 860\nfind_star_num(173) == 865\nfind_star_num(174) == 870\nfin"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nfind_star_num(2) == 0\nfind_star_num(3) == 1\nfind_star_num(4) == 2\nfind_star_num(5) == 3\nfind_star_num(6) == 4\nfind_star_num(7) == 5\nfind_star_num(8) == 6\nfind_star_num(9) == 7\nfind_star_num(10) == 8\nfind_star_num(11) == 9\nfind_star_num(12) == 10\nfind_star_num(13) == 11\nfind_star_num(14) == 12\nfind_star_num(15) == 13\nfind_star_num(16) == 14\nfind_star_num(17) == 15\nfind_star_num(18) == 16\nfind_star_num(19) == 17\nfind_star_num(20) == 18\nfind_star_num(21) == 19\nfind_star_num(22) == 20\nfind_star_num(23) == 21\nfind_star_num(24) == 22\nfind_star_num(25) == 23\nfind_star_num(26) == 24\nfind_star_num(27) == 25\nfind_star_num(28) == 26\nfind_star_num(29) == 27\nfind_star_num(30) == 28\nfind_star_num(31) == 29\nfind_star_num(32) == 30\nfind_star_num(33) == 31\nfind_star_num(34) == 32\nfind_star_num(35) == 33\nfind_star_num(36) == 34\nfind_star_num(37) == 35\nfind_star_num(38) == 36\nfind_star_num(39) == 37\nfind_star_num(40) == 38\nfind_star_num(41) == 39\nfind_star_num(42) == 40\nfind_star_num(43) == 41\nfind_star_num(44) == 42\nfind_star_num(45) == 43\nfind_star_num(46) == 44\nfind_star_num(47) == 45\nfind_star_num(48) == 46\nfind_star_num(49) == 47\nfind_star_num(50) == 48\nfind_star_num(51) == 49\nfind_star_num(52) == 50\nfind_star_num(53) == 51\nfind_star_num(54) == 52\nfind_star_num(55) == 53\nfind_star_num(56) == 54\nfind_star_num(57) == 55\nfind_star_num(58) == 56\nfind_star_num(59) == 57\nfind_star_num(60) == 58\nfind_star_num(61) == 59\nfind_star_num(62) == 60\nfind_star_num(63) == 61\nfind_star_num(64) == 62\nfind_star_num(65) == 63\nfind_star_num(66) == 64\nfind_star_num(67) == 65\nfind_star_num(68) == 66\nfind_star_num(69) == 67\nfind_star_num(70) == 68\nfind_star_num(71) == 69\nfind_star_num(72) == 70\nfind_star_num(73) == 71\nfind_star_num(74) == 72\nfind_star_num(75) == 73\nfind_star_num(76) == 74\nfind_star_num(77) == 75\nfind_star_num(78) == 76\nfind_star_num(79) == 77\nfind_star_num(80) == 78\nfind_star_num(81) == 79\nfind_star_num(82) == 80\nfind_star_num(83) == 81\nfind_star_num(84) == 82\nfind_star_num(85) == 83\nfind_star_num(86) == 84\nfind_star_num(87) == 85\nfind_star_num(88) == 86\nfind_star_num(89) == 87\nfind_star_num(90) == 88\nfind_star_num(91) == 89\nfind_star_num(92) == 90\nfind_star_num(93) == 91\nfind_star_num(94) == 92\nfind_star_num(95) == 93\nfind_star_num(96) == 94\nfind_star_num(97) == 95\nfind_star_num(98) == 96\nfind_star_num(99) == 97\nfind_star_num(100) == 98\nfind_star_num(101) == 99\nfind_star_num(102) == 100\nfind_star_num(103) == 101\nfind_star_num(104) == 102\nfind_star_num(105) == 103\nfind_star_num(106) == 104\nfind_star_num(107) == 105\nfind_star_num(108) == 106\nfind_star_num(109) == 107\nfind_star_num(110) == 108\nfind_star_num(111) == 109\nfind_star_num(112) == 110\nfind_star_num(113) == 111\nfind_star_num(114) == 112\nfind_star_num(115) == 113\nfind_star_num(116) == 114\nfind_star_num(117) == 115\nfind_star_num(118) == 116\nfind_star_num(119) == 117\nfind_star_num(120) == 118\nfind_star_num(121) == 119\nfind_star_num(122) == 120\nfind_star_num(123) == 121\nfind_star_num(124) == 122\nfind_star_num(125) == 123\nfind_star_num(126) == 124\nfind_star_num(127) == 125\nfind_star_num(128) == 126\nfind_star_num(129) == 127\nfind_star_num(130) == 128\nfind_star_num(131) == 129\nfind_star_num(132) == 130\nfind_star_num(133) == 131\nfind_star_num(134) == 132\nfind_star_num(135) == 133\nfind_star_num(136) == 134\nfind_star_num(137) == 135\nfind_star_num(138) == 136\nfind_star_num(139) == 137\nfind_star_num(140) == 138\nfind_star_num(141) == 139\nfind_star_num(142) == 140\nfind_star_num(143) == 141\nfind_star_num(144) == 142\nfind_star_num(145) == 143\nfind_star_num(146) == 144\nfind_star_num(147) == 145\nfind_star_num(148) == 146\nfind_star_num(149) == 147\nfind_star_num(150) == 148\nfind_star_num(151) == 149\nfind_star_num(152) == 150\nfind_star_num(153) == 151\nfind_star_num(154) == 152\nfind_star_num(155) == 153\nfind_star_num(156) == 154\nfind_star_num(157) == 155\nfind_star_num(158) == 156\nfind_star_num(159) == 157\nfind_star_num(160) == 158\nfind_star_num(161) == 159\nfind_star_num(162) == 160\nfind_star_num(163) == 161\nfind_star_num(164) == 162\nfind_star_num(165) == 163\nfind_star_num(166) == 164\nfind_star_num(167) == 165\nfind_star_num(168) == 166\nfind_star_num(169) == 167\nfind_star_num(170) == 168\nfind_star_num(171) == 169\nfind_star_num(172) == 170\nfind_star_num(173) == 171\nfind_star_num(174) == 172\nfind_star_num(175) == 173\nfind_star_num(176) == 174\nfind_star_num(177) == 175\nfind_star_num(178) == 176\nfind_star_num(179) == 177\nfind_star_num(180) == 178\nfind_star_num(181) == 179\nfind_star_num(182) == 180\nfind_star_num"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_star_num(0) == 1\nassert     find_star_num(2) == 2\nassert     find_star_num(4) == 4\nassert     find_star_num(10) == 4\nassert     find_star_num(12) == 5\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nfind_star_num(1) == 1\nfind_star_num(3) == 12\nfind_star_num(12) == 2524\nfind_star_num(21) == 6482649"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_star_num(1) == 2, 'the 1st star number is 2'\nassert     find_star_num(2) == 1, 'the 2nd star number is 1'\nassert     find_star_num(3) == 3, 'the 3rd star number is 3'\nassert     find_star_num(4) == 5, 'the 4th star number is 5'\nassert     find_star_num(5) == 4, 'the 5th star number is 4'\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('b') == 98\nassert     ascii_value('c') == 99\n\ndef digits_of(n):\n    '''\n    Write a function that returns the digits of n.\n    '''\n    pass\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('A') == 65\nassert     ascii_value('~') == 126\nassert     ascii_value('$') == 36\nassert     ascii_value('#') == 35\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('z') == 122\nassert     ascii_value('A') == 65\nassert     ascii_value('Z') == 90\n\ndef is_odd(n):\n    '''\n    Write a function that uses a nested conditional to return \n    True if n is odd, False otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    # check the correctness of ascii_value\n\nimport random\nimport string\n\ndef ascii_check(k):\n    '''\n    Write a function to check whether a string is an ASCII character or not.\n    '''\n    pass\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert ascii_value('A') == 65\nassert ascii_value('b') == 98\nassert ascii_value('0') == 48\nassert ascii_value('9') == 57\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    ascii_value('a') == 97\n    ascii_value('A') == 65\n    ascii_value('0') == 48\n    ascii_value('9') == 57\n    ascii_value('\\n') == 10\n    ascii_value('\\t') == 9\n    ascii_value(' ') == 32\n    \n\ndef ascii_line(s):\n    '''\n    Write a function to find the length of the longest line in a string.\n    '''\n    pass\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9]) == sum_even_and_even_index([10, 2, 4, 6, 8, 10]) == sum_even_and_even_index([1, 3, 5, 7, 9]) == 23, 'Wrong Output'\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nsum_even_and_even_index([1,2,3,4,5,6,7,8,9,10]) == [12, 14, 16]\nassert \nsum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12]) == [22, 24, 26]\nassert \nsum_even_and_even_index([1,2,3,4,5,6,7,8,9,10]) == [12, 14, 16]\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_even_and_even_index([]) == 0, \"Empty list!\"\nassert sum_even_and_even_index([2, 4, 6]) == 10, \"Two even numbers\"\nassert sum_even_and_even_index([]) == 0, \"Empty list!\"\nassert sum_even_and_even_index([2]) == 2, \"One even number\"\nassert sum_even_and_even_index([1, 2, 3]) == 6, \"One even number\"\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_even_and_even_index([1, 3, 5]) == 2\nassert     sum_even_and_even_index([6, 2, 1]) == 8\nassert     sum_even_and_even_index([10, 20, 10, 20, 10]) == 30\n\n\n\n\ndef sum_odd_and_odd_index(arr):\n    '''\n    Write a python function to find the sum of odd numbers at odd positions of a list.\n    '''\n    pass\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_even_and_even_index([1,2,3,4,5,6]) == 2, \"should be 2\"\nassert     sum_even_and_even_index([1,2,3,4,5,6,7,8]) == 0, \"should be 0\"\nassert     sum_even_and_even_index([1,2,3,4,5,6,7,8,9]) == 18, \"should be 18\"\nassert     sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10]) == 26, \"should be 26\"\nassert     sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11]) == 33, \"should be 33\"\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_even_and_even_index([1,2,3,4,5]) == 0, \"Wrong output\"\nassert     sum_even_and_even_index([1,2,3,4,5,6]) == 0, \"Wrong output\"\nassert     sum_even_and_even_index([1,2,3,4,5,6,7]) == 6, \"Wrong output\"\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef sum_even_and_odd_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at odd positions of a list.\n    '''\n    pass\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_even_and_even_index([2, 3, 4, 5, 6, 7, 8]) == 0\nassert     sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8]) == 5\nassert     sum_even_and_even_index([1, 2, 3, 4, 5, 6]) == 0\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     even_Power_Sum(5) == 25\n\ndef even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    pass\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \neven_Power_Sum(4) == 9\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \neven_Power_Sum(10) == 0\n\n'''\nYou are required to write a python function which returns true if a string is palindrome otherwise return false.\nThe function should take a string as an input and return boolean value.\n\nInput Format\nString will contain only alphabets and/or numbers.\n\nConstraints\n1 <= len(str) <= 100\n\nOutput Format\nIf the string is palindrome, print 'True', else print 'False'.\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     even_Power_Sum(1) == 0, \"First Test Case Failed\"\nassert     even_Power_Sum(2) == 6, \"Second Test Case Failed\"\nassert     even_Power_Sum(5) == 28, \"Third Test Case Failed\"\nassert     even_Power_Sum(100) == 6690, \"Fourth Test Case Failed\"\nassert     even_Power_Sum(0) == 0, \"Fifth Test Case Failed\"\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     even_Power_Sum(5) == 10\nassert     even_Power_Sum(2) == 4\nassert     even_Power_Sum(3) == 12\nassert     even_Power_Sum(4) == 16\nassert     even_Power_Sum(5) == 21\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     even_Power_Sum(4) == 32\nassert     even_Power_Sum(5) == 216\nassert     even_Power_Sum(10) == 19683\n\ndef even_Power_Sum(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    pass\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \neven_Power_Sum(1) == 1\neven_Power_Sum(2) == 3\neven_Power_Sum(3) == 7\neven_Power_Sum(4) == 15\neven_Power_Sum(5) == 45\neven_Power_Sum(6) == 216"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \neven_Power_Sum(10) ==  1\neven_Power_Sum(20) == 12\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \neven_Power_Sum(2) == 0\neven_Power_Sum(3) == 0\neven_Power_Sum(4) == 1\neven_Power_Sum(5) == 1\neven_Power_Sum(6) == 2\neven_Power_Sum(7) == 3\neven_Power_Sum(8) == 4\neven_Power_Sum(9) == 5\neven_Power_Sum(10) == 6\neven_Power_Sum(11) == 7\neven_Power_Sum(12) == 8\neven_Power_Sum(13) == 9\neven_Power_Sum(14) == 10\neven_Power_Sum(15) == 11\neven_Power_Sum(16) == 12\neven_Power_Sum(17) == 13\neven_Power_Sum(18) == 14\neven_Power_Sum(19) == 15\neven_Power_Sum(20) == 16\neven_Power_Sum(21) == 17\neven_Power_Sum(22) == 18\neven_Power_Sum(23) == 19\neven_Power_Sum(24) == 20\neven_Power_Sum(25) == 21\neven_Power_Sum(26) == 22\neven_Power_Sum(27) == 23\neven_Power_Sum(28) == 24\neven_Power_Sum(29) == 25\neven_Power_Sum(30) == 26\neven_Power_Sum(31) == 27\neven_Power_Sum(32) == 28\neven_Power_Sum(33) == 29\neven_Power_Sum(34) == 30\neven_Power_Sum(35) == 31\neven_Power_Sum(36) == 32\neven_Power_Sum(37) == 33\neven_Power_Sum(38) == 34\neven_Power_Sum(39) == 35\neven_Power_Sum(40) == 36\neven_Power_Sum(41) == 37\neven_Power_Sum(42) == 38\neven_Power_Sum(43) == 39\neven_Power_Sum(44) == 40\neven_Power_Sum(45) == 41\neven_Power_Sum(46) == 42\neven_Power_Sum(47) == 43\neven_Power_Sum(48) == 44\neven_Power_Sum(49) == 45\neven_Power_Sum(50) == 46\neven_Power_Sum(51) == 47\neven_Power_Sum(52) == 48\neven_Power_Sum(53) == 49\neven_Power_Sum(54) == 50\neven_Power_Sum(55) == 51\neven_Power_Sum(56) == 52\neven_Power_Sum(57) == 53\neven_Power_Sum(58) == 54\neven_Power_Sum(59) == 55\neven_Power_Sum(60) == 56\neven_Power_Sum(61) == 57\neven_Power_Sum(62) == 58\neven_Power_Sum(63) == 59\neven_Power_Sum(64) == 60\neven_Power_Sum(65) == 61\neven_Power_Sum(66) == 62\neven_Power_Sum(67) == 63\neven_Power_Sum(68) == 64\neven_Power_Sum(69) == 65\neven_Power_Sum(70) == 66\neven_Power_Sum(71) == 67\neven_Power_Sum(72) == 68\neven_Power_Sum(73) == 69\neven_Power_Sum(74) == 70\neven_Power_Sum(75) == 71\neven_Power_Sum(76) == 72\neven_Power_Sum(77) == 73\neven_Power_Sum(78) == 74\neven_Power_Sum(79) == 75\neven_Power_Sum(80) == 76\neven_Power_Sum(81) == 77\neven_Power_Sum(82) == 78\neven_Power_Sum(83) == 79\neven_Power_Sum(84) == 80\neven_Power_Sum(85) == 81\neven_Power_Sum(86) == 82\neven_Power_Sum(87) == 83\neven_Power_Sum(88) == 84\neven_Power_Sum(89) == 85\neven_Power_Sum(90) == 86\neven_Power_Sum(91) == 87\neven_Power_Sum(92) == 88\neven_Power_Sum(93) == 89\neven_Power_Sum(94) == 90\neven_Power_Sum(95) == 91\neven_Power_Sum(96) == 92\neven_Power_Sum(97) == 93\neven_Power_Sum(98) == 94\neven_Power_Sum(99) == 95\neven_Power_Sum(100) == 96\neven_Power_Sum(101) == 97\neven_Power_Sum(102) == 98\neven_Power_Sum(103) == 99\neven_Power_Sum(104) == 100\neven_Power_Sum(105) == 101\neven_Power_Sum(106) == 102\neven_Power_Sum(107) == 103\neven_Power_Sum(108) == 104\neven_Power_Sum(109) == 105\neven_Power_Sum(110) == 106\neven_Power_Sum(111) == 107\neven_Power_Sum(112) == 108\neven_Power_Sum(113) == 109\neven_Power_Sum(114) == 110\neven_Power_Sum(115) == 111\neven_Power_Sum(116) == 112\neven_Power_Sum(117) == 113\neven_Power_Sum(118) == 114\neven_Power_Sum(119) == 115\neven_Power_Sum(120) == 116\neven_Power_Sum(121) == 117\neven_Power_Sum(122) == 118\neven_Power_Sum(123) == 119\neven_Power_Sum(124) == 120\neven_Power_Sum(125) == 121\neven_Power_Sum(126) == 122\neven_Power_Sum(127) == 123\neven_Power_Sum(128) == 124\neven_Power_Sum(129) == 125\neven_Power_Sum(130) == 126\neven_Power_Sum(131) == 127\neven_Power_Sum(132) == 128\neven_Power_Sum(133) == 129\neven_Power_Sum(134) == 130\neven_Power_Sum(135) == 131\neven_Power_Sum(136) == 132\neven_Power_Sum(137) == 133\neven_Power_Sum(138) == 134\neven_Power_Sum(139) == 135\neven_Power_Sum(140) == 136\neven_Power_Sum(141) == 137\neven_Power_Sum(142) == 138\neven_Power_Sum(143) == 139\neven_Power_Sum(144) == 140\neven_Power_Sum(145) == 141\neven_Power_Sum(146) == 142\neven_Power_Sum(147) == 143\neven_Power_Sum(148) == 144\neven_Power_Sum(149) == 145\neven_Power_Sum(150) == 146\neven_Power_Sum(151) == 147\neven_Power_Sum(152) == 148\neven_Power_Sum(153) == 149\neven_Power_Sum(154) == 150\neven_Power_Sum(155) == 151\neven_Power_Sum(156) == 152\neven_Power_Sum(157) == 153\neven_Power_Sum(158) == 154\neven_Power_Sum(159) == 155\neven_Power_Sum(160) == 156\neven_Power_Sum(161) == 157\neven_Power_Sum(162) == 158\neven_Power_Sum(163) == 159\neven_Power_Sum(164) == 160\neven_Power_Sum(165) == 161\neven_Power_Sum(166) == 162\neven_Power_Sum(167) == 163\neven_Power_Sum(168) == 164\neven_Power_Sum(169) == 165\neven_Power_Sum(170) == 166\neven_Power_Sum(171) == 167\neven_Power_Sum(172) == 168\neven_Power_Sum(173) == 169\neven_Power_Sum(174) == 170\neven_Power_Sum(175) == 171\neven_Power_Sum(176) == 172\neven_Power_Sum(177) == 173\neven_Power_Sum(178) == 174\neven_Power_Sum(179) == 175\neven_Power_Sum(180) == 176\neven_Power_Sum(181) == 177"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     even_Power_Sum(3) == 3\nassert     even_Power_Sum(10) == 200\nassert     even_Power_Sum(3) == 4\n\nprint(\"Function even_Power_Sum is correct\")\n\n'''\nRefactoring the even_Power_Sum function above \n'''"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef mapper(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the sum of each tuple.\n    '''\n    pass\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ntest_list1 = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]\nprint(rear_extract(test_list1))\n\ndef rear_extract_2(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return \n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rear_extract([('A', 2), ('B', 5), ('C', 0)]) == [2, 5, 0], \"Test 1 failed\"\nassert     rear_extract([('A', 1), ('B', 10), ('C', 5)]) == [10, 5, 1], \"Test 2 failed\"\nassert     rear_extract([('A', -1), ('B', 10), ('C', 5)]) == [10, 5, -1], \"Test 3 failed\"\nassert     rear_extract([('A', 3), ('B', 10), ('C', 5)]) == [3, 10, 5], \"Test 4 failed\"\nassert     rear_extract([('A', 4), ('B', 10), ('C', 5)]) == [4, 10, 5], \"Test 5 failed\"\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rear_extract([(1, 2), (3, 4), (5, 6), (7, 8)]) == [(7, 8), (5, 6), (3, 4), (1, 2)],'rear_extract fails'\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     rear_extract([('john', 2), ('maria', 1), ('sarah', 2)]) == ['john','maria','sarah']\nassert rear_extract([('john', 2), ('maria', 1), ('sarah', 2)]) == ['sarah','maria', 'john']\nassert rear_extract([('john', 2), ('maria', 1), ('sarah', 2)]) == ['john','maria','sarah']\n\n\ndef front_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the front element of each tuple.\n    '''\n    pass\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nrear_extract([(1,2),(3,4),(5,6),(7,8),(9,10)]) == [2,4,6,8,10]\nprint('Correct')\n\nprint(\"\")"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     rear_extract([(\"a\", 2), (\"b\", 3), (\"c\", 4)]) == [\"c\", \"b\", \"a\"]\nassert     rear_extract([(2, \"a\"), (3, \"b\"), (4, \"c\")]) == [\"c\", \"b\", \"a\"]\nassert     rear_extract([(\"a\", 2), (\"b\", 3), (\"c\", 4), (\"d\", 5)]) == [\"c\", \"b\", \"a\", \"d\"]\nassert     rear_extract([(2, \"a\"), (3, \"b\"), (4, \"c\"), (5, \"d\")]) == [\"c\", \"b\", \"a\", \"d\"]\nassert     rear_extract([(\"a\", 2), (3, \"b\"), (\"c\", 4), (\"d\", 5)]) == [\"c\", \"b\", \"a\", \"d\"]\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nif __name__ == '__main__':\n    assert (rear_extract([(1, 2), (3, 4), (5, 6)]) == [2, 4, 6])\n    assert (rear_extract([(2, 1), (4, 3), (6, 5)]) == [1, 3, 5])\n    assert (rear_extract([(6, 5), (4, 3), (2, 1)]) == [5, 3, 1])\n\n    print('Correct!'"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     substract_elements((1, 2, 3), (2, 3, 4)) == (-1, -1, -1)\nassert     substract_elements((-1, -1, -1), (1, 2, 3)) == (2, 3, 4)\nassert     substract_elements((0, 0, 0), (0, 0, 0)) == (0, 0, 0)\nassert     substract_elements((1, 2, 3), (4, 5, 6)) == (3, 4, 5)\nprint('substract_elements function is working correctly')\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     substract_elements((1, 2, 3), (4, 5, 6)) == (5, 2, 3), \\\n        \"substract_elements should return (5, 2, 3) if (1, 2, 3) and (4, 5, 6) are passed in correctly.\"\nassert     substract_elements((1, 2), (4, 5, 6)) == (5, 2), \\\n        \"substract_elements should return (5, 2) if (1, 2) and (4, 5, 6) are passed in correctly.\"\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     substract_elements((1,2,3), (1,2,3)) == (0,0,0)\nassert     substract_elements((1,2,3), (2,3,4)) == (0,0,2)\nassert     substract_elements((1,2,3), (0,1,0)) == (1,1,3)\nassert     substract_elements((1,2,3), (0,1,1)) == (1,0,1)\nassert     substract_elements((1,2,3), (0,1,2)) == (1,0,0)\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     substract_elements((1, 2, 3, 4), (1, 2, 3, 4)) == (0, 0, 0, 0)\nassert     substract_elements((3, 4, 5, 6), (3, 4, 5, 6)) == (0, 0, 0, 0)\nassert     substract_elements((1, 2, 3, 4), (3, 4, 5, 6)) == (1, 1, 1, 1)\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     substract_elements(('a', 'b', 'c'), ('a', 'b', 'c')) == (('a', 'b', 'c'), ('b', 'b', 'c'))\nassert     substract_elements(('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd')) == (('a', 'b', 'c', 'd'), ('b', 'b', 'c', 'd'))\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     substract_elements((3, 5, 7, 9, 10), (10, 5, 7)) == (3, 8, -2, -4, -6)\nassert     substract_elements((1, 2, 3, 4, 5), (10, 5, 7, 2)) == (0, -2, -3, -4, -5)\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     substract_elements((1,2,3), (4,5,6)) == (4,1,2)\nassert     substract_elements((1,2,3), (3,4,5)) == (0,1,2)\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     substract_elements((10,20,30), (10, 20, 30)) == (10, -10, -10)\nassert substract_elements((10,20,30), (20, 30, 40)) == (20, 10, -20)\nassert substract_elements((10,20,30), (10, 20, 20)) == (10, 10, -30)\nassert substract_elements((10,20,30), (10, 40, 30)) == (10, 10, 30)\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert even_binomial_Coeff_Sum(1) == 0\nassert even_binomial_Coeff_Sum(2) == 1\nassert even_binomial_Coeff_Sum(3) == 0\nassert even_binomial_Coeff_Sum(4) == 1\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     even_binomial_Coeff_Sum(2) == 0, \"even_binomial_Coeff_Sum returned incorrect value\"\nassert even_binomial_Coeff_Sum(3) == 0, \"even_binomial_Coeff_Sum returned incorrect value\"\nassert even_binomial_Coeff_Sum(4) == 0, \"even_binomial_Coeff_Sum returned incorrect value\"\nassert even_binomial_Coeff_Sum(5) == 0, \"even_binomial_Coeff_Sum returned incorrect value\"\nassert even_binomial_Coeff_Sum(10) == 0, \"even_binomial_Coeff_Sum returned incorrect value\"\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     even_binomial_Coeff_Sum(2) == 1\nassert     even_binomial_Coeff_Sum(3) == 2\nassert     even_binomial_Coeff_Sum(4) == 2\nassert     even_binomial_Coeff_Sum(5) == 7\nassert     even_binomial_Coeff_Sum(6) == 14\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \neven_binomial_Coeff_Sum(5) == 1\neven_binomial_Coeff_Sum(10) == 0\neven_binomial_Coeff_Sum(20) == 14\neven_binomial_Coeff_Sum(1) == 0\neven_binomial_Coeff_Sum(0) == 0\neven_binomial_Coeff_Sum(2) == 0\neven_binomial_Coeff_Sum(3) == 0\neven_binomial_Coeff_Sum(4) == 0\neven_binomial_Coeff_Sum(5) == 1\neven_binomial_Coeff_Sum(6) == 1\neven_binomial_Coeff_Sum(7) == 2\neven_binomial_Coeff_Sum(8) == 3\neven_binomial_Coeff_Sum(9) == 5\neven_binomial_Coeff_Sum(10) == 8\neven_binomial_Coeff_Sum(11) == 11\neven_binomial_Coeff_Sum(12) == 20\neven_binomial_Coeff_Sum(13) == 34\neven_binomial_Coeff_Sum(14) == 56\neven_binomial_Coeff_Sum(15) == 70\neven_binomial_Coeff_Sum(16) == 92\neven_binomial_Coeff_Sum(17) == 117\neven_binomial_Coeff_Sum(18) == 140\neven_binomial_Coeff_Sum(19) == 197\neven_binomial_Coeff_Sum(20) == 236\neven_binomial_Coeff_Sum(21) == 272\neven_binomial_Coeff_Sum(22) == 294\neven_binomial_Coeff_Sum(23) == 327\neven_binomial_Coeff_Sum(24) == 360\neven_binomial_Coeff_Sum(25) == 416\neven_binomial_Coeff_Sum(26) == 492\neven_binomial_Coeff_Sum(27) == 569\neven_binomial_Coeff_Sum(28) == 736\neven_binomial_Coeff_Sum(29) == 924\neven_binomial_Coeff_Sum(30) == 1164\neven_binomial_Coeff_Sum(31) == 1452\neven_binomial_Coeff_Sum(32) == 1728\neven_binomial_Coeff_Sum(33) == 2104\neven_binomial_Coeff_Sum(34) == 2268\neven_binomial_Coeff_Sum(35) == 2772\neven_binomial_Coeff_Sum(36) == 3136\neven_binomial_Coeff_Sum(37) == 3668\neven_binomial_Coeff_Sum(38) == 4108\neven_binomial_Coeff_Sum(39) == 4642\neven_binomial_Coeff_Sum(40) == 5120\neven_binomial_Coeff_Sum(41) == 5536\neven_binomial_Coeff_Sum(42) == 6092\neven_binomial_Coeff_Sum(43) == 6768\neven_binomial_Coeff_Sum(44) == 7392\neven_binomial_Coeff_Sum(45) == 7962\neven_binomial_Coeff_Sum(46) == 8576\neven_binomial_Coeff_Sum(47) == 9192\neven_binomial_Coeff_Sum(48) == 9888\neven_binomial_Coeff_Sum(49) == 10644\neven_binomial_Coeff_Sum(50) == 11280\neven_binomial_Coeff_Sum(51) == 11952\neven_binomial_Coeff_Sum(52) == 12672\neven_binomial_Coeff_Sum(53) == 13346\neven_binomial_Coeff_Sum(54) == 13952\neven_binomial_Coeff_Sum(55) == 14648\neven_binomial_Coeff_Sum(56) == 15288\neven_binomial_Coeff_Sum(57) == 15882\neven_binomial_Coeff_Sum(58) == 16572\neven_binomial_Coeff_Sum(59) == 17362\neven_binomial_Coeff_Sum(60) == 17952\neven_binomial_Coeff_Sum(61) == 18600\neven_binomial_Coeff_Sum(62) == 19452\neven_binomial_Coeff_Sum(63) == 20396\neven_binomial_Coeff_Sum(64) == 20882\neven_binomial_Coeff_Sum(65) == 21656\neven_binomial_Coeff_Sum(66) == 22232\neven_binomial_Coeff_Sum(67) == 22904\neven_binomial_Coeff_Sum(68) == 23656\neven_binomial_Coeff_Sum(69) == 24440\neven_binomial_Coeff_Sum(70) == 25160\neven_binomial_Coeff_Sum(71) == 25896\neven_binomial_Coeff_Sum(72) == 26648\neven_binomial_Coeff_Sum(73) == 27420\neven_binomial_Coeff_Sum(74) == 28240\neven_binomial_Coeff_Sum(75) == 28904\neven_binomial_Coeff_Sum(76) == 30720\neven_binomial_Coeff_Sum(77) == 33456\neven_binomial_Coeff_Sum(78) == 36608\neven_binomial_Coeff_Sum(79) == 38704\neven_binomial_Coeff_Sum(80) == 41504\neven_binomial_Coeff_Sum(81) == 43984\neven_binomial_Coeff_Sum(82) == 47872\neven_binomial_Coeff_Sum(83) == 52656\neven_binomial_Coeff_Sum(84) == 55496\neven_binomial_Coeff_Sum(85) == 60480\neven_binomial_Coeff_Sum(86) == 66960\neven_binomial_Coeff_Sum(87) == 72928\neven_binomial_Coeff_Sum(88) == 77232\neven_binomial_Coeff_Sum(89) == 83536\neven_binomial_Coeff_Sum(90) == 88160\neven_binomial_Coeff_Sum(91) == 96416\neven_binomial_Coeff_Sum(92) == 100704\neven_binomial_Coeff_Sum(93) == 108712\neven_binomial_Coeff_Sum(94) == 116904\neven_binomial_Coeff_Sum(95) == 124560\neven_binomial_Coeff_Sum(96) == 132512\neven_binomial_Coeff_Sum(97) == 139712\neven_binomial_Coeff_Sum(98) == 147856\neven_binomial_Coeff_Sum(99) == 155744\neven_binomial_Coeff_Sum(100) == 163840\neven_binomial_Coeff_Sum(101) == 172224\neven_binomial_Coeff_Sum(102) == 179872\neven_binomial_Coeff_Sum(103) == 187856\neven_binomial_Coeff_Sum(104) == 195840\neven_binomial_Coeff_Sum(105) == 203328\neven_binomial_Coeff_Sum(106) == 209912\neven_binomial_Coeff_Sum(107) == 211280\neven_binomial_Coeff_Sum(108) == 212768\neven_binomial_Coeff_Sum(109) == 213760\neven_binomial_Coeff_Sum(110) == 214928\neven_binomial_Coeff_Sum(111) == 215912\neven_binomial_Coeff_Sum(112) == 217424\neve"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint(\"\\nTest case 1:\")\nprint(\"Expected Output: 1\")\nprint(\"Actual Output:\", even_binomial_Coeff_Sum(1))\n\nassert \n\nprint(\"\\nTest case 2:\")\nprint(\"Expected Output: 2\")\nprint(\"Actual Output:\", even_binomial_Coeff_Sum(2))\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    even_binomial_Coeff_Sum( 2) == 1\n    even_binomial_Coeff_Sum( 5) == 3\n    even_binomial_Coeff_Sum(100) == 3\n    even_binomial_Coeff_Sum(1000) == 864\nassert False\n\ndef even_binomial_Coeff_List( n):\n    '''\n    Write a python function that takes in a positive integer n and returns a list containing the binomial coefficient of even index numbers in this list.\n    '''\n    pass\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef even_binomial_Coeff_Sum( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    pass\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nassert even_binomial_Coeff_Sum(4) == 29"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert even_binomial_Coeff_Sum(3) == 4\nassert even_binomial_Coeff_Sum(4) == 25\nassert even_binomial_Coeff_Sum(5) == 216\nassert even_binomial_Coeff_Sum(6) == 327\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     volume_cylinder(1,1) == 1.33\nassert     volume_cylinder(2,2) == 3.16\nassert     volume_cylinder(4,2) == 7.07\nassert     volume_cylinder(10,10) == 33.63\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     volume_cylinder(2,3) == 7.835, 'incorrect'\nassert     volume_cylinder(1,3) == 7.835, 'incorrect'\nassert     volume_cylinder(1.2,3) == 37.63, 'incorrect'\n\nprint('correct')\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     volume_cylinder(2,3) == 8.096046193548387, \"Volume of cylinder\"\nassert     volume_cylinder(3,4) == 4.799192846058033, \"Volume of cylinder\"\nassert     volume_cylinder(3,2) == 0, \"Volume of cylinder\"\nprint(\"The test passed\")\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nvolume_cylinder(r,h) == pi * r**2 * h\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     volume_cylinder(1,1) == 3.14159265359, \"Wrong Answer!\"\n\ndef volume_cone(r,h):\n    '''\n    Write a function that takes in the radius and height of a cone and returns the the volume.\n    '''\n    pass\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     volume_cylinder(3, 4) == 12\nassert volume_cylinder(0, 4) == 0\nassert volume_cylinder(3, 0) == 0\nassert volume_cylinder(4, 3) == 12\nassert volume_cylinder(1, 2) == 2\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     volume_cylinder(3,4) == 9.5\nassert     volume_cylinder(5,8) == 0.125\nassert     volume_cylinder(3,4) == 4/3 * 3.14159 * r**2 * h\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     volume_cylinder(1,1) == 3.141592653589793\nassert     volume_cylinder(1,2) == 1.2578125\nassert     volume_cylinder(3,2) == 3.141592653589793\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     dict_filter({\"a\": 1, \"b\": 2}, 2) == {'b': 2}\nassert     dict_filter({\"a\": 1, \"b\": 2}, 1) == {'a': 1, 'b': 2}\nassert     dict_filter({\"a\": 1, \"b\": 2}, 0) == {'a': 1, 'b': 2}\nassert     dict_filter({\"a\": 1, \"b\": 2}, 3) == {}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     dict_filter({\"a\": 1, \"b\": 2, \"c\": 3}, 1) == {\"a\": 1, \"b\": 2, \"c\": 3}, \"incorrect result\"\nassert     dict_filter({\"a\": 1, \"b\": 2, \"c\": 3}, 2) == {\"a\": 1, \"c\": 3}, \"incorrect result\"\nassert     dict_filter({\"a\": 1, \"b\": 2, \"c\": 3}, 3) == {\"a\": 1, \"b\": 2}, \"incorrect result\"\nassert     dict_filter({\"a\": 1, \"b\": 2, \"c\": 3}, 0) == {\"a\": 1, \"b\": 2, \"c\": 3}, \"incorrect result\"\nassert     dict_filter({\"a\": 1, \"b\": 2, \"c\": 3}, -3) == {\"a\": 1, \"b\": 2, \"c\": 3}, \"incorrect result\"\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     dict_filter({'a':1, 'b':2, 'c':3, 'd':4, 'e':5},1) == {'a':1, 'd':4, 'e':5}, \"WRONG\"\nassert     dict_filter({'a':1, 'b':2, 'c':3, 'd':4, 'e':5},2) == {'a':1, 'b':2, 'c':3, 'e':5}, \"WRONG\"\nassert     dict_filter({'a':1, 'b':2, 'c':3, 'd':4, 'e':5},4) == {'a':1, 'b':2, 'c':3}, \"WRONG\"\nassert     dict_filter({'a':1, 'b':2, 'c':3, 'd':4, 'e':5},6) == {}, \"WRONG\"\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     dict_filter({ 'a': 1, 'b': 2, 'c': 3}, 1) == { 'a': 1, 'c': 3}, 'dict_filter is not working properly'\nassert dict_filter({ 'a': 1, 'b': 2, 'c': 3}, 3) == { 'a': 1, 'b': 2, 'c': 3}, 'dict_filter is not working properly'\nassert dict_filter({ 'a': 1, 'b': 2, 'c': 3}, 2) == { 'a': 1, 'b': 2}, 'dict_filter is not working properly'\nassert dict_filter({ 'a': 1, 'b': 2, 'c': 3}, -2) == {}, 'dict_filter is not working properly'\nassert dict_filter({ 'a': 1, 'b': 2, 'c': 3}, 0) == {}, 'dict_filter is not working properly'\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     dict_filter({1:2,2:4,3:6,4:8,5:10},5) == {5:10}\nassert     dict_filter({1:2,2:4,3:6,4:8,5:10},4) == {4:8,5:10}\nassert     dict_filter({1:2,2:4,3:6,4:8,5:10},2) == {2:4,3:6,4:8}\nassert     dict_filter({1:2,2:4,3:6,4:8,5:10},0) == {1:2,2:4,3:6,4:8,5:10}\nassert     dict_filter({1:2,2:4,3:6,4:8,5:10},1) == {1:2,2:4,3:6,4:8,5:10}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef dict_sort(dict,reverse=False):\n    '''\n    Write a function that takes in a dictionary and returns the dictionary in ascending order using the value of the key as the sorting criteria.\n    '''\n    pass\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     dict_filter({\"a\": 1, \"b\": 2, \"c\": 3}, 2) == {\"a\": 1, \"b\": 2, \"c\": 3}, \"Pass\"\nassert     dict_filter({\"a\": 1, \"b\": 2, \"c\": 3}, 1) == {\"a\": 1, \"b\": 2, \"c\": 3}, \"Pass\"\nassert     dict_filter({\"a\": 1, \"b\": 2, \"c\": 3}, 3) == {\"a\": 1, \"b\": 2, \"c\": 3}, \"Pass\"\nassert     dict_filter({\"a\": 1, \"b\": 2, \"c\": 3}, 4) == {\"a\": 1, \"b\": 2, \"c\": 3}, \"Pass\"\n\nprint(\"All test cases passed\")\nprint(\"\")\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     dict_filter({1: 1, 2: 2, 3: 3}, 2) == {2: 2, 3: 3}, \"First\"\nassert     dict_filter({1: 1, 2: 2, 3: 3}, 1) == {1: 1, 2: 2, 3: 3}, \"Second\"\nassert     dict_filter({1: 1, 2: 2, 3: 3}, 0) == {1: 1, 2: 2, 3: 3}, \"Third\"\nassert     dict_filter({1: 2, 3: 3, 5: 5}, 2) == {3: 3, 5: 5}, \"Fourth\"\nassert     dict_filter({1: 2, 3: 3, 5: 5}, 0) == {1: 2, 3: 3, 5: 5}, \"Fifth\"\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     dict_filter({0:3,1:2,2:5,3:4,4:5,5:5,6:5,7:5,8:5}, 3) == {0:3,2:5,4:5,5:5,6:5,7:5,8:5}, 'Incorrect'\nassert     dict_filter({0:3,1:2,2:5,3:4,4:5,5:5,6:5,7:5,8:5}, 1) == {1:2,3:4,4:5,5:5,6:5,7:5,8:5}, 'Incorrect'\n\ndef dict_map(dict,f):\n    '''\n    Write a function that takes in a dictionary and a function and returns a new dictionary that contains the keys and values returned by calling f on every value in the dictionary\n    '''\n    pass\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     dict_filter({1: 10, 2: 40, 3: 30}, 4) == {3: 30}, 'incorrect output'\nassert dict_filter({1: 10, 2: 40, 3: 30}, 10) == {1: 10, 2: 40, 3: 30}, 'incorrect output'\nassert dict_filter({1: 10, 2: 40, 3: 30}, 5) == {1: 10, 2: 40, 3: 30}, 'incorrect output'\nassert dict_filter({1: 10, 2: 40, 3: 30}, 25) == {2: 40, 3: 30}, 'incorrect output'\nassert dict_filter({1: 10, 2: 40, 3: 30}, 20) == {1: 10, 2: 40, 3: 30}, 'incorrect output'\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_first_elements((1,2,3,4,5,6,7,8,9,9)) == 2\nassert     count_first_elements((9,9,9,9,9,9,9)) == 1\nassert     count_first_elements((9,8,7,6,5,4,3,2,1)) == 0\nassert     count_first_elements((1,2,3,4,5,6,7,8,9)) == 9\n\n\ndef count_last_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs after the tuple element in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_first_elements( ('c', 'a', 't','s', 'c', 'a', 't','s', 'c', 'a', 't','s', 'c', 'a', 't') ) == 0\nassert     count_first_elements( ('c', 'a', 't','s', 'c', 'a', 't','s', 'c', 'a', 't','s', 'c', 'a', 't','s', 'c', 'a') ) == 3\nassert     count_first_elements( ('c', 'a', 't','s', 'c', 'a', 't','s', 'c', 'a', 't','s', 'c', 'a', 't','s', 'c', 'a', 't','s', 'c', 'a') ) == 2\nassert     count_first_elements( ('c', 'a', 't','s', 'c', 'a', 't','s', 'c', 'a', 't','s', 'c', 'a', 't','s', 'c', 'a', 't','s', 'c', 'a', 't','s', 'c') ) == 4\nassert     count_first_elements( ('c', 'a', 't','s', 'c', 'a', 't','s', 'c', 'a', 't','s', 'c', 'a', 't','s', 'c', 'a', 't','s', 'c', 'a', 't','s', 'c', 'a', 't','s') ) == 3\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_first_elements([1, 3, 2, 3, 1, 2]) == 3\nassert     count_first_elements([3, 1, 1, 2]) == 2\n\ndef count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    # your code here\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_first_elements((1,2,3,4,5,6,7,8,9,10)) == 2, \"Error\"\nassert     count_first_elements((3,2,1,2,3)) == 3, \"Error\"\nassert count_first_elements((1,2,3,4,5,6,7,8,9,10)) == 10, \"Error\"\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_first_elements((1,2,3,4,5,6)) == 4, 'Wrong result'\nassert     count_first_elements((1,2,3,4,5,6,7,7,7)) == 0, 'Wrong result'\nassert     count_first_elements((1,2,3,4,5,6,7,8,8)) == 1, 'Wrong result'\nassert     count_first_elements((0,0,0,0,0,0,0,0,0)) == 5, 'Wrong result'\nassert     count_first_elements((3,3,3,3,3,3,3,3,3,3,3)) == 2, 'Wrong result'\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_first_elements(('a', 'b', 'c')) == 3\nassert     count_first_elements(('a', 'b')) == 2\nassert     count_first_elements(('a')) == 1\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_first_elements(test_tup) == 1, \"Incorrect count_first_elements\"\n\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\""
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_first_elements((1, 2, 3, 4, 5, 5, 5, 6)) == 2, 'Wrong result for count_first_elements((1, 2, 3, 4, 5, 5, 5, 6))'\nassert     count_first_elements((1, 2, 3, 4, 5, 5, 5, 1)) == 1, 'Wrong result for count_first_elements((1, 2, 3, 4, 5, 5, 5, 1))'\nassert     count_first_elements((1, 2, 3, 4, 5, 5, 5, 5, 6, 7)) == 0, 'Wrong result for count_first_elements((1, 2, 3, 4, 5, 5, 5, 5, 6, 7))'\nassert     count_first_elements((1, 2, 3, 4, 5, 5, 5, 5, 6, 1, 2, 3, 4, 5, 5, 5)) == 0, 'Wrong result for count_first_elements((1, 2, 3, 4, 5, 5, 5, 5, 6, 1, 2, 3, 4, 5, 5, 5))'\nassert     count_first_elements((1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 9)) == 0, 'Wrong result for count_first_elements((1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 9))'\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_first_elements(tup1) == (True,True,True,True,True), 'Failed'\nassert     count_first_elements(tup2) == (False,False,False,False,True), 'Failed'\nassert     count_first_elements(tup3) == (False,True,True,True,True), 'Failed'\nassert     count_first_elements(tup4) == (True,True,True,True,True), 'Failed'\nassert     count_first_elements(tup5) == (False,False,True,True,True), 'Failed'\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint('correct')\n\n'''\nYou have a list of phone numbers.\nSort it in ascending order by the last digit of the number and return it as a new list.\n\nNote that your answer should always be a list, even if it contains only one element.\n\nInput Format\n\nThe first line contains an integer, n, denoting the number of elements in the list.\nEach line i of the n subsequent lines contain an element\nof the list.\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_num_decagonal(1) == 1 \nassert     is_num_decagonal(2) == 3\nassert     is_num_decagonal(3) == 4\nassert     is_num_decagonal(4) == 5\nassert     is_num_decagonal(5) == 6\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert is_num_decagonal(1) == 1\nassert is_num_decagonal(2) == 10\nassert is_num_decagonal(3) == 25\nassert is_num_decagonal(4) == 40\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint('\\n# is_num_decagonal')\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_num_decagonal(1) == 1\nassert     is_num_decagonal(2) == 11\nassert     is_num_decagonal(3) == 111\nassert     is_num_decagonal(4) == 121\nassert     is_num_decagonal(5) == 1111\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nis_num_decagonal(0) == 1\nassert \nis_num_decagonal(2) == 21\nassert \nis_num_decagonal(10) == 2211\nassert \nis_num_decagonal(25) == 232525\nassert \nis_num_decagonal(42) == 24242424\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_num_decagonal(1) == 1\nassert     is_num_decagonal(2) == 3\nassert     is_num_decagonal(3) == 6\nassert     is_num_decagonal(4) == 10\nassert     is_num_decagonal(5) == 15\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_num_decagonal(0) == 1\nassert     is_num_decagonal(1) == 1\nassert     is_num_decagonal(2) == 3\nassert     is_num_decagonal(3) == 5\nassert     is_num_decagonal(4) == 7\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef binary_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \n    Parameter\n        dlist: An array of elements (must be sorted).\n        item: An element of the array (must be present).\n    '''\n    pass\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert sequential_search(['A', 'B', 'C', 'D'], 'A') == (True, 0), \"Should be True\"\nassert sequential_search(['A', 'B', 'C', 'D'], 'B') == (True, 1), \"Should be True\"\nassert sequential_search(['A', 'B', 'C', 'D'], 'E') == (False, -1), \"Should be False\"\nassert sequential_search(['A', 'B', 'C', 'D'], 'C') == (True, 2), \"Should be True\"\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sequential_search([], item) ==     (False, -1)\nassert     sequential_search([5, 8, 17, 20, 23, 44], 17) == (True, 2)\nassert     sequential_search([5, 8, 17, 20, 23, 44], 23) == (True, 4)\nassert     sequential_search([5, 8, 17, 20, 23, 44], 75) == (False, -1)\nassert     sequential_search([5, 8, 17, 20, 23, 44], 99999) == (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sequential_search([1,2,3,4,5], 1) == (True, 0)\nassert     sequential_search([1,2,3,4,5], 5) == (True, 4)\nassert     sequential_search([1,2,3,4,5], 8) == (False, -1)\nassert     sequential_search([], 8) == (False, -1)\nassert     sequential_search([1,2,3,4,5], 100) == (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(\"\\n\")\nprint('-' * 100)\nprint(\"\\n\")\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sequential_search([], 13) == (False, -1)\nassert     sequential_search([13], 13) == (True, 0)\nassert     sequential_search([13, 14], 13) == (True, 0)\nassert     sequential_search([13, 14], 14) == (True, 1)\nassert     sequential_search([13, 14], 15) == (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef binary_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pass\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nall_unique([1,2,3,4]) == True\nassert \nall_unique([1,2,3,4,1]) == False\nassert \nall_unique([1,2,3,1]) == True\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     all_unique([1,1,1])     == False, \"1,1,1 should be unique\"\nassert     all_unique([1,2,1])     == True, \"1,2,1 should be unique\"\nassert     all_unique([1,2,1,1])     == False, \"1,2,1,1 should be unique\"\nassert     all_unique([1,2,1,1,1]) == True, \"1,2,1,1,1 should be unique\"\nassert     all_unique([1,1,1,2,1]) == True, \"1,1,1,2,1 should be unique\"\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     all_unique([\"cat\", \"dog\", \"cow\", \"cat\", \"cow\"]) == True\nassert     all_unique([\"cat\", \"cow\"]) == False\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     all_unique([\"Hola\",\"Mundo\",\"Hola\",\"Mundo\"]) == True, \"Error\"\nassert     all_unique([\"Mundo\",\"Hola\"]) == False, \"Error\"\nassert     all_unique([\"Hola\",\"Mundo\",\"Vivienda\"]) == False, \"Error\"\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     all_unique([]) == True\nassert     all_unique([1,1,2,3,3,3]) == False\nassert     all_unique([1]) == True\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     all_unique([1, 1, 1, 2, 2, 3, 4, 4]) == True, \"all_unique should return True\"\nassert     all_unique([1, 1, 1, 2, 2, 3, 4, 5]) == False, \"all_unique should return False\"\nassert     all_unique([\"welcome\", \"to\", \"python\", \"class\", \"course\"]) == True, \"all_unique should return True\"\nassert     all_unique([\"welcome\", \"to\", \"python\", \"class\", \"course\", \"1234\"]) == False, \"all_unique should return False\"\nassert     all_unique([\"welcome\", 1, 2, 3, 3, 2, \"1\", 2, 1]) == False, \"all_unique should return False\"\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     all_unique([]) == False, \"All empty list\"\nassert     all_unique([1,2,3]) == True, \"All unique\"\nassert     all_unique([1,2,1]) == False, \"Two occurrences\"\nassert     all_unique([1,1,2]) == False, \"Two occurrences\"\nassert     all_unique([1,2,2]) == True, \"All unique\"\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     all_unique([\"apple\", \"orange\", \"apple\", \"pear\", \"apple\", \"orange\"])     == True, \\\n        \"List should contain only unique elements.\"\nassert all_unique([\"apple\", \"orange\", \"pear\", \"orange\"]) == False, \"List should contain only unique elements.\"\nassert all_unique([\"apple\", \"apple\", \"apple\"]) == False, \"List should contain only unique elements.\"\nassert all_unique([1, 1, 1, 1, 1, 1]) == True, \"List should contain only unique elements.\"\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     all_unique([1,2,3,4,4,3,3,5])    ==     True\nassert all_unique([1,2,3,4,4,3,5]) == False\nassert all_unique([1,2,3,4,5]) == False\nassert all_unique([1,2]) == False\nassert all_unique([]) == True\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     all_unique([1,2,2,3,4]) == True, \"wrong\"\nassert all_unique([1,2,2,2,3]) == False, \"wrong\"\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    sub_list([1,2,3,4], [5,6,7,8]) == [-2,-3,-4,-5], \"wrong\"\n    sub_list([1,2,3], [4,5,6]) == [-2,-3,0], \"wrong\"\n    sub_list([1,2,3], [4,5]) == [-2,-3,0], \"wrong\"\n    sub_list([1,2], [4,5,6]) == [-2,1,2], \"wrong\"\n    sub_list([1,2], [4]) == [-2,1], \"wrong\"\n    sub_list([1], [4,5,6]) == [-1,-1], \"wrong\"\n    sub_list([1], [4]) == [-1], \"wrong\"\n    sub_list([], [4,5,6]) == [], \"wrong\"\n    sub_list([], [4]) == [], \"wrong\"\n    sub_list([1], []) == [1], \"wrong\"\n    sub_list([1], []) == [1], \"wrong\"\n    sub_list([1,2,3], []) == [1,2,3], \"wrong\"\n    sub_list([1,2,3], []) == [1,2,3], \"wrong\"\n    sub_list([], []) == [], \"wrong\"\n    sub_list([], []) == [], \"wrong\"\n    sub_list([1], [1]) == [0], \"wrong\"\n    sub_list([1], [1,2,3]) == [-1], \"wrong\"\n\ndef sub_dict(dict1, dict2):\n    '''\n    Write a function to subtract two dictionaries element-wise.\n    '''\n    pass\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n'''\nImplement an algorithm to convert a non-negative integer \ninto its english words representation. For example:\ninput = 123, output = \"One Hundred Twenty Three\"\ninput = 123, output = \"Twelve\"\ninput = 123, output = \"Hundred\"\ninput = 123, output = \"Three Hundred Twenty Three\"\ninput = 123, output = \"Hundred Three\"\ninput = 123, output = \"One Hundred Twenty Three\"\n\n'''\ndef convert_num(num):\n    '''\n    Implement an algorithm to convert a non-negative integer into its english words representation.\n    '''\n    pass\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sub_list([1,2,3], [1,2]) ==     [2,3]\nassert     sub_list([1,2,3,4,5], [1,2]) ==     [4,5]\nassert     sub_list([1,2,3,4,5,6], [1,2]) ==     [3,4,5,6]\nassert     sub_list([1,2,3], [4,5,6]) ==     [-1,-2,-3]\nassert     sub_list([1,2,3], [-1,1,2]) ==     [0,1,0]\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n\ndef bin_search(nums, target):\n    '''\n    Write a function that takes a sorted list of integers and a target integer, and returns the index of the target if it's contained in the list.\n    If it's not, return the index of the nearest value to the left of the target or the index of the nearest value to the right of the target.\n    '''\n    pass\n\ndef bin_search_alt(nums, target):\n    '''\n    Write a function that takes a sorted list of integers and a target integer, and returns the index of the target if it's contained in the list.\n    If it's not, return the index of the nearest value to the left of the target or the index of the nearest value to the right of the target.\n    '''\n    pass\n\ndef bin_search_recursive(nums, target, l=None, r=None):\n    '''\n    Write a function that takes a sorted list of integers and a target integer, and returns the index of the target if it's contained in the list.\n    If it's not, return the index of the nearest value to the left of the target or the index of the nearest value to the right of the target.\n    '''\n    if l is None and r is None:\n        l, r = 0, len(nums)-1\n    if l > r:\n        return None\n    mid = (l+r) // 2\n    if nums[mid] == target:\n        return mid\n    elif nums[mid] > target:\n        return bin_search_recursive(nums, target, l, mid-1)\n    else:\n        return bin_search_recursive(nums, target, mid+1, r)\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sub_list([1, 2, 3, 4], [4, 3, 2, 1]) ==     [-1, -2, -3, -4]\nassert     sub_list([1, 2, 3, 4, 5], [4, 3, 2, 1, 5]) ==     [-1, -2, -3, -4, -5]\nassert     sub_list([1, 2, 3, 4], [1, 2, 3, 4]) ==     [-1, -2, -3, -4]\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sub_list([2,5,9,12,15,18], [4,7,12,14]) == [[2, 5, 9, 12, 15], \n                                                    [-1, -1, -1, -1, -1]]\nassert     sub_list([2,5,9,12,15,18], \n                [5,7,11,14,16,18]) == [[-1, -1, -1, -1, -1, -1], \n                                    [3, 3, 3, 3, -1, -1]]\nassert     sub_list([2,5,9,12,15,18], \n                [6,7,11,14,16,18]) == [[1, 1, 1, 1, 1, 1], \n                                    [2, 2, 2, 2, 1, 1]]\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sub_list([1,2,3],[4,5,6]) == [-3,-2,-1],'sub_list is not the correct result'\n\ndef add_sub(num1,num2):\n    '''\n    Write a function to return the sum of two numbers and the difference of two numbers\n    '''\n    pass\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef list_add(nums1,nums2):\n    '''\n    Write a function that adds two lists element-wise and returns the result.\n    '''\n    pass\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(sub_list([1,2,3],[4,5,6]))\nprint(sub_list([1,2,3],[4,5,6]))\nprint(sub_list([1,2,3,4],[5,6,7,8]))\nprint(sub_list([1,2,3],[4,5,6]))\nprint(sub_list([1,2,3,4],[4,5,6]))\nprint(sub_list([1,2,3,4,5],[4,5,6]))\nprint(sub_list([1,2,3,4],[4,5,6]))\nprint(sub_list([1,2,3,4,5],[4,5,6]))\n\nprint('\\n\\n')\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     validate(121) == True, \"First\"\nassert     validate(12) == True, \"Second\"\nassert     validate(11) == False, \"Third\"\nassert     validate(3) == True, \"Fourth\"\nassert     validate(1) == False, \"Fifth\"\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     validate(123) == True\nassert     validate(12345) == True\nassert     validate(534) == False\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     validate(20) == True, 'The number 20 should be valid'\nassert     validate(21) == False, 'The number 21 should not be valid'\nassert     validate(1) == False, 'The number 1 should not be valid'\nassert     validate(123456789) == False, 'The number 123456789 should not be valid'\nassert     validate(89112233445566778899) == False, 'The number 89112233445566778899 should not be valid'\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert validate(1234567) == False\nassert validate(12345) == False\nassert validate(123) == False\nassert validate(12) == False\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    validate(123)== True\n    validate(12345) == True\n    validate(2222) == True\n    validate(1111) == False\n    validate(1234) == False\n    validate(123445) == False\n    validate(123456789) == False\n    validate(123456789123456789123456789) == False\n    \n    "
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nvalidate(983) == True\nassert validate(10) == False\nassert validate(1) == True"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert validate(123) == False, '1*2*3'\nassert validate(234) == True, '2*3*4'\nassert validate(1312) == False, '1*1*2*3*1'\nassert validate(1213) == True, '1*2*3*1*2'\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert not validate(123)\nassert not validate(123321)\nassert validate(123)\nassert validate(123321)\nprint('You passed the test')"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert check_element([1,1,1],1) == True\nassert check_element([1,1,1],2) == False\n\ndef check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_element(['a','b','c','a'], 'a') == True, \"Wrong answer\"\nassert     check_element(['a','b','c','a'], 'b') == False, \"Wrong answer\"\nassert     check_element(['a','b','c','a'], 'c') == True, \"Wrong answer\"\nassert     check_element(['a','b','c','a'], 'd') == False, \"Wrong answer\"\n\n\ndef check_element_2(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert check_element([1,2,3,1],1) == True\nassert check_element([1,2,3,1],2) == False\nassert check_element([1,1,1],1) == True\nassert check_element([1,1,1],2) == False\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_element([\"aaa\",\"bbb\",\"ccc\"], \"aaa\") == True, \"check_element(['aaa','bbb','ccc'], 'aaa') must be true\"\nassert     check_element([\"aaa\",\"bbb\",\"ccc\"], \"ccc\") == True, \"check_element(['aaa','bbb','ccc'], 'ccc') must be true\"\nassert     check_element([\"aaa\",\"bbb\",\"ccc\"], \"ddd\") == False, \"check_element(['aaa','bbb','ccc'], 'ddd') must be false\"\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n\ndef check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_element([1,2,3,4,5],5) == True, \"Wrong result\"\nassert     check_element([1,2,3,4,5],6) == False, \"Wrong result\""
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_match_two_three('abc') == True\nassert     text_match_two_three('bbbb') == False\nassert     text_match_two_three('aaaaaab') == False\nassert     text_match_two_three('bbbb') == False\nassert     text_match_two_three('aaabb') == True\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_match_two_three('ababbb') == True\nassert     text_match_two_three('abcbb') == False\nassert     text_match_two_three('abccbb') == True\nassert     text_match_two_three('abccbbb') == False\nassert     text_match_two_three('abccbba') == False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_two_three(\"ababc\") == True\nassert     text_match_two_three(\"abcabc\") == True\nassert     text_match_two_three(\"acbbc\") == False\nassert     text_match_two_three(\"aaacbbc\") == True\nassert     text_match_two_three(\"aacb\") == False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_match_two_three(\"ababab\") == True\nassert     text_match_two_three(\"ababaa\") == False\nassert     text_match_two_three(\"baabb\") == False\nassert     text_match_two_three(\"aaabb\") == False\nassert     text_match_two_three(\"aaaba\") == True\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_match_two_three('aaaabab') == True\nassert     text_match_two_three('aaabaab') == False\nassert     text_match_two_three('abababab') == True\nassert     text_match_two_three('abababab') == False\n\n'''\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_two_three(\"aaabbb\") == False\nassert     text_match_two_three(\"aabab\") == True\nassert     text_match_two_three(\"abbaa\") == True\nassert     text_match_two_three(\"ababaa\") == True\nassert     text_match_two_three(\"ababab\") == False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(\"check the correctness of text_match_two_three\")"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_match_two_three('aabbb') == True, \"Wrong answer\"\nassert     text_match_two_three('aab') == False, \"Wrong answer\"\nassert     text_match_two_three('bbb') == False, \"Wrong answer\"\nassert     text_match_two_three('a') == False, \"Wrong answer\"\nassert     text_match_two_three('b') == False, \"Wrong answer\"\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ntext = 'abababab'\nassert text_match_two_three(text) == True\nassert text_match_two_three('') == False\nassert text_match_two_three('aba') == True\nassert text_match_two_three('ba') == True\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_two_three('abcbaba') == True\nassert     text_match_two_three('abcbabb') == False\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_sub_array_sum_repeated([-2, -3, -1, -2, -1, -3], 2, 3) == 0\nassert     max_sub_array_sum_repeated([2, 3, 1, -2, -1], 2, 3) == 3\nassert     max_sub_array_sum_repeated([3, 1, -3, 0, -2], 2, 3) == 5\nassert     max_sub_array_sum_repeated([3, 0, 1], 2, 3) == 3\nassert     max_sub_array_sum_repeated([0, 0, 0, 0, 0], 1, 1) == 0\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_sub_array_sum_repeated([1, -2, 3, 4, 5, 1, 2], 5, 1) == 14\nassert     max_sub_array_sum_repeated([1, 1, 1, 1, 1], 3, 2) == 10\nassert     max_sub_array_sum_repeated([1, 2, 3, 4, 5], 5, 2) == 13\nassert     max_sub_array_sum_repeated([10, 2, -10, 2, 1], 3, 1) == 20\nassert     max_sub_array_sum_repeated([1, -2, 3, 4, 5, 1, 2], 5, 1) == 16\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_sub_array_sum_repeated([1, 2, 3], 3, 2) == 9\nassert     max_sub_array_sum_repeated([1, 2, 3, 1], 3, 2) == 9\nassert     max_sub_array_sum_repeated([1, 2, 3, -4, 5], 3, 2) == 9\nassert     max_sub_array_sum_repeated([-2, -3, 4, -1, -2, 1, 5, -3], 3, 2) == 13\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nmax_sub_array_sum_repeated([1,2,3,4,3], 4, 3) == 9, \"Wrong Answer\"\nprint(\"You got it right!\")\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_sub_array_sum_repeated([1, 4, -3, 7], 4, 2) == 9, \"incorrect max_sub_array_sum_repeated\"\nassert     max_sub_array_sum_repeated([-2, 1, -3, 4, -1, 2, 1, -5, 4], 6, 2) == 6, \"incorrect max_sub_array_sum_repeated\"\nassert     max_sub_array_sum_repeated([-2, 1, -3, 4, -1, 2, 1, -5, 4], 6, 3) == 12, \"incorrect max_sub_array_sum_repeated\"\nassert     max_sub_array_sum_repeated([-2, 1, -3, 4, -1, 2, 1, -5, 4], 5, 2) == 14, \"incorrect max_sub_array_sum_repeated\"\nassert     max_sub_array_sum_repeated([1, 4, -3, 7], 4, 2) == 9, \"incorrect max_sub_array_sum_repeated\"\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_sub_array_sum_repeated([2, 3, 5, -7, 2, 3], 5, 2) == 9, 'wrong'\nassert     max_sub_array_sum_repeated([2, 3, 5, -7, 2, 3], 5, 5) == -7, 'wrong'\nassert     max_sub_array_sum_repeated([2, 3, 5, -7, 2, 3], 3, 3) == 7, 'wrong'\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     square_Sum(0) == 0\nassert     square_Sum(1) == 1\nassert     square_Sum(2) == 4\nassert     square_Sum(3) == 10\nassert     square_Sum(4) == 36\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     square_Sum(0) == 0, \n        \"square_Sum(0) == 0\"\nassert     square_Sum(1) == 1, \n        \"square_Sum(1) == 1\"\nassert     square_Sum(2) == 4, \n        \"square_Sum(2) == 4\"\nassert     square_Sum(10) == 285, \n        \"square_Sum(10) == 285\"\nassert square_Sum(100) == 10000, \n        \"square_Sum(100) == 10000\"\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint square_Sum(1) == 0\nprint square_Sum(2) == 1\nprint square_Sum(3) == 4\nprint square_Sum(4) == 9\nprint square_Sum(5) == 25\nprint square_Sum(6) == 36\nprint square_Sum(7) == 49\nprint square_Sum(8) == 64\nprint square_Sum(9) == 81\nprint square_Sum(10) == 100\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     square_Sum(2) == 4\nassert     square_Sum(3) == 14\nassert     square_Sum(8) == 50\nassert     square_Sum(10) == 385\nassert     square_Sum(10) == 385\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_length([[],[],[]]) == 0\nassert     max_length([[1,2,3],[1,2,3],[1,2,3]]) == 3\nassert     max_length([[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]) == 4\nassert     max_length([[1,2,3,4,5,6,7,8,9,10,11,12],[1,2,3,4,5,6,7,8,9,10,11,12],[1,2,3,4,5,6,7,8,9,10,11,12],[1,2,3,4,5,6,7,8,9,10,11,12],[1,2,3,4,5,6,7,8,9,10,11,12]]) == 6"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n'''\nTask 1\nWrite a function to find the list of minimum length in a list of lists.\n'''\n\ndef min_length(list1):\n    '''\n    Write a function to find the list of minimum length in a list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_length([[1,2,3],[4,5,6],[7,8,9]]) == 3, \"Wrong answer\"\nassert     max_length([[1,2,3,4],[5,6,7,8],[9,10,11,12]]) == 4, \"Wrong answer\"\nassert     max_length([[1,2,3,4],[5,6,7,8,9],[10,11,12,13,14]]) == 4, \"Wrong answer\"\nassert     max_length([[1,2,3,4],[5,6,7,8],[9,10,11,12,13]]) == 4, \"Wrong answer\"\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_length([]) == 0\nassert     max_length([[1, 2, 3]]) == 3\nassert     max_length([[1, 2], [1, 2]]) == 2\nassert     max_length([[1, 2], [1, 2, 3]]) == 3\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    max_length([[],[],[]]) == 0\n    max_length([[1,2,3],[],[],[]]) == 1\n    max_length([[],[1,2,3],[],[],[]]) == 3\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_length([[], [], [], []]) == 0\nassert     max_length([[], [], [[], ['a']]]) == 2\nassert     max_length([[[], ['a']], [[], ['a']], [[], ['a']], [[], ['a']]]) == 4\nassert     max_length([[[], ['a'], ['b']], [[], ['a'], ['b']], [[], ['a'], ['b']], [[], ['a'], ['b']]]) == 5\nassert     max_length([[[], ['a'], ['b'], ['c']], [[], ['a'], ['b'], ['c']], [[], ['a'], ['b'], ['c']], [[], ['a'], ['b'], ['c']]]) == 5\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    count_no_of_ways(2, 3) == 1\n    count_no_of_ways(4, 3) == 2\n    count_no_of_ways(6, 5) == 8\n    count_no_of_ways(6, 7) == 8\n    count_no_of_ways(3, 2) == 1\n    count_no_of_ways(4, 1) == 4\n    count_no_of_ways(4, 2) == 4\n    count_no_of_ways(6, 3) == 2\n    count_no_of_ways(4, 3) == 1\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k == 0:\n        return 1\n    \n    if k == 1:\n        return n\n    \n    ways = 0\n    for i in range(0, k):\n        ways += count_no_of_ways(n, k-1)\n    \n    return ways\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Idea: Figure out the number of ways to paint n posts with k colors\n    # P(n, k) = P(n-1, k) + P(n-1, k-1)\n    if n < 0 or k < 0: return 0\n    if k == 0: return 1\n    return count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1)\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ncount_no_of_ways(4, 4) == 2, \"1st case\"\ncount_no_of_ways(2, 4) == 0, \"2nd case\"\ncount_no_of_ways(5, 4) == 1, \"3rd case\"\ncount_no_of_ways(10, 4) == 1, \"4th case\"\ncount_no_of_ways(1, 4) == 1, \"5th case\"\ncount_no_of_ways(10, 7) == 8, \"6th case\"\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ncount_no_of_ways(5, 3) == 5, count_no_of_ways(5, 3)\ncount_no_of_ways(5, 5) == 4, count_no_of_ways(5, 5)\ncount_no_of_ways(5, 4) == 5, count_no_of_ways(5, 4)\ncount_no_of_ways(5, 6) == 0, count_no_of_ways(5, 6)\ncount_no_of_ways(7, 5) == 0, count_no_of_ways(7, 5)\ncount_no_of_ways(1, 1) == 1, count_no_of_ways(1, 1)\ncount_no_of_ways(2, 1) == 2, count_no_of_ways(2, 1)\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert count_no_of_ways(2, 2) == 3\nassert count_no_of_ways(2, 3) == 4\nassert count_no_of_ways(2, 4) == 6\nassert count_no_of_ways(2, 5) == 7\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find(4,2)==2\nassert     find(16,4)==8"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find(5,2) == 2\nassert     find(7,2) == 4\nassert     find(8,2) == 2\nassert     find(9,2) == 3\nassert     find(5,3) == 3\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    find(2, 3) == 1\n    find(2, 4) == 0\n    find(2.1, 2.1) == 1\n    find(2.1, 3.1) == 0\n    find(3.1, 2.1) == 1\n    find(3.1, 3.1) == 1\n    find(5.1, 6.1) == 2\n    find(1.1, 2.2) == 1\n    find(2.1, 1.1) == 0\n    find(2.1, 2) == 1\n    find(2.1, 3) == 1\n    find(3.1, 4) == 1\n    find(4.1, 5) == 1\n    find(4.1, 6) == 2\n    find(1.1, 0.1) == 1\n    find(0.1, 1.1) == 1\n    find(0.1, 0.1) == 0\n    find(0.1, 0) == 1\n    find(1.1, 0) == 1\n    find(2, 3) == 1\n    find(3, 2) == 2\n    find(5, 6) == 3\n    find(5, 5) == 2\n    find(2, 2) == 1\n    find(2, 3) == 2\n    find(3, 2) == 2\n    find(2, 3) == 1\n    find(4, 2) == 1\n    find(2, 4) == 1\n    find(1, 2) == 0\n    find(3, 1) == 2\n    find(5, 1) == 3\n    find(3, 1) == 1\n    find(3, 0) == 1\n    find(5, 0) == 2\n    find(5, -1) == 3\n    find(5, -2) == 3\n    find(5, -3) == 4\n    find(5, -4) == 4\n    find(5, -5) == 4\n    find(5, -6) == 4\n    find(5, -7) == 4\n    find(5, -8) == 4\n    find(5, -9) == 4\n    find(5, -10) == 4\n    find(5, -11) == 4\n    find(5, -12) == 4\n    find(5, -13) == 4\n    find(5, -14) == 4\n    find(5, -15) == 4\n    find(5, -16) == 4\n    find(5, -17) == 4\n    find(5, -18) == 4\n    find(5, -19) == 4\n    find(5, -20) == 4\n    find(5, -21) == 4\n    find(5, -22) == 4\n    find(5, -23) == 4\n    find(5, -24) == 4\n    find(5, -25) == 4\n    find(5, -26) == 4\n    find(5, -27) == 4\n    find(5, -28) == 4\n    find(5, -29) == 4\n    find(5, -30) == 4\n    find(5, -31) == 4\n    find(5, -32) == 4\n    find(5, -33) == 4\n    find(5, -34) == 4\n    find(5, -35) == 4\n    find(5, -36) == 4\n    find(5, -37) == 4\n    find(5, -38) == 4\n    find(5, -39) == 4\n    find(5, -40) == 4\n    find(5, -41) == 4\n    find(5, -42) == 4\n    find(5, -43) == 4\n    find(5, -44) == 4\n    find(5, -45) == 4\n    find(5, -46) == 4\n    find(5, -47) == 4\n    find(5, -48) == 4\n    find(5, -49) == 4\n    find(5, -50) == 4\n    find(5, -51) == 4\n    find(5, -52) == 4\n    find(5, -53) == 4\n    find(5, -54) == 4\n    find(5, -55) == 4\n    find(5, -56) == 4\n    find(5, -57) == 4\n    find(5, -58) == 4\n    find(5, -59) == 4\n    find(5, -60) == 4\n    find(5, -61) == 4\n    find(5, -62) == 4\n    find(5, -63) == 4\n    find(5, -64) == 4\n    find(5, -65) == 4\n    find(5, -66) == 4\n    find(5, -67) == 4\n    find(5, -68) == 4\n    find(5, -69) == 4\n    find(5, -70) == 4\n    find(5, -71) == 4\n    find(5, -72) == 4\n    find(5, -73) == 4\n    find(5, -74) == 4\n    find(5, -75) == 4\n    find(5, -76) == 4\n    find(5, -77) == 4\n    find(5, -78) == 4\n    find(5, -79) == 4\n    find(5, -80) == 4\n    find(5, -81) == 4\n    find(5, -82) == 4\n    find(5, -83) == 4\n    find(5, -84) == 4\n    find(5, -85) == 4\n    find(5, -86) == 4\n    find(5, -87) == 4\n    find(5, -88) == 4\n    find(5, -89) == 4\n    find(5, -90) == 4\n    find(5, -91) == 4\n    find(5, -92) == 4\n    find(5, -93) == 4\n    find(5, -94) == 4\n    find(5, -95) == 4\n    find(5, -96) == 4\n    find(5, -97) == 4\n    find(5, -98) == 4\n    find(5, -99) == 4\n    find(5, -100) == 4\n    find(5, -101) == 4\n    find(5, -102) == 4\n    find(5, -103) == 4\n    find(5, -104) == 4\n    find(5, -105) == 4\n    find(5, -106) == 4\n    find(5, -107) == 4\n    find(5, -108) == 4\n    find(5, -109) == 4\n    find(5, -110) == 4\n    find(5, -111) == 4\n    find(5, -112) == 4\n    find(5, -113) == 4\n    find(5, -114) == 4\n    find(5, -115) == 4\n    find(5, -116) == 4\n    find(5, -117) == 4\n    find(5, -118) == 4\n    find(5, -119) == 4\n    find(5, -120) == 4\n    find(5, -121) == 4\n    find(5, -122) == 4\n    find(5, -123) == 4\n    find(5, -124) == 4\n    find(5, -125) == 4\n    find(5, -126) == 4\n    find(5, -127) == 4\n    find(5, -128) == 4\n    find(5, -129) == 4\n    find(5, -130) == 4\n    find(5, -131) == 4\n    find(5, -132) == 4\n    find(5, -133) == 4\n    find(5, -134) == 4\n    find(5, -135) == 4\n    find(5, -136) == 4\n    find(5, -137) == 4\n    find(5, -138) == 4\n    find(5, -139) == 4\n    find(5, -140) == 4\n    find(5, -141) == 4\n    find(5, -142) == 4\n    find(5, -143) == 4\n    find(5, -144) == 4\n    find(5, -145"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find(7,3) == 1\nassert     find(10,3) == 3\nassert     find(13,3) == 4\nassert     find(27,3) == 3\nassert     find(39,3) == 4\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint find(30,20)\nprint find(40,20)\nprint find(10,20)\nprint find(50,20)\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find(7,5) == 2\nassert     find(6,9) == 4\nassert     find(4,2) == 2\nassert     find(8,4) == 1"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find(3,9) == 3\nassert     find(7,7) == 7\nassert     find(8,8) == 8\nassert     find(0,1) == 0\nassert     find(9,9) == 9\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nfind(1,0) == 1\nassert find(3,1) == 1\nassert find(1,2) == 0\nassert find(0,0) == 0\nassert find(8,1) == 8\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert \nassert \n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nfind(10,10)\nfind(10,9)\nfind(10,11)\nfind(10,8)\nfind(10,7)\nfind(10,6)\nfind(10,5)\nfind(10,4)\nfind(10,3)\nfind(10,2)\nfind(10,1)\n\nassert \nfind(10,10)\nassert \nfind(10,9)\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     otherside_rightangle(3,4) == 2.0\nassert     otherside_rightangle(5,5) == 5.0\nassert     otherside_rightangle(1,1) == 1.0\n\n\n\ndef otherside_rectangle(w,h):\n    '''\n    Write a function to find the third side of a rectangle.\n    '''\n    pass\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     otherside_rightangle(3,2) == 1\nassert     otherside_rightangle(4,5) == 2\nassert     otherside_rightangle(3,7) == 1.5\n\ndef otherside_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    pass\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     otherside_rightangle(3,2) == 1.5\nassert     otherside_rightangle(3,3) == 4\nassert     otherside_rightangle(3,4) == 5\nassert     otherside_rightangle(3,5) == 5.5\nassert     otherside_rightangle(3,6) == 5.5\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert otherside_rightangle(3,4) == 5\nassert otherside_rightangle(4,4) == 2\nassert otherside_rightangle(5,4) == 3\nassert otherside_rightangle(6,4) == 3\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     otherside_rightangle(3,4) == 5\nassert     otherside_rightangle(4,3) == 5\nassert     otherside_rightangle(6,8) == 10\nassert     otherside_rightangle(7,7) == 14\nassert     otherside_rightangle(2,2) == 2\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef otherside_rightangle_2(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    pass\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     otherside_rightangle(1,2) == 1.58, otherside_rightangle(1,2)\nassert otherside_rightangle(2,2) == 1.0, otherside_rightangle(2,2)\nassert otherside_rightangle(1,1) == 2, otherside_rightangle(1,1)\nassert otherside_rightangle(1,0) == 0, otherside_rightangle(1,0)\nassert otherside_rightangle(0,1) == 0, otherside_rightangle(0,1)\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ndef main():\n    for i in range(1, 20):\n        print(i, \":\", otherside_rightangle(i, i))\n\nif __name__ == \"__main__\":\n    main()\n\ndef area_square(length):\n    '''\n    Write a function to find the area of a square with a given length.\n    '''\n    pass\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef right_triangle(a, b, c):\n    '''\n    Write a function to find the area of a right triangle.\n    '''\n    pass\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     otherside_rightangle(6,3) == 4, \"wrong\"\nassert otherside_rightangle(10,5) == 5, \"wrong\"\nassert otherside_rightangle(7,7) == 7, \"wrong\"\nassert otherside_rightangle(6,4) == 8, \"wrong\"\nassert otherside_rightangle(10,8) == 8, \"wrong\"\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_val([1,2,3,4]) == 4\nassert     max_val([7,9,3,4,6,8,10]) == 10\n\ndef max_of_even_odd(listval):\n    '''\n    Write a function to find the maximum of even and odd numbers in a given heterogeneous list.\n    '''\n    pass\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint('[Pass]') if max_val([1, 2, 3, 4]) == 4 else print('[Fail]')\nassert \nprint('[Pass]') if max_val([1, 2, 3, 4, 5]) == 5 else print('[Fail]')\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_val([2, -3, 0, 1, 4, -5]) == 6\nassert     max_val([-3, -1, -7, -4, -5, -3]) == -1\nassert     max_val([1]) == 1\nassert     max_val([4]) == 4\nassert     max_val([-3, -1, -7, -4, -5, -3, 2, -3]) == 2\nprint('tests passed')\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_val([1,2,3,4,6]) == 6, 'wrong result'\nassert     max_val([1,2,3,4,5]) == 5, 'wrong result'\nassert     max_val([2,2,2]) == 2, 'wrong result'\nassert     max_val([-1,1,-3,2,-4]) == 2, 'wrong result'\nassert     max_val([-4,-3,-2,-1]) == -1, 'wrong result'\nprint('Test passed')\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nmax_val([1,2,3,4,5,6]) == 6\nprint('test 5 passed!')\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_val([1, 2, 3]) == 3\nassert     max_val([2, 3, 1]) == 3\nassert     max_val([3, 2, 1]) == 3\nassert     max_val([1, 'a', 3, 'b', 5]) == 'a'\nassert     max_val([False, 0, 1, 1.0, 'a']) == 1.0\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_div(1) == 0\nassert     sum_div(2) == 1\nassert     sum_div(3) == 2\nassert     sum_div(4) == 3\nassert     sum_div(5) == 3\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_div(6) == 2 + 3, 'Wrong result'\nassert     sum_div(10) == 2 + 5, 'Wrong result'\nassert     sum_div(12) == 2 + 3 + 6, 'Wrong result'\nprint('The test passed!')\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_div(100) == 50\nassert     sum_div(10) == 1 + 2 + 5\nassert     sum_div(7) == 1 + 7 + 21\nassert     sum_div(2) == 1 + 2 + 2\nassert     sum_div(3) == 1 + 3\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nassert sum_div(12) == 21,'sum of divisors should be 21'\nassert sum_div(14) == 5,'sum of divisors should be 5'\nassert sum_div(20) == 6,'sum of divisors should be 6'\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    pass\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_div(0) == 0,'sum_div(0) = 1'\nassert     sum_div(1) == 1,'sum_div(1) = 1'\nassert     sum_div(2) == 2,'sum_div(2) = 2'\nassert     sum_div(7) == 1,'sum_div(7) = 1'\nassert     sum_div(8) == 1,'sum_div(8) = 1'\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert sum_div(0) == 0, \"passes\"\nassert sum_div(1) == 1, \"passes\"\nassert sum_div(5) == 4, \"passes\"\nassert sum_div(9) == 6, \"passes\"\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_Inv_Count([1,3,2,5]) == 0, \"First\"\nassert     get_Inv_Count([1,2,3,4,5,6,7]) == 1, \"Second\"\nassert     get_Inv_Count([1,2,4,3,5,6,7]) == 3, \"Third\"\nassert     get_Inv_Count([1,2,4,3,5,7,6]) == 3, \"Fourth\"\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_Inv_Count([]) == 0, \"Input is empty\"\nassert     get_Inv_Count([1]) == 0, \"Input is only one element\"\nassert     get_Inv_Count([3]) == 1, \"Input contains one element\"\nassert     get_Inv_Count([1, 2]) == 1, \"Input contains two elements\"\nassert     get_Inv_Count([1, 3, 2]) == 2, \"Input contains three elements\"\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_Inv_Count([1,2,3,4]) == 0\nassert     get_Inv_Count([1,2,3,4,5]) == 2\nassert     get_Inv_Count([1,3,5,2,4]) == 2\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    get_Inv_Count([1, 2, 3]) == 0\n    get_Inv_Count([3, 2, 1]) == 1\n    get_Inv_Count([1, 1, 2]) == 2\n    get_Inv_Count([2, 1, 3]) == 1\n    get_Inv_Count([3, 2, 1, 5, 3]) == 2\n    get_Inv_Count([3, 2, 1, 5, 3, 6]) == 3\nassert get_Inv_Count([]) == 0\nassert get_Inv_Count([-5, -4, -3, -2, -1]) == 5\nassert get_Inv_Count([-1, 2, -3, 4, -5]) == 2\nassert get_Inv_Count([1, 2, -3, 4, -5]) == 3\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_Inv_Count([1,2,3,4,5]) == 0\nassert     get_Inv_Count([1,3,2,4,5]) == 1\nassert     get_Inv_Count([2,1,3,4,5]) == 1\nassert     get_Inv_Count([2,3,1,4,5]) == 3\nassert     get_Inv_Count([3,2,1,4,5]) == 3\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_Inv_Count([2, 3, 5, 1]) == 2, \"Wrong\"\nassert     get_Inv_Count([1, 3, 5, 2]) == 2, \"Wrong\"\nassert     get_Inv_Count([1, 2, 3]) == 0, \"Wrong\"\nassert     get_Inv_Count([]) == 0, \"Wrong\"\nassert     get_Inv_Count([2, 3, 4, 5]) == 0, \"Wrong\"\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef get_Inv_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    count = 0\n    if len(arr) < 2:\n        return 0\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input())\n\n    for t_itr in range(t):\n        n = int(input())\n\n        arr = list(map(int, input().rstrip().split()))\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_Inv_Count([]) == 0, \"empty array\"\nassert     get_Inv_Count([1,1]) == 0, \"single element\"\nassert     get_Inv_Count([1, 2, 3]) == 3, \"two elements\"\nassert     get_Inv_Count([1, 1, 1, 2, 3, 3]) == 5, \"nested lists\"\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(get_Inv_Count([1,2,3,4,4,3])) # 4\n\ndef get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    pass\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     flatten_list([]) == []\nassert     flatten_list([[]]) == []\nassert     flatten_list([[[[]]]]) == []\nassert     flatten_list([[[[[[[[[]]]]]]]]) == []\nassert     flatten_list([[1,2,3]]) == [1,2,3]\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     flatten_list([[1,2,3],['a','b','c']]) == [[1, 2, 3], ['a', 'b', 'c']]\nassert    flatten_list([1,2,[3,4]]) == [1,2,3,4]\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     flatten_list([1, 2, 3, [4, 5], [6, 7, 8]]) == [1, 2, 3, 4, 5, 6, 7, 8], \"Wrong!\"\nassert     flatten_list([1, 2, 3]) == [1, 2, 3], \"Wrong!\"\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    '''\n    The input list will have the following structure:\n    [\n        [1, 2, 3],\n        [4, 5],\n        [6],\n        [],\n        [7, 8, 9]\n    ]\n    '''\n    \n    input_list = [\n    [1, 2, 3],\n    [4, 5],\n    [6],\n    [],\n    [7, 8, 9]\n    ]\n    \n    flatten_list(input_list"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     flatten_list([[1, 2, 3, 4], \n                    [5, 6, 7, 8], \n                    [9, 10, 11, 12], \n                    [13, 14, 15, 16]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\nassert     flatten_list([[1, 2, 3], \n                    [4, 5, 6], \n                    [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     flatten_list([[], \n                    []]) == []\nassert     flatten_list([[]]) == []\nassert     flatten_list([[1], \n                    [2]]) == [1, 2]\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n'''\nFlatten and print a nested list (easy and simple)\n\nExample\n\nInput : [[1,2,3],2,[1,3],4]\nOutput : 1 2 3 2 1 3 4\n'''\n\ndef flatten_list_solution(nested_list):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    pass\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     flatten_list([[1, 2], [3], [[4, 5], 6]]) == [1, 2, 3, 4, 5, 6]\nassert     flatten_list([[1], [[2, 3], 4], 5]) == [1, 2, 3, 4, 5]\nassert     flatten_list([[1, 2], 3, 4]) == [1, 2, 3, 4]\nassert     flatten_list([[1], 2, 3, 4]) == [1, 2, 3, 4]\nassert     flatten_list([]) == []\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_aggregate([]) == (0, 0, 0, 0)\nassert     max_aggregate([(0, 1, 2, 3), (3, 2, 1, 0)]) == (3, 2, 1, 0)\nassert     max_aggregate([(1, 2, 3, 4), (2, 3, 1, 0), (1, 2, 3, 4), (1, 3, 2, 0)]) == (2, 3, 1, 0)\n\ndef max_aggregate_dict(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # two counters used to keep track of the max and min\n    max_cnt, min_cnt = 0, 0\n    \n    # use a dictionary to get the values\n    agg_dict = defaultdict(int)\n    \n    # accumulate the value\n    for val in stdata:\n        agg_dict[val[0]] += val[1]\n        if val[1] > max_cnt:\n            max_cnt = val[1]\n        elif val[1] < min_cnt:\n            min_cnt = val[1]\n        \n    return max_cnt, min_cnt, agg_dict"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_aggregate([(1,2),(3,4),(5,6)])==8\nassert     max_aggregate([(1,2),(3,4),(5,6),(7,8)])==13\nassert     max_aggregate([(3,4,2),(1,2),(3,4,5),(6,7,5)])==18\nassert     max_aggregate([(7,8,1,2,5),(1,2),(1,2,4,3),(1,2,4,3)])==5\n\ndef max_aggregate_2(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    pass\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_aggregate([('a', 1), ('a', 2), ('a', 3), ('a', 4), ('a', 5)]) == ('a', 5), \"Max aggregate is (a, 5), but got {}\".format(max_aggregate([('a', 1), ('a', 2), ('a', 3), ('a', 4), ('a', 5)]))\nassert     max_aggregate([('a', 1), ('a', 2), ('a', 3), ('a', 4), ('a', 5), ('b', 1), ('b', 2), ('b', 3), ('b', 4), ('b', 5)]) == ('b', 5), \"Max aggregate is ('b', 5), but got {}\".format(max_aggregate([('a', 1), ('a', 2), ('a', 3), ('a', 4), ('a', 5), ('b', 1), ('b', 2), ('b', 3), ('b', 4), ('b', 5)]))\nassert     max_aggregate([('a', 1), ('a', 2), ('a', 3), ('a', 4), ('a', 5), ('b', 1), ('b', 2), ('b', 3), ('b', 4), ('b', 5), ('c', 1), ('c', 2), ('c', 3), ('c', 4), ('c', 5)]) == ('c', 5), \"Max aggregate is ('c', 5), but got {}\".format(max_aggregate([('a', 1), ('a', 2), ('a', 3), ('a', 4), ('a', 5), ('b', 1), ('b', 2), ('b', 3), ('b', 4), ('b', 5), ('c', 1), ('c', 2), ('c', 3), ('c', 4), ('c', 5)]))\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_aggregate([(10, 11, 12), (20, 21), (22, 23, 24), (30, 31), (0, 1, 2)]) == (30, 31, 24)\nassert     max_aggregate([(1, 2, 3), (7, 8, 9, 10), (6, 5, 4)]) == (10, 8, 6)\nassert     max_aggregate([(1, 1, 1), (1, 1, 1), (1, 1, 1)]) == (1, 1, 1)\nassert     max_aggregate([]) == ()\nassert     max_aggregate([(1, 2, 3), (4, 5, 6, 7, 8)]) == (7, 8)\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_aggregate([]) == 0, \"Empty list\"\nassert     max_aggregate([(1,2)]) == 2, \"List with only one element\"\nassert     max_aggregate([(1,2),(1,2,3)]) == 3, \"List with two elements\"\nassert     max_aggregate([(1,2,3),(1,2,3)]) == 3, \"List with same elements\"\nassert     max_aggregate([(1,2,3),(1,2,3,4)]) == 4, \"List with same elements\"\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_aggregate([(1,2), (3,4), (5,6), (7,8), (9,10)]) == 10\nassert     max_aggregate([(1,2), (3,4), (5,6), (7,8), (9,9)]) == 9\nassert     max_aggregate([(1,2), (3,4), (5,6), (7,8), (9,10), (0,0)]) == 10\nassert     max_aggregate([(1,2), (3,4), (5,6), (7,8), (9,10), (0,10)]) == 10\n\ndef max_aggregate2(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    pass\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_aggregate([]) == 0\nassert     max_aggregate([(10,20),(30,40)]) == (30,40)\nassert     max_aggregate([(10,20),(10,20),(30,40)]) == (30,40)\nassert     max_aggregate([(10,20),(10,20),(30,40),(50,60)]) == (40,60)\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef max_aggregate_alternative(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # print(stdata)\n    # return 0\n    n = len(stdata)\n    summ = 0\n    max_summ = -1\n    max_count = -1\n    i = 1\n    while i <= n:\n        if stdata[i][0] < stdata[i-1][0]:\n            # max_summ = summ\n            summ = 0\n            max_count = -1\n        else:\n            summ += stdata[i][1]\n            # max_summ = max(max_summ, summ)\n            max_count = max(max_count, summ)\n        i += 1\n    return max_count\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_aggregate([(1,2),(3,4)]) == 4\nassert max_aggregate([(1,2),(3,4),(3,4),(2,4),(5,6)]) == 7\nassert max_aggregate([(1,2),(3,4),(3,4),(2,4),(5,6),(7,8)]) == 8"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    return (max(stdata, key=lambda x: x[1]))\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ncount_binary_seq(5) == 15\ncount_binary_seq(3) == 12\ncount_binary_seq(2) == 9\ncount_binary_seq(1) == 4"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef count_ternary_seq(n):\n    '''\n    Write a function to find the count of all ternary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    pass\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    else:\n        return count_binary_seq(n-1) + count_binary_seq(n-2)\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_binary_seq(0) == 0, \"should be 0\"\nassert     count_binary_seq(1) == 2, \"should be 2\"\nassert     count_binary_seq(2) == 4, \"should be 4\"\nassert     count_binary_seq(3) == 10, \"should be 10\"\nassert     count_binary_seq(4) == 13, \"should be 13\"\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint('\\n\\nAll the tests are passed.')"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert (count_binary_seq(0) == 0)\nassert (count_binary_seq(1) == 1)\nassert (count_binary_seq(2) == 1)\nassert (count_binary_seq(3) == 2)\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    count_binary_seq(2) == 9\n    count_binary_seq(3) == 16\n    count_binary_seq(4) == 26\n    count_binary_seq(5) == 46\n\ndef count_non_binary_seq(n):\n    '''\n    Write a function to find the count of all non-binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    pass\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint "
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert         dict_depth({1: {2: {3: {4: {5: {6: {7: {8: {9: {10: {11: {12: {13: {14: {15: {16: {17: {18: {19: {20: {21: {22: {23: {24: {25: {26: {27: {28: {29: {30: {31: {32: {33: {34: {35: {36: {37: {38: {39: {40: {41: {42: {43: {44: {45: {46: {47: {48: {49: {50: {51: {52: {53: {54: {55: {56: {57: {58: {59: {60: {61: {62: {63: {64: {65: {66: {67: {68: {69: {70: {71: {72: {73: {74: {75: {76: {77: {78: {79: {80: {81: {82: {83: {84: {85: {86: {87: {88: {89: {90: {91: {92: {93: {94: {95: {96: {97: {98: {99: {100: {101: {102: {103: {104: {105: {106: {107: {108: {109: {110: {111: {112: {113: {114: {115: {116: {117: {118: {119: {120: {121: {122: {123: {124: {125: {126: {127: {128: {129: {130: {131: {132: {133: {134: {135: {136: {137: {138: {139: {140: {141: {142: {143: {144: {145: {146: {147: {148: {149: {150: {151: {152: {153: {154: {155: {156: {157: {158: {159: {160: {161: {162: {163: {164: {165: {166: {167: {168: {169: {170: {171: {172: {173: {174: {175: {176: {177: {178: {179: {180: {181: {182: {183: {184: {185: {186: {187: {188: {189: {190: {191: {192: {193: {194: {195: {196: {197: {198: {199: {200: {201: {202: {203: {204: {205: {206: {207: {208: {209: {210: {211: {212: {213: {214: {215: {216: {217: {218: {219: {220: {221: {222: {223: {224: {225: {226: {227: {228: {229: {230: {231: {232: {233: {234: {235: {236: {237: {238: {239: {240: {241: {242: {243: {244: {245: {246: {247: {248: {249: {250: {251: {252: {253: {254: {255: {256: {257: {258: {259: {260: {261: {262: {263: {264: {265: {266: {267: {268: {269: {270: {271: {272: {273: {274: {275: {276: {277: {278: {279: {280: {281: {282: {283: {284: {285: {286: {287: {288: {289: {290: {291: {292: {293: {294: {295: {296: {297: {298: {299: {300: {301: {302: {303: {304: {305: {306: {307: {308: {309: {310: {311: {312: {313: {314: {315: {316: {317: {318: {319: {320: {321: {322: {323: {324: {325: {326: {327: {328: {329: {330: {331: {332: {333: {334: {335: {336: {337: {338: {339: {340: {341: {342: {343: {344: {345: {346: {347: {348: {349: {350: {351: {352: {353: {354: {355: {356: {357: {358: {359: {360: {361: {362: {363: {364: {365: {366: {367: {368: {369: {370: {371: {372: {373: {374: {375: {376: {377: {378: {379: {380: {381: {382: {383: {384: {385: {386: {387: {388: {389: {390: {391: {392: {393: {394: {395: {396: {397: {398: {399: {400: {401: {402: {403: {404: {405: {406: {407: {408: {409: {410: {411: {412: {413: {414: {415: {416: {417: {418: {419: {420: {421: {422: {423: {424: {425: {426: {427: {428: {429: {430: {431: {432: {433: {434: {435: {436: {437: {438: {439: {440: {441: {442: {443: {444: {445: {446: {447: {448: {449: {450: {451: {452: {453: {454: {455: {456: {457: {458: {459: {460: {461: {462: {463: {464: {465: {466: {467: {468: {469: {470: {471: {472: {473: {474: {475: {476: {477: {478: {479: {480: {481: {482: {483: {484: {485: {486: {487: {488: {489: {490: {491: {492: {493: {494: {495: {496: {497: {498: {499: {500: {501: {502: {503: {504: {505: {506: {507: {508: {509: {510: {511: {512: {513: {514: {515: {516: {517: {518: {519: {520: {521: {522: {523: {524: {525: {526: {527: {528: {529: {530: {531: {532: {533: {534: {535: {536: {537: {538: {539: {540: {541: {542: {543: {544: {545: {546: {547: {548: {549: {550: {551: {552: {553: {554: {555: {556: {557: {558: {559: {560: {561: {562: {563: {564: {565: {566: {567: {568: {569: {570: {571: {572: {573: {574: {575: {576: {577: {578: {579: {580: {581: {582: {583: {584: {585: {586: {587: {588: {589: {590: {591: {592: {593: {594: {595: {596: {597: {598: {599: {600: {601: {602: {603: {604: {605: {606: {607: {608: {609: {610: {611: {612: {613: {614: {615: {616: {617: {618: {619: {620: {621: {622: {623: {624: {625: {626: {627: {628: {629: {630: {631: {632: {633: {634: {635: {636: {637: {638: {639: {640: {641: {642: {643: {644: {645: {646: {647: {648: {649: {650: {651: {652: {653: {654: {655: {656: {657: {65"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     dict_depth({'a': 1, 'b': 2, 'c': 3}) == 2, \"Wrong output\"\nassert dict_depth({'a': 1, 'b': 2, 'c': 3}) == 3, \"Wrong output\"\nassert dict_depth({}) == 0, \"Wrong output\"\nassert dict_depth({'a': 1}) == 1, \"Wrong output\"\nassert dict_depth({'a': 1, 'b': 2}) == 2, \"Wrong output\"\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     dict_depth({'a':1,'b':{'c':2,'d':{'e':3,'f':4}}} ) == 2\nassert     dict_depth({'a':1,'b':{'c':2,'d':{'e':3,'f':4}}}) == 2\nassert     dict_depth({'a':1,'b':{'c':2,'d':{'e':3,'f':4,'g':5}}} ) == 3\nassert     dict_depth({'a':1,'b':{'c':2,'d':{'e':3,'f':4,'g':5}}}) == 3\nassert     dict_depth({'a':1,'b':{'c':2,'d':{'e':3,'f':4,'g':5,'h':6}}} ) == 4\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     dict_depth(dict()) == 0, \"dict_depth(dict()) = 0\"\nassert dict_depth(dict({})) == 0, \"dict_depth(dict({})) = 0\"\nassert dict_depth(dict({\"foo\": 1})) == 1, \"dict_depth(dict(foo)) = 1\"\nassert dict_depth(dict({\"foo\": {}})) == 2, \"dict_depth(dict(foo)) = 2\"\nassert dict_depth(dict({\"foo\": {\"bar\": \"baz\"}})) == 3, \"dict_depth(dict(foo)) = 3\"\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     dict_depth({'A': {'B': {'C': 1, 'D': {'E': 2}}, 'F': 2, 'G': {'H': {'I': 'j', 'J': 'k'}}}}) == 3\nassert     dict_depth({'A': {'B': {'C': 1, 'D': {'E': 2}}, 'F': 2, 'G': {'H': {'I': 'j', 'J': 'k'}}, 'K': {'L': 1, 'M': {'N': 'o'}}}}) == 3\nassert     dict_depth({'A': {'B': {'C': 1, 'D': {'E': 2}}, 'F': 2, 'G': {'H': {'I': 'j', 'J': 'k'}}, 'K': {'L': 1, 'M': {'N': 'o'}}, 'P': 3}}) == 2\nassert     dict_depth({'A': {'B': {'C': 1, 'D': {'E': 2}}, 'F': 2, 'G': {'H': {'I': 'j', 'J': 'k'}}, 'K': {'L': 1, 'M': {'N': 'o'}}, 'P': 3}, 'Q': 2}) == 2\nassert     dict_depth({'A': {'B': {'C': 1, 'D': {'E': 2}}, 'F': 2, 'G': {'H': {'I': 'j', 'J': 'k'}}, 'K': {'L': 1, 'M': {'N': 'o'}}, 'P': 3}, 'Q': 2, 'R': 1}) == 2\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     dict_depth({}) == 0, 'dict_depth'\nassert     dict_depth({\"key\": 1}) == 0, 'dict_depth'\nassert     dict_depth({\"key\": {}}) == 1, 'dict_depth'\nassert     dict_depth({\"key\": 1, \"key2\": 2}) == 2, 'dict_depth'\nassert     dict_depth({\"key\": 1, \"key2\": {\"key3\": 2}}) == 3, 'dict_depth'\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert not \nassert dict_depth({}) == 0\nassert dict_depth({1: \"a\", 2: \"b\", 3: \"c\"}) == 2\nassert dict_depth({1: {2: \"a\", 3: \"b\"}, 2: {3: \"c\"}}) == 3\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef dict_depth2(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Element([1,2,3,4,5,6,7,8],[1,3],1,6) == 6\nassert     find_Element([1,2,3,4,5,6,7,8],[1,3],2,8) == 7\nassert     find_Element([1,2,3,4,5,6,7,8],[1,3],5,1) == 1\nassert     find_Element([1,2,3,4,5,6,7,8],[1,3],2,1) == 1\nassert     find_Element([1,2,3,4,5,6,7,8],[1,3],1,2) == 1\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert find_Element([[1,3,5,7],\n                    [2,4,6,8],\n                    [3,5,6,7]],\n                    [1,2,3,4],\n                    [[1,2],[3,4],[5,6]],\n                    1) == 2\nassert find_Element([[1,3,5,7],\n                    [2,4,6,8],\n                    [3,5,6,7]],\n                    [1,2,3,4],\n                    [[1,2,3,4],[1,2,3,4]],\n                    0) == 1\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(\"TESTCASE RESULTS: \")\nfind_Element([0,2,4,4,5,7],[5,10],2,2) # expected output : 4\nfind_Element([0,1,3,5,7],[2,5],2,1) # expected output : 3\nfind_Element([0,1,3,5,7,9],[4,8],2,2) # expected output : 5\nfind_Element([0,1,3,5,7,9],[6,10],2,1) # expected output : 7\nfind_Element([0,1,3,5,7,9],[6,8],2,1) # expected output : 7\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Element([[1,2],[3,4]],[[2,2],[2,2]],0,1) == 2\nassert     find_Element([[1,2],[3,4]],[[2,2],[2,2]],1,1) == 4\nassert     find_Element([[1,2],[3,4]],[[2,2],[2,2]],1,2) == 2\nassert     find_Element([[1,2],[3,4]],[[2,2],[2,2]],2,1) == 2\nassert     find_Element([[1,2],[3,4]],[[2,2],[2,2]],2,2) == 4\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_Element(arr,range_of_rotations,rotation_count,index) == expected_output\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint(\"Hurray! your code is correct\")\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Element([3,4,5,6,7],2,3,3) == True, \"Wrong output\"\nassert     find_Element([3,4,5,6,7],2,3,0) == False, \"Wrong output\"\nassert     find_Element([3,4,5,6,7],2,3,6) == True, \"Wrong output\"\nassert     find_Element([3,4,5,6,7],2,3,3) == True, \"Wrong output\"\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     start_withp([\"papa\", \"ball\", \"pip\", \"pa\", \"pippi\"]) == (\"papa\", \"ball\"), \"WRONG\"\nassert     start_withp([\"papa\", \"pa\", \"pippi\"]) == (\"papa\", \"pa\"), \"WRONG\"\nassert     start_withp([\"pippi\", \"pa\", \"papa\"]) == (\"pippi\", \"pa\"), \"WRONG\"\nassert     start_withp([\"pip\", \"pa\", \"pippi\"]) == (\"pip\", \"pa\"), \"WRONG\"\n\ndef start_withp_1(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    Hint: Use regular expressions to solve this problem!\n    '''\n    pass\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     start_withp(['Adam', 'John', 'Paul']) == ['Adam', 'Paul']\nassert     start_withp(['Pavel', 'John', 'Paul']) == ['Pavel', 'Paul']\nassert     start_withp(['Adam', 'John', 'Pavel']) == ['Pavel']\nassert     start_withp(['Adam', 'John', 'Paul', 'Pavel']) == ['Pavel', 'Paul']\nassert     start_withp(['Pavel', 'John', 'Paul', 'Adam']) == ['Pavel', 'Paul']\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n'''\nWrite a function that takes in a list of words and returns a dictionary of letter counts in the alphabet for each word.\n'''\n\ndef letter_counts(words):\n    '''\n    Write a function that takes in a list of words and returns a dictionary of letter counts in the alphabet for each word.\n    '''\n    pass\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     start_withp([\"hello\", \"hi\", \"hi\"]) == ['hi', 'hi']\nassert start_withp([\"hello\", \"hi\", \"hi\"]) == ['hi', 'hi']\nassert start_withp([\"hello\", \"hi\", \"hi\"]) == ['hi', 'hi']\nassert start_withp([\"hello\", \"hi\", \"hi\"]) == ['hi', 'hi']\nassert start_withp([\"hello\", \"hi\", \"hi\"]) == ['hi', 'hi']\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     start_withp([\"pizza\", \"pizzzz\", \"pizzap\"]) == (\"pizza\", \"pizzzz\")\nassert start_withp([\"pizzas\", \"pizza\", \"pizzasp\"]) == (\"pizzas\", \"pizza\")\nprint(\"start_withp test success\")\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef strip_file_name(words):\n    '''\n    Write a function to strip file name from a list of words.\n    '''\n    pass\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nwords = ['papp', 'paps', 'pappy', 'ppaap']\nassert start_withp(words) == ['paps', 'pappy']\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     start_withp([\"praetexto\",\"praatribulo\",\"praeflexo\",\"praedecis\",\"praeses\"]) == [\"praeflexo\", \"praedecis\"]\nassert     start_withp([\"praetexto\",\"praatribulo\",\"praeflexo\",\"praeses\",\"praedecis\"]) == [\"praeflexo\", \"praedecis\"]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     start_withp([\"punjabi\", \"welcome\", \"ascii\"]) == [\"punjabi\", \"welcome\"]\nassert start_withp([\"python\", \"lang\", \"programming\"]) == [\"python\", \"lang\"]\nassert start_withp([\"python\", \"ascii\", \"programming\"]) == [\"python\", \"ascii\"]\nassert start_withp([\"python\", \"welcome\", \"programming\"]) == [\"python\", \"welcome\"]\nassert start_withp([\"python\", \"pwelcom\", \"programming\"]) == [\"python\", \"pwelcom\"]\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_sum_increasing_subseq([10, 4, 2, 10, 5, 2], len(a), 4, 5) == 10, 'Wrong result'\nassert max_sum_increasing_subseq([10, 4, 2, 10, 5, 2], len(a), 0, 4) == 10, 'Wrong result'\nassert max_sum_increasing_subseq([10, 4, 2, 10, 5, 2], len(a), 0, 5) == 10, 'Wrong result'\nassert max_sum_increasing_subseq([10, 4, 2, 10, 5, 2], len(a), 0, 6) == 10, 'Wrong result'\nassert max_sum_increasing_subseq([10, 4, 2, 10, 5, 2], len(a), 0, 5) == 10, 'Wrong result'\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    max_sum_increasing_subseq([2,3,5], 3, 1, 3) == 7\n    max_sum_increasing_subseq([4,2,3], 3, 1, 2) == 4\n    max_sum_increasing_subseq([1,4,5,7], 3, 1, 2) == 7\n    max_sum_increasing_subseq([1,5,3,7], 3, 1, 2) == 7\n    max_sum_increasing_subseq([4,5,1,7,8], 3, 1, 2) == 7\n    max_sum_increasing_subseq([3,4,5,1,7,8], 3, 1, 2) == 10\n    max_sum_increasing_subseq([3,4,5,1,7], 3, 1, 2) == 8\n    max_sum_increasing_subseq([3,4,5,1,7,8], 3, 1, 2) == 10\n    max_sum_increasing_subseq([1,2,3,4,5], 2, 1, 2) == 9\n    max_sum_increasing_subseq([2,3,5], 2, 1, 3) == 7\n    max_sum_increasing_subseq([4,2,3], 2, 1, 2) == 4\n    max_sum_increasing_subseq([1,4,5,7], 2, 1, 2) == 7\n    max_sum_increasing_subseq([1,5,3,7], 2, 1, 2) == 7\n    max_sum_increasing_subseq([4,5,1,7], 2, 1, 2) == 7\n    max_sum_increasing_subseq([3,4,5,1,7], 2, 1, 2) == 10\n    max_sum_increasing_subseq([3,4,5,1,7,8], 2, 1, 2) == 10\n    max_sum_increasing_subseq([3,4,5,1,7], 2, 1, 3) == 10\n    max_sum_increasing_subseq([3,4,5,1,7,8], 2, 1, 3) == 8\n    max_sum_increasing_subseq([1,2,3,4,5], 2, 1, 2) == 9\n    max_sum_increasing_subseq([2,3,5], 2, 1, 2) == 7\n    max_sum_increasing_subseq([4,2,3], 2, 1, 2) == 4\n    max_sum_increasing_subseq([1,4,5,7], 2, 1, 2) == 7\n    max_sum_increasing_subseq([1,5,3,7], 2, 1, 2) == 7\n    max_sum_increasing_subseq([4,5,1,7], 2, 1, 2) == 7\n    max_sum_increasing_subseq([3,4,5,1,7], 2, 1, 2) == 10\n    max_sum_increasing_subseq([3,4,5,1,7,8], 2, 1, 2) == 10\n    max_sum_increasing_subseq([3,4,5,1,7], 2, 1, 3) == 10\n    max_sum_increasing_subseq([3,4,5,1,7,8], 2, 1, 3) == 8\n    max_sum_increasing_subseq([1,2,3,4,5], 2, 1, 2) == 9\n    max_sum_increasing_subseq([2,3,5], 2, 1, 2) == 7\n    max_sum_increasing_subseq([4,2,3], 2, 1, 2) == 4\n    max_sum_increasing_subseq([1,4,5,7], 2, 1, 2) == 7\n    max_sum_increasing_subseq([1,5,3,7], 2, 1, 2) == 7\n    max_sum_increasing_subseq([4,5,1,7], 2, 1, 2) == 7\n    max_sum_increasing_subseq([3,4,5,1,7], 2, 1, 2) == 10\n    max_sum_increasing_subseq([3,4,5,1,7,8], 2, 1, 2) == 10\n    max_sum_increasing_subseq([3,4,5,1,7], 2, 1, 3) == 10\n    max_sum_increasing_subseq([3,4,5,1,7,8], 2, 1, 3) == 8\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n'''"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_sum_increasing_subseq([1,3,2,2,3,1,5,6], 9, 0) == 15\nassert     max_sum_increasing_subseq([10,10,1,7,2,8,1], 5, 2) == 25\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_sum_increasing_subseq([5, 1, 2, 10, 7, 6, 8], 7, 2) == 17, \"Wrong Output\"\nassert     max_sum_increasing_subseq([5, 1, 2, 10, 7, 6, 8], 7, 3) == 22, \"Wrong Output\"\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     colon_tuplex((1,2,3,4),2,3) == (1,2,3)\nassert     colon_tuplex((2,2,3,4),3,2) == (2,2,3)\nassert     colon_tuplex((3,2,3,4),2,3) == (3,2,3)\nassert     colon_tuplex((4,2,3,4),3,2) == (4,2,3)\nassert     colon_tuplex((1,2,3,4),0,2) == (1,2,3)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == '__main__':\n    assert colon_tuplex((1,2,3),3,4) == (1,2,3)\n    assert colon_tuplex((1,2,3),3,3) == (1,2,3)\n    assert colon_tuplex((1,2,3),4,4) == (1,2,3)\n    "
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     colon_tuplex((1,2),3,4) == ((1, 2), 3, 4)\nassert     colon_tuplex((1,2,3),3,4) == ((1, 2, 3), 3, 4)\nassert     colon_tuplex((1,2,3),3,4) == ((1, 2, 3), 3, 4)\nassert     colon_tuplex((1,2,3),3,4) == ((1, 2, 3), 3, 4)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     colon_tuplex([1,2,3,4],2,2) == (1,2), \"correctness of colon_tuplex failed\"\nassert    colon_tuplex([1,2,3,4],2,5) == (1,2,3,4,5), \"correctness of colon_tuplex failed\"\nassert    colon_tuplex([1,2,3,4],1,5) == (1,2,3,4,5), \"correctness of colon_tuplex failed\"\nassert    colon_tuplex([1,2,3,4],1,6) == (1,2,3,4,5,6), \"correctness of colon_tuplex failed\"\n\ndef del_tuplex(tuplex,m,n):\n    '''\n    Write a function to delete a sublist from a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     colon_tuplex((1,2,3),2,3) == (2,3,1)\nassert     colon_tuplex((1,2,3),3,3) == (2,3,1)\nassert     colon_tuplex((1,2,3),3,0) == (2,3,1)\nassert     colon_tuplex((1,2,3),0,2) == (1,3,2)\nassert     colon_tuplex((1,2,3),0,4) == (1,3,2)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    #assert colon_tuplex((),1,1) == ()\n    #assert colon_tuplex((1,),1,1) == (1,)\n    #assert colon_tuplex((1,2),1,1) == (1,2)\n    #assert colon_tuplex((1,2),1,2) == (1,2)\n    #"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     colon_tuplex((1,2,3,4,5),5,4) == ((1,2,3),(4,5,4))\nassert     colon_tuplex((1,2,3,4,5),5,5) == ((1,2,3,4),(5,5,4))\nassert     colon_tuplex((1,2,3,4,5),5,6) == ((1,2,3,4,5),(5,6,4))\nassert     colon_tuplex((1,2,3,4,5),5,7) == ((1,2,3,4,5),(5,7,4))\nassert     colon_tuplex((1,2,3,4,5),5,8) == ((1,2,3,4,5),(5,8,4))\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     colon_tuplex((1,2,3),1,3) == (2,3,1)\nassert     colon_tuplex((1,2,3),0,2) == (1,2,3)\nassert     colon_tuplex((1,2,3),0,3) == (1,2,3)\nassert     colon_tuplex((1,2,3),1,2) == (2,1,3)\nassert     colon_tuplex((1,2,3),0,0) == (1,2,3)\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef largest_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    pass\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    pass\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     large_product([1,2,3,4,5], [1,2,3,4,5], 5) == 15\nassert     large_product([1,2,3,4,5], [1,2,3,4,5], 2) == 20\nassert     large_product([1,2,3,4,5], [1,2,3,4,5], 1) == 6\nassert     large_product([1,2,3,4,5], [1,2,3,4,5], 0) == 1\nassert     large_product([0], [1], 0) == 1\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     large_product([2,3,5,7], [7,1,9,7], 2) == 7*7\nassert large_product([1,2,1,2], [1,1,1,1], 2) == 1\nassert large_product([2,1,1,1], [4,3,9,8], 2) == 2*3\n\ndef large_product_iter(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    Using an iterator instead of recursion.\n    '''\n    pass\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nnums1 = [6,8,3,2,7,1,9]\nnums2 = [2,4,5,6,6,1,7]\nassert large_product(nums1, nums2, 5) == [120, 860, 144, 80, 28]\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    assert large_product([10, 7, 5, 3], [1, 2, 3, 4], 1) == 160\n    assert large_product([10, 7, 5, 3], [1, 2, 3, 4], 2) == 2520\n    assert large_product([10, 7, 5, 3], [1, 2, 3, 4], 3) == 10000\n    assert large_product([10, 7, 5, 3], [1, 2, 3, 4], 4) == 15000\n    "
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    \n    Args:\n    nums1 - a list of integers\n    nums2 - a list of integers\n    N - the number of largest products to find\n    '''\n    # TODO: your code here\n    pass\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     maximum(1,2) == 2, \"Test 1 Failed\"\nassert     maximum(3,4) == 3, \"Test 2 Failed\"\nassert     maximum(-5,3) == 3, \"Test 3 Failed\"\nassert     maximum(-1,5) == 5, \"Test 4 Failed\"\nassert     maximum(-1,2) == 2, \"Test 5 Failed\"\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert maximum(1,2) == 2\nassert maximum(1,1) == 1\nassert maximum(-1,2) == 2\nassert maximum(-1,-1) == -1\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     maximum(1,2) == 2, 'incorrect value of maximum'\nassert     maximum(4,8) == 8, 'incorrect value of maximum'\nassert     maximum(-1,2) == 2, 'incorrect value of maximum'\nassert     maximum(4,-8) == 4, 'incorrect value of maximum'\n\nprint('PASSED: maximum')\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert maximum(1,1) == 1\nassert maximum(1,2) == 2\nassert maximum(2,1) == 2\nassert maximum(2,2) == 2\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     maximum(4,4) == 4, \"Should return 4\"\nassert     maximum(8,4) == 8, \"Should return 8\"\nassert     maximum(2,3) == 3, \"Should return 3\"\nassert     maximum(2,-2) == -2, \"Should return -2\"\nassert     maximum(-4,-8) == -4, \"Should return -4\"\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     maximum(1,2) == 2, \"1 and 2 are not equal\"\nassert     maximum(3,1) == 3, \"3 and 1 are not equal\"\nassert     maximum(3,-1) == 3, \"3 and -1 are not equal\"\nassert     maximum(3.0,1) == 3.0, \"3.0 and 1 are not equal\"\nassert     maximum(3.0,1.0) == 3.0, \"3.0 and 1.0 are not equal\"\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     maximum(4,7) == 7, 'passed'\nassert    maximum(6,7) == 7, 'failed'\nassert    maximum(3,6) == 3, 'failed'\nassert    maximum(1,2) == 2, 'failed'\nassert    maximum(2,2) == 2, 'failed'\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     maximum(4, 5) == 5\nassert     maximum(7, 7) == 7\nassert     maximum(5, 7) == 7\nassert     maximum(5, 5) == 5\nassert     maximum(5, 9) == 9\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     maximum(10,3) == 13\nassert     maximum(2,3) == 3\nassert     maximum(100,1) == 100\nassert     maximum(10,1) == 10\nassert     maximum(10,0) == 10\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     string_to_tuple(\"abc\") == (\"a\", \"b\", \"c\"), \"Should return a tuple with characters from the given string\"\nassert     string_to_tuple(\"hello\") == (), \"Should return an empty tuple\"\nassert     string_to_tuple(\"\") == (), \"Should return an empty tuple\"\nassert     string_to_tuple(1) == (), \"Should return an empty tuple\"\nassert     string_to_tuple(\"a,b,c\") == ((\"a\",), (\"b\",), (\"c\",)), \"Should return a tuple with characters from the given string\"\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     string_to_tuple('xyz') == ('x', 'y', 'z')\nassert string_to_tuple('pqr') == ('p', 'q', 'r')"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     string_to_tuple('abcd') == ('a','b','c','d')\nassert     string_to_tuple('ab') == ('a','b')\nassert     string_to_tuple('xyz') == ('x','y','z')\nassert     string_to_tuple('xy') == ('x','y')\nassert     string_to_tuple('ABC') == ('A','B','C')\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     string_to_tuple('abc') == ('a', 'b', 'c')\nassert     string_to_tuple('a b c') == ('a', 'b', 'c')\nassert     string_to_tuple('a1b2c3') == ('a', '1', 'b', '2', 'c', '3')\nassert     string_to_tuple('') == ()\nassert     string_to_tuple('  ') == ()\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     string_to_tuple(\"(1,2,3)\") == ('1', '2', '3'), \"Tuple\"\nassert     string_to_tuple(\"('1', '2', '3')\") == (('1', '2', '3'),), \"Tuple\"\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     string_to_tuple('abc') == ('a','b','c')\nassert     string_to_tuple('ab') == ('a','b')\nassert     string_to_tuple('abcdefg') == ('a','b','c','d','e','f','g')\n\n\ndef tuples_to_string(tuple1):\n    '''\n    Write a function that takes a given tuple and returns the string equivalent.\n    '''\n    pass\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     string_to_tuple('Hello') == ('H', 'e', 'l', 'l', 'o'), \\\n        \"string_to_tuple failed\"\nassert     string_to_tuple('Python') == ('P', 'y', 't', 'h', 'o', 'n'), \\\n        \"string_to_tuple failed\"\nassert     string_to_tuple('Hello') == ('H', 'e', 'l', 'l', 'o'), \\\n        \"string_to_tuple failed\"\nassert     string_to_tuple('Hello') == ('H', 'e', 'l', 'l', 'o'), \\\n        \"string_to_tuple failed\"\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     string_to_tuple('\"') == ()\nassert     string_to_tuple('\"s') == ()\nassert     string_to_tuple('\"abc\"') == ()\nassert     string_to_tuple('\"a\"b\"c\"') == ()\nassert     string_to_tuple('\"aa\"') == ('a',)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     string_to_tuple(\"\") == ()\nassert     string_to_tuple(\"a\") == ('a',)\nassert     string_to_tuple(\"2\") == ('2',)\nassert     string_to_tuple(\"2.3\") == ('2', '.', '3',)\n\ndef tuple_to_string(tup):\n    '''\n    Write a function to convert a given tuple of characters to a string.\n    '''\n    pass\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     set_left_most_unset_bit(6) == 6\nassert     set_left_most_unset_bit(7) == 1\nassert     set_left_most_unset_bit(8) == 10\nassert     set_left_most_unset_bit(9) == 3\nassert     set_left_most_unset_bit(128) == 0\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     set_left_most_unset_bit(6) == 2\nassert     set_left_most_unset_bit(3) == 3\nassert     set_left_most_unset_bit(13) == 4\nassert     set_left_most_unset_bit(0) == 1\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    \n    if n == 0:\n        return 1\n    else:\n        return n | (1 << (n - 1))\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     set_left_most_unset_bit(11) == False, \"Left most unset bit should be False\"\nassert     set_left_most_unset_bit(12) == True, \"Left most unset bit should be True\"\nassert     set_left_most_unset_bit(2) == True, \"Left most unset bit should be True\"\nassert     set_left_most_unset_bit(7) == True, \"Left most unset bit should be True\"\nassert     set_left_most_unset_bit(0) == False, \"Left most unset bit should be False\"\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     set_left_most_unset_bit(5) == 1\nassert     set_left_most_unset_bit(8) == 0\nassert     set_left_most_unset_bit(9) == 1\nassert     set_left_most_unset_bit(32) == 31\nassert     set_left_most_unset_bit(1) == 0\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     set_left_most_unset_bit(1) == 1\nassert     set_left_most_unset_bit(8) == 8\nassert     set_left_most_unset_bit(0b10101010) == 0b10101010\nassert     set_left_most_unset_bit(0b1010101) == 0b11010101\nassert     set_left_most_unset_bit(0b111) == 0b111\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     volume_cone(2.1,6) == 14.68\nassert     volume_cone(2.4,5) == 8.32\nassert     volume_cone(3,6) == 27.27\nassert     volume_cone(5,2) == 78.8\nassert     volume_cone(6.3,6) == 3265.8\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     volume_cone(1.5, 1.2) == 1.5\nassert     volume_cone(5.5, 5.2) == math.pi*5.5**2*2\nassert     volume_cone(1.5, 1) == 1.5\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert volume_cone(0,0) == 1\nassert volume_cone(1,0) == 0\nassert volume_cone(0,1) == math.pi\nassert volume_cone(1,1) == math.pi\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     volume_cone(2,2) == math.pi*(1/3)*2**2*2\nassert     volume_cone(1,2) == math.pi*(1/3)*2**2\nassert     volume_cone(1.3,1) == math.pi*(1/3)*2**2*1.3\nassert     volume_cone(0.7,1) == math.pi*(1/3)*2**2*0.7\nassert     volume_cone(0,1) == math.pi*(1/3)*2**2\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     volume_cone(1,4) == 3.14, 'this function is wrong.'\nassert     volume_cone(3,5) == 50, 'this function is wrong.'\nassert     volume_cone(1.2,3.4) == 7.56, 'this function is wrong.'\nassert     volume_cone(-1.2,3.4) == 7.56, 'this function is wrong.'\nassert     volume_cone(5,6) == 78.5, 'this function is wrong.'\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     volume_cone(1,2) == math.pi*math.pow(1.0,2)*2\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     volume_cone(0,0) == 0, 'Should be 0'\nassert volume_cone(1,1) == 0.5, 'Should be 0.5'\nassert volume_cone(1,2) == 0.1481, 'Should be 0.1481'\nassert volume_cone(2,1) == 0.4023, 'Should be 0.4023'\nassert volume_cone(2,2) == 1.6619, 'Should be 1.6619'\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     volume_cone(3,4) == math.pi*3*4**2/3,\\\n    'The volume of the cone should be math.pi*3*4**2/3'\n\nprint(\"Test case 1: Test pass.\")"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     volume_cone(1,0) == 0, \"volume_cone is not correct\"\nassert     volume_cone(0,0) == 0, \"volume_cone is not correct\"\nassert     volume_cone(0,1) == 0, \"volume_cone is not correct\"\nassert     volume_cone(1,1) == math.pi, \"volume_cone is not correct\"\nassert     volume_cone(2,1) == 2 * math.pi, \"volume_cone is not correct\"\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     volume_cone(1,0) == 1\nassert     volume_cone(0.5,0) == 0.5\nassert     volume_cone(0,0.5) == 0.5\nassert     volume_cone(0.5,0.5) == 1\nassert     volume_cone(0.5,0.5) == 1\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     highest_Power_of_2(2) == 1\nassert     highest_Power_of_2(4) == 2\nassert     highest_Power_of_2(8) == 3\nassert     highest_Power_of_2(10) == 3\nassert     highest_Power_of_2(15) == 4\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     highest_Power_of_2(10) == 2\nassert     highest_Power_of_2(5) == 1\nassert     highest_Power_of_2(7) == 2\nassert     highest_Power_of_2(10) == 2\n\nprint('correct')\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef is_power_of_2(n):\n    '''\n    Write a python function to check whether a number is a power of 2 or not.\n    '''\n    pass\n\nassert is_power_of_2(0), \"0 is not a power of 2\"\nassert is_power_of_2(1), \"1 is not a power of 2\"\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     highest_Power_of_2(10) == 2\nassert     highest_Power_of_2(20) == 5\nassert     highest_Power_of_2(1) == 1\nassert     highest_Power_of_2(0) == 1\nassert     highest_Power_of_2(13) == 3\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef lowest_Power_of_2(n): \n    '''\n    Write a python function to find the lowest power of 2 that is less than or equal to n.\n    '''\n    pass\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     highest_Power_of_2(9) == 1\nassert     highest_Power_of_2(10) == 2\nassert     highest_Power_of_2(31) == 2\nassert     highest_Power_of_2(64) == 4\nassert     highest_Power_of_2(128) == 4\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nhighest_Power_of_2(5) == 2\nhighest_Power_of_2(8) == 3\nhighest_Power_of_2(5) == 5\nhighest_Power_of_2(2) == 2\nhighest_Power_of_2(8) == 3\nhighest_Power_of_2(4) == 4\nhighest_Power_of_2(3) == 2\nhighest_Power_of_2(10) == 5\nhighest_Power_of_2(15) == 5\nhighest_Power_of_2(7) == 6\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # code here \n    #logic\n    #dividing n by 2 and then subtracting it from n.\n    #if we're still with n, we can't get the power of 2\n    if n == 1:\n        return 1\n    else:\n        for i in range(1,int(n/2)+1):\n            if n%i == 0:\n                return i \n            else:\n                return -1\n\n    # if we reach here, n wasn't divisible by 2, so there's no possible power of 2. \n\nassert \n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     highest_Power_of_2(10) == 4, 'Highest power of 2 not found'\nassert highest_Power_of_2(20) == 4, 'Highest power of 2 not found'\nassert highest_Power_of_2(24) == 8, 'Highest power of 2 not found'\nassert highest_Power_of_2(25) == 8, 'Highest power of 2 not found'\nassert highest_Power_of_2(36) == 8, 'Highest power of 2 not found'\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_lucas(2) == 1\nassert     find_lucas(1) == 2\nassert     find_lucas(0) == 2\n\ndef find_max_lucas(n):\n    '''\n    Write a function to find then'th max lucas number.\n    '''\n    pass\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_lucas(2) == 3\nassert     find_lucas(5) == 8\n\nprint(\">>> pass the tests!\")\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_lucas(0) == 2\nassert     find_lucas(1) == 1\nassert     find_lucas(2) == 3\nassert     find_lucas(3) == 4\nassert     find_lucas(4) == 7\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_lucas(0) == 2\nassert     find_lucas(1) == 1\nassert     find_lucas(2) == 3\nassert     find_lucas(3) == 4\nassert     find_lucas(4) == 7\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_lucas(1) == 2\nassert     find_lucas(2) == 3\nassert     find_lucas(3) == 4\nassert     find_lucas(4) == 7\nassert     find_lucas(5) == 11\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nfind_lucas(1) == 2\nfind_lucas(2) == 3\nfind_lucas(3) == 4\nfind_lucas(4) == 7\nfind_lucas(5) == 11\nfind_lucas(6) == 18\nfind_lucas(7) == 29\nfind_lucas(8) == 47\nfind_lucas(9) == 59\nfind_lucas(10) == 79\nfind_lucas(11) == 100\nfind_lucas(12) == 121\nfind_lucas(13) == 144\nfind_lucas(14) == 169\nfind_lucas(15) == 214\nfind_lucas(16) == 440\nfind_lucas(17) == 707\nfind_lucas(18) == 969\nfind_lucas(19) == 1597\nfind_lucas(20) == 2584\nfind_lucas(21) == 4181\nfind_lucas(22) == 6765\nfind_lucas(23) == 10946\nfind_lucas(24) == 17711\nfind_lucas(25) == 28657\nfind_lucas(26) == 46368\nfind_lucas(27) == 75025\nfind_lucas(28) == 121393\nfind_lucas(29) == 196418\nfind_lucas(30) == 317811\nfind_lucas(31) == 514229\nfind_lucas(32) == 832040\nfind_lucas(33) == 1346269\nfind_lucas(34) == 2164179\nfind_lucas(35) == 3524578\nfind_lucas(36) == 5702887\nfind_lucas(37) == 9227465\nfind_lucas(38) == 150746368\nfind_lucas(39) == 254672080\nfind_lucas(40) == 405261214\nfind_lucas(41) == 70875902\nfind_lucas(42) == 125862690\nfind_lucas(43) == 31251900\nfind_lucas(44) == 57765856\nfind_lucas(45) == 969473840\nfind_lucas(46) == 1549296765\nfind_lucas(47) == 2788294640\nfind_lucas(48) == 50402273\nfind_lucas(49) == 824990400\nfind_lucas(50) == 1307674368000\nfind_lucas(51) == 20938463025\nfind_lucas(52) == 345161293936\nfind_lucas(53) == 52452830188\nfind_lucas(54) == 8626151546736\nfind_lucas(55) == 1364652246800\nfind_lucas(56) == 274877344912000\nfind_lucas(57) == 4398046511104\nfind_lucas(58) == 733262134400000\nfind_lucas(59) == 11707030143640\nfind_lucas(60) == 18351698730272\nfind_lucas(61) == 27444825646960\nfind_lucas(62) == 46855233634928\nfind_lucas(63) == 68228901431840\nfind_lucas(64) == 10174289670016\nfind_lucas(65) == 16558014525248\nfind_lucas(66) == 303688294632000\nfind_lucas(67) == 466197210374624\nfind_lucas(68) == 777879207084928\nfind_lucas(69) == 120514706844224\nfind_lucas(70) == 188263247732000\nfind_lucas(71) == 295590263167680\nfind_lucas(72) == 478577657865312\nfind_lucas(73) == 738777517577688\nfind_lucas(74) == 1144908517363280\nfind_lucas(75) == 1947443494292800\nfind_lucas(76) == 3370398534880000\nfind_lucas(77) == 567853945175488\nfind_lucas(78) == 9417079263444080\nfind_lucas(79) == 1513986842337440\nfind_lucas(80) == 2728960180992080\nfind_lucas(81) == 4994311976592160\nfind_lucas(82) == 8587429773435200\nfind_lucas(83) == 1415392481089600\nfind_lucas(84) == 2239146915301280\nfind_lucas(85) == 4010755375804760\nfind_lucas(86) == 7456835185636800\nfind_lucas(87) == 12073253817747120\nfind_lucas(88) == 1897606652858120\nfind_lucas(89) == 2639179739347440\nfind_lucas(90) == 4526178404355520\nfind_lucas(91) == 7053134290137440\nfind_lucas(92) == 12742514002613680\nfind_lucas(93) == 1772230314768320\nfind_lucas(94) == 34508211706798120\nfind_lucas(95) == 53322367216344020\nfind_lucas(96) == 83281459909217670\nfind_lucas(97) == 13415504158672080\nfind_lucas(98) == 21621352569583320\nfind_lucas(99) == 37474705028821920\nfind_lucas(100) == 58864017627441920\nfind_lucas(101) == 96395027873967600\nfind_lucas(102) == 15889916793870080\nfind_lucas(103) == 27998734122395360\nfind_lucas(104) == 50235113797107360\nfind_lucas(105) == 80773471076966720\nfind_lucas(106) == 13059936055334920\nfind_lucas(107) == 2147483647\nfind_lucas(108) == 4687110254096000\nfind_lucas(109) == 799999999999999\nfind_lucas(110) == 12582915384670400000\nfind_lucas(111) == 219723349580468800\nfind_lucas(112) == 349419435720697600\nfind_lucas(113) == 575905774034772400\nfind_lucas(114) == 87443112524362640\nfind_lucas(115) == 129417685769581680\nfind_lucas(116) == 264098315269560120\nfind_lucas(117) == 458683730647925520\nfind_lucas(118) == 764522244204852720\nfind_lucas(119) == 114758664693628800\nfind_lucas(120) == 1868421692464012800\nfind_lucas(121) == 294557973239620800\nfind_lucas(122) == 471029856983833600\nfind_lucas(123) == 718375302584345280\nfind_lucas(124) == 1193186303710081920\nfind_lucas(125) == 1756904013855704080\nfind_lucas(126) == 297500453308329600\nfind_lucas(127) == 461167896134965520\nfind_lucas(128) == 775208626395935200\nfind_lucas(129) == 113711379615317280\nfind_lucas"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nfind_lucas(1) == 1\nfind_lucas(2) == 3\nfind_lucas(3) == 4\nfind_lucas(4) == 7\nfind_lucas(5) == 11\nfind_lucas(6) == 18\nfind_lucas(7) == 29\nfind_lucas(8) == 47\nfind_lucas(9) == 76\nfind_lucas(10) == 123\nfind_lucas(11) == 256\nfind_lucas(12) == 521\nfind_lucas(13) == 877\nfind_lucas(14) == 1331\nfind_lucas(15) == 2187\nfind_lucas(16) == 3589\nfind_lucas(17) == 4733\nfind_lucas(18) == 5642\nfind_lucas(19) == 6974\nfind_lucas(20) == 7082\nfind_lucas(21) == 8617\nfind_lucas(22) == 12539\nfind_lucas(23) == 21701\nfind_lucas(24) == 46416\nfind_lucas(25) == 72955\nfind_lucas(26) == 102316\nfind_lucas(27) == 261511\nfind_lucas(28) == 519137\nfind_lucas(29) == 870489\nfind_lucas(30) == 152587890625\nfind_lucas(31) == 3415500737890625\nfind_lucas(32) == 561328215078125\nfind_lucas(33) == 86178121171875\nfind_lucas(34) == 133150267641625\nfind_lucas(35) == 298327342953125\nfind_lucas(36) == 564760544921875\nfind_lucas(37) == 8855190310546875\nfind_lucas(38) == 152587890625\nfind_lucas(39) == 3358442822265625\nfind_lucas(40) == 572747622578125\nfind_lucas(41) == 892638693359375\nfind_lucas(42) == 1611508837890625\nfind_lucas(43) == 35709843810546875\nfind_lucas(44) == 564159140625\nfind_lucas(45) == 86837717865625\nfind_lucas(46) == 133401771484375\nfind_lucas(47) == 28381527091328125\nfind_lucas(48) == 567684057421875\nfind_lucas(49) == 892638693359375\nfind_lucas(50) == 152587291015625\nfind_lucas(51) == 3357286887171875\nfind_lucas(52) == 5641538697265625\nfind_lucas(53) == 86837717865625\nfind_lucas(54) == 1334019810546875\nfind_lucas(55) == 28381527091328125\nfind_lucas(56) == 567684057421875\nfind_lucas(57) == 892638693359375\nfind_lucas(58) == 152587890625\nfind_lucas(59) == 3357286887171875\nfind_lucas(60) == 5641538697265625\nfind_lucas(61) == 86837717865625\nfind_lucas(62) == 133401771484375\nfind_lucas(63) == 28381527091328125\nfind_lucas(64) == 567684057421875\nfind_lucas(65) == 892638693359375\nfind_lucas(66) == 152587291015625\nfind_lucas(67) == 3357286887171875\nfind_lucas(68) == 564159140625\nfind_lucas(69) == 86837717865625\nfind_lucas(70) == 1334019810546875\nfind_lucas(71) == 28381527091328125\nfind_lucas(72) == 567684057421875\nfind_lucas(73) == 892638693359375\nfind_lucas(74) == 152587890625\nfind_lucas(75) == 3357286887171875\nfind_lucas(76) == 5641538697265625\nfind_lucas(77) == 86837717865625\nfind_lucas(78) == 133401771484375\nfind_lucas(79) == 28381527091328125\nfind_lucas(80) == 567684057421875\nfind_lucas(81) == 892638693359375\nfind_lucas(82) == 152587291015625\nfind_lucas(83) == 3357286887171875\nfind_lucas(84) == 5641538697265625\nfind_lucas(85) == 86837717865625\nfind_lucas(86) == 1334019810546875\nfind_lucas(87) == 28381527091328125\nfind_lucas(88) == 567684057421875\nfind_lucas(89) == 892638693359375\nfind_lucas(90) == 152587291015625\nfind_lucas(91) == 3357286887171875\nfind_lucas(92) == 5641538697265625\nfind_lucas(93) == 86837717865625\nfind_lucas(94) == 133401771484375\nfind_lucas(95) == 28381527091328125\nfind_lucas(96) == 567684057421875\nfind_lucas(97) == 892638693359375\nfind_lucas(98) == 152587291015625\nfind_lucas(99) == 3357286887171875\nfind_lucas(100) == 5641538697265625\nfind_lucas(101) == 86837717865625\nfind_lucas(102) == 1334019810546875\nfind_lucas(103) == 28381527091328125\nfind_lucas(104) == 567684057421875\nfind_lucas(105) == 892638693359375\nfind_lucas(106) == 152587291015625\nfind_lucas(107) == 3357286887171875\nfind_lucas(108) == 5641538697265625\nfind_lucas(109) == 86837717865625\nfind_lucas(110) == 133401771484375\nfind_lucas(111) == 28381527091328125\nfind_lucas(112) == 567684057421875\nfind_lucas(113) == 892638693359375\nfind_lucas(114) == 152587291015625\nfind_lucas(115) == 3357286887171875\nfind_lucas(116) == 5641538697265625\nfind_lucas(117) == 86837717865625\nfind_lucas(118) == 1334019810546875\nfind_lucas(119) == 28381527091328125\nfind_lucas(120) == 567684057421875\nfind_lucas(121) == 892638693359375\nfind_lucas(122) == 152587291015625\nfind_lucas(123) == 3357286887171875\nfind_lucas(124) == 5641538697265625\nfind_lucas(125"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint(find_lucas(3) == 2)\nprint(find_lucas(5) == 7)"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_lucas(1) == 2\nassert     find_lucas(2) == 3\nassert     find_lucas(3) == 4\nassert     find_lucas(5) == 7\nassert     find_lucas(8) == 29\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint('Expected output:', expected_output)\nprint('Actual output:  ', list_)"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add_string([1,2,3], '#{0} {1} {2}') == '#1 2 3'\nassert     add_string([1,2,3], '#{a} {b} {c}') == '#a b c'\nassert     add_string([1,2,3], '#{aa} {bb} {cc}') == '#aa bb cc'\nassert     add_string([1,2,3], '#{aaa} {bbb} {ccc}') == '#aaa bbb ccc'\nassert     add_string([1,2,3], '#{aaaaaa} {bbbbbb} {cccccc}') == '#aaaaaa bbbbb cccccc'\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add_string(['one', 'two', 'three'], '{}') == ['one', 'two', 'three']\nassert     add_string(['one', 'two', 'three'], '{1} {2} {3}') == ['one', 'two', 'three']\nassert     add_string(['one', 'two', 'three'], '{1:>10} {2:>10} {3:>10}') == ['one      ', 'two      ', 'three    ']\nassert     add_string(['one', 'two', 'three'], '{1:<10} {2:<10} {3:<10}') == ['one     one', 'two     two', 'three   three']\nassert     add_string(['one', 'two', 'three'], '{1:^10} {2:^10} {3:^10}') == ['one   one', 'two   two', 'three   three']\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add_string(['<1>', '2>', '3>'], \"<1> <2> <3>\") == '<1> <2> <3>'\nassert     add_string(['<1>', '2>', '3>'], \"<1> <2> <3>\") == '<1> <2> <3>'\nassert     add_string(['<1>', '2>', '3>'], \"<1> <2> <3>\") == '<1> <2> <3>'\nassert     add_string(['<1>', '2>', '3>'], \"<1> <2> <3>\") == '<1> <2> <3>'\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_string([], \"\") == \"\"\nassert     add_string([1], \"\") == \"1\"\nassert     add_string([1,2], \"\") == \"1,2\"\nassert     add_string([1,2,3], \"\") == \"1,2,3\"\nassert     add_string([1,2,3,4], \"\") == \"1,2,3,4\"\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     add_string(['hello', 'hi'], 'hello') == 'hello'\nassert     add_string(['hello', 'hi'], 'hi') == 'hi'\nassert     add_string(['hello', 'hi'], '!') == 'hello!hi!'\nassert     add_string(['hello', 'hi'], '{}') == 'hello{}hi{}'\nassert     add_string(['hello', 'hi'], '{1}') == 'hello{1}hi{1}'\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef extend_list(list_, n):\n    '''\n    Write a function to extend a list by appending n times a given number.\n    '''\n    pass\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     add_string([1, 2, 3], \"{0} + {1} + {2}\") == \"1 + 2 + 3\"\nassert     add_string([1, 2, 3, 4], \"{0} + {1} + {2} + {3}\") == \"1 + 2 + 3 + 4\"\nassert     add_string([1, 2, 3, 4], \"{0} + {1} + {2} + {3} + {4}\") == \"1 + 2 + 3 + 4 + 5\"\nassert     add_string([1, 2, 3, 4], \"{0} + {1} + {2} + {3} + {4} + {5}\") == \"1 + 2 + 3 + 4 + 5 + 6\"\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     add_string(['hello', 'world'], '{} {}') == ['hello world', 'world']\nassert     add_string(['hello', 'world'], '{0} {1}') == ['hello world', 'world']\nassert     add_string(['hello', 'world'], '{0}{1}') == ['hello world', 'world']\nassert     add_string(['hello', 'world'], '{0}{1}{0}') == ['hello world', 'worldworld']\nassert     add_string(['hello', 'world'], '{0}{1}{1}') == ['hello world', 'worldhello']\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n\n\ndef add_integer(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     convert_list_dictionary(['1', '2', '3', '4', '5', '6', '7', '8', '9'], ['a', 'b', 'c', 'd'], ['1', '2', '3', '4']) == {\n    '1': {'a': '1', 'b': '2', 'c': '3', 'd': '4'},\n    '2': {'a': '5', 'b': '6', 'c': '7', 'd': '8'},\n    '3': {'a': '9', 'b': '10', 'c': '11', 'd': '12'},\n    '4': {'a': '13', 'b': '14', 'c': '15', 'd': '16'}\n}, 'Correctness of function convert_list_dictionary does not match expected output'\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     convert_list_dictionary(l1 = [['a', 'b'], ['c', 'd']], l2 = ['f', 'g', 'h'], l3 = [['1', '2'], ['3', '4']]) == {'1': {'2': 'a', '3': 'b'}, '3': {'4': 'c'}, '4': {'2': 'd', '1': 'f'}, '2': {'1': 'g', '3': 'h'}}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     convert_list_dictionary([1, 2, 3], [4, 5, 6], [[11, 22, 33], [11, 22, 33]]) == {1: {2: {3: {11: 22,\n11: 33, 22: 33}, 2: {3: {11: 22, 11: 33, 22: 33}}}, 3: {11: {22: {33: None}, 11: {22: {33: None}},\n22: {33: None}}}, 4: {5: {6: None}}}\nassert     convert_list_dictionary([1, 2, 3], [4, 5, 6], [[11, 22, 33], [11, 22, 33]]) == {1: {2: {3: {11: 22,\n11: 33, 22: 33}, 2: {3: {11: 22, 11: 33, 22: 33}}}, 3: {11: {22: {33: None}, 11: {22: {33: None}},\n22: {33: None}}}, 4: {5: {6: None}}}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     convert_list_dictionary(l1, l2, l3) == \n    {1: {1: 1, 2: 2}, 2: {1: 2, 2: 1}, 3: {1: 3, 2: 3}}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     convert_list_dictionary(['Bob', 'Steve', 'Jeff'], ['123', '234', '235'], ['long','short','short']) == {'Bob': {'123': 'long', '234':'short', '235':'short'}, 'Steve': {'123': 'long', '234':'short', '235':'short'}, 'Jeff': {'123': 'long', '234':'short', '235':'short'}}\nassert convert_list_dictionary(['Bob', 'Steve', 'Jeff'], ['123', '234', '235'], ['long','short','short']) == {'Bob': {'123': 'long', '234':'short', '235':'short'}, 'Steve': {'123': 'long', '234':'short', '235':'short'}, 'Jeff': {'123': 'long', '234':'short', '235':'short'}}\nassert convert_list_dictionary(['Bob', 'Steve', 'Jeff'], ['123', '234', '235'], ['long','short','short']) == {'Bob': {'123': 'long', '234':'short', '235':'short'}, 'Steve': {'123': 'long', '234':'short', '235':'short'}, 'Jeff': {'123': 'long', '234':'short', '235':'short'}}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef convert_list_dictionary_solution(l1, l2, l3):\n    dictionary = {}\n    for i in range(len(l1)):\n        dictionary[l1[i]] = l2[i]\n    for i in range(len(l3)):\n        dictionary[l3[i]] = l2[i]\n    return dictionary\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     convert_list_dictionary([1,2,3], [4,5,6], ['a','b','c']) == {1: {4: 'a', 5: 'b', 6: 'c'}, 2: {4: 'a', 5: 'b', 6: 'c'}, 3: {4: 'a', 5: 'b', 6: 'c'}}\nassert     convert_list_dictionary([1,2,3,4], ['a','b','c'], ['x','y','z']) == {1: 'a', 2: 'b', 3: 'c', 4: 'x'}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     convert_list_dictionary([1, 2, 3], [\"a\", \"b\", \"c\"], [\"x\", \"y\", \"z\"]) == {\"1\": {\"a\": \"x\", \"b\": \"y\", \"c\": \"z\"}, \"2\": {\"a\": \"x\", \"b\": \"y\", \"c\": \"z\"}, \"3\": {\"a\": \"x\", \"b\": \"y\", \"c\": \"z\"}}\nassert     convert_list_dictionary([1, 2, 3], [\"a\", \"b\", \"c\"], [\"x\", \"y\", \"z\"], a=4, b=5) == {\"1\": {\"a\": \"x\", \"b\": \"y\", \"c\": \"z\"}, \"2\": {\"a\": \"x\", \"b\": \"y\", \"c\": \"z\"}, \"3\": {\"a\": \"x\", \"b\": \"y\", \"c\": \"z\"}}\nassert     convert_list_dictionary([1, 2, 3], [\"a\", \"b\", \"c\"], [\"x\", \"y\", \"z\"], a=4, b=5) == {\"1\": {\"a\": \"x\", \"b\": \"y\", \"c\": \"z\"}, \"2\": {\"a\": \"x\", \"b\": \"y\", \"c\": \"z\"}, \"3\": {\"a\": \"x\", \"b\": \"y\", \"c\": \"z\"}}\nassert     convert_list_dictionary([1, 2, 3], [\"a\", \"b\", \"c\"], [\"x\", \"y\", \"z\"], a=4, b=5, c=6) == {\"1\": {\"a\": \"x\", \"b\": \"y\", \"c\": \"z\"}, \"2\": {\"a\": \"x\", \"b\": \"y\", \"c\": \"z\"}, \"3\": {\"a\": \"x\", \"b\": \"y\", \"c\": \"z\"}}\nassert     convert_list_dictionary([1, 2, 3], [\"a\", \"b\", \"c\"], [\"x\", \"y\", \"z\"], a=4, b=5, c=6, d=7) == {\"1\": {\"a\": \"x\", \"b\": \"y\", \"c\": \"z\"}, \"2\": {\"a\": \"x\", \"b\": \"y\", \"c\": \"z\"}, \"3\": {\"a\": \"x\", \"b\": \"y\", \"c\": \"z\"}}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     convert_list_dictionary([1, 2, 3], ['a', 'b', 'c'], ['X', 'Y', 'Z']) == {'a':{'X':1, 'Y':2, 'Z':3}, 'b':{'X':1, 'Y':2, 'Z':3}, 'c':{'X':1, 'Y':2, 'Z':3}}\nassert    convert_list_dictionary([{'a':1}, {'b':2}, {'c':3}], ['X', 'Y', 'Z'], ['a', 'b', 'c']) == {'a':{'X':1, 'Y':2, 'Z':3}, 'b':{'X':1, 'Y':2, 'Z':3}, 'c':{'X':1, 'Y':2, 'Z':3}}\nassert    convert_list_dictionary([{'a':{'a':1}}, {'b':{'b':2}}, {'c':{'c':3}}], ['X', 'Y', 'Z'], ['a', 'b', 'c']) == {'a':{'a':1}, 'b':{'b':2}, 'c':{'c':3}}\nassert    convert_list_dictionary([{'a':{'a':1}}, {'b':{'b':2}}, {'c':{'c':3}}], ['X', 'Y', 'Z'], ['a', 'b', 'c']) == {'a':{'a':1}, 'b':{'b':2}, 'c':{'c':3}}\nassert    convert_list_dictionary([{'a':1}, {'b':2}, {'c':3}], ['X', 'Y', 'Z'], ['a', 'b', 'c']) == {'a':1, 'b':2, 'c':3}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     convert_list_dictionary([1, 2, 3], [['a', 'b', 'c'], 'd', ['e', 'f', 'g']], [['h', 'i', 'j'], 'k', 'l']) == {1: {'a': 'b', 'c': 'd', 'e': {'f': 'g', 'h': 'i', 'j': 'k'}}, 2: {'b': 'c', 'd': {'e': 'f', 'g': 'h', 'h': 'i', 'j': 'k'}}, 3: {'c': 'd', 'e': {'f': 'g', 'h': 'i', 'j': 'k'}}}\nassert     convert_list_dictionary([1, 2, 3], [['a', 'b', 'c'], 'd', ['e', 'f', 'g']], ['h', 'i', 'j', 'k', 'l']) == {1: {'a': 'b', 'c': 'd', 'e': 'f', 'g': 'h', 'h': 'i', 'j': 'k', 'k': 'l'}}, ['h', 'i', 'j', 'k', 'l']\nassert     convert_list_dictionary([1, 2, 3], [['a', 'b', 'c'], 'd', ['e', 'f', 'g']], [['h', 'i', 'j'], 'k', 'l']) == {1: {'a': 'b', 'c': 'd', 'e': {'f': 'g', 'h': 'i', 'j': 'k'}}, 2: {'b': 'c', 'd': {'e': 'f', 'g': 'h', 'h': 'i', 'j': 'k'}}, 3: {'c': 'd', 'e': {'f': 'g', 'h': 'i', 'j': 'k'}}}\nassert     convert_list_dictionary([1, 2, 3], [['a', 'b', 'c'], 'd', ['e', 'f', 'g']], [['h', 'i', 'j'], 'k', ['l','m', 'n', 'o']]) == {1: {'a': 'b', 'c': 'd', 'e': {'f': 'g', 'h': 'i', 'j': 'k'}}, 2: {'b': 'c', 'd': {'e': 'f', 'g': 'h', 'h': 'i', 'j': 'k'}}, 3: {'c': 'd', 'e': {'f': 'g', 'h': 'i', 'j': 'k'}}}\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_max_sum (1) == 1, 'Wrong output'\nassert     get_max_sum (2) == 3, 'Wrong output'\nassert     get_max_sum (4) == 6, 'Wrong output'\nassert     get_max_sum (8) == 15, 'Wrong output'\nassert     get_max_sum (16) == 35, 'Wrong output'\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert get_max_sum(1) == 1\nassert get_max_sum(4) == 3\nassert get_max_sum(10) == 10\nassert get_max_sum(100) == 50\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_max_sum (15) == 24\nassert     get_max_sum (4) == 4\nassert     get_max_sum (7) == 21\nassert     get_max_sum (3) == 3\nassert     get_max_sum (1) == 1\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_max_sum(4) == 5\nassert     get_max_sum(10) == 33\nassert     get_max_sum(15) == 199\nassert     get_max_sum(20) == 268\nassert     get_max_sum(25) == 629\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_max_sum(6) == 15, \"Your program is wrong!\"\nassert     get_max_sum(7) == 20, \"Your program is wrong!\"\nassert     get_max_sum(9) == 21, \"Your program is wrong!\"\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_max_sum(6) == 21\nassert     get_max_sum(7) == 34\nassert     get_max_sum(8) == 41\nassert     get_max_sum(9) == 51\nassert     get_max_sum(10) == 61\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_max_sum(4) == 7, 'WRONG!'\nassert     get_max_sum(5) == 10, 'WRONG!'\n\ndef get_max_sum_1 (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    else:\n        return max(get_max_sum_1(n/2) + get_max_sum_1(n/3) + get_max_sum_1(n/4) + get_max_sum_1(n/5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_max_sum(1) == 1 \nassert     get_max_sum(2) == 2 \nassert     get_max_sum(3) == 3 \nassert     get_max_sum(4) == 4 \nassert     get_max_sum(5) == 5 \n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_length_list([]) == 0\nassert     max_length_list([1]) == 1\nassert     max_length_list([1,2]) == 1\nassert     max_length_list([1,2,3]) == 2\nassert     max_length_list([1,2,3,4]) == 2\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_length_list([1,2,3,4,5,6,7,8,9,10]) == 10\nassert     max_length_list([1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]) == 10\nassert     max_length_list([1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]) == 10\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_length_list([1,2,3]) == 3\nassert     max_length_list([-1,-2,-3]) == -1\nassert     max_length_list([1,-2,3]) == 3\nassert     max_length_list([1,-2,-3]) == 3\nassert     max_length_list([1,2,3,4]) == 4\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_length_list([1, 2, 3, 4, 5]) == 5\nassert     max_length_list([1, 1, 1, 1, 1]) == 1\nassert     max_length_list([1, 1, 1, 2, 2]) == 2\nassert     max_length_list([]) == 0\n\ndef min_length_list(input_list):\n    '''\n    Write a function to find the list with minimum length.\n    '''\n    pass\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef max_length_dict(input_dict):\n    '''\n    Write a function to find the dictionary with maximum length.\n    '''\n    pass\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_length_list([]) ==     []\nassert     max_length_list([1, 2, 3, 4, 5]) ==     [5]\nassert     max_length_list([1, 2, 3, 4, 5, 6]) ==     [6]\nassert     max_length_list([1, 2, 3, 4, 5, 6, 7]) ==     [6]\n\ndef max_length_dict(input_dict):\n    '''\n    Write a function to find the dictionary with maximum length.\n    '''\n    pass\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(max_length_list([[1, 2, 3], ['a', 'b', 'c'], ['x', 'y', 'z']]))\nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_length_list([\"a\", \"b\", \"c\"]) == [\"a\", \"c\"]\nassert     max_length_list([\"a\", \"b\", \"c\", \"a\"]) == [\"a\", \"c\", \"a\"]\nassert     max_length_list([\"a\", \"b\", \"c\", \"a\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\nassert     max_length_list([\"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\nassert     max_length_list([\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"]) == [\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"]\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    max_length_list(['abc', 'abc', 'abc', 'abc']) == ['abc']\nassert \n    max_length_list(['hello', 'hello', 'hello']) == ['hello']\nassert \n    max_length_list(['hello', 'hello', 'hello', 'hello']) == ['hello']\nassert \n    max_length_list(['', '', '', '']) == ['', '']\nassert \n    max_length_list(['']) == []\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ncheck_distinct((2,3,4,6,6,7,9,2,1)) == True\ncheck_distinct((2,3,5,5,6,7,9,2,1)) == False\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_distinct((\"abc\", \"def\", \"ghi\")) is True\nassert     check_distinct((1, 2, 3, 4)) is False\nassert     check_distinct((1, 2, 3, 4, 5)) is True\n\n\n\ndef check_distinct_hash(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates, using Hash.\n    '''\n    pass\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert check_distinct([1,2,3]) == True\nassert check_distinct([1,2,2]) == False\nassert check_distinct((1,2,3)) == True\nassert check_distinct((1,2,2)) == False\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_distinct(('foo','bar','foo','bar')) is True, \"Test Case 1 Failed\"\nassert     check_distinct(('foo','bar','foo','baz')) is False, \"Test Case 1 Failed\"\nassert     check_distinct(('foo','baz','foo','bar')) is False, \"Test Case 1 Failed\"\nassert     check_distinct(('foo','bar','baz','foo')) is False, \"Test Case 1 Failed\"\nassert     check_distinct(('foo','bar','foo','foo')) is False, \"Test Case 1 Failed\"\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_distinct((1,2,3)) == True, \"Wrong result for (1,2,3): {}\".format(check_distinct((1,2,3)))\nassert     check_distinct((1,2,2)) == False, \"Wrong result for (1,2,2): {}\".format(check_distinct((1,2,2)))\nassert     check_distinct((1,1,3)) == False, \"Wrong result for (1,1,3): {}\".format(check_distinct((1,1,3)))\nassert     check_distinct((1,2,1)) == False, \"Wrong result for (1,2,1): {}\".format(check_distinct((1,2,1)))"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_distinct((1,2,3)) == True, \"Tuple contains duplicates\"\nassert     check_distinct((2,3,1)) == False, \"Tuple contains duplicates\"\nassert     check_distinct((1,1,2)) == True, \"Tuple contains duplicates\"\nassert     check_distinct((2,1,1)) == False, \"Tuple contains duplicates\"\nassert     check_distinct((1,2)) == True, \"Tuple contains duplicates\"\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_distinct((1,2,3,4,5,6)) == True, \"For 1 to 6\"\nassert     check_distinct((3,2,3,3,2,4,5)) == False, \"For 3 to 4\"\nassert     check_distinct((3,3,3,3,3,3,3)) == True, \"For 3 to 3\"\nassert     check_distinct((1,2,3)) == False, \"For 1 to 2\"\n\ndef check_distinct_ignore_case(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    pass\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_distinct((1,1,2)) == True\nassert     check_distinct((1,1,3)) == False\nassert     check_distinct((1,2,3)) == False\nassert     check_distinct((1,1,2)) == True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_distinct([1,2,3]) \nassert     not check_distinct([1,2,3,1])\nassert     check_distinct([1,2,3,4])\n\n\ndef count_odd_even(n):\n    '''\n    Write a function to count the number of odd and even numbers in a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     first_non_repeating_character('abacab') == 'c', 'failed'\nassert     first_non_repeating_character('aababc') == 'b', 'failed'\nassert     first_non_repeating_character('abcb') == 'a', 'failed'\nassert     first_non_repeating_character('abcdefghi') == 'h', 'failed'\nassert     first_non_repeating_character('abc') == 'a', 'failed'\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     first_non_repeating_character(\"abcd\") == \"e\"\nassert first_non_repeating_character(\"abbddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     first_non_repeating_character('google') == 'o', 'Wrong Answer'\nassert     first_non_repeating_character('facebook') == 'b', 'Wrong Answer'\nassert     first_non_repeating_character('google') == 't', 'Wrong Answer'\nassert     first_non_repeating_character('facebook') == 'b', 'Wrong Answer'\nassert     first_non_repeating_character('google') == 't', 'Wrong Answer'\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     first_non_repeating_character('abcd') == 'e', 'Wrong Answer'\nassert     first_non_repeating_character('abca') == 'a', 'Wrong Answer'\nassert     first_non_repeating_character('abcc') == 'b', 'Wrong Answer'\nassert     first_non_repeating_character('abcabc') == 'c', 'Wrong Answer'\nassert     first_non_repeating_character('abcabcabc') == 'c', 'Wrong Answer'\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     first_non_repeating_character(\"\") == -1\nassert     first_non_repeating_character(\"d\") == -1\nassert     first_non_repeating_character(\"abacc\") == -1\nassert     first_non_repeating_character(\"abcd\") == -1\nassert     first_non_repeating_character(\"abcc\") == 0\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     first_non_repeating_character('abcd') == 'a', \"The first non-repeated character is 'a'\"\nassert     first_non_repeating_character('abcaa') == 'a', \"The first non-repeated character is 'a'\"\nassert     first_non_repeating_character('abcdef') == 'c', \"The first non-repeated character is 'c'\"\nassert     first_non_repeating_character('abcdefghijklmnopqrstuvwxyz') == 'e', \"The first non-repeated character is 'e'\"\nassert     first_non_repeating_character('abcde') == 'c', \"The first non-repeated character is 'c'\"\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     first_non_repeating_character('') == -1\nassert     first_non_repeating_character('a') == -1\nassert     first_non_repeating_character('aab') == -1\nassert     first_non_repeating_character('ab') == -1\nassert     first_non_repeating_character('aba') == 0\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     first_non_repeating_character(\"\") == -1\nassert     first_non_repeating_character(\"a\") == 0\nassert     first_non_repeating_character(\"aa\") == 0\nassert     first_non_repeating_character(\"aaaaa\") == 0\nassert     first_non_repeating_character(\"aaaaaa\") == 4\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     first_non_repeating_character('aa') == 'a'\nassert     first_non_repeating_character('ddd') == 'd'\nassert     first_non_repeating_character('abbbc') == 'b'\nassert     first_non_repeating_character('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ncheck_char('abcdefgh')\ncheck_char('abcdefghj')\ncheck_char('abcdefghjk')\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_char('az') == True\nassert     check_char('az.') == False\nassert     check_char('azabcdefghijklmnopqrstuvwxyz') == True\nassert     check_char('azabcdefghijklmnopqrstuvwxyz.') == False\nassert     check_char('z') == True\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert not check_char('abc')\nassert check_char('abc')\nassert not check_char('aabc')\nassert check_char('aabc')\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_char(\"\") == True, \"empty string\"\nassert     check_char(\"Hello\") == False, \"check_char returns False\"\nassert     check_char(\"Hello world\") == False, \"check_char returns False\"\nassert     check_char(\"hello\") == True, \"check_char returns True\"\nassert     check_char(\"hello world\") == True, \"check_char returns True\"\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nif check_char(\"racecar\")==True:\n    print(\"The function check_char returns True when the first character of the string is equal to the last character of the string.\")\nelse:\n    print(\"The function check_char returns False when the first character of the string is not equal to the last character of the string.\")\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_char('') == False\nassert     check_char('a') == False\nassert     check_char('a.') == True\nassert     check_char('a.b') == True\nassert     check_char('a.b.') == False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    assert check_char('aaa') == True\n    assert check_char('aaa1') == False\n    assert check_char('a') == False\n    assert check_char('1a') == True\n    "
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_char('b') == True \nassert     check_char('abc') == False \nassert     check_char('abcdefghi') == False \nassert     check_char('abcdefghi') == False \n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef check_pangram(string):\n    '''\n    Write a function to check whether the given string is a pangram or not. (Note: Pangrams are words or sentences containing every letter of the alphabet at least once.)\n    '''\n    pass\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_char('abc') == True\nassert     check_char('abcdefg') == False\nassert     check_char('a') == True\nassert     check_char('abcda') == False\nassert     check_char('bcc') == True\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\na = 1\nb = 2\nc = 3\nx = median_numbers(a,b,c)\nassert x == 2\n\na = 1\nb = 3\nc = 3\nx = median_numbers(a,b,c)\nassert x == 2\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     median_numbers(2,3,4)     == (2,3,4)\nassert     median_numbers(-1,2,3)     == (2,3,3)\nassert     median_numbers(-1,-2,-3)     == (2,-3,-3)\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    \n'''\n10.Write a function to find the median of three numbers.\n'''\ndef median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    pass\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nmedian_numbers(1,2,3) == 2.5\nmedian_numbers(1,2,3) == 2.5\nmedian_numbers(5,3,2) == 2.5\nmedian_numbers(1,2,3) == 2.5\nmedian_numbers(2,2,2) == 2.5\nmedian_numbers(5,5,5) == 5\nmedian_numbers(3,4,5) == 4\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef median_numbers_rec(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    pass\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     median_numbers(1,2,3) == 2\nassert     median_numbers(5,5,5) == 5\nassert     median_numbers(10,10,10) == 10\nassert     median_numbers(10,10,11) == 10.5\nassert     median_numbers(10,10,20) == 10\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     median_numbers(1,2,3) == 2\nassert     median_numbers(5,6,7) == 5.5\nassert     median_numbers(1,1,1) == 1\nassert     median_numbers(0,0,0) == 0\nassert     median_numbers(-1,-1,-1) == -1\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \na, b, c = 1, 2, 3\nmedian_numbers(a, b, c)\n\nassert median_numbers(1, 2, 3) == 2\nassert median_numbers(1, 2, 3) == 2.5\nassert median_numbers(2, 3, 1) == 2\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_of_digits([11,20,30]) == 21\nassert sum_of_digits([11,20,30]) == 31\nassert sum_of_digits([11,20,30,30]) == 32\nassert sum_of_digits([]) == 0\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_of_digits([111,2,33,44]) == 7\nassert     sum_of_digits([-1,0,1]) == 1\nassert     sum_of_digits([0,2,3]) == 5\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_of_digits([1,2,3]) == 6\nassert     sum_of_digits([1,2,3,4]) == 12\nassert     sum_of_digits([5,12,3,2]) == 13\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_of_digits([12, 2, 1, 78]) == 9\nassert     sum_of_digits([12, 2, 1, 8]) == 7\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert sum_of_digits([45, 0, 0, -80, -1, -10, 1]) == -12\nassert sum_of_digits([0,0,0,0]) == 0\nassert sum_of_digits([0,1,2,3,4,5,6,7,8,9]) == 45"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_of_digits([ 1, 12, 123, 1234]) == 5\nassert     sum_of_digits([ 1, 0, 123, 0]) == 4\nassert     sum_of_digits([]) == 0"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nbitwise_xor((1, 2), (2, 4)) == (1, 4)\nbitwise_xor((1, 2), (2, 3)) == (1, 2)\nbitwise_xor((1, 2, 3, 4), (4, 3, 2, 1)) == (1, 2, 3, 4)\nbitwise_xor((1, 2, 3, 4), (4, 3, 2, 1), (3, 4, 5, 6)) == (1, 2, 3, 4)\nbitwise_xor((1, 2, 3, 4), (4, 3, 2, 1), (3, 4, 5, 6), (3, 4, 5, 7)) == (1, 2, 3, 4)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     bitwise_xor(('A', 'B', 'C'), ('D', 'E', 'F')) == ('0', '1', '1')\nassert     bitwise_xor(('A', 'C', 'B'), ('D', 'F', 'E')) == ('0', '1', '0')\nassert     bitwise_xor(('A', 'A', 'A'), ('A', 'B', 'C')) == ('0', '0', '0')\nassert     bitwise_xor(('A', 'B', 'C'), ('B', 'C', 'C')) == ('0', '1', '0')\nassert     bitwise_xor(('A', 'A', 'C'), ('B', 'B', 'C')) == ('1', '0', '1')\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     bitwise_xor((1,2,3),(4,5,6)) == (4,1,7)\nassert     bitwise_xor((1,2,4),(4,5,6)) == (1,2,0)\nassert     bitwise_xor((1,3,4),(4,5,6)) == (1,3,0)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == '__main__':\n    \n    # ****************Test Case 1 ************************\n    assert bitwise_xor((1,3),(2,5)) == (1,2)\n    assert bitwise_xor((3,1),(2,5)) == (3,2)\n    \n    # ****************Test Case 2 ************************\n    assert bitwise_xor((4,3),(2,5)) == (5,2)\n    "
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     bitwise_xor((1,2,3), (4,5,6)) == (1,2,7), \"Wrong output\"\nassert bitwise_xor((3,5,7), (4,6,8)) == (3,5,7), \"Wrong output\"\nassert bitwise_xor((0,0,0), (0,0,1)) == (1,1,1), \"Wrong output\"\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nbitwise_xor((10, 5), (5, 10)) == 7\n\nbitwise_xor((10, 5), (10, 5)) == 0\n\nbitwise_xor((10, 5), (5, 15)) == 14\n\nbitwise_xor((10, 5), (5, 10)) == 7\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     bitwise_xor((0, 1), (0, 1)) == (1, 0)\nassert     bitwise_xor((1, 1), (0, 1)) == (1, 1)\nassert     bitwise_xor((0, 0), (0, 1)) == (1, 0)\nassert     bitwise_xor((1, 0), (0, 1)) == (1, 1)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(\"You passed all the tests!\")"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_freq([]) == []\nassert     extract_freq([(1, 2), (2, 3), (4, 5)]) == [(1, 2), (2, 3), (4, 5)]\nassert     extract_freq([(1, 2), (2, 3), (3, 4)]) == [(1, 2), (2, 3), (3, 4)]\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    extract_freq([('a', 'b'), ('a', 'b'), ('a', 'b')]) == 3\n    extract_freq([('a', 'b'), ('a', 'b'), ('a', 'b')]) == 3\n    extract_freq([('a', 'b'), ('a', 'c')]) == 1"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert         extract_freq(['', 'hello', 'hello']) == 2\nassert         extract_freq(['', '', 'hello', 'hello']) == 1\nassert         extract_freq([]) == 0\nassert         extract_freq(['hello', 'hello']) == 1\nassert         extract_freq(['hello', '', 'hello', 'hello']) == 2\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_freq([\n    [1, 2, 3],\n    [2, 1, 2],\n    [2, 3, 1],\n    [3, 1, 2],\n    [3, 2, 1]\n]) == 6\nassert     extract_freq([\n    [1, 1],\n    [2, 2],\n    [3, 3],\n    [4, 4],\n    [5, 5]\n]) == 5\nassert     extract_freq([\n    [1, 2, 3],\n    [2, 1, 2],\n    [3, 1, 2],\n    [3, 2, 1],\n    [4, 2, 3]\n]) == "
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_freq([[1,1,2], [2,3,4]]) == 2\nassert     extract_freq([[1,1,2], [2,3,2]]) == 0\nassert     extract_freq([[1,1,2], [1,1,1]]) == 3\nassert     extract_freq([[1,1,2], [1,2,1], [1,3,2], [1,1,3]]) == 4\nassert     extract_freq([[1,1,2], [1,2,1], [1,3,2], [1,1,1]]) == 4\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_freq([]) == 0\nassert     extract_freq([(1,2),(3,4)]) == 2\nassert     extract_freq([(1,2),(3,4),(1,2)]) == 2\nassert     extract_freq([(1,2),(2,3),(3,4)]) == 1\nassert     extract_freq([(1,2),(2,3),(3,4),(1,2)]) == 1\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_freq([]) == 0\nassert     extract_freq([1, 2, 3]) == 2\nassert     extract_freq([1, 2, 3, 1]) == 2\nassert     extract_freq([1, 2, 3, 2, 3]) == 3\nassert     extract_freq([1, 2, 3, 4, 5]) == 1\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_freq([(1, 2), (1, 2), (1, 2), (1, 2), (1, 2)]) == 2\nassert     extract_freq([(1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2)]) == 1\nassert     extract_freq([(1, 2), (1, 2), (1, 2), (1, 2), (1, 2)]) == 2\nassert     extract_freq([(1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2)]) == 3\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_freq([('1','2','3','4','5','6','7'),('1','2','3','4','5','6','7'),('1','2','3','4','5','6','7'),('1','2','3','4','5','6','7'),('1','2','3','4','5','6','7')]) == 5\nassert     extract_freq([('1','2','3'),('1','2','3'),('1','2','3'),('1','2','3')]) == 4\nassert     extract_freq([('1','2','3'),('1','2','3'),('1','2','3'),('1','2','3'),('1','2','3')]) == 4\nassert     extract_freq([('1','2','3'),('1','2','3'),('1','2','3'),('1','2','3')]) == 4\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_freq([]) == 0\nassert     extract_freq([[]]) == 0\nassert     extract_freq([[1,2]]) == 1\nassert     extract_freq([[1,2],[3,4]]) == 2\nassert     extract_freq([[1,2],[1,2]]) == 2\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     add_nested_tuples((1,2),(2,2)) == (3,4)\nassert     add_nested_tuples((1,2),(3,4)) == (4,6)\nassert     add_nested_tuples((1,2),(2,3)) == (2,4)\nassert     add_nested_tuples((1,2),(1,3)) == (2,4)\nassert     add_nested_tuples((1,2),(1,2,3)) == (2,4)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add_nested_tuples(('a', 'b'), ('c', 'd')) == ('a', 'c', 'b', 'd')\nassert     add_nested_tuples(('a', 'b'), ('c',)) == ('a', 'c', 'b')\nassert     add_nested_tuples(('a',), ('c', 'd')) == ('c', 'd', 'a')\nassert     add_nested_tuples(('a',), ('c')) == ('c', 'a')\nassert     add_nested_tuples(('a'), ('c', 'd')) == ('a', 'c', 'd')\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add_nested_tuples(('hi', 'hai', 'hello'), ('hoi', 'hi', 'hello')) == (('hi', 'hai', 'hello'), ('hoi', 'hi', 'hello'))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add_nested_tuples((0,1),(2,3)) == (0,3)\nassert     add_nested_tuples((0,1),(2,4)) == (2,5)\nassert     add_nested_tuples((0,1,2),(2,3,4)) == (2,3,4)\nassert     add_nested_tuples((0,1),(2,3)) == (0,3)\nassert     add_nested_tuples((0,1),(2,4)) == (2,5)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_nested_tuples((1,2,3),(4,5,6)) == (1,2,3,4,5,6)\nassert     add_nested_tuples((10,20),(30,40)) == (10,20,30,40)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     add_nested_tuples(((1, 2, 3), (4, 5, 6), (7, 8, 9)), ((1, 2, 3), (4, 5, 6), (7, 8, 9))) == (1, 4, 7)\nassert     add_nested_tuples(((1, 2, 3), (4, 5, 6), (7, 8, 9)), ((1, 2, 3), (4, 5, 6), (7, 8, 9))) == ((1, 4, 7), (2, 5, 8), (3, 6, 9))\nassert     add_nested_tuples(((1, 2, 3), (4, 5, 6), (7, 8, 9)), ((1, 2, 3), (4, 5, 6), (7, 8, 9))) == ((1, 4, 7), (2, 5, 8), (3, 6, 9))\nassert     add_nested_tuples(((1, 2, 3), (4, 5, 6), (7, 8, 9)), ((1, 2, 3), (4, 5, 6), (7, 8, 9))) == ((1, 2, 3), (4, 5, 6), (7, 8, 9))\nassert     add_nested_tuples(((1, 2, 3), (4, 5, 6), (7, 8, 9)), ((1, 2, 3), (4, 5, 6), (7, 8, 9))) == ((1, 2, 3), (4, 5, 6), (7, 8, 9))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     add_nested_tuples((1,2),(2,2)) == (3,2)\nassert     add_nested_tuples((2,3),(1,2)) == (3,3)\nassert     add_nested_tuples((2,4),(3,5)) == (5,6)\nassert     add_nested_tuples((4,5),(2,3)) == (7,8)"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add_nested_tuples((1,2,3,4),(1,2,3,4)) == (2,4,6,8), \"wrong answer\"\nassert     add_nested_tuples((1,2,3),(2,4,5)) == (3,5,7), \"wrong answer\"\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     minimum(10,20) == 20\nassert     minimum(20,10) == 10\nassert     minimum(5,5) == 5\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     minimum(5, 6) == 5\nassert     minimum(3, 3) == 3\nassert     minimum(1, 2) == 1\nassert     minimum(0, 0) == 0\nassert     minimum(2, 1) == 1\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     minimum(1,2) == 1\nassert     minimum(5,6) == 5\nassert     minimum(7,6) == 6\nassert     minimum(-1,-2) == -1\nassert     minimum(-4,-3) == -4\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     minimum(2,1) == 1\nassert     minimum(1,2) == 1\nassert     minimum(2,2) == 2\nassert     minimum(1,1) == 1\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     minimum(5,4) == 4, \"error-1\"\nassert     minimum(7,5) == 5, \"error-2\"\nassert     minimum(8,9) == 8, \"error-3\"\nassert     minimum(6,1) == 1, \"error-4\"\nassert     minimum(8.5,1.5) == 1.5, \"error-5\"\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     minimum(4,2)==2\nassert     minimum(7,6)==6\nassert     minimum(-2,7)==-2\nassert     minimum(1,1)==1"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    minimum(1,2) == 1\n    minimum(3,4) == 1\n    minimum(-1,-2) == -2\n    minimum(0,0) == 0\n    \n    "
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     minimum(5,5) == 5\nassert    minimum(3,4) == 3\nassert    minimum(0,4) == 0\nassert    minimum(-2,-5) == -2\n\nprint('All test cases passed.')\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_tuplex((1,2),(1,2)) == True\nassert check_tuplex((1,2),(2,3)) == False\nassert check_tuplex((1,2),(1,)) == False\nassert check_tuplex((1,2,3),(1,2)) == False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_tuplex((),()) == True, \"Check for empty tuple\"\nassert     check_tuplex((1,),()) == False, \"Check for tuple with 1 element\"\nassert     check_tuplex((),(1,)) == True, \"Check for empty tuple\"\nassert     check_tuplex((1,2,),(1,)) == True, \"Check for tuple with 2 elements\"\nassert     check_tuplex((1,2,3,),(1,)) == True, \"Check for tuple with 3 elements\"\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_tuplex([1,2,3,4],(1,2))==True, 'Failed, should return True'\nassert     check_tuplex([1,2,3,4],(5,2))==False, 'Failed, should return False'\nassert     check_tuplex([1,2,3,4],(5,6))==False, 'Failed, should return False'\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_tuplex((1,2,3),(1,2,3)) == True, \"result should be True\"\nassert     check_tuplex((1,2,3),(1,4,3)) == False, \"result should be False\"\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # testing check_tuplex()\n    print('Testing check_tuplex:')\n    print('')\n    print('-------------------')\n    print('')\n    print('Input: ')\n    tuplex = (1,2,3,4)\n    tuple1 = (2,4,6,8)\n    print('tuplex = {}'.format(tuplex))\n    print('tuple1 = {}'.format(tuple1))\n    print('')\n    print('Output: ')\n    print('{}'.format(check_tuplex(tuplex,tuple1)))\n\n    print('')\n    print('-------------------')\n    print('')\n    print('Input: ')\n    tuplex = (1,2,3,4)\n    tuple1 = (2,4,6,8)\n    print('tuplex = {}'.format(tuplex))\n    print('tuple1 = {}'.format(tuple1))\n    print('')\n    print('Output: ')\n    print('{}'.format(check_tuplex(tuplex,tuple1)))\n    print('')\n    print('-------------------')\n    print('')\n    print('Input: ')\n    tuplex = (1,2,3,4)\n    tuple1 = (2,)\n    print('tuplex = {}'.format(tuplex))\n    print('tuple1 = {}'.format(tuple1))\n    print('')\n    print('Output: ')\n    print('{}'.format(check_tuplex(tuplex,tuple1)))\n    print('')\n    print('-------------------')\n    print('')\n    print('Input: ')\n    tuplex = (1,2,3,4)\n    tuple1 = ()\n    print('tuplex = {}'.format(tuplex))\n    print('tuple1 = {}'.format(tuple1))\n    print('')\n    print('Output: ')\n    print('{}'.format(check_tuplex(tuplex,tuple1)))\n\n    print('')\n    print('-------------------')\n    print('')\n    print('Input: ')\n    tuplex = (1,2,3,4)\n    tuple1 = (1,)\n    print('tuplex = {}'.format(tuplex))\n    print('tuple1 = {}'.format(tuple1))\n    print('')\n    print('Output: ')\n    print('{}'.format(check_tuplex(tuplex,tuple1)))\n    print('')\n    print('-------------------')\n    print('')\n    print('Input: ')\n    tuplex = (1,2,3,4)\n    tuple1 = ()\n    print('tuplex = {}'.format(tuplex))\n    print('tuple1 = {}'.format(tuple1))\n    print('')\n    print('Output: ')\n    print('{}'.format(check_tuplex(tuplex,tuple1)))\n\n    print('')\n    print('-------------------')\n    print('')\n    print('Input: ')\n    tuplex = (1,2,3,4)\n    tuple1 = (1,2,3,4)\n    print('tuplex = {}'.format(tuplex))\n    print('tuple1 = {}'.format(tuple1))\n    print('')\n    print('Output: ')\n    print('{}'.format(check_tuplex(tuplex,tuple1)))\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert not check_tuplex((0,), (1, 2))\nassert check_tuplex((0,), (1, 2))\nassert not check_tuplex((0,), (1, 2, 3))\nassert check_tuplex((0,), (1, 2, 3))\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_tuplex((1,2,3),(1,2,3))     == True, 'check_tuplex((1,2,3),(1,2,3)) should return True'\nassert     check_tuplex((1,2,3),(1,2))     == False, 'check_tuplex((1,2,3),(1,2)) should return False'\nassert     check_tuplex((1,2,3),(1,2,3,4))     == False, 'check_tuplex((1,2,3),(1,2,3,4)) should return False'\n\nprint('Testing check_tuplex...')\nprint('check_tuplex((1,2,3),(1,2)) should return False...')\nprint(check_tuplex((1,2,3),(1,2)) == False)\nprint('check_tuplex((1,2,3),(1,2,3,4)) should return False...')\nprint(check_tuplex((1,2,3),(1,2,3,4)) == False)\nprint('check_tuplex((1,2,3),(1,2,3,4,5)) should return True...')\nprint(check_tuplex((1,2,3),(1,2,3,4,5)) == True)\nprint()"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_tuplex((1,2,3,4),(1,2,3,4)) == True\nassert     check_tuplex((1,2,3,4),(1,2,3,5)) == False\n\n\ndef check_tuplex_2(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert check_tuplex([(1,2),(2,4)],[(1,2),(3,4),(2,4)])\nassert check_tuplex([(1,2),(2,4)],[(1,2),(3,4),(2,4)]) == False\nassert check_tuplex((1,2),(2,4)) == False\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Parity(5) == True,    \"Test case: 5\"\nassert     find_Parity(6) == False,    \"Test case: 6\"\nassert     find_Parity(7) == False,    \"Test case: 7\"\nassert     find_Parity(8) == False,    \"Test case: 8\"\nassert     find_Parity(9) == True,    \"Test case: 9\"\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Parity(10) == True\nassert     find_Parity(8) == False\nassert     find_Parity(-10) == True\nassert     find_Parity(-8) == False\nassert     find_Parity(0) == False\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_Parity(1)     ==     0,     \"Wrong result for {}\".format(find_Parity(1))\nassert     find_Parity(11)     ==     1,     \"Wrong result for {}\".format(find_Parity(11))\nassert     find_Parity(-10)     ==     1,     \"Wrong result for {}\".format(find_Parity(-10))\n\ndef sum_of_Digits(x):\n    '''\n    Write a python function to find the sum of digits of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Parity(4) == True\nassert     find_Parity(8) == False\n\ndef find_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x%2==0"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Parity(5) == True\nassert     find_Parity(6) == False\nassert     find_Parity(7) == True\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Parity(2) == False\nassert     find_Parity(3) == True\nassert     find_Parity(4) == False\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_Parity(1) == 1\nassert     find_Parity(2) == 1\nassert     find_Parity(3) == 1\nassert     find_Parity(4) == 1\nassert     find_Parity(5) == 1\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nfind_Parity(23) == True\nfind_Parity(24) == False\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Parity(4) == False\nassert     find_Parity(5) == True\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef find_Parity(x):\n    return (x % 2) == 1\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     rearrange_bigger(9) == 99, 'Wrong result'\nassert     rearrange_bigger(18) == 99, 'Wrong result'\nassert     rearrange_bigger(13) == 13, 'Wrong result'\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     rearrange_bigger(10) == 21, \"Smallest possible number\"\nassert     rearrange_bigger(1234) == 4321, \"Next bigger number\"\nassert     rearrange_bigger(11) == 21, \"Bigger numbers cannot be created by this algorithm\"\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n\ndef rearrange_bigger_2(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    num_list = []\n    for i in str(n):\n        num_list.append(i)\n    if len(num_list) == 1:\n        return n\n    if len(num_list) == 2:\n        if num_list[0] > num_list[1]:\n            return int(''.join(num_list))\n        else:\n            return int(''.join(num_list[::-1]))\n    for i in range(len(num_list)-1):\n        if num_list[i] > num_list[i+1]:\n            return int(''.join(num_list))\n    return int(''.join(num_list[::-1]))\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     rearrange_bigger(145) == 54321\nassert     rearrange_bigger(123) == 321\nassert     rearrange_bigger(1234) == 4321\nassert     rearrange_bigger(11) == 21\nassert     rearrange_bigger(2) == 22\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef rearrange_bigger_v2(n):\n    '''\n    Try to convert n from a string to an integer. If it is not possible to do that, return -1.\n    '''\n    pass\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rearrange_bigger(21) == 2222, rearrange_bigger(21)\nassert     rearrange_bigger(27) == 36, rearrange_bigger(27)\nassert     rearrange_bigger(101) == 12, rearrange_bigger(101)\nassert     rearrange_bigger(0) == 0, rearrange_bigger(0)\n\ndef find_nearest_to_left(n):\n    '''\n    Write a function to find the nearest number to the left of n in which the digits of n\n    are in increasing order.\n    '''\n    pass\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert rearrange_bigger(111) == 1110\nassert rearrange_bigger(0131) == 3101\nassert rearrange_bigger(1234) == 3234\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     k_smallest_pairs([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 3) == [(1, 6), (2, 7), (3, 8)]\nassert     k_smallest_pairs([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 4) == [(1, 6), (2, 7), (3, 8), (4, 9)]\nassert     k_smallest_pairs([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 5) == [(1, 6), (2, 7), (3, 8), (4, 9), (5, 10)]\nassert     k_smallest_pairs([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 8) == [(1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (2, 6), (2, 7), (2, 8), (3, 7), (3, 8), (4, 7), (4, 8), (5, 7), (5, 8), (6, 7), (6, 8), (7, 8)]\nassert     k_smallest_pairs([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 13) == [(1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (1, 7), (1, 8), (1, 9), (1, 10), (2, 3), (2, 4), (2, 5), (2, 6), (2, 7), (2, 8), (2, 9), (2, 10), (3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (3, 10), (4, 5), (4, 6), (4, 7), (4, 8), (4, 9), (4, 10), (5, 6), (5, 7), (5, 8), (5, 9), (5, 10), (6, 7), (6, 8), (6, 9), (6, 10), (7, 8), (7, 9), (7, 10), (8, 9), (8, 10)]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    k_smallest_pairs([1,3,2], [2,4,6], 3) == [[1,2],[2,3],[3,2]]\n    k_smallest_pairs([1,3,2], [2,4,6], 2) == [[1,2],[3,2]]\n    k_smallest_pairs([1], [2], 2) == [[1,2]]\n    k_smallest_pairs([1,2], [3], 2) == [[1,2],[2,3]]\n    k_smallest_pairs([0,1], [1], 2) == [[0,1],[1,0]]\n\n\nclass Pair:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n\n    def __lt__(self, other):\n        return self.a < other.a or (self.a == other.a and self.b < other.b)\n\n    def __str__(self):\n        return f'{self.a}:{self.b}'\n\n\nclass Solution:\n    def smallestKPairs(self, nums1, nums2, k):\n        if len(nums1) == 0 or len(nums2) == 0:\n            return []\n        res = []\n        if k == 0:\n            return res\n        if k == 1:\n            return [[nums1[i], nums2[i]] for i in range(len(nums1))]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef k_largest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of largest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pass\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pq = []\n    for n1 in nums1:\n        for n2 in nums2:\n            heapq.heappush(pq, (n1+n2, n1, n2))\n    for _ in range(k):\n        _, n1, n2 = heapq.heappop(pq)\n        print(n1, n2)\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     k_smallest_pairs([1,7,11], [2,4,6], 3) == [[1,2],[1,4],[1,6]]\nassert     k_smallest_pairs([2,4,6], [1,7,11], 3) == [[2,1],[4,1],[6,1]]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     k_smallest_pairs([1, 5, 9, 10, 15, 20], [2, 4, 6, 8, 11, 13], 3) == [1, 4, 6]\nassert     k_smallest_pairs([1, 5, 9, 10, 15, 20], [2, 4, 6, 8, 11, 13], 4) == [1, 4, 6, 8]\nassert     k_smallest_pairs([1, 5, 9, 10, 15, 20], [2, 4, 6, 8, 11, 13], 1) == [1, 2, 4, 6]\n\ndef k_smallest_pairs_two_pointers(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if not nums1 or not nums2:\n        return\n\n    m, n = len(nums1), len(nums2)\n    l1, l2 = m, n\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     k_smallest_pairs([1,1,2], [2,3,4], 2) == [[1,2],[1,3]]\nassert     k_smallest_pairs([1,1,2], [2,3,4], 1) == [[1,2],[1,3]]\nassert     k_smallest_pairs([1,1,2], [2,3,4], 5) == [[1,2],[1,3],[1,4],[1,5],[2,3],[2,4],[2,5]]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     k_smallest_pairs([1, 1, 2, 2, 3], [1, 2, 3, 5, 4], 1) == [[1, 1], [1, 2], [1, 3]]\nassert     k_smallest_pairs([1, 1, 2, 2, 3], [1, 2, 3, 5, 4], 2) == [[1, 1], [1, 2], [1, 3], [2, 2], [2, 3], [3, 5]]\nassert     k_smallest_pairs([1, 1, 2, 2, 3], [1, 2, 3, 5, 4], 3) == [[1, 1], [1, 2], [1, 3], [2, 2], [2, 3], [3, 5]]\nassert     k_smallest_pairs([1, 1, 2, 2, 3], [1, 2, 3, 5, 4], 4) == [[1, 1], [1, 2], [1, 3], [2, 2], [2, 3], [3, 5]]\nassert     k_smallest_pairs([1, 1, 2, 2, 3], [1, 2, 3, 5, 4], 5) == [[1, 1], [1, 2], [1, 3], [2, 2], [2, 3], [3, 5]]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     k_smallest_pairs([1,1,1,2,2,3],[1,2,3,4,5,6],4) == [[1,1],[1,2],[2,3],[2,4]]\nassert     k_smallest_pairs([4,1,2,1,3],[4,5,6,7,8,9,10],4) == [[1,4],[2,3],[1,5],[2,6],[1,7]]\nassert     k_smallest_pairs([5,5,5,5],[1,2,3,4,5,6],3) == [[1,5],[2,5],[3,5]]\nassert     k_smallest_pairs([1,1,1,2,2,3],[1,2,3,4,5,6],3) == [[1,1],[1,2],[2,3]]\nassert     k_smallest_pairs([1,1,1,2,2,3],[1,2,3,4,5,6],5) == [[1,1],[1,2],[1,3],[1,4],[1,5]]\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     min_product_tuple([(3,2),(4,1),(4,5),(1,3)]) == 2, 'The minimum product tuple should be (1,1)'\nassert     min_product_tuple([(2,2),(2,5),(4,5)]) == 5, 'The minimum product tuple should be (2,2)'\nassert     min_product_tuple([(1,5),(2,1),(5,3),(3,2)]) == 5, 'The minimum product tuple should be (1,1)'"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     min_product_tuple([(1,2), (3,4)]) == (1, 3)\nassert     min_product_tuple([(3,4), (1,2)]) == (1, 3)\n\ndef min_product_list(list1):\n    '''\n    Write a function to find the minimum product from the pairs of lists within a given list.\n    '''\n    pass\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     min_product_tuple([(1, 10), (20, 7), (30, 9)]) == (1 * 10, 20 * 7, 30 * 9) == (990, 3570, 9033)\nassert min_product_tuple([(1, 2), (3, 4), (5, 6)]) == (1 * 2, 3 * 4, 5 * 6) == (24, 12, 24)\nassert min_product_tuple([(2, 3), (4, 5)]) == (2 * 3, 4 * 5) == (6, 15)\nassert min_product_tuple([(3, 4), (1, 3), (2, 1), (4, 1)]) == (3 * 4, 1 * 3, 2 * 1, 4 * 1) == (36, 4, 12, 4)\nassert min_product_tuple([(2, 4), (5, 2), (5, 4)]) == (2 * 4, 5 * 2, 5 * 4) == (10, 10, 20)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     min_product_tuple([(1,2),(3,4),(5,6)]) == (1*2, 3*4)\nassert     min_product_tuple([(3,4),(5,6)]) == (5*6,)\nassert     min_product_tuple([(1,2)]) == (1*2,)\nassert     min_product_tuple([]) == ()\nassert     min_product_tuple([(1,3),(4,5),(6,7),(8,9)]) == (1*3, 4*5)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     min_product_tuple([[1,3,5],[2,4,6],[7,8,9]]) == (1,2,3)\nassert     min_product_tuple([[6,4,2],[3,6,5]]) == (6,4,2)\nassert     min_product_tuple([[10,2,3],[9,6,8],[7,4,5]]) == (10,2,3)\nassert     min_product_tuple([[-2,1,5],[3,-1,8],[7,-4,9]]) == (-2,1,5)\nassert     min_product_tuple([[2,5,10],[3,6,-1],[7,-4,9]]) == (2,5,10)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nlist1 = [[10,20],\n        [5,15],\n        [2,3],\n        [5,10],\n        [1,5],\n        [4,1]]\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nmin_val([1,2,4,5,7,9]) == min_val([1,2,4,5,7,9]) == 1\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     min_val([1,2,3]) == 1\nassert     min_val([1,2,-3]) == -3\nassert     min_val([-5,1,-2,-3,2,3]) == -5\nassert     min_val([-5,1,2,3,-100,5]) == -100\nassert     min_val([-5,-1,-2,3,5,-1,2,3,4,5]) == -1\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     min_val([1,2,3,4,5]) == 1\nassert     min_val([3,4,5,6,7,8,1,2]) == 1\nassert     min_val([]) == None\nassert     min_val([1,2,3,4,5,6,7,8,9,10,11]) == 1\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     min_val([1, 2, 3, 4, 5]) == 1, 'wrong answer'\nassert     min_val([1, -1, -1, -1, -1]) == -1, 'wrong answer'\nassert     min_val([1, -1, -1, 0, 1]) == -1, 'wrong answer'\nassert     min_val([1, 1, 1, 1, 1]) == 1, 'wrong answer'\n\n'''\nTask 1\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     min_val([(2,'a'),(3,'b'),(5,'c')]) == min((2,'a'),(3,'b'),(5,'c'))\nassert    min_val([(1,2),(2,3),(3,4)]) == min((1,2),(2,3),(3,4))\nassert    min_val([(5,'a'),(4,'b'),(3,'c')]) == min((5,'a'),(4,'b'),(3,'c'))\n\ndef check_min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    pass\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    input_list = [(\"red\", 5), (\"yellow\", 10), (\"blue\", 1)]\n    print(min_val(input_list))\n    \n    input_list = [5, 10, 5]\n    print(min_val(input_list))\n    \n    input_list = [\"red\", \"yellow\", \"blue\", 5, 10]\n    print(min_val(input_list))\n\n    input_list = [\"blue\", \"red\", \"green\", \"yellow\"]\n    print(min_val(input_list))\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     min_val([1,2,3,4,5]) == 1\nassert     min_val([0,2,1,6,2]) == 0\nassert     min_val([]) == None\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     min_val([1, 2, 3, 4, 5]) == 1\nassert     min_val([1, 5, 3, 4, 2]) == 1\nassert     min_val([4, 1, 5, 3, 4]) == 1\nassert     min_val([1, 5, 4, 1, 2]) == 1\nassert     min_val([1, 5, 4, 2, 2]) == 1\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert min_val([2, -3, 4, -2, 4, 5]) == -3\nassert min_val([-1, 3, 4, -3, 6, 2]) == -3\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == '__main__':\n    assert snake_to_camel('snake_case') =='snakeCase'\n    assert snake_to_camel('snake_case_') =='snakeCase'\n    assert snake_to_camel('snake_case_') =='snakeCase'\n    "
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     snake_to_camel('this_is_a_test') == 'thisIsATest'\nassert     snake_to_camel('this_is_a_test_with_dashes') == 'thisIsATestWithDashes'\nassert     snake_to_camel('this_is_a_test_with_underscores') == 'thisIsATestWithUnderscores'\nassert     snake_to_camel('this_is_a_test_with_underscores_and_dashes') == 'thisIsATestWithUnderscoresAndDashes'\nassert     snake_to_camel('this_is_a_test_with_underscores_and_dashes_and_spaces') == 'thisIsATestWithUnderscoresAndDashesAndSpaces'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     snake_to_camel('snake_case') =='snakeCase'\nassert     snake_to_camel('snake_case_') =='snakeCase'\nassert     snake_to_camel('snake_case_1') =='snakeCase1'\nassert     snake_to_camel('snake_case_2') =='snakeCase2'\nassert     snake_to_camel('snake_case_3') =='snakeCase3'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     snake_to_camel('simple_case') == 'SimpleCase'\nassert     snake_to_camel('i-am-ok') == 'IamOk'\nassert     snake_to_camel('apple') == 'Apple'\nassert     snake_to_camel('apple_pie') == 'ApplePie'\nassert     snake_to_camel('apple_pie_pie') == 'ApplePiePiePie'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     snake_to_camel(\"snake_to_camel\") == \"snake_to_camel\"\nassert     snake_to_camel(\"snake_to_camel_\") == \"snake_to_camel\"\nassert     snake_to_camel(\"snake_to_camel.space\") == \"snake_to_camel\"\nassert     snake_to_camel(\"snake_to_camel__\") == \"snake_to_camel\"\nassert     snake_to_camel(\"snake_to_camel123_\") == \"snake_to_camel123\"\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     snake_to_camel(\"my_function_name\") == \"myFunctionName\"\nassert     snake_to_camel(\"my_function_name_\") == \"myFunctionName\"\nassert     snake_to_camel(\"my_function_name__\") == \"myFunctionName\"\nassert     snake_to_camel(\"my_function_name___\") == \"myFunctionName\"\nassert     snake_to_camel(\"my_function_name___\") == \"myFunctionName\"\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     snake_to_camel(\"MyName\") == \"myName\"\nassert     snake_to_camel(\"my_name\") == \"myName\"\nassert     snake_to_camel(\"my-name\") == \"my-name\"\nassert     snake_to_camel(\"myname\") == \"myname\"\nassert     snake_to_camel(\"my_name\") == \"my_name\"\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     snake_to_camel('snake_to_camel') =='snakeToCamel', \"Expected snake_to_camel to be'snake to camel', but got '{}'\".format(snake_to_camel('snake_to_camel'))\n\nassert snake_to_camel('snake_to_camel') =='snakeToCamel', \"Expected snake_to_camel to be'snake to camel', but got '{}'\".format(snake_to_camel('snake_to_camel'))\n\nprint('Testing passed.')\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     snake_to_camel('snake_case_string') =='snakeCaseString', 'Wrong output'\nassert snake_to_camel('snake_case_string') =='snakeCaseString', 'Wrong output'\nassert snake_to_camel('snake_case_string_with_underscore') =='snakeCaseStringWithUnderscore', 'Wrong output'\nassert snake_to_camel('snake_case_string_with_underscore') =='snakeCaseStringWithUnderscore', 'Wrong output'\n\ndef snake_to_camel_alternative(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return word.title()\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     snake_to_camel(\"snake\") == \"Snake\", \"should be Snake\"\nassert     snake_to_camel(\"snake_case\") == \"SnakeCase\", \"should be SnakeCase\"\nassert     snake_to_camel(\"snake_case_\") == \"SnakeCase\", \"should be SnakeCase\"\nassert     snake_to_camel(\"snake__case\") == \"SnakeCase\", \"should be SnakeCase\"\nassert     snake_to_camel(\"snake____case\") == \"SnakeCase\", \"should be SnakeCase\"\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_odd([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 3, 5, 7, 8]\nassert     remove_odd([1, 2, 3, 4, 5, 6, 7]) == [1, 3, 5, 7]\nassert     remove_odd([1, 2, 3, 4, 5, 6]) == []\nassert     remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == []\n\nprint(\"Exercise 4: pass\")\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_odd([1,2,3,4,5]) == [2,4,5]\nassert     remove_odd([1,2,3,4,5,6,7]) == [2,4,6,7]\nassert     remove_odd([1,2,3,4,5,6,7,8,9]) == [2,4,6,7,8,9]\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_odd([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     remove_odd([]) == []\nassert     remove_odd(['a', 'b', 'c', 'd', 'e', 'f']) == ['a', 'b', 'c', 'd', 'e']\nassert     remove_odd([0, 'a', 'b', 'c', 'd', 'e', 'f']) == [0, 'a', 'b', 'c', 'd', 'e']\nassert     remove_odd([-1, 'a', 'b', 'c', 'd', 'e', 'f']) == [-1, 'a', 'b', 'c', 'd', 'e']\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_odd([]) == []\nassert    remove_odd([0,1,2,3,4,5,6,7,8,9]) == [0,1,2,3,4,5,6,7,8]\nassert    remove_odd([0,1,2,3,4,5,6,7,8,9,0]) == [0,1,2,3,4,5,6,7,8,9]\nassert    remove_odd([0,1,2,3,4,5,6,7,8,9,0]) == [0,1,2,3,4,5,6,7,8,9]\nassert    remove_odd([0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9]) == [0,1,2,3,4,5,6,7,8,9]\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nremove_odd([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nprint(remove_odd([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_odd([1,2,3,4,5,6,7,8,9]) == [1,3,5,7,9]\nassert     remove_odd([1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9]\nassert     remove_odd([1,2,3,4,5,6,7,8,9,10,11]) == [1,3,5,7,9,11]\nassert     remove_odd([1,2,3,4,5,6,7,8,9,10,11,12]) == [1,3,5,7,9,11,12]\nassert     remove_odd([1,2,3,4,5,6,7,8,9,10,11,12,13]) == [1,3,5,7,9,11,13]\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_odd([1,3,4,5,6,7]) == [1,3,5,6,7]\nassert     remove_odd([5,6,7]) == []\nassert     remove_odd([5]) == [5]\nassert     remove_odd([]) == []\nassert     remove_odd([4,2,1,5,3,9,10,6]) == [4,2,1,5,3,9,10,6]\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_odd([1,2,3,4,5]) == [1,3,5]\nassert     remove_odd([1,2,3,4,5,6]) == [1,3,5]\nassert     remove_odd([1,2,3,4,5,6,7]) == [1,3,5]\nassert     remove_odd([1,2,3,4,5,6,7,8,9]) == [1,3,5,7,9]\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_odd([1, 2, 3, 4, 5, 6, 7]) ==  [1, 3, 5, 7]\nassert     remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) ==  [1, 3, 5, 7, 9]\nassert     remove_odd([]) == []\nassert     remove_odd([2, 3, 4, 5, 6, 7]) == []\nassert     remove_odd([\"Hello\", 2, 3, 4, 5, 6, 7]) == [\"Hello\"]\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef remove_odd_from_list(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    pass\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(\"All test cases passed!\""
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_nth_element([1, 2, 3], 1) == 2\nassert extract_nth_element([1, 2, 3], 2) == 3\nassert extract_nth_element([1, 2, 3], 3) == 1\nassert extract_nth_element([1, 2, 3], 4) == None\nassert extract_nth_element([1, 2, 3], -1) == 1\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_nth_element([('ab', 2), ('cd', 3), ('ef', 4), ('gh', 5)], 3) == 'ef'\nassert     extract_nth_element([('ab', 2), ('cd', 3), ('ef', 4), ('gh', 5)], 2) == 'cd'\nassert     extract_nth_element([('ab', 2), ('cd', 3), ('ef', 4), ('gh', 5)], 1) == 'ab'\nassert     extract_nth_element([('ab', 2), ('cd', 3), ('ef', 4), ('gh', 5)], 0) == 'gh'\nassert     extract_nth_element([], 0) == None\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_nth_element([(1, 2), (3, 4), (5, 6, 7)], 1) == (1, 2)\nassert     extract_nth_element([(1, 2), (3, 4), (5, 6, 7)], 2) == (3, 4)\nassert     extract_nth_element([(1, 2), (3, 4), (5, 6, 7)], 3) == (5, 6, 7)\nassert     extract_nth_element([(1, 2), (3, 4), (5, 6, 7)], 0) == (1, 2)\nassert     extract_nth_element([], 0) == None\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef extract_nth_element_fast(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    pass\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_nth_element([(1,2), (3,4), (5,6), (7,8), (9,0)], 3) == 9\nassert     extract_nth_element([(1,2), (3,4), (5,6), (7,8), (9,0)], 4) == 0\nassert     extract_nth_element([(1,2), (3,4), (5,6), (7,8), (9,0)], 5) == 7\nassert     extract_nth_element([(1,2), (3,4), (5,6), (7,8), (9,0)], 1) == 1\nassert     extract_nth_element([(1,2), (3,4), (5,6), (7,8), (9,0)], 2) == 3\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_nth_element([('a',1),('b',2),('c',3),('d',4),('e',5)],2) == ('b',2)\nassert     extract_nth_element([('a',1),('b',2),('c',3),('d',4),('e',5)],0) == ('a',1)\nassert     extract_nth_element([('a',1),('b',2),('c',3),('d',4),('e',5)],1) == ('c',3)\nassert     extract_nth_element([('a',1),('b',2),('c',3),('d',4),('e',5)],4) == ('e',5)\nassert     extract_nth_element([('a',1),('b',2),('c',3),('d',4),('e',5)],5) == ('d',4)\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n'''\nWrite a Python function to add two numbers in a list (like add_item_to_list) but only if the addition is not greater than 1000.\n'''\n\ndef add_item_to_list(list1,list2):\n    '''\n    Write a python function to add two numbers in a list (like add_item_to_list) but only if the addition is not greater than 1000.\n    '''\n    pass\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint('\\n')\nprint(f'List1 = {list1}')\nprint(f'List2 = {list2}')\nassert overlapping(list1,list2) == True\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(\"\\nChecking whether the given two lists are overlapping or not:\")\nlist1 = [10, 20, 30]\nlist2 = [10, 20, 30]\nprint(\"List 1: \", list1)\nprint(\"List 2: \", list2)\nprint(\"Overlapping: \", overlapping(list1,list2))\n\nlist1 = [1, 2, 3]\nlist2 = [1, 2, 3]\nprint(\"\\nChecking whether the given two lists are overlapping or not:\")\nprint(\"List 1: \", list1)\nprint(\"List 2: \", list2)\nprint(\"Overlapping: \", overlapping(list1,list2))\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     overlapping([2,3,4,5,6], [6,7,8]) == False\nassert     overlapping([2,3,4,5,6], [6,5,7,8]) == True\nassert     overlapping([1,2,3,4,5], [1,3,5,7]) == True\nassert     overlapping([1,2,3,4,5], [1,3,5,7,8]) == True\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     overlapping([10,20,30,40],[10,20,30,40]) == True\nassert     overlapping([10,20,30],[10,20,30]) == True\nassert     overlapping([10,20,30],[10,20]) == False\nassert     overlapping([10,20],[10,20,30]) == False\nassert     overlapping([10,20,30,40],[10,20]) == False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    overlapping([5,4,3,2,1], [3,2,1]) == True\n    overlapping([5,4,3,2,1], [5,4,3]) == False\n    overlapping([5,4,3,2,1], [2,3,4]) == True\n    overlapping([5,4,3,2,1], [1,2,3]) == False\n    overlapping([5,4,3,2,1], []) == False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     overlapping([1,2,3,5,7], [1,2,5,7]) == True\nassert     overlapping([1,2,3,5,7], [1,2,3,5,7]) == True\nassert     overlapping([1,2,3,5,7], [1,2,3]) == False\nassert     overlapping([], [1,2,3,5,7]) == False\nassert     overlapping([1,2,3,5,7,8,9], [1,2,3,5,7,8,9]) == False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_Product([1, 5, 4, 6, 3]) == (6, 4)\nassert     max_Product([1, 6, 5, 4, 3]) == (6, 3)\nassert     max_Product([1, 6, 5, 4, 3]) == (6, 4)\n\n'''\nGiven a sorted array of integers, and a target integer, return true if there exists an index in the array \nsuch that it's equal to the target value, if not, return false.\n\nAssumptions:\n    - elements of the array are in sorted order\n    - the target integer is a value of the array\n    - the array is not empty\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == \"__main__\": \n    \n    arr = [-2, -3, -1, 0, -1] \n    assert max_Product(arr) == -1 * 0\n    \n    arr = [-2, -3, -1, -4, -1]\n    assert max_Product(arr) == -1 * 4\n    \n    arr = [-2, -3, -1, 0, -1, -4]\n    assert max_Product(arr) == -1 * 0\n    \n    arr = [-2, -3, -1, -4, -1, -5, -6]\n    "
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_Product([1, 6, 9, 3, 4]) == (9, 6)\nassert max_Product([1, 6, 2, 3, 4]) == (24, 12)\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_Product([1, 10, 2, 3, 4, 5, 6, 7]) ==     (10, 7)\nassert max_Product([1, 100, 2, 3, 4, 5, 6, 7]) == None\nassert max_Product([1, 10, 2, 3, 4, 5, 6, 7, 8, 9]) == None\nassert max_Product([1, 100, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == None\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint(\"Output for max_Product:\")\nmax_Product([-1, -2, -3, -4, -5])"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_Product([-3, 4, -2, 1, 2]) == (4, 2)\nassert     max_Product([-3, 4, -2, 1, 3]) == (4, 2)\nassert     max_Product([-3, -4, -2, 1, 3]) == (-4, -1)\nassert     max_Product([-3, 4, -2, 1, -3]) == (-4, -1)\nassert     max_Product([]) == None\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_Product([0, 0, 0, 0, 0, 0]) == 0\nassert     max_Product([1, 2, 3, 4, 5, 6]) == 30\nassert     max_Product([5, 6, 2, 3, 4, 5]) == 180"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_Product([1, 2, 3, 4, -4, 5, 6]) ==     (6, -4)\nassert     max_Product([1, 2, -3, 4, 5, -6, 0]) == (0, -6)\nassert     max_Product([3, 4, -5, 6, -1, 2]) == (24, -1)\nassert     max_Product([2, 2, 2, 2, 2, 2, 2]) == (8, None)\nassert     max_Product([5, 5, 5]) == (5, None)\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nInput = [(1,2),(3,4),(4,5),(1,2),(7,8),(9,10)]\nInput1 = [(1,2),(3,4),(5,6)]\nInput2 = [(1,2),(3,4),(4,5)]\nInput3 = [(1,2,3,4,5)]\nInput4 = [(1,2),(3,4,5),(6,7,8,9,10),(1,2,3)]\nassert group_tuples(Input) == 2\nassert group_tuples(Input1) == 1\nassert group_tuples(Input2) == 1\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     group_tuples([(1,2),(1,2),(2,3),(1,2),(2,3),(1,2),(2,3)]) == 1\nassert group_tuples([(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3)]) == None\nassert group_tuples([(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3)]) == 1\nassert group_tuples([(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3)]) == None\nassert group_tuples([(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2),(1,2)]) == 1\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     group_tuples([('a', 1), ('b', 1), ('c', 1)]) == ['b']\nassert group_tuples([('a', 2), ('b', 2), ('c', 2)]) == ['a', 'b', 'c']\nassert group_tuples([('a', 2), ('a', 1), ('b', 2)]) == ['a', 'b']\nassert group_tuples([('a', 1), ('a', 2), ('a', 3)]) == ['a']\nassert group_tuples([('a', 1), ('a', 2), ('a', 3), ('a', 4)]) == ['a']\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     group_tuples([(1,2),(3,4),(3,4),(5,6)]) == 3\nassert group_tuples([(1,2),(3,4),(5,6)]) == 1\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     group_tuples([(1,1),(2,2),(3,3),(1,2),(1,3)]) == (1, 1)\nassert     group_tuples([(1,1),(2,2),(3,3),(1,2),(1,3),(2,3)]) == (1, 1)\nassert     group_tuples([(1,1),(2,2),(3,3),(1,2),(1,3),(2,3),(3,3)]) == (1, 1)\nassert     group_tuples([(1,1),(2,2),(3,3),(4,4),(1,2),(1,3),(2,3),(3,3)]) == (1, 1)\nassert     group_tuples([(1,1),(2,2),(3,3),(1,2),(1,3),(2,3),(3,3),(4,4)]) == (1, 1)\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     group_tuples([(1,2),(3,4),(5,6),(7,8)]) ==     ((1, 2), (3, 4), (5, 6), (7, 8)) \nassert     group_tuples([(1,2),(3,4),(5,6),(7,8),(9,10)]) ==     ((1, 2), (3, 4), (5, 6), (7, 8), (9, 10))\nassert     group_tuples([(1,2),(3,4),(5,6),(7,8),(9,10),(11,12)]) ==     ((1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12))\nassert     group_tuples([(1,2),(3,4),(5,6),(7,8),(9,10),(11,12),(13,14)]) ==     ((1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14))\n\ndef group_tuples(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    pass\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     group_tuples([(1,2),(2,3),(3,4),(4,5)]) == 1, \"First\"\nassert     group_tuples([(2,3),(2,3),(2,3),(2,3)]) == 2, \"Second\"\nassert     group_tuples([(1,2),(2,3),(3,4),(4,5)]) == 3, \"Third\"\nassert     group_tuples([(3,4),(3,4),(3,4),(3,4)]) == 4, \"Fourth\"\nassert     group_tuples([(3,4),(3,4),(3,4),(3,4)]) == 5, \"Fifth\"\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     group_tuples([(1, 2, 4), (1, 2, 4), (1, 2, 4)]) == [(1, 2, 4)]\nassert     group_tuples([(2, 2, 4), (2, 2, 4), (2, 2, 4)]) == [(2, 2, 4)]\nassert     group_tuples([(2, 3, 4), (3, 3, 4), (2, 3, 4)]) == []\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     group_tuples([(10, 20), (10, 20), (30, 40), (50, 60)]) == (10, 10), '1'\nassert     group_tuples([(10, 20), (10, 20), (30, 40), (50, 60), (10, 20)]) == (10, 30), '2'\nassert     group_tuples([(10, 20), (10, 20), (30, 40), (50, 60), (10, 20), (10, 20)]) == (10, 10), '3'\nassert     group_tuples([(10, 20), (10, 20), (30, 40), (50, 60), (10, 20), (10, 20)]) == (10, 10), '4'\nassert     group_tuples([(10, 20), (10, 20), (30, 40), (50, 60), (10, 20), (10, 20)]) == (10, 10), '5'\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Find_Max([1,1,2,2,3,3]) == 2\nassert     Find_Max([1,1,2,2,3,3,5,5]) == 3\nassert     Find_Max([1,2,2,2,3,3]) == 2\nassert     Find_Max([1,2,2,2,3]) == 2\nassert     Find_Max([1,1,2,2]) == 2\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     Find_Max([1,2,3,4,5]) == 5, \"expected: 5\"\nassert     Find_Max([1,2,3,4,5,6]) == 6, \"expected: 6\"\nassert     Find_Max([1,2,3,4,5,6,7,8,9]) == 9, \"expected: 9\"\nassert     Find_Max([1,2,3,4,5,6,7,8,9,10,11]) == 11, \"expected: 11\"\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Find_Max([1,2,3,4]) == 3\nassert     Find_Max([2,2,3,4]) == 3\nassert     Find_Max([2,2,3,4,5]) == 5\nassert     Find_Max([]) == None\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Find_Max([\"apple\", \"banana\", \"cherry\"]) == \"banana\"\nassert     Find_Max([\"apple\", \"apple\", \"apple\"]) == \"apple\"\nassert     Find_Max([]) == None\n\ndef Find_Min(lst):\n    '''\n    Write a python function to find the element of a list having minimum length.\n    '''\n    pass\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Find_Max([]) == None, 'find_Max: empty list'\nassert     Find_Max([1, 2, 3]) == 3, 'find_Max: max length'\nassert     Find_Max([1, 3, 4]) == 4, 'find_Max: max length'\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Find_Max([\"Python\", \"NLP\", \"ML\"]) ==     \"ML\", \n\"Wrong output, check your code\"\nassert     Find_Max([\"Python\", \"NLP\", \"ML\", \"ML\"]) ==     \"ML\", \n\"Wrong output, check your code\"\nassert     Find_Max([\"Python\", \"NLP\", \"ML\", \"ML\", \"ML\", \"ML\"]) ==     \"ML\", \n\"Wrong output, check your code\"\nassert     Find_Max([\"Python\", \"NLP\", \"ML\"]) ==     \"ML\", \n\"Wrong output, check your code\"\nassert     Find_Max([\"Python\", \"NLP\"]) ==     \"NLP\", \n\"Wrong output, check your code\"\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(\"check Find_Max is correct\")\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     round_and_sum([1.25, 2.15, 3.1, 4.5]) == 120\nassert     round_and_sum([1.7, 2.2, 3.2, 4.5]) == 120\nassert     round_and_sum([2.0, 2.5, 2.5, 4.5]) == 100\nassert     round_and_sum([1.5, 2.5, 3.5, 4.5]) == 120\nassert     round_and_sum([1.5, 1.5, 1.5, 1.5]) == 120\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     round_and_sum([0.25, 1.2, 2.3]) ==     1.2, 'Should round numbers and add the total'\nassert     round_and_sum([1.2, 2.3, 3.4, 4.5, 5.6]) ==     13.8, 'Should round numbers and add the total'\nassert     round_and_sum([1.2, 2.3, 3.4]) ==     9.0, 'Should round numbers and add the total'\nassert     round_and_sum([0.25]) ==     0.25, 'Should round numbers and add the total'\nassert     round_and_sum([]) ==     0.0, 'Should round numbers and add the total'\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     round_and_sum([1.5, 2.0, 3.3, 4.5]) == 15.0\nassert     round_and_sum([1.0, 1.5, 1.9]) == 3.0\nassert     round_and_sum([2.3, 4.3, 3.1, 2.1, 5.1]) == 19.3\nassert     round_and_sum([]) == 0\nassert     round_and_sum([-2.0, -3.3, -4.5]) == -30.0\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     round_and_sum([1.3, 2.3, 3.4, 4.4]) == 13.7\nassert     round_and_sum([1.3, 2.3, 3.4, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9]) == 30.0\nassert round_and_sum([2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]) == 16.0\nassert round_and_sum([2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]) == 16.0\nassert round_and_sum([-2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0]) == -16.0\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     round_and_sum([1.2,2.3,3.4]) == 20\nassert     round_and_sum([3.4, 3.5, 3.7, 4.0, 4.1]) == 54\nassert     round_and_sum([6.7, 6.8, 6.9, 7.0, 7.1]) == 72\nassert round_and_sum([1.7,1.8,1.9]) == 21\nassert round_and_sum([1.5,2.0,2.5]) == 35\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     round_and_sum([1, 2, 3, 4]) == 24\nassert round_and_sum([1.3, 2.5, -8, 0.5]) == 5.5\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef print_right_aligned_with_spaces(list1):\n    '''\n    Write a function that prints all elements of a list on one line, separated by exactly one space. For example, when calling the function like print_right_aligned_with_spaces([\"some\", \"elements\"]), it should print the following:\n    some  elements\n    '''\n    pass\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nround_and_sum([0.897, 0.898, 0.843, 0.87, 0.865, 0.87, 0.86, 0.87, 0.854, 0.86, 0.874, 0.882, 0.892]) == 2472.0"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nround_and_sum([1.1, 2.1, 3.1])\nassert round_and_sum([1.0, 2.0, 3.0])\nround_and_sum([1.1, 2.2, 3.3])\nround_and_sum([1.1, 2.1, 3.3])\n\n'''\nBuild a function that takes in a list and returns the smallest and largest elements in the list.\n\nsmallest_and_largest(nums)\nsmallest_and_largest([1,5,3,2,4,7,4,5])\n\n'''"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef write_fasta(record):\n    '''\n    Write fasta files.\n\n    record : dictionary\n        dictionary with record id and sequence\n    '''\n    pass\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     cube_Sum(1) == 1\nassert     cube_Sum(2) == 2\nassert     cube_Sum(4) == 8\nassert     cube_Sum(20) == 243\nassert cube_Sum(25) == 437\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     cube_Sum(5) == 55\nassert     cube_Sum(6) == 66\nassert     cube_Sum(100) == 6690\nassert     cube_Sum(10000) == 66909965\nassert     cube_Sum(10000001) == 669099652\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef square_Sum(n): \n    '''\n    Write a python function to find the square sum of first n even natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ncube_Sum(2) == 8\ncube_Sum(3) == 27\ncube_Sum(4) == 64\ncube_Sum(5) == 125"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     cube_Sum(10)==55,    \"Function has some errors\"\nassert     cube_Sum(20)==8720,    \"Function has some errors\"\nassert     cube_Sum(0)==0,    \"Function has some errors\"\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ncube_Sum(6) == 232\nprint('Test passed')\n\nprint(\"\\n\\n\")\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ncube_Sum(4) == 12\nassert cube_Sum(5) == 29\nassert cube_Sum(8) == 64\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ncube_Sum(7) == 0\ncube_Sum(20) == 2600\ncube_Sum(1) == 1\ncube_Sum(-1) == 0\ncube_Sum(0) == 0\ncube_Sum(2) == 8\ncube_Sum(8) == 504\ncube_Sum(10) == 462\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     concatenate_tuple(('Hi', 'how', 'are', 'you?')) == 'Hi\\how\\nare\\nyou?', 'Concatenate using a delimiter'\nassert     concatenate_tuple(('Hi', 'how', 'are', 'you?')) == 'Hi\\nhow\\nare\\nyou?', 'Concatenate using a delimiter'\nassert     concatenate_tuple(('Hi', 'how', 'are', 'you?')) == 'Hi\\nhow\\nare\\nyou?', 'Concatenate using a delimiter'\nassert     concatenate_tuple(('Hi', 'how', 'are', 'you?')) == 'Hi\\nhow\\nare\\nyou?', 'Concatenate using a delimiter'\nassert     concatenate_tuple(('Hi', 'how', 'are', 'you?')) == 'Hi\\nhow\\nare\\nyou?', 'Concatenate using a delimiter'\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     concatenate_tuple((1,2)) == '1 2', 'incorrect'\nassert     concatenate_tuple((10,30)) == '10 30', 'incorrect'\nassert     concatenate_tuple((100,200)) == '100 200', 'incorrect'\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef concatenate_string(string):\n    '''\n    Write a function to concatenate the string in which delimiter is \n    provided by the user.\n    '''\n    pass\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     concatenate_tuple(test_tup) == 'e,e,e,e,e,e,e,e,e,e,e,e'\nprint('Test case 1 passed!')\n\n'''\n    Write a function to filter only even numbers from a tuple.\n    \n    Example:\n        Input = (2, 3, 4, 5, 6, 7, 8, 9, 10)\n        Output = (2, 4, 6, 8, 10)\n'''"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     concatenate_tuple((1,2,3,4,5,6)) == \"1,2,3,4,5,6\"\nassert     concatenate_tuple((1,2,3,4,5,6,'a','b','c')) == \"1,2,3,4,5,6,'a','b','c'\"\n\n\ndef flatten_tuple(tup):\n    '''\n    Write a function to flatten a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     concatenate_tuple((1,2,3,4,5)) == '1,2,3,4,5', 'Test 1 Failed'\nassert     concatenate_tuple((10,11,12,13,14)) == '10,11,12,13,14', 'Test 2 Failed'\nassert     concatenate_tuple(('a','b','c','d')) == 'a,b,c,d', 'Test 3 Failed'\nassert     concatenate_tuple((1,2,'3',4)) == '1,2,3,4', 'Test 4 Failed'\nassert     concatenate_tuple((2,'3',4,'5')) == '2,3,4,5', 'Test 5 Failed'\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert concatenate_tuple((\"a\", \"b\", \"c\")) == \"a,b,c\"\nassert concatenate_tuple((\"c\", \"b\", \"a\")) == \"c,b,a\"\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     concatenate_tuple(('apple', 'banana', 'cherry')) == 'applebananachry', 'It is not concatenating'\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     concatenate_tuple(test_tup) == 'a:1,b:2,c:3,d:4'\nassert     concatenate_tuple(test_tup) == 'a:1,b:2,c:3,d:4'\nassert     concatenate_tuple(test_tup) == 'a:1,b:2,c:3,d:4'\nassert     concatenate_tuple(test_tup) == 'a:1,b:2,c:3,d:4'\nassert     concatenate_tuple(test_tup) == 'a:1,b:2,c:3,d:4'\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     concatenate_tuple(('one', 'two', 'three')) == 'onetwothree', \"Your code is wrong!\"\nassert     concatenate_tuple(('one', 'two', 'three')) == 'onetwothree', \"Your code is wrong!\"\nassert     concatenate_tuple(('one', 'two', 'three')) == 'oneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneoneonenoweightoneoneoneoneoneoneoneoneoneonewoneonenumberofthatonesomeoneoneoneonetwooneoneoneoneoneoneoneonemanyonesameoneoneoneoneoneoneoneone must be of a business here is it.  \n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Average_Of_Cube(3) == 8, \"incorrect result\"\nassert     find_Average_Of_Cube(5) == 11, \"incorrect result\"\nassert     find_Average_Of_Cube(0) == 0, \"incorrect result\"\nassert     find_Average_Of_Cube(1) == 1, \"incorrect result\"\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef find_Average_Of_Cube_List(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_Average_Of_Cube(0) == 0, \"Pass\"\nassert     find_Average_Of_Cube(1) == 1, \"Pass\"\nassert     find_Average_Of_Cube(2) == 1, \"Pass\"\nassert     find_Average_Of_Cube(3) == 1, \"Pass\"\nassert     find_Average_Of_Cube(4) == 2, \"Pass\"\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Average_Of_Cube(2) == 1\nassert     find_Average_Of_Cube(3) == 1.3333333333333333\nassert     find_Average_Of_Cube(4) == 1.25\nassert     find_Average_Of_Cube(5) == 1.2\nassert     find_Average_Of_Cube(6) == 1.16666666666666666\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nfind_Average_Of_Cube(4)==10.0\nfind_Average_Of_Cube(3)==8.333333333333334\nfind_Average_Of_Cube(6)==36.666666666666664\nfind_Average_Of_Cube(7)==1428571428571429\nfind_Average_Of_Cube(8)==40625\nfind_Average_Of_Cube(9)==40625"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert find_Average_Of_Cube(5) == 1\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_Average_Of_Cube(2) == 1, \"find_Average_Of_Cube: Wrong Answer\"\nassert     find_Average_Of_Cube(3) == 1.8, \"find_Average_Of_Cube: Wrong Answer\"\nassert     find_Average_Of_Cube(4) == 2.16, \"find_Average_Of_Cube: Wrong Answer\"\nassert     find_Average_Of_Cube(5) == 2.26, \"find_Average_Of_Cube: Wrong Answer\"\nassert     find_Average_Of_Cube(6) == 2.45, \"find_Average_Of_Cube: Wrong Answer\"\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Average_Of_Cube(3) == 7.5\nassert     find_Average_Of_Cube(4) == 21\nassert     find_Average_Of_Cube(5) == 34.5\nassert     find_Average_Of_Cube(6) == 81\nassert     find_Average_Of_Cube(7) == 141\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef extract_all_index_elements(test_tuple):\n    '''\n    Write a function to extract all the indexes from each string in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef print_checkpoint(test_tuple):\n    '''\n    Write a function to convert tuple to string and then print the string in a specific format.\n    '''\n    pass\n\nassert \n\ndef double_checkpoint(test_tuple):\n    '''\n    Write a function to convert tuple to string and then print the string in a specific format.\n    '''\n    pass\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_rear(('e1','re', 'ac', 'ci', 'ef')) == ('ef', )\nassert     extract_rear(('e1','re', 'ac', 'ci', 'ef', 'ea')) == ('ea', )\nassert     extract_rear(('e1','re', 'ac', 'ci', 'ef', 'ea', 'b', 'ad', 'd')) == ('ea', )"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_rear(('ab', 'cd', 'ef')) == ('ef', 'cd', 'ab')\nassert     extract_rear(('a', 'b', 'c')) == ('b', 'c', 'a')\nassert     extract_rear(('abc', 'def')) == ('def', 'abc')\n\ndef extract_all_rear(test_tuple):\n    '''\n    Write a function to extract all rear index elements of each string in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_rear(('p', 'q', 'r','s', 't', 'u')) == ('p', 'q', 'r','s', 't', 'u')\nassert     extract_rear(('p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c')) == ('p', 'q', 'r','s', 't', 'u')\nassert     extract_rear(('p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z')) == ('p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z')\nassert     extract_rear(('p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c')) == ('p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c')\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_rear(('a', 'b', 'c', 'd')) == (4,)\nassert     extract_rear(('a', 'b', 'c', 'd', 'e')) == (4,)\nassert     extract_rear(('a', 'b', 'c', 'd', 'e', 'f')) == (4,)\nassert     extract_rear(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')) == (4, 7)\nassert     extract_rear(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')) == (4, 7, 8)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_rear(('A12', 'B2', 'C22', 'D2', 'E3', 'F3', 'G4', 'H4', 'I4')) == ('D2', 'E3', 'F3', 'G4', 'H4', 'I4')\nassert     extract_rear(('A12', 'B2', 'C22', 'D2', 'E3', 'F3', 'G4', 'H4', 'I4')) == ('D2', 'E3', 'F3', 'G4', 'H4', 'I4')\nassert     extract_rear(('A12', 'B2', 'C22', 'D2', 'E3', 'F3', 'G4', 'H4', 'I4', 'J4')) == ('D2', 'E3', 'F3', 'G4', 'H4', 'I4', 'J4')\nassert     extract_rear(('A12', 'B2', 'C22', 'D2', 'E3', 'F3', 'G4', 'H4', 'I4', 'J4', 'K4')) == ('D2', 'E3', 'F3', 'G4', 'H4', 'I4', 'J4', 'K4')\nassert     extract_rear(('A12', 'B2', 'C22', 'D2', 'E3', 'F3', 'G4', 'H4', 'I4', 'J4', 'K4', 'L4')) == ('D2', 'E3', 'F3', 'G4', 'H4', 'I4', 'J4', 'K4', 'L4')\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_rear(('apple', 'banana', 'cherry')) == ('cherry', 'banana')     , 'Tuple'\nassert     extract_rear(('grapes','mango', 'kiwi')) == ('kiwi','mango')     , 'Tuple'\nassert     extract_rear(('apple', 'banana', 'cherry','mango', 'kiwi', 'grapes')) == ('cherry', 'banana','mango')     , 'Tuple'\nassert     extract_rear(('a', 'b', 'c', 'd')) == ('c', 'd')     , 'Tuple'\nassert     extract_rear(('a', 'b', 'c', 'd', 'e')) == ('c', 'd', 'e')     , 'Tuple'\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_rear(('abc', 'xyz', 'abc', 'def')) == ('xyz', 'abc', 'def')\nassert     extract_rear(('xyz', 'abc', 'abc', 'def')) == ('xyz', 'abc', 'abc')\nassert     extract_rear(('abc', 'xyz', 'abc', 'def')) == ('xyz', 'abc', 'abc')\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_rear((\"abcdef\", \"x\", \"y\", \"z\", \"abcdef\")) == (\"z\", \"abcdef\")\nassert     extract_rear((\"abcdef\", \"x\", \"y\", \"z\", \"abcdef\")) == (\"abcdef\",)\nassert     extract_rear((\"\", \"\", \"\", \"\", \"\")) == (\"\", \"\")"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_element_in_list([1,2,2,4,4,5], 2) == 1\nassert     count_element_in_list([1,2,2,4,4,5], 5) == 0\n\ndef count_even_sublists(l): \n    '''\n    Write a function to count the number of even sublists.\n    '''\n    pass\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef find_min_max_element_in_list(list1): \n    '''\n    Write a function to find minimum and maximum element in a list.\n    '''\n    pass\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_element_in_list([1, 2, 3, 4, 5], 1) == 3\nassert     count_element_in_list([1, 2, 3, 4, 5], 2) == 1\nassert     count_element_in_list([1, 2, 3, 4, 5], 5) == 0\nassert     count_element_in_list([1, 2, 3, 4, 5], 1.1) == 0\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_element_in_list([1, 2, 3], 3) == 0\nassert     count_element_in_list([1, 2, 3], 1) == 1\nassert     count_element_in_list([1, 2, 3], 2) == 2\nassert     count_element_in_list([1, 2, 3], 3) == 1\nassert     count_element_in_list([1, 2, 3], 4) == 1\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    pass"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_element_in_list([1,2,3],2) == 1 \nassert     count_element_in_list([1,2,3],4) == 0\n\ndef count_numbers_in_list(list1): \n    '''\n    Write a function to count the number of numbers in a list.\n    '''\n    pass\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     filter_oddnumbers([1,2,3,4,5,6,7,8,9]) == [1,3,5,7,9]\nassert     filter_oddnumbers([2,2,2,2,2,2,2,2,2]) == [2,2,2,2,2]\nassert     filter_oddnumbers([1,2,3,4,5,6,7,8,9]) == [1,3,5,7,9]\nassert     filter_oddnumbers([]) == []\nassert     filter_oddnumbers(None) == []\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     filter_oddnumbers([1,2,3,4,5])     ==    [1,3,5]\nassert     filter_oddnumbers([2,3,4,5])     ==    [2,4,5]\nassert     filter_oddnumbers([1,2,3,4,5,6])     ==    [1,3,5,6]\nassert     filter_oddnumbers([1,2,3,4,5,6,7]) ==     [1,3,5,7]\nassert     filter_oddnumbers([-1,-2,-3,-4,-5])     ==     [-1,-3,-5]\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7, 9]\nassert     filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9, 10]\nassert     filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 3, 5, 7, 9, 11]\nassert     filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [1, 3, 5, 7, 9, 11, 12]\nassert     filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == [1, 3, 5, 7, 9, 11, 13]\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     filter_oddnumbers([1, 2, 3, 4, 5]) == [1, 3, 5], 'FAILED: filter_oddnumbers([1, 2, 3, 4, 5]) == [1, 3, 5]'\nassert     filter_oddnumbers([4, 5, 6, 7, 8]) == [], 'FAILED: filter_oddnumbers([4, 5, 6, 7, 8]) == []'\nassert     filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 3, 5, 7], 'FAILED: filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 3, 5, 7]'\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     filter_oddnumbers([1,2,3,4,5,6]) ==[1,3,5]\nassert     filter_oddnumbers([3,5,9]) ==[3,5,9]\nassert     filter_oddnumbers([10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100]) == [10,15,25,65,100"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert filter_oddnumbers([1, 2, 3, 4, 5, 6]) == [3, 5, 7, 9]\nassert filter_oddnumbers([9, 9, 9, 1, 2]) == []\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6]) == [3, 5, 7, 9]\nprint('PASSED')\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     filter_oddnumbers( [1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7, 9]\nassert filter_oddnumbers([9, 1, 4, 7, 8, 0, 2, 3, 5, 6, 7]) == [9, 1, 7, 3, 5, 0, 2, 8, 6, 4]\nassert filter_oddnumbers(['1', '2', '3', '4', '5', '6', '7', '8', '9']) == ['1', '3', '5', '7', '9']\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     filter_oddnumbers([2,3,4,5,6,7,8,9]) ==     [3,5,7,9]\nassert     filter_oddnumbers([1,2,3,4,5,6,7,8,9]) ==     [1,3,5,7,9]\nassert     filter_oddnumbers([2,3,4,5,6,7,8,9,1]) ==     [3,5,7,9]\nassert     filter_oddnumbers([9,8,7,6,5,4,3,2,1]) ==     [9,7,5,3,1]\nassert     filter_oddnumbers([9,8,7,6,5,4,3,2,1,0]) ==     [9,7,5,3,1]\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     change_date_format(\"1903-05-30\") == \"30-05-1903\"\nassert    change_date_format(\"1-1-1\") == \"31-01-2001\"\nassert change_date_format(\"2015-4-4\") == \"4-4-2015\"\nprint(\"Success\")\n\ndef check_ip(s):\n    pattern = r\"\\b(1?\\d{1,2}|2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.(1?\\d{1,2}|2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.(1?\\d{1,2}|2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.(1?\\d{1,2}|2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\b\"\n    return bool(re.match(pattern, s))\n\n\nprint(check_ip(\"192.168.1.1\")) # True\nprint(check_ip(\"192.168.1.1.2\")) # False\nprint(check_ip(\"192.168.1.1.2.3\")) # False\nprint(check_ip(\"192.168.1.1.2.3.4\")) # True\nprint(check_ip(\"192.168.1.1.2.3.4.5\")) # True\nprint(check_ip(\"192.168.1.1.2.3.4.5.6\")) # False\nprint(check_ip(\"192.168.1.1.2.3.4.5.6.7\")) # False\nprint(check_ip(\"192.168.1.1.2.3.4.5.6.7.8\")) # False\nprint(check_ip(\"192.168.1.1.2.3.4.5.6.7.8.9\")) # False\nprint(check_ip(\"192.168.1.1.2.3.4.5.6.7.8.9.10\")) # False\nprint(check_ip(\"192.168.1.1.2.3.4.5.6.7.8.9.10.11\")) # True\nprint(check_ip(\"192.168.1.1.2.3.4.5.6.7.8.9.10.11.12\")) # False\nprint(check_ip(\"192.168.1.1.2.3.4.5.6.7.8.9.10.11.12.13\")) # True\nprint(check_ip(\"192.168.1.1.2.3.4.5.6.7.8.9.10.11.12.13.14\")) # False\nprint(check_ip(\"192.168.1.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15\")) # False\nprint(check_ip(\"192.168.1.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16\")) # True\nprint(check_ip(\"192.168.1.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17\")) # False\nprint(check_ip(\"192.168.1.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18\")) # False\nprint(check_ip(\"192.168.1.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18.19\")) # False\nprint(check_ip(\"192.168.1.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18.19.20\")) # False\nprint(check_ip(\"192.168.1.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18.19.20.21\")) # False\nprint(check_ip(\"192.168.1.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18.19.20.21.22\")) # False\nprint(check_ip(\"192.168.1.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18.19.20.21.22.23\")) # False\nprint(check_ip(\"192.168.1.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18.19.20.21.22.23.24\")) # False\nprint(check_ip(\"192.168.1.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18.19.20.21.22.23.24.25\")) # True\nprint(check_ip(\"192.168.1.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18.19.20.21.22.23.24.25.26\")) # False\nprint(check_ip(\"192.168.1.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18.19.20.21.22.23.24.25.26.27\")) # False\nprint(check_ip(\"192.168.1.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18.19.20.21.22.23.24.25.26.27.28\")) # True\nprint(check_ip(\"192.168.1.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18.19.20.21.22.23.24.25.26.27.28.29\")) # False\nprint(check_ip(\"192.168.1.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18.19.20.21.22.23.24.25.26.27.28.29.30\")) # False\nprint(check_ip(\"192.168.1.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18.19.20.21.22.23.24.25.26.27.28.29.30.31\")) # True\nprint(check_ip(\"192.168.1.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18.19.20.21.22.23.24.25.26.27.28.29.30.31.32\")) # False\nprint(check_ip(\"192.168.1.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18.19.20.21.22.23.24.25.26.27.28.29.30.31.32.33\")) # True\nprint(check_ip(\"192.168.1.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18.19.20.21.22.23.24.25.26.27.28.29.30.31.32.33.34\")) # False\nprint(check_ip(\"192.168.1.1.2.3.4.5.6.7.8"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     change_date_format('12-09-20') == '21-09-2020'\nassert     change_date_format('21-08-09') == '20-08-20'\nassert     change_date_format('15-02-04') == '04-02-15'\nassert     change_date_format('19-02-13') == '13-02-19'\nassert     change_date_format('12-10-20') == '20-10-12'\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     change_date_format(\"12-06-20\") == \"01-06-2020\"\nassert     change_date_format(\"12-06-2020\") == \"01-06-2020\"\nassert     change_date_format(\"01-06-2020\") == \"01-06-2020\"\nassert     change_date_format(\"2020-01-06\") == \"01-06-2020\"\nassert     change_date_format(\"2020-01-01\") == \"01-01-2020\"\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     change_date_format('2020-03-15') == '15-03-2020'\nassert     change_date_format('2020-05-21') == '21-05-2020'\n\nprint('If the date is in yyyy-mm-dd format, convert it to dd-mm-yyyy format.')\nprint('Note: Use regex to find the groups of the pattern.')\n\ndt = input('Enter a date in yyyy-mm-dd format: ')\n\nwhile True:\n    if re.search('^[0-9]{4}-[0-9]{2}-[0-9]{2}$', dt):\n        print(dt, '->', change_date_format(dt))\n        break\n    else:\n        dt = input('Enter a valid date in yyyy-mm-dd format: ')\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     change_date_format('2019-10-25') == '25-10-2019', \"change_date_format(\u20182019-10-25\u2019) == '25-10-2019'\"\n\nassert     change_date_format('3-10-2019') == '10-03-2019', \"change_date_format(\u20183-10-2019\u2019) == '10-03-2019'\"\n\nassert     change_date_format('13-06-2019') == '06-13-2019', \"change_date_format(\u201813-06-2019\u2019) == '06-13-2019'\"\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(change_date_format('2020-09-10'))\nassert change_date_format('2020/10/10') == '10/10/2020'\nassert change_date_format('2020/09/10') == '10/09/2020'\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef day_diff(date1,date2):\n    '''\n    Write a function to calculate the number of days between two dates.\n    '''\n    pass\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert change_date_format(\"2016-05-29\") == \"29-05-2016\"\nassert change_date_format(\"2016-06-28\") == \"28-06-2016\"\nassert change_date_format(\"2016-12-03\") == \"03-12-2016\"\nassert change_date_format(\"2016-02-03\") == \"03-02-2016\"\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     change_date_format(\"01-01-2021\") == \"01-01-2021\"\nassert     change_date_format(\"01/01/2021\") == \"01-01-2021\"\nassert     change_date_format(\"1-01-2021\") == \"01-01-2021\"\nassert     change_date_format(\"1-01-2021\") == \"01-01-2021\"\nassert     change_date_format(\"1-01-2021\") == \"01-01-2021\"\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n\ndef shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n\n\nimport random\n\ndef shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n\n\ndef shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     shell_sort([4,2,6,3,9,8,7]) == True\nassert     shell_sort([1,2,3,4,5]) == False\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nshell_sort(test_list) == sorted(test_list)"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef and_list(test_list1, test_list2):\n    '''\n    Write a function to extract the elementwise and list from the given two lists.\n    '''\n    pass\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     and_tuples((1,2,3,4), (5,6,7,8)) == ((1, 2, 3, 4), (5, 6, 7, 8))\nassert not     and_tuples((1,2,3,4), (5,6,7,8)) == ((1, 2, 3, 4), (5, 6, 7, 8))\nassert     and_tuples((1,2), (3,4)) == ((1, 2), (3, 4))\nassert     and_tuples((1,2), (3,4)) == ((1, 2), (3, 4))\nassert     and_tuples((1,2,3,4), (5,6,7,8)) == ((1, 2, 3, 4), (5, 6, 7, 8))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     and_tuples((1, 2, 3), (4, 5, 6)) == (4, 5, 6), \"and_tuple((1, 2, 3), (4, 5, 6)) is incorrect\"\nassert     and_tuples((4, 5, 6), (1, 2, 3)) == (1, 2, 3), \"and_tuple((4, 5, 6), (1, 2, 3)) is incorrect\"\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     and_tuples((1,2,3),(2,3,4)) == ((1, 2), (2, 3))\nassert     and_tuples((1,2,3),(4,5,6)) == ((1, 2), (4, 5))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     and_tuples((1,2,3), (5,4,3)) == (1,2,3,5,4,3)\nassert     and_tuples((1,2,3), (4,5,6)) == (1,2,3,4,5,6)\n\ndef element_wise_and(test_list1, test_list2):\n    '''\n    Write a function to elementwise and the two lists.\n    '''\n    pass\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     and_tuples((1,2,3,4), (1,2,3,4)) == ((1,2,3,4), (1,2,3,4))\nassert     and_tuples((1,2), (3,4)) == ((1,2), (3,4))\nassert     and_tuples((1), (2,3,4,5)) == ((1), (2,3,4,5))\nassert     and_tuples((1), ()) == ((1), ())\nassert     and_tuples((), ()) == ((), ())\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     and_tuples((2,4),(3,9)) == ((2,4),(3,9))\nassert     and_tuples((2,4),(4,3)) == ((2,4),(3,4))\nassert     and_tuples((2,4),(7,8)) == ((2,4),(7,8))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ntest_tup1 = (1,2,3,4)\ntest_tup2 = (5,6,7,8)\ntest_tup3 = (9,10,11,12)\n\nand_tup = and_tuples(test_tup1, test_tup2)\nassert and_tup == (6, 8, 10, 12)\n\nand_tup = and_tuples(test_tup1, test_tup3)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    and_tuples((1,2),(1,1)) == (1, 2)\n    and_tuples((5,2),(5,5)) == (5, 2)\n    and_tuples((3,1),(1,1)) == (3, 1)\n    and_tuples((1,1),(0,0)) == (0, 0)\nassert not and_tuples((5,2),(5,4))\nassert not and_tuples((3,1),(2,1))\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     parabola_directrix(0, 0, 0) == (0, 0)\nassert     parabola_directrix(10, 0, 0) == (9, 0)\nassert     parabola_directrix(10, 1, 0) == (9, 1)\nassert     parabola_directrix(10, -1, 0) == (9, -1)\nassert     parabola_directrix(10, 0, 10) == (9, 1)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     parabola_directrix(2, 0, 1) == 0\nassert     parabola_directrix(0, 3, 0) == 0\nassert     parabola_directrix(-2, 0, 1) == 0\nassert     parabola_directrix(-2, 0, -1) == 0\nassert     parabola_directrix(0, -3, 0) == 0\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     parabola_directrix(1,0,1) == (0,0)\nassert     parabola_directrix(1,1,1) == (0,0)\nassert     parabola_directrix(2,0,1) == (1,0)\nassert     parabola_directrix(2,1,1) == (1,0)\nassert     parabola_directrix(3,0,1) == (1,1)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     parabola_directrix(1, 1, -1) == (1, 1), 'Wrong output for parabola_directrix(-1, 1, -1)'\nassert     parabola_directrix(1, 0, 0) == (1, 0), 'Wrong output for parabola_directrix(1, 0, 0)'\nassert     parabola_directrix(1, 1, -1) == (1, 0), 'Wrong output for parabola_directrix(1, 1, -1)'\nassert     parabola_directrix(-1, 1, -1) == (-1, 0), 'Wrong output for parabola_directrix(-1, 1, -1)'\nassert     parabola_directrix(-1, 0, 0) == (-1, 0), 'Wrong output for parabola_directrix(-1, 0, 0)'\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     parabola_directrix(2, 1, 0) == 'c'\nassert     parabola_directrix(2, 2, 0) == 'b'\nassert     parabola_directrix(1, 1, 1) == 'a'\nassert     parabola_directrix(2, 1, -1) == 'c'\nassert     parabola_directrix(0, 0, 1) == 'c'\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef parabola_gradient(a, b, c): \n    '''\n    Write a function to find the gradient of a parabola.\n    '''\n    pass\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     parabola_directrix(1, 2, 3) == (-3, 2)\nassert     parabola_directrix(2, 3, 4) == (2, -2)\nassert     parabola_directrix(3, 4, 5) == (3, -3)\nassert     parabola_directrix(4, 5, 6) == (2, -4)\nassert     parabola_directrix(5, 6, 7) == (4, -5)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert parabola_directrix(2, 1, -1) == (1, 1)\nassert parabola_directrix(1, -1, -2) == (-1, 1)\nassert parabola_directrix(-2, 1, -1) == (1, -1)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     parabola_directrix(2, 1, 3) == 'y = -2x + 1'\nassert     parabola_directrix(1, 2, 1) == 'y = 2x - 1'\nassert     parabola_directrix(1, 1, 1) == 'y = 2x'\nassert     parabola_directrix(-1, 1, 1) == 'y = 2x - 1'\nassert     parabola_directrix(2, -2, 1) == 'y = 2x + 2'\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     common_element([1, 2, 3], [2, 3, 4]) == True\nassert     common_element([1, 2, 3], [4, 3, 2]) == False\nassert     common_element([], [2, 3, 4]) == False\nassert     common_element([], []) == True\nassert     common_element([1], [2]) == False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     common_element([1,2,3],[1,2,5]) == True\nassert     common_element([1,2,3],[1,2,3]) == True\nassert     common_element([1,2,3],[1,2,4]) == False\nassert     common_element([1,2,3,4],[1,2,4]) == True\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     common_element(['a','b','c'], ['b','c','d']) == False\nassert     common_element(['a','b','c','d'], ['b','c','d']) == True\nassert     common_element(['a','b','c','d','e'], ['b','c','d']) == True\nassert     common_element(['a','b','c','d','e'], ['a','b','c','d','e']) == True\nassert     common_element(['a','b','c','d','e'], ['a','b','c','d']) == False"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     common_element([1,2,3], [2,3,4]) == True\nassert     common_element([1,2,3], [3,4,5]) == False\nassert     common_element([1], [2]) == True\nassert     common_element([], [2]) == False\nassert     common_element([1,2,3], []) == False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(common_element(\n    [1,2,3,4],\n    [4,5,6,7]\n    )\n)\nassert not common_element(\n    [1,2,3,4],\n    [3,5,6,7]\n    )\nassert not common_element(\n    [1,2,3,4],\n    [1,2,3,4]\n    )\nassert not common_element(\n    [1,2,3,4],\n    [1,2,3,4,5]\n    )\nassert not common_element(\n    [1,2,3,4],\n    [1,2,3,4,5,6]\n    )\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     common_element([1,2,3], [1,2,3]) == True\nassert     common_element([1,2,3], [3,2,3]) == False\nassert     common_element([1,2,3], [1,2,3,5]) == True\nassert     common_element([1,2,3], [1,3,2]) == False\nassert     common_element([1,2,3], [1,2,5]) == False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     common_element([1,2,3], [2,3,4])\nassert     common_element([1,1,2,3], [2,3,4])\nassert not common_element([1,2,3], [2,3,4])"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     common_element([1,2,3,4],[2,4,6,8]) == True, 'Should return True'\nassert     common_element([1,2,3,4],[1,2,3,4]) == True, 'Should return True'\nassert     common_element([1,2,3,4],[1,2,3,4,5]) == False, 'Should return False'\nassert     common_element([1,2,3],[1,2,3,4]) == False, 'Should return False'\nassert     common_element([],[]) == False, 'Should return False'\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     common_element([1,2,3,4,5], [1,2,3,5,7]) == True, \"1st test case fails\"\nassert     common_element([1,2,3,4,5], [1,2,3,5]) == False, \"2nd test case fails\"\nassert     common_element([1,2,3,4], [1,2,3,5]) == False, \"3rd test case fails\"\nassert     common_element([1,2,3,5], [1,2,3,5]) == True, \"4th test case fails\"\n\nprint(\"All test cases are passed\""
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     common_element([1,2,3,4], [2,3,4]) == True\nassert common_element([1,2,3,4], [3,4]) == False\nassert common_element([1,2,3,4], [4]) == False\nassert common_element([1,2,3,4], []) == False\nassert common_element([], []) == False\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     median_trapezium(3,4,5) == 5\nassert median_trapezium(3,4,5) == 5\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     median_trapezium(10,20,30) == 15.0\nassert median_trapezium(10,20,30) == 16.0\nassert median_trapezium(10,20,30) == 20.0\nassert median_trapezium(10,20,30) == 20.0\nassert median_trapezium(10,20,30) == 20.0\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     median_trapezium(3,6,7)==4\nassert median_trapezium(4,2,5)==3\nassert median_trapezium(5,3,9)==4\n\nimport random\nimport math\n\ndef median_triangle(base1,base2,height):\n    '''\n    Write a function to find the median length of a triangle.\n    '''\n    pass\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     median_trapezium(4, 8, 12) == 7.0\nassert median_trapezium(4, 8, 12) == 4.5\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     median_trapezium(1, 1, 1) == 1\nassert     median_trapezium(2, 1, 1) == 2\nassert     median_trapezium(2, 1, 2) == 2\nassert     median_trapezium(4, 1, 2) == 2.5\nassert     median_trapezium(5, 3, 4) == 3.5\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     median_trapezium(2,3,4) == 5\nassert     median_trapezium(5,3,4) == 5\nassert     median_trapezium(8,5,4) == 7\nassert     median_trapezium(2,3,5) == 5\nassert     median_trapezium(1,2,1) == 1"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     median_trapezium(1, 2, 3) == 1.5\nassert median_trapezium(1, 2, 3) == 1.5\nassert median_trapezium(1, 2, 3) == 1.5\nassert median_trapezium(1, 2, 3) == 1.5\nassert median_trapezium(1, 2, 3) == 1.5\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     median_trapezium(1,5,5) == 3\nassert     median_trapezium(4,4,5) == 2\nassert     median_trapezium(2,3,4) == 2\nassert median_trapezium(7,3,4) == 3\nassert median_trapezium(6,6,7) == 4\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_greater([1,2,3,4,5], 3) == True\nassert     check_greater([1,2,3,4,5], 4) == False\nassert     check_greater([2,1,5,3,4], 5) == True\nassert     check_greater([1,2,3,4,5], 5) == False"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == '__main__':\n    # Test the function\n    print(\"Example:\")\n    print(check_greater([5, 1, 2, 3], 5))\n    \n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert check_greater([5, 1, 2, 3], 5) == True\n    assert check_greater([3, 7, 2, 1], 2) == False\n    "
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] < number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    check_greater(arr, number) == True\n    check_greater(arr, arr[1]) == False\n    check_greater(arr, arr[0]) == True\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_greater([4, 5, 6], 3) == True\nassert     check_greater([4, 5, 6], 4) == False\nassert     check_greater([4, 5, 6], 1) == True\nassert     check_greater([4, 5, 6], 6) == True\nassert     check_greater([4, 5, 6], 7) == True\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_greater([1,2,3,4], 10) == True\nassert     check_greater([1,2,3,4], 5) == False\nassert     check_greater([1,2,3,4], 1) == True\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert check_greater([1, 2, 3, 4, 5], 2) == True\nassert check_greater([1, 2, 3, 4, 5], 6) == False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_greater([1,2,3,4,5,6], -1) == True\nassert     check_greater([1,2,3,4,5,6], 7) == False\nassert     check_greater([1,2,3,4,5,6], 0) == True\nassert     check_greater([1,2,3,4,5,6], 5) == False\nassert     check_greater([1,2,3,4,5,6], 6) == True\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_match_one(\"a\") == False\nassert     text_match_one(\"ab\") == True\nassert     text_match_one(\"aab\") == True\nassert     text_match_one(\"b\") == False\nassert     text_match_one(\"abb\") == False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_match_one(\"a\") == False\nassert     text_match_one(\"a\") == False\nassert     text_match_one(\"ab\") == False\nassert     text_match_one(\"bb\") == True\nassert     text_match_one(\"ba\") == True\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_one(\"ab\") == True, \"ab failed\"\nassert     text_match_one(\"abab\") == True, \"abab failed\"\nassert     text_match_one(\"abaa\") == False, \"abaa failed\"\nassert     text_match_one(\"aaaab\") == False, \"aaaab failed\"\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_match_one('abab') == True, \"First correct example failed.\"\nassert     text_match_one('ab') == False, \"First correct example failed.\"\nassert     text_match_one('abbab') == False, \"First correct example failed.\"\nassert     text_match_one('abbb') == False, \"First correct example failed.\"\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has a b followed by an a.\n    '''\n    pass\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_one('') == False\nassert     text_match_one('ab') == False\nassert     text_match_one('abbb') == True\n\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more b's.\n    '''\n    pass\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_one(\"\") == False\nassert     text_match_one(\"ab\") == False\nassert     text_match_one(\"abba\") == True\nassert     text_match_one(\"abababab\") == True\n\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if text == None:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_match_one(\"aba\") == True\nassert     text_match_one(\"a\") == False\nassert     text_match_one(\"ab\") == True\nassert     text_match_one(\"abb\") == True\nassert     text_match_one(\"aab\") == True\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_match_one('ab') == False, 'Should not match this one'\nassert     text_match_one('ab') == False, 'Should not match this one'\nassert     text_match_one('ab') == False, 'Should not match this one'\nassert     text_match_one('ab') == False, 'Should not match this one'\nassert     text_match_one('ab') == False, 'Should not match this one'\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ntext_match_one('ab') == True\ntext_match_one('ab') == False\ntext_match_one('aaabbb') == True\ntext_match_one('abaa') == True\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     last_Digit(10) == 1\nassert     last_Digit(20) == 2\nassert     last_Digit(101) == 0\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert last_Digit(11) == 1\nassert last_Digit(12) == 2\nassert last_Digit(45) == 3\nassert last_Digit(999) == 9\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     last_Digit(0) == 0, \"should be zero\"\nassert     last_Digit(1) == 1, \"should be one\"\nassert     last_Digit(1234) == 3, \"should be 3\"\nassert     last_Digit(1234567890) == 4, \"should be 4\"\nassert     last_Digit(1234567890) == 4, \"should be 4\"\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     last_Digit(1000) == 9\nassert     last_Digit(1234) == 4\nassert     last_Digit(98765432) == 2\nassert     last_Digit(0) == 0\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     last_Digit(512) == 4\nassert     last_Digit(255) == 1\nassert     last_Digit(256) == 0\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     last_Digit(10)     == 0,    \"last_Digit should return 0 if the given number is 10\"\nassert     last_Digit(100)     == 1,    \"last_Digit should return 1 if the given number is 100\"\nassert     last_Digit(1020)     == 2,    \"last_Digit should return 2 if the given number is 1020\"\nassert     last_Digit(1021)     == 1,    \"last_Digit should return 1 if the given number is 1021\"\nassert     last_Digit(1023)     == 1,    \"last_Digit should return 1 if the given number is 1023\"\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef last_Digit_2(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef print_N_digits(n) :\n    '''\n    Write a python function to print the first N digits of a number.\n    '''\n    pass\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     neg_nos([2,3,-4,-6,-2,-1,-2]) == [-6,-2,-2]\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     neg_nos([1,-2,-3,-4]) == [-1,-2,-3,-4], 'testing 1 fails'\nassert     neg_nos([1,2,3,-4]) == [-1,-2,-3,4], 'testing 2 fails'\nassert     neg_nos([1,-2,3,-4]) == [-1,2,-3,4], 'testing 3 fails'\nassert     neg_nos([-1,2,-3,4]) == [-1,2,-3,-4], 'testing 4 fails'\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     neg_nos([1, -2, 3, -4]) == [-1, -3, -4]\nassert     neg_nos([1, 2, 3, 4]) == [-1, -3, -4]\nassert     neg_nos([]) == []\nassert     neg_nos([-2, -5, -8]) == [-2, -5, -8]\nassert     neg_nos([-1, -1, -1, -1]) == [-1, -1, -1, -1]\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nneg_nos([-1, 2, -3, 4]) == [-1, -3, -4, -2]\nneg_nos([-1, -2, -3, -4]) == [-1, -2, -3, -4]\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nneg_nos([1, -2, -3, 4, 5]) == [-1, -2, -3, -4, -5]\nprint(\"You passed the test\")\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     neg_nos([1, -2, 3, -4, 5]) == [-1, -2, -3, -4, -5], \"neg_nos should return a list\"\nassert     neg_nos([0, 0, 0, 0, 0, 0]) == [-0, -0, -0, -0, -0, -0], \"neg_nos should return a list\"\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nneg_nos([]) == []\nassert neg_nos([-4, 3, -1, 5]) == [-4, -1, 5]\nassert neg_nos([-4, 3, -1, -5, -6, 7, -8, 9]) == [-4, -1, -5, -6, -8, -9]\nassert neg_nos([-4, 3, -1, -5, -6, 7, -8, 9, -10]) == [-10, -11, -12, -13, -14, -15, -16, -17, -18]\nassert neg_nos([-4, 3, -1, -5, -6, 7, -8, 9, -10, 11]) == [-10, -11, -12, -13, -14, -15, -16, -17, -18, -19]\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint (\"Pass\" if  (1==1) else \"Fail\")\nprint (\"Pass\" if  (0==1) else \"Fail\")\nprint (\"Pass\" if  (0==0) else \"Fail\")\nprint (\"Pass\" if  (3==3) else \"Fail\")\nprint (\"Pass\" if  (-5==-5) else \"Fail\")\nprint (\"Pass\" if  (0==0) else \"Fail\")\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_odd(\"abcdefg\") == \"abcde\"\nassert     remove_odd(\"abccdefg\") == \"abcde\"\nassert     remove_odd(\"abccdefg\") == \"abcde\"\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_odd(\"abccddef\") == \"abcd\"\nassert     remove_odd(\"abccddefg\") == \"abcd\"\nassert     remove_odd(\"abccddefgh\") == \"abcd\"\nassert     remove_odd(\"abccddefghi\") == \"abcd\"\nassert     remove_odd(\"abccddefghijk\") == \"abcd\"\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_odd(\"abcdef\") == \"abcde\"\nassert     remove_odd(\"abcdefa\") == \"abcdea\"\nassert     remove_odd(\"abcdfe\") == \"abcd\"\nassert     remove_odd(\"abcde\") == \"abcde\"\nassert     remove_odd(\"a\") == \"a\"\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_odd('abc') == 'bcd'\nassert     remove_odd('abdd') == 'bcd'\nassert     remove_odd('abcde') == 'bcde'\nassert     remove_odd('abcbde') == 'bcde'\nassert     remove_odd('abcdefgh') == 'bcd'\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nremove_odd('aabcccccaaa') == 'cccaaa'\nassert \nremove_odd('abcdefg') == 'abcdefg'\nassert \nremove_odd('aabbccdddcc') == 'abcddcc'\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint(remove_odd('abcde'))\nassert remove_odd('abc') == ''\nassert remove_odd('a') == ''\nassert remove_odd('abc') == ''\nassert remove_odd('aabc') == ''\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_odd(\"sdfasd\") == \"sdds\"\nassert     remove_odd(\"sdf\") == \"dsf\"\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_bidirectional([]) == 0, \"input == []\"\nassert     count_bidirectional([(1,2),(3,4)]) == 1, \"input == [(1,2),(3,4)]\"\nassert     count_bidirectional([(1,2),(2,1)]) == 0, \"input == [(1,2),(2,1)]\"\nassert     count_bidirectional([(1,2),(3,4),(4,5)]) == 2, \"input == [(1,2),(3,4),(4,5)]\"\nassert     count_bidirectional([(1,2,3),(4,5,6),(7,8,9)]) == 3, \"input == [(1,2,3),(4,5,6),(7,8,9)]\"\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    # False, as we should not count (1, 1) and (1, 2)\n    count_bidirectional([(1, 1), (2, 1), (1, 2)]) == 2, 'Not working'\n    # True, as we should not count (1, 1) and (2, 2)\n    count_bidirectional([(1, 1), (2, 2)]) == 1\n    # False, as we should not count (1, 1) and (1, 1)\n    count_bidirectional([(1, 1), (1, 1)]) == 0"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_bidirectional([(0, 1), (1, 0)]) == 1, 'output is not correct'\nassert count_bidirectional([(0, 1), (1, 0), (1, 0)]) == 2, 'output is not correct'\nassert count_bidirectional([(0, 1), (1, 0), (1, 0), (0, 1), (1, 0)]) == 3, 'output is not correct'\nassert count_bidirectional([(0, 0), (1, 0)]) == 0, 'output is not correct'\nassert count_bidirectional([(0, 0), (0, 0), (1, 0)]) == 0, 'output is not correct'\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_bidirectional([(1,2), (2,1), (3,4), (4,3), (5,6), (6,5)]) == 4, \"Not correct.\"\nassert count_bidirectional([(1,2), (2,1)]) == 0, \"Not correct.\"\n\ndef count_symmetric(test_list):\n    '''\n    Write a function to count symmetric tuple pairs.\n    '''\n    pass\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef longest_common_substring_reverse(test_string1, test_string2):\n    '''\n    Write a function to find the longest common substring\n    between two strings in reverse order.\n    '''\n    pass\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_bidirectional([('A', 'B'), ('B', 'C'), ('C', 'D'), ('D', 'E'), ('E', 'F'), ('F', 'A')]) == 5, count_bidirectional\nassert     count_bidirectional([('A', 'B'), ('B', 'C'), ('C', 'D'), ('D', 'E'), ('E', 'F'), ('F', 'A')]) == 3, count_bidirectional\nassert     count_bidirectional([('A', 'B'), ('B', 'C'), ('C', 'D'), ('D', 'E'), ('E', 'F'), ('F', 'A'), ('A', 'B')]) == 4, count_bidirectional\nassert     count_bidirectional([('A', 'B'), ('B', 'C'), ('C', 'D'), ('D', 'E'), ('E', 'F'), ('F', 'A'), ('A', 'B')]) == 2, count_bidirectional\nassert     count_bidirectional([('A', 'B'), ('B', 'C'), ('C', 'D'), ('D', 'E'), ('E', 'F'), ('F', 'A'), ('A', 'B')]) == 1, count_bidirectional\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_bidirectional([(1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5)]) == 6\nassert     count_bidirectional([(1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5), (4, 5)]) == 8\nassert     count_bidirectional([(1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5), (4, 5), (5, 6)]) == 12\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_bidirectional([(1,2),(2,1),(2,3)]) == 2, \"Test 1 Failed\"\nassert count_bidirectional([(1,2),(2,1),(2,3)]) == 1, \"Test 2 Failed\"\nassert count_bidirectional([(1,2),(2,1),(1,3)]) == 3, \"Test 3 Failed\"\nassert count_bidirectional([]) == 0, \"Test 4 Failed\"\nassert count_bidirectional([(1,2),(2,1),(1,3)]) == 3, \"Test 5 Failed\"\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_bidirectional([('abc', ('xyz', 'zxy')), \n                            ('abc', ('yzx', 'zyx'))]) == 2\nassert     count_bidirectional([('abc', ('xyz', 'zxy')), \n                            ('abc', ('zxy', 'xyz'))]) == 2\nassert     count_bidirectional([('abc', ('xyz', 'zxy')), \n                            ('abc', ('zxy', 'xyz'))]) == 2\nassert     count_bidirectional([('abc', ('xyz', 'zxy')), \n                            ('abc', ('xyz', 'yzx'))]) == 2\nassert     count_bidirectional([('abc', ('xyz', 'zxy')), \n                            ('abc', ('zxy', 'xyz'))]) == 0\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     multiple_to_single([1, 2, 3]) == 6\nassert     multiple_to_single([1, 2]) == 2\nassert     multiple_to_single([1, 2, 3, 4, 5]) == 15\nassert     multiple_to_single([1, 2, 3, 4, 5, 6]) == 30\nassert     multiple_to_single([]) == 0\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef single_to_multiple(n):\n    '''\n    Write a function to divide a single integer into a list of multiple integers.\n    '''\n    pass\n\nassert single_to_multiple(0) == []\nassert single_to_multiple(1) == [1]\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nmultiple_to_single([1,2,3,4,5]) == 60\nassert multiple_to_single([1,3,4,5]) == 30\nassert multiple_to_single([]) == 0\nassert multiple_to_single([1,2,3,4,5,0]) == 0\nassert multiple_to_single([]) == 0\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     multiple_to_single([1,2,3,4,5]) == 15, 'Should be 15'\nassert     multiple_to_single([]) == 0, 'Should be 0'\nassert     multiple_to_single([1,2,3,4,5,6]) == 123, 'Should be 123'\n\n\n\n'''\nA function that takes in a list of integers and returns a sorted list of integers\n'''\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nmultiple_to_single([1,2,3,4,5,6,7,8,9]) == 123456789\nassert multiple_to_single([1,2,3,4,5,6,7,8]) == 1234567\nassert multiple_to_single([1,2,3,4,5,6,7,8,9]) == 123456789\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     multiple_to_single([1,2,3,4,5])==15\nassert     multiple_to_single([1,2,3,4,5])==15\nassert     multiple_to_single([1,2,3,4])==24\nassert     multiple_to_single([1,2])==12\nassert     multiple_to_single([1,2,3])==6\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef sum_total(L):\n    '''\n    Write a function to sum all the elements in a list.\n    '''\n    pass\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     multiple_to_single([1,2,3,4,5]) == 20\nassert     multiple_to_single([1,2,3,4,5]) == 20\nassert     multiple_to_single([1,2,3,4,5,6]) == 36\nassert     multiple_to_single([1,2,3,4,5,6,7]) == 42\nassert     multiple_to_single([1,2,3,4,5,6,7,8]) == 72\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     multiple_to_single([1, 2, 3])     == 6, 'Wrong!'\nassert     multiple_to_single([-4, -1])     == -10, 'Wrong!'\nassert     multiple_to_single([1, 2, 3, 4])     == 12, 'Wrong!'\nassert     multiple_to_single([-5, -1])     == -10, 'Wrong!'\nassert     multiple_to_single([])     == 0, 'Wrong!'\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_adverb_position('''\n    This is the first sentence.\n    I am learning how to write functions in Python.\n    I am going to learn how to read and write files in Python.\n    I am going to learn how to create a folder and move files.\n    I am going to learn how to handle errors in Python.\n    I am going to learn how to use sys module in Python.\n    I am going to learn how to print the results in Python.\n    I am going to learn how to list the results in Python.\n    I am going to learn how to use regular expressions in Python.\n    ''') == [0, 11, 33, 56, 78, 88, 99, 105]\n    assert find_adverb_position('''\n    There is a fear in India that India will lose its state of independence.\n    Every nation is a rebel and every nation is striving to destroy the world.\n    ''') == [0, 9, 23, 30, 41]\n    assert find_adverb_position('''\n    Gift is not the gift of the old but the gift of the new.\n    ''') == [1, 5, 11, 13, 16, 18, 20, 22]\n    assert find_adverb_position('''\n    Beautiful things are bad and ugly things are ugly.\n    ''') == [1, 3, 6, 7, 9, 12, 14, 16, 17, 19, 20, 21, 23, 26, 28, 29, 30, 32, 33]\n    assert find_adverb_position('''\n    It is not easy to build a house without a door.\n    ''') == [0, 8, 19, 23, 25, 27, 30]\n    "
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_adverb_position('Una locina de comida izquierda est\u00e1 muy cerca de la izquierda.') == {\n    'adverb': 'de',\n    'index': 1\n}\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_adverb_position('Do you like this? Is that really what you want to talk about? ') == [\n        [1, 3],\n        [5, 7],\n        [8, 9]\n    ], 'incorrect answer'\nassert     find_adverb_position('It is wrong! Do you like this? Is that really what you want to talk about? ') == [\n        [1, 3],\n        [5, 7],\n        [8, 9],\n        [10, 11],\n        [12, 14]\n    ], 'incorrect answer'\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nassert find_adverb_position(\"I am a bookkeeper. I am a person.\") == [(4, 6), (9, 11), (14, 16), (19, 20)]\n\nassert find_adverb_position(\"I am the chairman of the Union. I am a teacher.\") == []\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_adverb_position(\"I'm all ears\")=={'first': 0,'second': 4, 'third': 5}\nassert     find_adverb_position(\"I'm not in the mood for the party\")=={'first': 6,'second': 10, 'third': 13}\nassert     find_adverb_position(\"The cat runs like a clock\")=={'first': 0,'second': 10, 'third': 17}\nassert     find_adverb_position(\"I'm not listening to the music\")=={'first': 0,'second': 11, 'third': 14}\n\nprint(\"\\nTest #1 - All adverbs positions:\")\nprint(\"I'm all ears\\nI'm not in the mood for the party\\nThe cat runs like a clock\\nI'm not listening to the music\")\nprint(\"\\nTest #2 - Check the correctness of the function:\")\nprint(find_adverb_position(\"I'm all ears\"))\nprint(find_adverb_position(\"I'm not in the mood for the party\"))\nprint(find_adverb_position(\"The cat runs like a clock\"))\nprint(find_adverb_position(\"I'm not listening to the music\"))\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_adverb_position(\"The sky is blue. The ground is green.\") == True\nassert     find_adverb_position(\"The blue sky is sky. The green ground is ground.\") == True\nassert     find_adverb_position(\"The earth is green. The sky is blue.\") == False\nassert     find_adverb_position(\"The sky is blue. The green ground is green.\") == False\nassert     find_adverb_position(\"The sky is blue. The earth is green.\") == False\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_adverb_position('This is an example.') == (0, 10)\nassert     find_adverb_position('This is an example.') == (0, 10)\nassert     find_adverb_position('This is an example.') == (0, 10)\nassert     find_adverb_position('This is an example.') == (0, 10)\nassert     find_adverb_position('This is an example.') == (0, 10)\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_adverb_position('The quick brown fox jumped over the lazy dog.') == (4, 8)\nassert     find_adverb_position('If you cant find an adverb, just find an adverb.') == (1, 2)\nassert     find_adverb_position('Aaaah, I am the king!') == (0, 7)\nassert     find_adverb_position('The quick brown fox jumped over the lazy dog.') == (4, 8)\nassert     find_adverb_position('He is an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an an and an an a an an an aque an an an an an an an an an an aor an aor an aprogressive an apropriate an apropriate an apropriately an apriori an aprox an apropos an aproprior an apropriate an apropriately an apropriates an apropriately an apropriately an apropriately an apropriates an apropriately an apropriete an aproprietously an apropriete an apropriately apropriately an apropriete an apropriately apropriete an apropriately an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriete an apropriet"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_adverb_position('What a terrible weather for the past two days.') == [['good', 0], ['terrible', 5]]\nassert     find_adverb_position('The weather is really bad for me right now.') == [['bad', 3], ['bad', 5]]\nassert     find_adverb_position('I was really sick for the past two weeks.') == [['sick', 3], ['sick', 5]]\nassert     find_adverb_position('I am really happy for the past two weeks.') == [['happy', 3], ['happy', 5]]\nassert     find_adverb_position('The weather is really good for me right now.') == [['good', 3], ['good', 5]]\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     surfacearea_cube(2) == 12\nassert     surfacearea_cube(1) == 4\nassert     surfacearea_cube(10) == 108\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere of a given radius.\n    '''\n    pass\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     surfacearea_cube(0) == 0\nassert     surfacearea_cube(1) == 1\nassert     surfacearea_cube(2) == 12\nassert     surfacearea_cube(3) == 18\nassert     surfacearea_cube(4) == 24\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     surfacearea_cube(2) == 8\nassert     surfacearea_cube(3) == 18\nassert     surfacearea_cube(4) == 24\nassert     surfacearea_cube(5) == 30\nassert     surfacearea_cube(6) == 36\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     surfacearea_cube(5) == 50\nassert     surfacearea_cube(1) == 4\nassert     surfacearea_cube(0) == 0\nassert     surfacearea_cube(42) == 0\nassert     surfacearea_cube(-1) == 0"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     surfacearea_cube(1) == 8, 'incorrect result'\nassert     surfacearea_cube(5) == 50, 'incorrect result'\nassert     surfacearea_cube(10) == 500, 'incorrect result'"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     surfacearea_cube(1) == 8\nassert     surfacearea_cube(2) == 20\nassert     surfacearea_cube(3) == 32\nassert     surfacearea_cube(4) == 48\nassert     surfacearea_cube(5) == 60\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     surfacearea_cube(1) == 8\nassert     surfacearea_cube(2) == 36\nassert     surfacearea_cube(3) == 108\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef negative_count(nums):\n    '''\n    Write a function to find the ration of negative numbers in an array of integers.\n    '''\n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert positive_count([0]) == 0\nassert positive_count([1]) == 1\nassert positive_count([-1]) == 0\nassert positive_count([1, 2]) == 1\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     positive_count([2, 3, 4, -5, 6, 7, 8, 9]) == 0.4\nassert     positive_count([0, -1, -2, -3, -4, -5, -6, -7, -8, -9]) == 0.4\nassert     positive_count([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == 0.4\nassert     positive_count([-4, -5, -6, -7, -8, -9]) == 0.4\nassert     positive_count([-8, -9]) == 0.4\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ndef remove_n(nums):\n    '''\n    Write a function to remove the first and last integers from an array of integers.\n    '''\n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef count_match_pairs(nums):\n    '''\n    Write a function to return the number of matched pairs in the array.\n    Note: Each element in the array is guaranteed to be unique\n    '''\n    pass\n\n\ndef find_one_away(string_1, string_2):\n    '''\n    Write a function to check if two strings are one edit (or zero edits) away.\n    '''\n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \npositive_count([1,2,3,4,5,6,7,8,9,10,11]) == 0.2\nassert positive_count([1,2,3,4,5,6,7,8,-2,-5]) == 0.5\nassert positive_count([1,2,3,4,5,6,7,8,-2,-5,-3,4,5]) == 0.7\nassert positive_count([1,2,3,4,5,6,7,8,9,10,11]) == 0.7\nassert positive_count([]) == 0.0\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     positive_count([-1,2,3,4,5]) == 0.5\nassert positive_count([-1,1,1,1]) == 2\nassert positive_count([1,-2,-3,4,5]) == 0.5\nassert positive_count([1,-2,-3,-4,-5]) == 0\nassert positive_count([1,2,3,4,5,6,7,8,9]) == 1\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef product(nums,length):\n    '''\n    Write a function to get a product of the elements of an array.\n    \n    Example\n    Input: [-2, -3, 4, -5], 2\n    Output: -6\n    \n    Input: [-2, -3, 4, -5], 3\n    Output: -20\n    '''\n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef sum_list_nums(nums):\n    '''\n    Write a function to sum up numbers in an array of integers.\n    '''\n    pass\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     largest_neg([1, 2, 3, -4, -5]) == -5, 'test case 2 failed'\nassert     largest_neg([-1, -2, -3, -4, -5]) == -1, 'test case 3 failed'\nassert     largest_neg([1, -2, -3, -4, -5]) == -4, 'test case 4 failed'\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     largest_neg([-1,-2,-3,-4,10])==10\nassert largest_neg([-1,-2,-3,-4,-5])==-1\nassert largest_neg([-1,-2,-3,10,-1])==-1\nassert largest_neg([-1,0,-3,-4,10])==0\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     largest_neg([-1, -1, -1, -1]) == -1\nassert     largest_neg([-1, -1, -1, -2]) == -2\nassert     largest_neg([-1, -2, -2, -1]) == -2\nassert     largest_neg([1, 2, 3, 4, 5]) == 5\nassert     largest_neg([-1, -1, -1, -2, 0]) == 0\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    "
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     largest_neg([1,-2,3,-4]) == -4, \"Should be -4\"\nassert     largest_neg([-1,1,-1,1]) == 1, \"Should be 1\"\nassert     largest_neg([-1,-1,-1,-1]) == -1, \"Should be -1\"\nassert     largest_neg([-1,1,1,-1,1]) == 1, \"Should be 1\"\nassert     largest_neg([1,-1,1,1]) == 1, \"Should be 1\"\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     largest_neg([-10, -20, 10, -30]) == -30\nassert     largest_neg([-10, -20, 20, -30]) == -30\nassert     largest_neg([-10, -20, 10]) == 10\nassert     largest_neg([-10, -20]) == -20\nassert     largest_neg([]) == None\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert 5 == largest_neg([-1, -2, -3, -4])\nassert -1 == largest_neg([-1, -2, -3, -4])\nassert -3 == largest_neg([1, 2, -3, 4])\nassert -1 == largest_neg([-1, 2, -3, 4])\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     largest_neg([0, -1, 2, -3, 4, 5, -6, -7, 8, -9, -10]) == -10\nassert     largest_neg([0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == -10\nassert     largest_neg([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == -10\nassert     largest_neg([1, -2, 3, -4, 5, -6, -7, 8, -9, -10]) == 1\nassert     largest_neg([-1, 2, -3, 4, -5, 6, -7, 8, -9, 10]) == 10\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert largest_neg([10, -3, -50, -20, -1]) == -1\nassert largest_neg([-3, -50, -20, -1]) == -1\nassert largest_neg([-3, -50, -20, -1, 10]) == -1\nassert largest_neg([-3, -50, -20, -1, 10, -1]) == -1\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == '__main__':\n    \n    list_a = [-1, -2, -3, -4, -5]\n    assert largest_neg(list_a) == -5\n    \n    \n    list_b = [-1, -2, -3, -4, -5, -6]\n    assert largest_neg(list_b) == -6\n    \n    \n    list_c = [-1, -2, -3, -4, -5, -6, -7]\n    assert largest_neg(list_c) == -7\n    \n    \n    list_d = [-1, -2, -3, -4, -5, -6, -7, -8]\n    "
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef cumulative_sum(t):\n    '''\n    Write a function to return a new list, cumulative sum of the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     trim_tuple([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)], 2) == [(1, 2), (2, 3), (3, 4)]\nassert     trim_tuple([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)], 3) == [(1, 2), (2, 3), (3, 4), (4, 5)]\nassert     trim_tuple([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)], 1) == [(1, 2), (2, 3), (3, 4), (4, 5)]\nassert     trim_tuple([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)], 0) == [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     trim_tuple([(1,2,3), (2,3,4,5)], 0) == [(1,2,3), (2,3,4,5)]\nassert trim_tuple([(1,2,3), (2,3,4,5)], 1) == [(1,2), (2,3,4,5)]\nassert trim_tuple([(1,2,3), (2,3,4,5)], 2) == [(1,2), (2,3)]\n\ndef trim_tuple2(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    This method should be a new one without using the inbuilt function.\n    '''\n    test_list[:] = [x for x in test_list if x[0] < K]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     trim_tuple([('A', 1, 1), ('B', 2, 2), ('C', 3, 3)], 1) == \\\n        [('A', 1, 1), ('B', 2, 2), ('C', 3, 3)]\nassert trim_tuple([('A', 1, 1), ('B', 2, 2), ('C', 3, 3)], 2) == \\\n        [('A', 1, 1), ('B', 2, 2), ('C', 3, 3)]\nassert trim_tuple([('A', 1, 1), ('B', 2, 2), ('C', 3, 3)], 3) == \\\n        [('A', 1, 1), ('B', 2, 2), ('C', 3, 3)]\nassert trim_tuple([('A', 1, 1), ('B', 2, 2), ('C', 3, 3)], 4) == \\\n        [('A', 1, 1), ('B', 2, 2), ('C', 3, 3)]\nassert trim_tuple([('A', 1, 1), ('B', 2, 2), ('C', 3, 3)], 5) == \\\n        [('A', 1, 1), ('B', 2, 2), ('C', 3, 3)]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     trim_tuple([(1, 2), (3, 4, 5), (6, 7, 8)], 2) == [(1, 2), (3, 4), (6, 7, 8)]\nassert trim_tuple([(1, 2, 3), (4, 5), (6, 7, 8)], 2) == [(1, 2, 3), (4, 5), (6, 7, 8)]\nassert trim_tuple([(1, 2, 3, 4, 5, 6), (7, 8, 9), (10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], 20) == [(1, 2, 3, 4, 5, 6), (7, 8, 9), (10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     trim_tuple([(), (1,), (2,), (3,), (4,)], 3) == [(1,), (2,), (3,), (4,)]\nassert     trim_tuple([(1,), (2,), (3,), (4,), (5,)], 3) == (1,2,3)\nassert     trim_tuple([(1,), (2,), (3,), (4,), (5,)], 4) == (1,2,3)"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     trim_tuple([(1,2), (1, 2, 3), (4, 5)], 1) == [(1,2), (1, 2, 3)]\nassert trim_tuple([(1,2), (1, 2, 3), (4, 5)], 2) == [(1,2), (1, 2, 3)]\nassert trim_tuple([(1,2), (1, 2, 3), (4, 5)], 3) == [(1, 2, 3), (4, 5)]\nassert trim_tuple([(1,2), (1, 2, 3), (4, 5)], 4) == [(1, 2), (1, 2, 3)]\nassert trim_tuple([(1,2), (1, 2, 3), (4, 5)], 5) == [(1, 2, 3), (4, 5)]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     trim_tuple([(1, 2, 3), (4, 5, 6)], 1) == [(1, 2, 3), (4, 5, 6)]\nassert     trim_tuple([(1, 2, 3), (4, 5, 6)], 2) == [(1, 2), (4, 5, 6)]\nassert     trim_tuple([(1, 2, 3), (4, 5, 6)], 0) == []\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     trim_tuple([(1, 2, 3), (2, 3, 4), (3, 4, 5)], 2) == \\\n        [(1, 2, 3), (2, 3, 4)]\n\nassert     trim_tuple([(1, 2, 3), (2, 3, 4), (3, 4, 5)], 1) == \\\n        [(1, 2, 3)]\n\nassert     trim_tuple([(1, 2, 3), (2, 3, 4), (3, 4, 5)], 0) == \\\n        [(1, 2, 3), (2, 3, 4), (3, 4, 5)]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     trim_tuple([(1,2), (2,3), (3,4), (4,5), (5,6), (6,7)], 2) == [(1,2), (3,4), (5,6), (6,7)]\nassert     trim_tuple([(1,2), (2,3), (3,4), (4,5), (5,6), (6,7)], 1) == [(2,3), (3,4), (4,5), (5,6), (6,7)]\nassert     trim_tuple([(1,2), (2,3), (3,4), (4,5), (5,6), (6,7)], 0) == [(1,2), (2,3), (3,4), (4,5), (5,6), (6,7)]\nassert     trim_tuple([(1,2), (2,3), (3,4), (4,5), (5,6), (6,7)], 3) == [(1,2), (2,3), (3,4), (4,5), (5,6), (6,7)]\nassert     trim_tuple([(1,2), (2,3), (3,4), (4,5), (5,6), (6,7)], 4) == [(1,2), (2,3), (3,4), (4,5), (5,6), (6,7)]\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     index_multiplication((1,2,3),(4,5,6)) == (1*4, 2*5, 3*6) \nassert     index_multiplication((1,2,3),(4,5,6,7,8,9)) == (1*4, 2*5, 3*6) \n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     index_multiplication((1,2,3),(1,2,3))==(1,2,3,1,2,3,1,2,3,1,2,3), \"index_multiplication fails\"\nassert     index_multiplication((1,2,3),(1,2,3))==(1,2,3,1,2,3,1,2,3,1,2,3), \"index_multiplication fails\"\nassert     index_multiplication((1,2),(1,2,3))==(1,2,1,2,2,3), \"index_multiplication fails\"\nassert     index_multiplication((1,2),(1,2,3))==(1,2,1,2,2,3), \"index_multiplication fails\"\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert ix_mul(a, b) == (1, 2, 3, 4)\nassert ix_mul(b, c) == (2, 4, 6, 8)\nassert ix_mul(c, d) == (4, 8, 12, 16)\nassert ix_mul(d, e) == (8, 16, 24, 32)\nassert ix_mul(e, f) == (16, 32, 48, 64)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     index_multiplication((1,2,3,4), (5,6,7,8)) == (5,6,7,8)\nassert index_multiplication((1,2), (3,4)) == (3,4)\nassert index_multiplication((0,0), (0,0)) == (0,0)\nassert index_multiplication((1,2), (3,4,5)) == (3,4,5)"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     index_multiplication((0,1,2), (3,4,5)) == (0,3,6)\nassert     index_multiplication((1,2,3), (4,5,6)) == (1,4,9)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     index_multiplication(test_tup1, test_tup2) == (7, 20)\nassert index_multiplication((1, 2, 3, 4), (5, 6, 7, 8)) == (120, 156, 252, 312)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     index_multiplication((1,2,3),(4,5,6)) == (4,10,18), \"Wrong result\"\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert ixmltup(t1, t2) == ((1, 2, 4), (3, 6, 9))\nassert ixmltup(t3, t4) == ((2, 3, 6), (5, 7, 9))\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n'''\n    Expected Output:\n    \n    >>> count_Occurrence((1, 2, 3), [1, 2, 3])\n    >>> 3\n    \n    >>> count_Occurrence((1, 1, 2, 2), [1, 2, 3])\n    >>> 1\n    \n    >>> count_Occurrence((1, 2, 2), [1, 2, 3])\n    >>> 0\n    \n    >>> count_Occurrence((1, 2), [1, 2, 3])\n    >>> 0\n    \n    >>> count_Occurrence((1, 2, 3), [1, 2])\n    >>> 2\n    \n    >>> count_Occurrence((2,), [1, 2, 3])\n    >>> 0\n    \n    >>> count_Occurrence((2, 2), [1, 2, 3])\n    >>> 2\n    \n    >>> count_Occurrence((2, 1), [1, 2, 3])\n    >>> 2\n    \n    >>> count_Occurrence((3,), [1, 2, 3])\n    >>> 0\n    \n    >>> count_Occurrence((3, 3), [1, 2, 3])\n    >>> 1\n    \n    >>> count_Occurrence((3, 1), [1, 2, 3])\n    >>> 1\n    \n    >>> count_Occurrence((2, 1, 2), [1, 2, 3])\n    >>> 1\n    \n    >>> count_Occurrence((1, 1, 2), [1, 2, 3])\n    >>> 2\n    \n    >>> count_Occurrence((1, 1, 1), [1, 2, 3])\n    >>> 3\n    \n    >>> count_Occurrence((1, 1, 2, 1), [1, 2, 3])\n    >>> 3\n    \n    >>> count_Occurrence((1, 1, 1), [1, 2, 3])\n    >>> 1\n    \n    >>> count_Occurrence((1, 1, 1, 1), [1, 2, 3])\n    >>> 1\n    \n    >>> count_Occurrence((1, 1, 1, 2), [1, 2, 3])\n    >>> 1\n    \n    >>> count_Occurrence((1, 1, 1, 1), [1, 2, 3])\n    >>> 1\n    \n    >>> count_Occurrence((1, 1, 1, 1, 1), [1, 2, 3])\n    >>> 1\n    \n    >>> count_Occurrence((1, 1, 1, 1, 1), [1, 2, 3])\n    >>> 1\n    \n    >>> count_Occurrence((1, 1, 1, 1, 1, 1), [1, 2, 3])\n    >>> 1\n    \n    >>> count_Occurrence((1, 2, 2, 2, 2, 2), [1, 2, 3])\n    >>> 5\n    \n    >>> count_Occurrence((1, 2, 2, 2, 2, 2), [1, 2, 3, 4, 5])\n    >>> 0\n    \n    >>> count_Occurrence((1, 2, 2, 2, 2), [1, 2, 3, 4])\n    >>> 2\n    \n    >>> count_Occurrence((1, 2, 2), [1, 2, 3])\n    >>> 0\n    \n    >>> count_Occurrence((1, 2, 3), [1, 2, 3])\n    >>> 0\n    \n    >>> count_Occurrence((1, 2, 3), [1, 2])\n    >>> 2\n    \n    >>> count_Occurrence((1, 2), [1, 2, 3])\n    >>> 0\n    \n    >>> count_Occurrence((1, 2), [1, 2, 3])\n    >>> 2\n    \n    >>> count_Occurrence((2,), [1, 2, 3])\n    >>> 0\n    \n    >>> count_Occurrence((2, 2), [1, 2, 3])\n    >>> 0\n    \n    >>> count_Occurrence((2, 2), [1, 2, 3])\n    >>> 0\n    \n    >>> count_Occurrence((2, 2, 2), [1, 2, 3])\n    >>> 0\n    \n    >>> count_Occurrence((3,), [1, 2, 3])\n    >>> 0\n    \n    >>> count_Occurrence((3, 3), [1, 2, 3])\n    >>> 1\n    \n    >>> count_Occurrence((3, 3), [1, 2, 3])\n    >>> 2\n    \n    >>> count_Occurrence((3, 2), [1, 2, 3])\n    >>> 2\n    \n    >>> count_Occurrence((3, 1), [1, 2, 3])\n    >>> 1\n    \n    >>> count_Occurrence((2, 1, 2), [1, 2, 3])\n    >>> 1\n    \n    >>> count_Occurrence((2, 2, 2), [1, 2, 3])\n    >>> 2\n    \n    >>> count_Occurrence((2, 2, 2), [1, 2, 3])\n    >>> 1\n    \n    >>> count_Occurrence((2, 2, 1), [1, 2, 3])\n    >>> 1\n    \n    >>> count_Occurrence((1, 1, 2), [1, 2, 3])\n    >>> 0\n    \n    >>> count_Occurrence((1, 1, 1), [1, 2, 3])\n    >>> 0\n    \n    >>> count_Occurrence((1, 1, 2), [1, 2, 3])\n    >>> 0\n    \n    >>> count_Occurrence((1, 1, 1, 1), [1, 2, 3])\n    >>> 1\n    \n    >>> count_Occurrence((1, 1, 1, 1), [1, 2, 3])\n    >>> 1\n    \n    >>> count_Occurrence((1, 1, 1, 1, 1), [1, 2, 3])\n    >>> 1\n    \n    >>> count_Occurrence((1, 1, 1, 1, 1), [1, 2, 3])\n    >>> 1\n    \n    >>> count_Occurrence((1, 1, 1, 1, 1, 1), [1, 2, 3])\n    >>> 1\n    \n    >>> count_Occurrence((1, 1, 1, 1, 1, 1), [1, 2, 3])\n    >>> 1\n    \n    >>> count_Occurrence((1, 1, 1, 1, 1, 1, 1), [1, 2, 3])\n    >>> 1\n    \n    >>> count_Occurrence((1, 2, 2, 2, 2, 2), [1, 2, 3])\n    >>> 5\n    \n    >>> count_Occurrence((1, 2, 2, 2, 2, 2), [1, 2, 3, 4, 5])\n    >>> 2\n    \n    >>> count_Occurrence((1, 2, 2, 2, 2, 2), [1, 2, 3, 4])\n    >>> 2\n    \n    >>> count_Occurrence((1, 2, 2, 2, 2), [1, 2, 3, 4])\n    >>> 2\n    \n    >>> count_Occurrence((1, 2, 2, 2, 2), [1, 2, 3])\n    >>> 0\n    \n    >>> count_Occurrence((1, 2, 2, 2), [1, 2, 3])\n    >>> 2\n    \n    >>> count_Occurrence((2,), [1, 2, 3])\n    >>> 0\n    \n    >>> count_Occurrence((2, 2), [1, 2, 3])\n    >>> 0\n    \n    >>> count_Occurrence((2, 2), [1, 2, 3])\n    >>> 2\n    \n    >>> count_Occurrence((2, 2, 2), [1, 2, 3])\n    >>> 1\n    \n    >>> count_Occurrence((3,), [1, 2, 3])\n    >>> 0\n    \n    >>> count_Occurrence((3, 3), [1, 2, 3])\n    >>> 0\n    \n    >>> count_Occurrence((3, 3), [1, 2, 3])\n    >>> 0\n    \n    >>> count_Occurrence((3, 2), [1, 2, 3])\n    >>> 2\n    \n    >>> count_Occurrence((3, 1), [1, 2, 3])\n    >>> 1\n    \n    >>> count_Occurrence((2, 1, 2), [1, 2, 3])\n    >>> 1\n    \n    >>> count_Occurrence((2, 2, 2), [1, 2, 3])\n    >>> 1\n    \n    >>> count_Occurrence((2, 2, 2), [1, 2, 3])\n    >>> 1\n    "
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_Occurrence((1,2,3,4,5),(1,1,2,2,2,3,4,5,1,1,2,3,4,5,1)) == (Counter({1: 4, 2: 4, 3: 3, 4: 2, 5: 1}))\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint count_Occurrence((1,2,3,4),[1,2,3,4]) == 4\nprint count_Occurrence((1,2,3,4),[2,4]) == 3\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_Occurrence(('abc', 'bcd'), [1, 2, 3, 4]) == (1, 2, 1), 'test 1 failed'\nassert     count_Occurrence(('abcd', 'bcd'), [1, 2, 3, 4]) == (1, 2, 1), 'test 2 failed'\nassert     count_Occurrence(('abc', 'bcd'), [1, 2, 3, 4, 5, 6]) == (1, 2, 1), 'test 3 failed'\nassert     count_Occurrence(('a', 'a', 'a'), [1, 1, 1, 2, 2]) == (2, 3, 2), 'test 4 failed'\nassert     count_Occurrence(('a', 'a', 'a'), [1, 1, 1, 2, 2]) == (2, 3, 2), 'test 5 failed'\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nlst = [1,2,2,3,4,5,6,7]\ntup = (1,2,2,3,4,5,6,7)\ncount_Occurrence(tup, lst)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_Occurrence((1, 2, 3), ['a', 'b', 'a', 'c']) == 2\nassert     count_Occurrence((1, 2, 3), ['a', 'b', 'c']) == 1\nassert     count_Occurrence((1, 2, 3, 4), ['a', 'b', 'c']) == 1\nassert     count_Occurrence((1, 2, 3), ['a', 'b', 'c', 'c']) == 1\nassert     count_Occurrence((1, 2, 3, 4, 5), ['a', 'b', 'c']) == 1\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_Occurrence((1,2,3,4,5,6,7,8), []) == Counter({1:4, 2:4, 3:4, 4:4, 5:4, 6:4, 7:4, 8:4})\nassert     count_Occurrence((1,1,2,3,4,5,5,6,6), []) == Counter({1:5, 2:4, 3:4, 4:3, 5:2, 6:2})\nassert     count_Occurrence((1,1,2,3,4,4,5,5,6,6), []) == Counter({1:6, 2:5, 3:4, 4:4, 5:3, 6:2})\nassert     count_Occurrence((1,2,3,4,5,5,5,6,6,7), []) == Counter({1:6, 2:5, 3:4, 4:4, 5:3, 6:2, 7:1})\nassert     count_Occurrence((1,2,3,4,5,5,5,6,6,6,6,7,7,8), []) == Counter({1:8, 2:6, 3:4, 4:4, 5:3, 6:2, 7:1})\nprint(\"All test cases passed\")\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ncube_nums([0, 1, 2, 3, 4, 5, 6]) == [0, 1, 8, 27, 64, 125, 216]\nassert not cube_nums([0, 1, 2, 3, 4, 5, 6]) == [0, 1, 8, 27, 64, 125, 216]\nprint('TEST PASSED')\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     cube_nums([1,2,3,4]) == [1, 8, 27, 64], 'Test Case 1'\nassert     cube_nums([2,3,4,5]) == [4, 25, 216, 729], 'Test Case 2'\nassert     cube_nums([-1,-2,-3,-4]) == [-1, -8, -27, -64], 'Test Case 3'\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     cube_nums([0, -1, 2, -3, 4, -5]) == [-1, 8, -64, -512, -3625, -69248], 'test 1'\nassert     cube_nums([0, -1, 1, -2, 2, -3]) == [0, 64, -1296, -8192, 63824, -129280], 'test 2'\nassert     cube_nums([-1, 0, 1, -2, 2, -3]) == [-1, 0, 64, 128, -12736, 15108], 'test 3'\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    pass\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     cube_nums([2, 3, 4]) == [8, 27, 64]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ncube_nums([0,1,2,3,4,5,6,7,8,9]) == [0, 1, 8, 27, 64, 125, 216, 343, 512, 729]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125], \"cube_nums\"\nassert     cube_nums([]) == [], \"cube_nums\"\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ncube_nums([]) == []\nassert cube_nums([0]) == [0]\nassert cube_nums([0, 1]) == [0, 1]\nassert cube_nums([0, 1, 2]) == [0, 1, 4]\nassert cube_nums([0, 1, 2, 3]) == [0, 1, 4, 27]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     cube_nums([0,1,2,3]) == [0,1,8,27]\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(cal_sum(6))\nprint(cal_sum(7))\nprint(cal_sum(8))\nprint(cal_sum(9))\nprint(cal_sum(10))\nprint(cal_sum(11))\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef cal_sum_range(n1, n2):\n    '''\n    Write a function to calculate the sum of perrin numbers in the range.\n    '''\n    pass\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    cal_sum(2) == 1\nassert \n    cal_sum(2) == 2\nassert \n    cal_sum(5) == 13\nassert \n    cal_sum(100) == 23350\nassert \n    cal_sum(5) == 21\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     cal_sum(1) == 1\nassert     cal_sum(2) == 3\nassert     cal_sum(3) == 6\nassert     cal_sum(4) == 10\nassert     cal_sum(5) == 15\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     cal_sum(10) == 55, \"Wrong value of n\"\nassert     cal_sum(0) == 0, \"Wrong value of n\"\nassert     cal_sum(2) == 7, \"Wrong value of n\"\n\ndef cal_average(n):\n    '''\n    Write a function to calculate the average of perrin numbers.\n    '''\n    pass\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    pass\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint('\\nTesting cal_sum()')\nprint(cal_sum(10))\nprint(cal_sum(7))\nprint(cal_sum(5))\nprint(cal_sum(1))\nprint(cal_sum(0))\nprint('\\n')\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     cal_sum(9) == 7\nassert     cal_sum(8) == 6\nassert     cal_sum(6) == 2\nassert     cal_sum(0) == 0\nassert     cal_sum(5) == 1\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert extract_string([\"I\", \"like\", \"a\", \"cat\", \"and\", \"a\", \"mouse\", \"and\", \"a\", \"dog\"], 3) == \"I like a cat\", \"1st\"\nassert extract_string([\"I\", \"like\", \"a\", \"cat\", \"and\", \"a\", \"mouse\", \"and\", \"a\", \"dog\"], 4) == \"I like a mouse\", \"2nd\"\nassert extract_string([\"I\", \"like\", \"a\", \"cat\", \"and\", \"a\", \"mouse\", \"and\", \"a\", \"dog\"], 0) == \"\", \"3rd\"\nassert extract_string([\"I\", \"like\", \"a\", \"cat\", \"and\", \"a\", \"mouse\", \"and\", \"a\", \"dog\"], 5) == \"I like a dog\", \"4th\"\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_string(['Hello', 'world'], 2) == ['He', 'Wo']\nassert     extract_string(['Hello', 'world'], 3) == ['He', 'Wd']\nassert     extract_string(['Hello', 'world'], 0) == ['Hello']\nassert     extract_string(['Hello', 'world'], 1) == ['He']\nassert     extract_string(['Hello', 'world'], 5) == ['Hello', 'world']\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_string(['string','str', 'ngt'], 3) == ['string','str', 'ngt']\nassert     extract_string(['string','str', 'ngt'], 4) == ['string','str', 'ngt']\nassert     extract_string(['string','str', 'ngt'], 5) == ['string','str', 'ngt']\nassert     extract_string(['string','str', 'ngt'], 6) == ['string','str', 'ngt']\nassert     extract_string(['string','str', 'ngt'], 7) == ['string','str', 'ngt']\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nextract_string(['Hello','', 'Python'], 1) == ['Hello']\nassert \nextract_string(['Hello','', 'Python'], 2) == ['Hello ', 'Python']\nassert \nextract_string(['Hello','', 'Python'], 3) == ['Hello ']\nassert \nextract_string(['Hello','', 'Python'], 4) == ['Hello','', 'Python']\nassert \nextract_string(['Hello','', 'Python'], 5) == ['Hello','', 'Python']\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_string(['a','b','c','d'], 2) == ['a','b']\nassert     extract_string(['a','b','c','d'], 3) == ['a','b','c']\nassert     extract_string(['a','b','c','d'], 4) == ['a','b','c','d']\nassert     extract_string(['a','b','c','d'], 0) == []\nassert     extract_string(['a','b','c','d'], 10) == ['a','b','c','d']\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_string([\"this\",\"is\",\"a\",\"test\",\"of\",\"the\",\"extracting\",\"function\"],5) == \"is\"\nassert     extract_string([\"this\",\"is\",\"a\",\"test\",\"of\",\"the\",\"extracting\",\"function\"],1) == \"\"\nassert     extract_string([\"this\",\"is\",\"a\",\"test\",\"of\",\"the\",\"extracting\",\"function\"],0) == \"\"\nassert     extract_string([\"this\",\"is\",\"a\",\"test\",\"of\",\"the\",\"extracting\",\"function\"],2) == \"\"\nassert     extract_string([\"this\",\"is\",\"a\",\"test\",\"of\",\"the\",\"extracting\",\"function\"],3) == \"test\"\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_string([\"abc\", \"def\", \"ghi\", \"jkl\"], 3) == ['abc', 'def']\nassert     extract_string([\"abc\", \"def\", \"ghi\", \"jkl\"], 0) == []\nassert     extract_string([\"abc\", \"def\", \"ghi\", \"jkl\"], 5) == ['abc', 'def', 'ghi']\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_string(['hello', 'hi', 'there'],2) == ['hello', 'hi']\nassert     extract_string(['hello', 'hi', 'there'],2) == ['hi', 'there']\nassert     extract_string(['hello', 'hi', 'there'],0) == []\nassert     extract_string(['hello', 'hi', 'there'],5) == []\nassert     extract_string(['hello', 'hi', 'there'],6) == ['there']"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nextract_string(['a','b','c','d','e','f'], 2) == ['ab', 'ac', 'ad', 'ae', 'af', 'b']\nextract_string(['a','b','c','d','e','f'], 3) == ['abc', 'abd', 'abe', 'abf', 'b']\nextract_string(['a','b','c','d','e','f'], 4) == ['abcde', 'abdf', 'abef', 'abf', 'b']\nextract_string(['a','b','c','d','e','f'], 5) == ['abcde', 'abdf', 'abef', 'abf', 'b']\nextract_string(['a','b','c','d','e','f'], 6) == ['abcde', 'abdf', 'abef', 'abf', 'b']\nextract_string(['a','b','c','d','e','f'], 7) == ['abcde', 'abdf', 'abef', 'abf', 'b']\nextract_string(['a','b','c','d','e','f'], 8) == ['abcde', 'abdf', 'abef', 'abf', 'b']\nextract_string(['a','b','c','d','e','f'], 9) == ['abcde', 'abdf', 'abef', 'abf', 'b']\nextract_string(['a','b','c','d','e','f'], 10) == ['abcde', 'abdf', 'abef', 'abf', 'b']\nextract_string(['a','b','c','d','e','f'], 11) == ['abcde', 'abdf', 'abef', 'abf', 'b']\nextract_string(['a','b','c','d','e','f'], 12) == ['abcde', 'abdf', 'abef', 'abf', 'b']\nextract_string(['a','b','c','d','e','f'], 13) == ['abcde', 'abdf', 'abef', 'abf', 'b']\nextract_string(['a','b','c','d','e','f'], 14) == ['abcde', 'abdf', 'abef', 'abf', 'b']\nextract_string(['a','b','c','d','e','f'], 15) == ['abcde', 'abdf', 'abef', 'abf', 'b']\nextract_string(['a','b','c','d','e','f'], 16) == ['abcde', 'abdf', 'abef', 'abf', 'b']\nextract_string(['a','b','c','d','e','f'], 17) == ['abcde', 'abdf', 'abef', 'abf', 'b']\nextract_string(['a','b','c','d','e','f'], 18) == ['abcde', 'abdf', 'abef', 'abf', 'b']\nextract_string(['a','b','c','d','e','f'], 19) == ['abcde', 'abdf', 'abef', 'abf', 'b']\nextract_string(['a','b','c','d','e','f'], 20) == ['abcde', 'abdf', 'abef', 'abf', 'b']\nextract_string(['a','b','c','d','e','f'], 21) == ['abcde', 'abdf', 'abef', 'abf', 'b']\nextract_string(['a','b','c','d','e','f'], 22) == ['abcde', 'abdf', 'abef', 'abf', 'b']\nextract_string(['a','b','c','d','e','f'], 23) == ['abcde', 'abdf', 'abef', 'abf', 'b']\nextract_string(['a','b','c','d','e','f'], 24) == ['abcde', 'abdf', 'abef', 'abf', 'b']\nextract_string(['a','b','c','d','e','f'], 25) == ['abcde', 'abdf', 'abef', 'abf', 'b']\nextract_string(['a','b','c','d','e','f'], 26) == ['abcde', 'abdf', 'abef', 'abf', 'b']\nextract_string(['a','b','c','d','e','f'], 27) == ['abcde', 'abdf', 'abef', 'abf', 'b']\nextract_string(['a','b','c','d','e','f'], 28) == ['abcde', 'abdf', 'abef', 'abf', 'b']\nextract_string(['a','b','c','d','e','f'], 29) == ['abcde', 'abdf', 'abef', 'abf', 'b']\nextract_string(['a','b','c','d','e','f'], 30) == ['abcde', 'abdf', 'abef', 'abf', 'b']\nextract_string(['a','b','c','d','e','f'], 31) == ['abcde', 'abdf', 'abef', 'abf', 'b']\nextract_string(['a','b','c','d','e','f'], 32) == ['abcde', 'abdf', 'abef', 'abf', 'b']\nextract_string(['a','b','c','d','e','f'], 33) == ['abcde', 'abdf', 'abef', 'abf', 'b']\nextract_string(['a','b','c','d','e','f'], 34) == ['abcde', 'abdf', 'abef', 'abf', 'b']\nextract_string(['a','b','c','d','e','f'], 35) == ['abcde', 'abdf', 'abef', 'abf', 'b']\nextract_string(['a','b','c','d','e','f'], 36) == ['abcde', 'abdf', 'abef', 'abf', 'b']\nextract_string(['a','b','c','d','e','f'], 37) == ['abcde', 'abdf', 'abef', 'abf', 'b']\nextract_string(['a','b','c','d','e','f'], 38) == ['abcde', 'abdf', 'abef', 'abf', 'b']\nextract_string(['a','b','c','d','e','f'], 39) == ['abcde', 'abdf', 'abef', 'abf', 'b']\nextract_string(['a','b','c','d','e','f'], 40) == ['abcde', 'abdf', 'abef', 'abf', 'b']\nextract_string(['a','b','c','d','e','f'], 41) == ['abcde', 'abdf', 'abef', 'abf', 'b']\nextract_string(['a','b','c','d','e','f'], 42) == ['abcde', 'abdf', 'abef', 'abf', 'b']\nextract_string(['a','b','c','d','e','f'], 43) == ['abcde', 'abdf', 'abef', 'abf', 'b']\nextract_string(['a','b','c','d','e','f'], 44) == ['abcde', 'abdf', 'abef', 'abf', 'b']\nextract_string(['a','b','c','d','e','f'], 45) == ['abcde', 'abdf', 'abef', 'abf', 'b']\nextract_string(['a','b','c','d','e','f'], 46) == ['abcde', 'abdf', 'abef', 'abf', 'b']\nextract_string(['a','b','c','d','e','f'], 47) == ['abcde', 'abdf', 'abef', 'abf', 'b']\nextract_string(['a','b','c','d','e','f'], 48) == ['abcde', 'abdf', 'abef', 'abf', 'b']\nextract_string(['a','b','c','d','e','f'], 49) == ['ab"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_whitespaces(\" \") == \"\", \"Please enter a sentence!\"\nassert remove_whitespaces(\"   \") == \"\", \"Please enter a sentence!\"\nassert remove_whitespaces(\"hello\") == \"hello\", \"Please enter a sentence!\"\nassert remove_whitespaces(\"\") == \"\", \"Please enter a sentence!\"\nassert remove_whitespaces(None) == \"\", \"Please enter a sentence!\"\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef add_spaces(text1):\n    '''\n    Write a function to add a space between every pair of characters in a string, \n    including at the end of the string.\n    '''\n    pass\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_whitespaces('hello    world     ') == 'hello world', 'Wrong answer!'\nassert     remove_whitespaces('hello     world') == 'hello world', 'Wrong answer!'\nassert     remove_whitespaces('hello     world  ') == 'hello world', 'Wrong answer!'\nassert     remove_whitespaces(' hello     world') == 'hello world', 'Wrong answer!'\nassert     remove_whitespaces('hello     world  ') == 'hello world', 'Wrong answer!'\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_whitespaces(\"   this is my first line\\n\")     == \"this is my first line\"\nassert     remove_whitespaces(\" this is my first line \\n \")    == \"this is my first line\"\nassert     remove_whitespaces(\"     this is my first line \\n\")    == \"this is my first line\"\nassert     remove_whitespaces(\"     \\tthis is my first line \\n\")    == \"this is my first line\"\nassert     remove_whitespaces(\"this is my first line\\n\")    == \"this is my first line\"\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_whitespaces('') == '' \nassert     remove_whitespaces(' ') == '' \nassert     remove_whitespaces('\\n\\r') == '' \nassert     remove_whitespaces(' Hello world!') == 'Hello world!' \nassert     remove_whitespaces('  Hello world!') == 'Hello world!' \n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_whitespaces('     ') == '', 'Empty whitespaces are not removed'\nassert     remove_whitespaces('   ') == '', 'Only single whitespaces are removed'\nassert     remove_whitespaces('  ') == '', 'Only single whitespaces are removed'\nassert     remove_whitespaces('\\t') == '', 'Only single whitespaces are removed'\nassert     remove_whitespaces('hello\\t') == 'hello', 'Only single whitespaces are removed'\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_whitespaces('   Hello     World  ') == 'Hello World'\nassert     remove_whitespaces('  Hello     World  ') == 'Hello World'\nassert     remove_whitespaces('Hello World') == 'Hello World'\n\ndef remove_empty_lines(text1):\n    '''\n    Write a function to remove all empty lines from a text.\n    '''\n    pass\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert remove_whitespaces(\" \") == \"\"\nassert remove_whitespaces(\" \") == \"\"\nassert remove_whitespaces(\"   \") == \"\"\nassert remove_whitespaces(\"   \") == \"\"\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_whitespaces('     ') == ''\nassert     remove_whitespaces('') == ''\nassert     remove_whitespaces(' ') == ''\nassert     remove_whitespaces('a b') == 'a b'\nassert     remove_whitespaces('a b c') == 'a b c'\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_whitespaces(\"      test\") == \"test\",'remove_whitespaces wrong'\nassert     remove_whitespaces(\"   test\") == \"test\",'remove_whitespaces wrong'\n\ndef remove_punctuations(text2):\n    '''\n    Write a function to remove all punctuations from the given string.\n    '''\n    pass\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint('You are checking the correctness of loss_amount')\nloss_amount(0,1000)\nloss_amount(1000,0)\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     loss_amount(1000,1000) == 0, 'Correctness check failed for loss_amount'\nassert     loss_amount(1000,1101) == 1, 'Correctness check failed for loss_amount'\nassert     loss_amount(1000,2212) == 2, 'Correctness check failed for loss_amount'\nassert     loss_amount(1000,1300) == 3, 'Correctness check failed for loss_amount'\n\ndef sos_number(sos_number,sos_value): \n    '''\n    Write a function that gives SOS number in a sale if the SOS value has SOS else return 0.\n    '''\n    pass\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     loss_amount(100,20) == 80, '1'\nassert     loss_amount(100,200) == 0, '2'\nassert     loss_amount(100,200) == 0, '3'\nassert     loss_amount(100,0) == 0, '4'\nassert     loss_amount(100,11) == 91, '5'\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     loss_amount(20.0,10) == 10.0, \"Wrong answer. Expected 10.0\"\nassert     loss_amount(20.0,50) == 0, \"Wrong answer. Expected 0.0\"\n\n'''\n2.\nWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\nThe function should first take in actual cost of the product and sale amount as parameters.\n\nThen it should calculate and return the loss amount.\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     loss_amount(actual_cost = 0, sale_amount = 1000) == 0, \\\n        \"Expected: 0, Actual: {}\".format(loss_amount(actual_cost = 0, sale_amount = 1000))\nassert     loss_amount(actual_cost = -10, sale_amount = 1000) == 500, \\\n        \"Expected: 500, Actual: {}\".format(loss_amount(actual_cost = -10, sale_amount = 1000))\nassert     loss_amount(actual_cost = 1000, sale_amount = 1000) == 0, \\\n        \"Expected: 0, Actual: {}\".format(loss_amount(actual_cost = 1000, sale_amount = 1000))\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     loss_amount(200.0,30) == 20\nassert     loss_amount(1.5,2.2) == -0.5\nassert     loss_amount(0,100) == 0\nassert     loss_amount(100,0) == 0\nassert     loss_amount(120,10) == 0\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     loss_amount(10000,10000) == 0\nassert     loss_amount(9000,7000) == 7000\nassert     loss_amount(10000,10000) == 0\n\n\ndef loss_pct(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss percentage on a sale if the given amount has loss else return 0.\n    '''\n    pass\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     loss_amount(10,1) == 0, \"Given Invalid Actual Cost\"\nassert     loss_amount(10,2) == 5, \"Given Invalid Sale Amount\"\nassert     loss_amount(10,3) == 5, \"Given Invalid Sale Amount\"\nassert     loss_amount(10,4) == 5, \"Given Invalid Sale Amount\"\nassert     loss_amount(10,5) == 5, \"Given Invalid Sale Amount\"\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     loss_amount(12,20) == 0, \"Wrong\"\nassert     loss_amount(20,30) == 3, \"Wrong\"\nassert     loss_amount(30,20) == -3, \"Wrong\"\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     loss_amount(50,10)    == 0, \"A loss of 10 should be 0\"\nassert     loss_amount(50,9)    == 9, \"A loss of 9 should be 9\"\nassert     loss_amount(50,99)    == 10, \"A loss of 99 should be 10\"\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sumofFactors(15) == 10\nassert     sumofFactors(16) == 14\nassert     sumofFactors(25) == 20\nassert     sumofFactors(30) == 24\nassert     sumofFactors(40) == 28\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == '__main__' : \n    print(\"Testing sumofFactors :\")\n    print(sumofFactors(6))\n    print(sumofFactors(12))\n    print(sumofFactors(6))\n    print(sumofFactors(16))\n    print(sumofFactors(0))\n    print(sumofFactors(-6))\n    print(sumofFactors(1))\n    print(sumofFactors(11))\n    print(sumofFactors(35))\n    print(sumofFactors(36))\n\n    # --------------------------\n    # 2. Write a python function to check whether a number is prime or not.\n    # --------------------------\n\ndef is_prime(n) : \n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    pass\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(\"sumofFactors:\",sumofFactors(0))\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sumofFactors(4) == 0, \"Input: 4 Output: 4\"\nassert     sumofFactors(1) == 1, \"Input: 1 Output: 1\"\nassert     sumofFactors(8) == 1, \"Input: 8 Output: 1\"\nassert     sumofFactors(34) == 1, \"Input: 34 Output: 1\"\nassert     sumofFactors(48) == 2, \"Input: 48 Output: 2\"\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + sumofFactors(int(n / 2))\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sumofFactors(4) == 2, \"Fail\"\nassert     sumofFactors(5) == 2, \"Fail\"\nassert     sumofFactors(10) == 4, \"Fail\"\nassert     sumofFactors(16) == 4, \"Fail\"\nassert     sumofFactors(15) == 3, \"Fail\"\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    # pass\n    # print(sumofFactors(12))\n    # print(sumofFactors(16))\n    # print(sumofFactors(9))\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    sumofFactors(12) == 12, 'incorrect output'\n    sumofFactors(6) == 7, 'incorrect output'\n    sumofFactors(20) == 20, 'incorrect output'\n    sumofFactors(30) == 21, 'incorrect output'\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sumofFactors(4) == 2\nassert     sumofFactors(15) == 12\n\ndef isPerfectSquare(n) : \n    '''\n    Write a python function to check if a number is perfect square or not.\n    '''\n    pass\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sumofFactors(1) == 0\nassert     sumofFactors(2) == 1\nassert     sumofFactors(3) == 0\nassert     sumofFactors(4) == 2\nassert     sumofFactors(8) == 4\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ntext_match_wordz(\"zebra\")"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_match_wordz(\"test\") == True\nassert     text_match_wordz(\"Test\") == True\nassert     text_match_wordz(\"TEST\") == True\nassert     text_match_wordz(\"Testz\") == False\nassert     text_match_wordz(\"Test_\") == False\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_wordz('This is text with word like z')\nassert not text_match_wordz('This is text with z word like')\nassert not text_match_wordz('This is text with z word like z')\nassert not text_match_wordz('This is text with z word like z')\nassert     text_match_wordz('This is text with z word like z')\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_match_wordz('zebra') == False\nassert     text_match_wordz('zebra zebra') == True\nassert     text_match_wordz('zebra') == False\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wordz('zebra') == True\n    text_match_wor"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef test_text_match_wordz():\n    assert text_match_wordz('this is a test of z') is True, 'The word \"z\" should be found in the text'\n    assert text_match_wordz('this is a test of zz') is False, 'The word \"zz\" should not be found in the text'\n    assert text_match_wordz('this is a test of zzzzzz') is False, 'The word \"zzzzzzz\" should not be found in the text'\n    "
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_wordz('') == True, 'The function should return True.'\nassert     text_match_wordz('aa') == False, 'The function should return False.'\nassert     text_match_wordz('aZ') == True, 'The function should return True.'\nassert     text_match_wordz('Z') == True, 'The function should return True.'\nassert     text_match_wordz('Za') == True, 'The function should return True.'\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_match_wordz('banana')    ==    True\nassert     text_match_wordz('zebra')    ==    False\nassert     text_match_wordz('man')    ==    True\nassert     text_match_wordz('zebra')    ==    True\nassert     text_match_wordz('zebra')    ==    True\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_match_wordz('aZz') == True\nassert     text_match_wordz('zz') == False\nassert     text_match_wordz('zZ') == True\nassert     text_match_wordz('ZZ') == True\nassert     text_match_wordz('aZz') == True\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_wordz('') == False\nassert     text_match_wordz('i love zebra') == True\nassert     text_match_wordz('i love zebra') == True\nassert     text_match_wordz('i love zebra zebra') == True\nassert     text_match_wordz('i love zebra zebra') == True\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_monthnumb_number(2) == False\nassert     check_monthnumb_number(12) == True\nassert     check_monthnumb_number(1) == True\nassert     check_monthnumb_number(2) == True\nassert     check_monthnumb_number(1) == True\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_monthnumb_number(1) == True\nassert     check_monthnumb_number(12) == False\nassert     check_monthnumb_number(3) == False\nassert     check_monthnumb_number(28) == True\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_monthnumb_number(2)    == True,    'incorrectly returned False'\nassert     check_monthnumb_number(12)    == False,    'incorrectly returned True'\nassert     check_monthnumb_number(2)    == True,    'incorrectly returned False'\nassert     check_monthnumb_number(20)    == False,    'incorrectly returned True'\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_monthnumb_number(1) == True, 'Month number 1 has 31 days.'\nassert     check_monthnumb_number(2) == True, 'Month number 2 has 28 days.'\nassert     check_monthnumb_number(3) == False, 'Month number 3 has 31 days.'\nassert     check_monthnumb_number(4) == False, 'Month number 4 has 30 days.'\nassert     check_monthnumb_number(5) == True, 'Month number 5 has 31 days.'\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_monthnumb_number(1) == True\nassert     check_monthnumb_number(2) == False\nassert     check_monthnumb_number(3) == True\nassert     check_monthnumb_number(4) == False\nassert     check_monthnumb_number(5) == True\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_monthnumb_number(1)    ==    True, \"check_monthnumb_number should return True when 1 is given.\"\nassert     check_monthnumb_number(11)    ==    True, \"check_monthnumb_number should return True when 11 is given.\"\nassert     check_monthnumb_number(29)    ==    False, \"check_monthnumb_number should return False when 29 is given.\"\nassert     check_monthnumb_number(30)    ==    True, \"check_monthnumb_number should return True when 30 is given.\"\nassert     check_monthnumb_number(31)    ==    False, \"check_monthnumb_number should return False when 31 is given.\"\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    check_monthnumb_number(12) == True\n    check_monthnumb_number(1) == False\n    check_monthnumb_number(15) == True\n    check_monthnumb_number(16) == False\n    check_monthnumb_number(35) == True\n    check_monthnumb_number(10) == False\n    check_monthnumb_number(32) == False\n    check_monthnumb_number(28) == True\n    check_monthnumb_number(20) == False\n    check_monthnumb_number(41) == True\n    check_monthnumb_number(2) == False\n    check_monthnumb_number(10) == False\n    check_monthnumb_number(11) == True\n    check_monthnumb_number(9) == True\n    check_monthnumb_number(22) == False\n    check_monthnumb_number(23) == False\n    check_monthnumb_number(11) == True\n    check_monthnumb_number(21) == False\n    check_monthnumb_number(31) == False\n    check_monthnumb_number(25) == False\n    check_monthnumb_number(32) == True\n    check_monthnumb_number(12) == False\n    check_monthnumb_number(5) == False\n    check_monthnumb_number(6) == False\n    check_monthnumb_number(5) == False\n    check_monthnumb_number(7) == False\n    check_monthnumb_number(10) == False\n    check_monthnumb_number(30) == False\n    check_monthnumb_number(35) == False\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(27) == False\n    check_monthnumb_number(29) == False\n    check_monthnumb_number(27) == True\n    check_monthnumb_number(31) == False\n    check_monthnumb_number(21) == True\n    check_monthnumb_number(22) == True\n    check_monthnumb_number(8) == False\n    check_monthnumb_number(9) == True\n    check_monthnumb_number(29) == True\n    check_monthnumb_number(30) == True\n    check_monthnumb_number(31) == False\n    check_monthnumb_number(4) == False\n    check_monthnumb_number(12) == False\n    check_monthnumb_number(11) == True\n    check_monthnumb_number(10) == True\n    check_monthnumb_number(25) == False\n    check_monthnumb_number(26) == False\n    check_monthnumb_number(29) == True\n    check_monthnumb_number(27) == True\n    check_monthnumb_number(23) == True\n    check_monthnumb_number(27) == True\n    check_monthnumb_number(29) == False\n    check_monthnumb_number(21) == True\n    check_monthnumb_number(22) == True\n    check_monthnumb_number(21) == True\n    check_monthnumb_number(22) == True\n    check_monthnumb_number(22) == True\n    check_monthnumb_number(22) == True\n    check_monthnumb_number(21) == False\n    check_monthnumb_number(20) == True\n    check_monthnumb_number(21) == True\n    check_monthnumb_number(23) == True\n    check_monthnumb_number(30) == False\n    check_monthnumb_number(24) == False\n    check_monthnumb_number(25) == False\n    check_monthnumb_number(26) == False\n    check_monthnumb_number(28) == False\n    check_monthnumb_number(29) == False\n    check_monthnumb_number(28) == False\n    check_monthnumb_number(31) == False\n    check_monthnumb_number(28) == False\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(29) == True\n    check_monthnumb_number(30) == True\n    check_monthnumb_number(31) == False\n    check_monthnumb_number(30) == False\n    check_monthnumb_number(31) == False\n    check_monthnumb_number(31) == False\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(31) == False\n    check_monthnumb_number(31) == False\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(31) == False\n    check_monthnumb_number(31) == False\n    check_monthnumb_number(31) == False\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(31) == False\n    check_monthnumb_number(31) == False\n    check_monthnumb_number(31) == False\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(31) == False\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(31) == False\n    check_monthnumb_number(31) == False\n    check_monthnumb_number(31) == False\n    check_monthnumb_number(31) == False\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(31) == True"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_monthnumb_number(6) == True,'returns True'\nassert     check_monthnumb_number(7) == False,'returns False'\nassert     check_monthnumb_number(3) == True,'returns True'\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_monthnumb_number(2) == True\nassert     check_monthnumb_number(31) == True\nassert     check_monthnumb_number(12) == False\nassert     check_monthnumb_number(100) == False"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     reverse_string_list([])         == []\nassert     reverse_string_list(['a','b','c']) == ['c','b','a']\nassert     reverse_string_list(['b', 'c', 'a']) == ['a', 'b', 'c']\nassert     reverse_string_list(['a', 'b', 'c', 'd', 'e']) == ['e', 'd', 'c', 'b', 'a']\nassert     reverse_string_list(['b', 'c', 'a', 'd', 'e']) == ['e', 'd', 'c', 'b', 'a']\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     reverse_string_list(['a','b','c']) == ['c','b','a']\nassert     reverse_string_list(['abc','def','ghi','jkl']) == ['jkl','ghi','def','abc']\nassert     reverse_string_list(['hello','world']) == ['world','hello']"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     reverse_string_list([\"a\", \"b\", \"c\", \"d\"]) == [\"d\", \"c\", \"b\", \"a\"], \"Should return ['d', 'c', 'b', 'a']\"\nassert     reverse_string_list([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]) == ['f', 'g', 'e', 'd', 'c', 'b', 'a'], \"Should return ['f', 'g', 'e', 'd', 'c', 'b', 'a']\"\nassert     reverse_string_list([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]) == ['h', 'g', 'f', 'e', 'd', 'c', 'b', 'a'], \"Should return ['h', 'g', 'f', 'e', 'd', 'c', 'b', 'a']\"\nassert     reverse_string_list([\"a\", \"b\", \"c\", \"d\"]) == ['d', 'c', 'b', 'a'], \"Should return ['d', 'c', 'b', 'a']\"\nassert     reverse_string_list([\"a\"]) == [\"a\"], \"Should return ['a']\"\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     reverse_string_list(['hello', 'world']) == ['world', 'hello']\nassert     reverse_string_list(['hello','', 'world', '!']) == [' ','', 'hello', '!']\nassert     reverse_string_list(['hello', 'world', '!']) == ['world', 'hello', '!']\nassert     reverse_string_list([]) == []\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef check_list_contents(list_a, list_b):\n    '''\n    Write a function to check if two lists are equal. The function will take two lists and return True if they contain the same values in the same order.\n\n    Consider a= [\"apple\", \"orange\", \"banana\"]\n    b = [\"apple\", \"banana\", \"orange\"]\n    '''\n    pass\n\nassert \n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     reverse_string_list([\"Test\",\"Hola\",\"Test\"]) == [\"Test\",\"Hola\",\"Test\"], \"Wrong\"\nassert     reverse_string_list([\"\"]) == [\"\"], \"Wrong\"\nassert     reverse_string_list([\"\"]) == [\"\"], \"Wrong\"\nassert     reverse_string_list([]) == [], \"Wrong\"\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef reverse_string_list_2(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values in one line of code.\n    '''\n    pass\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     reverse_string_list([\"abc\", \"def\", \"ghi\"]) == [\"def\", \"ghi\", \"abc\"]\nassert     reverse_string_list([1,2,3]) == [3,2,1]\nassert     reverse_string_list([]) == []\n\ndef reverse_string_by_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    pass\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Find_Min([]) == []\nassert     Find_Min([1,2,3,4,5]) == [1,2,3,4]\nassert     Find_Min([-1,-2,-3,-4,-5]) == [-1,-2,-3,-4]\nassert     Find_Min([-1,-2,-3,4,5]) == [-1,-2,-3,4]\nassert     Find_Min([]) == []\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Find_Min([]) == None\nassert     Find_Min([1]) == None\nassert     Find_Min([1,2]) == (0, 1)\nassert     Find_Min([1,2,3]) == (1, 1)\nassert     Find_Min([1,2,3,4,5]) == (3, 4)\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     Find_Min([1,2,3,4,5,6,7,8]) == [1,2,3,4,5,6,7]\nassert     Find_Min([]) == []\nassert Find_Min([1]) == [1]\nassert Find_Min([1,1]) == [1]\nassert Find_Min([1,1,1]) == [1]\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nFind_Min([1, 2, 3]) == [1, 2]\nFind_Min([1, 2, 3, 4]) == [1, 2]\nFind_Min([1, 2, 3, 4, 5]) == [1, 2]\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Find_Min([[1,2], [3,4], [2,1], [5,6]]) == 2, Find_Min([[1,2], [3,4], [2,1], [5,6]])\nassert Find_Min([[1,2,3], [2,1,3], [3,1,2]]) == 3, Find_Min([[1,2,3], [2,1,3], [3,1,2]])\nassert Find_Min([[1,2,3,4,5], [3,1,2,4,5], [1,2,3,4,5], [4,5,6,7,8], [5,6,7,8,9]]) == 1, Find_Min([[1,2,3,4,5], [3,1,2,4,5], [1,2,3,4,5], [4,5,6,7,8], [5,6,7,8,9]])\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Find_Min([]) == (None, 0)\nassert     Find_Min([1]) == (0, 1)\nassert     Find_Min([1, 2, 3]) == (2, 3)\nassert     Find_Min([1, 2, 3, 4, 5, 6, 7]) == (5, 7)\nassert     Find_Min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (2, 8)\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Find_Min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == 16, \"Should return 16\"\nassert     Find_Min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 5, \"Should return 5\"\nassert     Find_Min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) == 17, \"Should return 17\"\nassert     Find_Min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == 18, \"Should return 18\"\nassert     Find_Min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 19, \"Should return 19\"\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Find_Min([1,5,9,10]) == [9,10], Find_Min([1,5,9,10])\nassert     Find_Min([4,5,9,10]) == [4,5], Find_Min([4,5,9,10])\nassert     Find_Min([0]) == [0], Find_Min([0])\nassert     Find_Min([1]) == [1], Find_Min([1])\nassert     Find_Min([3,4,5,6,7,8,9]) == [3,4,5,6], Find_Min([3,4,5,6,7,8,9])\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Find_Min([1,2,3,4,5]) == [1,2,3,4]\nassert     Find_Min([1,2,3,4,5,6]) == [1,2,3,4]\nassert     Find_Min([1,2,3,4,5,6,7]) == [1,2,3,4]\nassert     Find_Min([1,2,3,4,5,6,7,8]) == [1,2,3,4]\nassert     Find_Min([1,2,3,4,5,6,7,8,9]) == [1,2,3,4]\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     rectangle_area(3,4) == 6\nassert     rectangle_area(6,4) == 12\n\n'''\nWrite a function to find the area of a circle.\n'''"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     rectangle_area(5,5) == 25, 'Wrong result!'\nprint('Well done!')"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     rectangle_area(5,10) == 50\nassert    rectangle_area(7,7) == 21\nassert    rectangle_area(4,2) == 16\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    rectangle_area(2, 2) == 4\n    rectangle_area(1, 2) == 1\n    rectangle_area(1, 1) == 1\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert \nassert rectangle_area(1,2) == 2\nassert rectangle_area(3,4) == 4\nassert rectangle_area(5,5) == 5\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     rectangle_area(2,3) == 6\nassert     rectangle_area(3,3) == 9\n\ndef triangle_area(a,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    pass\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rectangle_area(2,2) == 4\nassert rectangle_area(2,1) == 2\nassert rectangle_area(1,2) == 2\nassert rectangle_area(1,1) == "
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    rectangle_area(10,20)==100\n    rectangle_area(10,20)==100\n\nassert \n    rectangle_area(4,5)==25\n    rectangle_area(4,5)==25"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_uppercase(\"CodingDjango\")     == \"Cdgnddjango\"\nassert     remove_uppercase(\"abBc\")     == \"abbc\"\nassert     remove_uppercase(\"cCdEf\")     == \"cdef\"\nassert     remove_uppercase(\"CDEf\")     == \"\"\nassert     remove_uppercase(\"AB\")     == \"\"\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_uppercase(\"HELLO!\") == \"hello!\"\nassert remove_uppercase(\"AAaA\") == \"a\"\nassert remove_uppercase(\"Hello, World!\") == \"Hello, World!\"\nassert remove_uppercase(\"AAaaA\") == \"a\"\nassert remove_uppercase(\"AAaaA!\") == \"a\"\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_uppercase('') == ''\nassert     remove_uppercase('Hola') == 'Hola'\nassert     remove_uppercase('Hello') == 'Hello'\nassert     remove_uppercase('HELLO') == 'HELLO'\nassert     remove_uppercase('HELLO!!') == 'HELLO!!'\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_uppercase(\"G\") == \"g\"\nassert     remove_uppercase(\"M\") == \"m\"\nassert     remove_uppercase(\"\") == \"\"\nassert     remove_uppercase(\"G\") == \"\"\nassert     remove_uppercase(\"g\") == \"\"\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n'''\nWrite a function to check whether a string contains all of the following substrings:\n- A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z\n- abcdefghijklmnopqrstuvwxyz\n- abcddefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\n- 123456789\n- 0\n- --\n'''\ndef check_all_substrings(str1):\n    '''\n    Write a function to check whether a string contains all of the following substrings:\n    - A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z\n    - abcdefghijklmnopqrstuvwxyz\n    - abcddefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\n    - 123456789\n    - 0\n    - --\n    '''\n    pass\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nremove_uppercase('abcdef') == 'abd'\nremove_uppercase('ABCDEF') == 'ABD'\nremove_uppercase('AbCdEf') == 'abd'\nremove_uppercase('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'ABCDEGHIJKLMNOPQRSTUVWXYZ'\nremove_uppercase('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz') == 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(remove_uppercase('remoVE_UPPERcASE'))\nprint(remove_uppercase('REMOVE_UPPERcASE'))\nprint(remove_uppercase('remoVE_UPPERcASE'))\nprint(remove_uppercase('REMOVE_UPPERcASE'))\nprint(remove_uppercase('REMOVE_UPPERcASE'))\n\n\ndef remove_spaces(str1):\n    '''\n    Write a function to remove all spaces from a given string.\n    '''\n    pass\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_uppercase(\"hello world\") == \"hello world\"\nassert     remove_uppercase(\"HELLO WORLD\") == \"hello world\"\nassert     remove_uppercase(\"hi\") == \"hi\"\nassert     remove_uppercase(\"hi, this is my test\") == \"hi, this is my test\"\nassert     remove_uppercase(\"\") == \"\"\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nremove_uppercase('PyTHON') == 'PYTHON'\n\nassert \nremove_uppercase('pythoN') == 'pythoN'\n\nassert \nremove_uppercase('PYTHON') == 'PYTHON'\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nassert remove_uppercase(\"LEMON\") == \"lEmOn\"\nassert remove_uppercase(\"Python\") == \"thOn\"\nassert remove_uppercase(\"\") == \"\"\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Extract([1,2,3]) == 1\nassert     Extract([[1,2],[3,4]]) == 1\nassert     Extract([[1,2,3],[4,5,6]]) == 1\nassert     Extract([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]]) == 1\nassert     Extract([[1,2,3,4],[5,6,7,8,9],[10,11,12,13,14],[15,16,17,18,19]]) == 1\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Extract([[1, 2], ['a', 'b'], ['c', 'd']]) == [1, 'a', 'c']\nassert     Extract([['a'], ['b'], ['c']]) == ['a', 'b', 'c']\nassert     Extract([['a'], ['b'], ['c']]) == ['a', 'b', 'c']\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     Extract(['abc', ['def', 'ghi'], 'jkl', ['mno', 'pqr']]) == 'abc'\nassert     Extract(['abc', ['def', 'ghi'], 'jkl', ['mno', 'pqr']]) == 'def'\nassert     Extract(['abc', ['def', 'ghi'], 'jkl', ['mno', 'pqr']]) == 'ghi'\nassert     Extract(['abc', ['def', 'ghi'], 'jkl', ['mno', 'pqr']]) == 'ghi'\nassert     Extract(['abc', ['def', 'ghi'], 'jkl', ['mno', 'pqr']]) == 'jkl'\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Extract([[1,2,3],[4,5,6]]) == 1, \"Incorrect\"\nassert     Extract([[1,2,3,4,5],[6,7,8,9,10]]) == 1, \"Incorrect\"\nassert     Extract([[1,2,3,4,5,6]]) == 1, \"Incorrect\"\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Extract([[1,2,3], [4,5,6], [7,8,9]]) == [1,4,7], \"Wrong\"\nassert     Extract([[1,2,3], ['a','b','c'], ['d','e','f']]) == ['a','d'], \"Wrong\"\nassert     Extract([[1,2,3], [4,5,6], ['a','b','c']]) == ['a'], \"Wrong\"\nassert     Extract([[1,2,3], 'd','e','f']) == ['d'], \"Wrong\"\nassert     Extract([[1,2,3], [4,5,6]]) == [], \"Wrong\"\nprint(\"You are good. You have passed all the test cases\""
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Extract([[1,2,3],[4,5,6]]) == 1\nassert     Extract([[1],[2],[3]]) == 1\nassert     Extract([[1,2,3],[4,5,6]]) == 1\nassert     Extract([[1],[2],[3]]) == 1\nassert     Extract([[1,2,3],[4,5,6]]) == 1\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Extract([[1,2,3],[3,4,5],[5,6,7]]) == [1,3,5]\nassert Extract([[1,2,3],[3,4,5],[5,6,7]]) == [1,3,5]\nassert Extract([[1,2,3],[3,4,5],[5,6,7]]) == [1,3,5]\nassert Extract([[1,2,3],[3,4,5],[5,6,7]]) == [1,3,5]\nassert Extract([[1,2,3],[3,4,5],[5,6,7]]) == [1,3,5]\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     (Extract([[1,2,3,4,5]]) == 1) == True, 'Extract(..., [1,2,3,4,5]) failed'\nassert     (Extract([[1,2,3,4,5], [6,7,8,9,10]]) == 1) == True, 'Extract(..., [1,2,3,4,5,6,7,8,9,10]) failed'\nassert     (Extract([[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15]]) == 1) == True, 'Extract(..., [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) failed'\nassert     (Extract([[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15], [16,17,18,19,20]]) == 1) == True, 'Extract(..., [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) failed'\nassert     (Extract([[1,2,3,4,5], [6,7,8,9,10], [11,12,13,14,15], [16,17,18,19,20], [21,22,23,24,25]]) == 1) == True, 'Extract(..., [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) failed'\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Extract([[1,2],[3,4],[5,6],[7,8]]) == (1,3,5,7), 'first elem in each sublist'\nassert     Extract([[1,2,3],[4,5,6],[7,8,9]]) == (1,4,7), 'first elem in each sublist'\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    pass"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     upper_ctr('aBcDe') == 3\nassert     upper_ctr('abcdef') == 6\nassert     upper_ctr('ABCDEF') == 6\nassert     upper_ctr('ABCABC') == 3\nassert     upper_ctr('ABCD') == 1\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     upper_ctr(\"abcDEF\") == 6\nassert     upper_ctr(\"HELLO\") == 7\nassert     upper_ctr(\"hello\") == 4\nassert     upper_ctr(\"\") == 0\nassert     upper_ctr(None) == 0\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     upper_ctr('I am from India') == 4\nassert     upper_ctr('I AM from India') == 4\nassert     upper_ctr('I AM from India') == 4\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    upper_ctr('') == 0\nassert\n    upper_ctr('A') == 1\nassert\n    upper_ctr('Aa') == 2\nassert\n    upper_ctr('   ') == 0\nassert\n    upper_ctr('  ') == 0\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     upper_ctr('cAmE') == 3\nassert     upper_ctr('c') == 1\nassert     upper_ctr('C') == 1\nassert     upper_ctr('c') == 1\nassert     upper_ctr('') == 0\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert upper_ctr('hey hey hey') == 3\nassert upper_ctr('HEY HEY HEY') == 3\nassert upper_ctr('hi hi hi') == 3\nassert upper_ctr('hey HEY') == 1\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     upper_ctr('foobar') == 3\nassert     upper_ctr('FOOBar') == 4\nassert     upper_ctr('FooBar') == 5\nassert     upper_ctr('FooBarfoobar') == 7\nassert     upper_ctr('foobarfoobar') == 4\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    upper_ctr(\"Shruti\") == 4\nassert \n    upper_ctr(\"SHRUTI\") == 4\nassert \n    upper_ctr(\"SHruti\") == 4\nassert \n    upper_ctr(\"shruti\") == 4\nassert \n    upper_ctr(\"SHRUTI\") == 4\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nupper_ctr(\"abcd\") == 0\nupper_ctr(\"ABCD\") == 2\nupper_ctr(\"abcD\") == 3\nupper_ctr(\"abc\") == 1\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     combinations_list(['a', 'b', 'c', 'd']) == ['a', 'b', 'c', 'd']\nassert     combinations_list([]) == []\nassert     combinations_list(['a', 'b', 'c', 'd', 'e']) == ['a', 'b', 'c', 'd', 'e']\nassert     combinations_list(['a', 'b', 'c', 'd', 'e'], 'abc') == ['a', 'b', 'c', 'd', 'e']\nassert     combinations_list(['a', 'b', 'c', 'd', 'e'], 'abd') == ['a', 'b', 'd', 'e']\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     combinations_list([1,2,3]) == [[1,2,3]]\nassert     combinations_list([1,2,3,4]) == [[1,2,3],[1,3,2],[1,4,2],[1,3,4],[1,2,4],[2,3,4],[2,4,3],[2,4,3],[3,4,2],[3,2,1],[3,2,4],[3,4,1],[3,4,2],[4,2,1],[4,2,3],[4,2,4],[4,1,3],[4,1,2],[4,3,1],[4,3,2],[4,3,4],[4,1,2,3],[4,1,3,2],[4,1,2,4],[4,1,3,2],[4,1,2,4],[4,1,3,4],[4,2,3,1],[4,2,3,2],[4,2,3,4],[4,2,4,1],[4,2,4,2],[4,2,4,3],[4,2,4,4],[4,3,4,1],[4,3,4,2],[4,3,4,3],[4,3,4,4],[4,4,2,1],[4,4,2,2],[4,4,2,3],[4,4,2,4],[4,4,1,3],[4,4,1,2],[4,4,1,4],[4,4,2,4],[4,4,3,2],[4,4,3,1],[4,4,3,4],[4,4,4,1],[4,4,4,2],[4,4,4,3],[4,4,4,4]]\nassert     combinations_list([1,2,3,4,5]) == [[1,2,3,4,5],[1,2,3,5,4],[1,2,4,3,5],[1,2,4,5,3],[1,3,2,4,5],[1,3,2,5,4],[1,3,4,2,5],[1,3,4,5,2],[1,4,2,3,5],[1,4,2,3,5],[1,4,2,5,3],[1,4,5,2,3],[1,4,5,2,3],[1,5,2,3,4],[1,5,2,3,4],[1,5,3,2,4],[1,5,3,2,4],[1,5,3,4,2],[1,5,3,4,2],[1,5,4,2,3],[1,5,4,2,3],[1,5,4,3,2],[1,5,4,3,2]]\nassert     combinations_list([1,2,3,4,5,6]) == [[1,2,3,4,5,6],[1,2,3,6,5,4],[1,2,4,3,5,6],[1,2,4,5,3,6],[1,2,4,5,6,3],[1,3,2,4,5,6],[1,3,2,6,5,4],[1,3,4,2,5,6],[1,3,4,5,2,6],[1,3,4,5,6,2],[1,4,2,3,5,6],[1,4,2,3,6,5],[1,4,2,5,3,6],[1,4,5,2,3,6],[1,4,5,2,6,3],[1,4,5,3,2,6],[1,4,5,3,6,2],[1,5,2,3,4,6],[1,5,2,3,6,4],[1,5,2,4,3,6],[1,5,2,4,6,3],[1,5,3,2,4,6],[1,5,3,2,6,4],[1,5,3,4,2,6],[1,5,3,4,6,2],[1,5,4,2,3,6],[1,5,4,2,6,3],[1,5,4,3,2,6],[1,5,4,3,6,2],[1,5,4,6,2,3],[1,5,6,2,3,4],[1,5,6,2,4,3],[1,5,6,3,2,4],[1,6,2,3,4,5],[1,6,2,3,5,4],[1,6,2,4,3,5],[1,6,3,2,4,5],[1,6,3,5,2,4],[1,6,4,2,3,5],[1,6,4,2,5,3],[1,6,4,3,2,5],[1,6,4,3,5,2],[1,6,4,5,2,3],[1,6,4,5,3,2],[1,6,5,2,3,4],[1,6,5,2,4,3],[1,6,5,3,2,4],[2,3,4,5,6,1],[2,3,4,6,5,1],[2,3,5,4,6,1],[2,3,5,6,4,1],[2,4,5,3,6,1],[2,4,5,3,1,6],[2,4,5,6,3,1],[2,4,6,5,3,1],[2,5,6,4,3,1],[2,5,6,4,1,3],[2,5,6,1,3,4],[2,5,6,1,4,3],[2,6,5,3,4,1],[2,6,5,3,1,4],[2,6,5,4,1,3],[2,6,5,4,3,1]]\nassert     combinations_list([1,2,3,4,5,6,7]) == [[1,2,3,4,5,6,7],[1,2,3,7,6,5,4],[1,2,4,3,5,6,7],[1,2,4,5,3,6,7],[1,2,4,5,7,3,6],[1,2,4,6,3,5,7],[1,2,4,6,7,3,5],[1,3,2,4,5,6,7],[1,3,2,4,6,7,5],[1,3,4,2,5,6,7],[1,3,4,5,2,6,7],[1,3,4,5,6,7,2],[1,3,4,6,2,5,7],[1,3,4,6,7,5,2],[1,3,4,6,7,2,5],[1,3,4,7,2,5,6],[1,3,4,7,2,6,5],[1,3,4,7,5,2,6],[1,3,4,7,5,6,2],[1,3,5,2,4,6,7],[1,3,5,2,6,7,4],[1,3,5,2,6,7,3],[1,3,5,7,2,4,6],[1,3,5,7,2,4,6],[1,3,5,7,3,2,6],[1,3,5,7,3,6,2],[1,3,5,7,6,2,4],[1,3,5,7,6,4,2],[1,3,5,7,6,4,3],[1,3,5,7,6,7,2],[1,3,6,2,4,7,5],[1,3,6,2,7,5,4],[1,3,6,2,7,5,3],[1,3,6,7,2,4,5],[1,3,6,7,2,4,5],[1,3,6,7,5,2,4],[1,3,6,7,5,4,2],[1,3"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     combinations_list([1,2,3]) == [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]], \"Wrong\"\nassert     combinations_list([]) == [], \"Wrong\"\nassert     combinations_list([\"a\",\"b\",\"c\"]) == [[\"a\",\"b\",\"c\"],[\"a\",\"c\",\"b\"],[\"b\",\"a\",\"c\"],[\"b\",\"c\",\"a\"],[\"c\",\"a\",\"b\"],[\"c\",\"b\",\"a\"]], \"Wrong\"\nassert     combinations_list([\"a\",\"b\",\"c\",\"d\"]) == [[\"a\",\"b\",\"c\",\"d\"],[\"a\",\"b\",\"d\",\"c\"],[\"a\",\"c\",\"b\",\"d\"],[\"a\",\"c\",\"d\",\"b\"],[\"b\",\"a\",\"c\",\"d\"],[\"b\",\"a\",\"d\",\"c\"],[\"b\",\"c\",\"a\",\"d\"],[\"b\",\"c\",\"d\",\"a\"],[\"c\",\"a\",\"b\",\"d\"],[\"c\",\"a\",\"d\",\"b\"],[\"c\",\"b\",\"a\",\"d\"],[\"c\",\"b\",\"d\",\"a\"],[\"c\",\"d\",\"a\",\"b\"],[\"c\",\"d\",\"b\",\"a\"],[\"d\",\"a\",\"b\",\"c\"],[\"d\",\"a\",\"c\",\"b\"],[\"d\",\"b\",\"a\",\"c\"],[\"d\",\"b\",\"c\",\"a\"],[\"d\",\"c\",\"a\",\"b\"],[\"d\",\"c\",\"b\",\"a\"]], \"Wrong\"\nassert     combinations_list([\"a\",\"b\",\"c\",\"d\"]) == [[\"a\",\"b\",\"c\",\"d\"]], \"Wrong\"\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     combinations_list(['a', 'b', 'c', 'd']) == [['a', 'b', 'c'], ['a', 'b', 'd'], ['a', 'c', 'd'], ['a', 'd', 'c'], ['b', 'c', 'd'], ['b', 'd', 'c'], ['c', 'd', 'b']]\nassert     combinations_list(['a', 'b', 'c', 'd', 'e', 'f']) == [['a', 'b', 'c'], ['a', 'b', 'd'], ['a', 'b', 'e'], ['a', 'b', 'f'], ['a', 'c', 'd'], ['a', 'c', 'e'], ['a', 'c', 'f'], ['a', 'd', 'e'], ['a', 'd', 'f'], ['a', 'e', 'f'], ['b', 'c', 'd'], ['b', 'c', 'e'], ['b', 'c', 'f'], ['b', 'd', 'e'], ['b', 'd', 'f'], ['b', 'e', 'f'], ['c', 'd', 'e'], ['c', 'd', 'f'], ['c', 'e', 'f'], ['d', 'e', 'f']]\nassert     combinations_list(['a', 'b', 'c', 'd', 'e', 'f', 'g']) == [['a', 'b', 'c'], ['a', 'b', 'd'], ['a', 'b', 'e'], ['a', 'b', 'f'], ['a', 'b', 'g'], ['a', 'c', 'd'], ['a', 'c', 'e'], ['a', 'c', 'f'], ['a', 'c', 'g'], ['a', 'd', 'e'], ['a', 'd', 'f'], ['a', 'd', 'g'], ['a', 'e', 'f'], ['a', 'e', 'g'], ['a', 'f', 'g'], ['b', 'c', 'd'], ['b', 'c', 'e'], ['b', 'c', 'f'], ['b', 'c', 'g'], ['b', 'd', 'e'], ['b', 'd', 'f'], ['b', 'd', 'g'], ['b', 'e', 'f'], ['b', 'e', 'g'], ['b', 'f', 'g'], ['c', 'd', 'e'], ['c', 'd', 'f'], ['c', 'd', 'g'], ['c', 'e', 'f'], ['c', 'e', 'g'], ['c', 'f', 'g'], ['d', 'e', 'f'], ['d', 'e', 'g'], ['d', 'f', 'g'], ['e', 'f', 'g']]\nassert     combinations_list(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']) == [['a', 'b', 'c'], ['a', 'b', 'd'], ['a', 'b', 'e'], ['a', 'b', 'f'], ['a', 'b', 'g'], ['a', 'c', 'd'], ['a', 'c', 'e'], ['a', 'c', 'f'], ['a', 'c', 'g'], ['a', 'd', 'e'], ['a', 'd', 'f'], ['a', 'd', 'g'], ['a', 'e', 'f'], ['a', 'e', 'g'], ['a', 'f', 'g'], ['a', 'g', 'h'], ['b', 'c', 'd'], ['b', 'c', 'e'], ['b', 'c', 'f'], ['b', 'c', 'g'], ['b', 'd', 'e'], ['b', 'd', 'f'], ['b', 'd', 'g'], ['b', 'e', 'f'], ['b', 'e', 'g'], ['b', 'f', 'g'], ['b', 'g', 'h'], ['c', 'd', 'e'], ['c', 'd', 'f'], ['c', 'd', 'g'], ['c', 'e', 'f'], ['c', 'e', 'g'], ['c', 'f', 'g'], ['c', 'g', 'h'], ['d', 'e', 'f'], ['d', 'e', 'g'], ['d', 'f', 'g'], ['d', 'g', 'h'], ['e', 'f', 'g'], ['e', 'f', 'g'], ['e', 'g', 'h'], ['f', 'g', 'h']]\nassert     combinations_list(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']) == [['a', 'b', 'c'], ['a', 'b', 'd'], ['a', 'b', 'e'], ['a', 'b', 'f'], ['a', 'b', 'g'], ['a', 'c', 'd'], ['a', 'c', 'e'], ['a', 'c', 'f'], ['a', 'c', 'g'], ['a', 'd', 'e'], ['a', 'd', 'f'], ['a', 'd', 'g'], ['a', 'e', 'f'], ['a', 'e', 'g'], ['a', 'f', 'g'], ['a', 'g', 'h'], ['a', 'i', 'h'], ['b', 'c', 'd'], ['b', 'c', 'e'], ['b', 'c', 'f'], ['b', 'c', 'g'], ['b', 'd', 'e'], ['b', 'd', 'f'], ['b', 'd', 'g'], ['b', 'e', 'f'], ['b', 'e', 'g'], ['b', 'f', 'g'], ['b', 'g', 'h'], ['b', 'i', 'h'], ['c', 'd', 'e'], ['c', 'd', 'f'], ['c', 'd', 'g'], ['c', 'e', 'f'], ['c', 'e', 'g'], ['c', 'f', 'g'], ['c', 'g', 'h'], ['c', 'i', 'h'], ['d', 'e', 'f'], ['d', 'e', 'g'], ['d', 'f', 'g'], ['d', 'g', 'h'], ['d', 'i', 'h'], ['e', 'f', 'g'], ['e', 'f', 'g'], ['e', 'g', 'h'], ['f', 'g', 'h'], ['i', 'h']]\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     combinations_list([1, 2, 3, 4]) == [[1, 2, 3], [2, 3, 4], [3, 4, 1], [4, 1, 2], \n                                                [1, 4, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [4, 2, 1], \n                                                [1, 2, 4], [1, 3, 2], [2, 1, 4], [3, 2, 1], [4, 1, 3], \n                                                [1, 4, 3], [2, 3, 1], [3, 1, 4], [4, 3, 2], [1, 3, 4], \n                                                [2, 4, 1], [3, 2, 1], [4, 1, 3]]\nassert not combinations_list([1, 2, 3, 4, 5])\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     combinations_list([1, 2, 3]) == [(1, 2, 3)]\nassert     combinations_list([1, 2, 3]) == [(1, 2, 3)]\nassert     combinations_list([1, 2, 3]) == [(1, 2, 3)]\nassert     combinations_list([1, 2, 3]) == [(1, 2, 3)]\nassert     combinations_list([1, 2, 3, 4]) == [(1, 2, 3), (1, 2, 4), (1, 3, 2), (1, 3, 4), (1, 4, 2), (1, 4, 3), (2, 1, 3), (2, 1, 4), (2, 3, 1), (2, 3, 4), (2, 4, 1), (2, 4, 3), (3, 1, 2), (3, 1, 4), (3, 2, 1), (3, 2, 4), (3, 4, 1), (3, 4, 2), (4, 1, 2), (4, 1, 3), (4, 2, 1), (4, 2, 3), (4, 3, 1), (4, 3, 2)]\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef combinations_with_replacement_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list. \n    The elements of the list should be assumed to be unique.\n    '''\n    pass\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_subarray_product([2,-1,2,6,-3]) == 6, \"Wrong output\"\nassert     max_subarray_product([-2,-1,2,6,-3]) == -6, \"Wrong output\"\nassert     max_subarray_product([-2,-1,2]) == 0, \"Wrong output\"\nassert     max_subarray_product([-2,-1,2,6]) == 6, \"Wrong output\"\nassert     max_subarray_product([-2,-1,2,1]) == 2, \"Wrong output\"\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_subarray_product([2,3,-2,4]) == 6\nassert     max_subarray_product([2,3,-2]) == 3\nassert     max_subarray_product([-1,-1,-1,-1]) == -1\nassert     max_subarray_product([2,3,4,-1]) == 24\nassert     max_subarray_product([-1,-1,-1]) == -1\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_subarray_product([-1,-2,-3,-4]) == 24\nassert     max_subarray_product([-1,2,-3,4]) == 24\nassert     max_subarray_product([-1,2,3,4]) == 24\nassert     max_subarray_product([-1,-2,-3]) == -1\nassert     max_subarray_product([-1,2,-3,4]) == 24\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == '__main__':\n    # print(max_subarray_product([-2, 3, -4, -6, -2]))\n    # print(max_subarray_product([-2, 3, -4, -6, 2]))\n    print(max_subarray_product([-2, 3, -4, 6, 2]))\n    print(max_subarray_product([-2, -3, -4, -6, -2]))\n    print(max_subarray_product([-2, -3, -4, 6, 2]))\n    print(max_subarray_product([-2, -3, -4, 6, 2, -4])"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_subarray_product([-2,3,-4,-1,1,4,2,5]) == 5\nassert     max_subarray_product([-2,1,4,2,-5,4,5,2,-3]) == -1\nassert     max_subarray_product([-2,1,-2,4,2]) == 8\nassert     max_subarray_product([-2,3,-4,1,4,2,5]) == -1\nassert     max_subarray_product([-2,1,4,2,-5,4,5,2,-3,7,8,9]) == -1\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_subarray_product([-1,-2,3,-4,5]) == 120\nassert     max_subarray_product([-1,-2,3,-4,5,-6,7,8,9,10]) == 0\nassert     max_subarray_product([-1,2]) == 2\nassert     max_subarray_product([-1,2,-3,4]) == 0\nassert     max_subarray_product([-1,2,3,4,-5,6,-7,8,-9,10]) == 60\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_value({'a': 1, 'b': 1, 'c': 1}, \n                     'a') == False, 'First'\nassert     check_value({'a': 1, 'b': 1, 'c': 1}, \n                     'b') == False, 'Second'\nassert     check_value({'a': 1, 'b': 1, 'c': 1}, \n                     'c') == False, 'Third'\nassert     check_value({'a': 1, 'b': 1, 'c': 1}, \n                     'd') == True, 'Fourth'\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_value({'a': 1, 'b': 2, 'c': 3}, 1)\nassert     not check_value({'a': 1, 'b': 2, 'c': 3}, 2)\nassert     not check_value({'a': 1, 'b': 2, 'c': 3}, 3)\nassert     check_value({'a': 1, 'b': 2, 'c': 3}, 4)"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert check_value({\"1\":1, \"2\":2, \"3\":3}, 1) == True, \"The value is same\"\nassert check_value({\"1\":1, \"2\":2, \"3\":3}, 2) == False, \"The value is different\"\nassert check_value({\"1\":1, \"2\":2, \"3\":3}, 3) == True, \"The value is same\"\nassert check_value({\"1\":1, \"2\":2, \"3\":3}, 4) == False, \"The value is different\"\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_value({\"a\": \"b\"}, 1) == False, \"pass\"\nassert     check_value({\"a\": \"b\"}, 1) == True, \"fail\"\nassert     check_value({\"a\": \"b\"}, 1) == True, \"fail\"\nassert     check_value({\"a\": \"b\"}, 1) == True, \"fail\""
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_value({\"a\": 1}, 1) == True, \"check_value doesn't work\"\nassert     check_value({\"a\": 1, \"b\": 1}, 1) == False, \"check_value doesn't work\"\nassert     check_value({\"a\": 1, \"b\": 2}, 1) == True, \"check_value doesn't work\"\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_value({1: 1, 2: 1}, False) == True, \"Expected True, got: {}\".format(check_value({1: 1, 2: 1}, False))\nassert     check_value({1: 1, 2: 1}, True) == True, \"Expected True, got: {}\".format(check_value({1: 1, 2: 1}, True))\nassert     check_value({1: 2, 2: 1}, False) == False, \"Expected False, got: {}\".format(check_value({1: 2, 2: 1}, False))\nassert     check_value({1: 2, 2: 1}, True) == False, \"Expected False, got: {}\".format(check_value({1: 2, 2: 1}, True))\n\n'''\nSince the dictionary contains only unique keys, \nall the values have to be equal to 1, so we can just count the number of occurences of each value and check whether each count is equal to 1. \nIf they are equal, then we can return True, else we can return False.\n'''\ndef check_value(dict):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_value({\"Apple\": \"Mango\"}, \"Apple\") == True, \"Failed\"\nassert     check_value({\"Apple\": \"Mango\"}, \"Pineapple\") == False, \"Failed\""
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_value({1:1, 2:2}, 2) == True, \"Value check fail.\"\nassert     check_value({1:1, 2:1}, 2) == False, \"Value check fail.\"\nassert     check_value({1:1, 2:2}, 1) == True, \"Value check fail.\"\nassert     check_value({1:1, 2:1}, 1) == False, \"Value check fail.\"\n\nprint(\"check_value passed.\")\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_value({\"hello\": 1}, 1) == True\nassert     check_value({\"hello\": 1}, 2) == False\nassert     check_value({\"hello\": 1}, 2.0) == True\nassert     check_value({\"hello\": 1}, \"world\") == False\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_value({1:1, 2:1, 3:1, 4:1, 5:1}, 1) == True, \"Error\"\nassert     check_value({1:1, 2:1, 3:1, 4:1, 5:1}, 2) == False, \"Error\"\nassert     check_value({1:1, 2:1, 3:1, 4:1, 5:1}, 3) == False, \"Error\"\nassert     check_value({1:1, 2:1, 3:1, 4:1, 5:1}, 4) == True, \"Error\"\nassert     check_value({1:1, 2:1, 3:1, 4:1, 5:1}, 5) == True, \"Error\"\nprint(\"Success: check_value\")\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     drop_empty({\"A\":1,\"B\":2,\"C\":3}) == {\"A\":1,\"C\":3}\nassert     drop_empty({\"A\":1,\"B\":2,\"C\":3, \"D\":4}) == {\"A\":1,\"C\":3,\"D\":4}\nassert     drop_empty({\"A\":1,\"B\":2,\"C\":3, \"D\":4, \"E\":5, \"F\":6}) == {\"A\":1,\"C\":3,\"D\":4,\"E\":5,\"F\":6}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     drop_empty({'a': 1, 'b': 2, 'c': 3}) == {'b': 2, 'c': 3}\nassert     drop_empty({'a': 1, 'b': 2, 'c': 3, 'd': 4}) == {'b': 2, 'c': 3}\nassert     drop_empty({}) == {}\nassert     drop_empty({'a': 1}) == {'a': 1}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     drop_empty({'A': 1, 'B': 2, 'C': 3}) == {'A': 1, 'C': 3}, 'Wrong output'\nassert     drop_empty({'A': 1}) == {'A': 1}, 'Wrong output'\nassert     drop_empty({'A': 1, 'B': 2}) == {'A': 1, 'B': 2}, 'Wrong output'\nassert     drop_empty({'A': 1, 'B': 2, 'C': 3}) == {'A': 1, 'B': 2, 'C': 3}, 'Wrong output'\nassert     drop_empty({'A': 1, 'B': 2, 'C': 3, 'D': 4}) == {'A': 1, 'B': 2, 'C': 3, 'D': 4}, 'Wrong output'\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     drop_empty({}) == {}\nassert     drop_empty({\"hello\":1}) == {\"hello\":1}\nassert     drop_empty({\"hello\":1,\"world\":2}) == {\"hello\":1}\nassert     drop_empty({\"hello\":1,\"world\":2,\"\":\"a\"}) == {\"hello\":1,\"world\":2}\nassert     drop_empty({\"hello\":1,\"world\":2,\"a\":3}) == {\"hello\":1,\"world\":2}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     drop_empty({}) == {}\nassert     drop_empty({\"a\": \"b\", \"c\": \"\"}) == {\"a\": \"b\"}\nassert     drop_empty({\"a\": 1, \"b\": 2, \"c\": 3}) == {\"a\": 1, \"b\": 2}\nassert     drop_empty({\"a\": 1, \"b\": 2}) == {\"a\": 1, \"b\": 2}\n\n'''\nWrite a function to check whether a given dictionary is a valid set of numbers. \n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     drop_empty({}) == {}, \"Empty dictionary.\"\nassert     drop_empty({1:2, 3:4}) == {1:2, 3:4}, \"Error.\"\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     drop_empty({}) == {}\nassert     drop_empty({'a': 1}) == {'a': 1}\nassert     drop_empty({'a': 1, 'b': 2}) == {'a': 1, 'b': 2}\nassert     drop_empty({'a': 1, 'b': 2, 'c': 3, 'd': 4}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4}\nassert     drop_empty({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     drop_empty({1:2,3:4}) == {1:2,3:4}\nassert    drop_empty({}) == {}\nassert    drop_empty({\"a\":\"apple\",\"b\":\"banana\",\"c\":\"cherry\"}) == {\"a\":\"apple\",\"b\":\"banana\",\"c\":\"cherry\"}"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     drop_empty({\"foo\": \"bar\", \"\": \"baz\"}) == {\"foo\": \"bar\"} \nassert     drop_empty({\"foo\": \"bar\", \"\": \"baz\", \"\": \"f\"}) == {\"foo\": \"bar\", \"\": \"baz\"}\nassert     drop_empty({\"foo\": \"bar\", \"\": \"baz\", \"\": \"f\"}) == {\"foo\": \"bar\"} \nassert     drop_empty({\"foo\": \"bar\", \"\": \"baz\", \"\": \"f\", \"\": \"\", \"\": \"h\", \"\": \"e\", \"\": \"l\", \"\": \"l\", \"\": \"o\"}) == {\"foo\": \"bar\", \"\": \"baz\"}\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_product([1, 2, 4, 5]) == 60\nassert     max_product([1, 2, 3, 5]) == 30\nassert     max_product([1, 3, 6]) == 0\nassert     max_product([1, 2, 3, 4]) == 24\nassert     max_product([2, 3, 4, 5]) == 60\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_product([1,2,3,4]) == 24\nassert     max_product([1,2,3,4,-2,-4]) == 24\nassert     max_product([-4,-3,2,-1]) == 0\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint max_product([1, 2, 3]) == 6, \"Wrong answer\"\nprint max_product([1, 2, 3, 6]) == 18, \"Wrong answer\"\nprint max_product([1, 2, 3, 5, 3, 6]) == 60, \"Wrong answer\"\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_product([2, 3, -2, 4]) == 6, \"Wrong output\"\nassert     max_product([2, 3, -2, 4]) == 24, \"Wrong output\"\nassert     max_product([2, -3, -2, 4]) == 24, \"Wrong output\"\nassert     max_product([-2, -3, -2, 4]) == -24, \"Wrong output\"\nassert     max_product([-2, 3, -2, 4]) == -24, \"Wrong output\"\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_product([-1,1,2,3,-4,4,5,6]) == 6*-4*5, 'incorrect'\nassert     max_product([-1,-2,-3,4,5,6]) == 6*4*5, 'incorrect'\nassert     max_product([1,-2,3,4,5,-6]) == 6*-4*5, 'incorrect'\nassert     max_product([-1,-2,-3,4,5,6,7]) == 7*-4*5, 'incorrect'\nassert     max_product([-1,2,3,4,5,6]) == 6*4*5, 'incorrect'\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_product([1, 6, -3, 4, 2]) == 6\nassert     max_product([-1, -5, -6, -3, -2]) == -1\nassert     max_product([-7, -1, -3, -2, -2]) == -1\nassert     max_product([0, 0]) == 0\nassert     max_product([0, -3, -1, -1]) == 0\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_product([1,2,3,4,5]) == 60\nassert     max_product([3,4,5,1,2]) == 120\nassert     max_product([1,2]) == 1\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_product([1, 2, 3, 4, 5, 10, 10, 20]) == 60\nassert     max_product([0, 2, -3, -2, 1]) == 0\nassert     max_product([-10, -2, -3, -2, 1]) == -3\nassert     max_product([]) == 1\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     add_pairwise((2,3,5)) == (5,6,7)\nassert     add_pairwise((2,3,6)) == (5,8,9)\nassert     add_pairwise((1,2,3)) == (4,5,6)\n\ndef add_pairwise_alt(tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add_pairwise((1,2,3,4,5,6)) == (1,2,3,4,5,6)\nassert     add_pairwise((1,2,3,4,5,6)) == (1,2,3,4,5,6)\nassert     add_pairwise((1,2,3,4,5,6)) == (1,2,3,4,5,6)\nassert     add_pairwise((1,2,3,4,5,6)) == (1,2,3,4,5,6)\nassert     add_pairwise((1,2,3,4,5,6)) == (1,2,3,4,5,6)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add_pairwise((1,2,3,4))    == (1,3,6,10)\nassert     add_pairwise((0,0,0,0))    == (0,0,0,0)\n\ndef add_all(test_tup):\n    '''\n    Write a function to find the summation of all elements of the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add_pairwise(0) == (0,0), \"Wrong Answer\"\nassert     add_pairwise(1) == (1,2), \"Wrong Answer\"\nassert     add_pairwise(2) == (3,4), \"Wrong Answer\"\nassert     add_pairwise(3) == (4,6), \"Wrong Answer\"\nassert     add_pairwise(4) == (5,7), \"Wrong Answer\"\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_pairwise(()) == ()\nassert     add_pairwise((1,)) == (2,)\nassert     add_pairwise((1,2)) == (3,)\nassert     add_pairwise((2,1)) == (3,)\nassert     add_pairwise((2,3)) == (4,)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n'''\nSolution:\n\n```\ndef add_pairwise(test_tup):\n    result = 0\n    for i in range(len(test_tup)-1):\n        result += test_tup[i]\n    return result\n\nassert add_pairwise([1, 2, 3]) == 2\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add_pairwise((5, 5, 5, 5)) == (10, 10, 10, 10)\nassert     add_pairwise((1, 2, 3, 4)) == (2, 4, 6, 8)\nassert     add_pairwise((1, 2, 3, 4)) == (2, 4, 6, 8)\nassert     add_pairwise((1, 2, 3, 4)) == (2, 4, 6, 8)\nassert     add_pairwise((1, 2, 3, 4)) == (2, 4, 6, 8)\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_remainder([2, 3], 2) == 6, \"Wrong output\"\nassert     find_remainder([2, 3], 3) == 0, \"Wrong output\"\nassert     find_remainder([2, 3, 4], 2) == 24, \"Wrong output\"\nassert     find_remainder([2, 4, 8], 2) == 16, \"Wrong output\"\nassert     find_remainder([3, 5], 10) == 0, \"Wrong output\"\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    pass\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_remainder([1, 2], 3) == None, \"There is no remainder\"\nassert     find_remainder([0, 2], 3) == 2, \"There is 2\"\nassert     find_remainder([3, 2], 3) == 0, \"There is no remainder\"\nassert     find_remainder([-3, 2], 3) == 2, \"There is 2\"\nassert     find_remainder([-7, -5], 4) == 5, \"There is 2\"\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    find_remainder([1,2,3], 5) == 6\n    find_remainder([1,2,3], 2) == 12\n    find_remainder([1,2,3], 3) == 12\n    find_remainder([1,2,3], 4) == 18\n    find_remainder([0,0,0], 4) == 0\n    find_remainder([-1,0,1], 4) == -4\n    find_remainder([-2,0,1], 4) == -2\n    find_remainder([-3,0,1], 4) == -6\n    find_remainder([-4,0,1], 4) == -8\n\nprint('All test cases passed!')\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_remainder([1,2,3], 4) == 1\nassert     find_remainder([1,2,3], 5) == 1\nassert     find_remainder([-1,2,-3], 5) == 1\nassert     find_remainder([-1,2,-3], 4) == -1\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_remainder([1,2],5) == 1\nassert     find_remainder([3,4],5) == 0\nassert     find_remainder([-1,-2],5) == 0\nassert     find_remainder([1,2,3],5) == 2\nassert     find_remainder([2,3,4],5) == 0\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_remainder([1,2,3,4], 2) == 30\nassert     find_remainder([1,2,3,4], 5) == 1\nassert     find_remainder([1,2,3,4], 3) == 60\nassert     find_remainder([1,2,3,4], 1) == 120\nassert     find_remainder([1,2,3,4], 7) == 1\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_remainder([1,2,3], 4) == 1\nassert     find_remainder([2,3,4], 5) == 1\nassert     find_remainder([3,4,5], 6) == 1\nassert     find_remainder([5,6,7], 8) == 0\nassert     find_remainder([2,3,4], 8) == 2\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == True\nassert     check_Consecutive([1, 1, 1, 1, 1, 1, 1]) == False\nassert     check_Consecutive([1, 1, 1, 1, 2]) == True\n\ndef check_Consecutive_two(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    pass\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_Consecutive([1,3,2,3,1,2,4,5,4,4]) == True, \"incorrect\"\nassert     check_Consecutive([1,3,2,3,1,2,4,5,4,4,5]) == False, \"incorrect\"\nassert     check_Consecutive([0]) == False, \"incorrect\"\nassert     check_Consecutive([]) == False, \"incorrect\"\n\ndef check_even_odd(l): \n    '''\n    Write a python function to check whether the given list is even or odd.\n    '''\n    pass\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_Consecutive([]) == False\nassert     check_Consecutive([1, 2]) == False\nassert     check_Consecutive([1, 1, 2]) == True\nassert     check_Consecutive([1, 1, 1, 2]) == False\nassert     check_Consecutive([1, 1, 1, 1, 2]) == True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_Consecutive([1,2,3,4]) == False, \"Should return False\"\nassert     check_Consecutive([1,2,3,4,5]) == False, \"Should return False\"\nassert     check_Consecutive([1,2,3,4,5,6,7]) == True, \"Should return True\"\nassert     check_Consecutive([1,1,1,1,1,1,1]) == False, \"Should return False\"\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_Consecutive([-6, -4, 0, 2, 4, 6]) == True\nassert     check_Consecutive([-6, -4, 0, 2, 4, 7]) == False\nassert     check_Consecutive([]) == False\nassert     check_Consecutive([1]) == True\nassert     check_Consecutive([-2, 3, 4, 5, 5]) == True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_Consecutive([1,2,3,4,5]) == True, \"Expected True\"\nassert     check_Consecutive([1,2,3,4,5,6,7]) == True, \"Expected True\"\nassert     check_Consecutive([1,2,3,4,5,6,7,8,9]) == True, \"Expected True\"\nassert     check_Consecutive([1,2,3,4,5,6,7,8,9,10]) == True, \"Expected True\"\nassert     check_Consecutive([1,2,3,4,5,6,7,8,9,10,11]) == False, \"Expected False\"\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_Consecutive([3,5,7,9,11,13])\nassert     not check_Consecutive([3,4,5,6,7,8,9])\nassert     check_Consecutive([3,4,5,6,7,8])\nassert     not check_Consecutive([0,0,1,1,1])\nassert     check_Consecutive([1,2,3,4,5])\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_Consecutive([1, 2, 3, 4]) == True, \"consecutive list\"\nassert     check_Consecutive([1, 2, 3, 1]) == False, \"non consecutive list\"\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_Consecutive([-2, -3, 4, 1])     == True, \"Should be True\"\nassert     check_Consecutive([-2, 1, 2, 4, 4])     == False, \"Should be False\"\nassert     check_Consecutive([-2, 1, 2, 4])     == False, \"Should be False\"\nassert     check_Consecutive([])     == False, \"Should be False\"\nassert     check_Consecutive([0])     == False, \"Should be False\"\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tuple_intersection([1, 2, 3, 4, 5, 6],[1, 2, 3, 4, 5]) ==     [1, 2, 3, 4, 5]\nassert     tuple_intersection([1, 2, 3, 4, 5, 6],[4, 5, 6, 7, 8, 9]) ==     [4, 5, 6]\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_intersection([1, 2, 3, 4], [1, 2, 3, 5]) == [1, 2, 3]\nassert     tuple_intersection([1, 2, 3, 4], [1, 2, 4, 5]) == [1, 2]\nassert     tuple_intersection([1, 2, 3, 4], [5, 2, 3, 4]) == []\nassert     tuple_intersection([1, 2, 3, 4], [2, 3, 4]) == []\nassert     tuple_intersection([1, 2, 3], [2, 3, 4]) == []\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_intersection([(0,1), (0,2), (1,2), (1,4)], [(1,1), (1,3), (1,4), (3,4)]) == [(1,1), (1,4)]\nassert tuple_intersection([(0,1), (0,2), (1,2), (1,4)], [(1,1), (1,3), (1,4), (2,2)]) == [(1,1), (1,2), (1,4)]\nassert tuple_intersection([(0,1), (0,2), (1,2), (1,4)], [(1,1), (1,3), (1,4), (2,2)]) == [(1,1), (1,2), (1,4)]\nassert tuple_intersection([(0,1), (0,2), (1,2), (1,4)], [(1,1), (1,3), (1,4), (2,2)]) == []\nassert tuple_intersection([(0,1), (0,2), (1,2), (1,4)], [(0,2), (0,3), (0,4), (2,2)]) == []\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tuple_intersection([(1,2,3),(2,3,4)], [(2,3,4), (3,4,5)]) == [(2,3,4)]\nassert     tuple_intersection([(1,2,3),(2,3,4)], [(1,2,3), (3,4,5)]) == [(1,2,3)]\nassert     tuple_intersection([(1,2,3),(2,3,4)], [(3,4,5), (1,2,3)]) == [(1,2,3)]\nassert     tuple_intersection([(1,2,3),(2,3,4)], [(1,2,3),(4,5,6)]) == []\nassert     tuple_intersection([(1,2,3),(2,3,4)], [(1,2),(3,4)]) == []\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tuple_intersection(('a', 'b', 'c', 'd'), ('a', 'c')) == ['a', 'c']\nassert     tuple_intersection(('a', 'b', 'c', 'd'), ('b', 'c')) == ['b', 'c']\nassert     tuple_intersection(('a', 'b', 'c', 'd'), ('a', 'd')) == ['a', 'd']\nassert     tuple_intersection(('a', 'b', 'c', 'd'), ('a', 'b')) == ['a', 'b']\nassert     tuple_intersection(('a', 'b', 'c', 'd'), ('d', 'a')) == ['d', 'a']\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tuple_intersection([(1,2), (3,4), (1,2)], [(2,3),(4,5),(6,7),(8,9),(10,11)]) == [(2,3),(4,5)]\nassert     tuple_intersection([(1,2), (3,4), (1,2)], [(1,2),(3,4),(1,2)]) == [(1,2)]\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tuple_intersection([(1, 2), (1, 4), (1, 5), (2, 5)], [(1, 5), (3, 5), (4, 5), (5, 6)]) == [(1, 5)], 'incorrect'\nassert     tuple_intersection([(1, 2), (2, 2), (3, 2)], [(1, 2), (2, 2), (4, 2)]) == [(1, 2)], 'incorrect'\n\nprint('All test cases passed...'"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tuple_intersection([1,2,3,4,5,6], (1,2,3,4,5,6)) == (1,2,3,4,5)\nassert tuple_intersection([1,2,3,4,5,6], (1,2,3,4)) == (1,2,3,4)\nassert tuple_intersection([1,2,3,4,5,6], (1,2,3)) == (1,2,3)\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tuple_intersection( (1,2,3,4,5,6), (1,2,3,4) ) == (1,2,3,4), \"Wrong Answer\"\nassert     tuple_intersection( (1,2,3,4,5,6), (5,6,7,8,9) ) == (5,6,7), \"Wrong Answer\"\nassert     tuple_intersection( (1,2,3,4,5,6), (3,4,5,6,7,8,9) ) == (3,4,5,6,7), \"Wrong Answer\"\nassert     tuple_intersection( (1,2,3,4,5,6), (1,2,3,4,6,7,8,9) ) == (1,2,3,4), \"Wrong Answer\"\nassert     tuple_intersection( (1,2,3,4,5,6), (1,2,3,4,5,6) ) == (1,2,3,4,5,6), \"Wrong Answer\"\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tuple_intersection([1,2,3,4,5,6,7],(7,2,3,4,5,6)) == (7,2,3,4,5)\nassert     tuple_intersection([1,2,3,4,5,6,7],(1,2,3,4,5,6)) == (1,2,3,4,5,6)\nassert     tuple_intersection([1,2,3,4,5,6,7],(3,2,1,4,5,6)) == (3,2,1,4,5)\nassert     tuple_intersection([1,2,3,4,5,6,7],(6,7,1,2,3,4)) == (1,2,3,4)\nassert     tuple_intersection([1,2,3,4,5,6,7],(7,1,2,3,4,5)) == (1,2,3,4,5)\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     replace_char('ABC','A','B') == 'BBC'\nassert replace_char('AA','A','A') == 'AAA'\n\ndef split_text(text):\n    '''\n    Write a function to split a sentence into words.\n    '''\n    pass\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     replace_char(\"Hello world\",'e','E')=='He ellE wrD'\nassert     replace_char(\"Hello world\",' ',',')=='He,el,worl,d'\nassert     replace_char(\"Hello world\",' ','~')=='He,el~worl~d'\nassert     replace_char(\"Hello world\",'~',' ')=='H,e,l,w,r,d'\nassert     replace_char(\"Hello world\",'~',' ')=='H,e,l,w,r,d'"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     replace_char(\"abcd\", \"a\", \"b\") == \"bcd\", \"Replace 1st\"\nassert     replace_char(\"abcd\", \"c\", \"d\") == \"ad\", \"Replace 2nd\"\nassert     replace_char(\"abcd\", \"d\", \"d\") == \"abcd\", \"Replace 3rd\"\nassert     replace_char(\"abcd\", \"x\", \"c\") == \"abcd\", \"Replace 4th\"\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     replace_char('the','t', 'r') ==    'the r'\nassert     replace_char('@','@', '&') ==    '@&'\nassert     replace_char('a','a', 'b') ==    'b'\nassert     replace_char('a','a', 'c') ==    'c'\nassert     replace_char('a','a', 'd') ==    'd'\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    replace_char('hello', 'a', 'b') == 'bobo'\nassert \n    replace_char('hello', 'h', 'x') == 'xobo'\n    \n    \n    \ndef replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef test_replace_char():\n    '''\n    Test function for replace_char\n    '''\n    print('Testing replace_char:')\n    \n    assert replace_char('abcdefg','c','s') == 'abcseg'\n    assert replace_char('abcdefg','d','s') == 'abcsseg'\n    assert replace_char('abcdefg','e','s') == 'abcsegs'\n    "
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     replace_char('a', 'o', 'x') == 'x'\nassert     replace_char('o', 'o', 'l') == 'l'\nassert     replace_char('l', 'o', 'l') == 'l'\nassert     replace_char('u', 'o', 'x') == 'x'\n\ndef remove_duplicate(str1):\n    '''\n    Write a function to remove the duplicate characters in a string.\n    '''\n    pass\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     replace_char(\"hellooo\", 'o', 'a') == \"hellaa\"\nassert     replace_char(\"hellooo\", 'e', 'a') == \"hellaa\"\nassert     replace_char(\"hellooo\", 'l', 'a') == \"hellaa\"\nassert     replace_char(\"hellooo\", 'o', 'x') == \"helx\"\nassert     replace_char(\"hellooo\", 'x', 'o') == \"hxl\"\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_counter({\"apple\":2, \"orange\":4, \"grapes\":3, \"banana\":1}) == {\"apple\":2, \"orange\":4, \"banana\":1, \"grapes\":3}\n\ndef max_length_word(str1):\n    '''\n    Write a function to return the longest word in the given string.\n    '''\n    pass\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    l = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return l\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_counter({}) == []\nassert     sort_counter({1: 1}) == [1]\nassert     sort_counter({1: 1, 2: 2}) == [2, 1]\nassert     sort_counter({1: 1, 2: 2, 3: 3}) == [3, 2, 1]\nassert     sort_counter({'b': 2, 'a': 1}) == ['a', 'b']\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_counter({'a': 1, 'b': 2, 'c': 3, 'd': 4}) ==  [('a', 1), ('b', 2), ('c', 3), ('d', 4)]\nassert     sort_counter({'a': 1, 'b': 2, 'c': 3}) ==  [('a', 1), ('b', 2), ('c', 3)]\nassert     sort_counter({'a': 1, 'b': 2, 'c': 3, 'd': 4}) ==  [('a', 1), ('b', 2), ('c', 3), ('d', 4)]\nassert     sort_counter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}) ==  [('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)]\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_counter({\"A\":3, \"B\":1, \"C\":2}) == {\"A\":3, \"B\":1, \"C\":2}\nassert     sort_counter({\"A\":3, \"B\":2, \"C\":1}) == {\"A\":3, \"B\":2, \"C\":1}\nassert     sort_counter({\"A\":1, \"B\":3, \"C\":2}) == {\"A\":1, \"B\":3, \"C\":2}\nassert     sort_counter({\"A\":2, \"B\":3, \"C\":1}) == {\"A\":2, \"B\":3, \"C\":1}\nassert     sort_counter({\"A\":1, \"B\":1, \"C\":1}) == {\"A\":1, \"B\":1, \"C\":1}\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_counter({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}) == \\\n            {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}\nassert     sort_counter({\"a\": 1, \"c\": 3, \"b\": 2, \"e\": 5, \"d\": 4}) == \\\n            {\"a\": 1, \"c\": 3, \"b\": 2, \"e\": 5, \"d\": 4}\nassert     sort_counter({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6}) == \\\n            {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6}\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_counter({1:2, 2:3, 4:1, 5:1}) == {1:1, 2:2, 4:3, 5:1} \nassert sort_counter({1:2, 2:3, 4:1, 5:1}) == {2:2, 4:3, 1:1, 5:1}\nassert sort_counter({1:2, 2:3, 4:1, 5:1, 6:1}) == {2:2, 4:3, 1:1, 5:1, 6:1}\nassert sort_counter({1:2, 2:3, 4:1, 5:1, 6:1, 7:1}) == {2:2, 4:3, 1:1, 5:1, 6:1, 7:1}\nassert sort_counter({1:2, 2:3, 4:1, 5:1, 6:1, 7:1, 8:1}) == {2:2, 4:3, 1:1, 5:1, 6:1, 7:1, 8:1}\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_counter({'a': 5, 'b': 4, 'c': 3}) == {'a': 5, 'b': 4, 'c': 3}\nassert     sort_counter({'b': 5, 'a': 4, 'c': 3}) == {'a': 4, 'b': 5, 'c': 3}\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_counter({'a': 10, 'b': 1, 'c': 12}) == {'b': 1, 'a': 10, 'c': 12}\nassert     sort_counter({'a': 10, 'b': 1, 'c': 12, 'd': 15}) == {'c': 12, 'd': 15, 'a': 10, 'b': 1}\nassert     sort_counter({'a': 10, 'b': 1, 'c': 12, 'd': 15, 'e': 7}) == {'c': 12, 'e': 7, 'd': 15, 'a': 10, 'b': 1}\nassert     sort_counter({'a': 10, 'b': 1, 'c': 12, 'd': 15, 'e': 7, 'f': 5, 'g': 6}) == {'a': 10, 'b': 1, 'c': 12, 'd': 15, 'e': 7, 'g': 6, 'f': 5, 'c': 12}\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_counter({1: 10, 2: 1}) == [1, 2, 10]\nassert     sort_counter({'a': 3, 'b': 2, 'c': 1}) == ['c', 'b', 'a']\nassert     sort_counter({3: 'a', 1: 2, 2: 'b'}) == ['a', 1, 2, 'b']\nassert     sort_counter({'d': 9, 'b': 1, 'c': 10}) == ['b', 'c', 'd']\nassert     sort_counter({'b': 2, 'c': 1, 'd': 9}) == ['d', 'b', 'c']\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef big_sum_check(nums):\n    # Your code here\n    # Hint: Use the max and min functions to find the largest and smallest number in the array\n    # Hint: Use the % and // operator to find the index of the smallest and largest numbers in the array\n    pass\n\nbig_sum(nums)\n\n\ndef big_sum_check_2(nums):\n    # Your code here\n    # Hint: Use the max and min functions to find the largest and smallest number in the array\n    # Hint: Use the % and // operator to find the index of the smallest and largest numbers in the array\n    largest = max(nums)\n    smallest = min(nums)\n    return largest + smallest\n\nbig_sum_check(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nbig_sum([-1, -1, -1, -1]) == -1\nassert \nbig_sum([-1, -1, -1, -1, -1]) == -1\nassert \nbig_sum([-1, -1, -1, -1, 10]) == -1\nassert \nbig_sum([-1, -1, -1, 10]) == -1\nassert \nbig_sum([10]) == 10\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     big_sum([-4,-2,-1,3,2,5,-1,3]) == 8\nassert big_sum([-4,-2,-1,3,2,5,-1,3]) == 8\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     big_sum([1, 5, 8, 5]) == 9, \"TEST FAILED!\"\nassert     big_sum([1, 5, 8, 5]) == 10, \"TEST FAILED!\"\nassert     big_sum([1, 5, -8, 5]) == 10, \"TEST FAILED!\"\nassert     big_sum([-1, 5, -8, 5]) == -1, \"TEST FAILED!\"\n\ndef positive(nums):\n    '''\n    Write a python function to return True if all the numbers in an array are positive or not,\n    False otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nassert big_sum([1,2,3,4,5]) == 15\nassert big_sum([5,3,2,8,4]) == 14\nassert big_sum([5,3,2,8,4,3,2,1]) == 15\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     big_sum([-3,5,-2,8]) == 9\nassert     big_sum([-3,-5,-2,-8]) == 0\nassert     big_sum([1,-2,-5,1]) == 6\nassert     big_sum([1,-2,-5,-1]) == -6\nassert     big_sum([-1,-2,1,-1]) == 0\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     big_sum([1, 2, -3, -10]) == -1, 'incorrect output'\nassert     big_sum([-3, 1, 0, -2, -1]) == -1, 'incorrect output'\nassert     big_sum([1, 2, 3, 4, 5]) == 9, 'incorrect output'\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_lower('hi') == False\nassert     is_lower('HI') == True\nassert     is_lower('Hi') == True\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_lower(\"Hi\") == True\nassert is_lower(\"Hi\") == False\nassert is_lower(\"\") == True\nassert is_lower(\" \") == True\nassert is_lower(\"H\") == True\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef is_upper(string):\n    '''\n    Write a python function to convert the given string to upper case.\n    '''\n    pass\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_lower(\"Hello\") == \"hello\", \"Should return a lowercase letter\"\nassert     is_lower(\"HElLo\") == \"hello\", \"Should return a lowercase letter\"\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_lower(\"Hi\") == True, \"Not True\"\nassert     is_lower(\"HELLO\") == True, \"Not True\"\nassert     is_lower(\"hi\") == False, \"Not False\"\nassert     is_lower(\"HElLo\") == False, \"Not False\"\nassert     is_lower(\"HELLO WORLD\") == True, \"Not True\"\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_lower('kevin') == 'kevin'\nassert     is_lower('kevin') == 'kevin'\nassert     is_lower('keVin') == 'kevin'\nassert     is_lower('KeVin') == 'kevin'\nassert     is_lower('kevIN') == 'kevin'\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_lower('AbCdEfGhIjKlmNoOpqRsStu') == False, \"Wrong output.\"\nassert     is_lower('aBCDEfGhIjKlmNoOpqRsStu') == True, \"Wrong output.\"\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(is_lower('abc')) \nprint(is_lower('abc123'))\nprint(is_lower('ABC'))\nprint(is_lower('ABC123'))\nprint(is_lower('ABC123abc'))\nprint(is_lower('ABCabc123'))\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_lower('Hello') == 'hello', \"is_lower function failed.\"\nassert     is_lower('myFriends') =='myfriends', \"is_lower function failed.\"\nassert     is_lower('the a') == 'the a', \"is_lower function failed.\"\nassert     is_lower('the case') == 'the case', \"is_lower function failed.\"\n\n\ndef is_alpha(string):\n    '''\n    Write a python function to convert the given string to alpha numeric.\n    '''\n    pass\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_lower(\"hello\") == False\nassert     is_lower(\"HELLO\") == True\nassert     is_lower(\"HELLO123\") == True\nassert     is_lower(\"HELLO123!\") == False\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_lowercase(\"lowercase\") == \"\"\nassert     remove_lowercase(\"LOWERCASE\") == \"\"\nassert     remove_lowercase(\"LOWERCASE.\") == \"lowercase.\"\nassert     remove_lowercase(\"LOWERCASE...\") == \"lowercase.\"\nassert     remove_lowercase(\"LOWERCASE.!\") == \"lowercase.\"\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_lowercase('mOdE') == 'MORe'\nassert     remove_lowercase('Test') == 'Tst'\nassert     remove_lowercase('TesT') == 'Tst'\nassert     remove_lowercase('MORe') == 'MORe'\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_lowercase(\"tThHeT\") == \"TTThHeT\"\nassert     remove_lowercase(\"ThHeT\") == \"ThHeT\"\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef remove_numeric(str1):\n    '''\n    Write a function to remove numeric substrings from a given string.\n    '''\n    pass\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef remove_numbers(str1):\n    '''\n    Write a function to remove any number in the given string.\n    '''\n    pass\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_lowercase('Hello') == 'Hllo'\nassert     remove_lowercase('HellO') == 'Hllo'\nassert     remove_lowercase('HELLO') == 'Hllo'\nassert     remove_lowercase('heLLO') == 'Hllo'\nassert     remove_lowercase('HELLO') == 'Hllo'\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_lowercase(\"abc\") == \"abc\", \"Should return 'abc'\"\nassert     remove_lowercase(\"abc\") == \"abc\", \"Should return 'abc'\"\nassert     remove_lowercase(\"aCCc\") == \"aCCc\", \"Should return 'aCCc'\"\nassert     remove_lowercase(\"abcC\") == \"abcC\", \"Should return 'abcC'\"\nassert     remove_lowercase(\"abc\") == \"abc\", \"Should return 'abc'\"\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert remove_lowercase('Ava, Jibran and Sam are students') == 'Ava, Jibran and Sam are students'\n\nassert remove_lowercase('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_lowercase(\"hello\") == \"hELLo\", \"Should return HELLO\"\nassert     remove_lowercase(\"Hello\") == \"hELLo\", \"Should return HELLO\"\nassert     remove_lowercase(\"Hello world\") == \"Hello world\", \"Should return HELLO world\"\nassert     remove_lowercase(\"hello hello world\") == \"Hello hello world\", \"Should return HELLO hello world\"\nassert     remove_lowercase(\"helloworld\") == \"Hello world\", \"Should return HELLO world\"\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_lowercase(\"hello\") == \"hll\"\nassert     remove_lowercase(\"Hello\") == \"HLL\"\nassert     remove_lowercase(\"A\") == \"\"\nassert     remove_lowercase(\"\") == \"\"\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     first_Digit(5) == 1, 'Wrong output'\nassert     first_Digit(3456789) == 7, 'Wrong output'\nassert     first_Digit(1234) == 1, 'Wrong output'\nassert     first_Digit(123456789) == 1, 'Wrong output'\nassert     first_Digit(5.25) == 1, 'Wrong output'\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     first_Digit(100) == 1\nassert     first_Digit(11) == 1\nassert     first_Digit(12) == 1\nassert     first_Digit(100101) == 1\nassert     first_Digit(234234) == 1\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     first_Digit(12) == 1, \"error in first_Digit()\"\nassert     first_Digit(12345678) == 1, \"error in first_Digit()\"\nassert     first_Digit(12.34) == 1, \"error in first_Digit()\"\nassert     first_Digit(-1234) == 1, \"error in first_Digit()\"\nassert     first_Digit(\"12.34\") == 1, \"error in first_Digit()\"\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     first_Digit(945) == 1\nassert     first_Digit(987) == 9\nassert     first_Digit(897) == 8\nassert     first_Digit(9) == 9\nassert     first_Digit(0) == 0\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert first_Digit(7) == 7, \"didn't return correct answer\"\nassert first_Digit(0) == 0, \"didn't return correct answer\"\nassert first_Digit(8) == 8, \"didn't return correct answer\"\nassert first_Digit(0) == 0, \"didn't return correct answer\"\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     first_Digit(123) == 1, '123'\nassert     first_Digit(12) == 1, '12'\nassert     first_Digit(12.3) == 1, '12.3'\nassert     first_Digit(123.4) == 1, '123.4'\nassert     first_Digit(-321) == 1, '-321'\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     first_Digit(123) == 1, 'Should be 1'\nassert     first_Digit(12) == 1, 'Should be 1'\nassert     first_Digit(12345) == 1, 'Should be 1'\nassert     first_Digit(1234) == 1, 'Should be 1'\nassert     first_Digit(12345678) == 1, 'Should be 1'\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     first_Digit(8) == 0\nassert     first_Digit(20) == 0\nassert     first_Digit(1234) == 0\nassert     first_Digit(2.6789) == 0\nassert     first_Digit('2.6789') == 0\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     first_Digit(123) == 1\nassert     first_Digit(15) == 1\nassert     first_Digit(25) == 2\nassert     first_Digit(15) == 2\nassert     first_Digit(0) == 0\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Split([1,2,3,4,5]) == [1,3,5], \"Wrong output\"\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Split([1,2,3,4,5,6,7,8,9]) == [1,3,5,7,9], 'Should return [1,3,5,7,9]'\nassert     Split([0,2,4,6,8,10]) == [0,2,4,6,8,10], 'Should return [0,2,4,6,8,10]'\nassert     Split([1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9,10], 'Should return [1,3,5,7,9,10]'\nassert     Split([]) == [], 'Should return []'\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef Expr(expr):\n    '''\n    Write a Python function that takes a mathematical expression in infix notation and returns the prefix equivalent of that expression.\n    '''\n    pass\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Split([1, 2, 3, 4]) == [2, 4] \nassert     Split([1, 2, 3, 4, 5]) == [2, 4, 5] \nassert     Split([1, 2, 3, 4, 5, 6]) == [2, 4, 5, 6] \nassert     Split([1, 2, 3, 4, 5, 6, 7]) == [2, 4, 5, 6, 7] \nassert     Split([1, 2, 3, 4, 5, 6, 7, 8]) == [2, 4, 5, 6, 7, 8] \n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Split([1,2,3,4,5]) ==     [3,5]\nassert     Split([-1,2,3,4,5]) ==     [3,5]\nassert     Split([]) ==     []\nassert     Split([-1,2,3,4,5,-1,2,3,4,5]) ==     [3,5,-1]"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nSplit([2, 4, 5, 6, 7, 8]) == [2, 5, 6, 7]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Split([1,2,3,4]) == [1,3,4]\nassert     Split([1,2,3,4,5]) == [1,3,5]\nassert     Split([1,2,3,4,5,6]) == [1,3,5,6]\nassert     Split([-1,-2,-3,-4,-5]) == [-1,-3,-5]\nassert     Split([-1,-2,-3,-4,-5,-6]) == [-1,-3,-5,-6]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Split([1,2,3,4,5]) == [1,3,5]\nassert     Split([1,2,3,4,5,6]) == [1,3,5,7]\nassert     Split([1,2,3,4,5,6,7]) == [1,3,5,7]\nassert     Split([1,2,3,4,5,6,7,8]) == [1,3,5,7,9]\nassert     Split([1,2,3,4,5,6,7,8,9]) == [1,3,5,7,9]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nSplit([0,0,0,1]) == [1]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Split([1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9], 'Wrong'\nassert     Split([1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9], 'Wrong'\nassert     Split([1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9], 'Wrong'\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint('Testing for the correctness of difference()')\nif (difference(5)) == (difference(10)):\n    print('difference() is working correctly')\nelse:\n    print('The returned values of difference() and returned values of difference() do not match. Difference() should return the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers')\n    "
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    difference(3) == 4\n    difference(5) == 8\n    difference(10) == 20"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     difference(3) == 4\nassert     difference(8) == 96"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     difference(5) == 120\nassert     difference(12) == 260\nassert     difference(12) == 216\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     difference(5) == 0\nassert     difference(20) == -125\nassert     difference(50) == 1525\nassert     difference(100) == -34375\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     difference(1) == 1\nassert     difference(2) == 1\nassert     difference(3) == 1\nassert     difference(4) == 1\nassert     difference(5) == 0\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ndifference(10) == 5, \"Total should be 5\"\nprint(\"Pass\")\nprint()"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert find_Odd_Pair([1,2,3,4],4) == 0\nassert find_Odd_Pair([1,2,3,4,5],5) == 3\nassert find_Odd_Pair([1,2,3,4,5,6,7,8],8) == 4\nassert find_Odd_Pair([1,2,3,4,5,6,7,8,9],9) == 3\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n'''\nProblem : Given a list of integers, S, of size N find the maximum sum of elements\n    in the sublist whose sum is odd.\nInput:\n    S = [1, 2, 3, 4, 5, 6, 7]\n    N = 7\nOutput:\n    20\nExplanation:\n    [1, 3, 5]\n    [2, 4, 6]\n    [3, 6, 7]\n    [4, 7, 9]\n    [5, 7, 8]\n    [6, 8, 9]\n    [7, 9, 10]\n    [1, 3, 5, 7, 9]\n'''"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_Odd_Pair([1,2,3,4],2) == 1, 'Should return 1'\nassert     find_Odd_Pair([1,2,3,4],5) == 0, 'Should return 0'\nassert     find_Odd_Pair([1,2,3,4],3) == 2, 'Should return 2'\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Odd_Pair(A=[[1,2,3],[4,5,6],[7,8,9]],N=3) == 2\nassert     find_Odd_Pair(A=[[0,1,2],[3,4,5],[6,7,8]],N=3) == 0\nassert     find_Odd_Pair(A=[[3,4,5],[6,7,8],[1,2,3]],N=3) == 1\nassert     find_Odd_Pair(A=[[1,2,3],[4,5,6],[7,8,9],[5,6,7],[2,8,6]],N=4) == 2\nassert     find_Odd_Pair(A=[[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]],N=4) == 0\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Odd_Pair([1,2,3,4],4) == 2\nassert     find_Odd_Pair([1,1,2,2],2) == 1\nassert     find_Odd_Pair([1,2,3,4],5) == 0\nassert     find_Odd_Pair([1,2,3,4],6) == 3\n\ndef find_Odd_Pair_with_key(A,N): \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    pass\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_Odd_Pair([1,2,3,4,5,6,7],8) == 1, \"Should be 1\"\nassert     find_Odd_Pair([1,2,3,4,5,6,7],5) == 3, \"Should be 3\"\nassert     find_Odd_Pair([1,2,3,4,5,6,7],1) == 0, \"Should be 0\"\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef find_Odd_Pair_using_list(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    pass\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Odd_Pair([4,5,7,8],4) == 1\nassert     find_Odd_Pair([1,2,3,4,5],5) == 1\nassert     find_Odd_Pair([9,8,7,6,5,4],5) == 0\nassert     find_Odd_Pair([4,5,7,8,9],9) == 2\nassert     find_Odd_Pair([2,2,2,2,2,2],2) == 1\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Odd_Pair([0,1,2,3,4,5,6],3) == 1, 'find_Odd_Pair'\nassert     find_Odd_Pair([0,1,2,3,4,5,6],7) == 3, 'find_Odd_Pair'\nassert     find_Odd_Pair([0,1,2,3,4,5,6],8) == 4, 'find_Odd_Pair'\nassert     find_Odd_Pair([0,1,2,3,4,5,6],9) == 5, 'find_Odd_Pair'\nassert     find_Odd_Pair([0,1,2,3,4,5,6],10) == 6, 'find_Odd_Pair'\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     toggle_string(\"Hello World\") == \"hELLO wORLD\", 'incorrect'\nassert     toggle_string(\"HELLO WORLD\") == \"hELLO wOrLD\", 'incorrect'\nassert     toggle_string(\"HElLo WoRld\") == \"hELLO wORLD\", 'incorrect'\nassert     toggle_string(\"hello world\") == \"HELLO WORD\", 'incorrect'\nassert     toggle_string(\"HELLO WORLD\") == \"HELLO WORLD\", 'incorrect'\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     toggle_string('Hello World') == 'hELLO wORLD', \"Example: Expected output = HELLO wORLD. Actual output = %s\" %(toggle_string('Hello World'))\nassert     toggle_string('cAt') == 'cAT', \"Example: Expected output = cAT. Actual output = %s\" %(toggle_string('cAt'))\nassert     toggle_string('cAt') == 'cAt', \"Example: Expected output = cAt. Actual output = %s\" %(toggle_string('cAt'))\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     toggle_string(\"camelCase\") == \"camelCamel\"\nassert     toggle_string(\"HelloWorld\") == \"elHolaWorLD\"\nassert     toggle_string(\"MixedCase\") == \"MIxEDCasE\"\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     toggle_string('hello') == 'hELLO'\nassert     toggle_string('Hello') == 'hElLo'\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert toggle_string(\"lower\") == \"upper\"\nassert toggle_string(\"UPPER\") == \"lower\"\n\n'''\nWrite a function to compute the frequency of the most common words in a given text file.\n\nExample:\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     toggle_string('Dog') == 'DOG'\nassert     toggle_string('Dog') == 'DOG'\nassert     toggle_string('DOG') == 'Dog'\nassert     toggle_string('DOG') == 'DOG'\nassert     toggle_string('Dog') == 'dOG'\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert toggle_string('Hello world') == 'hELLO wORLD', 'Should have been reversed'\nassert toggle_string('HeLlO wOrLD') == 'hELLO wORLD', 'Should have been reversed'\nassert toggle_string('HELLO World') == 'hELLO wOrLD', 'Should have been reversed'\nassert toggle_string('HELLO WORLD') == 'hELLO wORLD', 'Should have been reversed'\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     toggle_string('snoopy') =='sNOOPY'\nassert     toggle_string('Snoopy') =='sNOOPY'\nassert     toggle_string('Snoopy.') =='sNOOPY.'\nassert     toggle_string('SnOpY.') =='sNOOPY.'\nassert     toggle_string('Snoopy. ') =='sNOOPY. '\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     digit_distance_nums(10, 12) == 0\nassert     digit_distance_nums(1, 9) == 9\nassert     digit_distance_nums(7, 7) == 0\nassert     digit_distance_nums(17, 12) == 7\nassert     digit_distance_nums(32, 15) == 5\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     digit_distance_nums(19, 94) == 13, 'incorrect result'\nassert     digit_distance_nums(19, 95) == 14, 'incorrect result'\nassert     digit_distance_nums(19, 96) == 15, 'incorrect result'\nassert     digit_distance_nums(19, 97) == 16, 'incorrect result'\nassert     digit_distance_nums(19, 98) == 17, 'incorrect result'\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     digit_distance_nums(2,1) == 2, \"Fail\"\nassert     digit_distance_nums(3,9) == 1, \"Fail\"\nassert     digit_distance_nums(100,1) == 99, \"Fail\"\nassert     digit_distance_nums(1,100) == 99, \"Fail\"\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     digit_distance_nums(n1 = 1234, n2 = 2345) == 1, \\\n            \"Expected digit_distance_nums(1234,2345) == 1, Actual value is {0}\".format(digit_distance_nums(1234, 2345))\nassert     digit_distance_nums(n1 = 2345, n2 = 1234) == 1, \\\n            \"Expected digit_distance_nums(2345,1234) == 1, Actual value is {0}\".format(digit_distance_nums(2345, 1234))\nassert     digit_distance_nums(n1 = 1234, n2 = 1345) == 3, \\\n            \"Expected digit_distance_nums(1234,1345) == 3, Actual value is {0}\".format(digit_distance_nums(1234, 1345))\nassert     digit_distance_nums(n1 = 2345, n2 = 1234) == 3, \\\n            \"Expected digit_distance_nums(2345,1234) == 3, Actual value is {0}\".format(digit_distance_nums(2345, 1234))\nassert     digit_distance_nums(n1 = 1234, n2 = 1454) == 4, \\\n            \"Expected digit_distance_nums(1234,1454) == 4, Actual value is {0}\".format(digit_distance_nums(1234, 1454))\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     digit_distance_nums(4, 9) == 7\nassert     digit_distance_nums(1, 10) == 0\nassert     digit_distance_nums(49, 45) == 8\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     digit_distance_nums(1, 1) == 0, 'input 1 and 1 gives 0'\nassert     digit_distance_nums(10, 1) == 10, 'input 1 and 10 gives 10'\nassert     digit_distance_nums(10, 2) == -1, 'input 2 and 10 gives -1'\nassert     digit_distance_nums(1, 10) == 10, 'input 10 and 1 gives 10'\nassert     digit_distance_nums(10, 10) == 0, 'input 10 and 10 gives 0'\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     digit_distance_nums(9, 11) == 1\nassert     digit_distance_nums(9, 10) == 0\nassert     digit_distance_nums(9, 16) == 3\nassert     digit_distance_nums(9, 19) == 5\nassert     digit_distance_nums(9, 12) == 3\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef sum_digit_distance(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    pass\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert         digit_distance_nums(100,201) == 23\nassert         digit_distance_nums(100,202) == 24\nassert         digit_distance_nums(1,201) == 22\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_sub_array_sum([-2,1,-3,4,-1,2,1,-5,4], 7) == 6\nassert max_sub_array_sum([1,2,3,4,5,6], 5) == 0\nassert max_sub_array_sum([1,2,3,4,5], 5) == 0\nassert max_sub_array_sum([1,2,3,4], 4) == 3\nassert max_sub_array_sum([1,2,3,4], 1) == 4\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(\"Largest contiguous subarray sum is \", max_sub_array_sum([1,2,3,4,5], 5))\nassert \nprint(\"Largest contiguous subarray sum is \", max_sub_array_sum([1,1,1,1,1], 5))\nassert \nprint(\"Largest contiguous subarray sum is \", max_sub_array_sum([1,2,3,4,5], 6))\nassert \nprint(\"Largest contiguous subarray sum is \", max_sub_array_sum([1,2,3,4,5], 6))\nassert \nprint(\"Largest contiguous subarray sum is \", max_sub_array_sum([1,2,3,4,5], 7))\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_sub_array_sum([1, 2, 3, 4], 4) == 12\nassert     max_sub_array_sum([2, 3, 4, 5], 4) == 9\nassert     max_sub_array_sum([2, 4, 5, 2], 4) == 10\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_sub_array_sum([2,1,-6,3,4,-1,4], 7) == 9\nassert     max_sub_array_sum([2,1,-6,3,4,-1,4], 2) == 12\nassert     max_sub_array_sum([1,2,3], 0) == 0\nassert     max_sub_array_sum([], 0) == 0"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_sub_array_sum([-2,1,-3,4,-1,2,1,-5,4], 8) == 6\nassert     max_sub_array_sum([-2,1,-3,4,-1,2,1,-5,4], 10) == 12\nassert     max_sub_array_sum([-2,1,-3,4,-1,2,1,-5,4], -2) == -6\nassert     max_sub_array_sum([-2,1,-3,4,-1,2,1,-5,4], -10) == -6\nassert     max_sub_array_sum([-2,1,-3,4,-1,2,1,-5,4], -5) == 10\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 7) == 6\nassert     max_sub_array_sum([2, -3, -4, 1, 5, -3], 6) == 7\nassert     max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 2) == 4\nassert     max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 7) == 8\nassert     max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 3) == 6\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_sub_array_sum([1,-3,2,-1,1], 4) == 8, \"Expected 8\"\nassert     max_sub_array_sum([-1, -1], 1) == -1, \"Expected -1\"\nassert     max_sub_array_sum([2,-1,1,3,4,5], 5) == 7, \"Expected 7\"\nassert     max_sub_array_sum([-3,-2,-1,2,1,4], 4) == 3, \"Expected 3\"\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     union_elements((1,2,3), (5,6,7)) == (1,2,3,5,6,7)\nassert union_elements((1,3,5), (2,4,6)) == (1,2,3,4,5,6)\nassert union_elements((7,8,9), (4,5,6)) == (4,5,6,7,8,9)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     union_elements((), ()) == ()\nassert union_elements((2, 1), (2, 1)) == (2, 1)\nassert union_elements((1, 4, 2), (4, 2, 3)) == (1, 4, 2, 3)\nassert union_elements((1, 2), (2, 3)) == (1, 2, 3)\n\nprint('union_elements() is working correctly!')\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     union_elements((1, 2, 3), (4, 5, 6)) == (1, 2, 3, 4, 5, 6), 'Not correct'\nassert     union_elements((1, 2), (4, 5, 6)) == (1, 2, 4, 5, 6), 'Not correct'\nassert     union_elements((1,), (2, 3, 4)) == (1, 2, 3, 4), 'Not correct'\nassert     union_elements((1, 2, 3), (1,)) == (1, 1, 2, 3), 'Not correct'\nassert     union_elements((), ()) == (), 'Not correct'\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     union_elements((1, 5, 7), (2, 4, 6)) == (1, 2, 3, 4, 5, 6, 7)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     union_elements((1, 2, 3, 4), (1, 2, 3, 4, 5, 6)) == (1, 2, 3, 4, 5, 6)\nassert     union_elements((1, 2, 3), (4, 5, 6)) == (1, 2, 3, 4, 5, 6)\nassert     union_elements((1,), (1, 2, 3, 4, 5, 6)) == (1, 2, 3, 4, 5, 6)\nassert     union_elements((), ()) == ()\n\n\ndef intersection_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the intersection of the elements of two given tuples and output them in sorted order.\n    '''\n    pass\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     union_elements(tup1, tup2) == [1, 3, 4]\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     union_elements((1, 2, 3), (1, 2, 3)) == (1, 1, 2, 2, 3, 3), 'union elements'\nassert union_elements((1, 2, 3), (2, 3, 4)) == (1, 2, 3, 4), 'union elements'\nassert union_elements((1, 2, 3), (5, 6)) == (1, 2, 3, 5, 6), 'union elements'\n\nprint('all tests passed!')\nprint('==========================='"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     union_elements((1,3,4,5), (2,6,7,8,9)) == (1,2,3,4,5,6,7,8,9)\nassert     union_elements((1,2,3), (4,5,6,7)) == (1,2,3,4,5,6,7)\nassert     union_elements((1,2), (3,4,5,6,7)) == (1,2,3,4,5,6,7)\nassert     union_elements((), ()) == ()\nassert     union_elements((), (1,2,3)) == (1,2,3)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    # union_elements(('a',), ('b',)) == ('a', 'b')\n    # union_elements(('a',), ('b', 'c')) == ('a', 'b', 'c')\n    # union_elements(('a', 'b'), ('c', 'd')) == ('a', 'b', 'c', 'd')\n    # union_elements(('a', 'b', 'c'), ('d',)) == ('a', 'b', 'c', 'd')\n    # union_elements(('a',), ('b', 'c')) == ('a', 'b', 'c')\n    # union_elements(('a',), ('b', 'c', 'd')) == ('a', 'b', 'c', 'd')\n    # union_elements(('a', 'b'), ('c', 'd', 'e')) == ('a', 'b', 'c', 'd', 'e')\n    # union_elements(('a', 'b'), ('c', 'd', 'e', 'f')) == ('a', 'b', 'c', 'd', 'e', 'f')\n    # union_elements(('a', 'b', 'c'), ('d', 'e')) == ('a', 'b', 'c', 'd', 'e')\n    # union_elements(('a', 'b', 'c', 'd'), ('e', 'f')) == ('a', 'b', 'c', 'd', 'e', 'f')\n    # union_elements(('a', 'b', 'c'), ('d', 'e', 'f', 'g')) == ('a', 'b', 'c', 'd', 'e', 'f', 'g')\n    # union_elements(('a', 'b', 'c', 'd'), ('e', 'f', 'g')) == ('a', 'b', 'c', 'd', 'e', 'f', 'g')\n    # union_elements(('a', 'b', 'c', 'd'), ('e', 'f', 'g', 'h')) == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\n    # union_elements(('a', 'b', 'c', 'd'), ('e', 'f', 'g', 'h', 'i')) == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')\n    # union_elements(('a', 'b', 'c', 'd'), ('e', 'f', 'g', 'h', 'i', 'j')) == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')\n    # union_elements(('a', 'b', 'c', 'd'), ('e', 'f', 'g', 'h', 'i', 'j', 'k')) == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k')\n    # union_elements(('a', 'b', 'c', 'd'), ('e', 'f', 'g', 'h', 'i', 'j', 'k', 'l')) == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l')\n    # union_elements(('a', 'b', 'c', 'd'), ('e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m')) == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m')\n    # union_elements(('a', 'b', 'c', 'd'), ('e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n')) == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n')\n    # union_elements(('a', 'b', 'c', 'd'), ('e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o')) == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o')\n    # union_elements(('a', 'b', 'c', 'd'), ('e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p')) == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p')\n    # union_elements(('a', 'b', 'c', 'd'), ('e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q')) == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q')\n    # union_elements(('a', 'b', 'c', 'd'), ('e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r')) == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r')\n    # union_elements(('a', 'b', 'c', 'd'), ('e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s')) == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s')\n    # union_elements(('a', 'b', 'c', 'd'), ('e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't')) == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't')\n    # union_elements(('a', 'b', 'c', 'd'), ('e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u')) == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u')\n    # union_elements(('a', 'b', 'c', 'd'), ('e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v')) == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v')\n    # union_elements(('a', 'b', 'c', 'd'), ("
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Find_Max_Length([[]]) == 0, \"Test 1: Passed\"\nassert     Find_Max_Length([[1, 2, 3], [4, 5, 6]]) == 3, \"Test 2: Passed\"\nassert     Find_Max_Length([[1, 2, 3, 4, 5, 6], [4, 5, 6, 7, 8], [7, 8, 9]]) == 7, \"Test 3: Passed\"\nassert     Find_Max_Length([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]) == 4, \"Test 4: Passed\"\nassert     Find_Max_Length([[1, 2, 3], [1, 2, 3]]) == 4, \"Test 5: Passed\"\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Find_Max_Length([[1], [2,3], [1,2,3]]) == 3, 'Wrong Answer'\nassert     Find_Max_Length([[1,2], [3], [1,2,3]]) == 4, 'Wrong Answer'\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     Find_Max_Length([1,2,3,4,5,6]) == 4, 'Incorrect output'\nassert     Find_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == 8, 'Incorrect output'\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint Find_Max_Length(lst) == 5\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Find_Max_Length([[1, 2, 3], [4, 5, 6], [1, 2, 3]]) == 3, \"Should be 3\"\nassert Find_Max_Length([[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]]) == 4, \"Should be 4\"\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef Find_Max_Length2(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    pass\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Find_Max_Length([]) == 0\nassert     Find_Max_Length([1,2,3]) == 3\nassert     Find_Max_Length([1,2,3,1,2,3]) == 5\nassert     Find_Max_Length([1,2,3,1,2,3,1,2,3]) == 6\nassert     Find_Max_Length([1,2,3,1,2,3,1,2,3,1,2,3]) == 9\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Find_Max_Length([]) == 0\nassert Find_Max_Length([1,2,3]) == 3\nassert Find_Max_Length([1,1,1,1,1,1,1]) == 6"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Find_Max_Length([]) == 0\nassert     Find_Max_Length([1]) == 1\nassert     Find_Max_Length([1,2,3]) == 3\nassert     Find_Max_Length([1,2,3,4]) == 4\nassert     Find_Max_Length([1,2,3,4,5]) == 5\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_values('this is \"string\" with quotes') =='string'\nassert     extract_values('this is \"string\" with quotes') =='string'\nassert     extract_values('this is \"string\" with quotes') =='string'\nassert     extract_values('this is \"string\" with quotes') =='string'\nassert     extract_values('this is \"string\" with quotes') =='string'\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_values('This is a string with \"quotation marks\".') == \"quotation marks\"\nassert     extract_values('This is a string with \"double quotes\"') == 'double quotes'\nassert     extract_values('This is a string with \"single quotes\"') =='single quotes'\nassert     extract_values('This is a string with \"multi-line quotes\"') =='multi-line quotes'\nassert     extract_values('This is a string with \"triple single quotes\"') == 'triple single quotes'\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_values('python for everyone') == ['python', 'for', 'everyone']\nassert     extract_values('python for') == ['python', 'for']\nassert     extract_values('python') == []\nassert     extract_values('for') == []\nassert     extract_values('anything') == []\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_values('a = \"hello\"') == [\"a\", \"=\", \"hello\"]\nassert     extract_values('\"yes, they said\"') == ['yes, they said']\nassert     extract_values('a,b,c = 1,2,3') == ['a', ',', 'b', ',', 'c', '=', '1', ',', '2', ',', '3']\nassert     extract_values('print \"this\"') == ['print', '\"this\"']\nassert     extract_values('x = 1') == ['x', '=', '1']\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_values(\"'hi'\") == ['hi']\nassert     extract_values(\"'hi' and 'hey'\") == ['hi'] and ['hey']\nassert     extract_values(\"hi' and 'hey'\") == ['hi'] and ['hey']\nassert     extract_values(\"hi' and 'hey' and 'you'\") == ['hi'] and ['hey'] and ['you']\nassert     extract_values(\"'hi' and 'hey' and 'you'\") == ['hi', 'hey', 'you']\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_values('a\"b') == \"b\", \"bad string\"\nassert     extract_values('a\"b\"') == \"b\"\nassert     extract_values('\"') == \"\", \"bad string\"\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ntext = \"x='abc', y=3.4, z=[10,20,30,40,50]\"\nassert extract_values(text) == [ \"abc\", \"3.4\", \"[10,20,30,40,50]\" ]\n\ntext = \"x='abc', y=3.4, z='abc' \"\nassert extract_values(text) == [\"abc\", \"3.4\", \"abc\"]\n\ntext = \"x=2, y=3.4, z='abc' \"\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_values('Hello \"some_text\" world') =='some_text'\nassert     extract_values('I said, \"hello\"') == 'hello'\nassert     extract_values('I said, \"I said, \"hello\"') == 'I said, '\nassert     extract_values('I said, \"I said, \"hello\"') == 'I said, '\nassert     extract_values('I said, \"I said, \"hello\"') == 'I said, '\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_values(\"'Hello'\") == ['Hello']\nassert     extract_values(\"'Hello, how are you?'\") == ['Hello', 'how are you?']\nassert     extract_values(\"'Hello, how are you?' and 'I am fine.'\") == ['Hello', 'how are you?', 'I am fine.']\nassert     extract_values(\"'Hello, how are you? and 'I am fine.' and 'Fine'\") == ['Hello', 'how are you?', 'I am fine.', 'Fine']\nassert     extract_values(\"'Hello, how are you? and 'I am fine.' and 'Fine' and 'Goodbye'\") == ['Hello', 'how are you?', 'I am fine.', 'Fine', 'Goodbye']\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    \n    Examples:\n    \n    >>> extract_values('This is \"a\" string with \"some quotes\" and n \"another string\"')\n    ['This is ', 'another string']\n    >>> extract_values('First: \"a\" second :\"b\"')\n    ['First: ', 'Second: ', 'b']\n    >>> extract_values('\"a\"')\n    ['a']\n    >>> extract_values(\"'a'\")\n    ['a']\n    >>> extract_values(\"'abc'\")\n    ['abc']\n    >>> extract_values(\"'abc'\")\n    ['abc']\n    '''\n    pass\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(\"Test Case 1: \",count_Pairs([1, 2, 3, 4, 5],5)) # expect : 3\nassert \nprint(\"Test Case 2: \",count_Pairs([0, 1, 1, 1, 1],4)) # expect : 4\nassert \nprint(\"Test Case 3: \",count_Pairs([1, 2, 3, 4],5)) # expect : 4\nassert \nprint(\"Test Case 4: \",count_Pairs([1, 2, 3, 4, 5, 6],6)) # expect : 0\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_Pairs([1,3,1,4],4) == 1, '1'\nassert     count_Pairs([1,3,1,4],3) == 2, '2'\nassert     count_Pairs([1,3,1,4],5) == 3, '3'\nassert     count_Pairs([1,3,1,4],2) == 0, '0'\nassert count_Pairs([1,2,3,4,5],4) == 4, '4'\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ncount_Pairs([4, 6, 1], 3) == 2\ncount_Pairs([5, 4, 2, 1, 3, 6], 5) == 3\ncount_Pairs([5, 4, 2, 1, 3, 6], 6) == 2\ncount_Pairs([5, 4, 2, 1, 3, 6], 7) == 0\ncount_Pairs([5, 4, 2, 1, 3, 6], 5) == 0\ncount_Pairs([5, 4, 2, 1, 3, 6], 6) == 0\ncount_Pairs([5, 4, 2, 1, 3, 6], 7) == 0\ncount_Pairs([5, 4, 2, 1, 3, 6], 0) == 0\ncount_Pairs([5, 4, 2, 1, 3, 6], -1) == 0\n\n\ndef count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pass\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ncount_Pairs([1,2,3,4,5,6],7) == 4\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\narr = [1,2,3,4] \nn = len(arr) \n\nassert (count_Pairs(arr,n) == 2) \n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     split(\"aBc\") == ['a', 'b', 'c']\nassert     split(\"aBCd\") == ['a', 'b', 'c', 'd']\nassert     split(\"aBCd \") == ['a', 'b', 'c', 'd ']\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef substr(word, i, j):\n    '''\n    Write a python function to find substring in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n'''\nWrite a python function to split a string into words.\n\nInput Format\n\nString S.\n\nConstraints\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nassert split('test') == ['t','e','s']\nassert split('test') == ['t','e','s']\nassert split('test') == ['t','e','s']\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     split('hello') == ['h', 'e', 'l', 'l', 'o']\nassert     split('hello world') == ['h', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'l', 'd']\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     split('abc') == ['a', 'b', 'c']\nassert     split('abcd') == ['a', 'b', 'c', 'd']\nassert     split('abcde') == ['a', 'b', 'c', 'd', 'e']\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     split('hello') == ['h', 'e', 'l', 'l', 'o']\nassert    split('hello world') == ['h', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'l', 'd']\nassert    split('h e l l o') == ['h', 'e', 'l', 'l', 'o']\nassert    split('hello world') == ['h', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'l', 'd']\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     split('123')     == ['1', '2', '3'], 'wrong output'\nassert     split('abc')     == ['a', 'b', 'c'], 'wrong output'\nassert     split('abc')     == ['a', 'b', 'c'], 'wrong output'\nassert     split('123')     == ['1', '2', '3'], 'wrong output'\nassert     split('a_b_c')     == ['a', 'b', 'c'], 'wrong output'\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     split(\"a b c\") == ['a', 'b', 'c']\nassert     split(\"a b   c\") == ['a', 'b', 'c']\nassert     split(\"ab c\") == ['ab', 'c']\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_digits(12) == 3\nassert     sum_digits(99) == 18\nassert     sum_digits(0) == 0\nassert     sum_digits(9) == 9\nassert     sum_digits(100) == 1\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_digits(12345) == 10,'sum_digits(12345) == 10'\nassert sum_digits(0) == 0,'sum_digits(0) == 0'\nassert sum_digits(9) == 9,'sum_digits(9) == 9'\nassert sum_digits(-7) == 1,'sum_digits(-7) == 1'\nassert sum_digits(-9) == 0,'sum_digits(-9) == 0'\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_digits(0) == 0\nassert     sum_digits(1234) == 9\nassert     sum_digits(123) == 6\nassert     sum_digits(123456) == 15"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_digits(123) == 6, \"Wrong result\"\nassert     sum_digits(0) == 0, \"Wrong result\"\nassert     sum_digits(12) == 3, \"Wrong result\"\nassert     sum_digits(123) == 9, \"Wrong result\"\nassert     sum_digits(999) == 13, \"Wrong result\"\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_digits(123) == 6\nassert     sum_digits(0) == 0\nassert     sum_digits(-123) == 6\nassert     sum_digits(12345678) == 18\n\n'''\nWrite a function called make_chocolate that takes an amount of money as input, and returns the number of chocolate bars that should be added to the bar.\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_digits(123) == 3\nassert     sum_digits(12) == 1\nassert     sum_digits(0) == 0\nassert     sum_digits(-123) == -3\nassert     sum_digits(-12) == -1\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_digits(10) == 1, 'Wrong answer'\nassert     sum_digits(100) == 1, 'Wrong answer'\nassert     sum_digits(9) == 9, 'Wrong answer'\nassert     sum_digits(1000000) == 10, 'Wrong answer'\nassert     sum_digits(-10) == 1, 'Wrong answer'\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_digits(123) == 6\nassert sum_digits(1230) == 22\nassert sum_digits(0) == 0\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert issort_list([1, 2, 3])\nassert issort_list([3, 2, 1])\nassert issort_list([1, 2, 3, 4])\nassert issort_list([3, 2, 4, 1])\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     issort_list(['a', 'b', 'c', 'd', 'e']) == False\nassert     issort_list(['a', 'a', 'b', 'c', 'd', 'd', 'e']) == True\nassert     issort_list([]) == True\nassert     issort_list([-1, -2, -3]) == False\nassert     issort_list([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == False\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     issort_list([]) == True\nassert     issort_list([0]) == True\nassert     issort_list([1,2,3,4]) == True\nassert     issort_list([1,3,2,4]) == True\nassert     issort_list([2,4,1,3]) == False\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     issort_list([1,3,2]) == False\nassert     issort_list([1,3,2,4,5,6,7,8]) == True\n\n'''\nRead the following sample tests\n'''\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     issort_list([1, 2, 3, 4, 5]) == True, \"All the numbers in the list should be in increasing order\"\nassert issort_list([1, 2, 4, 5, 3]) == False, \"All the numbers in the list should be in increasing order\"\nassert issort_list([1, 2, 5, 4, 3]) == False, \"All the numbers in the list should be in increasing order\"\nassert issort_list([1, 3, 5, 2, 4]) == False, \"All the numbers in the list should be in increasing order\"\nassert issort_list([1, 3, 5, 2, 3]) == True, \"All the numbers in the list should be in increasing order\"\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef issort(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    pass\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint('==========Checking the correctness of issort_list===========')\n\nassert issort_list([1,2,3,4,5]) == True\nassert issort_list([5,4,3,2,1]) == True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nimport random\nimport string\n\ndef rand_string(n):\n    '''\n    Generate a random string with a length of n\n    '''\n    pass\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nempty_list(3) == empty_list(4)\nempty_list(5) == empty_list(6)\nempty_list(7) == empty_list(8)\nempty_list(9) == empty_list(10)\nempty_list(11) == empty_list(12)\n\nempty_list(3) == empty_list(3)\nempty_list(4) == empty_list(4)\nempty_list(5) == empty_list(5)\nempty_list(6) == empty_list(6)\nempty_list(7) == empty_list(7)\nempty_list(8) == empty_list(8)\nempty_list(9) == empty_list(9)\nempty_list(10) == empty_list(10)\nempty_list(11) == empty_list(11)\nempty_list(12) == empty_list(12)\n\ndef print_dict(d):\n    '''\n    Write a function to print a dictionary\n    '''\n    pass\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     empty_list(10) ==    [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}], 'Not an empty list'\nassert     empty_list(20) ==    [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}], 'Not an empty list'\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     empty_list(0) == [], \"Empty list should be empty\"\nassert     empty_list(1) == [{}], \"List with one element should be of length 1\"\nassert     empty_list(2) == [{}, {}], \"List with two elements should be of length 2\"\nassert     empty_list(3) == [{}, {}, {}], \"List with three elements should be of length 3\"\n\ndef capitalize_words(sentence):\n    '''\n    Write a function that capitalizes the first letter of each word in a sentence.\n    '''\n    pass\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     empty_list(0) == [], \"Your empty_list function returned an empty list!\"\nassert     empty_list(1) == [{}], \"Your empty_list function returned an empty list!\"\nassert     empty_list(2) == [{}, {}], \"Your empty_list function returned an empty list!\"\nassert     empty_list(3) == [{}, {}, {}], \"Your empty_list function returned an empty list!\"\nassert     empty_list(4) == [{}, {}, {}, {}], \"Your empty_list function returned an empty list!\"\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     empty_list(0) == []\nassert     empty_list(1) == []\nassert     empty_list(2) == []\nassert     empty_list(3) == []\nassert     empty_list(4) == [{},{},{},{},{}]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     empty_list(0) == []\nassert     empty_list(1) == [{}]\nassert     empty_list(2) == [{}, {}]\nassert     empty_list(3) == [{}, {}, {}]\nassert     empty_list(4) == [{}, {}, {}, {}]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     empty_list(1) ==     [{}], \\\n        \"Wrong answer\"\nassert     empty_list(2) ==     [{},{}], \\\n        \"Wrong answer\"\nassert     empty_list(3) ==     [{},{},{}], \\\n        \"Wrong answer\"\nassert     empty_list(4) ==     [{},{},{},{}], \\\n        \"Wrong answer\"\nassert     empty_list(5) ==     [{},{},{},{},{}], \\\n        \"Wrong answer\"\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     empty_list(0) == [], 'Wrong'\nassert     empty_list(1) ==     [{}], 'Wrong'\nassert     empty_list(2) ==     [{}, {}], 'Wrong'\nassert     empty_list(3) ==     [{}, {}, {}], 'Wrong'\nassert     empty_list(4) ==     [{}, {}, {}, {}], 'Wrong'\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_sublists([['apple','pear','orange','banana','banana'],['egg','cow','mouse','elephant','elephant']]    ) == [['apple','pear','orange','banana','banana'],['egg','cow','mouse','elephant','elephant']]\nassert     sort_sublists([['banana','apple','banana','apple','banana'],['peter','piper','sam','tom','tom']]) == [['banana','apple','banana','apple','banana'],['peter','piper','sam','tom','tom']]\nassert     sort_sublists([['mouse','elephant','elephant','peter','elephant'],['tom','tom','tom','peter','peter']]) == [['mouse','elephant','elephant','peter','elephant'],['tom','tom','tom','peter','peter']]\nassert     sort_sublists([['mouse','elephant','elephant','peter','peter'],['tom','tom','tom','peter','peter']]) == [['mouse','elephant','elephant','peter','peter'],['tom','tom','tom','peter','peter']]\nassert     sort_sublists([['peter','tom','tom','tom','tom'],['peter','peter','peter','peter','peter']]) == [['peter','tom','tom','tom','tom'],['peter','peter','peter','peter','peter']]\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    [['a','b'],['d','c'],['c','a'],['e','f']] == sort_sublists([['a','b'],['d','c'],['c','a'],['e','f']])\nassert \n    [['a','b','c'],['d','e','f'],['c','d','e']] == sort_sublists([['a','b','c'],['d','e','f'],['c','d','e']])\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_sublists([]) == []\nassert     sort_sublists([[\"1\"], [\"2\"], [\"3\"]]) == [['1'], ['2'], ['3']]\nassert     sort_sublists([[\"1\", \"2\"], [\"3\", \"4\"]]) == [['1', '2'], ['3', '4']]\nassert     sort_sublists([[\"1\", \"2\"], [\"2\", \"1\"]]) == [['1', '2'], ['2', '1']]\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_sublists(['hi', 'bye', 'hi']) == ['hi', 'bye', 'hi'], \"Wrong result\"\nassert     sort_sublists(['hi', 'bye', 'hi', 'hi', 'hi', 'bye', 'bye', 'hi']) == ['hi', 'hi', 'hi', 'bye', 'bye', 'hi', 'hi', 'bye'], \"Wrong result\"\nassert     sort_sublists(['bye', 'hi', 'hi', 'hi', 'hi', 'bye', 'bye', 'hi']) == ['bye', 'hi', 'hi', 'hi', 'hi', 'bye', 'bye', 'hi'], \"Wrong result\"\nassert     sort_sublists(['hi', 'bye', 'hi', 'hi', 'hi', 'bye', 'bye', 'hi']) == ['hi', 'hi', 'hi', 'hi', 'bye', 'bye', 'hi', 'bye'], \"Wrong result\"\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_sublists([[1,2,3,4], \n                        [2,3,4,5], \n                        [3,4,5,6], \n                        [4,5,6,7]]) == [[1, 2, 3, 4], \n                                        [2, 3, 4, 5], \n                                        [3, 4, 5, 6], \n                                        [4, 5, 6, 7]]\n\nprint('TEST CASE #2 PASSED')\n\ndef find_element(a, b):\n    '''\n    Write a function to find the index of the element in a list that is not in another list.\n    '''\n    pass\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_sublists([[\"1\", \"2\"], [\"1\", \"3\"], [\"2\", \"4\"], [\"2\", \"3\"], [\"2\", \"1\"], [\"3\", \"4\"]]) == \\\n    [[\"1\", \"1\"], [\"1\", \"2\"], [\"2\", \"2\"], [\"2\", \"3\"], [\"3\", \"3\"], [\"3\", \"4\"]]\nassert     sort_sublists([[\"1\", \"2\"], [\"2\", \"3\"], [\"3\", \"4\"], [\"4\", \"5\"]]) == \\\n    [[\"1\", \"1\"], [\"1\", \"2\"], [\"2\", \"2\"], [\"2\", \"3\"], [\"3\", \"3\"], [\"3\", \"4\"], [\"4\", \"4\"], [\"4\", \"5\"]]\nassert     sort_sublists([[\"1\", \"2\"], [\"2\", \"3\"], [\"3\", \"4\"], [\"4\", \"5\"]]) == \\\n    [[\"1\", \"1\"], [\"1\", \"2\"], [\"2\", \"2\"], [\"2\", \"3\"], [\"3\", \"3\"], [\"3\", \"4\"], [\"4\", \"4\"], [\"4\", \"5\"]]\nassert     sort_sublists([[\"1\", \"2\"], [\"2\", \"3\"], [\"3\", \"4\"], [\"4\", \"5\"]]) == \\\n    [[\"1\", \"1\"], [\"1\", \"2\"], [\"2\", \"2\"], [\"2\", \"3\"], [\"3\", \"3\"], [\"3\", \"4\"], [\"4\", \"4\"], [\"4\", \"5\"]]\nassert     sort_sublists([[\"1\", \"2\"], [\"2\", \"3\"], [\"3\", \"4\"], [\"4\", \"5\"]]) == \\\n    [[\"1\", \"1\"], [\"1\", \"2\"], [\"2\", \"2\"], [\"2\", \"3\"], [\"3\", \"3\"], [\"3\", \"4\"], [\"4\", \"4\"], [\"4\", \"5\"]]\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     two_unique_nums([1, 2, 3, 4, 5]) == 5\nassert     two_unique_nums([1, 2, 2, 3, 4, 5]) == 5\nassert     two_unique_nums([1, 2, 2, 2, 3, 4, 5]) == 5\nassert     two_unique_nums([2, 2, 2, 3, 4, 5]) == 5\nassert     two_unique_nums([1, 2, 3, 4, 5]) == 5\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     two_unique_nums(['a', 'a', 'a']) == ['a']\nassert     two_unique_nums(['a', 'b', 'a', 'a']) == ['a', 'a', 'a']\nassert     two_unique_nums(['a', 'b', 'a', 'b']) == ['a', 'b']\nassert     two_unique_nums(['a', 'b', 'c']) == ['a', 'b', 'c']\nassert     two_unique_nums(['a', 'b', 'b', 'c']) == ['a', 'b', 'c']\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     two_unique_nums([[1, 2], [1, 2], [1], [1]]) == [[1], [1], [1], [1]]\nassert     two_unique_nums([[1], [1], [1], [1]]) == [[1], [1], [1], [1]]\nassert     two_unique_nums([[1], [1], [1]]) == [[1], [1], [1]]\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     two_unique_nums([1, 2, 3, 4, 5, 6, 1, 2, 4]) == True, 'incorrect output'\nassert     two_unique_nums([1, 2, 3, 3, 3, 4, 4, 5, 5]) == False, 'incorrect output'\nassert     two_unique_nums([1, 1, 1, 2, 2, 2, 3, 3, 3]) == True, 'incorrect output'"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     two_unique_nums([1,2,3,3]) == True\nassert     two_unique_nums([1,2,3,4]) == False\nassert     two_unique_nums([3,4,4,4]) == True\nassert     two_unique_nums([]) == True\nassert     two_unique_nums([]) == True\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     two_unique_nums([]) == []\nassert     two_unique_nums([1,1,2,2,3]) == [1,2,3]\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     two_unique_nums([[1,2,3],[4,5,6,7],[8,9]]) == [[1,2,3],[4,5,6,7],[8,9]]\nassert     two_unique_nums([[1,2,3],[4,5,6,7,8,9,0,1]]) == [[1,2,3],[4,5,6,7,8,9,0,1]]\nassert     two_unique_nums([[1,2,3],[2,3],[4,5,6,7]]) == [[1,2,3],[2,3],[4,5,6,7]]\nassert     two_unique_nums([[1,2,3],[2,3,4,5],[5,6,7,8,9]]) == [[1,2,3],[2,3,4,5],[5,6,7,8,9]]\nassert     two_unique_nums([[1,2,3],[2,3,4,5,5],[5,6,7,8,9,9]]) == [[1,2,3],[2,3,4,5,5],[5,6,7,8,9,9]]\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert two_unique_nums([1,2,3,4,5,6,7,7]) == False\nassert two_unique_nums([1,2,3,4,5,6,7,7,8]) == True\nassert two_unique_nums([1,2,3,4,5,6,7,8,9]) == True\n\ndef remove_duplicates(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    pass\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     two_unique_nums([[1,2,3,3],[2,4,6,7,8]]) == [[1,2,3],[4,6,7,8]]\nassert two_unique_nums([[1,2,3,4],[1,2,3,4],[3,4]]) == [[1,2,3,4]]\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     two_unique_nums([1,1,2,3,3]) == True, 'Expected True'\nassert     two_unique_nums([1,1,2,2,3]) == True, 'Expected True'\nassert     two_unique_nums([1,2,2,3,3]) == False, 'Expected False'\nassert     two_unique_nums([1,1,1,1,1]) == False, 'Expected False'\nassert     two_unique_nums([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == True, 'Expected True'\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     unique_product([1,2,3,4,5,6,7,8]) == 720\nassert     unique_product([1,2,3,4,5,4,3,2,1]) == 60\nassert     unique_product([1,2,3,4,5,5,3,2,1]) == 120\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     unique_product([1,3,2,1,4]) == 24\nassert     unique_product([]) == 1\nassert     unique_product([1,2,3,4]) == 24\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     unique_product([1,3,3,3,7,7,7]) == 336\nassert     unique_product([1,1,1,1,1,1,1]) == 1\nassert     unique_product([1,2,3,4,5]) == 120\nassert     unique_product([-10,-20,-30,-40,-50,0,1]) == -240\nassert     unique_product([]) == 1\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     unique_product([5, 5, 7, 10, 3]) ==     420\nassert     unique_product([1, 1, 2, 3, 4, 5, 6, 7, 8, 9]) ==     4540\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     unique_product([5,6,2,3,5,3,7]) == 105\nassert     unique_product([3,4,5]) == 60\nassert     unique_product([]) == 1\nassert     unique_product([1]) == 1\nassert     unique_product([1,1]) == 2\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     unique_product([1, 2, 3, 3, 4, 5, 6, 6, 7, 7, 8, 9, 10, 11, 11, 12, 13, 14, 14, 15, 16, 16, 17, 17, 18, 18, 19, 20, 20]) == 120\nprint('Unique product:', unique_product([1, 2, 3, 3, 4, 5, 6, 6, 7, 7, 8, 9, 10, 11, 11, 12, 13, 14, 14, 15, 16, 16, 17, 17, 18, 18, 19, 20, 20]))"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     unique_product([1, 4, 4, 4, 5, 6, 7, 3, 8, 3, 2]) == 336\nassert unique_product([1, 5, 2, 3, 5]) == 120\nassert unique_product([]) == 1\nassert unique_product([1]) == 1\nassert unique_product([1, 1]) == 1\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     unique_product([4,3,2,2,3]) == 8, \"Error-1\"\nassert     unique_product([3,2,2,2,2]) == 6, \"Error-2\"\nassert     unique_product([4,3,2,2,2,2,2]) == 12, \"Error-3\"\n\ndef unique_product_numbers(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     unique_product([1, 3, 4, 3, 1, 6]) == 36\nassert     unique_product([1, 3, 4, 5, 5, 6]) == 30\nassert     unique_product([1, 2, 3, 1, 2]) == 6\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     unique_product([1,1,2,4,4,5,5,5,8,6]) == 120, \"Wrong output\"\nassert     unique_product([]) == 0, \"Wrong output\"\nassert     unique_product([-1]) == 0, \"Wrong output\"\nassert     unique_product([-1,1,2,4,4,5,5,5,8,6]) == 240, \"Wrong output\""
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     surfacearea_cylinder(4,3) == 16.25, 'wrong result'\nprint('Correct')\nprint()\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     surfacearea_cylinder(2,1)==4.5, \"Expected: 4.5, got: {}\".format(surfacearea_cylinder(2,1))\nassert     surfacearea_cylinder(2,3)==12.5, \"Expected: 12.5, got: {}\".format(surfacearea_cylinder(2,3))\nassert     surfacearea_cylinder(3,4)==32.5, \"Expected: 32.5, got: {}\".format(surfacearea_cylinder(3,4))\nassert     surfacearea_cylinder(7.5,3)==55.5, \"Expected: 55.5, got: {}\".format(surfacearea_cylinder(7.5,3))\nassert     surfacearea_cylinder(10,3)==79.5, \"Expected: 79.5, got: {}\".format(surfacearea_cylinder(10,3))\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     surfacearea_cylinder(2,2) == 8\nassert     surfacearea_cylinder(2.5,2.5) == 12\nassert     surfacearea_cylinder(3,3) == 20\nassert     surfacearea_cylinder(2,4) == 12\nassert     surfacearea_cylinder(6,6) == 108\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     surfacearea_cylinder(1,1)==2\nassert     surfacearea_cylinder(3,2)==6\nassert     surfacearea_cylinder(4,2)==12\nassert     surfacearea_cylinder(5,2)==20\nassert     surfacearea_cylinder(6,2)==24\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     surfacearea_cylinder(1,2) == 2.56, 'incorrect surfacearea_cylinder'\nassert surfacearea_cylinder(1,2) == 3.14, 'incorrect surfacearea_cylinder'\nassert surfacearea_cylinder(1.5,2) == 3.14, 'incorrect surfacearea_cylinder'\nassert surfacearea_cylinder(1,2.5) == 2.56, 'incorrect surfacearea_cylinder'\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     surfacearea_cylinder(3,4) == 12\nassert     surfacearea_cylinder(1,1) == 2\nassert     surfacearea_cylinder(3,2) == 9\n\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    pass\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     surfacearea_cylinder(3,4) == 12\nassert     surfacearea_cylinder(6,4) == 32\n\nprint('PASSED!')\n\ndef surfacearea_rectangle(a,b):\n    '''\n    Write a function to find the surface area of a rectangle.\n    '''\n    pass\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     surfacearea_cylinder(4,1) == 5\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n'''\n3.2\nWrite a function to find the volume of a cylinder.\n'''\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_Sub_Array([1,1,3,3,7,7],[1,3,3,7]) == True, 'Wrong result'\nassert     is_Sub_Array([1,1,3,3,7,7],[1,3,3,5]) == False, 'Wrong result'\nassert     is_Sub_Array([1,1,3,3,7,7],[1,3,3,7,7]) == False, 'Wrong result'\nassert     is_Sub_Array([1,1,3,3,7,7],[1,3,3,7]) == False, 'Wrong result'\nassert     is_Sub_Array([1,1,3,3,7,7],[1,3,3,7,8]) == False, 'Wrong result'\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_Sub_Array([1,2,3,4], [1,2,3,4]) == True\nassert     is_Sub_Array([1,2,3,4], [1,3,4]) == False\nassert     is_Sub_Array([1,2,3,4], [1,3,5]) == False\nassert     is_Sub_Array([1,2,3,4], [1,3,5,6]) == False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_Sub_Array([1,4,9,16,25], [1,4,9,16,25,26]) == True, 'Wrong Answer'\nassert     is_Sub_Array([1,4,9,16,25], [1,4,9,16,25]) == False, 'Wrong Answer'\nassert     is_Sub_Array([1,4,9,16,25], [1,4,9,16,25,26,27]) == False, 'Wrong Answer'\nassert     is_Sub_Array([1,4,9,16,25], [1,4,9,16,25,26]) == False, 'Wrong Answer'\nassert     is_Sub_Array([1,4,9,16,25], [1,4,9,16,25,26,27,28]) == False, 'Wrong Answer'\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     (is_Sub_Array([10,20,30,40],[10,20,30,40])) == True, \"Should be True\"\nassert     (is_Sub_Array([10,20,30,40],[10])) == False, \"Should be False\"\nassert     (is_Sub_Array([10,20,30,40],[10,20,30])) == False, \"Should be False\"\nassert     (is_Sub_Array([10,20,30,40],[10,20,30,40])) == True, \"Should be True\"\nassert     (is_Sub_Array([10,20,30,40,50],[10,20,30,40,50])) == True, \"Should be True\"\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_Sub_Array([1,2,3,5], [2,4,6]) == True\nassert     is_Sub_Array([1,2,3,5], [4,6]) == False\nassert     is_Sub_Array([1,2,3], [4,6]) == False\nassert     is_Sub_Array([1,2,3], []) == False\nassert     is_Sub_Array([], [1,2,3]) == True\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_Sub_Array([1, 2, 3, 4], []) == True, \"wrong\"\nassert     is_Sub_Array([1, 2, 3, 4], [1, 2, 3, 4]) == True, \"wrong\"\nassert     is_Sub_Array([1, 2, 3, 4], [1, 2, 3]) == False, \"wrong\"\nassert     is_Sub_Array([1, 2, 3, 4], [2, 3]) == True, \"wrong\"\nassert     is_Sub_Array([1, 2, 3, 4], [2, 3, 4]) == True, \"wrong\"\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nis_Sub_Array([1,2,3,4],3)\n\nassert \nis_Sub_Array([1,2,3,4,5,6,7,8],7)\n\nassert \nis_Sub_Array([1,2,3,4,5,6,7,8,9],8)\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_Sub_Array([], []) == True\nassert     is_Sub_Array([1,2,3], []) == False\nassert     is_Sub_Array([1,2,3], [1]) == True\nassert     is_Sub_Array([1,2,3], [2]) == True\nassert     is_Sub_Array([1,2,3], [3]) == True\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     last_Digit_Factorial(1) == 1 \nassert     last_Digit_Factorial(2) == 1 \nassert     last_Digit_Factorial(10) == 1 \nassert     last_Digit_Factorial(10) == 1 \nassert     last_Digit_Factorial(100) == 1 \n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     last_Digit_Factorial(89) == 8\nassert     last_Digit_Factorial(891) == 1\nassert     last_Digit_Factorial(9) == 9\nassert     last_Digit_Factorial(98) == 0\nassert     last_Digit_Factorial(9999) == 0\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fact = 1\n    while n >= 1:\n        n = n//10\n        fact = fact * n\n    return fact % 10\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     last_Digit_Factorial(5) == 5\nassert     last_Digit_Factorial(8) == 8\nassert     last_Digit_Factorial(13) == 1\nassert     last_Digit_Factorial(0) == 1\nassert     last_Digit_Factorial(123) == 3\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     last_Digit_Factorial(5) == 5, \"Test Case 1\"\nassert     last_Digit_Factorial(3) == 3, \"Test Case 2\"\nassert     last_Digit_Factorial(1) == 1, \"Test Case 3\"\nassert     last_Digit_Factorial(9) == 0, \"Test Case 4\"\nassert     last_Digit_Factorial(0) == 0, \"Test Case 5\"\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     last_Digit_Factorial(0) == 1, \"Fail\"\nassert     last_Digit_Factorial(1) == 0, \"Fail\"\nassert     last_Digit_Factorial(10) == 9, \"Fail\"\nassert     last_Digit_Factorial(20) == 19, \"Fail\"\nassert     last_Digit_Factorial(40) == 39, \"Fail\"\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     last_Digit_Factorial(10) == 1\nassert     last_Digit_Factorial(25) == 1\nassert     last_Digit_Factorial(45) == 1\nassert     last_Digit_Factorial(125) == 1\nassert     last_Digit_Factorial(625) == 1\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     last_Digit_Factorial(0)==1, 'last_Digit_Factorial should have returned 1'\nassert last_Digit_Factorial(3)==1, 'last_Digit_Factorial should have returned 1'\nassert last_Digit_Factorial(33)==3, 'last_Digit_Factorial should have returned 3'\nassert last_Digit_Factorial(122)==2, 'last_Digit_Factorial should have returned 2'\nassert last_Digit_Factorial(312)==1, 'last_Digit_Factorial should have returned 1'\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     last_Digit_Factorial(5)    ==     2\nassert last_Digit_Factorial(10)    ==    3\nassert last_Digit_Factorial(8)    ==    1\nassert last_Digit_Factorial(9)    ==    1\nassert last_Digit_Factorial(12)    ==    1\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     interleave_lists([1,2,3], [4,5,6], [7,8,9]) == [1,4,7,2,5,8,3,6,9], \"Wrong\"\nassert     interleave_lists([], [], []) == [], \"Wrong\"\nassert     interleave_lists([1,2], [3,4], [5,6,7]) == [1,3,2,5,4,6,7], \"Wrong\"\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     interleave_lists([1,2,3,4],[2,3,4,5],[\"a\",\"b\",\"c\",\"d\"]) == [\"a\",1,1,2,2,3,3,4,4,5,5]\nassert     interleave_lists([1,2,3],[2,3,4],[5,6]) == [1,2,2,3,3,4,4,5,5]\nassert     interleave_lists([1,2,3],[4,5],[6,7]) == [1,4,4,5,5,6,6,7]\nassert     interleave_lists([1,2],[3,4,5],[6,7,8]) == [1,3,6,2,4,7,3,5,6,2,4,7,3,5,6]\nassert     interleave_lists([1,2,3,4],[5,6],[7,8,9]) == [1,5,7,2,6,3,4,9,8,2,6,3,4,9,8]\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     interleave_lists([1,2],['a','b'],['c','d']) == ['1','a','2','c','d','b']\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n'''\nTask 2 -\n\nWrite a function to create a new list by reversing each sublist in the given list.\n'''\ndef rev_list(list):\n    '''\n    Write a function to create a new list by reversing each sublist in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     interleave_lists([1,2,3],[4,5,6],[7,8,9]) == \\\n        [1, 4, 7, 2, 5, 8, 3, 6, 9]\nassert     interleave_lists([1,2,3,4],[5,6,7,8],[9,10,11,12]) == \\\n        [1, 5, 9, 2, 6, 10, 3, 7, 11, 4, 8, 12]\nassert     interleave_lists([],[],[]) == []\nassert     interleave_lists([1,2,3,4,5],[],[]) == [1, 2, 3, 4, 5]\nassert     interleave_lists([],[],[1]) == [1]\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     interleave_lists([1,2,3],[\"a\",\"b\",\"c\"],[\"d\",\"e\",\"f\"]) == [\"1\", \"a\", \"d\", \"2\", \"b\", \"e\", \"3\", \"c\", \"d\", \"f\"]\nassert     interleave_lists([1,2,3],[\"a\",\"b\",\"c\"],[\"d\",\"e\",\"f\"]) == [\"1\", \"a\", \"d\", \"2\", \"b\", \"e\", \"3\", \"c\", \"d\", \"f\"]\nassert     interleave_lists([1,2,3],[\"a\",\"b\",\"c\"],[\"d\",\"e\",\"f\"]) == [\"1\", \"a\", \"d\", \"2\", \"b\", \"e\", \"3\", \"c\", \"d\", \"f\"]\nassert     interleave_lists([1,2,3],[\"a\",\"b\",\"c\"],[\"d\",\"e\",\"f\"]) == [\"1\", \"a\", \"d\", \"2\", \"b\", \"e\", \"3\", \"c\", \"d\", \"f\"]\nassert     interleave_lists([1,2,3],[\"a\",\"b\",\"c\"],[\"d\",\"e\",\"f\"]) == [\"1\", \"a\", \"d\", \"2\", \"b\", \"e\", \"3\", \"c\", \"d\", \"f\"]\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef interleave_lists2(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    pass\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef flatten(list1,list2):\n    '''\n    Write a function to flatten the list of nested lists.\n    '''\n    pass\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_dissimilar((2, 3, 6), (1, 3, 8)) == (2, 3)\nassert     find_dissimilar((2, 3, 6), (1, 8, 3)) == (2, 3)\nassert     find_dissimilar((1, 3, 8), (2, 3, 6)) == ()\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_dissimilar((1,2,3),(1,2,3)) == []\nassert     find_dissimilar((2,1,2),(2,1,2)) == [(1,)]\nassert     find_dissimilar((2,1,2),(2,4,2)) == [(1,), (2,)]\nassert     find_dissimilar((2,1,2,4,2),(2,1,2,4,2)) == [(1, 2)]\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_dissimilar((0, 1, 2, 3, 4), (2, 3, 5, 6, 7)) == {0, 4, 7}\nassert     find_dissimilar((0, 1, 2, 3, 4), (2, 3, 6, 7, 8)) == {0, 3, 4}\nassert     find_dissimilar((0, 1, 2, 3, 4), (2, 5, 6, 7, 8)) == {0, 2, 4, 6, 8}\nassert     find_dissimilar((0, 1, 2, 3, 4), (3, 4, 5, 6, 7)) == {0, 4, 5, 7}\nassert     find_dissimilar((0, 1, 2, 3, 4), (3, 4, 5, 6, 8)) == {0, 4, 5, 6, 8}\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_dissimilar((1,2), (2,3)) == set([1])\nassert     find_dissimilar((2,3), (1,2)) == set([2,3])\nassert     find_dissimilar((1,2), (2,3,4)) == set([1,2])\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_dissimilar((2, 3, 5), (1, 5, 10)) ==     (2, 3)\nassert     find_dissimilar((1, 2, 3, 5, 10), (1, 3, 5, 10)) ==     (1, 5)\nassert     find_dissimilar((1, 2, 3, 5, 10), (1, 3, 5, 10)) ==     (1, 5)\nassert     find_dissimilar((10, 1, 2, 3, 5), (1, 3, 5, 10)) ==     (10, 1)\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(\"Find elements that are different in a tuple\")\n    print(find_dissimilar((1,2,3,4), (4,2,3,1)))\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_dissimilar((1,2,3), (1,2,4)) == (2,3), \\\n    \"This test case is wrong. Expected (2,3), got\" + str(find_dissimilar((1,2,3), (1,2,4)))\nassert     find_dissimilar((1,2,3), (3,4,5)) == (2,3), \\\n    \"This test case is wrong. Expected (2,3), got\" + str(find_dissimilar((1,2,3), (3,4,5)))\nassert     find_dissimilar((1,2,3,4), (1,2,3,5)) == (4,5), \\\n    \"This test case is wrong. Expected (4,5), got\" + str(find_dissimilar((1,2,3,4), (1,2,3,5)))\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_dissimilar((1,2),(1,2,3)) == (2,), \"Wrong result\"\nassert     find_dissimilar((1,2),(1,2,2)) == (2,), \"Wrong result\"\nassert     find_dissimilar((1,2,3),(2,3,4)) == (2,3), \"Wrong result\"\nassert     find_dissimilar((2,3,4),(1,2,3)) == (1,2), \"Wrong result\""
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_dissimilar((1,3,5,7), (4,5,6,7)) ==     (1,2,4,5), \"dissimilar elements\"\nassert     find_dissimilar((1,2,3,4), (4,5,6,7)) ==     (1,2,3,4), \"dissimilar elements\"\nassert     find_dissimilar((1,2,3,4), (1,2,3,4,5)) ==     (1,2,3), \"dissimilar elements\"\nassert     find_dissimilar((1,2,3,4), (1,2,3,4,5,6)) ==     (1,2,3), \"dissimilar elements\"\nassert     find_dissimilar((1,2,3,4), (1,2,3,4,5,6,7)) ==     (1,2,3), \"dissimilar elements\"\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     even_ele(((1,2), (3,4), (5,6), (1,2)), even_fnc) == (1,2,3,4,5,6), \"Wrong\"\nassert     even_ele(((1,2,3), (1,2,3), (1,2,3), (1,2,3), (1,2,3), (1,2,3)), even_fnc) == (1,2,3,1,2,3), \"Wrong\"\nassert     even_ele(((1,2,3), (1,2,3), (1,2,3), (1,2,3), (1,2,3,1,2,3)), even_fnc) == (1,2,3,1,2,3), \"Wrong\"\nassert     even_ele(((1,2,3), (1,2,3), (1,2,3), (1,2,3), (1,2,3), (1,2,3,1,2,3)), even_fnc) == (1,2,3,1,2,3), \"Wrong\"\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     even_ele((2, (\"a\",), (\"b\",), (\"c\",), \"d\"), even_even), \"even_even\"\nassert     even_ele((2, (\"a\",), (\"b\",), (\"c\",), \"d\"), even_odd), \"even_odd\"\nassert     even_ele((2, (\"a\",), (\"b\",), \"c\", \"d\"), even_even), \"even_even\"\nassert     even_ele((2, (\"a\",), (\"b\",), \"c\", \"d\"), even_odd), \"even_odd\"\nassert     even_ele((2, (\"a\",), \"b\", \"c\", \"d\"), even_even), \"even_even\"\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     even_ele(((1,2,3),(4,5,6),(7,8,9))) == (1,4,7,8,9)\nassert     even_ele((('a',1,2),('b',3),('c',4))) == ('a',3,4)\nassert     even_ele(((1,2,3,4),(5,6,7),(8,9,10))) == (1,2,4,5,6,8,9)\nassert     even_ele((1,2,3,4,5,6,7,8,9)) == (1,2,3,4,5,6,7,8)\nassert     even_ele(((1,2,3,4,5),(6,7,8,9),(10,11,12))) == (1,2,3,4,5,6,7,8,9,10,11,12)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ntest_tuple = (1,2,3,4,5,6,7,8,9,10,11)\neven_fnc = even_ele(test_tuple, lambda x: x % 2 == 0)\n\nprint(even_fnc"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \neven_ele(((1, 2), (3, 4), (5, 6), (7, 8), (9, 10)), lambda x: x % 2 == 0)\nassert \neven_ele(((1, 2), (3, 4), (5, 6, 7, 8), (9, 10), (11, 12, 13, 14)), lambda x: x % 2 == 0)\nassert \neven_ele(((1, 2), (3, 4), (5, 6, 7, 8), (9, 10, 11, 12), (13, 14, 15, 16)), lambda x: x % 2 == 0)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     even_ele((1, 2, 3, (1, 2, 3), 4, 5), even_fnc) == ((1, 2, 3), 4, 5)\n\nassert even_ele((1, 2, 3, (1, 2, 3, 4), 5), even_fnc) == ((1, 2, 3), 4)\n\nassert even_ele((1, 2, 3, (1, 2, 3, 4, 5), 6), even_fnc) == ((1, 2, 3), 4)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     even_ele(((1, 2), 3), lambda x: x % 2 == 0) == ((1, 2), 3)\nassert     even_ele(((1, 2), 3), lambda x: x % 2!= 0) == ((1,), 3)\nassert     even_ele(((1, 2), 3), lambda x: x % 2!= 0) == ((1,), 3)\nassert     even_ele(((1, 2), 3), lambda x: x % 2 == 0) == ((1, 2), 3)\nassert even_ele(((1, 2), 3, 4), lambda x: x % 2 == 0) == ((1,), 3, 4)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     even_ele(('A', ('B', ('C', ('D', ('E', 'F'))))), \n    even_fnc) == ((('C', ('D', ('E', 'F'))),),)\n\nassert     even_ele(('A', ('B', ('C', ('D', ('E', 'F'))))),even_fnc) == \n    ((('C', ('D', ('E', 'F'))),),)\n\nassert     even_ele(('A', ('B', ('C', ('D', 'E'))))) == ((('C', ('D', 'E')),)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     even_ele((1,2,3,4,5), even_ele) == None, \"OOPS!\"\nassert     even_ele((1,2,3,4,5), even_ele) == (1,2,3), \"ERROR!\"\n\nprint(\"\\033[1;32;40m[CORRECT] 'test_03.py' compiles successfully!\""
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     surface_Area(4,3) == 10.0, \"The surface area is incorrect.\"\nassert     surface_Area(2,2) == 4.0, \"The surface area is incorrect.\"\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     surface_Area(1,1) == 12, \"Test Case 1\"\nassert     surface_Area(1,3) == 9, \"Test Case 1\"\nassert     surface_Area(3,2) == 20, \"Test Case 1\"\nassert     surface_Area(3,4) == 24, \"Test Case 1\"\nassert     surface_Area(4,3) == 12, \"Test Case 1\"\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     surface_Area(4,8) == 32\n\nprint('Correct')\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     surface_Area(5,10) == 25, \"surface_Area(5,10) should be 25.\"\nassert     surface_Area(5,10) == surface_Area(7,10), \"surface_Area(7,10) should be 70.\"\nassert     surface_Area(7,10) == surface_Area(7,9), \"surface_Area(7,9) should be 70.\"\nassert     surface_Area(7,9) == surface_Area(5,9), \"surface_Area(5,9) should be 70.\"\nassert     surface_Area(5,5) == 25, \"surface_Area(5,5) should be 25.\"\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     surface_Area(2, 2) == 4\nassert     surface_Area(1, 4) == 4\nassert     surface_Area(2, 2) == 4\nassert     surface_Area(3, 3) == 12\nassert     surface_Area(3, 5) == 60\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nsurface_Area(3,3) == 40\nassert surface_Area(5,5) == 156\nassert surface_Area(10,10) == 270\nassert surface_Area(12,12) == 1352\nassert surface_Area(3,15) == 48\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     surface_Area(4,4) == 20\nassert     surface_Area(5,5) == 45\nassert     surface_Area(2,4) == 8\nassert     surface_Area(4,2) == 8\nassert     surface_Area(1,4) == 4\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     surface_Area(2,10)==20\nassert     surface_Area(0,10)==0\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert not my_dict({})\nassert not my_dict({'name':'abc'})\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     my_dict({'abc': 123}) == False, 'abc = 123 is not an empty dictionary'\nassert     my_dict({}) == True, 'the empty dictionary is an empty dictionary'\nassert     my_dict({1:2}) == False, '{1:2} is not an empty dictionary'\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert my_dict(dict())\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    pass\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     my_dict({})\nassert     my_dict({\"a\":1,\"b\":2,\"c\":3})\nassert     my_dict({\"a\":\"1\",\"b\":\"2\",\"c\":\"3\"})\nassert     my_dict({\"a\":1,\"b\":\"2\",\"c\":\"3\",\"d\":\"4\"})\nassert     my_dict({\"d\":\"4\",\"b\":\"2\",\"c\":\"3\",\"a\":1})\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nmy_dict({1: 2}) == False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     my_dict({})    == True, 'True'\nassert     my_dict({\"hello\": 1}) == False, 'False'\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     catalan_number(1) == 1, 'catalan_number'\nassert     catalan_number(2) == 2, 'catalan_number'\nassert     catalan_number(3) == 4, 'catalan_number'\nassert     catalan_number(4) == 7, 'catalan_number'\nassert     catalan_number(5) == 10, 'catalan_number'\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    pass\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     catalan_number(4) == 3, \"expect:3\"\nassert     catalan_number(5) == 5, \"expect:5\"\nassert     catalan_number(6) == 8, \"expect:8\"\nassert     catalan_number(7) == 21, \"expect:21\"\nassert     catalan_number(8) == 28, \"expect:28\"\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     catalan_number(0) == 1, \"catalan_number should return the 0th catalan number\"\nassert     catalan_number(1) == 1, \"catalan_number should return the 1st catalan number\"\nassert     catalan_number(2) == 2, \"catalan_number should return the 2nd catalan number\"\nassert     catalan_number(3) == 3, \"catalan_number should return the 3rd catalan number\"\nassert     catalan_number(4) == 5, \"catalan_number should return the 4th catalan number\"\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     catalan_number(1) == 0\nassert     catalan_number(2) == 1\nassert     catalan_number(3) == 2\nassert     catalan_number(4) == 5\nassert     catalan_number(5) == 14\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     catalan_number(0) == 0, \"You have a problem with the definition of catalan_number\"\nassert     catalan_number(1) == 2, \"You have a problem with the definition of catalan_number\"\nassert     catalan_number(2) == 5, \"You have a problem with the definition of catalan_number\"\nassert     catalan_number(3) == 10, \"You have a problem with the definition of catalan_number\"\nassert     catalan_number(4) == 14, \"You have a problem with the definition of catalan_number\"\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    catalan_number(5) == 5 \nassert catalan_number(7) == 14\nassert catalan_number(8) == 48\nassert catalan_number(9) == 132\nassert catalan_number(10) == 288\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_adverbs('No, I am not interested.') == None, 'There is a bug in function find_adverbs'\nassert     find_adverbs('No, he is not interested.') == None, 'There is a bug in function find_adverbs'\nassert     find_adverbs('No, he is not interested.') == None, 'There is a bug in function find_adverbs'\nassert     find_adverbs('No, he is not interested.') == None, 'There is a bug in function find_adverbs'\nassert     find_adverbs('No, he is not interested.') == None, 'There is a bug in function find_adverbs'\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nfind_adverbs('') == []\nassert find_adverbs('The cow jumped over the moon.') == [(12, 13)]\nassert find_adverbs('In the park, you can hear the birds flying') == [(13, 14), (15, 16)]\nassert find_adverbs('The elephant caught the mouse.') == []\nassert find_adverbs('The elephant was the mouse.') == [(13, 14)]\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_adverbs('''It's as good a day as any, and if you don't do it, it's as bad a day as any.\n\nIf you can't get away with it, then don't go there.''') == [], \"Fail case\"\nassert     find_adverbs('''Gently, is a good day''') == [], \"Fail case\"\nassert     find_adverbs('''Easy, but hard to do right''') == [], \"Fail case\"\nassert     find_adverbs(''''') == [], \"Fail case\"\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_adverbs('This is a test, it\\'s a good test.') == ('ly', '26')\nassert     find_adverbs('This is a test, it\\'s a good test.') == ('ly', '26')\nassert     find_adverbs('This is a test, it\\'s a good test.') == ('ly', '26')\nassert     find_adverbs('This is a test, it\\'s a good test.') == ('ly', '26')\nassert     find_adverbs('This is a test, it\\'s a good test.') == ('ly', '26')\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef find_first_adverb(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_adverbs('The day was dry and clear, and the sky was blue.') == ['dry', 'clear', 'blue']\nassert     find_adverbs('The sky was blue and the sun was bright.') == ['blue', 'bright', 'the']\nassert     find_adverbs('The rain fell and washed the floor.') == []\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_adverbs('What a lovely day. The sky is blue and the air is calm.') == \\\n        [('What', 5), ('a', 8), ('lovely', 11), ('day', 12), ('.', 13)]\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nfind_adverbs('There\u2019s a possibility that the time will be the fourth day of the month, but that is unlikely and a bad move.') == [(2, 6), (15, 20)]\nassert \nfind_adverbs('The most recent conference was a great success, but unfortunately the conference didn\u2019t go as planned.') == []\nassert \nfind_adverbs('My life is not a good thing when it comes to how we learn and adapt.') == [(8, 18)]\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_adverbs(\"\") == ([], \"no\")\nassert     find_adverbs(\"I am strong, I love to eat food and drink\") == ([3], \"strong\")\nassert     find_adverbs(\"Today, I am strong, I love to eat food and drink\") == ([0, 6], \"strong\")\nassert     find_adverbs(\"The quick brown fox jumps over the lazy dog\") == ([9], \"fox\")\nassert     find_adverbs(\"The quick brown fox jumps over the lazy dog, running away\") == ([12], \"fox\")\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nfind_adverbs('we are going to go to the bank tomorrow night') == [3, 6]\nassert \nfind_adverbs('we are going to go to the bank tomorrow morning') == []\nassert \nfind_adverbs('this was a waste of my time') == []\nassert \nfind_adverbs('this was not a waste of my time') == [9]\n\n\ndef find_names(text):\n    '''\n    Write a function to find all of the first names in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     expensive_items([1,6,8,12,16,32,56,128,256,512,1024,2048,4096],4) == [256,512,1024,2048]\n\nassert expensive_items([1,6,8,12,16,32,56,128,256,512,1024,2048,4096],5) == []\n\nassert expensive_items([1,6,8,12,16,32,56,128,256,512,1024,2048,4096],4) == [256,512,1024,2048]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     expensive_items([(1,'A'),(2,'B'),(2,'B'),(2,'C'),(3,'D')],3)==[(2,'B'),(3,'D')]\nassert expensive_items([(1,'A'),(2,'B'),(2,'B'),(2,'C'),(3,'D')],4)==[(2,'B'),(3,'D')]\nassert expensive_items([(1,'A'),(2,'B'),(2,'B'),(2,'C'),(3,'D')],5)==[(2,'B'),(3,'D')]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     expensive_items([\"A\", \"A\", \"A\", \"A\", \"B\"], 2) == [\"A\", \"A\"]\nassert     expensive_items([\"A\", \"A\", \"B\", \"C\", \"C\"], 2) == [\"A\", \"B\"]\nassert     expensive_items([\"A\", \"B\", \"C\", \"D\", \"E\"], 2) == [\"A\", \"B\"]\nassert     expensive_items([\"A\", \"B\", \"C\", \"D\", \"E\"], 3) == [\"A\", \"B\", \"C\"]\nassert     expensive_items([\"A\", \"B\", \"C\", \"D\", \"E\"], 5) == [\"A\", \"B\", \"C\", \"D\", \"E\"]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     expensive_items(['apple','orange','pear','peach','plum','cherry','grape'],4) == ['pear','cherry','grape','orange']\nassert expensive_items(['pear','orange','peach','plum','cherry','grape','apple'],4) == ['apple','orange','pear','cherry']\n\ndef heap_sort(items,n):\n    '''\n    Write a function to sort a list of items using the heap sort algorithm.\n    '''\n    pass\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nexpensive_items([4,1,2,3,5],2) == (2,3), 'My output does not match the expected result.'\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     expensive_items([(10,3),(20,4),(10,1),(20,2),(30,1)], 2) == [(30,1),(20,2)]\nassert     expensive_items([(10,3),(20,4),(10,1),(20,2),(30,1)], 4) == [(30,1),(20,2),(10,1),(20,4)]\nassert     expensive_items([(10,3),(20,4),(10,1),(20,2),(30,1)], 1) == [(10,1)]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nexpensive_items([('Iphone',800),('iPhone',850),('MotoG',1800),('Samsung',3000),('Galaxy',2500),('Ipad',1500)],3) == ['Iphone', 'Ipad', 'MotoG']\nassert expensive_items([('Iphone',1000),('iPhone',900),('MotoG',1800),('Samsung',3000),('Galaxy',2500),('Ipad',1500)],1) == ['Iphone']\nassert expensive_items([('Iphone',1000),('iPhone',900),('MotoG',1800),('Samsung',3000),('Galaxy',2500),('Ipad',1500)],0) == []\n\ndef expensive_items_k_n(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    pass\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     expensive_items([],0) == 0, \"empty\"\nassert     expensive_items([5],0) == 0, \"one item\"\nassert     expensive_items([5,5],0) == 0, \"duplicate\"\nassert     expensive_items([5,5,5],0) == 0, \"duplicate\"\nassert     expensive_items([5,5,5,5],0) == 1, \"three items\"\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     expensive_items([[\"A\",10],[\"B\",5],[\"C\",4],[\"D\",5]], 2) == [\"C\",\"D\"], \"2.Wrong output for 'expensive_items' with data: {'A':10, 'B':5, 'C':4, 'D':5}\"\nassert expensive_items([[\"A\",10],[\"B\",5],[\"C\",4],[\"D\",5]], 1) == [\"D\"], \"2.Wrong output for 'expensive_items' with data: {'A':10, 'B':5, 'C':4, 'D':5}\"\nassert expensive_items([[\"A\",10],[\"B\",5],[\"C\",4],[\"D\",5]], 0) == [], \"2.Wrong output for 'expensive_items' with data: {'A':10, 'B':5, 'C':4, 'D':5}\"\n\ndef find_minimums(items,n):\n    '''\n    Write a function to find the n minimums in a given dataset.\n    '''\n    pass\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     expensive_items([('a',2), ('b',3), ('c',4), ('d',5), ('e',6)],1) == ['e']\nassert     expensive_items([('a',2), ('b',3), ('c',4), ('d',5), ('e',6)],3) == ['c', 'd', 'e']\nassert     expensive_items([('a',2), ('b',3), ('c',4), ('d',5), ('e',6)],2) == ['a', 'b']\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    pass\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    print(split_Arr([1,2,3,4,5,6],2)) == [[1,2], [3,4,5], [6]]\n    print(split_Arr([1,2,3,4,5,6],3)) == [[1,2,3], [4,5,6]]\n    print(split_Arr([1,2,3,4,5,6],1)) == [[1], [2, 3], [4, 5, 6]]\n    print(split_Arr([1,2,3,4,5,6],0)) == [[1], [2, 3], [4, 5, 6]]\n    print(split_Arr([1,2,3,4,5,6],5)) == [[1, 2], [3], [4], [5, 6]]\n    print(split_Arr([1,2,3,4,5,6],6)) == [[1, 2], [3], [4], [5], [6]]\n    print(split_Arr([1,2,3,4,5,6],7)) == [[1, 2], [3], [4], [5], [6]]\n    print(split_Arr([1,2,3,4,5,6],4)) == [[1, 2], [3], [4], [5, 6]]\n    print(split_Arr([1,2,3,4,5,6],0)) == [[1, 2], [3], [4], [5, 6]]\n    print(split_Arr([1,2,3,4,5,6],5)) == [[1, 2], [3], [4], [5], [6]]\n    print(split_Arr([1,2,3,4,5,6],3)) == [[1, 2, 3], [4, 5, 6]]\n    print(split_Arr([1,2,3,4,5,6],1)) == [[1], [2, 3], [4, 5, 6]]\n    print(split_Arr([1,2,3,4,5,6],6)) == [[1], [2], [3], [4], [5], [6]]\n    print(split_Arr([1,2,3,4,5,6],7)) == [[1], [2], [3], [4], [5], [6]]\n    print(split_Arr([1,2,3,4,5,6],4)) == [[1], [2], [3], [4], [5], [6]]\n    print(split_Arr([1,2,3,4,5,6],0)) == [[1], [2], [3], [4], [5], [6]]\n    print(split_Arr([1,2,3,4,5,6],5)) == [[1], [2], [3], [4], [5], [6]]\n    print(split_Arr([1,2,3,4,5,6],3)) == [[1], [2], [3], [4], [5, 6]]\n    print(split_Arr([1,2,3,4,5,6],1)) == [[1], [2], [3], [4], [5, 6]]\n    print(split_Arr([1,2,3,4,5,6],6)) == [[1], [2], [3], [4], [5], [6]]\n    print(split_Arr([1,2,3,4,5,6],7)) == [[1], [2], [3], [4], [5], [6]]\n    print(split_Arr([1,2,3,4,5,6],4)) == [[1], [2], [3], [4], [5], [6]]\n    print(split_Arr([1,2,3,4,5,6],0)) == [[1], [2], [3], [4], [5], [6]]\n    print(split_Arr([1,2,3,4,5,6],5)) == [[1], [2], [3], [4], [5], [6]]\n    print(split_Arr([1,2,3,4,5,6],3)) == [[1], [2], [3], [4], [5, 6]]\n    print(split_Arr([1,2,3,4,5,6],1)) == [[1], [2], [3], [4], [5, 6]]\n    print(split_Arr([1,2,3,4,5,6],6)) == [[1], [2], [3], [4], [5], [6]]\n    print(split_Arr([1,2,3,4,5,6],7)) == [[1], [2], [3], [4], [5], [6]]\n    print(split_Arr([1,2,3,4,5,6],4)) == [[1], [2], [3], [4], [5], [6]]\n    print(split_Arr([1,2,3,4,5,6],0)) == [[1], [2], [3], [4], [5], [6]]\n    print(split_Arr([1,2,3,4,5,6],5)) == [[1], [2], [3], [4], [5], [6]]\n    print(split_Arr([1,2,3,4,5,6],3)) == [[1], [2], [3], [4], [5, 6]]\n    print(split_Arr([1,2,3,4,5,6],1)) == [[1], [2], [3], [4], [5, 6]]\n    print(split_Arr([1,2,3,4,5,6],6)) == [[1], [2], [3], [4], [5], [6]]\n    print(split_Arr([1,2,3,4,5,6],7)) == [[1], [2], [3], [4], [5], [6]]\n    print(split_Arr([1,2,3,4,5,6],4)) == [[1], [2], [3], [4], [5], [6]]\n    print(split_Arr([1,2,3,4,5,6],0)) == [[1], [2], [3], [4], [5], [6]]\n    print(split_Arr([1,2,3,4,5,6],5)) == [[1], [2], [3], [4], [5], [6]]\n    print(split_Arr([1,2,3,4,5,6],3)) == [[1], [2], [3], [4], [5, 6]]\n    print(split_Arr([1,2,3,4,5,6],1)) == [[1], [2], [3], [4], [5, 6]]\n    print(split_Arr([1,2,3,4,5,6],6)) == [[1], [2], [3], [4], [5], [6]]\n    print(split_Arr([1,2,3,4,5,6],7)) == [[1], [2], [3], [4], [5], [6]]\n    print(split_Arr([1,2,3,4,5,6],4)) == [[1], [2], [3], [4], [5], [6]]\n    print(split_Arr([1,2,3,4,5,6],0)) == [[1], [2], [3], [4], [5], [6]]\n    print(split_Arr([1,2,3,4,5,6],5)) == [[1], [2], [3], [4], [5], [6]]\n    print(split_Arr([1,2,3,4,5,6],3)) == [[1], [2], [3], [4], [5, 6]]\n    print(split_Arr([1,2,3,4,5,6],1)) == [[1], [2], [3], [4], [5, 6]]\n    print(split_Arr([1,2,3,4,5,6],6)) == [[1], [2], [3], [4], [5], [6]]\n    print(split_Arr(["
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nl1 = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\nl2 = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\nl3 = []\nl4 = []\nl5 = [10]\nassert split_Arr(l1, 3) == l2\nassert split_Arr(l1, 2) == l3\nassert split_Arr(l1, 1) == l4\nassert split_Arr(l5, 4) == l5\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     split_Arr([1, 2, 3, 4, 5], 2) == [[1, 2], 3, 4, 5]\nassert     split_Arr([1, 2, 3, 4, 5], 3) == [[1, 2, 3], 4, 5]\nassert     split_Arr([1, 2, 3, 4, 5], 4) == [[1, 2, 3, 4], 5]\nassert     split_Arr([1, 2, 3, 4, 5], 0) == []\nassert     split_Arr([1, 2, 3, 4, 5], 1) == [[1], [2, 3, 4, 5]]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nsplit_Arr([], 0) == []\nsplit_Arr([], 1) == []\nsplit_Arr([1], 0) == [1]\nsplit_Arr([1], 1) == [1]\nsplit_Arr([1,2,3], 1) == [1,2,3]\nsplit_Arr([1,2,3], 2) == [1,2,3]\nsplit_Arr([1,2,3], 3) == [1,2,3]\nsplit_Arr([1,2,3], 4) == [1,2,3]\nsplit_Arr([1,2,3], 5) == [1,2,3]\nsplit_Arr([1,2,3], 6) == [1,2,3]\nsplit_Arr([1,2,3], 7) == [1,2,3]\nsplit_Arr([1,2,3], 8) == [1,2,3]\nsplit_Arr([1,2,3], 9) == [1,2,3]\nsplit_Arr([1,2,3], 10) == [1,2,3]\n\nprint(\"[+] All test cases passed!\")"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     split_Arr([1,2,3,4,5,6], 3) == [[1,2,3],[4,5,6]]\nassert split_Arr([1,2,3,4,5,6], 4) == [[1,2,3,4],[5,6]]\nassert split_Arr([1,2,3,4,5,6], 5) == [[1,2,3,4,5],[6]]\n\ndef split_Arr_2(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    The split should be done in a different way when the list has a length of 1.\n    '''\n    pass\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     split_Arr([1,2,3,4,5], 4) == [[1],[2,3,4],[5]]\nassert     split_Arr([1,2,3,4,5], 3) == [[1,2,3],[4],[5]]\nassert     split_Arr([1,2,3,4,5], 2) == [[1,2],[3,4],[5]]\nassert     split_Arr([1,2,3,4,5], 1) == [[1],[2,3,4,5]]\nassert     split_Arr([1,2,3,4,5], 0) == [[1],[2],[3],[4],[5]]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n\ndef split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    pass\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     list_tuple([1,2,3]) == (1,2,3)\nassert     list_tuple([]) == ()\nassert     list_tuple(('Hello', 'world')) == ('Hello', 'world')\nassert     list_tuple(('Hello', 'world', 'hi')) == ('Hello', 'world', 'hi')\n\ndef remove_from_list(lst):\n    '''\n    Write a function to remove last item from a list.\n    '''\n    pass\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     list_tuple(['a', 'b', 'c']) == ('a', 'b', 'c')\nassert     list_tuple(('a', 'b', 'c')) == ('a', 'b', 'c')\nassert     list_tuple([1, 2, 3, 4]) == (1, 2, 3, 4)\nassert     list_tuple((1, 2, 3, 4)) == (1, 2, 3, 4)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     list_tuple([[1, 2, 3], (4, 5, 6)]) == ((1, 2, 3), (4, 5, 6))\nassert     list_tuple([(1, 2, 3), [4, 5, 6]]) == ([1, 2, 3], (4, 5, 6))\nassert     list_tuple([1, 2, 3]) == (1, 2, 3)\nassert     list_tuple([\"Hello\", (1, 2, 3)]) == [\"Hello\", (1, 2, 3)]\nassert     list_tuple([(1, 2, 3)]) == (1, 2, 3)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     list_tuple([1,2,3,4]) == (1,2,3,4)\nassert     list_tuple([]) == ()\n\n\n\ndef print_tuple(tup):\n    '''\n    Write a function to print a tuple.\n    '''\n    pass\n\n    # check the correctness of list_tuple\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     list_tuple([]) == ()\nassert     list_tuple([1, 2, 3]) == (1, 2, 3)\nassert     list_tuple(['a', 'b', 'c']) == ('a', 'b', 'c')\nassert     list_tuple((1, 2, 3)) == (1, 2, 3)\nassert     list_tuple({'a': 1, 'b': 2, 'c': 3}) == (1, 2, 3)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     list_tuple([]) == (), \"Empty list\"\nassert list_tuple([1,2]) == (1,2), \"Normal list\"\nassert list_tuple([3,5,7]) == (3,5,7), \"List with element\"\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     list_tuple([1,2,3]) == (1,2,3), \"Wrong output\"\nassert     list_tuple([]) == tuple([]), \"Wrong output\"\nassert     list_tuple([2,3,4]) == tuple([2,3,4]), \"Wrong output\"\nassert     list_tuple([4,5,6,7,8,9]) == tuple([4,5,6,7,8,9]), \"Wrong output\"\nassert     list_tuple(\"Hello\") == tuple(\"Hello\"), \"Wrong output\"\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     big_diff([1, 2, 3, 4]) == 3\nassert     big_diff([4, 3, 2, 1]) == 6"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     big_diff([3, 2, -5, 4]) == 5\nassert     big_diff([7, 2, 8, 3]) == 8\nassert     big_diff([1, 1, 1]) == 0\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     big_diff([-1, 5, 10, 20, 4, 5, 6, -10]) == 11\nassert     big_diff([-1, 5, 10, 20, 4, 5, 6, -10]) == 11\nassert     big_diff([-10, -10, -10, -10, -10]) == 0\nassert     big_diff([1, 2, 3, 4, 5, 6, 7, 8]) == 0\nassert     big_diff([]) == 0\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     big_diff([3, 5, -7, -3]) == 4, 'Looks like we got wrong result. Expected output : 2'\nassert     big_diff([9]) == 0, 'Looks like we got wrong result. Expected output : 0'\nassert     big_diff([0, -5]) == -6, 'Looks like we got wrong result. Expected output : -6'\nassert     big_diff([1, 2, 3, 4, 5, 6, 7]) == -2, 'Looks like we got wrong result. Expected output : -2'\nassert     big_diff([1, 0, 0]) == 1, 'Looks like we got wrong result. Expected output : 1'\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     big_diff([4,3,6,8,1,3]) == 5\nassert     big_diff([-4,-3,-6,-8,-1,-3]) == 5\nassert     big_diff([1,5,3,7]) == 4\nassert     big_diff([-2,-3,-1]) == 2\nassert     big_diff([-1,-1]) == 0\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     big_diff([-1, 0, 3, -4]) == 5\nassert     big_diff([-5, -2, -1, 0, 3, 5, 7, 9]) == 9\n\ndef is_palindrome(n):\n    '''\n    Write a Python function to check whether a given number is palindrome or not. \n    Palindrome is a number which reads the same backward as forward. For example, 121 is a palindrome, \n    and 12321 is not a palindrome.\n    '''\n    pass\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     big_diff([1,5,-3,5,2,0,-4]) == 4, 'Wrong result'\nassert big_diff([-5,-3,3,2,1,5]) == 5, 'Wrong result'\nassert big_diff([-2,4,2,-4,-1,1,5,-2]) == 6, 'Wrong result'\nassert big_diff([0,0,1,1,1,2,2,2,3]) == 1, 'Wrong result'\n\n'''\nYou are given an array representing a matrix and an integer representing a target value. If the sum of any row, column, or diagonal of the matrix is equal to the target value, return true, else return false.\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     big_diff([2, -5, -1, 1, 2, -6, -4, -3, 0, 5, 2, 3, 2]) == 6\nassert     big_diff([1, 2, 5, -4, 3, -2]) == 6\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nbig_diff([5, 4, 3]) == 1, \"Should be 1\"\nassert \nbig_diff([1, 100, 5]) == 101, \"Should be 101\"\nassert \nbig_diff([9, 8, 7]) == 6, \"Should be 6\"\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     big_diff([1, 5, 2, 8, 1]) == 5\nassert     big_diff([1, 5, 9, 8, 1]) == 6\nassert     big_diff([7, 4, 2, 8, 1]) == 9\nassert     big_diff([1, 5, 3, 7, 1]) == 8\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     perfect_squares(1, 2) == (1,4)\nassert     perfect_squares(2, 3) == (4,9)\nassert     perfect_squares(3, 4) == (9,16)\nassert     perfect_squares(8, 15) == (64,81)\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\""
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     perfect_squares(2, 11) == [4, 9]\nassert     perfect_squares(0, 11) == []\nassert     perfect_squares(1, 11) == [1]\nassert     perfect_squares(16, 11) == [16]\nassert     perfect_squares(17, 11) == [17]\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     perfect_squares(6, 12) == 16\nassert     perfect_squares(3, 4) == 9\nassert     perfect_squares(1, 100) == 25\nassert     perfect_squares(0, 10) == 25\nassert     perfect_squares(100, 100) == 25\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     perfect_squares(1, 1) == 1, \"Wrong Answer\"\nassert perfect_squares(2, 3) == 9, \"Wrong Answer\"\nassert perfect_squares(100, 99) == 49, \"Wrong Answer\"\nassert perfect_squares(1, 100) == 1, \"Wrong Answer\"\nassert perfect_squares(2, 3) == 9, \"Wrong Answer\"\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     perfect_squares(0, 0) == 0\nassert     perfect_squares(3, 4) == 1\nassert     perfect_squares(4, -1) == 1\nassert     perfect_squares(1, 100) == 1\nassert     perfect_squares(100, 100) == 1\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     perfect_squares(4, 36) == 16\nassert perfect_squares(9, 2) == 1\nassert perfect_squares(9, 1) == 9\nassert perfect_squares(3, 9) == 9\nassert perfect_squares(1, 27) == 1\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     perfect_squares(2, 5) == 3\nassert     perfect_squares(12, 13) == 9\nassert     perfect_squares(14, 27) == 16\nassert     perfect_squares(1000, 1002) == 19\nassert     perfect_squares(0, 100) == 0\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     perfect_squares(1, 2) == [1, 4]\nassert     perfect_squares(3, 5) == [16, 25]\nassert     perfect_squares(0, 1) == []\nassert     perfect_squares(1, 1) == [1, ]\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     polar_rect(1,2) == (1,4)\nassert polar_rect(2,1) == (4,2)\nassert polar_rect(0,0) == (0,0)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     polar_rect(1,1) == (0,0)\nassert     polar_rect(0.1,0.1) == (0.1,0.1)\nassert     polar_rect(1,2) == (1,1.414)\nassert     polar_rect(0.1,1) == (0.1,1)\nassert     polar_rect(2,1) == (1.414,0)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     polar_rect(0,1) == (0,0)\nassert     polar_rect(1,0) == (1,0)\nassert     polar_rect(1,1) == (0,1)\nassert     polar_rect(0,-1) == (1,0)\nassert     polar_rect(-1,0) == (0,1)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     polar_rect(1, 1) == (0,0), \"Wrong output for polar_rect(1, 1)\"\nassert     polar_rect(1, 1) == (0,0), \"Wrong output for polar_rect(1, 1)\"\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     polar_rect(0,0) == (0,0)\nassert     polar_rect(1,1) == (1,1)\nassert     polar_rect(1,0) == (1,0)\nassert     polar_rect(0,1) == (0,1)\nassert     polar_rect(0.5,0.25) == (0.5,0.25)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     polar_rect(1, 0) == (0, 1), \"incorrect\"\nassert     polar_rect(0, 1) == (-1, 1), \"incorrect\"\nassert     polar_rect(1, 0.5) == (1, 0.5), \"incorrect\"\nassert     polar_rect(0.5, 0) == (0.5, 1), \"incorrect\"\nassert     polar_rect(0.5, -0.5) == (0.5, -0.5), \"incorrect\"\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef rect_to_polar(r,theta):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    pass\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nswap_List([2,3,4]) ==[4,3,2]\nswap_List([1,2,3]) ==[3,2,1]\nswap_List([1,2,3,4]) ==[4,3,2,1]\nswap_List([1,2,3,4,5]) ==[4,3,2,5,1]\nswap_List([]) ==[]\nswap_List([1,2,3,4,5,6]) ==[6,5,4,3,2,1]\nswap_List([1,2,3,4,5,6,7,8,9]) ==[9,8,7,6,5,4,3,2,1]\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nswap_List([1, 2, 3]) == [3, 2, 1]\n\nassert swap_List([1, 2, 3, 4]) == [4, 3, 2, 1]\n\nassert swap_List([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1]\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef rotate_List(newList):\n    '''\n    Write a python function to rotate the list by 5 elements.\n    '''\n    pass\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     swap_List([1,2,3,4]) == [4,3,2,1], \"swap_List test case 1 failed\"\nassert     swap_List([1,2,3,4,5,6]) == [5,6,3,4,1,2], \"swap_List test case 2 failed\"\nassert     swap_List([1,2,3,4,5,6,7,8,9]) == [7,9,8,5,4,3,2,1,6], \"swap_List test case 3 failed\"\nassert     swap_List([1,2,3,4,5,6,7,8,9,10]) == [10,9,8,7,6,5,4,3,2,1], \"swap_List test case 4 failed\"\nassert swap_List([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == [17,19,20,16,18,13,14,12,11,10,9,8,7,6,5,4,3,2,1,10,9,8,7,6,5,4,3,2,1], \"swap_List test case 5 failed\"\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert swap_List([0, 1, 2, 3, 4, 5]) == [3, 2, 5, 4, 1, 0], \"Fail\"\nassert swap_List([5, 4, 3, 2, 1, 0]) == [5, 4, 3, 2, 1, 0], \"Fail\"\nassert swap_List([2, 2, 2, 2, 2, 2, 2]) == [2, 2, 2, 2, 2, 2, 2], \"Fail\"\nassert swap_List([]) == [], \"Fail\"\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     swap_List([2,3,4,5,1,0,1]) == [0,1,1,1,2,3,4], \"Test Failed\"\nassert     swap_List([2,3,4,5,1,0]) == [0,1,1,2,3,4], \"Test Failed\"\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     swap_List([1,2,3,4,5,6]) == [1,6,5,2,3,4]\nassert swap_List([-3,-2,-1,0]) == [-1,-2,-3,0]\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n'''\nGiven an integer n, print the factorial of it.\nFor example, if n is 2 then the factorial of 2 is 2 * 1 = 2,\nso the output should be 2.\n'''\n\ndef factorial(n): \n    '''\n    Write a python function to calculate the factorial of an integer.\n    '''\n    pass"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nbinomial_Coeff(10,3) == 3, \"Test Case Failed\"\nassert binomial_Coeff(10,0) == 1, \"Test Case Failed\"\nassert binomial_Coeff(0,0) == 1, \"Test Case Failed\"\nassert binomial_Coeff(3,5) == 15, \"Test Case Failed\"\nassert binomial_Coeff(8,10) == 1, \"Test Case Failed\"\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef factorial(n): \n    '''\n    Write a python function to compute the factorial of a given integer n.\n    '''\n    pass\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert binomial_Coeff(0,0) == 1, \"Error: Incorrect Function\"\nassert binomial_Coeff(0,1) == 1, \"Error: Incorrect Function\"\nassert binomial_Coeff(1,0) == 1, \"Error: Incorrect Function\"\nassert binomial_Coeff(1,1) == 1, \"Error: Incorrect Function\"\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     binomial_Coeff(1,0) == 0\nassert     binomial_Coeff(2,0) == 1\nassert     binomial_Coeff(3,0) == 0\nassert     binomial_Coeff(4,0) == 1\nassert     binomial_Coeff(5,0) == 0\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     binomial_Coeff(5, 3) == 32\nassert     binomial_Coeff(7, 4) == 671\n\ndef sum_of_binomial_Coeff(n,k):\n    '''\n    Write a python function to calculate the sum of the product of consecutive binomial co-efficients.\n    '''\n    pass\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     binomial_Coeff(4,2) == 9, 'Incorrect result'\nassert     binomial_Coeff(5,3) == 55, 'Incorrect result'"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     binomial_Coeff(2,0) == 0\nassert     binomial_Coeff(2,1) == 1\nassert     binomial_Coeff(2,2) == 2\nassert     binomial_Coeff(2,3) == 4\nassert     binomial_Coeff(2,4) == 12\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     binomial_Coeff(5,2) == 5*2*3*4*5\nassert     binomial_Coeff(10,2) == 10*2*3*4*5*6*7*8*9\nassert     binomial_Coeff(8,7) == 8*7*6*5*4*3*2\n\nprint(\"All Tests Passed!\")"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     binomial_Coeff(7,2) == 12\nassert     binomial_Coeff(12,4) == 225\nassert     binomial_Coeff(100,10) == 420"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     removezero_ip('0.1.2.3') == '1.2.3', 'incorrect'\nassert     removezero_ip('0.1.2.3') == '1.2.3', 'incorrect'\nassert     removezero_ip('0.0.0.0') == '0.0.0.0', 'incorrect'\nassert     removezero_ip('0.0.0.0') == '0.0.0.0', 'incorrect'\nassert     removezero_ip('0.0.0.0') == '0.0.0.0', 'incorrect'\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     removezero_ip('10.1.1.1') == '10.1.1.1'\nassert     removezero_ip('0.10.10.10') == '0.10.10.10'\nassert     removezero_ip('10.10.0.10') == '10.10.0.10'\nassert     removezero_ip('10.10.0.0') == '10.10.0.0'\nassert     removezero_ip('0.10.0.0') == '0.10.0.0'\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert removezero_ip('0.0.0.1') == '0.0.0.1'\nassert removezero_ip('0.0.0.001') == '0.0.0.1'\nassert removezero_ip('0.000.0.01') == '0.0.0.1'\nassert removezero_ip('000.00.0.01') == '0.0.0.1'\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     removezero_ip('10.0.0.1') == '10.0.0.1'\nassert     removezero_ip('0.0.0.0') == '0.0.0.0'\nassert     removezero_ip('0.0.0.0.0') == '0.0.0.0'\nassert     removezero_ip('0.0.0.0.0.0') == '0.0.0.0'\nassert     removezero_ip('10.0.0.1.1') == '10.0.0.1.1'\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert removezero_ip('') == ''\nassert removezero_ip('11.1.2.3') == '11.1.2.3'\nassert removezero_ip('0000.11.2.3') == '0000.11.2.3'\nassert removezero_ip('11.1.2.0') == '11.1.2.0'\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     removezero_ip('192.168.0.10') == '192.168.0.10'\nassert     removezero_ip('192.168.01.00') == '192.168.01.00'\nassert     removezero_ip('192.168.000.00') == '192.168.000.00'\nassert     removezero_ip('192.168.0000.00') == '192.168.0000.00'\nassert     removezero_ip('192.168.00.00') == '192.168.00.00'\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert removezero_ip('0.0.0.0') == '0.0.0.0'\nassert removezero_ip('0.0.0.00') == '0.0.0.0'\nassert removezero_ip('0.0.0.000') == '0.0.0.0'\nassert removezero_ip('0.0.0.0000') == '0.0.0.0'\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(removezero_ip(0)) \nprint(removezero_ip(1)) \nprint(removezero_ip(100)) \nprint(removezero_ip(101)) \nprint(removezero_ip(255)) \nprint(removezero_ip(256)) \nprint(removezero_ip(1000)) \nprint(removezero_ip(10000)) \nprint(removezero_ip(0)) \nprint(removezero_ip(0)) \nprint(removezero_ip(1)) \nprint(removezero_ip(0)) \nprint(removezero_ip(1)) \nprint(removezero_ip(100)) \nprint(removezero_ip(101)) \nprint(removezero_ip(255)) \nprint(removezero_ip(256)) \nprint(removezero_ip(1000)) \nprint(removezero_ip(10000)) \nprint(removezero_ip(0)) \nprint(removezero_ip(0)) \nprint(removezero_ip(1)) \nprint(removezero_ip(0)) \nprint(removezero_ip(1)) \nprint(removezero_ip(100)) \nprint(removezero_ip(101)) \nprint(removezero_ip(255)) \nprint(removezero_ip(256)) \nprint(removezero_ip(1000)) \nprint(removezero_ip(10000)) \nprint(removezero_ip(0)) \nprint(removezero_ip(0)) \nprint(removezero_ip(1)) \nprint(removezero_ip(0)) \nprint(removezero_ip(1)) \nprint(removezero_ip(100)) \nprint(removezero_ip(101)) \nprint(removezero_ip(255)) \nprint(removezero_ip(256)) \nprint(removezero_ip(1000)) \nprint(removezero_ip(10000)) \nprint(removezero_ip(0)) \nprint(removezero_ip(0)) \nprint(removezero_ip(1)) \nprint(removezero_ip(0)) \nprint(removezero_ip(1)) \nprint(removezero_ip(100)) \nprint(removezero_ip(101)) \nprint(removezero_ip(255)) \nprint(removezero_ip(256)) \nprint(removezero_ip(1000)) \nprint(removezero_ip(10000)) \nprint(removezero_ip(0)) \nprint(removezero_ip(0)) \nprint(removezero_ip(1)) \nprint(removezero_ip(0)) \nprint(removezero_ip(1)) \nprint(removezero_ip(100)) \nprint(removezero_ip(101)) \nprint(removezero_ip(255)) \nprint(removezero_ip(256)) \nprint(removezero_ip(1000)) \nprint(removezero_ip(10000)) \nprint(removezero_ip(0)) \nprint(removezero_ip(0)) \nprint(removezero_ip(1)) \nprint(removezero_ip(0)) \nprint(removezero_ip(1)) \nprint(removezero_ip(100)) \nprint(removezero_ip(101)) \nprint(removezero_ip(255)) \nprint(removezero_ip(256)) \nprint(removezero_ip(1000)) \nprint(removezero_ip(10000)) \nprint(removezero_ip(0)) \nprint(removezero_ip(0)) \nprint(removezero_ip(1)) \nprint(removezero_ip(0)) \nprint(removezero_ip(1)) \nprint(removezero_ip(100)) \nprint(removezero_ip(101)) \nprint(removezero_ip(255)) \nprint(removezero_ip(256)) \nprint(removezero_ip(1000)) \nprint(removezero_ip(10000)) \nprint(removezero_ip(0)) \nprint(removezero_ip(0)) \nprint(removezero_ip(1)) \nprint(removezero_ip(0)) \nprint(removezero_ip(1)) \nprint(removezero_ip(100)) \nprint(removezero_ip(101)) \nprint(removezero_ip(255)) \nprint(removezero_ip(256)) \nprint(removezero_ip(1000)) \nprint(removezero_ip(10000)) \nprint(removezero_ip(0)) \nprint(removezero_ip(0)) \nprint(removezero_ip(1)) \nprint(removezero_ip(0)) \nprint(removezero_ip(1)) \nprint(removezero_ip(100)) \nprint(removezero_ip(101)) \nprint(removezero_ip(255)) \nprint(removezero_ip(256)) \nprint(removezero_ip(1000)) \nprint(removezero_ip(10000)) \nprint(removezero_ip(0)) \nprint(removezero_ip(0)) \nprint(removezero_ip(1)) \nprint(removezero_ip(0)) \nprint(removezero_ip(1)) \nprint(removezero_ip(100)) \nprint(removezero_ip(101)) \nprint(removezero_ip(255)) \nprint(removezero_ip(256)) \nprint(removezero_ip(1000)) \nprint(removezero_ip(10000)) \nprint(removezero_ip(0)) \nprint(removezero_ip(0)) \nprint(removezero_ip(1)) \nprint(removezero_ip(0)) \nprint(removezero_ip(1)) \nprint(removezero_ip(100)) \nprint(removezero_ip(101)) \nprint(removezero_ip(255)) \nprint(removezero_ip(256)) \nprint(removezero_ip(1000)) \nprint(removezero_ip(10000)) \nprint(removezero_ip(0)) \nprint(removezero_ip(0)) \nprint(removezero_ip(1)) \nprint(removezero_ip(0)) \nprint(removezero_ip(1)) \nprint(removezero_ip(100)) \nprint(removezero_ip(101)) \nprint(removezero_ip(255)) \nprint(removezero_ip(256)) \nprint(removezero_ip(1000)) \nprint(removezero_ip(10000)) \nprint(removezero_ip(0)) \nprint(removezero_ip(0)) \nprint(removezero_ip(1)) \nprint(removezero_ip(0)) \nprint(removezero_ip(1)) \nprint(removezero_ip(100)) \nprint(removezero_ip(101)) \nprint(removezero_ip(255)) \nprint(removezero_ip(256)) \nprint(removezero_ip(1000)) \nprint(removezero_ip(10000)) \nprint(removezero_ip(0)) \nprint(removezero_ip(0)) \nprint(removezero_ip(1)) \nprint(removezero_ip(0)) \nprint(removezero_ip(1)) \nprint(removezero_ip(100)) \nprint(removezero_ip(101)) \nprint(removezero_ip(255)) \nprint(removezero_ip(256)) \nprint(removezero_ip(1000)) \nprint(removezero_ip(10000)) \nprint(removezero_ip(0)) \nprint(removezero_ip(0)) \nprint(removezero_ip(1)) \nprint(removezero_ip(0)) \nprint(removezero_ip(1)) \nprint(removezero_ip(100)) \nprint(removezero_ip(101)) \nprint(removezero_ip(255)) \nprint(removezero_ip(256)) \nprint(removezero_ip(1000)) \nprint(removezero_ip(10000)) \nprint(removezero_ip(0)) \nprint(removezero_ip(0)) \nprint(removezero_ip(1)) \nprint(removezero_ip(0)) \nprint(removezero_ip(1)) \nprint(removezero_ip(100)) \nprint(removezero_ip(101)) \nprint(removezero_ip(255)) \nprint(removezer"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     removezero_ip('192.0.2.1') == '192.2.1.1'\nassert     removezero_ip('255.0.0.0') == '255.0.0.0'\nassert     removezero_ip('0.0.0.0') == '0.0.0.0'\nassert     removezero_ip('192.0.2.0') == '192.2.0.0'\nassert     removezero_ip('192.0.2.01') == '192.2.0.1'\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     removezero_ip('0.0.0.0') == '0.0.0.0'\nassert     removezero_ip('0.0.0.0.0') == '0.0.0.0.0'\nassert     removezero_ip('1.0.0.0') == '1.0.0.0'\nassert     removezero_ip('0.1.0.0') == '0.1.0.0'\nassert     removezero_ip('0.0.1.0') == '0.0.1.0'\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     diff_even_odd([1, 2, 3, 4]) == 1\nassert     diff_even_odd([1, 2, 3, 4, 5]) == 2\nassert     diff_even_odd([1, 2, 3, 4, 5, 6]) == 3\nassert     diff_even_odd([1, 2, 3, 4, 5, 6, 7]) == 3\nassert     diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8]) == 4\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     diff_even_odd([1, 2, 3, 4, 5]) == 3, 'Should be 3'\nassert     diff_even_odd([0, 2, 4, 6, 8]) == 3, 'Should be 3'\nassert     diff_even_odd([0, 1, 3, 5, 7]) == 2, 'Should be 2'\n\nprint('All test cases passed...'"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef find_len_longest_word(text):\n    '''\n    Write a function that finds the length of the longest word in the given text.\n    '''\n    pass\n\ndef find_first_repeated_word(text):\n    '''\n    Write a function that finds the first repeated word in the given text. If there are no repeated words, return None.\n    '''\n    pass\n\ndef find_last_repeated_word(text):\n    '''\n    Write a function that finds the last repeated word in the given text. If there are no repeated words, return None.\n    '''\n    pass\n\ndef find_longest_word_index(text):\n    '''\n    Write a function that finds the index of the first repeated word in the given text. If there are no repeated words, return -1.\n    '''\n    pass\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     diff_even_odd([3,5,1,2,4,7,10]) == 3\nassert diff_even_odd([3,5,1,2,4,7,10]) == 1\nassert diff_even_odd([3,5,1,2,4,7,10,2]) == 3\nassert diff_even_odd([3,5,1,2,4,7,10,2]) == 0\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ndiff_even_odd([1,2,3,4]) == 0\ndiff_even_odd([4,5,6]) == 3\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     diff_even_odd([2, 1, 1, 2, 3, 1, 3, 1, 3, 4, 3, 1, 2, 3, 4, 4, 3, 1, 1, 2]) == -2\nassert     diff_even_odd([3, 2, 3, 3, 3, 4, 3, 3, 3, 3, 3, 4, 3, 1, 2, 3, 3, 4, 4, 3, 3, 3, 4, 3, 4, 3, 4, 4]) == -2"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     diff_even_odd([1,3,2]) == -2\nassert     diff_even_odd([1,1,3,2]) == 4\nassert     diff_even_odd([1,1,2,2]) == 0\nassert     diff_even_odd([1,1,1]) == 0\nassert     diff_even_odd([1,1,1,3]) == 4\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     min_Swaps('1101', '1011') == 3, \"Wrong answer\"\nassert     min_Swaps('10111', '11111') == 1, \"Wrong answer\"\nassert     min_Swaps('1101', '1011') == 3, \"Wrong answer\"\nassert     min_Swaps('10111', '11111') == 1, \"Wrong answer\"\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef max_Swaps(str1,str2) : \n    '''\n    Write a python function to count maximum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    pass\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     min_Swaps('100','000') == 4\nassert     min_Swaps('1','0') == 1\nassert     min_Swaps('10','1') == 2\nassert     min_Swaps('00','10') == 2\nassert     min_Swaps('1','1') == 0\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    \n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     min_Swaps(\"101\", \"101\") == 0, \"min_Swaps should return 0 for same strings\"\nassert min_Swaps(\"101\", \"011\") == 1, \"min_Swaps should return 1 for a swapped character in the middle\"\nassert min_Swaps(\"101\", \"110\") == 1, \"min_Swaps should return 1 for a swapped character at the beginning\"\nassert min_Swaps(\"101\", \"111\") == 1, \"min_Swaps should return 1 for a swapped character at the end\"\nassert min_Swaps(\"100\", \"100\") == 0, \"min_Swaps should return 0 for equal string\"\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     min_Swaps(\"011110\",\"110011\") == 2, \"Should be 2\"\nassert     min_Swaps(\"00110\",\"01110\") == 0, \"Should be 0\"\nassert     min_Swaps(\"00111\",\"01110\") == 1, \"Should be 1\"\nassert     min_Swaps(\"111111\",\"100111\") == 4, \"Should be 4\"\nassert     min_Swaps(\"100111\",\"111111\") == 3, \"Should be 3\"\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     min_Swaps(\"1\", \"100\") == 1, \"Should be 1\"\nassert     min_Swaps(\"11\", \"11\") == 0, \"Should be 0\"\nassert     min_Swaps(\"101\", \"100\") == 1, \"Should be 1\"\nassert     min_Swaps(\"1111\", \"100\") == 5, \"Should be 5\"\nassert     min_Swaps
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef type_size(obj):\n    '''\n    Write a function to find the size in bytes of the given type.\n    '''\n    pass\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_size((1,)) == 1, \"tuple_size failed\"\nassert     tuple_size((1,2,3)) == 3, \"tuple_size failed\"\nassert     tuple_size((1,2,3,4)) == 4, \"tuple_size failed\"\nassert     tuple_size((1,2,3,4,5)) == 5, \"tuple_size failed\""
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tuple_size((1,)) == 1\nassert     tuple_size((1, 2, 3, 4)) == 4\nassert    tuple_size((1, 2, 3, 4, 5, 6)) == 9\nassert    tuple_size((1, 2, 3, 4, 5, 6, 7, 8, 9)) == 24\nassert    tuple_size((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == 40\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef tuple_size_list(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for e in tuple_list:\n        size = size + sys.getsizeof(e)\n    return size \n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     (tuple_size(('a', 'b', 'c'))) == 3, 'Wrong output'\nassert     (tuple_size(((1, 2, 3), ('a', 'b', 'c')))) == 6, 'Wrong output'\nassert     (tuple_size(('a', 'b', (1, 2, 3)))) == 3, 'Wrong output'\nassert     (tuple_size(('a', 'b', (1, 2, (3, 4, 5)))) == 6), 'Wrong output'\nassert     (tuple_size((1, 'a', 2, 3, ('a', 'b', 'c'), 4, 5, 6))) == 12, 'Wrong output'\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    \n    # test case\n    tuple_list = ((1,2,3), )\n    assert tuple_size(tuple_list) == 6\n\n    tuple_list = ((1,2), )\n    assert tuple_size(tuple_list) == 3\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nfind_kth([1,2,3,5],[1,2,4,6],1) == 2\nfind_kth([1,2,3,5],[1,2,4,6],2) == 3\nfind_kth([1,2,3,5],[1,2,4,6],3) == 5\nfind_kth([1,2,3,5],[1,2,4,6],4) == 4\nfind_kth([1,2,3,5],[1,2,4,6],5) == 5\nfind_kth([1,2,3,5],[1,2,4,6],6) == 5\nfind_kth([1,2,3,5],[1,2,4,6],7) == 5\nfind_kth([1,2,3,5],[1,2,4,6],0) == 1\nfind_kth([1,2,3,5],[1,2,4,6],1) == 1\nfind_kth([1,2,3,5],[1,2,4,6],2) == 2\nfind_kth([1,2,3,5],[1,2,4,6],3) == 2\nfind_kth([1,2,3,5],[1,2,4,6],4) == 4\nfind_kth([1,2,3,5],[1,2,4,6],5) == 5\nfind_kth([1,2,3,5],[1,2,4,6],6) == 6\nfind_kth([1,2,3,5],[1,2,4,6],7) == 6\nfind_kth([1,2,3,5],[1,2,4,6],8) == 6\nfind_kth([1,2,3,5],[1,2,4,6],9) == 6\nfind_kth([1,2,3,5],[1,2,4,6],10) == 6\nfind_kth([1,2,3,5],[1,2,4,6],11) == 6\nfind_kth([1,2,3,5],[1,2,4,6],12) == 6\nfind_kth([1,2,3,5],[1,2,4,6],13) == 6\nfind_kth([1,2,3,5],[1,2,4,6],14) == 6\nfind_kth([1,2,3,5],[1,2,4,6],15) == 6\nfind_kth([1,2,3,5],[1,2,4,6],16) == 6\nfind_kth([1,2,3,5],[1,2,4,6],17) == 6\nfind_kth([1,2,3,5],[1,2,4,6],18) == 6\nfind_kth([1,2,3,5],[1,2,4,6],19) == 6\nfind_kth([1,2,3,5],[1,2,4,6],20) == 6\nfind_kth([1,2,3,5],[1,2,4,6],21) == 6\nfind_kth([1,2,3,5],[1,2,4,6],22) == 6\nfind_kth([1,2,3,5],[1,2,4,6],23) == 6\nfind_kth([1,2,3,5],[1,2,4,6],24) == 6\nfind_kth([1,2,3,5],[1,2,4,6],25) == 6\nfind_kth([1,2,3,5],[1,2,4,6],26) == 6\nfind_kth([1,2,3,5],[1,2,4,6],27) == 6\nfind_kth([1,2,3,5],[1,2,4,6],28) == 6\nfind_kth([1,2,3,5],[1,2,4,6],29) == 6\nfind_kth([1,2,3,5],[1,2,4,6],30) == 6\nfind_kth([1,2,3,5],[1,2,4,6],31) == 6\nfind_kth([1,2,3,5],[1,2,4,6],32) == 6\nfind_kth([1,2,3,5],[1,2,4,6],33) == 6\nfind_kth([1,2,3,5],[1,2,4,6],34) == 6\nfind_kth([1,2,3,5],[1,2,4,6],35) == 6\nfind_kth([1,2,3,5],[1,2,4,6],36) == 6\nfind_kth([1,2,3,5],[1,2,4,6],37) == 6\nfind_kth([1,2,3,5],[1,2,4,6],38) == 6\nfind_kth([1,2,3,5],[1,2,4,6],39) == 6\nfind_kth([1,2,3,5],[1,2,4,6],40) == 6\nfind_kth([1,2,3,5],[1,2,4,6],41) == 6\nfind_kth([1,2,3,5],[1,2,4,6],42) == 6\nfind_kth([1,2,3,5],[1,2,4,6],43) == 6\nfind_kth([1,2,3,5],[1,2,4,6],44) == 6\nfind_kth([1,2,3,5],[1,2,4,6],45) == 6\nfind_kth([1,2,3,5],[1,2,4,6],46) == 6\nfind_kth([1,2,3,5],[1,2,4,6],47) == 6\nfind_kth([1,2,3,5],[1,2,4,6],48) == 6\nfind_kth([1,2,3,5],[1,2,4,6],49) == 6\nfind_kth([1,2,3,5],[1,2,4,6],50) == 6\nfind_kth([1,2,3,5],[1,2,4,6],51) == 6\nfind_kth([1,2,3,5],[1,2,4,6],52) == 6\nfind_kth([1,2,3,5],[1,2,4,6],53) == 6\nfind_kth([1,2,3,5],[1,2,4,6],54) == 6\nfind_kth([1,2,3,5],[1,2,4,6],55) == 6\nfind_kth([1,2,3,5],[1,2,4,6],56) == 6\nfind_kth([1,2,3,5],[1,2,4,6],57) == 6\nfind_kth([1,2,3,5],[1,2,4,6],58) == 6\nfind_kth([1,2,3,5],[1,2,4,6],59) == 6\nfind_kth([1,2,3,5],[1,2,4,6],60) == 6\nfind_kth([1,2,3,5],[1,2,4,6],61) == 6\nfind_kth([1,2,3,5],[1,2,4,6],62) == 6\nfind_kth([1,2,3,5],[1,2,4,6],63) == 6\nfind_kth([1,2,3,5],[1,2,4,6],64) == 6\nfind_kth([1,2,3,5],[1,2,4,6],65) == 6\nfind_kth([1,2,3,5],[1,2,4,6],66) == 6\nfind_kth([1,2,3,5],[1,2,4,6],67) == 6\nfind_kth([1,2,3,5],[1,2,4,6],68) == 6\nfind_kth([1,2,3,5],[1"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_kth([1,2,3,4,5,6],             [0,2,3,4,5,6,7,8,9], 3) == 5\nassert     find_kth([1,2,3,4,5,6],             [0,2,3,4,5,6,7,8,9], 6) == 6\nassert     find_kth([1,2,3,4,5,6],             [0,2,3,4,5,6,7,8,9], 10) == 9\nassert     find_kth([1,2,3,4,5,6],             [0,2,3,4,5,6,7,8,9], 12) == 10\nassert     find_kth([1,2,3,4,5,6],             [0,2,3,4,5,6,7,8,9], 5) == 5\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    low = 0\n    high = len(arr2) - 1\n    mid = 0\n    while low <= high:\n        mid = (low + high) // 2\n        if arr1[mid] < arr2[mid]:\n            low = mid + 1\n        elif arr1[mid] > arr2[mid]:\n            high = mid - 1\n        else:\n            return arr1[mid]\n    if k > low and k <= low + len(arr1) - 1:\n        return arr1[low]\n    elif k > low + len(arr1) and k <= high + len(arr1) - 1:\n        return arr1[low]\n    else:\n        return None\n\nassert find_kth([1, 2, 3, 4], [2, 4, 6, 8], 3) == 2\nassert find_kth([1, 2, 3, 4], [2, 4, 6, 8], 7) == 4\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # start from the last index in arr2\n    i = len(arr2) - 1\n    j = len(arr1) - 1\n    while i >= 0 and j >= 0:\n        if j - i + 1 < k:\n            i -= 1\n        elif j - i + 1 > k:\n            j -= 1\n        else:\n            return arr2[j]\n    raise ValueError('{} {}'.format(i, j))\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert find_kth([1, 3, 5, 7, 8], [2, 4, 6, 9], 5) == 5\nassert find_kth([1, 3, 5, 7, 8], [2, 4, 6, 9], 0) == 2\nassert find_kth([1, 3, 5, 7, 8], [2, 4, 6, 9], 6) == 5\nassert find_kth([1, 3, 5, 7, 8], [2, 4, 6, 9], 1) == 1\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\narr1 = [1, 2, 3, 4, 5]\narr2 = [10, 20, 30, 40, 50]\nk = 2\nprint(find_kth(arr1, arr2, k))\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_kth([1, 5, 7, 9, 10], [3, 7, 9], 1) == 3\nassert     find_kth([3, 7, 9], [1, 5, 7], 2) == 7\nassert     find_kth([5, 6, 7], [3, 8, 9], 3) == 6\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n'''\nIn this question, your code will be tested using 'assert' statement,\nwhich is an optional concept in python.\n'''\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(\"Test case pass\")\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     armstrong_number(153) == True\nassert     armstrong_number(371) == False\nassert     armstrong_number(18) == True\nassert     armstrong_number(0) == False\nassert     armstrong_number(6) == True\nprint(\"armstrong_number function test passed!\")\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef is_prime(number):\n    '''\n    Write a function to check whether the given number is prime or not.\n    '''\n    pass\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert armstrong_number(3) == True, \"3 is an Armstrong number\"\nassert armstrong_number(5) == True, \"5 is an Armstrong number\"\nassert armstrong_number(0) == False, \"0 is not an Armstrong number\"\nassert armstrong_number(7) == False, \"7 is not an Armstrong number\"\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \narmstrong_number(153) == True, \"It should be True\"\nassert \narmstrong_number(3) == False, \"It should be False\"\nassert \narmstrong_number(0) == False, \"It should be False\"\nassert \narmstrong_number(8) == False, \"It should be False\"\nassert \narmstrong_number(13) == False, \"It should be False\"\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     armstrong_number(153) == True, \"153 is armstrong\"\nassert     armstrong_number(2) == False, \"2 is not an armstrong number\"\nassert     armstrong_number(15325) == False, \"15325 is an armstrong number\"\n\n\ndef is_pangram(text):\n    '''\n    Write a function to check whether the given text is a pangram or not.\n    '''\n    pass\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     armstrong_number(153)==True, '153 is not armstrong number'\nassert     armstrong_number(370)==True, '370 is not armstrong number'\nassert     armstrong_number(827)==True, '827 is not armstrong number'\nassert     armstrong_number(153)==True, '153 is not armstrong number'\nassert     armstrong_number(371)==False, '371 is not armstrong number'\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     armstrong_number(123)==False,    \"Test case 1 Failed.\"\nassert     armstrong_number(125)==False,    \"Test case 2 Failed.\"\nassert     armstrong_number(136)==False,    \"Test case 3 Failed.\"\nassert     armstrong_number(153)==True,    \"Test case 4 Passed.\"\nassert     armstrong_number(153)==True,    \"Test case 5 Passed.\"\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert sum_average(10) == 30, \"Wrong answer\"\nassert sum_average(100) == 200, \"Wrong answer\"\nassert sum_average(2) == 5, \"Wrong answer\"\nassert sum_average(0) == 0, \"Wrong answer\"\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef factors(number):\n    '''\n    Write a function to find the factors of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_average(5) == 10,'sum_average should return 10'\nassert     sum_average(5) == 10,'sum_average should return 10'\nassert     sum_average(1) == 1,'sum_average should return 1'\nassert     sum_average(10) == 30,'sum_average should return 30'\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_average(4) == 9,'returned wrong sum'\nassert sum_average(4) == 9.0,'returned wrong sum'\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_average(3) == 4, \"sum_average(3) does not match expected value\"\nassert     sum_average(0) == 0, \"sum_average(0) does not match expected value\"\nassert     sum_average(4) == 7, \"sum_average(4) does not match expected value\"\nassert     sum_average(10) == 45, \"sum_average(10) does not match expected value\"\nassert     sum_average(1000) == 2415, \"sum_average(1000) does not match expected value\"\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_average(10) == 30, 'incorrect sum_average'\nassert     sum_average(20) == 60, 'incorrect sum_average'\nassert     sum_average(1000) == 3333.666666666667, 'incorrect sum_average'\nassert     sum_average(10000) == 10556.33333333333, 'incorrect sum_average'\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_average(4) == {\n       'sum': 10,\n        'average': 2,\n        'expected': 10.0\n    }\nassert     sum_average(2) == {\n       'sum': 2,\n        'average': 2,\n        'expected': 2.0\n    }\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(\"correct\")\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_average(10) == 10, \"Wrong answer\"\nassert     sum_average(20) == 20, \"Wrong answer\"\nassert     sum_average(10000) == 10000, \"Wrong answer\"\nassert     sum_average(0) == 0, \"Wrong answer\"\nassert     sum_average(-1) == 0, \"Wrong answer\"\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_average(0) == (0, 0.0)\nassert     sum_average(1) == (1, 1.0)\nassert     sum_average(2) == (3, 2.0)\nassert     sum_average(3) == (6, 3.0)\nassert     sum_average(4) == (10, 4.0)\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_Even(0) == True, 'incorrect logic'\nassert     is_Even(1) == True, 'incorrect logic'\nassert     is_Even(-1) == False, 'incorrect logic'\nassert     is_Even(3) == True, 'incorrect logic'\nassert     is_Even(4) == True, 'incorrect logic'\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_Even(5) == True, \"3 is not even\"\nassert is_Even(3) == False, \"3 is even\"\nassert is_Even(0) == False, \"0 is even\"\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert is_Even(10) == True\nassert is_Even(-10) == False\n\ndef is_Prime(n) : \n    '''\n    Write a python function to check whether the given number is prime or not.\n    '''\n    pass\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == \"__main__\" : \n    \n    n = int(input())\n    \n    if is_Even(n) : \n        print(\"{} is Even\".format(n))\n    else : \n        print(\"{} is Odd\".format(n))\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_Even(2)     == True, 'False'\nassert     is_Even(12)     == False, 'False'\nassert     is_Even(0)     == True, 'False'\nassert     is_Even(19)     == True, 'False'\nassert     is_Even(1)     == False, 'False'\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert is_Even(2) == True\nassert is_Even(3) == False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_Even(4) == False, \"Failed\"\nassert     is_Even(5) == True, \"Failed\"\nprint (\"\\n{} Passed\".format(is_Even.__doc__))\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef is_palindrome(str1):\n    '''\n    Write a python function to check if a given string is palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     first_repeated_char(\"cacac\") == -1\nassert     first_repeated_char(\"ccddd\") == 1\nassert     first_repeated_char(\"ababbbb\") == -1\nassert     first_repeated_char(\"abcd\") == 2\nassert     first_repeated_char(\"abc\") == 1\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    import sys\n    print(first_repeated_char(sys.argv[1]))"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     first_repeated_char(\"apple\") == 'e'\nassert     first_repeated_char(\"banana\") == 'a'\nassert     first_repeated_char(\"a\") == 'a'\nassert     first_repeated_char(\"asda\") == 'a'\nassert     first_repeated_char(\"asdasdasda\") == 'a'\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     first_repeated_char('abcd') == 'a'\nassert     first_repeated_char('abca') == 'a'\nassert     first_repeated_char('abcdabcdab') == 'a'\nassert     first_repeated_char('abcabc') == 'a'\nassert     first_repeated_char('abcabcabc') == 'a'\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     first_repeated_char(\"\") == -1, \"None\"\nassert     first_repeated_char(\"a\") == -1, \"a\"\nassert     first_repeated_char(\"ab\") == -1, \"a\"\nassert     first_repeated_char(\"abcd\") == -1, \"a\"\nassert     first_repeated_char(\"abcdef\") == -1, \"a\"\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     first_repeated_char('abcb') == 'a'\nassert     first_repeated_char('abaab') == 'a'\nassert     first_repeated_char('aabb') == 'a'\nassert     first_repeated_char('abca') == 'a'\nassert     first_repeated_char('abd') == None\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert first_repeated_char('abcda') == 'b'\nassert first_repeated_char('aba') == 'a'\nassert first_repeated_char('aaabbbccc') == 'b'\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nget_ludic(5) == [1, 2, 4]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef get_prod(n):\n    '''\n    Write a function to get all product of all the prime numbers smaller than or equal to a given integer.\n    '''\n    pass\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert get_ludic(4) == [2, 3, 4]\nassert get_ludic(5) == [2, 3, 4, 5]\nassert get_ludic(6) == [2, 3, 4, 5, 6]\nassert get_ludic(7) == [2, 3, 4, 5, 6, 7]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_ludic(0) == []\nassert     get_ludic(1) == [0]\nassert     get_ludic(2) == [0, 1]\nassert     get_ludic(3) == [0, 1, 2]\nassert     get_ludic(4) == [0, 1, 2, 3]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_ludic(0) == []\nassert     get_ludic(1) == []\nassert     get_ludic(2) == []\nassert     get_ludic(3) == []\nassert     get_ludic(4) == [1]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_ludic(0) == []\nassert     get_ludic(1) == [1]\nassert     get_ludic(3) == [1,2,4]\nassert     get_ludic(5) == [1,2,4,5]\nassert     get_ludic(10) == [1,2,4,5,7,9,10]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_ludic(1) == [1]\nassert     get_ludic(2) == [1]\nassert     get_ludic(10) == [1,2,3,4,5,6,7,8,9]\nassert     get_ludic(11) == [1,2,3,4,5,6,7,8,9,10]\nassert     get_ludic(100) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef reverse_words_using_for(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     reverse_words('a test') == 'est a t', 'the reverse words example'\nassert     reverse_words('test') == 'eset t', 'the reverse words example'\nassert     reverse_words('leetcode is cool') == 'olleh tsetc is cool le', 'the reverse words example'\nassert     reverse_words('hello world') == 'dlrow olleh', 'the reverse words example'\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef words_to_list(s):\n    '''\n    Write a function to split the sentence in a list of words.\n    '''\n    pass\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     reverse_words('hello world') == 'world olleh'\nassert     reverse_words('hello') == 'olleh hello'\nassert     reverse_words('hello') == 'olleh hello'\nassert     reverse_words('hello world') == 'olleh world'\nassert     reverse_words('hello world') == 'olleh world'\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     reverse_words(\"This is a test.\") == \"test a si sihT\"\nassert     reverse_words(\"This is a test.\") == \"test a si sihT\"\nassert     reverse_words(\"This is a test.\") == \"test a si sihT\"\nassert     reverse_words(\"This is a test.\") == \"test a si sihT\"\nassert     reverse_words(\"I want to go shopping.\") == \"shopping want I\"\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     reverse_words('hello world') == 'world olleh','should be \\'world olleh\\''\nassert reverse_words('hello world') == 'world olleh','should be \\'world olleh\\''\nassert     reverse_words('hello world') == 'olleh world','should be \\'olleh world\\''\nassert reverse_words('hello world') == 'olleh world','should be \\'olleh world\\''\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split()[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     reverse_words('I am a boy') == 'boy a I'\nassert     reverse_words('I am a boy') == 'boy a I'\nassert     reverse_words('I am a boy') == 'boy a I'\nassert     reverse_words('I am a boy') == 'boy a I'\nassert     reverse_words('I am a boy') == 'boy a I'\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nassert reverse_words('Hello World') == 'World Hello'\nassert reverse_words('Hello World  ') == 'World Hello'\nassert reverse_words('Hello World!') == 'World Hello'\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n\n\ndef reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    pass\n    return s[::-1]"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert prime_num(2) is True\nassert prime_num(13) is True\nassert prime_num(2) is False\nassert prime_num(0) is False\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     prime_num(1) == False\nassert prime_num(2) == True\nassert prime_num(3) == True\nassert prime_num(4) == False\nassert prime_num(5) == True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert prime_num(4) == False\nassert prime_num(5) == True\n\ndef longest_palindrome(s):\n    '''\n    Write a function to find the longest palindrome in a string.\n    '''\n    pass\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     prime_num(1) == False, 'Wrong!'\nassert     prime_num(2) == True, 'Wrong!'\nassert     prime_num(7) == True, 'Wrong!'\nassert     prime_num(6) == False, 'Wrong!'\nassert     prime_num(20) == False, 'Wrong!'\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     prime_num(11)    ==    True,    \"prime_num(11) should return True\"\nassert     prime_num(12)    ==    False,    \"prime_num(12) should return False\"\nassert     prime_num(13)    ==    False,    \"prime_num(13) should return False\"\nassert     prime_num(14)    ==    True,    \"prime_num(14) should return True\"\nassert     prime_num(15)    ==    True,    \"prime_num(15) should return True\"\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     radian_degree(45) == math.pi/4\nassert     radian_degree(90) == math.pi/2\nassert     radian_degree(180) == math.pi\nassert     radian_degree(360) == 2*math.pi\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert round(radian_degree(0),5) == 0.0000\nassert round(radian_degree(180),5) == 1.5708\nassert round(radian_degree(360),5) == 3.1415\nassert round(radian_degree(180+60),5) == 1.5708\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert radian_degree(90) == math.pi / 2\nassert radian_degree(0) == 0\nassert radian_degree(180) == math.pi\nassert radian_degree(360) == 2 * math.pi\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert radian_degree(50) == math.pi / 4.0\n\ndef radian_degrees(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    pass\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef radian_radian(radian):\n    '''\n    Write a function to convert radians to radians.\n    '''\n    pass\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef radian_degree_to_radians(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    pass\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint(\"***WELCOME TO CELSIUS CONVERTER***\")\nprint(\"please enter the temperature in celsius\")\nc=int(input())\nf=(c*1.8)+32\nprint(\"you entered :\",c)\nprint(\"the temperature in fahrenheit is :\",f)\nprint(\"***WELCOME TO METER CONVERTER***\")\nprint(\"please enter the length in meter\")\nm=int(input())\nmm=m*1000000\nprint(\"the length in millimeters is :\",mm)\nprint(\"***WELCOME TO CENTIMETER CONVERTER***\")\nprint(\"please enter the length in centimeter\")\ncm=int(input())\ncmm=cm*100\nprint(\"the length in centimeters is :\",cmm)\nprint(\"***WELCOME TO FOOT CONVERTER***\")\nprint(\"please enter the length in foot\")\nft=int(input())\nftm=ft*30.48\nprint(\"the length in feet is :\",ft)\nprint(\"***WELCOME TO INCH CONVERTER***\")\nprint(\"please enter the length in inch\")\ninh=int(input())\ninhm=inh*2.54\nprint(\"the length in inches is :\",inh)\nprint(\"***WELCOME TO KILOMETER CONVERTER***\")\nprint(\"please enter the length in kilometer\")\nkm=int(input())\nkmm=km*1000\nprint(\"the length in kilometers is :\",kmm)\nprint(\"***WELCOME TO MILES CONVERTER***\")\nprint(\"please enter the length in miles\")\nmi=int(input())\nmim=mi*1609.34\nprint(\"the length in miles is :\",mim)\nprint(\"***WELCOME TO YARDS CONVERTER***\")\nprint(\"please enter the length in yards\")\nyd=int(input())\nydd=yd*1.094\nprint(\"the length in yards is :\",ydd)\nprint(\"***WELCOME TO FEET CONVERTER***\")\nprint(\"please enter the length in feet\")\nfh=int(input())\nfhm=fh*3.281\nprint(\"the length in feet is :\",fhm)\nprint(\"***WELCOME TO MILLIMETER CONVERTER***\")\nprint(\"please enter the length in millimeter\")\nmmh=int(input())\nmmhm=mmh*0.001\nprint(\"the length in millimeters is :\",mmhm)\nprint(\"***WELCOME TO MILLIMETER CONVERTER***\")\nprint(\"please enter the length in millimeter\")\nmmd=int(input())\nmmdm=mmd*0.000001\nprint(\"the length in millimeters is :\",mmdm)\nprint(\"***WELCOME TO MILLIMETER CONVERTER***\")\nprint(\"please enter the length in millimeter\")\nmmmi=int(input())\nmmmim=mmmi*1e-05\nprint(\"the length in millimeters is :\",mmmim)\nprint(\"***WELCOME TO MICROMETER CONVERTER***\")\nprint(\"please enter the length in micrometer\")\nmmhm=int(input())\nmmhm=mmhm*0.001\nprint(\"the length in micrometers is :\",mmhm)\nprint(\"***WELCOME TO MICROMETER CONVERTER***\")\nprint(\"please enter the length in micrometer\")\nmmmim=int(input())\nmmmim=mmmim*1e-05\nprint(\"the length in micrometers is :\",mmmim)\nprint(\"***WELCOME TO MICROMETER CONVERTER***\")\nprint(\"please enter the length in micrometer\")\nmmmi=int(input())\nmmmim=mmmi*1e-05\nprint(\"the length in micrometers is :\",mmmim)\nprint(\"***WELCOME TO MICROTECTOR CONVERTER***\")\nprint(\"please enter the length in micro-torque\")\nmtt=int(input())\nmtt=mtt*1e-5\nprint(\"the length in micro-torque is :\",mtt)\nprint(\"***WELCOME TO GIGAMETER CONVERTER***\")\nprint(\"please enter the length in gigameter\")\ngm=int(input())\ngm=gm*1e+9\nprint(\"the length in gigameters is :\",gm)\nprint(\"***WELCOME TO GIGAMETER CONVERTER***\")\nprint(\"please enter the length in gigameter\")\ngmm=int(input())\ngmm=gmm*1e+9\nprint(\"the length in gigameters is :\",gmm)\nprint(\"***WELCOME TO GIGAMETER CONVERTER***\")\nprint(\"please enter the length in gigameter\")\ngmmi=int(input())\ngmmim=gmmi*1e+9\nprint(\"the length in gigameters is :\",gmmim)\nprint(\"***WELCOME TO GIGAMETER CONVERTER***\")\nprint(\"please enter the length in gigameter\")\ngmmmi=int(input())\ngmmmim=gmmmi*1e+9\nprint(\"the length in gigameters is :\",gmmmim)\nprint(\"***WELCOME TO GIGAMETER CONVERTER***\")\nprint(\"please enter the length in gigameter\")\ngmmmi=int(input())\ngmmmim=gmmmi*1e+9\nprint(\"the length in gigameters is :\",gmmmim)\nprint(\"***WELCOME TO GIGAMETER CONVERTER***\")\nprint(\"please enter the length in gigameter\")\ngmmmi=int(input())\ngmmmim=gmmmi*1e+9\nprint(\"the length in gigameters is :\",gmmmim)\nprint(\"***WELCOME TO GIGAMETER CONVERTER***\")\nprint(\"please enter the length in gigameter\")\ngmmmi=int(input())\ngmmmim=gmmmi*1e+9\nprint(\"the length in gigameters is :\",gmmmim)\nprint(\"***WELCOME TO GIGAMETER CONVERTER***\")\nprint(\"please enter the length in gigameter\")\ngmmmi=int(input())\ngmmmim=gmmmi*1e+9\nprint(\"the length in gigameters is :\",gmmmim)\nprint(\"***WELCOME TO GIGAMETER CONVERTER***\")\nprint(\"please enter the length in gigameter\")\ngmmmi=int(input())\ngmmmim=gmmmi*1e+9\nprint(\"the length in gigameters is :\",gmmmim)\nprint(\"***WELCOME TO GIGAMETER CONVERTER***\")\nprint(\"please enter the length in gigameter\")\ngmmmi=int(input())\ngmmmim=gmmmi*1e+9\nprint(\"the length in gigameters is :\",gmmmim)\nprint(\"***WELCOME TO GIGAMETER CONVERTER***\")\nprint(\"please enter the length in gigameter\")\ngmmmi=int(input())\ngmmmim=gmmmi*1e+9\nprint(\"the length in gigameters is :\",gmmmim)\nprint(\"***WELCOME TO GIGAMETER CONVERTER***\")\nprint(\"please enter the length in gigameter\")\ngmmmi=int(input())\ngmmmim=gmmmi*1e+9\nprint(\"the length in gigameters is :\",gmmmim)\nprint(\"***WELCOME TO GIGAMETER CONVERTER***\")\nprint(\"please enter the length in gigameter\")\ngmmmi=int(input())\ngmmmim=gmmmi*1e+9\nprint(\"the length in gigameters is :\",gmmmim)\nprint(\"***WELCOME TO GIGAMETER CONVERTER***\")\nprint(\"please enter the length in gigameter\")\ngmmmi=int(input())\ngmmmim=gmmmi*1e+9\nprint(\"the length in gigameters is :\",gmmmim)\nprint(\"***WELCOME TO GIGAMETER CONVERTER***\")\nprint(\"please enter the length in gigameter\")\ngmmmi=int(input())\ngmmmim=gmmmi*1e+9\nprint("
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     radian_degree(100) == \n        math.pi / 180.0\nassert radian_degree(200) == \n        math.pi / 2.0\nassert radian_degree(0) == \n        math.pi / 180.0\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_literals('The quick brown fox jumps over the lazy dog.','the') == {\n        'substring': 'the',\n        'start': 2,\n        'end': 10\n    }\nassert     find_literals('The quick brown fox jumps over the lazy dog.','cat') == {\n        'substring': 'cat',\n        'start': 1,\n        'end': 6\n    }\nassert     find_literals('The quick brown fox jumps over the lazy dog.','fox') == {\n        'substring': 'fox',\n        'start': 0,\n        'end': 7\n    }\nassert     find_literals('The quick brown fox jumps over the lazy dog.','dog') == {\n        'substring': 'dog',\n        'start': 0,\n        'end': 6\n    }\nassert     find_literals('The quick brown fox jumps over the lazy dog.','dog.') == {\n        'substring': 'dog',\n        'start': 0,\n        'end': 5\n    }\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_literals('abcdabcdeabcdeabcde', r'abc') == ('abc', 0, 10)\nassert find_literals('abcdabcdeabcdeabcde', r'bc') == ('bc', 0, 7)\nassert find_literals('abcdabcdeabcdeabcde', r'ab') == ('ab', 0, 6)\nassert find_literals('abcdabcdeabcdeabcde', r'a*') == ('a', 0, 5)\nassert find_literals('abcdabcdeabcdeabcde', r'a*b') == ('a', 0, 6)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_literals(\"abcde\", 'x') == (0,3)\nassert     find_literals(\"abce\", 'x') == (0,2)\nassert     find_literals(\"abcde\", 'e') == (1,4)\nassert     find_literals(\"abcde\", 'de') == (2,5)\nassert     find_literals(\"abcde\", 'de') == (2,5)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_literals('abc', 'ab') == (0, 0)\nassert     find_literals('abc', 'abc') == (0, 3)\nassert     find_literals('abc', 'bc') == (1, 2)\nassert     find_literals('abc', 'abababc') == (0, 3)\nassert     find_literals('abab', 'abc') == (1, 3)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_literals( \"hi\", \"(hello)\" ) == (\"hello\", 0, 4)\nassert     find_literals( \"hi\", \"(\\w+)\") == (\"hi\", 0, 2)\nassert     find_literals( \"hi\", \"(\\w{3}|\\w{4})\") == (\"hi\", 0, 3)\nassert     find_literals( \"hi\", \"(\\w{3})\") == (\"hi\", 0, 2)\nassert     find_literals( \"hi\", \"(\\w{3,5})\") == (\"hi\", 0, 4)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_literals(    \"This is a simple test of a function.\", \n                            r\"test\") == (    \"test\", 0, 14) \nassert     find_literals(    \"This is a simple test of a function.\", \n                            r\"test\\s+\") == (    \"test \", 0, 15) \nassert     find_literals(    \"This is a simple test of a function.\", \n                            r\"test\\s+\") == (    \"test \", 0, 15) \nassert     find_literals(    \"This is a simple test of a function.\", \n                            r\"test\\s+\") == (    \"test \", 0, 15) \nassert     find_literals(    \"This is a simple test of a function.\", \n                            r\"test\\s+\") == (    \"test \", 0, 15) \n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef find_all_sentences(text, pattern):\n    '''\n    Write a function to find all sentences (with optional starting punctuation) that match a regex pattern. The function should return a list of sentences with each sentence being a list of tokens.\n    '''\n    pass\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef find_all_literal_substrings(text, pattern):\n    '''\n    Write a function to find all instances of a regex pattern in a string.\n    '''\n    pass\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert find_literals('abc', 'abc') == ('abc', 0, 3)\nassert find_literals('abc', 'cba') == ('cba', 3, 6)\nassert find_literals('abc', 'abcba') == ('abcba', 0, 6)\n\ndef search_for_sequences(text, pattern):\n    '''\n    Write a function to search for a regex pattern in a string. The function should return the count of non-overlapping matches, as well as the starting index and ending index of each match.\n    '''\n    pass\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_literals(\"abcabc\", \"abc\") == (\"abc\", 0, 3)\nassert     find_literals(\"abcabc\", \"a\") == (\"a\", 0, 1)\nassert     find_literals(\"abcabc\", \"b\") == (\"b\", 1, 2)\nassert     find_literals(\"abcabc\", \"ab\") == (\"ab\", 0, 2)\nassert     find_literals(\"abcabc\", \"abc\") == (\"abc\", 0, 3)\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     bell_Number(2) == 1, \"Bell Number 2 Should be 1\"\nassert     bell_Number(3) == 4, \"Bell Number 3 Should be 4\"\nassert     bell_Number(5) == 26, \"Bell Number 5 Should be 26\"\nassert     bell_Number(6) == 55, \"Bell Number 6 Should be 55\"\nassert     bell_Number(7) == 155, \"Bell Number 7 Should be 155\"\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     bell_Number(0) == 1\nassert     bell_Number(1) == 1\nassert     bell_Number(2) == 2\nassert     bell_Number(3) == 3\nassert     bell_Number(4) == 5\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     bell_Number(1) == 1\nassert     bell_Number(2) == 2\nassert     bell_Number(3) == 3\nassert     bell_Number(4) == 5\nassert     bell_Number(5) == 7\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     bell_Number(0) == 0, 'bell_Number(0) = 0'\nassert     bell_Number(1) == 1, 'bell_Number(1) = 1'\nassert     bell_Number(2) == 2, 'bell_Number(2) = 2'\nassert     bell_Number(3) == 5, 'bell_Number(3) = 5'\nassert     bell_Number(4) == 8, 'bell_Number(4) = 8'\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint \"---START---\"\nbell_Number(5)\nprint \"---END---\""
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert bell_Number(0) == 1\nassert bell_Number(1) == 1\nassert bell_Number(2) == 2\nassert bell_Number(3) == 5\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     bell_Number(1) == 1 \nassert     bell_Number(2) == 2 \nassert     bell_Number(3) == 5 \nassert     bell_Number(4) == 13 \nassert     bell_Number(5) == 52 \n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_kth_element([1,2,3,4,5], 3) == [1,2,5]\nassert     remove_kth_element([1,2,3,4,5], 0) == []\nassert     remove_kth_element([1,2,3,4,5], 5) == [1,2,3,4]\n\ndef check_word(s):\n    '''\n    Write a python function that checks if the given string is a palindrome or not.\n    Return True if the string is palindrome and return False if not.\n    '''\n    pass\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nremove_kth_element(list1, L) == '''\na\nb\nc\n'''\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_kth_element([1,2,3,4,5,6],1) == [1,2,3,4,5]\nassert     remove_kth_element([1,2,3,4,5,6],4) == [1,2,3,5,6]\nassert     remove_kth_element([1,2,3,4,5,6],6) == [1,2,3,4,5]\nassert     remove_kth_element([1,2,3,4,5,6],10) == [1,2,3,4,5]\nassert     remove_kth_element([1,2,3,4,5,6],9) == [1,2,3,4,5]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_kth_element([2,3,4,5], 2) == [3,4,5]\nassert     remove_kth_element([1,2,3,4,5], 0) == [1,2,3,4,5]\nassert     remove_kth_element([1,2,3,4,5], 6) == [1,2,3,4,5]"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_kth_element([1, 2, 3, 4, 5, 6], 2) ==  [1, 2, 3, 5, 6]\nassert     remove_kth_element([], 3) == []\nassert     remove_kth_element([1, 2, 3, 4, 5, 6], 1) ==  [1, 2, 3, 4, 5]\n\ndef remove_third_element(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    pass\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_kth_element([1, 2, 3, 4, 5, 6], 4) == [1, 2, 3, 5, 6], \"Should be [1, 2, 3, 5]\"\nassert     remove_kth_element([5, 9, 12], 4) == [5, 9, 12], \"Should be [5, 9]\"\nassert     remove_kth_element([1, 2, 3, 4, 5], 10) == [1, 2, 3, 4], \"Should be [1, 2, 3, 4]\"\n\n\ndef remove_kth_element2(list1, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    pass\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_kth_element([1,2,3,4], 3) == [1,2,4]\nassert     remove_kth_element([1,2,3,4], 1) == [2,3,4]\nassert     remove_kth_element([1,2,3,4], 0) == [1,2,3,4]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_kth_element([1,2,3,4], 0) == [1,2,3,4], \"Wrong\"\nassert     remove_kth_element([1,2,3,4], 2) == [1,2], \"Wrong\"\nassert     remove_kth_element([1,2,3,4], 1) == [1,3,4], \"Wrong\"\n\n'''\nWrite a python function which takes two lists and returns a list with the elements in the first list in the same order as in the second list.\n'''\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 1) == 9\nassert     max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 2) == 6\nassert     max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 3) == 9\nassert     max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 4) == 6\nassert     max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 5) == 9\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 1) == 9\nassert     max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 2) == 8\nassert     max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 3) == 9\nassert     max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 4) == 8\n\n'''\nmax_of_nth([[1,2,3],[4,5,6],[7,8,9]], 1)\n11\n'''\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nmax_of_nth([[-1,2,-3,4],\n    [-10,-20,-30,40],\n    [100,200,-300,400]], 1) == 200\nassert max_of_nth([[-1,2,-3,4],\n    [-10,-20,-30,40],\n    [100,200,-300,400]], 3) == 300\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint('Correct')\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_of_nth([[1,2,3,4],[5,6,7,8],[9,10,11,12]], 1) == 3\nassert     max_of_nth([[1,2,3,4],[5,6,7,8],[9,10,11,12]], 2) == 6\nassert     max_of_nth([[1,2,3,4],[5,6,7,8],[9,10,11,12]], 3) == 10\nassert     max_of_nth([[1,2,3,4],[5,6,7,8],[9,10,11,12]], 4) == 12\nassert     max_of_nth([[1,2,3,4],[5,6,7,8],[9,10,11,12]], 5) == 12\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_of_nth([\n                [1, 2, 3],\n                [4, 5, 6],\n                [7, 8, 9]\n            ], 1) == 9, 'Wrong value'\n\nassert     max_of_nth([\n                [1, 2, 3],\n                [4, 5, 6],\n                [7, 8, 9]\n            ], 2) == 6, 'Wrong value'\n\nassert     max_of_nth([\n                [1, 2, 3],\n                [4, 5, 6],\n                [7, 8, 9]\n            ], 3) == 9, 'Wrong value'\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 0) == 9, \"Should be 9\"\nassert     max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 1) == 5, \"Should be 5\"\nassert     max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 2) == 8, \"Should be 8\"\nassert     max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 3) == 7, \"Should be 7\"\nassert     max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 4) == 6, \"Should be 6\"\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert merge([[1,2],[3,4]]) == [[1,3],[2,4]]\nassert merge([[1,2],[3,4],[5,6],[7,8],[9,10]]) == [[1,7],[2,9],[3,5],[4,6],[5,8],[6,10]]"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     merge([[3, 5],\n               [1, 6],\n               [4, 7]]) == [[3, 1],\n                            [5, 6],\n                            [4, 7]]\nassert     merge([[5, 6, 7],\n               [1, 3, 5],\n               [4, 2, 6]]) == [[5, 1, 4],\n                                [6, 3, 2],\n                                [7, 6, 5]]"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    merge([[1, 2], [3, 4]]) == [[1, 2], [3, 4]]\nassert merge([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]\nassert merge([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert \n    merge([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]\nassert \n    merge([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) == [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     merge([[1, 2], [3, 4]]) == [[1, 2], [3, 4]]\nassert     merge([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]\nassert     merge([[1], [2]]) == [[1], [2]]\nassert     merge([[1], [2], [3], [4], [5]]) == [[1], [2], [3], [4], [5]]\nassert     merge([]) == []\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nmerge([[1,2],[3,4]]) == [[1,2],[3,4]]\nmerge([[1],[2],[3]]) == [[1],[2],[3]]\nmerge([[1,2,3],[4,5,6]]) == [[1,2,3],[4,5,6]]\nmerge([[1],[2],[3],[4]]) == [[1,2,3,4]]\nmerge([[1,2,3],[4,5,6],[7,8,9]]) == [[1,2,3],[4,5,6],[7,8,9]]\nmerge([[1],[2],[3],[4],[5],[6]]) == [[1,2,3,4,5,6]]"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     merge([[1,2],[1,3]]) == [[1,1],[2,2],[3,3]]\nassert     merge([[1,2],[3,4]]) == [[1,2],[3,4]]\nassert     merge([[1,2]]) == [[1,2]]\nassert     merge([[]]) == [[]]\n\n'''\nYou are given an array of integers. Your task is to print a list of lists with the sublists in the same order as they appear in the array except for the\nfirst element of the first sublist in the list.\n'''\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     merge([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]\nassert     merge([[1, 2], [], [1, 2]]) == [[1, 2], [1, 2]]\nassert     merge([[], [], []]) == []\nassert     merge([[], [[]], [[]]]) == [[], [[]], [[]]]\nassert     merge([[1, 2], [3], [[4, 5]]]) == [[1, 2], [3], [[4, 5]]]\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(cummulative_sum([1,2,3,4,5])"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     (cummulative_sum((-1, 2, -3, 4)) == [-1, -1, 2, 5]), \"Should be (-1, -1, 2, 5)\"\nassert     (cummulative_sum((-1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == \\\n    [-1, -1, 0, 1, 3, 6, 10, 15, 21, 28, 45]), \"Should be [-1, -1, 0, 1, 3, 6, 10, 15, 21, 28, 45]\"\nassert     (cummulative_sum((-1, -2, 0, 1, 1, 1, 1, 1, 1, 1, 1)) == \\\n    [-1, -1, -2, -2, 0, 0, 1, 1, 2, 3, 4]), \"Should be [-1, -1, -2, -2, 0, 0, 1, 1, 2, 3, 4]\"\n\n'''\nLet's talk about a decorator, which is a way to wrap the original functions of your program so that we can use it's functionality as we like.\nLet's talk about a function that works as a decorator.\n'''\n\ndef decorator_function(original_function):\n    def wrapper_function():\n        print(\"Wrapper executed before {0}\".format(original_function.__name__))\n        return original_function()\n    return wrapper_function\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     cummulative_sum((1,2,3)) == 6, \"Wrong answer!\"\nassert     cummulative_sum((2,4,6)) == 12, \"Wrong answer!\"\nassert     cummulative_sum((1,2,3,4)) == 6, \"Wrong answer!\"\nassert     cummulative_sum((1,2,3,4,5)) == 15, \"Wrong answer!\""
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     cummulative_sum( (10, 20, 30, 40, 50, 60) ) == (10,40,70,110,150,200)\nassert     cummulative_sum( (10, 20, 30) ) == (10,40,70)\nassert     cummulative_sum( (10, 20) ) == (10,40)\nassert     cummulative_sum( (10) ) == (10)\nassert     cummulative_sum( () ) == ()\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     (cummulative_sum([1, 2, 3, 4, 5]) == [1, 3, 6, 10, 15]), 'Wrong'\nassert     (cummulative_sum([]) == []), 'Wrong'\nassert     (cummulative_sum((1)) == [1]), 'Wrong'\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     (cummulative_sum(test_list) == (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100)), print(\"failed\")\n\ndef unique_elements(test_list):\n    '''\n    Write a function to remove all duplicated elements from the given list. \n    Also return the number of elements left in the list after this function call.\n    '''\n    pass\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ncummulative_sum([1, 2, 3, 4]) == [1, 3, 6, 10]\ncummulative_sum([]) == []\ncummulative_sum([3, 4, 5]) == [3, 7, 11]\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ncummulative_sum([]) == ()\ncummulative_sum([1]) == (1,)\ncummulative_sum([1, 2]) == (1, 3)\ncummulative_sum([1, 2, 3]) == (1, 4)\ncummulative_sum([1, 2, 3, 4]) == (1, 6)\ncummulative_sum([1, 2, 3, 4, 5]) == (1, 6)\ncummulative_sum([1, 2, 3, 4, 5, 6]) == (1, 10)\ncummulative_sum([-1, -2, -3, -4, -5]) == (-1, -6)\ncummulative_sum([1, -1, 2, -2, 3, -3, 4, -4, 5, -5]) == (1, 1)\ncummulative_sum([-1, -2, -3, -4, -5, -6]) == (-1, -7)\ncummulative_sum([1, 2, 3, 4, -5, -6, -7, 8, 9]) == (1, 10)\n\n\ndef cumulative_sum_tuple(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    pass\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert average_tuple(\n    [\n        [1, 2, 3],\n        [2, 3, 4],\n        [3, 4, 5],\n        [4, 5, 6],\n        [5, 6, 7]\n    ]\n) == (3.2, 4.3, 5.4)\n\nassert average_tuple(\n    [\n        [1],\n        [2],\n        [3],\n        [4],\n        [5]\n    ]\n) == (1.0, 2.0, 3.0, 4.0, 5.0)\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     average_tuple(()) == ()\nassert     average_tuple(()) == ()\nassert     average_tuple(()) == ()\nassert     average_tuple(((1,), (2,), (3,), (4,))) == (2.0, 3.0, 4.0)\nassert     average_tuple(((1,), (2,), (3,), (4,))) == (2.0, 3.0, 4.0)\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     average_tuple([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [2, 2, 2], \"Wrong result\"\nassert average_tuple([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [2.0, 2.0, 2.0], \"Wrong result\"\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     average_tuple(((1,2,3),(4,5,6),(7,8,9))) == [4,5,6]\nassert     average_tuple(((4,5,6),(2,3,4),(1,2,3))) == [2,3,4]\nassert     average_tuple(((1,2,3),(4,5,6),(7,8,9))) == [2,3,4]\nassert     average_tuple(((1,2,3),(4,5,6),(7,8,9))) == [2,3,4]\nassert     average_tuple(((1,2,3),(4,5,6),(7,8,9))) == [2,3,4]\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     average_tuple(nums = (0, 1, 2)) == [1, 1, 1]\nassert     average_tuple(nums = ((0, 1), (2, 3))) == [1, 2]\nassert     average_tuple(nums = ((-1, -2), (1, 2))) == [-0.5, 1]\nassert     average_tuple(nums = ((1, 2, 3), (4, 5, 6))) == [3, 4.5, 5]\nassert     average_tuple(nums = ((-1, -2, -3), (4, 5, 6))) == [1, 2, 3]\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert \n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     average_tuple([(2, 3, 4), (1, 2, 3)]) == [(2.0, 3.0, 4.0), (1.5, 2.5, 3.5)]\nassert     average_tuple([(2, 3, 4), (1, 2, 3)]) ==     [(2.0, 3.0, 4.0), (1.5, 2.5, 3.5)]\n\ndef average_tuple_two(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    pass\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     average_tuple([(1, 2, 3), (2, 3, 4)]) == ([2, 3], [3, 2])\nassert     average_tuple([(1, 2, 3), (2, 3, 4)]) == ([2, 3], [3, 2])\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     average_tuple([[10, 20, 30], [40, 50, 60]]) == ([10, 20, 30], [40, 50, 60])\nassert     average_tuple([(10, 20, 30), (40, 50, 60)]) == ([10, 20, 30], [40, 50, 60])\nassert     average_tuple([[1, 2, 3], (4, 5, 6)]) == ([1, 2, 3], [4, 5, 6])\nassert     average_tuple([[10], [10, 20, 30], (40, 50, 60)]) == ([10], [10, 20, 30], [40, 50, 60])\nassert     average_tuple([[10, 20, 30], (40, 50, 60), [70, 80, 90]]) == ([10, 20, 30], [40, 50, 60], [70, 80, 90])\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tuple_modulo((1,2),(3,4)) == (0,2)\nassert     tuple_modulo((1,4),(3,4)) == (1,0)\nassert     tuple_modulo((1,2),(2,4)) == (0,0)\nassert     tuple_modulo((-1,-4),(2,4)) == (-3,-2)\n\n'''\n2. Write a function which takes a tuple as input and returns the first and last element of the tuple.\n'''\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_modulo((1,2),(2,3)) == (0,1)\nassert     tuple_modulo((4,5),(5,7)) == (3,1)\nassert     tuple_modulo((8,4),(7,5)) == (0,2)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tuple_modulo((1, 2, 3), (1, 2, 3)) == (0, 0, 0)\nassert     tuple_modulo((4, 3, 8), (2, -4, 7)) == (2, -4, -3)\nassert     tuple_modulo((8, 0, 7), (2, -4, 7)) == (4, -4, -3)\nassert     tuple_modulo((1, 2, 3, 4), (1, 2, 3)) == (0, 0, 0)\nassert     tuple_modulo((2, -4, 7), (2, -4, 7)) == (0, 0, 0)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tuple_modulo((1,2,3),(4,5,6)) == (1,0,3)\nassert tuple_modulo((1,2,3),(4,5,6)) == (1,0,3)\nassert tuple_modulo((1,0,3),(4,5,6)) == (1,0,3)\nassert tuple_modulo((1,1,3),(4,5,6)) == (0,1,3)\nassert tuple_modulo((1,0,3),(4,5,6)) == (1,0,3)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tuple_modulo((1, 2, 3), (4, 5, 6)) == (1, 2, 3), \"incorrect\"\nassert     tuple_modulo((2, 3, 4), (5, 6, 7)) == (0, 0, 0), \"incorrect\"\nassert     tuple_modulo((3, 4, 5), (6, 7, 8)) == (0, 0, 0), \"incorrect\"\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tuple_modulo((1, 2, 3), (4, 5, 6)) == (1, 2, 3)\nassert     tuple_modulo((1, 2, 3), (2, 3, 4)) == (1, 2, -1)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tuple_modulo(\n    (0, 0, 1, 1),\n    (1, 0, 1, 1)\n    ) == (0, 0, 0, 1)\nassert     tuple_modulo(\n    (0, 0, 1, 1),\n    (1, 0, 1, 2)\n    ) == (0, 0, 0, 1)\nassert     tuple_modulo(\n    (1, 0, 1, 1),\n    (1, 0, 1, 1)\n    ) == (1, 0, 1, 1)\nassert     tuple_modulo(\n    (1, 0, 1, 1),\n    (1, 0, 1, 2)\n    ) == (1, 0, 1, 1)\nassert     tuple_modulo(\n    (0, 0, 1, 1),\n    (0, 0, 1, 2)\n    ) == (0, 0, 0, 1)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tuple_modulo((2, 4), (3, 4)) == (1, 0)\nassert     tuple_modulo((4, 8), (2, 4)) == (2, 4)\nassert     tuple_modulo((0, 0), (0, 0)) == (0, 0)\nassert     tuple_modulo((1, 0), (2, 4)) == (0, 4)\nassert     tuple_modulo((0, 2), (2, 4)) == (0, 2)\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     min_Jumps(10, 10) == 0, 'Should be: 0'\nassert     min_Jumps(3, 4) == 2, 'Should be: 2'\nassert     min_Jumps(1, 1) == 1, 'Should be: 1'\nassert     min_Jumps(4, 4) == 1, 'Should be: 1'\nassert     min_Jumps(4, 4) == 1, 'Should be: 1'\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nmin_Jumps(10, 3) == 2\nmin_Jumps(10, 4) == 3\nmin_Jumps(10, 6) == 4\nmin_Jumps(11, 3) == 5\nmin_Jumps(11, 4) == 5\nmin_Jumps(11, 6) == 6\nmin_Jumps(12, 3) == 8\nmin_Jumps(12, 4) == 10\nmin_Jumps(12, 6) == 15\nmin_Jumps(13, 3) == 15\nmin_Jumps(13, 4) == 19\nmin_Jumps(13, 6) == 22\nmin_Jumps(14, 3) == 20\nmin_Jumps(14, 4) == 22\nmin_Jumps(14, 6) == 27\nmin_Jumps(15, 3) == 27\nmin_Jumps(15, 4) == 31\nmin_Jumps(15, 6) == 36\nmin_Jumps(16, 3) == 33\nmin_Jumps(16, 4) == 38\nmin_Jumps(16, 6) == 43\nmin_Jumps(17, 3) == 41\nmin_Jumps(17, 4) == 45\nmin_Jumps(17, 6) == 53\nmin_Jumps(18, 3) == 55\nmin_Jumps(18, 4) == 63\nmin_Jumps(18, 6) == 72\nmin_Jumps(19, 3) == 72\nmin_Jumps(19, 4) == 81\nmin_Jumps(19, 6) == 90\nmin_Jumps(20, 3) == 99\nmin_Jumps(20, 4) == 108\nmin_Jumps(20, 6) == 117\nmin_Jumps(21, 3) == 120\nmin_Jumps(21, 4) == 126\nmin_Jumps(21, 6) == 135\nmin_Jumps(22, 3) == 144\nmin_Jumps(22, 4) == 154\nmin_Jumps(22, 6) == 162\nmin_Jumps(23, 3) == 165\nmin_Jumps(23, 4) == 175\nmin_Jumps(23, 6) == 183\nmin_Jumps(24, 3) == 195\nmin_Jumps(24, 4) == 204\nmin_Jumps(24, 6) == 216\nmin_Jumps(25, 3) == 225\nmin_Jumps(25, 4) == 229\nmin_Jumps(25, 6) == 243\nmin_Jumps(26, 3) == 247\nmin_Jumps(26, 4) == 253\nmin_Jumps(26, 6) == 268\nmin_Jumps(27, 3) == 273\nmin_Jumps(27, 4) == 286\nmin_Jumps(27, 6) == 294\nmin_Jumps(28, 3) == 295\nmin_Jumps(28, 4) == 303\nmin_Jumps(28, 6) == 306\nmin_Jumps(29, 3) == 308\nmin_Jumps(29, 4) == 311\nmin_Jumps(29, 6) == 314\nmin_Jumps(30, 3) == 318\nmin_Jumps(30, 4) == 321\nmin_Jumps(30, 6) == 324\nmin_Jumps(31, 3) == 325\nmin_Jumps(31, 4) == 328\nmin_Jumps(31, 6) == 331\nmin_Jumps(32, 3) == 334\nmin_Jumps(32, 4) == 335\nmin_Jumps(32, 6) == 337\nmin_Jumps(33, 3) == 341\nmin_Jumps(33, 4) == 344\nmin_Jumps(33, 6) == 347\nmin_Jumps(34, 3) == 351\nmin_Jumps(34, 4) == 354\nmin_Jumps(34, 6) == 359\nmin_Jumps(35, 3) == 361\nmin_Jumps(35, 4) == 365\nmin_Jumps(35, 6) == 371\nmin_Jumps(36, 3) == 376\nmin_Jumps(36, 4) == 385\nmin_Jumps(36, 6) == 391\nmin_Jumps(37, 3) == 396\nmin_Jumps(37, 4) == 407\nmin_Jumps(37, 6) == 416\nmin_Jumps(38, 3) == 417\nmin_Jumps(38, 4) == 419\nmin_Jumps(38, 6) == 425\nmin_Jumps(39, 3) == 428\nmin_Jumps(39, 4) == 429\nmin_Jumps(39, 6) == 437\nmin_Jumps(40, 3) == 440\nmin_Jumps(40, 4) == 443\nmin_Jumps(40, 6) == 447\nmin_Jumps(41, 3) == 448\nmin_Jumps(41, 4) == 449\nmin_Jumps(41, 6) == 457\nmin_Jumps(42, 3) == 460\nmin_Jumps(42, 4) == 464\nmin_Jumps(42, 6) == 473\nmin_Jumps(43, 3) == 476\nmin_Jumps(43, 4) == 478\nmin_Jumps(43, 6) == 491\nmin_Jumps(44, 3) == 495\nmin_Jumps(44, 4) == 504\nmin_Jumps(44, 6) == 514\nmin_Jumps(45, 3) == 517\nmin_Jumps(45, 4) == 521\nmin_Jumps(45, 6) == 525\nmin_Jumps(46, 3) == 534\nmin_Jumps(46, 4) == 542\nmin_Jumps(46, 6) == 551\nmin_Jumps(47, 3) == 557\nmin_Jumps(47, 4) == 561\nmin_Jumps(47, 6) == 575\nmin_Jumps(48, 3) == 584\nmin_Jumps(48, 4) == 597\nmin_Jumps(48, 6) == 613\nmin_Jumps(49, 3) == 617\nmin_Jumps(49, 4) == 622\nmin_Jumps(49, 6) == 629\nmin_Jumps(50, 3) == 631\nmin_Jumps(50, 4) == 634\nmin_Jumps(50, 6) == 638\nmin_Jumps(51, 3) == 646\nmin_Jumps(51, 4) == 649\nmin_Jumps(51, 6) == 662\nmin_Jumps(52, 3) == 665\nmin_Jumps(52, 4) == 672\nmin_Jumps(52, 6) == 674\nmin_Jumps(53, 3) == 677\nmin_Jumps(53, 4) == 681\nmin_Jumps(53, 6) == 688\nmin_Jumps(54, 3) == 692\nmin_Jumps(54, 4) == 701\nmin_Jumps(54, 6) == 706\nmin_Jumps(55, 3) == 708\nmin_Jumps(55, 4) == 711\nmin_Jumps(55, 6) == 716\nmin_Jumps(56, 3) == 717\nmin_Jumps(56, 4) == 720\nmin_Jumps(56, 6) == 728\nmin_Jumps(57, 3) == 731\nmin_Jumps(57, 4) == 734\nmin_Jumps(57, 6) == 742\nmin_Jumps(58, 3) == 743\nmin_Jumps(58, 4) == 746\nmin_Jumps(58, 6) == 753\nmin_Jumps(59, 3) == 756\nmin_Jumps(59, 4) == 763\nmin_Jumps(59, 6) == 766\nmin_Jumps(60, 3) == 769\nmin_Jumps(60, 4) == 772\nmin_Jumps(60, 6) == 779\nmin_Jumps(61, 3) == 782\nmin_Jumps(61, 4) == 785\nmin_Jumps(61, 6) == 798\nmin_Jumps(62, 3) == 801\nmin_Jumps(62, 4) == 804\nmin_Jumps(62, 6) == 807\nmin_Jumps(6"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     min_Jumps(1, (1, 0)) == -1\nassert     min_Jumps(2, (1, 0)) == -1\nassert     min_Jumps(3, (1, 0)) == -1\nassert     min_Jumps(4, (1, 0)) == -1\nassert     min_Jumps(5, (1, 0)) == -1\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     min_Jumps([1,2,3,2,4], (1,2)) == 2\nassert     min_Jumps([1,3,5,6,9], (2,4)) == -1\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     min_Jumps(3, (4, 0)) == 5\nassert     min_Jumps(3, (4, 1)) == 4\nassert     min_Jumps(3, (2, 1)) == 1\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     div_list([1,2,3,4,5], [2,4]) == [[1,2],[3,4]]\nassert     div_list([1,2,3], [1,2]) == [[1,1],[2,2],[3,3]]\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndiv_list([1,2,3],[4,5,6]) == [[1,2],[3,0]]\nassert not div_list([1,2,3],[4,5,6]) == [[1,2],[3,0]]\nassert not div_list([1,2,3,4],[5,6,7,8]) == [[1,2],[3,0]]\nassert div_list([1,2,3,4],[5,6,7,8]) == [[1,2],[3,0],[4,5],[6,7]]\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     div_list([1,2,3,4], [5,6,7,8]) == \n    [[1, 2, 3], [1, 1, 1], [1, 1, 2], [1, 1, 4]]\n\n\ndef f_x_lists(list1, list2):\n    '''\n    Write a function to compute the dot product of two lists\n    '''\n    pass"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef add_two_list(num1, num2):\n    '''\n    Write a function that takes in two lists and returns a new list that contains the sum of the numbers in the original lists.\n    '''\n    pass\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     div_list([1,2,3],[4,5,6]) == [0.5,1,2], \"The result should be [0.5,1,2]\"\nassert     div_list([1,2,3],[4,5,6,7]) == [0.5,1,2.333333333333333,2.333333333333333], \"The result should be [0.5,1,2.333333333333333,2.333333333333333]\"\nassert     div_list([1,2,3,4],[4,5,6,7,8]) == [0.5,1,2,3.333333333333333,2.333333333333333,3.333333333333333,4,5], \"The result should be [0.5,1,2,3.333333333333333,2.333333333333333,3.333333333333333,4,5]\"\nassert     div_list([1,2,3,4,5],[4,5,6,7,8,9]) == [0.5,1,2,3.333333333333333,2.333333333333333,3.333333333333333,4,5], \"The result should be [0.5,1,2,3.333333333333333,2.333333333333333,3.333333333333333,4,5]\"\nassert     div_list([1,2,3,4,5,6],[4,5,6,7,8,9]) == [0.5,1,2,3.333333333333333,2.333333333333333,3.333333333333333,4,5.333333333333333,5], \"The result should be [0.5,1,2,3.333333333333333,2.333333333333333,3.333333333333333,4,5.333333333333333,5]\"\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    nums1 = nums1[:]\n    nums2 = nums2[:]\n    nums1 = map(lambda x,y:x/y, nums1,nums2)\n    return list(nums1)\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ndiv_list([1,2,3],[4,5,6]) == [[1,2], [3,0], [6,0]], \"Wrong output\"\nassert div_list([3,4,5],[1,2,3]) == [[3,4,5], [0,0,0], [0,0,0]], \"Wrong output\"\nassert div_list([3,3],[1,2]) == [[3,3], [0,0], [0,0]], \"Wrong output\"\nassert div_list([0,0],[0,0]) == [[0,0], [0,0], [0,0]], \"Wrong output\"\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef create_list(n):\n    '''\n    Write a function to create a list of n random integers.\n    '''\n    pass\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     move_num(\"The quick brown fox jumps over the lazy dog\") == \"jumps over he qiu cb no x   fox dy  lazy dog\"\nassert     move_num(\"\") == \"\"\nassert     move_num(\"a\") == \"a\"\nassert     move_num(\"12345\") == \"45123\"\nassert     move_num(\"5643\") == \"54643\"\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(move_num('1abc2cd34de5f678'))\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     move_num('abcdefg') == 'gfedcba', 'Should move all the numbers to the end.'\nassert     move_num('abcdefg') == 'fedcba', 'Should move all the numbers to the end.'\nassert     move_num('abcdefg') == 'efgabc', 'Should move all the numbers to the end.'\nassert     move_num('abcdefgh') == 'efghab', 'Should move all the numbers to the end.'\nassert     move_num('abcdefgh') == 'ghabcde', 'Should move all the numbers to the end.'\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     move_num('1abcdefg') == 'abcdefg12', 'wrong!'\nassert     move_num('abcdefg12') == '12abcdefg', 'wrong!'\n\ndef find_max_min(test_str):\n    '''\n    Write a function to find the maximum and minimum element of a given string.\n    '''\n    pass\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint('[Test Cases]:')\nprint('[Case 1]:', move_num(\"a1b2c3d4e\"),'->', 'e1b2c3d4a')\nprint('[Case 2]:', move_num(\"12a4b5c6d7e8\"),'->', 'e8a4b5c6d7')\nprint('[Case 3]:', move_num(\"999\"),'->', '999')\nprint('[Case 4]:', move_num(\"9\"),'->', '9')\nprint('[Case 5]:', move_num(\"1\"),'->', '1')\nprint('[Case 6]:', move_num(\"\"),'->', '')\nprint('[Case 7]:', move_num(\"a\"),'->', 'a')\nprint('[Case 8]:', move_num(\"ab\"),'->', 'ab')\nprint('[Case 9]:', move_num(\"1a2\"),'->', '21a2')\nprint('[Case 10]:', move_num(\"a2a\"),'->', 'a2a')\nprint('[Case 11]:', move_num(\"a\"),'->', 'a')\nprint('[Case 12]:', move_num(\"abc\"),'->', 'abc')\nprint('[Case 13]:', move_num(\"abc12\"),'->', '12abc')\nprint('[Case 14]:', move_num(\"abc1\"),'->', '1abc')\nprint('[Case 15]:', move_num(\"abc1a\"),'->', 'abc1a')\nprint('[Case 16]:', move_num(\"abc1b\"),'->', 'abc1b')\nprint('[Case 17]:', move_num(\"abc1c\"),'->', 'abc1c')\nprint('[Case 18]:', move_num(\"abc1d\"),'->', 'abc1d')\nprint('[Case 19]:', move_num(\"abc1e\"),'->', 'abc1e')\nprint('[Case 20]:', move_num(\"abc12abc\"),'->', 'abc12abc')\nprint('[Case 21]:', move_num(\"abcabc\"),'->', 'abcabc')\nprint('[Case 22]:', move_num(\"abcab\"),'->', 'abcab')\nprint('[Case 23]:', move_num(\"abcabc1\"),'->', 'abcabc1')\nprint('[Case 24]:', move_num(\"abcabc1a\"),'->', 'abcabc1a')\nprint('[Case 25]:', move_num(\"abcabc1a1\"),'->', 'abcabc1a1')\nprint('[Case 26]:', move_num(\"abcabc1a1b\"),'->', 'abcabc1a1b')\nprint('[Case 27]:', move_num(\"abcabc1a1b1\"),'->', 'abcabc1a1b1')\nprint('[Case 28]:', move_num(\"abcabc1a1b1c\"),'->', 'abcabc1a1b1c')\nprint('[Case 29]:', move_num(\"abcabc1a1b1c1\"),'->', 'abcabc1a1b1c1')\nprint('[Case 30]:', move_num(\"abcabc1a1b1c1d\"),'->', 'abcabc1a1b1c1d')\nprint('[Case 31]:', move_num(\"abcabc1a1b1c1d1\"),'->', 'abcabc1a1b1c1d1')\nprint('[Case 32]:', move_num(\"abcabc1a1b1c1d1e\"),'->', 'abcabc1a1b1c1d1e')\nprint('[Case 33]:', move_num(\"abcabc1a1b1c1d1e1\"),'->', 'abcabc1a1b1c1d1e1')\nprint('[Case 34]:', move_num(\"abcabc1a1b1c1d1e1f\"),'->', 'abcabc1a1b1c1d1e1f')\nprint('[Case 35]:', move_num(\"abcabc1a1b1c1d1e1f1\"),'->', 'abcabc1a1b1c1d1e1f1')\nprint('[Case 36]:', move_num(\"abcabc1a1b1c1d1e1f1g\"),'->', 'abcabc1a1b1c1d1e1f1g')\nprint('[Case 37]:', move_num(\"abcabc1a1b1c1d1e1f1g1\"),'->', 'abcabc1a1b1c1d1e1f1g1')\nprint('[Case 38]:', move_num(\"abcabc1a1b1c1d1e1f1g1h\"),'->', 'abcabc1a1b1c1d1e1f1g1h')\nprint('[Case 39]:', move_num(\"abcabc1a1b1c1d1e1f1g1h1\"),'->', 'abcabc1a1b1c1d1e1f1g1h1')\nprint('[Case 40]:', move_num(\"abcabc1a1b1c1d1e1f1g1h1i\"),'->', 'abcabc1a1b1c1d1e1f1g1h1i')\nprint('[Case 41]:', move_num(\"abcabc1a1b1c1d1e1f1g1h1i1\"),'->', 'abcabc1a1b1c1d1e1f1g1h1i1')\nprint('[Case 42]:', move_num(\"abcabc1a1b1c1d1e1f1g1h1i1j\"),'->', 'abcabc1a1b1c1d1e1f1g1h1i1j')\nprint('[Case 43]:', move_num(\"abcabc1a1b1c1d1e1f1g1h1i1j1\"),'->', 'abcabc1a1b1c1d1e1f1g1h1i1j1')\nprint('[Case 44]:', move_num(\"abcabc1a1b1c1d1e1f1g1h1i1j1k\"),'->', 'abcabc1a1b1c1d1e1f1g1h1i1j1k')\nprint('[Case 45]:', move_num(\"abcabc1a1b1c1d1e1f1g1h1i1j1k1\"),'->', 'abcabc1a1b1c1d1e1f1g1h1i1j1k1')\nprint('[Case 46]:', move_num(\"abcabc1a1b1c1d1e1f1g1h1i1j1k1l\"),'->', 'abcabc1a1b1c1d1e1f1g1h1i1j1k1l')\nprint('[Case 47]:', move_num(\"abcabc1a1b1c1d1e1f1g1h1i1j1k1l1\"),'->', 'abcabc1a1b1c1d1e1f1g1h1i1j1k1l1')\nprint('[Case 48]:', move_num(\"abcabc1a1b1c1d1e1f1g1h1i1j1k1l1m\"),'->', 'abcabc1a1b1c1d1e1f1g1h1i1j1k1l1m')\nprint('[Case 49]:', move_num(\"abcabc1a1b1c1d1e1f1g1h1i1j1k1l1m1\"),'->', 'abcabc1a1b1c1d1e1f1g1h1i1j1k1l1m1')\nprint('[Case 50]:', move_num(\"abcabc1a1b1c1d1e1f1g1h1i1j1k1l1m1n\"),'->', 'abcabc1a1b1c1d1e1f1g1h1i1j1k1l1m1n')\nprint('[Case 51]:', move_num(\"abcabc1a1b1c1d1e1f1g1h1i1j1k1l1m1n1\"),'->', "
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     move_num('a7') == 'a7a7'\nassert     move_num('10') == '10000000'\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(move_num('Aa12a'))\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     move_num(\"Litewala\") == \"Litewal\"\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef move_num2(test_str):\n    '''\n    Write a function to replace all spaces in a given string with '%20'.\n    '''\n    pass\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     move_num(\"Hello World\") == \"World Hello\"\nassert     move_num(\"1234 World\") == \"World 1234\"\nassert     move_num(\"12345 World\") == \"World 12345\"\nassert     move_num(\"1234.0\") == \"1234.0\"\nassert     move_num(\"\") == \"\"\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\na = [10, 1, 4, 3, 8, 14, 6]\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     largest_subset([10,2,3,4,5,9]) == 2\nassert     largest_subset([1,2,3,4,5]) == 1\nassert     largest_subset([2,3,4,5,9]) == 3\nassert     largest_subset([2,4,5,9]) == 3\nassert     largest_subset([4,5,9]) == 3\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     largest_subset([1,2,3,4,5,6]) == 6\nassert     largest_subset([1,3,5,10]) == 10\nassert     largest_subset([1,2,3,4,5,6,7]) == 7\nassert     largest_subset([1,2,3,4,5,6,7,8]) == 8\nassert     largest_subset([1,2,3,4,5,6,7,8,9]) == 9\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     largest_subset([1,2,3,4,5]) ==    3\nassert     largest_subset([1,2,3,4,5,6]) ==    2\nassert     largest_subset([1,2,3,4,5,6,7]) ==    2\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     largest_subset([3, 6, 15, 24, 30]) == 16\nassert     largest_subset([15, 24, 30]) == 30\nassert     largest_subset([10, 15, 24, 20, 30]) == 30\nassert     largest_subset([10, 15, 24]) == 24\nassert     largest_subset([10, 30, 24]) == 30\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef palindrome_permutation(s):\n    '''\n    Write a function that checks whether or not a string is a permutation of a palindrome.\n    '''\n    pass\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     largest_subset([10, 20, 30, 20, 5, 15, 30]) == 5\nassert largest_subset([10, 20, 30, 40, 20, 5, 15, 30]) == 5\nassert largest_subset([10, 20, 30, 40, 20, 5, 15, 30, 3]) == 3\nassert largest_subset([10, 20, 30, 40, 20, 5, 15, 30, 3, 2]) == 2\nassert largest_subset([10, 20, 30, 40, 20, 5, 15, 30, 3, 2, 1]) == 2\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     largest_subset([2,6,8,10,2,6,8]) == 5, 'Should be 5'\nassert     largest_subset([2,6,8,10,2,6,8,1]) == 6, 'Should be 6'\nassert     largest_subset([2,6,8,10,2,6,8,1,9]) == 5, 'Should be 5'\nassert     largest_subset([2,6,8,10,2,6,8,1,9,1]) == 6, 'Should be 6'\nassert     largest_subset([2,6,8,10,2,6,8,1,9,1,9]) == 7, 'Should be 7'\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     largest_subset([1,4,8]) == 4\nassert     largest_subset([2,4,8,16]) == 8\nassert     largest_subset([1,4,8,16]) == 16\nassert     largest_subset([1,4,8]) == 1\nassert     largest_subset([1,4,8]) == 1\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef largest_subset_1(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    pass\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_median([1, 5], [2, 6], 3) == 3.5, 'ERROR'\nassert     get_median([1, 5], [2, 6, 7], 3) == 3.5, 'ERROR'\nassert     get_median([1, 5, 5], [2, 6, 7], 3) == 3.5, 'ERROR'\nassert     get_median([1, 5, 5], [2, 6, 7], 3) == 3.5, 'ERROR'\nassert     get_median([1, 5, 5, 5], [2, 6, 7, 8], 3) == 3.5, 'ERROR'\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef get_median_naive(arr1, arr2):\n    '''\n    Naive approach: check if the size of both lists are same. If both are same, then we can solve the problem in a single traversal of both lists, which will get the median.\n    Time complexity is O(n) where n is the size of the input lists.\n    '''\n    if len(arr1)!= len(arr2):\n        print(\"Lists are of different sizes.\")\n        return\n    return get_median_naive_helper(arr1, arr2)\n\ndef get_median_naive_helper(arr1, arr2):\n    '''\n    Helper function for get_median_naive\n    '''\n    if len(arr1) % 2!= 0:\n        return get_median(arr1, arr2, len(arr1))\n    else:\n        return (get_median(arr1, arr2, len(arr1)) + get_median(arr1, arr2, len(arr1)))/2\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert get_median([1,2,3,4],[3,4,5,6]) == 4.5\nassert get_median([5,6,7,8],[3,4,5,6]) == 4.5\nassert get_median([1,2,3,4],[5,6,7,8]) == 4.5\n\nimport heapq\ndef get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    pass\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # in case if arr2 is empty, then it is median\n    if len(arr2) == 0:\n        return arr1[n // 2]\n    \n    # in case if arr1 is empty, then it is median\n    if len(arr1) == 0:\n        return arr2[n // 2]\n\n    # recursion\n    if n == 1:\n        return min(arr1[0], arr2[0])\n\n    # check if n is even\n    if n % 2 == 0:\n        # use the same approach as get_median_of_two_sorted_arrays\n        return (get_median(arr1, arr2[:n // 2], n // 2) + get_median(arr1, arr2[n // 2:], n // 2)) / 2.0\n    else:\n        # use the same approach as get_median_of_two_sorted_arrays\n        return (get_median(arr1, arr2[:n // 2], n // 2) + get_median(arr1, arr2[n // 2:], n // 2 + 1)) / 2.0\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     nth_nums([1,2,3,4], 1) == [1,2,3,4]\nassert     nth_nums([1,2,3,4], 3) == [1,4,9,16]\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef find_even_fibonacci_numbers(n):\n    '''\n    Write a function to compute the n-th Fibonacci number in O(1)\n    '''\n    pass\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     nth_nums(n=2, nums=[1,2,3]) == [1,4,9]\nassert     nth_nums(n=3, nums=[1,2,3]) == [1,8,27]\nassert     nth_nums(n=4, nums=[1,2,3]) == [1,64,121]\nassert     nth_nums(n=5, nums=[1,2,3]) == [1,288,1048]\nassert     nth_nums(n=6, nums=[1,2,3]) == [1,1048576,40320]\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(nth_nums([2, 3, 4], 2)) == [4, 9, 16]\nassert nth_nums([2, 3, 4], 1) == [2, 3, 4]\nassert nth_nums([2, 3, 4], 0) == [2, 3, 4]\nassert nth_nums([], 1) == []\nassert nth_nums([], 0) == []\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n'''\nGiven a positive integer n, find the least number of perfect square numbers (for example, 1, 4, 9, 16,...) which sum to n.\n\nExample 1:\nInput: n = 12\nOutput: 3 \nExplanation: 12 = 4 + 4 + 4.\n\nExample 2:\nInput: n = 13\nOutput: 2\nExplanation: 13 = 4 + 9.\n'''"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef check_nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        assert nth_nums(nums,i) == nums[i]**n\n\ncheck_nth_nums([2,3,4],2)\n\ndef nth_nums2(nums,n):\n    return [x**n for x in nums]\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert False == (nth_nums([1, 2, 3, 4],3) == [1, 8, 27, 64]), 'Wrong answer.'\nassert True == (nth_nums([1, 2, 3, 4],4) == [1, 4, 16, 64]), 'Wrong answer.'\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n'''\n    n=0\n        n=0\n    n=1\n        n=1\n    n=2\n        n=1\n    n=3\n        n=2\n    n=4\n        n=1\n    n=5\n        n=2\n    n=6\n        n=2\n    n=7\n        n=4\n    n=8\n        n=4\n    n=9\n        n=4\n'''\ndef nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    pass\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_upper(\"hello\")     == \"HELLO\"\nassert     is_upper(\"hello\")     == \"HELLO\"\nassert     is_upper(\"HELLO\")     == \"HELLO\"\nassert     is_upper(\"HELLO\")     == \"HELLO\"\nassert     is_upper(\"HELLO\")     == \"HELLO\"\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert not is_upper('shubh')\nassert is_upper('SHUBH')\nassert not is_upper('SHUBH')\nassert not is_upper('SHUBH')\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert is_upper('A') == False\nassert is_upper('b') == False\nassert is_upper('ABC') == True\nassert is_upper('AABC') == True\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_upper('hi') == False, 'Should return False for a single upper case'\nassert     is_upper('H') == False, 'Should return False for a single lower case'\nassert     is_upper('Hi') == True, 'Should return True for a single upper case'\nassert     is_upper('Hai') == True, 'Should return True for a single upper case'\nassert     is_upper('HI') == True, 'Should return True for a single upper case'\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_upper('Python') == True\nassert     is_upper('python') == False\nassert     is_upper('python123') == True\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_upper('joey')==True\nassert     is_upper('JOEy')==True\nassert     is_upper('joeyjoey')==True\nassert     is_upper('JOEyjoey')==True\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_upper('hello') == False, \"1st Test Case\"\nassert     is_upper('HELLO') == True, \"2nd Test Case\"\nassert     is_upper('HELLO') == False, \"3rd Test Case\"\nassert     is_upper('HELLO WORLD') == True, \"4th Test Case\"\nassert     is_upper('HELLO WORLD!') == True, \"5th Test Case\"\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_upper('world')\nassert not is_upper('WORLD')\nassert not is_upper('world!')\n\n'''\n    Write a python function to find the length of a given string.\n    HINT: Use len().\n'''\ndef find_length(string):\n    '''\n    Write a python function to find the length of a given string.\n    '''\n    pass\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_upper(\"String\") == False, \"Expected: True, actual: True\"\nassert     is_upper(\"string\") == True, \"Expected: True, actual: False\"\nassert     is_upper(\"String123\") == True, \"Expected: True, actual: False\"\nassert     is_upper(\"String!@#\") == True, \"Expected: True, actual: False\"\nassert     is_upper(\"12345\") == False, \"Expected: False, actual: True\"\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert swap_List(newList) == None\n\n\ndef reverse_List(newList): \n    '''\n    Write a python function to reverse the order of the elements in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef convert_List_Int_To_Str(newList): \n    '''\n    Write a python function to convert the list of integers to the string.\n    '''\n    pass\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nswap_List([1, 2, 3, 4]) == [3, 4, 1, 2]\nswap_List([5, 6, 7, 8]) == [7, 8, 5, 6]\nswap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]\nswap_List([]) == []\nswap_List([1, 2, 3, 4, 5, 6]) == [6, 5, 4, 3, 2, 1]\nswap_List([1, 2, 3, 4, 5, 6, 7]) == [7, 6, 5, 4, 3, 2, 1]\nswap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\nswap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\nswap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\nswap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == [13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\nswap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == [14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\nswap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\nswap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == [16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\nswap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == [17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\nswap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) == [18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\nswap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == [19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\nswap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\nswap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) == [21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\nswap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]) == [22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\nswap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]) == [23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\nswap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]) == [24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\nswap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\nswap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]) == [26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\nswap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]) == [27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\nswap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]) == [28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\nswap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]) == [29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\nswap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     swap_List(newList) ==     [1,2,3,4,5,6,7,8]\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nswap_List([1, 2, 3]) == [3, 2, 1] \n\nswap_List([1, 2, 3, 4]) == [3, 2, 4, 1] \n\nswap_List([1, 2, 3, 4, 5]) == [3, 2, 4, 5, 1] \n\nswap_List([1, 2, 3, 4, 5, 6]) == [3, 2, 4, 5, 6, 1] \n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     swap_List(['a', 'b', 'c', 'd']) == ['d', 'c', 'b', 'a']\nassert     swap_List([1,2,3,4]) == [4,3,2,1]"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     swap_List([10, 20, 30, 40]) == [10, 20, 40, 30], 'FAILED'\nassert     swap_List([]) == [], 'FAILED'\nassert     swap_List(['a', 'b', 'c', 'd']) == ['d', 'c', 'b', 'a'], 'FAILED'\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     swap_List([1,2,3,4]) == [4,1,2,3], \"1st\"\nassert     swap_List([3,2,1,4]) == [1,2,3,4], \"2nd\"\nassert     swap_List([1,2,3,4,5]) == [4,5,1,2,3], \"3rd\"\nassert     swap_List([5,6,7,8,9]) == [9,6,7,8,5], \"4th\"\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     swap_List([1, 2, 3]) == [3, 1, 2], 'Your program is not working properly'\nassert     swap_List([1, 2]) == [2, 1], 'Your program is not working properly'\nassert     swap_List([1, 2, 3]) == [3, 1, 2], 'Your program is not working properly'\nassert     swap_List([1]) == [1], 'Your program is not working properly'\nassert     swap_List([1,2,3,4,5]) == [3,5,1,2,4], 'Your program is not working properly'\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     swap_List([1,2,3]) == [2,3,1]\nassert swap_List([1,2,3,4]) == [3,4,1,2]\nassert swap_List([1,2,3,4,5]) == [2,3,4,5,1]\nassert swap_List([]) == []\nassert swap_List([1,2,3,4,5]) == [4,5,1,2,3]\nprint(\"solution-1 passed\")\n"
    }
]