[
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     similar_elements([1, 2], [2, 3]) == True\nassert     similar_elements([1, 2, 3], [2, 3]) == False\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     similar_elements(tuple(range(5)), tuple(range(5))) == (), similar_elements(tuple(range(5)), tuple(range(1,6))) == (2, 3), similar_elements(tuple(range(5)), tuple(range(6,11))) == (6, 7, 8, 9), similar_elements(tuple(range(5)), tuple(range(10,15))) == (10, 11, 12, 13), similar_elements(tuple(range(5)), tuple(range(16,20))) == ()\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     similar_elements([1, 2, 3, 4], (4,3,2,1)) == []\nassert     similar_elements([1, 2, 3, 4], (4,3,2,1,5)) == []\nassert     similar_elements([1, 2, 3, 4], (4,3,2,1,5,7)) == []\nassert     similar_elements([1, 2, 3, 4], (4,3,2,1,7,5)) == []\nassert     similar_elements([1, 2, 3, 4], (4,3,2,1,7,5,8)) == []\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(\">>> Similar elements test case #1 - pass: \", similar_elements((1, 2, 3, 5, 6), (3, 4, 6, 7, 8)))\nassert similar_elements((1, 2, 3, 5, 6), (3, 4, 6, 7, 8)) == (3, 4)\nassert similar_elements((1, 2, 3, 5, 6), (7, 8, 9)) == ()\nprint(\">>> Similar elements test case #2 - pass: \", similar_elements((1, 2, 3, 5, 6), (3, 4, 6, 7, 8)))\nassert similar_elements((1, 2, 3, 5, 6), (3, 4, 6, 7, 8)) == (3, 4)\nassert similar_elements((1, 2, 3, 5, 6), (7, 8, 9)) == ()\nprint(\">>> Similar elements test case #3 - pass: \", similar_elements((1, 2, 3, 5, 6), (7, 8, 9, 2, 3)))\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     similar_elements(('a', 'b', 'c'), ('a', 'b', 'c')) == ('a', 'b')\nassert     similar_elements(('a', 'b', 'c'), ('a', 'c', 'b')) == ('c', 'b')\nassert     similar_elements(('a', 'b', 'c'), ('b', 'a', 'c')) == ('b', 'a')\nassert     similar_elements(('a', 'b', 'c'), ('b', 'a', 'c')) == ('a', 'b')\nassert     similar_elements(('a', 'b', 'c'), ('a', 'a', 'c')) == ('a', 'a')\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     similar_elements([1,2,3,4,5], [4,5,6,7,8]) ==     [4,5]\nassert     similar_elements([1,2,3,4,5], [4,5,6,7,8,9]) ==     [5]\nassert     similar_elements([1,2,3,4,5,6,7], [4,5,6,7,8,9]) ==     []\nassert     similar_elements([1,2,3,4,5], [4,5,6,7,8,9]) ==     []\nassert     similar_elements([1,2,3,4,5], [4,5,6,7,8,9,0]) ==     [5]\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n'''\nQuestion:\nWhat is the difference between a tuple and a list?\n    A tuple is immutable.\n    A list is mutable.\n\nAnswer:\n    A tuple is immutable, so we can not manipulate them.\n    A list is mutable, so we can manipulate it.\n\n'''\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     similar_elements([1,2,3], [1,2,3]) == set([1,2,3])\nassert     similar_elements([1,2], [1,2,3]) == set([1,2])\nassert     similar_elements([1,2], [1]) == set([1])\nassert     similar_elements([1,2,3,4], [1,2,3]) == set([1,2])\nassert     similar_elements([1,2,3,4], [1,2,3,4]) == set([1,2,3])\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_not_prime(5) == True\nassert     is_not_prime(9) == True\nassert     is_not_prime(7) == False\nassert     is_not_prime(11) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_not_prime(5) == False, \"The number 5 should be not prime.\"\nassert is_not_prime(3) == True, \"The number 3 should be not prime.\"\nassert is_not_prime(1) == False, \"The number 1 should be not prime.\"\n\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef is_prime(n):\n    '''\n    Write a python function to check if the number is prime or not.\n    '''\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_not_prime(0) == False, \"check_if_not_prime\"\nassert     is_not_prime(1) == False, \"check_if_not_prime\"\nassert     is_not_prime(2) == False, \"check_if_not_prime\"\nassert     is_not_prime(3) == False, \"check_if_not_prime\"\nassert     is_not_prime(4) == False, \"check_if_not_prime\"\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_not_prime(3) == True, 'is_not_prime should return True for prime.'\nassert     is_not_prime(4) == False, 'is_not_prime should return False for non-prime.'\nassert     is_not_prime(0) == True, 'is_not_prime should return True for prime.'\nassert     is_not_prime(1) == False, 'is_not_prime should return False for non-prime.'\nassert     is_not_prime(-1) == True, 'is_not_prime should return True for prime.'\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_not_prime(3) == True\nassert     is_not_prime(4) == False\nassert     is_not_prime(100) == True\nassert     is_not_prime(0) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    is_not_prime(2) == False\n    is_not_prime(5) == False\n    is_not_prime(5.2) == True\n    is_not_prime(1) == True\n    is_not_prime(0) == False\n    is_not_prime(-1) == False\n    is_not_prime(-5) == True\n    is_not_prime(5.2) == True\n    is_not_prime(5) == False\n    is_not_prime(-5) == True\n    is_not_prime(0) == False\n    is_not_prime(5) == False\n    is_not_prime(-5) == True\n    is_not_prime(1) == True\n    is_not_prime(-1) == True\n    is_not_prime(2.1) == False\n    is_not_prime(1.1) == True\n    is_not_prime(-2.1) == True\n    is_not_prime(-1.1) == True\n    is_not_prime(5.2) == True\n    is_not_prime(-5.2) == False\n    is_not_prime(5) == True\n    is_not_prime(-5) == False\n    is_not_prime(-1) == True\n    is_not_prime(1) == True\n    is_not_prime(-1.1) == True\n    is_not_prime(2.1) == True\n    is_not_prime(0.1) == True\n    is_not_prime(1.1) == True\n    is_not_prime(5.2) == True\n    is_not_prime(-5.2) == True\n    is_not_prime(-5) == False\n    is_not_prime(-1) == False\n    is_not_prime(1.1) == True\n    is_not_prime(-1.1) == True\n    is_not_prime(2.1) == True\n    is_not_prime(0.1) == True\n    is_not_prime(0.2) == True\n    is_not_prime(0.3) == True\n    is_not_prime(1.1) == False\n    is_not_prime(0.1) == True\n    is_not_prime(0) == True\n    is_not_prime(1) == True\n    is_not_prime(-1) == False\n    is_not_prime(1.1) == False\n    is_not_prime(-1.1) == False\n    is_not_prime(2.1) == True\n    is_not_prime(0.1) == True\n    is_not_prime(1.1) == True\n    is_not_prime(-1.1) == True\n    is_not_prime(0.2) == True\n    is_not_prime(0.3) == True\n    is_not_prime(1.1) == False\n    is_not_prime(0.2) == True\n    is_not_prime(0) == False\n    is_not_prime(1) == False\n    is_not_prime(-1) == False\n    is_not_prime(1.1) == False\n    is_not_prime(-1.1) == False\n    is_not_prime(2.1) == False\n    is_not_prime(0.1) == False\n    is_not_prime(0) == False\n    is_not_prime(1) == False\n    is_not_prime(-1) == False\n    is_not_prime(1.1) == False\n    is_not_prime(-1.1) == False\n    is_not_prime(2.1) == False\n    is_not_prime(0.1) == False\n    is_not_prime(1.1) == False\n    is_not_prime(-1.1) == False\n    is_not_prime(0.2) == False\n    is_not_prime(0.3) == False\n    is_not_prime(1.1) == False\n    is_not_prime(-1.1) == False\n    is_not_prime(0.2) == False\n    is_not_prime(0.3) == False\n    is_not_prime(1) == False\n    is_not_prime(-1) == False\n    is_not_prime(1.1) == False\n    is_not_prime(-1.1) == False\n    is_not_prime(2.1) == False\n    is_not_prime(0.1) == False\n    is_not_prime(1.1) == False\n    is_not_prime(-1.1) == False\n    is_not_prime(0.2) == False\n    is_not_prime(0.3) == False\n    is_not_prime(1.1) == False\n    is_not_prime(-1.1) == False\n    is_not_prime(0.2) == False\n    is_not_prime(0.3) == False\n    is_not_prime(1) == False\n    is_not_prime(-1) == False\n    is_not_prime(1.1) == False\n    is_not_prime(-1.1) == False\n    is_not_prime(2.1) == False\n    is_not_prime(0.1) == False\n    is_not_prime(1.1) == False\n    is_not_prime(-1.1) == False\n    is_not_prime(0.2) == False\n    is_not_prime(0.3) == False\n    is_not_prime(1.1) == False\n    is_not_prime(-1.1) == False\n    is_not_prime(0.2) == False\n    is_not_prime(0.3) == False\n    is_not_prime(1) == False\n    is_not_prime(-1) == False\n    is_not_prime(1.1) == False\n    is_not_prime(-1.1) == False\n    is_not_prime(2.1) == False\n    is_not_prime(0.1) == False\n    is_not_prime(1.1) == False\n    is_not_prime(-1.1) == False\n    is_not_prime(0.2) == False\n    is_not_prime(0.3) == False\n    is_not_prime(1.1) == False\n    is_not_prime(-1.1) == False\n    is_not_prime(0.2) == False\n    is_not_prime(0.3) == False\n    is_not_prime(1) == False\n    is_not_prime(-1) == False\n    is_not_prime(1.1) == False\n    is_not_prime(-1.1) == False\n    is_not_prime(2.1) == False\n    is_not_prime(0.1) == False\n    is_not_prime(1.1) == False\n    is_not_prime(-1.1) == False\n    is_not_prime(0.2) == False\n    is_not_prime(0.3) == False\n    is_not_prime(1.1) == False\n    is_not_prime(-1.1) == False\n    is_not_prime(0.2) == False\n    is_not_prime(0.3) == False\n    is_not_prime(1) == False\n    is_not_prime(-1) == False\n    is_not_prime(1.1) == False\n    is_not_prime(-1.1) == False\n    is_not_prime(2.1) == False\n    is_not_prime(0.1) == False\n    is_not_prime(1.1) == False\n    is_not_prime(-1.1) == False\n    is_not_prime(0.2) == False\n    is_not_prime(0.3) == False\n    is_not_prime(1.1) == False\n    is_not_prime(-1.1) == False\n    is_not_prime(0.2) == False\n    is_not_prime(0.3) == False\n    is_not_prime(1) == False\n    is_not_prime(-1) == False\n    is_no"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    pass\n\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return_list = []\n    while len(nums) > n:\n        return_list.append(hq.heappop(nums))\n    while len(nums) > 0:\n        return_list.append(hq.heappop(nums))\n    return return_list\n\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    import heapq as hq\n    hq.heapify(nums)\n    return_list = []\n    while len(nums) > n:\n        return_list.append(hq.heappop(nums))\n    return return_list\n\n\ndef heap_queue_largest(nums, n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = nums[:n]\n    heapq.heapify(heap)\n    for i in range(n, len(nums)):\n        heapq.heappushpop(heap, nums[i])\n    return heap\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef heap_queue_largest_constant(nums,n):\n    '''\n    Time: O(nlogn)\n    Space: O(1)\n    '''\n    def sift_down(heap,i):\n        l = 2*i + 1\n        r = 2*i + 2\n        \n        smallest = i\n        if l < len(heap) and heap[l] < heap[i]:\n            smallest = l\n        if r < len(heap) and heap[r] < heap[smallest]:\n            smallest = r\n        if smallest!= i:\n            heap[i],heap[smallest] = heap[smallest],heap[i]\n            sift_down(heap,smallest)\n        \n    if len(nums) < n:\n        return\n    h = []\n    for num in nums:\n        hq.heappush(h,num)\n        if len(h) > n:\n            hq.heappop(h)\n    \n    for i in range(len(h) - 1, -1, -1):\n        sift_down(h,i)\n    \n    return h\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     heap_queue_largest([3,7,11,5,9,2],3) == [11, 9, 7, 5, 3]\nassert     heap_queue_largest([3,7,11,5,9,2],1) == [11]\nassert     heap_queue_largest([],2) == []\nassert     heap_queue_largest([1,7,9,5,3],1) == [9, 5, 3]\n\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef heap_queue_smallest(nums, n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    # Your code here\n    pass\n\nassert\n\ndef heap_queue_smallest_two_pointers(nums, n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     heap_queue_largest([4,2,3,1,9,12], 3) == [12,9,3,1]\nassert     heap_queue_largest([], 2) == []\nassert     heap_queue_largest([5], 1) == [5]\nassert     heap_queue_largest([2,3,5,1,4], 1) == [5,4,3,2,1]\n\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     heap_queue_largest([-1,2,1,3,0],3) == [-1,0,1]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     heap_queue_largest([1,2,3,4],3) == [4,3,2,1]\nassert     heap_queue_largest([5,1,2,3,7,6,4],3) == [7,6,5,4]\nassert     heap_queue_largest([4,5,1,2,3],3) == [4,5,3]\nassert     heap_queue_largest([4,5,1,2,3],3) == [4,5,3]\nassert     heap_queue_largest([4,5,1,2,3],3) == [4,5,3]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == '__main__': \n    \n    print(\"Please enter the integer number\")\n    num = int(input())\n    if is_Power_Of_Two(num):\n        print(\"{} is a power of 2\".format(num))\n    else:\n        print(\"{} is not a power of 2\".format(num))\n        \n    pass \n\n\n'''\nOutput:\nPlease enter the integer number\n14\n\nThe number is a power of 2\n'''"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     (is_Power_Of_Two(4) == True), \"is_Power_Of_Two should return True for a number which differs only at one bit position\"\nassert     (is_Power_Of_Two(64) == True), \"is_Power_Of_Two should return True for a number which differs only at one bit position\"\nassert     (is_Power_Of_Two(10) == False), \"is_Power_Of_Two should return False for a number which differs only at one bit position\"\nassert     (is_Power_Of_Two(2) == True), \"is_Power_Of_Two should return True for a number which differs only at one bit position\"\nassert     (is_Power_Of_Two(10) == True), \"is_Power_Of_Two should return True for a number which differs only at one bit position\"\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert is_Power_Of_Two(8) == True, '8 is a power of 2'\nassert is_Power_Of_Two(12) == False, '12 is not a power of 2'\nassert is_Power_Of_Two(19) == True, '19 is a power of 2'\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_Power_Of_Two(4) == True, \"Testcase 1 failed\"\nassert     is_Power_Of_Two(8) == False, \"Testcase 1 failed\"\nassert     is_Power_Of_Two(1) == False, \"Testcase 1 failed\"\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_Power_Of_Two(1) == False\nassert     is_Power_Of_Two(2) == True\nassert     is_Power_Of_Two(3) == False\nassert     is_Power_Of_Two(4) == True\nassert     is_Power_Of_Two(5) == False\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_Power_Of_Two(4) == False, \"TEST-1-FAILED: Is_Power_Of_Two(4) is False\"\nassert     is_Power_Of_Two(5) == True, \"TEST-1-FAILED: Is_Power_Of_Two(5) is True\"\nassert     is_Power_Of_Two(6) == True, \"TEST-1-FAILED: Is_Power_Of_Two(6) is True\"\n\ndef Palindrome_Number (x): \n    '''\n    Write a python function to check whether the given integer number is palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_Power_Of_Two(4) == False\nassert     is_Power_Of_Two(8) == False\nassert     is_Power_Of_Two(256) == True\nassert     is_Power_Of_Two(65536) == False\nassert     is_Power_Of_Two(1) == False\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_char_long(text = 'hello hello world') == True\nassert     find_char_long(text = 'hellohello') == False\nassert     find_char_long(text = 'hellohello world') == True\nassert     find_char_long(text = 'hellohellohello') == False\nassert     find_char_long(text = 'hellohellohellohellohello') == True\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_char_long(\"Hi mr. John, this is a test case\") == [\"John\"]\nassert     find_char_long(\"Hi mr. John, this is a test case..  \") == [\"John\"]\nassert     find_char_long(\"Hi mr. John, this is a test case.\") == []\nassert     find_char_long(\"Hi mr. John, this is a test case,\") == []\nassert     find_char_long(\"Hi mr. John, this is a test case.  Hello John\") == [\"John\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_char_long('The quick brown fox jumps over the lazy dog') == ['brown', 'dog']\nassert     find_char_long('This is a test of the emergency broadcast network') == ['emerg', 'network']\nassert     find_char_long('This is another test of the emergency broadcast network') == ['emerg', 'network']\nassert     find_char_long('and another test of the emergency broadcast network') == ['emerg', 'network']\n\ndef find_char_short(text):\n    '''\n    Write a function to find all words which are at least 2 characters long in a string.\n    '''\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ntext =' # ### ###  '\nprint(find_char_long(text))\n\ntext =' # ###  ###  '\nprint(find_char_long(text))\n\ntext =' ###  # ####  '\nprint(find_char_long(text))\n\ntext =' ####  # ####  '\nprint(find_char_long(text))\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_char_long(\"The quick brown fox jumps over the lazy dog\") == [\n        \"jumps\",\n        \"fox\",\n        \"dog\"\n    ], \"Should have two words\"\nassert     find_char_long(\"\") == [], \"Empty string\"\nassert     find_char_long(\"   \") == [], \"Whitespace string\"\nassert     find_char_long(\"  \\n\\n\\n\\n\\n\\n\\n\") == [\n        \"\\n\",\n        \"\\n\",\n        \"\\n\"\n    ], \"Should have empty lines\"\nassert     find_char_long(\"The quick brown fox jumps over the lazy dog\") == [\n        \"jumps\",\n        \"fox\",\n        \"dog\"\n    ], \"Should have two words\"\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = []\n    for word in text.split():\n        if len(word) >= 4:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_char_long(\"code\") == [\"code\"]\nassert     find_char_long(\"code,com\") == [\"code\",\"com\"]\nassert     find_char_long(\"This is a cat.\") == [\"This\",\"is\",\"a\",\"cat.\"]\nassert     find_char_long(\"This is a cat.\") == [\"This\",\"is\",\"a\",\"cat.\"]\nassert     find_char_long(\"This is a cat.\") == [\"This\",\"is\",\"a\",\"cat.\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert find_char_long(\"Python is an interpreted, high-level and general-purpose programming language.\") == [\"Python\"]\nassert find_char_long(\"Python is an interpreted, high-level and general-purpose programming language.\") == [\"Python\"]\nassert find_char_long(\"Python is an interpreted, high-level and general-purpose programming language.\") == [\"Python\"]\nassert find_char_long(\"Python is an interpreted, high-level and general-purpose programming language.\") == [\"Python\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_char_long('abacate') == ['abacate']\nassert     find_char_long('sdsddddddddddddd') == ['sdsddddddddddddd']\nassert     find_char_long('sdsds') == []\n\ndef is_numeric(char):\n    '''\n    Write a function to determine whether a character is numeric or not.\n    '''\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_char_long(\"the quick brown fox jumps over the lazy dog\")==[\"fox\", \"dog\"]\nassert    find_char_long(\"the dog who ate the apple is very glad\")==[\"apple\"]\nassert    find_char_long(\"the apple who is eating apple\")==[]\nassert    find_char_long(\"the quick brown fox jumps over the lazy dog the quick brown fox jumps over the lazy dog\")==[\"fox\",\"dog\"]\nassert    find_char_long(\"the quick brown fox jumps over the lazy dog\")==[\"fox\"]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     square_nums([1,2,3]) == [1,4,9], \"Wrong!\"\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    square_nums([1, 2, 3]) == [1, 4, 9]\n    square_nums([4, 5, 6]) == [16, 25, 36]\n    square_nums([-1, 0, 1]) == [0, 1, 4]\n    square_nums([0]) == [0]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nsquare_nums([1,2,3,4,5]) == [1,4,9,16,25]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nsquare_nums([1,2,3]) == [1,4,9]\nassert square_nums([]) == []\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n\ndef sum_nums(nums):\n    '''\n    Write a function that sums all the elements in a list.\n    '''\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n\ndef evens_first(nums):\n    '''\n    Write a function to return an even-indexed list of numbers, \n    the first half of the original list.\n    '''\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nsquare_nums([1,2,3,4]) == [1,4,9,16]\n\ndef is_square(n):\n    '''\n    Write a function that will determine whether a number is a perfect square.\n    '''\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Rotations(\"abc\") == 0\nassert     find_Rotations(\"abcd\") == 0\nassert     find_Rotations(\"a\") == 1\nassert     find_Rotations(\"abcd\") == 4\nassert     find_Rotations(\"abcde\") == 5\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Rotations('abbba') == 2\nassert     find_Rotations('abbbaa') == 3\nassert     find_Rotations('aab') == 0\nassert     find_Rotations('aba') == 1\nassert     find_Rotations('ab') == 0\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_Rotations('geek')     ==     4\nassert     find_Rotations('geeksforgeeks')     ==     5\nassert     find_Rotations('gesek')     ==     0\nassert     find_Rotations('')     ==     -1\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Rotations('abcd') == 2\nassert     find_Rotations('adbec') == 2\nassert     find_Rotations('adcab') == 3\nassert     find_Rotations('cadab') == 3\nassert     find_Rotations('acdba') == 3\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert find_Rotations('abcd') == 5\nassert find_Rotations('abc') == 0\nassert find_Rotations('hello') == 1\nassert find_Rotations('hello') == 1\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_Rotations('') == 0, \"Find Rotations\"\nassert     find_Rotations('a') == 0, \"Find Rotations\"\nassert     find_Rotations('a') == 0, \"Find Rotations\"\nassert     find_Rotations('ab') == 0, \"Find Rotations\"\nassert     find_Rotations('abc') == 0, \"Find Rotations\"\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Rotations('SOS') == 1\nassert     find_Rotations('SOSSS') == 1\nassert     find_Rotations('SOSSSS') == 2\nassert     find_Rotations('AB') == 0\nassert     find_Rotations('ABC') == 1\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Rotations(\"GEEKSFORGEEKS\") == 3\nassert     find_Rotations(\"GEEK\") == 0\nassert     find_Rotations(\"GEEKS\") == 1\nassert     find_Rotations(\"GEEKSQ\") == 1\nassert     find_Rotations(\"GEEKSE\") == 1\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nremove_Occ(\"abcabcd\", 'b') == \"cabcabc\"\nremove_Occ(\"abcabcd\", 'c') == \"bcabc\"\nremove_Occ(\"abcabcd\", 'd') == \"abcabc\"\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_Occ('prasanth','a') == 'prasanth'\nassert     remove_Occ('prasanth','h') == 'prasanth'\nassert     remove_Occ('prasanth','d') == 'prasanth'\nassert     remove_Occ('prasanth','z') == 'prasanth'\nassert     remove_Occ('prasanth','e') == 'prasanth'\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ns = 'Programs'\nch = 'r'\nassert remove_Occ(s,ch) == 'Pimgs'\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_Occ(\"sdfg\",'g')== \"df\"\nassert     remove_Occ(\"sdfgfdsfg\",'f')== \"df\"\nassert     remove_Occ(\"sdfghfgfd\",'g')== \"df\"\nassert     remove_Occ(\"sdfghfgfd\",'f')== \"df\"\nassert     remove_Occ(\"sdfghfgfd\",'h')== \"dfgfd\"\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nremove_Occ('abcd', 'b') == 'abcd'\nremove_Occ('abcd', 'x') == 'abcd'\nremove_Occ('abcde', 'x') == 'abcde'\nremove_Occ('abcd', 'z') == 'abcd'\nremove_Occ('abcde', 'z') == 'abcde'\nremove_Occ('abcde', 'b') == 'abcde'\nremove_Occ('abcde', 'c') == 'abcde'\nremove_Occ('abcde', 'z') == 'abcde'"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_Occ('Hello', 'e') == 'Hell'\nassert     remove_Occ('Hello', 'l') == 'Hell'\nassert     remove_Occ('Hello', 'H') == 'ello'\nassert     remove_Occ('Hello', 'e') == 'ello'\nassert     remove_Occ('Hello', 'o') == 'l'\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert remove_Occ(\"omg\",\"m\") == \"g\"\nassert remove_Occ(\"omg\",\"s\") == \"og\"\nassert remove_Occ(\"omg\",\"l\") == \"omg\"\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nremove_Occ('google.com','g') == 'o.com'\nprint('Test case passed!')\n\n\n\ndef reverse_string(s):\n    '''\n    Write a python function to reverse the string.\n    '''\n    pass"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_Occ(\"hi hi\",'i') == 'hi'\nassert     remove_Occ(\"hello\",'i') == 'hello'\nassert     remove_Occ(\"hihi\",'i') == 'hhihi'\nassert     remove_Occ(\"hi hi hi\",'i') == 'hihi'\n\n'''\nSort a list of strings using Sort, SortByLength, SortByX, SortByY, SortByZ. \n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_matrix([[0,2],[3,7],[1,6]]) == [[0,2],[1,6],[3,7]]\nassert sort_matrix([[3,1,2],[2,7,4],[5,2,1]]) == [[1,2],[2,2],[3,1,5]]\nassert sort_matrix([[1,2,4],[2,2,1],[1,1,3]]) == [[1,1,3],[1,2,2],[2,2,4]]\nassert sort_matrix([[0,4,2],[3,5,7],[1,6,8]]) == [[0,1,2],[3,4,5],[6,7,8]]\nassert sort_matrix([[0,1,3],[2,2,4],[3,5,6]]) == [[0,1,2],[2,2,3],[3,5,6]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_matrix([[1,2,3],[4,5,6]]) == [[1,2,3],[4,5,6]]\nassert     sort_matrix([[5,8,1],[2,7,4]]) == [[1,2,4],[5,7,8]]\nassert     sort_matrix([[1,1,1],[1,1,1]]) == [[1,1,1],[1,1,1]]\nassert     sort_matrix([[3,2,1],[4,6,5]]) == [[1,2,3],[4,5,6]]\nassert     sort_matrix([[4,4,2],[5,1,4]]) == [[2,4,4],[5,1,4]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_matrix([[2, 8, 0],\n                      [1, 2, 3],\n                      [0, 3, 4],\n                      [6, 5, 7]]) == [[0, 0, 0],\n                                      [0, 1, 2],\n                                      [3, 4, 5],\n                                      [6, 7, 8]]\n\nassert     sort_matrix([[3, 9, 2],\n                      [2, 7, 0],\n                      [4, 6, 5]]) == [[0, 0, 2],\n                                      [0, 4, 6],\n                                      [0, 7, 9]]\n\nassert     sort_matrix([[3, 9, 2],\n                      [2, 7, 0],\n                      [4, 6, 5],\n                      [9, 7, 8]]) == [[0, 0, 2],\n                                      [0, 4, 6],\n                                      [0, 7, 9],\n                                      [1, 2, 3]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_matrix([[7,8],[3,1]]) == [[1,3],[7,8]]\nassert     sort_matrix([[1,1,1,1,1,1],[1,1,1,1,1,1],[1,1,1,1,1,1]]) == [[1,1,1,1,1,1],[1,1,1,1,1,1],[1,1,1,1,1,1]]\nassert     sort_matrix([[1,2,3],[4,5,6]]) == [[1,4],[2,5],[3,6]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef spiral_matrix(M, N, K):\n    '''\n    Write a function to print a matrix in spiral form.\n    '''\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_matrix([[1,2,3],[4,5,6],[7,8,9]]) ==    [[1,4,7],[2,5,8],[3,6,9]]\nassert     sort_matrix([[1,4,7],[2,5,8],[3,6,9]]) ==    [[1,2,3],[4,5,6],[7,8,9]]\nassert     sort_matrix([[10,10,10],[10,10,10],[10,10,10]]) ==    [[10,10,10],[10,10,10],[10,10,10]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [7, 8, 9], [4, 5, 6]]\nassert     sort_matrix([[1, 2], [2, 1], [4, 5]]) == [[1, 2], [2, 1], [4, 5]]\nassert sort_matrix([[1, 2], [5, 6], [4, 3], [2, 1]]) == [[1, 2], [2, 1], [4, 3], [5, 6]]\nassert sort_matrix([[5, 2, 9, 5], [4, 3, 1, 1], [4, 5, 4, 3], [6, 5, 6, 7]]) == [[5, 2, 9, 5], [6, 5, 6, 7], [4, 3, 1, 1], [4, 5, 4, 3]]\nassert sort_matrix([[1, 2], [2, 1], [4, 5]]) == [[1, 2], [2, 1], [4, 5]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_matrix([[1,4,7],\n                    [10,13,15],\n                    [24,26,30]]) == [[1,4,7],\n                    [10,13,15],\n                    [24,26,30]]\nassert sort_matrix([[3,6,8],[9,12,15],[11,12,16]]) == [[3,6,8],[9,12,15],[11,12,16]]\n\ndef sort_matrix_2(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Volume(2,3,4) == 12\nassert     find_Volume(1,1,1) == 3\nassert     find_Volume(2,2,2) == 6\nassert     find_Volume(3,3,3) == 18\nassert     find_Volume(4,4,4) == 24\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Volume(5,5,5) == 50\nassert     find_Volume(2,2,2) == 8\nassert     find_Volume(6,6,6) == 144\nassert     find_Volume(10,10,10) == 5040\nassert     find_Volume(5,10,5) == 625\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_Volume(3,4,5) == 12\nassert     find_Volume(2,4,5) == 10\nassert     find_Volume(4,5,5) == 20\nassert     find_Volume(3,5,5) == 14\nassert     find_Volume(3,4,6) == 33\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nfind_Volume(3,3,3) == 12\nassert \nfind_Volume(4,4,4) == 28\nassert \nfind_Volume(5,5,5) == 50\nassert \nfind_Volume(1,1,1) == 1"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    find_Volume(1.2,2.5,3.4) == 4.2\nassert \n    find_Volume(2.1,2.5,3.4) == 2.2\nassert \n    find_Volume(2.5,2.5,3.4) == 2.2\nassert \n    find_Volume(1.2,2.5,3.4) == 4.2\nassert \n    find_Volume(3.5,4,2.5) == 1\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_Volume(3,3,3) == 27\nassert     find_Volume(3,5,3) == 27\nassert     find_Volume(3,3,6) == 36\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(find_Volume([2, 2, 2], 2, 2))\nprint(find_Volume([1, 3, 2], 1, 4))\nprint(find_Volume([4, 5, 6], 3, 1))\n\ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    pass\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Volume(5,2,3) == 20.0\nassert find_Volume(2,5,3) == 20.0\nassert find_Volume(3,5,3) == 19.0"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_lowercase_underscore('underline_this') == True, \\\n        'text_lowercase_underscore failed.'\nassert     text_lowercase_underscore('underline_') == False, \\\n        'text_lowercase_underscore failed.'\nassert     text_lowercase_underscore('_underline') == True, \\\n        'text_lowercase_underscore failed.'\nassert     text_lowercase_underscore('_') == False, \\\n        'text_lowercase_underscore failed.'\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_lowercase_underscore(    \"OneForAll_01\") == True, \"Wrong output\"\nassert     text_lowercase_underscore(    \"OneForAll_01_01\") == False, \"Wrong output\"\nassert     text_lowercase_underscore(    \"OneForAll_01_01_01\") == False, \"Wrong output\"\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_lowercase_underscore(\"something\") == False\nassert     text_lowercase_underscore(\"abc\") == False\nassert     text_lowercase_underscore(\"abc_def\") == True\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_lowercase_underscore('text') == True, 'A test case of text_lowercase_underscore'\nassert     text_lowercase_underscore('_text') == False, 'A test case of text_lowercase_underscore'\nassert     text_lowercase_underscore('__text') == True, 'A test case of text_lowercase_underscore'\nassert     text_lowercase_underscore('text__') == True, 'A test case of text_lowercase_underscore'\nassert     text_lowercase_underscore('text_') == False, 'A test case of text_lowercase_underscore'\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_lowercase_underscore('a')     == False\nassert     text_lowercase_underscore('_')     == True\nassert     text_lowercase_underscore('a_')     == True\nassert     text_lowercase_underscore('_a')     == True\nassert     text_lowercase_underscore('_A')     == True\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_lowercase_underscore('PYTHON') == False\nassert     text_lowercase_underscore('python') == True\nassert     text_lowercase_underscore('Python') == True\nassert     text_lowercase_underscore('Python3') == True\nassert     text_lowercase_underscore('python_is_awesome') == True\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_lowercase_underscore('hi_this_is_my_long_sentence') == True\nassert     text_lowercase_underscore('this_sentence_contains_a_longer_string') == True\nassert     text_lowercase_underscore('this_sentence_does_not_contain_my_long_string') == False\nassert     text_lowercase_underscore('abc_def_ghi_jkl_mno_pqr_stu_vwx_yz') == True\nassert     text_lowercase_underscore('WELCOME') == False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_lowercase_underscore('False') == False, \"FAILURE: test_text_lowercase_underscore\"\nassert     text_lowercase_underscore('true') == True, \"FAILURE: test_text_lowercase_underscore\"\nassert     text_lowercase_underscore('AloRaDa') == True, \"FAILURE: test_text_lowercase_underscore\"\nassert     text_lowercase_underscore('_AloRaDa_') == False, \"FAILURE: test_text_lowercase_underscore\"\nassert     text_lowercase_underscore('_AloRaDa__') == True, \"FAILURE: test_text_lowercase_underscore\"\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    text_lowercase_underscore('Hello World!')\n    == True\n    text_lowercase_underscore('H_llo_WOrld!')\n    == True\n    text_lowercase_underscore('H-llo_W-orld!')\n    == False\n    text_lowercase_underscore('F-O-L-D-')\n    == False\n    text_lowercase_underscore('h_1d')\n    == False\n    text_lowercase_underscore('h-1d')\n    == True\n    text_lowercase_underscore('Hello World!')\n    == True\n\n\n\ndef text_lowercase_digits(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters followed by digits and false otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_lowercase_underscore('hello_world') == True\nassert     text_lowercase_underscore('Hello_World') == False\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     square_perimeter(5) == 10\nassert     square_perimeter(2) == 4\nassert     square_perimeter(10) == 14\nassert     square_perimeter(12) == 18\nassert     square_perimeter(11) == 17\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(\"(4)\")\n\nprint(\">>> square_perimeter(2)\")\n\nprint(square_perimeter(2))\n\nprint(\">>> square_perimeter(3)\")\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     square_perimeter(0) == 0, \"The area of a square should be zero.\"\nassert square_perimeter(1) == 4, \"The perimeter of a square should be 4.\"\nassert square_perimeter(4) == 16, \"The perimeter of a square should be 16.\"\nassert square_perimeter(3.5) == 14.5, \"The perimeter of a square should be 14.5.\"\nassert square_perimeter(3) == 8, \"The perimeter of a square should be 8.\"\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     square_perimeter(0) == 0,'returns 0 for side length = 0'\nassert     square_perimeter(1) == 4,'returns 4 for side length = 1'\nassert     square_perimeter(2) == 8,'returns 8 for side length = 2'\nassert     square_perimeter(5) == 25,'returns 25 for side length = 5'\nassert     square_perimeter(11) == 144,'returns 144 for side length = 11'\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     square_perimeter(4) == 8\nassert     square_perimeter(1) == 1\nassert     square_perimeter(5) == 14\nassert     square_perimeter(0) == 0\nassert     square_perimeter(2.2) == 4.4\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     square_perimeter(1) == 4\nassert     square_perimeter(2) == 8\nassert     square_perimeter(3) == 12"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     square_perimeter(1) == 2, \"wrong\"\nassert     square_perimeter(2) == 4, \"wrong\"\nassert     square_perimeter(5) == 10, \"wrong\"\n\nprint('passed all tests!'"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     str_to_list('abc') == ['a','b','c'] \nassert     str_to_list('abbccc') == ['a','b','c'] \nassert     str_to_list('abbccccc') == ['b','c'] \nassert str_to_list('abcdefghijklmnopqrstuvwxyz') == ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\nassert str_to_list('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz') == ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef str_to_list_alternative(string, test): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef one_edit_away(first, second): \n    '''\n    Write a function to check whether the first word can be made by deleting 0 or 1 character from second word.\n    '''\n    pass\n\nassert \n\ndef one_edit_away(first, second): \n    '''\n    Write a function to check whether the first word can be made by deleting 0 or 1 character from second word.\n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     str_to_list(\"HELLO\", \"LL\") == \"EL\"\nassert     str_to_list(\"HELLO\", \"H\") == \"EL\"\nassert     str_to_list(\"HELLO\", \"\") == \"\"\n\ndef rotate_matrix(matrix):\n    '''\n    Write a function to rotate the given matrix in the anticlockwise direction.\n    '''\n    pass"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef test_str_to_list():\n    assert \n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == \"__main__\": \n    string_1 = input()\n    string_2 = input()\n    list_1 = list(string_1)\n    list_2 = list(string_2)\n    count = 0\n    for i in range(len(list_1)):\n        if list_1[i] in list_2:\n            count += 1\n            list_2.remove(list_1[i])\n    print(count)\n    print(''.join(list_1))\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     test_duplicate([1,2,3,1]) == True\nassert     test_duplicate([1,2,3,4]) == False\nassert     test_duplicate([1,2,3,4,4]) == True\nassert     test_duplicate([1,2,3,4,5]) == False\nassert     test_duplicate([1,2,3,4,5,5]) == True\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(test_duplicate([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,15,16,17,18,19,20,21]))\nprint(test_duplicate([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,16,16,17,18,19,20,21]))\nprint(test_duplicate([1,2,3,4,5,6,7,8,9,10,11,12,13,14,14,15,16,16,16,17,18,19,20,21]))"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    test_duplicate([1,2,3]) == True\n    test_duplicate([1,2,3,3]) == False\n    test_duplicate([1,1,1,3,3,4]) == True\n    test_duplicate([1,2,3,4,5,5,7,7,8,8,10,12]) == True"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     test_duplicate([3,2,3,1,5,6]) == False\nassert     test_duplicate([3,3,4,2,5,5]) == True\n\ndef test_remove_first_and_last(arr):\n    '''\n    Write a function that removes the first and last elements of the given array.\n    '''\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef test_duplicate_two(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef find_duplicate(arraynums):\n    '''\n    Write a function to find the duplicate element in a given array.\n    '''\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     test_duplicate([1,1,2,3,5,5]) == True, \\\n    \"Your function does not work correctly for this input array.\"\nassert     test_duplicate([1,1,2,3,5,5,1]) == False, \\\n    \"Your function does not work correctly for this input array.\""
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     test_duplicate(arr_01) == True, f\"Expected True, but got False for ({arr_01})\"\nassert     test_duplicate(arr_02) == False, f\"Expected False, but got True for ({arr_02})\"\nassert     test_duplicate(arr_03) == False, f\"Expected False, but got True for ({arr_03})\""
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == '__main__':\n    import sys\n    nums = sys.stdin.readline().strip()\n    nums = list(map(int, nums.split(',')))\n    print(test_duplicate(nums))"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_woodall(2)    ==     False\nassert     is_woodall(10)    ==     False\nassert     is_woodall(3)    ==     True\nassert     is_woodall(7)    ==     True\nassert     is_woodall(16)    ==     True\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_woodall(8) == False, '8 is not a Woodball number'\nassert     is_woodall(7) == True, '7 is a Woodball number'\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_woodall(4)==False, 'incorrect logic'\nassert     is_woodall(8)==True, 'incorrect logic'\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_woodall(5) == False, \"is_woodall(5) should be False\"\nassert     is_woodall(12) == False, \"is_woodall(12) should be False\"\nassert     is_woodall(10) == True, \"is_woodall(10) should be True\"\nassert     is_woodall(6) == True, \"is_woodall(6) should be True\"\nassert     is_woodall(7) == True, \"is_woodall(7) should be True\"\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nis_woodall(24)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_woodall(2) == False, \"is_woodall(2)\"\nassert     is_woodall(3) == True, \"is_woodall(3)\"\nassert     is_woodall(10) == False, \"is_woodall(10)\"\nassert     is_woodall(4) == False, \"is_woodall(4)\"\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_woodall(1)     ==     False \nassert     is_woodall(2)     ==     False \nassert     is_woodall(3)     ==     False \nassert     is_woodall(4)     ==     True \nassert     is_woodall(5)     ==     True \n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_woodall(10) == False\nassert     is_woodall(12) == False\nassert     is_woodall(121) == True\nassert     is_woodall(0) == False\nassert     is_woodall(1) == False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint('''\ncorrect\n''')\nprint('''\nOi!\n''')"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert rev(1) == 0\nassert rev(5) == 2\nassert rev(15) == 6\nassert rev(16) == 4\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     rev(123) == 321\nassert     rev(9898) == 9879\nassert     rev(1234567890) == 391234567890\nassert     rev(12345) == 12345\nassert     rev(12345678901234) == 12345678901234\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     rev(1)     == 1\nassert     rev(6)     == -5\nassert     rev(15)     == -15\nassert     rev(90)     == -81\nassert     rev(100)     == -10\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rev(5)    == 1\nassert     rev(12)    == 2\nassert     rev(20)    == 10\nassert     rev(30)    == 21\nassert     rev(40)    == 11\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     rev(0) == 0\nassert rev(1) == 1\nassert rev(4) == 2\nassert rev(8) == 6\nassert rev(20) == 18\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rev(100)    == True\nassert     rev(200)    == False\nassert     rev(2000)    == True\nassert     rev(2512)    == False\n\n\n'''\nThe palindrome checker checks if a given string or any substring of the string is a palindrome or not.\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     rev(3) == True, \"rev(3) returns True\"\nassert     rev(5) == True, \"rev(5) returns True\"\nassert     rev(15) == False, \"rev(15) returns False\"\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     rev(0) == 0, \"Error\"\nassert     rev(1) == 1, \"Error\"\nassert     rev(10) == 10, \"Error\"\nassert     rev(10) == 9, \"Error\"\nassert     rev(12) == 8, \"Error\"\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Max_Num([1, 2, 3, 4]) == 16\nassert     find_Max_Num([4, 8, 2, 9]) == 32\nassert     find_Max_Num([4, 8, 2, 10]) == 32\nassert     find_Max_Num([4, 8, 2, 4]) == 16\nassert     find_Max_Num([4, 8, 4, 2]) == 16\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Max_Num([1,5,2,3]) == 5, 'Correctness check is failed!'\nassert     find_Max_Num([1,5,2,8,3]) == 5, 'Correctness check is failed!'\nassert     find_Max_Num([2,3,4,5,6]) == 7, 'Correctness check is failed!'\nassert     find_Max_Num([3,4,5,6,7]) == 7, 'Correctness check is failed!'\nassert     find_Max_Num([2,3,4,5,6,7,8]) == 8, 'Correctness check is failed!'\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Max_Num([1,2,3,4,5,6,7,8,9]) == 9\nassert     find_Max_Num([1,2,3,4,5,6,7,8,9]) == 9\nassert     find_Max_Num([1,2,3,4,5,6,7,8,9]) == 9\nassert     find_Max_Num([0,9,8,7,6,5,4,3,2,1]) == 9\nassert     find_Max_Num([0,9,8,7,6,5,4,3,2,1]) == 9\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert opposite_Signs(2,4) == False, \"Wrong Answer : 2,4\"\nassert opposite_Signs(-2,-4) == True, \"Wrong Answer : -2,-4\"\nassert opposite_Signs(4,2) == False, \"Wrong Answer : 4,2\"\nassert opposite_Signs(-4,-2) == True, \"Wrong Answer : -4,-2\"\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     opposite_Signs(-1,1) == True\nassert     opposite_Signs(1,1) == False\nassert     opposite_Signs(1,2) == True\nassert     opposite_Signs(0,0) == True\nassert     opposite_Signs(1,-1) == True\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint (\"Pass\" if not (opposite_Signs(1, -1) == True) else \"Fail\")\nprint (\"Pass\" if not (opposite_Signs(1, 1) == True) else \"Fail\")\nprint (\"Pass\" if not (opposite_Signs(-1, -1) == True) else \"Fail\")\nprint (\"Pass\" if not (opposite_Signs(-1, 1) == True) else \"Fail\")\nprint (\"Pass\" if not (opposite_Signs(-1, -2) == True) else \"Fail\")\nprint (\"Pass\" if not (opposite_Signs(1, -2) == True) else \"Fail\")\nprint (\"Pass\" if not (opposite_Signs(2, -2) == True) else \"Fail\")\nprint (\"Pass\" if not (opposite_Signs(2, -1) == True) else \"Fail\")\nprint (\"Pass\" if not (opposite_Signs(2, 1) == True) else \"Fail\")\nprint (\"Pass\" if not (opposite_Signs(2, 2) == True) else \"Fail\")\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nopposite_Signs(1,1) == True\nopposite_Signs(1,0) == False\nopposite_Signs(-1,-1) == True\nopposite_Signs(-1,-0) == False\nopposite_Signs(0,-1) == False\nopposite_Signs(0,1) == False\nopposite_Signs(0,0) == False\nopposite_Signs(-1,0) == True\nopposite_Signs(0,-1) == True\nopposite_Signs(0,1) == True\nopposite_Signs(-2,-2) == False\nopposite_Signs(-1,-1) == False\nopposite_Signs(-1,-2) == True\nopposite_Signs(-2,1) == True\nopposite_Signs(-2,2) == False\nopposite_Signs(-3,1) == False\nopposite_Signs(-4,1) == True\nopposite_Signs(-4,2) == False\nopposite_Signs(-4,3) == True\nopposite_Signs(-4,4) == False\nopposite_Signs(-4,5) == False\nopposite_Signs(-4,6) == True\nopposite_Signs(-4,7) == False\nopposite_Signs(-4,8) == True\nopposite_Signs(-4,9) == False\nopposite_Signs(-4,10) == False\nopposite_Signs(-4,11) == False\nopposite_Signs(-4,12) == True\nopposite_Signs(-4,13) == False\nopposite_Signs(-4,14) == True\nopposite_Signs(-4,15) == True\nopposite_Signs(-4,16) == False\nopposite_Signs(-4,17) == True\nopposite_Signs(-4,18) == False\nopposite_Signs(-4,19) == False\nopposite_Signs(-4,20) == False\nopposite_Signs(-4,21) == False\nopposite_Signs(-4,22) == True\nopposite_Signs(-4,23) == True\nopposite_Signs(-4,24) == False\nopposite_Signs(-4,25) == True\nopposite_Signs(-4,26) == False\nopposite_Signs(-4,27) == True\nopposite_Signs(-4,28) == False\nopposite_Signs(-4,29) == True\nopposite_Signs(-4,30) == False\nopposite_Signs(-4,31) == True\nopposite_Signs(-4,32) == False\nopposite_Signs(-4,33) == True\nopposite_Signs(-4,34) == True\nopposite_Signs(-4,35) == True\nopposite_Signs(-4,36) == False\nopposite_Signs(-4,37) == True\nopposite_Signs(-4,38) == False\nopposite_Signs(-4,39) == True\nopposite_Signs(-4,40) == True\nopposite_Signs(-4,41) == False\nopposite_Signs(-4,42) == True\nopposite_Signs(-4,43) == True\nopposite_Signs(-4,44) == False\nopposite_Signs(-4,45) == True\nopposite_Signs(-4,46) == False\nopposite_Signs(-4,47) == True\nopposite_Signs(-4,48) == False\nopposite_Signs(-4,49) == True\nopposite_Signs(-4,50) == True\nopposite_Signs(-4,51) == True\nopposite_Signs(-4,52) == False\nopposite_Signs(-4,53) == True\nopposite_Signs(-4,54) == True\nopposite_Signs(-4,55) == True\nopposite_Signs(-4,56) == False\nopposite_Signs(-4,57) == True\nopposite_Signs(-4,58) == True\nopposite_Signs(-4,59) == False\nopposite_Signs(-4,60) == True\nopposite_Signs(-4,61) == True\nopposite_Signs(-4,62) == False\nopposite_Signs(-4,63) == True\nopposite_Signs(-4,64) == True\nopposite_Signs(-4,65) == True\nopposite_Signs(-4,66) == True\nopposite_Signs(-4,67) == True\nopposite_Signs(-4,68) == False\nopposite_Signs(-4,69) == True\nopposite_Signs(-4,70) == False\nopposite_Signs(-4,71) == True\nopposite_Signs(-4,72) == False\nopposite_Signs(-4,73) == True\nopposite_Signs(-4,74) == True\nopposite_Signs(-4,75) == True\nopposite_Signs(-4,76) == True\nopposite_Signs(-4,77) == True\nopposite_Signs(-4,78) == False\nopposite_Signs(-4,79) == True\nopposite_Signs(-4,80) == True\nopposite_Signs(-4,81) == False\nopposite_Signs(-4,82) == True\nopposite_Signs(-4,83) == True\nopposite_Signs(-4,84) == True\nopposite_Signs(-4,85) == False\nopposite_Signs(-4,86) == True\nopposite_Signs(-4,87) == True\nopposite_Signs(-4,88) == True\nopposite_Signs(-4,89) == True\nopposite_Signs(-4,90) == False\nopposite_Signs(-4,91) == True\nopposite_Signs(-4,92) == True\nopposite_Signs(-4,93) == False\nopposite_Signs(-4,94) == True\nopposite_Signs(-4,95) == True\nopposite_Signs(-4,96) == True\nopposite_Signs(-4,97) == True\nopposite_Signs(-4,98) == False\nopposite_Signs(-4,99) == True\nopposite_Signs(-4,100) == True\nopposite_Signs(-4,101) == False\nopposite_Signs(-4,102) == True\nopposite_Signs(-4,103) == True\nopposite_Signs(-4,104) == True\nopposite_Signs(-4,105) == True\nopposite_Signs(-4,106) == False\nopposite_Signs(-4,107) == True\nopposite_Signs(-4,108) == True\nopposite_Signs(-4,109) == True\nopposite_Signs(-4,110) == True\nopposite_Signs(-4,111) == True\nopposite_Signs(-4,112) == True\nopposite_Signs(-4,113) == False\nopposite_Signs(-4,114) == True\nopposite_Signs(-4,115) == False\nopposite_Signs(-4,116) == True\nopposite_Signs(-4,117) == True\nopposite_Signs(-4,118) == False\nopposite_Signs(-4,119) == True\nopposite_Signs(-4,120) == True\nopposite_Signs(-4,121) == False\nopposite_Signs(-4,122) == True\nopposite_Signs(-4,123) == True\nopposite_Signs(-4,124) == True\nopposite_Signs(-4,125) == True\nopposite_Signs(-4,126) == True\nopposite_Signs(-4,127) == False\nopposite_Signs(-4,128) == True\nopposite_Signs(-4,129) == False\nopposite_Signs(-4,130) == True\nopposite_Signs(-4,131) == False\nopposite_Signs(-4,132) == True\nopposite_Signs(-4,133) == False\nopposite_Signs(-4,134) == True\nopposite_Signs(-4,135) == True\nopposite_Signs(-4,136) == True\nopposite_Signs(-4,137) == True\nopposite"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nopposite_Signs(5, -5) == False, \" Should be False\"\nopposite_Signs(-5, -5) == True, \" Should be True\"\nopposite_Signs(5, 5) == False, \" Should be False\"\nopposite_Signs(-5, 5) == True, \" Should be True\"\nopposite_Signs(5, -5) == True, \" Should be True\"\nopposite_Signs(-5, -5) == False, \" Should be False\""
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(opposite_Signs(-12, -12)) # return false\nprint(opposite_Signs(-7, -7)) # return true\nprint(opposite_Signs(-8, -8)) # return false\n\ndef Insertion_Sort(A):\n    '''\n    Write a python function to sort an array in ascending order using Insertion Sort algorithm.\n    '''\n    pass\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     opposite_Signs(4,-5)==False\nassert     opposite_Signs(-4,-5)==True\nassert     opposite_Signs(-4,-4)==True\nassert opposite_Signs(-4,-4)==True\n\n\ndef subtractor(x,y): \n    '''\n    Write a python function to subtract two numbers.\n    '''\n    pass\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     opposite_Signs(3,4) == False, \"The First Function Test Case Failed\"\nassert     opposite_Signs(-3,4) == False, \"The Second Function Test Case Failed\"\nassert     opposite_Signs(-3, -4) == True, \"The Third Function Test Case Failed\"\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef octagonal_iter(n): \n    '''\n    Write a function that returns an iterator that iterates\n    from 1 to n, where n is an octagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert is_octagonal(1) == 1\nassert is_octagonal(2) == 7\nassert is_octagonal(3) == 15\nassert is_octagonal(4) == 31\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert is_octagonal(1) == 1\nassert is_octagonal(2) == 3\nassert is_octagonal(3) == 6\nassert is_octagonal(4) == 10\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_octagonal(3) == 8\nassert     is_octagonal(5) == 27\nassert     is_octagonal(7) == 49\nassert     is_octagonal(11) == 76\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_octagonal(1) == 1\nassert     is_octagonal(2) == 7\nassert     is_octagonal(3) == 15\nassert     is_octagonal(4) == 23\nassert     is_octagonal(5) == 29\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_Substrings('12') == 1\nassert     count_Substrings('1234') == 1\nassert     count_Substrings('12345') == 4\nassert     count_Substrings('1234') == 1\nassert     count_Substrings('1234567') == 4\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_Substrings(\"abc\") == 0, \"count_Substrings count_Substrings\"\nassert     count_Substrings(\"aab\") == 2, \"count_Substrings count_Substrings\"\nassert     count_Substrings(\"ab\") == 2, \"count_Substrings count_Substrings\"\nassert     count_Substrings(\"abcd\") == 1, \"count_Substrings count_Substrings\"\nassert     count_Substrings(\"abcabc\") == 2, \"count_Substrings count_Substrings\"\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef solve(s):\n    '''\n    You are given a string s. In one move you can replace any 2 adjacent letters by a single letter,\n    and the cost of this move is 1.\n    '''\n    pass\n\ndef solve2(s):\n    '''\n    Given a string s, find the minimum number of moves required to make s palindrome.\n    '''\n    pass\n\ndef solve3(s):\n    '''\n    Given a string s and an array of strings, a, where each string in a is a subset of s, find the minimum number of moves required to make s palindrome.\n    '''\n    pass\n\ndef solve4(s, a):\n    '''\n    Given a string s and an array of strings, a, where each string in a is a subset of s, find the minimum number of moves required to make s palindrome.\n    '''\n    pass\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_Substrings('') == 0\nassert count_Substrings('12') == 1\nassert count_Substrings('10') == 2\nassert count_Substrings('0') == 1\nassert count_Substrings('00') == 1\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(count_Substrings('1a2bc3')) # should return 1\nprint(count_Substrings('abc123')) # should return 3\nprint(count_Substrings('abc123456')) # should return 0\nprint(count_Substrings('abcabc')) # should return 3\nprint(count_Substrings('abcabc1')) # should return 0\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_Substrings('abd') == 2\nassert count_Substrings('ab') == 1\nassert count_Substrings('cd') == 2\nassert count_Substrings('abc') == 2\nassert count_Substrings('ac') == 1\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_Substrings(\"1\") == 1\nassert     count_Substrings(\"1a\") == 1\nassert     count_Substrings(\"1bc\") == 1\nassert     count_Substrings(\"1ac\") == 1\nassert     count_Substrings(\"12345678\") == 6\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ncount_Substrings(\"asdfasdfasd\") == 6\ncount_Substrings(\"aabcd\") == 3\ncount_Substrings(\"a\") == 1\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_Substrings('abc') == 2, \"count_Substrings not working\"\nassert     count_Substrings('123') == 3, \"count_Substrings not working\"\nassert     count_Substrings('1234') == 4, \"count_Substrings not working\"\nassert     count_Substrings('12345') == 5, \"count_Substrings not working\"\nassert     count_Substrings('1234567') == 6, \"count_Substrings not working\"\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     smallest_num([1, 4, 6, 2, -6]) == -6\nassert     smallest_num([1, 4, 6, 2, -6, 7]) == -6\nassert     smallest_num([4, 6, 2, -6, 7]) == -6\nassert     smallest_num([1, 4, 6, 2, -6, 7, -7]) == -7\nassert     smallest_num([1, 4, 6, 2, -6]) == -6\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # import doctest\n    # doctest.testmod()\n    x = [10, 30, 4, 5, 2, 2, 1]\n    assert smallest_num(x) == "
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef largest_num(xs):\n    '''\n    Write a python function to find largest number in a list.\n    '''\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     smallest_num([1,2,3,4,5,6]) == 1\nassert     smallest_num([1,2,3,4,5,6,0]) == 0\nassert     smallest_num([1,2,3,4,5,6,1]) == 1\nassert     smallest_num([1,2,3,4,5,6,1,2]) == 1\nassert     smallest_num([1,2,3,4,5,6,1,2,3]) == 1\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef smallest_num_sorted(xs):\n    '''\n    Write a python function to find smallest number in a list and return \n    it in sorted form.\n    '''\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     smallest_num([2, 3, 6, 1]) == 1\nassert     smallest_num([1, 2, 3, 4]) == 1\nassert     smallest_num([1, 3, 6, 5]) == 1\nassert     smallest_num([1, 3, 6, 5, 4]) == 1\nassert     smallest_num([2, 3, 6, 5, 4]) == 1\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     smallest_num([1, 3, 5, 7]) == 1\nassert     smallest_num([1, 2, 3, 4]) == 1\nassert     smallest_num([0, 2, 3, 4]) == 0\nassert     smallest_num([2, 3, 4, 4]) == 4\nassert     smallest_num([1, 1, 1, 1]) == 1\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_difference([(1,3),(3,8),(2,4),(1,6)]) == (4, 6)\nassert max_difference([(1,3),(3,8),(2,4),(1,6)]) == (3, 2)\nassert max_difference([(1,3),(3,8),(2,4),(1,6)]) == (1, 1)\nassert max_difference([(1,3),(3,8),(2,4),(1,6)]) == (2, 2)\nassert max_difference([(1,3),(3,8),(2,4),(1,6)]) == (4, 2)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_difference([(1, 3), (2, 2), (3, 1)]) == 2, 'testing failed'\nassert     max_difference([(1, 1), (2, 3)]) == 2, 'testing failed'\nassert     max_difference([(1, 2), (2, 1)]) == 1, 'testing failed'\nassert     max_difference([(1, 1), (1, 1), (1, 1), (1, 1)]) == 0, 'testing failed'\nassert     max_difference([(1, 1), (1, 1), (1, 2), (1, 1), (1, 1), (1, 2)]) == 2, 'testing failed'\nprint('\\033[92m' + \"Test case passed\" + '\\033[0m')\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_difference([(7, 8), (1, 2), (5, 10), (13, 15), (3, 4), (7, 9)]) == 15\nassert     max_difference([(7, 8), (1, 2), (5, 10), (13, 15), (3, 4), (7, 9)]) == 7\nassert     max_difference([(7, 8), (1, 2), (5, 10), (13, 15), (3, 4), (7, 9)]) == 8\nassert     max_difference([(7, 8), (1, 2), (5, 10), (13, 15), (3, 4), (7, 9)]) == 1\nassert     max_difference([(7, 8), (1, 2), (5, 10), (13, 15), (3, 4), (7, 9)]) == 0\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n'''\nSolution:\nThe naive approach is to iterate through each element and find the maximum difference between\neach pair. We can do this in O(n) time.\n'''\ndef max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    maximum = -1\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            difference = test_list[j] - test_list[i]\n            if difference > maximum:\n                maximum = difference\n    return maximum\n\n'''\nSolution:\n\nThe naive approach is to iterate through each element and find the maximum difference between\neach pair. We can do this in O(n) time.\n'''\ndef max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    maximum = -1\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            difference = test_list[j] - test_list[i]\n            if difference > maximum:\n                maximum = difference\n    return maximum\n\n'''\nSolution:\n'''\ndef max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    maximum = -1\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            difference = test_list[j] - test_list[i]\n            if difference > maximum:\n                maximum = difference\n    return maximum\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_difference([(0, 1), (2, 3)]) == 1\nassert     max_difference([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (10, 11), (12, 13), (14, 15), (16, 17)]) == 7\nassert     max_difference([(0, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18)]) == 6\nassert     max_difference([(0, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20), (21, 22), (23, 24), (25, 26)]) == 8\nassert     max_difference([(0, 1), (2, 3), (4, 5), (6, 7), (8, 9), (10, 11), (12, 13), (14, 15), (16, 17), (18, 19), (20, 21), (22, 23), (24, 25), (26, 27), (28, 29), (30, 31), (32, 33)]) == 13\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_difference([(1, 2), (3, 4), (5, 6)]) == 1, \"1\"\nassert     max_difference([(1, 2), (3, 4), (5, 6)]) == 2, \"2\"\nassert     max_difference([(1, 2), (3, 4), (5, 6)]) == 3, \"3\"\nassert     max_difference([(1, 2), (3, 4), (5, 6)]) == 4, \"4\"\nassert     max_difference([(1, 2), (3, 4), (5, 6)]) == 5, \"5\"\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_difference([(1, 2), (2, 3), (4, 5)]) == 2\nassert     max_difference([(2, 3), (4, 5), (6, 7)]) == 3\nassert     max_difference([(4, 5), (6, 7), (2, 3)]) == 3\nassert     max_difference([(1, 2), (2, 3), (4, 5)]) == 2\nassert     max_difference([(1, 2), (2, 3), (4, 5)]) == 0\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_difference([(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]) == 3\nassert     max_difference([(1, 2), (1, 3), (1, 4), (2, 3), (2, 4)]) == 1\nassert     max_difference([(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]) == 0\n\nprint('Tests passed')\nprint('\\n')\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_difference([(1,2), (1,3), (2,4)]) == 2, \"Should be 2\"\nassert max_difference([(1,2), (2,3), (3,4)]) == 1, \"Should be 1\"\nassert max_difference([(2,5), (3,6), (2,5), (3,4), (4,5), (4,6)]) == 1, \"Should be 1\"\nassert max_difference([(1,2), (2,5), (2,4), (5,6), (3,4), (4,5)]) == 5, \"Should be 5\"\nassert max_difference([(1,2), (2,5), (2,4), (5,6), (3,4), (4,5)]) == 5, \"Should be 5\"\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     subject_marks([(10, 'A'), (11, 'B'), (12, 'C'), (13, 'D'), (14, 'E'), (15, 'F'), (16, 'G'), (17, 'H'), (18, 'I'), (19, 'J'), (20, 'K'), (21, 'L'), (22, 'M'), (23, 'N'), (24, 'O'), (25, 'P')]) == \\\n    [(20, 'J'), (16, 'P'), (10, 'A'), (18, 'I'), (11, 'B'), (13, 'D'), (14, 'E'), (15, 'F'), (17, 'G'), (22, 'M'), (23, 'N'), (24, 'O'), (25, 'P'), (19, 'J'), (12, 'C'), (9, 'K')]\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     subject_marks([('English',70),('Maths',95),('Science',85),('History',65),('Social Studies',90),('Computer Science',95)]) == \\\n        [('History', 65), ('Computer Science', 95), ('Science', 85), ('Maths', 95), ('English', 70), ('Social Studies', 90)]"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert subject_marks([('Arvind', 77), ('Nirmal', 76), ('Shankar', 94)]) == [('Arvind', 77), ('Nirmal', 76), ('Shankar', 94)]\nassert subject_marks([('Shankar', 94), ('Arvind', 77), ('Nirmal', 76)]) == [('Arvind', 77), ('Nirmal', 76), ('Shankar', 94)]\nassert subject_marks([('Arvind', 77), ('Nirmal', 76), ('Shankar', 94)]) == [('Arvind', 77), ('Nirmal', 76), ('Shankar', 94)]\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     subject_marks([(10, 5), (20, 1), (30, 6), (40, 7)]) == [(10, 5), (20, 1), (30, 6), (40, 7)], \n'ERROR in subject_marks. Assertion failed'\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     subject_marks([(101, 'A'), (100, 'B'), (99, 'C'), (100, 'C')]) == [(100, 'C'), (99, 'C'), (100, 'B'), (101, 'A')]\nassert     subject_marks([(101, 'A'), (99, 'C'), (100, 'B'), (100, 'C')]) == [(100, 'C'), (100, 'B'), (99, 'C'), (101, 'A')]\nassert     subject_marks([(101, 'A'), (100, 'B'), (100, 'C')]) == [(100, 'C'), (100, 'B'), (101, 'A')]\nassert     subject_marks([(101, 'A'), (100, 'B'), (100, 'C'), (100, 'D'), (100, 'E')]) == [(100, 'E'), (100, 'D'), (100, 'C'), (100, 'B'), (100, 'A')]\nassert     subject_marks([(1, 'A'), (1, 'B'), (1, 'C')]) == [(1, 'C'), (1, 'B'), (1, 'A')]\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     subject_marks([(2,3),(1,2),(0,0),(1,1)]) == \\\n        [(0,0),(1,1),(1,2),(2,3)]\n\ndef find_marks_by_subject(subjects,marks):\n    '''\n    Write a function to find marks by subject in a list of tuples.\n    '''\n    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    (subject_marks([(1,2),(1,4),(1,6),(1,7),(1,8),(2,1),(2,4),(2,5),(2,7),(2,8),(3,1),(3,6),(3,9),(3,10),(4,1),(4,3),(4,5),(4,7),(4,9),(4,10),(5,1),(5,3),(5,5),(5,7),(5,9),(5,10),(6,1),(6,3),(6,6),(6,7),(6,9),(6,10),(7,1),(7,3),(7,5),(7,6),(7,9),(7,10),(8,1),(8,3),(8,5),(8,6),(8,9),(8,10)]) == [\n    (1,1),(1,2),(1,4),(1,6),(1,7),(1,8),(2,1),(2,4),(2,5),(2,7),(2,8),(3,1),(3,6),(3,9),(3,10),(4,1),(4,3),(4,5),(4,7),(4,9),(4,10),(5,1),(5,3),(5,5),(5,7),(5,9),(5,10),(6,1),(6,3),(6,6),(6,7),(6,9),(6,10),(7,1),(7,3),(7,5),(7,6),(7,9),(7,10),(8,1),(8,3),(8,5),(8,6),(8,9),(8,10)])\n    )\nassert (subject_marks([(1,2),(2,3),(1,4),(3,5),(1,6),(4,7),(1,7),(3,8),(5,10),(3,9),(3,10),(5,9),(7,10),(3,11),(3,12),(5,11),(7,12),(3,13),(3,14),(5,13),(7,14),(3,15),(3,16),(5,15),(7,16),(3,17),(3,18),(5,17),(7,18)]) ==\n    [(1,1),(1,2),(1,3),(1,4),(1,6),(1,7),(1,8),(2,1),(2,3),(2,5),(2,7),(2,8),(3,1),(3,3),(3,5),(3,7),(3,8),(4,1),(4,4),(4,6),(4,7),(4,8),(5,1),(5,3),(5,5),(5,7),(5,9),(5,10),(6,1),(6,3),(6,5),(6,7),(6,9),(6,10),(7,1),(7,3),(7,5),(7,6),(7,9),(7,10),(8,1),(8,3),(8,5),(8,6),(8,9),(8,10),(9,1),(9,3),(9,5),(9,7),(9,9),(9,10),(10,1),(10,3),(10,5),(10,7),(10,9),(10,10)])\n    )\nassert (subject_marks([(1,2),(1,4),(1,6),(1,7),(1,8),(2,1),(2,4),(2,5),(2,7),(2,8),(3,1),(3,6),(3,9),(3,10),(4,1),(4,3),(4,5),(4,7),(4,9),(4,10),(5,1),(5,3),(5,5),(5,7),(5,9),(5,10),(6,1),(6,3),(6,6),(6,7),(6,9),(6,10),(7,1),(7,3),(7,5),(7,6),(7,9),(7,10),(8,1),(8,3),(8,5),(8,6),(8,9),(8,10),(9,1),(9,3),(9,5),(9,7),(9,9),(9,10),(10,1),(10,3),(10,5),(10,7),(10,9),(10,10)]) ==\n    [(1,1),(1,2),(1,4),(1,6),(1,7),(1,8),(2,1),(2,4),(2,5),(2,7),(2,8),(3,1),(3,6),(3,9),(3,10),(4,1),(4,3),(4,5),(4,7),(4,9),(4,10),(5,1),(5,3),(5,5),(5,7),(5,9),(5,10),(6,1),(6,3),(6,6),(6,7),(6,9),(6,10),(7,1),(7,3),(7,5),(7,6),(7,9),(7,10),(8,1),(8,3),(8,5),(8,6),(8,9),(8,10),(9,1),(9,3),(9,5),(9,7),(9,9),(9,10),(10,1),(10,3),(10,5),(10,7),(10,9),(10,10)])\n    )\nassert (subject_marks([(1,2),(1,4),(1,6),(1,7),(1,8),(2,1),(2,4),(2,5),(2,7),(2,8),(3,1),(3,6),(3,9),(3,10),(4,1),(4,3),(4,5),(4,7),(4,9),(4,10),(5,1),(5,3),(5,5),(5,7),(5,9),(5,10),(6,1),(6,3),(6,6),(6,7),(6,9),(6,10),(7,1),(7,3),(7,5),(7,6),(7,9),(7,10),(8,1),(8,3),(8,5),(8,6),(8,9),(8,10),(9,1),(9,3),(9,5),(9,7),(9,9),(9,10),(10,1),(10,3),(10,5),(10,7),(10,9),(10,10)]) ==\n    [(1,1),(1,2),(1,4),(1,6),(1,7),(1,8),(2,1),(2,4),(2,5),(2,7),(2,8),(3,1),(3,6),(3,9),(3,10),(4,1),(4,3),(4,5),(4,7),(4,9),(4,10),(5,1),(5,3),(5,5),(5,7),(5,9),(5,10),(6,1),(6,3),(6,6),(6,7),(6,9),(6,10),(7,1),(7,3),(7,5),(7,6),(7,9),(7,10),(8,1),(8,3),(8,5),"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     subject_marks(\n            [('history', 78), ('maths', 55), ('english', 82), ('comprehension', 95), ('mathematics', 90), ('science', 85), ('physics', 96), ('dancing', 82)]) == \n[('dancing', 82), ('comprehension', 95), ('physics', 96), ('mathematics', 90), ('science', 85), ('english', 82), ('history', 78), ('maths', 55)], 'Failed'\nassert     subject_marks(\n            [('history', 78), ('maths', 55), ('english', 82), ('comprehension', 95), ('mathematics', 90), ('science', 85), ('physics', 96), ('dancing', 82)]) == \n[('physics', 96), ('mathematics', 90), ('comprehension', 95), ('english', 82), ('maths', 55), ('history', 78), ('science', 85), ('dancing', 82)], 'Failed'\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     subject_marks([(2, 3), (1, 3), (3, 4), (2, 1)]) ==    [(2, 1), (1, 3), (3, 4), (2, 3)], \\\n        \"Wrong Answer\"\n\n'''\nWrite a function which takes a list of integers and returns a list of all elements in the list which are greater than zero.\n'''\ndef greater_than_zero(lst):\n    '''\n    Write a function to find all the elements in a list which are greater than zero.\n    '''\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     recursive_list_sum([1, 2, [3, 4]]) == 10\nassert     recursive_list_sum([1, 2, 3, 4]) == 7\nassert     recursive_list_sum([\"a\", \"b\", [\"c\", \"d\"]]) == \"abcdd\"\nassert     recursive_list_sum([]) == 0\nassert     recursive_list_sum(None) == 0"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     recursive_list_sum([1,2,3]) == 6\nassert     recursive_list_sum([]) == 0\nassert     recursive_list_sum([1,2,3,4,5]) == 15\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     recursive_list_sum([[1,2,3],[4,5],[6,7]]) == 21\nassert     recursive_list_sum([[1,2],[3,4],[5,6]]) == 15\nassert     recursive_list_sum([[]]) == 0\nassert     recursive_list_sum([]) == 0\nassert     recursive_list_sum([[1,2,3]]) == 6\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     recursive_list_sum([]) == 0, \"Recursive list sum with empty list should be 0\"\nassert     recursive_list_sum([1]) == 1, \"Recursive list sum with single element should be 1\"\nassert     recursive_list_sum([1,2]) == 3, \"Recursive list sum with single and double element should be 3\"\nassert     recursive_list_sum([1,2,3]) == 6, \"Recursive list sum with single, double and triple element should be 6\"\nassert     recursive_list_sum([1,2,3,4]) == 10, \"Recursive list sum with single, double and triple, fourth element should be 10\"\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nrecursive_list_sum([1,2,3,4,5]) == 1+2+3+4+5\nassert recursive_list_sum([1,2,3]) == 1+2+3\nassert recursive_list_sum([]) == 0\n\ndef recursive_solution_gen(data_list):\n    '''\n    Write a generator to flatten a list and sum all of its elements.\n    '''\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     recursive_list_sum([[[1, 2, 3], 4], 5, 6]) == 21, 'incorrect'\nassert     recursive_list_sum([1, 2, 3]) == 6, 'incorrect'\nassert     recursive_list_sum([[1, 2], 3, 4]) == 7, 'incorrect'\nassert     recursive_list_sum([[[1, 2]], 3, 4]) == 7, 'incorrect'\nassert     recursive_list_sum([[1], 2, 3]) == 6, 'incorrect'\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     recursive_list_sum([\"hello\", 2, 3]) == 7\nassert     recursive_list_sum([\"hello\", 2, 3, \"hi\"]) == 7\nassert     recursive_list_sum([\"hi\", \"hello\", 2, 3]) == 7\nassert     recursive_list_sum([]) == 0\nassert     recursive_list_sum([\"hi\"]) == 1\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     recursive_list_sum([1, 2, 3]) == 5\nassert     recursive_list_sum([1, 2, 3, 4]) == 10\nassert     recursive_list_sum([1, 2, 3, 4, 5]) == 15\n\n\ndef recursive_map(data_list, func):\n    '''\n    Write a function to apply a lambda function to every item in a list,\n    and then return the resulting list.\n    '''\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     recursive_list_sum([1, 2, 3]) == 6\nassert     recursive_list_sum([1, 2, 3, 4]) == 10\nassert     recursive_list_sum([1, 2, 3, 4, 5]) == 15\nassert     recursive_list_sum([1, 2, 3, 4, 5, 6]) == 21\nassert     recursive_list_sum([1, 2, 3, 4, 5, 6, 7]) == 28\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef pos_count(list):\n    return list.count(True)\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     pos_count([10, 5, -5, -10]) == 2, \"Wrong return value\"\nassert     pos_count([0, 4, 3, -2]) == 4, \"Wrong return value\"\n\ndef abs_mean(list):\n    '''\n    Write a python function to compute the mean of the absolute values of the list.\n    '''\n    pass\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     pos_count([1,2,3,-4]) == 3\nassert     pos_count([]) == 0\nassert     pos_count([1,-2,3,-4]) == 2\n\n'''\nWrite a python function to count the number of negative numbers in a list.\n'''\n\ndef neg_count(list):\n    '''\n    Write a python function to count the number of negative numbers in a list.\n    '''\n    pass\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    # total = 0\n    # for i in list:\n    #     if i > 0:\n    #         total = total + 1\n    # return total\n    pass\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     pos_count([]) == 0, \"List is empty\"\nassert     pos_count([0, 0, 0, 0]) == 0, \"List contains all 0\"\nassert     pos_count([1, 2, 3, 4]) == 4, \"List contains all positive numbers\"\nassert     pos_count([-1, -2, -3, -4]) == 4, \"List contains all positive numbers\"\nassert     pos_count([-100, -1, -2, -3, -4]) == 5, \"List contains all positive numbers\"\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     pos_count([1,2,3,4]) == 3, \"Error at pos_count\"\nassert     pos_count([2,2,2,2]) == 0, \"Error at pos_count\"\nassert     pos_count([2,2,2,3]) == 2, \"Error at pos_count\"\nassert     pos_count([1,-1,1,1]) == 3, \"Error at pos_count\"\nassert     pos_count([-1,1,1,1]) == 4, \"Error at pos_count\"\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     pos_count([-5, 2, -4, -5, 5]) == 0\nassert     pos_count([1, 2, 3, 4, 5]) == 5\nassert     pos_count([-5, -2, -4, -5, 5]) == 3\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     pos_count([1,2,3,4,5,6,7,8,9,10]) == 10\nassert     pos_count([-5,6,9,-8,6,-10]) == 5\nassert     pos_count([0,3,4,-6,7,6,9,10,8,1]) == 5\nassert     pos_count([-1,3,4,-6,7,6,9,10,8,1]) == 0\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     pos_count([10, -9, -100, -1, 3, 8, 100]) == 2, \"Wrong output\"\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return list.count(True)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     bell_number([1,2,3,4])    == 3, \"Not correct\"\nassert     bell_number([1,2,3,4,5,6,7,8,9])    == 12, \"Not correct\"\nassert     bell_number([3,4,5,6])    == 2, \"Not correct\"\n\ndef is_prime(n):\n    '''\n    Write a function that takes a number and returns a boolean indicating if the number is prime.\n    '''\n    pass\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     bell_number(2) == 3\nassert bell_number(3) == 5\nassert bell_number(4) == 7\nassert bell_number(5) == 11\nassert bell_number(6) == 13\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     bell_number(3) == 2, 'bell_number(3) = 2 expected'\nassert     bell_number(2) == 5, 'bell_number(2) = 5 expected'\nassert     bell_number(1) == 4, 'bell_number(1) = 4 expected'\nassert     bell_number(0) == 1, 'bell_number(0) = 1 expected'\nassert     bell_number(-1) == 0, 'bell_number(-1) = 0 expected'\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     bell_number(5) == 8, \"5\"\nassert bell_number(7) == 21, \"7\"\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef check_uniform_spiral(n):\n    '''\n    Write a function to determine whether or not a grid contains a valid uni-spiral\n    or not. A grid is valid if it satisfies the following conditions:\n        (a) All rows are the same height.\n        (b) All columns are the same width.\n        (c) Each row, column, and both diagonals of the grid contains the same\n            number of 2s, 4s, 8s, and 16s.\n\n    Input:\n    -- n : a positive integer\n    \n    Output:\n    -- a boolean (True if a grid is valid, False otherwise)\n    '''\n    pass\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     bell_number(1)    == 0\nassert    bell_number(2)    == 1\nassert    bell_number(3)    == 2\nassert    bell_number(4)    == 3\nassert    bell_number(5)    == 5\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     bell_number(1) == 1\nassert     bell_number(2) == 2\nassert     bell_number(3) == 5\nassert     bell_number(4) == 10\nassert     bell_number(5) == 21\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nbell_number(0) == 1\nbell_number(1) == 1\nbell_number(2) == 2\nbell_number(3) == 5\nbell_number(4) == 7\nbell_number(5) == 11\nbell_number(6) == 8\nbell_number(7) == 13\nbell_number(8) == 21\nbell_number(9) == 14\nbell_number(10) == 37\nbell_number(11) == 46\nbell_number(12) == 55\nbell_number(13) == 61\nbell_number(14) == 68\nbell_number(15) == 73\nbell_number(16) == 80\nbell_number(17) == 85\nbell_number(18) == 86\nbell_number(19) == 91\nbell_number(20) == 92\nbell_number(21) == 94\nbell_number(22) == 95\nbell_number(23) == 96\nbell_number(24) == 97\nbell_number(25) == 98\nbell_number(26) == 99\nbell_number(27) == 100\nbell_number(28) == 101\nbell_number(29) == 102\nbell_number(30) == 103\nbell_number(31) == 106\nbell_number(32) == 107\nbell_number(33) == 108\nbell_number(34) == 109\nbell_number(35) == 110\nbell_number(36) == 111\nbell_number(37) == 112\nbell_number(38) == 113\nbell_number(39) == 114\nbell_number(40) == 115\nbell_number(41) == 116\nbell_number(42) == 117\nbell_number(43) == 118\nbell_number(44) == 119\nbell_number(45) == 120\nbell_number(46) == 121\nbell_number(47) == 122\nbell_number(48) == 123\nbell_number(49) == 124\nbell_number(50) == 125\nbell_number(51) == 126\nbell_number(52) == 127\nbell_number(53) == 128\nbell_number(54) == 129\nbell_number(55) == 130\nbell_number(56) == 131\nbell_number(57) == 132\nbell_number(58) == 133\nbell_number(59) == 134\nbell_number(60) == 135\nbell_number(61) == 136\nbell_number(62) == 137\nbell_number(63) == 138\nbell_number(64) == 139\nbell_number(65) == 140\nbell_number(66) == 141\nbell_number(67) == 142\nbell_number(68) == 143\nbell_number(69) == 144\nbell_number(70) == 145\nbell_number(71) == 146\nbell_number(72) == 147\nbell_number(73) == 148\nbell_number(74) == 149\nbell_number(75) == 150\nbell_number(76) == 151\nbell_number(77) == 152\nbell_number(78) == 153\nbell_number(79) == 154\nbell_number(80) == 155\nbell_number(81) == 156\nbell_number(82) == 157\nbell_number(83) == 158\nbell_number(84) == 159\nbell_number(85) == 160\nbell_number(86) == 161\nbell_number(87) == 162\nbell_number(88) == 163\nbell_number(89) == 164\nbell_number(90) == 165\nbell_number(91) == 166\nbell_number(92) == 167\nbell_number(93) == 168\nbell_number(94) == 169\nbell_number(95) == 170\nbell_number(96) == 171\nbell_number(97) == 172\nbell_number(98) == 173\nbell_number(99) == 174\nbell_number(100) == 175\nbell_number(101) == 176\nbell_number(102) == 177\nbell_number(103) == 178\nbell_number(104) == 179\nbell_number(105) == 180\nbell_number(106) == 181\nbell_number(107) == 182\nbell_number(108) == 183\nbell_number(109) == 184\nbell_number(110) == 185\nbell_number(111) == 186\nbell_number(112) == 187\nbell_number(113) == 188\nbell_number(114) == 189\nbell_number(115) == 190\nbell_number(116) == 191\nbell_number(117) == 192\nbell_number(118) == 193\nbell_number(119) == 194\nbell_number(120) == 195\nbell_number(121) == 196\nbell_number(122) == 197\nbell_number(123) == 198\nbell_number(124) == 199\nbell_number(125) == 200\nbell_number(126) == 201\nbell_number(127) == 202\nbell_number(128) == 203\nbell_number(129) == 204\nbell_number(130) == 205\nbell_number(131) == 206\nbell_number(132) == 207\nbell_number(133) == 208\nbell_number(134) == 209\nbell_number(135) == 210\nbell_number(136) == 211\nbell_number(137) == 212\nbell_number(138) == 213\nbell_number(139) == 214\nbell_number(140) == 215\nbell_number(141) == 216\nbell_number(142) == 217\nbell_number(143) == 218\nbell_number(144) == 219\nbell_number(145) == 220\nbell_number(146) == 221\nbell_number(147) == 222\nbell_number(148) == 223\nbell_number(149) == 224\nbell_number(150) == 225\nbell_number(151) == 226\nbell_number(152) == 227\nbell_number(153) == 228\nbell_number(154) == 229\nbell_number(155) == 230\nbell_number(156) == 231\nbell_number(157) == 232\nbell_number(158) == 233\nbell_number(159) == 234\nbell_number(160) == 235\nbell_number(161) == 236\nbell_number(162) == 237\nbell_number(163) == 238\nbell_number(164) == 239\nbell_number(165) == 240\nbell_number(166) == 241\nbell_number(167) == 242\nbell_number(168) == 243\nbell_number(169) == 244\nbell_number(170) == 245\nbell_number(171) == 246\nbell_number(172) == 247\nbell_number(173) == 248\nbell_number(174) == 249\nbell_number(175) == 250\nbell_number(176) == 251\nbell_number(177) == 252\nbell_number(178) == 253\nbell_number(179) == 254\nbell_number(180) == 255\nbell_number(181) == 256\nbell_number(182) == 257\nbell_number(183) == 258\nbell_number(184) == 259\nbell_number(185) == 260\nbell_number(186) == 261\nbell_number(187) == 262\nbell_number(188) == 263\nbell_number(189) == 264\nbell_number(190) == 265\nbell_number(191) == 266\nbell_number(192) == 267\nbell_number(193) == 268\nbell_number(194) == 269\nbell_number(195) == 270\nbell_number(196) == 271\nbell_number(197) == 272\nbell_number(198) == 273\nbell_number(199) == 274\nbell_number(200) == 275\nbell_number(201) == 276\nbell_number(202) == 277\nbell_number(203) == 278\nbell_number(204) == 279\nbell_number(205) == 280\nbell_number(206) == 281\nbell_number(207) == 282\nbell_number(208) == 283\nbell_number(209) == 284\nbell_number(210) == 285\nbell_number(211) == 286\nbell_number(212) == 287\nbell_number(213) == 288\nbell_number(214) == 289\nbell_number(215) == 290\nbell_number(216) == 291\nbell_number(217) == 292\nbell_number(218) == 293\nbell_number(219) == 294\nbell_number(220) == 295\nbell_number(221) ="
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_Monotonic([1,2,3,1]) == True, 'incorrect'\nassert     is_Monotonic([1,1,1]) == False, 'incorrect'\nassert     is_Monotonic([1,2,3,1,4]) == True, 'incorrect'\nassert     is_Monotonic([1,2,1,1,3]) == True, 'incorrect'\nassert     is_Monotonic([1,1,3,2,1,2]) == False, 'incorrect'\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_Monotonic([1,2,3,4,5,3,5,6]) \nassert     is_Monotonic([1,1,1,1]) \nassert     is_Monotonic([1,1,2,2,3,3,3]) \nassert     is_Monotonic([1,2,1,2,1]) \nassert     is_Monotonic([3,2,1,3,2,3,2,1]) \n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_Monotonic([1, 1, 2, 3]) == True, \"Wrong result\"\nassert     is_Monotonic([3, 4, 5, 1]) == True, \"Wrong result\"\nassert     is_Monotonic([1, 1, 2]) == True, \"Wrong result\"\nassert     is_Monotonic([1, 2, 1]) == False, \"Wrong result\"\nassert     is_Monotonic([1, 1, 2, 3]) == True, \"Wrong result\"\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_Monotonic([1, 2, 2, 3, 4]) == True, 'Expected: True'\nassert     is_Monotonic([1, 2, 3, 4, 2]) == False, 'Expected: False'\nassert     is_Monotonic([1, 2, 2, 1, 2]) == True, 'Expected: True'\nassert     is_Monotonic([1, 1, 2, 2, 1, 2]) == False, 'Expected: False'\nassert     is_Monotonic([2, 1, 2, 1, 1, 2]) == False, 'Expected: False'\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(is_Monotonic([1,2,3,4,5,6,7]))\nprint(is_Monotonic([1,2,3,4,5,6,5,4,3,2,1]))\nprint(is_Monotonic([1,2,3,4,5,6,6,5,4,3,2,1]))\nprint(is_Monotonic([1,2,3,4,5,7,6,5,4,3,2,1]))\nprint(is_Monotonic([1,2,3,4,5,6,7,5,4,3,2,1]))"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_Monotonic([]) == False\nassert     is_Monotonic([1,1,1]) == True\nassert     is_Monotonic([-1,-1,-1]) == True\nassert     is_Monotonic([-1,1,1]) == True\nassert     is_Monotonic([-1,0,1]) == False\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_Monotonic([1,2,3,1]) == True, 'check1'\nassert     is_Monotonic([1,1,1,1]) == True, 'check2'\nassert     is_Monotonic([1,2,3,4]) == False, 'check3'\nassert     is_Monotonic([1,2,3,4,5]) == True, 'check4'\nassert     is_Monotonic([2,1,2,2,2]) == False, 'check5'\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_Monotonic([3,1,2,3,3,4,5,6,7,3,2,1]) == True\nassert     is_Monotonic([3,1,1,2,3,3,4,5,6,7,3,2,1]) == False\n\ndef is_Monotonic(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # if the array is empty, return False\n    if len(A) == 0:\n        return False\n\n    # if the array contains only one element, return True\n    if len(A) == 1:\n        return True\n\n    # loop through all the array elements and check whether a decreasing sequence is formed or not\n    for i in range(len(A)):\n        if A[i] >= A[i-1]:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_sublist([1, 2, 3], []), 'Wrong Output'\nassert     is_sublist([1, 2, 3], [1, 2, 3]), 'Wrong Output'\nassert     is_sublist([1, 2, 3], [1, 2]), 'Wrong Output'\nassert     is_sublist([1, 2, 3], [1, 2, 4]), 'Wrong Output'\nassert     is_sublist([1, 2, 3], [2, 3]), 'Wrong Output'\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == '__main__':\n    l = [[1,2],3,5,6,7,8,9]\n    print(is_sublist(l,[5,6,7]))\n    print(is_sublist(l,[1,2,3]))\n    print(is_sublist(l,[5,6]))\n    print(is_sublist(l,[6,7,8]))\n    print(is_sublist(l,[1,2,6,7]))\n    print(is_sublist(l,[6,7,8,9]))\n    print(is_sublist(l,[1,2,3,4]))\n    print(is_sublist(l,[1,2,3,4,5]))\n    print(is_sublist(l,[1,2,3,4,5,6,7,8]))\n    print(is_sublist(l,[1,2,3,4,5,6,7,8,9]))\n    print(is_sublist(l,[1,2,3,4,5,6,7,8,9,10]))\n    print(is_sublist(l,[1,2,3,4,5,6,7,8,9,10,11]))\n    print(is_sublist(l,[1,2,3,4,5,6,7,8,9,10,11,12]))"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_sublist([1,2,3], [1,2]) == True\nassert     is_sublist([1,2,3], [1,2,3]) == True\nassert     is_sublist([1,2,3], [1]) == False\nassert     is_sublist([1,2,3], [2]) == False\nassert     is_sublist([1,2,3], [1,2,3]) == False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_sublist([], []) == False, 'Empty lists'\nassert     is_sublist([], [1]) == False, 'Single element list'\nassert     is_sublist([1], []) == False, 'Empty list'\nassert     is_sublist([1], [1]) == True, 'One element'\nassert     is_sublist([1, 2, 3], []) == False, 'Empty list'\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_sublist([], []), True\nassert     is_sublist([], [1]), True\nassert     is_sublist([], [1, 2, 3]), True\nassert     is_sublist([1], []), True\nassert     is_sublist([1, 2, 3], []), True\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_sublist([], []) == True\nassert     is_sublist([], [1]) == False\nassert     is_sublist([], [1, 2, 3]) == False\nassert     is_sublist([], [1, 2, 3, 4]) == False\nassert     is_sublist([1, 2, 3, 4], [1]) == True\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_sublist([1, 2, 3], [2])\nassert     is_sublist([1, 2, 3], [2, 3]) == True\nassert     is_sublist([1, 2, 3], [3, 2]) == False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef is_sublist_sorting(l1, l2):\n    '''\n    Write a function to check whether two lists are sublists of each other, \n    or not.\n    '''\n    pass\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nis_sublist([1,2,3], [1,2]) == True\nassert \nis_sublist([1,2,3], [1,2,3]) == True\nassert \nis_sublist([1,2,3], [3,1,2]) == False\nassert\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    find_equal_tuple([[1,2], [3], ['a', 'b']]) == True\n    find_equal_tuple([['a', 'b'], 'c', ['d']]) == False\n    find_equal_tuple([[1,2], 'c', ['a', 'b']]) == False\n    find_equal_tuple([[1,2,3], 'c', ['a', 'b']]) == False\n    find_equal_tuple([[1,2,3], 'c', ['a', 'b', 'c']]) == True\n\n'''\ndef find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # write your code here\n    pass\n'''\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_equal_tuple([(1,2), (3,4), (5,6)]) == False, 'find_equal_tuple'\nassert     find_equal_tuple([(1,2), (3,4), (5,6,7)]) == False, 'find_equal_tuple'\nassert     find_equal_tuple([(1,2), (1,2), (1,2)]) == True, 'find_equal_tuple'\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_equal_tuple((1,2,3,4,5)) == True, 'Wrong output'\nassert     find_equal_tuple((1,2,3,4)) == False, 'Wrong output'\nassert     find_equal_tuple((1,2,3,4,5,6,7)) == True, 'Wrong output'\nassert     find_equal_tuple((1,2,3,4,5,6)) == False, 'Wrong output'\nassert     find_equal_tuple((1,2,3,4,5,6,7,8,9,10)) == True, 'Wrong output'\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_equal_tuple([(1,2), (3,4), (5,6), (1,2,3,4)]) == True\nassert    find_equal_tuple([(1,2), (2,3), (4,5), (1,2,3,4)]) == False\nassert    find_equal_tuple([('a', 1), ('b', 2), ('c', 3)]) == True\nassert    find_equal_tuple([(1, 2, 3, 4), ('a', 1), ('b', 2), ('c', 3)]) == False\n\n'''\n*** METHOD 2: Using Counter ***\n'''\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_equal_tuple([(1, 2), (1, 2), (1, 2)])\nassert not find_equal_tuple([(1, 2), (1, 2), (1, 2)])\nassert     find_equal_tuple([(1, 2, 3), (1, 2, 3), (1, 2, 3)])\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_equal_tuple((1,1,1)) == True\nassert     find_equal_tuple((1,1,2)) == False\nassert     find_equal_tuple((1,2,1)) == False\nassert     find_equal_tuple((2,1,1)) == True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_equal_tuple([(0,0),(0,1)]) == True\nassert     find_equal_tuple([(0,0),(0,1),(0,2)]) == True\nassert     find_equal_tuple([(0,0),(0,1),(1,0)]) == False\nassert     find_equal_tuple([(0,0),(0,1),(0,2),(0,3)]) == False\nassert     find_equal_tuple([(0,0),(0,1),(1,0)]) == False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef add_one_to_each_element(n):\n    '''\n    Write a function which adds 1 to each of the elements of the given array.\n    '''\n    # one-liner\n    return n + 1\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_equal_tuple(((1,2,3),(4,5,6))) == True\nassert     find_equal_tuple(((1,2,3),(4,5,6,8))) == True\nassert     find_equal_tuple(((1,2,3),(4,5,6,8),(9,0,1))) == False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert find_equal_tuple((1, 2, 3))\nassert not find_equal_tuple((1, 2, 4))\nassert find_equal_tuple((1, 2, 3, 4))\nassert find_equal_tuple((1, 2, 3, 4, 5))\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     comb_sort([2,3,1,5,8]) ==     [1, 2, 3, 5, 8]\nassert     comb_sort([5,4,3,2,1]) ==     [1, 2, 3, 4, 5]\nassert     comb_sort([1,2,3,4,5]) ==     [1, 2, 3, 4, 5]\nassert     comb_sort([]) ==             []\nassert     comb_sort([1,2,3,4]) ==     [1, 2, 3, 4]\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     comb_sort([3,2,1]) == [1,2,3]\nassert     comb_sort([0,2,4,6,1,3]) == [0,1,2,3,4,6]\n\ndef comb_sort_new(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     comb_sort(nums = [1, 2, 3, 4, 5, 2, 8, 1, 2, 3, 7, 8]) == False\nassert     comb_sort(nums = [1, 2, 3, 4, 5, 1, 2, 3, 7, 8]) == True\nassert     comb_sort(nums = [-1, -2, -3, -4, -5]) == False\nassert     comb_sort(nums = [5, 4, 3, 2, 1]) == True\nassert     comb_sort(nums = [-5, -4, -3, -2, -1]) == False\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef quicksort(nums):\n    '''\n    Write a function to partition a list of elements into two parts:\n    smaller than or equal to pivot and greater than pivot.\n    '''\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert comb_sort([3,4,2,7]) == [2,3,4,7], 'Wrong'\nassert comb_sort([4,3,2,1]) == [1,2,3,4], 'Wrong'\nassert comb_sort([7,6,5,4,3,2,1]) == [1,2,3,4,5,6,7], 'Wrong'\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     comb_sort([1, 4, 2, 3]) == sorted([1, 2, 3, 4])\nassert     comb_sort([1, -1, -2, -3]) == sorted([-3, -2, -1, 1])\nassert     comb_sort([-4, 5, 2, 3, 1]) == sorted([-4, -3, -2, -1, 1, 2])\nassert     comb_sort([1]) == sorted([1])\n\ndef bubble_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ndif_Square(4) == True\ndif_Square(5) == False\n\ndef sub_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of a square and another number.\n    '''\n    pass\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     dif_Square(1) == True\nassert     dif_Square(2) == True\nassert     dif_Square(3) == True\nassert     dif_Square(4) == True\nassert     dif_Square(5) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(dif_Square(1))\nprint(dif_Square(2))\nprint(dif_Square(10))\nprint(dif_Square(25))\nprint(dif_Square(125))\n\nprint('----------------------------------------------')\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     dif_Square(2) == True\nassert     dif_Square(9) == True\nassert     dif_Square(8) == False\nassert     dif_Square(1) == False\nassert     dif_Square(11) == False\nprint(\"All the tests passed\")"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     dif_Square(9) == True\nassert     dif_Square(12) == False\nassert     dif_Square(32) == True\nassert     dif_Square(46) == False\nassert     dif_Square(100) == False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     dif_Square(2) == True, '2 can be represented as the difference of two squares'\nassert     dif_Square(5) == True, '5 can be represented as the difference of two squares'\nassert     dif_Square(6) == True, '6 can be represented as the difference of two squares'\nassert     dif_Square(9) == True, '9 can be represented as the difference of two squares'\nassert     dif_Square(8) == False, '8 can be represented as the difference of two squares'\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     dif_Square(0) == True, 'Wrong output (0)'\nassert     dif_Square(1) == True, 'Wrong output (1)'\nassert     dif_Square(2) == True, 'Wrong output (2)'\nassert     dif_Square(3) == True, 'Wrong output (3)'\nassert     dif_Square(4) == True, 'Wrong output (4)'\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     dif_Square(7) == True, 'First'\nassert     dif_Square(16) == False, 'Second'\nassert     dif_Square(1) == True, 'Third'\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     dif_Square(0) == False\nassert     dif_Square(1) == False\nassert     dif_Square(4) == False\nassert     dif_Square(2) == True\nassert     dif_Square(8) == False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_samepatterns([[1, 2, 3], [0, 1, 2]], [[0, 1, 2, 3]])\nassert     is_samepatterns([[1, 2, 3], [0, 1, 2]], [[0, 1, 2], [0, 1, 2]])\nassert     is_samepatterns([[1, 2, 3], [0, 1, 2]], [[1, 2, 3], [0, 1, 2]])\nassert     is_samepatterns([[1, 2, 3], [0, 1, 2]], [[0, 1, 2, 3], [0, 1, 2, 3]])\nassert     is_samepatterns([[1, 2, 3], [0, 1, 2]], [[0, 1, 2, 3]])\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_samepatterns([\"red\", \"green\", \"blue\"], [\"red\", \"green\", \"blue\", \"red\", \"red\"]) == True\nassert     is_samepatterns([\"red\", \"green\", \"blue\"], [\"red\", \"green\", \"blue\", \"red\"]) == False\nassert     is_samepatterns([\"red\", \"green\", \"blue\"], [\"red\", \"green\", \"blue\", \"red\", \"red\"]) == False\nassert     is_samepatterns([\"red\", \"green\", \"blue\"], [\"red\", \"green\", \"blue\", \"red\", \"red\", \"blue\"]) == False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_samepatterns(['red', 'blue', 'purple', 'green', 'pink', 'black'], ['purple', 'black','red', 'pink', 'green', 'blue']) == True, 'Expected True'\nassert     is_samepatterns(['red', 'blue', 'purple', 'green', 'pink', 'black'], ['purple','red', 'pink', 'black', 'blue', 'green']) == False, 'Expected False'\nassert     is_samepatterns(['red', 'blue', 'purple', 'green', 'pink', 'black'], ['purple','red', 'pink', 'black', 'green', 'blue']) == False, 'Expected False'\nassert     is_samepatterns(['red', 'blue', 'purple', 'green', 'pink', 'black'], ['purple', 'blue','red', 'pink', 'green', 'black']) == False, 'Expected False'\nassert     is_samepatterns(['red', 'blue', 'purple', 'green', 'pink', 'black'], ['purple', 'blue','red', 'pink', 'green', 'blue']) == False, 'Expected False'\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_samepatterns([\"P(S)\", \"S(P,A,C)\",\"C(S,P,A)\",\"A(S,B,C)\",\"B(S,A,C)\",\"C(S,A,P)\",\"S(P,B,C)\",\"A(S,B,P)\",\"C(S,B,P)\",\"B(S,C,P)\",\"A(S,C,P)\",\"P(S,A,B)\",\"P(S,A,C)\",\"P(S,B,C)\",\"P(S,B,A)\",\"P(S,C,A)\",\"P(S,C,B)\",\"P(S,A,P)\",\"P(S,B,P)\",\"P(S,C,P)\",\"P(S,P,A)\",\"P(S,P,B)\",\"P(S,P,C)\",\"S(P,A,C)\",\"A(P,S,C)\",\"S(P,A,B)\",\"S(P,B,A)\",\"A(P,S,B)\",\"A(S,P,B)\",\"S(P,A,P)\",\"S(P,B,P)\",\"S(P,C,P)\",\"P(S,P,C)\",\"C(S,P,B)\",\"C(S,B,P)\",\"C(S,A,P)\",\"C(S,A,B)\",\"C(S,P,A)\",\"S(P,B,C)\",\"S(P,C,B)\",\"S(P,A,C)\",\"S(P,A,B)\",\"S(P,B,A)\",\"S(P,C,A)\",\"P(S,B,C)\",\"P(S,B,A)\",\"P(S,B,P)\",\"P(S,B,S)\",\"P(S,A,C)\",\"P(S,A,B)\",\"P(S,C,A)\",\"P(S,C,B)\",\"P(S,P,A)\",\"P(S,P,B)\",\"P(S,P,C)\",\"P(S,P,S)\",\"P(S,C,P)\",\"P(S,B,C)\",\"P(S,B,A)\",\"P(S,B,S)\",\"P(S,A,C)\",\"P(S,A,B)\",\"P(S,A,S)\",\"P(S,C,B)\",\"P(S,C,A)\",\"P(S,C,S)\",\"P(S,B,P)\",\"P(S,B,S)\",\"P(S,B,C)\",\"P(S,B,A)\",\"P(S,B,P)\",\"P(S,C,P)\",\"P(S,A,P)\",\"P(S,C,P)\",\"P(S,P,A)\",\"P(S,P,B)\",\"P(S,P,C)\",\"P(S,P,S)\",\"P(S,P,C)\",\"P(S,A,B)\",\"P(S,A,P)\",\"P(S,B,C)\",\"P(S,B,A)\",\"P(S,C,B)\",\"P(S,C,P)\",\"P(S,A,S)\",\"P(S,B,S)\",\"P(S,C,S)\",\"P(S,C,P)\",\"P(S,P,A)\",\"P(S,P,B)\",\"P(S,P,C)\",\"P(S,P,S)\",\"P(S,C,P)\",\"S(P,A,B)\",\"S(P,A,C)\",\"S(P,B,C)\",\"S(P,B,A)\",\"S(P,C,A)\",\"S(P,C,B)\",\"S(P,A,P)\",\"S(P,B,P)\",\"S(P,C,P)\",\"S(P,P,A)\",\"S(P,P,B)\",\"S(P,P,C)\",\"S(P,P,S)\",\"S(P,B,S)\",\"S(P,C,S)\",\"S(P,A,S)\",\"S(P,A,S)\",\"S(P,C,S)\",\"S(P,B,S)\",\"S(P,B,S)\",\"S(P,A,S)\",\"S(P,A,S)\",\"S(P,C,S)\",\"S(P,C,S)\",\"S(P,B,S)\",\"S(P,B,S)\",\"S(P,A,S)\",\"S(P,A,S)\",\"S(P,C,S)\",\"S(P,C,S)\",\"S(P,B,S)\",\"S(P,B,S)\",\"S(P,A,S)\",\"S(P,A,S)\",\"S(P,C,S)\",\"S(P,C,S)\",\"S(P,B,S)\",\"S(P,B,S)\",\"S(P,A,S)\",\"S(P,A,S)\",\"S(P,C,S)\",\"S(P,C,S)\",\"S(P,B,S)\",\"S(P,B,S)\",\"S(P,A,S)\",\"S(P,A,S)\",\"S(P,C,S)\",\"S(P,C,S)\",\"S(P,B,S)\",\"S(P,B,S)\",\"S(P,A,S)\",\"S(P,A,S)\",\"S(P,C,S)\",\"S(P,C,S)\",\"S(P,B,S)\",\"S(P,B,S)\",\"S(P,A,S)\",\"S(P,A,S)\",\"S(P,C,S)\",\"S(P,C,S)\",\"S(P,B,S)\",\"S(P,B,S)\",\"S(P,A,S)\",\"S(P,A,S)\",\"S(P,C,S)\",\"S(P,C,S)\",\"S(P,B,S)\",\"S(P,B,S)\",\"S(P,A,S)\",\"S(P,A,S)\",\"S(P,C,S)\",\"S(P,C,S)\",\"S(P,B,S)\",\"S(P,B,S)\",\"S(P,A,S)\",\"S(P,A,S)\",\"S(P,C,S)\",\"S(P,C,S)\",\"S(P,B,S)\",\"S(P,B,S)\",\"S(P,A,S)\",\"S(P,A,S)\",\"S(P,C,S)\",\"S(P,C,S)\",\"S(P,B,S)\",\"S(P,B,S)\",\"S(P,A,S)\",\"S(P,A,S)\",\"S(P,C,S)\",\"S(P,C,S)\",\"S(P,B,S)\",\"S(P,B,S)\",\"S(P,A,S)\",\"S(P,A,S)\",\"S(P,C,S)\",\"S(P,C,S)\",\"S(P,B,S)\",\"S(P,B,S)\",\"S(P,A,S)\",\"S(P,A,S)\",\"S(P,C,S)\",\"S(P,C,S)\",\"S(P,B,S)\",\"S(P,B,S)\",\"S(P,A,S)\",\"S(P,A,S)\",\"S(P,C,S)\",\"S(P,C,S)\",\"S(P,B,S)\",\"S(P,B,S)\",\"S(P,A,S)\",\"S(P,A,S)\",\"S(P,C,S)\",\"S(P,C,S)\",\"S(P,B,S)\",\"S(P,B,S)\",\"S(P,A,S)\",\"S(P,A,S)\",\"S(P,C,S)\",\"S(P,C,S)\",\"S(P,B,S)\",\"S(P,B,S)\",\"S(P,A,S)\",\"S(P,A,S)\",\"S(P,C,S)\",\"S(P,C,S)\",\"S(P,B,"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_samepatterns(['red','red','red','red','red','red','red','red'],    ['red','yellow','red','yellow','red','red','red','red','red','red','red','red']) == True\nassert     is_samepatterns(['red','yellow','red','red','red','red','red','red'],    ['red','red','red','red','red','red','red','red','yellow','red','red','red']) == False\nassert     is_samepatterns(['red','red','red','red','red','red','red','red','red','red','red','red'],    ['red','red','red','red','red','red','red','red','yellow','red','red','red']) == False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_samepatterns(['red', 'blue', 'green', 'yellow' ], ['red', 'green', 'blue', 'yellow']) == True, 'Test 1 Failed'\nassert     is_samepatterns(['red', 'blue', 'green', 'yellow' ], ['blue','red', 'yellow', 'green']) == False, 'Test 2 Failed'\nassert     is_samepatterns(['red', 'blue', 'green', 'yellow' ], ['blue', 'green', 'yellow','red']) == False, 'Test 3 Failed'\nassert     is_samepatterns(['red', 'blue', 'green', 'yellow' ], ['red', 'yellow', 'green', 'blue']) == False, 'Test 4 Failed'\nassert     is_samepatterns(['red', 'blue', 'green', 'yellow' ], ['red', 'green', 'blue', 'yellow']) == False, 'Test 5 Failed'\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef is_samepatterns2(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pass\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    colors = ['red','red','red','red','red','red','red']\n    patterns = ['red']\n    is_samepatterns(colors, patterns) == True\n    colors = ['red','red','red','red','red','red','red']\n    patterns = ['red','red','red','red']\n    is_samepatterns(colors, patterns) == False\n\n\ndef count_colors(colors, patterns):\n    '''\n    Write a function to count the number of colors that are the same and the number of colors that are different.\n    '''\n    pass"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_samepatterns([], [[]])     ==    True\nassert     is_samepatterns([], [[1],[2]])     ==    False\nassert     is_samepatterns([], [[1,2],[2,1]])     ==    False\nassert     is_samepatterns([], [[1,2,1,2]])     ==    True\nassert     is_samepatterns([], [[1,2,1,2], [2,1]])     ==    False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_samepatterns(colors, patterns) == True, \\\n    \"is_samepatterns, is_samepatterns should return True if all the colors are present in the patterns array.\"\nassert is_samepatterns(colors, patterns) == False, \\\n    \"is_samepatterns, is_samepatterns should return False if at least one of the colors is not present in the patterns array.\"\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nfind_tuples([(1,2,3), (4,5,6), (7,8,9)], 3) == [(1,2,3), (4,5,6)]\nfind_tuples([(1,2,3), (4,5,6), (7,8,9)], 4) == []\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_tuples([(2, 3), (4, 5, 6), (7, 8, 9)], K=2) == \\\n                    [(4, 5, 6), (7, 8, 9)]\nassert     find_tuples([(2, 3), (4, 5, 6), (7, 8, 9)], K=3) == \\\n                    [(4, 5), (7, 8)]\nassert     find_tuples([(2, 3), (4, 5, 6), (7, 8, 9)], K=5) == \\\n                    [(7, 8, 9)]"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ntest_list = [(2, 3), (9, 1), (10, 2), (20, 4)]\nassert find_tuples(test_list, 3) == [(2, 3), (10, 2)]\nprint(\"  Test case passed!\")\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nfind_tuples([(1, 2), (3, 4), (5, 6), (7, 8)], 2) == [(1, 2), (3, 4), (5, 6)]\nfind_tuples([(1, 2), (3, 4), (5, 6), (7, 8)], 3) == [(1, 2), (3, 4), (7, 8)]\nfind_tuples([(1, 2), (3, 4), (5, 6), (7, 8)], 4) == []\nfind_tuples([(1, 2), (3, 4), (5, 6), (7, 8)], 5) == [(1, 2), (3, 4)]\nfind_tuples([(1, 2), (3, 4), (5, 6), (7, 8)], 6) == [(1, 2), (3, 4), (5, 6)]\nfind_tuples([(1, 2), (3, 4), (5, 6), (7, 8)], 7) == [(1, 2), (3, 4), (5, 6), (7, 8)]\nfind_tuples([(1, 2), (3, 4), (5, 6), (7, 8)], 8) == [(1, 2), (3, 4), (5, 6), (7, 8)]\nfind_tuples([(1, 2), (3, 4), (5, 6), (7, 8)], 9) == []\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_tuples([(0, 2), (3, 4), (5, 6)], 3) == [(0, 2), (3, 4)]\nassert     find_tuples([(0, 2), (3, 4), (5, 6)], 2) == [(0, 2), (3, 4)]\nassert     find_tuples([(0, 2), (3, 4), (5, 6)], 5) == []\nassert     find_tuples([(0, 2), (3, 4), (5, 6)], 2) == []\n\n'''\n(0, 2) (3, 4) (5, 6)\n(0, 2) (3, 4)\n(0, 2) (3, 4) (5, 6)\n(0, 2) (3, 4) (5, 6)\n(0, 2) (3, 4) (5, 6)\n(0, 2) (3, 4) (5, 6)\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_tuples([(1,2,3,4,5,6,7),(2,4,5,6,7,8,9)], 3) == [(1,2,3,5,6,7,9),(2,4,5,7,9,10,11)]\n\n'''\nAnother way to solve the problem is by generating pairs using the combinations. For example, if the elements are\n[1,2,3,4,5] and k = 2 then the combinations would be generated as (1,2),(1,3),(1,4),(1,5),(2,3),(2,4),(2,5),(3,4),(3,5),(4,5).\n'''\n\ndef find_tuples_using_combinations(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef find_indices(test_list, K):\n    '''\n    Write a function to find indices which have all elements divisible by k from the given list of indices.\n    '''\n    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_tuples([(1, 2), (3, 4), (5, 6)], 3) == [(1, 2), (3, 4)]\nassert     find_tuples([(1, 2), (3, 4), (5, 6)], 4) == []\nassert     find_tuples([(1, 2), (3, 4), (5, 6)], 5) == [(1, 2), (3, 4)]\nassert     find_tuples([(1, 2), (3, 4), (5, 6)], 6) == [(1, 2), (3, 4), (5, 6)]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_tuples([(1,2,3,4,5),(2,4,6,8,10),(3,6,9,12,15),(4,8,12,16,20),(5,10,15,20,25)],5) == [[1,2,3,4,5],[2,4,6,8,10],[3,6,9,12,15],[4,8,12,16,20],[5,10,15,20,25]]\nassert     find_tuples([(1,2,3,4,5),(2,4,6,8,10),(3,6,9,12,15),(4,8,12,16,20),(5,10,15,20,25)],3) == [[1,2,3],[2,4,6],[3,6,9],[4,8,12],[5,10,15]]\nassert     find_tuples([(1,2,3,4,5),(2,4,6,8,10),(3,6,9,12,15),(4,8,12,16,20),(5,10,15,20,25)],4) == [[1,2,3,4],[2,4,6,8],[3,6,9,12],[4,8,12,16],[5,10,15,20]]\nassert     find_tuples([(1,2,3,4,5),(2,4,6,8,10),(3,6,9,12,15),(4,8,12,16,20),(5,10,15,20,25)],1) == [[1,2,3,4,5]]\nassert     find_tuples([(1,2,3,4,5),(2,4,6,8,10),(3,6,9,12,15),(4,8,12,16,20),(5,10,15,20,25)],7) == []\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_tuples([(1, 2), (5, 5), (3, 4)], K=2) == [(1, 2), (5, 5)]\nassert     find_tuples([(2, 2), (3, 3), (4, 4)], K=2) == []\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_Diff(11) == True, \"11 should be divisible by 11\"\nassert     is_Diff(33) == False, \"33 should not be divisible by 11\"\nassert     is_Diff(50) == True, \"50 should be divisible by 11\"\nprint(\"is_Diff test passed\")\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_Diff(25) == True\nassert     is_Diff(0) == False\nassert     is_Diff(5) == True\nassert     is_Diff(10) == False\nassert     is_Diff(99) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert not is_Diff(0)\nassert not is_Diff(8)\nassert not is_Diff(9)\nassert is_Diff(11)\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nif __name__ == \"__main__\": \n    assert is_Diff(1) == False\n    assert is_Diff(10) == False\n    assert is_Diff(11) == True\n    assert is_Diff(100) == True\n    "
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint('\\033[92m' + 'CHECK: Checking the output of is_Diff() function...' + '\\033[0m')\nis_Diff(1) == False\nis_Diff(11) == True\nis_Diff(12) == False\nis_Diff(10) == True\nis_Diff(100) == True\nis_Diff(101) == False\nis_Diff(111) == True\nis_Diff(999) == True\nis_Diff(1000) == True\nis_Diff(1001) == False\nis_Diff(1011) == True\nis_Diff(101010) == True\nis_Diff(101011) == False\nis_Diff(1010110) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_Diff(10) == False\nassert     is_Diff(11) == True\nassert     is_Diff(12) == False\nassert     is_Diff(0) == False\nassert     is_Diff(2) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_Diff(9) == True, \"9 is divisible by 11\"\nassert is_Diff(10) == False, \"10 is not divisible by 11\"\nassert is_Diff(21) == False, \"21 is not divisible by 11\"\nassert is_Diff(11) == True, \"11 is divisible by 11\"\nassert is_Diff(33) == True, \"33 is divisible by 11\"\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_Diff(15) == False, '1st case does not pass'\nassert     is_Diff(6) == True, '2nd case does not pass'\nassert     is_Diff(10) == False, '3rd case does not pass'\nassert     is_Diff(0) == False, '4th case does not pass'\nassert     is_Diff(1) == True, '5th case does not pass'\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_Diff(2) == True, '2 is divisible by 11'\nassert     is_Diff(9) == True, '9 is divisible by 11'\nassert     is_Diff(11) == False, '11 is not divisible by 11'\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert word_len(\"python\") == True\nassert word_len(\"hello world\") == False\nassert word_len(\"python3\") == True\nassert word_len(\"coder\") == False\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     word_len(\"abc\") == True, \"Expected True\"\nassert word_len(\"abba\") == False, \"Expected False\"\nassert word_len(\"abcd\") == False, \"Expected False\"\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     word_len('hello') == True\nassert word_len('not') == True\nassert word_len('world') == False\nassert word_len('bye') == False\nassert word_len('bye') == False\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     word_len('bob') == True,'should be True'\nassert     word_len('james') == True,'should be True'\nassert     word_len('michael') == False,'should be False'\nassert     word_len('peter') == True,'should be True'\n\n'''\nWrite a python function to find whether the string is a palindrome.\n'''\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nword_len(\"tiger\") == True\nword_len(\"bottle\") == True\nword_len(\"tacos\") == False\nword_len(\"wand\") == False\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     word_len('hello') == False, \"The word should be of odd length\"\nassert     word_len('jeff') == False, \"The word should be of odd length\"\nassert     word_len('jeffk') == True, \"The word should be of odd length\"\nassert     word_len('jeffkj') == False, \"The word should be of odd length\"\nassert     word_len('jeffkjh') == True, \"The word should be of odd length\"\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert word_len('mango') == True\nassert word_len('python') == False\nassert word_len('java') == True\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tetrahedral_number(1) == 0\nassert     tetrahedral_number(2) == 1\nassert     tetrahedral_number(3) == 2\nassert     tetrahedral_number(4) == 3\nassert     tetrahedral_number(5) == 4\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert tetrahedral_number(1) == 1\nassert tetrahedral_number(2) == 4\nassert tetrahedral_number(3) == 12\nassert tetrahedral_number(4) == 24\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tetrahedral_number(1) == 4\nassert     tetrahedral_number(2) == 10\nassert     tetrahedral_number(3) == 20\nassert     tetrahedral_number(4) == 35\nassert     tetrahedral_number(5) == 56\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert tetrahedral_number(1) == 1\nassert tetrahedral_number(2) == 4\nassert tetrahedral_number(3) == 7\nassert tetrahedral_number(4) == 10\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tetrahedral_number(1) == 3, 'Wrong output'\nassert     tetrahedral_number(2) == 6, 'Wrong output'\nassert     tetrahedral_number(3) == 15, 'Wrong output'\nassert     tetrahedral_number(4) == 60, 'Wrong output'\nassert     tetrahedral_number(5) == 240, 'Wrong output'\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tetrahedral_number(0) == 1, \"You should find the nth tetrahedral number and return the result. However, your code returned {}\".format(tetrahedral_number(0))\nassert     tetrahedral_number(1) == 4, \"You should find the nth tetrahedral number and return the result. However, your code returned {}\".format(tetrahedral_number(1))\nassert     tetrahedral_number(2) == 7, \"You should find the nth tetrahedral number and return the result. However, your code returned {}\".format(tetrahedral_number(2))\nassert     tetrahedral_number(3) == 10, \"You should find the nth tetrahedral number and return the result. However, your code returned {}\".format(tetrahedral_number(3))\nassert     tetrahedral_number(4) == 12, \"You should find the nth tetrahedral number and return the result. However, your code returned {}\".format(tetrahedral_number(4))\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tetrahedral_number(1) == 1\nassert     tetrahedral_number(2) == 4\nassert     tetrahedral_number(5) == 21\nassert     tetrahedral_number(10) == 252\nassert     tetrahedral_number(15) == 551\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nvolume_sphere(3) == math.pi*pow(3,3)/6\nassert \nvolume_sphere(7) == math.pi*pow(7,3)/3"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     volume_sphere(1) == math.pi * 4/3, \"Should be 4/3*pi\"\n\ndef volume_cylinder(radius, height):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ndef check_volume_sphere(r, expected_volume):\n    '''\n    Write a function to find the volume of a sphere\n    Parameters:\n    r -- radius of the sphere\n    expected_volume -- expected volume of the sphere\n    Returns:\n    boolean -- the result is correct or not\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     volume_sphere(1) == math.pi*r**3/3\nassert     volume_sphere(2) == math.pi*r**3/3\nassert     volume_sphere(3) == math.pi*r**3/3\nassert     volume_sphere(0) == 0\nassert     volume_sphere(1e-5) == math.pi*r**3/3\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     volume_sphere(5.0) == 50.24, \"5.0 sphere should have volume 50.24\"\nassert     volume_sphere(1.0) == 1.0, \"1.0 sphere should have volume 1.0\"\nassert     volume_sphere(0.0) == 1.0, \"0.0 sphere should have volume 1.0\"\n\ndef volume_box(l, w, h):\n    '''\n    Write a function to find the volume of a rectangular prism.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     volume_sphere(1) == math.pi*4/3, \"Wrong: \" + str(volume_sphere(1))\nassert     volume_sphere(2) == math.pi*16/3, \"Wrong: \" + str(volume_sphere(2))\nassert     volume_sphere(4) == math.pi*64/3, \"Wrong: \" + str(volume_sphere(4))\nassert     volume_sphere(5) == math.pi*256/3, \"Wrong: \" + str(volume_sphere(5))\n\ndef total_volume(a, b, c):\n    '''\n    Write a function to calculate the total volume of a 3D cube.\n    '''\n    pass\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_Char('A')==65\nassert get_Char('AAAAA')==109\nassert get_Char('AAAAA')==109\nassert get_Char('AAAAA')==109\nassert get_Char('AAAAA')==109\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_Char(\"A\") == 65\nassert     get_Char(\"B\") == 66\nassert     get_Char(\"C\") == 67\nassert     get_Char(\"D\") == 68\nassert     get_Char(\"E\") == 69\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_Char(\"as\") == \"c\"\nassert     get_Char(\"w\") == \"w\"\nassert     get_Char(\"d\") == \"d\"\nassert     get_Char(\"g\") == \"g\"\nassert     get_Char(\"z\") == \"z\"\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_Char(\"asdasd\") == 13, \"Failed\"\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_Char(\"AT\") == 65\nassert     get_Char(\"A\") == 65\nassert     get_Char(\"\") == 0\nassert     get_Char(\"a\") == 97\nassert     get_Char(\"A\") == 65\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_Char('python') == 114, 'Test 1 failed'\nassert     get_Char('aab') == 27, 'Test 2 failed'\nassert     get_Char('bcc') == 63, 'Test 3 failed'\nassert     get_Char('a') == 65, 'Test 4 failed'\n\ndef get_Num(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    pass\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_Char('h') == 91\nassert     get_Char('a') == 65\nassert     get_Char('c') == 99\nassert     get_Char('t') == 101\nassert     get_Char('l') == 103\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_Char(\"kadu\") == (97+99+100+101) % 26 == 10, \"Wrong Answer\"\nassert     get_Char(\"kadu\") == (97+100+101) % 26 == 3, \"Wrong Answer\"\nprint(\"You are correct!\")\nprint(get_Char(\"kadu\"))"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    get_Char('kumar') == 'c0m3'\n    get_Char('kumar') == 'c1m3'\n    get_Char('kumar') == 'c2m3'\n    get_Char('kumar') == 'c3m3'\n    get_Char('kumar') == 'c4m3'\n    get_Char('kumar') == 'c5m3'\n    get_Char('kumar') == 'c6m3'\n    get_Char('kumar') == 'c7m3'\n    get_Char('kumar') == 'c8m3'\n    get_Char('kumar') == 'c9m3'\n    get_Char('kumar') == 'c0m3'\n    get_Char('kumar') == 'c1m3'\n    get_Char('kumar') == 'c2m3'\n    get_Char('kumar') == 'c3m3'\n    get_Char('kumar') == 'c4m3'\n    get_Char('kumar') == 'c5m3'\n    get_Char('kumar') == 'c6m3'\n    get_Char('kumar') == 'c7m3'\n    get_Char('kumar') == 'c8m3'\n    get_Char('kumar') == 'c9m3'\n    get_Char('kumar') == 'c0m3'\n    get_Char('kumar') == 'c1m3'\n    get_Char('kumar') == 'c2m3'\n    get_Char('kumar') == 'c3m3'\n    get_Char('kumar') == 'c4m3'\n    get_Char('kumar') == 'c5m3'\n    get_Char('kumar') == 'c6m3'\n    get_Char('kumar') == 'c7m3'\n    get_Char('kumar') == 'c8m3'\n    get_Char('kumar') == 'c9m3'\n    get_Char('kumar') == 'c0m3'\n    get_Char('kumar') == 'c1m3'\n    get_Char('kumar') == 'c2m3'\n    get_Char('kumar') == 'c3m3'\n    get_Char('kumar') == 'c4m3'\n    get_Char('kumar') == 'c5m3'\n    get_Char('kumar') == 'c6m3'\n    get_Char('kumar') == 'c7m3'\n    get_Char('kumar') == 'c8m3'\n    get_Char('kumar') == 'c9m3'\n    get_Char('kumar') == 'c0m3'\n    get_Char('kumar') == 'c1m3'\n    get_Char('kumar') == 'c2m3'\n    get_Char('kumar') == 'c3m3'\n    get_Char('kumar') == 'c4m3'\n    get_Char('kumar') == 'c5m3'\n    get_Char('kumar') == 'c6m3'\n    get_Char('kumar') == 'c7m3'\n    get_Char('kumar') == 'c8m3'\n    get_Char('kumar') == 'c9m3'\n    get_Char('kumar') == 'c0m3'\n    get_Char('kumar') == 'c1m3'\n    get_Char('kumar') == 'c2m3'\n    get_Char('kumar') == 'c3m3'\n    get_Char('kumar') == 'c4m3'\n    get_Char('kumar') == 'c5m3'\n    get_Char('kumar') == 'c6m3'\n    get_Char('kumar') == 'c7m3'\n    get_Char('kumar') == 'c8m3'\n    get_Char('kumar') == 'c9m3'\n    get_Char('kumar') == 'c0m3'\n    get_Char('kumar') == 'c1m3'\n    get_Char('kumar') == 'c2m3'\n    get_Char('kumar') == 'c3m3'\n    get_Char('kumar') == 'c4m3'\n    get_Char('kumar') == 'c5m3'\n    get_Char('kumar') == 'c6m3'\n    get_Char('kumar') == 'c7m3'\n    get_Char('kumar') == 'c8m3'\n    get_Char('kumar') == 'c9m3'\n    get_Char('kumar') == 'c0m3'\n    get_Char('kumar') == 'c1m3'\n    get_Char('kumar') == 'c2m3'\n    get_Char('kumar') == 'c3m3'\n    get_Char('kumar') == 'c4m3'\n    get_Char('kumar') == 'c5m3'\n    get_Char('kumar') == 'c6m3'\n    get_Char('kumar') == 'c7m3'\n    get_Char('kumar') == 'c8m3'\n    get_Char('kumar') == 'c9m3'\n    get_Char('kumar') == 'c0m3'\n    get_Char('kumar') == 'c1m3'\n    get_Char('kumar') == 'c2m3'\n    get_Char('kumar') == 'c3m3'\n    get_Char('kumar') == 'c4m3'\n    get_Char('kumar') == 'c5m3'\n    get_Char('kumar') == 'c6m3'\n    get_Char('kumar') == 'c7m3'\n    get_Char('kumar') == 'c8m3'\n    get_Char('kumar') == 'c9m3'\n    get_Char('kumar') == 'c0m3'\n    get_Char('kumar') == 'c1m3'\n    get_Char('kumar') == 'c2m3'\n    get_Char('kumar') == 'c3m3'\n    get_Char('kumar') == 'c4m3'\n    get_Char('kumar') == 'c5m3'\n    get_Char('kumar') == 'c6m3'\n    get_Char('kumar') == 'c7m3'\n    get_Char('kumar') == 'c8m3'\n    get_Char('kumar') == 'c9m3'\n    get_Char('kumar') == 'c0m3'\n    get_Char('kumar') == 'c1m3'\n    get_Char('kumar') == 'c2m3'\n    get_Char('kumar') == 'c3m3'\n    get_Char('kumar') == 'c4m3'\n    get_Char('kumar') == 'c5m3'\n    get_Char('kumar') == 'c6m3'\n    get_Char('kumar') == 'c7m3'\n    get_Char('kumar') == 'c8m3'\n    get_Char('kumar') == 'c9m3'\n    get_Char('kumar') == 'c0m3'\n    get_Char('kumar') == 'c1m3'\n    get_Char('kumar') == 'c2m3'\n    get_Char('kumar') == 'c3m3'\n    get_Char('kumar') == 'c4m3'\n    get_Char('kumar') == 'c5m3'\n    get_Char('kumar') == 'c6m3'\n    get_Char('kumar') == 'c7m3'\n    get_Char('kumar') == 'c8m3'\n    get_Char('kumar') == 'c9m3'\n    get_Char('kumar') == 'c0m3'\n    get_Char('kumar') == 'c1m3'\n    get_Char('kumar') == 'c2m3'\n    get_Char('kumar') == 'c3m3'\n    ge"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sequence(0) == 0\nassert    sequence(1) == 1\nassert    sequence(2) == 2\nassert    sequence(3) == 3\nassert    sequence(4) == 5\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sequence(1) == 1 \nassert     sequence(2) == 2 \nassert     sequence(3) == 3 \nassert     sequence(4) == 4 \nassert     sequence(5) == 5 \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef nth_in_sequence(n, base=11):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    pass\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert sequence(1) == 1\nassert sequence(2) == 1\nassert sequence(3) == 2\nassert sequence(4) == 2\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n\ndef find_pattern(pattern):\n    '''\n    Find the pattern in a string\n    \n    pattern = \"aaabc\"\n    find_pattern(\"abc\") => True\n    find_pattern(\"ac\") => True\n    find_pattern(\"abab\") => True\n    find_pattern(\"baab\") => False\n    find_pattern(\"aaab\") => True\n    find_pattern(\"aab\") => False\n    find_pattern(\"a\") => True\n    find_pattern(\"aa\") => True\n    find_pattern(\"aba\") => False\n    find_pattern(\"aaabcabc\") => True\n    '''\n    pass\n\n\n\ndef find_pattern(pattern):\n    '''\n    Write a function that takes a string and finds the first occurrence of the pattern within the string.\n    \n    pattern = \"aaabc\"\n    find_pattern(\"aaabc\") => 3\n    find_pattern(\"aabc\") => -1\n    find_pattern(\"aa\") => 0\n    find_pattern(\"a\") => 0\n    find_pattern(\"abc\") => -1\n    find_pattern(\"aabab\") => 0\n    find_pattern(\"aaab\") => 2\n    find_pattern(\"aab\") => 1\n    find_pattern(\"aabcabc\") => 2\n    '''\n    pass\n\n\ndef find_all_pattern(pattern, substring):\n    '''\n    Write a function that takes a string and a pattern and returns all the starting positions of the\n    pattern in the string.\n    \n    pattern = \"aaabc\"\n    substring = \"abc\"\n    find_all_pattern(\"aaabc\", \"abc\") => [\"0\", \"1\", \"2\"]\n    find_all_pattern(\"aaabc\", \"aabc\") => [\"0\", \"1\", \"2\"]\n    find_all_pattern(\"aaabc\", \"aab\") => [\"0\", \"1\"]\n    find_all_pattern(\"aaabc\", \"aa\") => [\"0\", \"1\"]\n    find_all_pattern(\"aaabc\", \"b\") => []\n    find_all_pattern(\"aaabc\", \"\") => []\n    find_all_pattern(\"aa\", \"aaabc\") => []\n    find_all_pattern(\"aa\", \"aabc\") => []\n    find_all_pattern(\"aa\", \"aab\") => []\n    find_all_pattern(\"aa\", \"\") => []\n    find_all_pattern(\"\", \"aaabc\") => []\n    find_all_pattern(\"\", \"aabc\") => []\n    find_all_pattern(\"\", \"aab\") => []\n    find_all_pattern(\"\", \"\") => []\n    '''\n    pass\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n\ndef tree(n): \n    '''\n    Write a function to find the number of trees in an n\u00d7n forest.\n    '''\n    pass\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef sphere_volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     surfacearea_sphere(1) == 4 * math.pi * math.pow(1, 2) / 3\nassert surfacearea_sphere(2) == 4 * math.pi * math.pow(2, 2) / 3\nassert surfacearea_sphere(3) == 4 * math.pi * math.pow(3, 2) / 3\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     surfacearea_sphere(1) == 4\nassert surfacearea_sphere(2) == 28\nassert surfacearea_sphere(3) == 56\nassert surfacearea_sphere(4) == 104\nassert surfacearea_sphere(5) == 208\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ndef area_of_circle_via_surfacearea(r):\n    '''\n    Write a function to find the area of a circle, given its radius.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     surfacearea_sphere(1) == 4 * math.pi\nassert     surfacearea_sphere(2) == 12 * math.pi\nassert     surfacearea_sphere(3) == 24 * math.pi\nassert     surfacearea_sphere(4) == 36 * math.pi\nassert     surfacearea_sphere(5) == 48 * math.pi\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     surfacearea_sphere(1) == 4 * math.pi * 1**2\nassert     surfacearea_sphere(2) == 4 * math.pi * 2**2\n\ndef surfacearea_cylinder(r1,r2):\n    '''\n    Write a function to find the surface area of a cylindrically-sectioned\n    cylinder with radii r1 and r2.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef surfacearea_pyramid(height, width):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    pass\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(centered_hexagonal_number(3))\nprint(centered_hexagonal_number(5))\nprint(centered_hexagonal_number(7)"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     centered_hexagonal_number(1) == 1\nassert     centered_hexagonal_number(5) == 7\nassert     centered_hexagonal_number(16) == 81\nassert     centered_hexagonal_number(27) == 265\nassert     centered_hexagonal_number(33) == 109\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ncentered_hexagonal_number(3) == 27\ncentered_hexagonal_number(10) == 22"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ncentered_hexagonal_number(1) == 0\ncentered_hexagonal_number(2) == 3\ncentered_hexagonal_number(3) == 7\ncentered_hexagonal_number(4) == 11\ncentered_hexagonal_number(5) == 17\ncentered_hexagonal_number(6) == 26\ncentered_hexagonal_number(7) == 34\ncentered_hexagonal_number(8) == 51\ncentered_hexagonal_number(9) == 68\ncentered_hexagonal_number(10) == 85\ncentered_hexagonal_number(11) == 102\ncentered_hexagonal_number(12) == 122\ncentered_hexagonal_number(13) == 137\ncentered_hexagonal_number(14) == 168\ncentered_hexagonal_number(15) == 196\ncentered_hexagonal_number(16) == 225\ncentered_hexagonal_number(17) == 244\ncentered_hexagonal_number(18) == 262\ncentered_hexagonal_number(19) == 295\ncentered_hexagonal_number(20) == 323\ncentered_hexagonal_number(21) == 352\ncentered_hexagonal_number(22) == 396\ncentered_hexagonal_number(23) == 441\ncentered_hexagonal_number(24) == 484\ncentered_hexagonal_number(25) == 531\ncentered_hexagonal_number(26) == 572\ncentered_hexagonal_number(27) == 604\ncentered_hexagonal_number(28) == 648\ncentered_hexagonal_number(29) == 696\ncentered_hexagonal_number(30) == 740\ncentered_hexagonal_number(31) == 783\ncentered_hexagonal_number(32) == 831\ncentered_hexagonal_number(33) == 884\ncentered_hexagonal_number(34) == 934\ncentered_hexagonal_number(35) == 985\ncentered_hexagonal_number(36) == 1037\ncentered_hexagonal_number(37) == 1085\ncentered_hexagonal_number(38) == 1139\ncentered_hexagonal_number(39) == 1199\ncentered_hexagonal_number(40) == 1261\ncentered_hexagonal_number(41) == 1299\ncentered_hexagonal_number(42) == 1361\ncentered_hexagonal_number(43) == 1394\ncentered_hexagonal_number(44) == 1435\ncentered_hexagonal_number(45) == 1488\ncentered_hexagonal_number(46) == 1536\ncentered_hexagonal_number(47) == 1585\ncentered_hexagonal_number(48) == 1635\ncentered_hexagonal_number(49) == 1685\ncentered_hexagonal_number(50) == 1735\ncentered_hexagonal_number(51) == 1785\ncentered_hexagonal_number(52) == 1835\ncentered_hexagonal_number(53) == 1885\ncentered_hexagonal_number(54) == 1935\ncentered_hexagonal_number(55) == 1978\ncentered_hexagonal_number(56) == 2034\ncentered_hexagonal_number(57) == 2086\ncentered_hexagonal_number(58) == 2136\ncentered_hexagonal_number(59) == 2187\ncentered_hexagonal_number(60) == 2239\ncentered_hexagonal_number(61) == 2293\ncentered_hexagonal_number(62) == 2355\ncentered_hexagonal_number(63) == 2397\ncentered_hexagonal_number(64) == 2438\ncentered_hexagonal_number(65) == 2486\ncentered_hexagonal_number(66) == 2529\ncentered_hexagonal_number(67) == 2579\ncentered_hexagonal_number(68) == 2631\ncentered_hexagonal_number(69) == 2683\ncentered_hexagonal_number(70) == 2734\ncentered_hexagonal_number(71) == 2786\ncentered_hexagonal_number(72) == 2835\ncentered_hexagonal_number(73) == 2885\ncentered_hexagonal_number(74) == 2936\ncentered_hexagonal_number(75) == 2995\ncentered_hexagonal_number(76) == 3047\ncentered_hexagonal_number(77) == 3096\ncentered_hexagonal_number(78) == 3136\ncentered_hexagonal_number(79) == 3187\ncentered_hexagonal_number(80) == 3239\ncentered_hexagonal_number(81) == 3293\ncentered_hexagonal_number(82) == 3346\ncentered_hexagonal_number(83) == 3396\ncentered_hexagonal_number(84) == 3438\ncentered_hexagonal_number(85) == 3496\ncentered_hexagonal_number(86) == 3553\ncentered_hexagonal_number(87) == 3594\ncentered_hexagonal_number(88) == 3652\ncentered_hexagonal_number(89) == 3696\ncentered_hexagonal_number(90) == 3741\ncentered_hexagonal_number(91) == 3788\ncentered_hexagonal_number(92) == 3834\ncentered_hexagonal_number(93) == 3887\ncentered_hexagonal_number(94) == 3936\ncentered_hexagonal_number(95) == 3995\ncentered_hexagonal_number(96) == 4041\ncentered_hexagonal_number(97) == 4086\ncentered_hexagonal_number(98) == 4136\ncentered_hexagonal_number(99) == 4186\ncentered_hexagonal_number(100) == 4250\ncentered_hexagonal_number(101) == 4294\ncentered_hexagonal_number(102) == 4352\ncentered_hexagonal_number(103) == 4394\ncentered_hexagonal_number(104) == 4444\ncentered_hexagonal_number(105) == 4492\ncentered_hexagonal_number(106) == 4534\ncentered_hexagonal_number(107) == 4594\ncentered_hexagonal_number(108) == 4646\ncentered_hexagonal_number(109) == 4686\ncentered_hexagonal_number(110) == 4737\ncentered_hexagonal_number(111) == 4788\ncentered_hexagonal_number(112) == 4837\ncentered_hexagonal_number(113) == 4896\ncentered_hexagonal_number(114) == 4946\ncentered_hexagonal_number(115) == 4988\ncentered_hexagonal_number(116) == 5037\ncentered_hexagonal_number(117) == 5086\ncentered_hexagonal_number(118) == 5136\ncentered_hexagonal_number(119) == 5186\ncentered_hexagonal_number(120) == 5240\ncentered_hexagonal_number(121) == 5294\ncentered_hexagonal_number(122) == 5352\ncentered_hexagonal_number(123) == 5394\ncentered_hexagonal_number(124) == 5450\ncentered_hexagonal_number(125) == 5499\ncentered_hexagonal_number(126) == 5544\ncentered_hexagonal_number(127) == 5599\ncentered_hexagonal_number(128) == 5645\ncentered_hexagonal_number(129) == 5686\ncentered_hexagonal_number(130) == 5755\ncentered_hexagonal_number(131) == 5795\ncentered_hexagonal_number(132) == 5839\ncentered_hexagonal_number(133) == 5878\ncentered_hexagonal_number(134) == 5927\ncentered_hexagonal_number(135) == 5986\ncentered_hexagonal_number(136) == 6046\ncentered_hexagonal_number(137) == 6094\ncentered_hexagonal_number(138) == 6144\ncentered_hexagonal_number(139) == 6192\ncentered_hexagonal_number(140) == 6242\ncentered_hexagonal_number(141) == 6295\ncentered_hexagonal_number(142) == 6345\ncentered_hexagonal_number(143) == 6394\ncentered_hexagonal_number(144) == 6433\ncentered_hexagonal_number(145) == 6493\ncentered_hexagonal_number(146) == 6552\ncentered_hexagonal_number(147) == 6599\ncentered_hexagonal_number(148) == 6645\ncentered_hexagonal_number(149) == 6685\ncentered_hexagonal_number(150) == 6735\ncentered_hexagonal_number(151) == 6784\ncentered_hexagonal_number(152) == 6834\ncentered_hexagonal_number(153) == 6887\ncentered_hexagonal_number(154) == 6937\ncentered_hexagonal_number(155) == 6986\ncentered_hexagona"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     centered_hexagonal_number(1) == 1\nassert     centered_hexagonal_number(3) == 6\nassert     centered_hexagonal_number(5) == 14\nassert     centered_hexagonal_number(8) == 28\nassert     centered_hexagonal_number(10) == 60\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     centered_hexagonal_number(0) == 1\nassert     centered_hexagonal_number(1) == 3\nassert     centered_hexagonal_number(2) == 7\nassert     centered_hexagonal_number(3) == 15\nassert     centered_hexagonal_number(4) == 31\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     merge_dictionaries_three({'a': 1, 'b': 2}, {'b': 2, 'c': 3}, {'a': 1, 'c': 4}) == {'a': 1, 'b': 2, 'c': 3}\nassert     merge_dictionaries_three({'a': 1}, {'a': 1, 'b': 2}, {'a': 1, 'c': 3}) == {'a': 1, 'b': 2, 'c': 3}\nassert     merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'b': 2, 'c': 3, 'd': 4}, {'a': 1, 'c': 3, 'd': 4, 'e': 5}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\n\ndef merge_dictionaries_two(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     merge_dictionaries_three({\"A\": 1, \"B\": 2}, {\"A\": 3, \"C\": 4}, {\"B\": 4}) == {\"A\": 1, \"B\": 4, \"C\": 4}\nassert     merge_dictionaries_three({\"A\": 1, \"B\": 3}, {\"A\": 2, \"C\": 4}, {\"B\": 4}) == {\"A\": 2, \"B\": 4, \"C\": 4}\nassert     merge_dictionaries_three({\"A\": 1, \"B\": 2}, {\"A\": 2, \"B\": 2, \"C\": 4}, {\"B\": 4}) == {\"A\": 1, \"B\": 2, \"C\": 4}\nassert     merge_dictionaries_three({\"A\": 1, \"B\": 2}, {\"A\": 2, \"C\": 4}, {\"A\": 1, \"C\": 4}) == {\"A\": 1, \"B\": 2, \"C\": 4}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     merge_dictionaries_three(dict1 = {1:10, 2:20}, dict2 = {3:30, 4:40}, dict3 = {5:50, 6:60}) == {1:10, 2:20, 3:30, 4:40, 5:50, 6:60}\nassert     merge_dictionaries_three(dict1 = {1:100, 2:200, 3:300}, dict2 = {1:10, 2:20, 3:30}, dict3 = {5:50, 6:60}) == {1:100, 2:200, 3:300, 1:10, 2:20, 3:30, 5:50, 6:60}\nassert     merge_dictionaries_three(dict1 = {1:100, 2:200, 3:300}, dict2 = {1:10, 2:20, 3:30}, dict3 = {4:40, 5:50, 6:60}) == {1:100, 2:200, 3:300, 1:10, 2:20, 3:30, 4:40, 5:50, 6:60}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     merge_dictionaries_three({1:10,2:20}, {1:100, 2:200, 3:30}, {1:1000, 2:2000, 3:300}) == {1:1000, 2:2000, 3:3000, 4:40, 5:50}\nassert     merge_dictionaries_three({1:10,2:20}, {3:30, 4:40, 5:50}, {1:100, 2:200}) == {1:100, 2:200, 3:30, 4:40, 5:50, 6:60}\nassert     merge_dictionaries_three({1:10,2:20}, {1:100, 2:200}, {1:30, 2:40}) == {1:30, 2:40, 3:30, 4:40, 5:50}"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     merge_dictionaries_three(\n        {'a': 1, 'b': 2},\n        {'b': 2, 'c': 3},\n        {'d': 4, 'e': 5}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     merge_dictionaries_three({'a':1, 'b':2, 'c':3},{'p':'d', 'q':'e', 'r':'f'},{'g':'h', 'i':'j'}) == {'a':1, 'b':2, 'c':3, 'p':'d', 'q':'e', 'r':'f', 'g':'h', 'i':'j'}\n\ndef merge_dictionaries_three_with_not_dict(dict1, dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    if isinstance(dict1, dict) and isinstance(dict2, dict) and isinstance(dict3, dict):\n        for key in dict2:\n            if key not in dict1:\n                dict1[key] = dict2[key]\n            elif key in dict1 and isinstance(dict1[key], dict) and isinstance(dict2[key], dict):\n                dict1[key].update(dict2[key])\n        for key in dict3:\n            if key not in dict1:\n                dict1[key] = dict3[key]\n            elif key in dict1 and isinstance(dict1[key], dict) and isinstance(dict3[key], dict):\n                dict1[key].update(dict3[key])\n        return dict1\n    return None\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     merge_dictionaries_three({1: 1, 2: 3}, {1: 2, 3: 1}, {1: 4, 5: 5, 6: 6}) == {1: 4, 2: 3, 3: 1, 5: 5, 6: 6}\nassert     merge_dictionaries_three({1: 1, 2: 2}, {1: 2, 2: 2}, {1: 3, 2: 1}) == {1: 3, 2: 1}\nassert     merge_dictionaries_three({1: 1, 2: 2}, {1: 2, 2: 2}, {}) == {1: 2, 2: 2}\nassert     merge_dictionaries_three({}, {}, {}) == {}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'c': 3, 'b': 2, 'a': 1}, {'d': 4, 'e': 5}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\nassert     merge_dictionaries_three(\n    {'a': 1, 'b': 2, 'c': 3},\n    {'b': 3, 'c': 2, 'd': 4},\n    {'a': 1, 'c': 3, 'd': 4}\n    ) == {'a': 1, 'b': 3, 'c': 2, 'd': 4}\nassert     merge_dictionaries_three(\n    {'a': 1, 'b': 2, 'c': 3},\n    {'a': 1, 'c': 3, 'b': 2},\n    {'a': 1, 'c': 3, 'b': 2}\n    ) == {'a': 1, 'b': 2, 'c': 3}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     merge_dictionaries_three({1: 2, 3: 4}, {2: 1, 3: 3}, {3: 2}) == {1: 2, 2: 1, 3: 3}\nassert     merge_dictionaries_three({}, {2: 1, 3: 3}, {}) == {2: 1, 3: 3}\nassert     merge_dictionaries_three({2: 1, 3: 3}, {}, {}) == {2: 1, 3: 3}\nassert     merge_dictionaries_three({1: 2, 3: 4}, {}, {}) == {1: 2, 3: 4}\nassert     merge_dictionaries_three({1: 2, 3: 4}, {}, {3: 5, 4: 6}) == {1: 2, 3: 4, 4: 6}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     merge_dictionaries_three({'a': 1, 'b': 2}, {'b': 2, 'c': 3}, {'d': 4, 'e': 5}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\nassert     merge_dictionaries_three({'a': 1, 'b': 2}, {'b': 2, 'c': 3, 'd': 4}, {'e': 5}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\nassert     merge_dictionaries_three({'a': 1}, {'b': 2, 'c': 3}, {'d': 4, 'e': 5}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\nassert     merge_dictionaries_three({'a': 1}, {'b': 2}, {'c': 3, 'd': 4, 'e': 5}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\nassert     merge_dictionaries_three({'a': 1}, {'b': 2}, {'c': 3, 'd': 4, 'e': 5, 'f': 6}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     freq_count([1,2,3,4,5,6,7,1]) == {1: 3, 2: 2, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1}\nassert     freq_count([1,2,3,4,5,6,7,1,1,2,3,4,5,6,7,1,1,2,3,4,5,6,7,1,1,2,3,4,5,6,7,1,1,2,3,4,5,6,7,1,1,2,3,4,5,6,7,1,1,2,3,4,5,6,7,1,1,2,3,4,5,6,7,1,1,2,3,4,5,6,7]) == {1: 10, 2: 9, 3: 8, 4: 7, 5: 6, 6: 5, 7: 4}\nassert     freq_count([1,2,3,4,5,6,7,1,1,2,3,4,5,6,7,1,1,2,3,4,5,6,7,1,1,2,3,4,5,6,7,1,1,2,3,4,5,6,7,1,1,2,3,4,5,6,7,1,1,2,3,4,5,6,7,1,1,2,3,4,5,6,7,1,1,2,3,4,5,6,7]) == {1: 19, 2: 18, 3: 17, 4: 16, 5: 15, 6: 14, 7: 13}\n\n\ndef freq_count_tuple(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n\ndef freq_count_tuple(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef freq_count_v2(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     freq_count([1,2,3,4,5,6,7,2,2,3,2,4,3,4,5,6,7,2,2,3,2,4,3,4,5,6,7]) ==\n        {1: 6, 2: 5, 3: 4, 4: 4, 5: 4, 6: 3, 7: 2}\n\n\ndef freq_count_recur(list1, list_of_freq = None, freq = None):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef get_max_freq(freq_dic):\n    '''\n    Write a function to get the most frequent element in a dictionary, returned as a string.\n    '''\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     freq_count(['apples', 'apples', 'apples', 'apples', 'apples', 'bananas']) == {\n    'apples': 5,\n    'bananas': 1\n}, \"Expected: {'apples': 5, 'bananas': 1}, but got: \" + str(freq_count(['apples', 'apples', 'apples', 'apples', 'apples', 'bananas']))\nassert     freq_count(['apple', 'apples', 'apples', 'bananas', 'bananas', 'apples', 'apples', 'apples', 'apples']) == {\n    'apple': 4,\n    'bananas': 2,\n    'apples': 7\n}, \"Expected: {'apple': 4, 'bananas': 2, 'apples': 7}, but got: \" + str(freq_count(['apple', 'apples', 'apples', 'bananas', 'bananas', 'apples', 'apples', 'apples', 'apples']))\nassert     freq_count([]) == {}, \"Expected: {}, but got: \" + str(freq_count([]))\nassert     freq_count(['a', 'a', 'b', 'b', 'b', 'b', 'b', 'c', 'c']) == {\n    'a': 3,\n    'b': 2,\n    'c': 1\n}, \"Expected: {'a': 3, 'b': 2, 'c': 1}, but got: \" + str(freq_count(['a', 'a', 'b', 'b', 'b', 'b', 'b', 'c', 'c']))\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nlist1 = [1,2,3,4,4,4,5,6,6,7,8,9,8,7,6,5,5,4,4,3,2,1,2,3,4,5]\nassert freq_count(list1) == {1:11, 2:10, 3:8, 4:7, 5:6, 6:5, 7:4, 8:3, 9:2, 10:1}\n\ndef unique_char(str1):\n    '''\n    Write a function to get the unique characters in a string, returned as a list.\n    '''\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     freq_count([1,1,1,2,2,2,2,3,3,3,4,4,4]) == {1:2,2:4,3:4,4:3}\nassert     freq_count([1,1,1,2,2,2,2,3,3,3,4,4,4,1,1]) == {1:2,2:3,3:3,4:2,1:1}\nassert     freq_count([1,1,1,2,2,2,2,3,3,3,4,4,4,1,1]) == {1:3,2:3,3:3,4:2,1:1}\n\ndef freq_count_1(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    return dict.fromkeys(list1,0)\n    # alternative\n    # collections.Counter(list1)\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef reverse_dict(dict1):\n    '''\n    Write a function to reverse a dictionary so that the keys become the values and the values become the keys.\n    '''\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert closest_num(10) == 8\nassert closest_num(20) == 19\nassert closest_num(15) == 14\nassert closest_num(12) == 11\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     closest_num(20) == 21\nassert     closest_num(5) == 4\nassert     closest_num(1) == 0\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    pass\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint('correct')\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef is_palindrome(num):\n    '''\n    Check whether num is a palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     closest_num(123) == 124\nassert     closest_num(18) == 17\nassert     closest_num(1) == 0\nassert     closest_num(15) == 14\nassert     closest_num(2222) == 2222\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     closest_num(1) == 0\nassert     closest_num(10) == 9\nassert     closest_num(100) == 98\nassert     closest_num(10000) == 99\n\nprint('Done!'"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     len_log([]) == 0, \"Empty list\"\nassert     len_log([0]) == 0, \"Zero list\"\nassert     len_log([1]) == 1, \"Single element\"\nassert     len_log([3,3,2]) == 3, \"Multiple elements\"\nassert     len_log([1,1]) == 2, \"Two elements\"\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     len_log([]) == 0, \"Empty list\"\nassert     len_log([12]) == 1, \"One element\"\nassert     len_log([12, 'banana', 'hello', 'world']) == 4, \"Multiple elements\""
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     len_log([]) == 0\nassert     len_log([1,2,3]) == 3\nassert     len_log(['x','y','z']) == 3\nassert     len_log(['x','y','x','z']) == 4"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert len_log(['Life', 'is', 'too','short']) == 4\nassert len_log(['Help','me', 'I', 'am']) == 5\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     len_log([]) == 0, \"Empty list has no length.\"\nassert     len_log([\"hello\", \"world\"]) == 7, \"Word length of list is 7.\"\nassert     len_log([\"a\", \"abc\", \"abc\", \"ab\"]) == 5, \"Word length of list is 5.\"\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     len_log([]) == 0\nassert     len_log([\"hello\", \"how\", \"are\"]) == 3\nassert     len_log([\"this\", \"is\", \"the\"]) == 4\nassert     len_log([\"a\", \"b\", \"c\"]) == 2\n\ndef max_len_word(list1):\n    '''\n    Write a python function to find the max length of the words in the list.\n    '''\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     len_log([\"word\", \"very\", \"long\", \"word\"]) == 7\nassert     len_log([\"hello\", \"world\", \"this\", \"is\", \"a\", \"very\", \"long\", \"word\"]) == 9\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nlen_log = lambda list1 : max([len(word) for word in list1])"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef num_letters(str1):\n    '''\n    Write a python function to return the number of letters in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_substring('abc', 'abc') == True \nassert     find_substring('abd', 'abc') == False\nassert     find_substring('', 'abc') == False\nassert     find_substring('abc', '') == True\nassert     find_substring('abc', 'abc') == True\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_substring(\"the\", [\"cat\",\"mat\",\"bat\",\"rat\"]) == True\nassert     find_substring(\"cat\", [\"cat\",\"mat\",\"bat\",\"rat\"]) == True\nassert     find_substring(\"mat\", [\"cat\",\"mat\",\"bat\",\"rat\"]) == True\nassert     find_substring(\"bat\", [\"cat\",\"mat\",\"bat\",\"rat\"]) == False\nassert     find_substring(\"rat\", [\"cat\",\"mat\",\"bat\",\"rat\"]) == False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_substring('FooBar', 'FooBar') == True, 'Find a substring'\nassert     find_substring('FooBar', 'Foobar') == False, 'Find a substring'\nassert     find_substring('FooBar', 'BarFoo') == False, 'Find a substring'\nassert     find_substring('FooBar', '') == False, 'Find a substring'\nassert     find_substring('', 'FooBar') == False, 'Find a substring'\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert "
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nfind_substring('one', 'on') == True\nfind_substring('one', 'two') == False\nfind_substring('', 'one') == True\nfind_substring('one', '') == True\nfind_substring('one', '1') == False\n\n\ndef find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # return True if str1 is present as a substring in sub_str, else False\n    \n    if str1 in sub_str:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_substring(\"AAB\", \"AAB\")     == True, \\\n        \"Should be True\"\n\nassert     find_substring(\"AAB\", \"ABC\")     == False, \\\n        \"Should be False\"\n\nassert     find_substring(\"AAAB\", \"AAB\")     == False, \\\n        \"Should be False\"\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_substring('abc', 'abc') == True, 'incorrect'\nassert     find_substring('abc', 'd') == False, 'incorrect'\nassert     find_substring('abc', 'a') == False, 'incorrect'\nassert     find_substring('abc', 'abc') == True, 'incorrect'\nassert     find_substring('abcabc', 'abc') == True, 'incorrect'\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_undulating(89) == True\nassert     is_undulating(22) == True\nassert     is_undulating(10) == False\nassert     is_undulating(88) == False\nassert     is_undulating(24) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nis_undulating(3) == True\nis_undulating(5) == False\nis_undulating(19) == True\nis_undulating(81) == True\nis_undulating(828) == True\nis_undulating(8989) == True\n\n'''\nThe main idea here is that all numbers are either part of the sequence or not.\n\nLet n be the number.\nIf n is divisible by 8 and 1, then we don't have to check whether n is part of the sequence.\nIf n is divisible by 8, but not by 1, then we check whether n is part of the sequence.\nIf n is divisible by 1, but not by 8, then we check whether n is part of the sequence.\nIf n is not divisible by 8, and either n is divisible by 1, or n is divisible by 8, then we do not have to check whether n is part of the sequence.\n\n'''\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_undulating(1) == False \nassert is_undulating(2) == False \nassert is_undulating(3) == False \nassert is_undulating(4) == False \nassert is_undulating(5) == True \n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_undulating(1) == True\nassert     is_undulating(9) == True\nassert     is_undulating(34) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_undulating(11) == True\nassert     is_undulating(0) == False\nassert     is_undulating(12) == False\nassert     is_undulating(123456789) == False\nassert     is_undulating(-12) == False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_undulating(1) == True, '1 is undulating'\nassert     is_undulating(2) == False, '2 is undulating'\nassert     is_undulating(3) == False, '3 is undulating'\nassert     is_undulating(4) == True, '4 is undulating'\nassert     is_undulating(5) == False, '5 is undulating'\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_undulating(13)==True\nassert is_undulating(12)==True\nassert     is_undulating(13.5)==False\nassert is_undulating(13)==True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     power(3, 3) == 81\nassert     power(3, 1) == 3\nassert     power(2, 5) == 32\nassert     power(2, 2) == 4\nassert     power(4, 3) == 64\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     power(1,0) == 1\nassert     power(2,2) == 4\nassert     power(3,3) == 9\nassert     power(0,2) == 0\nassert     power(0,5) == 0\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     power(2, 2) == 4, \"false\"\nassert     power(10, 3) == 100, \"false\"\nassert     power(-2, 2) == 4, \"false\"\nassert     power(-10, 3) == 100, \"false\"\nassert     power(3, 0) == 1, \"false\"\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     power(2,1) == 2\nassert     power(2,0) == 1\nassert     power(2,5) == 1024\nassert     power(2,-1) == 0.5\nassert     power(2,-3) == -8\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     power(2, 3) == 8\nassert     power(2, -3) == 1/1024\nassert     power(0, 3) == 0\nassert     power(-2, 3) == -8\nassert     power(-2, -3) == 1/1024\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     power(4, 2) == 16\nassert     power(2, 1) == 2\nassert     power(2, 0) == 1\nassert     power(1, 0) == 1\nassert     power(0, 1) == 0\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     power(2,3) == 8,     '2^3 = 8, not %r' % (power(2,3))\nassert     power(3,4) == 81,     '3^4 = 81, not %r' % (power(3,4))\nassert     power(10,3) == 1000, '10^3 = 1000, not %r' % (power(10,3))\nassert     power(0,3) == 0,     '0^3 = 0, not %r' % (power(0,3))\nassert     power(3,0) == 1,     '3^0 = 1, not %r' % (power(3,0))\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\na = input(\"Please enter the value of 'a': \")\nb = input(\"Please enter the value of 'b': \")\n\nif(isinstance(a, int) and isinstance(b, int)):\n    print(\"{}^{} = {}\".format(a,b,power(int(a),int(b))))\nelse:\n    print(\"Please enter integer value for 'a' and 'b'.\")\n\nprint('\\n')\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \npower(5,5) == 625\nassert \npower(5,1) == 5\nassert \npower(0,5) == 0\nassert\n\ndef test_power():\n    import math\n    def isclose(a, b):\n        return abs(a - b) < 0.000001\n    "
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     index_minimum([('a', 1), ('c', 2), ('b', 3)]) == ('b', 3)\nassert     index_minimum([('a', 1), ('c', 2), ('b', 3), ('a', 1)]) == ('a', 1)\nassert     index_minimum([('a', 1), ('c', 2), ('b', 3), ('a', 2)]) == ('a', 2)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     index_minimum([(1, 5), (2, 4), (3, 3), (4, 2)]) == (1, 2) \nassert     index_minimum([(1, 10), (2, 9), (3, 8), (4, 7)]) == (2, 9) \nassert     index_minimum([(1, 5), (2, 4), (3, 3), (4, 2)]) == (1, 2) \n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    pas"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     index_minimum([(1,2), (1,3), (2,3)]) == (1,2)\nassert     index_minimum([(1,2), (1,3), (2,4), (1,3)]) == (1,3)\nassert     index_minimum([(1,2), (1,3), (2,4), (1,2)]) == (1,2)\nassert     index_minimum([(1,2), (1,3), (2,4), (1,2), (3,3)]) == (1,2)\nassert     index_minimum([(1,2), (1,3), (2,4), (1,2), (3,4)]) == (1,2)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert index_minimum([(1,5),(5,3),(6,4)]) == (1,5)\nassert index_minimum([(1,5),(5,3),(6,4)]) == (1,5)\nassert index_minimum([(1,5),(5,3),(6,4)]) == (1,5)\nassert index_minimum([(1,5),(5,3),(6,4)]) == (1,5)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     index_minimum([('a', 2), ('b', 1), ('c', 2), ('d', 2), ('e', 1), ('f', 3)]) == ('a', 1)\nassert     index_minimum([('a', 2), ('b', 1), ('c', 2), ('d', 2), ('e', 1), ('f', 3)]) == ('d', 2)\nassert     index_minimum([('a', 2), ('b', 1), ('c', 2), ('d', 2), ('e', 1), ('f', 3)]) == ('c', 2)\nassert     index_minimum([('a', 2), ('b', 1), ('c', 2), ('d', 2), ('e', 1), ('f', 3)]) == ('b', 1)\nassert     index_minimum([('a', 2), ('b', 1), ('c', 2), ('d', 2), ('e', 1), ('f', 3)]) == ('d', 2)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     index_minimum([(1, 2), (2, 5), (4, 2), (4, 2), (4, 2), (4, 2), (4, 2), (4, 2)]) == (4, 2)\nassert     index_minimum([(1, 2), (2, 3), (4, 2), (4, 2), (4, 2), (4, 2), (4, 2), (4, 2)]) == (4, 2)\nassert     index_minimum([(1, 2), (2, 5), (4, 2), (4, 2), (4, 2), (4, 2), (4, 2), (4, 2)]) == (4, 2)\nassert     index_minimum([(1, 2), (2, 5), (4, 2), (4, 2), (4, 2), (4, 2), (4, 2), (4, 2)]) == (4, 2)\nassert     index_minimum([(1, 2), (2, 5), (4, 2), (4, 2), (4, 2), (4, 2), (4, 2), (4, 2)]) == (4, 2)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     index_minimum([(5,5),(5,10),(2,2),(6,10),(3,3),(7,5)]) == (2, 2)\nassert     index_minimum([(5,5),(5,10),(2,2),(6,10),(3,3),(7,5)]) == (6,10)\nassert     index_minimum([(5,5),(5,10),(2,2),(6,10),(3,3),(7,5)]) == (3,3)\nassert     index_minimum([(5,5),(5,10),(2,2),(6,10),(3,3),(7,5)]) == (3,3)\nassert     index_minimum([(5,5),(5,10),(2,2),(6,10),(3,3),(7,5)]) == (3,3)\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Find_Min_Length([[],[[[]]],[[]]]) == 1\nassert     Find_Min_Length([[],[[]]]) == 2\nassert     Find_Min_Length([[],[[[]]]]) == 3\nassert     Find_Min_Length([[],[[[]]],[[]]]) == 4\nassert     Find_Min_Length([[[]]]) == 2\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     Find_Min_Length([[1,2,3],[4,5,6],[7,8,9]]) == 3, 'Wrong Output'\nassert     Find_Min_Length([[1,2],[4,5],[7,8,9]]) == 2, 'Wrong Output'\nassert     Find_Min_Length([[1,2],[4,5,6],[7,8,9,10,11,12]]) == 1, 'Wrong Output'\nassert     Find_Min_Length([[1,2,3],[4,5,6,7,8,9]]) == 1, 'Wrong Output'\n\nprint(\"\\nAll the tests passed\")\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nFind_Min_Length([1,2,3,4,5]) == 3\nFind_Min_Length([[1,2,3],[4,5,6],[7,8,9]]) == 3\nFind_Min_Length([1,2,3,4,5]) == 1\nFind_Min_Length([[1,2,3],[4,5,6,7],[8,9]]) == 2\n\ndef Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest list in a list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nFind_Min_Length([[10, 15, 20], [40, 50], [80, 90]]) == 2\nFind_Min_Length([[10, 15, 20], [40, 50]]) == 2\nFind_Min_Length([[10, 15, 20]]) == 2\nFind_Min_Length([[1, 2, 3]]) == 1\nFind_Min_Length([[1, 2], [3, 4, 5]]) == 1\nFind_Min_Length([[1, 2, 3, 4, 5], [10, 20], [30, 40]]) == 4\nFind_Min_Length([[1, 2, 3], [4, 5], [6, 7, 8, 9], [10, 20, 30, 40]]) == 4\nFind_Min_Length([[1, 2], [3, 4, 5], [6, 7, 8, 9], [10, 20, 30, 40]]) == 5\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Find_Min_Length([[1, 2, 3, 4], [2, 1, 2, 2], [3, 5, 2, 1]]) == 2\nassert     Find_Min_Length([[5, 4, 3, 2], [1, 4, 5, 2], [2, 5, 4, 1]]) == 1\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Find_Min_Length([[1,2,3,4,5], [7, 8, 9, 10, 11]]) == 4, 'failed'\nassert     Find_Min_Length([[3,4,5], [1,2,3,4,5]]) == 4, 'failed'\nassert     Find_Min_Length([[3,4,5], [1,2,3,4,5], [6,7,8]]) == 4, 'failed'\nassert     Find_Min_Length([[3,4,5], [1,2,3,4,5], [7,8,9]]) == 4, 'failed'\nassert     Find_Min_Length([[3,4,5], [1,2,3,4,5], [7,8,9,10]]) == 4, 'failed'\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Find_Min_Length([[1,2,3], [4,5,6], [7,8,9]]) == 3\nassert Find_Min_Length([[1, 2, 3], [4, 5, 6]]) == 0\nassert Find_Min_Length([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == "
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Find_Min_Length([[0,0,0],[1,1,1],[0,0,0],[1,1,1]]) == 3\nassert     Find_Min_Length([[0,0,0],[1,1,1]]) == 1\nassert     Find_Min_Length([[0,0,0],[1,1,1],[0,0,0]]) == 1\nassert     Find_Min_Length([[0,0,0],[1,1,1],[0,0,0],[1,1,1]]) == 2\nassert     Find_Min_Length([[0,0,0],[1,1,1],[0,0,0],[1,1,1],[0,0,0]]) == 3\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Find_Min_Length([[1], [2], [3], [4], [5]]) == 2\nassert     Find_Min_Length([[1], [2], [3], [4], [5], [4, 3], [2, 1]]) == 3\nassert     Find_Min_Length([[1, 1, 1, 1], [1, 1], [1, 1], [1, 1], [1, 1]]) == 3\nassert     Find_Min_Length([[1, 1], [1, 1], [1, 1]]) == 1\nassert     Find_Min_Length([[1, 1, 1, 1], [1, 1, 1], [1, 1, 1]]) == 3\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     divisor(1) == 0, 'divisor(1):' + str(divisor(1)) +'Incorrect Answer'\nassert     divisor(2) == 0, 'divisor(2):' + str(divisor(2)) +'Incorrect Answer'\nassert     divisor(3) == 1, 'divisor(3):' + str(divisor(3)) +'Incorrect Answer'\nassert     divisor(4) == 2, 'divisor(4):' + str(divisor(4)) +'Incorrect Answer'\nassert     divisor(5) == 2, 'divisor(5):' + str(divisor(5)) +'Incorrect Answer'\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef divisors(n):\n    '''\n    Write a python function to find all the divisors of a given integer.\n    '''\n    pass\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    "
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    divisor(1) == 0\n    divisor(2) == 1\n    divisor(3) == 1\n    divisor(4) == 2\n    divisor(5) == 2\n    divisor(6) == 2\n    divisor(8) == 3\n    divisor(10) == 4\n    divisor(20) == 5\n    divisor(25) == 6\n    divisor(50) == 7\n    divisor(100) == 8\n    divisor(125) == 9\n    divisor(250) == 10\n    divisor(500) == 11\n    divisor(1000) == 12\n    divisor(2000) == 13\n    divisor(3000) == 14\n    divisor(5000) == 15\n    divisor(10000) == 16\n    divisor(20000) == 17\n    divisor(50000) == 18\n    divisor(100000) == 19\n    divisor(200000) == 20\n    divisor(500000) == 21\n    divisor(1000000) == 22\n    divisor(2000000) == 23\n    divisor(5000000) == 24\n    divisor(10000000) == 25\n    divisor(25000000) == 26\n    divisor(50000000) == 27\n    divisor(100000000) == 28\n    divisor(30000000) == 29\n    divisor(5000000000) == 30\n    divisor(10000000000) == 31\n    divisor(30000000000) == 32\n    divisor(500000000000) == 33\n    divisor(1000000000000) == 34\n    divisor(3000000000000) == 35\n    divisor(50000000000000) == 36\n    divisor(100000000000000) == 37\n    divisor(3000000000000000) == 38\n    divisor(5000000000000000) == 39\n    divisor(1000000000000000000) == 40\n    divisor(3000000000000000000000) == 41\n    divisor(5000000000000000000000) == 42\n    divisor(100000000000000000000) == 43\n    divisor(3000000000000000000000) == 44\n    divisor(5000000000000000000000) == 45\n    divisor(1000000000000000000) == 46\n    divisor(300000000000000000000000) == 47\n    divisor(500000000000000000000000) == 48\n    divisor(1000000000000000000000000) == 49\n    divisor(300000000000000000000000000000) == 50\n    divisor(500000000000000000000000000000) == 51\n    divisor(1000000000000000000000000000000) == 52\n    divisor(3000000000000000000000000000000) == 53\n    divisor(5000000000000000000000000000000) == 54\n    divisor(100000000000000000000000000000000) == 55\n    divisor(30000000000000000000000000000000000000) == 56\n    divisor(50000000000000000000000000000000000000) == 57\n    divisor(10000000000000000000000000000000000) == 58\n    divisor(300000000000000000000000000000000000000000) == 59\n    divisor(500000000000000000000000000000000000000000) == 60\n    divisor(10000000000000000000000000000000000000000) == 61\n    divisor(3000000000000000000000000000000000000000000000) == 62\n    divisor(5000000000000000000000000000000000000000000000) == 63\n    divisor(10000000000000000000000000000000000000000000000) == 64\n    divisor(30000000000000000000000000000000000000000000000) == 65\n    divisor(50000000000000000000000000000000000000000000000) == 66\n    divisor(1000000000000000000000000000000000000000000000000) == 67\n    divisor(300000000000000000000000000000000000000000000000000000) == 68\n    divisor(500000000000000000000000000000000000000000000000000000) == 69\n    divisor(100000000000000000000000000000000000000000000000000) == 70\n    divisor(3000000000000000000000000000000000000000000000000000000000) == 71\n    divisor(5000000000000000000000000000000000000000000000000000000000) == 72\n    divisor(100000000000000000000000000000000000000000000000000000000) == 73\n    divisor(30000000000000000000000000000000000000000000000000000000000000) == 74\n    divisor(50000000000000000000000000000000000000000000000000000000000000) == 75\n    divisor(100000000000000000000000000000000000000000000000000000000000000) == 76\n    divisor(300000000000000000000000000000000000000000000000000000000000000) == 77\n    divisor(500000000000000000000000000000000000000000000000000000000000000) == 78\n    divisor(10000000000000000000000000000000000000000000000000000000000000000) == 79\n    divisor(3000000000000000000000000000000000000000000000000000000000000000000000) == 80\n    divisor(5000000000000000000000000000000000000000000000000000000000000000000000) == 81\n    divisor(1000000000000000000000000000000000000000000000000000000000000000000) == 82\n    divisor(30000000000000000000000000000000000000000000000000000000000000000000000000) == 83\n    divisor(50000000000000000000000000000000000000000000000000000000000000000000000000) == 84\n    divisor(1000000000000000000000000000000000000000000000000000000000000000000000000) == 85\n    divisor(300000000000000000000000000000000000000000000000000000000000000000000000000000) == 86\n    divisor(500000000000000000000000000000000000000000000000000000000000000000000000000000) == 87\n    divisor(1000000000000000000000000000000000000000000000000000000000000000000000000000000) == 88\n    divisor(3000000000000000000000000000000000000000000000000000000000000000000000000000000) == 89\n    divisor(5000000000000000000000000000000000000000000000000000000000000000000000000000000) == 90\n    divisor(10000000000000000000000000000000000000000000000000000000000000000000000000000000) == 91\n    divisor(30000000000000000000000000000000000000000000000000000000000000000000000000000000) == 92\n    divisor(50000000000000000000000000000000000000000000000000000000000000000000000000000000) == 93\n    divisor(1000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 94\n    divisor(3000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 95\n    divisor(5000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 96\n    divisor(10000000000000000000000000000000000000000000000000000000000000000000000000000000) == 97\n    divisor(30000000000000000000000000000000000000000000000000000000000000000000000000000000) == 98\n    divisor(50000000000000000000000000000000000000000000000000000000000000000000000000000000) == 99\n    divisor(10000000000000000000000000000000000000000000000000000000000000000000000000000000) == 100\n    divisor(30000000000000000000000000000000000000000000000000000000000000000000000000000000) == 101\n    divisor(50000000000000000000000000000000000000000000000000000000000000000000000000000000) == 102\n    divisor(100000000000000000000000000000000000000000000000000000000000000000000000000000000) == 103\n    divisor(300000000000000000000000000000000000000000000000000000000000000000000000000000000) == 104\n    divisor(500000000000000000000000000000000000000000000000000000000000000000000000000000000) == 105\n    divisor(100000000000000000000000000000000000000000000000000000000000000000000000000000000) == 106\n    divisor(300000000000000000000000000000000000000000000000000000000000000000000000000000000) == 107\n    divisor(500000000000000000000000000000000000000000000000000000000000000000000000000000000) == 108\n    divisor(100000000000000000000000000000000000000000000000000000000000000000000000000000000) == 109\n    divisor(300000000000000000000000000000000000000000000000000000000000000000000000000000000) == 110\n    divisor(500000000000000000000000000000000000000000000000000000000000000000000000000000000) == 111\n    divisor(100000000000000000000000000000000000000000000000000000000000000000000000000000000) == 112\n    divisor(300000000000000000000000000000000000000000000000000000000000000000000000000000000) == 113\n    divisor(500000000000000000000000000000000000000000000000000000000000000000000000000000000) == 114\n    divisor(100000000000000000000000000000000000000000000000000000000000000000000000000000000) == 115\n    divisor(300000000000000000000000000000000000000000000000000000000000000000000000000000000) == 116\n    divisor(500000000000000000000000000000000000000000000000000000000000000000000000000000000) == 117\n    divisor(100000000000000000000000000000000000000000000000000000000000000000000000000000000) == 118\n    divisor(300000000000000000000000000000000000000000000000000000000000000000000000000000000) == 119\n    divisor(500000000000000000000000000000000000000000000000000000000000000000000000000000000) == 120\n    divisor(100000000000000000000000000000000000000000000000000000000000000000000000000000000) == 121\n    divisor(300000000000000000000000000000000000000000000000000000000000000000000000000000000) == 122\n    divisor(500000000000000000000000000000000000000000000000000000000000000000000000000000000) == 123\n    divisor(100000000000000000000000000000000000000000000000000000000000000000000000000000000) == 124\n    divisor(300000000000000000000000000000000000000000000000000000000000000000000000000000000) == 125\n    divisor(500000000000000000000000000000000000000000000000000000000000000000000000000000000) == 126\n    divisor(100000000000000000000000000000000000000000000000000000000000000000000000000000000) == 127\n    divisor(300000000000000000000000000000000000000000000000000000000000000000000000000000000) == 128\n    divisor(500000000000000000000000000000000000000000000000000000000000000000000000000000000) == 129\n    divisor(100000000000000000000000000000000000000000000000000000000000000000000000000000000) == 130\n    divisor(300000000000000000000000000000000000000000000000000000000000000000000000000000000) == 131\n    divisor(500000000000000000000000000000000000000000000000000000000000000000000000000000000) == 132\n    divisor(100000000000000000000000000000000000000000000000000000000000000000000000000000000) == 133\n    divisor(300000000000000000000000000000000000000000000000000000000000000000000000000000000) == 134\n    divisor(500000000000000000000000000000000000000000000000000000000000000000000000000000000) == 135\n    divisor(100000000000000000000000000000000000000000000000000000000000000000000000000000000) == 136\n    divisor(300000000000000000000000000000000000000000000000000000000000000000000000000000000) == 137\n    divisor(500000000000000000000000000000000000000000000000000000000000000000000000000000000) == 138\n    divisor(100000000000000000000000000000000000000000000000000000000000000000000000000000000) == 139\n    divisor(300000000000000000000000000000000000000000000000000000000000000000000000000000000) == 140\n    divisor(500000000000000000000000000000000000000000000000000000000000000000000000000000000) == 141\n    divisor(100000000000000000000000000000000000000000000000000000000000000000000000000000000) == 142\n    divisor(300000000000000000000000000000000000000000000000000000000000000000000000000000000) == 143\n    divisor(500000000000000000000000000000000000000000000000000000000000000000000000000000000) == 144\n    divi"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     divisor(5) == 2, \"unexpected result for divisor(5): {0}\".format(divisor(5))\nassert     divisor(10) == 2, \"unexpected result for divisor(10): {0}\".format(divisor(10))\nassert     divisor(3) == 3, \"unexpected result for divisor(3): {0}\".format(divisor(3))\nassert     divisor(12) == 5, \"unexpected result for divisor(12): {0}\".format(divisor(12))\nassert     divisor(13) == 6, \"unexpected result for divisor(13): {0}\".format(divisor(13))\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     divisor(0) == 1, \"divisor of 0 is 1\"\nassert     divisor(1) == 1, \"divisor of 1 is 1\"\nassert     divisor(2) == 2, \"divisor of 2 is 2\"\nassert     divisor(3) == 2, \"divisor of 3 is 2\"\nassert     divisor(4) == 3, \"divisor of 4 is 3\"\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nassert divisor(12) == 4\nassert divisor(6) == 3\nassert divisor(24) == 6\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     frequency_lists([[0,1],[2,3],[4,5]]) == {0:2,1:2,2:2,3:1,4:1,5:1}\nassert     frequency_lists([[0,1,2],[3,4,5],[6,7]]) == {0:3,1:2,2:2,3:2,4:1,5:1,6:1,7:1}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     frequency_lists([[1,2,3,4,5],\n                        [1,1,1,2,2,2,2,3,3,3,3],\n                        [2,2,2,2,3,4,5,5,5,6,7,8]]) == {1: 5, 2: 6, 3: 3, 4: 2, 5: 4, 6: 1, 7: 1, 8: 1}\nassert frequency_lists([[1,2,3,4,5],\n                        [1,1,1,2,2,2,2,3,3,3,3],\n                        [2,2,2,2,3,4,5,5,5,6,7,8]]) == {1: 5, 2: 6, 3: 3, 4: 2, 5: 4, 6: 1, 7: 1, 8: 1}\nassert frequency_lists([[1,2,3,4,5],\n                        [1,1,1,2,2,2,2,3,3,3,3],\n                        [2,2,2,2,3,4,5,5,5,6,7,8]]) == {1: 5, 2: 6, 3: 3, 4: 2, 5: 4, 6: 1, 7: 1, 8: 1}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nfrequency_lists([[1,1,1,1],\n    [2,2,2,2],\n    [3,3,3,3],\n    [1,1,1,1],\n    [2,2,2,2],\n    [3,3,3,3]]) == {1:5,2:4,3:3,4:2,5:1}\n\nassert frequency_lists([[1,1,1,1],\n    [2,2,2,2],\n    [1,1,1,1],\n    [2,2,2,2],\n    [3,3,3,3],\n    [1,1,1,1],\n    [2,2,2,2],\n    [3,3,3,3],\n    [1,1,1,1],\n    [2,2,2,2],\n    [3,3,3,3],\n    [1,1,1,1],\n    [2,2,2,2],\n    [3,3,3,3]]) == {1:5,2:4,3:3,4:2,5:1}"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     frequency_lists([]) == {}\nassert     frequency_lists([[]]) == {}\nassert     frequency_lists([[1]]) == {1: 1}\nassert     frequency_lists([[1, 2, 3]]) == {1: 1, 2: 1, 3: 1}\nassert     frequency_lists([[1, 1, 2], [2, 1, 1]]) == {1: 2, 2: 2, 1: 2}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     frequency_lists([1,2,3,4,5,6,7,7]) == {\n    1:3,\n    2:2,\n    3:2,\n    4:1,\n    5:1,\n    6:1,\n    7:1\n}\nassert frequency_lists([1,2,3,4,5]) == {\n    1:2,\n    2:1,\n    3:1,\n    4:1,\n    5:1\n}\nassert frequency_lists([[],[1],[2],[3],[4],[5],[6],[7]]) == {\n    []:2,\n    [1]:1,\n    [2]:1,\n    [3]:1,\n    [4]:1,\n    [5]:1,\n    [6]:1,\n    [7]:1\n}\nassert frequency_lists([]) == {}\nassert frequency_lists([[]]) == {}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     frequency_lists([1,1,1,2,2,2,3,3,3,4,4,4]) == {1: 3, 2: 3, 3: 3, 4: 2}\nassert     frequency_lists([[1,1,1],[2,2,2],[3,3,3]]) == {1: 3, 2: 3, 3: 3}\nassert     frequency_lists([1,1,1,1,2,2,2,2,3,3,3,4,4,4,4]) == {1: 5, 2: 4, 3: 4, 4: 3}\nassert     frequency_lists([1,1,1,1,2,2,2,2,3,3,3,4,4,4,4]) == {1: 6, 2: 5, 3: 4, 4: 3}\nassert     frequency_lists([]) == {}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     frequency_lists([[1,2],[3],[4],[5,6,7]]) == {1:1, 2:1, 3:1, 4:1, 5:2, 6:1, 7:1}\n\ndef frequency_lists2(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     frequency_lists([[1,2,3,4],[[1,2],1,2,1]]) == {1:3,2:2,3:1,4:1}\nassert     frequency_lists([[1,2,3,4],[[2,1],2,2,1]]) == {1:2,2:2,3:1,4:1}\nassert     frequency_lists([[1,2,3,4,5,6],[[1,2],1,2,1]]) == {1:3,2:2,3:1,4:1,5:1,6:1}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint('\\nTesting frequency_lists')\nassert frequency_lists([[1, 2], [1, 3], [1, 4], [1, 2, 4], [1, 2, 3]]) == {1: 4, 2: 3, 3: 2, 4: 1}\n\n'''\n    input:\n        [[1, 2],\n         [1, 3],\n         [1, 4],\n         [1, 2, 4],\n         [1, 2, 3]]\n    output:\n        {1: 4,\n         2: 3,\n         3: 2,\n         4: 1}\n'''"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     multiply_num([2,3,4]) == 12\nassert    multiply_num([-2,-3,-4]) == -48\nassert    multiply_num([]) == 1"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef double_letters(text):  \n    '''\n    Write a function that takes a string as an argument and returns a new string with all the letters doubled.\n    '''\n    pass\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     multiply_num([1, 2, 3, 4]) == 24, \"Should be 24\"\nassert     multiply_num([1, 2, 3]) == 6, \"Should be 6\"\nassert     multiply_num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 72, \"Should be 72\"\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(\"The result of multiply_num is:\", multiply_num([2, 3, 4]))\nassert multiply_num([1, 4, 5]) == 60\nassert multiply_num([]) == 1\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     multiply_num([1,2,3]) == 6 \nassert multiply_num([4,5,6]) == 60\nassert multiply_num([7,8,9]) == 72"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     multiply_num([2, 4, 8, 10]) == 64, 'Incorrect'\nassert     multiply_num([1, 2, 4, 8, 10]) == 120, 'Incorrect'\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef remove_common_element(numbers, common_element):\n    '''\n    Write a function which removes all common elements in an array, or other set.\n    '''\n    pass\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert decimal_to_binary(0) == '0'\nassert decimal_to_binary(1) == '1'\nassert decimal_to_binary(2) == '10'\nassert decimal_to_binary(3) == '11'\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ndecimal_to_binary(0) == ''\nassert decimal_to_binary(1) == '1'\nassert decimal_to_binary(10) == '1010'\nassert decimal_to_binary(15) == '1111'\nassert decimal_to_binary(16) == '1111'\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert decimal_to_binary(7) == '11'\nassert decimal_to_binary(8) == '1000'\nassert decimal_to_binary(15) == '1101'\n\ndef binary_to_decimal(s):\n    '''\n    Write a function to convert the given binary number represented as a string to its decimal equivalent, represented as an integer.\n    '''\n    pass\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     decimal_to_binary(10) == '1010'\nassert decimal_to_binary(12) == '1010'\nassert decimal_to_binary(15) == '11101'\nassert decimal_to_binary(37) == '1001101'\nassert decimal_to_binary(64) == '11011101'\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     decimal_to_binary(0) == '0'\nassert     decimal_to_binary(1) == '1'\nassert     decimal_to_binary(2) == '10'\nassert     decimal_to_binary(3) == '11'\nassert     decimal_to_binary(4) == '100'\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert next_smallest_palindrome(20) == 19\nassert next_smallest_palindrome(10) == 9\nassert next_smallest_palindrome(11) == 10\nassert next_smallest_palindrome(13) == 12\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef smallest_palindrome(num):\n    '''\n    Write a function to find the smallest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\n\n\ndef is_palindrome(num):\n    '''\n    Write a function to determine if a specified integer is a palindrome, returning True or False\n    '''\n    pass\n\n\ndef is_palindrome_optimized(num):\n    '''\n    Write a function to determine if a specified integer is a palindrome, returning True or False\n    with no extra space\n    '''\n    pass\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     next_smallest_palindrome(1231) == 1232\nassert     next_smallest_palindrome(123) == 124\nassert     next_smallest_palindrome(2134) == 2135\nassert     next_smallest_palindrome(1919) == 2020\nassert     next_smallest_palindrome(1818) == 1819\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef test_next_smallest_palindrome(capsys):\n    print('testing next_smallest_palindrome...')\n    sys.stdout = capsys\n    assert next_smallest_palindrome(4444) == 1148\n    assert next_smallest_palindrome(9999) == 12399\n    assert next_smallest_palindrome(1234) == 1235\n    "
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     next_smallest_palindrome(223) == 212\nassert     next_smallest_palindrome(20200) == 20191\nassert     next_smallest_palindrome(32100) == 32111\nassert     next_smallest_palindrome(123) == 121\nassert     next_smallest_palindrome(00) == 11\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef next_largest_palindrome(num):\n    '''\n    Write a function to find the next largest palindrome of a specified integer, returned as an integer.\n    '''\n    pass\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     next_smallest_palindrome(941) == 937\nassert     next_smallest_palindrome(948) == 947\nassert     next_smallest_palindrome(123456789) == 123456793\nassert     next_smallest_palindrome(9) == 9\nassert     next_smallest_palindrome(912) == 913\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     next_smallest_palindrome(12345) == 12344\nassert     next_smallest_palindrome(11112) == 11113\nassert     next_smallest_palindrome(11) == 11\nassert     next_smallest_palindrome(12) == 21\nassert     next_smallest_palindrome(223) == 23\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     next_smallest_palindrome(7) == 6\nassert     next_smallest_palindrome(666) == 665\nassert     next_smallest_palindrome(121) == 122\nassert     next_smallest_palindrome(3) == 2\nassert     next_smallest_palindrome(111) == 112\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     next_smallest_palindrome(33) == 2\nassert     next_smallest_palindrome(9) == 1\nassert     next_smallest_palindrome(17) == 6\nassert     next_smallest_palindrome(19) == 12\nassert     next_smallest_palindrome(99) == 95\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     kth_element([1,2,3,4,5,6,7,8,9], 3) == 4\nassert kth_element([1,2,3,4,5,6,7,8,9], 1) == 1\nassert kth_element([1,2,3,4,5,6,7,8,9], 10) == None\n\n\ndef selection_sort(arr):\n    '''\n    Write a function to sort an array using selection sort algorithm.\n    '''\n    pass\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     kth_element([3,4,5,6,7,1,2], 3) == 4\nassert     kth_element([3,4,5,6,7,1,2], 7) == 1\nassert     kth_element([3,4,5,6,7,1,2], 8) == -1\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\narr = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\nk = 7\n\nprint(kth_element(arr, k))\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # Simple array input and output\n    arr = list(map(int, input().split()))\n    k = int(input())\n    \n    print(kth_element(arr, k))"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     kth_element([3, 5, 8, 10, 14, 17], 5) == 8\nassert     kth_element([3, 5, 8, 10, 14, 17], 11) == 17\nassert     kth_element([3, 5, 8, 10, 14, 17], -1) == 3\nassert     kth_element([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == 5\nassert     kth_element([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], -1) == 10\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 6) == 15, \"Should return the 6th element\"\nassert     kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 0) == 1, \"Should return the 1st element\"\nassert     kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 1) == 2, \"Should return the 2nd element\"\nassert     kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 2) == 3, \"Should return the 3rd element\"\nassert     kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 3) == 4, \"Should return the 4th element\"\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     kth_element([0,2,4,6,8,10], 4) == 8\nassert     kth_element([0,2,4,6,8,10], 5) == None\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     kth_element([1,2,3,4,5], 3) == 3, \"failed\"\nassert kth_element([2,2,3,4,5], 1) == 2, \"failed\"\nassert kth_element([2,2,3,4,5], 2) == 3, \"failed\"\nassert kth_element([2,2,3,4,5], 7) == 5, \"failed\"\nassert kth_element([2,2,3,4,5], 10) == None, \"failed\"\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     kth_element([1,2,3,4,5], 1) == 1\nassert     kth_element([1,2,3,4,5], 5) == 5\nassert     kth_element([1,2,3,4,5], 0) == 1\nassert     kth_element([1,2,3,4,5], 6) == -1\n\ndef kth_biggest(arr, k):\n    '''\n    Given an array, write a function to find the kth largest element in the array.\n    '''\n    pass\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     snake_to_camel('snake_case') =='snakeCase', \"Should be snake_case\"\nassert     snake_to_camel('snakeCase') =='snake_case', \"Should be snake_case\"\nassert     snake_to_camel('snake_case_') =='snakeCase', \"Should be snake_case\"\nassert     snake_to_camel('snake_case_snake') =='snake_case_snake', \"Should be snake_case_snake\"\nassert     snake_to_camel('snake_case_snake_') =='snakeCaseSnake', \"Should be snake_case_snake\"\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     snake_to_camel('snake') =='snake', 'Should be snake'\nassert     snake_to_camel('snake_in_camel') =='snake_in_camel', 'Should be snake'\nassert     snake_to_camel('my_snake_is_my_camel') =='my_snake_is_my_camel', 'Should be snake'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     snake_to_camel('my_snake_case') =='mySnakeCase', 'Example test 1'\nassert     snake_to_camel('my_snake_case_with_underscore') =='mySnakeCaseWithUnderscore', 'Example test 2'\nassert     snake_to_camel('my-snake_case') =='my-snakeCase', 'Example test 3'\nassert     snake_to_camel('my_snake_case') =='mySnakeCase', 'Example test 4'\n\n'''\nOutput\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     snake_to_camel('_this_is_snake_case') == \"thisIsSnakeCase\", \"error\"\nassert     snake_to_camel('_this_is_snake_case') == \"_this_is_snake_case\", \"error\"\n\nassert     snake_to_camel('_this_is_snake_case') == \"thisIsSnakeCase\", \"error\"\nassert     snake_to_camel('_this_is_snake_case') == \"_thisIsSnakeCase\", \"error\"\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nassert snake_to_camel('fooBar') == 'fooBar'\nassert snake_to_camel('fooBar') == 'fooBar'\nassert snake_to_camel('foo_Bar') == 'fooBar'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     snake_to_camel('snake') =='snake'\nassert     snake_to_camel('snake_') =='snake'\nassert     snake_to_camel('snake_and_snake') =='snakeAndSnake'\nassert     snake_to_camel('snake_and_snake_') =='snakeAndSnake'\nassert     snake_to_camel('snake_and_snake_and_snake') =='snakeAndSnakeAndSnake'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef camel_to_snake(word):\n    '''\n    Write a function to convert a camel case string to snake case string.\n    '''\n    pass\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     snake_to_camel('snaKe_To_Camel_Case') =='snaKeToCamelCase', 'WRONG'\nassert snake_to_camel('snake_case_string') =='snakeCaseString', 'WRONG'\nassert snake_to_camel('first_second_third') == 'firstSecondThird', 'WRONG'"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     eulerian_num(1,1) == 2, 'Basic Eulerian Number Test Failed'\nassert eulerian_num(2,1) == 2, 'Basic Eulerian Number Test Failed'\nassert eulerian_num(3,2) == 1, 'Basic Eulerian Number Test Failed'\nassert eulerian_num(4,3) == 1, 'Basic Eulerian Number Test Failed'\nassert eulerian_num(5,4) == 1, 'Basic Eulerian Number Test Failed'\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     eulerian_num(2, 3) == 1\nassert     eulerian_num(5, 4) == 4\nassert     eulerian_num(1, 2) == 1\nassert     eulerian_num(2, 1) == 2\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \neulerian_num(0, 1) == 0\neulerian_num(1, 0) == 0\neulerian_num(3, 2) == 2\neulerian_num(5, 4) == 8\neulerian_num(10, 7) == 24\neulerian_num(1000, 10000) == 8999999\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef eulerian_num2(n, m): \n    '''\n    You are given a directed graph with n vertices numbered from 0 to n-1,\n    and an array edges containing the set of all possible directed edges of the graph. \n    You are also given an array source, \n    representing the starting vertices of the directed edges.\n    '''\n    pass\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nimport unittest\n\nclass TestEulerianNumber(unittest.TestCase):\n    def test_eulerian_num(self):\n        self.assertEqual(eulerian_num(3, 1), 1)\n        self.assertEqual(eulerian_num(3, 2), 2)\n        self."
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \neulerian_num(5, 5) == 1\nassert eulerian_num(5, 10) == 1\nassert eulerian_num(5, 11) == 1\nassert eulerian_num(10, 10) == 1\nassert eulerian_num(10, 11) == 1\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     eulerian_num(2, 3) == 2, \"eulerian_num(2, 3) == 2\"\nassert     eulerian_num(2, 3) == 3, \"eulerian_num(2, 3) == 3\"\nassert     eulerian_num(3, 3) == 1, \"eulerian_num(3, 3) == 1\"\nassert     eulerian_num(3, 4) == 1, \"eulerian_num(3, 4) == 1\"\nassert     eulerian_num(4, 4) == 1, \"eulerian_num(4, 4) == 1\"\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    eulerian_num(2, 2) == 1\n    eulerian_num(2, 1) == 1\n    eulerian_num(3, 4) == 4\n    eulerian_num(2, 4) == 2\n    eulerian_num(2, 1) == 2\n    eulerian_num(4, 8) == 6\n    eulerian_num(3, 2) == 3\n    eulerian_num(4, 5) == 4\n    eulerian_num(1, 4) == 3\n    eulerian_num(2, 4) == 2\n    eulerian_num(2, 3) == 2\n    eulerian_num(2, 2) == 1\n    eulerian_num(5, 9) == 4\n    eulerian_num(5, 2) == 3\n    eulerian_num(4, 1) == 3\n    eulerian_num(4, 5) == 2\n    eulerian_num(3, 3) == 2\n    eulerian_num(4, 3) == 1\n    eulerian_num(2, 2) == 1\n    eulerian_num(5, 2) == 2\n    eulerian_num(3, 4) == 3\n    eulerian_num(5, 6) == 3\n    eulerian_num(4, 3) == 3\n    eulerian_num(3, 7) == 4\n    eulerian_num(3, 1) == 4\n    eulerian_num(4, 7) == 4\n    eulerian_num(4, 1) == 4\n    eulerian_num(1, 7) == 1\n    eulerian_num(5, 1) == 5\n    eulerian_num(5, 1) == 5\n    eulerian_num(5, 8) == 7\n    eulerian_num(5, 5) == 5\n    eulerian_num(5, 3) == 3\n    eulerian_num(5, 9) == 3\n    eulerian_num(5, 6) == 2\n    eulerian_num(5, 2) == 2\n    eulerian_num(5, 1) == 1\n    eulerian_num(2, 1) == 2\n    eulerian_num(1, 3) == 2\n    eulerian_num(1, 7) == 2\n    eulerian_num(2, 7) == 1\n    eulerian_num(1, 7) == 1\n    eulerian_num(1, 2) == 1\n    eulerian_num(1, 8) == 1\n    eulerian_num(2, 8) == 1\n    eulerian_num(1, 1) == 1\n    eulerian_num(1, 5) == 1\n    eulerian_num(2, 5) == 1\n    eulerian_num(3, 5) == 1\n    eulerian_num(4, 5) == 1\n    eulerian_num(5, 5) == 1\n    eulerian_num(1, 6) == 1\n    eulerian_num(2, 6) == 1\n    eulerian_num(3, 6) == 1\n    eulerian_num(4, 6) == 1\n    eulerian_num(5, 6) == 1\n    eulerian_num(1, 7) == 1\n    eulerian_num(2, 7) == 1\n    eulerian_num(3, 7) == 1\n    eulerian_num(4, 7) == 1\n    eulerian_num(5, 7) == 1\n    eulerian_num(6, 7) == 1\n    eulerian_num(7, 7) == 1\n    eulerian_num(8, 7) == 1\n    eulerian_num(3, 4) == 3\n    eulerian_num(4, 4) == 2\n    eulerian_num(5, 4) == 2\n    eulerian_num(3, 2) == 3\n    eulerian_num(4, 2) == 1\n    eulerian_num(5, 2) == 2\n    eulerian_num(3, 1) == 3\n    eulerian_num(4, 1) == 3\n    eulerian_num(5, 1) == 4\n    eulerian_num(4, 1) == 3\n    eulerian_num(2, 4) == 1\n    eulerian_num(4, 4) == 2\n    eulerian_num(3, 4) == 2\n    eulerian_num(2, 3) == 2\n    eulerian_num(2, 2) == 1\n    eulerian_num(5, 5) == 1\n    eulerian_num(2, 5) == 1\n    eulerian_num(3, 5) == 1\n    eulerian_num(4, 5) == 1\n    eulerian_num(5, 5) == 1\n    eulerian_num(3, 2) == 3\n    eulerian_num(5, 2) == 2\n    eulerian_num(3, 1) == 3\n    eulerian_num(4, 1) == 3\n    eulerian_num(5, 1) == 4\n    eulerian_num(2, 1) == 1\n    eulerian_num(1, 1) == 1\n    eulerian_num(1, 3) == 1\n    eulerian_num(2, 3) == 2\n    eulerian_num(3, 3) == 1\n    eulerian_num(4, 3) == 1\n    eulerian_num(3, 1) == 3\n    eulerian_num(4, 1) == 3\n    eulerian_num(3, 4) == 3\n    eulerian_num(4, 4) == 2\n    eulerian_num(5, 1) == 5\n    eulerian_num(5, 2) == 2\n    eulerian_num(4, 5) == 2\n    eulerian_num(3, 5) == 1\n    eulerian_num(2, 5) == 1\n    eulerian_num(2, 4) == 1\n    eulerian_num(4, 4) == 2\n    eulerian_num(3, 4) == 1\n    eulerian_num(2, 3) == 2\n    eulerian_num(2, 2) == 1\n    eulerian_num(5, 5) == 1\n    eulerian_num(3, 5) == 1\n    eulerian_num(5, 5) == 1\n    eulerian_num(3, 1) == 3\n    eulerian_num(4, 1) == 3\n    eulerian_num(5, 1) == 4\n    eulerian_num(5, 7) == 1\n    eulerian_num(5, 2) == 2\n    eulerian_num(4, 7) == 1\n    eulerian_num(3, 7) == 1\n    eulerian_num(2, 7) == 1\n    eulerian_num(1, 7) == 1\n    eulerian_num(1, 8) == 1\n    eulerian_num(2, 8) == 1\n    eulerian_num(3, 8) == 1\n    eulerian_num(4, 8) == 1\n    eulerian_num(5, 8) == 1\n    eulerian_num(6, 8) == 1\n    eulerian_num(7, 8) == 1\n    eulerian_num(8, 8) == 1\n    eulerian_num(3, 9) == 1\n    eulerian_num(4, 9) == 1\n    eulerian_num(5, 9) == 1\n    eulerian_num(6, 9) == 1\n    eulerian_num(7, 9) == 1\n    eulerian_num(8, 9) == 1\n    eulerian_num(8, 1) == 1\n    eulerian_num(8, 5) == 1\n    eulerian_num(8, 9) == 1\n    eulerian_num(8, 2) == 1\n    eulerian_num(8, 7) == 1\n    eulerian_num(8, 6) == 1\n    eulerian_num(8, 5) == 1\n    eule"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef eulerian_circuit(n, m):\n    '''\n    Write a function to find the Eulerian circuit in graph G.\n    '''\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_sublists([['apple', 'banana', 'cherry'], ['berry', 'pear']]) == [['cherry', 'apple', 'berry'], ['pear', 'banana', 'cherry']]\nassert     sort_sublists([['orange', 'apple', 'banana', 'cherry'], ['yellow', 'orange', 'apple', 'pear']]) == [['apple', 'orange', 'cherry', 'banana'], ['apple', 'yellow', 'orange', 'pear']]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_sublists([[\"a\", \"b\"], [\"c\", \"d\"], [\"z\", \"y\", \"x\"]]) == [['x', 'z'], ['d', 'y'], ['b', 'a']]\nassert sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f', 'g'], ['h', 'i'], ['j', 'k']]) == [['g', 'f', 'd'], ['h', 'i'], ['j', 'k'], ['c', 'b', 'a']]\nassert sort_sublists([[\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]]) == [['f', 'e', 'd', 'g', 'h', 'c', 'b', 'a']]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ninput_list = [['b', 'c', 'a'], ['a', 'c', 'b'], ['c', 'a', 'b']]\nsort_sublists(input_list)\nprint(input_list)"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_sublists([['abc','de'],['fgh','ij'],['kln','mn']]) == [['abc','de'],['fgh','ij'],['kln','mn']]\nassert sort_sublists([['abc','de'],['fgh','ij'],['kln','mn']]) == [['abc','de'],['fgh','ij'],['kln','mn']]\nassert sort_sublists([['abc','de'],['fgh','ij'],['kln','mn'],['xyz','pqr']]) == [['abc','de'],['fgh','ij'],['kln','mn'],['xyz','pqr']]\nassert sort_sublists([['abc','de'],['fgh','ij'],['kln','mn'],['xyz','pqr'],['apple','orange']]) == [['abc','de'],['fgh','ij'],['kln','mn'],['xyz','pqr'],['apple','orange']]\nprint('The function \\'sort_sublists\\' correctly sorts each sublist of strings in a given list of lists.')\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_sublists([\"python\", \"is\", \"best\"]) ==     [[\"python\", \"is\", \"best\"], [\"java\", \"c\", \"c++\"], [\"javascript\", \"php\"], [\"ruby\", \"python\", \"python2\"]]\nassert sort_sublists([\"python\", \"is\", \"best\"]) ==     [[\"python\", \"is\", \"best\"], [\"java\", \"c\", \"c++\"], [\"javascript\", \"php\"], [\"ruby\", \"python\", \"python2\"]]\nassert sort_sublists([\"java\", \"c\", \"c++\", \"python\", \"python2\", \"python\"]) == [['java', 'c', 'c++'], ['python', 'python2'], ['ruby', 'python']]\nassert sort_sublists([\"java\", \"c\", \"c++\", \"python\", \"python2\", \"python\"]) == [['java', 'c', 'c++'], ['python', 'python2'], ['ruby', 'python']]"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert "
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    assert sort_sublists([['hello', 'hi', 'helo'], ['hi', 'hello'], ['hello', 'hi', 'helo'], ['hi', 'hello', 'helo']]) == [['hello', 'hi', 'helo'], ['hello', 'hi', 'helo'], ['hi', 'hello'], ['hi', 'hello', 'helo']]\nassert sort_sublists([['hello', 'hi', 'helo'], ['hi', 'hello'], ['hello', 'hi', 'helo'], ['hi', 'hello', 'helo']]) == [['hello', 'hi', 'helo'], ['hello', 'hi', 'helo'], ['hi', 'hello'], ['hi', 'hello', 'helo']]\nassert sort_sublists([['hello', 'hi', 'helo'], ['hi', 'hello'], ['hello', 'hi', 'helo'], ['hi', 'hello', 'helo']]) == [['hello', 'hi', 'helo'], ['hello', 'hi', 'helo'], ['hi', 'hello'], ['hi', 'hello', 'helo']]\nassert sort_sublists([['hello', 'hi', 'helo'], ['hi', 'hello'], ['hello', 'hi', 'helo'], ['hi', 'hello', 'helo']]) == [['hello', 'hi', 'helo'], ['hello', 'hi', 'helo'], ['hi', 'hello'], ['hi', 'hello', 'helo']]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert sort_sublists([[2,1,3],[3,2,1],[1,3,2]]) == [[1, 3, 2], [2, 1, 3], [3, 2, 1]]\nassert sort_sublists([[2,3,1],[1,3,2],[2,3,1]]) == [[1, 2, 3], [2, 1, 3], [3, 2, 1]]\nassert sort_sublists([[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]]) == [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]]\nassert sort_sublists([[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]]) == [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count([True, True, False, False]) == 2, \"your answer is wrong\"\nassert count([True, True, False, True]) == 3, \"your answer is wrong\"\nassert count([True, False, True, True]) == 1, \"your answer is wrong\"\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count([]) == 0, 'Empty list'\nassert     count([1]) == 0, 'One boolean'\nassert     count([False]) == 0, 'One false'\nassert     count([True, False]) == 1, 'Two true'\nassert     count([True, False, False]) == 2, 'Three true'\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count([1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count([True,False,True,False]) == 2\nassert     count([True,False,True,True,False,False]) == 3\nassert count([True,True,True,True,False,False,False,False,False]) == 8\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count([False, True, True, True, False, True, True, False, False, False]) == 7\nassert     count([False, False, False]) == 3\nassert     count([]) == 0\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count([False, False, True, False, True, False, False, True, False, False, True]) == 7\nassert     count([True, False, False, True, False, True, False, True, False, False, True]) == 12\nassert     count([False, False, True, False, True, False, False, True, False, False, True]) == 8\nassert     count([False, False, True, False, True, False, False, True, True, False, True]) == 8\nassert     count([True, False, False, True, False, True, False, True, False, False, True]) == 6\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count([True, True, False, False, True, False]) == 3, \"Should be 3\"\nassert     count([True, False, False, False, True, True]) == 6, \"Should be 6\"\n\n'''\nWrite a python function to remove the duplicate values from the given list.\n'''\n\ndef rem_duplicates(lst):\n    '''\n    Write a python function to remove the duplicate values from the given list.\n    '''\n    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count([True, False, True, True, False]) == 3\nassert     count([True, False, True, False, False, False, True]) == 6\nassert     count([True, True, False]) == 2\nassert     count([True, False, False]) == 1\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count([True, True, False, False, True]) == 4\nassert count([]) == 0\nassert count([]) == 0\nassert count([True, True, True, True]) == 4\nassert count([True, False, True, False, True]) == 4\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     add_lists([1,2,3], (4,5)) == ([1,2,3], (4,5))\nassert add_lists([], (1,2)) == ([], (1,2))\nassert add_lists([], ()) == ([], ())\nassert add_lists([], (1,)) == ([], (1,))\nassert add_lists([1,2,3], (4,)) == ([1,2,3], (4,))\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef merge_lists(test_list1, test_list2):\n    '''\n    Write a function to merge given lists.\n    '''\n    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add_lists([1, 2], (3, 4)) == (1, 2, 3, 4), \"incorrect\"\nassert     add_lists([], (1, 2)) == (1, 2), \"incorrect\"\nassert     add_lists([1], (1,)) == (1, 1), \"incorrect\"\nassert     add_lists([1, 2, 3], (1, )) == (1, 2, 3, 1), \"incorrect\"\nassert     add_lists([1, 2, 3, 4, 5], (1, )) == (1, 2, 3, 4, 5, 1), \"incorrect\"\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add_lists([1, 2], (3, 4)) == ((1, 2), (3, 4))\nassert     add_lists([], (1, 2)) == ((1, 2),)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef add_lists_brute_force(test_list, test_tup):\n    '''\n    Write a function to add the given list to the given tuples using brute force.\n    '''\n    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     add_lists(['a', 'b', 'c'], ('x', 'y', 'z')) == ['a', 'b', 'c', 'x', 'y', 'z']\nassert     add_lists(['d', 'e'], ('x', 'y', 'z')) == ['d', 'e', 'x', 'y', 'z']\nassert     add_lists(['f', 'g'], ('x', 'y', 'z')) == ['f', 'g', 'x', 'y', 'z']\nassert     add_lists(['h', 'i'], ('x', 'y', 'z')) == ['h', 'i', 'x', 'y', 'z']\nprint('You should be able to add list and tuple in \"add_lists\"')\n\n'''\n=============================================\nExercise 3: Find all the numbers in a list\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     add_lists([1,2], (3,4)) == ([1,2], 3, 4)\nassert     add_lists([1,2], (1,)) == ([1,2,1],)\nassert     add_lists([1,2], ()) == ([1,2],)"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef replace_in_list(list1, elem, new_elem):\n    '''\n    Write a function to replace the given element in the given list with another element.\n    '''\n    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     add_lists(test_list1, test_tuple1) == (test_list1 + test_tuple1), \"Error in add_lists\"\nassert     add_lists(test_list2, test_tuple2) == (test_list2 + test_tuple2), \"Error in add_lists\"\nassert     add_lists(test_list3, test_tuple3) == (test_list3 + test_tuple3), \"Error in add_lists\"\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add_lists(['a','b','c','d','e'], ('a','b','c','d')) ==    ['a','b','c','d','e','a','b','c','d']\nassert     add_lists(['a','b','c','d','e'], ()) ==    ['a','b','c','d','e','a','b','c','d']\nassert     add_lists(['a','b','c','d','e'], ('a')) ==    ['a','b','c','d','e','a','b','c','d']\nassert     add_lists(['a','b','c','d','e'], ('a', 'b')) ==    ['a','b','c','d','e','a','b','c','d']\n\ndef append_lists_pythonic(test_list, test_tup):\n    '''\n    Write a Pythonic solution to add the given lists to the given tuples.\n    '''\n    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     merge_sorted_list([1, 2, 3], [4, 5, 6], ['a', 'b', 'c']) == sorted([1, 2, 3, 4, 5, 6, 'a', 'b', 'c'])\nassert     merge_sorted_list([1, 2, 3], [4, 5, 6], ['a', 'b', 'c', 'd', 'e']) == sorted([1, 2, 3, 4, 5, 6, 'a', 'b', 'c', 'd', 'e'])\nassert     merge_sorted_list([1, 2, 3], [4, 5, 6], ['a', 'b', 'c', 'd', 'e', 'f']) == sorted([1, 2, 3, 4, 5, 6, 'a', 'b', 'c', 'd', 'e', 'f'])\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     merge_sorted_list([2,4,6],\n                            [1,3,5],\n                            [7,8,10]) == [1,2,3,4,5,6,7,8,9,10]\nassert     merge_sorted_list([2,4,6],\n                            [1,3,5],\n                            [7]) == [1,2,3,4,5,6,7]\nassert     merge_sorted_list([2,4,6],\n                            [1,3,5],\n                            [7,8,10]) == [1,2,3,4,5,6,7,8,9,10]\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # your code here\n    num1_stack = []\n    num2_stack = []\n    num3_stack = []\n    while len(num1) > 0 or len(num2) > 0 or len(num3) > 0:\n        if len(num1) > 0 and len(num2) > 0 and len(num3) > 0:\n            if num1[0] < num2[0] and num1[0] < num3[0]:\n                num1_stack.append(num1.pop(0))\n            elif num2[0] < num1[0] and num2[0] < num3[0]:\n                num2_stack.append(num2.pop(0))\n            else:\n                num3_stack.append(num3.pop(0))\n        elif len(num1) > 0 and len(num2) > 0 and len(num3) == 0:\n            num1_stack.append(num1.pop(0))\n            num2_stack.append(num2.pop(0))\n        elif len(num1) > 0 and len(num2) == 0 and len(num3) > 0:\n            num1_stack.append(num1.pop(0))\n            num3_stack.append(num3.pop(0))\n        else:\n            num1_stack.append(num1.pop(0))\n            num2_stack.append(num2.pop(0))\n        if len(num1_stack) > 0 and len(num2_stack) > 0:\n            if num1_stack[0] < num2_stack[0]:\n                num1.append(num1_stack.pop(0))\n            else:\n                num2.append(num2_stack.pop(0))\n        elif len(num1_stack) > 0 and len(num2_stack) == 0:\n            num1.append(num1_stack.pop(0))\n        elif len(num1_stack) == 0 and len(num2_stack) > 0:\n            num2.append(num2_stack.pop(0))\n\n    return num1 + num2 + num3\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     merge_sorted_list([1,2,3,4,5,6,7], [1,2,3,4,5,6,7], [1,2,3,4,5,6,7]) == [1,1,2,2,3,3,4,4,5,5,6,6,7,7]\nassert     merge_sorted_list([1,2,3,4], [1,2,3,4], [1,2,3,4]) == [1,1,2,2,3,3,4,4]\nassert     merge_sorted_list([], [], []) == []\nassert     merge_sorted_list([], [1], [1]) == [1]\nassert     merge_sorted_list([2], [], [2]) == [2]\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef test_merge_sorted_list():\n    '''\n    Test merge_sorted_list\n    '''\n    assert [] == merge_sorted_list([], [], [])\n    assert [] == merge_sorted_list([], [5], [])\n    assert [5] == merge_sorted_list([5], [], [])\n    "
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nodd_Equivalent(\"101001\",2) == \"001110\"\nassert odd_Equivalent(\"101001\",3) == \"001101\"\nassert odd_Equivalent(\"101001\",4) == \"001100\"\nassert odd_Equivalent(\"101001\",5) == \"001101\"\nassert odd_Equivalent(\"101001\",6) == \"001110\"\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nodd_Equivalent('10',1) == 2\nassert odd_Equivalent('11',2) == 3\nassert odd_Equivalent('1010',2) == 3\nassert odd_Equivalent('10111',3) == 3\nassert odd_Equivalent('1011010',4) == 3\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nodd_Equivalent(\"0110\",1) == \"0101\" \nassert \nodd_Equivalent(\"0110\",2) == \"0101\" \nassert \nodd_Equivalent(\"0110\",3) == \"0101\" \nassert \nodd_Equivalent(\"0110\",4) == \"0101\" \nassert \nodd_Equivalent(\"0110\",5) == \"0101\" \n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     odd_Equivalent('101', 1) == 2\nassert     odd_Equivalent('101', 0) == 0\nassert     odd_Equivalent('1010', 1) == 3\nassert     odd_Equivalent('1010', 0) == 0\nassert     odd_Equivalent('10101', 1) == 4\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nodd_Equivalent(\"101\",\"10\") == 1\nassert odd_Equivalent(\"1\",\"1\") == 0\nassert odd_Equivalent(\"11\",\"11\") == 1\nassert odd_Equivalent(\"111\",\"11\") == 3\nassert odd_Equivalent(\"11111\",\"11\") == 2\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nodd_Equivalent('01011011','1') == 4\nassert odd_Equivalent('01011011','2') == 0\nassert odd_Equivalent('01011011','3') == 0\nassert odd_Equivalent('01011011','4') == 1\nassert odd_Equivalent('01011011','5') == 3\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nodd_Equivalent('01100010',3) == 4\nassert odd_Equivalent('101000001',3) == 4\nassert odd_Equivalent('101000010',3) == 4\nassert odd_Equivalent('101000111',3) == 4\nassert odd_Equivalent('101001000',3) == 4\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nodd_Equivalent('01010101', 2) == 4\nodd_Equivalent('111111111', 5) == 9\nassert odd_Equivalent('111111111', 6) == 12\nassert odd_Equivalent('111111111', 7) == 15\nassert odd_Equivalent('111111111', 8) == 20\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nodd_Equivalent(\"10100\", 1) == 4\nassert odd_Equivalent(\"10101\", 1) == 4\nassert odd_Equivalent(\"10110\", 1) == 4\nassert odd_Equivalent(\"10100\", 2) == 3\nassert odd_Equivalent(\"10101\", 2) == 2\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     common_in_nested_lists([[1,2,3], [1,2,3], [1,2,3]]) == [[1, 2, 3]]\nassert     common_in_nested_lists([[1,2,3,4], [1,2,3,4], [1,2,3,4]]) == [[1, 2, 3, 4]]\nassert     common_in_nested_lists([[1,2], [1,2], [1,2]]) == [[1, 2], [1, 2]]\nassert     common_in_nested_lists([[1,2,3], [1,2,3], [1,2,3]]) == [[1, 2, 3]]\nassert     common_in_nested_lists([[1,2,3], [1,2,3], [1,2,3]]) == [[1, 2, 3]]\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     common_in_nested_lists([[[2, 3], 4], \n                                    [5, 6],\n                                    [7, 8],\n                                    [9, 10, 11],\n                                    [12, 13],\n                                    [14]]) == 4, 'Not correct'\nassert     common_in_nested_lists([[1],\n                                    [2, 3],\n                                    [4, 5],\n                                    [6],\n                                    [7, 8],\n                                    [9, 10, 11]]) == 5, 'Not correct'\nassert     common_in_nested_lists([[[2, 3], 4], \n                                    [5, 6],\n                                    [7, 8],\n                                    [9, 10, 11],\n                                    [12, 13],\n                                    [14]]) == 4, 'Not correct'\n\n\n\ndef nested_list_mutation(nested_list):\n    '''\n    Write a function to mutate the given nested list by swapping elements.\n    '''\n    pass\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     common_in_nested_lists([[[1, 1], 2], [[3], 4]]) == set([1])\nassert     common_in_nested_lists([[1, 1], 2]) == set([1])\nassert     common_in_nested_lists([1, 1]) == set([1])\nassert     common_in_nested_lists([[[1], 2], [[3], 4]]) == set([1])\nassert     common_in_nested_lists([[1, 2], [[1], 2], [[3], 4]]) == set([1])\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     common_in_nested_lists([[], []]) == set(), \"one empty list\"\nassert     common_in_nested_lists([[1,2], [3,4]]) == {1,3}, \"all items from a list\"\nassert     common_in_nested_lists([[], []]) == set(), \"two empty lists\"\nassert     common_in_nested_lists([[1], []]) == {1}, \"all items from a list\"\nassert     common_in_nested_lists([[1,2], []]) == {1,2}, \"all items from a list\"\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert common_in_nested_lists([[1], [1, 1], [1, 1, 1], [2], [2, 2], [2, 2, 2]]) == [1, 1, 2]\nassert common_in_nested_lists([[1, 1, 1], [1], [2, 2, 2], [2]]) == [1, 1, 2]\nassert common_in_nested_lists([[1, 1, 1, 1], [1, 1, 1], [2, 2, 2], [2, 2]]) == [1]\nassert common_in_nested_lists([[2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2]]) == [2]\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ncommon_in_nested_lists(nested_lists_0) == [[5], 3]\nassert \ncommon_in_nested_lists(nested_lists_1) == [[5], 3]\nassert \ncommon_in_nested_lists(nested_lists_2) == [[], []]\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     common_in_nested_lists([[1,2,3],[4,5],[6,7,8,9,10,11,12,13,14]]) == 6\nassert     common_in_nested_lists([[1,2,3,4],[4,5]]) == 4\nassert     common_in_nested_lists([[1,2,3,4],[4,5],[4,5]]) == 4\nassert     common_in_nested_lists([[],[]]) == 0\nassert     common_in_nested_lists([[1,2,3,4,5,6,7,8,9,10,11,12,13,14],[4,5,6,7,8,9,10,11,12,13,14]]) == 14\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_integer('2') == True\nassert     check_integer('3.14') == True\nassert     check_integer('0') == True\nassert     check_integer('-5') == True\nassert     check_integer('2.') == False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_integer('42') == True\nassert     check_integer('3') == False\nassert     check_integer('-1') == False\nassert     check_integer('a') == False\nassert     check_integer('g') == False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_integer('123') == True, 'Should be True'\nassert     check_integer('12.3') == False, 'Should be False'\nassert     check_integer('abc') == False, 'Should be False'\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_integer('0') == False\nassert     check_integer('1') == False\nassert     check_integer('-1') == False\nassert     check_integer('1.5') == False\nassert     check_integer('3.5') == True\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_integer('123')\nassert     check_integer('-123')\nassert     check_integer('123.4')\nassert     check_integer('12.34')\nassert     check_integer('12e4')\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_integer('42') == True,'should be true'\nassert     check_integer('hi') == False,'should be false'\nassert     check_integer('-42') == True,'should be true'\nassert     check_integer('0') == True,'should be true'\n\nprint('Success: test_check_integer')\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_integer(42) == True\nassert     check_integer(3.14) == True\nassert     check_integer('3') == True\nassert     check_integer('3.') == False\nassert     check_integer('3.0') == True\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_integer('12') == True\nassert     check_integer('0') == True\nassert     check_integer('+1') == True\nassert     check_integer('12+') == True\nassert     check_integer('12-') == True\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_integer('1') == True\nassert     check_integer('1.1') == False\nassert     check_integer('1.1a') == False\nassert     check_integer('-1') == False\nassert     check_integer('1.0') == True\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_integer('abc') == False, 'abc'\nassert     check_integer('123') == True, '123'\nassert     check_integer(123) == True, '123'\nassert     check_integer('-123') == True, '-123'\nassert     check_integer('0') == True, '0'\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     empty_dit([\"{}\"]) == False, \"Empty dictionaries\"\nassert     empty_dit([\"\",{},None]) == False, \"Empty dictionaries\"\nassert empty_dit([{},{},{},{},{}]) == True, \"All empty dictionaries\"\nassert empty_dit([{}]) == True, \"An empty dictionary\"\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef is_subset(S, T):\n    '''\n    Write a function to check whether subset of S in T or not.\n    '''\n    pass\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     empty_dit([{}]) == True, '''\n            You should return True if all dictionaries in a list are empty, False if they are not empty.\n            Empty dictionaries are dictionary with 0 keys.\n            '''\nassert     empty_dit([{1:2},{}]) == False, '''\n            You should return True if all dictionaries in a list are empty, False if they are not empty.\n            Empty dictionaries are dictionary with 0 keys.\n            '''\n\ndef odd_even(list1):\n    '''\n    Write a function to check whether all the values in a dictionary are odd or even.\n    '''\n    pass\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    empty_dit([]) == True, 'the empty list is empty'\n    empty_dit([{}]) == False, 'the list has an empty dictionary'\n    empty_dit([{}, {}, {}, {}, {}]) == False, 'the list has an empty dictionary'\n\nprint('all test cases passed')\n\nprint('')\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     empty_dit([{},{}]) == False, \"Expected True, but got False.\"\nassert     empty_dit([]) == True, \"Expected False, but got True.\"\nassert     empty_dit([{1:2,3:4},{5:6,7:8}]) == False, \"Expected True, but got False.\""
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     empty_dit([]) == True, \"Empty\"\nassert     empty_dit([{}]) == True, \"Empty\"\nassert     empty_dit([{1:1}]) == True, \"Empty\"\nassert     empty_dit([{1:1},{}]) == True, \"Empty\"\nassert     empty_dit([{1:1},{1:2}]) == False, \"Not Empty\"\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     empty_dit([{},{},{}])    ==    True, 'Expected True'\nassert     empty_dit([{1:2,3:4},{},{}])    ==    False, 'Expected False'\nassert     empty_dit([{},{},{1:2,3:4}])    ==    False, 'Expected False'\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    empty_dit([{},{},{},{}]) == True \n    empty_dit([{1:2},{},{},{}]) == False\n    empty_dit([{},{1:2},{},{}]) == False\n    empty_dit([{},{},{1:2},{}]) == False\n    empty_dit([{},{},{},{1:2}]) == True"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tuple_to_int([1, 2, 3]) == 6, \"wrong output\"\nassert tuple_to_int((3, 5, 4)) == 10, \"wrong output\""
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_to_int([1, 2, 3]) == 123\nassert     tuple_to_int((1, 2, 3)) == 123\nassert     tuple_to_int((1, 2, 3, 4)) == 124\nassert     tuple_to_int((1, 2, 3, 4, 5, 6, 7, 8, 9)) == 2540\nassert     tuple_to_int((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == 25400\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_to_int((1, 2)) == 2\nassert     tuple_to_int((1, 2, 3)) == 7\nassert     tuple_to_int((2, 3)) == 6\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tuple_to_int((1,2,3)) == 6, \"Should be 6\"\nassert     tuple_to_int((-1,-2,-3)) == -6, \"Should be -6\"\nassert     tuple_to_int((1,2,3,4,5)) == 15, \"Should be 15\"\nassert     tuple_to_int((1,-2,-3)) == -15, \"Should be -15\"\nassert     tuple_to_int((-1,2,3,4,-5)) == -25, \"Should be -25\"\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tuple_to_int((1,2,3,4)) == 26\nassert     tuple_to_int((0,1,2,3)) == 10\nassert     tuple_to_int((1,1,2,1,3,1)) == 17\nassert     tuple_to_int((1,1,2,3)) == 12\nassert     tuple_to_int((0,0,0,0)) == 0\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tuple_to_int((1, 2, 3)) == 6\nassert tuple_to_int((1, 1, 1)) == 10\nassert tuple_to_int((1, 1, 1, 1)) == 11\nassert tuple_to_int((1, 2, 3, 4)) == 21\nassert tuple_to_int((2, 3, 4, 5)) == 22\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tuple_to_int((1, 2, 3, 4)) == 6\nassert     tuple_to_int((1, 2, 3)) == 6\nassert     tuple_to_int((0, -1)) == 0\nassert     tuple_to_int((-1, -2, -3)) == -6\nassert     tuple_to_int((0, 1, 2, 3, 4)) == 10\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tuple_to_int((1, 2, 3)) == 6\nassert     tuple_to_int((1, 2, 3, 4, 5)) == 15\nassert     tuple_to_int((1, 2, 3, 4, 5, 6)) == 45\nassert     tuple_to_int((1,)) == 1\nassert     tuple_to_int((1, 2, 3, 4, 5, 6)) == 45\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tuple_to_int((1, 2, 3)) == 6\nassert     tuple_to_int((1, 3, 5)) == 21\nassert     tuple_to_int((2, 4, 6)) == 18\nassert     tuple_to_int((2, 6, 8)) == 48\nassert     tuple_to_int((1, 2, 3, 4, 5)) == 123\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tuple_to_int((1,2,3)) == 6, \"Error\"\nassert     tuple_to_int((0,0,0,0)) == 0, \"Error\"\nassert     tuple_to_int((10,20,30,40)) == 600, \"Error\"\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     list_to_float([[1, 2.0], [3.0, 4.0], [5.0, 6.0]]) == [[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]]\nassert     list_to_float([[1, 2], ['3', '4'], [5.0, 6.0]]) == [[1.0, 2.0], ['3', '4'], [5.0, 6.0]]\nassert     list_to_float([[1], ['3', '4'], ['5.0', 6.0]]) == [[1.0], ['3', '4'], ['5.0', 6.0]]\nassert     list_to_float([[1, 2], ['3'], ['4', 5.0]]) == [[1.0, 2.0], ['3'], ['4', 5.0]]\nassert     list_to_float([[1], ['3'], ['4']]) == [[1.0], ['3'], ['4']]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     list_to_float([\"a\", 3, \"b\", 4.5]) == \\\n    [0.0, 3.0, 0.0, 4.5]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef list_to_int(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to ints.\n    '''\n    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert list_to_float([[1, 2, 3, 4], 'a', 'b', 'c', 'd']) == [[1.0, 2.0, 3.0, 4.0], 'a', 'b', 'c', 'd']\nassert list_to_float([[1, 2], 'a', 'b', 'c', 'd']) == [[1.0, 2.0], 'a', 'b', 'c', 'd']\nassert list_to_float([[1], 'a', 'b', 'c', 'd']) == [[1.0], 'a', 'b', 'c', 'd']\nassert list_to_float([[1, 2], 'a', 'b', 'c', 'd']) == [[1.0, 2.0], 'a', 'b', 'c', 'd']\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     list_to_float([[1, 2, 3], ['4', '5', 6]]) == [[1, 2, 3], ['4', '5', 6]]\nassert     list_to_float([[1, 2, '3'], ['4', '5', 6]]) == [[1, 2, 3], ['4', '5', 6]]\nassert     list_to_float([[1, '2', 3], ['4', 5, 6]]) == [[1, 2, 3], ['4', 5, 6]]\nassert     list_to_float([[1, 2, 3], ['4', '5', '6']]) == [[1, 2, 3], ['4', '5', 6]]\nassert     list_to_float([[1, 2, '3'], ['4', '5', 6]]) == [[1, 2, 3], ['4', '5', 6]]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     list_to_float([[1, 2], [\"3\", 4]]) == [[1.0, 2.0], [3.0, 4.0]]\nassert     list_to_float([[\"5\", 6], [7, 8, 9]]) == [[5.0, 6.0], [7.0, 8.0, 9.0]]\nassert     list_to_float([[3, 4], [3, 4, 5]]) == [[3.0, 4.0], [3.0, 4.0, 5.0]]\nassert     list_to_float([[\"5\", 6], [\"7\", 8, 9]]) == [[5.0, 6.0], [7.0, 8.0, 9.0]]"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     list_to_float([[1, 2.5], [2, 5.6], [4, 2]]) == [[1, 2.5], [2, 5.6], [4, 2]]\nassert     list_to_float([[1, '2.5'], [2, 5.6], [4, 2]]) == [[1, 2.5], [2, 5.6], [4, 2]]\nassert     list_to_float([[1, 2], ['2.5', 5.6], [4, '2']]) == [[1, 2], [2.5, 5.6], [4, 2]]\nassert     list_to_float([[1, 2.5], ['2.5', 5.6], ['4', 2]]) == [[1, 2.5], [2.5, 5.6], [4, 2]]\nassert     list_to_float([[1, 2], ['2.5', 5.6], ['4', 2.5]]) == [[1, 2], [2.5, 5.6], [4, 2.5]]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     list_to_float([['a', 5], ['b', 4], ['c', 3]]) == [['a', 5.0], ['b', 4.0], ['c', 3.0]]\nassert     list_to_float([[1, 2], [3, 4]]) == [[1.0, 2.0], [3.0, 4.0]]\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     string_to_list('a b c') == ['a', 'b', 'c']\nassert     string_to_list('a b c') == ['a', 'b', 'c']\nassert     string_to_list('a\\nb c') == ['a', 'b', 'c']\nassert     string_to_list('a b c') == ['a', 'b', 'c']\nassert     string_to_list('a\\tb\\tc') == ['a', 'b', 'c']\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     string_to_list('hello world') == ['hello', 'world']\nassert     string_to_list('the quick brown fox') == ['the', 'quick', 'brown', 'fox']\nassert     string_to_list('the-quick-brown-fox') == ['the', 'quick', 'brown', 'fox']\nassert     string_to_list('the-fast-brown-fox') == ['the', 'fast', 'brown', 'fox']\nassert     string_to_list('the_fast_brown_fox') == ['the', 'fast', 'brown', 'fox']\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    string_to_list('cat dog fish') == ['cat', 'dog', 'fish']\nassert \n    string_to_list('1 2 3 4') == ['1', '2', '3', '4']\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     string_to_list(\"The quick brown fox jumps over the lazy dog.\") ==     [\"The\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog.\"], \"Fail.\"\nassert     string_to_list(\"The quick brown fox jumps over the lazy dog.\") ==     [\"The\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog.\"], \"Fail.\"\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     string_to_list('word word') == ['word', 'word']\nassert     string_to_list('word wordword') == ['word', 'word', 'wordword']\nassert     string_to_list('word word word') == ['word', 'word', 'word word']\nassert     string_to_list('word word word word') == ['word', 'word', 'word', 'word word']\nassert     string_to_list('word word word word') == ['word', 'word', 'word', 'word word']\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert search([]) == None\nassert search([1]) == 1\nassert search([1,1]) == 1\nassert search([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 1\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nsearch([1,1,2,2,3]) == 2\nprint('Tests passed')"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     search([0,1,1,2,2,2,2,2,3,3]) == 2\nassert     search([0,1,1,2,2,2,2,3,3,4,4]) == 3\nassert     search([0,1,1,2,2,2,3,3,4,4,4]) == None\nassert     search([0,1,1,2,2,2,3,3,4,4,4,5,6,6,7,8,9,9,9]) == None\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     search([1,2,3,3,3,3,4,5]) == 3\nassert     search([1,2,3,4,5,6,7,8,9,10]) == 10\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     search([1, 1, 2, 3, 3, 4, 5, 6, 7, 8, 9]) == 1\nassert     search([1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 7, 8, 9]) == 8\nassert     search([1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 7, 8, 9]) == 9\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     search([1, 2, 3, 3, 4, 5, 5]) == 3\nassert     search([1, 2, 3, 4, 4, 5, 5]) == 4\nassert     search([2, 2, 2, 4, 5, 5, 5, 5, 5, 5]) == 5\nassert     search([]) == None"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     search([1,2,2,3,4,4,5,6,7,8]) == 3\nassert     search([1,2,2,3,4,4,5,6,7,8]) == 3\nassert     search([2,2,2,3,4,4,5,6,7,8]) == 4\nassert     search([1,1,1,1,1,1,1,1,1,1]) == 1\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     search([1,1,1,1,2,2,2,2,2]) == 2, \"wrong\"\nassert     search([1,1,1,1,2,2,2,2,2]) == 1, \"wrong\"\nassert     search([1,2,1,2,2,2,1]) == 1, \"wrong\"\nassert     search([2,2,1,2,2,2,1]) == 1, \"wrong\"\nassert     search([1,1,1,1,2,2,2,2,2]) == 2, \"wrong\"\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef get_duplicates(arr):\n    '''\n    Write a python function to find the duplicate element in an array.\n    '''\n    pass\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    max_product_tuple([(1, 2), (3, 4), (5, 6)])\n    max_product_tuple([(1, -2), (3, 4), (5, 6)])\n    max_product_tuple([(1, 2), (3, -4), (5, 6)])\n    max_product_tuple([(1, 2), (3, 4), (5, -6)])\n    max_product_tuple([(1, -2), (3, 4), (5, 6)])\n    max_product_tuple([(1, -2), (3, -4), (5, 6)])\n    max_product_tuple([(1, 2), (3, -4), (5, 6)])\n    max_product_tuple([(1, -2), (3, 4), (5, -6)])\n    max_product_tuple([(1, 2), (3, 4), (5, 6)])\n    max_product_tuple([(1, 2), (3, 4), (5, -6)])\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_product_tuple([(1,2), (3,4), (5,6)]) == 32, \"wrong max_product_tuple\"\nassert     max_product_tuple([(1,2), (3,4), (5,6)]) == 32, \"wrong max_product_tuple\"\nassert     max_product_tuple([(1,2), (2,4), (3,6)]) == 24, \"wrong max_product_tuple\"\nassert     max_product_tuple([(1,2), (2,4), (3,6)]) == 24, \"wrong max_product_tuple\"\nassert     max_product_tuple([(1,2), (2,4), (3,6)]) == 24, \"wrong max_product_tuple\"\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_product_tuple([(-1,2),(-2,1),(1,1)]) == (1,1)\nassert     max_product_tuple([(-1,1),(2,3),(4,-1)]) == (4,-1)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nmax_product_tuple([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == 18\nassert \nmax_product_tuple([(1, 2), (4, -3), (0, 0), (1, -1), (2, 1)]) == 4"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_product_tuple([(1, 2), (-3, 4)]) == (-3, 4)\nassert     max_product_tuple([(2, 4), (-3, 4)]) == (-3, 4)\nassert     max_product_tuple([(-1, 2), (3, 4)]) == (3, 4)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef max_product_list(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs within a given list.\n    '''\n    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert max_product_tuple([(1, 3), (3, 6), (-1, -3), (0, 4), (-5, 7), (2, -1), (1, -2), (4, 5), (5, 1)]) == -6\nassert max_product_tuple([(3, 1), (2, 2), (6, 3)]) == 18\nassert max_product_tuple([(5, 2), (1, -3), (0, 2)]) == 3\nassert max_product_tuple([(6, 3), (-1, 0), (-6, 4), (5, -2), (3, 0)]) == 60\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_product_tuple([(1, 4), (2, 5), (3, 6)]) == (-1, -1)\nassert     max_product_tuple([(2, 3), (4, 1)]) == (-1, -1)\nassert     max_product_tuple([(2, 5), (4, 2)]) == (16, 10)\nassert     max_product_tuple([(1, 7), (8, 2), (3, 1)]) == (9, 36)\nprint('Correct')\n\ndef median_element(list1):\n    '''\n    Write a function to find the median element of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     amicable_numbers_sum(5) == 0\nassert     amicable_numbers_sum(10) == 5\nassert     amicable_numbers_sum(12) == 11\nassert     amicable_numbers_sum(20) == 17\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     amicable_numbers_sum(10) == 7, 'Test failed: 7'\nassert     amicable_numbers_sum(100) == 199, 'Test failed: 199'\nassert     amicable_numbers_sum(10000) == 255025, 'Test failed: 255025'\nassert     amicable_numbers_sum(1_000_000) == 255025, 'Test failed: 255025'\nassert     amicable_numbers_sum(1_000_000_000) == 2550255025, 'Test failed: 2550255025'\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     amicable_numbers_sum(1) == 0\nassert     amicable_numbers_sum(6) == 10\nassert     amicable_numbers_sum(7) == 18\nassert     amicable_numbers_sum(20) == 35\nassert     amicable_numbers_sum(50) == 220\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     amicable_numbers_sum(10) == 220\nassert     amicable_numbers_sum(100) == sum(range(1,101))\nassert     amicable_numbers_sum(1000) == sum(range(1,1001))\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     amicable_numbers_sum(100) == 153\nassert     amicable_numbers_sum(999) == 1099\nassert     amicable_numbers_sum(1000) == 1429\nassert     amicable_numbers_sum(10000) == 4699\nassert     amicable_numbers_sum(50000) == 2837\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef amicable_numbers_sum_list(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    pass\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     amicable_numbers_sum(10) == 7\nassert     amicable_numbers_sum(20) == 31\nassert     amicable_numbers_sum(50) == 62\nassert     amicable_numbers_sum(100) == 226\nassert     amicable_numbers_sum(1000) == 1634\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     angle_complex(0,0) == 0.0\nassert     angle_complex(0,1) == cmath.pi/2\nassert     angle_complex(0,2) == cmath.pi/3\nassert     angle_complex(0,3) == cmath.pi/4\nassert     angle_complex(0,4) == cmath.pi/6\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef get_all_angles(a):\n    '''\n    Write a function to get the angles of all complex numbers \n    in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \na=complex(2,4)\nb=complex(2,8)\nprint(angle_complex(a,b))\n\nprint(angle_complex(1,1))\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     angle_complex(1,2) ==  0.8944271909999998\nassert     angle_complex(1,3) == -0.8596491261859334\nassert     angle_complex(1,0) ==  0.000000000000000\nassert     angle_complex(1,-2) == -0.8944271909999998\nassert     angle_complex(-1,2) ==  0.8944271909999998\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     angle_complex(3 + 4j, 2 + 3j) == cmath.phase(3 + 4j)\nassert     angle_complex(3 + 4j, 2 - 3j) == cmath.phase(3 + 4j)\nassert     angle_complex(3 + 4j, -2 + 3j) == cmath.phase(3 + 4j)\nassert     angle_complex(3 + 4j, -2 - 3j) == cmath.phase(3 + 4j)\nassert     angle_complex(3 - 4j, 2 + 3j) == cmath.phase(3 - 4j)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef angle_of_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    pass\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     angle_complex(complex(1,2), complex(3,4)) == 90\nassert     angle_complex(complex(2,4), complex(3,1)) == 90\nassert     angle_complex(complex(2,4), complex(3,0)) == 90\nassert     angle_complex(complex(2,4), complex(1,1)) == 90\nassert     angle_complex(complex(2,4), complex(1,0)) == 270\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert \n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_length(\"01001110\") == 2\nassert     find_length(\"10101101\") == 0\nassert     find_length(\"10001100\") == 2\n\ndef max_zeroes_or_ones(bit_str):\n    '''\n    Write a function to find the maximum number of zeroes and the maximum number of ones in a binary string.\n    '''\n    # initialize variables\n    zeroes = 0\n    ones = 0\n    # start looping\n    for i in range(len(bit_str)):\n        if bit_str[i] == '0':\n            zeroes += 1\n        else:\n            ones += 1\n    return zeroes, ones\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nfind_length(\"10101\") == 2\n\ndef find_count_substring(string, sub_string):\n    '''\n    Write a function to count the number of occurrence of a sub-string in a binary string.\n    '''\n    pass\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_length(\"10100110011001\") == 5\nassert     find_length(\"10100110011010\") == 3\nassert     find_length(\"10100110011001\") == 4\nassert     find_length(\"10100110011010\") == 4\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_length('101') == 4\nassert     find_length('101001') == 2\nassert     find_length('10010101') == 2\nassert     find_length('10101') == 2\nassert     find_length('1010101') == 4\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert find_length(\"10010\") == 3\nassert find_length(\"101010\") == 4\nassert find_length(\"1010110\") == 5"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nsum(1,10) == 5 \n\n'''\nWrite a python function to find the sum of the common divisors of the first n numbers. \nInput: \nFirst line of input contains an integer T denoting the number of test cases. \nThen T test cases follow. Each test case contains an integer N denoting the number of numbers. \nThen in the next line are N space separated positive integers denoting the numbers. \nThen in the next line are 2 space separated integers denoting the first number and last number respectively. \nOutput: \nFor each test case, print the sum of the common divisors of the first N numbers.\n'''\ndef sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    pass\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum(2,3) == 1, \"Wrong output\"\nassert     sum(6,8) == 10, \"Wrong output\""
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum(2,6) == 4\nassert     sum(2,8) == 2\nassert     sum(2,9) == 3\nassert     sum(7,9) == 7\nassert     sum(4,6) == 2\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum(16,64) == 6\nassert     sum(2,8) == 10\nassert     sum(9,15) == 24\nassert     sum(4,7) == 10\nassert     sum(5,14) == 21\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum(4, 4) == 0\nassert     sum(4, 16) == 4\nassert     sum(4, 18) == 4\nassert     sum(4, 27) == 9\nassert     sum(4, 35) == 4\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum(4,9) == 3\nassert     sum(5,10) == 5\nassert     sum(8,10) == 5\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nsum(5,10) == 5 + 5 + 5 + 5 + 5 + 10\nsum(4,6) == 4 + 4\nsum(5,5) == 5 + "
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum(12,16) == 2\nassert     sum(16,24) == 2\nassert     sum(24,36) == 3\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum(2,4) == 0, 'Should be 0'\nassert     sum(4,4) == 4, 'Should be 4'\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     (multiply_int(3, 2) == 6)\nassert     (multiply_int(2, 3) == 6)\nassert     (multiply_int(1234567890, 1234567890) == (1234567890 ** 2))\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     multiply_int(3, 5) == 15,'multiply_int(3, 5) should be 15'\nassert     multiply_int(3, -5) == -10,'multiply_int(3, -5) should be -10'\nassert     multiply_int(-3, 5) == -15,'multiply_int(-3, 5) should be -15'\nassert     multiply_int(-3, -5) == 15,'multiply_int(-3, -5) should be 15'\nassert     multiply_int(0, 5) == 0,'multiply_int(0, 5) should be 0'\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     multiply_int(1,2) == 2, 'Error: 2 * 1 = 2'\nassert     multiply_int(2,2) == 4, 'Error: 2 * 2 = 4'\nassert     multiply_int(1,1) == 1, 'Error: 1 * 1 = 1'\nassert     multiply_int(3,4) == 12, 'Error: 3 * 4 = 12'\nassert     multiply_int(-1,1) == -1, 'Error: -1 * 1 = -1'\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     multiply_int(2, 2) == 4\nassert     multiply_int(2, -2) == -4\nassert     multiply_int(-2, 2) == -4\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     multiply_int(3, 5) == 15\nassert     multiply_int(3, -5) == -15\nassert     multiply_int(5, 3) == 15\nassert     multiply_int(-5, 3) == 15\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     multiply_int(10, 20) == 200\nassert     multiply_int(1, 10) == 10\nassert     multiply_int(3, 4) == 12\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert multiply_int(3, 3) == 27\nassert multiply_int(8, 7) == 56\nassert multiply_int(1, 0) == 0\nassert multiply_int(-1, 1) == -1\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     multiply_int(2, 3) == 6\nassert     multiply_int(3, 2) == 6\nassert     multiply_int(-2, -3) == -6\nassert     multiply_int(-3, -2) == -6\nassert     multiply_int(0, 0) == 0\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert multiply_int(4,2) == 8\nassert multiply_int(0,-2) == 0\nassert multiply_int(100,-2) == 200\nassert multiply_int(-2,-3) == -6\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert multiply_int(1, 3) == 3\nassert multiply_int(1, 3)!= 4\nassert multiply_int(1, 0) == 0\n\ndef multiply_int_2(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nlong_words(4, ['a', 'be', 'have', 'as', 'is']) == ['be', 'have']\nassert \nlong_words(2, ['a', 'be', 'have', 'as', 'is']) == ['be', 'have']"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     long_words(2, [\"hi\", \"hello\", \"world\"]) == [\"world\"]\nassert     long_words(2, [\"\", \"hello\", \"world\"]) == []\nassert     long_words(1, [\"hello\", \"world\"]) == [\"hello\", \"world\"]\n\n'''\n4. Write a function that finds longest word in a sentence\n'''\ndef long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    pass\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     long_words(3, ['Python', 'is','really', 'easy']) == ['Python', 'is','really']\nassert     long_words(3, ['Python', 'is','really','really']) == []\nassert     long_words(3, ['Python', 'is','really','really','really']) == ['Python', 'is','really']\nassert     long_words(3, ['Python', 'is','really','really','really','really']) == ['Python']\nassert     long_words(3, ['Python', 'is','really','really','really','really','really','really']) == ['Python', 'is','really']\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     long_words(1, [\"longest\", \"word\", \"for\", \"example\"]) == [\"longest\", \"word\", \"for\"]\nassert     long_words(2, [\"longest\", \"word\", \"for\", \"example\"]) == [\"longest\", \"word\", \"for\"]\nassert     long_words(3, [\"longest\", \"word\", \"for\", \"example\"]) == [\"longest\", \"word\", \"for\"]\nassert     long_words(4, [\"longest\", \"word\", \"for\", \"example\"]) == [\"longest\", \"word\", \"for\"]\nassert     long_words(5, [\"longest\", \"word\", \"for\", \"example\"]) == [\"longest\", \"word\", \"for\"]\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     long_words(2, [\"hello\", \"he\", \"ha\"]) == [\"he\"]\nassert     long_words(1, [\"hello\", \"hi\", \"ho\"]) == [\"hi\"]\nassert     long_words(4, [\"the\", \"question\", \"is\", \"about\", \"all\", \"of\", \"the\", \"world\", \"life\", \"it\", \"is\"]) == [\"the\", \"question\"]\nassert     long_words(3, [\"how\", \"many\", \"times\", \"does\", \"we\", \"repeat\", \"the\", \"same\", \"phrase\", \"over\", \"and\", \"over\", \"and\", \"over\", \"and\"]) == [\"and\"]\nassert     long_words(2, [\"he\", \"is\", \"a\", \"bad\", \"boy\"]) == []\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint('Tests passed')"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     long_words(2, [\"chair\", \"height\", \"of\", \"tree\"]) == [\"chair\", \"height\"]\nassert     long_words(3, [\"book\", \"is\", \"a\", \"book\"]) == [\"book\", \"is\"]\nassert     long_words(5, [\"a\", \"is\", \"some\", \"great\", \"book\"]) == [\"a\", \"is\", \"some\"]\nassert     long_words(7, [\"apple\", \"pear\", \"is\", \"a\", \"red\", \"pear\", \"apple\"]) == [\"apple\", \"pear\"]"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert long_words(5, ['Hello', 'Python', 'is', 'a', 'program', 'to', 'learn', 'the', 'basic', 'concepts']) == ['Python', 'is', 'a']\nassert long_words(5, ['Life', 'universe', 'and', 'everything', 'is', 'universe']) == ['universe']\nassert long_words(5, ['Life', 'universe', 'and', 'everything', 'is', 'universe', 'and', 'universe']) == ['universe']\nassert long_words(5, ['Life', 'universe', 'and', 'everything', 'is', 'universe', 'and', 'universe', 'and', 'universe']) == []\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     long_words(5, [\"hello\",\"goodbye\",\"cruel\",\"world\",\"of\",\"the\",\"universe\"]) == ['world','cruel']\nassert     long_words(5, [\"hello\",\"goodbye\",\"cruel\",\"world\",\"of\",\"the\",\"universe\",\"awkward\",\"words\"]) == ['universe','awkward']\nassert     long_words(4, [\"hello\",\"goodbye\",\"cruel\",\"world\",\"of\",\"the\",\"universe\"]) == ['world','cruel']\nassert     long_words(4, [\"hello\",\"goodbye\",\"cruel\",\"world\",\"of\",\"the\",\"universe\",\"awkward\",\"words\"]) == []\nassert     long_words(2, [\"hello\",\"goodbye\",\"cruel\",\"world\",\"of\",\"the\",\"universe\"]) == []\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     magic_square_test([[4,9,2],[3,5,7],[8,1,6]]) == True, \"Not a magic square\"\nassert     magic_square_test([[4,9,2],[3,5,7],[8,1,6],[1,3,5,7]]) == False, \"Not a magic square\"\nassert     magic_square_test([[4,9,2,3,5],[7,8,1,6,3],[5,3,4,8,9],[1,3,5,7,9],[8,7,6,1,9]]) == False, \"Not a magic square\"\nassert     magic_square_test([[4,9,2,3,5],[7,8,1,6,3],[5,3,4,8,9],[1,3,5,7,9],[8,7,6,1,9]]) == True, \"Not a magic square\"\nassert     magic_square_test([[4,9,2,3,5],[7,8,1,6,3],[5,3,4,8,9],[1,3,5,7,9],[8,7,6,1,9]]) == True, \"Not a magic square\"\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     magic_square_test([[4, 9, 2],\n                [3, 5, 7],\n                [8, 1, 6]]) == True\nassert     magic_square_test([[1, 2, 3],\n                [4, 5, 6],\n                [7, 8, 9]]) == False\nassert     magic_square_test([[1, 2, 3, 4],\n                [5, 6, 7, 8],\n                [9, 10, 11, 12],\n                [13, 14, 15, 16]]) == True\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     magic_square_test([\n  [4, 9, 2],\n  [3, 5, 7],\n  [8, 1, 6]\n]) == True, 'Should return True if the matrix is a magic square'\n\nassert     magic_square_test([\n  [4, 9, 2],\n  [3, 5, 7],\n  [8, 1, 6]\n]) == False, 'Should return False if the matrix is not a magic square'\n\nassert     magic_square_test([\n  [1, 2, 3],\n  [2, 3, 1],\n  [3, 1, 2]\n]) == False, 'Should return False if the matrix is not a magic square'\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint(\"Pass\") if magic_square_test([\n    [4, 9, 2],\n    [3, 5, 7],\n    [8, 1, 6]\n]) else print(\"Fail\")\n\nprint(\"Pass\") if magic_square_test([\n    [4, 9, 2],\n    [3, 5, 7],\n    [8, 1, 6],\n    [2, 3, 4]\n]) else print(\"Fail\")\n\nprint(\"Pass\") if magic_square_test([\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]) else print(\"Fail\")\n\n\nprint(\"Pass\") if magic_square_test([\n    [0, 0, 4],\n    [0, 0, 5],\n    [0, 0, 6]\n]) else print(\"Fail\")\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     magic_square_test([[4,9,2],\n                            [3,5,7],\n                            [8,1,6]])==True\nassert     magic_square_test([[1,2,3],\n                            [4,5,6],\n                            [7,8,9]])==False\nassert     magic_square_test([[2,7,6],\n                            [1,5,9],\n                            [4,3,8]])==True\nassert     magic_square_test([[1,2,3,4],\n                            [5,6,7,8],\n                            [9,10,11,12],\n                            [13,14,15,16]])==True\nassert     magic_square_test([[4,3,2,1],\n                            [5,6,7,8],\n                            [9,10,11,12],\n                            [13,14,15,16]])==False\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(\"Magic Square Test case 1:\")\ntest1 = [[4, 9, 2],\n        [3, 5, 7],\n        [8, 1, 6]]\ntest1_answer = True\nprint(\"The answer should be: \", test1_answer)\nprint(\"The result is: \", magic_square_test(test1))\n\nassert \nprint(\"Magic Square Test case 2:\")\ntest2 = [[4, 9, 2],\n        [3, 5, 7],\n        [8, 1, 6],\n        [2, 3, 4]]\ntest2_answer = False\nprint(\"The answer should be: \", test2_answer)\nprint(\"The result is: \", magic_square_test(test2))\n\nassert \nprint(\"Magic Square Test case 3:\")\ntest3 = [[1, 2, 3, 4, 5],\n        [6, 7, 8, 9, 10],\n        [11, 12, 13, 14, 15],\n        [16, 17, 18, 19, 20]]\ntest3_answer = False\nprint(\"The answer should be: \", test3_answer)\nprint(\"The result is: \", magic_square_test(test3))\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     magic_square_test([[4, 9, 2], \n                            [3, 5, 7], \n                            [8, 1, 6]]) == True, \\\n    'Your function does not return the correct output.'\nassert     magic_square_test([[4, 9, 2], \n                            [3, 5, 7], \n                            [8, 1, 6], \n                            [1, 3, 8]]) == False, \\\n    'Your function does not return the correct output.'\nassert     magic_square_test([[1, 2, 3, 4, 5, 6], \n                            [7, 8, 9, 10, 11, 12], \n                            [13, 14, 15, 16, 17, 18], \n                            [19, 20, 21, 22, 23, 24], \n                            [25, 26, 27, 28, 29, 30], \n                            [31, 32, 33, 34, 35, 36]]) == False, \\\n    'Your function does not return the correct output.'\nassert     magic_square_test([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], \n                            [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], \n                            [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], \n                            [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], \n                            [49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60], \n                            [61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72], \n                            [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], \n                            [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96], \n                            [97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], \n                            [109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120], \n                            [121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132], \n                            [133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144]]) == True, \\\n    'Your function does not return the correct output.'\nassert     magic_square_test([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], \n                            [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], \n                            [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], \n                            [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48], \n                            [49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60], \n                            [61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72], \n                            [73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], \n                            [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96], \n                            [97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], \n                            [109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120], \n                            [121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132], \n                            [133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144], \n                            [144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155], \n                            [156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167], \n                            [168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], \n                            [180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191]]) == True, \\\n    'Your function does not return the correct output.'\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n'''\nPart 3 - Magic Square Solver\n'''\n\nimport numpy as np\nimport random\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_occurrences([1, 1, 1, 1, 1]) == 1, \"Wrong\"\nassert     max_occurrences([1, 2, 2, 3, 3, 3, 3, 3, 3]) == 3, \"Wrong\"\nassert     max_occurrences([1, 1, 1, 1, 2, 2, 3, 3, 3, 3, 3]) == 1, \"Wrong\"\nassert     max_occurrences([0, 0, 0, 0, 1, 2, 2, 3, 3, 3, 3, 3]) == 3, \"Wrong\"\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_occurrences([0,0,1,1,1,2,2,3,3,4]) == 4\nassert     max_occurrences([0,1,2,3,4]) == 4\n\ndef max_occurrences2(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    result = None\n    counter = defaultdict(int)\n    for i in nums:\n        counter[i] += 1\n        if result is None or counter[i] > counter[result]:\n            result = i\n    return result\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    nums = sorted(nums)\n    max_occ = 1\n    prev_num = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] == prev_num:\n            max_occ += 1\n        else:\n            max_occ = 1\n            prev_num = nums[i]\n    return max_occ\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    max_occurrences([1,2,2,3,4,5]) == 2\nassert \n    max_occurrences([5,5,5,5,5,5,5,5,5,5,5,5,5,5,5]) == 5\nassert\n    max_occurrences([3,3,4,4,5,5,5,5,5]) == 3\nassert\n    max_occurrences([1,2,3,4,5]) == 1\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_occurrences([10,1,1,1,1,2,2,3,3,4,4,4,4]) == 4\nassert max_occurrences([-1,2,1,1,3,3]) == 3\nassert max_occurrences([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 1\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_occurrences([1, 2, 4, 2, 3, 3, 3, 3, 4, 5, 5, 5, 5]) == 3\nassert     max_occurrences([]) == None\nassert     max_occurrences([1, 2, 3, 2, 3, 3]) == 3\nassert     max_occurrences([1, 2, 3, 4, 5, 6]) == None\n\ndef max_occurrences_2(nums):\n    '''\n    Dictionary Approach\n    '''\n    result = {}\n    for num in nums:\n        if num not in result:\n            result[num] = 1\n        else:\n            result[num] += 1\n    return max(result, key=lambda key: result[key])\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_occurrences([1, 2, 3, 4, 1, 2, 3]) == 4\nassert     max_occurrences([1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4]) == 4\nassert     max_occurrences([1, 1, 2, 2, 3, 3, 4, 4, 4, 4]) == 4\nassert     max_occurrences([1, 1, 1, 1, 2, 2, 3, 3, 4, 4]) == 4\nassert     max_occurrences([1, 1, 2, 2, 3, 3, 4, 4, 4, 4]) == 4\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert max_occurrences([1, 2, 2, 2, 3, 1, 3, 4, 3, 4, 4, 4]) == 2\nassert max_occurrences([1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 4, 5, 5, 5]) == 2\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiou\"\n    str_list = list(str1)\n    str_list.reverse()\n    reverse_vowels = \"\"\n    for i in range(len(str_list)):\n        if str_list[i] not in vowels:\n            reverse_vowels = reverse_vowels + str_list[i]\n    return reverse_vowels\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     reverse_vowels(\"malayalam\") == \"amaalam\"\nassert     reverse_vowels(\"a\") == \"a\"\nassert     reverse_vowels(\"\") == \"\"\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nreverse_vowels(\"hello\") == 'holle'\nreverse_vowels(\"abcd\") == 'dcba'\nreverse_vowels(\"aeiou\") == 'uoiea'\nreverse_vowels(\"hello world\") == 'dlrow olleh'"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     reverse_vowels(\"heb dohni\") == \"doinih eb\", \"First\"\nassert     reverse_vowels(\"revinie\") == \"vinie revinie\", \"Second\"\nassert     reverse_vowels(\"einie\") == \"inie einie\", \"Third\"\nassert     reverse_vowels(\"edrvh\") == \"vrh edrvh\", \"Fourth\"\nassert     reverse_vowels(\"szhvz\") == \"vz szhvz\", \"Fifth\"\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     reverse_vowels('hello') == 'holle'\nassert     reverse_vowels('world') == 'dlrow'\nassert     reverse_vowels('python') == 'ytho'\nassert     reverse_vowels('python') == 'ytho'\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     reverse_vowels(\"helleo\") == \"llohe\"\nassert     reverse_vowels(\"hello\") == \"lohel\"\nassert     reverse_vowels(\"lalal\") == \"lalal\"\nassert     reverse_vowels(\"xyz\") == \"yxz\"\nprint(\"tests passed\")\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     reverse_vowels(\"cod\") == \"dc\"\nassert     reverse_vowels(\"dec\") == \"dc\"\nassert     reverse_vowels(\"cod\") == \"dc\"\nassert     reverse_vowels(\"dec\") == \"dc\"\nassert     reverse_vowels(\"dac\") == \"cda\"\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiou\"\n    str1 = str1.lower()\n    reversed_str = \"\"\n    for x in str1:\n        if x not in vowels:\n            reversed_str = reversed_str + x\n        else:\n            reversed_str = reversed_str + x.upper()\n    return reversed_str\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     reverse_vowels(\"aeiou\") == \"uoiea\"\nassert     reverse_vowels(\"Hello world\") == \"dlrow olleH\"\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     reverse_vowels('hello') == 'holle'\nassert     reverse_vowels('word') == 'ordw'\nassert     reverse_vowels('wow') == 'wow'\nassert     reverse_vowels('hmm') =='mmh'\nassert     reverse_vowels('yu') == 'yru'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ntup = ('Hi','Bye','Hello')\nprint(tup_string(tup))\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    tup_string((1,)) == \"1\"\n    tup_string((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == \"1 2 3 4 5 6 7 8 9 10\"\n    tup_string((1, 2, 3, 4)) == \"1 2 3 4\"\n    tup_string((1, 2, 3, 4, 5, 6, 7, 8, 9)) == \"1 2 3 4 5 6 7 8 9\"\n    tup_string((1, 2, 3, 4, 5)) == \"1 2 3 4 5\"\n    tup_string((1, 2, 3, 4, 5, 6)) == \"1 2 3 4 5 6\"\n    tup_string((1,)) == \"1\"\n    tup_string((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == \"1 2 3 4 5 6 7 8 9 10\"\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tup_string((4,6)) == '4-6'\n\ndef tup_len(tup1):\n    '''\n    Write a function to calculate the length of a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tup_string((0, 1, 2)) == '0 1 2'\nassert     tup_string((0,)) == '0'\nassert     tup_string((0, 1)) == '0 1'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tup_string(tup1) == 'tup1'\nassert tup_string(tup2) == 'tup2'\n\n\ndef tup_string_add(tup1, tup2):\n    '''\n    Write a function to add two tuples element-wise.\n    '''\n    pass\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tup_string(('a','b','c')) == \"abc\", tup_string(('a','b','c'))\nassert     tup_string(('a','b','c','d')) == \"abc'd\", tup_string(('a','b','c','d'))\nassert     tup_string(('a','b','c','d','e')) == \"abcde\", tup_string(('a','b','c','d','e'))\n\ndef tup_string_spl(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    pass\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tup_string((1,2,3,4,5,6))         == '1 2 3 4 5 6'\nassert     tup_string((1,2,3,4,5,6,7,8,9)) == '1 2 3 4 5 6 7 8 9'\nassert     tup_string((1,2,3,4,5,6,7))     == '1 2 3 4 5 6 7'\nassert     tup_string((1,2,3,4,5,6))     == '1 2 3 4 5 6'\nassert     tup_string((1,2,3,4,5,6,7,8,9)) == '1 2 3 4 5 6 7 8 9'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tup_string((1, 2, 3)) == \"123\"\nassert     tup_string((1, 2, 3, 4, 5)) == \"12345\"\n\ndef n_string(n1, sep=' '):\n    '''\n    Write a function to convert a number to a string.\n    '''\n    pass\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tup_string((1,2,3)) == \"1,2,3\", \"Not correct\"\nassert     tup_string((2,3,4)) == \"2,3,4\", \"Not correct\"\nassert     tup_string((4,5,6)) == \"4,5,6\", \"Not correct\"\n\ndef get_average(num_list):\n    '''\n    Write a function to calculate the average of a list of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef is_odd(n):\n    '''\n    Write a function to check whether a number is an odd number.\n    '''\n    pass\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_negativenum([1, 2, 3, 4, -5, -6, -7]) == -20\nassert sum_negativenum([1, 2, -3, 4, 5]) == -1\nassert sum_negativenum([1, 2, 3, -4, 5]) == -5\nassert sum_negativenum([1, 2, 3, -4, -5]) == -13\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_negativenum([-1, -2, -3, -4]) == -6\nassert     sum_negativenum([1, 2, -3, -4]) == -1\nassert     sum_negativenum([1, 2, 3, -4]) == 5\nassert     sum_negativenum([1, 2, 3, 4]) == 7\nassert     sum_negativenum([-2, -3, -4]) == -1\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_negativenum([-3,-2,0,1,2,3]) == -5\nassert     sum_negativenum([-4,-2,0,1,2,3]) == -7\nassert     sum_negativenum([-2,-4,0,1,2,3]) == -6\nassert     sum_negativenum([0,-2,0,1,2,3]) == -3\nassert     sum_negativenum([0,0,-2,0,1,2,3]) == -9\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef get_longest_consecutive_number(nums):\n    '''\n    Write a function that returns the longest consecutive number in a list of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_negativenum([1,2,3,4,5]) == 4\nassert     sum_negativenum([-1,2,3,4,-5]) == -6\nassert     sum_negativenum([-1,2,3,4,-5,6]) == -15\nassert     sum_negativenum([-1,-2,-3,-4]) == -10\nassert     sum_negativenum([1,-2,3,-4]) == -5\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_negativenum([-3, -1, -2, 4, 5]) == 0\nassert     sum_negativenum([-1, -2, -3, -4, -5]) == -10\nassert     sum_negativenum([-1, 1, 1, 1, 1]) == -1\nassert     sum_negativenum([0, -1, 1, 1, 1]) == 0\nassert     sum_negativenum([0, 1, -1, 1, 1]) == 3\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_negativenum([1,2,-3,4]) == -5\nassert     sum_negativenum([1,-2,-3,4]) == -6\nassert     sum_negativenum([1,2,3,4,-5,6]) == -10\nassert     sum_negativenum([-1, -2, -3, -4, -5, -6]) == -17\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_negativenum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == -101\nassert     sum_negativenum([-11, -12, -13, -14, -15, -16, -17, -18, -19, -20]) == -281\nassert     sum_negativenum([-101, -102, -103, -104, -105, -106, -107, -108, -109, -110]) == -201\nassert     sum_negativenum([-101, -102, -103, -104, -105, -106, -107, -108, -109, -110, -111]) == -301\nassert     sum_negativenum([-101, -102, -103, -104, -105, -106, -107, -108, -109, -110, -111, -112]) == -401\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     hexagonal_num(1) == 1\nassert hexagonal_num(3) == 5\nassert hexagonal_num(10) == 55\n\ndef get_factorial(n):\n    '''\n    Calculate the factorial of n.\n    '''\n    pass\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    hexagonal_num(4) == 27\n    hexagonal_num(6) == 73\n    hexagonal_num(8) == 152"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nhexagonal_num(1) == 1\nassert hexagonal_num(2) == 5\nassert hexagonal_num(3) == 15\nassert hexagonal_num(4) == 25\nassert hexagonal_num(5) == 35\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     hexagonal_num(0) == 1\nassert hexagonal_num(1) == 3\nassert hexagonal_num(2) == 7\nassert hexagonal_num(3) == 15\nassert hexagonal_num(4) == 31\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef hexagonal_num_iter(n):\n    '''\n    Write a program that prints the nth hexagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(hexagonal_num(2)) == 3\nprint(hexagonal_num(3)) == 6\nprint(hexagonal_num(4)) == 10\nprint(hexagonal_num(5)) == 15\nprint(hexagonal_num(6)) == 21\nprint(hexagonal_num(7)) == 28\nprint(hexagonal_num(8)) == 36\nprint(hexagonal_num(9)) == 45\nprint(hexagonal_num(10)) == 55\nprint(hexagonal_num(11)) == 66\nprint(hexagonal_num(12)) == 78\nprint(hexagonal_num(13)) == 89\nprint(hexagonal_num(14)) == 100\nprint(hexagonal_num(15)) == 120\nprint(hexagonal_num(16)) == 132\nprint(hexagonal_num(17)) == 144\nprint(hexagonal_num(18)) == 165\nprint(hexagonal_num(19)) == 188\nprint(hexagonal_num(20)) == 200\nprint(hexagonal_num(21)) == 213\nprint(hexagonal_num(22)) == 225\nprint(hexagonal_num(23)) == 236\nprint(hexagonal_num(24)) == 237\nprint(hexagonal_num(25)) == 238\nprint(hexagonal_num(26)) == 239\nprint(hexagonal_num(27)) == 240\nprint(hexagonal_num(28)) == 241\nprint(hexagonal_num(29)) == 242\nprint(hexagonal_num(30)) == 243\nprint(hexagonal_num(31)) == 244\nprint(hexagonal_num(32)) == 245\nprint(hexagonal_num(33)) == 246\nprint(hexagonal_num(34)) == 247\nprint(hexagonal_num(35)) == 248\nprint(hexagonal_num(36)) == 249\nprint(hexagonal_num(37)) == 250\nprint(hexagonal_num(38)) == 251\nprint(hexagonal_num(39)) == 252\nprint(hexagonal_num(40)) == 253\nprint(hexagonal_num(41)) == 254\nprint(hexagonal_num(42)) == 255\nprint(hexagonal_num(43)) == 256\nprint(hexagonal_num(44)) == 257\nprint(hexagonal_num(45)) == 258\nprint(hexagonal_num(46)) == 259\nprint(hexagonal_num(47)) == 260\nprint(hexagonal_num(48)) == 261\nprint(hexagonal_num(49)) == 262\nprint(hexagonal_num(50)) == 263\nprint(hexagonal_num(51)) == 264\nprint(hexagonal_num(52)) == 265\nprint(hexagonal_num(53)) == 266\nprint(hexagonal_num(54)) == 267\nprint(hexagonal_num(55)) == 268\nprint(hexagonal_num(56)) == 269\nprint(hexagonal_num(57)) == 270\nprint(hexagonal_num(58)) == 271\nprint(hexagonal_num(59)) == 272\nprint(hexagonal_num(60)) == 273\nprint(hexagonal_num(61)) == 274\nprint(hexagonal_num(62)) == 275\nprint(hexagonal_num(63)) == 276\nprint(hexagonal_num(64)) == 277\nprint(hexagonal_num(65)) == 278\nprint(hexagonal_num(66)) == 279\nprint(hexagonal_num(67)) == 280\nprint(hexagonal_num(68)) == 281\nprint(hexagonal_num(69)) == 282\nprint(hexagonal_num(70)) == 283\nprint(hexagonal_num(71)) == 284\nprint(hexagonal_num(72)) == 285\nprint(hexagonal_num(73)) == 286\nprint(hexagonal_num(74)) == 287\nprint(hexagonal_num(75)) == 288\nprint(hexagonal_num(76)) == 289\nprint(hexagonal_num(77)) == 290\nprint(hexagonal_num(78)) == 291\nprint(hexagonal_num(79)) == 292\nprint(hexagonal_num(80)) == 293\nprint(hexagonal_num(81)) == 294\nprint(hexagonal_num(82)) == 295\nprint(hexagonal_num(83)) == 296\nprint(hexagonal_num(84)) == 297\nprint(hexagonal_num(85)) == 298\nprint(hexagonal_num(86)) == 299\nprint(hexagonal_num(87)) == 300\nprint(hexagonal_num(88)) == 301\nprint(hexagonal_num(89)) == 302\nprint(hexagonal_num(90)) == 303\nprint(hexagonal_num(91)) == 304\nprint(hexagonal_num(92)) == 305\nprint(hexagonal_num(93)) == 306\nprint(hexagonal_num(94)) == 307\nprint(hexagonal_num(95)) == 308\nprint(hexagonal_num(96)) == 309\nprint(hexagonal_num(97)) == 310\nprint(hexagonal_num(98)) == 311\nprint(hexagonal_num(99)) == 312\nprint(hexagonal_num(100)) == 313\nprint(hexagonal_num(101)) == 314\nprint(hexagonal_num(102)) == 315\nprint(hexagonal_num(103)) == 316\nprint(hexagonal_num(104)) == 317\nprint(hexagonal_num(105)) == 318\nprint(hexagonal_num(106)) == 319\nprint(hexagonal_num(107)) == 320\nprint(hexagonal_num(108)) == 321\nprint(hexagonal_num(109)) == 322\nprint(hexagonal_num(110)) == 323\nprint(hexagonal_num(111)) == 324\nprint(hexagonal_num(112)) == 325\nprint(hexagonal_num(113)) == 326\nprint(hexagonal_num(114)) == 327\nprint(hexagonal_num(115)) == 328\nprint(hexagonal_num(116)) == 329\nprint(hexagonal_num(117)) == 330\nprint(hexagonal_num(118)) == 331\nprint(hexagonal_num(119)) == 332\nprint(hexagonal_num(120)) == 333\nprint(hexagonal_num(121)) == 334\nprint(hexagonal_num(122)) == 335\nprint(hexagonal_num(123)) == 336\nprint(hexagonal_num(124)) == 337\nprint(hexagonal_num(125)) == 338\nprint(hexagonal_num(126)) == 339\nprint(hexagonal_num(127)) == 340\nprint(hexagonal_num(128)) == 341\nprint(hexagonal_num(129)) == 342\nprint(hexagonal_num(130)) == 343\nprint(hexagonal_num(131)) == 344\nprint(hexagonal_num(132)) == 345\nprint(hexagonal_num(133)) == 346\nprint(hexagonal_num(134)) == 347\nprint(hexagonal_num(135)) == 348\nprint(hexagonal_num(136)) == 349\nprint(hexagonal_num(137)) == 350\nprint(hexagonal_num(138)) == 351\nprint(hexagonal_num(139)) == 352\nprint(hexagonal_num(140)) == 353\nprint(hexagonal_num(141)) == 354\nprint(hexagonal_num(142)) == 355\nprint(hexagonal_num(143)) == 356\nprint(hexagonal_num(144)) == 357\nprint(hexagonal_num(145)) == 358\nprint(hexagonal_num(146)) == 359\nprint(hexagonal_num(147)) == 360\nprint(hexagonal_num(148)) == 361\nprint(hexagonal_num(149)) == 362\nprint(hexagonal_num(150)) == 363\nprint(hexagonal_num(151)) == 364\nprint(hexagonal_num(152)) == 365\nprint(hexagonal_num(153)) == 366\nprint(hexagonal_num(154)) == 367\nprint(hexagonal_num(155)) == 368\nprint(hexagonal_num(156)) == 369\nprint(hexagonal_num(157)) == 370\nprint(hexagonal_num(158)) == 371\nprint(hexagonal_num(159)) == 372\nprint(hexagonal_num(160)) == 373\nprint(hexagonal_num(161)) == 374\nprint(hexagonal_num(162)) == 375\nprint(hexagonal_num(163)) == 376\nprint(hexagonal_num(164)) == 377\nprint(hexagonal_num(165)) == 378\nprint(hexagonal_num(166)) == 379\nprint(hexagonal_num(167)) == 380\nprint(hexagonal_nu"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     zero_count([0,0,0,0]) == 0.0\nassert     zero_count([0,0,0,0,0,0]) == 0.0\nassert     zero_count([0,0,1,0,0,0]) == 1.0\nassert     zero_count([1,0,0,0,1]) == 0.5\nassert     zero_count([1,0,0,0,0,1]) == 0.5\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     zero_count([0,1,0]) == 0.5\nassert     zero_count([1,0,0,1,0]) == 0.5\nassert     zero_count([1,0,0,0,1,0]) == 0.75\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nnums = array('i',[1,2,0,0,3,4,0,0,0,1])\nzero_count(nums) == 3.0\nnums = array('i',[1,2,0,0,3,4,0,0,0,1,0,1])\nzero_count(nums) == 2.5\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     zero_count([]) == 0\nassert     zero_count([1,2,0,4,0,5]) == 0.6\nassert     zero_count([0,0,1,2,3,4,5,6,7]) == 0.4\nassert     zero_count([0,1,2,3,4,5,6,7,8,9]) == 0.2\nassert     zero_count([10,11,12,13,0,1,2,3,4,5,6,7]) == 0.4\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     zero_count([0,0,0,1,1,1]) == 0.6\nassert     zero_count([0,0,1,0,1,1]) == 0.4\nassert     zero_count([1,0,1,1,0,1]) == 0.5\nassert     zero_count([0,0,1,0,1,1]) == 1.0\nassert     zero_count([1,1,1,0,1,0]) == 1.0\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     zero_count([1,0,0,1,0,1,0,1,0,0]) == 0.25, 'wrong'\nassert     zero_count([1,1,0,1,1,0,1,0,1,1]) == 1, 'wrong'\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     zero_count([0, 1, 0, 1, 0, 1, 0, 1]) == 1.0, \"Wrong answer\"\nassert     zero_count([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1]) == 1.0, \"Wrong answer\"\nassert     zero_count([0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1]) == 2.0, \"Wrong answer\"\nassert     zero_count([1, 2, 3, 4, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1]) == 2.5, \"Wrong answer\"\nassert     zero_count([1, 2, 3, 4, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1]) == 2.0, \"Wrong answer\"\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(5) == True, \"5 is not sum of powers of 2\"\nassert     is_Sum_Of_Powers_Of_Two(0) == True, \"0 is not sum of powers of 2\"\nassert     is_Sum_Of_Powers_Of_Two(1) == False, \"1 is sum of powers of 2\"\nassert     is_Sum_Of_Powers_Of_Two(27) == True, \"27 is sum of powers of 2\"\nassert     is_Sum_Of_Powers_Of_Two(13) == False, \"13 is not sum of powers of 2\"\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(8) == True, \"Should be True\"\nassert     is_Sum_Of_Powers_Of_Two(6) == False, \"Should be False\"\nassert     is_Sum_Of_Powers_Of_Two(4) == True, \"Should be True\"\nassert     is_Sum_Of_Powers_Of_Two(9) == False, \"Should be False\"\nassert     is_Sum_Of_Powers_Of_Two(10) == True, \"Should be True\"\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(10) == False, 'Should be False'\nassert     is_Sum_Of_Powers_Of_Two(1) == False, 'Should be False'\nassert     is_Sum_Of_Powers_Of_Two(6) == True, 'Should be True'\nassert     is_Sum_Of_Powers_Of_Two(17) == True, 'Should be True'\nassert     is_Sum_Of_Powers_Of_Two(81) == True, 'Should be True'\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(\"pass\") if is_Sum_Of_Powers_Of_Two(2) == True else print(\"fail\")\n\nprint(\"-\"*40)\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     (is_Sum_Of_Powers_Of_Two(1)) == True\nassert     (is_Sum_Of_Powers_Of_Two(2)) == True\nassert     (is_Sum_Of_Powers_Of_Two(3)) == False\nassert     (is_Sum_Of_Powers_Of_Two(30000)) == True\nassert     (is_Sum_Of_Powers_Of_Two(5000000)) == True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(0) == False, \"False\"\nassert     is_Sum_Of_Powers_Of_Two(1) == False, \"False\"\nassert     is_Sum_Of_Powers_Of_Two(2) == True, \"True\"\nassert     is_Sum_Of_Powers_Of_Two(3) == True, \"True\"\nassert     is_Sum_Of_Powers_Of_Two(10) == True, \"True\"\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(2) == True\nassert     is_Sum_Of_Powers_Of_Two(9) == True\nassert     is_Sum_Of_Powers_Of_Two(10) == False\nassert     is_Sum_Of_Powers_Of_Two(31) == False\nassert     is_Sum_Of_Powers_Of_Two(32) == True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     circle_circumference(1) ==  3.14\nassert     circle_circumference(2) ==  6.28\nassert     circle_circumference(3) ==  10.65\nassert     circle_circumference(4) ==  20.25\nassert     circle_circumference(5) ==  37.06\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     circle_circumference(1) == 2 * math.pi\nassert     circle_circumference(2) == 2 * math.pi * 2\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert 2 * circle_circumference(1) == 2\nassert circle_circumference(1) == 3.1415926535897932384626433832795\nassert circle_circumference(2) == 5.0\nassert circle_circumference(10) == 314.1592653589793238462643383279502884\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     circle_circumference(1) == 2.081573298818\nassert     circle_circumference(4) == 7.40535951302\nassert     circle_circumference(5) == 12.81807628977\nassert     circle_circumference(10) == 22.10342970845\nassert     circle_circumference(20) == 29.51971786741\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     circle_circumference(1) == math.pi * 2\nassert     circle_circumference(2) == 2 * math.pi * 2\nassert     circle_circumference(4) == 2 * math.pi * 4\nassert     circle_circumference(6) == 2 * math.pi * 6\nassert     circle_circumference(9) == 2 * math.pi * 9\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     circle_circumference(r = 5) == 30.59\nassert circle_circumference(r = 6) == 42.61\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     circle_circumference(1) == 3.141592653\nassert     circle_circumference(5) == 12.566370614359172\nassert     circle_circumference(20) == 314.1592653589793\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     circle_circumference(1) == math.pi * 2\nassert     circle_circumference(5) == math.pi * 6\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     circle_circumference(1) == 2*PI*2\nassert     circle_circumference(0) == 2*PI*0\nassert     circle_circumference(2) == 2*PI*4\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_singly([[1,2], 3, 4]) == [1,2,3,4]\nassert extract_singly([]) == []\nassert extract_singly([[]]) == []\nassert extract_singly([[1],2,3]) == [1,2,3]\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nassert extract_singly([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert extract_singly([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_singly([[]]) == []\nassert     extract_singly([[[1, 2], 3], [[2, 3]], [[3]]]) == [1, 2, 3, 2, 3, 3]\nassert     extract_singly([[[[1]], 1, 2, 3]]) == [1, 1, 2, 3, 1, 2, 3]\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_singly([[1], [2], [3]]) == {1, 2, 3}\nassert extract_singly([[1,2],[3,4]]) == {1, 2, 3, 4}\nassert extract_singly([[1,2,3,4]]) == {1, 2, 3, 4}\nassert extract_singly([[1,2],[3,4,5,6]]) == {1, 2, 3, 4, 5, 6}\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_singly([[1, 2], [3], [4, 5]]) == {1, 2, 3, 4, 5}\nassert     extract_singly([[1], [2], [3]]) == {1, 2, 3}\nassert     extract_singly([[1]]) == {1}\n\ndef extend_me():\n    '''\n    Write a function to extend a list of lists with some elements.\n    '''\n    pass\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    extract_singly([[[1, 2], 3], 4, 5]) == \n    [1, 2, 3, 4, 5]\n\nassert extract_singly([[[1, 2], 3, 4], 5]) == \n    [1, 2, 3, 4, 5]\n\nassert extract_singly([[1, 2], 3, 4]) == \n    [1, 2, 3, 4]\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_singly([[1, 2, 3], 4]) == [1, 2, 3, 4]\nassert     extract_singly([[[1], 2], 3]) == [1, 2, 3]\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_singly([[1,2],[3],[4,5]]) == [1,2,3,4,5]\nassert     extract_singly([[1,2,3],[4,5,6,7],[8]]) == [1,2,3,4,5,6,7,8]\nassert     extract_singly([[1],[2],[3],[4],[5]]) == [1,2,3,4,5]\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_singly([1, 2, 3, 4, [5, 6], 7]) == {1, 2, 3, 4, 5, 6, 7}\nassert     extract_singly([[1, 2, 3], 4, [5, 6], 7]) == {1, 2, 3, 4, 5, 6, 7}\nassert     extract_singly([[1, 2, 3], 4, [[5, 6], 7]]) == {1, 2, 3, 4, 5, 6, 7}\nassert     extract_singly([[1, 2, 3], 4, [[[5, 6], 7]], 8]) == {1, 2, 3, 4, 5, 6, 7, 8}\nassert     extract_singly([1, 2, 3, 4, 5]) == {1, 2, 3, 4, 5}\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert pancake_sort([3,2,1]) == [1,2,3]\nassert pancake_sort([3,1,2]) == [1,2,3]\n\ndef pancake_sort2(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n\nassert\n\ndef pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nnums = [1, 5, 3, 4, 2]\npancake_sort(nums)\nassert nums == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     pancake_sort([\"3\",\"2\",\"1\",\"1\"]) == \"1 2 3 1\"\nassert     pancake_sort([\"3\",\"2\",\"1\",\"1\",\"3\"]) == \"1 3 2 1 3\"\nassert     pancake_sort([\"5\",\"3\",\"2\",\"1\",\"4\"]) == \"1 3 2 4 5\"\nassert     pancake_sort([\"1\",\"2\",\"3\",\"4\",\"5\"]) == \"5 1 2 3 4\"\nassert     pancake_sort([\"1\",\"3\",\"2\",\"4\",\"5\"]) == \"1 5 2 3 4\"\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef pancake_sort2(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_samepair([1,1,2],[\"a\",\"b\",\"c\"],[\"d\",\"e\",\"f\"]) == 2, \"Testcase 1 Failed\"\nassert count_samepair([1,2,1],[\"a\",\"b\",\"a\"],[\"d\",\"e\",\"f\"]) == 3, \"Testcase 2 Failed\"\nassert count_samepair([1,2,3],[\"a\",\"b\",\"c\"],[\"d\",\"e\",\"f\"]) == 0, \"Testcase 3 Failed\"\nassert count_samepair([1,2,3],[\"a\",\"b\",\"c\"],[\"e\",\"e\",\"f\"]) == 1, \"Testcase 4 Failed\"\nassert count_samepair([1,2,3],[\"a\",\"b\",\"c\"],[\"d\",\"d\",\"f\"]) == 1, \"Testcase 5 Failed\"\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_samepair([1,2,3,4,5,6,7],[1,1,1,1,1,1,1],[1,2,3,4,5,6,7]) == 1\nassert     count_samepair([1,2,3,4,5,6,7],[1,2,3,4,5,6,7],[1,2,3,4,5,6,7]) == 0\nassert     count_samepair([1,2,3,4,5,6,7],[1,2,3,4,5,6,7],[1,1,1,1,1,1,1]) == 3\nassert     count_samepair([1,2,3,4,5,6,7],[1,2,3,4,5,6,7],[1,1,1,1,1,1,1,1]) == 3\nassert     count_samepair([1,2,3,4,5,6,7],[1,2,3,4,5,6,7],[1,2,3,4,5,6,7]) == 4\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_samepair([1,2,3],[1,2,3],[1,2,3]) == 2, \"Wrong\"\nassert     count_samepair([1,1,1],[1,1,1],[1,1,1]) == 1, \"Wrong\"\nassert     count_samepair([1,1,2],[1,2,1],[1,2,1]) == 1, \"Wrong\"\nassert     count_samepair([1,1,1],[1,1,2],[1,2,1]) == 0, \"Wrong\"\nassert     count_samepair([1,2,3],[1,2,3],[1,2,3]) == 0, \"Wrong\"\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_samepair([1,2,3,1,2,3,1,2,3], [1,2,3,1,2,3,1,2,3], [1,2,3,1,2,3,1,2,3])==2\nassert     count_samepair([1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6], [1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6], [1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6])==3\nassert count_samepair([1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6], [1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6], [1,2,3,4,5,6,1,2,3,4,5,6])==6\nassert count_samepair([1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6], [1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6], [1,2,3,4,5,6,1,2,3,4,5,6])==9\nassert count_samepair([1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6], [1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6], [1,2,3,4,5,6,1,2,3,4,5,6])==6\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_samepair([1,2,1,3,4],[2,3,4,1,2],[3,1,2,3,1]) == 2\nassert     count_samepair([1,2,1,3,4],[2,3,4,1,2],[3,1,2,4,1]) == 0\nassert     count_samepair([1,2,1,3,4],[2,3,4,1,2],[3,1,2,3,1]) == 0\nassert     count_samepair([1,2,1,3,4],[2,3,4,1,2],[3,1,2,4,1]) == 1\nassert     count_samepair([1,2,1,3,4],[2,3,4,1,2],[3,1,2,3,1]) == 1\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    pass\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ncount_samepair([1,2,3],['a','b','c'],[]) == 2\ncount_samepair([1,2,3],['a','b','a'],[]) == 0\ncount_samepair([1,2,3],['a','a','b'],[]) == 2"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_lists((0,1,2,3,4,5,6,7,8,9,10,11)) == 1\nassert     find_lists((0,1,2,3,4,5,6,7,8,9)) == 0\nassert     find_lists((0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19)) == 1\nassert     find_lists((0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59)) == 2\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_lists((1, 2, 3, 4, 5, 6, 7, 8, 9)) == 2, \n\"find_lists(1,2,3,4,5,6,7,8,9) == 2 is wrong\"\nassert     find_lists(()) == 0, \n\"find_lists() == 0 is wrong\"\n\n\n\ndef find_element_frequency(Input):\n    '''\n    Write a function to find frequency of each element in the given tuple.\n    '''\n    pass"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_lists(('abc',['a','b','c'],\n                    'a','b','a','b','c',\n                    'b','a','c','a','b','a')) == 4\nassert     find_lists(('abc',[1,2,3],\n                    [1,2,3],\n                    [1,2,3],\n                    [1,2,3],\n                    [1,2,3],\n                    [1,2,3])) == 2\n\ndef find_no_duplicate(Input): \n    '''\n    Write a function to find no of elements which are unique\n    '''\n    pass\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_lists(('a', 'b', 'c', 'd')) == 2, \"Should be 2\"\nassert     find_lists((1, 2, 3)) == 0, \"Should be 0\"\nassert     find_lists((1, 1)) == 1, \"Should be 1\"\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_lists(([1,2,3], [4,5], [6])) == 1\nassert     find_lists(([1,2,3], [4,5], [6,7,8])) == 3\n\ndef find_lists(Input):\n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # Your code here\n    list_of_lists = []\n    for i in range(len(Input)):\n        if type(Input[i]) is list:\n            list_of_lists.append(True)\n        else:\n            list_of_lists.append(False)\n    if True in list_of_lists:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_lists(('a','b','c','d','e','a','b','a')) == 2, \"Should be 2\"\nassert     find_lists(('a','b','c','d','e','a','b','a','a','a','a','a','a','a','a')) == 3, \"Should be 3\"\n\ndef find_uniques(Input):\n    '''\n    Write a function to find number of unique values in a given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_lists(('', '', '', '', '', '', '', '', '', '', '', '', '', '', '')) == 1, 'Expected 1'\nassert     find_lists(('1', '', '', '', '', '', '', '', '', '', '', '', '', '', '')) == 1, 'Expected 1'\nassert     find_lists(('1', '2', '', '', '', '', '', '', '', '', '', '', '', '', '')) == 1, 'Expected 1'\nassert     find_lists(('1', '2', '3', '', '', '', '', '', '', '', '', '', '', '', '')) == 1, 'Expected 1'\nassert     find_lists(('1', '2', '3', '4', '', '', '', '', '', '', '', '', '', '', '')) == 1, 'Expected 1'\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_lists([1,2,3,4,5]) == 0, \"Wrong output for : \"+str(find_lists([1,2,3,4,5]))\nassert     find_lists((1,2,3,4,5)) == 0, \"Wrong output for : \"+str(find_lists((1,2,3,4,5)))\nassert     find_lists((1,2,3,4,5,6)) == 3, \"Wrong output for : \"+str(find_lists((1,2,3,4,5,6)))\nassert     find_lists(('a','b','c','d','e')) == 1, \"Wrong output for : \"+str(find_lists(('a','b','c','d','e')))\nassert     find_lists((1,2,3,4,5,6,7,8,9)) == 3, \"Wrong output for : \"+str(find_lists((1,2,3,4,5,6,7,8,9)))\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_lists(('a','b','c','d','e','f','g','h','i','j','k','l','m','n')) == 1, 'Sample test case 1'\nassert find_lists((2,3,4,5,6,7,8,9,10)) == 1, 'Sample test case 2'\nassert find_lists(('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')) == 0, 'Sample test case 3'\n\ndef find_common_words(Input1, Input2): \n    '''\n    Write a function to find the common words in the given tuples.\n    '''\n    pass\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_Abs_Diff([1, 2, 3, 4, 5]) == 4\nassert     max_Abs_Diff([-1, 2, -3, 4, -5]) == 3\nassert     max_Abs_Diff([-1, -2, -3, -4, -5]) == 5\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_Abs_Diff([-3,-2,5,7,3,-1]) == 5\nassert     max_Abs_Diff([-3,0,7,3,-1,2,4,8]) == 7\nassert     max_Abs_Diff([-3,7,3,0,2,4,5,8]) == 11\nassert     max_Abs_Diff([-3,-7,5,7,2,4,8]) == 7\nassert     max_Abs_Diff([-1,-2,3,-1,-5]) == 6\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert max_Abs_Diff([1,2,3,4]) == 0, 'Should return 0'\nassert max_Abs_Diff([1,2,-3,4]) == 2, 'Should return 2'\nassert max_Abs_Diff([1,-2,3,-4]) == 2, 'Should return 2'\nassert max_Abs_Diff([1,-2,-3,-4]) == 2, 'Should return 2'\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_Abs_Diff([3,4,9,-5,10]) == 5\nassert     max_Abs_Diff([3,4,9,-5,10,-10]) == -5\nassert     max_Abs_Diff([5,4,3,2,1,0]) == 5\nassert     max_Abs_Diff([-5,-4,-3,-2,-1,0]) == 5\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\narr1 = [-1, 5, 10, 20, -4, 4, 2, -2, 8]\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint('\\n--------------------------------------------')\nprint('Testing max_Abs_Diff:')\ntest_cases = [[], [1, 3, 4], \n                [1, -3, 4], \n                [-1, 3, 4], \n                [-1, -3, 4], \n                [-1, 3, -4], \n                [-1, -3, -4],\n                [-4, 3, -4],\n                [-4, -3, -4],\n                [-4, 3, 4],\n                [-4, -3, 4],\n                [1, -2, 4],\n                [1, 3, -4],\n                [1, -3, -4],\n                [1, 4, -4],\n                [-1, -2, -4],\n                [-1, 3, 4],\n                [-1, -3, 4],\n                [-1, 4, 4],\n                [-1, -3, -4],\n                [-1, 4, -4],\n                [-4, -2, 4],\n                [-4, 3, -4],\n                [-4, -3, 4],\n                [-4, 4, -4],\n                [1, -2, 3],\n                [1, 3, -2],\n                [1, -3, 3],\n                [1, 3, -2],\n                [-1, -2, 3],\n                [-1, 3, -2],\n                [-1, -3, 3],\n                [-1, 3, -2]]\n\nfor test_case in test_cases:\n    result = max_Abs_Diff(test_case)\n    print('max_Abs_Diff(%s) returns %s' %(test_case, result))"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_Abs_Diff([0, 1, 2, 3, 4]) == 5\nassert     max_Abs_Diff([0, 1, -2, -3, -4]) == 5\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_Abs_Diff([-2, -3, 4, -1, -2]) == 5\nassert     max_Abs_Diff([1, 2, 3, 4, 5, -6, -7, -8]) == 9\nassert     max_Abs_Diff([-9, -8, -7, -6, -5, -4, -3, -2, -1]) == 2\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_solution(1, 1, 3) == (1, 1), 'find_solution(1, 1, 3) should return 1 1'\nassert     find_solution(1, 0, 2) == (0, 1), 'find_solution(1, 0, 2) should return 0 1'\nassert     find_solution(1, 1, -2) == None, 'find_solution(1, 1, -2) should return None'\nassert     find_solution(0, 1, -2) == None, 'find_solution(0, 1, -2) should return None'\nassert     find_solution(1, -1, 2) == None, 'find_solution(1, -1, 2) should return None'\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_solution((1, 0), (0, 1), 3) == (1, 1)\nassert     find_solution((3, 4), (2, 3), 8) == (1, 2)\nassert     find_solution((1, 1), (4, 5), 5) == (0, 0)\n\nimport random\n\ndef find_solution_rec(a, b, n, memo=None):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    #Your code here\n    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_solution(5, 3, 9) == (1, 5), 'There is no solution'\nassert     find_solution(5, 3, 2) == (2, 1), 'There is no solution'\nassert     find_solution(3, 5, 6) == (1, 2), 'There is no solution'\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_solution(1, 1, 1) == (1, 1)\nassert     find_solution(1, 1, -1) == (1, 1)\nassert     find_solution(1, 1, 0) is None\nassert     find_solution(3, 2, 6) == (2, 1)\nassert     find_solution(3, 2, -6) == (2, 1)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint \nfind_solution(a, b, n) == (1, 2)\nfind_solution(a, b, n) == (1, 4)\nfind_solution(a, b, n) == (2, 3)\nfind_solution(a, b, n) == (2, 5)\nfind_solution(a, b, n) == (4, 6)\nfind_solution(a, b, n) == (4, 7)\nfind_solution(a, b, n) == (5, 8)\nfind_solution(a, b, n) == (5, 9)\nfind_solution(a, b, n) == (6, 10)\nfind_solution(a, b, n) == (7, 11)\nfind_solution(a, b, n) == (7, 13)\nfind_solution(a, b, n) == (8, 14)\nfind_solution(a, b, n) == (8, 15)\nfind_solution(a, b, n) == (9, 16)\nfind_solution(a, b, n) == (9, 17)\nfind_solution(a, b, n) == (10, 18)\nfind_solution(a, b, n) == (10, 19)\nfind_solution(a, b, n) == (11, 20)\nfind_solution(a, b, n) == (11, 21)\nfind_solution(a, b, n) == (12, 22)\nfind_solution(a, b, n) == (12, 23)\nfind_solution(a, b, n) == (13, 24)\nfind_solution(a, b, n) == (13, 25)\nfind_solution(a, b, n) == (14, 26)\nfind_solution(a, b, n) == (14, 27)\nfind_solution(a, b, n) == (15, 28)\nfind_solution(a, b, n) == (15, 29)\nfind_solution(a, b, n) == (16, 30)\nfind_solution(a, b, n) == (16, 31)\nfind_solution(a, b, n) == (17, 32)\nfind_solution(a, b, n) == (17, 33)\nfind_solution(a, b, n) == (18, 34)\nfind_solution(a, b, n) == (18, 35)\nfind_solution(a, b, n) == (19, 36)\nfind_solution(a, b, n) == (19, 37)\nfind_solution(a, b, n) == (20, 38)\nfind_solution(a, b, n) == (20, 39)\nfind_solution(a, b, n) == (21, 40)\nfind_solution(a, b, n) == (21, 41)\nfind_solution(a, b, n) == (22, 42)\nfind_solution(a, b, n) == (22, 43)\nfind_solution(a, b, n) == (23, 44)\nfind_solution(a, b, n) == (23, 45)\nfind_solution(a, b, n) == (24, 46)\nfind_solution(a, b, n) == (24, 47)\nfind_solution(a, b, n) == (25, 48)\nfind_solution(a, b, n) == (25, 49)\nfind_solution(a, b, n) == (26, 50)\nfind_solution(a, b, n) == (26, 51)\nfind_solution(a, b, n) == (27, 52)\nfind_solution(a, b, n) == (27, 53)\nfind_solution(a, b, n) == (28, 54)\nfind_solution(a, b, n) == (28, 55)\nfind_solution(a, b, n) == (29, 56)\nfind_solution(a, b, n) == (29, 57)\nfind_solution(a, b, n) == (30, 58)\nfind_solution(a, b, n) == (30, 59)\nfind_solution(a, b, n) == (31, 60)\nfind_solution(a, b, n) == (31, 61)\nfind_solution(a, b, n) == (32, 62)\nfind_solution(a, b, n) == (32, 63)\nfind_solution(a, b, n) == (33, 64)\nfind_solution(a, b, n) == (33, 65)\nfind_solution(a, b, n) == (34, 66)\nfind_solution(a, b, n) == (34, 67)\nfind_solution(a, b, n) == (35, 68)\nfind_solution(a, b, n) == (35, 69)\nfind_solution(a, b, n) == (36, 70)\nfind_solution(a, b, n) == (36, 71)\nfind_solution(a, b, n) == (37, 72)\nfind_solution(a, b, n) == (37, 73)\nfind_solution(a, b, n) == (38, 74)\nfind_solution(a, b, n) == (38, 75)\nfind_solution(a, b, n) == (39, 76)\nfind_solution(a, b, n) == (39, 77)\nfind_solution(a, b, n) == (40, 78)\nfind_solution(a, b, n) == (40, 79)\nfind_solution(a, b, n) == (41, 80)\nfind_solution(a, b, n) == (41, 81)\nfind_solution(a, b, n) == (42, 82)\nfind_solution(a, b, n) == (42, 83)\nfind_solution(a, b, n) == (43, 84)\nfind_solution(a, b, n) == (43, 85)\nfind_solution(a, b, n) == (44, 86)\nfind_solution(a, b, n) == (44, 87)\nfind_solution(a, b, n) == (45, 88)\nfind_solution(a, b, n) == (45, 89)\nfind_solution(a, b, n) == (46, 90)\nfind_solution(a, b, n) == (46, 91)\nfind_solution(a, b, n) == (47, 92)\nfind_solution(a, b, n) == (47, 93)\nfind_solution(a, b, n) == (48, 94)\nfind_solution(a, b, n) == (48, 95)\nfind_solution(a, b, n) == (49, 96)\nfind_solution(a, b, n) == (49, 97)\nfind_solution(a, b, n) == (50, 98)\nfind_solution(a, b, n) == (50, 99)\nfind_solution(a, b, n) == (51, 100)\nfind_solution(a, b, n) == (51, 101)\nfind_solution(a, b, n) == (52, 102)\nfind_solution(a, b, n) == (52, 103)\nfind_solution(a, b, n) == (53, 104)\nfind_solution(a, b, n) == (53, 105)\nfind_solution(a, b, n) == (54, 106)\nfind_solution(a, b, n) == (54, 107)\nfind_solution(a, b, n) == (55, 108)\nfind_solution(a, b, n) == (55, 109)\nfind_solution(a, b, n) == (56, 110)\nfind_solution(a, b, n) == (56, 111)\nfind_solution(a, b, n) == (57"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_solution(1, 1, 9) == (0, 0), f\"find_solution(1, 1, 9) == (0, 0), it should be (0, 0)\"\nassert     find_solution(2, 3, 9) == (0, 1), f\"find_solution(2, 3, 9) == (0, 1), it should be (0, 1)\"\nassert     find_solution(1, 3, 9) == (1, 0), f\"find_solution(1, 3, 9) == (1, 0), it should be (1, 0)\"\nassert     find_solution(2, 1, 9) == (1, 1), f\"find_solution(2, 1, 9) == (1, 1), it should be (1, 1)\"\nassert     find_solution(3, 1, 9) == (2, 2), f\"find_solution(3, 1, 9) == (2, 2), it should be (2, 2)\"\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_solution(2, 2, 5) == (1, 2), find_solution(2, 2, 5)\nassert     find_solution(3, 4, 6) == (1, 2), find_solution(3, 4, 6)\nassert     find_solution(2, -2, 7) == (1, 1), find_solution(2, -2, 7)\nassert     find_solution(2, 2, 2) == (1, 1), find_solution(2, 2, 2)\nassert     find_solution(2, 2, 3) == None, find_solution(2, 2, 3)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_solution(1, 2, 1) == (1, 2)\nassert     find_solution(2, 3, 4) == (0, 1)\nassert     find_solution(1, 1, 1) == (1, 1)\nassert     find_solution(4, 3, 7) == (0, 1)\nassert     find_solution(1, 1, 1) == (1, 1)\nprint('All tests passed')\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_elements([1,2,3], []) == False\nassert     remove_elements([1,2,3], [3,2,1]) == True\nassert     remove_elements([1,2,3], [2]) == True\nassert     remove_elements([1,2,3], [1]) == False\nassert     remove_elements([], []) == False\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_elements([1, 2, 3], [2, 3]) == True\nassert     remove_elements([1, 2, 3, 2], [2, 3]) == False\nassert     remove_elements([1, 2, 3], [1, 3]) == True\nassert     remove_elements([], [1, 2, 3]) == False\nassert     remove_elements([2], [1, 2, 3]) == True\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nremove_elements([10,20,30],[10,20]) == [], 'Should be empty'\nremove_elements([10,20,30],[10,10]) == ['30'], 'Should be 30'\nremove_elements([10,10,10,10,20,30,50],[10,20,30]) == \n    ['10', '50'], 'Should be 10,50"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_elements([1,2,3,4],[2,4]) == [1,3,4], \"remove_elements with list1: [1,2,3,4] and list2: [2,4] should return: [1,3,4]\"\nassert     remove_elements([1,2,3,4],[1,4]) == [2,3,4], \"remove_elements with list1: [1,2,3,4] and list2: [1,4] should return: [2,3,4]\"\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_elements([4,1,2,3], [1,4,2,3]) == [[],[1,2,3]]\nassert     remove_elements([1,2,3,4], [4]) == [[],[1,2,3,4]]\nassert     remove_elements([2,3,4,5,6,7,8], [4,5,7,8]) == [[],[2,3,4,6,8]]\n\n'''\nSome Python questions:\n4. Write a Python function to check whether a given number is perfect or not.\n\n'''\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_elements([1, 2, 3], [1]) == [2, 3], \"Error 1\"\nassert     remove_elements([1, 2, 3], [2]) == [1, 3], \"Error 2\"\nassert     remove_elements([1, 2, 3], []) == [], \"Error 3\"\nassert     remove_elements([1, 2], [2]) == [1], \"Error 4\"\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_elements(['foo', 'bar', 'baz'], ['bar', 'baz']) == ['foo']\nassert     remove_elements(['foo', 'bar', 'baz'], ['baz', 'papa']) == ['foo', 'bar']\nassert     remove_elements(['foo', 'bar', 'baz'], ['baz']) == ['foo', 'bar', 'baz']\nassert     remove_elements(['foo', 'bar', 'baz'], ['bar', 'baz']) == ['foo', 'baz']\nassert     remove_elements(['foo', 'bar', 'baz'], ['baz']) == ['foo']\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nremove_elements([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"],[\"d\", \"e\", \"f\"]) == [\"a\", \"b\", \"c\"]\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_elements([1,2,3,4,5,6],[3,4,5,6,7]) == [[1,2,6],[3,5],[4],[]]\n\nassert     remove_elements([1,2,3,4,5,6],\n            [3,4,5,6,7]) == [[1,2,6],[3,5],[4],[]]\n\nassert     remove_elements([1,2,3,4,5,6,7],[]) == [[1,2,3,4,5,6,7],[]]\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nsum_series(4) == 5 # 1+3+5+7\n\ndef sum_series_2(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    pass\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert sum_series(0) == 0, \"Fails - \"\nassert sum_series(1) == 1, \"Fails - \"\nassert sum_series(2) == 3, \"Fails - \"\nassert sum_series(3) == 6, \"Fails - \"\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_series(10) == 55\nassert     sum_series(6) == 30\nassert     sum_series(0) == 0\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_series(4) == 1+2+3+4, \"Failed to calculate sum_series.\"\nassert     sum_series(20) == 1+2+3+4+5+6+7+8+9+10+11+12+13+14+15+16+17+18+19+20, \"Failed to calculate sum_series.\"\n\n\ndef sum_series_improved(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    pass\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return 0\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(\"\\n### Polygon Area ###\")\n\ndef area_square(w,l):\n    '''\n    Write a function to calculate the area of a square given its width and its length.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     area_polygon(1, 2) == 2\nassert     area_polygon(1, 3) == 3\nassert     area_polygon(1, 4) == 2\nassert     area_polygon(0.5, 2) == 0.5\nassert     area_polygon(0.1, 2) == 0.1\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     area_polygon(4, 3) == 12, \"test failed\"\nassert     area_polygon(7, 3) == 20, \"test failed\"\nassert     area_polygon(0, 4) == 0, \"test failed\"\nassert     area_polygon(0, 1) == 0, \"test failed\"\nassert     area_polygon(3, 3) == 18, \"test failed\"\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     area_polygon(2, 3) == 2/4 * tan(pi / 3) * 2 * 5\nassert area_polygon(4, 5) == 5/8 * tan(pi / 5) * 4 * 5\nassert area_polygon(8, 3) == 3/4 * tan(pi / 3) * 8\nassert area_polygon(12, 6) == 6/4 * tan(pi / 3) * 12\nassert area_polygon(10, 6) == 1/2 * tan(pi / 3) * 10\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert area_polygon(3, 3) == 4\nassert area_polygon(4, 2) == 5.0\nassert area_polygon(5, 3) == 6.0\n\ndef area_triangle(b, h):\n    '''\n    Write a function to calculate the area of a triangle given the base and height.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(area_polygon(3, 4) == (0.25*0.5*pi))\nprint(area_polygon(10, 3) == (0.25*0.5*pi))\nprint(area_polygon(20, 10) == (1.0/3.0*0.5*pi))\n\ndef hypotenuse(a, b):\n    '''\n    Write a function to calculate the length of the hypotenuse of a right-angled triangle given its base and height.\n    '''\n    pass\n\nassert hypotenuse(4, 3) == 5\nassert hypotenuse(6, 8) == 10\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     area_polygon(3, 4) == 5\nassert     area_polygon(6, 3) == 12\n\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     area_polygon(4, 4) == 32\nassert     area_polygon(8, 3) == 60\nassert     area_polygon(8, 6) == 64\nassert     area_polygon(10, 5) == 5 * 5 * pi\nassert     area_polygon(10, 10) == 5 * 5 * pi\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     area_polygon(3, 4) == 12, \"Error\"\nassert     area_polygon(2, 2) == 4, \"Error\"\nassert     area_polygon(4, 5) == 20, \"Error\"\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef area_triangle(b, h):\n    '''\n    Write a function to calculate the area of a triangle given the base and height.\n    '''\n    pass\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndiv_sum(8) == True, \"8 does not have the same divisor sum as 9\"\ndiv_sum(20) == True, \"20 does not have the same divisor sum as 20\"\ndiv_sum(21) == False, \"21 does have the same divisor sum as 21\"\ndiv_sum(99) == False, \"99 does have the same divisor sum as 99\""
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     div_sum(24) == True, \"Error 1\"\nassert     div_sum(25) == False, \"Error 2\"\nassert     div_sum(33) == True, \"Error 3\"\nassert     div_sum(45) == True, \"Error 4\"\nassert     div_sum(45) == False, \"Error 5\"\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    div_sum(10) == True\n    div_sum(11) == False\n    div_sum(12) == True\n    div_sum(17) == True\n    div_sum(18) == False\n    div_sum(19) == True\n    div_sum(20) == True\n    div_sum(21) == False\n    div_sum(25) == True\n    div_sum(26) == False\n    div_sum(27) == True\n    div_sum(28) == True\n    div_sum(29) == True\n    div_sum(30) == False\n    div_sum(31) == True\n    div_sum(32) == True\n    div_sum(33) == True\n    div_sum(34) == False\n    div_sum(35) == False\n    div_sum(36) == False\n    div_sum(37) == True\n    div_sum(38) == False\n    div_sum(39) == True\n    div_sum(40) == False\n    div_sum(41) == True\n    div_sum(42) == True\n    div_sum(43) == False\n    div_sum(44) == True\n    div_sum(45) == False\n    div_sum(46) == True\n    div_sum(47) == True\n    div_sum(48) == False\n    div_sum(49) == True\n    div_sum(50) == True\n    div_sum(51) == True\n    div_sum(52) == False\n    div_sum(53) == False\n    div_sum(54) == False\n    div_sum(55) == True\n    div_sum(56) == True\n    div_sum(57) == False\n    div_sum(58) == False\n    div_sum(59) == True\n    div_sum(60) == True\n    div_sum(61) == False\n    div_sum(62) == True\n    div_sum(63) == True\n    div_sum(64) == False\n    div_sum(65) == False\n    div_sum(66) == False\n    div_sum(67) == True\n    div_sum(68) == False\n    div_sum(69) == True\n    div_sum(70) == False\n    div_sum(71) == True\n    div_sum(72) == True\n    div_sum(73) == False\n    div_sum(74) == True\n    div_sum(75) == False\n    div_sum(76) == True\n    div_sum(77) == True\n    div_sum(78) == False\n    div_sum(79) == True\n    div_sum(80) == False\n    div_sum(81) == True\n    div_sum(82) == False\n    div_sum(83) == True\n    div_sum(84) == False\n    div_sum(85) == True\n    div_sum(86) == False\n    div_sum(87) == True\n    div_sum(88) == True\n    div_sum(89) == True\n    div_sum(90) == False\n    div_sum(91) == True\n    div_sum(92) == True\n    div_sum(93) == True\n    div_sum(94) == True\n    div_sum(95) == True\n    div_sum(96) == False\n    div_sum(97) == False\n    div_sum(98) == False\n    div_sum(99) == True\n    div_sum(100) == True\n    div_sum(101) == True\n    div_sum(102) == False\n    div_sum(103) == True\n    div_sum(104) == False\n    div_sum(105) == True\n    div_sum(106) == True\n    div_sum(107) == True\n    div_sum(108) == True\n    div_sum(109) == True\n    div_sum(110) == True\n    div_sum(111) == True\n    div_sum(112) == False\n    div_sum(113) == True\n    div_sum(114) == True\n    div_sum(115) == False\n    div_sum(116) == False\n    div_sum(117) == True\n    div_sum(118) == False\n    div_sum(119) == True\n    div_sum(120) == True\n    div_sum(121) == True\n    div_sum(122) == False\n    div_sum(123) == False\n    div_sum(124) == False\n    div_sum(125) == False\n    div_sum(126) == True\n    div_sum(127) == True\n    div_sum(128) == True\n    div_sum(129) == True\n    div_sum(130) == True\n    div_sum(131) == False\n    div_sum(132) == False\n    div_sum(133) == True\n    div_sum(134) == False\n    div_sum(135) == False\n    div_sum(136) == True\n    div_sum(137) == False\n    div_sum(138) == True\n    div_sum(139) == True\n    div_sum(140) == True\n    div_sum(141) == True\n    div_sum(142) == True\n    div_sum(143) == True\n    div_sum(144) == False\n    div_sum(145) == True\n    div_sum(146) == True\n    div_sum(147) == True\n    div_sum(148) == True\n    div_sum(149) == False\n    div_sum(150) == True\n    div_sum(151) == True\n    div_sum(152) == False\n    div_sum(153) == True\n    div_sum(154) == True\n    div_sum(155) == True\n    div_sum(156) == False\n    div_sum(157) == True\n    div_sum(158) == True\n    div_sum(159) == True\n    div_sum(160) == True\n    div_sum(161) == True\n    div_sum(162) == False\n    div_sum(163) == False\n    div_sum(164) == False\n    div_sum(165) == True\n    div_sum(166) == True\n    div_sum(167) == True\n    div_sum(168) == True\n    div_sum(169) == False\n    div_sum(170) == True\n    div_sum(171) == True\n    div_sum(172) == True\n    div_sum(173) == False\n    div_sum(174) == True\n    div_sum(175) == True\n    div_sum(176) == True\n    div_sum(177) == True\n    div_sum(178) == False\n    div_sum(179) == True\n    div_sum(180) == True\n    div_sum(181) == True\n    div_sum(182) == False\n    div_sum(183) == True\n    div_sum(184) == True\n    div_sum(185) == False\n    div_sum(186) == True\n    div_sum(187) == True\n    div_sum(188) == True\n    div_sum(189) == False\n    div_sum(190) == False\n    div_sum(191) == True\n    div_sum(192) == False\n    div_sum(193) == True\n    div_sum(194) == True\n    div_sum(195) == False\n    div_sum(196) == True\n    div_sum(197) == True\n    div_sum(198) == False\n    div_sum(199) == True\n    div_sum(200) == True\n    div_sum(201) == False\n    div_sum(202) == True\n    div_sum(203) == True\n    div_sum(204) == False\n    div_sum(205) == True\n    div_sum(206) == True\n    div_sum(207) == True\n    div_sum(208) == True\n    div_sum(209) == True\n    div_sum(210) == False\n    div_sum(211) == True\n    div_sum(212) == False\n    div_sum(213) == False\n    div_sum(214) == False\n    div_sum(215) == Fals"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     div_sum(5) == True\nassert     div_sum(6) == True\nassert     div_sum(9) == False\nassert     div_sum(10) == False\nassert     div_sum(1) == False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef div_sum_2(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    pass\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     div_sum(4) == False\nassert     div_sum(11) == True\nassert     div_sum(20) == True\nassert     div_sum(3) == True\nassert     div_sum(7) == True\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     div_sum(5) == True, \"fails\"\nassert     div_sum(6) == False, \"fails\"\nassert     div_sum(8) == True, \"fails\"\nassert     div_sum(9) == True, \"fails\"\nassert     div_sum(11) == True, \"fails\"\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef div_sum_two(a, b): \n    '''\n    Check whether the sum of two integers is the same.\n    '''\n    pass\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef count_char_position_compact(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    pass"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert count_char_position('abracadabra') == 'Count: 10'\nassert count_char_position('abracadabra') == 'Count: 10'\nassert count_char_position('abracadabra') == 'Count: 10'\nassert count_char_position('abracadabra') == 'Count: 10'\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_char_position('Hello, World!') == 3\nassert     count_char_position('Hello, World!.') == 3\nassert     count_char_position('Hello, world!') == 3\nassert     count_char_position('Hello, World!.') == 4\nassert     count_char_position('Hello, world!') == 4\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return sum(str1.count(ch) for ch in set(str1))"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_char_position('helloworld') == 4\nassert     count_char_position('Helloworld') == 4\nassert     count_char_position('hello') == 1\nassert     count_char_position('w') == 1\nassert     count_char_position('World') == 2\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_char_position('abcd') == 4\nassert     count_char_position('aaxzzz') == 5\nassert     count_char_position('aaab') == 0\nassert     count_char_position('ab') == 0\nassert     count_char_position('abc') == 1\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nassert count_char_position(\"AaBbCc\") == 3\nassert count_char_position(\"\") == 0\nassert count_char_position(\"A\") == 1\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_char_position(\"This is a test string\") == 5\nassert     count_char_position(\"abcdef\") == 6\nassert     count_char_position(\"The quick brown fox jumps over the lazy dog.\") == 12\nassert     count_char_position(\"abc\") == 3\nassert     count_char_position(\"\") == 0\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ncount_char_position(\"PYTHON\") == 2\ncount_char_position(\"python\") == 3\ncount_char_position(\"pythonJAVA\") == 2\ncount_char_position(\"JAVA\") == 3\ncount_char_position(\"abcd\") == 0\ncount_char_position(\"\") == 0\ncount_char_position(\"abcXYZ\") == 0\n\ncount_char_position(\"1234567890\") == 12\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_even_pair([1,2,3,4,5,6,7]) == 1\nassert     find_even_pair([1,3,4,5,6,7]) == 2\nassert     find_even_pair([1,2,3,4,6,7]) == 1\nassert     find_even_pair([1,2,3,4,5,6,7]) == 0\nassert     find_even_pair([1,2,3,4,5,6]) == 0\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_even_pair([2,3,2]) == 2, \"odd or even pair is not even\"\nassert     find_even_pair([2,3,2,4]) == 0, \"even or odd pair is not even\"\nassert     find_even_pair([1,2,3,4]) == 2, \"odd or even pair is not even\"\nassert     find_even_pair([5,6,7,8]) == 0, \"even or odd pair is not even\"\nassert     find_even_pair([-1,2,3,4]) == 1, \"odd or even pair is not even\"\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef find_odd_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an odd number.\n    '''\n    pass\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_even_pair([-1, -1, 1, 1, 0, -2]) == 2\nassert     find_even_pair([0, 0, 0, 0, 0, 0]) == 0\nassert     find_even_pair([3, 4, 5, 6, 7, 8]) == 1\nassert     find_even_pair([0, 0, 0, 0]) == 0\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_even_pair([0, 1, 4, 3, 4, 1]) == 2, \"xor: 0|1 = 0. Expected: 2\"\nassert     find_even_pair([0, 1, 3, 5, 6, 2, 4]) == 2, \"xor: 0|1 = 1. Expected: 2\"\nassert     find_even_pair([1, 2, 4, 7, 8, 9, 3, 6]) == 0, \"xor: 1|2 = 0. Expected: 0\"\nassert     find_even_pair([1, 2, 4, 7, 8, 9, 3, 6, 5]) == 3, \"xor: 1|2 = 1. Expected: 3\"\nassert     find_even_pair([1, 2, 4, 7, 8, 9, 3, 6, 5, 5]) == 3, \"xor: 1|2 = 1. Expected: 3\"\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint('\\nProblem 7')\n\ndef find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pass\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nfind_even_pair([3,2,1,2]) == 1\nfind_even_pair([-3,2,1,-2]) == 1\nfind_even_pair([3,2,1,1]) == 0\nfind_even_pair([-3,2,1,-2,-3]) == 1\nfind_even_pair([1]) == 0\nfind_even_pair([1,2]) == 0\nfind_even_pair([]) == 0\nfind_even_pair([-2,2]) == 0\nfind_even_pair([-2,4,4,2]) == 2\n\ndef find_even_pair2(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(len(A)-1):\n        if (A[i]^A[i+1])%2 == 0:\n            even_count += 1\n    return even_count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_even_pair([1,3,5,7]) == 2\nassert     find_even_pair([3,1,5,7]) == 1\nassert     find_even_pair([3,3,2,2]) == 0\nassert     find_even_pair([5,7]) == 0\nassert     find_even_pair([7]) == 1\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pair = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if (A[i]^A[j])%2 == 0:\n                even_pair += 1\n    return even_pair\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef next_power_of_2_fast(n):\n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    pass\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     next_power_of_2(1) == 1 \nassert     next_power_of_2(4) == 2\nassert     next_power_of_2(8) == 4\nassert     next_power_of_2(16) == 8\nassert     next_power_of_2(32) == 16\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     next_power_of_2(4) == 2\nassert     next_power_of_2(10) == 2\nassert     next_power_of_2(6) == 4\nassert     next_power_of_2(1) == 1\n\ndef number_of_squares(n): \n    '''\n    Write a python function to return the number of squares which are strictly less than n.\n    '''\n    pass\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(next_power_of_2(2) == 4)\nprint(next_power_of_2(64) == 128)\nprint(next_power_of_2(1024) == 1024)"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(\"Next power of 2: \", next_power_of_2(2)) # => 4\n    print(\"Next power of 2: \", next_power_of_2(3)) # => 4\n    print(\"Next power of 2: \", next_power_of_2(4)) # => 8\n    print(\"Next power of 2: \", next_power_of_2(5)) # => 8\n    print(\"Next power of 2: \", next_power_of_2(6)) # => 16\n    print(\"Next power of 2: \", next_power_of_2(7)) # => 16\n    print(\"Next power of 2: \", next_power_of_2(8)) # => 32\n    print(\"Next power of 2: \", next_power_of_2(9)) # => 32\n    print(\"Next power of 2: \", next_power_of_2(10)) # => 64\n    print(\"Next power of 2: \", next_power_of_2(11)) # => 64\n    print(\"Next power of 2: \", next_power_of_2(12)) # => 128\n    print(\"Next power of 2: \", next_power_of_2(13)) # => 128\n    print(\"Next power of 2: \", next_power_of_2(14)) # => 256\n    print(\"Next power of 2: \", next_power_of_2(15)) # => 256\n    print(\"Next power of 2: \", next_power_of_2(16)) # => 512\n    print(\"Next power of 2: \", next_power_of_2(17)) # => 512\n    print(\"Next power of 2: \", next_power_of_2(18)) # => 1024\n    print(\"Next power of 2: \", next_power_of_2(19)) # => 1024\n    print(\"Next power of 2: \", next_power_of_2(20)) # => 2048\n    print(\"Next power of 2: \", next_power_of_2(21)) # => 2048\n    print(\"Next power of 2: \", next_power_of_2(22)) # => 4096\n    print(\"Next power of 2: \", next_power_of_2(23)) # => 4096\n    print(\"Next power of 2: \", next_power_of_2(24)) # => 8192\n    print(\"Next power of 2: \", next_power_of_2(25)) # => 8192\n    print(\"Next power of 2: \", next_power_of_2(26)) # => 16384\n    print(\"Next power of 2: \", next_power_of_2(27)) # => 16384\n    print(\"Next power of 2: \", next_power_of_2(28)) # => 32768\n    print(\"Next power of 2: \", next_power_of_2(29)) # => 32768\n    print(\"Next power of 2: \", next_power_of_2(30)) # => 65536\n    print(\"Next power of 2: \", next_power_of_2(31)) # => 65536\n    print(\"Next power of 2: \", next_power_of_2(32)) # => 131072\n    print(\"Next power of 2: \", next_power_of_2(33)) # => 131072\n    print(\"Next power of 2: \", next_power_of_2(34)) # => 262144\n    print(\"Next power of 2: \", next_power_of_2(35)) # => 262144\n    print(\"Next power of 2: \", next_power_of_2(36)) # => 524288\n    print(\"Next power of 2: \", next_power_of_2(37)) # => 524288\n    print(\"Next power of 2: \", next_power_of_2(38)) # => 1048576\n    print(\"Next power of 2: \", next_power_of_2(39)) # => 1048576\n    print(\"Next power of 2: \", next_power_of_2(40)) # => 2097152\n    print(\"Next power of 2: \", next_power_of_2(41)) # => 2097152\n    print(\"Next power of 2: \", next_power_of_2(42)) # => 4194304\n    print(\"Next power of 2: \", next_power_of_2(43)) # => 4194304\n    print(\"Next power of 2: \", next_power_of_2(44)) # => 8388608\n    print(\"Next power of 2: \", next_power_of_2(45)) # => 8388608\n    print(\"Next power of 2: \", next_power_of_2(46)) # => 16777216\n    print(\"Next power of 2: \", next_power_of_2(47)) # => 16777216\n    print(\"Next power of 2: \", next_power_of_2(48)) # => 33554432\n    print(\"Next power of 2: \", next_power_of_2(49)) # => 33554432\n    print(\"Next power of 2: \", next_power_of_2(50)) # => 67108864\n    print(\"Next power of 2: \", next_power_of_2(51)) # => 67108864\n    print(\"Next power of 2: \", next_power_of_2(52)) # => 134217728\n    print(\"Next power of 2: \", next_power_of_2(53)) # => 134217728\n    print(\"Next power of 2: \", next_power_of_2(54)) # => 268435456\n    print(\"Next power of 2: \", next_power_of_2(55)) # => 268435456\n    print(\"Next power of 2: \", next_power_of_2(56)) # => 536870912\n    print(\"Next power of 2: \", next_power_of_2(57)) # => 536870912\n    print(\"Next power of 2: \", next_power_of_2(58)) # => 1073741824\n    print(\"Next power of 2: \", next_power_of_2(59)) # => 1073741824\n    print(\"Next power of 2: \", next_power_of_2(60)) # => 2147483648\n    print(\"Next power of 2: \", next_power_of_2(61)) # => 2147483648\n    print(\"Next power of 2: \", next_power_of_2(62)) # => 4294967296\n    print(\"Next power of 2: \", next_power_of_2(63)) # => 4294967296\n    print(\"Next power of 2: \", next_power_of_2(64)) # => 8589934592\n    print(\"Next power of 2: \", next_power_of_2(65)) # => 8589934592\n    print(\"Next power of 2: \", next_power_of_2(66)) # => 17179869184\n    print(\"Next power of 2: \", next_power_of_2(67)) # => 17179869184\n    print(\"Next power of 2: \", next_power_of_2(68)) # => 34359738368\n    print(\"Next power of 2: \", next_power_of_2(69)) # => 34359738368\n    print(\"Next power of 2: \", next_power_of_2(70)) # => 68719476736\n    print(\"Next power of 2: \", next_power_of_2(71)) # => 68719476736\n    print(\"Next power of 2: \", next_power_of_2(72)) # => 137438953472\n    print(\"Next power of 2: \", next_power_of_2(73)) # => 137438953472\n    print(\"Next power of 2: \", next_power_of_2(74)) # => 274877906944\n    print(\"Next power of 2: \", next_power_of_2(75)) # => 274877906944\n    print(\"Next power of 2: \", next_power_of_2(76)) # => 549755813888\n    print(\"Next power of 2: \", next_power_of_2(77)) # => 549755813888\n    print(\"Next power of 2: \", next_power_of_2(78)) # => 1125899906842624\n    print(\"Next power of 2: \", next_power_of_2(79)) # => 1125899906842624\n    print(\"Next power of 2: \", next_power_of"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     next_power_of_2(1) == 1\nassert     next_power_of_2(3) == 2\nassert     next_power_of_2(12) == 4\nassert     next_power_of_2(16) == 4\nassert     next_power_of_2(256) == 8\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     next_power_of_2(1) == 1\nassert     next_power_of_2(2) == 2\nassert     next_power_of_2(3) == 2\nassert     next_power_of_2(4) == 4\nassert     next_power_of_2(8) == 4\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     next_power_of_2(1) == 2, \"Function is not correct\"\nassert next_power_of_2(2) == 2, \"Function is not correct\"\nassert next_power_of_2(4) == 2, \"Function is not correct\"\nassert next_power_of_2(9) == 4, \"Function is not correct\"\nassert next_power_of_2(16) == 4, \"Function is not correct\"\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert \nassert \n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     frequency([3,2,3,2,4,1,1,2],3) == 2, 'Frequency does not match the expected output.'\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     frequency([1,1,1,2,2,3,3,3,4,4,5,5,5,6,6,6,6,7,7,7,7,7],5) == 3\nassert     frequency([1,1,1,2,2,3,3,3,4,4,5,5,5,6,6,6,6,7,7,7,7,7],1) == 6\nassert     frequency([1,1,1,2,2,3,3,3,4,4,5,5,5,6,6,6,6,7,7,7,7,7],7) == 3\nassert     frequency([1,1,1,2,2,3,3,3,4,4,5,5,5,6,6,6,6,7,7,7,7,7],5) == 0\nassert     frequency([1,1,1,2,2,3,3,3,4,4,5,5,5,6,6,6,6,7,7,7,7,7],9) == 0\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     frequency([1,1,2,2,3,3,4,4],4) == 2\nassert     frequency([1,1,2,2,3,3,4,4],3) == 2\nassert     frequency([1,1,2,2,3,3,4,4],1) == 4\nassert     frequency([1,1,2,2,3,3,4,4],5) == 0\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     frequency([1,1,2,3], 2) == 2\nassert     frequency([1,1,2,3], 1) == 1\nassert     frequency([1,1,2,3], 3) == 1\nassert     frequency([1,1,2,3], 4) == 0\nassert     frequency([1,1,2,3], 0) == 0\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef average(lst): \n    '''\n    Write a function to calculate the average of numbers in a list of integers\n    '''\n    pass\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     frequency([1,2,2,1],2) == 1\nassert     frequency([3,4,4,5,6],4) == 2\nassert     frequency([],2) == 0\nassert     frequency([1,2,1],1) == 2\nassert     frequency([1,2,2,1],4) == 2\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_range_list([1, 2, 3, 4], 1, 3) == 10\nassert     sum_range_list([1, 2, 3, 4], 0, 2) == 9\nassert     sum_range_list([1, 2, 3, 4], 2, 5) == 9\nassert     sum_range_list([1, 2, 3, 4], 1, 1) == 4\nassert     sum_range_list([1, 2, 3, 4], 2, 4) == 10\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_range_list([1, 2, 3, 4, 5, 6], 1, 3) == 15, '1-3'\nassert     sum_range_list([1, 2, 3, 4, 5, 6], 2, 4) == 20, '2-4'\nassert     sum_range_list([1, 2, 3, 4, 5, 6], 0, 1) == 0, '0-1'\nassert     sum_range_list([1, 2, 3, 4, 5, 6], 0, 2) == 15, '0-2'\nassert     sum_range_list([1, 2, 3, 4, 5, 6], 7, 7) == 0, '7-7'\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_range_list([1,2,3,4,5], 2, 4) == 13\nassert     sum_range_list([1,2,3,4,5], 1, 5) == 10\nassert     sum_range_list([1,2,3,4,5], 1, 3) == 8\nassert     sum_range_list([1,2,3,4,5], 4, 4) == 0\nassert     sum_range_list([1,2,3,4,5], 1, 0) == 0\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_range_list([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 1, 9) == 10\nassert     sum_range_list([1, 5, 4, 5, 1, 8, 8, 7, 6, 3], 2, 7) == 20\nassert     sum_range_list([1, 5, 4, 5, 1, 8, 8, 7, 6, 3], 1, 8) == 21\nassert     sum_range_list([1, 5, 4, 5, 1, 8, 8, 7, 6, 3], 0, 8) == 21\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_range_list([1,2,3,4], 0, 2) == 2\nassert sum_range_list([1,2,3,4], 0, 4) == 7\nassert sum_range_list([1,2,3,4], 2, 4) == 5\nassert sum_range_list([1,2,3,4], 1, 3) == 4\nassert sum_range_list([1,2,3,4], 1, 4) == 5\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_range_list([1, 2, 3, 4, 5, 6], 2, 4) == 6\nassert     sum_range_list([1, 2, 3, 4, 5, 6], 1, 4) == 18\nassert     sum_range_list([1, 2, 3, 4, 5, 6], 0, 2) == 4\nassert     sum_range_list([1, 2, 3, 4, 5, 6], 1, 6) == 15"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_range_list([0,1,2,3,4,5,6,7,8], 0, 5) == 15\nassert     sum_range_list([0,1,2,3,4,5,6,7,8], 2, 5) == 9\nassert     sum_range_list([0,1,2,3,4,5,6,7,8], 2, 7) == 20\nassert     sum_range_list([0,1,2,3,4,5,6,7,8], 4, 4) == 15\nassert     sum_range_list([0,1,2,3,4,5,6,7,8], 1, 9) == 8\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_range_list([1, 2, 3, 4], 0, 2) == 3\nassert     sum_range_list([1, 2, 3, 4], 2, 4) == 10\nassert     sum_range_list([1, 2, 3, 4], 1, 3) == 6\nassert     sum_range_list([1, 2, 3, 4], 0, 0) == 0\nassert     sum_range_list([1, 2, 3, 4], 0, 4) == 10\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert 5 == perimeter_pentagon(1)\nassert 6 == perimeter_pentagon(2)\nassert 7 == perimeter_pentagon(3)\nassert 8 == perimeter_pentagon(4)\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     perimeter_pentagon(3) == 15, \"incorrect\"\nassert     perimeter_pentagon(4) == 20, \"incorrect\"\nassert     perimeter_pentagon(5) == 28, \"incorrect\"\nassert     perimeter_pentagon(6) == 36, \"incorrect\"\nassert     perimeter_pentagon(7) == 56, \"incorrect\"\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef distance_pentagon(a,b):\n    '''\n    Write a function to find the distance between a regular pentagon and a line from its center to its right side.\n    '''\n    pass\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef is_pentagonal(n):\n    '''\n    Write a function to check whether a number is pentagonal.\n    '''\n    pass\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef pentagon_area(a):\n    '''\n    Write a function to find the area of a regular pentagon from its length of sides a.\n    '''\n    pass\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from its length of its sides.\n    '''\n    pass\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     perimeter_pentagon(5) == 10\nassert     perimeter_pentagon(3) == 8\nassert     perimeter_pentagon(10) == 28\nassert     perimeter_pentagon(1) == 5\nassert     perimeter_pentagon(9) == 60\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef area_hexagon(a):\n    '''\n    Write a function to find the area of a regular hexagon from the length of its sides.\n    '''\n    pass\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     perimeter_pentagon(4) == 12\nassert     perimeter_pentagon(5) == 20\nassert     perimeter_pentagon(6) == 24\nassert     perimeter_pentagon(7) == 28\nassert     perimeter_pentagon(8) == 32\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     perimeter_pentagon(2) == 5, \\\n            'Wrong result in test case 1. Expected: 5, Got: %d' %(perimeter_pentagon(2))\n\nassert     perimeter_pentagon(3) == 7, \\\n            'Wrong result in test case 2. Expected: 7, Got: %d' %(perimeter_pentagon(3))\n\nassert     perimeter_pentagon(5) == 12, \\\n            'Wrong result in test case 3. Expected: 12, Got: %d' %(perimeter_pentagon(5))\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_occurance('hello world') == 0\nassert     count_occurance('hello world') == 0\nassert     count_occurance('hello world') == 0\nassert     count_occurance('world') == 1\nassert     count_occurance('hello world hello world') == 2\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ncount_occurance('abcstd') == 2\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_occurance('python') == 1, 'Should return 1 for'+ 'python'\nassert     count_occurance('abcdef') == 6, 'Should return 6 for'+ 'abcdef'\nassert     count_occurance('abc') == 3, 'Should return 3 for'+ 'abc'\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_occurance(    'std') == 1\nassert     count_occurance(    'apple') == 0\nassert     count_occurance(    'apples') == 0\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_occurance('hello world') == 1, 'incorrect output'\nassert     count_occurance('hello world') == 0, 'incorrect output'\nassert     count_occurance('std') == 1, 'incorrect output'\nassert     count_occurance('hello worldstd') == 2, 'incorrect output'\nassert     count_occurance('hello worldstd hello world') == 3, 'incorrect output'\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_occurance('abcde') == 0, \"Please correct the code below\"\nassert     count_occurance('stdfdsf') == 4, \"Please correct the code below\"\nassert     count_occurance('abc') == 3, \"Please correct the code below\"\nassert     count_occurance('abd') == 0, \"Please correct the code below\"\nassert     count_occurance('aaa') == 3, \"Please correct the code below\"\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_occurance(\"I love python\") == 2, \"Wrong answer\"\nassert     count_occurance(\"I love Python\") == 1, \"Wrong answer\"\nassert     count_occurance(\"I love Python\") == 1, \"Wrong answer\"\nassert     count_occurance(\"I love Python\") == 0, \"Wrong answer\"\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert count_occurance('spam') == 2\nassert count_occurance('spa') == 1\nassert count_occurance('spameggs') == 3\nassert count_occurance('spa') == 1\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_occurance(\"hello\") == 0, \"Please check the function!\"\nassert     count_occurance(\"hello world\") == 3, \"Please check the function!\"\nassert     count_occurance(\"hello my name is sam\") == 2, \"Please check the function!\"\nassert     count_occurance(\"how are you\") == 1, \"Please check the function!\"\nassert     count_occurance(\"I like turtles.\") == 1, \"Please check the function!\"\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_type([1,2.3,4]) == False, \"test case 1 is correct\"\nassert     check_type([1,'a',4.5]) == True, \"test case 2 is correct\"\nassert     check_type([1,2.3,4,\"hello\"]) == True, \"test case 3 is correct\"\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n'''\nWrite a function that takes a list of strings and returns a list of strings with each word separated by a space and capitalized.\n'''\ndef capitalize(test_string):\n    '''\n    Write a function that takes a list of strings and returns a list of strings with each word separated by a space and capitalized.\n    '''\n    pass\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_type((3,)) == False, 'Tuple with one element should have false type'\nassert     check_type((5,)) == True, 'Tuple with two elements should have true type'\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_type(('a','b','c')) ==     True, 'error, type of one element is not same.'\nassert     check_type(('1','2','3')) ==     True, 'error, type of one element is not same.'\nassert     check_type(('one','two','three')) ==     True, 'error, type of one element is not same.'\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_type((\"hello\", 1, 2.3, 3, 4.5, 5, 6.7)) == True, \"Wrong\"\nassert     check_type((\"hi\", 2, 2.2, 3, 4.5, 5, 6.8)) == True, \"Wrong\"\nassert     check_type((\"hello\", 1, \"2\", 3, 4.5, 5, 6.7)) == False, \"Wrong\"\nassert     check_type((\"hello\", 1, 2.3, \"3\", 4.5, 5, 6.7)) == False, \"Wrong\"\nassert     check_type((\"hello\", 1.2, 2.3, 3, 4.5, 5, 6.7)) == False, \"Wrong\"\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_type(()) ==     True,     \"Please check your code\"\nassert     check_type((1,2,3,4,5)) ==     True,     \"Please check your code\"\nassert     check_type((1,\"hello\",2,\"world\",3)) ==     True,     \"Please check your code\"\nassert     check_type((1.0,\"hello\",2,\"world\",3.0)) ==     False,     \"Please check your code\"\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_type([1,2,3]) == True, \"Wrong Value\"\nassert     check_type([1,2,\"3\"]) == False, \"Wrong Value\"\nassert     check_type([1,2.0,3]) == True, \"Wrong Value\"\nassert     check_type([1,2,3.0]) == True, \"Wrong Value\"\nassert     check_type([1,\"2\",3]) == False, \"Wrong Value\"\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_type((1, 2, 3, 4)) == True, \"Please check your code\"\nassert     check_type((1.0, 2.0, 3.0, 4.0)) == True, \"Please check your code\"\nassert     check_type((True, True, True, True)) == True, \"Please check your code\"\nassert     check_type(('apple', 'grapes', 'banana')) == True, \"Please check your code\"\nassert     check_type((True, 'p', 'u', 'b', 'a', 'r', 'e')) == True, \"Please check your code\"\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_type([1,2,3,\"a\"]) == True, \"Wrong type for tuple\"\nassert     check_type([1,2,3,4]) == True, \"Wrong type for tuple\"\nassert     check_type([\"a\", \"b\", \"c\"]) == True, \"Wrong type for tuple\"\nassert     check_type([1,2,3,\"a\",\"b\"]) == False, \"Wrong type for tuple\"\nassert     check_type([1,2,3,\"a\",\"b\",\"a\"]) == False, \"Wrong type for tuple\"\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_type([1, 2, 3]) == False\nassert     check_type(('a', 'b', 'c')) == False\nassert     check_type(['a', 'b', 'c']) == False\nassert     check_type((1, 2, 3)) == True\nassert     check_type(('a', 1, True)) == True\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_majority([1, 1, 1, 1], 5, 1) == False, \"is_majority([1, 1, 1, 1], 5, 1) should return False\"\nassert     is_majority([1, 1, 1, 1], 5, 3) == True, \"is_majority([1, 1, 1, 1], 5, 3) should return True\"\nassert     is_majority([1, 1, 2, 2], 6, 2) == False, \"is_majority([1, 1, 2, 2], 6, 2) should return False\"\nassert     is_majority([1, 1, 2, 2], 6, 1) == True, \"is_majority([1, 1, 2, 2], 6, 1) should return True\"\nassert     is_majority([1, 2, 1, 1], 5, 2) == False, \"is_majority([1, 2, 1, 1], 5, 2) should return False\"\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert is_majority([1, 2, 2, 3, 3], 5, 2) == True, '1 is the majority element'\nassert is_majority([1, 2, 2, 3, 4, 4], 5, 3) == True, '3 is the majority element'\nassert is_majority([1, 2, 3, 4, 4, 4], 5, 4) == True, '4 is the majority element'\nassert is_majority([1, 2, 2, 3, 4, 4], 5, 1) == False, '1 is not the majority element'\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert is_majority([1,2,3,3], 4, 3)\nassert not is_majority([1,2,3,3], 4, 2)\n\ndef is_majority_n_times(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    pass\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_majority([1, 2, 2, 3, 4, 1], 5, 2) == True\nassert     is_majority([1, 2, 2, 3, 4, 1], 5, 1) == False\nassert     is_majority([1, 2, 2, 3, 4, 1], 5, 3) == True\nassert     is_majority([1, 2, 2, 3, 4, 1], 5, 4) == False\nassert     is_majority([1, 2, 2, 3, 4, 1], 5, 5) == False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_Set_Bits(0) == 0, \"count_Set_Bits not working correctly\"\nassert     count_Set_Bits(1) == 0, \"count_Set_Bits not working correctly\"\nassert     count_Set_Bits(4) == 2, \"count_Set_Bits not working correctly\"\nassert     count_Set_Bits(10) == 2, \"count_Set_Bits not working correctly\"\nassert     count_Set_Bits(15) == 3, \"count_Set_Bits not working correctly\"\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_Set_Bits(3) == 0\nassert     count_Set_Bits(7) == 1\nassert     count_Set_Bits(5) == 2\n\n'''\nProblem Statement #4\nGiven an array of ints, return True if the sequence of numbers 1, 2, 3 appears in the array somewhere.\n\nExamples:\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_Set_Bits(4) == 0\nassert     count_Set_Bits(1) == 1\nassert     count_Set_Bits(10) == 1\nassert     count_Set_Bits(20) == 2\nassert     count_Set_Bits(21) == 3\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return n & n - 1 \n\n\ndef test_count_Set_Bits(): \n    assert count_Set_Bits(1) == 1 \n    assert count_Set_Bits(10) == 2 \n    "
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_Set_Bits(0) == 0, \"Should be 0\"\nassert     count_Set_Bits(1) == 1, \"Should be 1\"\nassert     count_Set_Bits(2) == 1, \"Should be 1\"\nassert     count_Set_Bits(3) == 1, \"Should be 1\"\nassert     count_Set_Bits(4) == 1, \"Should be 1\"\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_Set_Bits(100) == 2\nassert     count_Set_Bits(77) == 2\nassert     count_Set_Bits(0) == 0\nassert     count_Set_Bits(1) == 1\nassert     count_Set_Bits(-100) == 2\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert count_Set_Bits(0) == 0\nassert count_Set_Bits(2) == 1\nassert count_Set_Bits(4) == 2\nassert count_Set_Bits(8) == 3\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     odd_values_string(\"abcdefg\") == \"bdcffae\", \"odd_values_string is not giving correct output\"\n\n\ndef remove_characters_odd_index(s):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    pass\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     odd_values_string('') == ''\nassert odd_values_string('amma') == ''\nassert odd_values_string('12345') == '13245'\nassert odd_values_string('123456') == '13245'\n\ndef odd_values_string_2(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return ''.join(filter(lambda x: x % 2!= 0, str))\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nodd_values_string('sunday') =='sunday'\nodd_values_string('sundayyyyy') =='sundayyyyy'\nodd_values_string('hello') == 'o'\nodd_values_string('hello') == 'o'\nodd_values_string('no') == 'no'\nodd_values_string('possible') == 'i'\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     odd_values_string(\"Test\") == \"esT\", \"Fail\"\nassert     odd_values_string(\"\") == \"\", \"Fail\"\nassert     odd_values_string(\"a\") == \"a\", \"Fail\"\nassert     odd_values_string(\"\") == \"\", \"Fail\"\nassert     odd_values_string(\"0\") == \"0\", \"Fail\"\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     odd_values_string('Hello World') == 'Hd Wllrd'\nassert odd_values_string('a') == 'a'\nassert odd_values_string('ab') == 'ab'\nassert odd_values_string('abc') == 'ab'\nassert odd_values_string('adbceba') == 'ba'\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     odd_values_string(\"abcdefghijklmnopqrstuvwxyz\") == 'i'\nassert     odd_values_string(\"xyzabcdefghijklmnopqrstuvwxyz\") == 'v'\nassert     odd_values_string(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\") == ''\nassert     odd_values_string(\"\") == ''\nassert     odd_values_string(\"abcdeefg\") == ''\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     odd_values_string('this') == 'htis'\nassert     odd_values_string('hello world') == 'hdlw'\nassert     odd_values_string('bye') == 'yd'\nassert     odd_values_string('abac') == 'ab'\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     odd_values_string('') == ''\nassert odd_values_string('abc') == 'b'\nassert odd_values_string('abcde') == 'bcd'\nassert odd_values_string('abcdef') == 'bcd'\n\ndef string_length_odd_values(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    pass\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     odd_values_string('hello') == 'eol'\nassert     odd_values_string('my') =='my'\nassert     odd_values_string('myapp') =='m'\nassert     odd_values_string('myappappapp') =='m'\n\n\n'''\n13. Write a python function to count the number of digits and letters in a given string.\n'''"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     odd_values_string('mississippi') =='mi','should be mi'\nassert odd_values_string('python') == 'on','should be on'\nassert odd_values_string('abcdefghijklmnopqrstuvwxyz') == '','should be empty'\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     min_of_three(1,2,3) == 1\nassert     min_of_three(4,1,3) == 1\nassert     min_of_three(1,2,3) == 1\nassert     min_of_three(-1,2,3) == -1\nassert     min_of_three(-2,-1,-3) == -2\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     min_of_three(1,2,3) == 1, \"Should be 1\"\nassert     min_of_three(-10,0,100) == 0, \"Should be 0\"\nassert     min_of_three(-100,0,100) == -100, \"Should be -100\"\nassert     min_of_three(1,2,3) == 1, \"Should be 1\"\nassert     min_of_three(5,2,3) == 2, \"Should be 2\"\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     min_of_three(1,2,3) == 1\nassert     min_of_three(1,2,2) == 2\nassert     min_of_three(1,1,2) == 1\nassert     min_of_three(1,2,1) == 1\nassert     min_of_three(1,2,3) == 1\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef max_of_three(a,b,c): \n    '''\n    Write a function to find maximum of three numbers.\n    '''\n    pass\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     min_of_three(3,2,1) == 1\nassert     min_of_three(3,1,2) == 1\nassert     min_of_three(1,2,3) == 1\nassert     min_of_three(1,1,1) == 1\nassert     min_of_three(-1,2,3) == -1\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     min_of_three(10, 5, 3) == 3, 'Wrong result of min_of_three'\nassert     min_of_three(1, 2, 3) == 1, 'Wrong result of min_of_three'\nassert     min_of_three(3, 4, 5) == 3, 'Wrong result of min_of_three'\nassert     min_of_three(1, 2, 3) == 1, 'Wrong result of min_of_three'\nassert     min_of_three(2, 3, 5) == 2, 'Wrong result of min_of_three'\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     min_of_three(10, 20, 30) == 10\nassert     min_of_three(1, 2, 3) == 1\n\ndef max_of_three(a,b,c):\n    '''\n    Write a function to find maximum of three numbers.\n    '''\n    pass\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nall_Bits_Set_In_The_Given_Range(5,1,3) == True, 'Wrong answer'\nassert\nall_Bits_Set_In_The_Given_Range(9,2,6) == False, 'Wrong answer'\nassert\nall_Bits_Set_In_The_Given_Range(4,1,3) == True, 'Wrong answer'\nassert\n\n\ndef all_Bits_Clear_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are clear in the given range or not.\n    '''\n    pass\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(3,10,20) == True\nassert     all_Bits_Set_In_The_Given_Range(2,10,20) == True\nassert     all_Bits_Set_In_The_Given_Range(2,10,21) == False\n\n'''\nQ-9: Check if the given range is a square number.\n'''\ndef is_Square_Number(n):\n    '''\n    Write a python function to check whether the given number is a square number.\n    '''\n    pass\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(4,0,3) == True\nassert     all_Bits_Set_In_The_Given_Range(4,0,5) == False\nassert     all_Bits_Set_In_The_Given_Range(4,0,0) == True\nassert     all_Bits_Set_In_The_Given_Range(0,0,10) == True\nassert     all_Bits_Set_In_The_Given_Range(0,0,0) == False\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(4,2,4) == False, \"Test Case 1 failed\"\nassert     all_Bits_Set_In_The_Given_Range(1,1,1) == True, \"Test Case 2 failed\"\nassert     all_Bits_Set_In_The_Given_Range(4,4,4) == True, \"Test Case 3 failed\"\nassert     all_Bits_Set_In_The_Given_Range(7,5,5) == False, \"Test Case 4 failed\"\nassert     all_Bits_Set_In_The_Given_Range(9,5,5) == True, \"Test Case 5 failed\"\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef is_all_set_in_the_given_range(n,l,r):\n    '''\n    Write a python function to check whether all bits are set in the given range or not.\n    '''\n    pass\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(8,4,6) == True, \"Bit 1 and 2 are set\"\nassert     all_Bits_Set_In_The_Given_Range(8,3,6) == False, \"Bit 1 and 2 are set\"\nassert     all_Bits_Set_In_The_Given_Range(8,1,6) == True, \"Bit 1 and 2 are set\"\nassert     all_Bits_Set_In_The_Given_Range(8,0,6) == True, \"Bit 1 and 2 are set\"\nassert     all_Bits_Set_In_The_Given_Range(8,4,6) == True, \"Bit 1 and 2 are set\"\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(n = 4, l = 4, r = 5) == False\nassert     all_Bits_Set_In_The_Given_Range(n = 4, l = 0, r = 0) == True\nassert     all_Bits_Set_In_The_Given_Range(n = 4, l = 1, r = 1) == True\nassert     all_Bits_Set_In_The_Given_Range(n = 4, l = 2, r = 2) == True\nassert     all_Bits_Set_In_The_Given_Range(n = 4, l = 3, r = 3) == True\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(5,1,5) == True, \"Passed\"\nassert     all_Bits_Set_In_The_Given_Range(5,1,3) == False, \"Failed\"\nassert     all_Bits_Set_In_The_Given_Range(6,1,6) == True, \"Passed\"\nassert     all_Bits_Set_In_The_Given_Range(6,1,4) == False, \"Failed\"\nassert     all_Bits_Set_In_The_Given_Range(7,1,7) == True, \"Passed\"\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(1,0,0) == True\nassert     all_Bits_Set_In_The_Given_Range(1,0,1) == False\nassert     all_Bits_Set_In_The_Given_Range(6,0,0) == True\nassert     all_Bits_Set_In_The_Given_Range(8,0,0) == False\nassert     all_Bits_Set_In_The_Given_Range(8,0,4) == True\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef re_arrange_array_2(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    pass\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\narr = [-4, -5, -6, 1, 2, 3]\nn = 3\nre_arrange_array(arr, n)\nassert arr == [-4, 1, -5, 2, -6, 3]\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     re_arrange_array([1, 1, 1, 1], 3) == [[-1, 1, 1, 1], [-1, 1, 1, 1], [-1, 1, 1, 1], [-1, 1, 1, 1]]\nassert     re_arrange_array([1, -1, 2, -2, -1], 3) == [[-1, -1, 2, 1], [-2, -2, -1, 1], [-1, 1, -1, 1]]\n\ndef swap(a, i, j):\n    '''\n    Write a function that swaps the elements of array a, starting at index i, and ending at j.\n    '''\n    pass\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     re_arrange_array([3, 4, 1, 2], 2) == [1, 2, 3, 4], 'Should rearrange array as 1,2,3,4'\nassert     re_arrange_array([-5, 4, -1, 0], 2) == [-1, 0, -5, 4], 'Should rearrange array as -1,0,-5,4'\nassert     re_arrange_array([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == [1, 2, 3, 4, 5, 6, 7, 8, 9], 'Should rearrange array as 1,2,3,4,5,6,7,8,9'\nassert     re_arrange_array([-1, 2, -3, 4, -5, 6, -7, 8, -9], 5) == [-1, 2, -3, 4, -5, 6, -7, 8, -9], 'Should rearrange array as -1,-2,-3,-4,-5,-6,-7,-8,-9'\nassert     re_arrange_array([1, -2, 3, -4, 5, -6, 7, -8, 9], 5) == [-1, -2, 3, -4, 5, -6, 7, -8, 9], 'Should rearrange array as -1,1,-2,3,-4,5,-6,7,-8,-9'\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nre_arrange_array([1, 2, -3, 4, -5], 5) == [-5, 1, -3, 4, -2]\n\nre_arrange_array([1, 2, -3, 4, -5], 2) == [-3, 1, -2, 4, -5]\n\nre_arrange_array([1, 2, 3, 4, 5], 5) == [-5, 1, 2, 3, 4]\n\nre_arrange_array([], 5) == []\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     re_arrange_array([2, 4, -5, -3, 1], 4) == [-5, 1, 2, 4, -3]\nassert     re_arrange_array([2, 1, -3, 4], 4) == [-3, 1, 2, 4]\nassert     re_arrange_array([-3, -1, -2, -4, -5], 5) == [-5, -3, -1, -2, -4]\nassert     re_arrange_array([-1, 1, 1, -1], 3) == [-1, 1, 1, -1]"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nre_arrange_array([1, -1, -2, 2, -4, 5, -3, 4, -3], 5)\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\narr = [1, -2, -4, -6, -5, 6]\nn = 3\n\nprint(\"The original array: \", arr)\nre_arrange_array(arr, n)\nprint(\"The re-arranged array: \", arr)"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert replace_blank('') == ''\nassert replace_blank('Bob') == 'Bob'\nassert replace_blank('Bob  ', '_') == 'Bob_'\nassert replace_blank('Bob', '_') == 'Bob_'\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert replace_blank(\"sadasd sadsad s\",'') == \"sssssssssss\"\nassert replace_blank(\"sadasd sadsad s\",'') == \"sssssssssss\"\nassert replace_blank(\"sadasd sadsad s\",'') == \"sssssssssss\"\nassert replace_blank(\"sadasd sadsad s\",'') == \"sssssssssss\"\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     replace_blank('  abc  ', 'A') == 'Abc'\nassert     replace_blank('  abc  ', 'z') == 'abc'\nassert     replace_blank('', 'A') == ''\nassert     replace_blank('abc', 'z') == 'abc'\nassert     replace_blank('  abc  ', 'z') == 'Abc'\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nassert replace_blank(\"This is a test\",\"-\") == \"This-is-a-test\", \"Should replace blank characters in the middle of the string\"\nassert replace_blank(\"This is a test\",\" \") == \"This is a test\", \"Should return the string unchanged if no blank characters found\"\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     replace_blank('', '') == ''\nassert     replace_blank(' ', '') == ''\nassert     replace_blank('', 'a') == 'a'\nassert     replace_blank('a','') == 'a'\nassert     replace_blank('','') ==''\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     replace_blank('abcd','x') == 'abxcd', \"1st example\"\nassert     replace_blank('','x') == 'x', \"2nd example\"\nassert     replace_blank('', 'x') == 'x', \"3rd example\"\nassert     replace_blank('', 'x') == '', \"4th example\"\n\n'''\n2.5 Write a function that takes in a list of integers and returns the minimum of all the integers in the list.\n'''\ndef get_min(list):\n    '''\n    Write a function that takes in a list of integers and returns the minimum of all the integers in the list.\n    '''\n    pass\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     replace_blank('hello world','') == 'hello world'\nassert     replace_blank('hello world', 'a') == 'hlowrd'\nassert     replace_blank('hello world', 'w') == 'hello worl'\nassert     replace_blank('hello world','') == 'hello world'\n\ndef n_gram(s, n):\n    '''\n    Write a function that takes in a string and an integer n, and returns a string that is the n-grams of the original string.\n    '''\n    pass\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     replace_blank('', 'a') == ''\nassert     replace_blank('abc', 'a') == 'abc'\nassert     replace_blank('abcd', 'a') == 'abcd'\nassert     replace_blank('abcde', 'a') == 'abcde'\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     replace_blank('', 'a') == ''\nassert     replace_blank('abc', 'a') == 'abc'\nassert     replace_blank('abc', 'b') == 'a'\nassert     replace_blank('abc', 'c') == 'bc'\nassert     replace_blank('abcdefgh', 'a') == 'abcdefgh'\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     larg_nnum([5,1,3,2,9,6],1) == [9]\nassert    larg_nnum([5,1,3,2,9,6],2) == [9,5]\nassert    larg_nnum([5,1,3,2,9,6],3) == [5,9]\nassert    larg_nnum([5,1,3,2,9,6],4) == [9,5,2]\nassert    larg_nnum([5,1,3,2,9,6],5) == [9,5,3]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     larg_nnum([1,4,5,6,7,8,9], 2) == [9,8]\nassert     larg_nnum([2,2,2,2,2], 2) == [2,2]\nassert     larg_nnum([9,8,7,6,5,4,3,2,1], 3) == [9,8,7]\nassert     larg_nnum([5,4,3,2,1], 1) == [5]\n\ndef compare_list(list1, list2):\n    '''\n    Write a function that takes in 2 lists of numbers, and returns True if the lists are equal and False otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef main():\n    # test cases\n    assert larg_nnum([1,2,3,4,5], 2) == [4,5]\n    assert larg_nnum([1,2,3,4,5], 5) == [1,2,3,4,5]\n    assert larg_nnum([1,2,3,4,5], 1) == [1]\n    print('PASSED ALL TEST CASES!')\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nlarg_nnum([1,6,3,7,2,8],1) == [7]\nlarg_nnum([1,6,3,7,2,8],2) == [6,7]\nlarg_nnum([1,6,3,7,2,8],3) == [3,7,8]\nlarg_nnum([1,6,3,7,2,8],4) == [3,6,7,8]\nlarg_nnum([1,6,3,7,2,8],5) == [6,7,8,1]\n\ndef larg_nnum_s(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \n    Hints:\n    Use heapq.nlargest() to implement your algorithm\n    Use sorted() to sort the input list\n    '''\n    # Your code here\n    pass"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nlarg_nnum([1,6,2,3,5],3) == [6,2,3]\nassert \nlarg_nnum([4,7,2,3,5],3) == [7,2,3]\nassert \nlarg_nnum([-1,2,3,4,5,6],3) == [-1,2,3]\nassert \nlarg_nnum([1,2,3,4,5,6,7,8,9,10],4) == [10,9,8,7]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    pass\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    assert larg_nnum([1,3,2,7,9,4,5,6],3) == [7,9,4]\n    assert larg_nnum([1,3,2,7,9,4,5,6],2) == [3,4]\n    assert larg_nnum([1,3,2,7,9,4,5,6],6) == [3,4,5,6]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nlarg_nnum([2, 3, 5, 5, 4, 2, 5, 6, 6, 8],2) == [5,5]\nassert larg_nnum([2, 3, 5, 5, 4, 2, 5, 6, 6, 8],1) == [5,5]\nassert larg_nnum([2, 3, 5, 5, 4, 2, 5, 6, 6, 8],3) == [5,5,6]\nassert larg_nnum([2, 3, 5, 5, 4, 2, 5, 6, 6, 8],4) == [5,5,6,5]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef larg_nnum2(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nlateralsuface_cylinder(1,2) == 1\nlateralsuface_cylinder(2,1) == 1\nlateralsuface_cylinder(2,2) == 4\nlateralsuface_cylinder(3,2) == 9\nlateralsuface_cylinder(4,2) == 16\n\nlateralsuface_cylinder(1,3) == 1\nlateralsuface_cylinder(2,3) == 2\nlateralsuface_cylinder(3,3) == 4\nlateralsuface_cylinder(4,3) == 10\nlateralsuface_cylinder(5,3) == 18\n\nlateralsuface_cylinder(1,4) == 1\nlateralsuface_cylinder(2,4) == 2\nlateralsuface_cylinder(3,4) == 4\nlateralsuface_cylinder(4,4) == 12\nlateralsuface_cylinder(5,4) == 24\n\nlateralsuface_cylinder(1,5) == 1\nlateralsuface_cylinder(2,5) == 2\nlateralsuface_cylinder(3,5) == 4\nlateralsuface_cylinder(4,5) == 8\nlateralsuface_cylinder(5,5) == 16\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     lateralsuface_cylinder(3,4) == 13\nassert     lateralsuface_cylinder(3,5) == 28\nassert     lateralsuface_cylinder(5,5) == 32"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     lateralsuface_cylinder(2,3) == 8.0\nassert     lateralsuface_cylinder(0.5,0.5) == 12.0\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nlateralsuface_cylinder(5,4) == 16\nprint('Test Pass.')\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(lateralsuface_cylinder(2,4))\nprint(lateralsuface_cylinder(3,4))\nprint(lateralsuface_cylinder(1,4))\nprint(lateralsuface_cylinder(1,2))\nprint(lateralsuface_cylinder(1,1))"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nlateralsuface_cylinder(1,1) == (1+1)**2\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert lateralsuface_cylinder(10, 20) == 30\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     lateralsuface_cylinder(1,5) == 3, '1-5-1 = 3'\nassert     lateralsuface_cylinder(1,6) == 4, '1-6-1 = 4'\nassert     lateralsuface_cylinder(2,6) == 7, '2-6-2 = 7'\nassert     lateralsuface_cylinder(3,6) == 7, '3-6-3 = 7'\nassert     lateralsuface_cylinder(5,6) == 10, '5-6-5 = 10'\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     volume_cube(1) == 1\nassert     volume_cube(2) == 2\nassert     volume_cube(3) == 6\nassert     volume_cube(4) == 24\nassert     volume_cube(5) == 120\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     volume_cube(6) == 216, \"didn't pass the test\"\n\ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder given its radius and height.\n    '''\n    pass\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert volume_cube(1) == 1\nassert volume_cube(2) == 8\nassert volume_cube(4) == 64\nassert volume_cube(5) == 125\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     volume_cube(1) == 1\nassert     volume_cube(3) == 27\nassert     volume_cube(5) == 125\nassert     volume_cube(10) == 1000\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     volume_cube(1) == 1, 'Test 1 Failed'\nassert     volume_cube(2) == 8, 'Test 2 Failed'\nassert     volume_cube(3) == 27, 'Test 3 Failed'\nassert     volume_cube(5) == 125, 'Test 4 Failed'\nassert     volume_cube(6) == 216, 'Test 5 Failed'\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     volume_cube(2) == 8\nassert     volume_cube(2.5) == 20\nassert     volume_cube(1.5) == 12\nassert     volume_cube(0.5) == 4\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     volume_cube(3) == 27, \"3 * 3 * 3 = 27\"\nassert     volume_cube(1) == 1, \"1 * 1 * 1 = 1\"\nassert     volume_cube(4) == 64, \"4 * 4 * 4 = 64\"\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    even_bit_set_number(16) == 32\n    even_bit_set_number(10) == 10\n    even_bit_set_number(6) == 8\n    even_bit_set_number(1) == 1\n    even_bit_set_number(0) == 0\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \neven_bit_set_number(10) == 2\neven_bit_set_number(0) == 0\neven_bit_set_number(11) == 1\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    even_bit_set_number(0x010) == 0x000\nassert\n    even_bit_set_number(0x001) == 0x010\n    even_bit_set_number(0x010) == 0x100\n    even_bit_set_number(0x011) == 0x100\n    even_bit_set_number(0x111) == 0x110\n    even_bit_set_number(0x200) == 0x200\n    even_bit_set_number(0x300) == 0x300\n    even_bit_set_number(0x500) == 0x600\n    even_bit_set_number(0x700) == 0x800\n    even_bit_set_number(0x1000) == 0x1000\n    even_bit_set_number(0x1001) == 0x1002\n    even_bit_set_number(0x2001) == 0x2002\n    even_bit_set_number(0x3) == 0x4\n    even_bit_set_number(0x4) == 0x8\n    even_bit_set_number(0x8) == 0x10\n    even_bit_set_number(0x10) == 0x20\n    even_bit_set_number(0x20) == 0x40\n    even_bit_set_number(0x40) == 0x80\n    even_bit_set_number(0x80) == 0x100\n    even_bit_set_number(0x100) == 0x200\n    even_bit_set_number(0x200) == 0x400\n    even_bit_set_number(0x400) == 0x800\n    even_bit_set_number(0x800) == 0x1000\n    even_bit_set_number(0x1000) == 0x2000\n    even_bit_set_number(0x2000) == 0x3000\n    even_bit_set_number(0x3000) == 0x6000\n    even_bit_set_number(0x6000) == 0x10000\n    even_bit_set_number(0x10000) == 0x20000\n    even_bit_set_number(0x20000) == 0x40000\n    even_bit_set_number(0x40000) == 0x80000\n    even_bit_set_number(0x80000) == 0x160000\n    even_bit_set_number(0x160000) == 0x320000\n    even_bit_set_number(0x320000) == 0x640000\n    even_bit_set_number(0x640000) == 0x1280000\n    even_bit_set_number(0x1280000) == 0x2560000\n    even_bit_set_number(0x2560000) == 0x5120000\n    even_bit_set_number(0x5120000) == 0x10240000\n    even_bit_set_number(0x10240000) == 0x20480000\n    even_bit_set_number(0x20480000) == 0x40960000\n    even_bit_set_number(0x40960000) == 0x81920000\n    even_bit_set_number(0x81920000) == 0x163840000\n    even_bit_set_number(0x163840000) == 0x327680000\n    even_bit_set_number(0x327680000) == 0x655360000\n    even_bit_set_number(0x655360000) == 0x122880000\n    even_bit_set_number(0x122880000) == 0x251840000\n    even_bit_set_number(0x251840000) == 0x504096000\n    even_bit_set_number(0x504096000) == 0x100160000\n    even_bit_set_number(0x100160000) == 0x2048000000\n    even_bit_set_number(0x2048000000) == 0x4096000000\n    even_bit_set_number(0x4096000000) == 0x8192000000\n    even_bit_set_number(0x8192000000) == 0x16384000000\n    even_bit_set_number(0x16384000000) == 0x32768000000\n    even_bit_set_number(0x32768000000) == 0x65536000000\n    even_bit_set_number(0x65536000000) == 0x12288000000\n    even_bit_set_number(0x12288000000) == 0x25184000000\n    even_bit_set_number(0x25184000000) == 0x504096000\n    even_bit_set_number(0x504096000) == 0x100160000\n    even_bit_set_number(0x100160000) == 0x2048000000\n    even_bit_set_number(0x2048000000) == 0x4096000000\n    even_bit_set_number(0x4096000000) == 0x8192000000\n    even_bit_set_number(0x8192000000) == 0x16384000000\n    even_bit_set_number(0x16384000000) == 0x32768000000\n    even_bit_set_number(0x32768000000) == 0x65536000000\n    even_bit_set_number(0x65536000000) == 0x12288000000\n    even_bit_set_number(0x12288000000) == 0x25184000000\n    even_bit_set_number(0x25184000000) == 0x504096000\n    even_bit_set_number(0x504096000) == 0x100160000\n    even_bit_set_number(0x100160000) == 0x2048000000\n    even_bit_set_number(0x2048000000) == 0x4096000000\n    even_bit_set_number(0x4096000000) == 0x8192000000\n    even_bit_set_number(0x8192000000) == 0x16384000000\n    even_bit_set_number(0x16384000000) == 0x32768000000\n    even_bit_set_number(0x32768000000) == 0x65536000000\n    even_bit_set_number(0x65536000000) == 0x12288000000\n    even_bit_set_number(0x12288000000) == 0x25184000000\n    even_bit_set_number(0x25184000000) == 0x504096000\n    even_bit_set_number(0x504096000) == 0x100160000\n    even_bit_set_number(0x100160000) == 0x2048000000\n    even_bit_set_number(0x2048000000) == 0x4096000000\n    even_bit_set_number(0x4096000000) == 0x8192000000\n    even_bit_set_number(0x8192000000) == 0x16384000000\n    even_bit_set_number(0x16384000000) == 0x32768000000\n    even_bit_set_number(0x32768000000) == 0x65536000000\n    even_bit_set_number(0x65536000000) == 0x12288000000\n    even_bit_set_number(0x12288000000) == 0x25184000000\n    even_bit_set_number(0x25184000000) == 0x504096000\n    even_bit_set_number(0x504096000) == 0x100160000\n    even_bit_set_number(0x100160000) == 0x2048000000\n    even_bit_set_number(0x2048000000) == 0x4096000000\n    even_bit_set_number(0x4096000000) == 0x8192000000\n    even_bit_set_number(0x8192000000) == 0x16384000000\n    even_bit_set_number(0x16384000000) == 0x32768000000\n    even_bit_set_number(0x32768000000) == 0x65536000000\n    even_bit_set_number(0x65536000000) == 0x12288000000\n    even_bit_set_number(0x12288000000) == 0x25184000000\n    even_bit_set_number(0x25184000000) ="
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(\"This function returns the even number with the corresponding number of 1's in binary: \")\nprint(\"Consider a number as a binary number and display the number as a string, ex: 2->01, 9->1, 7->11, 5->101, etc.\")\nprint(\"Example: (2) -> '10'\")\nprint(\"2 = 0100, 10 = 0110, 9 = 0101, 7 = 0011, 5 = 0010\")\nprint(\"5 = 0000, 4 = 0000, 3 = 0000, 2 = 0000, 1 = 0000\")\nprint(\"Hint: Use count method to find the number of 1's in binary\")\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(\"\\ncheck_even_bit_set_number:\")\nprint(check_even_bit_set_number(512))\nprint(check_even_bit_set_number(0))\nprint(check_even_bit_set_number(1))\nprint(check_even_bit_set_number(10))\nprint(check_even_bit_set_number(2**5))\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     even_bit_set_number(5) == 10\nassert     even_bit_set_number(5) == 20\nassert     even_bit_set_number(2) == 0\nassert     even_bit_set_number(7) == 16\nassert     even_bit_set_number(8) == 32\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     even_bit_set_number(3) == 0\nassert     even_bit_set_number(5) == 1\nassert     even_bit_set_number(9) == 1\nassert     even_bit_set_number(10) == 0\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_occurences([]) == {}\nassert     check_occurences([(1,3),(2,3),(1,2),(3,4)]) == {(1, 3): 1, (2, 3): 1, (1, 2): 1, (3, 4): 1}\nassert     check_occurences([(1,3),(2,3),(3,4)]) == {(1, 3): 2, (2, 3): 2, (3, 4): 1}\nassert     check_occurences([]) == {}\nassert     check_occurences([(1,3),(2,4)]) == {(1, 3): 1, (2, 4): 1}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef count_occurences_filter(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    pass\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_occurences([(1,2),(2,3),(1,3),(2,3)]) ==     {(1,2):2,(2,3):2,(1,3):1,(2,3):1}\nassert     check_occurences([('a',1),('b',2),('a',3),('b',3),('b',3)]) ==     {('a',1):2,('b',2):2,('a',3):1,('b',3):1,('b',3):1}\nassert     check_occurences([('a',1),('a',3),('b',2),('b',3),('b',3)]) ==     {('a',1):3,('a',3):1,('b',2):2,('b',3):2,('b',3):2}\nassert     check_occurences([('a',1),('a',3),('a',3),('b',2),('b',3),('c',1)]) ==     {('a',1):3,('a',3):2,('a',3):1,('b',2):2,('b',3):2,('c',1):1}\nassert     check_occurences([('a',1),('b',2),('b',3),('c',1),('c',1),('a',1)]) ==     {('a',1):3,('b',2):2,('b',3):2,('c',1):2,('c',1):1,('a',1):1}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef print_dict_to_file(test_list, output_file):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    Then write a function that prints the contents of the dictionary to a file.\n    '''\n    pass\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_occurences([('John', 'Rover'), ('John', 'Rover'), ('Rover', 'John')]) == {('John', 'Rover'): 2, ('Rover', 'John'): 2}\nassert     check_occurences([('John', 'Rover'), ('John', 'Rover'), ('John', 'Rover'), ('John', 'Rover')]) == {('John', 'Rover'): 4}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_occurences(check_occurences([])) == {}\nassert     check_occurences(check_occurences([('a', 1), ('b', 1), ('a', 1), ('c', 1)])) == {('a', 1): 2, ('b', 1): 2, ('c', 1): 2}\nassert     check_occurences(check_occurences([('a', 1), ('a', 1), ('c', 1)])) == {('a', 1): 3}\nassert     check_occurences(check_occurences([('a', 1), ('b', 1), ('a', 1)])) == {('a', 1): 2, ('b', 1): 2}\n\ndef remove_duplicates(test_list):\n    '''\n    Write a function that takes in a list of strings and returns the same list with no duplicates.\n    '''\n    pass\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_occurences([('a',1),('b',2),('c',3),('a',4)]) == {('a',1): 1, ('b',2): 1, ('c',3): 1, ('a',4): 1}\nassert     check_occurences([('a',2),('b',2),('c',3),('a',2)]) == {('a',2): 2, ('b',2): 2, ('c',3): 1, ('a',2): 1}\nassert     check_occurences([('a',3),('b',2),('c',3),('a',3)]) == {('a',3): 1, ('b',2): 1, ('c',3): 2, ('a',3): 1}\nassert     check_occurences([('a',1),('b',2),('c',3),('a',4)]) == {('a',1): 1, ('b',2): 1, ('c',3): 1, ('a',4): 1}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_occurences([]) == {}\nassert     check_occurences([(1, 2), (2, 3), (2, 3), (2, 4), (3, 4), (3, 4)]) == {(1, 2): 2, (2, 3): 3, (2, 4): 2, (3, 4): 2}\n\ndef check_k_mer(test_list, k):\n    '''\n    Write a function that takes in a list of strings and an integer k. The function returns the longest k-mer in the given list. If there are more than one k-mers with the same length, return the one with the smallest lexicographical order.\n    '''\n    pass\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_occurences([('a','b'),('b','a')]) == Counter({('a','b'): 2, ('b','a'): 2})\nassert     check_occurences([('a','a'),('b','b')]) == Counter({('a','a'): 2, ('b','b'): 2})\nassert     check_occurences([('a','a'),('a','b')]) == Counter({('a','a'): 2, ('a','b'): 1})\nassert     check_occurences([('a','a'),('b','b'),('c','c')]) == Counter({('a','a'): 3, ('b','b'): 2, ('c','c'): 1})\n\ndef get_next_pos(pos, grid):\n    '''\n    Write a function that takes in a tuple representing the location of a token in the grid, and returns the next possible position.\n    '''\n    pass\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_occurences([(1,2), (3,4), (2,1), (1,2), (2,1)]) == {(1,2):3, (3,4):1, (2,1):3, (1,2):2, (2,1):1}\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n'''\nWrite a python function to find the first repeating character in a given string.\n'''\ndef first_repeating_character(str):\n    '''\n    Write a python function to find the first repeating character in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == '__main__': \n\n    # Test case 1 \n    str1 = \"abcd\"\n    print(number_of_substrings(str1))\n    # output: 5\n\n    # Test case 2\n    str2 = \"adc\"\n    print(number_of_substrings(str2))\n    # output: 1\n\n    # Test case 3\n    str3 = \"abc\"\n    print(number_of_substrings(str3))\n    # output: 0\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     number_of_substrings(\"\")    == 0,    \"Wrong return value for empty string\"\nassert     number_of_substrings(\" \")    == 0,    \"Wrong return value for whitespace\"\nassert     number_of_substrings(\"a\")    == 1,    \"Wrong return value for single character\"\nassert     number_of_substrings(\"ab\")    == 2,    \"Wrong return value for multiple characters\"\nassert     number_of_substrings(\"abcd\")    == 4,    \"Wrong return value for multiple characters\"\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert number_of_substrings('abcd') == 2\nassert number_of_substrings('hello') == 0\nassert number_of_substrings('hello world!') == 2\nassert number_of_substrings('world') == 1\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     number_of_substrings('abcd') == 1, 'Testing...'\nassert     number_of_substrings('abc') == 1, 'Testing...'\nassert     number_of_substrings('a') == 1, 'Testing...'\nassert     number_of_substrings('abc') == 2, 'Testing...'\nassert     number_of_substrings('abcdef') == 3, 'Testing...'\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     number_of_substrings('a') == 1\nassert     number_of_substrings('a b') == 2\nassert     number_of_substrings('ab') == 2\nassert     number_of_substrings('abcd') == 4\nassert     number_of_substrings('abcde') == 5\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef number_of_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    pass\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     number_of_substrings(\"1A2B3\") == 6\nassert     number_of_substrings(\"1a2b3\") == 6\nassert     number_of_substrings(\"AB\") == 1\nassert     number_of_substrings(\"AB\") == 1\nassert     number_of_substrings(\"AAABBB\") == 3\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert \nassert \n\ndef number_of_non_empty_substrings(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    pass\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_total_number_of_sequences(10,2) == 0\nassert     get_total_number_of_sequences(10,3) == 4\nassert     get_total_number_of_sequences(10,5) == 1\nassert     get_total_number_of_sequences(10,6) == 3\nassert     get_total_number_of_sequences(10,7) == 6\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert get_total_number_of_sequences(10,2) == 5\nassert get_total_number_of_sequences(10,3) == 12\nassert get_total_number_of_sequences(9,2) == 3\nassert get_total_number_of_sequences(9,3) == 9\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_total_number_of_sequences(2,4) ==     2\nassert     get_total_number_of_sequences(2,6) ==     1\nassert     get_total_number_of_sequences(2,8) ==     4\n\n'''\n2\n4\n6\n8\n'''"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_total_number_of_sequences(1,1) == 1\nassert     get_total_number_of_sequences(1,2) == 1\nassert     get_total_number_of_sequences(5,2) == 5\nassert     get_total_number_of_sequences(1,3) == 1\nassert     get_total_number_of_sequences(2,3) == 5\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef get_total_number_of_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if m == 1:\n        return n+1\n    elif n == 1:\n        return m+1\n    else:\n        total = 0\n        for i in range(1,m):\n            for j in range(1,n):\n                total += get_total_number_of_sequences(i,j)\n        return total\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_total_number_of_sequences(1,1) == 1, \"Wrong answer for m={}, n={}\".format(1,1)\nassert     get_total_number_of_sequences(5,3) == 24, \"Wrong answer for m={}, n={}\".format(5,3)\nassert     get_total_number_of_sequences(10,3) == 3124, \"Wrong answer for m={}, n={}\".format(10,3)\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_total_number_of_sequences(1,1) == 1\nassert     get_total_number_of_sequences(1,2) == 2\nassert     get_total_number_of_sequences(2,2) == 1\nassert     get_total_number_of_sequences(1,3) == 3\nassert     get_total_number_of_sequences(1,4) == 4\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_total_number_of_sequences(5,3) == 9\nassert     get_total_number_of_sequences(2,4) == 6\nassert     get_total_number_of_sequences(2,6) == 5\n\ndef get_number_of_two_element_sequences(m,n):\n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    pass\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_total_number_of_sequences(1,1) == 1, \"Wrong result\"\nassert     get_total_number_of_sequences(2,2) == 4, \"Wrong result\"\nassert     get_total_number_of_sequences(2,3) == 10, \"Wrong result\"\nassert     get_total_number_of_sequences(4,4) == 12, \"Wrong result\"\nassert     get_total_number_of_sequences(6,2) == 24, \"Wrong result\"\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     (replace_list([1,2,3,4,5], [10,11,12,13,14]) == [[1,2,3,4,5],[10,11,12,13,14]]), 'error'\nassert     (replace_list([10,11,12,13,14], [1,2,3,4,5]) == [[10,11,12,13,14],[1,2,3,4,5]]), 'error'\nassert     (replace_list([2,3,4,5,6],[10,11,12,13,14]) == [[2,3,4,5,6],[10,11,12,13,14]]), 'error'\nassert     (replace_list([1,2,3,4,5,6],[10,11,12,13,14]) == [[1,2,3,4,5,6],[10,11,12,13,14]]), 'error'\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     replace_list([1,2,3], [4,5]) == [1,2,4], \"wrong replace_list\"\nassert     replace_list([1,2,3], [4,5,6]) == [1,2,4,6], \"wrong replace_list\"\nassert     replace_list([1,2,3,4], [4,5]) == [1,2,4,5], \"wrong replace_list\"\nassert     replace_list([1,2,3,4], [4,5,6]) == [1,2,4,5,6], \"wrong replace_list\"\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     replace_list(['a','b','c','d'],[1,2,3,4]) ==    ['a','b','c','1','2','3','4','d']\nassert     replace_list(['a','b','c','d'],[1,2,3,4],[5,6,7,8]) ==    ['a','b','c','1','2','3','4','5','6','7','8','d']\nassert     replace_list(['a','b','c','d'],[1,2,3,4],[5,6,7,8],[9,10,11,12]) ==    ['a','b','c','1','2','3','4','5','6','7','8','9','10','11','12','d']\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     replace_list([1, 2, 3], [1, 2, 3]) == False\nassert     replace_list([1, 2, 3], [1, 2]) == True\nassert     replace_list([1, 2, 3], [1, 2, 3]) == False\nassert     replace_list([1, 2], [1, 2, 3]) == True\nassert     replace_list([1, 2, 3], [1, 2]) == True\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     replace_list([1,2,3],[4,5]) == None\nassert     replace_list([1,2,3],[[4,5],[6,7]]) == None\nassert     replace_list([1,2,3],[]) == None\nassert     replace_list([],[[4,5],[6,7]]) == None\nassert     replace_list([[4,5],[6,7]],[[1,2,3]]) == [[1,2,3],[4,5,6,7]]\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert replace_list([1,2,3,4,5,6], [1,2,3,4,5,6]) == None, \"Should return None\"\nassert replace_list([1,2,3,4,5,6], [1,2,3,4,5]) == None, \"Should return None\"\nassert replace_list([1,2,3,4,5], [1,2,3,4,5]) == None, \"Should return None\"\nassert replace_list([1,2,3,4,5], [1,2]) == None, \"Should return None\"\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nreplace_list(\n    ['Jane', 'John', 'Eddy'],\n    ['John', 'Sally', 'Ed']\n    ) == True\n\nassert \nreplace_list(\n    ['Jane', 'Sally', 'Ed'],\n    ['John', 'Sally', 'Eddy']\n    ) == True\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef check_list(list1,list2):\n    '''\n    Write a function that returns the number of elements in the first list that are not in the second list.\n    '''\n    pass\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     replace_list([1,2,3,4], [4,5,6]) ==[1,2,3,5,6]\nassert     replace_list([4,3,2,1], [4,5,6]) ==[4,3,2,5,6]\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     replace_list([1, 2, 3], [1, 2, 3]) == [[1, 2, 3], 2, 3], \"test 1 failed\"\nassert     replace_list([1, 2, 3], [1, 2, 3, 4]) == [[1, 2, 3, 4], 2, 3, 4], \"test 2 failed\"\nassert     replace_list([1, 2, 3, 4], [1, 2, 3]) == [[1, 2, 3, 4], 2, 3, 4], \"test 3 failed\"\nassert     replace_list([1, 2, 3], [1, 2, 3]) == [[1, 2, 3], 2, 3], \"test 4 failed\"\nassert     replace_list([1, 2, 3], [1, 2, 3, 4]) == [[1, 2, 3, 4], 2, 3, 4], \"test 5 failed\"\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_charac('abcde') == 5\nassert     count_charac('ab') == 2\nassert     count_charac('') == 0\n\n\ndef count_words(str1):\n    '''\n    Write a function to count the total number of words in a string.\n    '''\n    pass\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nstr1 = \"Hello World\"\nassert count_charac(str1) == 13\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef get_longest_word(str1):\n    '''\n    Write a function to get the longest word in a string.\n    '''\n    pass\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_charac('') == 0\nassert     count_charac('a') == 1\nassert     count_charac('abc') == 3\nassert     count_charac('abcde') == 6\nassert     count_charac('abcdefg') == 12\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    pass\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_charac('hello') == 5, 'incorrect'\nassert count_charac('aaabbbccccdddeee') == 16, 'incorrect'\nassert count_charac('1234567890') == 18, 'incorrect'\nassert count_charac('0') == 1, 'incorrect'\nassert count_charac('1') == 1, 'incorrect'\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_charac(\"\") == 0\nassert     count_charac(\"A\") == 1\nassert     count_charac(\"abc\") == 3\nassert     count_charac(\"abcdef\") == 6\nassert     count_charac(\"abcdefghijk\") == 12\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert count_charac(\"abcdefghij\") == 6, \"wrong answer\"\nassert count_charac(\"asdsfghjkl\") == 7, \"wrong answer\"\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ncount_charac(\"hello\") == 5\ncount_charac(\"hi\") == 2\ncount_charac(\"\") == 0\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(3) == 4\nnext_Perfect_Square(11) == 22\n\ndef max_heap_of_numbers(arr):\n    '''\n    Write a python function to find the maximum of an array of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     next_Perfect_Square(5) == 5\nassert     next_Perfect_Square(16) == 9\nassert     next_Perfect_Square(64) == 33\nassert     next_Perfect_Square(35) == 18\nassert     next_Perfect_Square(55) == 25\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     next_Perfect_Square(1) == 1\nassert next_Perfect_Square(2) == 3\nassert next_Perfect_Square(3) == 4\nassert next_Perfect_Square(4) == 5\nassert next_Perfect_Square(5) == 6\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     next_Perfect_Square(27) == (26, True) \nassert next_Perfect_Square(9) == (18, True)\nassert next_Perfect_Square(0) == (1, True)\nassert next_Perfect_Square(-10) == (1, False)\nassert next_Perfect_Square(-1) == (1, False)\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     next_Perfect_Square(0) == 0\nassert     next_Perfect_Square(1) == 1\nassert     next_Perfect_Square(2) == 3\nassert     next_Perfect_Square(3) == 4\nassert     next_Perfect_Square(4) == 5\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    next_Perfect_Square(7) == 8\n    next_Perfect_Square(5) == 6\n    next_Perfect_Square(7) == 8\n    next_Perfect_Square(8) == 8\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     next_Perfect_Square(5) == 4, \"Should be 4\"\nassert     next_Perfect_Square(6) == 7, \"Should be 7\"\nassert     next_Perfect_Square(10) == 11, \"Should be 11\"\nassert     next_Perfect_Square(20) == 25, \"Should be 25\"\nassert     next_Perfect_Square(30) == 48, \"Should be 48\"\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nnext_Perfect_Square(6) == 8\nnext_Perfect_Square(20) == 32\nnext_Perfect_Square(9) == 16\nnext_Perfect_Square(18) == 24\nnext_Perfect_Square(35) == 50\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nnext_Perfect_Square(4) == 5\nnext_Perfect_Square(5) == 6\nnext_Perfect_Square(6) == 8\nnext_Perfect_Square(10) == 10\nnext_Perfect_Square(500000000) == 505050\nnext_Perfect_Square(5000000000000) == 500500500500\nnext_Perfect_Square(60000000) == 60000\n\n\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    #code here\n    #if sqrt(num) is int, then sqrt(num) + 1 is int\n    #i.e., a perfect square would be (sqrt(num) + 1) * (sqrt(num) + 1)\n    #if sqrt(num) is not int, then sqrt(num) + 1 is not int\n    #i.e., a perfect square would be (sqrt(num) + 1) * (sqrt(num) + 1) - 1\n    #to get a perfect square, you must sqrt(num) + 1 + 1 = sqrt(num) + 2\n    #\n    #simply, if sqrt(num) is int and sqrt(num) + 1 is int, then we should use math.sqrt(num) + 1, otherwise we should use math.sqrt(num) + 1 - 1\n    #\n    #if sqrt(num) is int and sqrt(num) + 1 is not int, then we should use math.sqrt(num) + 1, otherwise we should use math.sqrt(num) + 1 - 1 -1\n    #\n    #if sqrt(num) is not int and sqrt(num) + 1 is int, then we should use math.sqrt(num) + 1, otherwise we should use math.sqrt(num) + 1 - 1\n    #\n    #if sqrt(num) is not int and sqrt(num) + 1 is not int, then we should use math.sqrt(num) + 1, otherwise we should use math.sqrt(num) + 1 - 1 -1 -1\n    \n    if math.sqrt(N) % 1 == 0:\n        return math.sqrt(N) + 1\n    else:\n        return math.sqrt(N) + 1 -1\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef max_sum(arr):\n    '''\n    You are given an array with all the integers from 0 to n - 2 in random order. You need to find the maximum sum of a bitonic subsequence in the array. A subsequence is defined as a set of numbers that are arranged in order in which they appear in the array. \n    The sequence cannot be empty and cannot contain duplicate numbers.\n    For example, let us consider the following array:. The subsequence that gives the maximum sum is. Thus, the function should return 22.\n    '''\n    \n    pass"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_sum([7, 1, 3, 4, 7]) == 17\nassert     max_sum([3, 6, 2, 7]) == 15\nassert     max_sum([2, 2, 2, 0, 1]) == 5\nassert     max_sum([]) == 0\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nimport unittest\nclass TestMaxSum(unittest.TestCase):\n\n    def testMaxSum(self):\n        self.assertEqual(max_sum([3, 8, -10, -4, 7, 2]), 5)\n        self.assertEqual(max_sum([-13, -3, -25, -20, -3, -16, -23, -12, -5, -22, -15, -4, -7]), -23)\n        self."
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_sum([6, 11, 5, 7, 12]) == 11\nassert     max_sum([6, 11, 5, -7, 12]) == 11\nassert     max_sum([-6, 11, 5, -7, 12]) == 11\nassert     max_sum([-6, -11, 5, -7, 12]) == -6\nassert     max_sum([0, -1, 5, -7, 12]) == 15\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_sum([1,3,5]) == 4\nassert     max_sum([1,3,5,2]) == 4\nassert     max_sum([3,5,1,2,4]) == 8\nassert     max_sum([1,3,5,2,4]) == 9\nassert     max_sum([5,4,3,2,1]) == 10\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(\"The correct answer for the first testcase is {0}\".format(max_sum([1, 3, 5, 4, 2])))\nassert \nprint(\"The correct answer for the second testcase is {0}\".format(max_sum([1, 3, 5, 7, 11, 8, 10, 6])))\nprint(\"\\n\")\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     babylonian_squareroot(1) == 1\nassert     babylonian_squareroot(3) == 2\nassert     babylonian_squareroot(4) == 2\nassert     babylonian_squareroot(5) == 2\nassert     babylonian_squareroot(16) == 3\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef get_quadratic_roots(a,b,c):\n    '''\n    Use the quadratic formula to compute the roots.\n    '''\n    x1 = -b/(2*a)\n    x2 = -b/(2*a)+c/(2*a)\n    return x1, x2\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     babylonian_squareroot(5) == sqrt(5)\nassert     babylonian_squareroot(4) == sqrt(4)\nassert     babylonian_squareroot(0) == sqrt(0)\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     babylonian_squareroot(16) == 4\nassert     babylonian_squareroot(5) == 2.5\nassert     babylonian_squareroot(6) == 2.0\nassert     babylonian_squareroot(8) == 2\nassert     babylonian_squareroot(16) == 2\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     babylonian_squareroot(9) == 3, \"Wrong output\"\nassert     babylonian_squareroot(3) == 1, \"Wrong output\"\nassert     babylonian_squareroot(17) == 3, \"Wrong output\"\nassert     babylonian_squareroot(0) == 0, \"Wrong output\"\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert \nassert\nassert\nassert\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     lps(\"agdbs\") == 4\nassert     lps(\"bbaba\") == 5\nassert     lps(\"aaba\") == 3\nassert     lps(\"aba\") == 2\nassert     lps(\"ab\") == 1\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     lps(\"abbac\") == 4\nassert     lps(\"cbbd\") == 2\nassert     lps(\"abbaa\") == 3\nassert     lps(\"aabb\") == 2\nassert     lps(\"bbbbb\") == 4\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nlps(\"A\") == 2\nassert lps(\"C\") == 1\nassert lps(\"AB\") == 2\nassert lps(\"ABB\") == 3\nassert lps(\"ABCDEF\") == 6\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     lps('abacaba') == 7, 'incorrect'\nassert     lps('a') == 1, 'incorrect'\nassert     lps('ab') == 2, 'incorrect'\nassert     lps('abb') == 2, 'incorrect'\nassert     lps('aaba') == 4, 'incorrect'\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     lps(\"aab\") == 3\nassert     lps(\"a\") == 1\nassert     lps(\"ab\") == 2\nassert     lps(\"abb\") == 4\nassert     lps(\"abcddccba\") == 7\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n'''\nExplanation:\nThe longest palindromic subsequence is \"abba\", which is four characters long.\n\nWrite a function to find the length of the longest palindromic subsequence in the given string.\n\n'''\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     harmonic_sum(1) == 0.5\nassert     harmonic_sum(3) == 1.666666666666667\nassert     harmonic_sum(5) == 2.333333333333333\nassert     harmonic_sum(10) == 7.5"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(harmonic_sum(0))"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     harmonic_sum(2) == 1\nassert     harmonic_sum(6) == 8\nassert     harmonic_sum(11) == 78\nassert     harmonic_sum(20) == 1284\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef harmonic_sum_naive(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    pass\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     harmonic_sum(0) == 0, \"harmonic_sum should return 0 if n-1 is 0\"\nassert     harmonic_sum(1) == 1, \"harmonic_sum should return 1 if n-1 is 1\"\nassert     harmonic_sum(2) == 1.5, \"harmonic_sum should return 1.5 if n-1 is 2\"\nassert     harmonic_sum(3) == 1.666666666666666, \"harmonic_sum should return 1.666666666666666 if n-1 is 3\"\nassert     harmonic_sum(4) == 1.555555555555556, \"harmonic_sum should return 1.555555555555556 if n-1 is 4\"\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nharmonic_sum(5) == 10\n\nharmonic_sum(7) == 13"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     harmonic_sum(3) == 1, \"Expected 1, got %s\" % (harmonic_sum(3))\nassert     harmonic_sum(4) == 2, \"Expected 2, got %s\" % (harmonic_sum(4))\nassert     harmonic_sum(5) == 5, \"Expected 5, got %s\" % (harmonic_sum(5))\nassert     harmonic_sum(6) == 8, \"Expected 8, got %s\" % (harmonic_sum(6))\nassert     harmonic_sum(7) == 27, \"Expected 27, got %s\" % (harmonic_sum(7))\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    harmonic_sum(4) == 1.5\n    harmonic_sum(5) == 1.75\n    harmonic_sum(10) == 2\n    harmonic_sum(15) == 5.4\n    harmonic_sum(20) == 11.2\n    harmonic_sum(25) == 11.8\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nharmonic_sum(10) == 55\nharmonic_sum(2) == 3\nharmonic_sum(1) == 1\n\ndef max_square(n):\n    '''\n    Write a function that takes in an integer n and returns the maximum size square you can make out of a nested array of size n.\n    '''\n    pass\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert harmonic_sum(1) == 1\nassert harmonic_sum(2) == 2\nassert harmonic_sum(3) == 3\nassert harmonic_sum(4) == 5\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     intersection_array([1,3,4],[2,3]) == 2\nassert     intersection_array([1,2,3],[3,4,5]) == 0\nassert     intersection_array([1,2,3],[2,3,4]) == 2\nassert     intersection_array([1,2,3],[4,5,6]) == 0\nassert     intersection_array([1,2,3],[1,2,3]) == 3\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     intersection_array([1,2,2,1],[2,2,1]) == [2,2]\nassert     intersection_array([1,1,2,2,3,4,5],[3,2,1,2]) == [3,2,2,1]\nassert     intersection_array([1,2,2],[2,2]) == [2,2]\nassert     intersection_array([1,2,1,2,2],[2,2]) == [2,1,2]\nassert     intersection_array([1,1,1,2,2,2,3,4,5],[3,2,1,2]) == []\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     intersection_array([1,2,3,4,5],    [1,3,4]) == [1,3,4]\nassert     intersection_array([1,1,2,3,4],    [2,3,4]) == []\nassert     intersection_array([1,2,3,4,5],    [1,3,4,5]) == [1,3,4]\nassert     intersection_array([1,2,3,4,5],    [1,3,4,5,6]) == []\nassert     intersection_array([1,1,2,3,4],    [2,3,4]) == [1,2,3,4]\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef get_class_by_name(name):\n    '''\n    Write a function to return a class by name.\n    '''\n    pass\n\n\ndef get_time_from_seconds(seconds):\n    '''\n    Write a function to get a datetime object from seconds.\n    '''\n    pass\n\n\ndef string_to_date(string_date):\n    '''\n    Write a function to convert a string to date object.\n    '''\n    pass\n\ndef get_birthday(date_object):\n    '''\n    Write a function to return the birthday of the user in the form of a date object.\n    '''\n    pass\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     intersection_array([1,2,3,4,5],[6,7,8,9,10]) == [6,7,8]\nassert     intersection_array([1,2,3,4,5,6,7,8],[6,7,8,9,10,11]) == []\nassert     intersection_array([1,2,3,4,5],[4,5,6,7,8,9]) == [4,5]\n\n\ndef intersect_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    pass\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     intersection_array([1,2,3,4],\n                            [1,2,4]) == [1,2,4], \"Should return the elements in both array\"\nassert     intersection_array([1,2,3,4],\n                            [1,5,4]) == [], \"Should return an empty array\"\nassert     intersection_array([],\n                            []) == [], \"Should return an empty array\"\nassert     intersection_array([1,2,3,4,5,6],\n                            [1,2,3,4,5]) == [1,2,3,4,5], \"Should return the same array\"\nassert     intersection_array([1,2,3,4],\n                            [1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6], \"Should return the same array\"\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef check_array_for_one_element_duplicates(array_nums):\n    '''\n    Write a function to check if a given array contains duplicate elements.\n    '''\n    pass\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     intersection_array([1,2,2,1],[1,2,2,3]) == [[1,2],[2,2]]\nassert     intersection_array([1,2,2,1],[1,2,4]) == [[1,2,4]]\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    intersection_array(array_nums1, array_nums2) == array_nums1\nassert intersection_array([1,2,3,4,5], [2,3,5,7,8]) == [2,3,5]\nassert intersection_array([1,2,3], [3,5,8,10,11]) == []\nassert intersection_array([1,2,3], [5,8,9,10,11]) == []\nassert intersection_array([1,2,3,4,5,6,7], [2,3,5,8,9,10,11]) == []\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     intersection_array([1, 2, 3, 4, 5, 6],[1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6], \"Test Case 1 Failed\"\nassert     intersection_array([1, 2, 3, 4, 5, 6],[2, 3, 4, 5, 6, 7]) == [2, 3, 4, 5, 6], \"Test Case 2 Failed\"\nassert     intersection_array([1, 2, 3, 4, 5, 6],[]) == [], \"Test Case 3 Failed\"\nassert     intersection_array([1],[]) == [], \"Test Case 4 Failed\"\nassert     intersection_array([1],[2,3,4,5,6]) == [], \"Test Case 5 Failed\"\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_X((1,2,3,3), 3) == 1\nassert     count_X((1,2,3,3), 5) == 0\nassert     count_X((1,2,3), 3) == 0\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_X([1,2,3], 1) == 1\nassert     count_X([1,2,3], 3) == 1\nassert     count_X([1,2,3], 5) == 0\nassert     count_X(['a','b','c'], 'a') == 2\nassert     count_X(['a','b','c'], 'd') == 0\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_X((1,2,2,3,3,4,4,5,5), 1) == 5\nassert     count_X((1,2,2,3,3,4,4,5,5), 5) == 0\nassert     count_X((1,2,2,3,3,4,4,5,5), 3) == 5\nassert     count_X((1,2,2,3,3,4,4,5,5), 4) == 1\nassert     count_X((1,2,2,3,3,4,4,5,5), 5) == 0\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_X((1,2,3,4,5,6,7,1,2,3,4,5,6,7,1,2,3,4,5,6,7), 1) == 2\nassert     count_X((1,2,3,4,5,6,7,1,2,3,4,5,6,7,1,2,3,4,5,6,7), 2) == 5\nassert     count_X((1,2,3,4,5,6,7,1,2,3,4,5,6,7,1,2,3,4,5,6,7), 0) == 0\nassert     count_X((1,2,3,4,5,6,7,1,2,3,4,5,6,7,1,2,3,4,5,6,7), 3) == 2\n\ndef count_Y(tup, y): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    pass\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert count_X([1, 2, 3], 3) == 2\nassert count_X([1, 2, 3], 1) == 1\nassert count_X([1, 2, 3], 5) == 0\nassert count_X([1, 2, 3, 4, 5], 3) == 2\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ncount_X((1,2,3,4), 3) == 1\nassert \ncount_X((1,2,3,4), 10) == 0\n\ndef count_X_Y(tup, x, y): \n    '''\n    Write a python function that takes in a tuple and two elements and counts the occcurences of the element and its occurences.\n    '''\n    pass\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_X((5,6,7,8,9),6) == 2\nassert     count_X((1,2,3,4,5),1) == 5\nassert     count_X((1,2,3,4,5),2) == 2\nassert     count_X((1,2,3,4,5),3) == 1\nassert     count_X((1,2,3,4,5),4) == 0\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert count_X((1,2,3,4,5,6), 5) == 4\nassert count_X((1,2,3,4,5,6), 10) == 0\nassert count_X((2,3,5,6,9,10,2,3), 2) == 4\nassert count_X((2,3,5,6,9,10,2,3), 11) == 0\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef print_count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and prints the count of the element in the tuple.\n    '''\n    pass\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert (count_X((3,4,5,2,5,2,5,5,3),3) == 1), \"your answer is wrong!\"\nassert (count_X((3,4,5,2,5,2,5,5,3),1) == 2), \"your answer is wrong!\"\nassert (count_X((2,3,4,5),2) == 1), \"your answer is wrong!\"\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     insert_element([1,2,3,4],3) == [1,2,3,3,4]\nassert     insert_element([3,2,1],1) == [3,2,1,1]\nassert     insert_element([1,2,3],2) == [1,2,2,3]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     insert_element([], 1) == [1]\nassert     insert_element([1], 1) == [1,1]\nassert     insert_element([1,2,3], 1) == [1,1,2,3]\nassert     insert_element([1,2,3], 3) == [1,2,3,3,1]\nassert     insert_element([1,2,3,4,5], 3) == [1,2,3,3,3,4,5]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    insert_element([1,2,3],4) == [4,1,2,3], \"should be 4,1,2,3\"\n    insert_element([4,5,6],7) == [4,7,5,6], \"should be 4,7,5,6\"\n    insert_element([9,7,8],0) == [0,9,7,8], \"should be 0,9,7,8\"\n    insert_element([4,5,6],6) == [4,6,5,6], \"should be 4,6,5,6\"\n\ndef replace_element(list,element,replace):\n    '''\n    Write a function that takes in a list and an element and replaces the first occurrence of the element with the replace value.\n    '''\n    pass\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     insert_element([1,2,3,4,5],5)==[1,2,3,5,4]\nassert     insert_element([1,2,3,4,5],6)==[1,2,3,6,4,5]\nassert     insert_element([1,2,3,4,5],7)==[1,2,3,7,4,5]\nassert     insert_element([1,2,3,4,5],8)==[8,1,2,3,4,5]\nassert     insert_element([1,2,3,4,5],9)==[9,1,2,3,4,5]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     insert_element([1,2,3,4,5],10) == [1,2,10,3,4,5]\nassert     insert_element([1,2,3,4,5],12) == [1,12,2,3,4,5]\nassert     insert_element([1,2,3,4,5],13) == [1,13,2,3,4,5]\nassert     insert_element([1,2,3,4,5],7) == [1,7,2,3,4,5]\nassert     insert_element([1,2,3,4,5],0) == [0,1,2,3,4,5]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     insert_element([],1) == []\nassert     insert_element([1],2) == [1, 2]\nassert     insert_element([2],1) == [1, 2]\nassert     insert_element([1,2,3],1) == [1, 1, 2, 3]\nassert     insert_element([1,2,3],4) == [1, 4, 2, 3]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     insert_element([1,2,3],4) == [1,2,4,3]\nassert     insert_element([3,4,5],6) == [3,4,5,6]\nassert     insert_element([2,4,6],8) == [2,4,6,8]\n\n\n\ndef insert_element_sorted(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, returning the resulting list. The list is already sorted.\n    '''\n    pass\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert insert_element([1,2,3],3) == [1,2,3,3]\nassert insert_element([1,2,3],4) == [1,2,4,3]\nassert insert_element([1,2,3],5) == [1,2,5,3]\nassert insert_element([1,2,3],1) == [1,1,2,3]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     insert_element([1,2,3],1) == [1,1,2,3,3]\nassert     insert_element([1,2,3],7) == [1,2,3,7,3]\nassert     insert_element([1,2,3],5) == [1,2,5,3,3]\n\n\ndef delete_element(list,element):\n    '''\n    Write a function that takes in a list and an element and removes that element from the list and returns the resulting list.\n    '''\n    pass\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     convert(complex(1.5, 1.5)) == ((0.0 + 0.0j), (0.0 + 0.0j))\nassert     convert(complex(-1.5, -1.5)) == ((0.0 + 0.0j), (0.0 + 0.0j))\nassert     convert(complex(-1.5, 1.5)) == ((0.0 + 0.0j), (0.0 - 0.0j))\nassert     convert(complex(1.5, -1.5)) == ((0.0 - 0.0j), (0.0 - 0.0j))\nassert     convert(complex(1.5, 1.5)) == ((0.0 + 0.0j), (0.0 + 0.0j))\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     convert(cmath.rect(3,4)) == (3, 4, 0.7071067811865475) \nassert convert(cmath.rect(3,4)) == (3, 4, -0.7071067811865475) \n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     convert([1,0]) == ([1,0],0)\nassert     convert([0,1]) == ([1,0],0)\nassert     convert([0,-1]) == ([1,0],pi)\nassert     convert([0,0]) == ([0,0],0)\nassert     convert([1,1]) == ([1,1],0)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     convert([3, -4, 1+2j]) == ((5.0, 4.0), (-1.0, 2.0))\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     convert((2, -1)) == (5, 1)\nassert     convert((0, -1)) == (0, 1)\nassert     convert((-2, -1)) == (5, 1)\nassert     convert((1, -1)) == (5, 1)\nassert     convert((0, 0)) == (0, 0)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef add(number1, number2):\n    '''\n    Write a python function to add 2 numbers.\n    '''\n    pass\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     convert([4.0,-3.0]) == [['(4.0, -3.0)', 1.41421, 1.0], ['(4.0, 3.0)', 1.41421, 1.0]]\nassert     convert([1.0,0.0]) == [['(1.0, 0.0)', 0.5, 0.0], ['(1.0, 1.0)', 0.5, 0.0]]\nassert     convert([1.0,0.0]) == [['(1.0, 0.0)', 0.5, 0.0], ['(1.0, 1.0)', 0.5, 0.0]]\nassert     convert([0.0,1.0]) == [['(0.0, 1.0)', 0.7071067811865476, 1.0], ['(0.0, 0.0)', 0.7071067811865476, 1.0]]\nassert     convert([0.0,1.0]) == [['(0.0, 1.0)', 0.7071067811865476, 1.0], ['(0.0, 0.0)', 0.7071067811865476, 1.0]]\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     convert( (3, -4) )     ==     (0.84791, -0.51193)\nassert     convert( (-2.5, 1) )     ==     (1.5707963267948966, -1.5707963267948966)\nassert     convert( (2.5, -1) )     ==     (1.5707963267948966, -1.5707963267948966)\nassert     convert( (3, 4) )     ==     (1.5707963267948966, -0.84791)\n\ndef convert_polar(numbers):\n    '''\n    Write a python function to convert polar coordinates to complex numbers.\n    '''\n    pass\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_integer([1, 2, 3, 4]) == 4, \"Wrong output\"\nassert     count_integer([1, 1, 1, 1]) == 3, \"Wrong output\"\nassert     count_integer([1, 1.0, 1, 1]) == 3, \"Wrong output\"\nassert     count_integer([1, \"1\", 1, 1]) == 3, \"Wrong output\"\n\n'''\nSolution:\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert count_integer([1, 2, 3, 4, 5, 6]) == 5, \"Expected 5, got %s\" % count_integer([1, 2, 3, 4, 5, 6])\nassert count_integer([1, 2, 3, 4, 5]) == 5, \"Expected 5, got %s\" % count_integer([1, 2, 3, 4, 5])\nassert count_integer([1]) == 1, \"Expected 1, got %s\" % count_integer([1])\nassert count_integer([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10, \"Expected 10, got %s\" % count_integer([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_integer([1,2,3,4]) == 4, 'Function not returning correct count'\nassert     count_integer([]) == 0, 'Empty list not returning correct count'\nassert     count_integer([1,2,3,4,'a','b']) == 5, 'One string not returning correct count'\nassert     count_integer([1,2,3,4,'a','b',True]) == 5, 'One bool not returning correct count'\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_integer([1,2,3,4,5,6,7,8,9,10]) == 9\nassert     count_integer([1,2,3,4,5,6,7,8,9,10.0]) == 9\nassert     count_integer([]) == 0\nassert     count_integer([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_integer([1, 2, 3, 4, 5]) == 4, \"error\"\nassert     count_integer([10, 12, 13, 15, 16]) == 4, \"error\"\nassert     count_integer([0, 0.0, 0, 0.0, 0]) == 3, \"error\"\nassert     count_integer([]) == 0, \"error\"\n\ndef count_string(list1):\n    '''\n    Write a python function that returns the number of string elements in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_integer([1,2,3]) == 3, \"Wrong\"\nassert     count_integer([1,2,3,4]) == 4, \"Wrong\"\nassert     count_integer([1,2,3,4.0]) == 4, \"Wrong\"\nassert     count_integer([1,2,3,4,2.0]) == 3, \"Wrong\"\nassert     count_integer([]) == 0, \"Wrong\"\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_integer([1,2,3,4,5,6]) == 6, \"count_integer(list1) should return 6\"\nassert     count_integer([1,2,3,4,5,4]) == 4, \"count_integer(list1) should return 4\"\nassert     count_integer([1,2,3,4,5,6,6]) == 6, \"count_integer(list1) should return 6\"\nassert     count_integer([1,2,3,4,5,6,7]) == 7, \"count_integer(list1) should return 7\"\nassert     count_integer([1,2,3,4,5,6,7,7]) == 7, \"count_integer(list1) should return 7\"\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_integer([0,1,2,3,4,5]) == 6, \"ERROR\"\nassert     count_integer([0,0,0,0,0]) == 0, \"ERROR\"\nassert     count_integer([]) == 0, \"ERROR\"\nassert     count_integer([0,-1]) == 1, \"ERROR\"\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_integer([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 10, \"incorrect\"\nassert     count_integer([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 22, \"incorrect\"\nassert     count_integer([]) == 0, \"incorrect\"\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_integer([1,2,3,4,5]) == 5, 'count_integer(list)'\nassert count_integer([0,2,4,5,7,8]) == 5, 'count_integer(list)'\nassert count_integer([1,1,1,1,1]) == 5, 'count_integer(list)'\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     combinations_colors([1, 2, 3], 2) == [\n            (1, 2),\n            (1, 3),\n            (2, 3)\n        ], \"Wrong\"\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     combinations_colors([1,2,3,4,5], 2) == [[1,2],[1,3],[1,4],[1,5],[2,3],[2,4],[2,5],[3,4],[3,5],[4,5]]\nassert     combinations_colors(['A','B','C','D'], 2) == [['A','B'],['A','C'],['A','D'],['B','C'],['B','D'],['C','D']]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     combinations_colors([1,2,3], 2) == [\n            (1,2), \n            (1,3), \n            (2,3)\n        ], \"Wrong output!\"\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ncombinations_colors(['a','b','c','d','e'], 2) == ['(','a',')','(','b',')','(','c',')','(','d',')','(','e',')']\nassert \ncombinations_colors(['a','b','c','d','e'], 3) == ['(','a',')','(','b',')','(','c',')','(','d',')','(','e',')']\nassert \ncombinations_colors(['a','b','c','d','e'], 4) == ['(','a',')','(','b',')','(','c',')','(','d',')','(','e',')']\nassert \ncombinations_colors(['a','b','c','d','e'], 5) == ['(','a',')','(','b',')','(','c',')','(','d',')','(','e',')']\nassert \ncombinations_colors(['a','b','c','d','e'], 6) == ['(','a',')','(','b',')','(','c',')','(','d',')','(','e',')']\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     combinations_colors([1,2,3], 3) == [\n            (1,2,3),\n            (1,2,3),\n            (1,2,3)\n            ]\n\nassert     combinations_colors([1,2,3], 2) == [\n            (1,2),\n            (1,2),\n            (1,2),\n            (1,2),\n            (1,2)\n            ]\n\nassert     combinations_colors([1,2,3], 1) == [\n            (1,),\n            (1,),\n            (1,),\n            (1,),\n            (1,)\n            ]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     combinations_colors([1,2,3], 2) == [[(1,2)], [(1,3)], [(2,3)]], '2'\nassert     combinations_colors([1,2,3], 3) == [[(1,2,3)], [(1,3,2)], [(2,1,3)], [(2,3,1)], [(3,1,2)], [(3,2,1)], [(3,3,1)], [(3,2,2)], [(3,1,2)]], '3'\n\n'''"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     combinations_colors([1, 2], 1) == [(1, )]\nassert     combinations_colors([1, 2], 2) == [(1, 2), (2, 1)]\nassert     combinations_colors([1, 2], 3) == [(1, 2, 1), (1, 2, 2), (1, 2, 3), (1, 3, 2), (2, 1, 1), (2, 1, 2), (2, 1, 3), (2, 2, 1), (2, 2, 2), (2, 2, 3), (2, 3, 1), (2, 3, 2), (2, 3, 3), (3, 1, 1), (3, 1, 2), (3, 1, 3), (3, 2, 1), (3, 2, 2), (3, 2, 3), (3, 3, 1), (3, 3, 2), (3, 3, 3)]\nassert     combinations_colors([1, 2, 3, 4], 2) == [(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4), (1, 2, 3), (1, 2, 4), (1, 3, 2), (1, 3, 4), (1, 4, 2), (1, 4, 3), (2, 1, 3), (2, 1, 4), (2, 3, 1), (2, 3, 4), (2, 4, 1), (2, 4, 3), (3, 1, 2), (3, 1, 4), (3, 2, 1), (3, 2, 4), (3, 4, 1), (3, 4, 2), (4, 1, 2), (4, 1, 3), (4, 1, 4), (4, 2, 1), (4, 2, 3), (4, 2, 4), (4, 3, 1), (4, 3, 2), (4, 3, 4), (4, 4, 1), (4, 4, 2), (4, 4, 3)]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     combinations_colors([1, 2, 3, 4, 5], 1) == [()]\nassert     combinations_colors([1, 2, 3, 4, 5], 2) == [(1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5), (4, 5)]\nassert     combinations_colors([1, 2, 3, 4, 5], 3) == [(1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 3, 4), (1, 3, 5), (1, 4, 5), (2, 3, 4), (2, 3, 5), (2, 4, 5), (3, 4, 5)]\nassert     combinations_colors([1, 2, 3, 4, 5], 5) == [(1, 2, 3, 4, 5)]\nassert     combinations_colors([1, 2, 3, 4, 5], 6) == [(1, 2, 3, 4, 5, 6)]\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    pass\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_Primes_nums(1) == 0\nassert     count_Primes_nums(0) == 0\nassert     count_Primes_nums(4) == 3\nassert     count_Primes_nums(100) == 41\nassert     count_Primes_nums(1000) == 919\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint('check passed')\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    pass\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_Primes_nums(10) == 3\nassert     count_Primes_nums(100) == 25\nassert     count_Primes_nums(1) == 0\nassert     count_Primes_nums(0) == 0\nassert     count_Primes_nums(3) == 2\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint(\"passed\")\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef count_Primes_nums_slow(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    pass\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     swap_numbers((0,1),(1,0)) == (1,0)\nassert swap_numbers((1,1,1),(1,1)) == (1,1,1)\nassert swap_numbers((1,1),(1,1,1,1)) == (1,1,1,1)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     swap_numbers(10,10) == (10, 10)\nassert swap_numbers(10,11) == (11, 10)\nassert swap_numbers(10,10.2) == (10.2, 10)\nassert swap_numbers(10,10.0) == (10.0, 10)\nassert swap_numbers(10,9) == (9, 10)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     swap_numbers(2,4) == (4,2), \"The function doesn't work correctly\"\nassert     swap_numbers(1,4) == (4,1), \"The function doesn't work correctly\"\nassert     swap_numbers(1,1) == (1,1), \"The function doesn't work correctly\"\nassert     swap_numbers(2,2) == (2,2), \"The function doesn't work correctly\"\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     swap_numbers(1,2) == (2, 1)\nassert     swap_numbers(6,9) == (9, 6)\nassert     swap_numbers(0,0) == (0, 0)\nassert     swap_numbers(8,8) == (8, 8)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     swap_numbers(2,3) == (3,2)\nassert     swap_numbers(4,5) == (5,4)\nassert     swap_numbers(1,2) == (2,1)\nassert     swap_numbers(7,3) == (3,7)\nassert     swap_numbers(7,7) == (7,7)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     swap_numbers(1,2)     == (2,1)\nassert     swap_numbers(1,1)     == (1,1)\nassert     swap_numbers(1,3)     == (3,1)\nassert     swap_numbers(4,5)     == (5,4)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     swap_numbers(5,4) == (4,5)\nassert swap_numbers(5,4) == (4,5)"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     swap_numbers(1,2) == (2,1)\nassert     swap_numbers(1,1) == (1,1)\nassert     swap_numbers(1,2) == (2,1)\nassert     swap_numbers(1,1) == (1,1)\nassert swap_numbers(2,1) == (1,2)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     swap_numbers(1, 2) == (2,1)\nassert swap_numbers(5, 8) == (8, 5)\nassert swap_numbers(15, -3) == (-3, 15)\nassert swap_numbers(7, 6) == (6, 7)\nassert swap_numbers(6, 4) == (4, 6)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     swap_numbers(3, 1) == (1, 3)\nassert     swap_numbers(1, 1) == (1, 1)\nassert     swap_numbers(1, 1) == (1, 1)\nassert     swap_numbers(1, 1) == (1, 1)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     maximize_elements((1,2,3), (4,5,6)) == (4,5,6)\nassert maximize_elements((1,2,3), (1,2,3)) == (1,2,3)\nassert maximize_elements((1,2,3), (4,5,6)) == (4,5,6)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     maximize_elements((1, 2), (2, 3)) == (2, 3)\nassert     maximize_elements((2, 1), (3, 2)) == (2, 3)\nassert     maximize_elements((3, 2), (2, 1)) == (2, 3)\nassert     maximize_elements((2, 2), (2, 2)) == (2, 2)\nassert     maximize_elements((1, 2), (2, 2)) == (2, 2)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     maximize_elements((1,2,3,4,5,6), (1,2,3,4,5,6)) == (1,2,3,4,5,6), 'incorrect answer'\nassert     maximize_elements((2,3,4,5,6,7), (1,2,3,4,5,6)) == (1,2,3,4,5,6), 'incorrect answer'\nassert     maximize_elements((1,2,3,4,5,6), (2,3,4,5,6,7)) == (1,2,3,4,5,6), 'incorrect answer'\nassert     maximize_elements((1,2,3,4,5,6), (1,2,3,4,5,6)) == (1,2,3,4,5,6), 'incorrect answer'\nassert     maximize_elements((1,2,3,4,5,6), (0,1,2,3,4,5)) == (1,2,3,4,5,6), 'incorrect answer'\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     maximize_elements((1, 2, 3, 4, 5), (2, 3, 4, 5, 6)) == (2, 3, 4, 5, 6)\nassert     maximize_elements((1, 3, 4, 5, 6), (2, 3, 4, 5, 6)) == (1, 2, 3, 4, 5)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     maximize_elements((5, 2, 3), (6, 8, 9)) == (6, 8, 9)\nassert maximize_elements((5, 2, 3), (6, 4, 3)) == (5, 2, 3)\nassert maximize_elements((1, 2, 3), (4, 5, 6)) == (1, 2, 3)\nassert maximize_elements((1, 2, 3), (3, 4, 5)) == (1, 2, 3)\nassert maximize_elements((1, 2, 3), (1, 2, 3)) == (1, 2, 3)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     maximize_elements((0,1,2,3,4), (1,1,2,3,4)) == (1, 1, 2, 3, 4)\nassert     maximize_elements((0,1,2,3,4), (0,1,2,3,4)) == (0,1,2,3,4)\nassert     maximize_elements((1,0,2,3,4), (1,0,2,3,4)) == (1,0,2,3,4)\nassert     maximize_elements((1,0,2,3,4), (0,1,2,3,4)) == (1,0,2,3,4)\nassert     maximize_elements((1,0,2,3,4), (0,0,2,3,4)) == (1,0,2,3,4)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     maximize_elements((1, 2), (2, 3)) == (2, 3)\nassert     maximize_elements((2, 3), (1, 2)) == (2, 3)\nassert     maximize_elements((3, 2), (1, 2)) == (3, 2)\nassert     maximize_elements((5, 6), (5, 6)) == (5, 6)\nassert     maximize_elements((6, 7), (4, 5)) == (6, 7)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     maximize_elements((1,2,3,4),(5,6,7,8)) == (5,6,7,8)\nassert     maximize_elements((1,2,3,4),(3,2,1,8)) == (3,2,1,8)\nassert     maximize_elements((2,1,3,4),(3,2,1,8)) == (2,1,3,4)\nassert     maximize_elements((1,2,3,4),(3,1,2,8)) == (3,1,2,8)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ntest_maximize_elements(((3,5), (2,3)), ((1,3), (1,2))) == ((3,5), (2,3))\ntest_maximize_elements(((3,5), (2,3)), ((1,3), (2,2))) == ((3,5), (3,3))\n\ntest_maximize_elements(((3,5), (2,3)), ((1,2), (1,5))) == ((3,5), (3,2))\ntest_maximize_elements(((3,5), (2,3)), ((1,2), (3,2))) == ((3,5), (2,3))\n\ntest_maximize_elements(((3,5), (2,3)), ((1,2), (1,3))) == ((3,5), (3,3))\ntest_maximize_elements(((3,5), (2,3)), ((2,2), (3,3))) == ((3,5), (2,3))\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     maximize_elements((1,2,3),(5,6,7)) == (5,6,7)\nassert     maximize_elements((1,2,3),(3,4,5)) == (3,4,5)\nassert     maximize_elements((2,4,6),(1,3,5)) == (2,4,6)"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef is_prime(n):\n    '''\n    Check whether the number is prime or not.\n    '''\n    pass\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    newman_prime(6) == 5\n    newman_prime(16) == 9\n    newman_prime(30) == 19\n    newman_prime(1000) == 19\n    newman_prime(9999) == 23\n    newman_prime(9999999) == 29\n    newman_prime(99999999) == 271\n    newman_prime(1000000000) == 701\n    newman_prime(10000000000) == 2137\n    newman_prime(1000000000000) == 2143\n    newman_prime(10000000000000) == 2047\n    newman_prime(100000000000000) == 2053\n    newman_prime(1000000000000000) == 2143\n    newman_prime(10000000000000000) == 2143\n    newman_prime(1000000000000000000) == 2143\n    newman_prime(100000000000000000000) == 2143\n    newman_prime(1000000000000000000000) == 2143\n    newman_prime(10000000000000000000000) == 2143\n    newman_prime(100000000000000000000000) == 2143\n    newman_prime(1000000000000000000000000) == 2143\n    newman_prime(100000000000000000000000000000000) == 2143\n    newman_prime(10000000000000000000000000000000000) == 2143\n    newman_prime(1000000000000000000000000000000000000) == 2143\n    newman_prime(10000000000000000000000000000000000000) == 2143\n    newman_prime(100000000000000000000000000000000000000) == 2143\n    newman_prime(1000000000000000000000000000000000000000) == 2143\n    newman_prime(10000000000000000000000000000000000000000) == 2143\n    newman_prime(1000000000000000000000000000000000000000000) == 2143\n    newman_prime(10000000000000000000000000000000000000000000) == 2143\n    newman_prime(100000000000000000000000000000000000000000000) == 2143\n    newman_prime(1000000000000000000000000000000000000000000000) == 2143\n    newman_prime(10000000000000000000000000000000000000000000000) == 2143\n    newman_prime(100000000000000000000000000000000000000000000000) == 2143\n    newman_prime(1000000000000000000000000000000000000000000000000) == 2143\n    newman_prime(10000000000000000000000000000000000000000000000000) == 2143\n    newman_prime(1000000000000000000000000000000000000000000000001) == 2143\n    newman_prime(10000000000000000000000000000000000000000000000000) == 2143\n    newman_prime(1000000000000000000000000000000000000000000000001000) == 2143\n    newman_prime(10000000000000000000000000000000000000000000000010000) == 2143\n    newman_prime(100000000000000000000000000000000000000000000000100000) == 2143\n    newman_prime(1000000000000000000000000000000000000000000000001000000) == 2143\n    newman_prime(10000000000000000000000000000000000000000000000010000000) == 2143\n    newman_prime(100000000000000000000000000000000000000000000000100000000) == 2143\n    newman_prime(10000000000000000000000000000000000000000000000010000000000) == 2143\n    newman_prime(100000000000000000000000000000000000000000000000100000000000) == 2143\n    newman_prime(1000000000000000000000000000000000000000000000001000000000000) == 2143\n    newman_prime(10000000000000000000000000000000000000000000000010000000000000) == 2143\n    newman_prime(100000000000000000000000000000000000000000000000100000000000000) == 2143\n    newman_prime(1000000000000000000000000000000000000000000000001000000000000000) == 2143\n    newman_prime(10000000000000000000000000000000000000000000000010000000000000000) == 2143\n    newman_prime(100000000000000000000000000000000000000000000000100000000000000000) == 2143\n    newman_prime(10000000000000000000000000000000000000000000000010000000000000001) == 2143\n    newman_prime(100000000000000000000000000000000000000000000000100000000000000000) == 2143\n    newman_prime(10000000000000000000000000000000000000000000000010000000000000001000) == 2143\n    newman_prime(100000000000000000000000000000000000000000000000100000000000000010000) == 2143\n    newman_prime(1000000000000000000000000000000000000000000000001000000000000000100000) == 2143\n    newman_prime(10000000000000000000000000000000000000000000000010000000000000001000000) == 2143\n    newman_prime(100000000000000000000000000000000000000000000000100000000000000010000000) == 2143\n    newman_prime(1000000000000000000000000000000000000000000000001000000000000000100000000) == 2143\n    newman_prime(100000000000000000000000000000000000000000000000100000000000000010000000000) == 2143\n    newman_prime(1000000000000000000000000000000000000000000000001000000000000000100000000000) == 2143\n    newman_prime(10000000000000000000000000000000000000000000000010000000000000001000000000000) == 2143\n    newman_prime(100000000000000000000000000000000000000000000000100000000000000010000000000000) == 2143\n    newman_prime(1000000000000000000000000000000000000000000000001000000000000000100000000000000) == 2143\n    newman_prime(10000000000000000000000000000000000000000000000010000000000000001000000000000000) == 2143\n    newman_prime(100000000000000000000000000000000000000000000000100000000000000010000000000000000) == 2143\n    newman_prime(1000000000000000000000000000000000000000000000001000000000000000100000000000000000) == 2143\n    newman_prime(100000000000000000000000000000000000000000000000100000000000000010000000000000001) == 2143\n    newman_prime(1000000000000000000000000000000000000000000000001000000000000000100000000000000000) == 2143\n    newman_prime(100000000000000000000000000000000000000000000000100000000000000010000000000000001000) == 2143\n    newman_prime(1000000000000000000000000000000000000000000000001000000000000000100000000000000010000) == 2143\n    newman_prime(10000000000000000000000000000000000000000000000010000000000000001000000000000000100000) == 2143\n    newman_prime(100000000000000000000000000000000000000000000000100000000000000010000000000000001000000) == 2143\n    newman_prime(1000000000000000000000000000000000000000000000001000000000000000100000000000000010000000) == 2143\n    newman_prime(10000000000000000000000000000000000000000000000010000000000000001000000000000000100000000) == 2143\n    newman_prime(1000000000000000000000000000000000000000000000001000000000000000100000000000000010000000000) == 2143\n    newman_prime(10000000000000000000000000000000000000000000000010000000000000001000000000000000100000000000) == 2143\n    newman_prime(100000000000000000000000000000000000000000000000100000000000000010000000000000001000000000000) == 2143\n    newman_prime(1000000000000000000000000000000000000000000000001000000000000000100000000000000010000000000000) == 2143\n    newman_prime(10000000000000000000000000000000000000000000000010000000000000001000000000000000100000000000000) == 2143\n    newman_prime(100000000000000000000000000000000000000000000000100000000000000010000000000000001000000000000000) == 2143\n    newman_prime(1000000000000000000000000000000000000000000000001000000000000000100000000000000010000000000000000) == 2143\n    newman_prime(10000000000000000000000000000000000000000000000010000000000000001000000000000000100000000000000000) == 2143\n    newman_prime(1000000000000000000000000000000000000000000000001000000000000000100000000000000010000000000000001) == 2143\n    newman_prime(10000000000000000000000000000000000000000000000010000000000000001000000000000000100000000000000000) == 2143\n    newman_prime(1000000000000000000000000000000000000000000000001000000000000000100000000000000010000000000000001000) == 2143\n    newman_prime(10000000000000000000000000000000000000000000000010000000000000001000000000000000100000000000000010000) == 2143\n    newman_prime(100000000000000000000000000000000000000000000000100000000000000010000000000000001000000000000000100000) == 2143\n    newman_prime(1000000000000000000000000000000000000000000000001000000000000000100000000000000010000000000000001000000) == 2143\n    newman_prime(10000000000000000000000000000000000000000000000010000000000000001000000000000000100000000000000010000000) == 2143\n    newman_prime(100000000000000000000000000000000000000000000000100000000000000010000000000000001000000000000000100000000) == 2143\n    newman_prime(10000000000000000000000000000000000000000000000010000000000000001000000000000000100000000000000010000000000) == 2143\n    newman_prime(100000000000000000000000000000000000000000000000100000000000000010000000000000001000000000000000100000000000) == 2143\n    newman_prime(1000000000000000000000000000000000000000000000001000000000000000100000000000000010000000000000001000000000000) == 2143\n    newman_prime(10000000000000000000000000000000000000000000000010000000000000001000000000000000100000000000000010000000000000) == 2143\n    newman_prime(100000000000000000000000000000000000000000000000100000000000000010000000000000001000000000000000100000000000000) == 2143\n    newman_prime(1000000000000000000000000000000000000000000000001000000000000000100000000000000010000000000000001000000000000000) == 2143\n    newman_prime(1000000000000000000000000000000000000000000000001000000000000000100000000000000010000000000000001000000000000) == 2143\n    newman_prime(10000000000000000000000000000000000000000000000010000000000000001000000000000000100000000000000010000000000000) == 2143\n    newman_prime(100000000000000000000000000000000000000000000000100000000000000010000000000000001000000000000000100000000000000) == 2143\n    newma"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     newman_prime(1) == 2\nassert     newman_prime(2) == 3\nassert     newman_prime(3) == 5\nassert     newman_prime(4) == 7\nassert     newman_prime(5) == 11\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint(newman_prime(2))\nprint(newman_prime(3))\nprint(newman_prime(4))\nprint(newman_prime(5))\nprint(newman_prime(6))\nprint(newman_prime(7))\nprint(newman_prime(8))\nprint(newman_prime(9))\nprint(newman_prime(10))\nprint(newman_prime(11))\nprint(newman_prime(12))\nprint(newman_prime(13))\nprint(newman_prime(14))\nprint(newman_prime(15))\nprint(newman_prime(16))\nprint(newman_prime(17))\nprint(newman_prime(18))\nprint(newman_prime(19))\nprint(newman_prime(20))\nprint(newman_prime(21))\nprint(newman_prime(22))\nprint(newman_prime(23))\nprint(newman_prime(24))\nprint(newman_prime(25))\nprint(newman_prime(26))\nprint(newman_prime(27))\nprint(newman_prime(28))\nprint(newman_prime(29))\nprint(newman_prime(30))\nprint(newman_prime(31))\nprint(newman_prime(32))\nprint(newman_prime(33))\nprint(newman_prime(34))\nprint(newman_prime(35))\nprint(newman_prime(36))\nprint(newman_prime(37))\nprint(newman_prime(38))\nprint(newman_prime(39))\nprint(newman_prime(40))\nprint(newman_prime(41))\nprint(newman_prime(42))\nprint(newman_prime(43))\nprint(newman_prime(44))\nprint(newman_prime(45))\nprint(newman_prime(46))\nprint(newman_prime(47))\nprint(newman_prime(48))\nprint(newman_prime(49))\nprint(newman_prime(50))\nprint(newman_prime(51))\nprint(newman_prime(52))\nprint(newman_prime(53))\nprint(newman_prime(54))\nprint(newman_prime(55))\nprint(newman_prime(56))\nprint(newman_prime(57))\nprint(newman_prime(58))\nprint(newman_prime(59))\nprint(newman_prime(60))\nprint(newman_prime(61))\nprint(newman_prime(62))\nprint(newman_prime(63))\nprint(newman_prime(64))\nprint(newman_prime(65))\nprint(newman_prime(66))\nprint(newman_prime(67))\nprint(newman_prime(68))\nprint(newman_prime(69))\nprint(newman_prime(70))\nprint(newman_prime(71))\nprint(newman_prime(72))\nprint(newman_prime(73))\nprint(newman_prime(74))\nprint(newman_prime(75))\nprint(newman_prime(76))\nprint(newman_prime(77))\nprint(newman_prime(78))\nprint(newman_prime(79))\nprint(newman_prime(80))\nprint(newman_prime(81))\nprint(newman_prime(82))\nprint(newman_prime(83))\nprint(newman_prime(84))\nprint(newman_prime(85))\nprint(newman_prime(86))\nprint(newman_prime(87))\nprint(newman_prime(88))\nprint(newman_prime(89))\nprint(newman_prime(90))\nprint(newman_prime(91))\nprint(newman_prime(92))\nprint(newman_prime(93))\nprint(newman_prime(94))\nprint(newman_prime(95))\nprint(newman_prime(96))\nprint(newman_prime(97))\nprint(newman_prime(98))\nprint(newman_prime(99))\nprint(newman_prime(100))\nprint(newman_prime(101))\nprint(newman_prime(102))\nprint(newman_prime(103))\nprint(newman_prime(104))\nprint(newman_prime(105))\nprint(newman_prime(106))\nprint(newman_prime(107))\nprint(newman_prime(108))\nprint(newman_prime(109))\nprint(newman_prime(110))\nprint(newman_prime(111))\nprint(newman_prime(112))\nprint(newman_prime(113))\nprint(newman_prime(114))\nprint(newman_prime(115))\nprint(newman_prime(116))\nprint(newman_prime(117))\nprint(newman_prime(118))\nprint(newman_prime(119))\nprint(newman_prime(120))\nprint(newman_prime(121))\nprint(newman_prime(122))\nprint(newman_prime(123))\nprint(newman_prime(124))\nprint(newman_prime(125))\nprint(newman_prime(126))\nprint(newman_prime(127))\nprint(newman_prime(128))\nprint(newman_prime(129))\nprint(newman_prime(130))\nprint(newman_prime(131))\nprint(newman_prime(132))\nprint(newman_prime(133))\nprint(newman_prime(134))\nprint(newman_prime(135))\nprint(newman_prime(136))\nprint(newman_prime(137))\nprint(newman_prime(138))\nprint(newman_prime(139))\nprint(newman_prime(140))\nprint(newman_prime(141))\nprint(newman_prime(142))\nprint(newman_prime(143))\nprint(newman_prime(144))\nprint(newman_prime(145))\nprint(newman_prime(146))\nprint(newman_prime(147))\nprint(newman_prime(148))\nprint(newman_prime(149))\nprint(newman_prime(150))\nprint(newman_prime(151))\nprint(newman_prime(152))\nprint(newman_prime(153))\nprint(newman_prime(154))\nprint(newman_prime(155))\nprint(newman_prime(156))\nprint(newman_prime(157))\nprint(newman_prime(158))\nprint(newman_prime(159))\nprint(newman_prime(160))\nprint(newman_prime(161))\nprint(newman_prime(162))\nprint(newman_prime(163))\nprint(newman_prime(164))\nprint(newman_prime(165))\nprint(newman_prime(166))\nprint(newman_prime(167))\nprint(newman_prime(168))\nprint(newman_prime(169))\nprint(newman_prime(170))\nprint(newman_prime(171))\nprint(newman_prime(172))\nprint(newman_prime(173))\nprint(newman_prime(174))\nprint(newman_prime(175))\nprint(newman_prime(176))\nprint(newman_prime(177))\nprint(newman_prime(178))\nprint(newman_prime(179))\nprint(newman_prime(180))\nprint(newman_prime(181))\nprint(newman_prime(182))\nprint(newman_prime(183))\nprint(newman_prime(184))\nprint(newman_prime(185))\nprint(newman_prime(186))\nprint(newman_prime(187))\nprint(newman_prime(188))\nprint(newman_prime(189))\nprint(newman_prime(190))\nprint(newman_prime(191))\nprint(newman_prime(192))\nprint(newman_prime(193))\nprint(newman_prime(194))\nprint(newman_prime(195))\nprint(newman_prime(196))\nprint(newman_prime(197))\nprint(newman_prime(198))\nprint(newman_prime(199))\nprint(newman_prime(200))"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef newman_prime_sieve(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    pass\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef newman_prime2(n):\n    '''\n    The algorithm is described in the article:\n          \"Newman\u2013Shanks\u2013Williams algorithm for finding the nth prime number\"\n    The algorithm in the article is called \"Newman\u2013Shanks\u2013Williams algorithm\"\n    '''\n    pass\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     newman_prime(0) == 1\nassert     newman_prime(1) == 2\nassert     newman_prime(2) == 3\nassert     newman_prime(3) == 5\nassert     newman_prime(4) == 7\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert newman_prime(3) == 5\nassert newman_prime(15) == 79\nassert newman_prime(42) == 61\nassert newman_prime(9999) == 104743\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     division_elements((1, 1), (3, 1)) == (1, 3)\nassert     division_elements((1, 1, 1), (3, 1, 2)) == (2, 2, 3)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     division_elements((1, 1), (1, 2)) == (1, 0.5)\nassert     division_elements((1.5, 0.5), (1, 2)) == (2.5, 0.25)\nassert     division_elements((0.5, 0.5), (1, 2)) == (0.25, 0.25)\nassert     division_elements((0.5, 0.5), (1.5, 0.5)) == (0.25, 0.25)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     division_elements((1, 2, 3), (2, 2, 2)) == ((1/2, 2/2, 3/2), (2/2, 2/2, 2/2))\nassert     division_elements((5, 2, 3), (2, 2, 2)) == ((5/2, 2/2, 3/2), (2/2, 2/2, 2/2))\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ndivision_elements((0, 1, 2), (0, 1, 2)) == (0, 1, 2)\nassert \ndivision_elements((0, 1, 2), (2, 1, 2)) == (0, 1, 2)\nassert \ndivision_elements((1, 2, 3), (5, 3, 3)) == (0.5, 1.3333333333333, 1.66666666666667)\nassert \ndivision_elements((0, 1, 2), (2, 1, 4)) == (0, 1, 0)\nassert \ndivision_elements((2, 1, 2), (2, 1, 4)) == (0, 1, 0)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     div_elements((1, 2, 3), (2, 0, 4)) == (1, 2, 1.5)\nassert     div_elements((5, -4, 10), (2, 0, -2)) == (2.5, -1.5, -3.0)\nassert     div_elements((5, -4, 10), (1, 2, 3)) == (5, -4, 5)\nassert     div_elements((0, 1, 2), (2, 0, 1)) == (0, 0, 1)\nassert     div_elements((2, 0, 1), (2, 0, 1)) == (2, 0, 1)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ndivision_elements((1, 1), (2, 2)) == (0, 0)\nassert division_elements((1, 0), (2, 0)) == (0, 0)\nassert division_elements((1, -1), (2, -1)) == (0, 0)\nassert division_elements((1, 1), (0, 0)) == (0, 0)\nassert division_elements((-1, 1), (0, 0)) == (0, 0)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     division_elements((1,2), (3,4)) == (1/2, 1/2)\nassert     division_elements((3,4), (1,2)) == (3/2, 4/2)\nassert     division_elements((2,3), (4,5)) == (0, 0)\nassert     division_elements((2,4), (3,5)) == (0, 0)\nassert     division_elements((4,6), (2,4)) == (4/2, 6/2)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     division_elements((1, 2), (3, 4)) == (0.5, 0.8)\nassert     division_elements((-1, 2), (3, 4)) == (0.5, -0.8)\nassert     division_elements((3, 4), (1, 2)) == (0.5, -0.8)\n\nprint(\"You are good!!!\")"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ndivision_elements((1, 2, 3), (4, 5, 6)) == (0.25, 0.5, 1)\nassert \ndivision_elements((1, 2, 3), (0, 0, 0)) == (1, 2, 3)\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert split_two_parts([1,2,3,4], 2) == ([1, 2], [3, 4])\nassert split_two_parts([1,2,3], 2) == ([1, 2], [])\nassert split_two_parts([1,2], 2) == ([1, 2], [])\nassert split_two_parts([1], 2) == ([], [1])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     split_two_parts([1,2,3,4,5,6], 3) == ( [1, 2, 3], [4, 5, 6])\nassert split_two_parts([1,2,3,4,5,6], 1) == ([1], [2, 3, 4, 5, 6])\nassert split_two_parts([1,2,3,4,5,6], 7) == ([1], [2, 3, 4, 5, 6])\nassert split_two_parts([1,2,3,4,5,6], 0) == ([], [1, 2, 3, 4, 5, 6])\nassert split_two_parts([], 1) == ([], [])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert split_two_parts([1,2,3,4,5], 3) == ([1,2], [3,4,5]), 'Wrong answer for the first example.'\nassert split_two_parts([1,2,3,4,5], 4) == ([1,2,3], [4,5]), 'Wrong answer for the second example.'\nassert split_two_parts([1,2,3,4,5], 1) == ([1], [2,3,4,5]), 'Wrong answer for the third example.'\nassert split_two_parts([1,2,3,4,5], 5) == ([1,2,3,4], [5]), 'Wrong answer for the fourth example.'\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     split_two_parts([1, 2, 3, 4], 2) == ([1, 2], [3, 4])\nassert     split_two_parts([1, 2, 3, 4, 5, 6], 2) == ([1, 2], [3, 4, 5, 6])\nassert     split_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], 4) == ([1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\nassert     split_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254], 6) == ([1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 254])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     split_two_parts([1,2,3,4], 1) == ([1,2,3,4], [])\nassert     split_two_parts([1,2,3,4], 2) == ([1,2,3], [4])\nassert     split_two_parts([1,2,3,4], 3) == ([1,2], [3,4])\nassert     split_two_parts([1,2,3,4], 4) == ([1,2,3,4], [])\nassert     split_two_parts([1,2,3,4], 5) == ([1,2,3,4], [])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     split_two_parts([1, 2, 3, 4, 5, 6], 3) == (([1, 2], [3, 4, 5, 6]), ([], []))\nassert     split_two_parts([1, 2, 3, 4, 5, 6], 4) == (([1, 2, 3], [4, 5, 6]), ([], []))\nassert     split_two_parts([1, 2, 3, 4, 5, 6], 1) == (([1], [2, 3, 4, 5, 6]), ([], []))\nassert     split_two_parts([1, 2, 3, 4, 5, 6], 2) == (([1, 2], [3, 4, 5, 6]), ([], []))\nassert     split_two_parts([1, 2, 3, 4, 5, 6], 6) == (([1, 2, 3], [4, 5, 6]), ([], []))\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     split_two_parts([1, 2, 3, 4], 2) == ([1, 2], [3, 4])\nassert     split_two_parts([1, 2, 3, 4], 5) == ([1, 2], [3, 4])\nassert     split_two_parts([1, 2, 3, 4], 5) == ([1, 2], [3, 4])\nassert     split_two_parts([1, 2, 3, 4], 4) == ([1, 2], [3, 4])\n\nprint('correct')\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     split_two_parts([1, 2, 3, 4, 5], 1) == ([1, 2, 3, 4], [5])\nassert     split_two_parts([1, 2, 3, 4, 5], 3) == ([1, 2, 3], [4, 5])\nassert     split_two_parts([1, 2, 3, 4, 5], 5) == ([1, 2], [3, 4, 5])\nassert     split_two_parts([1, 2, 3, 4, 5], 8) == ([1, 2], [3, 4, 5])\nassert     split_two_parts([1, 2, 3, 4, 5], 10) == ([1, 2], [3, 4, 5])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     split_two_parts([0, 1, 2, 3, 4, 5], 2) == ([0, 1], [2, 3, 4, 5])\nassert     split_two_parts([0, 1, 2, 3, 4, 5], 3) == ([0, 1, 2], [3, 4, 5])\nassert     split_two_parts([0, 1, 2, 3, 4, 5], 1) == ([0, 1, 2, 3, 4, 5], None)\nassert     split_two_parts([0, 1, 2, 3, 4, 5], 5) == ([0, 1, 2, 3, 4], None)\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     split_two_parts([1,2,3,4,5],2) == ([1,2], [3,4,5]), \\\n                'should return ([1,2],[3,4,5])'\nassert     split_two_parts([1,2,3,4,5],1) == ([1,2], [3,4,5]), \\\n                'should return ([1,2],[3,4,5])'\nassert     split_two_parts([1,2,3,4,5],3) == ([1,2],[3,4]), \\\n                'should return ([1,2],[3,4])'\nassert     split_two_parts([1,2,3,4,5],5) == ([1,2,3,4,5]), \\\n                'should return ([1,2,3,4,5])'\nassert     split_two_parts([1,2,3,4,5],10) == ([1,2,3,4], [5]), \\\n                'should return ([1,2,3,4], [5])'\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef dog_years(h_age):\n    '''\n    Write a function to convert a dog's age in human years\n    to dog's age in dog's years.\n    '''\n    return\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     dog_age(5) == 8, 'You have not implemented dog_age correctly!'\nassert     dog_age(70) == 84, 'You have not implemented dog_age correctly!'\nassert     dog_age(12) == 86, 'You have not implemented dog_age correctly!'\nassert     dog_age(2) == 2, 'You have not implemented dog_age correctly!'\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert dog_age(3) == 4\nassert dog_age(7) == 9\nassert dog_age(12) == 19\nassert dog_age(48) == 57\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     dog_age(5) == 7, 'WRONG OUTPUT'\nassert     dog_age(70) == 105, 'WRONG OUTPUT'\nassert     dog_age(0) == 0, 'WRONG OUTPUT'\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     dog_age(4) ==.5, 'Assertion Failed'\n\ndef dog_years_when_born(dog_age, dog_birth_year):\n    '''\n    Write a function to calculate dog's age in dog's years.\n    '''\n    pass\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     dog_age(2) == 5.5, 'incorrect answer'\nassert     dog_age(30) == 8.5, 'incorrect answer'\nassert     dog_age(45) == 13, 'incorrect answer'\nassert     dog_age(60) == 17.5, 'incorrect answer'\nassert     dog_age(70) == 21, 'incorrect answer'\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     dog_age(2) == 3\nassert     dog_age(20) == 2\n\nprint('Coding complete? Click \"Check\" to earn cool rewards!')"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     dog_age(10) == 2\nassert     dog_age(1) ==.5\nassert     dog_age(12) == 2\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     list_split([1, 2, 3, 4], 2) == [[1, 2],\n                                            [3, 4]]\nassert     list_split([1, 2, 3, 4], 1) == [[1],\n                                            [2],\n                                            [3],\n                                            [4]]\nassert     list_split([1, 2, 3, 4], 3) == [[1],\n                                            [2],\n                                            [3]]\nassert     list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [[1, 2, 3],\n                                                            [4, 5, 6],\n                                                            [7, 8, 9]]\nassert     list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 2) == [[1, 2],\n                                                            [3, 4, 5, 6, 7, 8, 9]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert list_split([1,2,3,4,5,6], 2) == [[1,2], [3,4,5,6]]\nassert list_split([1,2,3,4,5,6], 3) == [[1,2,3], [4,5,6]]\nassert list_split([1,2,3,4,5,6], 4) == [[1,2,3,4], [5,6]]\nassert list_split([1,2,3,4,5,6], 5) == [[1,2,3,4,5]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     list_split([1, 2, 3], 1) == [[1, 2, 3]]\nassert     list_split([1, 2, 3], 2) == [[1, 2], [3]]\nassert     list_split([1, 2, 3], 3) == [[1, 2], [3]]\nassert     list_split([1, 2, 3], 4) == [[1, 2], [3]]\nassert     list_split([1, 2, 3], 5) == [[1, 2], [3]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint()\nprint('Testing list_split...')\n\ntest_list = ['a', 'b', 'c', 'd', 'e', 'f', 'g']\ntest_step = 2\ntest_result = [['a', 'b'], ['c', 'd'], ['e', 'f'], ['g']]\ntest_result_2 = [['a', 'b'], ['c', 'd'], ['e'], ['f'], ['g']]\n\nprint('Testing case 1: ')\nprint('test_list =', test_list)\nprint('test_step =', test_step)\nprint('test_result =', test_result)\nprint('Expected result:')\nprint('test_result_2 =', test_result_2)\nprint()\n\nassert list_split(test_list, test_step) == test_result, 'incorrect answer'\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     list_split([1,2,3,4,5,6,7,8], 2) == [[1,2,3,4,5],[6,7,8]]\nassert     list_split([1,2,3,4,5,6,7,8], 3) == [[1,2,3,4,5],[6,7,8]]\nassert     list_split([1,2,3,4,5,6,7,8], 4) == [[1,2,3,4],[5,6,7,8]]\nassert     list_split([1,2,3,4,5,6,7,8], 5) == [[1,2,3,4,5],[6,7,8]]\nassert     list_split([1,2,3,4,5,6,7,8], 6) == [[1,2,3,4],[5,6,7],[8]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     list_split([1, 2, 3, 4, 5, 6, 7], 3) == [[1, 2, 3], [4, 5, 6], [7]]\nassert list_split([1, 2, 3, 4, 5, 6, 7], 2) == [[1, 2], [3, 4], [5, 6], [7]]\nassert list_split([1, 2, 3, 4, 5, 6, 7], 1) == [[1], [2], [3], [4], [5], [6], [7]]\nassert list_split([1, 2, 3, 4, 5, 6, 7], 0) == [[1, 2, 3, 4, 5, 6, 7]]\nassert list_split([1, 2, 3, 4, 5, 6, 7], 8) == [[1, 2, 3, 4, 5, 6, 7]]\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\ndef lateralsurface_square(s):\n    '''\n    Write a function to find the lateral surface area of a square given its length.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     lateralsurface_cube(1) == 1\nassert     lateralsurface_cube(2) == 6\nassert     lateralsurface_cube(3) == 12\nassert     lateralsurface_cube(4) == 20\nassert     lateralsurface_cube(5) == 30\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nlateralsurface_cube(1) == 1\nassert \nlateralsurface_cube(2) == 2\nassert \nlateralsurface_cube(3) == 6\nassert \nlateralsurface_cube(4) == 24\nassert \nlateralsurface_cube(5) == 48\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nlateralsurface_cube(3) == 6\nlateralsurface_cube(4) == 24\nlateralsurface_cube(5) == 60\nlateralsurface_cube(6) == 72\nlateralsurface_cube(7) == 108\nlateralsurface_cube(8) == 144\nlateralsurface_cube(9) == 180\nlateralsurface_cube(10) == 216\nlateralsurface_cube(11) == 252\nlateralsurface_cube(12) == 288\nlateralsurface_cube(13) == 360\nlateralsurface_cube(14) == 432\nlateralsurface_cube(15) == 480\nlateralsurface_cube(16) == 528\nlateralsurface_cube(17) == 576\nlateralsurface_cube(18) == 624\nlateralsurface_cube(19) == 672\nlateralsurface_cube(20) == 720\nlateralsurface_cube(21) == 768\nlateralsurface_cube(22) == 796\nlateralsurface_cube(23) == 840\nlateralsurface_cube(24) == 888\nlateralsurface_cube(25) == 900\nlateralsurface_cube(26) == 912\nlateralsurface_cube(27) == 924\nlateralsurface_cube(28) == 936\nlateralsurface_cube(29) == 948\nlateralsurface_cube(30) == 960\nlateralsurface_cube(31) == 962\nlateralsurface_cube(32) == 964\nlateralsurface_cube(33) == 972\nlateralsurface_cube(34) == 988\nlateralsurface_cube(35) == 1000\nlateralsurface_cube(36) == 1008\nlateralsurface_cube(37) == 1016\nlateralsurface_cube(38) == 1020\nlateralsurface_cube(39) == 1028\nlateralsurface_cube(40) == 1036\nlateralsurface_cube(41) == 1044\nlateralsurface_cube(42) == 1052\nlateralsurface_cube(43) == 1060\nlateralsurface_cube(44) == 1068\nlateralsurface_cube(45) == 1076\nlateralsurface_cube(46) == 1084\nlateralsurface_cube(47) == 1092\nlateralsurface_cube(48) == 1100\nlateralsurface_cube(49) == 1108\nlateralsurface_cube(50) == 1116\nlateralsurface_cube(51) == 1123\nlateralsurface_cube(52) == 1126\nlateralsurface_cube(53) == 1134\nlateralsurface_cube(54) == 1144\nlateralsurface_cube(55) == 1152\nlateralsurface_cube(56) == 1156\nlateralsurface_cube(57) == 1164\nlateralsurface_cube(58) == 1172\nlateralsurface_cube(59) == 1180\nlateralsurface_cube(60) == 1188\nlateralsurface_cube(61) == 1196\nlateralsurface_cube(62) == 1204\nlateralsurface_cube(63) == 1212\nlateralsurface_cube(64) == 1220\nlateralsurface_cube(65) == 1228\nlateralsurface_cube(66) == 1236\nlateralsurface_cube(67) == 1244\nlateralsurface_cube(68) == 1252\nlateralsurface_cube(69) == 1260\nlateralsurface_cube(70) == 1268\nlateralsurface_cube(71) == 1276\nlateralsurface_cube(72) == 1284\nlateralsurface_cube(73) == 1292\nlateralsurface_cube(74) == 1300\nlateralsurface_cube(75) == 1308\nlateralsurface_cube(76) == 1316\nlateralsurface_cube(77) == 1324\nlateralsurface_cube(78) == 1332\nlateralsurface_cube(79) == 1340\nlateralsurface_cube(80) == 1348\nlateralsurface_cube(81) == 1356\nlateralsurface_cube(82) == 1364\nlateralsurface_cube(83) == 1372\nlateralsurface_cube(84) == 1380\nlateralsurface_cube(85) == 1388\nlateralsurface_cube(86) == 1396\nlateralsurface_cube(87) == 1404\nlateralsurface_cube(88) == 1412\nlateralsurface_cube(89) == 1420\nlateralsurface_cube(90) == 1428\nlateralsurface_cube(91) == 1436\nlateralsurface_cube(92) == 1444\nlateralsurface_cube(93) == 1452\nlateralsurface_cube(94) == 1460\nlateralsurface_cube(95) == 1468\nlateralsurface_cube(96) == 1476\nlateralsurface_cube(97) == 1484\nlateralsurface_cube(98) == 1492\nlateralsurface_cube(99) == 1500\nlateralsurface_cube(100) == 1508\nlateralsurface_cube(101) == 1516\nlateralsurface_cube(102) == 1524\nlateralsurface_cube(103) == 1532\nlateralsurface_cube(104) == 1540\nlateralsurface_cube(105) == 1548\nlateralsurface_cube(106) == 1556\nlateralsurface_cube(107) == 1564\nlateralsurface_cube(108) == 1572\nlateralsurface_cube(109) == 1580\nlateralsurface_cube(110) == 1588\nlateralsurface_cube(111) == 1596\nlateralsurface_cube(112) == 1604\nlateralsurface_cube(113) == 1612\nlateralsurface_cube(114) == 1620\nlateralsurface_cube(115) == 1628\nlateralsurface_cube(116) == 1636\nlateralsurface_cube(117) == 1644\nlateralsurface_cube(118) == 1652\nlateralsurface_cube(119) == 1660\nlateralsurface_cube(120) == 1668\nlateralsurface_cube(121) == 1676\nlateralsurface_cube(122) == 1684\nlateralsurface_cube(123) == 1692\nlateralsurface_cube(124) == 1700\nlateralsurface_cube(125) == 1708\nlateralsurface_cube(126) == 1716\nlateralsurface_cube(127) == 1724\nlateralsurface_cube(128) == 1732\nlateralsurface_cube(129) == 1740\nlateralsurface_cube(130) == 1748\nlateralsurface_cube(131) == 1756\nlateralsurface_cube(132) == 1764\nlateralsurface_cube(133) == 1772\nlateralsurface_cube(134) == 1780\nlateralsurface_cube(135) == 1788\nlateralsurface_cube(136) == 1796\nlateralsurface_cube(137) == 1804\nlateralsurface_cube(138) == 1812\nlateralsurface_cube(139) == 1820\nlateralsurface_cube(140) == 1828\nlateralsurface_cube(141) == 1836\nlateralsurface_cube(142) == 1844\nlateralsurface_cube(143) == 1852\nlateralsurface_cube(144) == 1860\nlateralsurface_cube(145) == 1868\nlateralsurface_cube(146) == 1876\nlateralsurface_cube(147) == 1884\nlateralsurface_cube(148) == 1892\nlateralsurface_cube(149) == 1900\nlateralsurface_cube(150) == 1908\nlateralsurface_cube(151) == 1916\nlateralsurface_cube(152) == 1924\nlateralsurface_cube(153) == 1932\nlateralsurface_cube(154) == 1940\nlateralsurface_cube(155) == 1948\nlateralsurface_cube(156) == 1956\nlateralsurface_cube(157) == 1964\nlateralsurface_cube(15"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     lateralsurface_cube(10) == 20\nassert     lateralsurface_cube(1) == 1\nassert     lateralsurface_cube(2) == 4\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert lateralsurface_cube(1) == 8\nassert lateralsurface_cube(2) == 20\nassert lateralsurface_cube(3) == 30\nassert lateralsurface_cube(4) == 40\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     square_Sum(2) == 12\nassert     square_Sum(3) == 18\nassert     square_Sum(5) == 50\nassert     square_Sum(8) == 64\nassert     square_Sum(20) == 5120\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     square_Sum(1) == 1\nassert     square_Sum(2) == 3\nassert     square_Sum(5) == 21\nassert     square_Sum(100) == 1470\nassert     square_Sum(101) == 8689\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n'''\nWrite a python function that takes in an integer n and returns the sum of the squares of the first n natural numbers.\n'''\ndef square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nfind_star_num(100) == 2520\nfind_star_num(17) == 127\nfind_star_num(34) == 6864\nfind_star_num(5) == 26\nfind_star_num(10) == 2857\nfind_star_num(21) == 6849\nfind_star_num(25) == 6848\nfind_star_num(38) == 708\nfind_star_num(43) == 707\nfind_star_num(52) == 706\nfind_star_num(57) == 705\nfind_star_num(60) == 704\nfind_star_num(69) == 70\nfind_star_num(70) == 703\nfind_star_num(79) == 702\nfind_star_num(80) == 701\nfind_star_num(82) == 700\nfind_star_num(84) == 699\nfind_star_num(88) == 698\nfind_star_num(90) == 697\nfind_star_num(93) == 696\nfind_star_num(95) == 695\nfind_star_num(98) == 694\nfind_star_num(99) == 693\nfind_star_num(100) == 692\nfind_star_num(101) == 691\nfind_star_num(102) == 690\nfind_star_num(103) == 689\nfind_star_num(104) == 688\nfind_star_num(105) == 687\nfind_star_num(106) == 686\nfind_star_num(107) == 685\nfind_star_num(108) == 684\nfind_star_num(109) == 683\nfind_star_num(110) == 682\nfind_star_num(111) == 68\nfind_star_num(112) == 68\nfind_star_num(113) == 67\nfind_star_num(114) == 66\nfind_star_num(115) == 65\nfind_star_num(116) == 64\nfind_star_num(117) == 63\nfind_star_num(118) == 62\nfind_star_num(119) == 61\nfind_star_num(120) == 60\nfind_star_num(121) == 59\nfind_star_num(122) == 58\nfind_star_num(123) == 57\nfind_star_num(124) == 56\nfind_star_num(125) == 55\nfind_star_num(126) == 54\nfind_star_num(127) == 53\nfind_star_num(128) == 52\nfind_star_num(129) == 51\nfind_star_num(130) == 50\nfind_star_num(131) == 49\nfind_star_num(132) == 48\nfind_star_num(133) == 47\nfind_star_num(134) == 46\nfind_star_num(135) == 45\nfind_star_num(136) == 44\nfind_star_num(137) == 43\nfind_star_num(138) == 42\nfind_star_num(139) == 41\nfind_star_num(140) == 40\nfind_star_num(141) == 39\nfind_star_num(142) == 38\nfind_star_num(143) == 37\nfind_star_num(144) == 36\nfind_star_num(145) == 35\nfind_star_num(146) == 34\nfind_star_num(147) == 33\nfind_star_num(148) == 32\nfind_star_num(149) == 31\nfind_star_num(150) == 30\nfind_star_num(151) == 29\nfind_star_num(152) == 28\nfind_star_num(153) == 27\nfind_star_num(154) == 26\nfind_star_num(155) == 25\nfind_star_num(156) == 24\nfind_star_num(157) == 23\nfind_star_num(158) == 22\nfind_star_num(159) == 21\nfind_star_num(160) == 20\nfind_star_num(161) == 19\nfind_star_num(162) == 18\nfind_star_num(163) == 17\nfind_star_num(164) == 16\nfind_star_num(165) == 15\nfind_star_num(166) == 14\nfind_star_num(167) == 13\nfind_star_num(168) == 12\nfind_star_num(169) == 11\nfind_star_num(170) == 10\nfind_star_num(171) == 9\nfind_star_num(172) == 8\nfind_star_num(173) == 7\nfind_star_num(174) == 6\nfind_star_num(175) == 5\nfind_star_num(176) == 4\nfind_star_num(177) == 3\nfind_star_num(178) == 2\nfind_star_num(179) == 1\nfind_star_num(180) == 0\nfind_star_num(181) == -1\nfind_star_num(182) == -2\nfind_star_num(183) == -3\nfind_star_num(184) == -4\nfind_star_num(185) == -5\nfind_star_num(186) == -6\nfind_star_num(187) == -7\nfind_star_num(188) == -8\nfind_star_num(189) == -9\nfind_star_num(190) == -10\nfind_star_num(191) == -11\nfind_star_num(192) == -12\nfind_star_num(193) == -13\nfind_star_num(194) == -14\nfind_star_num(195) == -15\nfind_star_num(196) == -16\nfind_star_num(197) == -17\nfind_star_num(198) == -18\nfind_star_num(199) == -19\nfind_star_num(200) == -20\nfind_star_num(201) == -21\nfind_star_num(202) == -22\nfind_star_num(203) == -23\nfind_star_num(204) == -24\nfind_star_num(205) == -25\nfind_star_num(206) == -26\nfind_star_num(207) == -27\nfind_star_num(208) == -28\nfind_star_num(209) == -29\nfind_star_num(210) == -30\nfind_star_num(211) == -31\nfind_star_num(212) == -32\nfind_star_num(213) == -33\nfind_star_num(214) == -34\nfind_star_num(215) == -35\nfind_star_num(216) == -36\nfind_star_num(217) == -37\nfind_star_num(218) == -38\nfind_star_num(219) == -39\nfind_star_num(220) == -40\nfind_star_num(221) == -41\nfind_star_num(222) == -42\nfind_star_num(223) == -43\nfind_star_num(224) == -44\nfind_star_num(225) == -45\nfind_star_num(226) == -46\nfind_star_num(227) == -47\nfind_star_num(228) == -48\nfind_star_num(229) == -49\nfind_star_num(230) == -50\nfind_star_num(231) == -51\nfind_star_num(232) == -52\nfind_star_num(233) == -53\nfind_star_num(234) == -54\nfind_star_num(235) == -55\nfind_star_num(236) == -56\nfind_star_num(237) == -57\nfind_star_num(238) == -58\nfind_star_num(239) == -59\nfind_star_num(240) == -60\nfind_star_num(241) == -61\nfind_star_num(242) == -62\nfind_star_num(243) == -63\nfind_star_num(244) == -64\nfind_star_num(245) == -65\nfind_star_num(246) == -66\nfind_star_num(247) == -67\nfind_star_num(248"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_star_num(1) == 2\nassert     find_star_num(2) == 5\nassert     find_star_num(3) == 8\nassert     find_star_num(4) == 13\nassert     find_star_num(5) == 28\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_star_num(1) == 1\nassert     find_star_num(2) == 5\nassert     find_star_num(3) == 12\nassert     find_star_num(5) == 25\nassert     find_star_num(7) == 35\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_star_num(1) == 1\nassert     find_star_num(2) == 5\nassert     find_star_num(3) == 25\nassert     find_star_num(4) == 625\nassert     find_star_num(5) == 3125\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    find_star_num(1) == 1\n    find_star_num(2) == 2\n    find_star_num(3) == 3\n    find_star_num(4) == 4\n    find_star_num(5) == 5\n    find_star_num(6) == 6\n    find_star_num(7) == 7\n    find_star_num(8) == 8\n    find_star_num(9) == 9\n    find_star_num(10) == 10\n    find_star_num(11) == 11\n    find_star_num(12) == 12\n    find_star_num(13) == 13\n    find_star_num(14) == 14\n    find_star_num(15) == 15\n    find_star_num(16) == 16\n    find_star_num(17) == 17\n    find_star_num(18) == 18\n    find_star_num(19) == 19\n    find_star_num(20) == 20\n    find_star_num(21) == 21\n    find_star_num(22) == 22\n    find_star_num(23) == 23\n    find_star_num(24) == 24\n    find_star_num(25) == 25\n    find_star_num(26) == 26\n    find_star_num(27) == 27\n    find_star_num(28) == 28\n    find_star_num(29) == 29\n    find_star_num(30) == 30\n    find_star_num(31) == 31\n    find_star_num(32) == 32\n    find_star_num(33) == 33\n    find_star_num(34) == 34\n    find_star_num(35) == 35\n    find_star_num(36) == 36\n    find_star_num(37) == 37\n    find_star_num(38) == 38\n    find_star_num(39) == 39\n    find_star_num(40) == 40\n    find_star_num(41) == 41\n    find_star_num(42) == 42\n    find_star_num(43) == 43\n    find_star_num(44) == 44\n    find_star_num(45) == 45\n    find_star_num(46) == 46\n    find_star_num(47) == 47\n    find_star_num(48) == 48\n    find_star_num(49) == 49\n    find_star_num(50) == 50\n    find_star_num(51) == 51\n    find_star_num(52) == 52\n    find_star_num(53) == 53\n    find_star_num(54) == 54\n    find_star_num(55) == 55\n    find_star_num(56) == 56\n    find_star_num(57) == 57\n    find_star_num(58) == 58\n    find_star_num(59) == 59\n    find_star_num(60) == 60\n    find_star_num(61) == 61\n    find_star_num(62) == 62\n    find_star_num(63) == 63\n    find_star_num(64) == 64\n    find_star_num(65) == 65\n    find_star_num(66) == 66\n    find_star_num(67) == 67\n    find_star_num(68) == 68\n    find_star_num(69) == 69\n    find_star_num(70) == 70\n    find_star_num(71) == 71\n    find_star_num(72) == 72\n    find_star_num(73) == 73\n    find_star_num(74) == 74\n    find_star_num(75) == 75\n    find_star_num(76) == 76\n    find_star_num(77) == 77\n    find_star_num(78) == 78\n    find_star_num(79) == 79\n    find_star_num(80) == 80\n    find_star_num(81) == 81\n    find_star_num(82) == 82\n    find_star_num(83) == 83\n    find_star_num(84) == 84\n    find_star_num(85) == 85\n    find_star_num(86) == 86\n    find_star_num(87) == 87\n    find_star_num(88) == 88\n    find_star_num(89) == 89\n    find_star_num(90) == 90\n    find_star_num(91) == 91\n    find_star_num(92) == 92\n    find_star_num(93) == 93\n    find_star_num(94) == 94\n    find_star_num(95) == 95\n    find_star_num(96) == 96\n    find_star_num(97) == 97\n    find_star_num(98) == 98\n    find_star_num(99) == 99\n    find_star_num(100) == 100\n    find_star_num(101) == 101\n    find_star_num(102) == 102\n    find_star_num(103) == 103\n    find_star_num(104) == 104\n    find_star_num(105) == 105\n    find_star_num(106) == 106\n    find_star_num(107) == 107\n    find_star_num(108) == 108\n    find_star_num(109) == 109\n    find_star_num(110) == 110\n    find_star_num(111) == 111\n    find_star_num(112) == 112\n    find_star_num(113) == 113\n    find_star_num(114) == 114\n    find_star_num(115) == 115\n    find_star_num(116) == 116\n    find_star_num(117) == 117\n    find_star_num(118) == 118\n    find_star_num(119) == 119\n    find_star_num(120) == 120\n    find_star_num(121) == 121\n    find_star_num(122) == 122\n    find_star_num(123) == 123\n    find_star_num(124) == 124\n    find_star_num(125) == 125\n    find_star_num(126) == 126\n    find_star_num(127) == 127\n    find_star_num(128) == 128\n    find_star_num(129) == 129\n    find_star_num(130) == 130\n    find_star_num(131) == 131\n    find_star_num(132) == 132\n    find_star_num(133) == 133\n    find_star_num(134) == 134\n    find_star_num(135) == 135\n    find_star_num(136) == 136\n    find_star_num(137) == 137\n    find_star_num(138) == 138\n    find_star_num(139) == 139\n    find_star_num(140) == 140\n    find_star_num(141) == 141\n    find_star_num(142) == 142\n    find_star_num(143) == 143\n    find_star_num(144) == 144\n    find_star_num(145) == 145\n    find_star_num(146) == 146\n    find_star_num(147) == 147\n    find_star_num(148) == 148\n    find_star_num(149) == 149\n    find_star_num(150) == 150\n    find_star_num(151) == 151\n    find_star_num(152) == 152\n    find_star_num(153) == 153\n    find_star_num(154) == 154\n    find_star_num(155) == 155\n    find_star_num(156) == 156\n    find_star_num(157) == 157\n    find_star_num(158) == 158\n    find_star_num(159) == 159\n    find_star_num(160) == 160\n    find_star_num(161) == 161\n    find_star_num(162) == 162\n    find_star_num(163) == 163\n    find_star_num(164) == 164\n    find_star_num(165) == 165\n    find_star_num(166) == 166\n    find_star"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_star_num(2) == 3\nassert     find_star_num(3) == 6\nassert     find_star_num(10) == 28\n\n'''\n\nQuestion 8:\n    Write a function that takes in an ordered list of integers,\n    and returns a new list that contains only the unique elements of the original.\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nfind_star_num(0) == 1\nfind_star_num(1) == 2\nfind_star_num(2) == 5\nfind_star_num(3) == 8\nfind_star_num(4) == 13\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    find_star_num(5) == 31\n    find_star_num(10) == 1010\n    find_star_num(1) == 2\n    find_star_num(7) == 222\n    find_star_num(0) == 0\n    find_star_num(2) == 3\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n'''\nStep 4:\n\nWrite a function to find then'th row of the Pascal's triangle\n'''\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     ascii_value('a') == 97, f'error in ascii_value({a})'\nassert     ascii_value('b') == 98, f'error in ascii_value({b})'\nassert     ascii_value('c') == 99, f'error in ascii_value({c})'\nassert     ascii_value('d') == 100, f'error in ascii_value({d})'\nassert     ascii_value('e') == 101, f'error in ascii_value({e})'\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('b') == 98\nassert     ascii_value('c') == 99\nassert     ascii_value('d') == 100\nassert     ascii_value('e') == 101\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     ascii_value('c') == 122, \"ascii_value('c') == 122\"\nassert     ascii_value('A') == 65, \"ascii_value('A') == 65\"\nassert     ascii_value('a') == 97, \"ascii_value('a') == 97\"\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('b') == 98\nassert     ascii_value('c') == 99\nassert     ascii_value('\\n') == 10\nassert     ascii_value(' ') == 32\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     ascii_value('a')    ==    97\nassert    ascii_value('b')    ==    98\nassert    ascii_value('c')    ==    99\nassert    ascii_value('d')    ==    100\nassert    ascii_value('e')    ==    101\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     ascii_value('A') == 65\nassert     ascii_value('B') == 66\nassert     ascii_value('Z') == 90\nassert     ascii_value('.') == 46\nassert     ascii_value('_') == 95\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('b') == 98\nassert     ascii_value('c') == 99\nassert     ascii_value('d') == 100\nassert     ascii_value('e') == 101\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('B') == 98\nassert     ascii_value('c') == 99\nassert     ascii_value('b') == 98\nassert     ascii_value('~') == 126\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_even_and_even_index([1,2,3,4,5,6,7]) == 12\nassert     sum_even_and_even_index([2,3,4,5,6,7,8]) == 19\nassert     sum_even_and_even_index([3,4,5,6,7,8,9]) == 28\nassert     sum_even_and_even_index([1,2,3,4,5,6,7]) == 12\nassert     sum_even_and_even_index([1,2,3,4,5,6,7,8]) == 19\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_even_and_even_index([1,2,3,4,5,6,7]) == 12, 'Not correct'\nassert     sum_even_and_even_index([1,2,3,4,5,6,8]) == 8, 'Not correct'\nassert     sum_even_and_even_index([1,2,3,4,5,6,9]) == 6, 'Not correct'\nassert     sum_even_and_even_index([1,2,3,4,5,6,7]) == 12, 'Not correct'\nassert     sum_even_and_even_index([1,2,3,4,5,6,8]) == 8, 'Not correct'\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_even_and_even_index([1,2,3,4,5,6,7]) == 0, 'incorrect'\nassert     sum_even_and_even_index([1,3,5,7]) == 1, 'incorrect'\nassert     sum_even_and_even_index([1,2,3,4,5,6]) == 5, 'incorrect'\n\ndef sum_even_and_odd_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at odd positions of a list.\n    '''\n    pass\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n'''\n    Write a python function to find the minimum of a list.\n'''\ndef minimum_in_list(arr):\n    '''\n    Write a python function to find the minimum of a list.\n    '''\n    pass\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_even_and_even_index([1, 3, 9, 6, 5, 8, 4]) == 0\nassert     sum_even_and_even_index([1, 3, 9, 6, 5, 8, 4, 2]) == 11\nassert     sum_even_and_even_index([1, 3, 9, 6, 5, 8, 4, 2, 3]) == 11\n\n\n\ndef reverse_order_of_numbers(arr):\n    '''\n    Write a python function to reverse the order of numbers at even positions of a list.\n    '''\n    pass\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef sum_even_and_odd_index(arr):\n    '''\n    Write a python function to find the sum of even numbers at odd positions of a list.\n    '''\n    pass\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # run some tests\n    print(sum_even_and_even_index([2, 4, 6, 8, 10, 12]))\n    print(sum_even_and_even_index([2, 4, 6, 8]))\n    print(sum_even_and_even_index([2, 4, 6, 8, 10, 12]))\n    print(sum_even_and_even_index([2, 4, 6, 8, 10]))\n\n    print(sum_even_and_even_index([1, 2, 3, 4]))\n    print(sum_even_and_even_index([1]))\n    print(sum_even_and_even_index([1, 2, 3, 4, 5]))\n    print(sum_even_and_even_index([1, 2, 3, 4, 5]))\n\n    print(sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n    print(sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n\n    print(sum_even_and_even_index([0, 2, 4, 6, 8, 10, 12]))\n    print(sum_even_and_even_index([0]))\n    print(sum_even_and_even_index([0, 2, 4, 6, 8]))\n    print(sum_even_and_even_index([0, 2, 4, 6, 8, 10, 12]))\n    print(sum_even_and_even_index([0, 2, 4, 6, 8, 10]))\n    print(sum_even_and_even_index([0, 2, 4, 6, 8, 10, 12]))\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n'''\nWrite a python function to find the minimum and maximum number in a given list.\n'''"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_even_and_even_index([3,4,5,6,7,8,9,10]) == 0, \"Even position returns 0\"\nassert     sum_even_and_even_index([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 32, \"Even and odd index sums 32\"\nassert     sum_even_and_even_index([3,4,5,6,7,8,9,10]) == 0, \"Even position returns 0\"\nassert     sum_even_and_even_index([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 32, \"Even and odd index sums 32\"\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_even_and_even_index([1, 2, 3, 4, 5]) == 0, \"Should be 0\"\nassert     sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7]) == 0, \"Should be 0\"\nassert     sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8]) == 0, \"Should be 0\"\nassert     sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0, \"Should be 0\"\nassert     sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0, \"Should be 0\"\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \neven_Power_Sum(4) == 20\n\nprint(\"check complete\")\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \neven_Power_Sum(1) == 1\nassert even_Power_Sum(2) == 8\nassert even_Power_Sum(3) == 27\nassert even_Power_Sum(10) == 333\nassert even_Power_Sum(20) == 146500\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     even_Power_Sum(3) == 8\nassert even_Power_Sum(4) == 64\nassert even_Power_Sum(5) == 945\nassert even_Power_Sum(6) == 875\nassert even_Power_Sum(7) == 12359\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \neven_Power_Sum(4) == 6\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \neven_Power_Sum(0) == 0\nassert \neven_Power_Sum(1) == 1\nassert \neven_Power_Sum(2) == 4\nassert \neven_Power_Sum(3) == 14\nassert \neven_Power_Sum(4) == 32\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n'''\nFunction that takes in a string and returns a dictionary containing the \nnumber of times that each character appears in the string.\n'''\ndef count_characters(string):\n    '''\n    Write a python function that takes in a string and returns a dictionary \n    containing the number of times that each character appears in the string.\n    '''\n    pass\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert even_Power_Sum(5) ==  0, 'wrong answer'\nassert even_Power_Sum(10) == 23, 'wrong answer'\nassert even_Power_Sum(15) == 1295, 'wrong answer'\nassert even_Power_Sum(20) == 116855\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     even_Power_Sum(5) == 28\nassert     even_Power_Sum(3) == 9\nassert     even_Power_Sum(2) == 4\nassert     even_Power_Sum(1) == 2\nassert     even_Power_Sum(0) == 1\nprint('correct')\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     even_Power_Sum(5) == 2125\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     rear_extract([('A',1), ('B',2), ('C',3)]) == [('C',3), ('B',2), ('A',1)], \"Should be ['C', 'B', 'A']\"\nassert     rear_extract([('A',1), ('B',2), ('C',3), ('D',4)]) == [('D',4), ('C',3), ('B',2), ('A',1)], \"Should be ['D', 'C', 'B', 'A']\"\nassert     rear_extract([('A',1), ('B',2), ('C',3), ('D',4), ('E',5)]) == [('E',5), ('D',4), ('C',3), ('B',2), ('A',1)], \"Should be ['E', 'D', 'C', 'B', 'A']\"\nassert     rear_extract([('A',1), ('B',2), ('C',3), ('D',4), ('E',5), ('F',6)]) == [('F',6), ('E',5), ('D',4), ('C',3), ('B',2), ('A',1)], \"Should be ['F', 'E', 'D', 'C', 'B', 'A']\"\nassert     rear_extract([('A',1), ('B',2), ('C',3), ('D',4), ('E',5), ('F',6), ('G',7)]) == [('G',7), ('E',5), ('D',4), ('C',3), ('B',2), ('A',1), ('F',6)], \"Should be ['G', 'E', 'D', 'C', 'B', 'A', 'F', '6']\"\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     rear_extract([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6)]) == ['e', 'f', 'c', 'b', 'a', 'd'], 'function is wrong'\n\ndef head_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the head element of each tuple.\n    '''\n    pass\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     rear_extract([(1,2), (3,4), (5,6)]) == [2,4,6]\nassert    rear_extract([(1,2), (3,4), (5,6)]) == [2,4,6]\nassert    rear_extract([(1,2), (3,4), (5,6)]) == [2,4,6]\nassert    rear_extract([(1,2), (3,4), (5,6)]) == [2,4,6]\nassert    rear_extract([(1,2), (3,4), (5,6)]) == [2,4,6]\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rear_extract([(\"a\", 1), (\"b\", 2), (\"c\", 3)]) == [\"b\", \"c\", \"a\"], \"Test 1 Failed!\"\nassert     rear_extract([(\"a\", 1), (\"b\", 2), (\"c\", 3)]) == [\"c\", \"b\", \"a\"], \"Test 2 Failed!\"\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     rear_extract([]) == []\nassert     rear_extract([(2, 3), (4, 5), (6, 7)]) == [(6, 7)]\nassert     rear_extract([(2, 3), (4, 5), (6, 7), (8, 9)]) == [(6, 7), (8, 9)]\nassert     rear_extract([(2, 3), (4, 5), (6, 7), (8, 9), (10, 11)]) == [(6, 7), (8, 9), (10, 11)]\nassert     rear_extract([(2, 3), (4, 5), (6, 7), (8, 9), (10, 11), (12, 13)]) == [(6, 7), (8, 9), (10, 11), (12, 13)]\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rear_extract([\"test\"]) == [\"test\"]\nassert     rear_extract([[\"test\"]]) == [\"test\"]\nassert     rear_extract([[\"test\", \"hello\"]]) == [\"hello\"]\nassert     rear_extract([\"test\", \"hello\", [\"test\", \"test\"]]) == [\"hello\", \"test\"]\nassert     rear_extract([\"test\", \"hello\", [\"test\", \"test\", \"test\"]]) == [\"hello\", \"test\"]\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     rear_extract([(0,1),(2,3)]) == [(0,1),(2,3)], \"rear_extract([(0,1),(2,3)]) == [(0,1),(2,3)]: False\"\nassert     rear_extract([(0,1)]) == [(0,1)], \"rear_extract([(0,1)]) == [(0,1)]: False\"\nassert     rear_extract([(0,)]) == [(0,)], \"rear_extract([(0,)]) == [(0,)]: False\"\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rear_extract([]     ) == None, \"Expected None\"\nassert     rear_extract([(1,2)]) == None, \"Expected None\"\nassert     rear_extract([(1,2,3), (4,5,6)]) == None, \"Expected None\"\nassert     rear_extract([(1,2), (1,2,3,4), (5,6,7,8)]) == None, \"Expected None\"\nassert     rear_extract([(1,2,3), (4,5,6), (7,8,9,10)]) == [8,9,10], \"Wrong result\"\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    #assert rear_extract([(\"a\", 1), (\"b\", 2), (\"c\", 3)]) == [\"b\", \"c\"]\n    #assert rear_extract([(\"a\", 1), (\"b\", 2), (\"c\", 3)]) == [\"a\", \"b\"]\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     rear_extract([('a', 1), ('b', 2), ('c', 3)]) == ['c', 'c', 'c'], \"Error\"\nassert     rear_extract([('a', 1), ('b', 2)]) == ['a', 'b'], \"Error\"\nassert     rear_extract([('a', 1)]) == ['a'], \"Error\"\nassert     rear_extract([('a',)]) == ['a'], \"Error\"\nassert     rear_extract([(1,), (2,), (3,)]) == [(1,), (2,), (3,)], \"Error\"\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     substract_elements((3,4), (3,4)) == (0,0)\nassert substract_elements((3,4), (5,4)) == (2,2)\nassert substract_elements((3,4), (1,4)) == (2,2)\nassert substract_elements((3,4), (1,4,4)) == (2,2,2)\nassert substract_elements((3,4,5), (3,4,5)) == (0,0,0)\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     substract_elements((1, 2, 3), (2, 2, 3)) == (1, 0, 1)\nassert     substract_elements((1, 2, 3), (5, 6, 7)) == (1, 2, 3)\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     substract_elements((2,3,4), (3,2,1)) == ((2,0,1), (1,0,0))\nassert substract_elements((1,2,3), (3,2,1)) == ((0,0,0), (2,1,3))\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     substract_elements(('b', 'c'), ('d', 'c')) == (('b', 'a'), ('d', 'a'))\nassert     substract_elements(('b', 'c'), ('a', 'c')) == (('b', 'a'), ('a', 'b'))\nassert     substract_elements(('a', 'b'), ('b', 'c')) == (('a', 'b'), ('a', 'b'))\nassert     substract_elements(('a', 'b'), ('c', 'a')) == (('a', 'b'), ('a', 'b'))\nassert     substract_elements(('a', 'b', 'c'), ('c', 'a', 'b')) == (('a', 'b', 'a'), ('c', 'a', 'b'))\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(\"\\nTEST - substract_elements:\")\ntest_tup1 = (1, 2, 3, 4)\ntest_tup2 = (5, 6)\nprint(substract_elements(test_tup1, test_tup2))"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef generate_random_tuple(n):\n    '''\n    Write a function that takes in a number n as an argument and returns a tuple that contains n random integers from 0 to 9.\n    '''\n    pass\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     substract_elements(((1,2),(3,4),(5,6)), ((2,2),(3,3),(4,4))) == ((1,2),(3,4),(5,6))\nassert substract_elements(((2,2),(3,3),(4,4)), ((1,2),(3,3),(5,6))) == ((1,2),(3,3),(5,6))\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nsubstract_elements((5, 4), (2, 3, 1)) == (7, 0)\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n'''\nWrite a Python function that takes in a positive integer n, returns the nth index binomial coefficient.\n'''\n\ndef BinomialCoeff(n):\n    '''\n    Write a python function that takes in a positive integer n and returns the nth index binomial coefficient.\n    '''\n    pass\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     even_binomial_Coeff_Sum( 1) == 0\nassert     even_binomial_Coeff_Sum( 2) == 1\nassert     even_binomial_Coeff_Sum( 3) == 2\nassert     even_binomial_Coeff_Sum( 4) == 4\nassert     even_binomial_Coeff_Sum( 5) == 5\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     even_binomial_Coeff_Sum(1) == 1\nassert     even_binomial_Coeff_Sum(4) == 0\nassert     even_binomial_Coeff_Sum(1) == 1\n\ndef negative_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of the negative binomial coefficients.\n    '''\n    pass\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(even_binomial_Coeff_Sum(1))\nprint(even_binomial_Coeff_Sum(3))\nprint(even_binomial_Coeff_Sum(5))\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \neven_binomial_Coeff_Sum(4) == 2\n\ndef even_binomial_Coeff_Sum( n):\n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    pass\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     even_binomial_Coeff_Sum(1) == 0\nassert     even_binomial_Coeff_Sum(4) == 12\nassert     even_binomial_Coeff_Sum(9) == 144\nassert     even_binomial_Coeff_Sum(10) == 272\nassert     even_binomial_Coeff_Sum(50) == 74090\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert even_binomial_Coeff_Sum(3) == 8\nassert even_binomial_Coeff_Sum(4) == 14\nassert even_binomial_Coeff_Sum(5) == 42\nassert even_binomial_Coeff_Sum(6) == 30\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     even_binomial_Coeff_Sum(10) ==     2\nassert     even_binomial_Coeff_Sum(3) ==     2\nassert     even_binomial_Coeff_Sum(6) ==     12\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef odd_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    pass\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    even_binomial_Coeff_Sum(3) == 3\n    even_binomial_Coeff_Sum(4) == 6\n    even_binomial_Coeff_Sum(5) == 15\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     volume_cylinder(0.5, 3.0) == 3.1415\nassert     volume_cylinder(1.0, 4.0) == 28.274\nassert     volume_cylinder(1.5, 3.0) == 12.566\n\ndef volume_sphere(radius):\n    '''\n    Write a function that takes in the radius of a sphere and returns the volume.\n    '''\n    pass\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     volume_cylinder(r,h) ==  1.5678\nassert     volume_cylinder(r=3,h=5) == 35.24\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     volume_cylinder(2,2) == 4\nassert     volume_cylinder(4,2) == 4\nassert     volume_cylinder(1,1) == 3.14\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     volume_cylinder(5,3) == 20.56\nassert     volume_cylinder(2,4) == 14.56\nassert     volume_cylinder(4,8) == 40.08\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     volume_cylinder(3,4) == 6.0\nassert volume_cylinder(3,4) == 12.0\nassert volume_cylinder(3,4) == 7.6\nassert volume_cylinder(3,4) == 12.0\nassert volume_cylinder(3,4) == 7.6\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     volume_cylinder(1, 1) == 2.0, 'Should be 2.0'\nassert     volume_cylinder(10, 10) == 36.0, 'Should be 36.0'\nassert     volume_cylinder(0, 10) == 0.0, 'Should be 0.0'\nassert     volume_cylinder(10, 0) == 0.0, 'Should be 0.0'"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     volume_cylinder(1,2) == 3.14, \"Your volume_cylinder function did not return the correct value.\"\nassert     volume_cylinder(1,1) == 1, \"Your volume_cylinder function did not return the correct value.\"\n\n'''\n    Below, we have provided a function that uses volume_cylinder to compute the volume of a cylinder whose radius is r and height is h. The radius and height are both inputs to the function. Your function should return the volume of the cylinder. Note that you should use volume_cylinder to compute the volume of the cylinder.\n    \n    Write a function, volume_cone, that takes in the radius and height of a cone and returns the volume.\n'''\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     volume_cylinder(3, 4) == 24.3\nassert     volume_cylinder(7, 7) == 140\nassert     volume_cylinder(3,2) == 4\nassert     volume_cylinder(4,4) == 8\nassert     volume_cylinder(1,5) == 5\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     dict_filter({'a':1,'b':2,'c':3},1) == {'a':1,'b':2,'c':3}\nassert     dict_filter({'a':1,'b':2,'c':3},2) == {'a':1}\nassert     dict_filter({'a':1,'b':2,'c':3},3) == {'a':1,'b':2}\nassert     dict_filter({'a':1,'b':2,'c':3},4) == {'a':1}\nassert     dict_filter({'a':1,'b':2,'c':3},5) == {}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     dict_filter({'apple': 5, 'cherry': 7, 'berry': 2, 'banana': 1, 'apple': 6}, 3) == {'apple': 6, 'berry': 2, 'banana': 1}, \"Wrong return type\"\nassert     dict_filter({'apple': 5, 'cherry': 7, 'berry': 2, 'banana': 1, 'apple': 6}, 8) == {'cherry': 7, 'berry': 2}, \"Wrong return type\"\nassert     dict_filter({'apple': 5, 'cherry': 7, 'berry': 2, 'banana': 1, 'apple': 6}, 6) == {'cherry': 7, 'berry': 2, 'banana': 1}, \"Wrong return type\"\nassert     dict_filter({'apple': 5, 'cherry': 7, 'berry': 2, 'banana': 1, 'apple': 6}, 4) == {'cherry': 7, 'banana': 1, 'apple': 6}, \"Wrong return type\"\nassert     dict_filter({'apple': 5, 'cherry': 7, 'berry': 2, 'banana': 1, 'apple': 6}, 1) == {'cherry': 7, 'banana': 1}, \"Wrong return type\"\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     dict_filter({'a':1,'b':2,'c':3},3) == {'a':1,'c':3}, 'incorrect output'\nassert     dict_filter({'a':1,'b':2,'c':3},2) == {'b':2,'c':3}, 'incorrect output'\nassert     dict_filter({'a':1,'b':2,'c':3},4) == {'a':1,'c':3}, 'incorrect output'\nassert     dict_filter({'a':1,'b':2,'c':3},10) == {'a':1}, 'incorrect output'\nassert     dict_filter({'a':1,'b':2,'c':3},1) == {'a':1,'b':2,'c':3}, 'incorrect output'\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, 2) == {'a': 1, 'b': 2, 'e': 5}\n    \n    dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, 1) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\n    \n    dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, -2) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\n    \n    dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, 0) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\n    \n    dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, 6) == {}\n    \n    dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, -6) == {}\n\n\ndef create_key_to_value_map(dict):\n    '''\n    Write a function that takes in a dictionary and returns a dictionary with the keys of the dictionary as the keys and the values of the dictionary as the values.\n    '''\n    pass\n\n\ndef remove_from_dict_1(dict, key):\n    '''\n    Write a function that removes a single key-value pair from a dictionary.\n    '''\n    pass\n\n\ndef remove_from_dict_2(dict, key):\n    '''\n    Write a function that removes all key-value pairs from a dictionary.\n    '''\n    pass\n\n\ndef remove_from_dict_3(dict, key):\n    '''\n    Write a function that removes a single key-value pair from a dictionary and returns the resulting dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     dict_filter({1:10,2:1,3:4,4:10},1) == {1:10,2:1,3:4,4:10}, f\"Expected {dict_filter({1:10,2:1,3:4,4:10},1)} to equal {{1:10,2:1,3:4,4:10}}\"\nassert     dict_filter({1:10,2:1,3:4,4:10},2) == {2:1,3:4,4:10}, f\"Expected {dict_filter({1:10,2:1,3:4,4:10},2)} to equal {{2:1,3:4,4:10}}\"\nassert     dict_filter({1:10,2:1,3:4,4:10},3) == {3:4,4:10}, f\"Expected {dict_filter({1:10,2:1,3:4,4:10},3)} to equal {{3:4,4:10}}\"\nassert     dict_filter({1:10,2:1,3:4,4:10},4) == {4:10}, f\"Expected {dict_filter({1:10,2:1,3:4,4:10},4)} to equal {{4:10}}\"\nassert     dict_filter({},1) == {}, f\"Expected {dict_filter({},1)} to equal {}\"\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     dict_filter({1:2,2:3,4:4,5:5},2) == {2:3,4:4,5:5}, \"returned incorrect results\"\nassert     dict_filter({1:2,2:3,4:4,5:5},-2) == {1:2,2:3,4:4,5:5}, \"returned incorrect results\"\nassert     dict_filter({1:2,2:3,4:4,5:5},3) == {2:3,4:4,5:5}, \"returned incorrect results\"\n\n'''\n------------------------------------------------------------\n'''\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     dict_filter({\"a\": 1, \"b\": 2, \"c\": 3}, 1) == {\"a\": 1, \"b\": 2, \"c\": 3}\nassert     dict_filter({\"a\": 1, \"b\": 2, \"c\": 3}, 2) == {\"a\": 1, \"c\": 3}\nassert     dict_filter({\"a\": 1, \"b\": 2, \"c\": 3}, 3) == {\"a\": 1, \"b\": 2}\nassert     dict_filter({\"a\": 1, \"b\": 2, \"c\": 3}, 0) == {\"a\": 1, \"b\": 2, \"c\": 3}\nassert     dict_filter({\"a\": 1, \"b\": 2, \"c\": 3}, -1) == {\"a\": 1, \"b\": 2, \"c\": 3}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     dict_filter({'1': 1, '2': 2, '3': 3}, 3) == {'1': 1, '2': 2}\nassert     dict_filter({'1': 1, '2': 2, '3': 3}, 1) == {'1': 1, '2': 2, '3': 3}\nassert     dict_filter({'1': 1, '2': 2, '3': 3}, -1) == {}\nassert     dict_filter({'1': 1, '2': 2, '3': 3}, 0) == {}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     dict_filter({'a': 3, 'b': 1, 'c': 2}, 1) == {'b': 1, 'c': 2}, 'First'\nassert     dict_filter({'a': 3, 'b': 1, 'c': 2}, 3) == {'a': 3, 'b': 1, 'c': 2}, 'Second'\nassert     dict_filter({'a': 3, 'b': 1, 'c': 2}, 0) == {}, 'Third'\nassert     dict_filter({'a': 3, 'b': 1, 'c': 2}, -1) == {}, 'Fourth'\nassert     dict_filter({'a': 3, 'b': 1, 'c': 2}, 2) == {'a': 3, 'b': 1}, 'Fifth'\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     dict_filter({1: 1, 2: 2, 3: 3, 4: 4, 5: 5}, 1) == {1: 1, 2: 2, 3: 3, 4: 4, 5: 5}\nassert     dict_filter({1: 1, 2: 2, 3: 3, 4: 4, 5: 5}, 10) == {1: 1, 2: 2, 3: 3, 4: 4, 5: 5}\nassert     dict_filter({1: 1, 2: 2, 3: 3, 4: 4, 5: 5}, 12) == {1: 1, 2: 2, 3: 3, 4: 4, 5: 5}\nassert     dict_filter({1: 1, 2: 2, 3: 3, 4: 4, 5: 5}, 2) == {1: 1, 2: 2, 3: 3, 4: 4, 5: 5}\nassert     dict_filter({1: 1, 2: 2, 3: 3, 4: 4, 5: 5}, 4) == {1: 1, 2: 2, 3: 3, 4: 4, 5: 5}\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_first_elements((1, 1, 1, 3, 3, 3, 2, 2, 2)) == 2\nassert     count_first_elements((1, 1, 1, 3, 3, 3, 2, 2, 2, 2, 1, 1)) == 0\nassert     count_first_elements((1, 1, 1, 3, 3, 3, 2, 2, 2, 2, 1, 1, 3, 3, 3, 2, 2, 2, 3, 3, 3, 2, 2, 2, 1, 1, 3, 3, 3, 2, 2, 2, 3, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 3, 3, 3, 2, 2, 2, 1, 1, 3, 3, 3, 2, 2, 2, 1, 1, 3, 3, 3, 2, 2, 2, 3, 3, 3, 2, 2, 2, 1, 1, 3, 3, 3, 2, 2, 2, 1, 1, 1, 1)) == 15\nassert     count_first_elements((1, 1, 1, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)) == 19"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_first_elements((1,2,3)) == 2,     \"Expected 2, Actual %s\"%(count_first_elements((1,2,3)))\nassert     count_first_elements((3,2,1)) == 1,     \"Expected 1, Actual %s\"%(count_first_elements((3,2,1)))\nassert     count_first_elements((5,6,4)) == 1,     \"Expected 1, Actual %s\"%(count_first_elements((5,6,4)))\nassert     count_first_elements((8,5,6,7)) == 0,     \"Expected 0, Actual %s\"%(count_first_elements((8,5,6,7)))\nassert     count_first_elements((7,8,9,1,2,3,4)) == 3,     \"Expected 3, Actual %s\"%(count_first_elements((7,8,9,1,2,3,4)))\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_first_elements(('a','b','c','a','b','a')) == 2, '1st Test case failed'\nassert     count_first_elements(('a','b','c','a')) == 2, '2nd Test case failed'\nassert     count_first_elements(('a','b','a','a','a')) == 3, '3rd Test case failed'\nassert     count_first_elements(('a','b','a')) == 2, '4th Test case failed'\nassert     count_first_elements(('a','b','c')) == 1, '5th Test case failed'\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_first_elements((1,2,4)) == 2\nassert     count_first_elements((1,1,1,2,2,2)) == 5\nassert     count_first_elements((2,2)) == 1\nassert     count_first_elements((1,1,1,1,2,2)) == 6\nassert     count_first_elements((2,)) == 0\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_first_elements((1, 2, 3, 4, 5, 3, 2, 1)) == 2, \"failed\"\nassert count_first_elements((1, 2, 3, 4, 5, 3, 2, 1)) == 2, \"failed\"\nassert count_first_elements((1, 1, 1, 1, 1, 1, 1, 1)) == 4, \"failed\"\nassert count_first_elements((1, 1, 1, 1, 1, 1, 1, 1)) == 4, \"failed\"\nassert count_first_elements((1, 1, 1, 1, 1, 1, 1, 1)) == 4, \"failed\"\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_first_elements(('a', 'b', 'c', 'b', 'a')) == 2\nassert     count_first_elements(('a', 'b', 'c', 'd')) == 0\n\ndef count_first_elements_2(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_first_elements((1, 2, 3, 2, 1)) == 2\nassert     count_first_elements((1, 1, 1, 2, 1)) == 4\nassert     count_first_elements((1, 2, 3, 4, 5)) == 5\nassert     count_first_elements((1, 2, 3)) == 3\nassert     count_first_elements((1, 2, 3, 1, 2, 3)) == 4\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_first_elements([(1, 2, 3), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)]) == 6\nassert     count_first_elements([(1, 2, 3), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)]) == 12\nassert     count_first_elements([(1, 2, 3), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)]) == 0\nassert     count_first_elements([(1, 2, 3), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)]) == 0\nassert     count_first_elements([(1, 2, 3), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)]) == 6\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_first_elements((0,1,1,2,2,3)) == 2\nassert     count_first_elements((1,2,3,1,2,3,4,5,6)) == 4\nassert     count_first_elements((1,1,1,2,2,2,3,3,3,4,5,5)) == 6\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert is_num_decagonal(1) == 1\nassert is_num_decagonal(2) == 3\nassert is_num_decagonal(3) == 6\nassert is_num_decagonal(4) == 10\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_num_decagonal(1) == 1\nassert     is_num_decagonal(10) == 3628800\nassert     is_num_decagonal(20) == 2432902008176640000\nassert     is_num_decagonal(30) == 25165824000000000\nassert     is_num_decagonal(40) == 20225904000000000\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_num_decagonal(0) == 1\nassert     is_num_decagonal(1) == 10\nassert     is_num_decagonal(2) == 11\nassert     is_num_decagonal(3) == 12\nassert     is_num_decagonal(4) == 13\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_num_decagonal(1) == 1\nassert is_num_decagonal(8) == 19\nassert is_num_decagonal(12) == 37\nassert is_num_decagonal(18) == 55\nassert is_num_decagonal(37) == 105\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint('is_num_decagonal: Correct result: True\\n')\n\ndef is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = 0\n    for i in range(1,n+1):\n        num += i\n    return num\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_num_decagonal(0) == 1\nassert     is_num_decagonal(1) == 1\nassert     is_num_decagonal(2) == 2\nassert     is_num_decagonal(3) == 3\nassert     is_num_decagonal(4) == 4\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint('PASSED: test_num_decagonal')\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert sequential_search([1,2,3,4,5],1) == (True,0)\nassert sequential_search([1,2,3,4,5],0) == (False,0)\nassert sequential_search([1,2,3,4,5],6) == (False,3)\nassert sequential_search([1,2,3,4,5],7) == (False,4)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sequential_search([4, 1, 2, 5, 3], 5) == (True, 4)\nassert     sequential_search([5, 1, 2, 3], 5) == (False, -1)\nassert     sequential_search([4, 1, 2, 5, 3], 6) == (False, -1)\nassert     sequential_search([], 6) == (False, -1)\nassert     sequential_search([], 5) == (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sequential_search([1,2,3,4,5],3) == (True,3)\nassert     sequential_search([1,2,3,4,5],7) == (False,-1)\nassert     sequential_search([1,2,3,4,5],6) == (False,4)\nassert     sequential_search([1,2,3,4,5],3.5) == (False,-1)\nassert     sequential_search([1,2,3,4,5],False) == (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sequential_search([], 4) == (False, -1)\nassert     sequential_search([1,2,3,4,5], 4) == (True, 2)\nassert     sequential_search([1,2,3,4,5], 4) == (True, 2)\nassert     sequential_search([1,2,3,4,5], 6) == (False, -1)\nassert     sequential_search([1,2,3,4,5], 'a') == (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sequential_search([], 0) == (False, -1)\nassert     sequential_search([1], 0) == (False, -1)\nassert     sequential_search([1, 2, 3, 4, 5], 3) == (True, 3)\nassert     sequential_search([1, 2, 3, 4, 5], 6) == (False, -1)\nassert     sequential_search([1, 2, 3, 4, 5], 0) == (False, -1)\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     all_unique([1,2,3,4])==True, 'all_unique([1,2,3,4]) should return True'\nassert     all_unique([1,2,3,4,2,3])==False, 'all_unique([1,2,3,4,2,3]) should return False'\nassert     all_unique([1,2,3,4,5])==True, 'all_unique([1,2,3,4,5]) should return True'\nassert     all_unique([1,2,3,4,2,5])==False, 'all_unique([1,2,3,4,2,5]) should return False'\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     all_unique(['A','A','A','B','B','B','C','C','C'])==True, 'Not Passed'\nassert     all_unique(['A','A','A','A','B','B','B','C','C','C','A'])==False, 'Not Passed'\nassert     all_unique(['A','A','A','A','A','A','A'])==True, 'Not Passed'\nassert     all_unique([])==True, 'Not Passed'\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     all_unique([1,2,2,3]) == True, \"Fail the test case\"\nassert all_unique([1,2,3,4]) == False, \"Fail the test case\"\nassert all_unique([1,2,3]) == True, \"Fail the test case\"\nassert all_unique([]) == True, \"Fail the test case\"\nassert all_unique([\"apple\", \"banana\", \"carrot\"]) == True, \"Fail the test case\"\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     all_unique([1,2,3,4,5,6]) == True, \"Wrong Output\"\nassert     all_unique([1,2,3,4,5,1]) == False, \"Wrong Output\"\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     all_unique([1,1,2]) == False, \"output: True\"\nassert     all_unique([1,2,3]) == True, \"output: True\"\nassert     all_unique([\"kumar\",\"tibor\",\"lokesh\"]) == False, \"output: True\"\n\ndef find_average(list_of_numbers):\n    '''\n    Write a python function to find the average of a list of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     all_unique([1,2,3,4,5,6]) == True, \"All unique\"\nassert     all_unique([1,1,1,2,2,2,3,3,4,5,6]) == False, \"All unique\"\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert all_unique([1,2,3,4]) == True, 'Wrong'\nassert all_unique([1,2,2,3]) == True, 'Wrong'\nassert all_unique([1,1,2,2]) == False, 'Wrong'\nassert all_unique(['a','b','c','d','e','f','g','h']) == True, 'Wrong'\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     all_unique([1,2,3,4,5]) == True\nassert all_unique([1,2,3,4,5,1]) == False\nassert all_unique([1,1,2,2]) == True\nassert all_unique([1,1,1,2,2]) == False\nassert all_unique([]) == True\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     all_unique([1,2,3,4,5])== True\nassert     all_unique([1,2,3,4,1])== False\nassert     all_unique([1,2,3,4,5,2])== True\nassert     all_unique([1,2,3,4,5,1,2,2])== False\n\n'''\nQuestion: Q. Sort the elements of a given list in descending order (use Bubble Sort)\n'''\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     all_unique(['Apples','bananas','mango','grapes','Apples', 'bananas','mango','grapes']) == True, \\\n\"Test Case 1 Failed\"\nassert     all_unique(['Apples','bananas','mango','grapes','Apples', 'bananas','mango','grapes','apples']) == False, \\\n\"Test Case 2 Failed\"\nassert     all_unique([]) == True, \\\n\"Test Case 3 Failed\"\nassert     all_unique([1,2,3,4,5]) == True, \\\n\"Test Case 4 Failed\"\nassert     all_unique(['a','b','c','d','a']) == True, \\\n\"Test Case 5 Failed\"\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sub_list([],[]) == []\nassert     sub_list([],[1,2,3]) == []\nassert     sub_list([1,2,3],[]) == []\nassert     sub_list([1,2,3],[]) == []\nassert     sub_list([1,2,3],[1]) == [0]\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sub_list([1,2,3,4],[-1,2,3,4]) == -1\nassert     sub_list([1,-2,3,4],[-1,2,3,4]) == 1\nassert     sub_list([1,1,1,1],[1,1,1,1]) == 0\n\n\n\ndef dot_product(vector1, vector2):\n    '''\n    Write a function that takes in two vectors of equal length, \n    and returns their dot product.\n    '''\n    pass\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sub_list([1,2,3], [-2,-1,3]) == [1,2,2], \"Wrong\"\nassert     sub_list([-1,2,-3,4,5], [-2,-1,3,2,4]) == [1,1,1,1,1], \"Wrong\"\nprint('You may pass this test')\n\n'''\n\n1. Write a function to add elements from one list to another list.\n    In the first list, the elements are placed in the end of the list. In the second, the elements are \n    placed in the front.\n'''\ndef add_list(nums1,nums2):\n    '''\n    Write a function to add elements from one list to another list.\n    In the first list, the elements are placed in the end of the list. In the second, the elements are \n    placed in the front.\n    '''\n    pass\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sub_list([1,2],[4,3])         ==     [-3,-4], \n          sub_list([4,3],[1,2])         ==     [-3,-4], \n          sub_list([1,2],[3,4])         ==     [-4,-3], \n          sub_list([0,0,0],[0,0,0])     ==     [0,0,0]) \n\nassert     sub_list([1,2,3],[4,5,6])     ==     [-5,-6,-7], \n          sub_list([2,5,6],[1,4,3])     ==     [-6,-7,-8], \n          sub_list([1,2,3,4,5],[6,5,4])     ==     [-8,-7,-6], \n          sub_list([2,3,4,5,6,7],[8,9,10])     ==     [-10,-9,-8]) \n\nassert     sub_list([1,2,3,4,5,6,7],[10,11,12,13])     ==     [-13,-12,-11], \n          sub_list([2,5,6,7],[1,4,3])     ==     [-6,-7,-8], \n          sub_list([1,2,3,4,5,6,7],[8,9,10])     ==     [-10,-9,-8]) \n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sub_list([1,2,3],[4,5,6]) == [-3,-2,-1]\nassert     sub_list([1,2,3],[4,5,6,7]) == [-3,-2,-1,-2]\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef add_list(a,b):\n    '''\n    Write a function to add two lists element-wise.\n    '''\n    pass\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sub_list([1, 2, 3], [4, 5, 6]) == [-4, -5, -6]\nassert     sub_list([0, 1, 2, 3], [-4, -5, -6, 7]) == [4, 5, 6, 7]\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # take the input from the command line\n    n = int(input())\n\n    # call the validate function\n    validate(n)"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert not validate(111111111111)\nassert not validate(100100100100)\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert validate(234) == False\nassert validate(222) == False\nassert validate(333) == True\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == '__main__': \n    n = int(input())\n    print(validate(n))"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     validate(19) == False, \"19 is incorrect\"\nassert    validate(9) == False, \"9 is incorrect\"\nassert    validate(86) == False, \"86 is incorrect\"\nassert    validate(111) == True, \"111 is correct\"\nassert    validate(300) == True, \"300 is correct\"\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert validate(123)==True, \"error\"\nassert validate(12)==False, \"error\"\nassert validate(11)==True, \"error\"\nassert validate(10)==True, \"error\"\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(validate(9), False)\nprint(validate(21), True)\nprint(validate(101010101), False)\nprint(validate(84321), True)\nprint(validate(210011), True)\nprint(validate(999999999), False)\nprint(validate(2345678), False)\nprint(validate(434321), True)\nprint(validate(324874), True)\nprint(validate(1234), True)\nprint(validate(1234), False)\nprint(validate(3342), False)\nprint(validate(3342), True)\nprint(validate(3342), False)\nprint(validate(434321), True)\nprint(validate(324874), True)\nprint(validate(4321), False)\nprint(validate(324874), False)\nprint(validate(9), True)\nprint(validate(84321), False)\nprint(validate(101010101), False)\nprint(validate(0), False)\nprint(validate(88888888), False)\nprint(validate(1234567890), True)\nprint(validate(932123123), False)\nprint(validate(932123123), False)\nprint(validate(932123123), False)\nprint(validate(9998999), False)\nprint(validate(9998999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(validate(999999999), False)\nprint(vali"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert validate(12354) == False\nassert validate(12345) == False\nassert validate(1234) == False\nassert validate(12) == False\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     validate(112233) == True\nassert     validate(332211) == True\nassert     validate(111) == False\nassert     validate(11) == False\nassert     validate(1111) == False\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint (validate(123)) \nprint (validate(2147483647))\n\ndef validate2(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    pass\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether any item in the list is equal to the given element.\n    '''\n    pass\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nlist = [1,2,3,4,5,6]\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef check_elements(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_element([1,2,3,4],1) == True\nassert     check_element([1,2,3,4],2) == False\nassert     check_element([1,2,3,4],3) == True\nassert     check_element([1,2,3,4],4) == True\nassert     check_element([1,2,3,4],5) == False\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_element([1,2,3,4,5,6],4) == True, \"Example of correct test\"\nassert     check_element([1,2,3,4,5,6],1) == False, \"Example of correct test\"\nassert     check_element([\"cat\",\"dog\",\"fish\",\"mouse\",\"rat\",\"snake\"],'r') == True, \"Example of correct test\"\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef check_integrity(list):\n    '''\n    Write a function that takes in a list of integers and returns True if all numbers in the list are in increasing order and False otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_element([1,1,1,1],1) == True\nassert     check_element([1,2,1,1],1) == False\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_element([1,2,3,4,5],2) == True\nassert     check_element([1,2,3,4,5],1) == False\n\ndef sum_lists(list1,list2):\n    '''\n    Write a function that takes in two lists and returns a list that is their sum.\n    '''\n    pass\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_element([1,2,3,4,5,6,7,8,9],9) == False, \"Check the correctness of the function\"\nassert     check_element([1,2,3,4,5,6,7,8,9],8) == False, \"Check the correctness of the function\"\nassert     check_element([1,2,3,4,5,6,7,8,9],7) == True, \"Check the correctness of the function\"\nassert     check_element([1,2,3,4,5,6,7,8,9],9) == True, \"Check the correctness of the function\"\nassert     check_element([1,2,3,4,5,6,7,8,9],0) == False, \"Check the correctness of the function\"\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_match_two_three('bbbbb') == True\nassert     text_match_two_three('bb') == False\nassert     text_match_two_three('a') == True\nassert     text_match_two_three('b') == False\nassert     text_match_two_three('bb') == False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_match_two_three('babab') == True, \"should return True\"\nassert     text_match_two_three('a') == True, \"should return True\"\nassert     text_match_two_three('aabb') == False, \"should return False\"\nassert     text_match_two_three('aabab') == False, \"should return False\"\nassert     text_match_two_three('abab') == True, \"should return True\"\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_match_two_three('abababab') == True\nassert     text_match_two_three('ababab') == False\nassert     text_match_two_three('bb') == False\nassert     text_match_two_three('bbbb') == False\nassert     text_match_two_three('bbb') == False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert text_match_two_three(\"abababab\") == True\nassert text_match_two_three(\"bbbbbbbbbb\") == True\nassert text_match_two_three(\"bbbbbbbbbbbb\") == False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_two_three('abccba') == True\nassert     text_match_two_three('abc') == False\nassert     text_match_two_three('aabcb') == False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_match_two_three('aabaaabbb') == True\nassert text_match_two_three('aabababaa') == True\nassert     text_match_two_three('abcabc') == True\nassert     text_match_two_three('abcabcabc') == True\nassert     text_match_two_three('abcabcabcabc') == True\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_match_two_three('ababab')\nassert     text_match_two_three('bbbab')\nassert not text_match_two_three('abcba')\nassert not text_match_two_three('babbab')\nassert     text_match_two_three('ababab')\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_two_three('aabcb') == True\nassert     text_match_two_three('aabc') == True\nassert     text_match_two_three('aaab') == True\nassert     text_match_two_three('abbbb') == False\nassert     text_match_two_three('aabb') == False\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_sub_array_sum_repeated([2, 3, -2, 4], 2, 3) == 6\nassert     max_sub_array_sum_repeated([-2, 4, -1, 8, -1], 4, 1) == 0\nassert     max_sub_array_sum_repeated([4, -2, 3, 4], 1, 2) == 3\nassert     max_sub_array_sum_repeated([5, 5, 5, 5, 5, 5], 5, 1) == 5\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_sub_array_sum_repeated([1,2,3], 3, 2) == 6\nassert     max_sub_array_sum_repeated([1,2,3], 3, 3) == 9\nassert     max_sub_array_sum_repeated([1,2,3], 3, 1) == 6\nassert     max_sub_array_sum_repeated([1,2,3], 3, 2) == 9\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_sub_array_sum_repeated([1,3,4], 3, 2) == 9, \"Wrong Answer\"\nassert max_sub_array_sum_repeated([2,3,5,1,3,5,1,2], 4, 2) == 10, \"Wrong Answer\"\nassert max_sub_array_sum_repeated([5,1,3,5,1,1,2,4,1], 5, 2) == 12, \"Wrong Answer\"\n\ndef max_sub_array_sum_repeated_index(a, n, k):\n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if len(a) == 0:\n        return -1\n    max_sum = a[0]\n    index = 0\n    for i in range(1, n):\n        if a[i] > max_sum:\n            max_sum = a[i]\n            index = i\n    #print (index, max_sum)\n    sum_array = []\n    for i in range(k):\n        sum_array.append(a[index])\n        index += 1\n    sum_array_index = 0\n    sum_array_index_max_sum = sum(sum_array)\n    while index < n:\n        for i in range(k):\n            sum_array.append(a[index])\n            index += 1\n        if sum(sum_array) > sum_array_index_max_sum:\n            sum_array_index_max_sum = sum(sum_array)\n            sum_array_index = index - (k-1)\n        sum_array = []\n    if sum_array_index == 0:\n        return -1\n    return sum_array_index\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    max_sub_array_sum_repeated([1,4,8,13,20], 4, 2) == 60\nassert max_sub_array_sum_repeated([2,3,4,6,7], 2, 3) == 20\nassert max_sub_array_sum_repeated([2,3,4,6,7], 2, 4) == 60\nassert max_sub_array_sum_repeated([2,3,4,6,7], 2, 5) == 70\nassert max_sub_array_sum_repeated([2,3,4,6,7], 2, 6) == 60\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_sub_array_sum_repeated([2, 5, 1, 3, 4, 1], 5, 2) == 17, 'incorrect'\nassert     max_sub_array_sum_repeated([2, 5, 1, 3, 4, 1], 5, 3) == 17, 'incorrect'\nassert     max_sub_array_sum_repeated([2, 5, 1, 3, 4, 1], 5, 4) == 17, 'incorrect'\nassert     max_sub_array_sum_repeated([2, 5, 1, 3, 4, 1], 5, 5) == 17, 'incorrect'\nassert     max_sub_array_sum_repeated([2, 5, 1, 3, 4, 1], 5, 6) == 17, 'incorrect'\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_sub_array_sum_repeated([1,2,3], 3, 2) == 9\nassert     max_sub_array_sum_repeated([2,-2,3,4], 2, 3) == 10\nassert     max_sub_array_sum_repeated([3,-2,3,4], 3, 4) == 12\nassert     max_sub_array_sum_repeated([-1,2,3,-4,5,6,7,8,9,10], 5, 3) == 80\nassert     max_sub_array_sum_repeated([-1,2,3,-4,5,6,7,8,9,10], 5, 4) == 95\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_sub_array_sum_repeated(a=[1, 2, 3, 4, 5], k=2, n=4) == 15, \\\n    'max_sub_array_sum_repeated is not working as expected'\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_sub_array_sum_repeated([2, 4, 8, 5, 10, 1], 3, 2) == 24, \n        print('Test case 1: %s' % (max_sub_array_sum_repeated([2, 4, 8, 5, 10, 1], 3, 2)))\nassert     max_sub_array_sum_repeated([2, 4, 8, 5, 10, 1], 3, 3) == 30, \n        print('Test case 1: %s' % (max_sub_array_sum_repeated([2, 4, 8, 5, 10, 1], 3, 3)))\nassert     max_sub_array_sum_repeated([2, 4, 8, 5, 10, 1], 3, 4) == 32, \n        print('Test case 1: %s' % (max_sub_array_sum_repeated([2, 4, 8, 5, 10, 1], 3, 4)))\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     square_Sum(5) == 25\nassert     square_Sum(2) == 5\nassert     square_Sum(3) == 12\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nsquare_Sum(0) == 0\nassert square_Sum(1) == 1\nassert square_Sum(2) == 4\nassert square_Sum(3) == 25\nassert square_Sum(4) == 35\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == '__main__':\n    print('First function:')\n    # 1. output\n    print(square_Sum(10))\n\n    print('Second function:')\n    # 2. output\n    print(square_Sum(0))"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     square_Sum(1)    == 1, 'first'\nassert     square_Sum(2)    == 1,'second'\nassert     square_Sum(3)    == 9, 'third'\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef sumOfSquares(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     square_Sum(0) == 0, \"Input should be 0\"\nassert     square_Sum(1) == 1, \"Input should be 1\"\nassert     square_Sum(2) == 4, \"Input should be 4\"\nassert     square_Sum(3) == 14, \"Input should be 14\"\nassert     square_Sum(4) == 20, \"Input should be 20\"\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nsquare_Sum(1) == 1\nsquare_Sum(2) == 4\nsquare_Sum(3) == 8\nsquare_Sum(4) == 15"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    \n    list1 = [[10, 20], [30, 40], [50, 60]]\n    print(\"\\nmax_length: \", max_length(list1))\n    \n    list2 = [[10, 20, 30], [40, 50, 60], [70, 80, 90]]\n    print(\"\\nmax_length: \", max_length(list2)"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_length([[1,2,3],[3,4,5]]) == 3, \"wrong answer\"\nassert     max_length([[1,2,3],[3,4,5],[5,6,7]]) == 3, \"wrong answer\"\nassert     max_length([[1,2,3],[3,4,5],[4,5,6],[6,7,8]]) == 4, \"wrong answer\"\nassert     max_length([[1,2,3,4],[3,4,5,6],[5,6,7,8],[7,8,9,10]]) == 4, \"wrong answer\"\nassert     max_length([[1,2,3,4],[3,4,5,6],[5,6,7,8],[7,8,9]]) == 4, \"wrong answer\"\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_length([[1, 2], \n                    [4, 5], \n                    [5, 5, 5, 6], \n                    [5, 6], \n                    [6, 6], \n                    [6]]) == [5, 6]\n\ndef max_length_tuple(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_length([[1,2,3],[2],[2,3,4],[3,4]]) == [[2,3,4],[3,4]], 'Wrong answer for the following input: [[1,2,3],[2],[2,3,4],[3,4]]'\nassert     max_length([[1,2,3],[2,4,6],[2,3,4],[3,4]]) == [[2,3,4]], 'Wrong answer for the following input: [[1,2,3],[2,4,6],[2,3,4],[3,4]]'\nassert     max_length([[1,2,3],[2,4,6],[2,3,4],[3,4,7,8]]) == [[3,4,7,8]], 'Wrong answer for the following input: [[1,2,3],[2,4,6],[2,3,4],[3,4,7,8]]'\nassert     max_length([[1,2,3,4,5],[2,4,6,8,9],[3,5,7,9,10],[4,6,8,10],[5,7,9,11,12]]) == [[5,7,9,11,12]], 'Wrong answer for the following input: [[1,2,3,4,5],[2,4,6,8,9],[3,5,7,9,10],[4,6,8,10],[5,7,9,11,12]]'\nassert     max_length([[1,2,3,4,5,6],[2,4,6,8,9,10],[3,5,7,9,10,11],[4,6,8,10,11,12]]) == [[4,6,8,10,11,12]], 'Wrong answer for the following input: [[1,2,3,4,5,6],[2,4,6,8,9,10],[3,5,7,9,10,11],[4,6,8,10,11,12]]'\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert \nassert max_length([[1, 2, 3], [4, 5, 6]]) == 6\nassert max_length([[1], [2], [3]]) == 3\nassert max_length([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 9\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_length([[1,2,3], [4,5,6], [7,8,9]]) == 3, \"Wrong value\"\nassert     max_length([[1,2,3], [4,5,6,7], [8,9,10,11,12]]) == 4, \"Wrong value\"\nassert     max_length([[1,2,3], [4,5,6,7], [8,9,10,11,12],\n[13,14,15,16,17]]) == 4, \"Wrong value\"\nprint(\"You passed all the tests!\""
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_length([[1, 2, 3], [4, 5, 6]]) == [6, 6]\nassert     max_length([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [9, 9]\nassert     max_length([[1, 2, 3], [4], [5, 6]]) == [6, 6]\nassert     max_length([[1, 2, 3, 4], [5, 6, 7], [8, 9]]) == [9, 9]\nassert     max_length([[1, 2], [3, 4], [5, 6], [7, 8]]) == [8, 8]\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_length([[2,3,4],[[1,2,3],1,2]]) == [4]\nassert     max_length([[2,3,4],[2,4]]) == [4]\nassert     max_length([[[2,3,4]]]) == [4]\nassert     max_length([[2,3]]) == [3]\nassert     max_length([[2]]) == [2]\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_no_of_ways(n=4, k=3) == 4\nassert     count_no_of_ways(n=5, k=3) == 5\nassert     count_no_of_ways(n=2, k=3) == 3\nassert     count_no_of_ways(n=7, k=5) == 5\n\ndef paint_house(x,y,n,k):\n    '''\n    Write a function to paint a house in a window with n posts on it, with x,y as the starting post and k the number of colors used for the window.\n    '''\n    pass\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(\"Testing count_no_of_ways...\")"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_no_of_ways(4, 3) == 6 \nassert     count_no_of_ways(5, 2) == 7\nassert     count_no_of_ways(10, 4) == 82\nassert     count_no_of_ways(10, 5) == 126\nassert     count_no_of_ways(5, 1) == 5\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ncount_no_of_ways(2,2) == 1\ncount_no_of_ways(3,2) == 2\ncount_no_of_ways(4,2) == 3\ncount_no_of_ways(4,3) == 4\ncount_no_of_ways(6,3) == 5\n\ndef count_no_of_ways_rec(n, k, cnt=1):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    pass\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nfind(2,3) == 1\nfind(-2,-3) == -1\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nfind(10,6) == 2\nfind(10,10) == 0\n\ndef find(n,m):\n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (n//m)\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert find(13,13) == 1\nassert find(11,17) == 2\nassert find(-10,10) == -1\nassert find(1,1) == 1\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find(12,2) == 4, \"Error1.\"\nassert     find(16,4) == 4, \"Error2.\"\nassert     find(9,3) == 3, \"Error3.\"\nassert     find(10,3) == 3, \"Error4.\"\nassert     find(9,5) == 3, \"Error5.\"\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find(1,2) == 0\nassert    find(4,5) == 1\nassert    find(20,30) == 2\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find(1,2) == 0\nassert    find(3,3) == 1\nassert    find(2,2) == 0\nassert    find(1,3) == 1\nassert    find(0,0) == 0\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nfind(4,5)==2\nfind(4.5,5.6)==1\nfind(4.5,6)==2\n\ndef find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    pass\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find(5,3) == 2\nassert     find(-5,3) == 2\nassert     find(0,3) == 0\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     otherside_rightangle(5,2) == 1.414\nassert     otherside_rightangle(3,4) == 2.0\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nassert otherside_rightangle(4,5)==5\nassert otherside_rightangle(5,4)==5\nassert otherside_rightangle(2,4)==4\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \notherside_rightangle(5,3) == 2.0, \"incorrect\"\nassert \notherside_rightangle(3,4) == 1.0, \"incorrect\"\nassert \notherside_rightangle(3,1) == \"incorrect\", \"incorrect\"\nassert \notherside_rightangle(3,3) == 1.0, \"incorrect\"\nassert \notherside_rightangle(1,1) == \"incorrect\", \"incorrect\"\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     otherside_rightangle(1, 1) == 1\nassert     otherside_rightangle(5, 7) == 5\n\ndef otherside_triangle(w,h):\n    '''\n    Write a function to find the third side of a triangle.\n    '''\n    pass\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     otherside_rightangle(4,5) == 5, 'Wrong answer'\nassert     otherside_rightangle(5,4) == 5, 'Wrong answer'\nassert     otherside_rightangle(6,4) == 4, 'Wrong answer'\nassert     otherside_rightangle(5,6) == 4, 'Wrong answer'\n\ndef solution_rightangle(w,h):\n    '''\n    Write a function to find the hypotenuse of a right angled triangle.\n    '''\n    return w*h / 2\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     otherside_rightangle(4,5) == 5\nassert     otherside_rightangle(6,7) == 6\nassert     otherside_rightangle(7,6) == 6\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     otherside_rightangle(7,3) == 5, 'ERROR!'\nassert     otherside_rightangle(7,4) == 7, 'ERROR!'\nassert     otherside_rightangle(8,4) == 5, 'ERROR!'\nassert     otherside_rightangle(7,5) == 3, 'ERROR!'\nassert     otherside_rightangle(5,5) == 5, 'ERROR!'\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     otherside_rightangle(1,1) == math.sqrt(3)\nassert     otherside_rightangle(2,3) == 1\nassert     otherside_rightangle(3,2) == 1\nassert     otherside_rightangle(4,3) == 1.5\nassert     otherside_rightangle(3,4) == 1.75\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint('\\n')\nprint('CHECK: The function should return a positive number.')\n\nprint('PASSED: With right-angled triangle side lengths 7 and 8, it should return: 11.')\nprint('\\n')\nprint('TESTING...')\nprint('PASSED: With right-angled triangle side lengths 7 and 8, it should return: 11.')\nprint('PASSED.')\nprint('\\n')\nprint('------------------------------------------')\nprint('2) For a right angled triangle, this program can tell the equation of the third side.')\nprint('------------------------------------------')\ndef hypotenuse(a,b):\n    '''\n    Write a function that takes two numbers, a and b, as the length of the hypotenuse.\n    It should print the third side length.\n    '''\n    pass\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_val([1, 2, 3, 4]) == 4, 'Function does not work correctly'\nassert     max_val([1, 2, 5, 4, 2, 4, 4, 4]) == 5, 'Function does not work correctly'\nassert     max_val([1, '2', 5, 4, 2, 4, 4, 4]) == 5, 'Function does not work correctly'\nassert     max_val([1, '2', 5, '4', 2, 4, 4, 4]) == 5, 'Function does not work correctly'\nassert     max_val([1, 2, 5, '4', 2, 4, 4, 4]) == 5, 'Function does not work correctly'\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_val([2,4,6,8,10]) == 10\nassert     max_val([2,4,6,8,10,12]) == 12\nassert     max_val([2,4,6,8,10,12,14]) == 14\nassert     max_val([2.3, 4.5, 3.2, 1.3]) == 3.2\nassert     max_val([2.3, 4.5, 3.2, 1.3, 12.3, 14.5, 16.2, 17.5, 18.5]) == 18.5\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_val([1, 2, 3, 4]) == 4, \"The max_val of a list should be 4\"\nassert     max_val([-1, 2, -3, 4]) == 4, \"The max_val of a list should be 4\"\nassert     max_val([-1, -2, -3, -4]) == -1, \"The max_val of a list should be -1\"\nassert     max_val([-1, -2, -3, -4, -5]) == -1, \"The max_val of a list should be -1\"\nassert     max_val([1.1, 2, 3, 4]) == 4, \"The max_val of a list should be 4\"\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_val([1, 2, 3, 4, 5, 6, 7, 8]) == 8\nassert     max_val([1, \"Hello\", 3, 4, 5, 6, 7, 8]) == 8\nassert     max_val([1, 2, 3, 'Hello', 4, 5, 6, 7, 8]) == 8\nassert     max_val([1, 2, 3, 4, 5, 'Hello', 6, 7, 8]) == 8\nassert     max_val([1, 2, 3, 4, 5, 6, 7, 'Hello', 8]) == 8\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_val([1, 1, 1, 1, 1, 1, 1]) == 1\nassert     max_val([1, 1, 1, 1, 1, 1, 1, 2]) == 1\nassert     max_val([1, 1, 1, 1, 1, 1, 1, 1]) == 1\nassert     max_val([1, 1, 1, 1, 1, 1, 1, 2]) == 1\nassert     max_val([1, 1, 1, 1, 1, 1, 1, 2, 2]) == 2\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_val([2,3,4,5]) == 5\nassert     max_val([-1,-2,-3,-4]) == -1\nassert     max_val([1,2,3,4,5]) == 5\nassert     max_val([1,-2,-3,-4]) == -1\nassert     max_val([-1,-2,-3,-4,5]) == 5\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef sum_div_without_division(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    pass\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert sum_div(0) == 0\nassert sum_div(1) == 1\nassert sum_div(2) == 1\nassert sum_div(4) == 3\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_div(1) == 1, \"The sum of divisors of 1 is 1\"\nassert     sum_div(2) == 2, \"The sum of divisors of 2 is 2\"\nassert     sum_div(6) == 3, \"The sum of divisors of 6 is 3\"\nassert     sum_div(100) == 31, \"The sum of divisors of 100 is 31\"\nassert     sum_div(1000) == 406, \"The sum of divisors of 1000 is 406\"\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert sum_div(8) == 5\nassert sum_div(9) == 9\nassert sum_div(10) == 10\nassert sum_div(12) == 11\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(sum_div(12))\nprint(sum_div(15))\nprint(sum_div(19))\n\ndef sum_div_v2(number):\n    '''\n    Write a function that takes a number as an argument and returns the sum of all of\n    its divisors.\n    '''\n    pass\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_div(0) == 0, \"sum of divisors should be zero\"\nassert     sum_div(1) == 1, \"sum of divisors should be 1\"\nassert     sum_div(2) == 2, \"sum of divisors should be 2\"\nassert     sum_div(3) == 3, \"sum of divisors should be 3\"\nassert     sum_div(4) == 3, \"sum of divisors should be 3\"\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_div(0) == 0, 'The result should be 0'\nassert     sum_div(3) == 1, 'The result should be 1'\nassert     sum_div(5) == 2, 'The result should be 2'\nassert     sum_div(10) == 3, 'The result should be 3'\nassert     sum_div(17) == 6, 'The result should be 6'\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_Inv_Count([10,1,2]) == 1\nassert     get_Inv_Count([1,2,5]) == 1\nassert     get_Inv_Count([10,1,2,5,7]) == 1\nassert     get_Inv_Count([1,2,5,7]) == 2\nassert     get_Inv_Count([1,1,2,3,3,2]) == 3\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_Inv_Count([2,4,1,3]) == 1, \"case 1\"\nassert     get_Inv_Count([2,4,1,3,3]) == 3, \"case 2\"\nassert     get_Inv_Count([2,4,1,3,2]) == 5, \"case 3\"\nassert     get_Inv_Count([1,2,3]) == 0, \"case 4\"\nassert     get_Inv_Count([]) == 0, \"case 5\"\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_Inv_Count([]) == 0, \"return 0\"\nassert     get_Inv_Count([1, 2, 3]) == 0, \"return 0\"\nassert     get_Inv_Count([2, 1, 3]) == 1, \"return 1\"\nassert     get_Inv_Count([3, 2, 1]) == 2, \"return 2\"\nassert     get_Inv_Count([3, 2, 1, 4]) == 3, \"return 3\"\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nget_Inv_Count([2,3,1,0]) == 3\nget_Inv_Count([4,5,6,1,2,3]) == 3\nget_Inv_Count([1,2,3,4,5,6]) == 0\nget_Inv_Count([3,2,1,0]) == 3\nget_Inv_Count([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,89"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_Inv_Count([3, 4, 2, 1]) == 1, \"get_Inv_Count\"\nassert     get_Inv_Count([3, 4, 2, 1,1]) == 2, \"get_Inv_Count\"\nassert     get_Inv_Count([3, 4, 2, 1,1,2]) == 3, \"get_Inv_Count\"\nassert     get_Inv_Count([3,4,2,1,1,2,3]) == 4, \"get_Inv_Count\"\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_Inv_Count([1,3,2]) == 0, \"Not an empty array!\"\nassert get_Inv_Count([1,1,1]) == 1, \"Trivial cases\"\nassert get_Inv_Count([1,2,3]) == 1, \"One inversion\"\nassert get_Inv_Count([3,2,1]) == 1, \"One inversion\"\nassert get_Inv_Count([2,2,2]) == 0, \"No inversion\"\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(\"Pass\" if \n    get_Inv_Count([1,2,3]) == 1\n    else \"Fail\")\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_Inv_Count([2, 4, 5, 1, 3]) == 0, \"First Case\"\nassert     get_Inv_Count([5, 4, 3, 2, 1]) == 2, \"Second Case\"\nassert     get_Inv_Count([5, 4, 3, 2, 1, 1]) == 5, \"Third Case\"\nassert     get_Inv_Count([5, 4, 3, 2, 1, 1, 1]) == 5, \"Fourth Case\"\nassert     get_Inv_Count([2, 4, 5, 1, 3, 1]) == 6, \"Fifth Case\"\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     flatten_list([[1, 2],\n                    [3, 4, 5],\n                    [6,7,8,9],\n                    [10, 11]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nassert     flatten_list([]) == []\nassert     flatten_list([[],\n                    []]) == []\nassert     flatten_list([[1,2,3],\n                    [4,5,6],\n                    [7,8,9],\n                    [10,11,12,13]]) == [1,2,3,4,5,6,7,8,9,10,11,12,13]\nassert     flatten_list([[1,2],\n                    [3,4],\n                    [5,6,7],\n                    [8,9,10,11],\n                    [12,13,14,15]]) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nflatten_list([[0], [1, 2], [3], [[4], 5], 6, 7, [8]]) == \n[[0], [1, 2], [3, 4], 5, 6, 7, 8]\n\nassert flatten_list([[0]]) == [[0]]\nassert flatten_list([[0], [1, 2], [[3], 4]]) == [[0], [1, 2], 3, 4]\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert flatten_list([[1],2,[3]]) == [1, 2, 3]\nassert flatten_list([1,2,[3,[4]]]) == [1, 2, 3, 4]\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nimport unittest\n\nclass Test(unittest.TestCase):\n    '''Check if the flatten_list function is working'''\n\n    def test_flatten_list_1(self):\n        '''List: [1, 2, 3, 4]'''\n        actual = flatten_list([[1, 2, 3, 4], [1, 2, 3]])\n        expected = [1, 2, 3, 4, 1, 2, 3]\n        self.assertEqual(actual, expected)\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     flatten_list([[1,2],[[3],4]]) == [[1,2],3,4]\nassert     flatten_list([1,2,[3,4]]) == [1,2,3,4]\nassert     flatten_list([[[[1,2]]]]) == [[1,2]]\nassert     flatten_list([[]]) == []\n\ndef do_nothing(x):\n    pass\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert flatten_list([[1], 2, [[3], 4], [[[5]]], 6]) == [1, 2, 3, 4, 5, 6]\nassert flatten_list([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n'''\nInput:\nlist1 = [1, 2, 3, 4, 5]\nOutput:\n[1, 2, 3, 4, 5]\n'''\n\n'''\nhttps://leetcode.com/problems/flatten-a-multilevel-doubly-linked-list/\n'''\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nflatten_list([1, 2, 3, [1, 2, 3], 4, [5, 6, 7], 8, [9, 10, 11]]) == [1, 2, 3, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nassert \nflatten_list([1, 2, 3, 4]) == [1, 2, 3, 4]\nassert\nflatten_list([[1, 2], 3, 4, [5, 6, 7]]) == [1, 2, 3, 4, 5, 6, 7]\nassert \nflatten_list([[1, 2], 3, 4, [5, 6, 7]]) == [1, 2, 3, 4, 5, 6, 7]\nassert \nflatten_list([[[1, 2, 3, 4], 5], 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     flatten_list([1,[2,3,[4,[5,6]]]]) == [1,2,3,4,5,6]\nassert     flatten_list([1,[2,3],4,[5,6]]) == [1,2,3,4,5,6]\nassert     flatten_list([1,2,3,4,5,6]) == [1,2,3,4,5,6]\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert \n\ndef mean_aggregate(stdata):\n    '''\n    Write a function to calculate the mean aggregate from the list of tuples.\n    '''\n    pass\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n'''\nAnother approach\n'''\n\ndef max_aggregate_dp(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    pass\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_aggregate([(1,2,4,5,8),(2,3,5),(4,5),(4,5),(3,5)]) == 5\nassert     max_aggregate([(1,2,4,5,8),(2,3,5),(4,5),(3,5),(3,5)]) == 5\nassert     max_aggregate([(1,2,4,5,8),(2,3,5),(4,5),(3,5),(3,5)]) == 5\nassert     max_aggregate([(1,2,4,5,8),(2,3,5),(4,5),(3,5),(3,5)]) == 5\nassert     max_aggregate([(1,2,4,5,8),(2,3,5),(4,5),(3,5),(3,5)]) == 5\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    max_aggregate([(10, 20, 30), (20, 40, 50)]) == 40\n    max_aggregate([(10, 20, 30), (20, 30, 50)]) == 30\n    max_aggregate([(10, 20, 30), (20, 30, 40)]) == 30\n    max_aggregate([(10, 20, 30), (20, 20, 40)]) == 30\n    max_aggregate([(10, 20, 30), (10, 30, 40)]) == 30\n    max_aggregate([(10, 20, 30), (10, 20, 30)]) == 30\n    max_aggregate([(10, 20, 30, 40), (20, 30, 40, 50)]) == 40\n    max_aggregate([(10, 20, 30, 40), (20, 30, 40, 50), (20, 40, 50, 60)]) == 50\n    max_aggregate([(10, 20, 30, 40), (20, 30, 40, 50), (20, 40, 50, 60), (30, 40, 50, 60)]) == 60\n    max_aggregate([(10, 20, 30, 40), (20, 30, 40, 50), (20, 40, 50, 60), (30, 40, 50, 60), (10, 20, 30, 40, 50, 60)]) == 60\n    max_aggregate([(10, 20, 30), (20, 30, 40, 50), (20, 30, 40, 50)]) == 50\n    max_aggregate([(10, 20, 30), (20, 30, 40, 50), (20, 30, 40, 50), (20, 30, 40, 50), (20, 30, 40, 50)]) == 50\n\n'''\nThere is a list of integers. You should print the first integer in the list.\n\nInput\nList consists of only integers.\n\nOutput\nPrint the first integer.\n\nExample\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n'''\nWhen the testcase is printed, we could make sure the max_aggregate is correct. \nWhen the testcase is run, we could make sure the max_aggregate is the result we expect.\n'''\nassert max_aggregate([(1,2,3),(1,2,3),(4,5,6)]) == 6\nassert max_aggregate([(2,1,2),(3,1,2),(4,1,2)]) == 3\nassert max_aggregate([(1,1,1),(1,1,1),(1,1,1)]) == 1\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_aggregate([(\"hello\", \"world\"), (\"hello\", \"world\"), (\"hello\", \"world\"), (\"hello\", \"world\")]) == \"hello\"\nassert max_aggregate([(\"hello\", \"world\", \"1\"), (\"hello\", \"world\", \"2\"), (\"hello\", \"world\", \"3\"), (\"hello\", \"world\", \"1\")]) == \"hello\"\nassert max_aggregate([(\"hello\", \"world\", \"1\", \"2\"), (\"hello\", \"world\", \"2\", \"3\"), (\"hello\", \"world\", \"3\", \"1\"), (\"hello\", \"world\", \"3\", \"2\")]) == \"hello\"\nassert max_aggregate([(\"hello\", \"world\", \"1\", \"2\", \"3\"), (\"hello\", \"world\", \"2\", \"3\", \"1\"), (\"hello\", \"world\", \"3\", \"1\", \"2\"), (\"hello\", \"world\", \"3\", \"2\", \"1\")]) == \"hello\"\nassert max_aggregate([(\"hello\", \"world\", \"1\", \"2\", \"3\"), (\"hello\", \"world\", \"2\", \"3\", \"1\"), (\"hello\", \"world\", \"3\", \"1\", \"2\"), (\"hello\", \"world\", \"3\", \"2\", \"1\")]) == \"hello\"\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    max_aggregate([(100, 200, 0.1), (110, 150, 0.1), (120, 100, 0.2), (210, 150, 0.3), (130, 140, 0.4)]) == 0.4\n    max_aggregate([(100, 200, 0.2), (110, 150, 0.1), (120, 100, 0.2), (210, 150, 0.3), (130, 140, 0.4)]) == 0.3\n    max_aggregate([(100, 200, 0.2), (110, 150, 0.1), (120, 100, 0.2), (210, 150, 0.3), (130, 140, 0.4), (140, 160, 0.5)]) == 0.4\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_aggregate([(1,1,2), (3,3,4)]) == 2\nassert     max_aggregate([(3,3), (2,2,3,3)]) == 3\nassert     max_aggregate([(3,3,4,5), (3,4)]) == 5\nassert     max_aggregate([(3,3,4), (2,2,3), (3,3)]) == 3\nassert     max_aggregate([(3,3,4), (2,2,3), (3,3,4,5), (2,2,3), (3,3,4)]) == 4\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_aggregate([('a', 2), ('b', 4), ('c', 1)]) == 'c'\nassert     max_aggregate([('a', 2), ('b', 4), ('c', 1), ('a', 10)]) == 'a'\nassert     max_aggregate([('a', 2), ('b', 4), ('c', 1), ('a', 10)]) == 'a'\n\ndef max_aggregate_dynamic(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    pass\n\ndef max_aggregate_dynamic_testing():\n    '''\n    You should not need to modify this function, but if you are unable to test the \n    function, you can try to modify it to test.\n    '''\n    "
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(count_binary_seq(0)) # 0 \nprint(count_binary_seq(1)) # 0 \nprint(count_binary_seq(2)) # 1 \nprint(count_binary_seq(3)) # 0 \nprint(count_binary_seq(4)) # 2 \nprint(count_binary_seq(5)) # 0 \nprint(count_binary_seq(6)) # 2 \nprint(count_binary_seq(7)) # 0 \nprint(count_binary_seq(8)) # 3 \nprint(count_binary_seq(9)) # 1 \nprint(count_binary_seq(10)) # 2 \nprint(count_binary_seq(11)) # 1 \nprint(count_binary_seq(12)) # 3 \nprint(count_binary_seq(13)) # 1 \nprint(count_binary_seq(14)) # 3 \nprint(count_binary_seq(15)) # 2 \nprint(count_binary_seq(16)) # 4 \nprint(count_binary_seq(17)) # 1 \nprint(count_binary_seq(18)) # 5 \nprint(count_binary_seq(19)) # 2 \nprint(count_binary_seq(20)) # 6 \nprint(count_binary_seq(21)) # 1 \nprint(count_binary_seq(22)) # 5 \nprint(count_binary_seq(23)) # 2 \nprint(count_binary_seq(24)) # 7 \nprint(count_binary_seq(25)) # 1 \nprint(count_binary_seq(26)) # 8 \nprint(count_binary_seq(27)) # 1 \nprint(count_binary_seq(28)) # 10 \nprint(count_binary_seq(29)) # 2 \nprint(count_binary_seq(30)) # 12 \nprint(count_binary_seq(31)) # 1 \nprint(count_binary_seq(32)) # 13 \nprint(count_binary_seq(33)) # 1 \nprint(count_binary_seq(34)) # 14 \nprint(count_binary_seq(35)) # 2 \nprint(count_binary_seq(36)) # 16 \nprint(count_binary_seq(37)) # 1 \nprint(count_binary_seq(38)) # 17 \nprint(count_binary_seq(39)) # 2 \nprint(count_binary_seq(40)) # 18 \nprint(count_binary_seq(41)) # 1 \nprint(count_binary_seq(42)) # 19 \nprint(count_binary_seq(43)) # 2 \nprint(count_binary_seq(44)) # 20 \nprint(count_binary_seq(45)) # 3 \nprint(count_binary_seq(46)) # 21 \nprint(count_binary_seq(47)) # 1 \nprint(count_binary_seq(48)) # 23 \nprint(count_binary_seq(49)) # 2 \nprint(count_binary_seq(50)) # 24 \nprint(count_binary_seq(51)) # 1 \nprint(count_binary_seq(52)) # 25 \nprint(count_binary_seq(53)) # 2 \nprint(count_binary_seq(54)) # 26 \nprint(count_binary_seq(55)) # 1 \nprint(count_binary_seq(56)) # 27 \nprint(count_binary_seq(57)) # 2 \nprint(count_binary_seq(58)) # 28 \nprint(count_binary_seq(59)) # 1 \nprint(count_binary_seq(60)) # 29 \nprint(count_binary_seq(61)) # 2 \nprint(count_binary_seq(62)) # 30 \nprint(count_binary_seq(63)) # 1 \nprint(count_binary_seq(64)) # 31 \nprint(count_binary_seq(65)) # 2 \nprint(count_binary_seq(66)) # 32 \nprint(count_binary_seq(67)) # 1 \nprint(count_binary_seq(68)) # 33 \nprint(count_binary_seq(69)) # 2 \nprint(count_binary_seq(70)) # 34 \nprint(count_binary_seq(71)) # 1 \nprint(count_binary_seq(72)) # 35 \nprint(count_binary_seq(73)) # 2 \nprint(count_binary_seq(74)) # 36 \nprint(count_binary_seq(75)) # 1 \nprint(count_binary_seq(76)) # 37 \nprint(count_binary_seq(77)) # 2 \nprint(count_binary_seq(78)) # 38 \nprint(count_binary_seq(79)) # 1 \nprint(count_binary_seq(80)) # 39 \nprint(count_binary_seq(81)) # 2 \nprint(count_binary_seq(82)) # 40 \nprint(count_binary_seq(83)) # 1 \nprint(count_binary_seq(84)) # 41 \nprint(count_binary_seq(85)) # 2 \nprint(count_binary_seq(86)) # 42 \nprint(count_binary_seq(87)) # 1 \nprint(count_binary_seq(88)) # 43 \nprint(count_binary_seq(89)) # 2 \nprint(count_binary_seq(90)) # 44 \nprint(count_binary_seq(91)) # 1 \nprint(count_binary_seq(92)) # 45 \nprint(count_binary_seq(93)) # 2 \nprint(count_binary_seq(94)) # 46 \nprint(count_binary_seq(95)) # 1 \nprint(count_binary_seq(96)) # 47 \nprint(count_binary_seq(97)) # 2 \nprint(count_binary_seq(98)) # 48 \nprint(count_binary_seq(99)) # 1 \nprint(count_binary_seq(100)) # 49 \nprint(count_binary_seq(101)) # 2 \nprint(count_binary_seq(102)) # 50 \nprint(count_binary_seq(103)) # 1 \nprint(count_binary_seq(104)) # 51 \nprint(count_binary_seq(105)) # 2 \nprint(count_binary_seq(106)) # 52 \nprint(count_binary_seq(107)) # 1 \nprint(count_binary_seq(108)) # 53 \nprint(count_binary_seq(109)) # 2 \nprint(count_binary_seq(110)) # 54 \nprint(count_binary_seq(111)) # 1 \nprint(count_binary_seq(112)) # 55 \nprint(count_binary_seq(113)) # 2 \nprint(count_binary_seq(114)) # 56 \nprint(count_binary_seq(115)) # 1 \nprint(count_binary_seq(116)) # 57 \nprint(count_binary_seq(117)) # 2 \nprint(count_binary_seq(118)) # 58 \nprint(count_binary_seq(119)) # 1 \nprint(count_binary_seq(120)) # 59 \nprint(count_binary_seq(121)) # 2 \nprint(count_binary_seq(122)) # 60 \nprint(count_binary_seq(123)) # 1 \nprint(count_binary_seq(124)) # 61 \nprint(count_binary_seq(125)) # 2 \nprint(count_binary_seq(126)) # 62 \nprint(count_binary_seq(127)) # 1 \nprint(count_binary_seq(128)) # 63 \nprint(count_binary_seq(129)) # 2 \nprint(count_binary_seq(130)) # 64 \nprint(count_binary_seq(131)) # 1 \nprint(count_binary_seq(132)) # 65 \nprint(count_binary_seq(133)) # 2 \nprint(count_binary_seq(134)) # 66 \nprint(count_binary_seq(135)) # 1 \nprint(count_binary_seq(136)) # 67 \nprint(count_binary_seq(137)) # 2 \nprint(count_binary_seq(138)) # 68 \nprint(count_binary_seq(139)) # 1 \nprint(count_binary_seq(140)) # 69 \nprint(count"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ncount_binary_seq(3) == 3\ncount_binary_seq(4) == 6\ncount_binary_seq(5) == 10\ncount_binary_seq(6) == 21\ncount_binary_seq(7) == 46\ncount_binary_seq(8) == 84\ncount_binary_seq(9) == 111"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_binary_seq(0) == 0, \"Case 1\"\nassert     count_binary_seq(1) == 1, \"Case 2\"\nassert     count_binary_seq(2) == 2, \"Case 3\"\nassert     count_binary_seq(3) == 5, \"Case 4\"\nassert     count_binary_seq(4) == 7, \"Case 5\"\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_binary_seq(0) == 0\nassert     count_binary_seq(1) == 1\nassert     count_binary_seq(2) == 1\nassert     count_binary_seq(3) == 2\nassert     count_binary_seq(4) == 2\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_binary_seq(3) == 2\nassert     count_binary_seq(4) == 4\nassert     count_binary_seq(5) == 6\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_binary_seq(4) == 6\nassert     count_binary_seq(0) == 0\nassert     count_binary_seq(1) == 1\nassert     count_binary_seq(2) == 2\nassert     count_binary_seq(3) == 5\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_binary_seq(4) == 5, 'Not correct'\nassert     count_binary_seq(5) == 10, 'Not correct'\nassert     count_binary_seq(6) == 12, 'Not correct'\nassert     count_binary_seq(8) == 16, 'Not correct'\nassert     count_binary_seq(16) == 20, 'Not correct'\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     dict_depth({}) == 0\nassert     dict_depth({'a': 3}) == 0\nassert     dict_depth({'a': {'b': 4}}) == 1\nassert     dict_depth({'a': {'b': {'c': 5}}}) == 2\nassert     dict_depth({'a': {'b': {'c': {'d': 6}}}}) == 3\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     dict_depth({1:1,2:2}) == 1\nassert dict_depth({1:1,2:2,3:3}) == 2\nassert dict_depth({1:1,2:2,3:3,4:4}) == 3\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef dict_keys(d):\n    '''\n    Write a function to get the keys of a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     dict_depth({\"a\": {1: 2}}) == 1\nassert     dict_depth({\"a\": {1: {2: 4}, 3: 5}}) == 2\nassert     dict_depth({\"a\": {1: {2: {4: 6}}}}) == 3\nassert     dict_depth({\"a\": {1: {2: {3: {4: {5: 6}}}}}}) == 4\nassert     dict_depth({\"a\": {1: {2: {3: {4: {5: {6: 6}}}}}}}) == 5\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     dict_depth({1: \"a\", 2: \"b\", 3: \"c\"}) == 2, 'your answer : {1: \"a\", 2: \"b\", 3: \"c\"}'\nassert     dict_depth({1: \"a\", 2: \"b\", 3: \"c\", 4: \"d\", 5: \"e\"}) == 3, 'your answer : {1: \"a\", 2: \"b\", 3: \"c\", 4: \"d\", 5: \"e\"}'\nassert     dict_depth({1: \"a\", 2: \"b\", 3: \"c\", 4: \"d\", 5: \"e\"}) == 5, 'your answer : {1: \"a\", 2: \"b\", 3: \"c\", 4: \"d\", 5: \"e\"}'\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     dict_depth({}) == 0,'returns 0 when empty dictionary is passed'\nassert     dict_depth({\"a\": 1}) == 1,'returns 1 when dictionary with 1 element is passed'\nassert     dict_depth({\"a\": {\"b\": 1}}) == 2,'returns 2 when dictionary with 1 element and 1 pair is passed'\nassert     dict_depth({\"a\": {\"b\": {\"c\": 1}}}) == 3,'returns 3 when dictionary with 1 element and 1 pair and 1 pair is passed'\nassert     dict_depth({\"a\": {\"b\": {\"c\": 1}, \"d\": 2}}) == 3,'returns 3 when dictionary with 1 element, 1 pair, 1 pair and 1 pair is passed'\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     dict_depth({1:2,3:4}) == 2, \"Oops! This should be 2.\"\nassert     dict_depth({}) == 0, \"Oops! This should be 0.\"\nassert     dict_depth({1:2,3:4,5:6}) == 2, \"Oops! This should be 2.\"\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     dict_depth({\"a\":{\"b\":{\"c\":1}}} ) == 3\nassert     dict_depth({\"a\":{\"b\":1}} ) == 2\nassert     dict_depth({\"a\":{\"b\":{\"c\":1}, \"d\":4}} ) == 3\nassert     dict_depth({\"a\":{\"b\":{\"c\":1, \"d\":4}, \"e\":6}} ) == 3\nassert     dict_depth({\"a\":{\"b\":{\"c\":1, \"d\":4, \"e\":6}, \"f\":7}} ) == 3\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Element([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17], [0,1,3,5,7,10,12,14,16,19,21,23,25,27,30,32,34,36,38,40], [1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_Element([1,2,3,4],5,5,4) == 3\nassert     find_Element([1,2,3,4],5,6,3) == 3\nassert     find_Element([1,2,3,4],5,6,1) == 2\nassert     find_Element([1,2,3,4],5,6,0) == 1\nassert     find_Element([1,2,3,4],5,6,4) == 4\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Element([1,2,3,4,5],2,1,3) == 3\nassert     find_Element([1,2,3,4,5],3,2,3) == 5\nassert     find_Element([1,2,3,4,5],1,2,4) == 4\nassert     find_Element([1,2,3,4,5],1,0,0) == 1\nassert     find_Element([1,2,3,4,5],0,0,0) == 1\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    find_Element([-3,-2,-1,0,1,2,3],[-1,0,1],2,0) == -3\n    find_Element([-3,-2,-1,0,1,2,3],[-1,0,1],2,4) == 1\n    find_Element([-3,-2,-1,0,1,2,3],[-1,0,1],2,2) == -1\n    find_Element([-3,-2,-1,0,1,2,3],[-1,0,1],2,6) == 0\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Element([1,2,3,4,5],(1,2,2),1,2) == None\nassert     find_Element([1,2,3,4,5],(2,3,3),2,3) == None\nassert     find_Element([1,2,3,4,5],(1,2,4),1,4) == 4\nassert     find_Element([1,2,3,4,5],(1,2,6),1,6) == None\nassert     find_Element([1,2,3,4,5],(1,3,4),1,3) == None\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_Element([0,2,4,6,8],[[1,3],[2,4],[3,5]],[0,0,0,0,1],[2]) == 1\nassert     find_Element([0,2,4,6,8],[[1,3],[2,4],[3,5]],[0,0,0,0,1],[3]) == 0\nassert     find_Element([0,2,4,6,8],[[1,3],[2,4],[3,5]],[0,0,0,0,1],[4]) == 1\nassert     find_Element([0,2,4,6,8],[[1,3],[2,4],[3,5]],[0,0,0,0,1],[5]) == 2\nassert     find_Element([0,2,4,6,8],[[1,3],[2,4],[3,5]],[0,0,0,0,1],[6]) == 3\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Element([1,2,3,4,5,6],3,1,0) == 1\nassert     find_Element([1,2,3,4,5,6],3,2,1) == 2\nassert     find_Element([1,2,3,4,5,6],3,1,4) == 5\nassert     find_Element([1,2,3,4,5,6],3,2,3) == 6\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(\"All Tests Passed\")\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     start_withp([\"pyserp\", \"pySerp\", \"PySerp\", \"pySerP\", \"pyserpE\"]) == (\"pySerp\", \"pySerp\")\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert start_withp(['pam', 'paw', 'pox', 'poo']) == ('pam', 'poo'), \"should be ('pam', 'poo')\"\nassert start_withp(['pam', 'paw', 'pox', 'poo'], start_with_letter='p') == ('pam', 'pox'), \"should be ('pam', 'pox')\"\nassert start_withp(['pam', 'paw', 'pox', 'poo'], start_with_letter='p', not_found=False) == False, \"should be False\"\nassert start_withp(['pam', 'paw', 'pox', 'poo'], start_with_letter='d') == False, \"should be False\"\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     start_withp([\"pig\", \"cat\", \"dog\"]) == [\"pig\", \"dog\"], \"Should return two words, that start with pig or dog.\"\nassert     start_withp([\"mac\", \"mac\", \"laptop\", \"computer\"]) == [\"mac\", \"computer\"], \"Should return two words, that start with mac.\"\n\n\n\ndef start_witht(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 't'.\n    '''\n    pass\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     start_withp(['chair','break','create','piano','hand','piano']) == ('chair','piano')\nassert start_withp(['chair','break','create','piano','hand','piano2']) == ('piano','piano2')\nassert start_withp(['chair','break','create','piano','hand','piano3']) == ('piano','hand')\nassert start_withp(['chair','break','create','piano','hand','piano4']) == ('chair','piano')\nassert start_withp(['chair','break','create','piano','hand','piano5']) == ('chair','hand')\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     start_withp(['p', 'q', 'r','s']) == ('p', 'q')\nassert     start_withp(['p', 'q', 'p', 'r']) == ('p', 'p')\n\ndef start_with2_letters(words):\n    '''\n    Write a function to return the first two words from a list of words.\n    '''\n    pass\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     start_withp([\"Hello\", \"World\", \"This\", \"is\", \"A\", \"test\", \"program\", \"with\", \"all\", \"testcases\"]) == ['A', 'test']\n\ndef stop_with(words):\n    '''\n    Write a function to return two words from a list of words starting with letter's'.\n    '''\n    pass\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef start_withp(words):\n    \"\"\"\n    Return two words from a list of words starting with letter 'p'.\n    \"\"\"\n    for word in words:\n        if word[0].lower() == 'p':\n            return (word, word[1:])\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     start_withp([\"person\", \"person's\", \"person's\", \"persona\", \"personab\"]) == (\"person\", \"persona\")\nprint(\"Test passed!\")\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_sum_increasing_subseq([], 3, 3, 2) == 0\nassert     max_sum_increasing_subseq([], 0, 3, 2) == 0\nassert     max_sum_increasing_subseq([], 2, 1, 1) == 1\nassert     max_sum_increasing_subseq([], 2, 1, 2) == 2\nassert     max_sum_increasing_subseq([], 2, 1, 3) == 3\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_sum_increasing_subseq([10, 22, 9, 33, 21, 50, 41, 60], 6, 4) == 70\nassert     max_sum_increasing_subseq([10, 22, 9, 33, 21, 50, 41, 60], 6, 5) == 70\nassert     max_sum_increasing_subseq([10, 22, 9, 33, 21, 50, 41, 60], 6, 6) == 70\nassert     max_sum_increasing_subseq([10, 22, 9, 33, 21, 50, 41, 60], 6, 7) == 70\nassert     max_sum_increasing_subseq([10, 22, 9, 33, 21, 50, 41, 60], 6, 8) == 70\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    '''\n    if index < 0 or index >= n:\n        return None\n    if a[index] <= k:\n        return max_sum_increasing_subseq(a, n, index - 1, k)\n    else:\n        return max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k) + a[index])\n    '''\n    if index < 0 or index >= n:\n        return None\n    if a[index] <= k:\n        return max_sum_increasing_subseq(a, n, index - 1, k)\n    else:\n        return max_sum_increasing_subseq(a, n, index - 1, k) + a[index]"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef min_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the minimum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    pass\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_sum_increasing_subseq([1,2,3,4,5,6,7,8], 8, 3) == 15,'max_sum_increasing_subseq([1,2,3,4,5,6,7,8], 8, 3) is not correct'\nassert     max_sum_increasing_subseq([1,2,3,4,5,6,7,8,9], 8, 3) == 14,'max_sum_increasing_subseq([1,2,3,4,5,6,7,8,9], 8, 3) is not correct'\nassert     max_sum_increasing_subseq([1,2,3,4,5,6,7,8,9], 8, 5) == 32,'max_sum_increasing_subseq([1,2,3,4,5,6,7,8,9], 8, 5) is not correct'\nassert     max_sum_increasing_subseq([1,2,3,4,5,6,7,8,9], 8, 7) == 34,'max_sum_increasing_subseq([1,2,3,4,5,6,7,8,9], 8, 7) is not correct'\nassert     max_sum_increasing_subseq([1,2,3,4,5,6,7,8,9], 8, 9) == 44,'max_sum_increasing_subseq([1,2,3,4,5,6,7,8,9], 8, 9) is not correct'\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    max_sum_increasing_subseq([], 0, 0, 0) == 0\n    max_sum_increasing_subseq([1,2,3], 0, 2, 0) == 3\n    max_sum_increasing_subseq([1,2,3], 0, 2, 1) == 2\n    max_sum_increasing_subseq([1,2,3], 0, 2, 2) == 3\n    max_sum_increasing_subseq([1,2,3,4,5,6], 5, 2, 2) == 5\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     colon_tuplex((),1,1) == ''\nassert     colon_tuplex((1,2,3,4),4,4) == '4:4,4:4,4:4,4:4'\nassert     colon_tuplex((1,2,3,4),2,2) == '1:2,1:2,3:4,3:4'\nassert     colon_tuplex((1,2,3,4),3,3) == '1:2,1:2,3:4,3:4'\nassert     colon_tuplex((1,2,3,4),4,4) == '1:2,1:2,3:4,3:4'\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert colon_tuplex(('a','b','c'),3,3)==(\"a:b:c\",\"b:c:a\",\"c:a:b\")\n\ndef get_colon(lst,i,n):\n    '''\n    Write a function to get a colon of a list.\n    '''\n    pass\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef my_print(s, m, n):\n    '''\n    Write a function to print a string with a given number of columns.\n    '''\n    \n    pass\n\ndef my_print_colon(colon, m, n):\n    '''\n    Write a function to print a colon of a tuple.\n    '''\n    \n    pass\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     colon_tuplex((2,3),3,2) == (2,3)\nassert     colon_tuplex((2,3,4),2,2) == (2,3,4)\nassert     colon_tuplex((2,3,4,5),2,2) == (2,3,4,5)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     colon_tuplex((('1','2'),('3','4')),2,3) == (('1','2','3','4'), ('1','2','3','4'))\nassert     colon_tuplex((('1','2'),('3','4')),3,2) == ((('1','2'),('3','4')), ((1,2),(3,4)))\nassert     colon_tuplex((('1','2'),('3','4')),1,3) == ((('1','2'),('3','4')), ((1,2),(3,4)))\nassert     colon_tuplex((('1','2'),('3','4')),3,1) == ((('1','2'),('3','4')), ((1,2),(3,4)))\nassert     colon_tuplex((('1','2'),('3','4')),3,4) == ((('1','2'),('3','4')), ((1,2),(3,4)))\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert colon_tuplex((1,2,3),3,3) == (1,2,3)\nassert colon_tuplex((1,2,3),4,3) == (1,2,3)\nassert colon_tuplex((1,2,3),3,4) == (1,2,3)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef reverse_colon(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     colon_tuplex((1,2,3,4), 2, 3) == ((1,2,3,4), (1,2,4,3))\nassert     colon_tuplex((1,2,3,4), 2, 4) == ((1,2,3,4), (1,2,4,3))\nassert     colon_tuplex((1,2,3,4), 2, 5) == ((1,2,3,4), (1,2,4,3))\nassert     colon_tuplex((1,2,3,4), 1, 3) == ((1,2,3,4), (1,2,3,4))\nassert     colon_tuplex((1,2,3,4), 1, 4) == ((1,2,3,4), (1,2,3,4))\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     colon_tuplex((\"a\",\"b\",\"c\",\"d\"),2,3)    == (\"a:b\",\"c:d\")\nassert     colon_tuplex((\"a\",\"b\",\"c\",\"d\"),2,2)    == None\nassert     colon_tuplex((\"a\",\"b\",\"c\",\"d\"),3,4)    == None\nassert     colon_tuplex((\"a\",\"b\",\"c\",\"d\",\"e\"),4,2)    == None\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     large_product([10,3,5,6], [-2,6,3,3], 2) == [-5,60]\nassert     large_product([0,3,5,6], [-2,6,3,3], 1) == [0]\n\n'''\nGiven a sorted array of distinct elements, print the next greater element for each element in the array. If no such element exists, print -1.\n\nFor example, if the given array is {1, 4, 4}, the output should be {2, 5, -1}. The elements are in the range {1, 2^31 - 1}.\n'''\ndef next_greater(arr):\n    '''\n    Algorithm:\n    Iterate through the array and store the next greater element for each element in a hash table.\n    '''\n    # initialize a hash map\n    map = dict()\n    for i in range(len(arr)):\n        if arr[i] in map:\n            map[arr[i]].append(i+1)\n        else:\n            map[arr[i]] = [i+1]\n\n    # print the hash map\n    for i in range(len(arr)):\n        if arr[i] in map:\n            print(map[arr[i]][0])\n        else:\n            print(-1)\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     large_product([1,2,3,4,5],    [2,4,6,8,10],    3) == [120,24,40]\nassert     large_product([2,4,6,8,10],    [1,2,3,4,5],    3) == [120,24,40]\nassert     large_product([3,4,6,8,10],    [1,2,3,4,5],    3) == [12,24,40]\nassert     large_product([1,2,3,4,5],    [2,4,6,8,10],    2) == [120,40]\nassert     large_product([1,2,3,4,5],    [2,4,6,8,10],    1) == [120]\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     large_product([5,8,2], [10,2,5], 3) == 20\nassert     large_product([1,2,3], [4,5,6], 2) == 60\nassert     large_product([9,10,11], [3,4,5], 3) == 50\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n'''\nTask\nGiven a two-dimensional array, A, of size RxC and two positive integers, r and c, \nfind the largest rectangular submatrix of A containing at most r rows and c columns.\n\nExample 1\nInput\n3\n4\n5 4 1 2 3\n2\n4 3\nOutput\n3 3 4\n4 3\n'''\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     large_product([1, 3, 5, 8], [2, 6, 9, 10], 3) == 30, 'incorrect'\nassert     large_product([10, 5, -10, -20], [-10, -2, 5, 10], 2) == 150, 'incorrect'\nassert     large_product([-10, 2, -2, -2, 2, 4], [-10, -2, 10, 10], 2) == 520, 'incorrect'\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nassert large_product([1,3,4,2],[1,7,5,2,8],2) == [120, 972]\nassert large_product([1,3,4,2],[1,7,5,2,8],1) == [720]\nassert large_product([1,3,4,2],[1,7,5,2,8],5) == []\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert large_product([1,2,3], [4,5,6], 2) == [24,15]\nassert large_product([1,2,3], [4,5,6], 1) == [120]\nassert large_product([2,2], [3,3,3], 2) == [9,12]\nassert large_product([2,2], [3,3,3], 1) == [6]\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef large_product_test():\n    '''\n    Test large_product function:\n    '''\n    pass\n\nlarge_product_test()\n\n\n'''\nWrite a function that, given a list of integers,\nreturns a list of integers that are the squares of each element in the original list.\n\nThis should be done without changing the original list.\n'''\ndef square_numbers(nums):\n    '''\n    Write a function that, given a list of integers,\n    returns a list of integers that are the squares of each element in the original list.\n    '''\n    pass\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     large_product([], [], 0) == 0, \\\n    \"large_product([], [], 0) has been modified\"\nassert     large_product([], [], 1) == 0, \\\n    \"large_product([], [], 1) has been modified\"\nassert large_product([], [1], 0) == 0, \\\n    \"large_product([], [1], 0) has been modified\"\nassert large_product([], [1], 1) == 0, \\\n    \"large_product([], [1], 1) has been modified\"\nassert     large_product([1], [], 0) == 1, \\\n    \"large_product([1], [], 0) has been modified\"\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    return sorted(nums1)[-N:] * sorted(nums2)[-N:]\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     maximum(1,2) == 2\nassert     maximum(2,1) == 2\nassert     maximum(-1,-2) == -2\nassert     maximum(1.1,2.2) == 2.2\nassert     maximum('one','two') == 'two'\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     maximum(4,3) == 4\nassert maximum(7,2) == 7\nassert maximum(3,1) == 3\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    maximum(1,1)==1\n    maximum(-1,1)==1\n    maximum(1,-1)==1\n    maximum(1,2)==2\n    maximum(1,-2)==1\n    maximum(-1,2)==2\n    maximum(-1,-2)==-2\n    maximum(-1,-2.5)==-2.5\n    maximum(1.0,2)==2.0\n    maximum(1.0,2.0)==2.0\n    maximum(1.0,2.5)==2.5\n    maximum(1.0,-2)==2.0\n    maximum(1.0,-2.0)==1.0\n    maximum(1.0,-2.5)==1.0\n    maximum(-1.0,2.0)==2.0\n    maximum(-1.0,2.0)==-1.0\n    maximum(-1.0,-2)==-2.0\n    maximum(-1.0,-2.0)==1.0\n    maximum(2.0,2)==2.0\n    maximum(2.0,2.0)==2.0\n    maximum(2.0,2.5)==2.5\n    maximum(2.0,-2)==2.0\n    maximum(2.0,-2.0)==2.0\n    maximum(2.0,-2.5)==2.5\n    maximum(2.0,1)==2.0\n    maximum(2.0,1.0)==2.0\n    maximum(2.0,1.5)==2.5\n    maximum(2.0,-1)==2.0\n    maximum(2.0,-1.0)==2.0\n    maximum(2.0,-1.5)==2.5\n    maximum(2.0,0)==2.0\n    maximum(2.0,0.0)==2.0\n    maximum(2.0,0.5)==2.5\n    maximum(2.0,-0)==2.0\n    maximum(2.0,-0.0)==2.0\n    maximum(2.0,-0.5)==2.5\n    maximum(2.0,float(\"inf\"))==2.0\n    maximum(2.0,float(\"-inf\"))==2.0\n    maximum(float(\"-inf\"),2)==2.0\n    maximum(float(\"-inf\"),2.0)==float(\"-inf\")\n    maximum(float(\"inf\"),2.0)==float(\"inf\")\n    maximum(-2.0,2.0)==-2.0\n    maximum(-2.0,2.5)==-2.5\n    maximum(2.0,float(\"-inf\"))==float(\"-inf\")\n    maximum(2.0,float(\"inf\"))==2.0\n    maximum(float(\"inf\"),2)==float(\"inf\")\n    maximum(float(\"-inf\"),2)==float(\"inf\")\n    maximum(-2.0,float(\"-inf\"))==float(\"-inf\")\n    maximum(-2.0,float(\"inf\"))==-2.0\n    maximum(2.0,float(\"inf\"))==float(\"inf\")\n    maximum(2.0,float(\"-inf\"))==float(\"inf\")\n    maximum(float(\"inf\"),-2)==float(\"inf\")\n    maximum(float(\"-inf\"),-2)==-2.0\n    maximum(float(\"inf\"),-2.0)==float(\"inf\")\n    maximum(float(\"-inf\"),-2.0)==-float(\"inf\")\n    maximum(float(\"-inf\"),-float(\"inf\"))==-float(\"inf\")\n    maximum(float(\"inf\"),-float(\"inf\"))==float(\"inf\")\n    maximum(-2.0,float(\"inf\"))==float(\"inf\")\n    maximum(-2.0,float(\"-inf\"))==-float(\"inf\")\n    maximum(2.0,float(\"-inf\"))==-float(\"inf\")\n    maximum(2.0,float(\"inf\"))==float(\"inf\")\n    maximum(float(\"inf\"),-float(\"inf\"))==float(\"inf\")\n    maximum(float(\"-inf\"),-float(\"inf\"))==float(\"-inf\")\n    maximum(-2.0,float(\"inf\"))==float(\"inf\")\n    maximum(-2.0,float(\"-inf\"))==-float(\"inf\")\n    maximum(2.0,float(\"inf\"))==float(\"inf\")\n    maximum(2.0,float(\"-inf\"))==-float(\"inf\")\n    maximum(float(\"inf\"),2)==float(\"inf\")\n    maximum(float(\"-inf\"),2)==-float(\"inf\")\n    maximum(float(\"inf\"),2.0)==float(\"inf\")\n    maximum(float(\"-inf\"),2.0)==-float(\"inf\")\n    maximum(float(\"inf\"),-2)==float(\"inf\")\n    maximum(float(\"-inf\"),-2)==-float(\"inf\")\n    maximum(float(\"inf\"),-2.0)==-float(\"inf\")\n    maximum(float(\"-inf\"),-2.0)==float(\"inf\")\n    maximum(-2.0,float(\"inf\"))==float(\"inf\")\n    maximum(-2.0,float(\"-inf\"))==-float(\"inf\")\n    maximum(2.0,float(\"inf\"))==float(\"inf\")\n    maximum(2.0,float(\"-inf\"))==-float(\"inf\")\n    maximum(float(\"inf\"),2)==float(\"inf\")\n    maximum(float(\"-inf\"),2)==-float(\"inf\")\n    maximum(float(\"inf\"),2.0)==float(\"inf\")\n    maximum(float(\"-inf\"),2.0)==-float(\"inf\")\n    maximum(float(\"inf\"),-2)==float(\"inf\")\n    maximum(float(\"-inf\"),-2)==-float(\"inf\")\n    maximum(float(\"inf\"),-2.0)==float(\"inf\")\n    maximum(float(\"-inf\"),-2.0)==-float(\"inf\")\n    maximum(float(\"inf\"),1)==float(\"inf\")\n    maximum(float(\"-inf\"),1)==float(\"-inf\")\n    maximum(float(\"inf\"),1.0)==float(\"inf\")\n    maximum(float(\"-inf\"),1.0)==float(\"-inf\")\n    maximum(float(\"inf\"),1.5)==1.5\n    maximum(float(\"-inf\"),1.5)==1.5\n    maximum(float(\"inf\"),2)==2\n    maximum(float(\"-inf\"),2)==-2\n    maximum(float(\"inf\"),2.0)==2.0\n    maximum(float(\"-inf\"),2.0)==-2.0\n    maximum(float(\"inf\"),-2)==2.0\n    maximum(float(\"-inf\"),-2)==-2.0\n    maximum(float(\"inf\"),-2.0)==2.0\n    maximum(float(\"-inf\"),-2.0)==-2.0\n    maximum(1.0,1)==1.0\n    maximum(1.0,2)==2.0\n    maximum(1.0,2.0)==2.0\n    maximum(1.0,2.5)==2.5\n    maximum(1.0,-1)==1.0\n    maximum(1.0,-2)==1.0\n    maximum(1.0,-2.0)==1.0\n    maximum(1.0,-2.5)==1.0\n    maximum(1.0,-2.5)==1.0\n    maximum(1.0,0)==1.0\n    maximum(1.0,0.0)==1.0\n    maximum(1.0,0.5)==1.5\n    maximum(1.0,-0)==1.0\n    maximum(1.0,-0.0)==1.0\n    maximum(1.0,-0.5)==1.5\n    maximum(1.0,float(\"inf\"))==1.0\n    maximum(1.0,float(\"-inf\"))==1.0\n    maximum(float(\"inf\"),1)==1.0\n    maximum(float(\"-inf\"),1)==1.0\n    maximum(float(\"inf\"),1.0)==1.0\n    maximum(float(\"-inf\"),1.0)==1.0\n    maximum(float(\"inf\"),2)==2.0\n    maximum(float(\"-inf\"),2)==2.0\n    maximum(float(\"in"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     maximum(2,3) == 3\nassert maximum(10,10) == 10\nassert maximum(10,100) == 100\nassert maximum(100,100) == 100\nassert maximum(-10,-10) == -10\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nmaximum(2,3) == 3\nmaximum(2,4) == 4\nmaximum(1,2) == 2\nmaximum(1,1) == 1\nmaximum(2,2) == 2"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     maximum(3,4) == 4\nassert maximum(5,8) == 8\nassert maximum(9,5) == 9\nassert maximum(-3,-4) == -3\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     string_to_tuple('The quick brown fox jumps over the lazy dog') == (\n            ('T', 'h', 'i','s', 'q', 'u', 'o', 'r', 'w', 'b', 'x', 'f', 'o','',\n            'j', 'a','m', 'p', 'l', 'e','s', 'o', 'v','', 'd', 'g', 'l', 'y'),\n            'The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog')\n\nassert     string_to_tuple('The quick brown fox jumps over the lazy dog') == (\n            ('T', 'h', 'i','s', 'q', 'u', 'o', 'r', 'w', 'b', 'x', 'f', 'o','',\n            'j', 'a','m', 'p', 'l', 'e','s', 'o', 'v','', 'd', 'g', 'l', 'y'),\n            'The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog')\nassert     string_to_tuple('1') == (\n            ('1',),)\nassert     string_to_tuple('1') == (\n            ('1',),)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     string_to_tuple(\"ABCD\") == (\"A\", \"B\", \"C\", \"D\")\nassert     string_to_tuple(\"123\") == (\"1\", \"2\", \"3\")\nassert     string_to_tuple(\"abcd\") == (\"a\", \"b\", \"c\", \"d\")\nassert     string_to_tuple(\"g\") == (\"g\")\nassert     string_to_tuple(\"\") == ()\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     string_to_tuple('abcd') == ('a', 'b', 'c', 'd'), \"Wrong\"\nassert string_to_tuple('abcd') == ('a', 'b', 'c', 'd'), \"Wrong\"\nassert string_to_tuple('abcd') == ('a', 'b', 'c', 'd'), \"Wrong\"\nassert string_to_tuple('abcd') == ('a', 'b', 'c', 'd'), \"Wrong\"\nassert string_to_tuple('abcd') == ('a', 'b', 'c', 'd'), \"Wrong\"\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     string_to_tuple(\"abcd\") == ('a', 'b', 'c', 'd')\nassert     string_to_tuple(\"efghi\") == ('e', 'f', 'g', 'h', 'i')\nassert     string_to_tuple(\"jklmno\") == ('j', 'k', 'l','m', 'o')\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     string_to_tuple('abc') == ('a', 'b', 'c')\nassert     string_to_tuple('abcd') == ('a', 'b', 'c', 'd')\nassert     string_to_tuple('abcdab') == ('a', 'b', 'c', 'd', 'a', 'b')\nassert     string_to_tuple('abcdefghijklmnopqrstuvwxyz') == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z')\nassert     string_to_tuple('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ') == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z')\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     string_to_tuple(\"Hello\") == ('H', 'e', 'l', 'l', 'o')\nassert     string_to_tuple(\"Hello World\") == ('H', 'e', 'l', 'l', 'o', 'W', 'o', 'r', 'l', 'd')\nassert     string_to_tuple(\"Hello, world!\") == ('H', 'e', 'l', 'l', 'o', ',', 'W', 'o', 'r', 'l', 'd', '!')\nassert     string_to_tuple(\"Hello, world!!!!\") == ('H', 'e', 'l', 'l', 'o', ',', 'W', 'o', 'r', 'l', 'd', '!', '!', '!', '!', '!')\nassert     string_to_tuple(\"\") == ()\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     string_to_tuple(\"H\")    ==    ('H',)\nassert     string_to_tuple(\"hello\")    ==    ('h', 'e', 'l', 'l', 'o')\nassert     string_to_tuple(\"welcome\")    ==    ('w', 'e', 'l', 'l', 'o', 'w', 'c','m', 'e', 'n', 'w', 'k', 'p', 'l', 'e')\nassert     string_to_tuple(\"hi\")    ==    ('h', 'i')\nassert     string_to_tuple(\"\")    ==    tuple()\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     string_to_tuple(\"\") == ()\nassert     string_to_tuple(\"a\") == ('a',)\nassert     string_to_tuple(\"abc\") == ('a','b','c',)\nassert     string_to_tuple(\"abcd\") == ('a','b','c','d',)\nassert     string_to_tuple(\"abcdef\") == ('a','b','c','d','e','f',)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     string_to_tuple('abc') == ('a', 'b', 'c')\nassert     string_to_tuple('xyz') == ('x', 'y', 'z')\nassert     string_to_tuple('AB') == ('A', 'B')\nassert     string_to_tuple('ABC') == ('A', 'B', 'C')\nassert     string_to_tuple('XYZ') == ('X', 'Y', 'Z')\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     set_left_most_unset_bit(10) == 1\nassert     set_left_most_unset_bit(1) == 0\nassert     set_left_most_unset_bit(0) == 1\nassert     set_left_most_unset_bit(3) == 0\nassert     set_left_most_unset_bit(4) == 1\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     set_left_most_unset_bit(11) == 0\nassert     set_left_most_unset_bit(10) == 1\nassert     set_left_most_unset_bit(3) == 1\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nset_left_most_unset_bit(0x7) == 0x0\nassert set_left_most_unset_bit(0x10) == 0x1\nassert set_left_most_unset_bit(0xFF) == 0x1\nassert set_left_most_unset_bit(0x00) == 0x0\nassert set_left_most_unset_bit(0x0001) == 0x0\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     set_left_most_unset_bit(0b00000000000000000000) == 0b00000000000000000000\nassert     set_left_most_unset_bit(0b000000000000000000000001) == 0b000000000000000000000001\nassert     set_left_most_unset_bit(0b000000000000000000000010) == 0b000000000000000000000010\nassert     set_left_most_unset_bit(0b000000000000000000000011) == 0b000000000000000000000011\nassert     set_left_most_unset_bit(0b000000000000000000001000) == 0b000000000000000000001000\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     set_left_most_unset_bit(0b1101)     ==     True\nassert     set_left_most_unset_bit(0b1110)     ==     True\nassert     set_left_most_unset_bit(0b1111)     ==     True\nassert     set_left_most_unset_bit(0b1010)     ==     False\nassert     set_left_most_unset_bit(0b1011)     ==     False\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    set_left_most_unset_bit(1) == 1\n    set_left_most_unset_bit(0) == 1\n    set_left_most_unset_bit(2) == 2\n    set_left_most_unset_bit(15) == 15\n    set_left_most_unset_bit(0b111111) == 0b110101\n    set_left_most_unset_bit(0b11010101) == 0b110101\n    set_left_most_unset_bit(0b1101010111) == 0b11010111\n    set_left_most_unset_bit(0b
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     set_left_most_unset_bit(1) == False\nassert     set_left_most_unset_bit(2) == True\nassert     set_left_most_unset_bit(3) == False\nassert     set_left_most_unset_bit(4) == True\nassert     set_left_most_unset_bit(5) == False\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     set_left_most_unset_bit(0x01)==0x01, \"Should return 0x01\"\nassert     set_left_most_unset_bit(0x10)==0x10, \"Should return 0x10\"\nassert     set_left_most_unset_bit(0x11)==0x10, \"Should return 0x10\"\nassert     set_left_most_unset_bit(0x01)==0x01, \"Should return 0x01\"\nassert     set_left_most_unset_bit(0x10)==0x10, \"Should return 0x10\"\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     volume_cone(1,1) == math.pi, \"Expected: math.pi\"\nassert     volume_cone(2,2) == math.pi*(2*2+1)*(2*2-1) / 4, \"Expected: math.pi*(2*2+1)*(2*2-1)/4\"\n\nprint(\"Test passed\")\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert volume_cone(1,3) == 3.1416\nassert volume_cone(2,5) == 52.9856\nassert volume_cone(3,7) == 437.514\nassert volume_cone(4,9) == 644.017\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    print('Volume of a cone =',volume_cone(3,5),'should be: 28.0986')\n    print('Volume of a cone =',volume_cone(2,4),'should be: 9.6842')\n    print('Volume of a cone =',volume_cone(3,3),'should be: 6.2857')\n    print('Volume of a cone =',volume_cone(4,4),'should be: 20.0')\n    print('Volume of a cone =',volume_cone(5,5),'should be: 32.0')\n    print('Volume of a cone =',volume_cone(10,7),'should be: 1672.845')\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     volume_cone(1,0) == 'Volume is undefined.'\nassert     volume_cone(0,0) == 'Volume is undefined.'\nassert     volume_cone(0,1) == 'Volume is undefined.'\nassert     volume_cone(0,5) == 'Volume is undefined.'\nassert     volume_cone(5,5) == 'Volume is undefined.'\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     volume_cone(5,10) == 50.24299999999999, 'incorrect'\nassert     volume_cone(1,1) == 1, 'incorrect'\nassert     volume_cone(2,2) == 4, 'incorrect'\nassert     volume_cone(3,3) == 28.274999999999997, 'incorrect'\n\nprint('Volume of a cone is:'+ str(volume_cone(5,10)) +'units')\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     volume_cone(2,4) == 10.41\nassert     volume_cone(1.1,4) == 2.89\nassert     volume_cone(0,4) == 0\nassert     volume_cone(4.3,1) == 2.64\nassert     volume_cone(1,1) == 1\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     volume_cone(3,4) == 25.4, 'volume_cone(3,4) should be 25.4'\nassert volume_cone(2,3) == 14.3, 'volume_cone(2,3) should be 14.3'\nassert volume_cone(1,2) == 1, 'volume_cone(1,2) should be 1'\nassert volume_cone(10,20) == 14000, 'volume_cone(10,20) should be 14000'\nassert volume_cone(0,0) == 0, 'volume_cone(0,0) should be 0'\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     volume_cone(1,1) == 1.332631578947368\nassert     volume_cone(2,2) == 1.5\nassert     volume_cone(3,2) == 1.66\nassert     volume_cone(4,2) == 1.73\nassert     volume_cone(1.2,2) == 1.25\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     volume_cone(0,0) == 0, \"The value of r or h is less than zero.\"\nassert volume_cone(5,3) == 4.18, \"The volume of a cone of radius 5, height 3 is 4.18.\"\nassert volume_cone(4,5) == 16.62, \"The volume of a cone of radius 4, height 5 is 16.62.\"\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     highest_Power_of_2(1) == 1\nassert     highest_Power_of_2(2) == 2\nassert     highest_Power_of_2(3) == 2\nassert     highest_Power_of_2(4) == 2\nassert     highest_Power_of_2(5) == 2\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     highest_Power_of_2(0) == 0, \"correct\"\nassert     highest_Power_of_2(3) == 2, \"correct\"\nassert     highest_Power_of_2(10) == 2, \"correct\"\nassert     highest_Power_of_2(100) == 3, \"correct\"\nassert     highest_Power_of_2(128) == 3, \"correct\"\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     highest_Power_of_2(5) == 2\nassert     highest_Power_of_2(11) == 4\nassert     highest_Power_of_2(16) == 4\nassert     highest_Power_of_2(17) == 6\nassert     highest_Power_of_2(31) == 8\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     highest_Power_of_2(2)     ==     1\nassert     highest_Power_of_2(4)     ==     2\nassert     highest_Power_of_2(8)     ==     3\nassert     highest_Power_of_2(11)     ==     4\nassert     highest_Power_of_2(15)     ==     4\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n<=0:\n        return -1\n    else:\n        while(n):\n            if n%2==0:\n                n=n/2\n            else:\n                return -1\n    return n\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nhighest_Power_of_2(0) == 0\nassert \nhighest_Power_of_2(1) == 1\nassert \nhighest_Power_of_2(2) == 2\nassert \nhighest_Power_of_2(3) == 3\nassert \nhighest_Power_of_2(4) == 4\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n'''\nA function that takes a string, a character, and a number as input and returns a boolean indicating whether or not the string starts with the character followed by the given number of characters.\n\nFor example:\n\n    string_to_test = 'abcdefghijk'\n    character = 'a'\n    number = 5\n    output = true\n\nYour function should not be case sensitive. It should also work with non-string inputs like numbers, integers, and booleans.\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef main():\n    '''\n    The function may be called as:\n        > python highest_Power_of_2.py\n    '''\n    n = 256\n    print(f'{highest_Power_of_2(n)}')\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     highest_Power_of_2(0) == 0\nassert     highest_Power_of_2(1) == 1\nassert     highest_Power_of_2(2) == 2\nassert     highest_Power_of_2(3) == 3\nassert     highest_Power_of_2(4) == 4\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_lucas(1) == 2\nassert     find_lucas(2) == 3\nassert     find_lucas(3) == 4\nassert     find_lucas(4) == 7\nassert     find_lucas(5) == 11\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_lucas(1) == 2\nassert     find_lucas(2) == 3\nassert     find_lucas(3) == 4\nassert     find_lucas(4) == 5\nassert     find_lucas(5) == 8\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_lucas(1) == 1 \nassert     find_lucas(2) == 3 \nassert     find_lucas(3) == 4 \nassert     find_lucas(4) == 7 \nassert     find_lucas(5) == 11 \n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_lucas(0) == 2\nassert     find_lucas(1) == 1\nassert     find_lucas(2) == 3\nassert     find_lucas(3) == 4\nassert     find_lucas(4) == 7\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef test_find_lucas_pass():\n    '''\n    Test case for find_lucas\n    '''\n    n = 5\n    result = 7\n    assert find_lucas(n) == result\n\ndef test_find_lucas_fail():\n    '''\n    Test case for find_lucas\n    '''\n    n = 0\n    result = 0\n    assert find_lucas(n) == result\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_lucas(1) == 2\nassert     find_lucas(2) == 1\nassert     find_lucas(3) == 4\nassert     find_lucas(4) == 7\nassert     find_lucas(5) == 11\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_lucas(1) == 2\nassert     find_lucas(2) == 3\nassert     find_lucas(3) == 4\nassert     find_lucas(4) == 7\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_string([1,2,3], 'the number is {0}') == 'the number is 1 the number is 2 the number is 3'\nassert     add_string([1,2,3], 'the number is {0}') == 'the number is 1 the number is 2 the number is 3'\nassert     add_string([1,2,3], 'the number is {0}') == 'the number is 1 the number is 2 the number is 3'\nassert     add_string([1,2,3], 'the number is {0}') == 'the number is 1 the number is 2 the number is 3'\nassert     add_string([1,2,3], 'the number is {0}') == 'the number is 1 the number is 2 the number is 3'\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     add_string([1,2,3], \"greetings\") == \"greetings1 greetings2 greetings3\"\nassert     add_string([1,2,3], \"goodbye\") == \"goodbye1 goodbye2 goodbye3\"\nassert     add_string([1,2,3], \"hi\") == \"hi1 hi2 hi3\"\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert add_string([1, 2, 3, 4], 'hello') == ['1', '2', '3', '4']\nassert add_string([1, 2, 3, 4], 'hello', 'hi') == ['1', '2', '3', 'hi']\nassert add_string([1, 2, 3, 4], 'hello', 'hi', 'bye') == ['1', '2', 'hi', 'bye']\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nimport re\n\ndef is_palindrome(string):\n    '''\n    Write a function to check if a string is a palindrome. \n    Note: A palindrome is a word, phrase, or sequence that reads the same backward as forward, \n    e.g., madam or nurses run.\n    '''\n    # check if string is a palindrome, if so return True\n    if re.match(\"^[a-zA-Z0-9]*$\", string):\n        return False\n\n    if re.search(\"[a-zA-Z]\", string) == None:\n        return True\n    else:\n        return False"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     convert_list_dictionary([1,2,3], [\"a\",\"b\",\"c\"],[\"d\",\"e\",\"f\"]) == {\"1\":{\"a\": \"d\",\"b\": \"e\",\"c\": \"f\"}, \"2\":{\"a\": \"d\",\"b\": \"e\",\"c\": \"f\"}, \"3\":{\"a\": \"d\",\"b\": \"e\",\"c\": \"f\"}}\nassert     convert_list_dictionary([1,2,3], [\"a\",\"b\",\"c\"],[\"d\",\"e\",\"f\"]) == {\"1\":{\"a\": \"d\",\"b\": \"e\",\"c\": \"f\"}, \"2\":{\"a\": \"d\",\"b\": \"e\",\"c\": \"f\"}, \"3\":{\"a\": \"d\",\"b\": \"e\",\"c\": \"f\"}}\nassert     convert_list_dictionary([1,2,3], [\"a\",\"b\",\"c\"],[\"d\",\"e\",\"f\"]) == {\"1\":{\"a\": \"d\",\"b\": \"e\",\"c\": \"f\"}, \"2\":{\"a\": \"d\",\"b\": \"e\",\"c\": \"f\"}, \"3\":{\"a\": \"d\",\"b\": \"e\",\"c\": \"f\"}}\nassert     convert_list_dictionary([1,2,3], [\"a\",\"b\",\"c\"],[\"d\",\"e\",\"f\"]) == {\"1\":{\"a\": \"d\",\"b\": \"e\",\"c\": \"f\"}, \"2\":{\"a\": \"d\",\"b\": \"e\",\"c\": \"f\"}, \"3\":{\"a\": \"d\",\"b\": \"e\",\"c\": \"f\"}}"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     convert_list_dictionary(['spam', 'eggs'], ['eggs', 'bacon'], ['ham', 'bacon']) == {'spam': ['eggs', 'bacon'], 'eggs': ['bacon'], 'ham': ['bacon']}\nassert    convert_list_dictionary(['spam', 'eggs'], ['eggs', 'bacon'], ['bacon', 'ham']) == {'spam': ['eggs'], 'eggs': ['bacon'], 'ham': ['bacon']}\nassert    convert_list_dictionary(['spam', 'eggs'], ['eggs', 'bacon'], ['bacon', 'ham','sausage']) == {'spam': ['eggs', 'bacon'], 'eggs': ['bacon'], 'ham': ['bacon'],'sausage': ['bacon']}"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     convert_list_dictionary([{1: 2}, {3: 4}, {5: 6}], [{2: 3}, {4: 5}, {6: 7}], [{7: 8}, {9: 10}, {11: 12}]) == {1: {2: 3}, 3: {4: 5}, 5: {6: 7}, 7: {8: 9}, 9: {10: 11}, 11: {12: {}}}, \"Wrong!\"\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     convert_list_dictionary([{'1':2}, {'1':3}], [1,2], [3,4]) == \\\n    {'1': {'1':2, '1':3}, '2':{'1':3, '1':4}}, 'Wrong result'\nassert     convert_list_dictionary([{'1':2}, {'1':3}], [1,2], [3,4]) == \\\n    {'1': {'1':2, '1':3}, '2':{'1':3, '1':4}}, 'Wrong result'\nassert     convert_list_dictionary([{'1':2, '2':3}], ['1', '2', '3'], ['a','b','c']) == \\\n    {'1': {'2': 3}, '2': {'3': 'a'}, '3': {'2': 'b', '3': 'c'}}, 'Wrong result'\nassert     convert_list_dictionary([{'1':2, '2':3}], ['1', '2', '3'], ['a','b','c']) == \\\n    {'1': {'2': 3}, '2': {'3': 'a'}, '3': {'2': 'b', '3': 'c'}}, 'Wrong result'\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     convert_list_dictionary([1, 2, 3], ['a', 'b', 'c'], ['p', 'q', 'r']) == {1: {'a': 'p', 'b': 'q', 'c': 'r'}, 2: {'a': 'p', 'b': 'q', 'c': 'r'}, 3: {'a': 'p', 'b': 'q', 'c': 'r'}}\nassert convert_list_dictionary([1, 2, 3], ['a', 'b', 'c'], ['p', 'q', 'r']) == {1: {'a': 'p', 'b': 'q', 'c': 'r'}, 2: {'a': 'p', 'b': 'q', 'c': 'r'}, 3: {'a': 'p', 'b': 'q', 'c': 'r'}}\nassert convert_list_dictionary([1, 2, 3], ['a', 'b', 'c'], ['p', 'q', 'r']) == {1: {'a': 'p', 'b': 'q', 'c': 'r'}, 2: {'a': 'p', 'b': 'q', 'c': 'r'}, 3: {'a': 'p', 'b': 'q', 'c': 'r'}}"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     convert_list_dictionary([1, 2, 3, 4], ['a', 'b', 'c', 'd'], ['m', 'n', 'o', 'p']) == {1: 'a', 2: 'b', 3: 'c', 4: 'd','m': 'a', 'n': 'b', 'o': 'c', 'p': 'd'}\nassert convert_list_dictionary([1, 2, 3, 4, 5], ['a', 'b', 'c', 'd'], ['m', 'n', 'o', 'p']) == {1: 'a', 2: 'b', 3: 'c', 4: 'd', 5:'m', 'n': 'b', 'o': 'c', 'p': 'd'}\nassert convert_list_dictionary([1, 2, 3, 4, 5, 6], ['a', 'b', 'c', 'd'], ['m', 'n', 'o', 'p']) == {1: 'a', 2: 'b', 3: 'c', 4: 'd', 5:'m', 6: 'n', 'n': 'b', 'o': 'c', 'p': 'd'}\nassert convert_list_dictionary([1, 2, 3, 4, 5, 6, 7], ['a', 'b', 'c', 'd'], ['m', 'n', 'o', 'p']) == {1: 'a', 2: 'b', 3: 'c', 4: 'd', 5:'m', 6: 'n', 7: 'o', 'p': 'd', 'n': 'b', 'o': 'c', 'p': 'd'}\nassert convert_list_dictionary([1, 2, 3, 4, 5, 6, 7, 8], ['a', 'b', 'c', 'd'], ['m', 'n', 'o', 'p']) == {1: 'a', 2: 'b', 3: 'c', 4: 'd', 5:'m', 6: 'n', 7: 'o', 8: 'p', 'p': 'd', 'n': 'b', 'o': 'c','m': 'a', 'a': 'a'}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     convert_list_dictionary([], [], []) == {}\nassert     convert_list_dictionary([1, 2, 3], [], []) == {}\nassert     convert_list_dictionary([], [1, 2, 3], []) == {}\nassert     convert_list_dictionary([1, 2, 3], [1, 2, 3], [1, 2, 3]) == {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {1: {2: {3: {"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(\"The output of convert_list_dictionary is : \", convert_list_dictionary([1,2,3,4,5],['a','b','c','d','e'],[\"apple\",\"banana\",\"grapes\"]))\nassert \nprint(\"The output of convert_list_dictionary is : \", convert_list_dictionary([1,2,3,4,5],['a','b','c','d','e'],[\"apple\",\"banana\",\"grapes\"]))\nassert \nprint(\"The output of convert_list_dictionary is : \", convert_list_dictionary([1,2,3,4,5],['a','b','c','d','e'],[\"apple\",\"banana\",\"grapes\"]))\nassert \nprint(\"The output of convert_list_dictionary is : \", convert_list_dictionary([1,2,3,4,5],['a','b','c','d','e'],[\"apple\",\"banana\",\"grapes\"]))\nassert \nprint(\"The output of convert_list_dictionary is : \", convert_list_dictionary([1,2,3,4,5],['a','b','c','d','e'],[\"apple\",\"banana\",\"grapes\"]))\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_max_sum (3) == 3\nassert     get_max_sum (5) == 10\nassert     get_max_sum (7) == 15\nassert     get_max_sum (9) == 21\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert get_max_sum (3) == 8\nassert get_max_sum (5) == 18\nassert get_max_sum (7) == 20\nassert get_max_sum (9) == 25\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_max_sum (1) == 1\nassert     get_max_sum (2) == 2\nassert     get_max_sum (3) == 3\nassert     get_max_sum (4) == 6\nassert     get_max_sum (5) == 10\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_max_sum(1) == 1\nassert     get_max_sum(2) == 3\nassert     get_max_sum(3) == 6\nassert     get_max_sum(4) == 10\nassert     get_max_sum(5) == 15\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    get_max_sum(1) == 1\n    get_max_sum(2) == 3\n    get_max_sum(3) == 7\n    get_max_sum(4) == 13\n    get_max_sum(5) == 19\n    get_max_sum(6) == 23\n    get_max_sum(7) == 28\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_max_sum(0) == 0\nassert     get_max_sum(1) == 1\nassert     get_max_sum(2) == 3\nassert     get_max_sum(3) == 7\nassert     get_max_sum(4) == 14\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_max_sum(2) == 1\nassert     get_max_sum(4) == 4\nassert     get_max_sum(6) == 9\nassert     get_max_sum(10) == 19\nassert     get_max_sum(20) == 47\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_max_sum(10) == 55\nassert     get_max_sum(15) == 140\nassert     get_max_sum(100) == 200\nassert     get_max_sum(115) == 204\n\ndef get_max_sum_naive(n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    pass\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_max_sum(1) == 0 \nassert     get_max_sum(2) == 1 \nassert     get_max_sum(3) == 2 \nassert     get_max_sum(4) == 4 \nassert     get_max_sum(5) == 7 \n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_length_list([1,2,3,4,5]) == 5, 'Test #1 Failed'\nassert     max_length_list([1,2,3]) == 3, 'Test #2 Failed'\nassert     max_length_list([1,2,3,4,5]) == 5, 'Test #3 Failed'\nassert     max_length_list([]) == 0, 'Test #4 Failed'\nassert     max_length_list([1,2,3,4]) == 4, 'Test #5 Failed'\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_length_list([1,2,3,4,5,6]) == 6, \"Wrong answer\"\nassert     max_length_list([1,2,3,4,5,6,7]) == 7, \"Wrong answer\"\nassert     max_length_list([1,2,3,4,5,6,7,8,9]) == 9, \"Wrong answer\"\nassert     max_length_list([-1,2,3,-4,5,6]) == 6, \"Wrong answer\"\nassert     max_length_list([-1,2,3,-4,5,6,7]) == 7, \"Wrong answer\"\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_length_list([\"hello\", \"hi\", \"py\"]) == [\"hello\", \"hi\"]\nassert     max_length_list([\"hello\", \"hi\", \"py\", \"hello\", \"hi\", \"py\"]) == [\"hello\", \"py\"]\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert \nassert "
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_length_list([1, 2, 3, 4]) == [4]\nassert     max_length_list([0, 1, 2, 3]) == [3]\nassert     max_length_list([-10, -4, -3, -2]) == [-2]\nassert     max_length_list([-10, -4, -3, -2, -1]) == [-1]\nassert     max_length_list([-10, -4, -3, -2, -1, 0]) == [-1]\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert max_length_list([]) == []\nassert max_length_list([1,2]) == [1, 2]\nassert max_length_list([1,2,3]) == [1, 2, 3]\nassert max_length_list([1,2,3,4]) == [1, 2, 3, 4]\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_length_list(\n            [\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B', 'C'],\n                ['A', 'B'"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_length_list([1, 2, 3]) == 3, \"wrong answer\"\nassert     max_length_list([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9, \"wrong answer\"\nassert     max_length_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 13, \"wrong answer\"\nassert     max_length_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(max_length_list([])) # => None\nprint(max_length_list(['hello'])) # => ['hello']\nprint(max_length_list(['hello', 'world'])) # => ['hello', 'world']\nprint(max_length_list(['hello', 'world', 'hi'])) # => ['hello', 'world']\nprint(max_length_list(['hello', 'world', 'hi', 'bye'])) # => ['hello', 'world']\nprint(max_length_list(['hello', 'world', 'hi', 'bye', 'hi'])) # => ['hello', 'world']\nprint(max_length_list(['hello', 'world', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi'])) # => ['hello', 'world', 'hi', 'bye']\nprint(max_length_list(['hello', 'world', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye'])) # => ['hello', 'world', 'hi', 'bye']\nprint(max_length_list(['hello', 'world', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', 'bye', 'hi', "
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_distinct((1,2,3,1)) == True\nassert    check_distinct((1,2,3,4)) == False\nassert    check_distinct((2,2,3,4)) == True\n\n\n\ndef join_strings(string1, string2):\n    '''\n    Write a function to join two strings.\n    '''\n    pass\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_distinct([1,2,3]) == True, \"Expected True\"\nassert     check_distinct([1,2,3,2]) == False, \"Expected False\"\nassert     check_distinct([1,2,2]) == True, \"Expected True\"\nassert     check_distinct([]) == True, \"Expected True\"\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_distinct([1, 1, 1, 2, 2, 2]) == True\nassert     check_distinct([1, 2, 3, 1, 2, 3]) == False\nassert     check_distinct([1, 1, 1, 2, 2, 2, 3, 3, 3]) == False\nassert     check_distinct(['a', 'a', 'a', 'a', 'b', 'b', 'c', 'c', 'c']) == True\nassert     check_distinct(['a', 'a', 'a', 'b', 'b', 'c', 'c', 'c']) == False\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_distinct((1,2,3,4))     ==     True\nassert     check_distinct((1,2,3,3))     ==     False\nassert     check_distinct((1,2,3,4,3))     ==     False\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(check_distinct((\"a\", \"b\", \"c\", \"a\")))\nprint(check_distinct((\"a\", \"b\", \"c\", \"d\", \"a\")))\nprint(check_distinct((\"a\", \"b\", \"c\", \"d\", \"a\")))\nprint(check_distinct((\"a\", \"b\", \"c\", \"a\")))"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_distinct((0,0,0)) == True, 'zero is a duplicate'\nassert     check_distinct((1,2,3)) == True, 'all distinct'\nassert     check_distinct((0,0,0,0)) == False, 'all duplicates'\nassert     check_distinct((1,2,3,1)) == False, 'duplicate'\nassert     check_distinct((1,2,3,1,2,3)) == False, 'duplicate'\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_distinct([1,2,3,4,4,5]) == True, \"Error Message: Tuple contains duplicates\"\nassert     check_distinct([1,2,3,4,4,5,6]) == False, \"Error Message: Tuple contains duplicates\"\nassert     check_distinct([1,2,3,4,4]) == True, \"Error Message: Tuple contains duplicates\"\nassert     check_distinct([1,2,3,4,4,5,6,7]) == True, \"Error Message: Tuple contains duplicates\"\nassert     check_distinct([1,2,3,4,4,5]) == True, \"Error Message: Tuple contains duplicates\"\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_distinct((1,2,3,4,5)) == True, 'incorrect result'\nassert     check_distinct((1,2,3,4,5,5)) == False, 'incorrect result'\nassert     check_distinct((1,2)) == False, 'incorrect result'\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_distinct((1,2,3,4,4,4,4)) == True, \"Test 1 Failed\"\nassert     check_distinct((1,2,3,4,4,4,4,4,3,2,1)) == True, \"Test 2 Failed\"\nassert     check_distinct((1,2,3,4,4,4,4,4,3,2,1,2,3,4,4,4)) == True, \"Test 3 Failed\"\nassert     check_distinct((1,2,3,4,4,4,4,4,3,2,1,2,3,4,4,4,5,5,5,5)) == False, \"Test 4 Failed\"\nassert     check_distinct((1,2,3,4,4,4,4,4,3,2,1,2,3,4,4,4,5,5,5,5,6,6,6,6)) == False, \"Test 5 Failed\"\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef second_longest_word(s):\n    '''\n    Write a python function to find the longest word in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     first_non_repeating_character('sdfg') == 'f', \"Test should be fail\"\nassert     first_non_repeating_character('google') == 'o', \"Test should be fail\"\nassert     first_non_repeating_character('abra') == 'a', \"Test should be fail\"\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     first_non_repeating_character(\"google.com\") == 'l'\nassert     first_non_repeating_character(\"hello\") == 'h'\nassert     first_non_repeating_character(\"google.co.in\") == 'o'\nassert     first_non_repeating_character(\"google.co.in\") == 'o'\nassert     first_non_repeating_character(\"google.co.in\") == 'o'\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     first_non_repeating_character(\"e\") == 'e', \"First non-repeated character should be 'e'\"\nassert     first_non_repeating_character(\"abc\") == 'a', \"First non-repeated character should be 'a'\"\nassert     first_non_repeating_character(\"abcabcabc\") == 'c', \"First non-repeated character should be 'c'\"\nassert     first_non_repeating_character(\"ababc\") == 'b', \"First non-repeated character should be 'b'\"\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     first_non_repeating_character('hello') == 'e'\nassert     first_non_repeating_character('ababbc') == 'c'\nassert     first_non_repeating_character('ababcbabc') == 'c'\nassert     first_non_repeating_character('ababcbabcghi') == 'c'\nassert     first_non_repeating_character('abcabc') == 'a'\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     first_non_repeating_character('') == -1\nassert     first_non_repeating_character('a') == -1\nassert     first_non_repeating_character('bb') == -1\nassert     first_non_repeating_character('aabb') == -1\nassert     first_non_repeating_character('aab') == 1\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     first_non_repeating_character('abccdef')     == 'c'\nassert     first_non_repeating_character('abccde')     == 'c'\nassert     first_non_repeating_character('abc')         == 'a'\nassert     first_non_repeating_character('abcab')     == 'a'\nassert     first_non_repeating_character('abcabcabc')     == 'c'\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     first_non_repeating_character(\"Hello World\") == \"e\", \"Wrong output.\"\nassert     first_non_repeating_character(\"abcdefg\") == \"e\", \"Wrong output.\"\nassert     first_non_repeating_character(\"hihihi\") == \"h\", \"Wrong output.\"\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     first_non_repeating_character(\"aacaaa\") == 1, 'First non-repeated character should be 1'\nassert     first_non_repeating_character(\"aacccbb\") == 2, 'First non-repeated character should be 2'\nassert     first_non_repeating_character(\"aacccbbbb\") == -1, 'First non-repeated character should be -1'\nassert     first_non_repeating_character(\"\") == -1, 'Empty string should return -1'\nassert     first_non_repeating_character(\"aaacccbbbbb\") == -1, 'More than one non-repeated character should return -1'\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_char('HelloWorld')     == True \nassert     check_char('HelloWorl')     == True \nassert     check_char('Helloworld')     == False \nassert     check_char('HelloWorld!')     == False \nassert     check_char('')                 == False \n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    s = \"ab\"\n    print(f\"{s} starts with {check_char(s)}\")\n    s = \"ac\"\n    print(f\"{s} starts with {check_char(s)}\")\n    s = \"ad\"\n    print(f\"{s} starts with {check_char(s)}\")\n    s = \"a\"\n    print(f\"{s} starts with {check_char(s)}\")\n    s = \"\"\n    print(f\"{s} starts with {check_char(s)}\")\n    s = \"A\"\n    print(f\"{s} starts with {check_char(s)}\")\n    s = \"aaaa\"\n    print(f\"{s} starts with {check_char(s)}\")\n\n    # Test\n    assert check_char(\"ab\") == True\n    assert check_char(\"ac\") == True\n    "
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_char('aa') == True, \"Not correct\"\nassert     check_char('abc') == True, \"Not correct\"\nassert     check_char('abcd') == False, \"Not correct\"\nassert     check_char('abcba') == True, \"Not correct\"\nassert     check_char('abcdabc') == True, \"Not correct\"\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     (check_char('abc')==True) and (check_char('abcx')==False), 'check_char is not working'\nassert check_char('cac')==True and check_char('cac')==False, 'check_char is not working'\nassert check_char('abcdefghijklmnopqrstuvwxyz')==True and check_char('abcdefghijklmnopqrstuvwxyz')==False, 'check_char is not working'\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert check_char('abcd') == True\nassert check_char('abc') == False\n\ndef check_char_regex(string):\n    '''\n    Write a function to check whether the given string contains only alphabets.\n    '''\n    pass\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_char('H') == True\nassert     check_char('H') == False\nassert     check_char('Habc') == False\nassert     check_char('abdH') == True\n\ndef check_double(string):\n    '''\n    Write a function to check whether the given string contains only double characters or not.\n    '''\n    pass\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_char('the') == True, \n        'incorrect test_case'\nassert     check_char('the.what?') == True, \n        'incorrect test_case'\nassert     check_char('ab.ab') == False, \n        'incorrect test_case'\nassert     check_char('ab.ab') == True, \n        'incorrect test_case'\nassert     check_char('ab.ab') == True, \n        'incorrect test_case'\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef check_palidrome(string): \n    '''\n    Write a function to check whether the given string is palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(\"All tests passed\""
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert median_numbers(1,2,3) == 2\nassert median_numbers(1,2,4) == 2.5\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     median_numbers(1,2,3) == 2.5\nassert     median_numbers(-1,-2,-3) == -2\n\ndef median_numbers_recursive(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    pass\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     median_numbers(1,2,3) == (2+1)/2\nassert     median_numbers(1,3,2) == (2+3)/2\nassert     median_numbers(2,1,3) == (3+1)/2\nassert     median_numbers(2,3,1) == (3+2)/2\nassert     median_numbers(3,2,1) == (1+2)/2\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert median_numbers(1,2,3) == 2.5\nassert median_numbers(1,2,3) == 2.5\nassert median_numbers(1,2,3) == 2.5\nassert median_numbers(1,2,3) == 2.5\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert median_numbers(1,2,3) == 2\nassert median_numbers(1,2,3) == 2\nassert median_numbers(1,2,3) == 2\nassert median_numbers(1,2,3) == 2\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     median_numbers(2,3,4) == 2.5, \"Wrong median number\"\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint('check pass')\n\nprint('\\n## 7. List Comprehensions ##')\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_of_digits([1,2,3,4,5,6,7]) == 10,'sum_of_digits'\nassert     sum_of_digits([1,2,3,4,5,6,7,8]) == 13,'sum_of_digits'\nassert     sum_of_digits([1,2,3,4,5,6,7,8,9]) == 18,'sum_of_digits'\nassert     sum_of_digits([1,2,3,4,5,6,7,8,9,10]) == 30,'sum_of_digits'\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert sum_of_digits([1, 2, 3, 4, 5]) == 15\nassert sum_of_digits([1, 22, 333, 4444, 55555,666666,7777777]) == 1174\nassert sum_of_digits([-1, -22, -3333, -44444, -55555, -666666, -7777777]) == -3645\nassert sum_of_digits([0, 0, 0, 0, 0]) == 0\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_of_digits([0, 2, 4, 3]) == 5\nassert     sum_of_digits([10, 9, 9, 9]) == 36\nassert     sum_of_digits([0, 0, 0, 0]) == 0\n\n\n'''\nTask 5:\nYour task is to write a function that returns the sum of all the items in a list.\n\nNote: If you are given a nested list, your code should traverse the nested list and add up all the numbers.\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_of_digits([1,2,3,4,5]) == 10, \"Should be 10\"\nassert sum_of_digits([1234, 5678, 91012, 90123]) == 10, \"Should be 10\"\nassert sum_of_digits([1012, 1012, 91012, 90123, 1012, 1012, 1012, 1012, 1012, 1012]) == 18, \"Should be 18\"\nassert sum_of_digits([1,2,3,4,5,6,7,8,9]) == 15, \"Should be 15\"\nassert sum_of_digits([]) == 0, \"Should be 0\"\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n'''\n4. \nThe sum of the digits of n in n = d1 + d2 + d3 + d4 +... + dn\n'''\ndef sum_of_digits(n):\n    pass\n    # your code here\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert sum_of_digits([1,2,3]) == 6\nassert sum_of_digits([0,1,2]) == 3\nassert sum_of_digits([]) == 0\nassert sum_of_digits([0,1,2,3,4,5,6,7,8,9]) == 21\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     bitwise_xor((0, 0), (0, 0)) == (0, 0)\nassert     bitwise_xor((0, 1), (0, 0)) == (1, 0)\nassert     bitwise_xor((1, 1), (0, 0)) == (1, 0)\nassert     bitwise_xor((1, 0), (0, 0)) == (0, 1)\nassert     bitwise_xor((0, 1), (1, 1)) == (1, 0)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     bitwise_xor((1, 1), (1, 0)) == (0, 1)\nassert     bitwise_xor((0, 1), (1, 0)) == (1, 1)\nassert     bitwise_xor((1, 0), (0, 1)) == (1, 0)\nassert     bitwise_xor((0, 1), (1, 1)) == (1, 0)"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     bitwise_xor(test_tup1, test_tup2) == (False, False)\nassert     bitwise_xor(test_tup2, test_tup1) == (True, True)\nassert     bitwise_xor((False, False), (True, True)) == (False, True)\nassert     bitwise_xor((False, True), (True, True)) == (False, True)\nassert     bitwise_xor((True, False), (True, True)) == (True, False)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nbitwise_xor((0, 1, 2), (3, 4, 5)) == (0, 1, 0)\nassert \nbitwise_xor((1, 1, 1), (2, 2, 2)) == (0, 1, 1)\nassert \nbitwise_xor((0, 0, 0), (0, 0, 0)) == (0, 0, 0)\nassert \nbitwise_xor((1, 1, 1), (0, 0, 0)) == (1, 1, 1)\n\ndef bitwise_and(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise and operation across the given tuples.\n    '''\n    pass\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     bitwise_xor((0,0),(0,0)) == (0,0)\nassert     bitwise_xor((0,0),(1,1)) == (1,1)\nassert     bitwise_xor((0,1),(1,0)) == (1,1)\nassert     bitwise_xor((0,1),(0,0)) == (1,0)\nassert     bitwise_xor((1,1),(0,0)) == (1,1)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     bitwise_xor((True,False),(False,True)) == (False,True)\nassert     bitwise_xor((True,False),(True,True)) == (False,False)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nbitwise_xor((10, 5), (15, 0)) == 5\n\nprint(\"Test Successful!\")"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nbitwise_xor(\n    (1,2),\n    (1,2)\n) == (1, 0)\n\nprint('PASSED!')\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     bitwise_xor(\n        (True, False), (False, True) ) ==     (False, True)\nassert     bitwise_xor(\n        (False, False), (False, True) ) ==     (False, True)\nassert     bitwise_xor(\n        (False, True), (True, False) ) ==     (False, True)\nassert     bitwise_xor(\n        (True, True), (True, False) ) ==     (False, True)\nassert     bitwise_xor(\n        (False, False), (False, False) ) ==     (False, False)\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_freq([('a', 3), ('b', 2), ('c', 2)]) == 2\nassert     extract_freq([('a', 3), ('b', 2), ('c', 2), ('d', 2), ('e', 3)]) == 3\n\ndef extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # base case\n    if len(test_list) == 1:\n        return 1\n\n    count = 0\n    for i in range(0, len(test_list) - 1):\n        count += 1\n        test_list[i+1] = test_list[i]\n\n    return count\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_freq([1, 2, 3, 1, 2, 3]) == 5\nassert     extract_freq([]) == 0\nassert     extract_freq([1]) == 1\nassert     extract_freq([1, 2, 2, 3]) == 4\nassert     extract_freq([1, 2, 1]) == 1\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_freq([(1,), (1,), (1,), (1,), (1,), (2,), (2,), (2,), (2,), (2,), (3,), (3,), (3,), (3,), (3,), (3,), (3,), (3,), (3,), (3,), (3,), (4,), (4,), (4,), (4,), (4,), (5,), (5,), (5,), (5,), (5,), (6,), (6,), (6,), (6,), (6,), (6,), (6,), (6,), (7,), (7,), (7,), (7,), (7,), (8,), (8,), (8,), (8,), (8,), (9,), (9,), (9,), (9,), (9,), (10,), (10,), (10,), (10,), (10,), (11,), (11,), (11,), (11,), (11,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (12,), (13,), (13,), (13,), (13,), (13,), (14,), (14,), (14,), (14,), (14,), (14,), (15,), (15,), (15,), (15,), (15,), (16,), (16,), (16,), (16,), (16,), (16,), (16,), (17,), (17,), (17,), (17,), (17,), (17,), (17,), (17,), (18,), (18,), (18,), (18,), (18,), (18,), (18,), (19,), (19,), (19,), (19,), (19,), (19,), (19,), (19,), (20,), (20,), (20,), (20,), (20,), (20,), (20,), (20,), (20,), (20,), (21,), (21,), (21,), (21,), (21,), (21,), (21,), (21,), (21,), (22,), (22,), (22,), (22,), (22,), (22,), (22,), (22,), (22,), (23,), (23,), (23,), (23,), (23,), (23,), (23,), (23,), (23,), (23,), (23,), (23,), (24,), (24,), (24,), (24,), (24,), (24,), (24,), (24,), (24,), (24,), (24,), (24,), (24,), (24,), (24,), (25,), (25,), (25,), (25,), (25,), (25,), (25,), (25,), (25,), (25,), (26,), (26,), (26,), (26,), (26,), (26,), (26,), (26,), (26,), (26,), (26,), (26,), (26,), (26,), (26,), (26,), (26,), (26,), (26,), (26,), (26,), (27,), (27,), (27,), (27,), (27,), (27,), (27,), (27,), (27,), (27,), (27,), (27,), (27,), (27,), (27,), (27,), (27,), (27,), (27,), (27,), (27,), (28,), (28,), (28,), (28,), (28,), (28,), (28,), (28,), (28,), (28,), (28,), (28,), (28,), (28,), (28,), (28,), (28,), (28,), (28,), (28,), (28,), (28,), (28,), (28,), (28,), (28,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,), (29,)"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_freq([(\"a\",\"b\",\"c\",\"d\"),(\"a\",\"a\",\"b\",\"d\"),(\"b\",\"a\",\"d\",\"e\")]) == 1, \"Not expected output\"\nassert     extract_freq([]) == 0, \"Not expected output\"\nassert     extract_freq([(\"a\",\"b\",\"c\",\"d\"),(\"a\",\"a\",\"b\",\"d\"),(\"b\",\"a\",\"d\",\"e\")]) == 1, \"Not expected output\""
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_freq([('a', 'b', 'c'), ('d', 'e'), ('a', 'b'), ('a', 'c'), ('d', 'a')]) == 3, \"Fail\"\nassert extract_freq([('a', 'b', 'c'), ('d', 'e'), ('a', 'b'), ('a', 'c'), ('d', 'a')]) == 2, \"Fail\"\nassert extract_freq([('a', 'b', 'c'), ('d', 'e'), ('a', 'b'), ('a', 'c'), ('d', 'a')]) == 3, \"Fail\"\nassert extract_freq([('a', 'b', 'c'), ('d', 'e'), ('a', 'b'), ('a', 'c'), ('d', 'a')]) == 2, \"Fail\"\nassert extract_freq([('a', 'b', 'c'), ('d', 'e'), ('a', 'b'), ('a', 'c'), ('d', 'a')]) == 4, \"Fail\"\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_freq([[1,2,3], [1,2,3], [1,2,3]]) == 1\nassert extract_freq([[1,2,3], [1,2,3], [1,2,3], [1,2,3]]) == 1\nassert extract_freq([[1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3]]) == 1\nassert extract_freq([[1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3]]) == 1\nassert extract_freq([[1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3], [1,2,3]]) == 1\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_freq([('a','b'),('c','d'),('a','b'),('a','b')]) == 2\nassert     extract_freq([('a','b'),('a','b'),('a','b'),('a','b')]) == 1\nassert     extract_freq([]) == 0\nassert     extract_freq([('a','b'),('a','b'),('a','b'),('a','b')]) == 1\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_freq([]) == 0, \"Empty list\"\nassert     extract_freq([[]]) == 0, \"Empty list\"\nassert     extract_freq([[1]]) == 1, \"Single element\"\nassert     extract_freq([[1, 2]]) == 2, \"Two elements\"\nassert     extract_freq([[1, 2, 3]]) == 3, \"Three elements\"\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     add_nested_tuples((('a', 1), ('b', 2)),\n                (('a', 3), ('b', 4))) == (('a', 4), ('b', 6))\nassert     add_nested_tuples((('a', 1), ('b', 2)),\n                (('c', 3), ('d', 4))) == (('c', 3), ('d', 4))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add_nested_tuples((\"a\", \"b\"), (\"c\", \"d\")) ==     (\"a\", (\"c\", \"d\"))\nassert     add_nested_tuples((\"a\", (\"b\", (\"c\", \"d\"))), (\"e\", (\"f\", \"g\"))) ==     (\"a\", (\"b\", (\"c\", \"d\")), (\"e\", (\"f\", \"g\")))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add_nested_tuples((1,2),(3,4)) == (1,2,3,4)\nassert     add_nested_tuples((1,2,3),(4,5,6)) == (1,2,3,4,5,6)"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add_nested_tuples((1,2,3),(4,5,6)) == (1,2,3,4,5,6), \"add_nested_tuples(tup1,tup2) is not working\"\n\ndef check_tuple(test_tup):\n    '''\n    Write a function to check if the tuple is empty or not.\n    '''\n    pass\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     (add_nested_tuples((1,2),(3,4))    ==    (4,6)), \\\n    \"Expected: (4,6), Got: %s\" %(str(add_nested_tuples((1,2),(3,4))))\nassert     (add_nested_tuples((1,2),(3,4,5))    ==    (4,6,7)), \\\n    \"Expected: (4,6,7), Got: %s\" %(str(add_nested_tuples((1,2),(3,4,5))))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     add_nested_tuples( (10, 20, 30), (40, 50, 60)) == (10, 40, 70)\nassert     add_nested_tuples( (10, 20, 30), (40, 50, 50)) == (50, 40, 60)\nassert     add_nested_tuples( (10, 20, 30), (40, 50, 60)) == (50, 60, 70)\nassert     add_nested_tuples( (10, 20, 30), (40, 50, 60)) == (50, 60, 70)\nassert     add_nested_tuples( (10, 20, 30), (40, 50, 60)) == (50, 60, 70)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     add_nested_tuples((1,2,3,4,5,6),(7,8,9,10,11,12)) == ((1+7,2+8,3+9,4+10,5+11,6+12),)\n\ndef add_nested_list_tuples(test_list1, test_list2):\n    '''\n    Write a function to perform index wise addition of list elements in the given two nested list.\n    '''\n    pass\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     add_nested_tuples((1,2,3,4),(3,4,5)) == (4,6,7,8)\nassert     add_nested_tuples((1,2,3,4),(3,4,5)) == (4,6,7,8)\nassert     add_nested_tuples((1,2,3,4),(3,4,5,6)) == (4,6,7,8)"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     add_nested_tuples((\"a\", \"b\", \"c\"), (\"a\", \"b\", \"c\")) == ((\"a\", \"b\", \"c\"), (\"a\", \"b\", \"c\"))\nassert     add_nested_tuples((\"a\", \"b\", \"c\"), (\"a\", \"c\", \"b\")) == ((\"a\", \"c\", \"b\"), (\"a\", \"c\", \"b\"))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add_nested_tuples((0,1),(2,3)) == (0,2), \"Should be (0,2)\"\nassert     add_nested_tuples((1,2),(3,4)) == (1,4), \"Should be (1,4)\"\nassert     add_nested_tuples((),(2,3)) == (2,3), \"Should be (2,3)\"\nassert     add_nested_tuples((1,2),()) == (1,2), \"Should be (1,2)\"\nassert     add_nested_tuples((2,3),()) == (2,3), \"Should be (2,3)\"\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     minimum(3,2) == 1\nassert     minimum(-1,2) == -1\nassert     minimum(2,-1) == 1\nassert     minimum(-3,0) == -3\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert minimum(2,3) == 2\nassert minimum(3,2) == 2\nassert minimum(2,2) == 2\nassert minimum(4,2) == 2\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \na = minimum(10,20)\nassert a == 10\nprint('Test 1 passed')\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert minimum(7,4) == 4\nassert minimum(7,2) == 2\nassert minimum(7,7) == 7\nassert minimum(6,3) == 3\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     minimum(5,2) == 2\nassert minimum(5,-2) == -2\nassert minimum(-2,5) == -2\nassert minimum(10,-2) == 10"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\na=int(input(\"enter a number\"))\nb=int(input(\"enter a number\"))\n\nprint(minimum(a,b))\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     minimum(10,20) == 10, \"minimum(10,20) = {0}\".format(minimum(10,20))\nassert     minimum(20,10) == 10, \"minimum(20,10) = {0}\".format(minimum(20,10))\nassert     minimum(20,30) == 20, \"minimum(20,30) = {0}\".format(minimum(20,30))\n\ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    pass\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint minimum(3,4) == 1\nassert minimum(4,3) == 1\nprint minimum(4,4) == 0\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert check_tuplex((\"abc\",1,2,\"xyz\"),(\"abc\",1,2,\"xyz\"))\nassert not check_tuplex((1,2,3),(1,2,3))\n\nprint(\"You have successfully passed all the tests\""
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_tuplex((1,2,3),(1,2,3)) == True\nassert     check_tuplex((1,2,3),(1,4,3)) == False\nassert     check_tuplex((1,2,3),(1,2,4)) == False\nassert     check_tuplex((1,2,3),(2,2,3)) == False\nassert     check_tuplex((1,2,3),(1,1,3)) == True\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_tuplex((1,2,3),(1,2,3)) == True\nassert     check_tuplex((1,2,3),(3,4,5)) == False\nassert     check_tuplex((1,2,3),()) == False\nassert     check_tuplex((1,2,3),1) == True\nassert     check_tuplex((1,2,3),(4,5,6)) == False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert check_tuplex((1,2,3),(1,2,3)) == True\nassert check_tuplex((1,2,3),(4,5,6)) == False\nassert check_tuplex((1,2,3),(4,5,6,7)) == False\nassert check_tuplex((1,2,3),(4,5,6,7,8)) == False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_tuplex(('a','b','c'),('a','b','c')), \"tuple and tuple1 are equal, check_tuplex should return True\"\nassert     check_tuplex(('a','b','c'),('a','b','c','d')), \"tuple and tuple1 are not equal, check_tuplex should return False\"\nassert     check_tuplex(('a','b','c'),('a','b','c','d')), \"tuple and tuple1 are equal, check_tuplex should return True\"\nassert     check_tuplex(('a','b','c'),('a','b','c',) ), \"tuple and tuple1 are equal, check_tuplex should return True\"\nassert     check_tuplex(('a','b','c'),('a','b','c','d')), \"tuple and tuple1 are equal, check_tuplex should return True\"\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_tuplex((1,2),(1,2)) == True,    \"check_tuplex(tuple(1,2),tuple(1,2)) should be True.\" \nassert     check_tuplex((1,2),(2,2)) == True,    \"check_tuplex(tuple(1,2),tuple(2,2)) should be True.\" \nassert     check_tuplex((1,2,3),(1,2)) == False,    \"check_tuplex(tuple(1,2,3),tuple(1,2)) should be False.\" \nassert     check_tuplex((1,2,3),(1,2,2)) == False,    \"check_tuplex(tuple(1,2,3),tuple(1,2,3)) should be False.\" \nassert     check_tuplex((1,2,3),(1,2,3,2)) == True,    \"check_tuplex(tuple(1,2,3),tuple(1,2,3,2)) should be True.\" \n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert check_tuplex(('a','b','c'),('a','b','c')) == True\nassert check_tuplex(('a','b','c'),('c','a','b')) == False\nassert check_tuplex(('a','b','c'),('a','b','c','d')) == False"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_tuplex((1,),(1,)) == True\nassert     check_tuplex((1,2,3,4),(1,2,3,4)) == True\nassert     check_tuplex((1,2,3,4),(1,2,5,6)) == False\nassert     check_tuplex((1,2,3),(1,2,3,4,5,6)) == True\nassert     check_tuplex((1,2),(1,2,3,4,5,6)) == False\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n'''\nIf the parity of a given number is even then return 1, if it is odd then return -1.\n'''\n\ndef find_Parity(x):\n    # Write your code here\n    if x%2==0:\n        return 1\n    else:\n        return -1\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_Parity(3)     ==    1 \nassert     find_Parity(4)     ==    0 \nassert     find_Parity(1)     ==    -1 \nassert     find_Parity(0)     ==    0 \n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Parity(2) == True, \"error in find_Parity\"\nassert     find_Parity(1) == False, \"error in find_Parity\"\nassert     find_Parity(3) == True, \"error in find_Parity\"\nassert     find_Parity(5) == True, \"error in find_Parity\"\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Parity(5) == False, \"Wrong answer, please check your code\"\nassert     find_Parity(6) == True, \"Wrong answer, please check your code\"\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Parity(0) == True\nassert     find_Parity(1) == False\nassert     find_Parity(-1) == False\nassert     find_Parity(-2) == False\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_Parity(5) == False, 'correct'\nassert     find_Parity(1) == True, 'correct'\nassert     find_Parity(2) == False, 'correct'\nassert     find_Parity(3) == True, 'correct'\nassert     find_Parity(4) == True, 'correct'\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Parity(3) == 'odd', 'Wrong Answer :('\nassert     find_Parity(4) == 'even', 'Wrong Answer :('\nassert     find_Parity(0) == 'even', 'Wrong Answer :('\nassert     find_Parity(-1) == 'odd', 'Wrong Answer :('\nassert     find_Parity(-2) == 'even', 'Wrong Answer :('\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Parity(4) == True\nassert     find_Parity(8) == True\nassert     find_Parity(15) == True\nassert     find_Parity(16) == False\nassert     find_Parity(42) == True\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     rearrange_bigger(123) == 321\nassert     rearrange_bigger(12) == 21\nassert     rearrange_bigger(12321) == 321\nassert     rearrange_bigger(11111) == 11111\nassert     rearrange_bigger(2112) == 2212\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     rearrange_bigger(12) == 21\nassert     rearrange_bigger(21) == 12\nassert     rearrange_bigger(101) == 110\nassert     rearrange_bigger(0) == 0\nassert     rearrange_bigger(100) == 100\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rearrange_bigger(12) == 21\nassert rearrange_bigger(513) == 531\nassert rearrange_bigger(1435) == 4325\nassert rearrange_bigger(87654) == 98765\nassert rearrange_bigger(167890) == 198987\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     rearrange_bigger(234) == 321\nassert     rearrange_bigger(1534) == 54321\nassert     rearrange_bigger(2534) == 65432\nassert     rearrange_bigger(87) == 89\nassert     rearrange_bigger(88) == 889\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n\ndef rearrange_bigger_a(n):\n    '''\n    a = 1023\n    arr = [2, 5, 3, 1, 4]\n    '''\n    def swap(arr, i, j):\n        temp = arr[i]\n        arr[i] = arr[j]\n        arr[j] = temp\n\n    if n == \"0\":\n        return 0\n    if n < \"0\":\n        return -1\n\n    i, j = 0, len(n)-1\n    while i < j:\n        temp = int(n[i])\n        n = swap(n, i, j)\n        if int(n) > int(n[i]) or int(n) > int(n[j]):\n            break\n        i += 1\n        j -= 1\n    return n\n\n\ndef rearrange_bigger_b(n):\n    '''\n    a = 1023\n    arr = [2, 5, 3, 1, 4]\n    '''\n    def swap(arr, i, j):\n        temp = arr[i]\n        arr[i] = arr[j]\n        arr[j] = temp\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     rearrange_bigger(0) == 0\nassert     rearrange_bigger(12) == 21\nassert     rearrange_bigger(21) == 12\nassert     rearrange_bigger(4321) == 54321\nassert     rearrange_bigger(3234) == 4321\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     k_smallest_pairs([1, 3, 12, 10, 14, 25], [2, 5, 15, 20, 26, 28], 5) == [[1, 2], [3, 5], [12, 25]]\nassert     k_smallest_pairs([3, 9, 15, 20, 25], [4, 7, 12, 16, 25], 8) == [[3, 4], [9, 7], [9, 12]]\nassert     k_smallest_pairs([9, 10, 11, 12, 13, 15], [20, 25, 30, 35, 40, 45], 8) == [[9, 20], [10, 25], [11, 30]]\n\ndef min_heap(nums, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # write your code here\n    # first create a max heap\n    # traverse from the end of the array and remove the node until k+1\n    # put the last node of the heap into the result\n    res = []\n    heap = []\n    for i in range(k+1):\n        heapq.heappush(heap, (-nums[-1], nums[-1]))\n    for i in range(k-1):\n        # check the heap is not empty\n        if not heap:\n            return res\n        # remove the root\n        root = heapq.heappop(heap)[1]\n        res.append(root)\n        # remove the rest\n        while heap and -heap[0][1] > root:\n            heapq.heappop(heap)\n    return res[::-1]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     k_smallest_pairs([1,7,11],[2,4,6], 3) ==     [[1,2],[1,4],[1,6]]\nassert k_smallest_pairs([1,7,11],[2,4,6], 3) ==     [[1,2],[1,4],[1,6]]\nassert     k_smallest_pairs([3,2,1],[5,4,6], 2) ==     [[3,5],[3,4]]\nassert k_smallest_pairs([3,2,1],[5,4,6], 2) ==     [[3,5],[3,4]]\nassert     k_smallest_pairs([3,2,1],[5,4,6], 3) ==     [[3,5],[3,4],[3,6]]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     k_smallest_pairs([1,3,2,4], [5,3,7,8], 3) == [(1,5),(2,3)]\nassert     k_smallest_pairs([2,5,3,1], [6,4,8,7], 3) == [(1,6),(3,5)]\nassert     k_smallest_pairs([5], [2,4,3,1], 3) == [(5,2),(4,3)]\n\nclass KSmallestPairs(object):\n    def kSmallestPairs(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[List[int]]\n        \"\"\"\n        heap = []\n        ans = []\n        \n        for num1 in nums1:\n            heapq.heappush(heap, (num1, num2))\n        \n        \n        for i in range(k):\n            num2, num1 = heapq.heappop(heap)\n            ans.append([num1, num2])\n        return ans\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    k_smallest_pairs:\n    The smallest k pairs, sorted in ascending order of the distance between the corresponding elements of the two arrays, should be returned.\n    Your function should return the k pairs ordered by the distance between the elements,\n    and not the elements themselves. The distance between x and y is defined as:\n    |x - y| + |x - y| + |x - y|\n    and the distance between a pair of points is defined as the Euclidean distance of their coordinates,\n    which is given by sqrt(x^2 + y^2).\n    If there are fewer than k points in the arrays, return all of them.\n    \n    Input:\n    nums1 = [1, 2, 3, 5], nums2 = [3, 4, 5, 8], k = 3\n    \n    Output:\n    [(1, 3), (2, 3), (3, 5)]\n    \n    Explanation:\n    The first k pairs are returned from the list of pairs:\n    (1, 3), (2, 3), (3, 5)\n    This is because the distance between 1 and 3 is sqrt(2^2 + 0^2) = sqrt(2),\n    the distance between 1 and 3 is sqrt(2^2 + 2^2) = sqrt(4),\n    the distance between 1 and 3 is sqrt(2^2 + 3^2) = sqrt(6),\n    the distance between 1 and 3 is sqrt(2^2 + 5^2) = sqrt(10),\n    and\n    (2, 3), (3, 5)\n    \n    '''\n    # O(k)\n    # # using the heap\n    # # to record the distance\n    # heap = []\n    # for i in range(len(nums1)):\n    #     heapq.heappush(heap, (nums1[i] - nums2[i], i, (nums1[i], nums2[i])))\n    #     if len(heap) > k:\n    #         heapq.heappop(heap)\n\n    # # extract k pairs from the heap\n    # res = []\n    # while len(heap) > 0:\n    #     _, _, (x, y) = heapq.heappop(heap)\n    #     res.append((x, y))\n    #     if len(res) >= k:\n    #         break\n\n    # return res\n\n    # # using the sorted list\n    # import bisect\n    # def distance(x, y):\n    #     return ((x[0] - y[0])**2 + (x[1] - y[1])**2)**0.5\n    # return sorted([(nums1[i], nums2[i]) for i in range(len(nums1))], key=lambda x: distance(nums1[x[0]], nums2[x[1]]), reverse=True)[:k]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     k_smallest_pairs([5,2,4,1,3],[6,7,8,9,10],5) == [(1, 5), (2, 6), (3, 7), (4, 8), (5, 9)]\nassert k_smallest_pairs([5,2,4,1,3],[3,10,4,1,1],2) == [(1, 3), (2, 4)]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     k_smallest_pairs([1, 3, 11, 5, 2], [2, 4, 6, 8, 3], 3) == [[1,2],[3,4],[5,6]]\nassert     k_smallest_pairs([1, 4, 2, 3], [2, 5, 3, 4], 4) == [[1, 2], [2, 3], [3, 4], [4, 5]]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     k_smallest_pairs([1,3,4,5,7],[3,5,7,8,9],3) == [[1,3],[3,5],[5,7]]\nassert     k_smallest_pairs([1,3,4,5,7],[3,5,7,8,9],4) == [[1,3],[3,5],[5,7],[7,8]]\nassert     k_smallest_pairs([1,3,4,5,7],[3,5,7,8,9],0) == []\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     k_smallest_pairs([1,7,11], [2,4,6], 3) == [[1,2],[7,4],[11,6]]\nassert k_smallest_pairs([1,1,2], [1,2,3], 2) == [[1,1],[1,2]]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nimport heapq\nfrom collections import defaultdict\nclass Solution(object):\n    def kSmallestPairs(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[List[int]]\n        \"\"\"\n        '''\n        All possible pairs from list1 and list2 will be stored in a hashmap of key = (list1, list2) and value = dist\n        '''\n        pairs = []\n        count = 0\n        dict = defaultdict(int)\n        heap = []\n        # first pass, let's generate all possible pairs\n        for num1 in nums1:\n            for num2 in nums2:\n                pair = [num1, num2]\n                dict[tuple(pair)] = nums1.index(num1) + nums2.index(num2)\n        # second pass, let's sort the dict\n        for key, value in sorted(dict.items(), key = lambda x:x[1]):\n            pairs.append(key)\n            if len(pairs) == k:\n                break\n        return pairs\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     k_smallest_pairs([1, 7, 11], [2, 4, 6], 3) == [1, 4, 6]\nassert     k_smallest_pairs([1, 2], [3, 4], 2) == [1, 2]\nassert     k_smallest_pairs([1, 2, 3, 4, 5], [6, 7, 8, 9], 3) == [1, 2, 4]\nassert     k_smallest_pairs([1, 2, 3, 4, 5], [6, 7, 8, 9], 4) == [1, 2, 3, 5]\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     min_product_tuple([(1, 3), (2, 3), (4, 2)]) == (4, 2), \"Should be (4, 2).\"\nassert     min_product_tuple([(1, 3), (2, 3), (4, 2), (6, 3)]) == (4, 2), \"Should be (4, 2).\"\nassert     min_product_tuple([(1, 3), (2, 3), (4, 2), (6, 3), (4, 5)]) == (4, 2), \"Should be (4, 2).\"\nassert     min_product_tuple([(1, 3), (2, 3), (4, 2), (6, 3), (4, 5), (5, 4)]) == (4, 2), \"Should be (4, 2).\"\nassert     min_product_tuple([(1, 3), (2, 3), (4, 2), (6, 3), (4, 5), (5, 4), (5, 7)]) == (4, 2), \"Should be (4, 2).\"\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     min_product_tuple([(3, 3), (7, 1), (3, 2), (2, 4), (3, 5)]) == 1, \"wrong answer\"\nassert     min_product_tuple([(2, 6), (2, 5), (2, 4), (2, 3), (2, 2)]) == 1, \"wrong answer\"\nassert     min_product_tuple([(2, 8), (2, 6), (2, 5), (2, 4), (2, 3), (2, 2)]) == 1, \"wrong answer\"\nassert     min_product_tuple([(4, 6), (4, 5), (4, 4), (4, 3), (4, 2), (4, 1)]) == 1, \"wrong answer\"\nassert     min_product_tuple([(1, 5), (1, 4), (1, 3), (1, 2), (1, 1)]) == 0, \"wrong answer\"\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     min_product_tuple([(1, 2), (3, 4), (5, 6)]) == (1, 2)\nassert     min_product_tuple([(2, 4), (3, 6), (5, 8)]) == (2, 4)\nassert     min_product_tuple([(1, 2), (3, 5), (9, 2)]) == (1, 2)\nassert     min_product_tuple([(8, 3), (6, 9), (7, 7)]) == (8, 3)\nassert     min_product_tuple([(5, 6), (9, 9), (7, 3)]) == (5, 6)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     min_product_tuple([(1, 2), (3, 4)]) == (1, 3), 'Wrong'\nassert     min_product_tuple([(2, 5), (8, 3)]) == (2, 5), 'Wrong'\nassert     min_product_tuple([(2, 5), (1, 9)]) == (2, 5), 'Wrong'\nassert     min_product_tuple([(1, 5), (4, 2)]) == (1, 5), 'Wrong'\nassert     min_product_tuple([(3, 2), (1, 1)]) == (1, 1), 'Wrong'\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     min_product_tuple([(1, 2), (3, 4)]) == (1, 2)\nassert     min_product_tuple([(1, 2), (5, 4)]) == (5, 4)\nassert     min_product_tuple([(1, 2), (4, 2)]) == (1, 2)\nassert     min_product_tuple([(1, 2), (5, 6)]) == (5, 6)\nassert     min_product_tuple([(1, 2), (4, 2), (3, 3)]) == (3, 3)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef min_product_dictionary(dict1):\n    '''\n    Write a function to find the minimum product from the pairs of keys and values in a given dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nmin_val([1, 2, 3, 4, 5, 6, 7]) == 1\nmin_val([1, 2, 3, \"a\", 5, 6, 7]) == 1\nmin_val([1, \"a\", \"b\", True]) == 1\nmin_val([1, 2, 3, 4, 5, 6, 7, 8]) == 1\nmin_val([1, 2, 3, 4, 5, 6, \"a\"]) == 1\nmin_val([]) == None\nmin_val([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == -1\nmin_val([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == -10\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     min_val([[],None]) == None\nassert     min_val([[1,2,3],2]) == 2\nassert     min_val([[1,2],2]) == 2\nassert     min_val([[1,2,3],1]) == 1\nassert     min_val([[1,2],1]) == 1\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     min_val(['one', 'two', 'three']) == 'one', \"error in min_val()\"\nassert     min_val(['one', 'two', 'three', 'four', 'five','six']) == 'two', \"error in min_val()\"\nassert     min_val([1, 2, 3, 4, 5]) == 1, \"error in min_val()\"\nassert     min_val([1, 2, 3, 4, 5, 6]) == 1, \"error in min_val()\"\nassert     min_val([]) == None, \"error in min_val()\"\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     min_val([1,2,3]) == 1,'should be 1'\nassert     min_val([1,-2,3]) == 1,'should be 1'\nassert     min_val([1,2,3,3,3,3,3,3,3,3,3,3,3,3,3]) == 1,'should be 1'\nassert     min_val([1,2,3,4]) == 1,'should be 1'\nassert     min_val([-2,-2,-2,-2,0]) == -2,'should be -2'\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert min_val([3, 2, 4]) == 2\nassert min_val([3, 2, 4, 5]) == 3\nassert min_val([3, 2, 3, 4]) == 3\nassert min_val([]) == None\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    pass\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     min_val([]) == None, 'Wrong Answer. Expected {}'.format(None)\nassert     min_val([1]) == 1, 'Wrong Answer. Expected {}'.format(1)\nassert     min_val([1,2,3]) == 1, 'Wrong Answer. Expected {}'.format(1)\nassert     min_val([2,3,4,5]) == 2, 'Wrong Answer. Expected {}'.format(2)\nassert     min_val([3,4,5,6]) == 3, 'Wrong Answer. Expected {}'.format(3)\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     min_val([1,3,4,2,5]) == 1, \"Fail\"\nassert     min_val([2,3,4,2,5]) == 2, \"Fail\"\nassert     min_val([1,7,4,2,5]) == 1, \"Fail\"\nassert     min_val([-9,0,9,-2,9]) == -2, \"Fail\"\nassert     min_val([]) == None, \"Fail\"\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert min_val([1,2,3,4,5,6]) == 1\nassert min_val([1,2,3,4,5,6,7,8,9,10,11,12]) == 1\nassert min_val([]) == None\n\nprint('min_val test passed')\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     snake_to_camel('snake_case_string') =='snakeCaseString'\nassert     snake_to_camel('snake-case-string') =='snake_case_string'\nassert     snake_to_camel('snake-case-string') =='snake_case_string'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     snake_to_camel('snake_case') == 'SnakeCase', 'incorrect!'\nassert     snake_to_camel('snake_case_') == 'SnakeCase', 'incorrect!'\nassert     snake_to_camel('snake_case_123') == 'SnakeCase123', 'incorrect!'\nassert     snake_to_camel('123') == '123', 'incorrect!'\nassert     snake_to_camel('') == '', 'incorrect!'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     snake_to_camel('snake_case') =='snakeCase'\nassert     snake_to_camel('snake_camel') =='snakeCamel'\nassert     snake_to_camel('snake_snake_camel') =='snakeSnakeCamel'\nassert     snake_to_camel('snake_snake_camel_') =='snakeSnakeCamel'\nassert     snake_to_camel('snake_snake_camel_2') =='snakeSnakeCamel2'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     snake_to_camel('snake_case') =='snakeCase', \"Should be snake_case\"\nassert     snake_to_camel('snake_case_') =='snakeCase', \"Should be snake_case\"\nassert     snake_to_camel('snake_case_0') =='snakeCase', \"Should be snake_case\"\nassert     snake_to_camel('snake_case_1') =='snakeCase', \"Should be snake_case\"\nassert     snake_to_camel('snake_case_2') =='snakeCase', \"Should be snake_case\"\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert snake_to_camel('snake_case') =='snakeCase'\nassert snake_to_camel('a_snake') == 'aSnake'\nassert snake_to_camel('a-snake') == 'aSnake'\nassert snake_to_camel('A_snake') == 'ASnake'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     snake_to_camel(\"snake_case\") == \"SnakeCase\"\nassert     snake_to_camel(\"snakecase\") == \"SnakeCase\"\nassert     snake_to_camel(\"snakecase_\") == \"SnakeCase\"\nassert     snake_to_camel(\"snakecase_\") == \"SnakeCase\"\nassert     snake_to_camel(\"snakecase\") == \"SnakeCase\"\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     snake_to_camel('snake_case') == 'SnakeCase', 'input string is not snake case'\nassert     snake_to_camel('snake_cased') == 'SnakeCased', 'input string is not snake case'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     snake_to_camel('snake_case') =='snakeCase'\nassert     snake_to_camel('sNAke') =='sNAke'\nassert     snake_to_camel('sNAke-') =='sNAke'\nassert     snake_to_camel('sNAke_') =='sNAke'\nassert     snake_to_camel('sNAke-_') =='sNAke'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     snake_to_camel('snake_case') == 'SnakeCase'\nassert     snake_to_camel('snake_snake_case') == 'SnakeSnakeCase'\nassert     snake_to_camel('snake_snake_snake_case') == 'SnakeSnakeSnakeCase'\nassert     snake_to_camel('snake_snake_snake_snake_case') == 'SnakeSnakeSnakeSnakeCase'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     snake_to_camel('snakecase') =='snakecase'\nassert     snake_to_camel('my_snake_case') =='mySnakeCase'\nassert     snake_to_camel('_my_snake_case') =='mySnakeCase'\nassert     snake_to_camel('_my_snake_case_') =='mySnakeCase'\nassert     snake_to_camel('my_snake_case_') =='mySnakeCase'\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_odd([1,2,3,4]) == [1,3,4]\nassert     remove_odd([2,3,4,5]) == [2,4,5]\nassert     remove_odd([1,2,3,4,6]) == [1,2,3,4]\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef remove_even(l):\n    '''\n    Write a python function to remove even numbers from a given list.\n    '''\n    pass\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_odd([1,2,3,4,5,6,7]) == [1,3,5,7], \"wrong result\"\nassert     remove_odd([1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9,10], \"wrong result\"\nassert     remove_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == [1,3,5,7,9,11,13,15], \"wrong result\"\nassert     remove_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) == [1,3,5,7,9,11,13,16,17,18], \"wrong result\"\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in range(len(l)):\n        if l[i]%2==0:\n            l.remove(l[i])\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_odd([0, 1, 2, 3, 4, 5]) == [0, 1, 2, 3, 4, 5]\nassert     remove_odd([0, 1, 2, 3, 4, 5, 6]) == [0, 1, 2, 3, 4, 5]\nassert     remove_odd([0, 1, 2, 3, 4, 5, 6, 7]) == [0, 1, 2, 3, 4, 5, 6]\nassert     remove_odd([0, 1, 2, 3, 4, 5, 6, 7, 8]) == [0, 1, 2, 3, 4, 5, 6, 7]\nassert     remove_odd([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [0, 1, 2, 3, 4, 5, 6, 7, 8]\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_odd([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == [10, 20, 50, 80, 100]\nassert remove_odd([100, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [100]\nassert remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == []\nassert remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == []\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_odd([1,2,3,4,5]) == [1,2,3,5], \"Wrong output\"\nassert     remove_odd([1,2,3,4,5,6,7,8,9]) == [1,2,3,5,7,9], \"Wrong output\"\nassert     remove_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]) =="
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_odd([1, 2, 3, 4, 5]) == [1, 3, 5], \"Wrong\"\nassert     remove_odd([2, 2, 4, 5, 5, 6]) == [2, 4, 6], \"Wrong\"\nassert     remove_odd([2, 2, 4, 5, 5, 6, 6]) == [2, 4, 6], \"Wrong\"\nassert     remove_odd([1, 2, 3, 4, 5]) == [1, 3, 5], \"Wrong\"\nassert     remove_odd([1, 2, 3, 4, 5, 6]) == [1, 3, 5, 6], \"Wrong\"\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert extract_nth_element([(1,2,3),(4,5,6)], 0) == (1,2,3)\nassert extract_nth_element([(1,2,3),(4,5,6)], 1) == (4,5,6)\nassert extract_nth_element([(1,2,3),(4,5,6)], 2) == (4,5,6)\nassert extract_nth_element([(1,2,3),(4,5,6)], 3) == (4,5,6)\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_nth_element([(10,11),(12,13),(14,15),(16,17),(18,19)], 3) == 15\nassert     extract_nth_element([(10,11),(12,13),(14,15),(16,17),(18,19)], 0) == 10\nassert     extract_nth_element([(10,11),(12,13),(14,15),(16,17),(18,19)], 1) == 11\nassert     extract_nth_element([(10,11),(12,13),(14,15),(16,17),(18,19)], 2) == 13\nassert     extract_nth_element([(10,11),(12,13),(14,15),(16,17),(18,19)], 4) == 19\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_nth_element([(1,2),(1,2),(1,2)],2) == (1,2)\nassert     extract_nth_element([(1,2),(1,2),(1,2)],0) == (1,2)\nassert     extract_nth_element([(1,2),(1,2),(1,2)],1) == (1,2)\nassert     extract_nth_element([(1,2),(1,2),(1,2)],3) == None\nassert     extract_nth_element([(1,2),(1,2),(1,2),(1,2)],0) == (1,2)\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_nth_element([('a',1),('b',2),('c',3)], 1) == ('a',1)\nassert     extract_nth_element([('a',1),('b',2),('c',3)], 2) == ('b',2)\nassert     extract_nth_element([('a',1),('b',2),('c',3)], 3) == ('c',3)\nassert     extract_nth_element([('a',1),('b',2),('c',3)], 0) == ('a',1)\nassert     extract_nth_element([('a',1),('b',2),('c',3)], 4) == ('a',1)\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_nth_element([('a', 1), ('b', 2), ('c', 3)], 1) == ('b', 2)\nassert     extract_nth_element([('a', 1), ('b', 2), ('c', 3)], 2) == ('a', 1)\nassert     extract_nth_element([('a', 1), ('b', 2), ('c', 3)], 3) == ('c', 3)\nassert     extract_nth_element([('a', 1), ('b', 2), ('c', 3)], 0) == ('a', 1)\nassert     extract_nth_element([('a', 1), ('b', 2), ('c', 3)], -1) == ('c', 3)\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_nth_element(['1', '2', '3'], 1) == '1'\nassert     extract_nth_element(['1', '2', '3'], 2) == '2'\nassert     extract_nth_element(['1', '2', '3'], 3) == '3'\nassert     extract_nth_element(['1', '2', '3'], 5) == None\nassert     extract_nth_element(['1', '2', '3'], -1) == None\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert extract_nth_element([], -1) == None\nassert extract_nth_element([], 0) == None\nassert extract_nth_element([], 1) == None\nassert extract_nth_element([(1, 2)], 0) == (1, 2)\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert extract_nth_element([1, 2, 3, 4, 5], 1) == 1\nassert extract_nth_element([1, 2, 3, 4, 5], 2) == 2\nassert extract_nth_element([1, 2, 3, 4, 5], 3) == 3\nassert extract_nth_element([1, 2, 3, 4, 5], 4) == 4\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     overlapping([1, 2, 3, 4, 5, 6], [1, 2, 3]) == True, \"Should return True for overlapping\"\nassert     overlapping([1, 2, 3, 4, 5, 6], [1, 2, 3, 7]) == False, \"Should return False for overlapping\"\nassert     overlapping([1, 2, 3], [1, 2, 3]) == True, \"Should return True for overlapping\"\nassert     overlapping([1, 2, 3], [1, 2, 4]) == False, \"Should return False for overlapping\"\nassert     overlapping([1, 2, 3], [4, 5, 6, 7]) == False, \"Should return False for overlapping\"\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     overlapping([1,2,3],[\"a\",\"b\",\"c\"]) == True, \"Overlapping\"\nassert     overlapping([1,2,3],[\"b\",\"c\",\"d\"]) == False, \"Not overlapping\"\nassert     overlapping([1,2,3,5,6,7],[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"]) == True, \"Overlapping\"\nassert     overlapping([1,2,3,5,6,7],[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"]) == False, \"Not overlapping\"\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nif __name__ == \"__main__\":\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    q = int(input())\n\n    for q_itr in range(q):\n        n = int(input())\n\n        llist1 = list(map(int, input().rstrip().split()))\n\n        llist2 = list(map(int, input().rstrip().split()))\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     overlapping([],[]), \"Check whether the list is empty\"\nassert     overlapping([1],[]), \"Check whether the first list is non-empty\"\nassert     overlapping([],[1]), \"Check whether the second list is non-empty\"\nassert     overlapping([],[]), \"Check whether the both lists are empty\"\nassert     overlapping([1,2,3,4],[]), \"Check whether the first list is non-empty\"\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     overlapping([1,2,3],[2,3,4]) == True, \"True\"\nassert     overlapping([2,3,4],[1,2,3]) == True, \"True\"\nassert     overlapping([1,2,3],[2,3,4]) == False, \"False\"\nassert     overlapping([2,3,4],[1,2,3]) == False, \"False\"\nassert     overlapping([2,3,4],[5,6,7]) == False, \"False\"\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \noverlapping([1,2,3,4,5],[2,3,5])\n\noverlapping([1,2,3,4,5],[2,3,5,6,7])\n\nassert False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     overlapping([1,2,3],[2,2,2]) == True, 'Overlapping'\nassert     overlapping([1,2,3],[2,2,2,3]) == False, 'Not Overlapping'\nassert     overlapping([1,2,3,4],[2,2,2,3]) == True, 'Overlapping'\nassert     overlapping([1,2,3,4,5],[2,2,2,3]) == True, 'Overlapping'\nassert     overlapping([1,2,3,4,5,6],[2,2,2,3]) == True, 'Overlapping'\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\noverlapping([1,2,3,4],[2,3]) == True\noverlapping([1,2,3,4],[2,4]) == True\noverlapping([1,2,3,4],[3,4]) == True\noverlapping([1,2,3,4],[4]) == True\noverlapping([1,2,3,4],[1]) == True\noverlapping([1,2,3],[1,2,3,4]) == False\n\nprint('All test cases are passed')"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_Product([1,2,3,4,5,6]) == 6, 'Wrong'\nassert     max_Product([5,4,3,2,1,6]) == 6, 'Wrong'\nassert     max_Product([9,9,8,9,6]) == 9, 'Wrong'\nassert     max_Product([4,3,5,6,7]) == 10, 'Wrong'\nassert     max_Product([]) == None, 'Wrong'\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_Product([1,2,3,4,5]) == (5,2)\nassert     max_Product([6,5,4,3,2]) == (6,5)\nassert     max_Product([2,4,3,5]) == (5,4)\nassert     max_Product([2,3,4,5,6]) == (6,5)\nassert     max_Product([3,4,5,6,7]) == (7,6)\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_Product([1, -2, 3, 4]) == 4\nassert     max_Product([1, -2, 3, 4, 6]) == 24\nassert     max_Product([1, 1, 1, 1, 1]) == 1\nassert     max_Product([-1, -1, -1, -1]) == -1\nassert     max_Product([-1, -1, -1, 1]) == 1\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_Product([2, 6, -2, -8]) == 6\nassert     max_Product([-10, 1, 2, 3, 4, 5]) == 20\nassert     max_Product([-1, 0]) == 0\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nmax_Product([4, 7, 1, 2, 4, 7, 3, 1]) == (4, 7)\nmax_Product([9, 3, 7, 4, 2, 2, 9]) == (9, 7)\nmax_Product([4, 4, 4, 4, 4, 4]) == (4, 4)\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_Product([6,9,3,2,9,2]) == 9*9, \"Wrong Answer\"\nassert     max_Product([3,5,7,9]) == 9*5, \"Wrong Answer\"\nassert     max_Product([4,5,3,6]) == 9*6, \"Wrong Answer\"\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_Product([1, 2, 3]) == 6, \"wrong answer\"\nassert     max_Product([-3, -4, 5]) == 15, \"wrong answer\"\nassert     max_Product([-1, -2, -3]) == -6, \"wrong answer\"\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    max_Product([2,8,9,5,6]) == 24\n    max_Product([3,4,5,1,6]) == 9\n    max_Product([2,4,5,2,6]) == 20\n    max_Product([3,4,5,1,7]) == 24\n    max_Product([2,4,5,1,8]) == 24\n    max_Product([3,4,5,1,9]) == 24\n    max_Product([2,4,5,1,10]) == 24\n    max_Product([3,4,5,1,6,7]) == 24\n    max_Product([2,4,5,1,6,7,8]) == 24\n    max_Product([2,4,5,1,6,7,9]) == 24\n    max_Product([3,4,5,1,6,7,8]) == 24\n    max_Product([3,4,5,1,6,7,9]) == 24\n    max_Product([2,4,5,1,6,7,8,9]) == 24\n    max_Product([3,4,5,1,6,7,8,9,10]) == 24\n    max_Product([2,3,4,5,1,6,7,8,9,10]) == 24\n    max_Product([2,3,4,5,1,6,7,8,9,10,11]) == 24\n    max_Product([2,3,4,5,1,6,7,8,9,10,11,12]) == 24\n    max_Product([2,3,4,5,1,6,7,8,9,10,11,12,13]) == 24\n    max_Product([2,3,4,5,1,6,7,8,9,10,11,12,13,14]) == 24\n    max_Product([2,3,4,5,1,6,7,8,9,10,11,12,13,14,15]) == 24\n    max_Product([2,3,4,5,1,6,7,8,9,10,11,12,13,14,15,16]) == 24\n    max_Product([2,3,4,5,1,6,7,8,9,10,11,12,13,14,15,16,17]) == 24\n    max_Product([2,3,4,5,1,6,7,8,9,10,11,12,13,14,15,16,17,18]) == 24\n    max_Product([2,3,4,5,1,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == 24\n    max_Product([2,3,4,5,1,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 24\n    max_Product([2,3,4,5,1,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) == 24\n    max_Product([2,3,4,5,1,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]) == 24\n    max_Product([2,3,4,5,1,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]) == 24\n    max_Product([2,3,4,5,1,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]) == 24\n    max_Product([2,3,4,5,1,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == 24\n    max_Product([2,3,4,5,1,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) == 24\n    max_Product([2,3,4,5,1,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]) == 24\n    max_Product([2,3,4,5,1,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]) == 24\n    max_Product([2,3,4,5,1,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]) == 24\n    max_Product([2,3,4,5,1,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]) == 24\n    max_Product([2,3,4,5,1,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]) == 24\n    max_Product([2,3,4,5,1,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]) == 24\n    max_Product([2,3,4,5,1,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33]) == 24\n    max_Product([2,3,4,5,1,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34]) == 24\n    max_Product([2,3,4,5,1,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]) == 24\n    max_Product([2,3,4,5,1,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36]) == 24\n    max_Product([2,3,4,5,1,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37]) == 24\n    max_Product([2,3,4,5,1,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38]) == 24\n    max_Product([2,3,4,5,1,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39]) == 24\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(\"All the tests have passed\""
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     group_tuples([(2,4),(4,5),(3,6)]) == 2\nassert     group_tuples([(2,4),(4,5),(3,6),(4,6)]) == 4\nassert     group_tuples([(2,4),(4,5),(3,6),(4,6),(4,6)]) == 5\nassert     group_tuples([(2,4),(4,5),(3,6),(4,6),(4,6),(4,6)]) == 6\nassert     group_tuples([(2,4),(4,5),(3,6),(4,6),(4,6),(4,6),(4,6),(4,6),(4,6)]) == 6\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     group_tuples( ) == (), \"Your function group_tuples does not work properly\"\nassert group_tuples([(1,2,3,4),(5,6,7,8),(2,3,4,5)]) == (1,2,3,4), \"The expected output is not as expected\"\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     group_tuples([(1,2),(3,4),(5,6),(4,5),(6,7)]) == (1,2)\nassert group_tuples([(1,2),(3,4),(5,6),(4,5),(6,7)]) == (1,2)\nassert group_tuples([(1,2),(2,4),(4,7),(7,9),(4,7),(2,3),(7,9)]) == (1,2,4,7)\nassert group_tuples([(1,2),(3,4),(5,6),(4,5),(6,7)]) == (1,2)\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     group_tuples([(1,2),(3,4),(1,2)])== (1,2)\nassert     group_tuples([(1,2),(2,3),(1,2),(1,2)])== (1,2)\nassert     group_tuples([(1,2),(2,3),(1,2),(1,2),(1,2)])== (1,2)\nassert     group_tuples([(1,2),(1,3),(2,3),(1,2),(1,2)])== (1,2)\nassert     group_tuples([(1,2),(2,3),(1,2),(1,2),(1,2),(1,2)])== (1,2)\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     group_tuples([(1,3),(3,4),(2,5),(1,2)]) == 2, 'incorrect'\nassert group_tuples([(1,3),(3,4),(2,5),(1,2)]) == 1, 'incorrect'\nassert group_tuples([(1,3),(3,4),(2,5),(1,2)]) == 2, 'incorrect'\nassert group_tuples([(1,3),(3,4),(2,5),(1,2)]) == 3, 'incorrect'\nassert group_tuples([(1,3),(3,4),(2,5),(1,2)]) == 4, 'incorrect'\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Find_Max([1,2,3,4,5]) == 5\nassert     Find_Max([1,2,4,5,6,7]) == 6\nassert     Find_Max([1,2,4,5,6,7,8]) == 7\nassert     Find_Max([1,2,4,5,6,7,8,9]) == 8\nassert     Find_Max([1,2,4,5,6,7,8,9,10]) == 9\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Find_Max([1,2,3,4,5]) == 5, 'Wrong'\nassert     Find_Max([-5,7,6,9,10,-2]) == -2, 'Wrong'\nassert     Find_Max([-5,7,6,9]) == 7, 'Wrong'\nassert     Find_Max([]) == None, 'Wrong'\nassert     Find_Max([-5,-7,9]) == -5, 'Wrong'\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     Find_Max([1, 2, 3, 4]) == 4, 'Wrong Output'\nassert     Find_Max([2, 1, 3, 4]) == 4, 'Wrong Output'\nassert     Find_Max([1, 2, 3, 4]) == 4, 'Wrong Output'\nassert     Find_Max([]) == 0, 'Wrong Output'\nassert     Find_Max([1]) == 1, 'Wrong Output'\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nFind_Max([1, 2, 3, 4, 5, 6]) == 6\nassert \nFind_Max([1, 2, 3, 4, 5]) == 5\nassert \nFind_Max([1, 2, 3, 4]) == 4\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nlst = [[1,2,3],[4],[5,6,7,8,9,10]]\nfor i in lst:\n    for j in i:\n        print(j, end ='')\n    print()\n\nlst = [[1,2,3,4,5,6],[7,8,9],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10]]\nfor i in lst:\n    for j in i:\n        print(j, end ='')\n    print()\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    Find_Max([1,2,3,4,5]) == 5\n    Find_Max([1,2,3,4,5,4,2]) == 5\n    Find_Max([1,2,3,4,5,4,2,3]) == 5\n    Find_Max([1,2,3,4,5,4,2,3,4]) == 4\n    Find_Max([1,2,3,4,5,4,2,3,4,5]) == 5\n    Find_Max([1,2,3,4,5,4,2,3,4,5,6]) == 5\n    Find_Max([1,2,3,4,5,6]) == 5\n    Find_Max([1,2,3,4,5,6,4,2,3]) == 5\n    Find_Max([1,2,3,4,5,6,4,2,3,4]) == 4\n    Find_Max([1,2,3,4,5,6,4,2,3,4,5]) == 5\n    Find_Max([1,2,3,4,5,6,4,2,3,4,5,6]) == 6\n    Find_Max([1,2,3,4,5,6,4,2,3,4,5,6,7]) == 6\n    Find_Max([1,2,3,4,5,6,4,2,3,4,5,6,7,8]) == 6\n    Find_Max([1,2,3,4,5,6,4,2,3,4,5,6,7,8,9]) == 6\n    Find_Max([1,2,3,4,5,6,4,2,3,4,5,6,7,8,9,10]) == 6\n    Find_Max([1,2,3,4,5,6,4,2,3,4,5,6,7,8,9,10,11]) == 6\n    Find_Max([1,2,3,4,5,6,4,2,3,4,5,6,7,8,9,10,11,12]) == 6\n    Find_Max([1,2,3,4,5,6,4,2,3,4,5,6,7,8,9,10,11,12,13]) == 6\n    Find_Max([1,2,3,4,5,6,4,2,3,4,5,6,7,8,9,10,11,12,13,14]) == 6\n    Find_Max([1,2,3,4,5,6,4,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == 6\n    Find_Max([1,2,3,4,5,6,4,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == 6\n    Find_Max([1,2,3,4,5,6,4,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == 6\n    Find_Max([1,2,3,4,5,6,4,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) == 6\n    Find_Max([1,2,3,4,5,6,4,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == 6\n    Find_Max([1,2,3,4,5,6,4,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 6\n    Find_Max([1,2,3,4,5,6,4,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) == 6\n    Find_Max([1,2,3,4,5,6,4,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]) == 6\n    Find_Max([1,2,3,4,5,6,4,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]) == 6\n    Find_Max([1,2,3,4,5,6,4,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]) == 6\n    Find_Max([1,2,3,4,5,6,4,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == 6\n    Find_Max([1,2,3,4,5,6,4,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) == 6\n    Find_Max([1,2,3,4,5,6,4,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]) == 6\n    Find_Max([1,2,3,4,5,6,4,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]) == 6\n    Find_Max([1,2,3,4,5,6,4,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]) == 6\n    Find_Max([1,2,3,4,5,6,4,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]) == 6\n    Find_Max([1,2,3,4,5,6,4,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]) == 6\n    Find_Max([1,2,3,4,5,6,4,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]) == 6\n    Find_Max([1,2,3,4,5,6,4,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33]) == 6\n    Find_Max([1,2,3,4,5,6,4,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34]) == 6\n    Find_Max("
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Find_Max([1,2,3]) == 3\nassert     Find_Max([5,6,7]) == 7\nassert     Find_Max([5,4,6,7]) == 7\nassert     Find_Max([5,7,5,4]) == 7\nassert     Find_Max([9,5,8,2,2]) == 2\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Find_Max([]) == None, \"Empty list\"\nassert     Find_Max([2, 2, 3, 4, 5, 5]) == 5, \"List having max length\"\nassert     Find_Max([1, 2, 3, 4, 5, 6]) == 6, \"List having max length\"\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Find_Max([]) == None, Find_Max([])\nassert     Find_Max([1]) == 1, Find_Max([1])\nassert     Find_Max([1,2]) == 2, Find_Max([1,2])\nassert     Find_Max([1,2,3]) == 3, Find_Max([1,2,3])\nassert     Find_Max([1,2,3,4]) == 4, Find_Max([1,2,3,4])\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Find_Max([1,2,3,4,5,6]) == 6, 'Fail'\nassert Find_Max([1,2,3,4]) == 4, 'Fail'\nassert Find_Max([5,4,3,2]) == 5, 'Fail'\nassert Find_Max([2,3,1,5]) == 5, 'Fail'\n\nprint('Test Case 1: PASS')\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     round_and_sum([1, 2.123, 3, 4.567, 5.678, 6.89]) == [1, 2, 3, 4, 5, 6]\nassert     round_and_sum([1.123, 2.123, 3.123, 4.567, 5.678, 6.89]) == [1.123, 2.123, 3.123, 4.567, 5.678, 6.89]\nassert     round_and_sum([1.123, 2.123, 3, 4.567, 5.678, 6.89]) == [1.123, 2.123, 3, 4.567, 5.678, 6.89]\nassert     round_and_sum([1.123, 2.123, 3.123, 4.567, 5.678, 6.89]) == [1.123, 2.123, 3.123, 4.567, 5.678, 6.89]\nassert     round_and_sum([]) == []\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    round_and_sum([1.5, 2.5, 3.5, 4.5]) == 14.0\nassert\n    round_and_sum([-1.5, -2.5, -3.5, -4.5]) == -24.0\nassert \n    round_and_sum([-1.5, 2.5, -3.5, 4.5]) == -15.0\nassert\n    round_and_sum([-1.5, -2.5, -3.5, -4.5]) == -24.0\nassert \n    round_and_sum([-1.5, 2.5, -3.5, -4.5]) == -15.0\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     round_and_sum([4.3,6.4,8.9]) == [4.3,6.4,8.9]\nassert     round_and_sum([5.6,7.8,9.9,10.1]) == [6.0,7.8,9.9,10.1]\nassert     round_and_sum([9.1,8.9,7.8,6.7,5.6]) == [9.1,8.9,7.8,6.7,5.6]\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     round_and_sum([1.2, 3.2, 4.2, 5.2]) == [1, 6, 12, 18]\nassert     round_and_sum([1.0, 3.0, 4.0, 5.0]) == [1, 6, 12, 18]\nassert round_and_sum([3.2, 3.2, 3.2, 3.2]) == [6, 6, 6, 6]\nassert round_and_sum([3.2, 3.2, 3.2, 3.2, 3.2]) == [6, 6, 6, 6, 6]\nassert round_and_sum([3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, 3.2, "
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     round_and_sum([1.2,2.2,3.3,4.4]) == (14.0, 4)\nassert     round_and_sum([1.2,2.2,3.3,4.4,5.5]) == (14.0, 4)\nassert     round_and_sum([1.2,2.2,3.3,4.4,5.5,6.6]) == (14.0, 4)\nassert     round_and_sum([1.2,2.2,3.3,4.4,5.5,6.6,7.7]) == (14.0, 4)\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nround_and_sum([1,2,3,4,5,6,7,8,9,10]) == 45\nround_and_sum([1,1.5,1.25,1.25,1.5,1.75]) == 10.0\nround_and_sum([1,1.5,1.25,1.25,1.5,1.75,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nround_and_sum([1,2,3,4,5]) == 60 \nassert round_and_sum([]) == 0 \nassert round_and_sum([2,5,5.1]) == 50 \nassert round_and_sum([2,5,5.1,3,7,9]) == 30\nassert round_and_sum([2,5,5.1,3,7,9,6]) == 150\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     round_and_sum([1,2,3,4]) == 5\nassert     round_and_sum([1.3,2.9,5.1]) == 14.3\nassert     round_and_sum([-3,-4,-5]) == -10\nassert     round_and_sum([-1.3,-2.9,-5.1]) == -15.3\nassert     round_and_sum([1.3,-2.9,-5.1]) == -3.3\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nround_and_sum([1.5, 2.5, 3.5])"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ncube_Sum(5) == 27, \"cube_Sum should be 27\"\ncube_Sum(6) == 216, \"cube_Sum should be 216\""
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     cube_Sum(4) == 1 + 8 + 64 + 216, \"Fail\"\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     cube_Sum(10) == 690, \"Error in cube_Sum\"\nassert     cube_Sum(10) == 1090, \"Error in cube_Sum\"\nprint(\"Your function works for 10 natural numbers\")\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     cube_Sum(3) == 8, 'cube_Sum(3) not equal 8'\nassert     cube_Sum(4) == 26, 'cube_Sum(4) not equal 26'\nassert     cube_Sum(5) == 78, 'cube_Sum(5) not equal 78'\n\ndef sum_cubes(n):\n    '''\n    Write a python function to find the sum of cubes of first n natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     cube_Sum(2) == 10\nassert     cube_Sum(3) == 27\nassert     cube_Sum(8) == 250\nassert     cube_Sum(12) == 1458\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     cube_Sum(0) == 0, \"cube_Sum(0) == 0 is wrong.\"\nassert     cube_Sum(1) == 8, \"cube_Sum(1) == 8 is wrong.\"\nassert     cube_Sum(2) == 36, \"cube_Sum(2) == 36 is wrong.\"\nassert     cube_Sum(3) == 216, \"cube_Sum(3) == 216 is wrong.\"\nassert     cube_Sum(4) == 704, \"cube_Sum(4) == 704 is wrong.\"\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     cube_Sum(0) == 0\nassert     cube_Sum(1) == 8\nassert     cube_Sum(2) == 36\nassert     cube_Sum(5) == 108\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     cube_Sum(3) == 36\nassert     cube_Sum(5) == 152\nassert     cube_Sum(6) == 784\nassert     cube_Sum(7) == 1545\nassert     cube_Sum(8) == 36864\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     cube_Sum(2) == 8\nassert     cube_Sum(4) == 36\nassert     cube_Sum(6) == 216\nassert     cube_Sum(8) == 512\nassert     cube_Sum(10) == 2187\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     concatenate_tuple(('a', 'b', 'c', 'd')) == 'a,b,c,d', 'test case failed'\nassert     concatenate_tuple(('a', 'b', 'c')) == 'a,b,c', 'test case failed'\nassert     concatenate_tuple(('a')) == 'a', 'test case failed'\nassert     concatenate_tuple(()) == '', 'test case failed'\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     concatenate_tuple([]) == \"\", \"Test 1: Pass\"\nassert     concatenate_tuple([1, 2, 3]) == \"1,2,3\", \"Test 2: Pass\"\nassert     concatenate_tuple([\"Hello\", \"World\"]) == \"Hello,World\", \"Test 3: Pass\"\nassert     concatenate_tuple((\"Hello\", \"World\")) == \"Hello,World\", \"Test 4: Pass\"\nassert     concatenate_tuple((\"Geeks\", \"for\", \"Geeks\")) == \"Geeks,for,Geeks\", \"Test 5: Pass\"\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     concatenate_tuple(('Hello', 'World')) == 'HelloWorld',\\\n        'concatenate_tuple is not working as expected'\n\ndef join_list(test_list):\n    '''\n    Write a function to join the elements of list by the delimiter.\n    '''\n    pass\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     concatenate_tuple((1, 2, 3)) == '1#2#3', 'error in concatenate_tuple'\nassert     concatenate_tuple((1, 2)) == '1#2', 'error in concatenate_tuple'\nassert     concatenate_tuple((1, 2, 3, 4, 5)) == '1#2#3#4#5', 'error in concatenate_tuple'\nassert     concatenate_tuple((1, 2, 3, 4, 5, 6)) == '1#2#3#4#5#6', 'error in concatenate_tuple'\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     concatenate_tuple((1,2,3)) == '1,2,3', \"Wrong Answer\"\nassert     concatenate_tuple(('a','b','c')) == 'a,b,c', \"Wrong Answer\"\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     concatenate_tuple((\"1\", \"2\", \"3\")) == \"1|2|3\", \"test_1 failed\"\nassert     concatenate_tuple((\"1\", \"2\")) == \"1|2\", \"test_2 failed\"\nassert     concatenate_tuple((\"1\")) == \"1\", \"test_3 failed\"\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     concatenate_tuple(('a', 'b', 'c', 'd')) == 'a:b:c:d', 'Function does not work!'\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     concatenate_tuple((1,2,3)) == '1,2,3', \"concatenate_tuple is wrong\"\nassert     concatenate_tuple(('a','b','c')) == 'a,b,c', \"concatenate_tuple is wrong\"\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     concatenate_tuple((1,2,3,'A','B','C')) == '1A2B3C', 'incorrect input'\nassert    concatenate_tuple((1,2,3,'','A','B','C')) == '1A2B3C', 'incorrect input'\nassert    concatenate_tuple((1,2,3,'A','','B','C')) == '1A2B3C', 'incorrect input'\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     concatenate_tuple(['test', '1', '2', '3', '4', '5', '6', '7', '8']) == 'test1test2test3test4test5test6test7test8', \"Should be 'test1test2test3test4test5test6test7test8'\"\nassert     concatenate_tuple(('test', '1', '2', '3', '4', '5', '6', '7', '8')) == 'test1test2test3test4test5test6test7test8', \"Should be 'test1test2test3test4test5test6test7test8'\"\nassert     concatenate_tuple(('test', '1', '2', '3', '4', '5', '6', '7', '8')) == 'test1test2test3test4test5test6test7test8', \"Should be 'test1test2test3test4test5test6test7test8'\"\nassert     concatenate_tuple(('test', '1', '2', '3', '4', '5', '6', '7', '8')) == 'test1test2test3test4test5test6test7test8', \"Should be 'test1test2test3test4test5test6test7test8'\"\nassert     concatenate_tuple(('test', '1', '2', '3', '4', '5', '6', '7', '8')) == 'test1test2test3test4test5test6test7test8', \"Should be 'test1test2test3test4test5test6test7test8'\"\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Average_Of_Cube(4) == 8\nassert     find_Average_Of_Cube(9) == 27\nassert     find_Average_Of_Cube(1) == 1\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(\"\\nTesting find_Average_Of_Cube...\")\nprint(\"\\tPass\" if (find_Average_Of_Cube(0) == 0) else \"Fail\")\nprint(\"\\tPass\" if (find_Average_Of_Cube(5) == 5) else \"Fail\")\nprint(\"\\tPass\" if (find_Average_Of_Cube(10) == 10) else \"Fail\")\nprint(\"\\tPass\" if (find_Average_Of_Cube(15) == 15) else \"Fail\")\nprint(\"\\tPass\" if (find_Average_Of_Cube(20) == 20) else \"Fail\")\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Average_Of_Cube(10) == 16, \"The result should be 16\"\nassert     find_Average_Of_Cube(3) == 9, \"The result should be 9\"\nassert     find_Average_Of_Cube(4) == 12, \"The result should be 12\"\nassert     find_Average_Of_Cube(1) == 1, \"The result should be 1\"\n\nprint(\n'''\n            **************************************************************************\n            **                T E S T   S E C R I P T   F U N C T I O N S            **\n            **************************************************************************\n'''\n)\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Average_Of_Cube(0) == 0.0\nassert     find_Average_Of_Cube(1) == 1.0\nassert     find_Average_Of_Cube(2) == 1.0\nassert     find_Average_Of_Cube(3) == 1.0\nassert     find_Average_Of_Cube(4) == 1.5\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_Average_Of_Cube(1)==1\nassert     find_Average_Of_Cube(10)==36.0\nassert     find_Average_Of_Cube(100)==3184.0\nassert     find_Average_Of_Cube(1000)==32441026.0\nassert     find_Average_Of_Cube(10000)==371300131300.0\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_Average_Of_Cube(5) == 0\nassert     find_Average_Of_Cube(15) == 0\nassert     find_Average_Of_Cube(3) == 0\nassert     find_Average_Of_Cube(4) == 0\n\nprint('check_Equal_N_Blocks: all test cases passed...')\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert find_Average_Of_Cube(1) == 1\nassert find_Average_Of_Cube(2) == 3\nassert find_Average_Of_Cube(3) == 6\nassert find_Average_Of_Cube(4) == 14\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nfind_Average_Of_Cube(20) == 523.5\nfind_Average_Of_Cube(100) == 968.0\nfind_Average_Of_Cube(0) == 0.0\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_rear(('Hello', 'world', '!', 'Hi')) == ('world', '!', 'Hi')\nassert     extract_rear(('Hello', 'world', '!', 'Hi', 'Z')) == ('Z', '!', 'Hi')\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_rear(('a', 'b', 'c', 'd', 'e', 'f')) ==     [0, 1, 2, 3, 4, 5]\nassert     extract_rear(('a', 'b', 'c', 'd', 'e', 'f', 'g')) ==     [0, 1, 2, 3, 4, 5]\nassert     extract_rear(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')) ==     [0, 1, 2, 3, 4, 5]\n\ndef get_slice(test_tuple):\n    '''\n    Write a function to get the slice from the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    extract_rear((\"abcde\", \"abc\", \"abd\")) == (4, \"bcd\", \"\")\n    extract_rear((\"abcde\", \"abc\", \"abd\", \"cde\")) == (4, \"bcd\", \"\", \"cde\")\n    extract_rear((\"abcde\", \"abc\", \"abd\", \"cde\", \"xyz\")) == (4, \"bcd\", \"\", \"cde\", \"xyz\")\n    extract_rear((\"abcde\", \"abc\", \"abd\", \"cde\", \"xyz\", \"1\")) == (4, \"bcd\", \"\", \"cde\", \"xyz\", \"1\")\n    extract_rear((\"xyz\", \"1\")) == (0, \"\", \"xyz\", \"1\")\n    extract_rear((\"\", \"1\")) == (0, \"\", \"\", \"1\")\n    extract_rear((\"\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\")) == (0, \"\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\")\n    extract_rear((\"\", \"\", \"abc\", \"\", \"def\")) == (0, \"\", \"\", \"abc\", \"\")\n    extract_rear((\"\", \"\", \"\", \"abc\", \"\", \"def\", \"gjh\", \"\", \"e\", \"f\")) == (0, \"\", \"\", \"\", \"abc\", \"\", \"def\", \"gjh\", \"e\", \"f\")\n    extract_rear((\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\")) == (0, \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\")\n    extract_rear(()) == ()\n    extract_rear(tuple()) == tuple()\n    extract_rear((\"abcde\",)) == (\"abcde\",)\n    extract_rear((\"abcde\", \"abc\", \"abd\")) == (\"abcde\", \"abc\", \"abd\")\n    extract_rear((\"abcde\", \"abc\", \"abd\", \"cde\")) == (\"abcde\", \"abc\", \"abd\", \"cde\")\n    extract_rear((\"abcde\", \"abc\", \"abd\", \"cde\", \"xyz\")) == (\"abcde\", \"abc\", \"abd\", \"cde\", \"xyz\")\n    extract_rear((\"abcde\", \"abc\", \"abd\", \"cde\", \"xyz\", \"1\")) == (\"abcde\", \"abc\", \"abd\", \"cde\", \"xyz\", \"1\")\n    extract_rear((\"abcde\", \"abc\", \"abd\", \"cde\", \"xyz\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\")) == (\"abcde\", \"abc\", \"abd\", \"cde\", \"xyz\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\")\n    extract_rear((\"abcde\", \"abc\", \"abd\", \"cde\", \"xyz\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\")) == (\"abcde\", \"abc\", \"abd\", \"cde\", \"xyz\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\")\n    extract_rear((\"abcde\", \"abc\", \"abd\", \"cde\", \"xyz\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\")) == (\"abcde\", \"abc\", \"abd\", \"cde\", \"xyz\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\")\n    extract_rear((\"abcde\", \"abc\", \"abd\", \"cde\", \"xyz\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\", \"101\", \"102\", \"103\", \"104\", \"105\", \"106\", \"107\", \"108\", \"109\", \"110\", \"111\", \"112\", \"113\", \"114\", \"115\", \"116\", \"117\", \"118\", \"119\", \"120\", \"121\", \"122\", \"123\", \"124\", \"125\", \"126\", \"127\", \"128\", \"129\", \"130\", \"131\", \"132\", \"133\", \"134\", \"135\", \"136\", \"137\", \"138\", \"139\", \"140\", \"141\", \"142\", \"143\", \"144\", \"145\", \"146\", \"147\", \"148\", \"149\", \"150\", \"151\", \"152\", \"153\", \"154\", \"155\", \"156\", \"157\", \"158\", \"159\", \"160\", \"161\", \"162\", \"163\", \"164\", \"165\", \"166\", \"167\", \"168\", \"169\", \"170\", \"171\", \"172\", \"173\", \"174\", \"175\", \"176\", \"177\", \"178\", \"179\", \"180\", \"181\", \"182\", \"183\", \"184\", \"185\", \"186\", \"187\", \"188\", \"189\", \"190\", \"191\", \"192\", \"193\", \"194\", \"195\", \"196\", \"197\", \"198\", \"199\", \"200\", \"201\", \"202\", \"203\", \"204\", \"205\", \"206\", \"207\", \"208\", \"209\", \"210\", \"211\", \"212\", \"213\", \"214\", \"215\", \"216\", \"217\", \"218\", \"219\", \"220\", \"221\", \"222\", \"223\", \"224\", \"225\", \"226\", \"227\", \"228\", \"229\", \"230\", \"231\", \"232\", \"233\", \"234\", \"235\", \"236\", \"237\", \"238\", \"239\", \"240\", \"241\", \"242\", \"243\", \"244\", \"245\", \"246\", \"247\", \"248\", \"249\", \"250\", \"251\", \"252\", \"253\", \"254\", \"255\", \"256\", \"257\", \"258\", \"259\", \"260\", \"261\", \"262\", \"263\", \"264\", \"265\", \"266\", \"267\", \"268\", \"269\", \"270\", \"271\", \"272\", \"273\", \"274\", \"275\", \"276\", \"277\", \"278\", \"279\", \"280\", \"281\", \"282\", \"283\", \"284\", \"285\", \"286\", \"287\", \"288\", \"289\", \"290\", \"291\", \"292\", \"293\", \"294\", \"295\", \"296\", \"297\", \"298\", \"299\", \"300\", \"301\", \"302\", \"303\", \"304\", \"305\", \"306\", \"307\", \"308\", \"309\", \"310\", \"311\", \"312\", \"313\", \"314\", \"315\", \"316\", \"317\", \"318\", \"319\", \"320\", \"321\", \"322\", \"323\", \"324\", \"325\", \"326\", \"327\", \"328\", \"329\", \"330\", \"331\", \"332\", \"333\""
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_rear(('abcd', 'efgh')) == ('efgh', )\nassert     extract_rear(('a', 'bb', 'ccc', 'ddd', 'eeee')) == ('bb', 'ccc', 'ddd', 'eeee')\nassert     extract_rear(('abcd', 'efgh', 'hgfe', 'i')) == ('efgh', )\nassert     extract_rear(('abc', 'def', 'ghi', 'j')) == ('def', 'ghi', 'j')\nassert     extract_rear(('', '', '', '')) == ('')\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert         extract_rear(('abc', 'def', 'ghi', 'jkl','mno')) == ('abc', 'def','mno')\nassert         extract_rear(('abc', 'x', 'def', 'ghi', 'jkl','mno')) == ('abc','mno')\nassert         extract_rear(('abc', 'x', 'def', 'ghi', 'jkl','mno')) == ('abc', 'ghi','mno')\nassert         extract_rear(('abc', 'x', 'def', 'ghi', 'jkl','mno')) == ('abc', 'ghi', 'jkl')\nassert         extract_rear(('abc', 'x', 'def', 'ghi', 'jkl','mno')) == ('abc', 'ghi', 'jkl')\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_rear((\"abcd\", \"efgh\")) == (\"efgh\",)\nassert     extract_rear((\"abcd\", \"efgh\", \"ijkl\")) == (\"efgh\",)\nassert     extract_rear((\"abcd\", \"efgh\", \"ijkl\", \"mnop\")) == (\"efgh\",)\n\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_rear((1,2,3,4,5)) == (4,5)\nassert     extract_rear((1,2,3,4,5,6,7)) == (4,5)\nassert     extract_rear((1,2,3,4,5,6,7,8,9,10)) == (4,5)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_rear((1,2,3,4,5,6)) == (4,5,6)\nassert     extract_rear((1,2,3,4,5)) == (4,5)\nassert     extract_rear((1,2,3)) == (3,)\nassert     extract_rear((1,2,3,4,5,6,7,8,9,10)) == (9,10)\nassert     extract_rear(()) == ()\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_rear((\"abcd\",\"efgh\",True,12,3.14)) == (12,3.14)\nassert     extract_rear((\"abcd\",\"efgh\",True,12,3.14,10,9)) == (12,3.14,10,9)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_rear((\"hello\", \"hi\", \"bye\", \"goodbye\", \"hello\")) == (\"bye\", \"goodbye\", \"hi\")\nassert     extract_rear((\"hello\", \"hi\", \"bye\", \"goodbye\", \"hello\", \"hi\", \"hi\", \"bye\", \"bye\")) == (\"bye\", \"goodbye\", \"hi\", \"hi\")\nassert     extract_rear((\"hello\", \"hi\", \"bye\", \"goodbye\", \"hello\", \"hi\", \"hi\", \"bye\", \"bye\", \"hello\")) == (\"bye\", \"goodbye\", \"hi\", \"hi\", \"bye\")\nassert     extract_rear((\"hello\", \"hi\", \"bye\", \"goodbye\", \"hello\", \"hi\", \"hi\", \"bye\", \"bye\", \"hello\", \"hi\", \"bye\", \"goodbye\", \"bye\", \"goodbye\", \"hi\", \"bye\", \"hello\", \"hi\", \"bye\")) == (\"bye\", \"goodbye\", \"hi\", \"hi\", \"bye\")\nassert     extract_rear((\"hello\", \"hi\", \"bye\", \"goodbye\", \"hello\", \"hi\", \"hi\", \"bye\", \"bye\", \"hello\", \"hi\", \"bye\", \"goodbye\", \"bye\", \"goodbye\", \"hi\", \"bye\", \"hello\", \"hi\", \"bye\")) == (\"bye\", \"goodbye\", \"hi\", \"hi\", \"bye\")\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    # iterate through the list \n    count = 0\n    for i in range(0, len(list1)): \n        if list1[i] == x: \n            count += 1\n    return count \n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_element_in_list([[3, 4, 6, 7, 8], [\"a\", \"b\", \"c\", \"d\"]], 8) == 1, \"Wrong output\"\nassert     count_element_in_list([[3, 4, 6, 7, 8], [\"a\", \"b\", \"c\", \"d\"]], \"b\") == 2, \"Wrong output\"\nassert     count_element_in_list([[3, 4, 6, 7, 8], [\"a\", \"b\", \"c\", \"d\"]], \"e\") == 0, \"Wrong output\"\nassert     count_element_in_list([[3, 4, 6, 7, 8], [\"a\", \"b\", \"c\", \"d\"]], \"z\") == 0, \"Wrong output\"\nassert     count_element_in_list([[3, 4, 6, 7, 8], [\"a\", \"b\", \"c\", \"d\"]], \"h\") == 0, \"Wrong output\"\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    pass\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert count_element_in_list([], 1) == 0\nassert count_element_in_list([1, 2, 3, 4], 1) == 4\nassert count_element_in_list([1, 2, 3, 4], 2) == 2\nassert count_element_in_list([1, 2, 3, 4], 3) == 1\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_element_in_list(['a', 'b', 'a', 'c', 'a', 'a'], 'a') == 2, \"Wrong\"\nassert     count_element_in_list(['a', 'b', 'a', 'c', 'a', 'a'], 'b') == 1, \"Wrong\"\nassert     count_element_in_list(['a', 'b', 'a', 'c', 'a', 'a'], 'c') == 3, \"Wrong\"\nassert     count_element_in_list(['a', 'b', 'a', 'c', 'a', 'a'], 'd') == 0, \"Wrong\"\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_element_in_list([], 5) == 0\nassert     count_element_in_list([1,2,3,4], 4) == 1\nassert     count_element_in_list([1,2,3,4], 5) == 0\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_element_in_list([[1, 2, 3], [1, 2], []], 3) == 2, \"count_element_in_list should return 2\"\nassert     count_element_in_list([[1, 2, 3], [1, 2, 3, 4], []], 3) == 1, \"count_element_in_list should return 1\"\nassert     count_element_in_list([[1], []], 1) == 0, \"count_element_in_list should return 0\"\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7]) == \n[1, 3, 5, 7]\nassert filter_oddnumbers([0, 1, 2, 3, 4, 5, 6, 7]) == \n[0, 2, 4, 6, 7]\nassert filter_oddnumbers([4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]) == \n[4]\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     filter_oddnumbers([0, 1, 2, 3, 4, 5]) == [1, 3, 5], \"Wrong output\"\nassert     filter_oddnumbers([11, 3, 5, 66, 33, 88, 33, 1]) == [11, 33, 33, 33], \"Wrong output\"\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9, ]\nassert     filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == []\nassert     filter_oddnumbers([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == [10, 20, 30, 50, 70, 90, 100]\nassert     filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n\n\ndef filter_longestwords(s):\n    '''\n    Write a function that takes a string s and returns the longest word in the string.\n    '''\n    pass\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint('Coding complete? Click \"Check\" to earn cool rewards!')"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9]) ==     [1, 3, 5, 7, 9]\nassert     filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 11]) ==     [1, 3, 5, 7, 9]\nassert     filter_oddnumbers([]) ==     []\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef reverse_string(s):\n    '''\n    Write a function that reverses the given string\n    '''\n    pass\n\n\ndef reverse_string_2(s):\n    '''\n    Write a function that reverses the given string\n    '''\n    pass\n\n\ndef string_times(str1, num):\n    '''\n    Write a function that multiplies the given string\n    '''\n    pass\n\n\ndef string_times_2(str1, num):\n    '''\n    Write a function that multiplies the given string\n    '''\n    pass\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n'''\n***\n\n'''\ndef filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x%2!=0, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nfilter_oddnumbers([0,1,2,3,4]) == [1,3,4]\nfilter_oddnumbers([0,1,2,3,4]) == [1,3,4]\nfilter_oddnumbers([0,1,2,3,4]) == []\nfilter_oddnumbers([1,2,3,4,5]) == []"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     change_date_format(\"2019-09-15\") == \"15-09-2019\", \"Wrong format\"\nassert     change_date_format(\"09-09-2019\") == \"09-09-2019\", \"Wrong format\"\nassert     change_date_format(\"09-9-2019\") == \"09-09-2019\", \"Wrong format\"\nassert     change_date_format(\"12-1-2020\") == \"01-01-2020\", \"Wrong format\"\nassert     change_date_format(\"1-1-2020\") == \"01-01-2020\", \"Wrong format\"\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     change_date_format(\"2020-11-20\") == \"20-11-2020\"\nassert     change_date_format(\"2020-11-20\") == \"20-11-2020\"\nassert     change_date_format(\"20-11-2020\") == \"20-11-2020\"\nassert     change_date_format(\"2020-11-20\") == \"20-11-2020\"\nassert     change_date_format(\"2020-11-20\") == \"20-11-2020\"\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     change_date_format(None) == None, \"None value should be returned\"\nassert     change_date_format(\"dd-mm-yyyy\") == \"dd-mm-yyyy\", \"dd-mm-yyyy value should be returned\"\nassert     change_date_format(\"dd-mm-yyyy\") == \"dd-mm-yyyy\", \"dd-mm-yyyy value should be returned\"\nassert     change_date_format(\"dd-mm-yyyy\") == \"dd-mm-yyyy\", \"dd-mm-yyyy value should be returned\"\nassert     change_date_format(\"dd-mm-yyyy\") == \"dd-mm-yyyy\", \"dd-mm-yyyy value should be returned\"\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     change_date_format(\"2020-03-25\") == \"25-03-2020\"\nassert     change_date_format(\"2020/03/25\") == \"25-03-2020\"\nassert     change_date_format(\"2020-03-25\") == \"25-03-2020\"\nassert     change_date_format(\"2020-03-25\") == \"25-03-2020\"\nassert     change_date_format(\"2020-03-25\") == \"25-03-2020\"\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     change_date_format(\"19-05-2021\") == \"20-05-2021\"\nassert     change_date_format(\"20-05-1921\") == \"20-05-1921\"\nassert     change_date_format(\"\") == \"\"\nassert     change_date_format(None) == None\nassert     change_date_format(\"22-05-2021\") == \"22-05-2021\"\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     change_date_format(\"2000-01-10\") == \"10-01-2000\"\nassert     change_date_format(\"2020-06-07\") == \"07-06-2020\"\nassert     change_date_format(\"2020-08-25\") == \"25-08-2020\"\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     change_date_format('2020-04-13') == '13/04/2020'\nassert     change_date_format('2020-04-13') == '13/04/2020'\nassert     change_date_format('20-04-13') == '13/04/2020'\nassert     change_date_format('20-4-13') == '13/04/2020'\nassert     change_date_format('20-04-1') == '01/04/2020'\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     change_date_format( '2020-05-28' ) == '28-05-2020'\nassert     change_date_format( '2020-05-25' ) == '25-05-2020'\nassert     change_date_format( '2021-05-25' ) == '25-05-2021'\nassert     change_date_format( '2020-05-28' ) == '28-05-2020'\nassert     change_date_format( '2021-05-25' ) == '25-05-2021'\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     change_date_format('12-03-2015') == '31-03-2015'\nassert     change_date_format('12-3-2015') == '31-03-2015'\nassert     change_date_format('12-12-2015') == '31-12-2015'\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     change_date_format('2020-10-29') == '29-10-2020'\nassert     change_date_format('2020-11-01') == '01-11-2020'\nassert     change_date_format('2020-12-31') == '31-12-2020'\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n\ndef shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     shell_sort([10, 4, 8, 5, 6, 2]) == None, \\\n        \"shell_sort should return None\"\nassert     shell_sort(None) == None, \\\n        \"shell_sort should return None\"\nassert     shell_sort([]) == None, \\\n        \"shell_sort should return None\"\nassert     shell_sort([4]) == None, \\\n        \"shell_sort should return None\"\nassert     shell_sort([4, 1, 2, 3]) == None, \\\n        \"shell_sort should return None\"\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     shell_sort([1,2,3,4,5,6,7]) == [1,2,3,4,5,6,7]\nassert     shell_sort([0,9,4,5,6,1]) == [0,1,4,5,6,9]\nassert     shell_sort([]) == []\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     shell_sort([]) == []\nassert     shell_sort([1]) == [1]\nassert     shell_sort([1,2]) == [1,2]\nassert     shell_sort([2,3]) == [2,3]\nassert     shell_sort([3,2,1]) == [1,2,3]\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     and_tuples((1,2,3),(3,4,5)) == (1, 2, 3, 4, 5)\nassert     and_tuples((3,3,3),(3,3,3)) == (3, 3, 3)\nassert     and_tuples((1,1,2),(2,2,2)) == (1, 1, 2, 2, 2)\nassert     and_tuples((2,2,3),(3,3,3)) == (2, 2, 2, 3, 3)"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     and_tuples((1, 2, 3), (4, 5, 6)) == (1, 2, 3), 'incorrect'\nassert     and_tuples((2, 3, 4), (5, 6, 7)) == (2, 3, 4), 'incorrect'\nassert     and_tuples((1, 2, 3), (2, 4, 6)) == (1, 2, 3), 'incorrect'\nprint('\\t[TEST: PASS]')\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 4, 5, 6, 7, 8)\nassert     and_tuples((1, 1, 1, 1), (1, 2, 3, 4)) == (1, 1, 1, 1, 1, 1, 1, 1)\nassert     and_tuples((1, 2), (3, 4)) == (1, 2, 3, 4)\nassert     and_tuples((), ()) == ()\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     and_tuples(tuple(1, 2, 3), tuple(2, 4, 6)) == (2, 4, 6)\nassert     and_tuples(tuple(1, 2, 3), tuple(5, 6, 7)) == (2, 4, 6)\nassert     and_tuples(tuple(0, 1, 2), tuple(3, 4, 5)) == (2, 2, 2)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     and_tuples((1,2,3,4,5),(10,20,30,40,50)) == ((10,20,30,40,50),(1,2,3,4,5))\nassert     and_tuples((1,2,3,4,5),(10,20,30,40,50)) == ((10,20,30,40,50),(1,2,3,4,5))\nassert     and_tuples((1,2,3,4,5),(10,20,30,40,50)) == ((10,20,30,40,50),(1,2,3,4,5))\nassert     and_tuples((1,2,3,4,5),(10,20,30,40,50)) == ((10,20,30,40,50),(1,2,3,4,5))\nassert     and_tuples((1,2,3,4,5),(10,20,30,40,50)) == ((10,20,30,40,50),(1,2,3,4,5))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     and_tuples((1,2),(3,4)) == (1,2) and (3,4), \"Wrong Answer. Expected: (%(expected1)s, %(expected2)s) but got (%(got1)s, %(got2)s).\" % {\"expected1\": \"(1,2)\", \"expected2\": \"(3,4)\", \"got1\": (1,2), \"got2\": (3,4)}\nassert     and_tuples((1,2,3),(1,2,3)) == (1,2,3), \"Wrong Answer. Expected: (%(expected)s,) but got (%(got)s,)\" % {\"expected\": \"(1,2,3)\", \"got\": (1,2,3)}\n\n'''\nTestCase 4:\n\nInput:\ntest_tup1 = (1,2,3,4)\ntest_tup2 = (2,3,4,5)\n\nOutput:\n(2,3,4)\n'''\ndef or_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise or tuples from the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     (and_tuples((5,6,7),(8,9,10)) == (8,4,0)), \"and_tuples((5,6,7),(8,9,10)) is incorrect\"\nassert     (and_tuples((5,6,7),(8,7,10)) == (8,0,10)), \"and_tuples((5,6,7),(8,7,10)) is incorrect\"\nassert     (and_tuples((5,6,7),(8,9,8)) == (8,4,8)), \"and_tuples((5,6,7),(8,9,8)) is incorrect\"\nassert     (and_tuples((5,6,7),(8,9,9)) == (8,0,9)), \"and_tuples((5,6,7),(8,9,9)) is incorrect\"\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     and_tuples((1,2,3,4),(1,2,3,4)) == (1,2,3,4)\nassert     and_tuples((1,2,3,4),(1,2,5,6)) == (1,2,3,4)\nassert     and_tuples((1,2,3),(1,2,3,4)) == (1,2,3,4)\nassert     and_tuples((1,2,3),(4,5,6)) == (4,5,6)\n\n'''\nExpected Output:\n(1, 2, 3, 4)\n(1, 2, 3, 4)\n(1, 2, 3)\n(4, 5, 6)\n'''\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     parabola_directrix(2, 2, 4) == (-1.0, 3.0)\nassert     parabola_directrix(3, 4, -8) == (-2.0, -2.0)\nassert     parabola_directrix(6, -6, 16) == (-4.0, -4.0)\nassert     parabola_directrix(0.5, 0.5, -5) == (0.0, 1.0)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     parabola_directrix(1, 2, 3) == (1.25, -0.5)\nassert parabola_directrix(2, 4, 6) == (2.25, 2.5)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    # a\n    parabola_directrix(2, 3, 0) == -2.33\n    # b\n    parabola_directrix(-1, 0, 0) == 1.65\n    # c\n    parabola_directrix(0, 1, 1) == 2.33\n    # a\n    parabola_directrix(0, 1, -1) == -1.65\n    # b\n    parabola_directrix(-3, -1, -1) == 2.33\n    # c\n    parabola_directrix(0, 2, -2) == -1.65\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     parabola_directrix(1,0,0) == (2,0), \\\n    \"Wrong directrix\"\nassert     parabola_directrix(3,2,1) == (2,2), \\\n    \"Wrong directrix\"\nassert     parabola_directrix(2,-1,4) == (1,-2), \\\n    \"Wrong directrix\"\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     parabola_directrix(1, 0, 2) == [1, -2, 2]\nassert     parabola_directrix(1, 1, 2) == [1, -2, 1]\nassert     parabola_directrix(1, 2, 2) == [1, -2, -2]\nassert     parabola_directrix(1, 3, 2) == [1, -2, 0]\n\nprint(\"parabola_directrix tests passed\")\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     parabola_directrix(1, 2, 0) == 1\nassert     parabola_directrix(1, 2, 3) == 1\nassert     parabola_directrix(1, 2, 4) == 1\nassert     parabola_directrix(1, 2, -5) == 1\nassert     parabola_directrix(0, 0, 0) == 0\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     parabola_directrix(1, 0, 0) =='verticle'\nassert     parabola_directrix(1, 1, 0) == 'infinite line'\nassert     parabola_directrix(1, -2, 1) == 'infinite line'\nassert     parabola_directrix(0, 1, 0) =='verticle'\nassert     parabola_directrix(-1, 1, 0) =='verticle'\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     parabola_directrix(1, 0, 0) == (0, 0)\nassert     parabola_directrix(1, 0, 1) == (1, -1)\nassert     parabola_directrix(1, 1, 1) == (1, 1)\nassert     parabola_directrix(0, 1, 1) == (1, 1)\nassert     parabola_directrix(0, 0, 1) == (1, 0)\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     common_element([1,2,3], [1,2,3]) == True\nassert     common_element([1,2,3], [2,3,4]) == False\nassert     common_element([1,2,3], [3,4,5]) == True\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     common_element([1,2,3,4],[3,4,5,6]) == True\nassert     common_element([1,2,3,4],[5,6,7,8]) == False\nassert     common_element([1,2,3,4],[]) == True\nassert     common_element([], [4,5,6]) == False\nassert     common_element([], []) == True\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     common_element([1, 2, 3], [1, 2, 4]) == True\nassert     common_element([1, 2, 3], [1, 2, 2]) == False\nassert     common_element([1, 2, 3], [1, 2, 3]) == True\nassert     common_element([1, 2, 3], [4, 5, 6]) == False"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     common_element([1,2,3,4], [3,4,5,6]) == True\nassert common_element([1,2,3,4], [2,3,4,5,6]) == False\nassert common_element([2,3,4,5,6], [1,2,3,4]) == True\nassert common_element([2,3,4,5,6], [1,2,3,4,6]) == True\n\nprint('All tests passed!')\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    pass\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     common_element([1,2,3], [1,2,3])     ==     True\nassert     common_element([1,2,3], [1,3,3])     ==     False\nassert     common_element([], [])                 ==     False\nassert     common_element([1,2,3,4], [5,6,7,8]) ==     True\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     common_element([1,2,3], [1,2,3]) == True\nassert     common_element([1,2,3], [4,5,6]) == False\nassert     common_element([1,2,3], [1,2,3,4]) == True\nassert     common_element([1,2,3], [2,4]) == False\nassert     common_element([1,2,3], [4]) == False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     common_element([1,2,3,4,5,6], [3,4,5,6,7,8])     == True\nassert     common_element([1,2,3,4,5,6], [3,4,6,7,8,9])     == False\nassert     common_element([1,2,3,4,5,6], [7,8,9,10,11,12])     == True\nassert     common_element([1,2,3,4,5,6], [7,8,9,11,12])     == False\nassert     common_element([], [1,2,3,4,5,6])     == False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     common_element([1,2], [2,3]) == True\nassert     common_element([1,2], [2,4]) == False\nassert     common_element([1,2,3], [2,4]) == True\nassert     common_element([1,2,3], [3,4]) == True\nassert     common_element([1,2,3], [3,4,5]) == False"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    pass\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint('The median length of a trapezium is', median_trapezium(1,2,3),'units')\nprint('The median length of a trapezium is', median_trapezium(2,2,5),'units')\nprint('The median length of a trapezium is', median_trapezium(3,3,4),'units')\nprint('The median length of a trapezium is', median_trapezium(3,2,4),'units')\nprint('The median length of a trapezium is', median_trapezium(4,1,6),'units')\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint('\\n-------------------------------------\\n')\n\nprint('-------------------------------------')\nprint('\\t  Median of Trapezium')\nprint('-------------------------------------')\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     median_trapezium(1,2,3)    == 3.5\nassert     median_trapezium(3,4,5)    == 3.5\nassert     median_trapezium(5,6,7)    == 4\nassert     median_trapezium(8,9,10)    == 4.5\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint('PASSED ALL TESTS!')"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     median_trapezium(10, 5, 3) == 5.0, \"The median of a trapezium is incorrect!\"\nassert     median_trapezium(6, 3, 5) == 4.0, \"The median of a trapezium is incorrect!\"\nassert     median_trapezium(3, 5, 10) == 4.5, \"The median of a trapezium is incorrect!\"\nassert median_trapezium(10, 2, 1) == 2.0, \"The median of a trapezium is incorrect!\"\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_greater([1, 2, 3], 1)\nassert     not check_greater([1, 2, 3], 2)\nassert     not check_greater([1, 2, 3], 4)\nassert     check_greater([-1, -2, -3], -1)\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_greater([1,2,3], -1) == False, \"check_greater[1,2,3] should return False\"\nassert check_greater([1,2,3], 1) == True, \"check_greater[1,2,3] should return True\"\nassert check_greater([0,1,2], 2) == True, \"check_greater[0,1,2] should return True\"\nassert check_greater([0,1,2], 0) == False, \"check_greater[0,1,2] should return False\"\nassert check_greater([0,1,2], 1) == False, \"check_greater[0,1,2] should return False\"\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_greater([2,4,5], 3) == False, \"True test failed\"\nassert     check_greater([3,4,5], 4) == True, \"True test failed\"\nassert     check_greater([2,4,5], 2) == True, \"True test failed\"\nassert     check_greater([2,4,5], 5) == False, \"True test failed\"\nassert     check_greater([2,4,5], 6) == False, \"True test failed\"\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef check_equal(arr, number):\n    '''\n    Write a function to check whether the entered number is equal to the elements of the given array.\n    '''\n    pass\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_greater([1,2,3], 1) == True, \"Expected True\"\nassert     check_greater([1,2,3], 2) == True, \"Expected True\"\nassert     check_greater([1,2,3], 3) == False, \"Expected False\"\nassert     check_greater([1,2,3], 4) == False, \"Expected False\"\n\ndef check_greater_or_equal(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than or equal to the elements of the given array.\n    '''\n    pass\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_greater([1, 2, 3, 4, 5], 5) == True, \"Wrong answer for this case\"\nassert     check_greater([5, 5, 5, 5, 5], 5) == False, \"Wrong answer for this case\"\nassert     check_greater([5, 5, 5, 5, 5], 5) == True, \"Wrong answer for this case\"\nassert     check_greater([1, 2, 3, 4, 5], 4) == True, \"Wrong answer for this case\"\nassert     check_greater([1, 2, 3, 4, 5], 6) == False, \"Wrong answer for this case\"\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_greater([1, 2, 3], 1) == False, 'Wrong answer for a[1, 2, 3] = 1'\nassert     check_greater([1, 2, 3], 2) == False, 'Wrong answer for a[1, 2, 3] = 2'\nassert     check_greater([1, 2, 3], 3) == True, 'Wrong answer for a[1, 2, 3] = 3'\nassert     check_greater([1, 2, 3], 4) == False, 'Wrong answer for a[1, 2, 3] = 4'\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_greater([1, 2, 3], 0) == False\nassert     check_greater([1, 2, 3], 3) == True\nassert     check_greater([-1, 2, 3], 3) == False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pass\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_match_one('ab') == False, 'Should be False'\nassert     text_match_one('a') == False, 'Should be False'\nassert     text_match_one('aa') == True, 'Should be True'\nassert     text_match_one('ab') == True, 'Should be True'\nassert     text_match_one('ba') == False, 'Should be False'\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_one('aab') == True\nassert     text_match_one('aaa') == False\nassert     text_match_one('a') == False\nassert     text_match_one('ab') == True\nassert     text_match_one('aab') == True\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_match_one(\"aabbba\") == True, \"Should match a followed by one or more b's\"\nassert     text_match_one(\"aab\") == False, \"Should not match a followed by one or more b's\"\nassert     text_match_one(\"b\") == False, \"Should not match an empty string\"\nassert     text_match_one(\"\") == False, \"Should not match empty string\"\nassert     text_match_one(\"aa\") == False, \"Should not match a followed by one a\"\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_match_one('ab') == 'ab'\nassert     text_match_one('abb') == 'abb'\nassert     text_match_one('a') == None\nassert     text_match_one('aabb') == None\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_one('ab') == False\nassert     text_match_one('ba') == False\nassert     text_match_one('ababababab') == True\nassert     text_match_one('ababababab') == False\n\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by more than one b's.\n    '''\n    pass\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pass\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert text_match_one('ab') == True, \"Should return True when input a and b exists\"\nassert text_match_one('abc') == False, \"Should return False when input a and b doesn't exist\"\nassert text_match_one('abcd') == True, \"Should return True when input a and b exists\"\nassert text_match_one('abcde') == False, \"Should return False when input a and b doesn't exist\"\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_one('ab') == True\nassert     text_match_one('abab') == True\nassert     text_match_one('bbbbbbbb') == True\nassert     text_match_one('ababc') == False\nassert     text_match_one('a') == False\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     last_Digit(1234) == 4\nassert     last_Digit(12) == 2\nassert     last_Digit(100) == 1\nassert     last_Digit(1000) == 0\nassert     last_Digit(0) == 0\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     last_Digit(12345) == 5\nassert     last_Digit(123456789) == 7\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     last_Digit(123) == 3, \"Test 1 failed\"\nassert     last_Digit(12) == 1, \"Test 2 failed\"\nassert     last_Digit(0) == 0, \"Test 3 failed\"\nassert     last_Digit(3456) == 5, \"Test 4 failed\"\nassert     last_Digit(0) == 0, \"Test 5 failed\"\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     last_Digit(2345) == 5\nassert     last_Digit(1234) == 1\nassert     last_Digit(789) == 7\nassert     last_Digit(456789) == 8\nassert     last_Digit(11) == 1\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     last_Digit(100) == 0\nassert     last_Digit(1000) == 3\nassert     last_Digit(123456) == 4\nassert     last_Digit(1000.1) == 3\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     last_Digit(1234567890) == 1\nassert     last_Digit(12345678) == 0\nassert     last_Digit(12345) == 4\nassert     last_Digit(1) == 0\nassert     last_Digit(1000) == 1\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     last_Digit(30) == 2, \"Should return 2\"\nassert     last_Digit(7) == 7, \"Should return 7\"\nassert     last_Digit(40) == 0, \"Should return 0\"\nassert     last_Digit(99) == 9, \"Should return 9\"\nassert     last_Digit(1234) == 4, \"Should return 4\"\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     last_Digit(23) == 0\nassert     last_Digit(9) == 1\nassert     last_Digit(13) == 1\nassert     last_Digit(1) == 1\nassert     last_Digit(100) == 1\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     last_Digit(10) == 0\nassert     last_Digit(11) == 1\nassert     last_Digit(123) == 2\nassert     last_Digit(456) == 5\nassert     last_Digit(987) == 7\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     last_Digit(0) == 0\nassert     last_Digit(255) == 1\nassert     last_Digit(1024) == 1\nassert     last_Digit(999) == 9\nassert     last_Digit(100) == 0\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     neg_nos([3, 2, 1, -4]) == [-3, -2, -1], neg_nos([3, 2, 1, -4])\nassert     neg_nos([]) == [], neg_nos([])\nassert     neg_nos([3, 2, -3]) == [-3, -2, -3], neg_nos([3, 2, -3])\nassert     neg_nos([-2, -3]) == [-2, -3], neg_nos([-2, -3])\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     neg_nos([1, -2, -3, 0, 4]) == [-1, -2, -3, -4, -5]\nassert     neg_nos([-2, -3, 0, 1, 2, 4]) == [-2, -3, -4, -1, -2, -4]\nassert     neg_nos([-2, 0, 1]) == [-2, 0, 1]\nassert     neg_nos([-2, 0, 1, 0, 1]) == [-2, 0, 1, -1, -2]\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     neg_nos([\"-1\",\"-2\",\"-3\",\"-4\"]) == [\"-4\",\"-3\",\"-2\",\"-1\"]\nassert     neg_nos([\"-1\",\"-2\",\"-3\"]) == [\"-3\",\"-2\",\"-1\"]\nassert     neg_nos([]) == []\nassert     neg_nos([-2,-3,-4]) == [-4,-3,-2]\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     neg_nos([1, 2, -3, 0, 4, -5, 6]) == [0, -4, -6, -2, -1, -3, -5]\nassert neg_nos([1, 2, -3, 0, 4, -5, 6]) == [-6, -5, -4, -3, -2, -1, 0]\n\ndef get_factors(n):\n    '''\n    Write a python function to return the factors of a number n.\n    '''\n    pass\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     neg_nos(\n            [1, -2, -5, -2, -7, -2, -6, 0, -9]\n    ) == [-2, -5, -7, -6, -9]\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nneg_nos(tuple(['a', 'b', 'c'])) == (-1, -2, -3)\nassert neg_nos(tuple(['a', 'b', 'c'])) == (-1, -2, -3)\nassert neg_nos(list(['a', 'b', 'c'])) == (-1, -2, -3)\nassert neg_nos(list(['a', 'b', 'c'])) == (-1, -2, -3)\nassert neg_nos(list(['a', 'b', 'c'])) == (-1, -2, -3)\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     neg_nos(    [1,-2,3,0,-1]    ) == [-1,-2,3,-1]\nassert     neg_nos(    [-1,2,-3,0]    ) == [-1,2,-3]\n\n\ndef swap(list1):\n    '''\n    Write a python function to swap elements in a list.\n    '''\n    pass\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     neg_nos([]) == []\nassert     neg_nos([0, 1, 2, 3]) == [-1, -2, -3, 0]\nassert     neg_nos([-2, -1, 0, 1, 2, 3, 4]) == [-1, -2, -3, 0, -1, -2, -3, 0, 1, -1, 2, -1, 3, -1, 4]\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     neg_nos(    [    -7,    -9,    -2,    -8,    -4,    -6,    -5,    -3,    -1,    -10] ) ==     [    -10,    -9,    -8,    -7,    -5,    -4,    -3,    -2,    -1,    -7]\n\n\ndef positive_nos(list1):\n    '''\n    Write a python function to return the positive numbers in a list.\n    '''\n    pass\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef check_odd_string(str1):\n    '''\n    Write a function to check if a string contains odd characters.\n    '''\n    pass\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    for i in range(len(str1)):\n        if i%2 == 0:\n            str1 = str1.replace(str1[i],'')\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n'''\nAnother way to write this function is to use:\nre.findall(r'\\d', s) to get all digits,\nre.findall(r'[^\\d]', s) to get all characters except digits.\n'''\n\ndef remove_odd(s):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return \"\".join(i for i in s if not i.isdigit())\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_odd('e') == 'e'\nassert     remove_odd('o') == 'o'\nassert     remove_odd('l') == 'l'\nassert     remove_odd('x') == 'x'\nassert     remove_odd('k') == 'k'\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_odd('hello world') == 'll wrld', \"Should be ll wrld\"\nassert     remove_odd('hello') == 'h', \"Should be h\"\nassert     remove_odd('hello world') == 'lwrld', \"Should be lwrld\"\nassert     remove_odd('world') == '', \"Should be empty\"\nassert     remove_odd('b') == '', \"Should be empty\"\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_odd(\"HelloWorld\") == \"HeloWrd\"\nassert     remove_odd(\"Helloworld\") == \"Helwrdlo\"\nassert     remove_odd(\"Hello\") == \"Hello\"\nassert     remove_odd(\"H\") == \"H\"\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_odd(\"abcd\") == \"bcd\", \"Should return a string of even characters.\"\nassert     remove_odd(\"abcd\") == \"\", \"Should return an empty string.\"\nassert     remove_odd(\"a\") == \"\", \"Should return an empty string.\"\nassert     remove_odd(\"\") == \"\", \"Should return an empty string.\"\nassert     remove_odd(\"gwqfk\") == \"\", \"Should return an empty string.\"\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_odd(\"aabcc\") == \"abc\"\nassert     remove_odd(\"abdce\") == \"abcd\"\nassert     remove_odd(\"abbcc\") == \"abc\"\nassert     remove_odd(\"abbdd\") == \"\"\nassert     remove_odd(\"abbb\") == \"\"\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_bidirectional([(1,2), (3,4), (2,3)]) == 2\nassert     count_bidirectional([(2,3), (4,5), (3,4)]) == 2\nassert     count_bidirectional([(2,3), (4,5), (5,4)]) == 2\nassert     count_bidirectional([(1,2), (3,4), (2,3), (5,4)]) == 2\nassert     count_bidirectional([(1,2), (3,4), (2,3), (5,4), (5,4)]) == 2\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef count_bidirectional_dict(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    pass\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_bidirectional([]) == 0, 'No tuple pairs in the list'\nassert     count_bidirectional([[1,2]]) == 1, 'One bidirectional pair'\nassert     count_bidirectional([[1,2,3,4]]) == 2, 'Two bidirectional pairs'\nassert     count_bidirectional([[1,2], [3,4]]) == 0, 'No bidirectional tuple pairs'\nassert     count_bidirectional([[1,2,3,4], [5,6,7,8]]) == 1, 'One bidirectional pair'\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_bidirectional(test_list) == 2, count_bidirectional(test_list)\nassert     count_bidirectional([1, 2]) == 0, count_bidirectional([1, 2])\n\nprint(\"\\t\\tCoding complete? Click 'Check' to earn cool rewards!\""
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_bidirectional(\n        [(1,1),\n        (1,2),\n        (2,1),\n        (2,2)]) == 4\nassert     count_bidirectional(\n        [(1,1),\n        (2,1),\n        (1,2),\n        (2,2)]) == 4\nassert     count_bidirectional(\n        [(1,1),\n        (1,2),\n        (2,1),\n        (2,2)]) == 5\nassert     count_bidirectional(\n        [(1,1),\n        (2,1),\n        (1,2),\n        (3,1)]) == 3\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_bidirectional([(1,2),(2,1)]) == 2, \"Should return 2\"\nassert     count_bidirectional([(1,2),(2,3),(3,4)]) == 3, \"Should return 3\"\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_bidirectional([(2, 3), (3, 2), (3, 3)]) == 2\nassert     count_bidirectional([(1, 2), (2, 1), (2, 1)]) == 1\nassert     count_bidirectional([(1, 1), (1, 1)]) == 0\nassert     count_bidirectional([]) == 0\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_bidirectional([(1,2), (3,4), (5,6)]) == 1, 'first'\nassert     count_bidirectional([(1,2), (3,4), (5,6), (1,2)]) == 2,'second'\nassert     count_bidirectional([(1,2), (3,4), (5,6), (1,2), (3,4)]) == 3, 'third'\nassert     count_bidirectional([(1,2), (3,4), (5,6), (1,2), (3,4), (5,6)]) == 4, 'fourth'\nassert     count_bidirectional([(1,2), (3,4), (5,6), (1,2), (3,4), (5,6), (1,2), (3,4)]) == 5, 'fifth'\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_bidirectional(\n[('sunday','mon'),('tuesday','sunday'),('wednesday','tuesday'),('thursday','wednesday'),('friday','thursday'),('saturday','friday')]\n) == 6\n\nprint('All tests passed!')\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_bidirectional([(1,3),(3,1)]) == 2, 'Wrong'\nassert count_bidirectional([(1,3),(3,1),(3,4),(4,3)]) == 4, 'Wrong'\nassert count_bidirectional([(1,3),(3,1),(3,4),(4,3),(1,2)]) == 3, 'Wrong'\nassert count_bidirectional([(1,2),(2,1),(1,3),(3,1)]) == 1, 'Wrong'\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     multiple_to_single([1,3,5,7]) == 21\nassert multiple_to_single([1,2,3,4,5]) == 45\nassert multiple_to_single([1,2,3,4,5,5]) == 105\nassert multiple_to_single([1,2,3,4,5,5,6,7,8,9,10]) == 1240\nassert multiple_to_single([]) == None\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     multiple_to_single([1,2,3]) == 6\nassert multiple_to_single([]) == 0\nassert multiple_to_single([1,2]) == 2\nassert multiple_to_single([1,2,3,4,5,6]) == 24\nassert multiple_to_single([1,2,3,4,5,6,7,8,9]) == 324\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     multiple_to_single([2,4,5,6]) == 20\nassert     multiple_to_single([4,5,6]) == 30\nassert     multiple_to_single([2,5,6]) == 30\nassert     multiple_to_single([]) == 0\nassert multiple_to_single([1,1,1,1,1]) == 4\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     multiple_to_single([1, 2, 3, 4]) == 12, 'Wrong result'\nassert     multiple_to_single([1, 2, 3, 4]) == 12, 'Wrong result'\nassert     multiple_to_single([1, 2, 3, 4]) == 12, 'Wrong result'\nassert     multiple_to_single([1, 2, 3, 4]) == 12, 'Wrong result'\nassert     multiple_to_single([1, 2, 3, 4]) == 12, 'Wrong result'\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     multiple_to_single([]) == 0\nassert     multiple_to_single([1, 2, 3]) == 6\nassert     multiple_to_single([4, 5, 6]) == 15\nassert     multiple_to_single([1, 2, 3, 4]) == 24\nassert     multiple_to_single([1, 2, 3, 4, 5]) == 120\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     multiple_to_single([1, 2, 3]) == 6, 'Wrong'\nassert     multiple_to_single([1, 2, 3, 4, 5]) == 15, 'Wrong'\nassert     multiple_to_single([]) == 0, 'Wrong'\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     multiple_to_single([]) == 0, \\\n        \"Multiple_to_single(): Wrong output for an empty input\"\nassert     multiple_to_single([1]) == 1, \\\n        \"Multiple_to_single(): Wrong output for an input with a single element\"\nassert     multiple_to_single([1,2]) == 3, \\\n        \"Multiple_to_single(): Wrong output for an input with more than one element\"\nassert     multiple_to_single([1,2,3,4]) == 10, \\\n        \"Multiple_to_single(): Wrong output for an input with more than one element\"\nassert     multiple_to_single([1,2,3,4,5]) == 15, \\\n        \"Multiple_to_single(): Wrong output for an input with more than one element\"\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert multiple_to_single([1,2,3]) == 6\nassert multiple_to_single([3,6]) == 18\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     multiple_to_single([1,2,3]) == 6\nassert     multiple_to_single([]) == 0\nassert     multiple_to_single([1]) == 1\nassert     multiple_to_single([1,2,3,4,5,6,7,8,9]) == 45\nassert     multiple_to_single([1,2,3,4,5,6,7,8,9,0]) == 45\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_adverb_position(\"I love my cat.\") == (\"love\", 4)\nassert     find_adverb_position(\"I love my dog.\") == (\"love\", 4)\nassert     find_adverb_position(\"I love my brother.\") == (\"love\", 4)\nassert     find_adverb_position(\"I love my brother.\") == (\"love\", 4)\n\ndef find_main_verb(text):\n    '''\n    Write a function to find the first main verb and their positions in a given sentence.\n    '''\n    pass\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_adverb_position(\"I'm sorry. I'm afraid I can't do that.\") == [\"I'm\", \"sorry\", \"I\", \"fear\", \"I\", \"can\", \"do\", \"that\"]\nassert     find_adverb_position(\"No, I can't do that. It's sad.\") == [\"No\", \"I\", \"can\", \"not\", \"do\", \"that\", \"sad\"]\nassert     find_adverb_position(\"It's sad. I can't do that.\") == [\"It\", \"sad\", \"I\", \"can\", \"not\", \"do\", \"that\"]\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_adverb_position('This is a sentence.') == (0, 1), 'First adverb position in the sentence.'\nassert     find_adverb_position('The second one.') == (1, 2), 'Second adverb position in the sentence.'\nassert     find_adverb_position('The third one.') == (2, 3), 'Third adverb position in the sentence.'\nassert     find_adverb_position('and the fourth one.') == (3, 4), 'Fourth adverb position in the sentence.'\n\ndef find_noun_position(text):\n    '''\n    Write a function to find the first noun and their positions in a given sentence.\n    '''\n    pass\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_adverb_position( \"I would like to buy a house, but not today, because the air is cool, and I want the right amount of money\" ) == {(0, 'I'), (4, 'not')}\nassert     find_adverb_position( \"I would like to buy a house, but not today, because the air is cool\" ) == {(0, 'I'), (6, 'not')}\nassert     find_adverb_position( \"I'd like to buy a house, but not today, because the air is cool\" ) == {(0, 'I'), (6, 'not')}\nassert     find_adverb_position( \"I'd like to buy a house, but not today\" ) == {(0, 'I'), (6, 'not')}\nassert     find_adverb_position( \"I'd like to buy a house, but not today, and I want the right amount of money\" ) == {(0, 'I'), (6, 'not')}\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_adverb_position(\"The adverb quick took us to my dog.\") == (1, 3)\nassert     find_adverb_position(\"The adverb quick took us to my dog. The quick was too quick.\") == (1, 5)\nassert     find_adverb_position(\"The quick took us to my dog.\") == (None, None)\nassert     find_adverb_position(\"The quick took us to my dog. The dog was quick.\") == (None, None)\n\ndef find_verb_position(text):\n    '''\n    Write a function to find the first verb and their positions in a given sentence.\n    '''\n    pass\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_adverb_position('The dog is hairy.') == ('The', 8)\nassert     find_adverb_position('The cat is very cute.') == ('The', 1)\nassert     find_adverb_position('The dog is hairy.') == ('The', 8)\nassert     find_adverb_position('The cat is very cute.') == ('The', 1)\nassert     find_adverb_position('The cat is very hairy.') == ('The', 1)\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_adverb_position(\"If you don't like it, just like it, and the robot is yours, the robot is yours\") == True\nassert    find_adverb_position(\"If you don't like it, just like it, and the robot is yours, the robot is yours\") == False\nassert    find_adverb_position(\"If you don't like it, just like it, and the robot is yours, the robot is yours\") == True\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_adverb_position('hello my dog is from India') == {'the': 2, 'dog': 4}\nassert     find_adverb_position('hello everyone from India') == {'the': 1, 'everybody': 3}\nassert     find_adverb_position('hello everyone from India and my dog is from India') == {'the': 1, 'everybody': 3, 'dog': 4}\nassert     find_adverb_position('hello everyone from India and my dog is from India and he is from India') == {'the': 1, 'everybody': 3, 'dog': 4, 'he': 5}\nassert     find_adverb_position('hello everyone from India and my dog is from India and my cat is from India') == {'the': 1, 'everybody': 3, 'dog': 4,'my cat': 5}\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_adverb_position('I found a blue car') == 1\nassert     find_adverb_position('I found a red car') == 3\nassert     find_adverb_position('I found a green car') == 5\nassert     find_adverb_position('I found a yellow car') == 8\n\ntext = 'I found a blue car'"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_adverb_position(\"The weather was nice, and I had a great trip.\") == [\"nice\", \"trip\"]\nassert     find_adverb_position(\"The weather was nice, and I had a great trip.\") == [\"nice\", \"trip\"]\nassert     find_adverb_position(\"I was scared of the dark at night.\") == [\"scared\"]\nassert     find_adverb_position(\"I was scared of the dark at night.\") == [\"scared\"]\nassert     find_adverb_position(\"I am scared of the dark at night.\") == [\"scared\"]\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     surfacearea_cube(1) == 8\nassert surfacearea_cube(2) == 27\nassert surfacearea_cube(3) == 54\nassert surfacearea_cube(4) == 120\nassert surfacearea_cube(5) == 228\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     surfacearea_cube(1) == 8\nassert     surfacearea_cube(2) == 10\nassert     surfacearea_cube(3) == 14\nassert     surfacearea_cube(4) == 18\nassert     surfacearea_cube(5) == 22\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     surfacearea_cube(1) == 12\nassert     surfacearea_cube(2) == 60\nassert     surfacearea_cube(3) == 108\nassert     surfacearea_cube(4) == 144\nassert     surfacearea_cube(5) == 200\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     surfacearea_cube(0) == 0\nassert     surfacearea_cube(1) == 4\nassert     surfacearea_cube(2) == 6\nassert     surfacearea_cube(3) == 12\nassert     surfacearea_cube(4) == 20\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     surfacearea_cube(1)    ==    8, 'Wrong surface area'\nassert     surfacearea_cube(3)    ==    18, 'Wrong surface area'\nassert     surfacearea_cube(5)    ==    36, 'Wrong surface area'\nassert     surfacearea_cube(7)    ==    50, 'Wrong surface area'\nassert     surfacearea_cube(10)    ==    66, 'Wrong surface area'\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere with the given radius.\n    '''\n    pass\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert positive_count([]) == 0, 'Empty array'\nassert positive_count([1, 2, 3]) == 0.5, 'Multiple of the same'\nassert positive_count([1, 2, -3]) == 0, 'Negative number'\nassert positive_count([-1, 2, 3]) == 0, 'Negative number'\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef digit_count(n):\n    '''\n    Write a function to count the number of digits in an integer.\n    '''\n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     positive_count([1,2,3,4,-5]) == 0.25\nassert positive_count([1,-2,3,4]) == 0.5\nassert positive_count([1,2,3,4,5]) == 0.5\nassert positive_count([1,2,3,-5]) == 0.5\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     positive_count([0, 0, 0, 0, 1, 2]) == 2, \"Test 1 Failed\"\nassert     positive_count([1, 1, 1, 1, 1, 2]) == 3, \"Test 2 Failed\"\nassert     positive_count([1, 1, 1, 1, 1, 1, 1]) == 2, \"Test 3 Failed\"\nassert     positive_count([0, -1, -1, -1, -1, -1, -1]) == 4, \"Test 4 Failed\"\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     positive_count([1,-1,2,3,-4,5,-6]) == 3/7\nassert     positive_count([1,0,2,3,4,5,6]) == 4/7\nassert     positive_count([1,-3,-2,0,-4,5,-6]) == 2/7\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \npositive_count(nums) == 2/3\n\ndef word_counter(words):\n    '''\n    Write a function to find the ratio of words in an array of strings.\n    '''\n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert positive_count([2,1,-7,3,6,-4,-9,10,-1]) ==.583333333333333\nassert positive_count([-2,-1,-7,-3,-6,-4,-9,-10]) == -.4166666666666666\nassert positive_count([]) == 0\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     positive_count([1,-3,2,0,4,6,7]) == 1.5, 'incorrect positive_count'\nassert positive_count([0,0,0,0,0,0,0]) == 0.0, 'incorrect positive_count'\n\ndef vowel_count(string):\n    '''\n    Write a function to count the number of vowels in a string.\n    '''\n    pass\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     largest_neg([-1, -2, -3, -4, -5]) == -5\nassert     largest_neg([-1, -2, -3, -4]) == -4\nassert     largest_neg([-1]) == -1\nassert largest_neg([-1, -2, -3, -4, -5, -6]) == -6\nassert largest_neg([-1, -2, -3, -4, -5, -6, -7]) == -7\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     largest_neg([-3,-2,4,-1]) == -1\nassert     largest_neg([-4,-3,-2,-1]) == -1\nassert     largest_neg([-4,-3,-2]) == -2\nassert     largest_neg([-4,-3,-2,4]) == 4\nassert     largest_neg([-4,-3,-2,1]) == -1\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nlargest_neg([-20, -5, 0, 5, -10]) == 5\nassert largest_neg([-20, -5, 0, 5, -10]) == 5\n\nassert largest_neg([]) == None\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert largest_neg([-4,-8,-4,-9,-1,-2]) == -4, \"should return -4\"\nassert largest_neg([1, 2, 3, 4, 5, 6]) == 6, \"should return 6\"\nassert largest_neg([-5,-5,10,7,12]) == -5, \"should return -5\"\nassert largest_neg([-5,10,-5,12]) == 10, \"should return 10\"\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     largest_neg([]) == None, \"Input is empty\"\nassert     largest_neg([1, 2, 3]) == 3, \"Wrong Value\"\nassert     largest_neg([-2, -1, -3]) == -1, \"Wrong Value\"\nassert     largest_neg([-1, -2, -3]) == -1, \"Wrong Value\"\nassert     largest_neg([0, -1, -2]) == 0, \"Wrong Value\"\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert largest_neg([]) == None\nassert largest_neg([3, 4, -1, -5, -6]) == -5\nassert largest_neg([3, 4, -1, -5, -6, 2]) == -6\nassert largest_neg([-6, -5, -4, -3, -2]) == -2\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     largest_neg([-2, -3, -5, -7]) == -7\nassert     largest_neg([-1, -2, -4, -6, -9, -10]) == -9\nassert     largest_neg([-1, -2, -4, -6, -9, -10, -13]) == -13\nassert     largest_neg([-1, -2, -4, -6, -9, -10, -12]) == -12\nassert     largest_neg([-1, -2, -4, -6, -9, -10, -11]) == -11\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert largest_neg([-10, -20, 0, 5]) == -20\nassert largest_neg([-100, -5, 0, -20, -5]) == -5\nassert largest_neg([-100, -5, 0, -20, -5, -5, -5]) == -5\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nlargest_neg([-5,-6,-10,-1]) == -1\nassert largest_neg([-5,-10,-1]) == -1\nassert largest_neg([-5,-10]) == -10\nassert largest_neg([-5,-10,-2]) == -2\n\nprint(\"Hurray! your function is working correctly!\")\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nlargest_neg([-2,-3,-5,-1]) == -1\n\nlargest_neg([-2,-3,-5,1]) == -5\n\nlargest_neg([-2,-3,-5,1,2]) == -5\n\nlargest_neg([-2,-3,-5,1,-3,-5,2]) == -2\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef trim_tuple_test():\n    assert trim_tuple([(1, 2, 3), (4, 5, 6, 7), (8, 9), (10, 11, 12, 13), (14, 15, 16, 17)], 3) == \\\n        [(1, 2, 3), (4, 5, 6, 7), (8, 9), (10, 11, 12, 13)]\n    assert trim_tuple([(1, 2, 3), (4, 5, 6, 7), (8, 9), (10, 11, 12, 13), (14, 15, 16, 17)], 0) == \\\n        [(1, 2, 3), (4, 5, 6, 7), (8, 9), (10, 11, 12, 13), (14, 15, 16, 17)]\n    assert trim_tuple([(1, 2, 3), (4, 5, 6, 7), (8, 9), (10, 11, 12, 13), (14, 15, 16, 17)], 1) == \\\n        [(1, 2, 3), (4, 5, 6, 7), (8, 9), (10, 11, 12, 13)]\n    "
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert trim_tuple([1,2,3,4,5], 1) == [(2,3,4,5)]\nassert trim_tuple([1,2,3,4,5], 2) == [(3,4,5)]\nassert trim_tuple([1,2,3,4,5], 3) == [(2,3,4)]\nassert trim_tuple([1,2,3,4,5], 4) == [(1,2,3,4)]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     trim_tuple([(1, 2), (3, 4), (5, 6)], 1) == \\\n        [(2, 3), (4, 5), (6, None)]\nassert     trim_tuple([(1, 2), (3, 4), (5, 6)], 2) == \\\n        [(1, 2), (3, 4), (5, 6)]\n\ndef is_list_of_tuple(my_list):\n    '''\n    Write a function to check whether a given list is a list of tuple.\n    '''\n    pass\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     trim_tuple([(1,2,3), (4,5), (6,7,8), (9,10)], 3) == \\\n((1,2,3), (4,5), (6,7,8), (9,10))\nassert trim_tuple([(1,2,3,4,5), (6,7,8,9), (10,11,12,13,14)], 2) == \\\n((1,2,3,4,5), (6,7,8,9), (10,11,12,13,14))\nassert trim_tuple([(1,2), (3,4), (5,6,7,8,9,10)], 2) == \\\n((1,2), (3,4), (5,6,7,8,9,10))\nassert trim_tuple([(1,2,3), (4,5), (6,7,8,9,10), (11,12,13,14)], 3) == \\\n((1,2,3), (4,5), (6,7,8,9,10), (11,12,13,14))\nassert trim_tuple([(1,2,3), (4,5), (6,7,8), (9,10,11,12,13,14)], 3) == \\\n((1,2,3), (4,5), (6,7,8), (9,10,11,12,13,14))\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     trim_tuple([], 10) == []\nassert     trim_tuple([(1, 2, 3, 4), (5, 6, 7, 8)], 1) == [(1, 2, 3, 4)]\nassert     trim_tuple([(1, 2, 3, 4), (5, 6, 7, 8)], 2) == [(5, 6, 7, 8)]\nassert     trim_tuple([(1, 2, 3, 4), (5, 6, 7, 8)], 3) == [(1, 2, 3, 4), (5, 6, 7, 8)]\nassert     trim_tuple([(1, 2, 3, 4), (5, 6, 7, 8)], 4) == [(1, 2, 3, 4), (5, 6, 7, 8)]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     trim_tuple([(1,2,3), (2,3), (4,5,6)], K=2) == [(1,2), (4,5,6)]\nassert     trim_tuple([(1,2,3), (2,3), (4,5,6)], K=1) == [(1,2,3), (2,3), (4,5,6)]\nassert     trim_tuple([(1,2,3), (2,3), (4,5,6)], K=0) == [(1,2,3), (2,3), (4,5,6)]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     trim_tuple([1,2,3,4,5], 1) == [(1,2,3,4,5)]\nassert     trim_tuple([1,2,3,4,5], 2) == [(1,2,3,4), (5,)]\nassert     trim_tuple([1,2,3,4,5], 3) == [(1,2,3), (4,5,)]\nassert     trim_tuple([1,2,3,4,5], 4) == [(1,2,3,4), (5,)]\nassert     trim_tuple([1,2,3,4,5], 5) == []\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     trim_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 3) == [(1, 2, 3), (4, 5, 6)]\nassert     trim_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 4) == [(1, 2, 3), (4, 5, 6)]\nassert     trim_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 5) == [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     trim_tuple([(1,2), (2,2), (3,2)], 2) == [(1,2), (3,2)]\nassert     trim_tuple([(1,2), (2,2), (3,2)], 1) == [(2,2), (3,2)]\nassert     trim_tuple([(1,2), (2,2), (3,2)], 0) == [(1,2), (2,2), (3,2)]\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     index_multiplication((1,2,3),(4,5,6)) == (4,10,18), \"index_multiplication((1,2,3),(4,5,6))\"\nassert     index_multiplication((5,6,4),(1,2,3)) == (30,36,24), \"index_multiplication((5,6,4),(1,2,3))\"\nassert     index_multiplication((2,4,6),(8,10,12)) == (80,80,120), \"index_multiplication((2,4,6),(8,10,12))\"\nassert     index_multiplication((1,2),(3,4,5)) == (3,4,5), \"index_multiplication((1,2),(3,4,5))\"\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     index_multiplication((5, 6), (5, 6)) == (25, 36)\nassert     index_multiplication((2, 3), (5, 6)) == (10, 18)\nassert     index_multiplication((1, 2, 3, 4), (5, 6, 7, 8)) == (5, 20, 35, 70)\nassert     index_multiplication((1, 2, 3), (5, 6, 7)) == (5, 20, 35)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18)\nassert     index_multiplication((1, 2), (3, 4, 5)) == (3, 4, 5)\n\n'''\nQuestion:\nPlease write a program that calculates and prints the value according to the given formula:\nQ = Square root of [(2 * C * D)/H]\nFollowing are the fixed values of C and H:\nC is 50. H is 30.\nD is the variable whose values should be input to your program in a comma-separated sequence.\nExample\nLet us assume the following comma separated input sequence is given to the program:\n100,150,180\nThe output of the program should be:\n18,22,24\n\nHints:\nIf the output received is in decimal form, it should be rounded off to its nearest value \nwithout any decimal.\nIn case of input data being supplied to the question, it should be assumed to be a console input.\n'''"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     index_multiplication((1,2,3,4),(10,20,30,40)) == (10,40,90,80)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     index_multiplication((1, 2), (3, 4)) == ((1, 2), (3, 4))\nassert index_multiplication((1, 2, 4), (3, 4)) == ((1, 2, 4), (3, 4))\nassert index_multiplication((1, 2, 4), (3, 4, 5)) == ((1, 2, 4), (3, 4, 5))\nassert index_multiplication((1, 2, 4), (3, 4, 5, 6)) == ((1, 2, 4, 6), (3, 4, 5, 6))\nassert index_multiplication((1, 2, 4), (3, 4, 5, 6, 7)) == ((1, 2, 4, 6, 7), (3, 4, 5, 6, 7))\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18)\nassert     index_multiplication((1, 2, 3), (5, 6, 7)) == (5, 6, 7)\nassert     index_multiplication((1, 2, 3), (5, 6, 7)) == (5, 6, 7)\n\nprint('All tests passed!'"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    test_tup1 = (1, 2, 3, 4, 5)\n    test_tup2 = (10, 20, 30)\n    print(index_multiplication(test_tup1, test_tup2)"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     index_multiplication((1, 2, 3, 4), (2, 3, 4, 5)) == (2, 4, 6, 8)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     index_multiplication((1,2),(3,4)) == (1,2,3,4), \"Index_multiplication function is not working as expected\"\nprint(\"Assertion 1 is Passed!\")\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     index_multiplication((1,2,3), (1,2,3)) == (1,4,9), 'index_multiplication() fails'\nassert     index_multiplication((2,4,6), (1,2,3)) == (2,8,12), 'index_multiplication() fails'\nassert     index_multiplication((4,8,12), (1,2,3)) == (8,16,24), 'index_multiplication() fails'\nassert     index_multiplication((4,8,12), (1,2,3)) == (8,16,24), 'index_multiplication() fails'\nassert     index_multiplication((1,2,3), (4,8,12)) == (4,8,24), 'index_multiplication() fails'\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    count_Occurrence([1,2,3,3], [1,2,2,2,2,2,2,2,2,2]) == Counter([1,2,2,2,2,2,2,2,2,2])\n    count_Occurrence([1,2,3,3], [1,2,3,3,3,3,3,3,3,3]) == Counter([1,2,3,3,3,3,3,3,3,3])\nassert count_Occurrence([1,2,3,4], [1,2,3,4,4,4,4,4,4,4]) == Counter([1,2,3,4,4,4,4,4,4,4])\nassert count_Occurrence([1,2,3,4], [1,2,3,4,5,6,7,8,9,10]) == Counter([1,2,3,4,5,6,7,8,9,10])\nassert count_Occurrence([1,2,3,4], [1,2,3,4,5,6,7,8,9,10]) == Counter([1,2,3,4,5,6,7,8,9,10])\nassert count_Occurrence([1,2,3,4,5], [1,2,3,4,5,5,5,5,5,5]) == Counter([1,2,3,4,5,5,5,5,5,5])\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_Occurrence((1,2,3,4,5,6,1,2,3,4,5), range(10)) == Counter({1: 5, 2: 4, 3: 4, 4: 3, 5: 3, 6: 2, 7: 1, 8: 1, 9: 1})\n\ndef move_Elems(tup, lst):\n    '''\n    Write a python function to move all the elements of a tuple to the end of the list.\n    '''\n    pass\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_Occurrence((1,2,3,4), (1,2,3,3,3,4,4,5)) == 3\nassert     count_Occurrence((1,2,3,4), (1,2,3,4,4,5,6,6)) == 1\nassert     count_Occurrence((1,2,3,4,5), (1,2,3,4,5,6,6)) == 2\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ncount_Occurrence((1, 2, 2, 2),[1, 1, 1, 2, 2, 3, 3, 3, 3, 2, 2, 1]) == (2,3,1)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_Occurrence((1,2,3,4,1,2),[1,2,3,4,5]) == Counter(Counter(range(5)) & Counter(range(5)) & Counter(range(5)) & Counter(range(5)))\nassert count_Occurrence((1,2,3,4,1,2),[1,2,3,4,5]) == Counter(Counter(range(5)) & Counter(range(5)) & Counter(range(5)))\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ntup = (\"a\", \"b\", \"c\", \"a\", \"d\", \"b\", \"e\") \nlst = [\"a\", \"b\", \"c\", \"a\", \"d\", \"b\", \"e\"] \n\ncount_Occurrence(tup, lst) == Counter(lst)\nprint(\"\\nPass\" if count_Occurrence(tup, lst) == Counter(lst) else \"Fail\")\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_Occurrence((1,2,3),[1,1,1]) == {1:3,2:1,3:1}\nassert     count_Occurrence((1,2,3),[2,2,3,1]) == {1:3,2:1,3:2}\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ncount_Occurrence((1,2,3,4,5,6), [1,3,5]) == 1\nassert count_Occurrence((1,2,3,4,5,6), [1,3,5]) == 1\nassert count_Occurrence((1,2,3,4,5,6), [1,3,5]) == 1\nassert count_Occurrence((1,2,3,4,5,6), [1,3,5]) == 1\nassert count_Occurrence((1,2,3,4,5,6), [1,3,5]) == 1\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     cube_nums([1,2,3,4,5]) == [1, 8, 27, 64, 125]\nassert cube_nums([1,2,3,4,5,6,7,8,9]) == [1, 8, 27, 64, 125, 216, 343, 512, 729]\nassert cube_nums([1,2,3,4,5,6,7,8,9,10]) == [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     cube_nums([1,2,3]) == [1,8,27], \"Testing fails...\"\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     cube_nums([2, 3, 8]) == [8, 27, 64], \"cube_nums\"\nassert     cube_nums([0, 1, 2]) == [0, 1, 4], \"cube_nums\"\n\ndef multiply_nums(nums):\n    '''\n    Write a function to multiply all the numbers in a list.\n    '''\n    pass\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ncube_nums([1,2,3,4,5,6,7,8,9,10]) == [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\nassert \ncube_nums([]) == []\nassert \ncube_nums([1,2,3,4,5]) == [1, 8, 27, 64, 125]\nassert \ncube_nums([1,2,3,4,5,6,7]) == [1, 8, 27, 64, 125, 343]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     cube_nums([1,2,3,4]) == [1,8,27,64]\nassert     cube_nums([-1,-2,-3,-4]) == [-1,-64,-169,-256]\nassert     cube_nums([-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100]) == [-30, -180, -2772, -4096]\n\ndef count_odd_ints(nums):\n    '''\n    Write a function to count the number of odd numbers in a list.\n    '''\n    pass\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     cube_nums([0,1,2,3,4]) == [0,1,8,27,64], 'cube_nums failed'\nassert     cube_nums([1,2,3,4,5]) == [1,4,25,64,125], 'cube_nums failed'\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     cube_nums([]) == [], 'Empty list'\nassert     cube_nums([5]) == [125], 'Single element'\nassert     cube_nums([1,2,3]) == [1, 8, 27], 'List of elements'\n\ncube_nums = lambda nums: map(lambda x: x ** 3, nums)\nassert cube_nums([]) == [], 'Empty list'\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     cube_nums([1, 2, 3, 4, 5]) ==  [1, 8, 27, 64, 125]\nassert     cube_nums([-1, -2, -3, -4, -5]) ==  [-1, -8, -27, -64, -125]\nassert     cube_nums([0, 2, 4, 6, 8]) ==  [0, 16, 64, 256, 4096]\nassert     cube_nums([1, 1, 1, 1]) ==  [1, 1, 1, 1]\nassert     cube_nums([-1, -2, -3, -4, -5]) ==  [-1, -8, -27, -64, -125]\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(\"check_sum = \", cal_sum(10))\nprint(\"check_sum = \", cal_sum(11))\nprint(\"check_sum = \", cal_sum(12))\nprint(\"check_sum = \", cal_sum(100))\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nimport unittest\nclass TestCalSum(unittest.TestCase):\n    def test_cal_sum(self):\n        self.assertEqual(cal_sum(10), 55)\n        self.assertEqual(cal_sum(1000), 12201)\n        self.assertEqual(cal_sum(100000), 5513070)\n        self."
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert cal_sum(2) == 1\nassert cal_sum(5) == 11\nassert cal_sum(20) == 25\nassert cal_sum(101) == 1\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert cal_sum(5) == 15, \"Wrong output.\"\nassert cal_sum(8) == 48, \"Wrong output.\"\nassert cal_sum(2) == 2, \"Wrong output.\"\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ncal_sum(100) == 1050\ncal_sum(0) == 0\ncal_sum(6) == 42"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(cal_sum(1)) # 1\nprint(cal_sum(2)) # 3\nprint(cal_sum(3)) # 6\nprint(cal_sum(10)) # 385\nprint(cal_sum(11)) # 406\n\n\n\ndef cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    pass\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_string(['abc', 'xyz', 'aaa', 'bbb', 'c'], 3) == ['abc', 'bbb', 'c']\nassert     extract_string(['abc', 'xyz', 'aaa', 'bbb', 'c'], 4) == ['abc']\nassert     extract_string(['abc', 'xyz', 'aaa', 'bbb', 'c'], 2) == ['abc', 'xyz']\nassert     extract_string(['abc', 'xyz', 'aaa', 'bbb', 'c'], 1) == ['abc', 'xyz']\nassert     extract_string(['abc', 'xyz', 'aaa', 'bbb', 'c'], 0) == []\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_string(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m'], 10) == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m']\nassert     extract_string(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n'], 10) == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m']\nassert     extract_string(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o'], 10) == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n']\nassert     extract_string(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p'], 10) == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n']\nassert     extract_string(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q'], 10) == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n']\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_string([\"This is a test string\", \"Two\", \"more strings\", \"Three more\"],2) == [\"Two\", \"more strings\", \"Three more\"]\nassert     extract_string([\"One\", \"Two\", \"Three\", \"Four\", \"Five\"],2) == [\"Two\", \"Three\"]\nassert     extract_string([\"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\"],3) == [\"Five\", \"Six\", \"Seven\"]\nassert     extract_string([\"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\", \"Twenty\", \"Twenty-one\", \"Twenty-two\", \"Twenty-three\"],2) == [\"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\"]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_string([\"abcd\", \"abdd\", \"abcde\"], 2) == [\"ab\", \"bc\"]\nassert     extract_string([\"abcd\", \"abdd\", \"abcde\"], 3) == [\"ab\", \"bc\", \"de\"]\nassert     extract_string([\"abcd\", \"abdd\", \"abcde\"], 1) == [\"ab\"]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_string([1,2,3,4,5], 1) == [1]\nassert     extract_string([1,2,3,4,5], 2) == [2,3]\nassert     extract_string([1,2,3,4,5], 3) == [3,4,5]\nassert     extract_string([1,2,3,4,5], 4) == [4,5]\nassert     extract_string([1,2,3,4,5], 5) == [5]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint('Verified')\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_string(['p', 'r', 'a', 'c', 'k'], 4) == ['p', 'r', 'a', 'c']\nassert     extract_string(['p', 'r', 'a', 'c', 'k'], 2) == ['p', 'r']\nassert     extract_string(['p', 'r', 'a', 'c', 'k'], 1) == ['p', 'a', 'c', 'k']\nassert     extract_string(['p', 'r', 'a', 'c', 'k'], 0) == ['p', 'r', 'a', 'c', 'k']\nassert     extract_string([], 3) == []\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_string(['i','am','a','student','of','python'], 3) =='student', 'extract_string([\"i\",\"am\",\"a\",\"student\",\"of\",\"python\"],3)!= student'\nassert     extract_string(['i','am','a','student','of','python'], 1) == 'i', 'extract_string([\"i\",\"am\",\"a\",\"student\",\"of\",\"python\"],1)!= i'\nassert     extract_string(['i','am','a','student','of','python'], -1) =='student', 'extract_string([\"i\",\"am\",\"a\",\"student\",\"of\",\"python\"],-1)!= student'\nassert     extract_string(['i','am','a','student','of','python'], 1.0) == 'i', 'extract_string([\"i\",\"am\",\"a\",\"student\",\"of\",\"python\"],1.0)!= i'\nassert     extract_string(['i','am','a','student','of','python'], 0) == 'i', 'extract_string([\"i\",\"am\",\"a\",\"student\",\"of\",\"python\"],0)!= i'\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_whitespaces('      ') == '', \"Should remove whitespaces\"\nassert     remove_whitespaces('  ') == '', \"Should remove whitespaces\"\nassert     remove_whitespaces('  hello ') == 'hello', \"Should remove whitespaces\"\nassert     remove_whitespaces('   hello ') == 'hello', \"Should remove whitespaces\"\n\ndef remove_extraneous_spaces(text2):\n    '''\n    Write a function to remove all leading and trailing spaces from the given string.\n    '''\n    pass\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert remove_whitespaces(\"\\n\\n\\n\\n\\n  \\n  \") == \"\"\nassert remove_whitespaces(\"  \") == \"\"\nassert remove_whitespaces(\"\") == \"\"\nassert remove_whitespaces(\"\\n\") == \"\"\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_whitespaces(\"Hello World\") == \"Hello World\", \"Should be 'Hello World'\"\nassert     remove_whitespaces(\" Hello World\") == \"Hello World\", \"Should be 'Hello World'\"\nassert     remove_whitespaces(\"  Hello World  \") == \"Hello World\", \"Should be 'Hello World'\"\nassert     remove_whitespaces(\" \") == \"\", \"Should be ''\"\nassert     remove_whitespaces(\"  \") == \"\", \"Should be ''\"\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert remove_whitespaces('This is a test sentence with ') == 'This is a test sentence with', 'It is an error in remove_whitespaces'\nassert remove_whitespaces('This is a test sentence with ') == 'This is a test sentence with', 'It is an error in remove_whitespaces'\nassert remove_whitespaces('This is a test sentence with') == 'This is a test sentence with', 'It is an error in remove_whitespaces'\nassert remove_whitespaces('This is a test sentence with') == 'This is a test sentence with', 'It is an error in remove_whitespaces'\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef get_neighbors(graph, node):\n    '''\n    Write a function to return the neighboring nodes of the given node.\n    '''\n    pass\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    remove_whitespaces(\"     \") == \"\"\n    remove_whitespaces(\"  \") == \"\"\n    remove_whitespaces(\" \") == \"\"\n    remove_whitespaces(\"\") == \"\"\n    remove_whitespaces(\"line 1\\nline 2\\nline 3\\n\") == \"line 1\\nline 2\\nline 3\\n\"\n    remove_whitespaces(\"   \") == \"\"\n    remove_whitespaces(\"line 1\\nline 2\\nline 3\\n\") == \"line 1\\nline 2\\nline 3\\n\"\n    remove_whitespaces(\"line 1\\nline 2\\nline 3\\n\") == \"line 1\\nline 2\\nline 3\\n\"\n    remove_whitespaces(\"line 1\\nline 2\\nline 3\\n\") == \"line 1\\nline 2\\nline 3\\n\"\n    remove_whitespaces(\"line 1\\nline 2\\nline 3\\n\\n\") == \"line 1\\nline 2\\nline 3\\n\\n\"\n    remove_whitespaces(\"   \") == \"\"\n    remove_whitespaces(\"line 1\\nline 2\\nline 3\\n\") == \"line 1\\nline 2\\nline 3\\n\"\n    remove_whitespaces(\"line 1\\nline 2\\nline 3\\n\") == \"line 1\\nline 2\\nline 3\\n\"\n    remove_whitespaces(\"line 1\\nline 2\\nline 3\\n\") == \"line 1\\nline 2\\nline 3\\n\"\n    remove_whitespaces(\"line 1\\nline 2\\nline 3\\n\") == \"line 1\\nline 2\\nline 3\\n\"\n    remove_whitespaces(\"line 1\\nline 2\\nline 3\\n\\n\") == \"line 1\\nline 2\\nline 3\\n\\n\"\n    remove_whitespaces(\"line 1\\nline 2\\nline 3\\n\\n\") == \"line 1\\nline 2\\nline 3\\n\\n\"\n    remove_whitespaces(\"line 1\\nline 2\\nline 3\\n\\n\") == \"line 1\\nline 2\\nline 3\\n\\n\"\n    remove_whitespaces(\"line 1\\nline 2\\nline 3\\n\\n\") == \"line 1\\nline 2\\nline 3\\n\\n\"\n    remove_whitespaces(\"line 1\\nline 2\\nline 3\\n\\n\") == \"line 1\\nline 2\\nline 3\\n\\n\"\n    remove_whitespaces(\"\\n\\n\\n\\n\\n\") == \"\\n\\n\\n\\n\\n\"\n    remove_whitespaces(\"line 1\\nline 2\\nline 3\\n\\n\") == \"line 1\\nline 2\\nline 3\\n\\n\"\n    remove_whitespaces(\"line 1\\nline 2\\nline 3\\n\") == \"line 1\\nline 2\\nline 3\\n\"\n    remove_whitespaces(\"line 1\\nline 2\\nline 3\\n\") == \"line 1\\nline 2\\nline 3\\n\"\n    remove_whitespaces(\"line 1\\nline 2\\nline 3\") == \"line 1\\nline 2\\nline 3\"\n    remove_whitespaces(\"line 1\\nline 2\\nline 3\\n\\n\") == \"line 1\\nline 2\\nline 3\\n\\n\"\n    remove_whitespaces(\"line 1\\nline 2\\nline 3\\n\\n\\n\") == \"line 1\\nline 2\\nline 3\\n\\n\\n\"\n    remove_whitespaces(\"line 1\\nline 2\\nline 3\\n\\n\\n\") == \"line 1\\nline 2\\nline 3\\n\\n\\n\"\n    remove_whitespaces(\"line 1\\nline 2\\nline 3\\n\\n\\n\\n\\n\") == \"line 1\\nline 2\\nline 3\\n\\n\\n\\n\\n\"\n    remove_whitespaces(\"line 1\\nline 2\\nline 3\\n\\n\\n\\n\\n\\n\") == \"line 1\\nline 2\\nline 3\\n\\n\\n\\n\\n\\n\"\n    remove_whitespaces(\"line 1\\nline 2\\nline 3\\n\\n\\n\\n\\n\\n\") == \"line 1\\nline 2\\nline 3\\n\\n\\n\\n\\n\\n\"\n    remove_whitespaces(\"line 1\\nline 2\\nline 3\\n\\n\\n\\n\\n\\n\") == \"line 1\\nline 2\\nline 3\\n\\n\\n\\n\\n\\n\"\n    remove_whitespaces(\"line 1\\nline 2\\nline 3\\n\\n\\n\\n\\n\\n\") == \"line 1\\nline 2\\nline 3\\n\\n\\n\\n\\n\\n\"\n    remove_whitespaces(\"line 1\\nline 2\\nline 3\\n\\n\\n\\n\\n\\n\") == \"line 1\\nline 2\\nline 3\\n\\n\\n\\n\\n\\n\"\n    remove_whitespaces(\"line 1\\nline 2\\nline 3\\n\\n\\n\\n\\n\\n\") == \"line 1\\nline 2\\nline 3\\n\\n\\n\\n\\n\\n\"\n    remove_whitespaces(\"line 1\\nline 2\\nline 3\\n\\n\\n\\n\\n\\n\") == \"line 1\\nline 2\\nline 3\\n\\n\\n\\n\\n\\n\"\n    remove_whitespaces(\"line 1\\nline 2\\nline 3\\n\\n\\n\\n\\n\\n\") == \"line 1\\nline 2\\nline 3\\n\\n\\n\\n\\n\\n\"\n    remove_whitespaces(\"line 1\\nline 2\\nline 3\\n\\n\\n\\n\\n\\n\") == \"line 1\\nline 2\\nline 3\\n\\n\\n\\n\\n\\n\"\n    remove_whitespaces(\"line 1\\nline 2\\nline 3\\n\\n\\n\\n\\n\\n\") == \"line 1\\nline 2\\nline 3\\n\\n\\n\\n\\n\\n\"\n    remove_whitespaces(\"line 1\\nline 2\\nline 3\\n\\n\\n\\n\\n\\n\") == \"line 1\\nline 2\\nline 3\\n\\n\\n\\n\\n\\n\"\n    remove_whitespaces(\"line 1\\nline 2\\nline 3\\n\\n\\n\\n\\n\\n\") == \"line 1\\nline 2\\nline 3\\n\\n\\n\\n\\n\\n\"\n    remove_whitespaces(\"line 1\\nline 2\\nline 3\\n\\n\\n\\n\\n\\n\") == \"line 1\\nline 2\\nline 3\\n\\n\\n\\n\\n\\n\"\n    remove_whitespaces(\"line 1\\nline 2\\nline 3\\n\\n\\n\\n\\n\\n\") == \"line 1\\nline 2\\nline 3\\n\\n\\n\\n\\n\\n\"\n    remove_whitespaces(\"line 1\\nline 2\\nline 3\\n\\n\\n\\n\\n\\n\") == \"line 1\\nline 2\\nline 3\\n\\n\\n\\n\\n\\n\"\n    remove_whitespaces(\"line 1\\nline 2\\nline 3\\n\\n\\n\\n\\n\\n\") == \"line 1\\nline 2\\nline 3\\n\\n\\n\\n\\n\\n\"\n    remove_whitespaces(\"line 1\\nline 2\\nline 3\\n\\n\\n\\n\\n\\n\") == \"line 1\\nline 2\\nline 3\\n\\n\\n\\n\\n\\n\"\n    remove_whitespaces(\"line 1\\nline 2\\nline 3\\n\\n\\n\\n\\n\\n\") == \"line 1\\nline 2\\nline 3\\n\\n\\n\\n\\n\\n\"\n    remove_whitespaces(\"line 1\\nline 2\\nline 3\\n\\n\\n\\n\\n\\n\") ="
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_whitespaces('              ') =='             ', \\\n        'The function should return the same string with whitespaces removed'\nassert     remove_whitespaces('    ') =='   ', \\\n        'The function should return the same string with whitespaces removed'\nassert     remove_whitespaces('Test') == 'Test', \\\n        'The function should return the same string with whitespaces removed'\nassert     remove_whitespaces('   ') =='  ', \\\n        'The function should return the same string with whitespaces removed'\nassert     remove_whitespaces(' ') == '', \\\n        'The function should return the same string with whitespaces removed'\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_whitespaces(\"   abcd  \") == \"abcd\", \"test 1 failed\"\nassert     remove_whitespaces(\"   abcd  \") == \"abcd\", \"test 2 failed\"\nassert     remove_whitespaces(\"  abc   \") == \"abc\", \"test 3 failed\"\nassert     remove_whitespaces(\"  abc\") == \"abc\", \"test 4 failed\"\nassert     remove_whitespaces(\"      \") == \"\", \"test 5 failed\"\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_whitespaces(\"Hello World\") == \"Hello World\"\nassert     remove_whitespaces(\"1 2 3   4\") == \"1 2 3 4\"\nassert     remove_whitespaces(\"4 5 6  7\") == \"4 5 6 7\"\nassert     remove_whitespaces(\"4 5 6\") == \"4 5 6\"\nassert     remove_whitespaces(\"Hello\") == \"Hello\"\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_whitespaces(\"\") == \"\"\nassert     remove_whitespaces(\" \") == \"\"\nassert     remove_whitespaces(\"  \") == \"\"\nassert     remove_whitespaces(\"  Hello  \") == \"Hello\"\nassert     remove_whitespaces(\"  Hello, world!  \") == \"Hello, world!\"\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     loss_amount(10,100) == 0, \"Check your logic\"\nassert loss_amount(10,70) == -40, \"Check your logic\"\nassert loss_amount(10,0) == 10, \"Check your logic\"\nassert loss_amount(10,-10) == 0, \"Check your logic\"\nassert loss_amount(10,5) == -5, \"Check your logic\"\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     loss_amount(100,20) == 40\nassert     loss_amount(100,100) == 0\nassert     loss_amount(100,110) == 30\nassert     loss_amount(100,150) == 0\nassert     loss_amount(100,200) == 0\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(loss_amount(100,20))\nprint(loss_amount(100,10))\nprint(loss_amount(100,90))\nprint(loss_amount(100,1))\nprint(loss_amount(100,0))\nprint(loss_amount(100,-1))\nprint(loss_amount(100,-10))\n\ndef get_loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    pass\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     loss_amount(1000000, 0) == 0, \"You are wrong\"\nassert     loss_amount(1000000, 1) == 0, \"You are wrong\"\nassert     loss_amount(1000000, 0.5) == 1000000, \"You are wrong\"\nassert     loss_amount(1000000, 1.0) == 0, \"You are wrong\"\nassert     loss_amount(1000000, 0.75) == 1000000, \"You are wrong\"\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     loss_amount(30,100) == 0 \nassert     loss_amount(60,100) == 50 \nassert     loss_amount(70,100) == 70 \nassert     loss_amount(100,100) == 0 \nassert     loss_amount(100,30) == 50 \n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nloss_amount(1,1) == 0\nassert \nloss_amount(0,1) == 1\nassert \nloss_amount(0,0) == 0\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     loss_amount(100,100) == 0, \"test 1\"\nassert     loss_amount(150,150) == 0, \"test 2\"\nassert     loss_amount(100,250) == 50, \"test 3\"\nassert     loss_amount(300,500) == 250, \"test 4\"\nassert     loss_amount(350,250) == 250, \"test 5\"\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     loss_amount(100,50) == -50, 'loss_amount did not work as expected'\nassert    loss_amount(500,200) == 0, 'loss_amount did not work as expected'\nassert    loss_amount(500,100) == 100, 'loss_amount did not work as expected'\nassert    loss_amount(500,500) == 0, 'loss_amount did not work as expected'\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     loss_amount(1000,1000) == 0, '1000.0 is loss amount!'\nassert     loss_amount(1000,1000.1) == 0.1, '1000.1 is loss amount!'\nassert     loss_amount(1000,2000) == 0, '2000 is loss amount!'\nassert     loss_amount(1000,2000.1) == 0.1, '2000.1 is loss amount!'\nassert     loss_amount(1000,5000) == -500, '-500 is loss amount!'\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     loss_amount(30,200) == 0, 'incorrect'\nassert     loss_amount(30,1) == 30, 'incorrect'\nassert     loss_amount(30,0) == 30, 'incorrect'\nassert     loss_amount(10,1) == 0, 'incorrect'\nassert     loss_amount(10,10) == 0, 'incorrect'\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(sumofFactors(20) == 4) \nprint(sumofFactors(100) == 50) \nprint(sumofFactors(13) == 1) \n\n\ndef sumofDivisors(n) : \n    '''\n    Write a python function to find the sum of all divisors of a number.\n    '''\n    pass\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sumofFactors(6) == 1\nassert     sumofFactors(8) == 4\nassert     sumofFactors(1) == 0\nassert     sumofFactors(2) == 0\nassert     sumofFactors(9) == 1\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(sumofFactors(8)) # 6\nprint(sumofFactors(12)) # 8\nprint(sumofFactors(3)) # 3\nprint(sumofFactors(6)) # 2\n\n\ndef sumofFactors2(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    #code here\n    return sum(list(map(lambda x: x if x % 2 == 0 else None, range(1, n + 1))))\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sumofFactors(2) == 1\nassert     sumofFactors(3) == 0\nassert     sumofFactors(4) == 2\nassert     sumofFactors(6) == 2\nassert     sumofFactors(8) == 3\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(sumofFactors(12))\n\n'''\nExpected output :\n8\n'''"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    total=0\n    for i in range(1, n) :\n        if (n%i==0) :\n            total=total+i\n    return total\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nif __name__ == '__main__' : \n    n =  7\n    print(sumofFactors(n))\n    #>>>4\n\ndef maxOfArray(arr) : \n    '''\n    Write a python function to find the maximum value in a given array.\n    '''\n    pass\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sumofFactors(5) == 0, 'Test 1 Failed'\nassert     sumofFactors(6) == 1, 'Test 2 Failed'\nassert     sumofFactors(7) == 2, 'Test 3 Failed'\nassert     sumofFactors(8) == 3, 'Test 4 Failed'\nassert     sumofFactors(9) == 4, 'Test 5 Failed'\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_wordz('Fruit') == True\nassert     text_match_wordz('apple') == False\nassert     text_match_wordz('apples') == False\nassert     text_match_wordz('Apples') == True\nassert     text_match_wordz('Apepples') == False\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_match_wordz('zebra and zebra case') == 'zebra case', 'incorrect'\nassert     text_match_wordz('zebra and zebra case') == 'zebra', 'incorrect'\nassert     text_match_wordz('zebra case') == 'zebra and zebra case', 'incorrect'\nassert     text_match_wordz('zebra case') == 'zebra', 'incorrect'\nassert     text_match_wordz('zebra case') == 'zebra', 'incorrect'\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_wordz(\"zebra\") == True\nassert    text_match_wordz(\"zebra\") == False\nassert    text_match_wordz(\"zebra\") == True\nassert    text_match_wordz(\"zebra\") == False\nassert    text_match_wordz(\"zebra\") == True\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.match(r\"z\", text)\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_match_wordz('sunday') == False\nassert     text_match_wordz('sundayz') == True\nassert     text_match_wordz('sundayz') == True\nassert     text_match_wordz('sundayz') == True\nassert     text_match_wordz('sundayz') == True\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(text_match_wordz('this is a test of the zz function')) # True\nprint(text_match_wordz('I want a test of the zz function')) # True\nprint(text_match_wordz('this is a test of the zz function') ) # True\nprint(text_match_wordz('I want a test of the zz function')) # True\n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    #if any of the words is a substring of 'z'\n    if text.find('z') > -1:\n        return True\n    #return false\n    return False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_monthnumb_number(1) == False, 'check_monthnumb_number'\nassert     check_monthnumb_number(2) == False, 'check_monthnumb_number'\nassert     check_monthnumb_number(3) == True, 'check_monthnumb_number'\nassert     check_monthnumb_number(4) == True, 'check_monthnumb_number'\nassert     check_monthnumb_number(5) == True, 'check_monthnumb_number'\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_monthnumb_number(11) == False, \"11 is not a valid month number\"\nassert check_monthnumb_number(12) == True, \"12 is a valid month number\"\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_monthnumb_number(1) == True, \"Incorrect test case\"\nassert     check_monthnumb_number(2) == True, \"Incorrect test case\"\nassert     check_monthnumb_number(3) == True, \"Incorrect test case\"\nassert     check_monthnumb_number(4) == True, \"Incorrect test case\"\nassert     check_monthnumb_number(5) == False, \"Incorrect test case\"\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_monthnumb_number(12) == True, \"31 days in the month 12\"\nassert     check_monthnumb_number(2) == False, \"not 31 days in the month 2\"\nassert     check_monthnumb_number(0) == False, \"31 days in the month 0\"\nassert     check_monthnumb_number(100) == False, \"not 31 days in the month 100\"\nassert     check_monthnumb_number(-1) == False, \"31 days in the month -1\"\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    check_monthnumb_number(3)\nassert \n    check_monthnumb_number(4)\nassert \n    check_monthnumb_number(5)\nassert \n    check_monthnumb_number(6)\nassert \n    check_monthnumb_number(7)\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_monthnumb_number(1)     == False, \"This test should fail\"\nassert     check_monthnumb_number(2)     == False, \"This test should fail\"\nassert     check_monthnumb_number(12)     == True, \"This test should fail\"\nassert     check_monthnumb_number(13)     == True, \"This test should fail\"\nassert     check_monthnumb_number(14)     == True, \"This test should fail\"\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_monthnumb_number(0) == False\nassert     check_monthnumb_number(31) == True\nassert     check_monthnumb_number(32) == False\nassert     check_monthnumb_number(33) == False\nassert     check_monthnumb_number(34) == False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert         check_monthnumb_number(31) == True\nassert         check_monthnumb_number(30) == False\nassert         check_monthnumb_number(-1) == False\nassert         check_monthnumb_number(0) == False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_monthnumb_number(1) == True\nassert     check_monthnumb_number(11) == False\nassert     check_monthnumb_number(-1) == False\nassert     check_monthnumb_number(30) == False\n\ndef get_date_from_monthnumb_number(monthnum):\n    '''\n    Write a function to get the date from month number.\n    '''\n    pass\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef is_palindrome_list(stringlist):\n    '''\n    Write a function to check if each element in the list is a palindrome.\n    '''\n    pass\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     reverse_string_list([\"hello\", \"goodbye\", \"hello\"]) == [\"hello\", \"goodbye\", \"hello\"], \"invalid input\"\nassert     reverse_string_list([\"hellolol\"]) == [\"ololol\"], \"single character\"\nassert     reverse_string_list([\"hello\", \"goodbye\"]) == [\"goodbye\", \"hello\"], \"middle\"\nassert     reverse_string_list([\"helloworld\"]) == [\"worldod\"], \"end\"\nassert     reverse_string_list([\"helloworld\", \"rabbit\"]) == [\"worldod\", \"rabbit\"], \"2 strings\"\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     reverse_string_list([]) == [], 'Empty List'\nassert     reverse_string_list([\"a\", \"b\", \"c\"]) == [\"c\", \"b\", \"a\"], 'Wrong Elements'\nassert     reverse_string_list([\"a\", \"c\", \"b\"]) == [\"b\", \"c\", \"a\"], 'Wrong Elements'\nassert     reverse_string_list([\"a\", \"b\", \"c\", \"d\"]) == [\"d\", \"c\", \"b\", \"a\"], 'Wrong Elements'\nassert     reverse_string_list([\"a\", \"b\", \"c\", \"d\", \"e\"]) == [\"e\", \"d\", \"c\", \"b\", \"a\"], 'Wrong Elements'\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     reverse_string_list([\"apples\", \"oranges\", \"pears\", \"plums\"]) == ['plums', 'pears', 'oranges', 'apples'], \"Your function is not reversing the words\"\nassert     reverse_string_list([\"dog\", \"puppy\", \"cat\"]) == ['cat', 'puppy', 'dog'], \"Your function is not reversing the words\"\nassert     reverse_string_list([\"chocolate\"]) == ['chocolate'], \"Your function is not reversing the words\"\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     reverse_string_list([]) == [], reverse_string_list([])\nassert     reverse_string_list(['aa', 'bb']) == ['bb', 'aa'], reverse_string_list(['aa', 'bb'])\nassert     reverse_string_list(['ab', 'cd', 'ef']) == ['ef', 'cd', 'ab'], reverse_string_list(['ab', 'cd', 'ef'])\nassert     reverse_string_list(['a', 'b', 'c', 'd', 'e']) == ['e', 'd', 'c', 'b', 'a'], reverse_string_list(['a', 'b', 'c', 'd', 'e'])\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     reverse_string_list([]) == []\nassert     reverse_string_list([\"\"]) == [\"\"]\nassert     reverse_string_list([\"I\", \"like\", \"to\", \"code\"]) == [\"to\", \"like\", \"I\", \"code\"]\nassert     reverse_string_list([\"a\", \"b\", \"c\", \"d\", \"e\"]) == [\"e\", \"d\", \"c\", \"b\", \"a\"]\nassert     reverse_string_list([\"I\", \"like\", \"to\", \"code\"]) == [\"to\", \"like\", \"I\", \"code\"]\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     reverse_string_list([\"a\", \"b\", \"c\"]) == ['c', 'b', 'a'], \"Should be ['c', 'b', 'a']\"\nassert reverse_string_list([\"a\", \"\", \"b\", \"\", \"c\", \"\"]) == ['c', '', 'b', '', 'a'], \"Should be ['c', '', 'b', '', 'a']\"\nassert reverse_string_list([\"a\", \"a\", \"a\", \"\"]) == ['a', 'a', 'a', ''], \"Should be ['a', 'a', 'a', '']\"\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     reverse_string_list([\"b\", \"a\", \"c\"]) == ['c', 'b', 'a'], \"Wrong output!\"\n\ndef reverse_string_list_constant(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    This function should be a constant function.\n    '''\n    return stringlist[::-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     reverse_string_list([\"w\",\"o\",\"r\",\"l\",\"d\"]) == [\"d\",\"l\",\"r\",\"w\",\"o\"]\nassert     reverse_string_list([\"s\",\"q\",\"a\",\"n\"]) == [\"n\",\"q\",\"a\",\"s\"]\nassert     reverse_string_list([\"w\",\"o\",\"r\",\"l\",\"d\"]) == [\"d\",\"l\",\"r\",\"w\",\"o\"]\nassert     reverse_string_list([\"s\",\"q\",\"a\",\"n\"]) == [\"n\",\"q\",\"a\",\"s\"]\nassert     reverse_string_list([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"]) == [\"h\",\"g\",\"f\",\"e\",\"d\",\"c\",\"b\",\"a\"]\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     reverse_string_list([\"the\", \"quick\", \"brown\", \"fox\"]) == [\"brown\", \"fox\", \"quick\", \"the\"], \"input:['the', 'quick', 'brown', 'fox']\"\nassert reverse_string_list([\"hello\", \"world\"]) == [\"world\", \"hello\"], \"input:['hello', 'world']\"\nassert reverse_string_list([\"h\", \"e\", \"l\", \"l\", \"o\"]) == [\"o\", \"l\", \"l\", \"e\", \"h\"], \"input:['h', 'e', 'l', 'l', 'o']\"\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Find_Min([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]) == 0\nassert     Find_Min([[1, 2], [3, 4], [5, 6], [7, 8]]) == 1\nassert     Find_Min([[1, 2], [3, 4], [5, 6]]) == 1\nassert     Find_Min([[1, 2], [3], [5, 6]]) == 0\nassert     Find_Min([[1, 2], [3], [5]]) == 0\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Find_Min([[2,3,4],[5,6,7,8]]) == [[5,6,7,8]]\nassert     Find_Min([[2,3,4,5],[5,6,7,8]]) == [[5,6,7,8]]\nassert     Find_Min([[2,3,4,5,6],[5,6,7,8]]) == [[5,6,7,8]]\nassert     Find_Min([[2,3,4],[5,6,7,8,9,10,11]]) == [[5,6,7,8,9,10,11]]\nassert     Find_Min([[2,3,4,5,6,7],[5,6,7,8,9,10,11]]) == [[5,6,7,8,9,10,11]]\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nFind_Min([1,2,3,4,5,6]) == Find_Min([1,2,3,4,5]) == Find_Min([1,2,3,4]) == Find_Min([1,2]) == None, 'Wrong Output'\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint('Output for Find_Min:', Find_Min(lst))\nprint(Find_Min(lst))\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nlst = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\nprint('Original list: ')\nprint(lst)\nprint('Minimum length sublist: ')\nprint(Find_Min(lst))\n\n\n\ndef Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    pass\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Find_Min([1,2,3])== [1,2], \"Wrong Answer\"\nassert     Find_Min([1,2,3,5])== [1,2,5], \"Wrong Answer\"\nassert     Find_Min([2,3,4,5,6])== [2,3,4,5], \"Wrong Answer\"\nassert     Find_Min([6,5,4,3,2])== [6,5,4], \"Wrong Answer\"\nassert     Find_Min([0,0,0,0])== [0,0], \"Wrong Answer\"\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Find_Min([1,2,3,4,5,6,7,8,9]) == 4\nassert     Find_Min([1,2,3,5,4,6,7,8,9]) == 3\nassert     Find_Min([1,2,3,5,7,4,6,8,9]) == 3\nassert     Find_Min([1,2,3,5,7,8,4,6,9]) == 2\nassert     Find_Min([1,2,3,5,7,8,4,6,9]) == 1\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Find_Min([[0,1,2],    [0,1,2,3],    [0,1,2,3],    [0,1,2,3]]) == 0\nassert     Find_Min([[0,1,2],    [0,1,2,3],    [0,1,2,3],    [0,1,2,3,4]]) == 1\nassert     Find_Min([[0,1,2,3],    [0,1,2,3,4],    [0,1,2,3,4],    [0,1,2,3,4]]) == 2\nassert     Find_Min([[0,1,2,3,4],    [0,1,2,3,4],    [0,1,2,3,4],    [0,1,2,3,4]]) == 3\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     rectangle_area(2,2) == 4, \"The result should be 4\"\nassert     rectangle_area(1,3) == 3, \"The result should be 3\"\nassert     rectangle_area(1,1) == 1, \"The result should be 1\"\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     rectangle_area(3,4) == 9\n\nprint('The program has been passed!'"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rectangle_area(4,2) == 8\nassert     rectangle_area(3,5) == 15\nassert     rectangle_area(5,3) == 15\nassert     rectangle_area(2,2) == 4"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert rectangle_area(1,1) == 1\nassert rectangle_area(2,1) == 2\nassert rectangle_area(3,3) == 6\nassert rectangle_area(2,4) == 2\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rectangle_area(1,1) == 1,'rectangle_area function is incorrect'\n\ndef rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     rectangle_area(1,3) == 3\nassert     rectangle_area(2,3) == 5\nassert     rectangle_area(3,3) == 9\nassert     rectangle_area(1,2) == 4\nassert     rectangle_area(3,4) == 12\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rectangle_area(4,5) == 20\n\nassert rectangle_area(3,1) == 3\n\nassert rectangle_area(1,2) == 2\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nrectangle_area(5,5) == 5*5\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     rectangle_area(5, 5) == 25\nassert     rectangle_area(2, 6) == 18\nassert     rectangle_area(8, 12) == 112\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n'''\nYou are given a non-empty string s consisting of upper-case English letters.\n\nA move consists of switching two consecutive characters of s, \nor switching s itself if there are less than two characters. \nReturn the minimum number of moves required to make s a palindrome.\n\nExample 1:\n\nInput: \"aabcdcbba\"\nOutput: 2\nExplanation: Swap 'c' with 'b' in 1 move\nExample 2:\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_uppercase(\"HeLLo\") == \"hello\"\nassert     remove_uppercase(\"HELLO\") == \"hello\"\nassert     remove_uppercase(\"Hello\") == \"hello\"\nassert     remove_uppercase(\"HE\") == \"\"\nassert     remove_uppercase(\"\") == \"\"\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_uppercase(\"\")==\"\"\nassert     remove_uppercase(\"L\")==\"l\"\nassert     remove_uppercase(\"l\")==\"l\"\nassert     remove_uppercase(\"A\")==\"a\"\nassert     remove_uppercase(\"A\")==\"a\"\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert remove_uppercase(\"sAssSs\") == \"SS\"\nassert remove_uppercase(\"aA\") == \"aA\"\nassert remove_uppercase(\"\") == \"\"\n\ndef check_multiple_divide(arr):\n    '''\n    Write a function to find if a given array can be divided by 3 with no leftovers\n    '''\n    for i in arr:\n        if i % 3 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef is_palindrome(str1):\n    '''\n    Write a function to check if the given string is a palindrome. A palindrome is a word, phrase, or sequence that reads the same forwards and backwards, like madam or racecar.\n    '''\n    pass\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nremove_uppercase('Hello') == 'hll'\nremove_uppercase('HELLO') == 'hll'\nremove_uppercase('hello') == 'll'\nremove_uppercase('HELLO WORLD') == 'hlw'\nremove_uppercase('HELLO WORLD!') == 'hlw'\nremove_uppercase('HELLO WORLD!.') == 'hlw'\nremove_uppercase('HELLO WORLD!..') == 'hlw'\nremove_uppercase('HELLO WORLD!....') == 'hlw'\nremove_uppercase('HELLO WORLD!.....') == 'hlw'\nremove_uppercase('HELLO WORLD!....!') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!..') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!...') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!...') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!..') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!...') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!....') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!.....') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!.......') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw'\nremove_uppercase('HELLO WORLD!....!!!!!!......!!!!!!.') == 'hlw"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_uppercase(\"\") == \"\"\nassert     remove_uppercase(\"h\") == \"\"\nassert     remove_uppercase(\"H\") == \"\"\nassert     remove_uppercase(\"Hui\") == \"Hui\"\nassert     remove_uppercase(\"hi\") == \"i\"\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef is_palindrome(str1):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    pass\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_uppercase('Test') == 'test'\nassert    remove_uppercase('Test') == 'test'\nassert remove_uppercase('Test') == 'test'\nassert remove_uppercase('Test') == 'test'\nassert remove_uppercase('Test') == 'tEsT'\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Extract([['1','2','3'],['4','5'],['6']]) == ['1','2','3'], \"Return first element of each sublist\"\nassert     Extract([[1,2],[4,5],[6]]) == [1,2], \"Return first element of each sublist\"\nassert     Extract([[1,2,3],[4,5,6],[7]]) == [1,2,3], \"Return first element of each sublist\"\nassert     Extract([['1','2'],['4','5'],['6']]) == ['1','2'], \"Return first element of each sublist\"\nassert     Extract([['1','2','3'],['4','5'],['6']]) == ['1','2','3'], \"Return first element of each sublist\"\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nif __name__ == '__main__':\n    print(\"Testing Extract:\")\n    assert Extract([1,2,3]) == [1]\n    assert Extract([1,2,3,4]) == [1,2]\n    assert Extract([1,2,3,4,5]) == [1,2,3,4]\n    assert Extract([1,2,3,4,5,6]) == [1,2,3,4,5]\n    "
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Extract([[1,2],[3,4],[5,6]]) == [1,3,5]\nassert     Extract([[1,2,3],[4,5,6]]) == None\nassert     Extract([[1,2,3],[4,5,6],[7,8,9]]) == None\nassert     Extract([[1,2,3,4],[5,6,7,8]]) == None\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Extract([]) == [] \nassert     Extract([1,2,3]) == [1]\nassert     Extract([1,2,3,4]) == [1,2]\nassert     Extract([1,2,3,4,5]) == [1,2,3]\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nExtract([[1], [2, 3, 4], [5], [6, 7]]) == 1\nExtract([[1, 2], [3, 4, 5], [6]]) == 1\nExtract([[1, 2, 3], [4, 5, 6, 7], [8, 9, 10]]) == 1"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nlst = [[1,2,3,4], [\"a\", \"b\"], [\"c\", \"d\", \"e\", \"f\"]]\nassert Extract(lst) == [1, \"a\", \"c\"]\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Extract([[1], [2, 3], [4, 5]]) == [1, 2, 4], \"Wrong\"\nassert     Extract([[1, 2, 3], [4, 5]]) == [1, 2, 4], \"Wrong\"\nassert     Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 4, 7, 8, 9], \"Wrong\"\nassert     Extract([[1, 2, 3, 4], [5, 6, 7]]) == [1, 2, 3, 4, 5, 6, 7], \"Wrong\"\nassert     Extract([[1, 2, 3, 4, 5], [6, 7, 8], [9]]) == [1, 2, 3, 4, 5, 6, 7, 9], \"Wrong\"\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Extract([[1,2,3],[4,5,6],[7,8,9]]) == 3\nassert     Extract([[1,2],[3,4],[5,6]]) == 2\nassert     Extract([[1]]) == 1\nassert     Extract([]) == Non"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef Extract_v2(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    pass\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     upper_ctr('123') == 1\nassert     upper_ctr('abc') == 0\nassert     upper_ctr('ABC') == 1\nassert     upper_ctr('ABCD') == 3\nassert     upper_ctr('ABBc') == 0\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     upper_ctr('UPPERCASE') == 1, \"Invalid\"\nassert     upper_ctr('UPPERCASE') == 1, \"Invalid\"\nassert     upper_ctr('AAaAA') == 2, \"Invalid\"\nassert     upper_ctr('AAaAA') == 2, \"Invalid\"\nassert     upper_ctr('AAaAA') == 2, \"Invalid\"\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     upper_ctr(\"\") == 0\nassert     upper_ctr(\"A\") == 1\nassert     upper_ctr(\"AA\") == 2\nassert     upper_ctr(\"AAa\") == 3\nassert     upper_ctr(\"AAaAa\") == 4\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     upper_ctr('') == 0\nassert     upper_ctr('      ') == 0\nassert     upper_ctr('This is a test string') == 3\nassert     upper_ctr('One') == 1\nassert     upper_ctr('One!') == 1\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     upper_ctr('upper') == 1\nassert     upper_ctr('UPPER') == 2\nassert     upper_ctr('Upper') == 0\nassert     upper_ctr('') == 0\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     upper_ctr(\"Guru99!\") == 8, \"Your code is wrong!\"\nassert     upper_ctr(\"1234567890\") == 0, \"Your code is wrong!\"\nassert     upper_ctr(\"2a3Bc4D5e\") == 3, \"Your code is wrong!\"\nassert     upper_ctr(\"4A3Bc4D5E\") == 2, \"Your code is wrong!\"\nassert     upper_ctr(\"4A3Bc4D5Efgh\") == 2, \"Your code is wrong!\"\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     upper_ctr(\"\") == 0, \"Should return 0.\"\nassert     upper_ctr(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_\") == 33, \"Should return 33.\"\nassert     upper_ctr(\"ABCDabcdefghijklmnopqrstuvwxyz0123456789_\") == 23, \"Should return 23.\"\nassert     upper_ctr(\"ABCDEabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\") == 34, \"Should return 34.\"\nassert     upper_ctr(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_\") == 31, \"Should return 31.\"\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     combinations_list([1, 2, 3]) == [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n\n\ndef combinations_dict(n, k):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     combinations_list(['a', 'b', 'c']) == ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\nassert     combinations_list(['a', 'b', 'c', 'd']) == ['abcd', 'acbd', 'bacd', 'bacd', 'cabd', 'cba']\nassert     combinations_list(['a', 'b', 'c', 'd', 'e']) == ['abced', 'acbed', 'baced', 'bacde', 'cabed', 'cbaed', 'cbede', 'cabede', 'deabc', 'defb', 'debc', 'debc', 'edabc', 'eda', 'eda', 'edb', 'edc', 'edcb', 'eabc']\n\ndef combinations_dict(dict1):\n    '''\n    Write a function to find all possible combinations of the elements of a given dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    combinations_list([1, 2, 3]) == [[1, 2, 3],\n                                [1, 3, 2],\n                                [2, 1, 3],\n                                [2, 3, 1],\n                                [3, 1, 2],\n                                [3, 2, 1]]\n    print(\"combinations_list is correct\")\n\nassert \n    combinations_list([1, 2, 3, 4]) == [[1, 2, 3, 4],\n                                [1, 2, 4, 3],\n                                [1, 3, 2, 4],\n                                [1, 3, 4, 2],\n                                [1, 4, 2, 3],\n                                [1, 4, 3, 2],\n                                [2, 1, 3, 4],\n                                [2, 1, 4, 3],\n                                [2, 3, 1, 4],\n                                [2, 3, 4, 1],\n                                [2, 4, 1, 3],\n                                [2, 4, 3, 1],\n                                [3, 1, 2, 4],\n                                [3, 1, 4, 2],\n                                [3, 2, 1, 4],\n                                [3, 2, 4, 1],\n                                [3, 4, 1, 2],\n                                [3, 4, 2, 1],\n                                [4, 1, 2, 3],\n                                [4, 1, 3, 2],\n                                [4, 2, 1, 3],\n                                [4, 2, 3, 1],\n                                [4, 3, 1, 2],\n                                [4, 3, 2, 1],\n                                [4, 4, 1, 3],\n                                [4, 4, 3, 1],\n                                [4, 4, 3, 2],\n                                [4, 4, 2, 3],\n                                [4, 4, 3, 3]]\n    print(\"combinations_list is correct\")\n    \nassert \n    combinations_list([0]) == [[0]]\n    print(\"combinations_list is correct\")\n    \nassert \n    combinations_list([1, 2, 3, 4, 5]) == [[1, 2, 3, 4],\n                                [1, 2, 4, 5],\n                                [1, 3, 2, 4],\n                                [1, 3, 4, 2],\n                                [1, 4, 2, 3],\n                                [1, 4, 3, 2],\n                                [2, 1, 3, 4],\n                                [2, 1, 4, 3],\n                                [2, 3, 1, 4],\n                                [2, 3, 4, 1],\n                                [2, 4, 1, 3],\n                                [2, 4, 3, 1],\n                                [3, 1, 2, 4],\n                                [3, 1, 4, 2],\n                                [3, 2, 1, 4],\n                                [3, 2, 4, 1],\n                                [3, 4, 1, 2],\n                                [3, 4, 2, 1],\n                                [4, 1, 2, 3],\n                                [4, 1, 3, 2],\n                                [4, 2, 1, 3],\n                                [4, 2, 3, 1],\n                                [4, 3, 1, 2],\n                                [4, 3, 2, 1],\n                                [4, 4, 1, 3],\n                                [4, 4, 3, 1],\n                                [4, 4, 3, 2],\n                                [4, 4, 2, 3]]\n    print(\"combinations_list is correct\")\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     combinations_list([1,2,3]) == [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\nassert     combinations_list([1,2,3,4]) == [[1,2,3,4],[1,2,4,3],[1,3,2,4],[1,3,4,2],[1,4,2,3],[1,4,3,2],[2,1,3,4],[2,1,4,3],[2,3,1,4],[2,3,4,1],[2,4,1,3],[3,1,2,4],[3,1,4,2],[3,2,1,4],[3,2,4,1],[3,4,1,2],[4,1,2,3],[4,1,3,2],[4,2,1,3],[4,2,3,1],[4,3,1,2],[4,3,2,1]]\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     combinations_list([1, 2, 3]) == [[1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]\nassert     combinations_list([1, 2, 3, 4]) == [[1], [2], [3], [4], [1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4], [1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4], [1, 2, 3, 4]]\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     combinations_list([]) == [], \"Wrong\"\nassert     combinations_list([1]) == [[1]], \"Wrong\"\nassert     combinations_list([1,2]) == [[1], [2]], \"Wrong\"\nassert     combinations_list([1,2,3]) == [[1], [2], [3]], \"Wrong\"\nassert     combinations_list([1,2,3,4]) == [[1], [2], [3], [4]], \"Wrong\"\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     combinations_list([\"A\", \"B\", \"C\"]) == [['A', 'B', 'C'], ['A', 'C', 'B'], ['B', 'A', 'C'], ['B', 'C', 'A'], ['C', 'A', 'B'], ['C', 'B', 'A']]\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     combinations_list([1, 2, 3]) == [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]], 'Wrong answer'\nassert     combinations_list([1, 2]) == [[1, 2], [2, 1]], 'Wrong answer'\nassert     combinations_list([]) == [], 'Wrong answer'\nassert     combinations_list([1]) == [[1]], 'Wrong answer'\nassert     combinations_list([1,2]) == [[1,2]], 'Wrong answer'\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == '__main__':\n    arr = [-2, -3, 4, -1, -2, 1, 5, -3]\n    print(max_subarray_product(arr)"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_subarray_product([-1, -2, -3, -4]) == -1, \\\n        \"Wrong output!\"\n\nassert max_subarray_product([2, 3, -2, -4]) == 6, \\\n        \"Wrong output!\"\n\nassert max_subarray_product([-2, 0, -1]) == 0, \\\n        \"Wrong output!\"\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_subarray_product([-2, -1]) == -1\nassert     max_subarray_product([-2, -1, 2, 3]) == 6\nassert     max_subarray_product([-1, -1]) == -1\nassert     max_subarray_product([1, -1]) == -1\nassert     max_subarray_product([1]) == 1\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_subarray_product([-2, -3, 4, -1]) == -6\nassert     max_subarray_product([-1, -2, -3, 4]) == 24\nassert     max_subarray_product([-1, -2, -3, -4, -5, -6, -7, -8]) == -23\nassert     max_subarray_product([-2, -3, 4, -1, -2]) == 6\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert max_subarray_product([-1,5,-2,3]) == 6, \"3\"\nassert max_subarray_product([-1,3,-4,5,4]) == 10, \"0\"\nassert max_subarray_product([-1,1,-2,-3,-4,4]) == 24, \"0\"\nassert max_subarray_product([1,-2,-4,-5]) == 0, \"0\"\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_subarray_product([-2,1,-3,4,-1,2,1,-5,4]) == 6\nassert     max_subarray_product([-2,1,-3,4,-1,2,1,-5,4]) == 6\nassert     max_subarray_product([-2,1,-3,4,-1,2,1,-5,4]) == 6\nassert     max_subarray_product([-2,1,-3,4,-1,2,1,-5,4]) == 6\nassert     max_subarray_product([-2,1,-3,4,-1,2,1,-5,4]) == 6\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_subarray_product([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 6\nassert     max_subarray_product([2, 3, -2, 4]) == 6\nassert     max_subarray_product([-2, -3, -4]) == 0\nassert     max_subarray_product([-5, -4, -3, -2, -1]) == -1\nassert     max_subarray_product([-5, -4, -3, -2, -1]) == -1\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_value({'a': 1, 'b': 2, 'c': 1, 'd': 1, 'e': 1, 'f': 1}, {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1}) is True, 'check_value should return True if all values are same in a dictionary'\nassert     check_value({'a': 1, 'b': 2, 'c': 1, 'd': 1, 'e': 1, 'f': 1}, {'a': 1, 'b': 1, 'c': 2, 'd': 1, 'e': 1, 'f': 1}) is False, 'check_value should return False if all values are same in a dictionary'"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_value({\"a\":1, \"b\":2}, 1) == True\nassert     check_value({\"a\":1, \"b\":2}, 1.0) == False\nassert     check_value({\"a\":1}, 1) == True\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_value({\"a\": 1, \"b\": 2, \"c\": 1, \"d\": 1}, \n        {\"a\": 1, \"b\": 2, \"c\": 1, \"d\": 1}) == True, \"Wrong value\"\nassert     check_value({\"a\": 1, \"b\": 2, \"c\": 1, \"d\": 1},\n        {\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 1}) == False, \"Wrong value\"\nassert     check_value({\"a\": 1, \"b\": 2, \"c\": 1, \"d\": 1},\n        {\"a\": 1, \"b\": 1, \"c\": 2, \"d\": 1}) == False, \"Wrong value\"\nassert     check_value({\"a\": 1, \"b\": 2, \"c\": 1, \"d\": 1},\n        {\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 2}) == False, \"Wrong value\"\nassert     check_value({\"a\": 1, \"b\": 2, \"c\": 1, \"d\": 1},\n        {\"a\": 1, \"b\": 1, \"c\": 1, \"d\": 0}) == False, \"Wrong value\"\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert         check_value({'m': 2, 'd': 2, 'i': 2, 'a': 2}, 3) == False, \"Wrong Answer\"\nassert         check_value({'m': 2, 'd': 2, 'i': 2, 'a': 2}, 4) == True, \"Wrong Answer\"\nassert         check_value({'m': 2, 'd': 2, 'i': 2, 'a': 2}, 5) == False, \"Wrong Answer\"\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_value({'a':1, 'b':2, 'c':3}, {'a':1, 'b':2, 'c':3}) == True, 'Fail'\nassert     check_value({'a':1, 'b':2, 'c':3}, {'a':1, 'b':1, 'c':3}) == False, 'Fail'\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_value({0: 0, 1: 0, 2: 0}, 0) == True, 'check_value() is incorrect!'\nassert     check_value({0: 0, 1: 1, 2: 2}, 0) == False, 'check_value() is incorrect!'\nassert     check_value({0: 0, 1: 0, 2: 0}, 1) == True, 'check_value() is incorrect!'\nassert     check_value({0: 0, 1: 0, 2: 0}, 2) == True, 'check_value() is incorrect!'\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_value({\"k1\":1, \"k2\":2}, True), \"k1 = 1, k2 = 2\"\nassert     check_value({\"k1\":1, \"k2\":2}, False), \"k1 = 1, k2 = 2\"\n\nassert     check_value({\"k1\":1, \"k2\":1}, True), \"k1 = 1, k2 = 1\"\nassert     check_value({\"k1\":1, \"k2\":1}, False), \"k1 = 1, k2 = 1\"\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ncheck_value({'x': 1, 'y': 2}, 0)\ncheck_value({'x': 1, 'y': 1}, 1)\ncheck_value({'x': 1, 'y': 2}, 2)\ncheck_value({'x': 1, 'y': 2}, 3)\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_value({1: 1, 2: 2, 3: 3}, True) == True, 'incorrect result'\nassert check_value({1: 1, 2: 2, 3: 3}, False) == True, 'incorrect result'\nassert check_value({1: 1, 2: 1, 3: 3}, False) == False, 'incorrect result'\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_value({1: 2, 2: 2, 3: 3}, 1) == True, 'First element should be equal to 2.'\nassert     check_value({1: 2, 2: 2, 3: 3}, 2) == False, 'Second element should be equal to 2.'\nassert     check_value({1: 2, 2: 2, 3: 3}, 3) == True, 'Third element should be equal to 3.'\nassert     check_value({1: 2, 2: 2, 3: 3}, 4) == False, 'Fourth element should be equal to 2.'\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     drop_empty({}) == {}, \"Expected empty dict\"\nassert     drop_empty({'a': 1, 'b': 2, 'c': 3, 'd': 4}) == {'a': 1, 'b': 2, 'c': 3}, \"Expected 'a, b, c'\"\nassert     drop_empty({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9}, \"Expected 'a, b, c'\"\nassert     drop_empty({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9}, \"Expected 'a, b, c'\""
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     drop_empty({}) == {}\nassert     drop_empty({\"a\":\"b\",\"c\":3}) == {\"a\":\"b\"}\nassert     drop_empty({\"a\":1,\"b\":{\"b\":1}}) == {\"a\":1,\"b\":1}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     drop_empty({'a':1, 'b':2, 'c':3, 'd':4}) == {'a':1, 'b':2, 'd':4}, 'Wrong output'\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     drop_empty({1:'a', 2:1,3:2}) == {1: 'a', 2: 1, 3: 2}\nassert     drop_empty({1:'a', 2:1,3:2,4:2,5:3}) == {1: 'a', 2: 1, 3: 2, 4: 2, 5: 3}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     drop_empty({\"a\":1, \"b\":2}) == {'a':1, 'b':2}\nassert     drop_empty({}) == {}\nassert     drop_empty({}) == {}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     drop_empty({\"name\": \"Joe\"}) == {\"name\": \"Joe\"}\nassert     drop_empty({\"name\": \"Joe\", \"age\": \"\"}) == {\"name\": \"Joe\"}\nassert     drop_empty({\"name\": \"Joe\", \"age\": 1}) == {\"name\": \"Joe\"}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n'''\nWrite a function to get the maximum of a dictionary.\n'''\ndef max_value_in_dictionary(dict1):\n    '''\n    Write a function to get the maximum of a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     drop_empty({'a': 1, 'b': 2, 'c': 3, 'd': 4}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4},\\\n        \"drop_empty failed. Expected {'a': 1, 'b': 2, 'c': 3, 'd': 4}, got {}\".format(drop_empty({'a': 1, 'b': 2, 'c': 3, 'd': 4}))\nassert     drop_empty({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5},\\\n        \"drop_empty failed. Expected {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, got {}\".format(drop_empty({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}))\n\nassert     drop_empty({}) == {}, \\\n        \"drop_empty failed. Expected {}, got {}\".format({}, drop_empty({}))"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nmax_product([1, 2, 3, 4]) == 6\nassert \nmax_product([1, 2, 3, 4, 5]) == 30\nassert \nmax_product([2, 4, 6, 8]) == 64\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_product([1,2,3,4,5,6]) == 120, \n    \"Should return 120\"\nassert     max_product([1,2,3,5,4,6]) == 60, \n    \"Should return 60\"\nassert     max_product([1,2,3]) == 6, \n    \"Should return 6\"\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    import sys\n    import io\n    def input():\n        return sys.stdin.readline().rstrip('\\n')\n    \n    def main():\n        n = int(input())\n        arr = list(map(int, input().split()))\n        print(max_product(arr))\n    \n    main("
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_product([0,1,2]) == 0, \"Wrong output\"\nassert max_product([3,2,5]) == 45, \"Wrong output\"\nassert max_product([1,2,3]) == 6, \"Wrong output\"\nassert max_product([1,2,6,4]) == 24, \"Wrong output\"\nassert max_product([1,2,6,4,7,8,10]) == 336, \"Wrong output\"\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_product([1, 2, 3, 4, 5, 6, 7]) == 840, 'Wrong max_product'\nassert     max_product([1, 2, 3, 4]) == 24, 'Wrong max_product'\nassert     max_product([]) == 0, 'Wrong max_product'\nassert     max_product([1]) == 1, 'Wrong max_product'\nassert     max_product([-1, -2, -3, -4, -5, -6, -7]) == -120, 'Wrong max_product'\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_product([1,2,3,4,5]) == 24\nassert     max_product([-1,4,5,8,9]) == 18\nassert     max_product([1,2,3,4]) == 24\nassert     max_product([0,2,3,4]) == 24\nassert     max_product([-1,2,-3,4]) == 24\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     add_pairwise((1, 2, 3)) == (2, 4, 6)\nassert     add_pairwise((2, 4, 6)) == (4, 6, 8)\nassert     add_pairwise((1, 3, 5)) == (4, 6, 8)\nassert     add_pairwise((2, 5, 8)) == (4, 6, 10)\nassert     add_pairwise((2, 4, 8)) == (4, 6, 10)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add_pairwise((1,2)) == (1,3)     # (1,2) + (2,3) = (3,4)\nassert     add_pairwise((1,2,3)) == (1,5)     # (1,2) + (2,3) = (3,4)\n\ndef add_pairwise_2(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add_pairwise((1, 2, 3)) == (2, 3, 4), \"Error\"\nassert     add_pairwise((1, 2, 3)) == (2, 3, 4), \"Error\"\nassert     add_pairwise((1, 2, 3)) == (2, 3, 4), \"Error\"\nassert     add_pairwise((1, 2, 3)) == (2, 3, 4), \"Error\"\nassert     add_pairwise((1, 2, 3)) == (2, 3, 4), \"Error\"\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_pairwise((0,1)) == (1,2)\nassert     add_pairwise((0,0)) == (0,0)\nassert     add_pairwise((0,0,0,0,0)) == (0,0,0,0,0)\nassert     add_pairwise((1,2,3,4,5)) == (2,4,6,8,10)\nassert     add_pairwise((0,1,1,1,1,1,1,1,1,1)) == (0,1,2,3,4,5,6,7,8,9)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     add_pairwise((0,)) == (0,)\nassert     add_pairwise((3, 4, 5)) == (8, 11, 14)\nassert     add_pairwise((0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)) == (0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 14, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 47, 50, 53, 56, 59)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     (add_pairwise((0, 0, 0))) == (0, 0, 0)\nassert     (add_pairwise((1, 1, 1))) == (2, 2, 2)\nassert     (add_pairwise((2, 2, 2))) == (3, 3, 3)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     add_pairwise((\"5\", \"5\", \"5\", \"5\", \"5\", \"5\")) == (\"5\", \"0\", \"0\", \"0\", \"0\", \"5\")\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_remainder([2,3,4], 5) == (2*3*4)%5 == 8\nassert     find_remainder([2,3,4], 6) == (2*3*4)%6 == 8\nassert     find_remainder([2,3,4], 7) == (2*3*4)%7 == 0\nassert     find_remainder([2,3,4], 8) == (2*3*4)%8 == 0\nassert     find_remainder([2,3,4], 9) == (2*3*4)%9 == 0\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_remainder([2,3,4], 10) == 60\nassert find_remainder([1,2,3], 10) == 18\nassert find_remainder([2,4,6], 10) == 16\nassert find_remainder([1,4,6], 10) == 4\nassert find_remainder([2,2,3], 10) == 30\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef find_remainder_optimized(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    pass\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_remainder([1, 3, 5, 7, 9], 11) == 0\nassert     find_remainder([1, 2, 3, 4, 5], 13) == 10\nassert     find_remainder([3, 3, 3, 3, 3], 13) == 1\nassert     find_remainder([2, 4, 6, 8, 10], 13) == 22\nassert     find_remainder([4, 6, 8, 10, 12], 13) == 22\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef find_index(arr, n): \n    '''\n    Write a python function to find the element in the array whose index is divisible by 5.\n    '''\n    pass\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_remainder([2, 4, 5], 9) == None, \"Should be None\"\nassert find_remainder([2, 4, 5], 10) == 32, \"Should be 32\"\nassert find_remainder([2, 4, 5], 11) == None, \"Should be None\"\nassert find_remainder([2, 4, 5], 12) == None, \"Should be None\"\nassert find_remainder([2, 4, 5], 13) == None, \"Should be None\"\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_remainder([2,3,4,5], 7) == 1\nassert     find_remainder([4,5,6,7], 7) == 1\nassert     find_remainder([2,3,4,5], 10) == 2\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_Consecutive([2, 3, 4, 5, 6])     == True\nassert     check_Consecutive([1, 2, 4, 6])     == False\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_Consecutive([1,2,3,4]) == True, \"The input list contains non-consecutive numbers\"\nassert check_Consecutive([1,2,3,4,5]) == False, \"The input list contains consecutive numbers\"\nassert check_Consecutive([1,2,3,4,4]) == False, \"The input list contains non-consecutive numbers\"\nassert check_Consecutive([1,2,3,4,6]) == True, \"The input list contains consecutive numbers\"\nassert check_Consecutive([1,2,3,4,6,7,8]) == False, \"The input list contains consecutive numbers\"\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_Consecutive([1,2,3,4,5]) == True\nassert     check_Consecutive([1,1,1,1,1,1,1,1,1]) == True\nassert     check_Consecutive([1,1,1,1,1]) == False\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_Consecutive([1,2,3,4,5,6,7])     == True, \"Should return True\"\nassert     check_Consecutive([1,2,3,4,5,6])     == False, \"Should return False\""
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_Consecutive([1,2,3,4,5]) == True, 'incorrect output'\nassert     check_Consecutive([1,2,3,4]) == False, 'incorrect output'\nassert     check_Consecutive([1,2,3]) == True, 'incorrect output'\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    # returns 'True' if all the numbers in the list are consecutive numbers, else 'False'\ncheck_Consecutive([0,2,4,6,8,10,12,14,16,18,20]) == 'True', 'is_Consecutive'\nassert check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12]) == 'False', 'is_Consecutive'\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint('\\n')\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == True\n    check_Consecutive([1, 2, 3, 4, 5, 5, 6]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([0, 1, 2, 3, 4, 5, 6]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n    check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == False\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tuple_intersection([(2,3), (3,4)], [(4,5), (5,6)]) == [(4,5), (5,6)]\nassert     tuple_intersection([(4,5), (3,4)], [(2,3), (4,5)]) == [(2,3)]\nassert     tuple_intersection([(3,4), (5,6)], [(4,5), (3,4)]) == []\nassert     tuple_intersection([(2,3), (5,6)], [(4,5), (3,4)]) == []\nassert     tuple_intersection([(2,3), (3,4), (5,6)], [(4,5), (3,4)]) == [(3,4)]\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_intersection([1,2,3,4,5,6,7,8],[2,4,6,8]) == (2,4,6)\nassert tuple_intersection([1,2,3,4,5,6,7,8],[2,4,6,8,10]) == (2,4,6)\nassert tuple_intersection([1,2,3,4,5,6,7,8],[2,4,8]) == (2,4,8)\nassert tuple_intersection([1,2,3,4,5,6,7,8],[2,4,6,8,10,20,25,30]) == (2,4,6)\n\n'''\nMethod 2\n'''"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_intersection(test_list1, test_list2) == (1, 2), 'tuple_intersection should return a tuple whose elements are common to both the given lists. Hint: use Set'\nassert     tuple_intersection(test_list3, test_list4) == (0, 1), 'tuple_intersection should return a tuple whose elements are common to both the given lists. Hint: use Set'\nassert     tuple_intersection(test_list5, test_list6) == (1, 2), 'tuple_intersection should return a tuple whose elements are common to both the given lists. Hint: use Set'\n\n'''\nEnd of the helper code\n'''\n\nif __name__ == \"__main__\":\n    test_list1 = (1, 2)\n    test_list2 = (1, 2)\n    print(f'List1: {test_list1}, List2: {test_list2}')\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tuple_intersection(test_list1, test_list2) == ('a', 'c')\nassert     tuple_intersection(test_list1, test_list2) == ('a', 'b', 'c')\nassert     tuple_intersection(test_list1, test_list2) == ('a', 'b', 'c')\nassert     tuple_intersection(test_list1, test_list2) == ('a', 'b', 'c')"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ntest_tuple_list1 = [(1,2,3),(5,6,7)]\ntest_tuple_list2 = [(1,2),(3,4),(6,7)]\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tuple_intersection([(1,2,3),(2,4),(1,2,3),(2,4)],[(2,4),(1,2,3)])==[(2,4),(1,2,3)]\nassert     tuple_intersection([(1,2,3),(2,4),(1,2,3),(2,4)],[(1,2,3),(1,2,3),(1,2,3),(1,2,3)])==[(1,2,3)]\nassert     tuple_intersection([(1,2,3),(2,4),(1,2,3),(2,4)],[(1,2,3),(1,2,3),(1,2,3)])==[]\nassert     tuple_intersection([(1,2,3),(2,4),(1,2,3),(2,4)],[(1,2,3)])==[]\nassert     tuple_intersection([(1,2,3),(2,4),(1,2,3),(2,4)],[(1,2,3),(1,2,3),(1,2,3),(1,2,3)])==[(1,2,3)]\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tuple_intersection([1,2,3], (1,2,3)) == (1,2,3), \"Should give (1,2,3)\"\nassert     tuple_intersection((1,2,3), (1,2,3)) == (1,2,3), \"Should give (1,2,3)\"\nassert     tuple_intersection((1,2,3), (1,2,4)) == (1,2,4), \"Should give (1,2,4)\"\nassert     tuple_intersection((1,2,3), (3,2,1)) == (3,2,1), \"Should give (3,2,1)\"\nassert     tuple_intersection((1,2,3), (2,1,3)) == (2,1,3), \"Should give (2,1,3)\"\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tuple_intersection(['a', 'b', 'c', 'd'], ['b', 'c', 'd', 'e']) == ['b', 'c']\nassert     tuple_intersection(['a', 'b', 'c', 'd'], ['d', 'b', 'c', 'a']) == ['d', 'b']\nassert     tuple_intersection(['a', 'b', 'c', 'd'], ['e', 'b', 'd', 'a']) == ['e', 'd']\nassert     tuple_intersection(['a', 'b', 'c', 'd'], ['d', 'a', 'c', 'b']) == ['d', 'c']\nassert     tuple_intersection(['a', 'b', 'c', 'd'], ['a', 'd', 'c', 'b']) == ['a', 'd']\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tuple_intersection([(3,4),(4,2),(3,3)],[(4,3),(2,3),(3,3)])=={(3,3),(4,3)}\nassert     tuple_intersection([(3,4),(4,2),(3,3)],[(4,2),(3,3),(3,3)])=={(3,2),(3,3)}\nassert     tuple_intersection([(3,4),(4,2),(3,3)],[(4,3),(3,3),(3,3)])=={(3,3)}\nassert     tuple_intersection([(3,4),(4,2),(3,3)],[(4,3),(3,3),(2,3)])=={(3,3)}\nassert     tuple_intersection([(3,4),(4,2),(3,3)],[(4,3),(2,3),(3,3)])=={(3,3)}\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tuple_intersection([], []) == []\nassert     tuple_intersection([], [3]) == []\nassert     tuple_intersection([2], [1, 2, 3]) == [2]\nassert     tuple_intersection([3], [2, 3, 4]) == [2, 3]\nassert     tuple_intersection([1, 2, 3], [3, 1, 2]) == [1, 2, 3]\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     replace_char('apple','p','k')== 'kakak'\nassert     replace_char('apple','l','i')== 'ikakak'\nassert     replace_char('apple','l','i',3)== 'ikakak'\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nreplace_char(\"hello\",\"e\",\"h\") == \"hlloh\"\nreplace_char(\"hi\",\"i\",\"I\") == \"Ihi\"\nreplace_char(\"\",'a','') == ''\nreplace_char(\"hi\",\"h\",\"h\") == \"hi\"\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert replace_char('abcdef', 'b', 'c') == 'cdedef'\nassert replace_char('abcdef', 'ab', 'c') == 'cdedef'\nassert replace_char('abcd', 'b', 'c') == 'abcd'\nassert replace_char('abc', 'b', 'c') == 'bc'\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     replace_char('hola','l','k')=='hola'\nassert     replace_char('1','a','a')=='1'\nassert     replace_char('the','t','e')=='thee'\nassert     replace_char('one','e','a')=='onea'\nassert     replace_char('True','t','e')=='Truee'\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nreplace_char('hello','l','@')\n\n'''\nTraceback (most recent call last):\n  File \"/Code_Intermediate/Python/Class_and_Object_Variables/06_Class_and_Object_Variables.py\", line 6, in <module>\n    replace_char('hello','l','@')\n  File \"/Code_Intermediate/Python/Class_and_Object_Variables/06_Class_and_Object_Variables.py\", line 3, in replace_char\n    str1 = str1.replace(ch,newch)\n  File \"/Code_Intermediate/Python/Class_and_Object_Variables/06_Class_and_Object_Variables.py\", line 2, in replace_char\n    str1 = str1.replace(ch,newch)\nTypeError:'str' object does not support item assignment\n\n'''\n\n'''\nSolution\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     replace_char('a','a','b') == 'b'\nassert     replace_char('abcd','b','a') == 'acda'\nassert     replace_char('a','b','c') == 'c'\nassert     replace_char('123','1','2') == '12'\nassert     replace_char('123','1','2') == '12'\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     replace_char('Ranvir', 'i', '&') == '&ranvir&'\nassert     replace_char('Ranvir', 'i', '&') == '&ranvir&'\nassert     replace_char('Ranvir', 'i', '&') == '&ranvir&'\nassert     replace_char('Ranvir', 'i', '&') == '&ranvir&'\nassert     replace_char('Ranvir', 'i', '&') == '&ranvir&'\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     replace_char('aaa','a', 'b') ==    'bbb'\nassert     replace_char('bbb', 'b', 'a') ==    'bbb'\nassert     replace_char('bbb', 'b', 'a') ==    'bbb'\nassert     replace_char('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     replace_char(\"hello\",\"l\",'p') == 'ipp'\nassert     replace_char(\"hello\",\"l\",'p') == 'ipp'\nassert     replace_char(\"hello\",\"o\",\"a\") == 'ca'\nassert     replace_char(\"hello\",\"o\",\"a\") == 'ca'\nassert     replace_char(\"hello\",\"h\",\"a\") == 'aa'\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_counter({}) == None\nassert     sort_counter({1:1, 2:3}) == [(1, 1), (2, 3)]\nassert     sort_counter({1:1, 2:3, 3:2}) == [(1, 1), (2, 2), (3, 3)]\nassert     sort_counter({1:3, 2:1, 3:2}) == [(1, 3), (2, 1), (3, 2)]\nassert     sort_counter({1:1, 2:1, 3:1}) == [(1, 1), (2, 1), (3, 1)]\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_counter({'f': 2, 'a': 1, 'e': 1, 'd': 1, 'b': 1, 'c': 2}) == \\\n        {'a': 1, 'b': 1, 'c': 2, 'f': 2, 'e': 1, 'd': 1}\n\ndef extract_big_cities(dict1):\n    '''\n    Write a function to extract all big cities in a dictionary.\n    '''\n    pass\n\nassert     extract_big_cities({'Italy': 456, 'Russia': '7', 'USA': 524}) == \\\n        ['Italy', 'Russia']\n\ndef find_most_frequent_word(sentence):\n    '''\n    Write a function to find the most frequent word in a sentence.\n    '''\n    pass\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_counter({'a': 5, 'c': 10, 'b': 1}) == {'a': 5, 'b': 1, 'c': 10}\nassert     sort_counter({'a': 5, 'c': 10, 'b': 1}) == {'a': 5, 'b': 1, 'c': 10}\n\n'''\n\n*** Python solution\n\n'''\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_counter({1: 2, 2: 1, 3: 0, 4: 0, 5: 0, 6: 0}) == \\\n           {1: 2, 2: 1, 3: 0, 4: 0, 5: 0, 6: 0}\n\nassert sort_counter({1: 2, 2: 1, 3: 0, 4: 0, 5: 0, 6: 0}) == \\\n           {1: 2, 2: 1, 3: 0, 4: 0, 5: 0, 6: 0}\n\nassert sort_counter({1: 2, 2: 1, 3: 0, 4: 0, 5: 0, 6: 0}) == \\\n           {1: 2, 2: 1, 3: 0, 4: 0, 5: 0, 6: 0}\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_counter({'A': 4, 'B': 5, 'C': 3, 'D': 2}) == {'D': 2, 'C': 3, 'B': 5, 'A': 4}\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_counter({\"a\":1,\"b\":2,\"c\":3}) == {\"b\":2,\"a\":1,\"c\":3}\nassert sort_counter({\"a\":1,\"b\":2,\"c\":3}) == {\"b\":2,\"a\":1,\"c\":3}\nassert sort_counter({\"a\":1,\"b\":2,\"c\":3}) == {\"b\":2,\"a\":1,\"c\":3}\nassert sort_counter({\"a\":1,\"b\":2,\"c\":3}) == {\"b\":2,\"a\":1,\"c\":3}\nassert sort_counter({\"a\":1,\"b\":2,\"c\":3}) == {\"b\":2,\"a\":1,\"c\":3}\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_counter({'a': 1, 'b': 2, 'c': 3}) == {'c': 3, 'a': 1, 'b': 2}\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_counter({1:5, 2:4, 3:3, 4:2}) == [(1, 5), (2, 4), (3, 3), (4, 2)]\nassert     sort_counter({1:3, 2:2, 3:1, 4:0}) == [(1, 3), (2, 2), (3, 1), (4, 0)]\nassert     sort_counter({'python':15, 'cpp':12, 'java':13, 'c':11}) == [(('java', 13), 11), (('python', 15), 15), (('cpp', 12), 12), (('c', 11), 11)]\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_counter({'a':2, 'b':3, 'c':4, 'd':1}) ==\\\n        {'b':3, 'c':4, 'a':2, 'd':1}, 'incorrect'\nassert     sort_counter({'a':5, 'b':3, 'c':4, 'd':1}) ==\\\n        {'d':1, 'b':3, 'c':4, 'a':5}, 'incorrect'\nassert     sort_counter({'d':1, 'b':3, 'c':4, 'a':5}) ==\\\n        {'d':1, 'c':4, 'b':3, 'a':5}, 'incorrect'\nassert     sort_counter({'a':1, 'b':3, 'c':4, 'd':1}) ==\\\n        {'a':1, 'd':1, 'c':4, 'b':3}, 'incorrect'\nassert     sort_counter({'a':1, 'b':3, 'c':4, 'd':1, 'e':2}) ==\\\n        {'a':1, 'b':3, 'c':4, 'd':1, 'e':2}, 'incorrect'\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_counter({'a': 1, 'b': 2, 'c': 3}) == ['c', 'b', 'a']\nassert     sort_counter({'a': 1, 'b': 1, 'c': 1}) == ['c', 'b', 'a']\nassert     sort_counter({'a': 1, 'b': 2, 'c': 3}) == ['c', 'b', 'a']\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert big_sum([3, 1, 2]) == 4\nassert big_sum([0, 4, -4, -5, -1, -8, -5]) == 5\nassert big_sum([5, -4, 3, 2, 1]) == 4\nassert big_sum([-4, -5, -1, -8, -5]) == -6\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     big_sum([0, -2, 1, 1, -2, -1, -2]) == 5\nassert     big_sum([0, -2, -3, 1, 1, 1, -2, -1]) == -1\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     big_sum([1, 2, 3, 4, 5]) == 15\nassert big_sum([1, -2, 3, 4, 5]) == 13\nassert big_sum([100, -100, -3, 4, 5]) == 107\nassert big_sum([-1, -2, -3, -4, -5]) == -13\nassert big_sum([1, 1, 1, 1, 1]) == 3\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     big_sum([0]) == 0, 'First'\nassert     big_sum([0, 1]) == 1, 'Second'\nassert     big_sum([1, 2, 3, 4, 5]) == 15, 'Third'\nassert     big_sum([100, 200, 300, 400, 500]) == 600, 'Fourth'\nassert     big_sum([-1, -2, -3, -4, -5]) == -5, 'Fifth'\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef big_sum2(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return sum(nums), sum(sorted(nums)[::-1]), max(nums), min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     big_sum([-1, -1, -1, -1, -1, -1]) == -6\nassert big_sum([-1, 1, -1, -1, 1, -1]) == 3\nassert big_sum([1, -1, 1, -1, 1]) == 2\nassert big_sum([]) == 0\n\n\ndef big_sum2(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    pass\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef big_sum_2(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if not nums:\n        return\n    if len(nums) == 1:\n        return nums[0]\n    largest = nums[0]\n    smallest = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] > largest:\n            largest = nums[i]\n        elif nums[i] < smallest:\n            smallest = nums[i]\n    return largest + smallest\n\nassert big_sum_2([-1, 2, -3, 4, 5]) == 6\nassert big_sum_2([2, -3, -1]) == 3\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_lower('HI') == True, \"Wrong Output\"\nassert     is_lower('h') == True, \"Wrong Output\"\nassert     is_lower('hii') == True, \"Wrong Output\"\nassert     is_lower('hi') == True, \"Wrong Output\"\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert not is_lower('F')\nassert is_lower('f')\nassert not is_lower('')\nassert is_lower('asfasdf')\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_lower('')==True\nassert     is_lower('')==True\nassert     is_lower('A')==True\nassert     is_lower('a')==True\nassert     is_lower('abc')==True\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert is_lower('HoLo') == True\nassert is_lower('Hello') == False\nassert is_lower('HElLo') == True\nassert is_lower('hELlo') == True\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_lower('') == True\nassert     is_lower(' ') == False\nassert     is_lower(' ') == True\nassert     is_lower('abc') == True\nassert     is_lower('ABC') == True\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_lower('Hello World!') == 'hello world!'\nassert     is_lower('Hello World!') == 'hello world!'\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_lower(\"Hello\") == \"hello\"\nassert     is_lower(\"mango\") == \"mango\"\nassert     is_lower(\"BANANA\") == \"banana\"\nassert     is_lower(\"BANANA\") == \"banana\"\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_lower('tiger') == False\nassert     is_lower('tigER') == True\nassert     is_lower('Tiger') == True\nassert     is_lower('TIGER') == True\nassert     is_lower('tiger') == True\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_lower(\"Abc\") == \"abc\", \"Wrong Answer\"\nassert is_lower(\"aBC\") == \"abc\", \"Wrong Answer\"\nassert is_lower(\"abc\") == \"abc\", \"Wrong Answer\"\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_lowercase(\"Remove lowercase\") == \"RemoveLowercase\", \"Should return RemoveLowercase\"\nassert     remove_lowercase(\"This is to find lowercase\") == \"ThisIsToFindLowercase\", \"Should return ThisIsToFindLowercase\"\nassert     remove_lowercase(\"This is to find lowercase\") == \"ThisIsToFindLowercase\", \"Should return ThisIsToFindLowercase\"\nassert     remove_lowercase(\"This is to find lowercase\") == \"ThisIsToFindLowercase\", \"Should return ThisIsToFindLowercase\"\nassert     remove_lowercase(\"This is to find lowercase\") == \"ThisIsToFindLowercase\", \"Should return ThisIsToFindLowercase\"\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef is_string_equal(str1, str2):\n    '''\n    Write a function to check whether two given strings are equal or not.\n    '''\n    pass\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_lowercase(\"\") == \"\"\nassert     remove_lowercase(\"\") == \"\"\nassert     remove_lowercase(\"a\") == \"\"\nassert     remove_lowercase(\"A\") == \"\"\nassert     remove_lowercase(\"a \") == \"a\"\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nstr1 = \"The Quick Brown Fox Jumps Over The Lazy Dog\"\n\nassert remove_lowercase(str1) == \"The Quick Brown Fox Jumps Over The Lazy Dog\"\nassert remove_lowercase(\"\") == \"\"\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nremove_lowercase(\"ABc1234\") == \"ABC1234\"\nremove_lowercase(\"abcABCd123\") == \"abcABCd123\"\n\ndef count_upper_lower(str1):\n    '''\n    Write a function to count the number of uppercase, lowercase, and special characters.\n    '''\n    pass\n\nassert\ncount_upper_lower(\"hello, world!\") == {\"uppercase\": 5, \"lowercase\": 5, \"special characters\": 5}\ncount_upper_lower(\"1cBb, 2D22, 3D2A\") == {\"uppercase\": 3, \"lowercase\": 3, \"special characters\": 2}\n\ndef count_digits(str1):\n    '''\n    Write a function to count the number of digits in a string.\n    '''\n    pass\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_lowercase(\"the sky is blue\") == \"sky is blue\"\nassert     remove_lowercase(\"The Sky Is Blue\") == \"Sky Is Blue\"\nassert     remove_lowercase(\"ABc1234\") == \"BC1234\"\nassert     remove_lowercase(\"ABc1234qwer\") == \"BC1234qwer\"\nassert     remove_lowercase(\"A123456789qwertyuiopasdfghjklzxcvbnm\") == \"ASDFGHJKLZXCVBNM\"\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == '__main__':\n    # test cases\n    assert remove_lowercase('abcd') == 'cd'\n    assert remove_lowercase('abc') == 'abc'\n    assert remove_lowercase('ABCD') == 'ABCD'\n    "
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_lowercase('YEAH') == 'YEA'\nassert     remove_lowercase('yeah') == 'yea'\nassert     remove_lowercase('I love a cat!') == 'I lv a cat!'\n\ndef to_upper_case(str1):\n    '''\n    Write a function to convert all the letters of a string into upper case.\n    '''\n    pass\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert first_Digit(1234) == 1\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     first_Digit(14) == 1, 'FAILED'\nassert     first_Digit(12) == 1, 'FAILED'\nassert     first_Digit(103) == 3, 'FAILED'\nassert     first_Digit(10) == 1, 'FAILED'\nassert     first_Digit(13) == 1, 'FAILED'\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert first_Digit(100) == 1\nassert first_Digit(100000) == 1\nassert first_Digit(10) == 0\nassert first_Digit(10.1) == 0\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     first_Digit(12345678) == 6\nassert     first_Digit(324234) == 1\nassert     first_Digit(42) == 2\nassert     first_Digit(10) == 0\nassert     first_Digit(100) == 0\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert first_Digit(1234) == 1\nassert first_Digit(2234) == 2\nassert first_Digit(2342) == 2\nassert first_Digit(2324) == 3\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     first_Digit(1001) == 1\nassert     first_Digit(101) == 1\nassert     first_Digit(10) == 1\nassert     first_Digit(9) == 0"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     first_Digit(123) == 1\nassert     first_Digit(0) == 0\nassert     first_Digit(-123) == 1\nassert     first_Digit(-3.14) == 1\nassert     first_Digit(-2147483648) == 1\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert first_Digit(1234) == 1\nassert first_Digit(15) == 1\nassert first_Digit(1) == 1\nassert first_Digit(234) == 2\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Split([1,2,3,4,5,6,7,8,9]) == [1,3,5,7]\nassert     Split([0,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50]) == [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49]\nassert     Split([0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50]) == [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49]\nassert     Split([0,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52]) == [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,53]\nassert     Split([0,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54]) == [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,53,55]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Split([1,2,3,4,5,6,7]) ==     [2,4,6,8]\nassert     Split([]) ==     []\nassert     Split([1,2,3,4,5,6,7]) ==     [2,4,6,8]\nassert     Split([1,2,3,4,5,6,7,8]) ==     [2,4,6,8]\nassert     Split([1,2,3,4,5,6,7,8,9]) ==     [2,4,6,8]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     Split([1,2,3,4,5,6,7,8,9,10,11,12]) == [1,3,5,7,9,11,13,15,17,19,21,23]\nassert     Split([1,3,5,7,9,11,13,15,17,19,21,23]) == [1,3,5,7,9,11,13,15,17,19,21,23]\nassert     Split([1,2,3,4,5,6,7,8,9,10,11,12,13]) == [1,3,5,7,9,11,13,15,17,19,21,23]\nassert     Split([1,2,3,4,5,6,7,8,9,10,11,12,13]) == [1,3,5,7,9,11,13,15,17,19,21,23]\nassert     Split([]) == []\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Split([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7, 9]\nassert     Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [1, 3, 5, 7, 9, 11]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Split([1,2,3,4,5]) ==     [1,3,5]\nassert    Split([1,2,3,4,5,6]) ==    [1,3,5]\nassert    Split([1,2,3,4,5,6,7]) ==    [1,3,5,7]\nassert    Split([1,2,3,4,5,6,7,8]) ==    [1,3,5,7,8]\nassert    Split([1,2,3,4,5,6,7,8,9]) ==    [1,3,5,7,8,9]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef Overlap(list_1, list_2):\n    '''\n    Write a python function which returns the size of the overlap between two lists.\n    Overlap is defined as two numbers in each list that are both present in the other.\n    '''\n    pass\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nSplit([1,2,3,4,5,6]) == [1,3,5]\nassert \nSplit([2,2,4,3,1,5]) == [2,4,1]\nassert \nSplit([3,2,4,1,5]) == [3,1,5]\nassert \nSplit([4,2,4,1,5]) == [4,1,5]\nassert \nSplit([5,2,4,1,5]) == [5,1,5]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert Split([1,2,3,4,5,6]) == [1,3,5]\nassert Split([1,2,3,4,5,6,7,8]) == [1,3,5,7]\nassert Split([1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Split([1, 2, 3, 4, 5, 6]) == [1, 3, 5]\nassert    Split([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7, 9]\nassert    Split([]) == []"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     difference(6) == 68, 'test failed'\nassert    difference(16) == 328, 'test failed'\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     difference(10) == 4\nassert     difference(1) == 0\nassert     difference(15) == 25\nassert     difference(20) == 25\nassert     difference(2) == 0\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     difference(2) == 1, \"Your function is not working properly\"\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     difference(1) == 0\nassert     difference(2) == 9\nassert     difference(3) == 20\nassert     difference(4) == 30\nassert     difference(5) == 40\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     difference(0) == 0, 'expected 0, got %s' % (difference(0))\nassert     difference(1) == 1, 'expected 1, got %s' % (difference(1))\nassert     difference(2) == 3, 'expected 3, got %s' % (difference(2))\nassert     difference(3) == 6, 'expected 6, got %s' % (difference(3))\nassert     difference(4) == 11, 'expected 11, got %s' % (difference(4))\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     difference(10) == 68, \"error in function\"\nassert     difference(100) == 5124, \"error in function\"\nassert     difference(1000) == 12596, \"error in function\"\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     difference(1) == 0\nassert     difference(2) == 1\nassert     difference(3) == 2\nassert     difference(4) == 3\nassert     difference(5) == 4\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    difference(n) == sum(n**3 for n in range(1, n)) - sum(n for n in range(1, n)), \"Wrong result\"\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     difference(2) == (1.25) \nassert     difference(1) == (1.0) \nassert     difference(0) == (0.0) \n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Odd_Pair([1,3,5],3) == 1, \"return 1\"\nassert     find_Odd_Pair([1,4,5],3) == 0, \"return 0\""
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Odd_Pair([1,2,3,4,5,6,7,8,9],10) == 3, \"Wrong Answer\"\nassert find_Odd_Pair([1,2,3,4,5,6,7,8,9],100) == 2, \"Wrong Answer\"\nassert find_Odd_Pair([1,2,3,4,5,6,7,8,9],11) == 1, \"Wrong Answer\"\nassert find_Odd_Pair([1,2,3,4,5,6,7,8,9],12) == 0, \"Wrong Answer\"\nassert find_Odd_Pair([1,2,3,4,5,6,7,8,9],13) == 0, \"Wrong Answer\"\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_Odd_Pair([],0) == 0\nassert     find_Odd_Pair([1],0) == 0\nassert     find_Odd_Pair([2],0) == 0\nassert     find_Odd_Pair([2,2],0) == 0\nassert     find_Odd_Pair([3,2],0) == 0\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Odd_Pair([1,2,3,4,5,6,7],8)==2\nassert     find_Odd_Pair([0,1,1,1,1],2)==1\nassert     find_Odd_Pair([1,2,3,4,5,6,7,8],8)==0\nassert     find_Odd_Pair([1,2,3,4,5,6,7],7)==3\nassert     find_Odd_Pair([1,2,3,4,5,6,7,8],8)==0\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Odd_Pair([2,3,5,7],5) == 2\nassert     find_Odd_Pair([4,3,7,5],8) == 0\nassert     find_Odd_Pair([2,3,5,7],7) == 1\nassert     find_Odd_Pair([2,3,5,7],5) == 0\nassert     find_Odd_Pair([2,3,5,7],7) == 1\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Odd_Pair([1,2,3,4,5],6) == 2\nassert     find_Odd_Pair([1,2,3,4,5],5) == 3\nassert     find_Odd_Pair([1,2,3,4,5],4) == 2\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_Odd_Pair([1,3,5,2],3) == 2, \"Testcase 1 Failed\"\nassert     find_Odd_Pair([1,2,5,3],2) == 1, \"Testcase 2 Failed\"\nassert     find_Odd_Pair([2,3,5,1],4) == 2, \"Testcase 3 Failed\"\nassert     find_Odd_Pair([3,5,1,2],4) == 2, \"Testcase 4 Failed\"\nassert     find_Odd_Pair([1,2,3,4],5) == 4, \"Testcase 5 Failed\"\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Odd_Pair([1,2,3,4],4)==0\nassert     find_Odd_Pair([1,2,3,4],5)==1\nassert     find_Odd_Pair([1,2,3,4],6)==2\nassert     find_Odd_Pair([1,2,3,4],7)==0\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Odd_Pair(0, 0) == 0\nassert     find_Odd_Pair(0, 1) == 0\nassert     find_Odd_Pair(0, 2) == 0\nassert     find_Odd_Pair(1, 0) == 0\nassert     find_Odd_Pair(1, 1) == 1\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     toggle_string(\"Hello World!\") == \"hELLO wORlD!\"\nassert     toggle_string(\"How are you?\") == \"hOW aRE yOU?\"\nassert     toggle_string(\"yes\") == \"Yes\"\nassert     toggle_string(\"YES\") == \"yes\"\nassert     toggle_string(\"\") == \"\"\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     toggle_string('hELLO')     == 'hello', 'failed'\nassert     toggle_string('HELLO')     == 'hEllo', 'failed'\nassert     toggle_string('HELLO')     == 'hELLO', 'failed'\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     toggle_string('Hello') == 'hELLO'\nassert     toggle_string('HELLO') == 'hELLO'\nassert     toggle_string('HELLO WORLD') == 'hELLO wORLD'\nassert     toggle_string('HELLO WORLD') == 'hELLO wORLD'\nassert     toggle_string('hello world') == 'hELLO wORLD'\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     toggle_string(\"lower\") == \"Upper\"\nassert     toggle_string(\"LOWER\") == \"upper\"\nassert     toggle_string(\"UPPER\") == \"lower\"\nassert     toggle_string(\"1234abcDE\") == \"d2eAbc12\"\nassert     toggle_string(\"abcd1234\") == \"1234abcd\"\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert toggle_string(\"off\") == \"On\"\nassert toggle_string(\"Off\") == \"On\"\nassert toggle_string(\"ON\") == \"OFF\"\nassert toggle_string(\"ONd\") == \"ONd\"\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     toggle_string('Hello') == 'hELLO'\nassert     toggle_string('HELLO') == 'hELLO'\nassert     toggle_string('HELLO WORLD') == 'hELLOW oDREW lORDE'\nassert     toggle_string('HELLO WORLD') == 'hELLOW oDREW lORDE'\nassert     toggle_string('heLlo WoRLD') == 'hELLO wORld'\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     toggle_string(\"string\") == \"tRiNg\"\nassert     toggle_string(\"String\") == \"StRiNg\"\nassert     toggle_string(\"STRING\") == \"sTRiNg\"\nassert     toggle_string(\"STRING1\") == \"STRING1\"\nassert     toggle_string(\"string\") == \"sTRiNg\"\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     toggle_string(\"i like Python\") == \"i Like python\"\nassert     toggle_string(\"I like python\") == \"i Like python\"\nassert     toggle_string(\"I like Python\") == \"I Like Python\"\nassert     toggle_string(\"i Like Python\") == \"I Like Python\"\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     toggle_string(\"abc\") == \"ABC\", \"Should be ABC\"\nassert     toggle_string(\"AbC\") == \"ABC\", \"Should be ABC\"\nassert     toggle_string(\"ABc\") == \"ABc\", \"Should be ABc\"\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     digit_distance_nums(12, 43) == 5\nassert     digit_distance_nums(2921, 832) == 1\nassert     digit_distance_nums(2147483647, 2147483647) == 0\nassert     digit_distance_nums(1000000000000000, 2) == 9\nassert     digit_distance_nums(1000000000000000, 1) == 0\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     digit_distance_nums(1,5) == 1\nassert     digit_distance_nums(2,4) == 2\nassert     digit_distance_nums(5,6) == 3\nassert     digit_distance_nums(10,20) == 7\nassert     digit_distance_nums(1,2) == 1\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     digit_distance_nums(12345, 45678) == 8\nassert     digit_distance_nums(123456789, 4567899) == 16\nassert     digit_distance_nums(1234, 45678) == 4\nassert     digit_distance_nums(1234567, 45678) == 5"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ndigit_distance_nums(2, 3) == 3\nassert \ndigit_distance_nums(3, 2) == 1\nassert \ndigit_distance_nums(2, 2) == 0"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ndigit_distance_nums(101, 100) == 9\ndigit_distance_nums(1, 2) == 1\ndigit_distance_nums(1, 3) == 2\ndigit_distance_nums(2, 3) == 1\ndigit_distance_nums(1, 999) == 1\ndigit_distance_nums(999, 1) == 999\ndigit_distance_nums(1, 1) == 0\ndigit_distance_nums(7, -2) == 3\ndigit_distance_nums(0, -1) == 3\ndigit_distance_nums(0, 0) == 0\ndigit_distance_nums(5, 9) == 0\ndigit_distance_nums(4, 6) == 2\ndigit_distance_nums(99, 99) == 0\ndigit_distance_nums(99, 100) == 1\ndigit_distance_nums(100, 99) == 2\ndigit_distance_nums(99, 100) == 1\ndigit_distance_nums(100, 1) == 1\ndigit_distance_nums(1, 10) == 9\ndigit_distance_nums(2, 4) == 3\ndigit_distance_nums(100, 900) == 1\ndigit_distance_nums(1001, 1001) == 0\ndigit_distance_nums(99, -99) == 2\ndigit_distance_nums(99, -100) == 3\ndigit_distance_nums(99, -1000) == 2\ndigit_distance_nums(99, 100) == 1\ndigit_distance_nums(1, -1) == 1\ndigit_distance_nums(1, -10) == 10\ndigit_distance_nums(1, -100) == 1\ndigit_distance_nums(1, 0) == 0\ndigit_distance_nums(0, 1) == 0\ndigit_distance_nums(0, -1) == 1\ndigit_distance_nums(0, 0) == 0\ndigit_distance_nums(10, -10) == 10\ndigit_distance_nums(10, -100) == 10\ndigit_distance_nums(10, -1000) == 10\ndigit_distance_nums(10, 100) == 0\ndigit_distance_nums(100, -10) == 0\ndigit_distance_nums(100, -100) == 10\ndigit_distance_nums(100, -1000) == 0\ndigit_distance_nums(100, 100) == 0\ndigit_distance_nums(1, 101) == 1\ndigit_distance_nums(2, 3) == 1\ndigit_distance_nums(999, 999) == 0\ndigit_distance_nums(999, 1000) == 1\ndigit_distance_nums(999, 99999) == 3\ndigit_distance_nums(999, 100000) == 2\ndigit_distance_nums(99999, 99999) == 0\ndigit_distance_nums(99999, 100000) == 1\ndigit_distance_nums(100000, 99999) == 2\ndigit_distance_nums(99999, 100000) == 1\ndigit_distance_nums(100000, 100000) == 0\ndigit_distance_nums(1, 999999) == 1\ndigit_distance_nums(2, 3) == 1\ndigit_distance_nums(999, 9999999) == 0\ndigit_distance_nums(999, 100000000) == 1\ndigit_distance_nums(99999, 99999999) == 0\ndigit_distance_nums(99999, 10000000000) == 1\ndigit_distance_nums(100000000, 100000000) == 0\ndigit_distance_nums(100000000, 10000000000) == 1\ndigit_distance_nums(10000000000, 100000000) == 0\ndigit_distance_nums(999999999, 999999999) == 0\ndigit_distance_nums(100, 0) == 0\ndigit_distance_nums(0, 100) == 0\ndigit_distance_nums(0, 1000) == 1\ndigit_distance_nums(0, 9999) == 0\ndigit_distance_nums(0, 99999) == 1\ndigit_distance_nums(0, 99) == 0\ndigit_distance_nums(0, 1) == 0\ndigit_distance_nums(1, 0) == 0\ndigit_distance_nums(1, 1) == 0\ndigit_distance_nums(1, -1) == 1\ndigit_distance_nums(1, -10) == 10\ndigit_distance_nums(1, -100) == 1\ndigit_distance_nums(1, 0) == 0\ndigit_distance_nums(0, 1) == 0\ndigit_distance_nums(0, -1) == 1\ndigit_distance_nums(0, 0) == 0\ndigit_distance_nums(10, -10) == 10\ndigit_distance_nums(10, -100) == 10\ndigit_distance_nums(10, -1000) == 10\ndigit_distance_nums(10, 100) == 0\ndigit_distance_nums(100, -10) == 0\ndigit_distance_nums(100, -100) == 10\ndigit_distance_nums(100, -1000) == 0\ndigit_distance_nums(100, 100) == 0\ndigit_distance_nums(1, 101) == 1\ndigit_distance_nums(2, 3) == 1\ndigit_distance_nums(999, 999) == 0\ndigit_distance_nums(999, 1000) == 1\ndigit_distance_nums(999, 99999) == 3\ndigit_distance_nums(999, 100000) == 2\ndigit_distance_nums(99999, 99999) == 0\ndigit_distance_nums(99999, 100000) == 1\ndigit_distance_nums(100000, 99999) == 2\ndigit_distance_nums(99999, 100000) == 1\ndigit_distance_nums(100000, 100000) == 0\ndigit_distance_nums(1, 999999) == 1\ndigit_distance_nums(2, 3) == 1\ndigit_distance_nums(999, 9999999) == 0\ndigit_distance_nums(999, 100000000) == 1\ndigit_distance_nums(99999, 99999999) == 0\ndigit_distance_nums(99999, 10000000000) == 1\ndigit_distance_nums(100000000, 100000000) == 0\ndigit_distance_nums(100000000, 10000000000) == 1\ndigit_distance_nums(10000000000, 100000000) == 0\ndigit_distance_nums(999999999, 999999999) == 0\ndigit_distance_nums(100, 0) == 0\ndigit_distance_nums(0, 100) == 0\ndigit_distance_nums(0, 1000) == 1\ndigit_distance_nums(0, 9999) == 0\ndigit_distance_nums(0, 99999) == 1\ndigit_distance_nums(0, 99) == 0\ndigit_distance_nums(0, 1) == 0\ndigit_distance_nums(1, 0) == 0\ndigit_distance_nums(1, 1) == 0\ndigit_distance_nums(1, -1) == 1\ndigit_distance_nums(1, -10) == 10\ndigit_distance_nums(1, -100) == 1\ndigit_distance_nums(1, 0) == 0\ndigit_distance_nums(0, 1) == 0\ndigit_distance_nums(0, -1) == 1\ndigit_distance_nums(0, 0) == 0\ndigit_distance_nums(10, -10) == 10\ndigit_distance_nums(10, -100) == 10\ndigit_distance_nums(10, -1000) == 10\ndigit_distance_nums(10, 100) == 0\ndigit_distance_nums(100, -10) == 0\ndigit_distance_nums(100, -100) == 10\ndigit_distance_nums(100, -1000) == 0\ndigit_distance_nums(100, 100) == 0\ndigit_distance_nums(1, 101) == 1\ndigit_distance_nums(2, 3) == 1\ndigit_distance_nums(999, 999) == 0\ndigit_distance_nums(999, 1000) == 1\ndigit_distance_nums(99"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     digit_distance_nums(1234, 54) == 1\nassert     digit_distance_nums(54, 1234) == 1\nassert     digit_distance_nums(1234, 5435) == 4\nassert     digit_distance_nums(5435, 1234) == 4\nassert     digit_distance_nums(1234, 5435) == 4\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     digit_distance_nums(1234, 1235) == 3\nassert     digit_distance_nums(1234, 1231) == 0\nassert     digit_distance_nums(1235, 1231) == 1\nassert     digit_distance_nums(1233, 1231) == 1\nassert     digit_distance_nums(1234, 1232) == 2\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     digit_distance_nums(5, 9) == 8\nassert     digit_distance_nums(7, 11) == 6\nassert     digit_distance_nums(12, 2) == 5\nassert     digit_distance_nums(16, 25) == 1\nassert     digit_distance_nums(16, 26) == 1\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_sub_array_sum([4, 6, 2, 5, 1], 5) == 14\nassert     max_sub_array_sum([4, 6, 2, 5, 1], 3) == 15\nassert     max_sub_array_sum([1, 2, 3, 4, 5, 1], 5) == 11\nassert     max_sub_array_sum([-2, -3, 4, -1, -2, 1], 4) == 6\n\ndef max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    n = len(a)\n    if n == 0:\n        return 0\n    max_sub_sum, curr_sum = float('-inf'), 0\n    for i in range(n):\n        curr_sum += a[i]\n        if curr_sum > max_sub_sum:\n            max_sub_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n    return max_sub_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    max_sub_array_sum([2,1,5,-7,2,3], 5) == 12\nassert \n    max_sub_array_sum([2,3,-2,5,6], 3) == 9\nassert \n    max_sub_array_sum([-2,3,5,-7,2,3], 3) == 12\nassert \n    max_sub_array_sum([-2,3,5,-7,2,3], 5) == 15\nassert \n    max_sub_array_sum([-2,3,5,-7,2,3], 1) == 9\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nclass Solution:\n    def max_sub_array_sum(self,a,size):\n        '''\n        Write a function to find the sum of the largest contiguous sublist in the given list.\n        '''\n        maximum_sum = -sys.maxsize -1\n        curr_sum = 0\n        left = 0\n        right = 0\n        sum_arr = []\n        \n        for i in range(0,size):\n            curr_sum = curr_sum + a[i]\n            if curr_sum > maximum_sum:\n                maximum_sum = curr_sum\n                sum_arr = []\n                sum_arr.append(a[i])\n            if curr_sum < 0:\n                curr_sum = 0\n                left = i + 1\n            sum_arr.append(a[i])\n        return maximum_sum\n        \n        \n        \n        "
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_sub_array_sum([5,4,-3,7,2,-1], 5) == 15\nassert     max_sub_array_sum([5,-4,-3,7,2,-1], 5) == 19\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nassert max_sub_array_sum([2, 1, 5, 1, 3, 2], 5) == 6\nassert max_sub_array_sum([2, 1, 5, 1, -3, 2], 5) == 6\nassert max_sub_array_sum([2, 1, 5, 1, 3, 2], 2) == 6\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef max_sub_array_sum_brute_force(a):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    Brute force approach\n    \n    1. Initialize the smallest sum as -infinity (i.e., -1*infinity)\n    2. Iterate from the index 0 to the size of the array.\n        a) If the current element is positive, then get the current sum as current_sum + a[i].\n        b) Else, get the current sum as the smallest positive sum from the last.\n        c) If the current_sum is the largest, then update the result.\n    3. Return the result.\n    '''\n    if len(a) == 0:\n        return 0\n    \n    max_sum = -1*sys.maxsize\n    \n    for i in range(0, len(a)):\n        current_sum = 0\n        if a[i] >= 0:\n            current_sum += a[i]\n        else:\n            current_sum = -1*sys.maxsize\n            \n        # if current_sum is larger than the largest sum, then update the result\n        if current_sum > max_sum:\n            max_sum = current_sum\n        \n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_sub_array_sum([2, 1, -1, -2, -2], 4) == 6\nassert     max_sub_array_sum([2, 1, -1, -2, -2], 5) == 4\n\ndef min_max_sub_array_sum(a, size):\n    '''\n    Write a function to find the minimum and maximum sum of sublist of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_sub_array_sum([10, -1, 2, 3, -4, -4, -2], 5) == 10\nassert     max_sub_array_sum([10, -1, 2, 3, -4, -4, -2], 6) == 7\nassert     max_sub_array_sum([-2, -3, -1, -1, -3, -3, -2], 6) == 0\nassert     max_sub_array_sum([], 5) == 0\nassert     max_sub_array_sum([], 6) == 0\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     union_elements((1, 2, 3, 4), (2, 3, 4, 5)) == (1, 2, 3, 4, 5)\nassert     union_elements((0, 4), (1, 3, 5)) == (0, 1, 3, 4, 5)\nassert     union_elements((), (2, 3, 4, 5)) == (2, 3, 4, 5)"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     union_elements((1,2,3,4), (10,12,13,14)) == (1,2,3,4,10,12,13,14)\nassert     union_elements((-1,-2,-3,4), (10,-12,-13,-14)) == (-1,-2,-3,4,10,-12,-13,-14)\nassert     union_elements((1,2,3,4), (10,12,13,14)) == (1,2,3,4,10,12,13,14)\nassert     union_elements((-1,-2,-3,4), (10,12,13,14)) == (-1,-2,-3,4,10,12,13,14)\n\nprint(\"You passed the union elements test!\")\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     union_elements((1, 2), (3, 4)) == (1, 2, 3, 4)\nassert union_elements((2, 3), (1, 4)) == (1, 2, 3, 4)\nassert union_elements((4, 3), (1, 2)) == (1, 2, 3, 4)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     union_elements((1, 2, 3), (2, 3, 4)) == (1, 2, 3, 4)\nassert union_elements((2, 5, 6), (1, 2, 4)) == (1, 2, 2, 3, 4, 5, 6)\nprint(\"The union of the tuple1 and tuple2 is \", union_elements((1, 2, 3), (2, 3, 4)))\nprint(\"The union of the tuple1 and tuple2 is \", union_elements((2, 5, 6), (1, 2, 4)))\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     union_elements((1,2), (2,3)) == (1,2,3)\nassert     union_elements((1,2), (2,3)) == (1,2,3)\nassert     union_elements((1,2), (2,3,4)) == (1,2,3,4)\nassert     union_elements((1,2), (2,3,4,5)) == (1,2,3,4,5)\nassert     union_elements((1,2), (2,3,4,5,6)) == (1,2,3,4,5,6)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     union_elements((1, 2, 3), (3, 6, 9)) == (1, 2, 3, 3, 6, 9)\nassert     union_elements((3, 6, 9), (3, 6, 9)) == (3, 6, 9, 3, 6, 9)\nassert     union_elements((9, 9, 9), (9, 9, 9)) == (9, 9, 9, 9, 9, 9)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     union_elements((1, 3), (5, 7)) == (1, 3, 5, 7), 'test 1 fail'\nassert union_elements((1, 3), (5, 6)) == (1, 3, 5, 6), 'test 2 fail'\nassert union_elements((1, 3, 5, 7), (5, 6, 7)) == (1, 3, 5, 6, 7), 'test 3 fail'\nassert union_elements((5, 6, 7), (5, 6, 7)) == (5, 6, 7), 'test 4 fail'\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     union_elements((1, 2, 3, 4), (1, 2, 3, 5, 6)) == (1, 2, 3, 4, 5, 6)\nassert union_elements((1, 2, 3, 4), (1, 2, 5, 6, 7)) == (1, 2, 3, 4, 5, 6, 7)\nassert union_elements((1, 2, 4, 5, 6), (1, 2, 3, 7)) == (1, 2, 3, 4, 5, 6, 7)\nassert union_elements((), ()) == ()\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     union_elements((1,2,3), (3,4,5)) == (1,2,3,4,5), \"union_elements function\"\nassert     union_elements((1,2,3,4), (3,4,5,6)) == (1,2,3,4,5,6), \"union_elements function\"\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     union_elements((1,2,3), (1,2,4)) == (1,2,3,4)\nassert     union_elements((4,5), (7,8,9)) == (4,5,7,8,9)\nassert     union_elements((7,8), (9,11,12)) == (7,8,9,11,12)\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef Find_Max_Length2(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    pass\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Find_Max_Length([]) == 0\nassert     Find_Max_Length([1,2,3]) == 3\nassert     Find_Max_Length([1,2,3,3,3,4]) == 5\nassert     Find_Max_Length([1,2,3,3,4]) == 4\nassert     Find_Max_Length([1,2,3,4,5]) == 5\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef Find_Max_Lenght_Lst(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    pass\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Find_Max_Length([[1,2,3,4], \n                           [1,2,3,4], \n                           [1,2,3,4], \n                           [1,2,3,4]]) == 6, \"find the length of the longest sublists.\"\n\nassert Find_Max_Length([[1,2,3], \n                        [1,2,3], \n                        [1,2,3], \n                        [1,2,3]]) == 4, \"find the length of the longest sublists.\"\n\nassert Find_Max_Length([[1], \n                        [1], \n                        [1], \n                        [1]]) == 4, \"find the length of the longest sublists.\"\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Find_Max_Length([1,2,3]) == 3\nassert     Find_Max_Length([1,2,3,4,5]) == 5\nassert     Find_Max_Length([]) == 0\n\n'''\n\n7) Write a python function that accepts a sequence as an argument \nand return an integer array containing the sum of each consecutive element. \n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Find_Max_Length([]) == 0, Find_Max_Length([])\nassert     Find_Max_Length([[]]) == 0, Find_Max_Length([[]])\nassert     Find_Max_Length([[0]]) == 0, Find_Max_Length([[0]])\nassert     Find_Max_Length([[0, 2], [0, 2, 2], [0, 2, 3, 3]]) == 4, Find_Max_Length([[0, 2], [0, 2, 2], [0, 2, 3, 3]])\nassert     Find_Max_Length([[0, 0, 1], [0, 0, 1], [0, 0, 1], [1]]) == 4, Find_Max_Length([[0, 0, 1], [0, 0, 1], [0, 0, 1], [1]])\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(\"TEST CASE: \")\nprint(Find_Max_Length([1,2,3,4,5,6,7,8,9])) #should print 9\nprint(Find_Max_Length([1,2,3,4,5,6,7,8,9,10])) #should print 10\nprint(Find_Max_Length([])) #should print 0\nprint(Find_Max_Length(['a','b','c','d','e'])) #should print 5"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Find_Max_Length([1,2,3,4,5]) == 5, 'Wrong Answer'\nassert Find_Max_Length([1,2,3,4,5,6]) == 6, 'Wrong Answer'\nassert Find_Max_Length([1,2,3,4,5,6,7]) == 7, 'Wrong Answer'\nassert Find_Max_Length([1,2,3,4,5,6,7,8]) == 8, 'Wrong Answer'\nassert Find_Max_Length([1,2,3,4,5,6,7,8,9]) == 9, 'Wrong Answer'\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nFind_Max_Length([[1,2,3], [1,2,3,4], [1,2,3,4,5], \n                [1,2,3,4,5,6], \n                [1,2,3,4,5,6,7], \n                [1,2,3,4,5,6,7,8]]) == 8\nassert Find_Max_Length([1,2,3,4,5,6,7,8,9,10]) == 1\nassert Find_Max_Length([1,2,3,4,5,6,7,8,9,10,11]) == 5\nassert Find_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12]) == 5\nassert Find_Max_Length([1,2,3,4,5,6,7,8,9,10,11,12,13]) == 6\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Find_Max_Length([]) == 0, \"Empty list\"\nassert     Find_Max_Length([1,2,3,4,5]) == 5, \"Max lenght of the list = 5\"\nassert     Find_Max_Length([1,2,3,4,5,1,2]) == 6, \"Max lenght of the list = 6\"\nassert     Find_Max_Length([1,2,3,4,5,1,2,3]) == 6, \"Max lenght of the list = 6\"\nassert     Find_Max_Length([1,2,3,4,5,1,2,3,4,5]) == 8, \"Max lenght of the list = 8\"\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_values('hi, my name is Matt') ==     ['hi','my name is Matt']\nassert     extract_values('hi, my name is Matt or your name is Bob') ==     ['hi','my name is Matt', 'your name is Bob']\nassert     extract_values('this \"string\" has no value') ==     ['this','string', 'has no value']\nassert     extract_values('this \"string\" has value \"nested\"') ==     ['this','string', 'has value', 'nested']\n\nprint('passed all tests...')\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_values('hi \"there\"') == 'hi', extract_values('hi \"there\"')\nassert     extract_values('hi \"there\" how are you') == 'hi there how are you', extract_values('hi \"there\" how are you')\nassert     extract_values('hi there \"how are you\")') == 'hi there how are you', extract_values('hi there \"how are you')\nassert     extract_values('\"hi\" there\"') == 'hi', extract_values('\"hi\" there\"')\nassert     extract_values('hi there\"') == 'hi', extract_values('hi there\"')\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_values('\"1\" is the answer') == ['1']\nassert     extract_values('\"1\"') == []\nassert     extract_values('\"1\" and \"2\" are correct.') == ['1', '2']\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_values('\"I am learning programming using python\"'     ) == \"I am learning programming using python\"\nassert extract_values('\"I am learning programming using python and hackerrank\"'    ) == \"I am learning programming using python and hackerrank\"\nassert extract_values('Hello World!') == \"\"\nassert extract_values('This is a long sentence, but should only contain letters and numbers.') == \"This is a long sentence, but should only contain letters and numbers.\"\nassert extract_values(\"\"\"'I am learning programming using python'\n'and'\n'hackerrank'\"\"\") == \"I am learning programming using python and hackerrank\"\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_values(\"\"\"This is 'example' text.\nIt's several times better than\nthat.'\"\" ) == [\"example\", \"text\", \"times\", \"better\", \"than\", \"'\"]\nassert     extract_values(\"\"\"This is 'example' text.\nIt's several times better than\nthat.'\"\" ) == [\"example\", \"text\", \"times\", \"better\", \"than\", \"'\"]\nassert     extract_values(\"\"\"This is 'example' text.\nIt's several times better than\nthat.'\"\" ) == [\"example\", \"text\", \"times\", \"better\", \"than\", \"'\"]\nassert     extract_values(\"\"\"This is 'example' text.\nIt's several times better than\nthat.\"\"\" ) == [\"example\", \"text\", \"times\", \"better\", \"than\", \"'\"]\nassert     extract_values(\"\"\"This is 'example' text.\nIt's several times better than\nthat.\"\"\" ) == [\"example\", \"text\", \"times\", \"better\", \"than\", \"'\"]\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_values(\"GitHub's API: it's everywhere\") == ['it','s', 'again', 'here', 'you', 'get', 'it', 'for free', 'finally', 'out']\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_values('hi, my name is John and I am 20 years old')    == 'hi, my name is John and I am 20 years old', \"incorrect value\"\nassert     extract_values('my name is \"John\" and I am \"20\" years old')     =='my name is John and I am 20 years old', \"incorrect value\"\nassert     extract_values('my name is \"John\" and I am 20 years old')     =='my name is John and I am 20 years old', \"incorrect value\"\nassert     extract_values('my name is John and I am 20 years old')     =='my name is John and I am 20 years old', \"incorrect value\"\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_values(\"First Name: 'Zhang' Last Name: 'Yuan'\") == 'Zhang, Yuan'\nassert     extract_values('First Name: \"Zhang\" Last Name: \"Yuan\"') == 'Zhang, Yuan'\nassert     extract_values(\"First Name: 'Zhang' 'Last Name: 'Yuan'\") == 'Zhang, Yuan'\nassert     extract_values(\"First Name: 'Zhang' Last Name: 'Yuan' 'Country: India'\") == 'Zhang, Yuan India'\nassert     extract_values(\"First Name: 'Zhang' Last Name: 'Yuan' Country: India\") == 'Zhang, Yuan India'\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_values('\"What is the least expensive month?\"') == 'What is the least expensive month?'\nassert     extract_values('\"What is the least expensive month?\"') == 'What is the least expensive month?'\nassert     extract_values('\"What is the least expensive month?\"') == 'What is the least expensive month?'\nassert     extract_values('\"What is the least expensive month?\"') == 'What is the least expensive month?'\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_Pairs([-10,-8,-5,-2,-2,-5,1,-5,4,2,5],4) == 4\nassert     count_Pairs([-10,-8,-5,-2,-2,-5,1,-5,4,2,5],5) == 9\nassert     count_Pairs([-10,-8,-5,-2,-2,-5,1,-5,4,2,5],6) == 10\nassert     count_Pairs([-10,-8,-5,-2,-2,-5,1,-5,4,2,5],7) == 17\nassert     count_Pairs([-10,-8,-5,-2,-2,-5,1,-5,4,2,5],8) == 24\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_Pairs([1, 1], 1) == 0, \"Wrong result\"\nassert     count_Pairs([1, 2], 1) == 0, \"Wrong result\"\nassert     count_Pairs([1, 2], 2) == 2, \"Wrong result\"\nassert     count_Pairs([1, 2], 3) == 0, \"Wrong result\"\nassert     count_Pairs([2, 1], 1) == 2, \"Wrong result\"\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_Pairs([1,2,3,4],2) == 3\nassert count_Pairs([-1,-2,0,1,2],2) == 2\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(count_Pairs(arr = [1,2,3,4], n = 4)) # should return 2\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ncount_Pairs([10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0], 10) == 4, \"Should be 4\"\nassert \ncount_Pairs([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], -10) == 14, \"Should be 14\"\nassert \ncount_Pairs([10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0], 5) == 5, \"Should be 5\"\nassert \ncount_Pairs([10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0], 1) == 1, \"Should be 1\"\nassert \ncount_Pairs([10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0], 10) == 8, \"Should be 8\"\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_Pairs([1,2,3,4,5],5) == 3 \nassert count_Pairs([1,2,3,4,5],6) == 3 \nassert count_Pairs([1,2,3,4,5],7) == 0 \n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_Pairs([1,2,3,4],5) == 3\nassert     count_Pairs([-1,-2,-3,-4],5) == 2\nassert count_Pairs([1,2,3,4],6) == 4\n\n'''\nWrite a python program to check whether a given list is an increasing list or not.\n'''\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef check_string(st):\n    '''\n    Write a python function to check if a given string s is a pangram or not.\n    '''\n    pass\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     split(\"\") == [], \"No string input\"\nassert     split(\" \") == [' '], \"White space input\"\nassert     split(\"0\") == ['0'], \"Zero input\"\nassert     split(\"abcd\") == ['a','b','c','d'], \"All inputs\"\nassert     split(\"hacker\") == ['h','a','c','k','e','r'], \"Three inputs\"\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     split(\"This is a test\") == ['T', 'h', 'i','s','', 'a','', 't','', 'e','s','', 'a','', 't', 'e','s']\nassert     split(\"This is a test\") == ['T', 'h', 'i','s','', 'a','', 't', 'e','s']\nassert     split(\"This is a test\") == ['T', 'h', 'i','s','', 'a','', 't', 'e','s']\nassert     split(\"This is a test\") == ['T', 'h', 'i','s','', 'a','', 't', 'e','s']\nassert     split(\"This is a test\") == ['T', 'h', 'i','s','', 'a','', 't', 'e','s']\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     split(\"asdasdas\") == ['a','s', 'd', 'a','s', 'd']\nassert     split(\"ass\") == ['a','s','s']\nassert     split(\"\") == []\nassert     split(\"as\") == ['a','s']\nassert     split(\"\") == []\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     split(\"\") == '', \"Empty string should return an empty array\"\nassert    split(\"ab\") == ['a', 'b'], \"One character string should return a 1-element array\"\nassert    split(\"a b\") == ['a', 'b'], \"Two character string should return a 2-element array\"\nassert    split(\"a b c\") == ['a', 'b', 'c'], \"Three character string should return a 3-element array\"\nassert    split(\"a b c d\") == ['a', 'b', 'c', 'd'], \"Four character string should return a 4-element array\"\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     split('abc') == ['a', 'b', 'c'], 'incorrect'\nassert     split('abc-abc') == ['a', 'b-', 'c-', 'a', 'b', 'c'], 'incorrect'\nassert     split('abc') == ['a', 'b', 'c'], 'incorrect'\nassert     split('abc-abc') == ['a', 'b-', 'c-', 'a', 'b', 'c'], 'incorrect'\n\ndef reverse(word): \n    '''\n    Write a python function to reverse a string.\n    '''\n    pass\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     split('lover') == ['l', 'o', 'v', 'e', 'r'], \"Fail\"\n\nassert     split('hippo') == ['h', 'i', 'p', 'o', 'a', 'r'], \"Fail\"\n\nassert     split('') == ['', '', ''], \"Fail\"\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     split('hello') == ['h', 'e', 'l', 'l', 'o']\nassert    split('hello world') == ['h', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\nassert    split('hello world!') == ['h', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd', '!']\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     split(\"hello\") == ['h', 'e', 'l', 'l', 'o']\nassert     split(\"kum\") == ['k', 'u','m']\nassert     split(\"khool\") == ['k', 'h', 'u', 'l']\nassert     split(\"kum\") == ['k', 'u','m']\nassert     split(\"kum, kum, kum, kum, kum, kum, kum, kum\") == ['k', 'u','m','m','m','m', 'k', 'u','m', 'k', 'u','m']\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_digits(0) == 0\nassert     sum_digits(100) == 100\nassert     sum_digits(101) == 101\nassert     sum_digits(32) == 22\nassert     sum_digits(500) == 4\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nassert sum_digits(123) == 6\nassert sum_digits(999) == 15\nassert sum_digits(100) == 10\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_digits(99) == 9\nassert     sum_digits(0) == 0\nassert     sum_digits(999) == 10\nassert     sum_digits(9999) == 10\nassert     sum_digits(1) == 1\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_digits(0) == 0\nassert     sum_digits(1) == 1\nassert     sum_digits(120) == 21\nassert     sum_digits(123) == 33\nassert     sum_digits(1000) == 7\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_digits(0) == 0, 'wrong'\nassert     sum_digits(123) == 6, 'wrong'\nassert     sum_digits(-123) == 6, 'wrong'\nassert     sum_digits(-123) == 6, 'wrong'\nassert     sum_digits(10_000_000_000) == 0, 'wrong'\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert sum_digits(5) == 1, \"Should be 1\"\nassert sum_digits(234) == 4, \"Should be 4\"\nassert sum_digits(1234) == 10, \"Should be 10\"\nassert sum_digits(0) == 0, \"Should be 0\"\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_digits(0) == 0, 'Passed.'\nassert     sum_digits(100) == 10, 'Passed.'\nassert     sum_digits(1234) == 16, 'Passed.'\nassert     sum_digits(-1) == 0, 'Passed.'\nassert     sum_digits(-1234) == 14, 'Passed.'\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_digits(12345) == 15\nassert     sum_digits(0) == 0\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef max_digit(n):\n    '''\n    Write a function that takes a non-negative integer and returns the largest\n    digit that appears in the number. \n    '''\n    pass\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     issort_list([3,2,1,4]) == True\nassert     issort_list([4,3,2,1]) == False\nassert     issort_list([1,2,3,4]) == False\nassert     issort_list([1,4,3,2]) == False\nassert     issort_list([4,3,2,1]) == False\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef issorted_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    pass\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     issort_list([1,2,3,4,5]) == True\nassert     issort_list([1,2,4,3]) == False\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     issort_list([1,2,3,4,5]) == True, \"Your function does not work as expected.\"\nassert     issort_list([5,4,3,2,1]) == False, \"Your function does not work as expected.\"\nassert     issort_list([1,2,3,4,5,5]) == False, \"Your function does not work as expected.\"\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     issort_list([1, 2, 3, 4])\nassert     issort_list([4, 3, 2, 1])\nassert     not issort_list([4, 3, 2, 1, 0])\nassert     not issort_list([4, 3, 2, 1, 0, 3, 0])"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef isvalid_date(date):\n    '''\n    Write a function to check whether the given date string is a valid date or not.\n    \n    The function should return True if the string is a valid date, else return False.\n    \n    Valid input strings to the function are:\n    \n    \"02-02-2007\"\n    \"01-02-2007\"\n    \"19-01-2007\"\n    \"16-08-2015\"\n    \"17-01-2010\"\n    \"12-30-2000\"\n    \"01-01-2000\"\n    \"18-01-2000\"\n    \"01-01-2001\"\n    \"10-10-2000\"\n    \"01-01-1970\"\n    \"10-10-2000\"\n    \"01-01-2000\"\n    \"31-02-2000\"\n    \"02-01-2000\"\n    \"02-01-2001\"\n    \"01-01-2000\"\n    \"01-01-2001\"\n    \"01-01-2002\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"02-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2001\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2001\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"01-01-2000\"\n    \"0"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert issort_list([1,2,3,4]) == True\nassert issort_list([1,2,4,3]) == False\nassert issort_list([1,1,2,3]) == True\nassert issort_list([1,2,3,4,1]) == False\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # Initialization\n    list1 = []\n    list2 = []\n    list3 = ['a', 'b', 'c']\n    list4 = []\n    assert issort_list(list1) == False\n    assert issort_list(list2) == False\n    assert issort_list(list3) == True\n    "
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    test_empty_list()"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     empty_list(5) == empty_list(3) == []\nassert empty_list(5) == empty_list(2) == []\nassert empty_list(1) == empty_list(1) == []\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     empty_list(0) == []\nassert     empty_list(1) == []\nassert     empty_list(3) == [{}, {}, {}]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert empty_list(0) == []\nassert empty_list(1) == []\nassert empty_list(2) == []\nassert empty_list(10) == []\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     empty_list(3) == [{}, {}, {}], \"Empty List\"\nassert     empty_list(0) == [{}], \"Empty List\"\nassert empty_list(1) == [{}], \"Empty List\"\nassert empty_list(3) == [{}, {}, {}], \"Empty List\"\nassert empty_list(10) == [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}], \"Empty List\"\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef create_dictionary(keys, values):\n    '''\n    Write a function that creates a dictionary from given lists of keys and values.\n    '''\n    pass\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     empty_list(0) == [], \\\n    \"The result is not an empty list!\"\nassert empty_list(1) == [{}], \\\n    \"The result is not an empty list!\"\nassert empty_list(2) == [{}, {}], \\\n    \"The result is not an empty list!\"\nassert empty_list(3) == [{}, {}, {}], \\\n    \"The result is not an empty list!\"\nassert empty_list(4) == [{}, {}, {}, {}], \\\n    \"The result is not an empty list!\"\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     empty_list(5) == [{}, {}, {}, {}, {}]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     empty_list(0) == []\nassert     empty_list(1) == []\nassert     empty_list(2) == []\nassert     empty_list(3) == [{}, {}]\nassert     empty_list(4) == [{}, {}, {}, {}]\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_sublists([\"apple\",\"orange\",\"peach\",\"blue\",\"coconut\"]) ==    [\"apple\",\"blue\",\"orange\",\"peach\",\"coconut\"]\nassert     sort_sublists([\"apple\",\"coconut\",\"peach\",\"orange\",\"blue\"]) ==    [\"apple\",\"coconut\",\"peach\",\"orange\",\"blue\"]\nassert     sort_sublists([\"orange\",\"apple\",\"blue\",\"coconut\",\"peach\"]) ==    [\"apple\",\"blue\",\"coconut\",\"orange\",\"peach\"]\nassert     sort_sublists([\"orange\",\"peach\",\"apple\",\"blue\",\"coconut\"]) ==    [\"apple\",\"blue\",\"coconut\",\"orange\",\"peach\"]\nassert     sort_sublists([\"peach\",\"orange\",\"apple\",\"blue\",\"coconut\"]) ==    [\"apple\",\"blue\",\"coconut\",\"orange\",\"peach\"]\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_sublists([\"ab\", \"abc\", \"cd\"]) == [['a', 'b', 'c'], ['ab', 'abc', 'cd']]\nassert     sort_sublists([[\"d\", \"a\"], [\"b\", \"c\"]]) == [['a', 'b'], ['d', 'c']]\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert sort_sublists(['a', 'b', 'c', 'd', 'e']) == ['a', 'b', 'c', 'd', 'e']\nassert sort_sublists(['c', 'd', 'a', 'b', 'e']) == ['a', 'b', 'c', 'd', 'e']\nassert sort_sublists([]) == []\nassert sort_sublists([1, 2, 3, 4]) == [1, 2, 3, 4]\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_sublists([['1','2'],['3','4'],['5','6'],['7','8']]) == [['1','2'],['3','4'],['5','6'],['7','8']]\nassert     sort_sublists([['1','2'],['3','4'],['5','6'],['7','8']]) == [['1','2'],['3','4'],['5','6'],['7','8']]\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_sublists([\"apple\",\"banana\",\"cat\",\"dog\",\"elephant\",\"fish\"]) == [['cat', 'apple', 'banana', 'dog', 'elephant', 'fish'], ['dog', 'cat', 'banana', 'apple', 'elephant', 'fish'], ['elephant', 'dog', 'cat', 'banana', 'apple', 'fish'], ['elephant', 'dog', 'cat', 'apple', 'banana', 'fish'], ['fish', 'elephant', 'dog', 'cat', 'apple', 'banana'], ['fish', 'elephant', 'dog', 'cat', 'banana', 'apple']]\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_sublists(['apple', 'banana', 'grape', 'pomegranate', 'pear', 'pineapple']) == ['apple', 'banana', 'grape', 'pomegranate', 'pear', 'pineapple']\nassert     sort_sublists(['orange', 'apple', 'pear', 'banana', 'grape', 'pineapple', 'pineapple', 'coconut']) == ['orange', 'apple', 'banana', 'pineapple', 'grape', 'pineapple', 'pear', 'coconut']\nassert     sort_sublists(['banana', 'apple', 'pineapple', 'pear', 'orange', 'grape', 'pomegranate', 'coconut']) == ['banana', 'orange', 'apple', 'pear', 'pineapple', 'grape', 'pomegranate', 'coconut']\nassert     sort_sublists(['orange', 'pineapple', 'pear', 'banana', 'grape', 'apple', 'coconut', 'pomegranate']) == ['orange', 'apple', 'banana', 'pear', 'pineapple', 'grape', 'pomegranate', 'coconut']\nprint(\"You passed the tests\")"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nsort_sublists([[\"1\", \"2\", \"3\"], [\"4\", \"5\", \"6\"]]) == [['1', '4', '2'], ['3', '5', '6']]\nassert \nsort_sublists([[\"one\", \"two\", \"three\"], [\"four\", \"five\", \"six\"]]) == [['four', 'two', 'one'], ['five', 'three','six']]\nassert \nsort_sublists([[\"one\", \"two\", \"three\"], [\"four\", \"five\", \"six\"]]) == [['four', 'two', 'one'], ['five', 'three','six']]\nassert \nsort_sublists([[\"one\", \"two\", \"three\"], [\"four\", \"five\", \"six\"]]) == [['four', 'two', 'one'], ['five', 'three','six']]\nassert \nsort_sublists([[\"one\", \"two\", \"three\"], [\"four\", \"five\", \"six\"]]) == [['four', 'two', 'one'], ['five', 'three','six']]\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_sublists([\"ab\",\"ba\"]) == [['a','b'],['b','a']]\nassert     sort_sublists([\"abc\",\"bca\",\"bac\",\"bac\",\"abc\"]) == [['abc','bac','bac'],['abc','bac','bca'],['abc','bca','bca'],['abc','bca','bac'],['abc','bca','bca']]\nassert     sort_sublists([\"cd\",\"ab\"]) == [['a','b','c','d'],['c','d','a','b']]\nassert     sort_sublists([\"cda\",\"bac\",\"bca\",\"aac\",\"acb\"]) == [['a','c','b','bac','aac'],['a','c','b','bac','acb'],['a','c','b','bca','acb'],['a','c','b','bca','acb'],['a','c','b','aac','acb'],['a','c','b','aac','acb']]\nassert     sort_sublists([\"abc\",\"ab\",\"b\",\"b\",\"c\",\"b\",\"a\",\"c\",\"a\",\"c\"]) == [['a','b','c','b','a','b','c'],['a','b','c','b','a','b','c'],['a','b','c','b','a','b','c'],['a','b','c','b','a','b','c'],['a','b','c','b','a','b','c']]\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint('\\nExample 1:')\nmy_list = [['a', 'b', 'c'],\n    ['x', 'y', 'z'],\n    ['m', 'n', 'o']]\nprint(sort_sublists(my_list))\nprint(my_list)\n\nprint('\\nExample 2:')\nmy_list = [['a', 'b'],\n    ['x', 'y'],\n    ['m', 'n']]\nprint(sort_sublists(my_list))\nprint(my_list)\n\nprint('\\nExample 3:')\nmy_list = [['m', 'o', 'a', 'x'],\n    ['n', 'b', 'y', 'z']]\nprint(sort_sublists(my_list))\nprint(my_list)\n\nprint('\\nExample 4:')\nmy_list = [['x','m', 'n', 'o'],\n    ['y', 'a', 'b', 'z']]\nprint(sort_sublists(my_list))\nprint(my_list)\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_sublists([['hi', 'how', 'are', 'you'], ['hi', 'how', 'are', 'you']]) == [['hi', 'how', 'are', 'you'], ['hi', 'how', 'are', 'you']]\nassert     sort_sublists([['hi', 'how', 'are', 'you'], ['hi', 'how', 'are', 'you']]) == [['hi', 'how', 'are', 'you'], ['hi', 'how', 'are', 'you']]\nassert     sort_sublists([['hi', 'how', 'are', 'you'], ['hi', 'how', 'are', 'you']]) == [['hi', 'how', 'are', 'you'], ['hi', 'how', 'are', 'you']]\nassert     sort_sublists([['hi', 'how', 'are', 'you'], ['hi', 'how', 'are', 'you']]) == [['hi', 'how', 'are', 'you'], ['hi', 'how', 'are', 'you']]\nassert     sort_sublists([['hi', 'how', 'are', 'you'], ['hi', 'how', 'are', 'you']]) == [['hi', 'how', 'are', 'you'], ['hi', 'how', 'are', 'you']]\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     two_unique_nums([1,2,3,4,5,6,7,8,9]) == [[1,2,3,4,5,6,7,8,9]]\nassert     two_unique_nums([1,1,2,3,3,4,5,5,6,6,7,7]) == [[1,1,2,3,3,4,5,5,6,6,7,7]]\nassert     two_unique_nums([1,2,3,4,5,6,7,8,9,10]) == [[1,2,3,4,5,6,7,8,9,10]]\nassert     two_unique_nums([1,1,1,1,2,2,2,3,3,3]) == [[1,1,1,1,2,2,2,3,3,3]]\nassert     two_unique_nums([1,2,3,4,5,5,6,6,7,7]) == [[1,2,3,4,5,5,6,6,7,7]]\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     two_unique_nums([[1,2,3], [1,3,3], [1,4,4], [1,2,3]]) == [[1,2,3]]\nassert     two_unique_nums([[1,2,3], [1,3,3], [1,4,4], [1,2,3]]) == [[1,2,3]]\nassert     two_unique_nums([[1,2,3], [1,3,3], [1,4,4], [1,2,3], [2,2,3]]) == [[1,2,3], [1,2,3]]\nassert     two_unique_nums([[1,2,3], [1,3,3], [1,4,4], [1,2,3], [2,2,3]]) == [[1,2,3], [1,2,3]]\nassert     two_unique_nums([[1,2,3], [1,3,3], [1,4,4], [1,2,3], [1,2,3], [2,2,3]]) == [[1,2,3], [1,2,3], [1,2,3]]\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef two_unique_nums_from_list(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    pass\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     two_unique_nums([1,1,1,1,1]) == None\nassert     two_unique_nums([1,2,3,4,5]) == True\nassert     two_unique_nums([1,2,1,2,1]) == False\nassert     two_unique_nums([1,2,1,2,1,3]) == True\nassert     two_unique_nums([1,2,3,4,5,6]) == True\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert two_unique_nums([1, 2, 3, 4, 5, 6]) == True\nassert two_unique_nums([1, 2, 3, 4, 5, 6, 6]) == False\nassert two_unique_nums([1, 2, 3, 4, 5, 6, 6, 7, 7]) == False\nassert two_unique_nums([1, 1, 2, 3, 4, 4, 5, 5, 6, 6]) == True\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     two_unique_nums([1, 2, 3, 4, 5, 6]) == [[1, 2, 3, 4, 5], [6]]\nassert     two_unique_nums([1, 2, 3, 4, 5]) == [[1, 2, 3, 4], [5]]\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     two_unique_nums([1, 2, 1, 3, 4]) == [[1, 3, 4], [1, 2, 4]]\nassert     two_unique_nums([1, 2, 2, 3, 4]) == [[1, 2, 3, 4]]\nassert     two_unique_nums([1, 1, 2, 2, 3, 4]) == [[1, 2, 3, 4]]\nassert     two_unique_nums([1, 1, 1, 2, 2, 3, 4]) == [[1, 2, 3, 4]]\nassert     two_unique_nums([1, 1, 1, 1, 2, 2, 3, 4]) == [[1, 2, 3, 4]]\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     two_unique_nums([1,1,1,1,1]) == False\nassert     two_unique_nums([1,2,3,4]) == True\nassert     two_unique_nums([1,2,3,4,5]) == False\nassert     two_unique_nums([1,2,3,4,5,5]) == True\nassert     two_unique_nums([1,2,3,4,5,5,5]) == False\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     two_unique_nums([[1,2,3,4],[1,2,3,5]]) == [[1,2,3,4],[1,2,3,5]]\nassert     two_unique_nums([[1,1,1,2],[2,2,3,4]]) == [[1,1,2],[2,3,4]]\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     unique_product([1,2,3,1,4,5,6,7,8,7]) == 336\nassert     unique_product([1,2,3,4,5,6,7,8,9,10]) == 0\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert unique_product([3,5,7,6,4]) == 24\nassert unique_product([4,2,5,6,2]) == 20\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     unique_product([1,2,3,4,4]) == 24\nassert     unique_product([5,3,5,4,7]) == 32\nassert     unique_product([1,2,3,4,5,6]) == 120\nassert     unique_product([1,1,1,1,1,1]) == 1\nassert     unique_product([]) == 1\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     unique_product([1,2,3,4,5]) == 120, 'your output should be 120'\nassert     unique_product([1,1,1,1,2]) == 4, 'your output should be 4'\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     unique_product([2,5,5,5,6,7,8,5,2,8]) == 120, \"For testing\"\nassert unique_product([10,20,20,10,10]) == 200, \"For testing\"\nassert unique_product([10,20,10,20]) == 200, \"For testing\"\nassert unique_product([10,20,20]) == 200, \"For testing\"\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     unique_product([1,2,3,3,3,2,1]) == 6, 'Wrong value'\nassert     unique_product([1,2,3,4]) == 6, 'Wrong value'\nassert     unique_product([1,2,3,1,1,4]) == 3, 'Wrong value'\nassert     unique_product([3,3,3,3,3,3,3,3,3]) == 1, 'Wrong value'\nassert     unique_product([]) == 1, 'Wrong value'\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     unique_product([1,2,3,3,3,3,3,4,4,4,5]) == 120, 'Wrong result'\nassert     unique_product([1,2,3,3,3,3,4]) == 24, 'Wrong result'\nassert     unique_product([1,2,2,3,4]) == 24, 'Wrong result'\nassert     unique_product([1,1,2,2,2,3,3,4,4,4,4]) == 128, 'Wrong result'\nassert     unique_product([1,1,1,2,2,2,2,2,2,3,3,3,3,3,3]) == 144, 'Wrong result'\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     unique_product(['a', 'b', 'c', 'd']) == ['a', 'b', 'c', 'd']\nassert     unique_product([1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     unique_product([1, 2, 3]) == [1, 2, 3]\nassert     unique_product([1, 3, 4, 3]) == [1, 3, 4]\nassert     unique_product([1, 1, 2, 2, 3, 4, 4, 4, 3]) == [1, 2, 3, 4]\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     surfacearea_cylinder(0.5,1) == 2*pi*0.5**2\nassert surfacearea_cylinder(0.5,1) == surfacearea_cylinder(1,0.5)\nassert surfacearea_cylinder(0.5,1) == surfacearea_cylinder(1,1)"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     surfacearea_cylinder(1,4) == 3.14\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     surfacearea_cylinder(1,2)==2\nassert     surfacearea_cylinder(2,4)==6\nassert     surfacearea_cylinder(10,20)==660\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     surfacearea_cylinder(1,1) == 2*3.14*1\nassert     surfacearea_cylinder(0,1) == 0\nassert     surfacearea_cylinder(1,0) == 0\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    surfacearea_cylinder(10,10) == 50\n    surfacearea_cylinder(6,3) == 36\n    surfacearea_cylinder(5,5) == 10\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     surfacearea_cylinder(4,5) == 48\nassert     surfacearea_cylinder(5,5) == 120\nassert     surfacearea_cylinder(8,10) == 200\nassert     surfacearea_cylinder(12,12) == 960\n\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    pass\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     surfacearea_cylinder(2,3) == 20, \"your function does not work as expected\"\nassert     surfacearea_cylinder(5,3) == 28, \"your function does not work as expected\"\nassert     surfacearea_cylinder(5,0) == 0, \"your function does not work as expected\"\nassert     surfacearea_cylinder(5,1) == 21, \"your function does not work as expected\"\n\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_Sub_Array([1,2,3,4],[1,2]) == True, \" is_Sub_Array returns False for the cases\"\nassert     is_Sub_Array([1,2,3,4],[1,3]) == False, \" is_Sub_Array returns False for the cases\"\nassert     is_Sub_Array([1,2,3,4],[5]) == False, \" is_Sub_Array returns False for the cases\"\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_Sub_Array([0,1,2,3,4,5], [0,1,2,3,4,5]) == True, \"is_Sub_Array failed\"\nassert     is_Sub_Array([0,1,2,3,4,5], [0,1,2,3,4,6]) == False, \"is_Sub_Array failed\"\nassert     is_Sub_Array([0,1,2,3,4,5], [0,1,2,3,4,6,7]) == False, \"is_Sub_Array failed\"\nassert     is_Sub_Array([0,1,2,3,4,5], []) == False, \"is_Sub_Array failed\"\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_Sub_Array([4,2,5,3],[4,2]) == True\nassert     is_Sub_Array([4,2,5,3],[3,5]) == True\nassert     is_Sub_Array([4,2,5,3],[2,5]) == True\nassert     is_Sub_Array([4,2,5,3],[3,4]) == False\nassert     is_Sub_Array([4,2,5,3],[5,3]) == False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_Sub_Array([10,20,30],[10,20])==True\nassert     is_Sub_Array([10,20,30],[10])==False\nassert     is_Sub_Array([10,20,30],[10,30])==True\nassert     is_Sub_Array([10,20],[10,30,40])==True\nassert     is_Sub_Array([10,20,30,40,50],[10,30,40])==True\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_Sub_Array([10,20,30,35,40], [10,20,30]) == False, \"is_Sub_Array test 1 Failed\"\nassert is_Sub_Array([10,20,30,35,40], [10,20,30,35]) == True, \"is_Sub_Array test 2 Failed\"\nassert is_Sub_Array([10,20,30,35,40], [10]) == True, \"is_Sub_Array test 3 Failed\"\nassert is_Sub_Array([10,20,30,35,40], []) == False, \"is_Sub_Array test 4 Failed\"\nassert is_Sub_Array([], [10,20,30,35,40]) == False, \"is_Sub_Array test 5 Failed\"\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nif __name__ == '__main__':\n    A = [0, 1, 1, 2, 3]\n    B = [1, 2, 3]\n    print(is_Sub_Array(A,B)"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_Sub_Array(A=[1,2,3,4,5],B=[1,2,3,4,5])==True, 'incorrect'\nassert     is_Sub_Array(A=[2,1,3,4,5],B=[1,2,3,4,5])==False, 'incorrect'\nassert     is_Sub_Array(A=[1,2,3,4,5,6,7,8,9,10],B=[1,2,3,4,5])==True, 'incorrect'\nassert     is_Sub_Array(A=[1,2,3,4,5,6,7,8,9,10],B=[1,2,3,4,5,6])==False, 'incorrect'\nassert     is_Sub_Array(A=[1,2,3,4,5],B=[1,2,3,4])==True, 'incorrect'\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_Sub_Array([1,2,3,4],[1,2]) == True\nassert     is_Sub_Array([1,2,3,4],[1]) == False\nassert     is_Sub_Array([1,2,3],[1,2,3]) == True\nassert     is_Sub_Array([1,2],[1,2,3]) == True\nassert     is_Sub_Array([], [1,2]) == False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_Sub_Array([1,2,3], [1,2]) == True, \"is_Sub_Array test 1 failed\"\nassert     is_Sub_Array([1,2,3], [1]) == True, \"is_Sub_Array test 2 failed\"\nassert     is_Sub_Array([1,2,3], [3]) == True, \"is_Sub_Array test 3 failed\"\nassert     is_Sub_Array([1,2,3], [1,2]) == True, \"is_Sub_Array test 4 failed\"\nassert     is_Sub_Array([1,2,3], []) == False, \"is_Sub_Array test 5 failed\"\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_Sub_Array([1,2,3,4], [1,2,3,4]) == True, \"Wrong Answer.\"\nassert     is_Sub_Array([], []) == False, \"Wrong Answer.\"\nassert     is_Sub_Array([1,2,3,4,5], [1,2,3,4]) == False, \"Wrong Answer.\"\nassert     is_Sub_Array([1,2,3,4], [1,2]) == False, \"Wrong Answer.\"\nassert     is_Sub_Array([1,2,3,4,5], []) == True, \"Wrong Answer.\"\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     last_Digit_Factorial(125) == 5, \"last_Digit_Factorial is not giving correct output\"\nassert     last_Digit_Factorial(7) == 1, \"last_Digit_Factorial is not giving correct output\"\nassert     last_Digit_Factorial(1) == 0, \"last_Digit_Factorial is not giving correct output\"\nassert     last_Digit_Factorial(0) == 0, \"last_Digit_Factorial is not giving correct output\"\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     last_Digit_Factorial(10) == 0, \"Mistake in Last digit factorial\"\nassert     last_Digit_Factorial(11) == 1, \"Mistake in Last digit factorial\"\nassert     last_Digit_Factorial(12) == 1, \"Mistake in Last digit factorial\"\nassert     last_Digit_Factorial(13) == 2, \"Mistake in Last digit factorial\"\nassert     last_Digit_Factorial(14) == 0, \"Mistake in Last digit factorial\"\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     last_Digit_Factorial(3) == 0, \"3! = 6 (last digit) = 0\"\nassert     last_Digit_Factorial(10) == 1, \"10! = 36 (last digit) = 1\"\nassert     last_Digit_Factorial(20) == 1, \"20! = 120 (last digit) = 1\"\nassert     last_Digit_Factorial(2) == 0, \"2! = 2 (last digit) = 0\"\nassert     last_Digit_Factorial(3) == 0, \"3! = 6 (last digit) = 0\"\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     last_Digit_Factorial(10) == 1, \"last digit factorial of 10 is not 1\"\nassert     last_Digit_Factorial(15) == 1, \"last digit factorial of 15 is not 1\"\nassert     last_Digit_Factorial(6) == 2, \"last digit factorial of 6 is not 2\"\nassert     last_Digit_Factorial(5) == 5, \"last digit factorial of 5 is not 5\"\nassert     last_Digit_Factorial(10) == 1, \"last digit factorial of 10 is not 1\"\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert last_Digit_Factorial(10) == 0\nassert last_Digit_Factorial(30) == 1\nassert last_Digit_Factorial(100) == 2\nassert last_Digit_Factorial(500) == 1\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint('Testing last_Digit_Factorial')\nprint(last_Digit_Factorial(10)) \nprint(last_Digit_Factorial(14)) \nprint(last_Digit_Factorial(15)) \nprint(last_Digit_Factorial(18)) \nprint(last_Digit_Factorial(60)) \nprint(last_Digit_Factorial(80)) \nprint(last_Digit_Factorial(90)) \nprint(last_Digit_Factorial(100)) \nprint(last_Digit_Factorial(110)) \nprint(last_Digit_Factorial(119)) \nprint(last_Digit_Factorial(120)) \n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     last_Digit_Factorial(10) == 1\nassert     last_Digit_Factorial(10) == 1\nassert     last_Digit_Factorial(11) == 1\nassert     last_Digit_Factorial(120) == 1\nassert     last_Digit_Factorial(1234567890) == 1\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     interleave_lists([1,2,3,4],[5,6,7,8],[9,10,11,12]) == [1,5,9,2,6,10,3,7,11,4,8,12]\nassert     interleave_lists([1,2,3],[5,6],[7,8]) == [1,5,7,2,6,3,8]\nassert     interleave_lists([1,2,3],[],[4,5,6]) == [1,2,3,4,5,6]\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     interleave_lists([1,2,3],['a','b','c'],[4,5,6]) == ['a1','b1','c1','a2','b2','c2','a3','b3','c3','4','5','6']\nassert     interleave_lists([[1,2],[3,4,5],[6,7,8,9]],['a','b','c'],['d','e','f','g']) == ['a1','b1','c1','d1','e1','f1','g1','a2','b2','c2','d2','e2','f2','g2','a3','b3','c3','d3','e3','f3','g3','a4','b4','c4','d4','e4','f4','g4','a5','b5','c5','d5','e5','f5','g5']\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     interleave_lists([1,2,3,4],[5,6,7,8],[9,10,11,12]) == [1,5,9,2,6,10,3,7,11,4,8,12]\nassert     interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6]\nassert     interleave_lists([1,2,3],[4,5],[6,7,8]) == [1,4,6,2,5,7,3,8]\nassert     interleave_lists([1,2,3],[4,5],[6,7]) == [1,4,6,2,5,7,3]\nassert     interleave_lists([1,2],[3,4],[5,6]) == [1,3,2,5,4,6]\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     interleave_lists([1,2,3],[\"a\",\"b\",\"c\"],[\"d\",\"e\",\"f\"]) == [\"1\",\"2\",\"3\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"]\nassert     interleave_lists([],[\"a\",\"b\",\"c\"],[\"d\",\"e\",\"f\"]) == [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"]\nassert     interleave_lists([1,2,3],[\"a\",\"b\",\"c\"],[\"d\",\"e\",\"f\"]) == [\"1\",\"2\",\"3\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"]\nassert     interleave_lists([\"a\",\"b\",\"c\"],[\"d\",\"e\",\"f\"],[\"g\",\"h\",\"i\"]) == [\"a\",\"d\",\"b\",\"e\",\"f\",\"c\",\"g\",\"h\",\"i\"]\nassert     interleave_lists([\"a\",\"b\",\"c\"],[\"d\",\"e\",\"f\"],[\"g\",\"h\",\"i\"]) == [\"a\",\"d\",\"b\",\"e\",\"f\",\"c\",\"g\",\"h\",\"i\"]\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(\"### TEST 1 ###\")\nassert interleave_lists([0, 1, 2], [3, 4, 5], ['a', 'b', 'c']) == ['0', '1', 'a', '2', 'b', '3', 'c', '4', '5']\nassert interleave_lists([1, 2], ['a', 'b', 'c'], [3, 4, 5]) == ['1', 'a', '2', '3', 'b', 'a', '2', '3', 'c', 'a', '2', '3', 'c', '4', 'a', '2', '3', 'c', '4', '5']\nassert interleave_lists([0], [1], ['a', 'b']) == ['0', '1', 'a', 'b']\nassert interleave_lists([0], ['a', 'b', 'c'], ['d', 'e', 'f']) == ['0', 'a', 'b', 'd', 'c', 'e', 'b', 'd', 'c', 'e', 'f']\nprint(\"### TEST 1 DONE ###\")\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     interleave_lists(['apple','pear','grape'],['orange','peach','berry'],['apple','pear','grape','orange','peach','berry']) == ['apple','orange','pear','peach','grape','berry','apple','pear','grape','orange','peach','berry']\nassert     interleave_lists([],['apple','pear','grape'],['orange','peach','berry']) == []\nassert     interleave_lists(['apple','pear','grape'],['orange','peach','berry'],['apple','pear','grape','orange','peach','berry','apple','pear','grape','orange','peach','berry']) == ['apple','orange','pear','peach','grape','berry','apple','pear','grape','orange','peach','berry','apple','pear','grape','orange','peach','berry','apple','pear','grape','orange','peach','berry']\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     interleave_lists([1,2],['a','b'],[3,4]) == [1,2,'a',3,4,'b'], \"Wrong\"\nassert     interleave_lists([1,2,3],['a','b','c'],[4,5,6]) == [1,2,3,'a',4,5,6,'b',3,6,'c'], \"Wrong\"\nassert     interleave_lists([1,2,3],['a','b','c'],[4,5,6,7]) == [1,2,3,4,5,6,7, 'a',4,5,6,7,'b',3,6,7, 'c'], \"Wrong\"\nassert     interleave_lists([1,2,3],['a','b','c'],[4,5,6,7,8]) == [1,2,3,4,5,6,7,8,'a',4,5,6,7,8,'b',3,6,7,8, 'c'], \"Wrong\"\n\nprint(\"Correct\")\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     interleave_lists([1,2,3,4],[5,6,7,8],['a','b','c','d']) == [1,5,2,6,3,7,4,8], \"Wrong\"\nassert     interleave_lists([1,2,3],[5,6,7,8],['a','b','c','d']) == [1,5,2,6,3,7,8,4], \"Wrong\"\nassert     interleave_lists([1,2],[3,4,5,6,7,8],['a','b','c','d']) == [1,3,2,5,4,6,7,8,], \"Wrong\"\nassert     interleave_lists([],[],[]) == [], \"Wrong\"\nassert     interleave_lists([1,2,3],[],[]) == [1,2,3,], \"Wrong\"\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert \nassert \n\n\ndef flatten(list):\n    '''\n    Write a function that takes a list of lists and flattens it.\n    '''\n    pass\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_dissimilar((\"a\", 1), (\"b\", 2)) ==     [\"a\"]\nassert     find_dissimilar((\"a\", \"b\"), (\"c\", \"d\")) ==     [\"c\", \"d\"]\nassert     find_dissimilar((\"a\", \"b\", \"c\"), (\"d\", \"e\", \"f\")) ==     [\"c\", \"d\", \"e\", \"f\"]\nassert     find_dissimilar((\"a\", \"b\", \"c\"), (\"d\", \"e\", \"f\", \"g\")) ==     [\"c\", \"d\", \"e\", \"f\", \"g\"]\nassert     find_dissimilar((\"a\", \"b\", \"c\", \"d\"), (\"e\", \"f\", \"g\", \"h\")) ==     [\"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_dissimilar(('a', 'b', 'c'), ('a', 'b', 'd')) == None, 'find_dissimilar method returned None'\nassert     find_dissimilar(('a', 'b', 'c'), ('a', 'b', 'c')) == ('c',), 'find_dissimilar method returned wrong tuple'\nassert     find_dissimilar(('a', 'b', 'c'), ('a', 'd', 'c')) == ('b',), 'find_dissimilar method returned wrong tuple'\nassert     find_dissimilar(('a', 'b', 'c'), ('a', 'b', 'd', 'e')) == ('d',), 'find_dissimilar method returned wrong tuple'\nassert     find_dissimilar(('a', 'b', 'c'), ('a', 'b', 'd', 'e', 'f', 'g')) == ('e', 'f',), 'find_dissimilar method returned wrong tuple'\nprint('All tests for find_dissimilar passed')\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_dissimilar((2, 4, 1), (3, 4, 5)) ==     [1]\nassert     find_dissimilar((2, 4, 1), (2, 4, 5)) ==     [1]\nassert     find_dissimilar((1, 2, 3), (2, 4, 5)) ==     [1, 3]\nassert     find_dissimilar((1, 1, 1), (1, 1, 1)) ==     [1]\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_dissimilar((0,2,1), (3,2,0)) == (0,3)\nassert     find_dissimilar((1,3,2), (2,2,3)) == (1,2)\n\n\ndef find_duplicates(test_tup1, test_tup2):\n    '''\n    Write a function to find the duplicates elements in the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_dissimilar(\n                (1, 2, 3, 4),\n                (1, 2, 3, 5)\n            ) == (2, 3)\n\nassert     find_dissimilar(\n                (1, 2, 3, 4),\n                (1, 2, 3)\n            ) == (2, 3, 4)\n\nassert     find_dissimilar(\n                (1, 2, 3, 4),\n                (1, 2, 3, 4, 5)\n            ) == ()\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_dissimilar((1,2,3,4), (1,2,3,6)) == (2,4)\nassert     find_dissimilar((1,2,3,4,5,6), (1,2,3,6)) == (3,5)\nassert     find_dissimilar((1,2,3,4,5,6), (7,8,9,10)) == ()\n\n\ndef find_similar(test_tup1, test_tup2):\n    '''\n    Write a function to find the similar elements in the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_dissimilar((-9, -10), (1, 1)) == set(), \"Wrong output\"\nassert     find_dissimilar((-9, -10), (1, -1)) == set(), \"Wrong output\"\nassert     find_dissimilar((-10, -9), (1, 1)) == set(), \"Wrong output\"\nassert     find_dissimilar((-10, -9), (1, -1)) == {1, -9}, \"Wrong output\"\nassert     find_dissimilar((-1, -2), (-1, -1)) == {-2, -1, -1, -1}, \"Wrong output\"\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_dissimilar((\"cat\", \"bat\", \"rat\", \"elephant\"), (\"mouse\", \"pig\", \"elephant\")) == ('bat', 'rat')\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_dissimilar((0,1),(1,2)) == (0,), \"Wrong output\"\nassert     find_dissimilar((1,1),(1,1)) == (), \"Empty tuple\"\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    even_ele([(1,2),(2,'string'),(True,'bool'),(1.5,2),(2,3)], even_fnc) == \n    [(1,2),(2,'string'),(True,'bool'),(1.5,2)]\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     even_ele(((2,4),(6,8),(1,3)), lambda x: x % 2 == 0 ) == ((2,4),(6,8))\nassert     even_ele(((2,4),(6,8),(1,3)), lambda x: x % 2 == 1 ) == ((1,3),(2,4),(6,8))\nassert     even_ele(((2,4),(6,8),(1,3)), lambda x: x > 2 ) == ((2,4),(6,8))\nassert     even_ele(((2,4),(6,8),(1,3)), lambda x: x < 2 ) == ((1,3),(2,4),(6,8))\nassert     even_ele(((2,4),(6,8),(1,3)), lambda x: x <= 2 ) == ((1,3),(2,4),(6,8))\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ntest_tuple = (1,2,3,4,5,6,7,8,9,10)\ntest_tuple_even_func = \neven_ele(test_tuple, even_fnc)\n\nassert (test_tuple_even_func) == (1,2,3,4,5,6,7,8,9,10)"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     even_ele((5, (4, (2, 2), 5), 6), even_fnc) == (5, (4, (2, 2), 5))\nassert     even_ele((3, 4, (5, 6, 7)), even_fnc) == (3, 4, (5, 6, 7))\nassert     even_ele((5, (4, (2, 2), 5), 6), even_fnc) == (5, (4, (2, 2), 5))\nassert     even_ele((2, 2, 5), even_fnc) == (2, 2, 5)\n\ndef odd_ele(test_tuple, odd_fnc):\n    '''\n    Write a function to remove even elements in the nested mixed tuple.\n    '''\n    pass\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \neven_ele((1, 2, 3, 4, 5, 6, 7), even_element) == (2, 4, 6, 8)\nassert even_ele((1, 2, 3, 4, 5, 6, 7, 8), even_element) == (2, 4, 6, 8)\nassert even_ele((1, 2, 3, 4, 5, 6, 7), odd_element) == (1, 3, 5, 7)\nassert even_ele((1, 2, 3, 4, 5, 6, 7, 8), odd_element) == (1, 3, 5, 7, 8)\nassert even_ele((1, 2, 3, 4, 5, 6, 7, 8, 9), even_element) == (2, 4, 6, 8, 10)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     even_ele(('1',(2,3,'4'),(5,'6',True)), lambda t: t[1] ) == '2,3,4,5,6,True', 'wrong output'\nassert even_ele(('1',(2,3,'4'),(5,'6',True)), lambda t: t[0]) == '1,2,3,4,5,6', 'wrong output'\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     even_ele(    ((4, 1, 2, 3), (5, 6, 7, 8), (9, 10, 11, 12)),\n                            even_check) == ((4, 5, 6, 7), (8, 9, 10, 11), (12,))\n\nassert     even_ele(    ((4, 1, 2, 3), (5, 6, 7, 8), (9, 10, 11, 12)),\n                        even_check) == ((4, 5, 6, 7), (8, 9, 10, 11), (12,))\n\nassert     even_ele(    ((4, 1, 2, 3), (5, 6, 7, 8), (9, 10, 11, 12)),\n                        even_check) == ((4, 5, 6, 7), (8, 9, 10, 11), (12,))\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     surface_Area(3,1) == 16\nassert     surface_Area(4,3) == 20\nassert     surface_Area(10,1) == 100\n\ndef subtract(a,b):\n    '''\n    Write a python function to subtract two numbers.\n    '''\n    pass\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     surface_Area(1,1) == 2\nassert surface_Area(5,4) == 22\nassert surface_Area(3,2) == 9\nassert surface_Area(1.5,2) == 3.5\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ndef is_palindrome(s): \n    '''\n    Write a python function to check whether the given string is a palindrome or not. \n    '''\n    pass\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nsurface_Area(2,3) == 10\nassert \nsurface_Area(4,2) == 6\nassert \nsurface_Area(4,3) == 14\nassert \nsurface_Area(0,1) == 0\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     surface_Area(1, 1) == 2, \"1*1\"\nassert     surface_Area(4, 2) == 6, \"4*2\"\nassert     surface_Area(8, 3) == 36, \"8*3\"\nassert     surface_Area(16, 4) == 64, \"16*4\"\nassert     surface_Area(32, 5) == 128, \"32*5\"\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     surface_Area(2,3) == 4, \"Testcase 1 failed.\"\nassert     surface_Area(4,3) == 12, \"Testcase 1 failed.\"\n\ndef surface_Area(h,b): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given height and base edge.\n    '''\n    pass\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     surface_Area(10,5) == 50.0\nassert surface_Area(0,5) == 0.0\nassert surface_Area(7,6) == 112.0\nassert surface_Area(15,6) == 350.0\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     surface_Area(1,2) == 5, \"surface_Area(1,2)!= 5\"\nassert     surface_Area(2,3) == 9, \"surface_Area(2,3)!= 9\"\nassert     surface_Area(5,4) == 20, \"surface_Area(5,4)!= 20\"\nassert     surface_Area(4,4) == 16, \"surface_Area(4,4)!= 16\"\nassert     surface_Area(8,6) == 56, \"surface_Area(8,6)!= 56\"\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     my_dict({\"hi\":\"hi\", \"bye\":\"bye\"}) == False, \"There is no empty dictionary\"\nassert my_dict({\"hello\":\"hello\", \"bye\":\"bye\"}) == True, \"There is empty dictionary\"\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     my_dict(dict(a=1,b=2,c=3))\nassert not my_dict({})\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     my_dict({}) == True, 'Error. Should be True.'\nassert     my_dict({1:1, 2:2}) == False, 'Error. Should be False.'\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     my_dict({})\n\nassert     my_dict({\"a\": 1, \"b\": 2})\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef my_dict2(dict1):\n    '''\n    Write a function to get the number of keys in a dictionary\n    '''\n    pass\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     my_dict(dict1 = {}) \nassert     my_dict(dict1 = {\"key\":1}) \nassert     my_dict(dict1 = {1:\"one\", 2:\"two\"}) \nassert     my_dict(dict1 = {\"key\":1, \"key2\":\"two\"}) \nassert not my_dict(dict1 = None) \n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     my_dict(dict(a=1,b=2)) == False, \\\n    \"Wrong answer. Please check your code\"\nassert     my_dict(dict()) == True, \\\n    \"Wrong answer. Please check your code\"\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     my_dict({}) == True\nassert my_dict({\"a\":1,\"b\":2,\"c\":3}) == True\nassert my_dict({\"a\":1,\"b\":2,\"c\":3,\"d\":4}) == False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     my_dict({1:2}) == True, \"first\"\nassert     my_dict({1:2,3:4}) == True, \"second\"\nassert     my_dict({}) == True, \"third\"\nassert     my_dict({'a':1}) == False, \"fourth\"\nassert     my_dict({'a':1,2:3}) == False, \"fifth\"\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    catalan_number(1) == 1\n    catalan_number(2) == 1\n    catalan_number(3) == 2\n    catalan_number(4) == 3\n    catalan_number(5) == 6\n    catalan_number(6) == 6\n    catalan_number(7) == 14\n    catalan_number(8) == 28\n    catalan_number(9) == 72\n    catalan_number(10) == 210\n    catalan_number(11) == 1536\n    catalan_number(12) == 30240\n    catalan_number(13) == 52280\n    catalan_number(14) == 144592\n    catalan_number(15) == 288768\n    catalan_number(16) == 71456\n    catalan_number(17) == 120144\n    catalan_number(18) == 376912\n    catalan_number(19) == 787848\n    catalan_number(20) == 19683200\n    catalan_number(21) == 47925360\n    catalan_number(22) == 1023361728\n    catalan_number(23) == 3777254736\n    catalan_number(24) == 79218269888\n    catalan_number(25) == 167961147008\n    catalan_number(26) == 53581706656\n    catalan_number(27) == 1036518371264\n    catalan_number(28) == 3456820791840\n    catalan_number(29) == 8801336158400\n    catalan_number(30) == 2654714149536\n    catalan_number(31) == 74465314406880\n    catalan_number(32) == 1857823083640\n    catalan_number(33) == 491914054476800\n    catalan_number(34) == 11351934110928000\n    catalan_number(35) == 3973598289472\n    catalan_number(36) == 86472518812800\n    catalan_number(37) == 2331730962400\n    catalan_number(38) == 5967651539808\n    catalan_number(39) == 132893475342400\n    catalan_number(40) == 48880375166400\n    catalan_number(41) == 10669853503936\n    catalan_number(42) == 369255339840\n    catalan_number(43) == 8400732588896\n    catalan_number(44) == 264952099248\n    catalan_number(45) == 74701630505600\n    catalan_number(46) == 233616384560\n    catalan_number(47) == 6286798603680\n    catalan_number(48) == 11985655694400\n    catalan_number(49) == 387501571552000\n    catalan_number(50) == 8917587616800\n    catalan_number(51) == 27785629216000\n    catalan_number(52) == 7102233798400\n    catalan_number(53) == 18768734000\n    catalan_number(54) == 5151319800\n    catalan_number(55) == 10451333600\n    catalan_number(56) == 35852433600\n    catalan_number(57) == 82546151200\n    catalan_number(58) == 267070016000\n    catalan_number(59) == 71527232000\n    catalan_number(60) == 196831120000\n    catalan_number(61) == 57985222400\n    catalan_number(62) == 134099110400\n    catalan_number(63) == 449483020000\n    catalan_number(64) == 966602429600\n    catalan_number(65) == 312058088000\n    catalan_number(66) == 855838843200\n    catalan_number(67) == 280353760000\n    catalan_number(68) == 7339410393600\n    catalan_number(69) == 20176467972800\n    catalan_number(70) == 5092947300000\n    catalan_number(71) == 11985655694400\n    catalan_number(72) == 37555555555600\n    catalan_number(73) == 88888888888900\n    catalan_number(74) == 267070016000\n    catalan_number(75) == 71527232000\n    catalan_number(76) == 18768734000\n    catalan_number(77) == 5151319800\n    catalan_number(78) == 10451333600\n    catalan_number(79) == 35852433600\n    catalan_number(80) == 82546151200\n    catalan_number(81) == 267070016000\n    catalan_number(82) == 7102233798400\n    catalan_number(83) == 18768734000\n    catalan_number(84) == 5151319800\n    catalan_number(85) == 10451333600\n    catalan_number(86) == 35852433600\n    catalan_number(87) == 82546151200\n    catalan_number(88) == 2754509200\n    catalan_number(89) == 71527232000\n    catalan_number(90) == 20166048000\n    catalan_number(91) == 57985222400\n    catalan_number(92) == 134099110400\n    catalan_number(93) == 449483020000\n    catalan_number(94) == 966602429600\n    catalan_number(95) == 312058088000\n    catalan_number(96) == 855838843200\n    catalan_number(97) == 280353760000\n    catalan_number(98) == 7339410393600\n    catalan_number(99) == 20176467972800\n    catalan_number(100) == 5092947300000\n    catalan_number(101) == 11985655694400\n    catalan_number(102) == 37555555555600\n    catalan_number(103) == 88888888888900\n    catalan_number(104) == 267070016000\n    catalan_number(105) == 7102233798400\n    catalan_number(106) == 18768734000\n    catalan_number(107) == 5151319800\n    catalan_number(108) == 10451333600\n    catalan_number(109) == 35852433600\n    catalan_number(110) == 82546151200\n    catalan_number(111) == 2754509200\n    catalan_number(112) == 71527232000\n    catalan_number(113) == 20166048000\n    catalan_number(114) == 57985222400\n    catalan_number(115) == 134099110400\n    catalan_number(116) == 449483020000\n    catalan_number(117) == 966602429600\n    catalan_number(118) == 312058088000\n    catalan_number(119) == 855838843200\n    catalan_number(120) == 280353760000\n    catalan_number(121) == 7339410393600\n    catalan_number(122) == 20176467972800\n    catalan_number(123) == 5092947300000\n    catalan_number(124) == 11985655694400\n    catalan_number(125) == 37555555555600\n    catalan_number(126) == 88888888888900\n    catalan_number(127) == 267070016000\n    catalan_number(128) == 7102233798400\n    catalan_number(129) == 18768734000\n    catalan_number(130) == 5151319800\n    catalan_number(131) == 10451333600\n    catalan_number(132) == 35852433600\n    catalan_number(133) == 82546151200\n    catalan"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     catalan_number(1) == 1\nassert     catalan_number(2) == 2\nassert     catalan_number(3) == 5\nassert     catalan_number(5) == 15\nassert     catalan_number(8) == 40320\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     catalan_number(1) == 1, f\"{catalan_number(1)}!= 1\"\nassert     catalan_number(2) == 2, f\"{catalan_number(2)}!= 2\"\nassert     catalan_number(3) == 3, f\"{catalan_number(3)}!= 3\"\nassert     catalan_number(4) == 4, f\"{catalan_number(4)}!= 4\"\nassert     catalan_number(5) == 5, f\"{catalan_number(5)}!= 5\"\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     catalan_number(4) == 5\nassert     catalan_number(8) == 15\nassert     catalan_number(1000) == 33835040\nassert     catalan_number(2000) == 121337512000\nassert     catalan_number(0) == 1\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     catalan_number(0) == 1, 'incorrect number'\nassert     catalan_number(1) == 2, 'incorrect number'\nassert     catalan_number(2) == 5, 'incorrect number'\nassert     catalan_number(3) == 14, 'incorrect number'\nassert     catalan_number(4) == 42, 'incorrect number'\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n'''\nA recursion is a way to solve problems like 1-2-3-4-5-....\nRecursion is an algorithmic design pattern that consists of the use of the call stack to solve a problem.\n\n1. The recursion is called upon to solve a problem.\n2. The algorithm is called recursively on a problem to solve the next problem.\n3. Recursion is the base case of a recursive function.\n4. Recursion is the general case of a recursive function.\n5. Recursion is a way to solve a problem.\n'''\n\n'''\n1. In the end of recursion we return to a call stack.\n2. The call stack is a way to make a recursive function call.\n3. In Python, the call stack is implemented with a frame.\n4. We can also call the function by directly using a function call, such as func(args).\n5. The call stack can be implemented with a function call.\n'''\n\n'''\nThe recursive pattern is used to solve some problems efficiently.\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert catalan_number(0) == 1\nassert catalan_number(1) == 1\nassert catalan_number(2) == 2\nassert catalan_number(3) == 4\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     catalan_number(1) == 1\nassert     catalan_number(2) == 2\nassert     catalan_number(3) == 4\nassert     catalan_number(4) == 8\nassert     catalan_number(5) == 8\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef find_adjectives(text):\n    '''\n    Write a function to find the first adjective ending with in and its positions in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_adverbs(\"This is a test sentence. \"\n\"Today is a nice day. This is a bit cold.\") ==     [0, 6]\n\nassert     find_adverbs(\"This is a test sentence. \"\n\"Today is a nice day. This is a bit cold.\") ==     []\n\nassert     find_adverbs(\"This is a test sentence. \"\n\"Today is a nice day. This is a bit cold.\") ==     []\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_adverbs('')==None\nassert     find_adverbs('I want to take my bike to the lake on the morning.')==None\nassert     find_adverbs('My sister is waiting for me at the bus stop.')==None\nassert     find_adverbs('I think I am getting myself into trouble.')==None\nassert     find_adverbs('I am going to take my bike to the lake on the afternoon.')==None\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_adverbs('') ==    [], \"Empty string\"\nassert     find_adverbs('After all, a close-up of the basics, lets go into the magics of the Python language') ==    [(0, 3), (9, 11), (18, 22), (24, 25), (30, 32), (34, 35), (38, 39), (40, 41), (42, 43), (44, 45), (47, 48), (49, 50), (50, 51), (51, 52)], \"This is what I found\"\nassert     find_adverbs('let\u2019s play some games, kids!') ==    [], \"No adverb\"\nassert     find_adverbs('the only thing in the life of the turtle is how it wants to spend the rest of its time') ==    [(0, 2), (11, 14), (16, 17), (18, 19), (20, 21), (23, 24), (25, 26), (27, 29), (30, 31), (32, 33), (34, 35), (36, 37), (38, 39), (40, 41), (42, 43), (45, 46), (47, 48), (49, 50), (51, 52), (55, 56), (57, 58), (59, 60), (61, 62), (63, 64), (65, 66), (67, 68), (69, 70), (71, 72), (73, 74), (75, 76), (77, 78), (79, 80), (81, 82), (83, 84), (85, 86), (87, 88), (89, 90), (91, 92), (93, 94), (95, 96), (97, 98), (99, 100), (101, 102), (103, 104), (105, 106), (107, 108), (109, 110), (111, 112), (113, 114), (115, 116), (117, 118), (119, 120), (121, 122), (123, 124), (125, 126), (127, 128)], \"This is what I found\"\nassert     find_adverbs('when is the time to get a new job?') ==    [(0, 3)], \"This is what I found\"\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == '__main__':\n    text = \"\"\"\n    The rain in Spain stays mainly in the plain.\n    It\u2019s hard to see the sunset.\n    Sunset tomorrow, the cloud will be sunny.\n    The sky is clear and the sun is shining.\n    This morning the sun is shining.\n    The sun is shining.\n    Sunshine will be shining tomorrow.\n    The sky is shining.\n    The sky is bright, the sun is shining, and the sky is so bright.\n    The sun is shining, the sky is bright, the sun is shining, and the sky is so bright.\n    The sun is shining.\n    \"\"\"\n    print(f\"Number of times: {find_adverbs(text)}\")"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_adverbs(\"Whose skills grow stronger the more they learn.\") == [\"how\", \"why\"]\nassert     find_adverbs(\"That piece of meat is never cooked better than that piece of meat.\") == [\"it\"]\nassert     find_adverbs(\"Wherever you go, there you stay, wherever you go, you stay there.\") == [\"where\", \"go\"]\nassert     find_adverbs(\"Those who stay on a planet are those who explore.\") == [\"stay\", \"explore\"]\nassert     find_adverbs(\"Those who are standing on the sky are those who take off and are hovering\") == [\"fly\", \"take off\", \"hover\"]\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef find_noun(text):\n    '''\n    Write a function to find the first noun ending with ly and its positions in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_adverbs('This is the first sentence.') == [1, 2, 3, 4]\nassert     find_adverbs('This is the first sentence. I am the second one.') == [2, 3, 4]\nassert     find_adverbs('This is the first sentence. This is the second one.') == [1, 4]\nassert     find_adverbs('This is the first sentence. This is the second one. And the third one.') == [1, 2, 3]\nassert     find_adverbs('This is the first sentence. This is the second one. And the third one. And the fourth one.') == [1, 2, 3, 4]\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_adverbs('') == None, 'find_adverbs: Empty input'\nassert     find_adverbs('It was a fine day') == None, 'find_adverbs: One argument'\nassert     find_adverbs('It was a fine day and the sky was blue') == None, 'find_adverbs: Two arguments'\nassert     find_adverbs('It was a fine day and the sky was blue and I liked it') == None, 'find_adverbs: Three arguments'\nassert     find_adverbs('It was a fine day and the sky was blue and I liked it and it was a good day') == (12, 14), 'find_adverbs: Good luck!'\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     expensive_items([{\"name\":\"A\", \"price\":1}, {\"name\":\"B\", \"price\":3}, {\"name\":\"C\", \"price\":2}], 2) == [\"B\",\"C\"]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     expensive_items([(1,2), (1,4), (2,3)], 2) == [(1,4),(2,3)]\nassert     expensive_items([(10,2), (5,3), (4,3)], 2) == [(10,2),(4,3)]\nassert     expensive_items([(1,5), (3,2), (4,7), (2,3)], 2) == [(1,5),(4,7),(2,3)]\nassert     expensive_items([(1,5), (3,2), (4,7), (2,3)], 1) == [(1,5),(3,2),(2,3)]\nassert     expensive_items([(1,5), (3,2), (4,7), (2,3)], 3) == [(1,5),(2,3),(4,7)]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     expensive_items([('item_1',2),('item_2',1),('item_3',2),('item_4',5),('item_5',4)],4)==['item_2', 'item_3', 'item_5', 'item_4']\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     expensive_items([{'id': 1, 'cost': 1},\n                          {'id': 2, 'cost': 1},\n                          {'id': 3, 'cost': 2}], 1) ==     [{'id': 2, 'cost': 1},\n                            {'id': 3, 'cost': 2}]\nassert expensive_items([{'id': 1, 'cost': 1},\n                          {'id': 2, 'cost': 1},\n                          {'id': 3, 'cost': 2}], 2) ==     [{'id': 1, 'cost': 1},\n                            {'id': 2, 'cost': 1}]\nassert expensive_items([{'id': 1, 'cost': 1},\n                          {'id': 2, 'cost': 1},\n                          {'id': 3, 'cost': 2}], 3) ==     [{'id': 1, 'cost': 1},\n                            {'id': 2, 'cost': 1},\n                            {'id': 3, 'cost': 2}]\nassert expensive_items([{'id': 1, 'cost': 1},\n                          {'id': 2, 'cost': 1},\n                          {'id': 3, 'cost': 2}], 5) ==     [{'id': 1, 'cost': 1},\n                            {'id': 2, 'cost': 1},\n                            {'id': 3, 'cost': 2}]\nassert expensive_items([{'id': 1, 'cost': 1},\n                          {'id': 2, 'cost': 1},\n                          {'id': 3, 'cost': 2}], 6) ==     [{'id': 1, 'cost': 1},\n                            {'id': 2, 'cost': 1},\n                            {'id': 3, 'cost': 2}]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     expensive_items([('Keyboard',1000000),('Monitor', 2000000), ('Couch', 5000000),('Mouse', 1000000), ('Keyboard',200000)], 3) == ['Couch', 'Mouse', 'Keyboard'], 'incorrect'\nassert     expensive_items([('Keyboard',1000000),('Monitor', 2000000), ('Couch', 5000000),('Mouse', 1000000), ('Keyboard',200000)], 4) == ['Keyboard', 'Mouse', 'Couch', 'Monitor'], 'incorrect'\nassert     expensive_items([('Keyboard',1000000),('Monitor', 2000000), ('Couch', 5000000),('Mouse', 1000000), ('Keyboard',200000)], 2) == ['Keyboard', 'Monitor'], 'incorrect'\nassert     expensive_items([('Keyboard',1000000),('Monitor', 2000000), ('Couch', 5000000),('Mouse', 1000000), ('Keyboard',200000)], 1) == ['Keyboard'], 'incorrect'\nassert     expensive_items([('Keyboard',1000000),('Monitor', 2000000), ('Couch', 5000000),('Mouse', 1000000), ('Keyboard',200000)], 0) == [], 'incorrect'\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     expensive_items([('item_name','item_price'),('item_name2','item_price2'),('item_name3','item_price3')], 1) == ['item_name2']\nassert     expensive_items([('item_name','item_price'),('item_name2','item_price2'),('item_name3','item_price3')], 3) == ['item_name','item_name3','item_name2']\nassert     expensive_items([('item_name','item_price'),('item_name2','item_price2'),('item_name3','item_price3')], 5) == ['item_name','item_name3','item_name2','item_name']\nassert     expensive_items([('item_name','item_price'),('item_name2','item_price2'),('item_name3','item_price3')], 2) == []\nassert     expensive_items([('item_name','item_price'),('item_name2','item_price2'),('item_name3','item_price3')], 7) == ['item_name']\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nexpensive_items([(1, 'item1'),(2, 'item2'),(4, 'item3'),(5, 'item4')],3) == [(5, 'item4'), (4, 'item3'), (2, 'item2')]\nexpensive_items([(5, 'item5'),(1, 'item1'),(2, 'item2'),(4, 'item3'),(5, 'item4')],3) == [(5, 'item5'), (4, 'item3'), (2, 'item2')]\nexpensive_items([(10, 'item1'),(2, 'item2'),(4, 'item3'),(5, 'item4')],3) == [(10, 'item1'), (4, 'item3'), (5, 'item4')]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nexpensive_items([('A',250),('B',120),('C',350),('D',100)],2) == ['C', 'D']\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     expensive_items([(2, 1), (3, 2), (1, 3), (2, 3), (1, 2)], 2) == [(3, 2), (2, 3)]\nassert expensive_items([(2, 1), (3, 2), (1, 3), (2, 3), (1, 2)], 3) == [(3, 2), (2, 3), (1, 3)]\nassert expensive_items([(2, 1), (3, 2), (1, 3), (2, 3), (1, 2)], 4) == [(3, 2), (2, 3), (1, 3)]\nassert expensive_items([(2, 1), (3, 2), (1, 3), (2, 3), (1, 2)], 5) == [(3, 2), (2, 3), (1, 3)]\nassert expensive_items([(2, 1), (3, 2), (1, 3), (2, 3), (1, 2)], 6) == [(3, 2), (2, 3), (1, 3)]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     expensive_items([0,1,2,3,4],3) == [3,4,0]\nassert expensive_items([2,3,5,7,8],3) == [5,7,8]\n\ndef check_priority(items,n):\n    '''\n    Write a function to find the n items of the dataset with the highest priority.\n    Items with the same priority should be ordered by their original order.\n    '''\n    pass\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     split_Arr([1, 2, 3, 4, 5, 6], 3) == [[1, 2, 3], 4, 5, 6]\nassert     split_Arr([1, 2, 3, 4, 5, 6], 6) == [[1, 2, 3], 4, 5]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef sum_even_arr(l):\n    '''\n    Write a python function to sum the even elements from a list.\n    '''\n    pass\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     split_Arr([1,2,3,4,5,6], 3) == [[1,2,3],[4,5,6]]\nassert     split_Arr([1,2,3,4,5,6,7,8,9], 5) == [[1,2,3,4,5],[6,7,8,9]]\nassert     split_Arr([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100], 100) == [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15],[16,17,18,19,20],[21,22,23,24,25],[26,27,28,29,30],[31,32,33,34,35],[36,37,38,39,40],[41,42,43,44,45],[46,47,48,49,50],[51,52,53,54,55],[56,57,58,59,60],[61,62,63,64,65],[66,67,68,69,70],[71,72,73,74,75],[76,77,78,79,80],[81,82,83,84,85],[86,87,88,89,90],[91,92,93,94,95],[96,97,98,99,100]]"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef check_Prime(n):\n    '''\n    Write a python function that return True if the input number is prime or not.\n    '''\n    pass\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     split_Arr([1,2,3,4,5,6,7,8,9],3) == [[1,2,3],4,5,6,7,8,9]\nassert     split_Arr([1,2,3,4,5,6,7,8,9,10],2) == [[1,2,3,4,5,6,7,8,9,10]]\nassert     split_Arr([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100],6) == [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\nassert     split_Arr([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100],6) == [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\nassert     split_Arr([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100],6) == [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,2"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef check_even(l):\n    '''\n    Write a python function to check if the all the elements of the list are even or not.\n    '''\n    pass\n\nassert \n\ndef check_odd(l):\n    '''\n    Write a python function to check if the all the elements of the list are odd or not.\n    '''\n    pass\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     list_tuple([]) == ()\nassert     list_tuple([1]) == (1,)\nassert     list_tuple([1,2]) == (1,2)\nassert     list_tuple([1,2,3]) == (1,2,3)\nassert     list_tuple([1,2,'a','b']) == (1,2,'a','b')\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     list_tuple([1,2,3]) == (1,2,3), \"Wrong value of list\"\nassert     list_tuple(['a','b','c']) == ('a','b','c'), \"Wrong value of list\"\nassert     list_tuple([1,2,3,'a']) == (1,2,3,'a'), \"Wrong value of list\"\nassert     list_tuple([1,2,'a',3,'b']) == (1,2,'a',3,'b'), \"Wrong value of list\"\n\ndef swap_element(listx):\n    '''\n    Write a function to swap the first two elements of a list.\n    '''\n    pass\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     list_tuple([1,2,3]) == (1,2,3)\nassert     list_tuple([1,2,'three']) == (1,2,'three')\nassert     list_tuple([1,2,3,'four', 'five','six']) == (1,2,3,'four','five','six')\n\ndef list_string(listx):\n    '''\n    Write a function to convert a list to a string.\n    '''\n    pass\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     list_tuple([[1,2,3,4], ['a','b','c'], ['d','e','f']]) == (1,2,3,4, 'a', 'b', 'c', 'd', 'e', 'f')\nassert list_tuple([1,2,3]) == 1,2,3\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     list_tuple([]) == (), \"Empty list\"\nassert     list_tuple([1, 2, 3]) == (), \"Wrong data type\"\nassert     list_tuple([1, 2, 3, 4]) == (), \"Wrong data type\"\nassert     list_tuple([1, 2, 3, 4, 5]) == (1, 2, 3, 4, 5), \"Wrong data type\"\nassert     list_tuple([1, 2, 3, 4, 5, 6]) == (1, 2, 3, 4, 5, 6), \"Wrong data type\"\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     list_tuple([1,2,3]) == (1,2,3) \nassert     list_tuple((1,2,3)) == (1,2,3) \nassert     list_tuple({\"a\":1,\"b\":2,\"c\":3}) == (1,2,3) \nassert     list_tuple([]) == ()\nassert     list_tuple(()) == ()\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     list_tuple([1,2,3]) == (1,2,3), \"Wrong!\"\nassert     list_tuple([]) == (), \"Wrong!\"\nassert     list_tuple([1,2,'3']) == (1,2,3), \"Wrong!\""
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     list_tuple([]) == ()\nassert     list_tuple([1,2,3]) == (1,2,3)\nassert     list_tuple([1,2,3,\"f\"]) == (1,2,3,\"f\")\nassert     list_tuple([1,2,3,[\"f\",\"g\",\"h\"]]) == (1,2,3,[\"f\",\"g\",\"h\"])\nassert     list_tuple([]) == ()\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     big_diff([-3, 5, 10, 20]) == 3\nassert     big_diff([-10, 3, -1, -100]) == -4\nassert     big_diff([10, 10, 10, 10, 10]) == 0\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     big_diff([]) == 0\nassert     big_diff([10,2,4]) == 8\nassert     big_diff([10,2,4,1]) == 7\nassert     big_diff([1,2,4,10]) == 3\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     big_diff([5, 2, 4, 6, 5]) == 6, \"Should return 5\"\nassert     big_diff([4, 5, 6, 7, 9, 12]) == 5, \"Should return 5\"\nassert     big_diff([4, 6, 2, 1, 3, 5]) == 9, \"Should return 7\"\nassert     big_diff([6, 5, 3, 4, 2, 1]) == 5, \"Should return 4\"\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     big_diff([1,2,5,6,10]) == 0\nassert     big_diff([1,2,5,6,10,10]) == 5\nassert     big_diff([100,10,10]) == 90\nassert     big_diff([10]) == 10\nassert     big_diff([-100,-10]) == 110\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     big_diff([-5,-4,-3,-2,-1,0]) == 1, 'Not the correct result'\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    big_diff([-1, 3, 5, -3, 3]) == 4, 'Should return 4'\n    big_diff([1, -3, 3, -3, -1, 3]) == 4\n    big_diff([-3, 2, 0, 3, -5]) == -3\n    big_diff([-1, -3, 0, -3, 1]) == 4\n    big_diff([0, -1, -3, -5]) == -3\n    big_diff([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0\n\n\n'''\nCode challenges\n'''\n\n'''\n2. Write a python function to get the maximum length of a list.\n'''\ndef max_len(lst):\n    '''\n    Write a python function to get the maximum length of a list.\n    '''\n    pass\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     big_diff([-3, -11, -9, -13, -3, -5, -6, -4, -2, -8, -6, -3, -9, -1, -7, -9, -8, -9, -3, -7, -8, -5, -4, -5, -4, -6, -1, -4, -5, -7, -7, -2, -5, -4, -9, -7, -9, -6, -3, -4, -8, -6, -3, -2, -7, -3, -8, -5, -5, -4, -5, -7, -5, -5, -9, -2, -7, -8, -7, -9, -6, -8, -6, -3, -8, -5, -3, -2, -7, -2, -4, -7, -4, -9, -5, -7, -6, -6, -4, -8, -2, -5, -4, -2, -3, -7, -4, -4, -6, -3, -9, -6, -9, -7, -6, -4, -9, -7, -5, -8, -6, -2, -9, -5, -4, -9, -7, -5, -3, -6, -3, -5, -8, -3, -9, -8, -7, -5, -4, -5, -7, -4, -8, -8, -9, -4, -9, -5, -5, -6, -9, -8, -7, -3, -8, -7, -7, -4, -9, -3, -6, -2, -9, -5, -8, -6, -7, -2, -4, -2, -3, -6, -4, -9, -7, -2, -2, -5, -4, -2, -5, -3, -3, -4, -5, -7, -8, -5, -9, -4, -5, -7, -5, -6, -8, -9, -5, -7, -8, -6, -2, -9, -4, -5, -5, -6, -3, -8, -3, -4, -3, -8, -7, -3, -7, -2, -3, -6, -8, -6, -4, -2, -3, -3, -3, -1, -7, -3, -7, -3, -4, -8, -9, -4, -9, -3, -4, -7, -7, -6, -4, -3, -2, -2, -9, -6, -3, -7, -1, -4, -2, -2, -7, -8, -5, -5, -5, -7, -9, -5, -2, -8, -3, -9, -7, -6, -4, -7, -9, -3, -5, -3, -2, -3, -5, -3, -6, -4, -6, -2, -1, -2, -3, -5, -4, -7, -9, -4, -2, -8, -9, -3, -8, -6, -7, -7, -5, -5, -6, -3, -7, -5, -4, -3, -7, -5, -2, -8, -7, -5, -9, -6, -4, -8, -4, -9, -6, -4, -6, -8, -2, -5, -4, -3, -3, -5, -7, -5, -2, -4, -6, -4, -9, -2, -6, -2, -4, -3, -8, -3, -9, -4, -6, -7, -3, -5, -6, -5, -6, -8, -5, -5, -6, -3, -3, -7, -4, -7, -8, -7, -3, -6, -6, -6, -4, -4, -9, -8, -5, -9, -6, -6, -4, -7, -3, -2, -7, -2, -2, -5, -8, -5, -9, -6, -6, -2, -3, -2, -3, -3, -7, -2, -6, -3, -3, -4, -5, -2, -7, -8, -5, -8, -7, -5, -3, -7, -3, -4, -2, -3, -9, -5, -5, -5, -3, -7, -2, -2, -6, -5, -6, -6, -2, -4, -2, -4, -6, -4, -9, -5, -2, -2, -4, -5, -5, -2, -7, -4, -5, -9, -5, -8, -4, -5, -8, -2, -4, -7, -6, -6, -7, -3, -3, -8, -7, -6, -3, -5, -3, -7, -3, -2, -8, -5, -3, -5, -6, -9, -3, -7, -4, -3, -2, -6, -5, -2, -2, -4, -2, -3, -3, -7, -2, -7, -5, -9, -5, -7, -3, -3, -8, -3, -5, -5, -5, -3, -2, -4, -5, -5, -3, -5, -9, -2, -5, -2, -7, -9, -2, -6, -8, -5, -7, -5, -7, -7, -5, -3, -2, -7, -3, -2, -3, -2, -6, -4, -4, -5, -7, -6, -5, -8, -6, -6, -7, -4, -4, -3, -8, -8, -8, -4, -7, -2, -4, -2, -5, -7, -4, -9, -6, -5, -5, -3, -4, -2, -5, -4, -6, -4, -3, -9, -4, -5, -6, -5, -4, -7, -6, -6, -8, -7, -5, -7, -9, -6, -6, -4, -3, -2, -4, -4, -2, -4, -7, -3, -3, -8, -3, -6, -2, -4, -4, -5, -3, -9, -8, -2, -9, -6, -3, -3, -7, -6, -2, -2, -3, -6, -5, -6, -3, -4, -4, -3, -7, -8, -6, -4, -5, -6, -5, -6, -6, -3, -8, -7, -6, -5, -9, -6, -7, -6, -7, -7, -3, -8, -5, -4, -3, -8, -4, -2, -6, -3, -5, -9, -4, -8, -4, -2, -2, -5, -3, -5, -5, -3, -4, -7, -5, -2, -4, -9, -4, -2, -6, -5, -5, -4, -5, -5, -7, -4, -4, -8, -5, -2, -3, -5, -2, -3, -4, -3, -6, -"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     big_diff([5, 3, 1, 4, 5]) == 6\nassert     big_diff([5, 5, 7, 7]) == 0\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nbig_diff([10, 3, 5, 6]) == 3, \"Wrong answer\"\nassert big_diff([7, 2, 10, 9]) == 3, \"Wrong answer\"\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     big_diff([10,3,5,6]) == 3\nassert     big_diff([-10,-3,-5,-6]) == 9\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     perfect_squares(1, -1) == \"Please input perfect squares!\"\nassert     perfect_squares(1, 0) == \"Please input perfect squares!\"\nassert     perfect_squares(1, 1) == 1\nassert     perfect_squares(2, 2) == \"Please input perfect squares!\"\nassert     perfect_squares(2, 3) == \"Please input perfect squares!\"\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     perfect_squares(4, 9) == [4, 9]\nassert perfect_squares(0, 9) == [0, 1, 4, 9]\nassert perfect_squares(0, 1) == []\nassert perfect_squares(3, 4) == []\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     perfect_squares(2,3) == 4\nassert     perfect_squares(2,4) == 5\nassert     perfect_squares(3,4) == 4\nassert     perfect_squares(4,4) == 4\nassert     perfect_squares(4,5) == 5\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef even_fibonacci(n):\n    '''\n    Find the nth even Fibonacci number.\n    '''\n    if n < 0:\n        raise ValueError('n should be positive')\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return even_fibonacci(n-2) + even_fibonacci(n-1)\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     perfect_squares(5, 16) == perfect_squares(16, 5) == 4\nassert     perfect_squares(1, 4) == perfect_squares(4, 1) == 1\nassert     perfect_squares(0, 1) == perfect_squares(1, 0) == 1\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(perfect_squares(3,5))\nprint(perfect_squares(1,2))\nprint(perfect_squares(0,1))\nprint(perfect_squares(4,4))\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     perfect_squares(0, 0) == [], 'input a and b in the form of integers'\nassert perfect_squares(1, 1) == [1],'return a perfect square between 2 integers'\nassert perfect_squares(4, 7) == [4, 5], 'input a and b in the form of integers'\n\n'''\nA perfect square is an integer that is the square of a positive integer, i.e., \nits square root is the integer itself. Given an integer n, print all perfect squares\n(in ascending order) between 0 and n.\nInput: 6\nOutput: 1 4 9 16 25 36\n'''\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef odd_numbers(num):\n    '''\n    Write a function which takes an integer and returns True if the number\n    is odd, otherwise False.\n    '''\n    pass\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ndef rect_polar(r,theta):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    pass\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\npolar_rect(1,1) == (1,1)\npolar_rect(5,5) == (1,1)\npolar_rect(5,-5) == (1,1)\npolar_rect(5,-5,5) == (1,1)\npolar_rect(5,-5,5,5) == (1,1)\npolar_rect(5,-5,5,5,5) == (1,1)\n\npolar_rect(10,10) == (10,10)\npolar_rect(5,5,5,5) == (5,5)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     polar_rect(1,1) == ((1,1), 0)\nassert     polar_rect(1,1.5) == ((1,1.5), 0)\nassert     polar_rect(1.5,1) == ((1.5,1), 0)\nassert     polar_rect(1.5,1.5) == ((1.5,1.5), 0)\nassert     polar_rect(1.5,1.5) == ((1.5,1.5), 0)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     polar_rect(0,1) == (0,1)\nassert     polar_rect(1,0) == (1,0)\nassert     polar_rect(0,-1) == (-1,0)\nassert     polar_rect(1,0.5) == (1,1)\nassert     polar_rect(1,-0.5) == (1,-1)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \npolar_rect(1,0) == (0,1)\npolar_rect(0,1) == (1,0)\npolar_rect(2,1) == (2,1)\npolar_rect(0.5,0.5) == (0.5,0.5)\npolar_rect(1,1) == (1,1)\npolar_rect(0,0) == (0,0)\npolar_rect(0,-1) == (0,-1)\npolar_rect(-1,0) == (-1,0)\npolar_rect(1,-1) == (1,-1)\npolar_rect(-1,-1) == (-1,-1)\npolar_rect(3,4) == (-3,4)\npolar_rect(-1,-3) == (-1,-3)\npolar_rect(3,-1) == (3,-1)\npolar_rect(-1,-3) == (-1,-3)\npolar_rect(0.5,2) == (0.5,2)\npolar_rect(0,-1) == (0,-1)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef is_rect_polar(x, y, r):\n    '''\n    Write a function to check if a point is in polar coordinates.\n    '''\n    pass\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef polar_rect(r,theta):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    pass\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     polar_rect(0.2,0.3)==(0.3,0.2), \"function polar_rect returns incorrect value for (0.2,0.3): {}\".format(polar_rect(0.2,0.3))\nassert     polar_rect(0.4,0.3)==(0.2,0.3), \"function polar_rect returns incorrect value for (0.4,0.3): {}\".format(polar_rect(0.4,0.3))\nassert     polar_rect(0.2,0.9)==(0.3,0.1), \"function polar_rect returns incorrect value for (0.2,0.9): {}\".format(polar_rect(0.2,0.9))\nassert     polar_rect(0.4,0.9)==(0.1,0.3), \"function polar_rect returns incorrect value for (0.4,0.9): {}\".format(polar_rect(0.4,0.9))\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     polar_rect(2,5) == (0,5)\nassert     polar_rect(2,5.5) == (0,6.5)\nassert     polar_rect(2,0.1) == (0,1.9)\nassert     polar_rect(2,0.1) == (0,2.9)\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     swap_List([1,2,3,4,5,6]) == [4,5,6,1,2,3], \"swap_List([1,2,3,4,5,6]) should return [4,5,6,1,2,3]\"\nassert     swap_List([1,2,3,4,5,6]) == [3,4,5,6,1,2], \"swap_List([1,2,3,4,5,6]) should return [3,4,5,6,1,2]\"\nassert     swap_List([1,2,3,4,5,6]) == [1,2,3,4,5,6], \"swap_List([1,2,3,4,5,6]) should return [1,2,3,4,5,6]\"\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nswap_List([1,2,3,4,5]) == [5,1,2,3,4], \"Wrong Answer\"\nprint (\"Test 1 Passed\")\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nswap_List([]) == []\nassert swap_List([1]) == [1]\nassert swap_List([1,2]) == [2,1]\nassert swap_List([1,2,3,4]) == [4,3,2,1]\nassert swap_List([1,2,3,4,5]) == [5,4,3,2,1]\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     swap_List([1,2,3]) == [3,1,2]\nassert     swap_List([1,2,3,4]) == [3,4,1,2]\nassert     swap_List([1,2,3,4,5]) == [3,4,5,1,2]\nassert     swap_List([1,2,3,4,5,6]) == [3,4,5,6,1,2]\nassert     swap_List([1,2,3,4,5,6,7]) == [3,4,5,6,7,1,2]\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     swap_List([1, 2, 3]) == [3, 2, 1], \"Error\"\nassert     swap_List([1, 2, 3, 4]) == [1, 4, 3, 2], \"Error\"\n\ndef swap_List_recursion(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    pass\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     swap_List([1, 2, 3]) == [3, 2, 1]\nassert     swap_List([1, 2, 3, 4, 5]) == [4, 5, 1, 2, 3]"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     swap_List(['a','b','c','d']) == ['d','c','b','a']\nassert     swap_List(['x','y','z']) == ['z','y','x']\nassert     swap_List([]) == []\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     swap_List([1, 2, 3, 4, 5, 6, 7, 8]) == [7, 1, 8, 2, 3, 4, 6, 5]\nprint(\"check the correctness of swap_List\")\nassert swap_List([0, 1, 2, 3, 4, 5, 6, 7]) == [7, 0, 1, 2, 3, 4, 5, 6]\nprint(\"check the correctness of swap_List\")\n\n\n\ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    pass\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert swap_List([1,2,3,4,5]) == [5,1,2,3,4] \nassert swap_List([]) == []\nassert swap_List([4,1,2,3]) == [3,4,1,2]\nassert swap_List([4,1,2,3,5]) == [5,4,1,2,3]\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     swap_List([1,2,3,4]) == [2,3,4,1], \"Incorrect\"\nassert     swap_List([0,1,2,3]) == [3,2,1,0], \"Incorrect\"\nassert     swap_List([0,1,2,3,4]) == [2,3,4,1,0], \"Incorrect\"\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     binomial_Coeff(3,2) == 2+3+3, 'function not implemented'\nassert     binomial_Coeff(3,5) == 5, 'function not implemented'\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     binomial_Coeff(20, 5) == 2540\nassert     binomial_Coeff(1, 1) == 1\nassert     binomial_Coeff(2, 2) == 2\nassert     binomial_Coeff(6, 4) == 8\nassert     binomial_Coeff(100, 10) == 5984\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    binomial_Coeff(3,2) == 6\n    binomial_Coeff(5,2) == 28\n    binomial_Coeff(5,3) == 420\nassert binomial_Coeff(5,1) == 1\n\ndef binomial_coeff(m,n): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    pass\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     binomial_Coeff(4,2) == 24\nassert binomial_Coeff(4,3) == 120\nassert binomial_Coeff(5,3) == 120\nassert binomial_Coeff(6,3) == 252\nassert binomial_Coeff(7,3) == 720\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     binomial_Coeff(1,1) == 1\nassert     binomial_Coeff(2,1) == 1\nassert     binomial_Coeff(3,2) == 3\nassert     binomial_Coeff(3,3) == 6\nassert     binomial_Coeff(4,4) == 24\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     binomial_Coeff(3,2) == 1\nassert     binomial_Coeff(9,2) == 10\nassert     binomial_Coeff(4,3) == 15\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     binomial_Coeff(2,4) == 6\nassert     binomial_Coeff(3,4) == 8\nassert     binomial_Coeff(4,4) == 10\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(binomial_Coeff(5,1))\nassert \nprint(binomial_Coeff(6,1))\nassert \nprint(binomial_Coeff(3,2))\nassert \nprint(binomial_Coeff(8,3))\nassert \nprint(binomial_Coeff(4,4))\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     binomial_Coeff(0,0) == 1\nassert     binomial_Coeff(0,1) == 1\nassert     binomial_Coeff(1,1) == 1\nassert     binomial_Coeff(1,2) == 1\nassert     binomial_Coeff(2,2) == 1\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     binomial_Coeff(5,4) == 24\nassert     binomial_Coeff(7,4) == 168\nassert     binomial_Coeff(7,5) == 5040\nassert     binomial_Coeff(8,4) == 68128\nassert     binomial_Coeff(8,5) == 241920\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     removezero_ip('0.1.2.3') == '1.2.3','should return 1.2.3'\nassert     removezero_ip('1.2.3') == '1.2.3','should return 1.2.3'\nassert     removezero_ip('0.1.2.3.4') == '1.2.3.4','should return 1.2.3.4'\nassert     removezero_ip('0.0.0.0') == '0.0.0.0','should return 0.0.0.0'\nassert     removezero_ip('1.0.0.0') == '1.0.0.0','should return 1.0.0.0'\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     removezero_ip('123.45.67.89') == '123.45.67.89', 'Failed'\nassert     removezero_ip('0.123.45.67.89') == '0.123.45.67.89', 'Failed'\nassert     removezero_ip('123.45.67.89.1') == '123.45.67.89.1', 'Failed'\nassert     removezero_ip('123.45.67.89.0') == '123.45.67.89.0', 'Failed'\nassert     removezero_ip('0.123.45.67.89.1') == '0.123.45.67.89.1', 'Failed'\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     removezero_ip(\"000.00.00.00\") == \"00.00.00.00\"\nassert     removezero_ip(\"0.00.00.00\") == \"00.00.00.00\"\nassert     removezero_ip(\"00.00.00.00\") == \"00.00.00.00\"\nassert     removezero_ip(\"0000.0000.0000.0000\") == \"0000.0000.0000.0000\"\n\ndef get_neighbor_ip(ip):\n    '''\n    Write a function to return the IP addresses of the neighboring routers\n    '''\n    pass\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef removezero_url(url):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    pass\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     removezero_ip('10.0.0.0') == '10.0.0.0'\nassert     removezero_ip('192.168.0.0') == '192.168.0.0'\nassert     removezero_ip('192.168.2.0') == '192.168.2.0'\nassert     removezero_ip('192.168.2.0') == '192.168.2.0'\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     removezero_ip(\"10.1.1\") == \"10.1.1\"\nassert removezero_ip(\"101.10.1\") == \"101.10.1\"\nassert removezero_ip(\"101.10.1.0\") == \"101.10.1\"\nassert removezero_ip(\"101.1.0.1\") == \"101.1.0.1\"\nassert removezero_ip(\"0.1.1.1\") == \"0.1.1.1\"\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nremovezero_ip('') == ''\nassert removezero_ip('0.0.0.0') == '0.0.0.0'\nassert removezero_ip('0.0.0.0.0.0.0.0') == '0.0.0.0.0.0.0.0.0.0.0'\nassert removezero_ip('0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0') == '0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0."
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     removezero_ip(\"11.11.11.11\") == \"11.11.11.11\"\nassert removezero_ip(\"11.11.11.11.1\") == \"11.11.11.11\"\nassert removezero_ip(\"11.11.11.11.11\") == \"11.11.11.11\"\nassert removezero_ip(\"11.11.11.11.11.12\") == \"11.11.11.11.12\"\nassert removezero_ip(\"00.00.00.00\") == \"00.00.00.00\"\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\nassert     removezero_ip(\"1.1.1.1\") == \"1.1.1.1\"\nassert     removezero_ip(\"2001:0db8:85a3:0000:0000:8a2e:0370:7334\") == \"2001:db8:85a3::8a2e:370:7334\"\nassert     removezero_ip(\"2001:0db8:85a3::8a2e:370:7334\") == \"2001:db8:85a3::8a2e:370:7334\"\nassert     removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     removezero_ip(\"1.1.1.1\") == \"1.1.1.1\"\nassert     removezero_ip(\"1.1.1.000\") == \"1.1.1.1\"\nassert     removezero_ip(\"0000.0000.0000\") == \"0.0.0.0\"\nassert     removezero_ip(\"1.1.1.1.1\") == \"1.1.1.1\"\nassert     removezero_ip(\"1.1.1.1.1.1\") == \"1.1.1.1.1\"\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ndiff_even_odd([1,2,3,4,5]) == 0, \"odd-even diff\"\nassert \ndiff_even_odd([1,3,5,7,9]) == 3, \"odd-even diff\"\nassert \ndiff_even_odd([1,2,3,4,5,6]) == -3, \"odd-even diff\"\n\ndef diff_odd_even(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     diff_even_odd([2, 4, 6, 8, 10, 12]) ==     2\nassert     diff_even_odd([5, 3, 7]) ==     3\nassert     diff_even_odd([10, 20, 30]) ==     0\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ndiff_even_odd([1,2,3,4,5]) == 1\nassert\ndiff_even_odd([1,2,3,4,5,6,7,8,9]) == 0"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     diff_even_odd([])    ==     0,     'diff_even_odd([]) incorrect'\nassert     diff_even_odd([2])    ==     2,    'diff_even_odd([2]) incorrect'\nassert     diff_even_odd([2, 3]) ==     2,    'diff_even_odd([2, 3]) incorrect'\nassert     diff_even_odd([3, 2, 1]) ==     3,    'diff_even_odd([3, 2, 1]) incorrect'\nassert     diff_even_odd([3, 2, 1, 4]) ==     5,    'diff_even_odd([3, 2, 1, 4]) incorrect'\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint(\"passed\")\nprint()\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     diff_even_odd([5, 6, 7, 8, 1, 3, 5, 4, 4]) == 4, 'Check first even first odd number'\nassert     diff_even_odd([7, 8, 1, 2, 5, 4, 4, 6]) == 6, 'Check second even second odd number'\nprint('Check first even first odd number passed')\nprint('Check second even second odd number passed')\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     diff_even_odd([2, 4, 6, 8, 10, 12]) == 2, \"Should be 2\"\nassert     diff_even_odd([2, 4, 6, 8, 10, 13]) == 4, \"Should be 4\"\nassert     diff_even_odd([2, 4, 6, 8, 10, 14]) == 6, \"Should be 6\"\nassert     diff_even_odd([2, 4, 6, 8, 10, 15]) == 2, \"Should be 2\"\nassert     diff_even_odd([2, 4, 6, 8, 10, 13]) == 2, \"Should be 2\"\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     diff_even_odd([1, 2, 3, 4, 5, 6]) == 3\nassert     diff_even_odd([2, 4, 6, 8, 10, 12, 14]) == 6\nassert     diff_even_odd([2, 4, 6, 8, 10, 12, 14, 16, 18]) == 8\n\ndef replace_to_none(list1):\n    '''\n    Write a function to replace the value of zero (0) in the given list to None.\n    '''\n    pass\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ndiff_even_odd([10, 11, 12, 13, 14]) == 2\nassert \ndiff_even_odd([4, 5, 6, 7]) == -2\nassert \ndiff_even_odd([5]) == 2"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n'''\n3. Write a python function that takes as input a string and return true if the given string is a palindrome else return false.\nNote: A palindrome is a string that is the same forwards and backwards.\nExample: The string \"A man, a plan, a canal: Panama\" is a palindrome.\n'''\n\ndef palindrome(str1):\n    '''\n    Write a python function to check if a given string is a palindrome or not.\n    A palindrome is a word, phrase, or sequence that reads the same forward as it does backwards, e.g., madam or nurses run.\n    '''\n    pass\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     min_Swaps(\"01010\",\"10111\") == 4\nassert     min_Swaps(\"01010\",\"00101\") == 3\nassert     min_Swaps(\"01010\",\"10100\") == 3\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    min_Swaps(\"1101111\",\"1101101\") == 2 \n    min_Swaps(\"01111101\",\"1100101\") == 1\n    min_Swaps(\"11111111\",\"11111011\") == 11\n    min_Swaps(\"01\",\"001\") == 3\n    min_Swaps(\"1\",\"0\") == 1\n    min_Swaps(\"1101111\",\"1101101\") == 2 \n    min_Swaps(\"01111101\",\"1100101\") == 1\n    min_Swaps(\"11111111\",\"11111011\") == 11\n    min_Swaps(\"01\",\"001\") == 3\n    min_Swaps(\"1\",\"0\") == 1\n    min_Swaps(\"1101111\",\"1101101\") == 2 \n    min_Swaps(\"01111101\",\"1100101\") == 1\n    min_Swaps(\"11111111\",\"11111011\") == 11\n    min_Swaps(\"01\",\"001\") == 3\n    min_Swaps(\"1\",\"0\") == 1\n    min_Swaps(\"1101111\",\"1101101\") == 2 \n    min_Swaps(\"01111101\",\"1100101\") == 1\n    min_Swaps(\"11111111\",\"11111011\") == 11\n    min_Swaps(\"01\",\"001\") == 3\n    min_Swaps(\"1\",\"0\") == 1\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     min_Swaps(\"0000011\",\"0001111\") == 4\nassert     min_Swaps(\"0000011\",\"1111111\") == 7\nassert     min_Swaps(\"0000111\",\"0001111\") == 1\nassert     min_Swaps(\"0000111\",\"1111111\") == 3\nassert     min_Swaps(\"1100101\",\"1100101\") == 0\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     min_Swaps(\"101010\",\"111010\") == 1, \"Case 1\"\nassert     min_Swaps(\"100110\",\"011010\") == 3, \"Case 2\"\nassert     min_Swaps(\"111010\",\"011010\") == 0, \"Case 3\"\nassert     min_Swaps(\"101010\",\"100110\") == 1, \"Case 4\"\nassert     min_Swaps(\"011010\",\"001011\") == 2, \"Case 5\"\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tuple_size((1,2,3)) == 3, \"tuple_size: incorrect size\"\nassert tuple_size((1,2,3,4)) == 4, \"tuple_size: incorrect size\"\nassert tuple_size((1,2,3,4,5,6)) == 6, \"tuple_size: incorrect size\"\nassert tuple_size((\"a\",1,\"b\",2,\"c\",3)) == 6, \"tuple_size: incorrect size\"\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_size(('Hello', 'World')) == 2 + 5\nassert     tuple_size(()) == 0\nassert     tuple_size((1,2,3,4,5,6)) == 15\nassert     tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)) == 27\nassert     tuple_size(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z')) == 47\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_size([]) == 0\nassert     tuple_size((1,2,3,4,5,6)) == 20\nassert     tuple_size((1,2,3,4,5,6,7,8,9)) == 24\nassert     tuple_size((1,2,3,4,5,6,7,8,9,10)) == 28\nassert     tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)) == 32\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tuple_size((1,2,3,4,5,6)) == 10\nassert    tuple_size((1,2,3,4,5,6,7,8)) == 16\nassert    tuple_size((1,2,3,4,5,6,7,8,9,10)) == 24\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tuple_size((1,2,3)) == 3\nassert     tuple_size((1,2)) == 2\nassert     tuple_size((1,2,3,4)) == 4\nassert     tuple_size((1,2,3,4,5)) == 5\nassert     tuple_size((1,2,3,4,5,6)) == 6\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef get_tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    \ndef tuple_size2(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    pass\n\n\ndef tuple_size3(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    pass\n\n\n\ndef tuple_count(tuple_list):\n    '''\n    Write a function to count the elements in the given tuple.\n    '''\n    pass\n\n\ndef tuple_count2(tuple_list):\n    '''\n    Write a function to count the elements in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef _make_tuple_printable(tup):\n    '''\n    Write a function to make the given tuple printable.\n    '''\n    pass\n\nassert _make_tuple_printable(('a', 'b', 'c')) == 'a\\tb\\tc'\n\ndef _get_el(tup, i):\n    '''\n    Write a function to get the i-th element of a given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nclass Solution:\n    def find_kth(arr1, arr2, k):\n        '''\n        Write a function to find kth element from the given two sorted arrays.\n        '''\n        i = 0\n        j = 0\n        while i < len(arr1) and j < len(arr2):\n            if arr1[i] < arr2[j]:\n                i += 1\n            elif arr1[i] > arr2[j]:\n                j += 1\n            else:\n                i += 1\n                j += 1\n\n        if j == len(arr2):\n            return arr1[i-k]\n        elif i == len(arr1):\n            return arr2[j-k]\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_kth([1, 2, 3], [3, 4, 5], 1) == 2\nassert     find_kth([1, 2, 3], [3, 4, 5], 2) == 3\nassert     find_kth([1, 2, 3], [3, 4, 5], 3) == 3\nassert     find_kth([1, 2, 3], [3, 4, 5], 4) == 4\nassert     find_kth([1, 2, 3], [3, 4, 5], 5) == 5\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_kth([1,2,3,4,5], [2,3,4,5], 4) == 3, \"Wrong output\"\nassert     find_kth([1,3,5,7], [2,4,6,8], 5) == 4, \"Wrong output\"\n\ndef find_duplicates(arr1, arr2):\n    '''\n    Write a function that takes 2 sorted arrays and return a sorted array that\n    contains the duplicate values.\n    '''\n    pass\n\n\nassert find_duplicates([1,3,5,4,6], [4,4,4,3,3,3,3,4,5,6]) == [3,4,4], \"Wrong output\"\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_kth([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7], 3) == 4, 'Should find 4'\nassert     find_kth([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7], 0) == 1, 'Should find 1'\nassert     find_kth([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7], -1) == 0, 'Should find 0'\nassert     find_kth([1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7], 20) == -1, 'Should return -1'\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(find_kth([1, 4, 5], [2, 3, 6], 3))\nprint(find_kth([], [2, 3, 6], 3))\nprint(find_kth([1, 4, 5], [2, 3, 6], 0))\nprint(find_kth([1, 4, 5], [2, 3, 6], 5))"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_kth([1,2,3,4,5], [2,4,6,8,10], 3) == 4\nassert     find_kth([1,2,3,4,5], [2,4,6,8,10], 4) == 6\n\n\ndef find_k_numbers(arr, k):\n    '''\n    Write a function to find kth element from the given array.\n    '''\n    pass\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     armstrong_number(16) == True, \\\n        \"The number 16 is not armstrong.\"\nassert armstrong_number(155) == False, \\\n        \"The number 155 is armstrong.\"\nassert armstrong_number(750) == False, \\\n        \"The number 750 is not armstrong.\"\nassert armstrong_number(100) == True, \\\n        \"The number 100 is armstrong.\"\nassert armstrong_number(0) == False, \\\n        \"The number 0 is not armstrong.\"\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(\"Pass\" if armstrong_number(153) == True else \"Fail\")\nprint(\"Pass\" if armstrong_number(371) == True else \"Fail\")\nprint(\"Pass\" if armstrong_number(371) == False else \"Fail\")\nprint(\"Pass\" if armstrong_number(2) == False else \"Fail\")\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     armstrong_number(153) == True, 'Not Armstrong number'\nassert     armstrong_number(101) == False, 'Not Armstrong number'\nassert     armstrong_number(0) == False, 'Not Armstrong number'\nassert     armstrong_number(5) == False, 'Not Armstrong number'\nassert     armstrong_number(51) == True, 'Not Armstrong number'\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \narmstrong_number(153) == True, \"153 is an Armstrong number\"\nassert \narmstrong_number(100) == False, \"100 is an Armstrong number\"\nassert \narmstrong_number(7) == False, \"7 is not an Armstrong number\"\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     armstrong_number(153) == True, 'It should return True'\nassert     armstrong_number(14) == False, 'It should return False'\nassert     armstrong_number(1) == False, 'It should return False'\nassert     armstrong_number(1532423) == True, 'It should return True'\n\ndef fizzbuzz(n):\n    '''\n    Write a program to generate FizzBuzz list of size n and print the list.\n    '''\n    pass\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     armstrong_number(153) == True\nassert     armstrong_number(371) == True\nassert     armstrong_number(371) == False\nassert     armstrong_number(1534) == False\nassert     armstrong_number(0) == False\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    armstrong_number(153) == True, \"153 is armstrong\"\nassert \n    armstrong_number(102) == False, \"102 is not armstrong\"\nassert \n    armstrong_number(0) == False, \"0 is not armstrong\"\nassert \n    armstrong_number(13) == False, \"13 is not armstrong\"\nassert \n    armstrong_number(12345) == True, \"12345 is armstrong\"\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     armstrong_number(153) == True, \"153 is not armstrong number\"\nassert     armstrong_number(153) == True, \"153 is not armstrong number\"\nassert     armstrong_number(827) == True, \"827 is not armstrong number\"\nassert     armstrong_number(0) == False, \"0 is not armstrong number\"\nassert     armstrong_number(153) == True, \"153 is not armstrong number\"\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_average(1) == 0, \"The sum of 1 natural numbers should be 0.\"\nassert     sum_average(2) == 1.5, \"The sum of 2 natural numbers should be 1.5.\"\nassert     sum_average(3) == 2, \"The sum of 3 natural numbers should be 2.\"\n\ndef average_v1(number):\n    '''\n    Write a function to find average of first n natural numbers.\n    '''\n    n = number\n    sum = 0\n    while n > 0:\n        sum += n\n        n -= 1\n    return sum / n\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_average(1) == 1\nassert     sum_average(2) == 1.5\nassert     sum_average(3) == 2.0\nassert     sum_average(5) == 2.833333333333333\nassert     sum_average(10) == 4.0\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    sum_average(5) == 10\n    sum_average(10) == 30\n    sum_average(20) == 60\n    sum_average(100) == 240\n    sum_average(101) == 301\n    sum_average(0) == 0\n\nprint(\"You've successfully passed this assertion!\")"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert sum_average(10) == 30, f\"Expected: 30, got: {sum_average(10)}\"\nassert \nassert sum_average(1) == 0, f\"Expected: 0, got: {sum_average(1)}\"\nassert \n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_average(100) == (100, 100.0), \"sum_average is incorrect\"\nassert     sum_average(50) == (50, 50.0), \"sum_average is incorrect\"\nassert     sum_average(0) == (0, 0.0), \"sum_average is incorrect\"\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    sum_average(0) == 0\n    sum_average(1) == 1\n    sum_average(2) == 1.5\n    sum_average(4) == 5\n    sum_average(100) == 100\n    sum_average(100.5) == 100.5\n    sum_average(1000000) == 1000000\n    sum_average(1000000.5) == 1000000.5\n    sum_average(100000000) == 100000000.5\n    sum_average(100000000.5) == 100000000.5\n    sum_average(1000000000) == 100000000000\n    sum_average(1000000000.5) == 100000000000.5\n    sum_average(10000000000) == 1000000000000\n    sum_average(10000000000.5) == 1000000000000.5\n    sum_average(100000000000) == 10000000000000\n    sum_average(100000000000.5) == 10000000000000.5\n    sum_average(1000000000000) == 100000000000000\n    sum_average(1000000000000.5) == 100000000000000.5\n    sum_average(10000000000000) == 1000000000000000\n    sum_average(10000000000000.5) == 1000000000000000.5\n    sum_average(100000000000000) == 10000000000000000\n    sum_average(100000000000000.5) == 10000000000000000.5\n    sum_average(1000000000000000) == 100000000000000000\n    sum_average(1000000000000000.5) == 100000000000000000.5\n    sum_average(100000000000000000) == 10000000000000000000\n    sum_average(100000000000000000.5) == 10000000000000000000.5\n    sum_average(10000000000000000000) == 1000000000000000000000\n    sum_average(10000000000000000000.5) == 1000000000000000000000.5\n    sum_average(10000000000000008000) == 1000000000000000008000\n    sum_average(10000000000000008000.5) == 1000000000000000008000.5\n    sum_average(100000000000000080000) == 10000000000000000080000\n    sum_average(100000000000000080000.5) == 10000000000000000080000.5\n    sum_average(10000000000000008000000) == 1000000000000000008000000\n    sum_average(10000000000000008000000.5) == 1000000000000000008000000.5\n    sum_average(100000000000000080000000) == 10000000000000000080000000\n    sum_average(100000000000000080000000.5) == 10000000000000000080000000.5\n    sum_average(10000000000000008000000080) == 1000000000000000008000000080\n    sum_average(10000000000000008000000080.5) == 1000000000000000008000000080.5\n    sum_average(1000000000000000800000008000) == 100000000000000000800000008000\n    sum_average(1000000000000000800000008000.5) == 100000000000000000800000008000.5\n    sum_average(10000000000000008000000080000) == 1000000000000000008000000080000\n    sum_average(10000000000000008000000080000.5) == 1000000000000000008000000080000.5\n    sum_average(1000000000000000800000008000000) == 100000000000000000800000008000000\n    sum_average(1000000000000000800000008000000.5) == 100000000000000000800000008000000.5\n    sum_average(100000000000000080000000800000008080) == 100000000000000000800000008080\n    sum_average(100000000000000080000000800000008080.5) == 100000000000000000800000008080.5\n    sum_average(100000000000000080000000800000008000080) == 100000000000000000800000008000080\n    sum_average(100000000000000080000000800000008000080.5) == 100000000000000000800000008000080.5\n    sum_average(1000000000000000800000008000000080000000) == 10000000000000000080000000\n    sum_average(1000000000000000800000008000000080000000.5) == 10000000000000000080000000\n    sum_average(1000000000000000800000008000000080000000808080) == 10000000000000000080000000808080\n    sum_average(1000000000000000800000008000000080000000808080.5) == 10000000000000000080000000808080.5\n    sum_average(10000000000000008000000080000000800000008000000080808080) == 100000000000000000800000008000000080808080\n    sum_average(10000000000000008000000080000000800000008000000080000000800008080) == 100000000000000000800000008000000080000000800008080\n    sum_average(1000000000000000800000008000000080000000800000008000000080000000800008080.5) == 100000000000000000800000008000000080000000800008080.5\n    sum_average(10000000000000008000000080000000800000008000000080000000800000008000000080000808080.5) == 10000000000000000080000000800000008000000080000808080.5\n    sum_average(1000000000000000800000008000000080000000800000008000000080000000800000008000000080000808080.5) == 10000000000000000080000000800000008000000080000808080.5\n    sum_average(100000000000000080000000800000008000000080000000800000008000000080000000800000008000080808080.5) == 10000000000000000080000000800000008000000080000808080.5\n    sum_average(10000000000000008000000080000000800000008000000080000000800000008000000080000000800008080808080.5) == 1000000000000000008000000080000000800000008000080808080.5\n    sum_average(1000000000000000800000008000000080000000800000008000000080000000800000008000000080000808080808080.5) == 1000000000000000008000000080000000800000008000080808080.5\n    sum_average(100000000000000080000000800000008000000080000000800000008000000080000000800000008000080808080808080.5) == 1000000000000000008000000080000000800000008000080808080.5\n    sum_average(100000000000000080000000800000008000000080000000800000008000000080000000800000008000080808080808080.5) == 1000000000000000008000000080000000800000008000080808080.5\n    sum_average(100000000000000080000000800000008000000080000000800000008000000080000000800000008000080808080808080.5) == 1000000000000000008000000080000000800000008000080808080.5\n    sum_average(100000000000000080000000800000008000000080000000800000008000000080000000800000008000080808080808080.5) == 1000000000000000008000000080000000800000008000080808080.5\n    sum_average(100000000000000080000000800000008000000080000000800000008000000080000000800000008000080808080808080.5) == 1000000000000000008000000080000000800000008000080808080.5\n    sum_average(100000000000000080000000800000008000000080000000800000008000000080000000800000008000080808080808080.5) == 1000000000000000008000000080000000800000008000080808080.5\n    sum_average(100000000000000080000000800000008000000080000000800000008000000080000000800000008000080808080808080.5) == 1000000000000000008000000080000000800000008000080808080.5\n    sum_average(100000000000000080000000800000008000000080000000800000008000000080000000800000008000080808080808080.5) == 1000000000000000008000000080000000800000008000080808080.5\n    sum_average(100000000000000080000000800000008000000080000000800000008000000080000000800000008000080808080808080.5) == 1000000000000000008000000080000000800000008000080808080.5\n    sum_average(100000000000000080000000800000008000000080000000800000008000000080000000800000008000080808080808080.5) == 1000000000000000008000000080000000800000008000080808080.5\n    sum_average(100000000000000080000000800000008000000080000000800000008000000080000000800000008000080808080808080.5) == 1000000000000000008000000080000000800000008000080808080.5\n    sum_average(100000000000000080000000800000008000000080000000800000008000000080000000800000008000080808080808080.5) == 100000000000000000800000008000000080000000800008"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_average(4) == 5, 'failed'\nassert     sum_average(3) == 4, 'failed'\nassert     sum_average(1) == 1, 'failed'\nassert     sum_average(0) == 0, 'failed'\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_average(2) == 1\nassert     sum_average(5) == 4\nassert     sum_average(10) == 15\n\ndef sum_average_non_recursion(n):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    \n    Do not use any loop\n    '''\n    pass\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_average(1) == 1 \nassert     sum_average(5) == 9\nassert     sum_average(10) == 45\nassert     sum_average(50) == 247\nassert     sum_average(100) == 987\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(\"TESTCASE #1: PASS\")\nassert is_Even(1) == True\nprint(\"TESTCASE #2: PASS\")\nassert is_Even(2) == False\nprint(\"TESTCASE #3: PASS\")\nassert is_Even(3) == True\nprint(\"TESTCASE #4: PASS\")\nassert is_Even(4) == False\nprint(\"TESTCASE #5: PASS\")\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_Even(8)==True,    \"check\"\nassert is_Even(9)==False,    \"check\"\n\ndef is_Even(n): \n    '''\n    Your Task:\n    You have to write the code to check whether the given number is even or not.\n    '''\n    # Code here\n    return True if n % 2 == 0 else False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_Even(2) == True, 'failing as 2 is even'\nassert     is_Even(3) == False, 'failing as 3 is odd'\nassert     is_Even(100) == True, 'failing as 100 is even'\nassert     is_Even(101) == False, 'failing as 101 is odd'\nassert     is_Even(0) == False, 'failing as 0 is odd'\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_Even(6) == True, \"is_Even() return wrong result\"\nassert     is_Even(2) == True, \"is_Even() return wrong result\"\nassert     is_Even(12) == False, \"is_Even() return wrong result\"\nassert     is_Even(0) == True, \"is_Even() return wrong result\"\nassert     is_Even(1) == True, \"is_Even() return wrong result\"\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_Even(2) == True, \"check the correctness of is_Even\"\nassert     is_Even(3) == False, \"check the correctness of is_Even\"\nassert     is_Even(-1) == False, \"check the correctness of is_Even\"\nassert     is_Even(-8) == False, \"check the correctness of is_Even\"\nassert     is_Even(\"\") == False, \"check the correctness of is_Even\"\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_Even(2) == False, \"2 is not even\"\nassert     is_Even(3) == True, \"3 is even\"\nassert     is_Even(1) == False, \"1 is not even\"\n\ndef factorial(n):\n    '''\n    Write a python function to compute the factorial of the given number.\n    '''\n    pass\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_Even(2)     == False\nassert     is_Even(3)     == True\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_Even(2) == True, \"2 is Even\"\nassert     is_Even(12) == True, \"12 is Even\"\nassert     is_Even(10) == False, \"10 is not Even\"\nassert     is_Even(11) == False, \"11 is not Even\"\nassert     is_Even(13) == False, \"13 is not Even\"\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     first_repeated_char('madam') == 'a', 'Should be \"a\" for \"madam\"'\nassert     first_repeated_char('geeksforgeeks') == 'e', 'Should be \"e\" for \"geeksforgeeks\"'\nassert     first_repeated_char('geeksogeeks') == 'e', 'Should be \"e\" for \"geeksogeeks\"'\nassert     first_repeated_char('geeksgeeks') == 'e', 'Should be \"e\" for \"geeksgeeks\"'\nassert     first_repeated_char('geeksforgeeks') == 'e', 'Should be \"e\" for \"geeksforgeeks\"'\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     first_repeated_char(\"abc\") == None, 'Expected None'\nassert     first_repeated_char(\"banana\") == None, 'Expected None'\nassert     first_repeated_char(\"banana\") == \"b\", 'Expected b'\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert first_repeated_char(\"abcdabcdabcd\") == \"b\"\nassert first_repeated_char(\"abcde\") == \"c\"\nassert first_repeated_char(\"abcabc\") == \"a\"\nassert first_repeated_char(\"abcabcabc\") == \"b\"\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     first_repeated_char('abccc') == 'b'\nassert     first_repeated_char('abcaa') == 'a'\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     first_repeated_char(\"cab\") == \"a\"\nassert     first_repeated_char(\"cba\") == \"a\"\nassert     first_repeated_char(\"cab\") == \"a\"\nassert     first_repeated_char(\"\") == \"None\"\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     first_repeated_char('q') == 'q'\nassert     first_repeated_char('abcdef') == 'a'\nassert     first_repeated_char('qwertyuiop') == 'q'\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     first_repeated_char('hello') == 'h'\nassert first_repeated_char('sunny') == 'e'\nassert first_repeated_char('sunny') == 'e'\nassert first_repeated_char('abcabc') == 'a'\nassert first_repeated_char('abca') == 'a'\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_ludic(4) == [[2, 3, 4, 5, 6, 7, 8], [3, 4, 5, 6, 7, 8, 9], [4, 5, 6, 7, 8, 9, 10], [5, 6, 7, 8, 9, 10, 11], [6, 7, 8, 9, 10, 11, 12], [7, 8, 9, 10, 11, 12, 13], [8, 9, 10, 11, 12, 13, 14], [9, 10, 11, 12, 13, 14, 15], [10, 11, 12, 13, 14, 15, 16], [11, 12, 13, 14, 15, 16, 17], [12, 13, 14, 15, 16, 17, 18], [13, 14, 15, 16, 17, 18, 19], [14, 15, 16, 17, 18, 19, 20], [15, 16, 17, 18, 19, 20, 21], [16, 17, 18, 19, 20, 21, 22], [17, 18, 19, 20, 21, 22, 23], [18, 19, 20, 21, 22, 23, 24], [19, 20, 21, 22, 23, 24, 25], [20, 21, 22, 23, 24, 25, 26], [21, 22, 23, 24, 25, 26, 27], [22, 23, 24, 25, 26, 27, 28], [23, 24, 25, 26, 27, 28, 29], [24, 25, 26, 27, 28, 29, 30], [25, 26, 27, 28, 29, 30, 31], [26, 27, 28, 29, 30, 31, 32], [27, 28, 29, 30, 31, 32, 33], [28, 29, 30, 31, 32, 33, 34], [29, 30, 31, 32, 33, 34, 35], [30, 31, 32, 33, 34, 35, 36], [31, 32, 33, 34, 35, 36, 37], [32, 33, 34, 35, 36, 37, 38], [33, 34, 35, 36, 37, 38, 39], [34, 35, 36, 37, 38, 39, 40], [35, 36, 37, 38, 39, 40, 41], [36, 37, 38, 39, 40, 41, 42], [37, 38, 39, 40, 41, 42, 43], [38, 39, 40, 41, 42, 43, 44], [39, 40, 41, 42, 43, 44, 45], [40, 41, 42, 43, 44, 45, 46], [41, 42, 43, 44, 45, 46, 47], [42, 43, 44, 45, 46, 47, 48], [43, 44, 45, 46, 47, 48, 49], [44, 45, 46, 47, 48, 49, 50], [45, 46, 47, 48, 49, 50, 51], [46, 47, 48, 49, 50, 51, 52], [47, 48, 49, 50, 51, 52, 53], [48, 49, 50, 51, 52, 53, 54], [49, 50, 51, 52, 53, 54, 55], [50, 51, 52, 53, 54, 55, 56], [51, 52, 53, 54, 55, 56, 57], [52, 53, 54, 55, 56, 57, 58], [53, 54, 55, 56, 57, 58, 59], [54, 55, 56, 57, 58, 59, 60], [55, 56, 57, 58, 59, 60, 61], [56, 57, 58, 59, 60, 61, 62], [57, 58, 59, 60, 61, 62, 63], [58, 59, 60, 61, 62, 63, 64], [59, 60, 61, 62, 63, 64, 65], [60, 61, 62, 63, 64, 65, 66], [61, 62, 63, 64, 65, 66, 67], [62, 63, 64, 65, 66, 67, 68], [63, 64, 65, 66, 67, 68, 69], [64, 65, 66, 67, 68, 69, 70], [65, 66, 67, 68, 69, 70, 71], [66, 67, 68, 69, 70, 71, 72], [67, 68, 69, 70, 71, 72, 73], [68, 69, 70, 71, 72, 73, 74], [69, 70, 71, 72, 73, 74, 75], [70, 71, 72, 73, 74, 75, 76], [71, 72, 73, 74, 75, 76, 77], [72, 73, 74, 75, 76, 77, 78], [73, 74, 75, 76, 77, 78, 79], [74, 75, 76, 77, 78, 79, 80], [75, 76, 77, 78, 79, 80, 81], [76, 77, 78, 79, 80, 81, 82], [77, 78, 79, 80, 81, 82, 83], [78, 79, 80, 81, 82, 83, 84], [79, 80, 81, 82, 83, 84, 85], [80, 81, 82, 83, 84, 85, 86], [81, 82, 83, 84, 85, 86, 87], [82, 83, 84, 85, 86, 87, 88], [83, 84, 85, 86, 87, 88, 89], [84, 85, 86, 87, 88, 89, 90], [85, 86, 87, 88, 89, 90, 91], [86, 87, 88, 89, 90, 91, 92], [87, 88, 89, 90, 91, 92, 93], [88, 89, 90, 91, 92, 93, 94], [89, 90, 91, 92, 93, 94, 95], [90, 91, 92, 93, 94, 95, 96], [91, 92, 93, 94, 95, 96, 97], [92, 93, 94, 95, 96, 97, 98], [93, 94, 95, 96, 97, 98, 99], [94, 95, 96, 97, 98, 99, 100], [95, 96, 97, 98, 99, 100, 101], [96, 97, 98, 99, 100, 101, 102], [97, 98, 99, 100, 101, 102, 103], [98, 99, 100, 101, 102, 103, 104], [99, 100, 101, 102, 103, 104, 105], [100, 101, 102, 103, 104, 105, 106], [101, 102, 103, 104, 105, 106, 107], [102, 103, 104, 105, 106, 107, 108], [103, 104, 105, 106, 107, 108, 109], [104, 105, 106, 107, 108, 109, 110], [105, 106, 107, 108, 109, 110, 111], [106, 107, 108, 109, 110, 111, 112], [107, 108, 109, 110, 111, 112, 113], [108, 109, 110, 111, 112, 113, 114], [109, 110, 111, 112, 113, 114, 115], [110, 111, 112, 113, 114, 115, 116], [111, 112, 113, 114, 115, 116, 117], [112, 113, 114, 115, 116, 117, 118], [113, 114, 115, 116, 117, 118, 119], [114, 115, 116, 117, 118, 119, 120], [115, 116, 117, 118, 119, 120, 121], [116, 117, 118, 119, 120, 121, 122], [117, 118, 119, 120, 121, 122, 123], [118, 119, 120, 121, 122, 123, 124], [119, 120, 121, 122, 123, 124, 125], [120, 121, 122, 123, 124, 125, 126], [121, 122, 123, 124, 125, 126, 127], [122, 123, 124, 125, 126, 127, 128], [123, 124, 125, 126, 127, 128, 129], [124, 125, 126, 127, 128, 129, 130], [125, 126, 127, 128, 129, 130, 131], [126, 127, 128, 129, 130, 131, 132], [127, 128, 129, 130, 131, 132, 133], [128, 129, 130, 131, 132, 133, 134], [129, 130, 131, 132, 133, 134, 135], [130, 131, 132, 133, 134, 135, 136], [131, 132, 133, 134, 135, 136, 137], [132, 133, 134, 135, 136, 137, 138], [133, 134, 135, 136, 137, 138, 139], [134, 135, 136"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_ludic(5) == [1, 2, 3, 4, 5], \"Wrong result\"\nassert     get_ludic(10) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], \"Wrong result\""
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(get_ludic(1))"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_ludic(5) == [1,2,3,4,5]\nassert     get_ludic(10) == [1,2,3,4,5,6,7,8,9,10]\nassert     get_ludic(11) == [1,2,3,4,5,6,7,8,9,10,11]\nassert     get_ludic(99) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99]\nassert     get_ludic(1000) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_ludic(21) == [21]\nassert     get_ludic(22) == [22]\nassert     get_ludic(23) == [23]\nassert     get_ludic(24) == [24]\nassert     get_ludic(25) == [25]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_ludic(6) == {0,1,2,3,4,5} \nassert     get_ludic(10) == {0,1,2,3,4,5,6,7,8,9} \nassert     get_ludic(27) == {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27}\nassert     get_ludic(30) == {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29}\nassert     get_ludic(48) == {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47}\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_ludic(1) == [1]\nassert     get_ludic(2) == [1, 2]\nassert     get_ludic(3) == [1, 2, 3]\nassert     get_ludic(4) == [1, 2, 3, 4]\nassert     get_ludic(5) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_ludic(2) == [2,3,4,5]\nassert     get_ludic(10) == [2,3,4,5,7,9]\nassert     get_ludic(20) == [2,3,4,5,7,9,10,11,13,14,15,16,17,19,20]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_ludic(4) == [4, 3, 2, 1], \"Wrong return value\"\nassert     get_ludic(1000) == [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199], \"Wrong output\"\n\ndef get_palindrome_words(n):\n    '''\n    Write a function to find palindrome words in the dictionary\n    '''\n    pass\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nreverse_words(\"hello my name is sabar\") == \"sabar name my is hello\"\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     reverse_words('This is a test') == 'test a si sihT'\nassert     reverse_words('testing') == 'esgin tsetng'\nassert     reverse_words('a') == 'a'\nassert     reverse_words('test') == 'est a'\nprint('Reverse words: passed')\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nreverse_words('Hello World') == 'World Hello'\nassert reverse_words('Hello World this is a test') == 'test this is a Hello'\nassert reverse_words('Hello World 123') == '123 World'\n\n\ndef is_palindrome(s):\n    '''\n    Given a string, return true if it is a palindrome and false otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     reverse_words('This is a good day to learn python') == 'gnidday ot aohty pytho', 'First'\nassert     reverse_words('I like python very much') =='very much python like I', 'Second'\nassert     reverse_words('I am a boy') == 'boy a am I', 'Third'\nassert     reverse_words('i am a boy') == 'boy a am i', 'Fourth'\nassert     reverse_words('hello world') == 'dlrow olleh', 'Fifth'\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     reverse_words('hi') == 'hi'\nassert     reverse_words('hi there') == 'here you'\nassert     reverse_words('hello world') == 'world hello'\nassert     reverse_words('hello     world') == 'world hello'\nassert     reverse_words('hello world') == 'world hello'\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     reverse_words(\"word\") == \"dowrd\", \"incorrect\"\nassert     reverse_words(\"  word \") == \"word  \", \"incorrect\"\nassert     reverse_words(\"word\") == \"word\", \"incorrect\"\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     prime_num(1) == False, \"Not correct.\"\nassert prime_num(4) == True, \"Not correct.\"\nassert prime_num(1) == False, \"Not correct.\"\nassert prime_num(2) == True, \"Not correct.\"\nassert prime_num(3) == True, \"Not correct.\"\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(\"\\nLet's check prime_num\")\nnum = 5\nif prime_num(num):\n    print(\"{} is a prime number!\".format(num))\nelse:\n    print(\"{} is not a prime number!\".format(num))\nprint(\"\\nLet's check prime_num\")\nnum = 14\nif prime_num(num):\n    print(\"{} is a prime number!\".format(num))\nelse:\n    print(\"{} is not a prime number!\".format(num))\nprint(\"\\nLet's check prime_num\")\nnum = 13\nif prime_num(num):\n    print(\"{} is a prime number!\".format(num))\nelse:\n    print(\"{} is not a prime number!\".format(num))\nprint(\"\\nLet's check prime_num\")\nnum = 4\nif prime_num(num):\n    print(\"{} is a prime number!\".format(num))\nelse:\n    print(\"{} is not a prime number!\".format(num))\nprint(\"\\nLet's check prime_num\")\nnum = 6\nif prime_num(num):\n    print(\"{} is a prime number!\".format(num))\nelse:\n    print(\"{} is not a prime number!\".format(num))\nprint(\"\\nLet's check prime_num\")\nnum = 2\nif prime_num(num):\n    print(\"{} is a prime number!\".format(num))\nelse:\n    print(\"{} is not a prime number!\".format(num))\nprint(\"\\nLet's check prime_num\")\nnum = 3\nif prime_num(num):\n    print(\"{} is a prime number!\".format(num))\nelse:\n    print(\"{} is not a prime number!\".format(num))\nprint(\"\\nLet's check prime_num\")\nnum = 5\nif prime_num(num):\n    print(\"{} is a prime number!\".format(num))\nelse:\n    print(\"{} is not a prime number!\".format(num))\nprint(\"\\nLet's check prime_num\")\nnum = 7\nif prime_num(num):\n    print(\"{} is a prime number!\".format(num))\nelse:\n    print(\"{} is not a prime number!\".format(num))\nprint(\"\\nLet's check prime_num\")\nnum = 11\nif prime_num(num):\n    print(\"{} is a prime number!\".format(num))\nelse:\n    print(\"{} is not a prime number!\".format(num))\nprint(\"\\nLet's check prime_num\")\nnum = 21\nif prime_num(num):\n    print(\"{} is a prime number!\".format(num))\nelse:\n    print(\"{} is not a prime number!\".format(num))\nprint(\"\\nLet's check prime_num\")\nnum = 49\nif prime_num(num):\n    print(\"{} is a prime number!\".format(num))\nelse:\n    print(\"{} is not a prime number!\".format(num))\nprint(\"\\nLet's check prime_num\")\nnum = 35\nif prime_num(num):\n    print(\"{} is a prime number!\".format(num))\nelse:\n    print(\"{} is not a prime number!\".format(num))\nprint(\"\\nLet's check prime_num\")\nnum = 1\nif prime_num(num):\n    print(\"{} is a prime number!\".format(num))\nelse:\n    print(\"{} is not a prime number!\".format(num))\nprint(\"\\nLet's check prime_num\")\nnum = 1.1\nif prime_num(num):\n    print(\"{} is a prime number!\".format(num))\nelse:\n    print(\"{} is not a prime number!\".format(num))\nprint(\"\\nLet's check prime_num\")\nnum = 2.1\nif prime_num(num):\n    print(\"{} is a prime number!\".format(num))\nelse:\n    print(\"{} is not a prime number!\".format(num))\nprint(\"\\nLet's check prime_num\")\nnum = -2.1\nif prime_num(num):\n    print(\"{} is a prime number!\".format(num))\nelse:\n    print(\"{} is not a prime number!\".format(num))\nprint(\"\\nLet's check prime_num\")\nnum = '-2.1'\nif prime_num(num):\n    print(\"{} is a prime number!\".format(num))\nelse:\n    print(\"{} is not a prime number!\".format(num))\nprint(\"\\nLet's check prime_num\")\nnum = '1.1'\nif prime_num(num):\n    print(\"{} is a prime number!\".format(num))\nelse:\n    print(\"{} is not a prime number!\".format(num))\nprint(\"\\nLet's check prime_num\")\nnum = ''\nif prime_num(num):\n    print(\"{} is a prime number!\".format(num))\nelse:\n    print(\"{} is not a prime number!\".format(num))\nprint(\"\\nLet's check prime_num\")\nnum = None\nif prime_num(num):\n    print(\"{} is a prime number!\".format(num))\nelse:\n    print(\"{} is not a prime number!\".format(num))\nprint(\"\\nLet's check prime_num\")\nnum = 0\nif prime_num(num):\n    print(\"{} is a prime number!\".format(num))\nelse:\n    print(\"{} is not a prime number!\".format(num))\nprint(\"\\nLet's check prime_num\")\nnum = 0.5\nif prime_num(num):\n    print(\"{} is a prime number!\".format(num))\nelse:\n    print(\"{} is not a prime number!\".format(num))\nprint(\"\\nLet's check prime_num\")\nnum = 1.1\nif prime_num(num):\n    print(\"{} is a prime number!\".format(num))\nelse:\n    print(\"{} is not a prime number!\".format(num))\nprint(\"\\nLet's check prime_num\")\nnum = 1.6\nif prime_num(num):\n    print(\"{} is a prime number!\".format(num))\nelse:\n    print(\"{} is not a prime number!\".format(num))\nprint(\"\\nLet's check prime_num\")\nnum = 3.5\nif prime_num(num):\n    print(\"{} is a prime number!\".format(num))\nelse:\n    print(\"{} is not a prime number!\".format(num))\nprint(\"\\nLet's check prime_num\")\nnum = 1.7\nif prime_num(num):\n    print(\"{} is a prime number!\".format(num))\nelse:\n    print(\"{} is not a prime number!\".format(num))\nprint(\"\\nLet's check prime_num\")\nnum = 1.8\nif prime_num(num):\n    print(\"{} is a prime number!\".format(num))\nelse:\n    print(\"{} is not a prime number!\".format(num))\nprint(\"\\nLet's check prime_num\")\nnum = 1.9\nif prime_num(num):\n    print(\"{} is a prime number!\".format(num))\nelse:\n    print(\"{} is not a prime number!\".format(num))\nprint(\"\\nLet's check prime_num\")\nnum = 2.0\nif prime_num(num):\n    print(\"{} is a prime number!\".format(num))\nelse:\n    print(\"{} is not a prime number!\".format(num))\nprint(\"\\nLet's check prime_num\")\nnum = 2.1\nif prime_num(num):\n    print(\"{} is a prime number!\".format(num))\nelse:\n    print(\"{} is not a prime number!\".format(num))\nprint(\"\\nLet's check prime_num\")\nnum = 2.2\nif prime_num(num):\n    print(\"{} is a prime number!\".format(num))\nelse:\n    print(\"{} is not a prime number!\".format(num))\nprint(\"\\nLet's check prime_num\")\nnum = 2.3\nif prime_num(num):\n    print(\"{} is a prime number!\".format(num))\nelse:\n    print(\"{} is not a prime number!\".format(num))\nprint(\"\\nLet's check prime_num\")\nnum = 2.4\nif prime_num(num):\n    print(\"{} is a prime number!\".format(num))\nelse:\n    print("
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     prime_num(3) == False\nassert     prime_num(0) == False\nassert     prime_num(1) == False\nassert     prime_num(2) == False\nassert     prime_num(5) == True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     prime_num(6)    ==    False,         \"For 6\"\nassert     prime_num(10)    ==    True,         \"For 10\"\nassert     prime_num(5)    ==    True,         \"For 5\"\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     prime_num(8) == True\nassert     prime_num(2) == False\nassert     prime_num(3) == True\nassert     prime_num(13) == True\n\nprint('All test cases passed')\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef distance_between_points(x1, y1, x2, y2):\n    '''\n    Write a function to calculate the distance between two points.\n    '''\n    pass\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     radian_degree(180) == math.pi/180\nassert     radian_degree(360) == 2*math.pi\nassert     radian_degree(120) == math.pi/6\nassert     radian_degree(0) == 0\nassert     radian_degree(30) == math.pi/6\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     radian_degree(0) == 0\nassert     radian_degree(30) == 1.5707963267948966\nassert     radian_degree(60) == 1.57\nassert     radian_degree(90) == 1.0\nassert     radian_degree(180) == 0\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     radian_degree(0) == 0.0\nassert     radian_degree(90) == math.pi/2\nassert     radian_degree(180) == math.pi\nassert     radian_degree(270) == 3*math.pi/2\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef deg_km_mile(kilometer, degree):\n    '''\n    Write a function to convert kilometers to miles, round to 3 decimal places.\n    '''\n    pass\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     radian_degree(5) == math.pi / 2\nassert     radian_degree(1) == 0\nassert     radian_degree(0) == 0\nassert     radian_degree(45) == math.pi / 2\nassert     radian_degree(45.67) == math.pi / 2 + 0.0168\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nradian_degree(180) == math.pi/180\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     radian_degree(180) == math.pi * 2\nassert     radian_degree(0) == 0\nassert     radian_degree(180) == math.pi * 2\nassert     radian_degree(360) == math.pi * 2\nassert     radian_degree(0) == 0\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert -180.0 == radian_degree(180)\nassert -90.0 == radian_degree(-90)\nassert -90.0 == radian_degree(-270)\nassert -90.0 == radian_degree(-225)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_literals(\"simple is my favorite fruit.\", \"[a-z]\") == \"simple is my favorite fruit.\", \"Should be'simple is my favorite fruit.'\"\nassert     find_literals(\"Simple is my favorite fruit.\", \"[a-z]\") == \"Simple is my favorite fruit.\", \"Should be 'Simple is my favorite fruit.'\"\nassert     find_literals(\"Simple is my favorite fruit.\", \"[a-z]\") == \"Simple is my favorite fruit.\", \"Should be 'Simple is my favorite fruit.'\"\n\nassert find_literals(\"bacdc\", \"[bc]\") == \"bacdc\", \"Should be 'bacdc' and the index of the matching start and end indexes of the pattern.\"\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_literals(\"asd\", \"asd\") == (0,0,0)\nassert     find_literals(\"asd123456\", \"asd\") == (3,3,3)\nassert     find_literals(\"asd123456\", \"1*\") == (3, 3, 3)\nassert     find_literals(\"asd123456\", \"123456\") == (3, 3, 3)\nassert     find_literals(\"asd123456\", \"12345\") == (3, 3, 3)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef find_all_occurrences(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. If there are multiple matches, return all the matches. \n    '''\n    pass\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_literals(\"abc\", \"abc\") == \"abc\"\nassert     find_literals(\"abc\", \"bcd\") == (0, 0)\nassert     find_literals(\"abcd\", \"bcd\") == (0, 1)\n\nassert     find_literals(\"abcd\", \"cde\") == (2, 3)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef sub_regex(text, pattern):\n    '''\n    Write a function to replace a regex pattern. The function should return a new string.\n    '''\n    pass\n\n\ndef find_char_classes(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return a dictionary with the following key/value pairs:\n    \n    \"upper\": 1, \"lower\": 1, \"digit\": 1, \"special\": 1, \"whitespace\": 1, \"everything\": 1\n    '''\n    pass\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_literals(\"i am a boy\", r'[a]') == (True, 0, 3)\nassert     find_literals(\"abcdeab\", r'[a-c]') == (True, 0, 4)\nassert     find_literals(\"a1b2c3\", r'[0-9]') == (False, 0, 0)\nassert     find_literals(\"1,2,3,4,5,6,7,8,9\", r'[0-9]') == (False, 0, 0)\nassert     find_literals(\"abcd\", r'[a-z]') == (False, 0, 0)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_literals(\"a,b,a\", re.compile(r\"[a-z]\") ) == (0, 0, 3)\nassert     find_literals(\"a,b,a\", re.compile(r\"[a-z]\") ) == (1, 1, 3)\nassert     find_literals(\"a,b,a\", re.compile(r\"[a-z]\") ) == (3, 3, 3)\n\nassert     find_literals(\"a,b,a\", re.compile(r\"[a-z]\") ) == (0, 0, 3)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_literals('hello', 'hel') == (1,1)\nassert     find_literals('hello', 'hel') == (1,2)\nassert     find_literals('hello', 'hel') == (1,4)\nassert     find_literals('hello', 'hel') == (1,5)\nassert     find_literals('hello', 'hell') == (1,5)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_literals('abcdefgh', 'f') == (5, 6, 7)\nassert     find_literals('abcdefgh', 'gh') == (6, 7, 8)\nassert     find_literals('abcdefgh', 'h') == (6, 7, 8)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_literals('abcd', r'\\w') == ('a', 0, 2), f'Unexpected result: {find_literals(\"abcd\", r\"\\w\")}'\nassert     find_literals('abcd', r'\\w') == ('a', 0, 2), f'Unexpected result: {find_literals(\"abcd\", r\"\\w\")}'\nassert     find_literals('abcd', r'\\w') == ('a', 0, 2), f'Unexpected result: {find_literals(\"abcd\", r\"\\w\")}'\nassert     find_literals('abcd', r'\\w') == ('a', 0, 2), f'Unexpected result: {find_literals(\"abcd\", r\"\\w\")}'\nassert     find_literals('abcd', r'\\w') == ('a', 0, 2), f'Unexpected result: {find_literals(\"abcd\", r\"\\w\")}'\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert bell_Number(1) == 1\nassert bell_Number(2) == 2\nassert bell_Number(3) == 3\nassert bell_Number(4) == 5\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     bell_Number(3) == 5\nassert     bell_Number(5) == 5\nassert     bell_Number(4) == 3\nassert     bell_Number(5) == 5\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nbell_Number(1) == 1\nbell_Number(2) == 2\nbell_Number(3) == 5\nbell_Number(4) == 14\nbell_Number(5) == 42\nbell_Number(6) == 132\nbell_Number(7) == 479\nbell_Number(8) == 19683\nbell_Number(9) == 58578\nbell_Number(10) == 241512"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     bell_Number(1) == 1 \nassert     bell_Number(2) == 2 \nassert     bell_Number(3) == 5 \nassert     bell_Number(4) == 15 \nassert     bell_Number(5) == 52 \n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(bell_Number(1)) == 1\nprint(bell_Number(3)) == 4\nprint(bell_Number(4)) == 7\n\ndef sum_of_primes(n): \n    '''\n    Write a python function to find the sum of all prime numbers up to and including n.\n    '''\n    pass\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef find_Kth_largest(nums, k):\n    '''\n    Given an unsorted array of integers, find the kth largest element in it.\n    Note: k is 1-based.\n    Example 1:\n    Input: [3,2,1,5,6,4] and k = 2\n    Output: 5\n    '''\n    pass\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     bell_Number(1) == 1 \nassert bell_Number(2) == 2 \nassert bell_Number(3) == 5 \nassert bell_Number(4) == 12 \nassert bell_Number(5) == 30 \n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     bell_Number(0) == 1\nassert     bell_Number(1) == 1\nassert     bell_Number(2) == 2\nassert     bell_Number(3) == 3\nassert     bell_Number(4) == 5\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_kth_element([1, 2, 3, 4], 1) ==[2, 3, 4]\nassert     remove_kth_element([1, 2, 3, 4], 2) ==[1, 3, 4]\nassert     remove_kth_element([1, 2, 3, 4], 3) ==[1, 2, 4]\nassert     remove_kth_element([1, 2, 3, 4], 4) ==[1, 2, 3]\nassert     remove_kth_element([1, 2, 3, 4], 5) ==[1, 2, 3]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_kth_element([1,2,3,4,5],3) == [1,2,4,5], \"Wrong Answer\"\nassert     remove_kth_element([1,2,3,4,5],1) == [1,2,3,4,5], \"Wrong Answer\"\nassert     remove_kth_element([1,2,3,4,5],2) == [1,3,4,5], \"Wrong Answer\"\nassert     remove_kth_element([1,2,3,4,5],0) == [1,2,3,4], \"Wrong Answer\"\nassert     remove_kth_element([1,2,3,4,5],5) == [1,2,3,4], \"Wrong Answer\"\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_kth_element([1,2,3,4,5,6], 1) == [1,2,3,4,5,6], \"Should be [1,2,3,4,5,6]\"\nassert     remove_kth_element([1,2,3,4,5,6], 2) == [1,2,3,4,5,6], \"Should be [1,2,3,4,5,6]\"\nassert     remove_kth_element([1,2,3,4,5,6], 3) == [1,2,3,4,5], \"Should be [1,2,3,4,5]\"\nassert     remove_kth_element([1,2,3,4,5,6], 4) == [1,2,3,4,5], \"Should be [1,2,3,4,5]\"\nassert     remove_kth_element([1,2,3,4,5,6], 5) == [1,2,3,4,5], \"Should be [1,2,3,4,5]\"\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef remove_kth_element(list1, L, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    pass\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_kth_element([1,2,3,4,5,6,7,8,9], 7) == [1,2,3,4,5,6,8,9], \"Wrong\"\nassert     remove_kth_element([1,2,3,4,5,6,7,8,9], 0) == [1,2,3,4,5,6,7,8,9], \"Wrong\"\nassert     remove_kth_element([1,2,3,4,5,6,7,8,9], -1) == [1,2,3,4,5,6,7,8,9], \"Wrong\"\nassert     remove_kth_element([1,2,3,4,5,6,7,8,9], -10) == [1,2,3,4,5,6,7,8,9], \"Wrong\"\nassert     remove_kth_element([], 1) == [], \"Wrong\"\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n'''\nWrite a Python function to remove the nth index character from a nonempty string.\nSample Input    Expected Output\n'geeksforgeeks'    'ksgo'\n'''\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_kth_element([], 5) == []\nassert     remove_kth_element([1,2,3,4], 4) == [1,2,3]\nassert     remove_kth_element([1,2,3,4], 3) == [1,2,4]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_kth_element([1, 2, 3], 1) == [2, 3], \"Wrong\"\nassert     remove_kth_element([1, 2, 3], 2) == [1, 3], \"Wrong\"\nassert     remove_kth_element([1, 2, 3], 3) == [1, 2], \"Wrong\"\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_kth_element([1,2,3,4,5,6,7], 2) == (5,6,7)\nassert     remove_kth_element([1,2,3,4,5,6,7], 4) == (1,2,3,5,6,7)\nassert     remove_kth_element([1,2,3,4,5,6,7], -2) == (1,2,3,4,5,6)\n\n\ndef is_even(n):\n    '''\n    Write a python function which takes a number as input and returns 'true' if the number is even otherwise return 'false'.\n    '''\n    pass\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_kth_element([1,2,3,4,5], 4) == [1,2,3,5]\nassert     remove_kth_element([], 1) == []\nassert     remove_kth_element([1,2,3], 1) == [2,3]\nassert     remove_kth_element([1,2,3], 5) == [1,2,3]\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_of_nth([[1,2,3],[4,5,6],[7,8,9]],1) == 9\nassert     max_of_nth([[1,2,3],[4,5,6],[7,8,9]],2) == 6\nassert     max_of_nth([[1,2,3],[4,5,6],[7,8,9]],3) == 9"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    max_of_nth([[1,2,3,4,5],\n                [6,7,8,9,10],\n                [11,12,13,14,15],\n                [16,17,18,19,20],\n                [21,22,23,24,25]],\n              1) == 15\n    max_of_nth([[1,2,3,4,5],\n                [6,7,8,9,10],\n                [11,12,13,14,15],\n                [16,17,18,19,20],\n                [21,22,23,24,25]],\n              2) == 17\n    max_of_nth([[1,2,3,4,5],\n                [6,7,8,9,10],\n                [11,12,13,14,15],\n                [16,17,18,19,20],\n                [21,22,23,24,25]],\n              3) == 20\n    max_of_nth([[1,2,3,4,5],\n                [6,7,8,9,10],\n                [11,12,13,14,15],\n                [16,17,18,19,20],\n                [21,22,23,24,25]],\n              4) == 24\n    max_of_nth([[1,2,3,4,5],\n                [6,7,8,9,10],\n                [11,12,13,14,15],\n                [16,17,18,19,20],\n                [21,22,23,24,25]],\n              5) == 24\n    max_of_nth([[1,2,3,4,5],\n                [6,7,8,9,10],\n                [11,12,13,14,15],\n                [16,17,18,19,20],\n                [21,22,23,24,25]],\n              6) == 25\n    max_of_nth([[1,2,3,4,5],\n                [6,7,8,9,10],\n                [11,12,13,14,15],\n                [16,17,18,19,20],\n                [21,22,23,24,25]],\n              7) == 24\n    max_of_nth([[1,2,3,4,5],\n                [6,7,8,9,10],\n                [11,12,13,14,15],\n                [16,17,18,19,20],\n                [21,22,23,24,25]],\n              8) == 24\n    max_of_nth([[1,2,3,4,5],\n                [6,7,8,9,10],\n                [11,12,13,14,15],\n                [16,17,18,19,20],\n                [21,22,23,24,25]],\n              9) == 21\n    max_of_nth([[1,2,3,4,5],\n                [6,7,8,9,10],\n                [11,12,13,14,15],\n                [16,17,18,19,20],\n                [21,22,23,24,25]],\n              10) == 22\n    max_of_nth([[1,2,3,4,5],\n                [6,7,8,9,10],\n                [11,12,13,14,15],\n                [16,17,18,19,20],\n                [21,22,23,24,25]],\n              11) == 22\n    max_of_nth([[1,2,3,4,5],\n                [6,7,8,9,10],\n                [11,12,13,14,15],\n                [16,17,18,19,20],\n                [21,22,23,24,25]],\n              12) == 23\n    max_of_nth([[1,2,3,4,5],\n                [6,7,8,9,10],\n                [11,12,13,14,15],\n                [16,17,18,19,20],\n                [21,22,23,24,25]],\n              13) == 23\n    max_of_nth([[1,2,3,4,5],\n                [6,7,8,9,10],\n                [11,12,13,14,15],\n                [16,17,18,19,20],\n                [21,22,23,24,25]],\n              14) == 23\n    max_of_nth([[1,2,3,4,5],\n                [6,7,8,9,10],\n                [11,12,13,14,15],\n                [16,17,18,19,20],\n                [21,22,23,24,25]],\n              15) == 25\n    max_of_nth([[1,2,3,4,5],\n                [6,7,8,9,10],\n                [11,12,13,14,15],\n                [16,17,18,19,20],\n                [21,22,23,24,25]],\n              16) == 25\n    max_of_nth([[1,2,3,4,5],\n                [6,7,8,9,10],\n                [11,12,13,14,15],\n                [16,17,18,19,20],\n                [21,22,23,24,25]],\n              17) == 24\n    max_of_nth([[1,2,3,4,5],\n                [6,7,8,9,10],\n                [11,12,13,14,15],\n                [16,17,18,19,20],\n                [21,22,23,24,25]],\n              18) == 24\n    max_of_nth([[1,2,3,4,5],\n                [6,7,8,9,10],\n                [11,12,13,14,15],\n                [16,17,18,19,20],\n                [21,22,23,24,25]],\n              19) == 24\n    max_of_nth([[1,2,3,4,5],\n                [6,7,8,9,10],\n                [11,12,13,14,15],\n                [16,17,18,19,20],\n                [21,22,23,24,25]],\n              20) == 24\n    max_of_nth([[1,2,3,4,5],\n                [6,7,8,9,10],\n                [11,12,13,14,15],\n                [16,17,18,19,20],\n                [21,22,23,24,25]],\n              21) == 24\n    max_of_nth([[1,2,3,4,5],\n                [6,7,8,9,10],\n                [11,12,13,14,15],\n                [16,17,18,19,20],\n                [21,22,23,24,25]],\n              22) == 24\n    max_of_nth([[1,2,3,4,5],\n                [6,7,8,9,10],\n                [11,12,13,14,15],\n                [16,17,18,19,20],\n                [21,22,23,24,25]],\n              23) == 23\n    max_of_nth([[1,2,3,4,5],\n                [6,7,8,9,10],\n                [11,12,13,14,15],\n                [16,17,18,19,20],\n                [21,22,23,24,25]],\n              24) == 23\n    max_of_nth([[1,2,3,4,5],\n                [6,7,8,9,10],\n                [11,12,13,14,15],\n                [16,17,18,19,20],\n                "
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 0) == 1\nassert     max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 1) == 8\nassert     max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 2) == 9\nassert     max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 3) == None\n\n'''\nTask 4: Min Of Nth column\n'''\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_of_nth([[4, 4, 4], [5, 5, 5], [6, 6, 6]], 0) == 6, 'WRONG'\nassert max_of_nth([[4, 4, 4], [5, 5, 5], [6, 6, 6]], 1) == 5, 'WRONG'\nassert max_of_nth([[4, 4, 4], [5, 5, 5], [6, 6, 6]], 2) == 6, 'WRONG'\nassert max_of_nth([[4, 4, 4], [5, 5, 5], [6, 6, 6]], 3) == 5, 'WRONG'\nassert max_of_nth([[4, 4, 4], [5, 5, 5], [6, 6, 6]], 4) == 6, 'WRONG'\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_of_nth([[5, -1, -1], [-1, -2, 3], [2, -2, 1]], 1) == 5, 'incorrect answer: 5'\nassert     max_of_nth([[5, -1, -1], [-1, -2, 3], [2, -2, 1]], 2) == -2, 'incorrect answer: -2'\nassert     max_of_nth([[5, -1, -1], [-1, -2, 3], [2, -2, 1]], 3) == 3, 'incorrect answer: 3'\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_of_nth([[1,2,3], [4,5,6], [7,8,9]], 1) == 7\nassert     max_of_nth([[1,2,3], [4,5,6], [7,8,9]], 2) == 9\nassert     max_of_nth([[1,2,3], [4,5,6], [7,8,9]], 3) == 9\nassert     max_of_nth([[1,2,3], [4,5,6], [7,8,9]], 4) == 8\nassert     max_of_nth([[1,2,3], [4,5,6], [7,8,9]], 5) == 6\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert max_of_nth([[1,2,3],\n                   [4,5,6],\n                   [7,8,9]], 0) == 9\nassert max_of_nth([[1,2,3],\n                   [4,5,6],\n                   [7,8,9]], 1) == 8\nassert max_of_nth([[1,2,3],\n                   [4,5,6],\n                   [7,8,9]], 2) == 6\nassert max_of_nth([[1,2,3],\n                   [4,5,6],\n                   [7,8,9]], 3) == 7\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_of_nth([[1,2],[2,4]], 0) == 1\nassert     max_of_nth([[1,2],[2,4]], 1) == 2\nassert     max_of_nth([[1,2],[2,4]], 2) == 4\nassert     max_of_nth([[1,2],[2,4]], 3) == 4\nassert     max_of_nth([[1,2],[2,4]], 4) == 2\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     merge([[1,3], [1,4], [2,5]]) == [[1, 1], [2, 2], [3, 3], [4, 4]]\nassert     merge([[1,3], [1,4], [2,5], [2,5]]) == [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]]\nassert     merge([[1,3], [2,5]]) == [[1, 2], [3, 5]]\nassert     merge([[1], [2], [3]]) == [[1], [2], [3]]\nassert     merge([[1,2],[1,2],[1,2]]) == [[1], [2], [1, 2], [1, 2], [1, 2]]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert merge([[1, 2], [3, 4]]) == [[1, 2], [3, 4]]\nassert merge([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]\nassert merge([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]) == [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]\nassert not merge([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]])\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == '__main__':\n    lst = [[1,2],[3,4],[5,6]]\n    lst1 = [[1,2],[3,4]]\n    lst2 = [[1,2],[3,4],[5,6]]\n    lst3 = [[1,2],[3,4]]\n    lst4 = [[5,6]]\n    print(merge(lst))\n    print(merge(lst1))\n    print(merge(lst2))\n    print(merge(lst3))\n    print(merge(lst4)"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(merge([['A', 'B'], ['C', 'D'], ['E', 'F']]) == [['A', 'B'], ['C', 'D'], ['E', 'F']])\nassert \nprint(merge([['A', 'B', 'C'], ['D', 'E', 'F']]) == [['A', 'B', 'C'], ['D', 'E', 'F']])\nassert \nprint(merge([['A', 'B', 'C'], ['D', 'E']]) == [['A', 'B', 'C'], ['D', 'E']])\nassert \nprint(merge([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]])\nassert \nprint(merge([[1, 2], [], [5, 6]]) == [[1, 2], [], [5, 6]])\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     merge([[1,2],[3,4]]) == [[1,2],[3,4]]\nassert     merge([[1,2,3],[4,5]]) == [[1,2,3],[4,5]]\nassert     merge([[1,2,3],[4,5,6]]) == [[1,2,3],[4,5,6]]\nassert     merge([[1,2],[3,4,5]]) == [[1,2],[3,4,5]]\nassert     merge([[1,2,3],[4,5,6]]) == [[1,2,3],[4,5,6]]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert merge([[1,2],[2,3],[4,5]]) == [[1, 2], [2, 3], [4, 5]], \"Wrong\"\nassert merge([[1,2],[1,4]]) == [[1, 2], [1, 4]], \"Wrong\"\nassert merge([[1,2],[1,4],[1,6]]) == [[1, 2], [1, 4], [1, 6]], \"Wrong\"\nassert merge([[1,2],[1,4],[1,6],[1,8]]) == [[1, 2], [1, 4], [1, 6], [1, 8]], \"Wrong\"\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nassert merge([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]\nassert merge([[1, 2], [3], [4, 5, 6]]) == [[1, 2], [3, 4, 5, 6]]\nassert merge([[1, 2], [3, 4], []]) == [[1, 2], [3, 4], []]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nlst = [[3,4],[5,6],[7,8]]\n\nprint(merge(lst))\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     merge([[1,2],[3,4]]) == [[1, 2], [3, 4]]\nassert     merge([[1,2],[3,4],[5,6]]) == [[1, 2], [3, 4], [5, 6]]\n\ndef count_unique_elements(lst):\n    '''\n    Write a python function which takes a list and returns the number of unique elements in the list.\n    '''\n    pass\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef factorial(n):\n    '''\n    Write a function that returns the factorial of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     cummulative_sum((1,2,3,4,5,6,7,8,9,10)) == [1,3,6,10,15,21,28,36,45,55]\nassert     cummulative_sum((1,2,3,4,5,6,7,8,9)) == [1,3,6,10,15,21,28,36,45]\nassert     cummulative_sum((1,2,3,4,5,6,7,8)) == [1,3,6,10,15,21,28]\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     cummulative_sum(test_list) == sum(test_list)\nassert     cummulative_sum((1,2,3,4)) == sum((1,2,3,4))\nassert     cummulative_sum((0,1,2,3)) == sum((0,1,2,3))\nassert     cummulative_sum((-1,-2,-3,0,1,2,3)) == sum((-1,-2,-3,0,1,2,3))\nassert     cummulative_sum((-1,-2,-3,0,1,2,3,4,5,6)) == sum((-1,-2,-3,0,1,2,3,4,5,6))\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     cummulative_sum([1,2,3,4,5,6]) == [1,3,6,10,15,21]\nassert     cummulative_sum([]) == []\nassert     cummulative_sum([1,2]) == [1,2]\nassert     cummulative_sum([1,2,1,2]) == [1,3,3,5]"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     cummulative_sum((1, 2, 3, 4)) == (1, 3, 6, 10)\nassert     cummulative_sum((1, 2)) == (1, 2)\nassert     cummulative_sum((1,)) == (1)\nassert     cummulative_sum(()) == ()\nprint(\"Test 1 successful\")\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     cummulative_sum((1,2,3,4,5,6)) == sum((1,2,3,4,5,6)) == 30\nassert     cummulative_sum((1,3,6,10,15,21)) == sum((1,3,6,10,15,21)) == 66\nassert     cummulative_sum((-1,-2,-3,5,-6,-7,-8,-9,2,3,5,6,7,8,9,4,2)) == sum((-1,-2,-3,5,-6,-7,-8,-9,2,3,5,6,7,8,9,4,2)) == 0\nassert     cummulative_sum(()) == 0\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert \nassert \nassert \n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     cummulative_sum((1,2,3,4,5,6)) == (1,3,6,10,15,21)\nassert     cummulative_sum((1,2,3,4,5,6,7)) == (1,3,6,10,15,21,28)\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     average_tuple([[1,2,3], [4,5,6], [7,8,9]]) ==     [2.5,5.5,7.5], 'Test1'\nassert     average_tuple([[1,2,3], [4,5,6], [-1,-2,-3]]) ==     [2.0,5.0,0.0], 'Test2'\nassert     average_tuple([[1,2,3,4], [5,6,7,8], [9,10,11,12]]) ==     [3.0,6.0,9.0], 'Test3'\n\ndef average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    pass\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert average_tuple([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == [4.5, 5.5, 6.5, 7.5]\nassert average_tuple([[1, 1, 1], [2, 2, 2], [3, 3, 3], [4, 4, 4], [5, 5, 5], [6, 6, 6]]) == [3.0, 4.0, 5.0, 6.0]\nassert average_tuple([[1], [2], [3], [4], [5]]) == [2.0]\nassert average_tuple([[1], [2], [3]]) == [2.0]\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef average_list(nums):\n    '''\n    Write a function which takes a list of tuples and returns the average value for each tuple as a list.\n    '''\n    pass\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert         average_tuple([[1,2,3],[4,5,6]]) == [2.0, 3.0, 4.0]\nassert         average_tuple([[5,4],[6,5]]) == [4.0, 5.0]\nassert         average_tuple([]) == []\nassert         average_tuple([[]]) == []\nassert         average_tuple([[1,2,3,4,5]]) == [3.0, 4.0, 5.0]\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     average_tuple(((1, 2), (3, 4))) == [(1, 2), (3, 4)]\nassert     average_tuple(((2, 2), (5, 6), (8, 8))) == [(2, 2), (5, 6), (8, 8)]\nassert     average_tuple(((5, 7), (10, 10), (2, 4))) == [(5, 7), (10, 10), (2, 4)]\nassert     average_tuple(((5, 7), (8, 7), (3, 5))) == [(5, 7), (8, 7), (3, 5)]\nassert     average_tuple(((5, 7), (8, 7), (3, 5))) == [(5, 7), (8, 7), (3, 5)]\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef average_list(nums):\n    '''\n    Write a function which takes a list of numbers and returns the average of the numbers as a list.\n    '''\n    pass\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     average_tuple(((1,2), (3,4))) == [(1.5,2.5)], \"Expected (1.5,2.5)\"\nassert     average_tuple(((1,2,3), (4,5,6))) == [(2,3,4)], \"Expected (2,3,4)\"\nassert     average_tuple(((1,2,3), (4,5,6), (7,8,9))) == [(2,3,4), (5,6,7)], \"Expected (2,3,4), (5,6,7)\"\nassert     average_tuple(((2,4,6), (1,2,5))) == [(3.0,4.0,5.0)], \"Expected (3.0,4.0,5.0)\"\nassert     average_tuple(((1,2,3), (4,5,6), (7,8,9))) == [(2.5,3.5,4.5), (5.5,6.5,7.5)], \"Expected (2.5,3.5,4.5), (5.5,6.5,7.5)\"\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     average_tuple([(1,), (2,), (3,), (4,)]) == [1, 2, 3, 4]\nassert average_tuple([(1, 2, 3, 4), (5, 6, 7, 8)]) == [3.5, 5.5, 7.5, 8.5]\nassert average_tuple([(1,), (1,), (1,)]) == [1, 1, 1]\nassert average_tuple([(1,), (1, 1), (1, 1, 1)]) == [1, 1, 1]\nassert average_tuple([(1,), (2,), (3,), (4,)]) == [1, 2, 3, 4]\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     average_tuple([[1, 2, 3], [4, 5, 6]]) == [2.2, 3.3, 4.4], \"Wrong output\"\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    tuple_modulo((3, 4), (6, 8)) == (0, 0)\n    tuple_modulo((3, 4), (4, 8)) == (1, 0)\n    tuple_modulo((3, 4), (6, 10)) == (0, 1)\n    tuple_modulo((3, 4), (8, 10)) == (1, 1)\n    tuple_modulo((3, 4), (5, 6)) == (2, 0)\n    tuple_modulo((3, 4), (7, 8)) == (1, 1)\n    tuple_modulo((3, 4), (5, 9)) == (2, 1)\n    tuple_modulo((3, 4), (6, 9)) == (1, 2)\n    tuple_modulo((3, 4), (7, 7)) == (0, 2)\n    tuple_modulo((3, 4), (8, 8)) == (0, 0)\n    tuple_modulo((3, 4), (9, 9)) == (1, 1)\n    tuple_modulo((3, 4), (10, 9)) == (2, 2)\n    tuple_modulo((3, 4), (10, 10)) == (3, 3)\n    tuple_modulo((3, 4), (8, 9)) == (3, 3)\n    tuple_modulo((3, 4), (11, 9)) == (3, 4)\n    tuple_modulo((3, 4), (7, 8)) == (3, 4)\n    tuple_modulo((3, 4), (5, 7)) == (2, 4)\n    tuple_modulo((3, 4), (8, 7)) == (2, 4)\n    tuple_modulo((3, 4), (5, 6)) == (2, 5)\n    tuple_modulo((3, 4), (7, 6)) == (2, 5)\n    tuple_modulo((3, 4), (6, 5)) == (1, 6)\n    tuple_modulo((3, 4), (5, 4)) == (1, 6)\n    tuple_modulo((3, 4), (4, 6)) == (1, 6)\n    tuple_modulo((3, 4), (5, 5)) == (0, 7)\n    tuple_modulo((3, 4), (8, 4)) == (0, 7)\n    tuple_modulo((3, 4), (9, 4)) == (1, 7)\n    tuple_modulo((3, 4), (5, 3)) == (2, 7)\n    tuple_modulo((3, 4), (7, 3)) == (2, 7)\n    tuple_modulo((3, 4), (6, 2)) == (3, 7)\n    tuple_modulo((3, 4), (5, 2)) == (2, 7)\n    tuple_modulo((3, 4), (4, 1)) == (3, 8)\n    tuple_modulo((3, 4), (4, 0)) == (3, 8)\n    tuple_modulo((3, 4), (5, 1)) == (2, 8)\n    tuple_modulo((3, 4), (5, 0)) == (2, 8)\n    tuple_modulo((3, 4), (6, 0)) == (1, 8)\n    tuple_modulo((3, 4), (7, 0)) == (1, 8)\n    tuple_modulo((3, 4), (8, 0)) == (0, 8)\n    tuple_modulo((3, 4), (9, 0)) == (0, 8)\n    tuple_modulo((3, 4), (10, 0)) == (0, 8)\n    tuple_modulo((3, 4), (11, 0)) == (0, 8)\n    tuple_modulo((3, 4), (9, 1)) == (0, 7)\n    tuple_modulo((3, 4), (11, 1)) == (0, 7)\n    tuple_modulo((3, 4), (7, 1)) == (0, 7)\n    tuple_modulo((3, 4), (5, 2)) == (0, 7)\n    tuple_modulo((3, 4), (6, 2)) == (0, 7)\n    tuple_modulo((3, 4), (8, 2)) == (0, 7)\n    tuple_modulo((3, 4), (5, 1)) == (0, 8)\n    tuple_modulo((3, 4), (7, 1)) == (0, 8)\n    tuple_modulo((3, 4), (5, 0)) == (0, 8)\n    tuple_modulo((3, 4), (7, 0)) == (0, 8)\n    tuple_modulo((3, 4), (6, 0)) == (1, 8)\n    tuple_modulo((3, 4), (8, 0)) == (1, 8)\n    tuple_modulo((3, 4), (9, 0)) == (1, 8)\n    tuple_modulo((3, 4), (10, 0)) == (1, 8)\n    tuple_modulo((3, 4), (11, 0)) == (2, 8)\n    tuple_modulo((3, 4), (9, 1)) == (1, 7)\n    tuple_modulo((3, 4), (11, 1)) == (2, 7)\n    tuple_modulo((3, 4), (7, 1)) == (1, 7)\n    tuple_modulo((3, 4), (5, 2)) == (1, 7)\n    tuple_modulo((3, 4), (6, 2)) == (1, 7)\n    tuple_modulo((3, 4), (8, 2)) == (1, 7)\n    tuple_modulo((3, 4), (5, 1)) == (2, 7)\n    tuple_modulo((3, 4), (7, 1)) == (2, 7)\n    tuple_modulo((3, 4), (5, 0)) == (2, 7)\n    tuple_modulo((3, 4), (7, 0)) == (2, 7)\n    tuple_modulo((3, 4), (6, 0)) == (3, 7)\n    tuple_modulo((3, 4), (8, 0)) == (3, 7)\n    tuple_modulo((3, 4), (9, 0)) == (3, 7)\n    tuple_modulo((3, 4), (10, 0)) == (3, 7)\n    tuple_modulo((3, 4), (11, 0)) == (4, 7)\n    tuple_modulo((3, 4), (9, 1)) == (3, 6)\n    tuple_modulo((3, 4), (11, 1)) == (4, 6)\n    tuple_modulo((3, 4), (7, 1)) == (3, 6)\n    tuple_modulo((3, 4), (5, 2)) == (3, 6)\n    tuple_modulo((3, 4), (6, 2)) == (3, 6)\n    tuple_modulo((3, 4), (8, 2)) == (3, 6)\n    tuple_modulo((3, 4), (5, 1)) == (4, 6)\n    tuple_modulo((3, 4), (7, 1)) == (4, 6)\n    tuple_modulo((3, 4), (5, 0)) == (4, 6)\n    tuple_modulo((3, 4), (7, 0)) == (4, 6)\n    tuple_modulo((3, 4), (6, 0)) == (4, 6)\n    tuple_modulo((3, 4), (8, 0)) == (4, 6)\n    tuple_modulo((3, 4), (9, 0)) == (4, 6)\n    tuple_modulo((3, 4), (10, 0)) == (4, 6)\n    tuple_modulo((3, 4), (11, 0)) == (5, 7)\n    tuple_modulo((3, 4), (9, 1)) == (4, 5)\n    tuple"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_modulo((1, 2, 3), (2, 3, 4)) == (1, 0, 1)\nassert     tuple_modulo((1, 2, 3), (3, 4, 5)) == (0, 2, 1)\nassert     tuple_modulo((1, 2), (3, 4)) == (1, 2)\nassert     tuple_modulo((1, 2), (1, 3)) == (1, 0)\nassert     tuple_modulo((1, 2), (2, 3)) == (0, 1)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_modulo((1,2,3,4,5), (1,2,3,4,5)) == (1,2,3,4,5)\nassert     tuple_modulo((1,2,3,4,5), (2,3,4,5,6)) == (1,1,3,4,5)\nassert     tuple_modulo((5,10,2,3,4), (1,2,3,4,5)) == (5,10,2,3,4)\nassert     tuple_modulo((1,2,3,4,5), (1,2,3,4,5)) == (1,2,3,4,5)"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tuple_modulo((0, 5), (1, 6)) == (0, 2)\nassert     tuple_modulo((0, -5), (1, 6)) == (0, -3)\nassert     tuple_modulo((3, 5), (1, 6)) == (2, 2)\nassert     tuple_modulo((3, -5), (1, 6)) == (2, -2)\nassert     tuple_modulo((0, 5, 2), (1, 6, 2)) == (0, 3, 1)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tuple_modulo(test_tup1, test_tup2) == (test_tup1[0] % test_tup2[0], test_tup1[1] % test_tup2[1])\nassert     tuple_modulo(test_tup1, test_tup1) == (test_tup1[0] % test_tup1[0], test_tup1[1] % test_tup1[1])\nassert     tuple_modulo(test_tup1, (0, 0)) == (test_tup1[0] % 0, test_tup1[1] % 0)\nassert     tuple_modulo((0, 0), test_tup1) == (0 % test_tup1[0], 0 % test_tup1[1])\nassert tuple_modulo((0, 0), (0, 0)) == (0 % 0, 0 % 0)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tuple_modulo((0,1),(0,1)) == (0,0)\nassert     tuple_modulo((0,1),(1,0)) == (0,1)\nassert     tuple_modulo((0,1),(3,4)) == (0,0)\nassert     tuple_modulo((0,1),(4,3)) == (2,2)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert         tuple_modulo((3, 4), (2, 2)) == (1, 0)\nassert         tuple_modulo((1, 2), (2, 4)) == (1, 1)\nassert         tuple_modulo((2, 2), (3, 4)) == (0, 1)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tuple_modulo((1, 2, 3, 4), (5, 6, 7, 8)) == (2, 4, 0, 0), \\\n        'tuple_modulo should return (2, 4, 0, 0)'\nassert     tuple_modulo((0, 5, 3, 7), (1, 2, 1, 2)) == (0, 0, 3, 7), \\\n        'tuple_modulo should return (0, 0, 3, 7)'\nassert     tuple_modulo((3, 5, 8), (6, 2, 1)) == (3, 2, 1), \\\n        'tuple_modulo should return (3, 2, 1)'\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tuple_modulo((1, 2, 3), (1, 2, 3)) == (0, 0, 0)\nassert     tuple_modulo((1, 2, 3), (2, 2, 2)) == (1, 0, 1)\nassert     tuple_modulo((1, 2, 3), (2, 1, 1)) == (1, 0, 2)\nassert     tuple_modulo((1, 2, 3), (2, 2, 0)) == (1, 0, 1)\nassert     tuple_modulo((1, 2, 3), (2, 2, 2)) == (0, 0, 0)\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     min_Jumps(3, 0) == 1 \nassert     min_Jumps(4, 0) == 1 \nassert     min_Jumps(5, 0) == 2 \nassert     min_Jumps(6, 0) == 2 \nassert     min_Jumps(7, 0) == 3 \n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     min_Jumps(5, (2, 4)) == 3 \nassert     min_Jumps(2, (0, 0)) == 2 \nassert     min_Jumps(3, (5, 1)) == 2\nassert     min_Jumps(5, (3, 1)) == 4\nassert     min_Jumps(10, (8, 8)) == 7\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert min_Jumps(4, 0) == 3, 'incorrect min_Jumps(4, 0)'\nassert min_Jumps(6, 0) == 3, 'incorrect min_Jumps(6, 0)'\nassert min_Jumps(6, 1) == 4, 'incorrect min_Jumps(6, 1)'\nassert min_Jumps(8, 1) == 5, 'incorrect min_Jumps(8, 1)'\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     min_Jumps(3, (2,1)) == 3\nassert     min_Jumps(4, (4,2)) == 5\nassert     min_Jumps(1, (3,1)) == 1\n\n'''\nhttps://leetcode.com/problems/min-number-of-jumps-ii/\n\nA frog is crossing a river. The river is divided into x units and at each unit there may or may not exist a stone. The frog can jump on a stone, but it must not jump into the water.\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef min_Jumps_from_given_points(list):\n    '''\n    Write a function to check for the number of jumps required to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    pass\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint('PASSED.') if min_Jumps(2, 2) == 3 and min_Jumps(7, 7) == 1 else print('FAILED.')\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ndiv_list([1,2,3],[4,5,6]) == [0.25,0.4,0.5]\nassert \ndiv_list([1,3,4],[2,5,6]) == [0.5,0.333333333333333,0.6666666666666666]\nassert \ndiv_list([1,4],[2,5,6]) == [0.25,0.25,0.25]\nassert \ndiv_list([1,3,4],[2,5,6,7]) == [0.5,0.333333333333333,0.6666666666666666,0.0]\nassert \ndiv_list([1,3,4],[2,5,6,7,8]) == [0.6666666666666666,0.5,0.333333333333333,0.0,0.0]\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert not \n\ndef div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num1/num2 for num1,num2 in zip(nums1,nums2)]\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert div_list([1,2,3],[]) == []\nassert div_list([1,2,3],[2]) == [[1, 0], [1, 2], [1, 3]]\nassert div_list([1,2,3],[4]) == [[1, 0], [1, 2], [1, 3], [1, 4]]"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef mul_list(nums1,nums2):\n    '''\n    Write a function to multiply two lists element wise.\n    '''\n    pass\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     div_list([1,2,3,4,5], [1,2,3,4,5]) == [[1,2,3,4,5], [1,1,1,1,1]]\nassert     div_list([1,2,3], [1,2,3]) == [[1,1,1], [2,2,2], [3,3,3]]\nassert     div_list([2], [1,2,3]) == [[1], [2], [3]]\nassert     div_list([0], [1,2,3]) == [[1], [0], [2], [0], [3]]\nassert     div_list([1,2], [1,2,3]) == [[1,2], [1,1,1], [2,2,2], [3,3,3]]\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ndiv_list([3, 2, 6, 8, 1, 1, 5], [2, 3, 7, 6, 4, 5, 1]) == [2.0, 2.0, 8.0, 8.0, 4.0, 4.0, 2.0]\nassert \ndiv_list([3, 2, 6, 8, 1, 1, 5], [2, 3, 7, 6, 4, 5, 0]) == [2.0, 2.0, 8.0, 8.0, 4.0, 4.0, 0.0]\nassert \ndiv_list([3, 2, 6, 8, 1, 1, 5], [0, 0, 0, 0, 0, 0, 0]) == [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     div_list([1,2,3,4],2) == [[1,1],\n                                    [2,2],\n                                    [3,3],\n                                    [4,4]]\nassert     div_list([1,2,3],2) == [[1,0],\n                                    [2,0],\n                                    [3,0]]\nassert     div_list([],2) == []\nassert     div_list([2],2) == [[1,0]]\nassert     div_list([],2) == []\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    div_list([1,2,3,4],[4,5,6,7]) == [[1,2,3,4], [1,1.5,2.5,3.5]]\n    div_list([1,2,3,4],[5,6,7,8]) == [[1,2,3,4], [0.5,0.3333333333333333,0.6666666666666667,0.8333333333333334]]\nassert \n    div_list([1,2,3,4],[5,6,7,8]) == [[1,2,3,4], [0.5,0.3333333333333333,0.6666666666666667,0.8333333333333334]]\nassert \n    div_list([1,2,3,4],[5,6,7,8]) == [[1,2,3,4], [0.5,0.3333333333333333,0.6666666666666667,0.8333333333333334]]\nassert \n    div_list([1,2,3,4],[5,6,7,8]) == [[1,2,3,4], [0.5,0.3333333333333333,0.6666666666666667,0.8333333333333334]]\nassert \n    div_list([1,2,3,4],[5,6,7,8]) == [[1,2,3,4], [0.5,0.3333333333333333,0.6666666666666667,0.8333333333333334]]\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nassert move_num('a1b2c3d4e') == 'd4e1b2c3a'\nassert move_num('a1b2c3d4e') == 'd4e1b2c3a'\nassert move_num('1234567890') == '987654321'\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     move_num(\"hi34hi45!\") == \"45hi34hi\"\nassert     move_num(\"5hello5\") == \"5hello5\"\nassert     move_num(\"55a4656b5\") == \"a4656b555\"\nassert     move_num(\"12345\") == \"12345\"\nassert     move_num(\"123456789\") == \"123456789\"\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     (move_num('abcdef') == 'febcda')\nassert     (move_num('abcde') == 'febcde')\nassert     (move_num('abc') == 'fbc')\nassert     (move_num('abcdefgh') == 'ghcdefab')\nassert     (move_num('abcdefghij') == 'ghijabcdefab')\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     move_num('') == ''\nassert     move_num('aa') == 'aa'\nassert     move_num('1234') == '3412'\nassert     move_num('12a34') == 'a3412'\nassert     move_num('12A34') == 'A3412'\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     move_num('this is a string') == 'is string this'\nassert     move_num('move_num makes ere do') =='s ere do move_num'\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     move_num('a4b4c4d4e') == 'abcde'\nassert     move_num('A4B4C4D4E') == 'BDE'\nassert     move_num('12') == '12'\nassert     move_num('12a') == '12a'\nassert     move_num('abc') == 'bca'\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     move_num('this is string') == 'is string'\nassert     move_num('3423') == '2334'\nassert     move_num('123344') == '4412'\nassert     move_num('123ab') == 'ab12'\nassert     move_num('13') == '13'\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(\"Successful test!\")\n\nprint(\"Trying some more complex examples...\")\n\nprint(\"Simple example\")\nassert move_num(\"AbCd\") == \"BdcAb\"\nassert move_num(\"defAbc\") == \"defBac\"\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     largest_subset([1,3,4,5]) == 5, \"Wrong output for [[1,3,4,5]]\"\nassert     largest_subset([4,7,9,10,11,13,14]) == 10, \"Wrong output for [[4,7,9,10,11,13,14]]\"\n\nimport unittest\nclass Test(unittest.TestCase):\n    def test_01(self):\n        self.assertEqual(largest_subset([1,3,4,5]), 5, \"Wrong output for [[1,3,4,5]]\")\n    def test_02(self):\n        self.assertEqual(largest_subset([4,7,9,10,11,13,14]), 10, \"Wrong output for [[4,7,9,10,11,13,14]]\")\n    def test_03(self):\n        self."
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     largest_subset([1, 2, 4, 8, 16, 32, 64, 128]) == 8\nassert     largest_subset([1, 2, 4, 8, 16, 32, 64]) == 8\nassert     largest_subset([1, 2, 4, 8, 16, 32, 64, 128]) == 8\nassert     largest_subset([1, 2, 4, 8, 16, 32, 64, 128, 512]) == 8\nassert     largest_subset([1, 2, 4, 8, 16, 32, 64, 128, 512, 1024]) == 8\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     largest_subset([3, 9, 5, 10]) == 5\nassert     largest_subset([1, 2, 3, 4, 5]) == 2\nassert     largest_subset([0, 1, 2, 3, 4]) == 1\nassert     largest_subset([2, 3, 4, 5, 6]) == 5\nassert     largest_subset([1, 2, 3, 4, 5]) == 5\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     largest_subset([1, 2, 4]) == 2\nassert     largest_subset([3, 6, 9]) == 3\nassert     largest_subset([1, 2, 4, 6, 9]) == 4\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     largest_subset([2, 4, 6, 8]) == 8, 'wrong'\nassert     largest_subset([1, 2, 4, 8]) == 8, 'wrong'\nassert     largest_subset([4, 8, 16]) == 8, 'wrong'\nassert     largest_subset([8, 16, 32]) == 32, 'wrong'\nassert     largest_subset([2, 4, 8, 16]) == 16, 'wrong'\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # key is to put all the number that are divisible by at least one of the values in that subset and then check the size of the subset and if it is larger than the current largest_subset, then change the largest_subset to be equal to that subset\n    # we can use a dict of dicts\n    # we need to see how many times each number is divisible by at least one of the values in the subset\n    # we can use a dict with the value as the key and the set of all the keys of the subset as the value.\n    # then we need to check the size of the subset of the dict\n    \n    # start with all the numbers as the largest subset\n    # for each of the number from the set of numbers\n    # we need to check if the number can be divisible by all the values in the subset\n    # then we need to update the subset of numbers to be the subset of the subset\n    # return the size of the subset\n    # O(n^3)\n    # max_size = 0\n    # for subset in all_subsets:\n    #     for number in subset:\n    #         if can_be_divisible(number, subset):\n    #             # update size\n    #             subset_size = len(subset)\n    #             if subset_size > max_size:\n    #                 max_size = subset_size\n    #             # break\n    # return max_size\n    \n    # faster method\n    # O(n^2)\n    # possible_divisors = set()\n    # for number in a:\n    #     for divisor in possible_divisors:\n    #         if number % divisor == 0:\n    #             break\n    #     else:\n    #         possible_divisors.add(number)\n    # return len(possible_divisors)\n    \n    # can be done in only O(n) time\n    \n    # initialize an empty dict\n    # for every number in the list of numbers\n    # for every divisor in the dict\n    # if the number in the set is not divisible by any of the divisor of the set, add it to the set\n    # then add the set to the dict with the number as the value\n    # go through the dict and see if there is any set that has the number as one of its elements\n    # if there is, then the number is divisible by all the divisors in the set\n    # so update the size of the largest subset to be the size of that set\n    # return the size of the largest subset\n    # O(n)\n    \n    # initialize an empty dict\n    # for every number in the list of numbers\n    # for every divisor in the dict\n    # if the number in the set is not divisible by any of the divisor of the set, add it to the set\n    # then add the set to the dict with the number as the value\n    # go through the dict and see if there is any set that has the number as one of its elements\n    # if there is, then the number is divisible by all the divisors in the set\n    # so update the size of the largest subset to be the size of that set\n    # return the size of the largest subset\n    # O(n)\n    \n    # faster method\n    # initialize an empty dict\n    # for every number in the list of numbers\n    # for every divisor in the dict\n    # if the number in the set is not divisible by any of the divisor of the set, add it to the set\n    # then add the set to the dict with the number as the value\n    # go through the dict and see if there is any set that has the number as one of its elements\n    # if there is, then the number is divisible by all the divisors in the set\n    # so update the size of the largest subset to be the size of that set\n    # return the size of the largest subset\n    # O(n)\n    \n    # initialize an empty dict\n    # for every number in the list of numbers\n    # for every divisor in the dict\n    # if the number in the set is not divisible by any of the divisor of the set, add it to the set\n    # then add the set to the dict with the number as the value\n    # go through the dict and see if there is any set that has the number as one of its elements\n    # if there is, then the number is divisible by all the divisors in the set\n    # so update the size of the largest subset to be the size of that set\n    # return the size of the largest subset\n    # O(n)\n    \n    # can be done in only O(n) time\n    \n    # initialize an empty dict\n    # for every number in the list of numbers\n    # for every divisor in the dict\n    # if the number in the set is not divisible by any of the divisor of the set, add it to the set\n    # then add the set to the dict with the number as the value\n    # go through the dict and see if there is any set that has the number as one of its elements\n    # if there is, then the number is divisible by all the divisors in the set\n    # so update the size of the largest subset to be the size of that set\n    # return the size of the largest subset\n    # O(n)\n    \n    # O(n^2)\n    # size_of_largest_subset = 0\n    # for number in a:\n    #     size_of_subset = 0\n    #     for divisor in a:\n    #         if number % divisor == 0:\n    #             size_of_subset += 1\n    #     if size_of_subset > size_of_largest_subset:\n    #         size_of_largest_subset = size_of_subset\n    # return size_of_largest_subset\n    \n    # O(n^2)\n    # size_of_largest_subset = 0\n    # for number in a:\n    #     size_of_subset = 0\n    #     for divisor in a:\n    #         if number % divisor == 0:\n    #             size_of_subset += 1\n    #     if size_of_subset > size_of_largest_subset:\n    #         size_of_largest_subset = size_of_subset\n    # return size_of_largest_subset\n    \n    # faster method\n    # size_of_largest_subset = 0\n    # for number in a:\n    #     size_of_subset = 0\n    #     for divisor in a:\n    #         if number % divisor == 0:\n    #             size_of_subset += 1\n    #     if size_of_subset > size_of_largest_subset:\n    #         size_of_largest_subset = size_of_subset\n    # return size_of_largest_subset\n    \n    # # O(n^3)\n    # size_of_largest_subset = 0\n    # # for number in a:\n    # #     size_of_subset = 0\n    # #     for divisor in a:\n    # #         if number % divisor == 0:\n    # #             size_of_subset += 1\n    # #     if size_of_subset > size_of_largest_subset:\n    # #         size_of_largest_subset = size_of_subset\n    # # return size_of_largest_subset\n    \n    # O(n^2)\n    size_of_largest_subset = 0\n    # for number in a:\n    #     for divisor in a:\n    #         if number % divisor == 0:\n    #             if size_of_largest_subset < size_of_subset + 1:\n    #                 size_of_largest_subset = size_of_subset + 1\n    # return size_of_largest_subset\n    \n    # O(n^2)\n    size_of_largest"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     largest_subset([2,4,8,16,32]) == 3, 'Wrong return value!'\nassert     largest_subset([2,4,8]) == 2, 'Wrong return value!'\nassert     largest_subset([2,4,8,16]) == 4, 'Wrong return value!'\nassert     largest_subset([]) == 0, 'Wrong return value!'\nassert     largest_subset([1,2,3,4,5,6,7,8,9,10]) == 11, 'Wrong return value!'\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_median([1, 2, 3, 4, 5], [4, 5, 6, 7, 8], 5) == 4\nassert     get_median([1, 2, 3, 4, 5], [4, 5, 6, 7, 8], 6) == 5\nassert     get_median([1, 2, 3, 4, 5], [4, 5, 6, 7, 8], 7) == 4\nassert     get_median([1, 2, 3, 4, 5], [4, 5, 6, 7, 8], 8) == 4\nassert     get_median([1, 2, 3, 4, 5], [4, 5, 6, 7, 8], 9) == 5\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert get_median([1,2,3,4],[-2,4,1,5]) == 3\nassert get_median([1,2,3,4],[-2,4,1,5], 4) == 3\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef find_lcsubstr(str1, str2):\n    '''\n    Determine the longest common substring (LCSS) of the two given strings.\n    '''\n    pass\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_median([1,2,3],[4,5,6],3) == 4\nassert     get_median([1,2,3],[4,5,6],2) == 3.5\nassert     get_median([4,5,6],[1,2,3],3) == 2\nassert     get_median([4,5,6],[1,2,3],4) == 3\nassert     get_median([1,2,3],[4,5,6],4) == 2.5\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    arr1 = [10, 20, 30, 40, 50]\n    arr2 = [60, 70, 80]\n    \n    assert get_median(arr1, arr2, len(arr1)) == 60\n    \n    arr1 = [10, 20, 30, 40, 50]\n    arr2 = [60, 70, 80, 90, 100]\n    assert get_median(arr1, arr2, len(arr1)) == 60\n    \n    arr1 = [10, 20, 30, 40, 50]\n    arr2 = []\n    assert get_median(arr1, arr2, len(arr1)) == None\n    \n    arr1 = []\n    arr2 = []\n    "
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nget_median([10,15,20],[30,40,50,60],4)==30\nassert get_median([4,10,15,20],[30,40,50,60],5)==35.5\nassert get_median([2,4,6,8,10,12,14,16,18,20],[40,50,60,70,80,90,100],9)==50.5\n\ndef get_smallest_diff_pair(arr, n):\n    '''\n    Write a function to find the pair of numbers whose sum is closest to the given sum.\n    '''\n    pass\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    pass\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert get_median([1, 2, 3], [4, 5, 6], 3) == 5\nassert get_median([1, 2, 3], [4, 5, 6], 2) == 4\nassert get_median([1, 2, 3], [4, 5, 6], 1) == 2\nassert get_median([1, 2, 3], [4, 5, 6], 0) == 3\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint(get_median([1, 5, 6, 8, 10], [2, 3, 4, 9, 11], 5))\n\nassert get_median([1, 5, 6, 8, 10], [2, 3, 4, 9, 11], 3) == 6"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_median([], [], 1) == None, 'Wrong value'\nassert     get_median([], [1], 1) == 1, 'Wrong value'\nassert     get_median([1], [], 1) == 1, 'Wrong value'\nassert     get_median([1], [1], 1) == 1, 'Wrong value'\nassert     get_median([], [], 2) == None, 'Wrong value'\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # print(nth_nums([1,2,3,4],3))\n    # print(nth_nums([1,2,3,4,5,6],1))\n    # print(nth_nums([1,2,3,4,5,6],2))\n    # print(nth_nums([1,2,3,4,5,6],3))\n    # print(nth_nums([1,2,3,4,5,6],4))\n    # print(nth_nums([1,2,3,4,5,6],5))\n    # print(nth_nums([1,2,3,4,5,6],6))\n    # print(nth_nums([1,2,3,4,5,6],7))\n    print(nth_nums([1,2,3,4,5,6],4))\n    print(nth_nums([1,2,3,4,5,6],3))\n\n\ndef mth_nums(nums,m):\n    '''\n    Write a function to compute the m-th power of each number in a list.\n    '''\n    pass\n\n\ndef mth_nums(nums,m):\n    '''\n    Write a function to compute the m-th power of each number in a list.\n    '''\n    pass"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     nth_nums([0, 1, 2, 3, 4], 2) == 0**2 + 1**2 + 2**2 + 3**2 + 4**2\nassert     nth_nums([0, 1, 2, 3, 4], 3) == 0**3 + 1**3 + 2**3 + 3**3 + 4**3\nassert     nth_nums([0, 1, 2, 3, 4], 4) == 0**4 + 1**4 + 2**4 + 3**4 + 4**4\nassert     nth_nums([0, 1, 2, 3, 4], 5) == 0**5 + 1**5 + 2**5 + 3**5 + 4**5\nassert     nth_nums([0, 1, 2, 3, 4], 6) == 0**6 + 1**6 + 2**6 + 3**6 + 4**6\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef sum_arrays(arr1,arr2):\n    '''\n    Write a function to add two numbers represented as linked lists.\n    '''\n    pass\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef distinct_string_nums(string):\n    '''\n    Write a function to generate all strings consisting of the same letter and are of length equal to n.\n    '''\n    pass\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    nth_nums(nums, 1) == [1, 9]\n    nth_nums(nums, 2) == [1, 81]\n    nth_nums(nums, 3) == [1, 1081, 2781]\n    nth_nums(nums, 4) == [1, 10081, 2781]\n    nth_nums(nums, 5) == [1, 100000081, 2781]\n    nth_nums(nums, 6) == [1, 100000181, 2781]\n    nth_nums(nums, 7) == [1, 10000081, 2781]\n    nth_nums(nums, 8) == [1, 999999981, 2781]\n    nth_nums(nums, 9) == [1, 1000000081, 2781]\n    nth_nums(nums, 10) == [1, 100000000181, 2781]\n    nth_nums(nums, 11) == [1, 100000100181, 2781]\n    nth_nums(nums, 12) == [1, 100000200181, 2781]\n    nth_nums(nums, 13) == [1, 99999999990181, 2781]\n    nth_nums(nums, 14) == [1, 100000009990181, 2781]\n    nth_nums(nums, 15) == [1, 1000000019990181, 2781]\n    nth_nums(nums, 16) == [1, 1000002009990181, 2781]\n    nth_nums(nums, 17) == [1, 999999999999981, 2781]\n    nth_nums(nums, 18) == [1, 1000000099999981, 2781]\n    nth_nums(nums, 19) == [1, 1000000001000081, 2781]\n    nth_nums(nums, 20) == [1, 1000002000999981, 2781]\n    nth_nums(nums, 21) == [1, 9999999999999990181, 2781]\n    nth_nums(nums, 22) == [1, 10000000999999990181, 2781]\n    nth_nums(nums, 23) == [1, 10000000010000010010181, 2781]\n    nth_nums(nums, 24) == [1, 1000002010000010010181, 2781]\n    nth_nums(nums, 25) == [1, 9999999999999999990181, 2781]\n    nth_nums(nums, 26) == [1, 10000000999999999990181, 2781]\n    nth_nums(nums, 27) == [1, 100000000010000081, 2781]\n    nth_nums(nums, 28) == [1, 1000000001000081, 2781]\n    nth_nums(nums, 29) == [1, 1000001001000081, 2781]\n    nth_nums(nums, 30) == [1, 100000201000081, 2781]\n    nth_nums(nums, 31) == [1, 9999999999999999990181, 2781]\n    nth_nums(nums, 32) == [1, 10000000999999999990181, 2781]\n    nth_nums(nums, 33) == [1, 100000000100000100020181, 2781]\n    nth_nums(nums, 34) == [1, 100000200100000100020181, 2781]\n    nth_nums(nums, 35) == [1, 999999999999999999010181, 2781]\n    nth_nums(nums, 36) == [1, 1000000099999999999010181, 2781]\n    nth_nums(nums, 37) == [1, 10000000010000010002010181, 2781]\n    nth_nums(nums, 38) == [1, 1000002010000010002010181, 2781]\n    nth_nums(nums, 39) == [1, 99999999999999999901010181, 2781]\n    nth_nums(nums, 40) == [1, 100000009999999999901010181, 2781]\n    nth_nums(nums, 41) == [1, 1000000001000001000201010181, 2781]\n    nth_nums(nums, 42) == [1, 100000201000001000201010181, 2781]\n    nth_nums(nums, 43) == [1, 9999999999999999990101010181, 2781]\n    nth_nums(nums, 44) == [1, 10000000999999999990101010181, 2781]\n    nth_nums(nums, 45) == [1, 100000000100000100020101010181, 2781]\n    nth_nums(nums, 46) == [1, 10000020100000100020101010181, 2781]\n    nth_nums(nums, 47) == [1, 999999999999999999010101010181, 2781]\n    nth_nums(nums, 48) == [1, 10000000999999999990101010181, 2781]\n    nth_nums(nums, 49) == [1, 10000000010000010002010101010181, 2781]\n    nth_nums(nums, 50) == [1, 1000002010000010002010101010181, 2781]\n    nth_nums(nums, 51) == [1, 999999999999999999010101010181, 2781]\n    nth_nums(nums, 52) == [1, 1000000099999999999010101010181, 2781]\n    nth_nums(nums, 53) == [1, 1000000001000001000201010101010181, 2781]\n    nth_nums(nums, 54) == [1, 100000201000001000201010101010181, 2781]\n    nth_nums(nums, 55) == [1, 99999999999999999901010101010181, 2781]\n    nth_nums(nums, 56) == [1, 100000009999999999901010101010181, 2781]\n    nth_nums(nums, 57) == [1, 1000000001000001000201010101010181, 2781]\n    nth_nums(nums, 58) == [1, 100000201000001000201010101010181, 2781]\n    nth_nums(nums, 59) == [1, 99999999999999999901010101010181, 2781]\n    nth_nums(nums, 60) == [1, 100000009999999999901010101010181, 2781]\n    nth_nums(nums, 61) == [1, 1000000001000001000201010101010181, 2781]\n    nth_nums(nums, 62) == [1, 100000201000001000201010101010181, 2781]\n    nth_nums(nums, 63) == [1, 99999999999999999901010101010181, 2781]\n    nth_nums(nums, 64) == [1, 100000009999999999901010101010181, 2781]\n    nth_nums(nums, 65) == [1, 1000000001000001000201010101010181, 2781]\n    nth_nums(nums, 66) == [1, 100000201000001000201010101010181, 2781]\n    nth_nums(nums, 67) == [1, 99999999999999999901010101010181, 2781]\n    nth_nums(nums, 68) == [1, 100000009999999999901010101010181, 2781]\n    nth_"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(nth_nums([1,2,3,4],5)) == 1\nprint(nth_nums([1,2,3,4],2)) == 9\nprint(nth_nums([1,2,3,4],3)) == 27\nprint(nth_nums([1,2,3,4],4)) == 81\nprint(nth_nums([1,2,3,4],5)) == 1\nprint(nth_nums([1,2,3,4],6)) == 243\nprint(nth_nums([1,2,3,4],7)) == 1\nprint(nth_nums([1,2,3,4],8)) == 1024\nprint(nth_nums([1,2,3,4],9)) == 1\nprint(nth_nums([1,2,3,4],10)) == 1024\nprint(nth_nums([1,2,3,4],11)) == 1\nprint(nth_nums([1,2,3,4],12)) == 1024\nprint(nth_nums([1,2,3,4],13)) == 1\nprint(nth_nums([1,2,3,4],14)) == 1024\nprint(nth_nums([1,2,3,4],15)) == 1\nprint(nth_nums([1,2,3,4],16)) == 1024\nprint(nth_nums([1,2,3,4],17)) == 1\nprint(nth_nums([1,2,3,4],18)) == 1024\nprint(nth_nums([1,2,3,4],19)) == 1\nprint(nth_nums([1,2,3,4],20)) == 1024\nprint(nth_nums([1,2,3,4],21)) == 1\nprint(nth_nums([1,2,3,4],22)) == 1024\nprint(nth_nums([1,2,3,4],23)) == 1\nprint(nth_nums([1,2,3,4],24)) == 1024\nprint(nth_nums([1,2,3,4],25)) == 1\nprint(nth_nums([1,2,3,4],26)) == 1024\nprint(nth_nums([1,2,3,4],27)) == 1\nprint(nth_nums([1,2,3,4],28)) == 1024\nprint(nth_nums([1,2,3,4],29)) == 1\nprint(nth_nums([1,2,3,4],30)) == 1024\nprint(nth_nums([1,2,3,4],31)) == 1\nprint(nth_nums([1,2,3,4],32)) == 1024\nprint(nth_nums([1,2,3,4],33)) == 1\nprint(nth_nums([1,2,3,4],34)) == 1024\nprint(nth_nums([1,2,3,4],35)) == 1\nprint(nth_nums([1,2,3,4],36)) == 1024\nprint(nth_nums([1,2,3,4],37)) == 1\nprint(nth_nums([1,2,3,4],38)) == 1024\nprint(nth_nums([1,2,3,4],39)) == 1\nprint(nth_nums([1,2,3,4],40)) == 1024\nprint(nth_nums([1,2,3,4],41)) == 1\nprint(nth_nums([1,2,3,4],42)) == 1024\nprint(nth_nums([1,2,3,4],43)) == 1\nprint(nth_nums([1,2,3,4],44)) == 1024\nprint(nth_nums([1,2,3,4],45)) == 1\nprint(nth_nums([1,2,3,4],46)) == 1024\nprint(nth_nums([1,2,3,4],47)) == 1\nprint(nth_nums([1,2,3,4],48)) == 1024\nprint(nth_nums([1,2,3,4],49)) == 1\nprint(nth_nums([1,2,3,4],50)) == 1024\nprint(nth_nums([1,2,3,4],51)) == 1\nprint(nth_nums([1,2,3,4],52)) == 1024\nprint(nth_nums([1,2,3,4],53)) == 1\nprint(nth_nums([1,2,3,4],54)) == 1024\nprint(nth_nums([1,2,3,4],55)) == 1\nprint(nth_nums([1,2,3,4],56)) == 1024\nprint(nth_nums([1,2,3,4],57)) == 1\nprint(nth_nums([1,2,3,4],58)) == 1024\nprint(nth_nums([1,2,3,4],59)) == 1\nprint(nth_nums([1,2,3,4],60)) == 1024\nprint(nth_nums([1,2,3,4],61)) == 1\nprint(nth_nums([1,2,3,4],62)) == 1024\nprint(nth_nums([1,2,3,4],63)) == 1\nprint(nth_nums([1,2,3,4],64)) == 1024\nprint(nth_nums([1,2,3,4],65)) == 1\nprint(nth_nums([1,2,3,4],66)) == 1024\nprint(nth_nums([1,2,3,4],67)) == 1\nprint(nth_nums([1,2,3,4],68)) == 1024\nprint(nth_nums([1,2,3,4],69)) == 1\nprint(nth_nums([1,2,3,4],70)) == 1024\nprint(nth_nums([1,2,3,4],71)) == 1\nprint(nth_nums([1,2,3,4],72)) == 1024\nprint(nth_nums([1,2,3,4],73)) == 1\nprint(nth_nums([1,2,3,4],74)) == 1024\nprint(nth_nums([1,2,3,4],75)) == 1\nprint(nth_nums([1,2,3,4],76)) == 1024\nprint(nth_nums([1,2,3,4],77)) == 1\nprint(nth_nums([1,2,3,4],78)) == 1024\nprint(nth_nums([1,2,3,4],79)) == 1\nprint(nth_nums([1,2,3,4],80)) == 1024\nprint(nth_nums([1,2,3,4],81)) == 1\nprint(nth_nums([1,2,3,4],82)) == 1024\nprint(nth_nums([1,2,3,4],83)) == 1\nprint(nth_nums([1,2,3,4],84)) == 1024\nprint(nth_nums([1,2,3,4],85)) == 1\nprint(nth_nums([1,2,3,4],86)) == 1024\nprint(nth_nums([1,2,3,4],87)) == 1\nprint(nth_nums([1,2,3,4],88)) == 1024\nprint(nth_nums([1,2,3,4],89)) == 1\nprint(nth_nums([1,2,3,4],90)) == 1024\nprint(nth_nums([1,2,3,4],91)) == 1\nprint(nth_nums([1,2,3,4],92)) == 1024\nprint(nth_nums([1,2,3,4],93)) == 1\nprint(nth_nums([1,2,3,4],94)) == 1024\nprint(nth_nums([1,2,3,4]"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n'''\n\nNote:\nThere are different implementations of this problem.\n\nThe easiest solution is to get a reference to the list first.\nWe can then iterate over the list and compute the nth power of each number in the list.\n\nHowever, given that our task is O(n), we can use the \"cycle\" method.\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     nth_nums([0,1,2],1) == [0,1,4]\nassert     nth_nums([0,1,2],2) == [0,1,4]\nassert     nth_nums([0,1,2],3) == [0,1,4]\nassert     nth_nums([0,1,2],4) == [0,1,4]\nassert     nth_nums([0,1,2],5) == [0,1,4]\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef find_min(nums):\n    '''\n    Write a function to find the minimum in a list.\n    '''\n    pass\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    for i in string:\n        if i.isupper():\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert not is_upper('a')\nassert is_upper('A')\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_upper('abcd') == False\nassert     is_upper('ABCD') == True\nassert     is_upper('ABCDabc') == False\nassert     is_upper('ABCDabcD') == False\nassert     is_upper('') == False\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_upper('Hello World') == True\nassert     is_upper('hello') == False\nassert     is_upper('HELLO') == True\nassert     is_upper('HELLO WORLD') == False\nassert     is_upper('HELLO WORLD!!!!') == False\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_upper('abcd') == False\nassert     is_upper('ABCD') == True\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_upper('hello') == False\nassert     is_upper('HELLO') == True\nassert     is_upper('HELLO') == False\nassert     is_upper('Hello') == True\nassert     is_upper('Hi') == True\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_upper('hello') == 'HELLO', 'failing'\nassert     is_upper('HELLO') == 'HELLO', 'failing'\nassert     is_upper('HELLO!') == 'HELLO', 'failing'\nassert     is_upper('!HELLO') == 'HELLO', 'failing'\nassert     is_upper('!HELLO,') == 'HELLO', 'failing'\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n\ndef is_lower(string):\n    '''\n    Write a python function to convert a given string to lowercase.\n    '''\n    pass\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_upper('Hello') == False, 'is_upper should return False for a string that is not in lower case.'\nassert     is_upper('HELLO') == True, 'is_upper should return True for a string that is in lower case.'\nassert     is_upper('HELLO!') == False, 'is_upper should return False for a string that has punctuation in it.'\nassert     is_upper('CODE AND MORE') == False, 'is_upper should return False for a string with numbers in it.'\nassert     is_upper('A-B-C') == True, 'is_upper should return True for an uppercase string containing only uppercase letters.'\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     swap_List([1,2,3,4]) == [4,3,2,1]\nassert     swap_List([-10,0,1]) == [-10,1,0]\nassert     swap_List([-10]) == [-10]\nassert     swap_List([]) == []"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     swap_List([1,2,3,4,5,6,7,8,9,10]) == [10,1,2,3,4,5,6,7,8,9]\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     swap_List([]) == None\nassert     swap_List([1]) == None\nassert     swap_List([1,2,3]) == None\nassert     swap_List([1,2,3,4]) == None\nassert     swap_List([1,2,3,4,5]) == None\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     swap_List([1,2,3]) == [3,1,2]\nassert     swap_List([]) == []\nassert     swap_List(['A','B','C']) == ['C','B','A']\nassert     swap_List([-2,-1,0,1,2]) == [-2,-1,0,1,2]"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     swap_List([0, 1, 2, 3, 4]) == [0, 4, 2, 3, 1], \"FAILED\"\nassert swap_List([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0], \"FAILED\"\nassert swap_List([0, 1, 2, 3, 4]) == [0, 1, 2, 3, 4], \"FAILED\"\nassert swap_List([0, 1, 2, 3, 4]) == [0, 1, 2, 3, 4], \"FAILED\"\nassert swap_List([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], \"FAILED\"\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nswap_List([1,2,3,4,5]) == [3,2,5,4,1]"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     swap_List([1, 2, 3]) == [3, 2, 1]\nassert swap_List([1, 3, 2]) == [2, 3, 1]\nassert swap_List([3, 2, 1]) == [1, 2, 3]\nassert swap_List([1, 1]) == [1, 1]\nassert swap_List([1]) == [1]\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    swap_List([1,2,3,4,5]) == [5,1,2,3,4]\n    swap_List([1,2,3,4,5,6]) == [5,1,2,3,6,4]\n    swap_List([]) == []\n    swap_List([1,2,3,4]) == [4,1,2,3]\n    swap_List([1,2,3,4,5]) == [5,1,2,3,4]\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     triangle_area(5) == math.sqrt(5*5*5)/2, \"Incorrect\"\nassert     triangle_area(10) == math.sqrt(10*10*10)/2, \"Incorrect\"\nassert     triangle_area(15) == math.sqrt(15*15*15)/2, \"Incorrect\"\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     triangle_area(1) == 1.0, \"OOPS, please check your code\"\nassert     triangle_area(4) == 1.5, \"OOPS, please check your code\"\nassert     triangle_area(0) == 0.0, \"OOPS, please check your code\"\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint('''\nIf your function triangle_area(4) returns the area of the largest triangle with a radius of 4, then your function is correct.\n''')"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     triangle_area(3) == 2.0\nassert     triangle_area(7) == 1.6"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert triangle_area(1) == 1\nassert triangle_area(3) == 4\nassert triangle_area(4) == 5\nassert triangle_area(10) == 12\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     triangle_area(1.2) == 1.40625\nassert     triangle_area(0.5) == 1.5\nassert     triangle_area(2) == 1.5\nassert     triangle_area(0) == 1\nassert     triangle_area(4) == 5\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     triangle_area(1) == 0.5, \"The result should be 0.5\"\nassert     triangle_area(0.5) == 1, \"The result should be 1\"\nassert     triangle_area(1.5) == 1.75, \"The result should be 1.75\"\n\ndef perimiter_triangle(a,b,c) :\n    '''\n    Write a python function to calculate the perimeter of the triangle whose all sides are given.\n    '''\n    pass\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ntriangle_area(1) == 0.5\nassert triangle_area(2) == 1.0\nassert triangle_area(3) == 0.5\nassert triangle_area(4) == 1.0\nassert triangle_area(5) == 0.5\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_First_Missing([1,2,3,4,5]) == 1, \"smallest missing number should be 1\"\nassert     find_First_Missing([1,2,5,8,11]) == 3, \"smallest missing number should be 3\"\nassert     find_First_Missing([5,8,11,1,3]) == 2, \"smallest missing number should be 2\"\nassert     find_First_Missing([1,2,3,4,5]) == 1, \"smallest missing number should be 1\"\nassert     find_First_Missing([1,2,5,8,11]) == 3, \"smallest missing number should be 3\"\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_First_Missing([1, 2, 4, 5, 6]) == 3\nassert     find_First_Missing([1, 2, 3, 4, 5, 7]) == 6\nassert     find_First_Missing([1, 2, 4, 5, 6]) == 3\nassert     find_First_Missing([1, 2, 3, 4, 5, 7]) == 6\nassert     find_First_Missing([1, 2, 3, 4, 5, 7]) == 6\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nfind_First_Missing([1, 2, 3, 6, 7, 8, 10]) == 5\nassert \nfind_First_Missing([1, 2, 3, 6, 7, 8, 10], 2, 6) == 4\n\ndef find_First_Missing(array):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_First_Missing([1,2,3,4,5]) == 1\nassert     find_First_Missing([1,2,3,4,5,6]) == 2\nassert     find_First_Missing([1,2,3,4,5,6,7]) == 3\nassert     find_First_Missing([1,2,3,4,5,6,7,8]) == 4\nassert     find_First_Missing([1,2,3,4,5,6,7,8,9]) == 5\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_First_Missing([1,2,3]) == 1\nassert     find_First_Missing([1,2,3,4]) == 2\nassert     find_First_Missing([1,2,3,4,5]) == 3\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_First_Missing([1,2,3,4,5])==1\nassert     find_First_Missing([1,2,3,5,6])==4\nassert     find_First_Missing([1,2,4,5,6])==3\nassert     find_First_Missing([1,2,3,5,6,8,9])==4\nassert     find_First_Missing([1,2,3,5,6,8,9,10])==4\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_First_Missing([1,2,3,4,6,7,8]) == 5\nassert     find_First_Missing([1,2,3,4,5,6,7,8,9,10]) == 6\nassert     find_First_Missing([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == 17\nassert     find_First_Missing([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 20\nassert     find_First_Missing([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    pass\n\n\ndef is_Valid_BST(root):\n    '''\n    Write a function that takes in the root of a binary tree and returns if it is a valid binary search tree.\n    '''\n    pass\n\ndef is_Valid_BST(root):\n    '''\n    Write a function that takes in the root of a binary tree and returns if it is a valid binary search tree.\n    '''\n    pass\n\n\ndef is_Valid_BST(root):\n    '''\n    Write a function that takes in the root of a binary tree and returns if it is a valid binary search tree.\n    '''\n    pass\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_First_Missing([1,2,3,4,5,6,7,8,10])==9\nassert     find_First_Missing([1,2,3,4,5,6,7,8,10,0])==1\nassert     find_First_Missing([10,20,30,40,50,60,70,80,90])==1\nassert     find_First_Missing([1,2,3,4,5,6,7,8,10,0])==1\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\",     \"Replace spaces in the middle\"\nassert     replace_spaces(\"Mr John Smith  \") == \"Mr%20John%20Smith\",     \"Replace spaces at start and end\"\nassert     replace_spaces(\"\") == \"%20\",     \"Replace spaces in empty string\"\nassert     replace_spaces(\"Hello\") == \"Hello\", \"Replace spaces only in the middle\"\nassert     replace_spaces(\"   Hello   \") == \"Hello%20\",     \"Replace spaces only in the middle\"\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nreplace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\nreplace_spaces(\"Hello World!\") == \"Hello%20World%20!\"\n\ndef replace_urls(string):\n    '''\n    Write a function to replace all URLs in the given string to '%20'.\n    '''\n    pass\n\nassert \n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\nassert     replace_spaces(\"Joe Smith    \") == \"Joe%20Smith\"\nassert     replace_spaces(\"123456\") == \"12345%206\"\nassert     replace_spaces(\"\") == \"\"\nassert     replace_spaces(\" \") == \"\"\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     replace_spaces(\"I am learning programming in python\") == \"I%20am%20learning%20programming%20in%20python\"\nassert     replace_spaces(\"we are learning to code in python\") == \"we%20are%20learning%20to%20code%20in%20python\"\nassert     replace_spaces(\"a simple test\") == \"a%20simple%20test\"\nassert     replace_spaces(\"\") == \"\"\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\nassert     replace_spaces(\"   hello world   \") == \"hello%20world\"\nassert     replace_spaces(\"hello world\") == \"hello%20world\"\n\n\ndef remove_spaces(string):\n    '''\n    Write a function to remove all spaces from the given string.\n    '''\n    pass\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\nassert     replace_spaces(\"\") == \"\"\nassert     replace_spaces(\" \") == \"%20\"\nassert     replace_spaces(\"Hello\") == \"Hello\"\nassert     replace_spaces(\"Hello World\") == \"Hello%20World\"\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     replace_spaces('hello world') == 'hello%20world', \"Should be 'hello%20world'\"\nassert     replace_spaces('hello world') == 'hello%20world', \"Should be 'hello%20world'\"\nassert     replace_spaces('hello') == 'hello', \"Should be 'hello'\"\nassert     replace_spaces('hello') == 'hello', \"Should be 'hello'\"\nassert     replace_spaces('hello world') == 'hello%20world', \"Should be 'hello%20world'\"\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef space_tokenize(string):\n    '''\n    Write a function that tokenizes a given string using spaces. \n    For example: space_tokenize(\"hello world\") => [\"hello\", \"world\"]\n    '''\n    pass\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(replace_spaces('this is a test'))\nprint(replace_spaces('This is a test'))\nprint(replace_spaces('This is a test.'))\nprint(replace_spaces('This is a test.'))\nprint(replace_spaces('This is a test.'))\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 4, 6, 8, 10], \"Wrong\"\nassert     Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == [2, 4, 6, 8, 10, 12, 14, 16], \"Wrong\"\nassert     Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == [2, 4, 6, 8, 10, 12, 14, 16, 18], \"Wrong\"\nassert     Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20], \"Wrong\"\nassert     Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22], \"Wrong\"\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     Split([1, 2, 3, 4]) == [2, 4], \"Should be: 2 4\"\nassert     Split([5, 6, 7, 8]) == [6, 8], \"Should be: 6 8\"\nassert     Split([10, 20, 30, 40]) == [20, 40], \"Should be: 20 40\"\nassert     Split([4, 5, 6, 7, 8, 9]) == [4, 6, 8, 10], \"Should be: 4 6 8 10\"\nassert     Split([4, 5, 6, 7, 8, 9, 10]) == [4, 6, 8, 10], \"Should be: 4 6 8 10\"\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Split([1,2,3,4,5]) == 2\nassert     Split([0,2,4,6,8]) == 4\nassert     Split([10,12,14,16,18]) == 6\nassert     Split([11,12,13,14,15]) == 5\nassert     Split([1,2,3,4,5]) == 1\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Split([1,2,3,4,5,6,7,8]) == [[2,4,6],[8]]\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Split([1,2,3,4,5]) == {2,4}, \"Wrong Answer\"\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nassert list(Split([1,2,3,4,5,6,7,8,9,10])) == [2,4,6,8,10]\nassert list(Split([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])) == [2,4,6,8,10,12,14]\nassert list(Split([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])) == [2,4,6,8,10,12,14,16]\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Split([]) == [], 'Empty list'\nassert     Split([1, 2, 3, 4]) == [2, 4], 'Invalid list'\nassert     Split([4, 2, 3]) == [4], 'Invalid list'\nassert     Split([2, 4, 6, 8]) == [2, 4, 6, 8], 'Invalid list'\nassert     Split([0, 2, 4, 6]) == [2, 4, 6], 'Invalid list'\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nif __name__ == '__main__':\n    list = [-1,2,3,-4,5,6]\n    print(\"list is \",list)\n    print(\"Even numbers are \",Split(list))\n    \n    list = [1,2,3,4,5,6,7,8]\n    print(\"list is \",list)\n    print(\"Even numbers are \",Split(list))"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef Create(list):\n    '''\n    Write a python function to find odd numbers from a list of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef four_squares(grid):\n    '''\n    Given a grid of 1s and 0s, check if the grid is valid such that a 4-square is formed by all 1s.\n    \n    Return 1 if a 4-square is formed by all 1s, otherwise return 0.\n\n    Constraints:\n        1 <= |grid| <= 20\n        grid[i][j] == 1 or grid[i][j] == 0\n    '''\n    # corner checking\n    if len(grid)!= len(grid[0]):\n        return 0\n    \n    # traversal\n    def dfs(grid, x, y, maxx, maxy):\n        if x < 0 or x >= maxx or y < 0 or y >= maxy or grid[x][y]!= 1:\n            return False\n        grid[x][y] = 0\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            if dfs(grid, x + dx, y + dy, maxx, maxy):\n                return True\n        return False\n    \n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if dfs(grid, i, j, len(grid), len(grid[0])):\n                return 1\n    return 0\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    pass\n\ndef adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    pass\n\ndef adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    pass\n\ndef adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    pass\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nadjac((3, 4), \n    [\n        (2, 5), \n        (4, 6)\n    ]) == [\n        (3, 5), \n        (4, 6)\n    ]\nassert \nadjac((2, 3), \n    [\n        (1, 2), \n        (3, 4), \n        (5, 6), \n        (7, 8), \n        (9, 10)\n    ]) == [\n        (1, 2), \n        (3, 4), \n        (5, 6)\n    ]\nassert \nadjac((2, 4), \n    [\n        (1, 2), \n        (3, 4), \n        (5, 6), \n        (7, 8), \n        (9, 10)\n    ]) == [\n        (1, 2), \n        (3, 4), \n        (5, 6), \n        (7, 8)\n    ]\nassert \nadjac((1, 2), \n    [\n        (1, 2), \n        (3, 4), \n        (5, 6), \n        (7, 8), \n        (9, 10)\n    ]) == []\nassert \nadjac((3, 5), \n    [\n        (1, 2), \n        (3, 4), \n        (5, 6), \n        (7, 8), \n        (9, 10)\n    ]) == []\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     adjac((0,0)) ==     [(0,1), (1,0), (1,-1), (0,-1), (-1,0), (-1,1), (0,1), (1,1)]\nassert adjac((0,0), [(1,1)]) == [(1,1)]\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     replace_spaces('') == ''\nassert     replace_spaces(' ') == '_'\nassert     replace_spaces('abc') == 'abc'\nassert     replace_spaces('a b') == 'a_b'\nassert     replace_spaces('a b c') == 'a_b_c'\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     replace_spaces(\"Hi      Hello     World \")     ==     \"Hi_Hello_World\", \"Should be 'Hi_Hello_World'\"\nassert     replace_spaces(\"Hello World\")     ==     \"_World\", \"Should be '_World'\"\nassert     replace_spaces(\"\")     ==     \"\", \"Should be ''\"\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     replace_spaces(\"abcd\")     == \"abcd\", \"replace_spaces(\\\"abcd\\\") incorrect\"\nassert     replace_spaces(\"_ _\")     == \"__\", \"replace_spaces(\\\"_ _\\\") incorrect\"\nassert     replace_spaces(\"a b\")     == \"a_b\", \"replace_spaces(\\\"a b\\\") incorrect\"\nassert     replace_spaces(\"a b c\")     == \"a_b_c\", \"replace_spaces(\\\"a b c\\\") incorrect\"\nassert     replace_spaces(\"a b c d\") == \"a_b_c_d\", \"replace_spaces(\\\"a b c d\\\") incorrect\"\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     replace_spaces('123') == '1_2_3'\nassert     replace_spaces('123 _') == '1_2_3'\nassert     replace_spaces('123 _ _') == '1_2_3'\nassert     replace_spaces('123 _ _ _') == '1_2_3'\nassert     replace_spaces('123 _ _ _ _') == '1_2_3'\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     replace_spaces('karthik ') == 'k_arthik'\nassert     replace_spaces('karthik _ ') == 'k_arthik_'\nassert     replace_spaces('karthik _ _') == 'k_arthik_'\nassert     replace_spaces('karthik _ k') == 'k_arthik_k'\nassert     replace_spaces('karthik_ k') == 'k_arthik_k'\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     replace_spaces(\" \") == \"_\", \"replace_spaces should replace all the spaces in a string with an underscore\"\nassert     replace_spaces(\"  \") == \"_\", \"replace_spaces should replace all the spaces in a string with an underscore\"\nassert     replace_spaces(\"   \") == \"_\", \"replace_spaces should replace all the spaces in a string with an underscore\"\nassert     replace_spaces(\"     \") == \"_\", \"replace_spaces should replace all the spaces in a string with an underscore\"\nassert     replace_spaces(\"  Hello world  \") == \"_H_rldw_rld_\", \"replace_spaces should replace all the spaces in a string with an underscore\"\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     replace_spaces(\"Hello World\") == \"Hello_World\"\nassert     replace_spaces(\"Hello_World\") == \"Hello World\"\nassert     replace_spaces(\" \") == \"_\"\n\ndef check_up(text):\n    '''\n    Write a function that checks if a string has only uppercase or only lowercase letters.\n    '''\n    pass"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     replace_spaces('This is a test') == 'This_is_a_test', 'test 1'\nassert     replace_spaces('This is a test. ') == 'This_is_a_test.', 'test 2'\nassert     replace_spaces('This is a test. ') == 'This_is_a_test.', 'test 3'\nassert     replace_spaces('This is a test') == 'This_is_a_test', 'test 4'\nassert     replace_spaces('') == '', 'test 5'\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     move_zero([5, 1, 1, 0, 2, 0, 0, 1, 3]) == [5, 1, 1, 1, 2, 1, 3, 0, 0]\nassert     move_zero([0, 1, 2, 0, 1, 2, 0, 1, 2, 0]) == [0, 1, 2, 1, 2, 1, 2, 0, 0, 0]\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     move_zero([1,2,0,3,4,0,5]) == [1,2,3,4,5,0,0]\nassert move_zero([1,2,0,0,4,0,5]) == [1,2,4,5,0,0,0]\nassert move_zero([0,0,1,2,0,3,4,0,5]) == [1,2,3,4,0,5,0,0,0]\nassert move_zero([1,2,3,4,5,0,0,0,0]) == [1,2,3,4,5,0,0,0,0]\nassert move_zero([0,0,1,2,3,4,5,0,0]) == [1,2,3,4,5,0,0,0,0]\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     move_zero([0, 0, 1, 2, 3, 4, 5, 6, 0, 0]) == [0, 1, 2, 3, 4, 5, 6, 0, 0, 0]\nassert     move_zero([0, 1, 2, 0, 1, 2, 0]) == [0, 1, 2, 0, 1, 2, 0]\nassert     move_zero([1, 2, 3, 4, 0, 0, 1]) == [1, 2, 3, 4, 0, 0, 1]\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     move_zero([1, 2, 0, 1, 3, 0, 0, 2]) == [1, 2, 1, 3, 0, 0, 0, 2]\nassert     move_zero([0, 0, 0, 0]) == [0, 0, 0, 0]\nassert     move_zero([]) == []\nassert     move_zero([1, 2, 0, 1, 3, 0, 0, 2, 0, 1, 3, 0, 0, 0, 2]) == [1, 2, 1, 3, 0, 0, 0, 2, 1, 3, 0, 0, 0, 2]\nassert     move_zero([1, 0, 2, 0, 1, 3, 0, 0, 2]) == [1, 1, 2, 0, 1, 3, 0, 0, 2]\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == '__main__':\n    \n    # Test 1\n    test_cases = [[],\n                  [1, 2, 3],\n                  [0, 1, 2, 3, 4, 5, 6],\n                  [1, 2, 3, 4, 0, 5, 6],\n                  [1, 2, 0, 5, 6, 3, 4]]\n    \n    for num_list in test_cases:\n        assert move_zero(num_list) == num_list, \"Wrong Answer\"\n\n    print(\"Passed all test cases\")\n    print(\"You're all set!\""
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     move_zero([0,1,2,3,4,0,0,7,0,1]) == [1,2,3,4,0,0,7,0,1,0], 'incorrect'\nassert     move_zero([0,1,2,3,4,0,0,7,0,1,0]) == [1,2,3,4,0,0,7,0,1,0,0], 'incorrect'\nassert     move_zero([0,0,0,0,0,0]) == [0,0,0,0,0,0], 'incorrect'\nassert     move_zero([]) == [], 'incorrect'\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    "
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     pair_xor_Sum([2,3,4,8,5,6]) == 26\nassert pair_xor_Sum([2,3,4,8,5,6],4) == 26\nassert pair_xor_Sum([3,4,5,6],2) == 10\nassert pair_xor_Sum([3,4,5,6],1) == 10\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\" : \n    arr = [3,5,2,7,4,8] \n    n = len(arr) \n    print(f\"Sum of XOR of all pairs = {pair_xor_Sum(arr,n)}\")\n    print(\"This code is called by pair_xor_Sum()\")\n    print(\"This is the same as:\",sum([arr[i]^arr[j] for i in range(n) for j in range(n)]))\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef pair_xor_Diff(arr,n) : \n    '''\n    Write a python function to find the difference between the XOR of all pairs of numbers in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert pair_xor_Sum([1,2,3,4,5,6],6)==14\nassert pair_xor_Sum([-1,-2,-3,4,-5,-6],6)==2\nassert pair_xor_Sum([1,2,3,4,5,6],7)==11\nassert pair_xor_Sum([1,2,3,4,5,6],8)==4\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     pair_xor_Sum([1,2,3,4],4) == 5, 'Test Failed'\nassert pair_xor_Sum([1,2,3,4],3) == 4, 'Test Failed'\nassert pair_xor_Sum([1,2,3,4],2) == 7, 'Test Failed'\nassert pair_xor_Sum([1,2,3,4],1) == 3, 'Test Failed'\nassert pair_xor_Sum([1,2,3,4],0) == 0, 'Test Failed'\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     pair_xor_Sum([1,2,3,4]) == 14, 'Wrong output for pair_xor_Sum([1,2,3,4])'\nassert pair_xor_Sum([-1,-2,-3,-4]) == 14, 'Wrong output for pair_xor_Sum([-1,-2,-3,-4])'\nassert pair_xor_Sum([1,3,5]) == 7, 'Wrong output for pair_xor_Sum([1,3,5])'\nassert pair_xor_Sum([1,3,6]) == 14, 'Wrong output for pair_xor_Sum([1,3,6])'\nassert pair_xor_Sum([1,3,6,5]) == 7, 'Wrong output for pair_xor_Sum([1,3,6,5])'\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     pair_xor_Sum([1,2,3,4],4) == 5\nassert pair_xor_Sum([1,3,5,4],5) == 5\nassert pair_xor_Sum([2,4,3,6,7],7) == 10\n\n\n\ndef pair_xor_Sum2(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \npair_xor_Sum([10, 20, 40], 2) == 300, \"Wrong answer\"\n\ndef pair_xor_Sum_2(arr, n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     pair_xor_Sum([1,2,3,4]) == 5\nassert     pair_xor_Sum([1,2,3,4,5]) == 10\nassert     pair_xor_Sum([2,3,4,5,1]) == 1\nassert     pair_xor_Sum([2,3,4,5,1,2,3,4,5]) == 7\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    heap_sort([1,2,3,4,5])\n    [1,2,3,4,5]\n    heap_sort([3,4,5,1,2])\n    [1,2,3,4,5]\n    heap_sort([1,1,1,2,2])\n    [1,1,1,2,2]\n    heap_sort([1,1,1,1,1,2,2,2])\n    [1,1,1,1,1,2,2,2]\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     heap_sort([3, 2, 4, 5, 1]) == [1, 2, 3, 4, 5]\nassert     heap_sort([]) == []\nassert     heap_sort(['c']) == ['c']\n\ndef heap_insert(iterable):\n    '''\n    Write a function to insert the given item into the heap.\n    '''\n    pass\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n'''\nA heap sort based on \nhttps://github.com/eschleich/heapsort/blob/master/heapsort.py\n'''\ndef heapify(arr):\n    '''\n    To heapify subtree rooted at index i.\n    n is size of heap\n    '''\n    pass\n\ndef build_heap(arr):\n    '''\n    Build a heap.\n    '''\n    pass\n\ndef heappop(heap):\n    '''\n    Remove and return the smallest value from the heap.\n    '''\n    pass\n\ndef heappush(heap, value):\n    '''\n    Push the value onto the heap, maintaining the heap invariant.\n    '''\n    pass\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nimport heapq\nheapq.heapify(iterable)\n\nimport heapq\nimport random\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nheap_sort([1,4,3,2,5]) == [1,2,3,4,5]\n\ndef get_median(x):\n    '''\n    Write a function that returns the median of the given list of integers.\n    '''\n    pass\n\ndef median_of_medians(iterable, k=None):\n    '''\n    Write a function that returns the k-th element of the given list of integers.\n    '''\n    pass\n\ndef median(iterable):\n    '''\n    Write a function that returns the median of the given list of integers.\n    '''\n    pass\n\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    pass\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    # heap_sort([0]) == [(0,)]\n    # heap_sort([1,0,2]) == [(0,1),(2,0)]\n    # heap_sort([9,6,5,4,3,2,1]) == [(1,9),(2,6),(3,5),(4,4),(5,3),(6,2),(7,1)]\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef heapsort_recur(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    pass\n\ndef min_heapify(A, i):\n    '''\n    helper function for min_heapify\n    '''\n    pass\n\ndef build_min_heap(A):\n    '''\n    helper function for min_heapify\n    '''\n    pass\n\ndef heap_sort_recur(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    pass\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     noprofit_noloss(1000,100) == True\nassert     noprofit_noloss(100,100) == False\nassert     noprofit_noloss(100,1) == False\nassert     noprofit_noloss(100,99) == False\nassert     noprofit_noloss(100,0) == False\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     noprofit_noloss(16, 5) == True\nassert     noprofit_noloss(9, 0) == True\nassert     noprofit_noloss(13, 5) == True\nassert     noprofit_noloss(17, 5) == False\nassert     noprofit_noloss(15, 10) == True\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     noprofit_noloss(0,0) == True, \"0 should be a profit\"\nassert     noprofit_noloss(100,100) == True, \"100 should be a profit\"\nassert     noprofit_noloss(-100,100) == False, \"100 should not be a profit\"\nassert     noprofit_noloss(-1,-1) == False, \"negative amount should not be a profit\"\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     noprofit_noloss(50000,90000) == True, \"0.99 is less than 1\"\nassert     noprofit_noloss(90000,70000) == False, \"0.99 is greater than 1\"\nassert     noprofit_noloss(150000,90000) == True, \"1.15 is less than 1\"\nassert     noprofit_noloss(90000,150000) == True, \"1.15 is greater than 1\"\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     noprofit_noloss(100, 50) == True\nassert     noprofit_noloss(150, 200) == False\nassert     noprofit_noloss(200, 500) == False\n\ndef noprofit_nloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has profit and no loss\n    '''\n    pass\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     noprofit_noloss(200,15) == True\nassert     noprofit_noloss(300,10) == True\nassert     noprofit_noloss(500,100) == True\nassert     noprofit_noloss(200,100) == False\nassert     noprofit_noloss(200,200) == False\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     noprofit_noloss(130,110) == False\nassert     noprofit_noloss(100,110) == True\nassert     noprofit_noloss(100,100) == True\nassert     noprofit_noloss(100,100) == True\nassert     noprofit_noloss(110,130) == True\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     noprofit_noloss(20,10) == True, 'noprofit_noloss(20,10) should be True'\nassert     noprofit_noloss(20,20) == False, 'noprofit_noloss(20,20) should be False'\nassert     noprofit_noloss(10,11) == False, 'noprofit_noloss(10,11) should be False'\nassert     noprofit_noloss(10,1) == False, 'noprofit_noloss(10,1) should be False'\nassert     noprofit_noloss(10,0) == True, 'noprofit_noloss(10,0) should be True'\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     noprofit_noloss(15,10) == False, \"First\"\nassert     noprofit_noloss(15,11) == False, \"Second\"\nassert     noprofit_noloss(15,12) == False, \"Third\"\nassert     noprofit_noloss(15,15) == True, \"Fourth\"\nassert     noprofit_noloss(15,16) == False, \"Fifth\"\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef main():\n    '''\n    Write a function to calculate the wind chill index for any given temperature in degrees Fahrenheit and wind velocity in kilometers per hour.\n    '''\n    # write your code below\n    print(wind_chill(300,80))\n    print(wind_chill(200,70))\n    print(wind_chill(250,100))\n\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     wind_chill(2,30) == (14.3, True)\nassert     wind_chill(1,15) == (10.4, True)\nassert     wind_chill(0,15) == (10.4, True)\nassert     wind_chill(0,16) == (10.5, True)\nassert     wind_chill(1,16) == (11.6, True)\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     wind_chill(1.3, 20) == 'Out of bounds, please enter a wind velocity between 1 and 2.5 km/h.', 'Incorrect wind_chill function'\nassert wind_chill(1.4, 20) == 'Out of bounds, please enter a wind velocity between 1 and 2.5 km/h.', 'Incorrect wind_chill function'\nassert wind_chill(0, 20) == 'Out of bounds, please enter a wind velocity between 1 and 2.5 km/h.', 'Incorrect wind_chill function'\nassert wind_chill(4, 20) == 'Out of bounds, please enter a wind velocity between 1 and 2.5 km/h.', 'Incorrect wind_chill function'\nassert wind_chill(10.5, 20) == 'Out of bounds, please enter a wind velocity between 1 and 2.5 km/h.', 'Incorrect wind_chill function'\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     wind_chill(1,60) == '68.9'\nassert     wind_chill(0,100) == '0'\nassert     wind_chill(-2,20) == '-28.8'\nassert     wind_chill(12.3,30) == '108.6'\nassert     wind_chill(12.3,35) == '89.1'\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     wind_chill(10, 5) == 10\nassert     wind_chill(10, 15) == 10\nassert     wind_chill(0, -10) == 32\nassert     wind_chill(0, -5) == 32\nassert     wind_chill(3, 5) == 18.0\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     wind_chill(6, 30) == 32\nassert     wind_chill(3, -7) == 35\nassert     wind_chill(1.5, -1) == 32\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sample_nam(['Aakash', 'Arya', 'Riya', 'Akash']) == 3\nassert     sample_nam(['Aakash', 'Arya', 'Riya', 'Akash', 'Akshaya', 'Akash']) == 7\nassert     sample_nam(['Aakash', 'Arya', 'Riya', 'Akash', 'Akshaya']) == 5\nassert     sample_nam(['Akash', 'Akshaya', 'Arya', 'Riya']) == 5\nassert     sample_nam(['Aakash', 'Arya', 'Riya', 'Akash', 'Akshaya', 'Akash']) == 10\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sample_nam(['applee', 'apple', 'pep']) == 5\nassert     sample_nam(['a', 'a']) == 1\nassert     sample_nam(['A', 'a']) == 2\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    pass\n\n    sample_names = [\"Alex\", \"John\", \"Eric\", \"George\", \"Michael\"]\n    # Your Code Here\n    # Remove all the names that start with a lowercase letter\n    new_list = []\n    for name in sample_names:\n        if name[0].islower():\n            continue\n        else:\n            new_list.append(name)\n    return sum(len(x) for x in new_list)"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sample_nam([\"Ivan\", \"ivan\", \"Ivan\", \"Ivan\"]) == 6, \"Should be 6\"\nassert     sample_nam([\"Ivan\", \"ivan\", \"Ivan\", \"Ivan\"]) == 4, \"Should be 4\"\n\n'''\nWrite a function that counts the number of times a given word is present in a string.\n'''\ndef count_word(word, string):\n    '''\n    Write a function that counts the number of times a given word is present in a string.\n    '''\n    pass\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sample_nam([\"A\", \"a\", \"B\", \"b\", \"C\", \"c\"]) == 2, \"error\"\nassert     sample_nam([\"A\", \"a\"]) == 0, \"error\"\nassert     sample_nam([\"A\", \"a\", \"a\"]) == 2, \"error\"\nassert     sample_nam([\"A\", \"a\", \"A\", \"a\"]) == 2, \"error\"\nassert     sample_nam([\"A\", \"A\", \"a\", \"a\", \"a\"]) == 2, \"error\"\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sample_nam([]) == 0, \\\n            'The function should return 0 if the list is empty'\n\nassert     sample_nam([]) == 0, \\\n            'The function should return 0 if the list is empty'\n\nassert     sample_nam(['John']) == 1, \\\n            'The function should return 1 if the list has only one element'\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sample_nam([]) == 0, \"No names given\"\nassert     sample_nam([\"Bob\", \"Bob\", \"Bob\"]) == 3, \"All lowercase\"\nassert     sample_nam([\"Bob\", \"Bob\", \"bob\"]) == 3, \"Not all lowercase\"\nassert     sample_nam([\"Bob\", \"Bob\", \"b\"]) == 2, \"All lowercase\"\nassert     sample_nam([\"Bob\", \"Bob\", \"Bob\"]) == 2, \"All lowercase\"\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sample_nam([]) == 0, \"Empty list\"\nassert     sample_nam([]) == 0, \"Non-empty list\"\nassert     sample_nam(['']) == 0, \"Only lowercase letters\"\nassert     sample_nam(['j']) == 0, \"Only lowercase letters\"\nassert     sample_nam(['s']) == 1, \"Only lowercase letters\"\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sample_nam([]) == 0, \"Wrong answer for sample_nam([])\"\nassert sample_nam([]) == 0, \"Wrong answer for sample_nam([])\"\nassert sample_nam([\"\"]) == 0, \"Wrong answer for sample_nam(['',''])\"\nassert sample_nam([\"a\", \"a\"]) == 0, \"Wrong answer for sample_nam(['a','a'])\"\nassert sample_nam([\"aaa\", \"a\"]) == 0, \"Wrong answer for sample_nam(['aaa','a'])\"\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_parenthesis(\" (hi) \") == \"hi\"\nassert     remove_parenthesis(\"hi ( hi)\") == \"hi hi\"\nassert     remove_parenthesis(\"hi(hi)\") == \"hi\"\nassert     remove_parenthesis(\"hello(hi)\") == \"hello hi\"\nassert     remove_parenthesis(\"hello(hi)\") == \"hello hi\"\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_parenthesis(\"(this is (a ) test).\") == \"this is a test\"\nassert     remove_parenthesis(\"a simple test\") == \"simple test\"\nassert     remove_parenthesis(\"a simple test (with (parenthesis))\") == \"simple test (with parenthesis)\"\nassert     remove_parenthesis(\"another simple test\") == \"another simple test\"\nassert     remove_parenthesis(\"another simple test (with (parenthesis)\") == \"another simple test (with parenthesis)\"\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    # correct\n    remove_parenthesis('(name)(price)') == 'name price'\n    remove_parenthesis('name(price)') == 'name price'\n    remove_parenthesis('name(price)') == 'name price'\n    remove_parenthesis('name price)') == 'name price'\n    remove_parenthesis('name price)') == 'name price'\n    remove_parenthesis('name price (') == 'name price'\n    remove_parenthesis('name price)') == 'name price'\n    remove_parenthesis('name price(') == 'name price'\n    remove_parenthesis('name price )') == 'name price'\n    remove_parenthesis('name price ( )') == 'name price'\n    remove_parenthesis('name price )') == 'name price'\n    remove_parenthesis('name price )') == 'name price'\n    remove_parenthesis('name') == 'name'\n    remove_parenthesis(' )') == ')'\n    remove_parenthesis('( )') == '('\n    remove_parenthesis(' ) )') ==')'\n    remove_parenthesis(' ) ) )') ==')'\n    remove_parenthesis(' ) ) ) ) ) ) )') ==')'\n    remove_parenthesis('a)') == 'a'\n    remove_parenthesis(' )') ==')'\n    remove_parenthesis
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_parenthesis(\"\") == \"\"\nassert     remove_parenthesis(\"( )\") == \"\"\nassert     remove_parenthesis(\"( ( ) ) )\") == \"()\"\nassert     remove_parenthesis(\"( ( ) ) ) ( )\") == \"()\"\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_parenthesis('hello(world)') == 'hello world'\nassert     remove_parenthesis('hello()') == 'hello'\nassert     remove_parenthesis('hello(world, and)') == 'hello world and'\nassert     remove_parenthesis('hello)') == 'hello)'\nassert     remove_parenthesis('hello()world') == 'helloworld'\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_parenthesis(\"(1+2)\")    == '1+2'\nassert     remove_parenthesis(\"(1+2+3)\")    == '1+2+3'\nassert     remove_parenthesis(\"(1+2+3+4)\")    == '1+2+3+4'\nassert     remove_parenthesis(\"(1+2+3+4+5)\")    == '1+2+3+4+5'\nassert     remove_parenthesis(\"(1+2+3+4+5+6)\")    == '1+2+3+4+5+6'\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_parenthesis(\"(a)(b)\") == \"a\", \"Incorrect\"\nassert     remove_parenthesis(\"ab)()\") == \"ab\", \"Incorrect\"\nassert     remove_parenthesis(\"a(b)\") == \"a\", \"Incorrect\"\nassert     remove_parenthesis(\"\") == \"\", \"Incorrect\"\n\ndef remove_parenthesis_2(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pass\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(remove_parenthesis(\"a (b) d (e)f\"))\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_parenthesis(('(a)', 'b)') == ('a', 'b')\nassert     remove_parenthesis(('(a)', 'b)', 'c)', 'd)') == ('a', 'b', 'c', 'd')\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    remove_parenthesis(\"1+2-3+(4-5)-6\") == 1+2-3+4-5-6\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef is_nonagonal_2(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_nonagonal(1) == 1, 'is_nonagonal function is wrong'\nassert     is_nonagonal(2) == 3, 'is_nonagonal function is wrong'\nassert     is_nonagonal(3) == 4, 'is_nonagonal function is wrong'\nassert     is_nonagonal(4) == 5, 'is_nonagonal function is wrong'\nassert     is_nonagonal(5) == 6, 'is_nonagonal function is wrong'\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n'''\nQ. 18. Write a function to find the nth number \n    where the sum of the factorials of the digits \n    of the number are odd.\n'''\ndef factorial(n): \n    '''\n    This function calculates the factorial of the \n    nth number.\n    '''\n    pass\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_nonagonal(1) == 1\nassert     is_nonagonal(2) == 4\nassert     is_nonagonal(3) == 7\nassert     is_nonagonal(4) == 10\nassert     is_nonagonal(5) == 13\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_match_wordz_middle('This is a text with z in it.') == True\nassert     text_match_wordz_middle('This is a text with z in it. ') == True\nassert     text_match_wordz_middle('This is a text with z in it.') == False\nassert     text_match_wordz_middle('This is a text with z in it') == False\nassert     text_match_wordz_middle('This is a text with z in it ') == False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_match_wordz_middle('the quick brown fox jumps over the lazy dog') == True\nassert     text_match_wordz_middle('the fox jumpz over the lazy dog') == True\nassert     text_match_wordz_middle('the quick brown fox jumps z: over the lazy dog') == True\nassert     text_match_wordz_middle('the fox jumps over z: the lazy dog') == True\nassert     text_match_wordz_middle('the lazy dog') == True\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_wordz_middle('') == False\nassert    text_match_wordz_middle('z') == False\nassert    text_match_wordz_middle('abd') == False\nassert    text_match_wordz_middle('abdz') == True\nassert    text_match_wordz_middle('abdzr') == True\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_match_wordz_middle('This is a test.') == False\nassert     text_match_wordz_middle('This is a test.') == True\nassert     text_match_wordz_middle('This is a test.') == False\nassert     text_match_wordz_middle('This is a test.') == False\nassert     text_match_wordz_middle('This is a test.') == False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_match_wordz_middle(\"let's see if the function works\") == \"let\"\nassert text_match_wordz_middle(\"it's possible to write a function that makes this function work\") == \"it\"\nassert text_match_wordz_middle(\"we can use this function if we want to convert numbers into words\") == \"we\"\nassert text_match_wordz_middle(\"the function should return the string of the words in the string\") == \"the function\"\nassert text_match_wordz_middle(\"this is to test the function\") == \"\"\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_wordz_middle(\"abz\") == False\nassert text_match_wordz_middle(\"abzd\") == True\nassert text_match_wordz_middle(\"abzde\") == True\nassert text_match_wordz_middle(\"abzdea\") == True\nassert text_match_wordz_middle(\"abzdeae\") == True\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_wordz_middle('z') == 'z'\nassert     text_match_wordz_middle('zz') == 'zz'\nassert     text_match_wordz_middle('zz') == 'z'\nassert     text_match_wordz_middle('z') == 'z'\nassert     text_match_wordz_middle('zzzzz') == 'z'\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_match_wordz_middle(\"z\")\nassert     text_match_wordz_middle(\"zz\")\nassert     text_match_wordz_middle(\"zaba\")\nassert     text_match_wordz_middle(\"zaba of ab\")\nassert     text_match_wordz_middle(\"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    text_match_wordz_middle('Hello World') == True\n    text_match_wordz_middle('Hi World') == True\n    text_match_wordz_middle('Helloworld') == True\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle('Hi') == True\n    text_match_wordz_middle('Hi') == False\n    text_match_wordz_middle("
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert text_match_wordz_middle('zebra') == True\nassert text_match_wordz_middle('dog') == False\nassert text_match_wordz_middle('1dog') == False\nassert text_match_wordz_middle('1zebra') == False\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef find_Missing_Elements(input, size): \n    '''\n    Write a python function to find the missing elements in the given array.\n    '''\n    pass\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     reverse_Array_Upto_K([1, 2, 3], 2) == [3, 2, 1], \"reverse_Array_Upto_K incorrect\"\nassert     reverse_Array_Upto_K([1, 2, 3], 3) == [1, 2, 3], \"reverse_Array_Upto_K incorrect\"\nassert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 4) == [5, 4, 3, 2, 1], \"reverse_Array_Upto_K incorrect\"\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     reverse_Array_Upto_K([1,2,3], 2) == [3,2,1], \"Should be [3,2,1]\"\nassert     reverse_Array_Upto_K([1,2,3], 4) == [1,2,3], \"Should be [1,2,3]\"\nassert     reverse_Array_Upto_K([1,2,3], 1) == [2,3,1], \"Should be [2,3,1]\"\nassert     reverse_Array_Upto_K([1,2,3], 0) == [1,2,3], \"Should be [1,2,3]\"\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nreverse_Array_Upto_K([1,2,3,4,5,6], 4) == [5,6,3,4,1,2] \nassert \nreverse_Array_Upto_K([1,2,3,4,5], 0) == [] \nassert \nreverse_Array_Upto_K([1,2,3,4,5], 5) == [1,2,3,4,5] \nassert \nreverse_Array_Upto_K([1,2,3,4], -1) == [1,2,3,4] \nassert \nreverse_Array_Upto_K([1,2,3,4,5,6], 5) == [1,2,3,4,5] \n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n'''\n12) \nWrite a function to print the last element of the following list. \n[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]\n'''\n\ndef printLastElement():\n    '''\n    Write a python function to print the last element of the following list. \n    [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]\n    '''\n    pass\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     add_dict_to_tuple((1,2,3,4,5), {\"a\": 1, \"b\": 2, \"c\": 3}) == (1,2,3,4,5)\nassert     add_dict_to_tuple((1,2,3,4,5), {\"a\":1, \"b\": 2, \"c\":3, \"d\":4, \"e\":5}) == (1,2,3,4,5)\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add_dict_to_tuple(test_tup, test_dict) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add_dict_to_tuple(tup, tup_dict) == ('a', 'b', ('c', 'd'), {'e': 'f'})\n\nassert     add_dict_to_tuple(tup, ('e', 'f', 'g', 'h')) == ('a', 'b', ('c', 'd'), {'e': 'f', 'g': 'h'})\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add_dict_to_tuple(('a', 'b', 'c'), {'a': 'x', 'b': 'y', 'c': 'z'}) == ('a', 'b', 'c', 'x', 'y', 'z')\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_dict_to_tuple((1,2,3), {'1':'one','2':'two','3':'three'}) == (1,2,3,{'1':'one','2':'two','3':'three'})\nassert    add_dict_to_tuple((2,3), {'1':'one','2':'two','3':'three'}) == (2,3,{'1':'one','2':'two','3':'three'})\nassert    add_dict_to_tuple((1,2), {'1':'one','2':'two'}) == (1,2,{'1':'one','2':'two'})\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     add_dict_to_tuple((1, 2), {}) == (1, 2, {})\nassert     add_dict_to_tuple((1, 2), {'a': 1, 'b': 2}) == (1, 2, {'a': 1, 'b': 2})\nassert     add_dict_to_tuple((1,), {'a': 1, 'b': 2}) == (1, {'a': 1, 'b': 2})\n\n\n'''\n[5]\nYou are given a list of tuples. Each tuple contains three values:\n    First value: A String (single-word expression)\n    Second value: An integer\n    Third value: A list of strings\nWrite a function to add the integers in a string to a list. \n'''"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert add_dict_to_tuple(test_tup, test_dict) == (test_tup)\nassert add_dict_to_tuple(test_tup, test_dict) == (test_tup)\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     add_dict_to_tuple((), {}) == ()\nassert     add_dict_to_tuple((1,), {}) == (1,)\nassert     add_dict_to_tuple((\"a\",), {}) == (\"a\",)\nassert     add_dict_to_tuple((1,2,3), {}) == (1,2,3)\nassert     add_dict_to_tuple((1,2,3), {\"A\":\"B\"}) == (1,2,3,{\"A\":\"B\"})"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     add_dict_to_tuple((\"test1\",\"test2\",\"test3\"), {\"test1\":\"test1value\", \"test2\":\"test2value\", \"test3\":\"test3value\"}) == ((\"test1\",\"test2\",\"test3\"), {\"test1\":\"test1value\", \"test2\":\"test2value\", \"test3\":\"test3value\"})\nassert     add_dict_to_tuple((\"test1\",\"test2\",\"test3\"), {\"test1\":\"test1value\", \"test2\":\"test2value\", \"test3\":\"test3value\"}) == ((\"test1\",\"test2\",\"test3\"), {\"test1\":\"test1value\", \"test2\":\"test2value\", \"test3\":\"test3value\"})\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add_dict_to_tuple(('test', '1'), {\"1\": 1, \"2\": 2}) == ('test', '1', 1, 2)\nassert add_dict_to_tuple(('test', '1'), {\"1\": 1, \"2\": 2})!= ('test', '2', 1, 2)\nassert add_dict_to_tuple((1, 2), {\"1\": 1, \"2\": 2})!= (1, 2, 1, 2)\nassert add_dict_to_tuple((1, 2), {\"1\": 1, \"2\": 2})!= (1, 2, 1, 2)\nassert add_dict_to_tuple((1, 2), {\"1\": 1, \"2\": 2})!= (1, 2, 1, 2)\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     maxAverageOfPath([[1, 3, 1],\n                            [2, 5, 2],\n                            [1, 5, 2]]) == 3, 'Wrong maxAverageOfPath output'\nassert     maxAverageOfPath([[2, 1, 2],\n                            [3, 1, 3],\n                            [2, 2, 1]]) == 4.5, 'Wrong maxAverageOfPath output'\nassert     maxAverageOfPath([[2, 1, 2],\n                            [3, 1, 3],\n                            [2, 1, 1]]) == 2.5, 'Wrong maxAverageOfPath output'\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nif __name__ == \"__main__\":\n    cost = [[1,5,2,3],[2,3,1,4],[1,2,3,5],[1,4,2,5],[1,6,1,5]]\n    print(maxAverageOfPath(cost))\n    assert(5 == maxAverageOfPath(cost))\n    print(\"Coding complete? Click 'Check' to earn cool rewards!\""
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     maxAverageOfPath([\n[10, 5, 9],\n[12, 8, 14],\n[7, 13, 15]\n]) == 17.0\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     maxAverageOfPath([[0,1,1],[1,0,1],[1,1,0]]) == 2.0, \"WRONG\"\nassert maxAverageOfPath([[0,1,1],[1,0,1],[1,1,0]]) == 1.0, \"WRONG\"\nassert maxAverageOfPath([[1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1]]) == 2.0, \"WRONG\"\nassert maxAverageOfPath([[1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1]]) == 2.0, \"WRONG\"\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ncost = [[1, 3],\n    [2, 6],\n    [3, 3],\n    [4, 2]]\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ncost = [[5, 2, 1],\n        [4, 8, 3],\n        [1, 5, 6]]\nassert maxAverageOfPath(cost) == 10.0\n\ncost = [[1, 2],\n        [2, 3]]\nassert maxAverageOfPath(cost) == 3.5\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 8, 9]]) == 26\nassert     maxAverageOfPath([[1, 2, 3], [1, 1, 1], [1, 1, 1]]) == 3\nassert     maxAverageOfPath([[10, 3, 4, 6], [2, 1, 1, 4], [3, 1, 2, 4]]) == 15\nassert     maxAverageOfPath([[1, 2, 3], [1, 1, 1], [1, 1, 1]]) == 2\nassert     maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 8, 9]]) == 26\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     filter_data({'Peter': (1.82, 72.0), 'Isla': (1.75, 103.0), 'Anna': (1.75, 94.0)}, 1.6,  1.5) == {'Anna'}\nassert     filter_data({'Peter': (1.82, 72.0), 'Isla': (1.75, 103.0), 'Anna': (1.75, 94.0)}, 1.6,  1.5) == {'Isla', 'Anna'}\nassert     filter_data({'Peter': (1.82, 72.0), 'Isla': (1.75, 103.0), 'Anna': (1.75, 94.0)}, 1.5,  1.5) == {'Isla', 'Anna'}\nassert     filter_data({'Peter': (1.82, 72.0), 'Isla': (1.75, 103.0), 'Anna': (1.75, 94.0)}, 1.5,  1.5) == {'Peter'}\nassert     filter_data({'Peter': (1.82, 72.0), 'Isla': (1.75, 103.0), 'Anna': (1.75, 94.0)}, 0.5,  1.5) == {'Peter', 'Anna'}\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     filter_data({'A': (58.2, 50.0)}, 56, 60.0) == 'A'\nassert filter_data({'A': (58.2, 50.0)}, 56, 60.1) == 'A'\nassert filter_data({'A': (58.2, 50.0)}, 55, 60.1) == ''\nassert filter_data({'A': (58.2, 50.0)}, 50.5, 60.1) == ''\nassert filter_data({'A': (58.2, 50.0)}, 60, 60.1) == 'A'\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     filter_data({'Peter': (1.78, 80), 'John': (1.68, 70), 'Gertrud': (1.68, 80), 'Eva': (1.90, 100)}, 1.5, 70) ==     {'John', 'Gertrud', 'Eva'}, \"First\"\nassert     filter_data({'Peter': (1.78, 80), 'John': (1.68, 70), 'Gertrud': (1.68, 80), 'Eva': (1.90, 100)}, 1.5, 70) ==     {'John', 'Gertrud'}, \"Second\"\nassert     filter_data({'Peter': (1.78, 80), 'John': (1.68, 70), 'Gertrud': (1.68, 80), 'Eva': (1.90, 100)}, 1.5, 70) ==     {'Peter', 'Gertrud', 'Eva'}, \"Third\"\nassert     filter_data({'Peter': (1.78, 80), 'John': (1.68, 70), 'Gertrud': (1.68, 80), 'Eva': (1.90, 100)}, 1.5, 70) ==     {'Peter', 'Eva'}, \"Fourth\"\nassert     filter_data({'Peter': (1.78, 80), 'John': (1.68, 70), 'Gertrud': (1.68, 80), 'Eva': (1.90, 100)}, 1.5, 70) ==     {'John', 'Gertrud'}, \"Fifth\"\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     filter_data({'Arhav': (1.40,70), 'Rohan': (1.60,100), 'Harsh': (1.80,70), 'Dhruv': (1.60,90), 'Aakash': (1.80,60)}, 1.60, 90) == {'Harsh', 'Aakash'}, \"Should filter student with min_hgt of 60 and min_weight of 90\"\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     filter_data(students, 100, 200) == {'Jennifer':(95.0, 80.0)}, \"Expected to get {'Jennifer': (95.0, 80.0)}\"\nassert     filter_data(students, 100, 300) == {'Vincent':(85.0, 70.0), 'Jennifer':(95.0, 80.0)}, \"Expected to get {'Vincent': (85.0, 70.0), 'Jennifer': (95.0, 80.0)}\"\nassert     filter_data(students, 200, 100) == {'Vincent':(85.0, 70.0), 'Jennifer':(95.0, 80.0)}, \"Expected to get {'Vincent': (85.0, 70.0), 'Jennifer': (95.0, 80.0)}\"\nassert     filter_data(students, 100, 400) == {}, \"Expected to get {}\""
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     filter_data({'A': (1.5,80), 'B': (1.75,70), 'C':(1.1,90)}, 2.5, 100),\n    False,\n    True,\n    {'B': (1.75,70), 'C':(1.1,90)}\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nstudents = {\"Ram\":(190, 80), \"Shyam\":(178, 75), \"John\":(170, 90), \"Arushi\":(200, 70), \"Keerthan\":(170, 90)}\nassert filter_data(students, 178, 80) == {'John', 'Arushi', 'Shyam'}\nassert filter_data(students, 180, 90) == {'Shyam', 'John', 'Arushi'}\nassert filter_data(students, 200, 70) == {'Arushi', 'John', 'Shyam'}"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     filter_data(students, -1.2, -100) == {}\nassert     filter_data(students, -1.3, -3) == {'Thomas': (3, 100), 'David': (3, 100), 'Sam': (3, 100)}\nassert     filter_data(students, -0.9, -3) == {'David': (3, 100), 'Sam': (3, 100)}\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     filter_data({'A': (0.2, 85), 'B': (1.7, 75), 'C': (1.5, 85)}, 0.5, 1.5) == {'A': (0.2, 85), 'C': (1.5, 85)}, \"Test did not pass\"\nassert     filter_data({'A': (0.2, 85), 'B': (1.7, 75), 'C': (1.5, 85)}, 1.5, 1.5) == {'A': (0.2, 85), 'B': (1.7, 75)}, \"Test did not pass\"\nassert     filter_data({'A': (0.2, 85), 'B': (1.7, 75), 'C': (1.5, 85)}, 1.5, 1.5) == {'A': (0.2, 85), 'C': (1.5, 85)}, \"Test did not pass\"\nassert     filter_data({'A': (0.2, 85), 'B': (1.7, 75), 'C': (1.5, 85)}, 1.5, 1.5) == {'A': (0.2, 85), 'C': (1.5, 85)}, \"Test did not pass\"\nassert     filter_data({'A': (0.2, 85), 'B': (1.7, 75), 'C': (1.5, 85)}, 0.5, 1.5) == {'A': (0.2, 85), 'B': (1.7, 75), 'C': (1.5, 85)}, \"Test did not pass\"\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     filter_data({'Arshis': (1.69, 80.10), 'Aakash': (1.70, 82.20), 'Anjali': (1.73, 81.90), 'Bhavya': (1.75, 81.20)}, 1.69, 82.20) == {'Arshis', 'Aakash'}, \"Should be {'Arshis', 'Aakash'}\"\nassert filter_data({'Arshis': (1.69, 80.10), 'Aakash': (1.70, 82.20), 'Anjali': (1.73, 81.90), 'Bhavya': (1.75, 81.20)}, 1.69, 81.70) == {'Arshis', 'Bhavya'}, \"Should be {'Arshis', 'Bhavya'}\"\nassert filter_data({'Arshis': (1.69, 80.10), 'Aakash': (1.70, 82.20), 'Anjali': (1.73, 81.90), 'Bhavya': (1.75, 81.20)}, 1.69, 81.20) == {'Anjali', 'Bhavya'}, \"Should be {'Anjali', 'Bhavya'}\"\nassert filter_data({'Arshis': (1.69, 80.10), 'Aakash': (1.70, 82.20), 'Anjali': (1.73, 81.90), 'Bhavya': (1.75, 81.20)}, 1.71, 81.20) == {}, \"Should be {}\"\nassert filter_data({'Arshis': (1.69, 80.10), 'Aakash': (1.70, 82.20), 'Anjali': (1.73, 81.90), 'Bhavya': (1.75, 81.20)}, 1.72, 81.20) == {'Bhavya'}, \"Should be {'Bhavya'}\"\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_same_pair([], []) == 0\nassert     count_same_pair([1, 2, 3], [2, 3, 2]) == 1\nassert     count_same_pair([1, 2, 3], [1, 2, 4]) == 0\nassert     count_same_pair([1, 1, 1], [1, 2, 3]) == 2\nassert     count_same_pair([1, 2, 3], [1, 1, 3]) == 2\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(count_same_pair([1,2,3,4], [3,4,5,6]))\nprint(count_same_pair([1,2,3,4,5,6], [1,2,3,4,5,6]))\nassert count_same_pair([], []) == 0\nassert count_same_pair([], [1]) == 0\nassert count_same_pair([1], [1]) == 1\nassert count_same_pair([1,2,3,4], [1,2,3,4]) == 2\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(\"Pass\" if (count_same_pair([1,2,3], [3,4,5]) == 3) else \"Fail\")\nprint(\"Pass\" if (count_same_pair([1,2,3], [3,2,3]) == 1) else \"Fail\")\nprint(\"Pass\" if (count_same_pair([1,2,3], [1,3,2]) == 3) else \"Fail\")\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    assert len(nums1) == len(nums2)\n\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    \n    return count"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    count_same_pair([1,1,1,1], [1,1,1,1]) == 4, 'incorrect'\n    count_same_pair([1,1,1,2], [1,1,1,2]) == 2, 'incorrect'\n    count_same_pair([1,1,1,1,1], [1,1,1,1,1]) == 5, 'incorrect'\n    count_same_pair([1,2,1,2,1], [1,2,1,2,1]) == 3, 'incorrect'\n    count_same_pair([1,2,1,3,1], [1,2,1,3,1]) == 0, 'incorrect'\n\n    count_same_pair([1,1,2,1], [1,1,2,1]) == 2, 'incorrect'\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_same_pair([1, 2, 3, 2, 1], [1, 2, 3, 2, 1]) == 5\nassert     count_same_pair([1, 1, 1, 2, 3], [1, 1, 2, 1, 3]) == 4\n\ndef count_same_pair_2(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # if not len(nums1) == len(nums2):\n    #     raise ValueError('Lists are not same length')\n    # d = {}\n    # for i in range(len(nums1)):\n    #     d[nums1[i]] = i\n    # for i in range(len(nums2)):\n    #     if nums1[i] == nums2[i]:\n    #         return d[nums1[i]]\n    # return 0\n    d = {}\n    for i in range(len(nums1)):\n        if nums1[i] not in d:\n            d[nums1[i]] = i\n        else:\n            return d[nums1[i]]\n    return 0\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_same_pair([1,1,2,2],     [1,1,2,2]) == 4\nassert     count_same_pair([1,1,2,2],     [1,1,2,2,2]) == 5\nassert     count_same_pair([1,1,2,2],     [1,2,2,3]) == 2\nassert     count_same_pair([1,1,2,2],     [1,2,3,4]) == 2\nassert     count_same_pair([1,1,2,2],     [1,2,3,4,5]) == 2\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_same_pair([1, 1, 2], [2, 1, 1]) == 2\nassert     count_same_pair([1, 1, 2], [1, 1, 2]) == 3\nassert     count_same_pair([1, 1, 2], [1, 1, 0]) == 0\nassert     count_same_pair([1, 1, 2], [2, 1, 2]) == 1\nassert     count_same_pair([2, 1, 2], [1, 1, 2]) == 1\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_same_pair([1,1,1,1,2,2,2,2], [1,1,1,1,2,2,2,2]) == 4, count_same_pair([1,1,1,1,2,2,2,2], [1,1,1,1,2,2,2,2])\nassert count_same_pair([1,2,3,4], [1,1,1,1]) == 1, count_same_pair([1,2,3,4], [1,1,1,1])\nassert count_same_pair([1,1,1,1,2,2,2,2], [1,1,1,1,2,2,2,2]) == 4, count_same_pair([1,1,1,1,2,2,2,2], [1,1,1,1,2,2,2,2])\nassert count_same_pair([1,2,3,4], [1,1,1,1]) == 0, count_same_pair([1,2,3,4], [1,1,1,1])\nassert count_same_pair([1,1,1,1,2,2,2,2], [1,1,1,1,2,2,2,2]) == 4, count_same_pair([1,1,1,1,2,2,2,2], [1,1,1,1,2,2,2,2])\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \npower_base_sum(base=3, power=3) == 9\nprint(power_base_sum(base=3, power=3))\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(power_base_sum(7, 2))"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     power_base_sum(10, 1) == 10\nassert     power_base_sum(10, 2) == 100\nassert     power_base_sum(10, 3) == 1000\nassert     power_base_sum(10, 5) == 10000\nassert     power_base_sum(10, 6) == 100000\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    power_base_sum(2,0) == 2\n    power_base_sum(2,1) == 8\n    power_base_sum(2,2) == 18\n    power_base_sum(2,3) == 18\n    power_base_sum(2,4) == 18\n    power_base_sum(2,5) == 18\n    power_base_sum(2,6) == 18\n    power_base_sum(2,7) == 18\n    power_base_sum(3,0) == 3\n    power_base_sum(3,1) == 12\n    power_base_sum(3,2) == 18\n    power_base_sum(3,3) == 27\n    power_base_sum(3,4) == 36\n    power_base_sum(3,5) == 36\n    power_base_sum(3,6) == 36\n    power_base_sum(3,7) == 36\n    power_base_sum(5,0) == 5\n    power_base_sum(5,1) == 15\n    power_base_sum(5,2) == 45\n    power_base_sum(5,3) == 55\n    power_base_sum(5,4) == 55\n    power_base_sum(5,5) == 55\n    power_base_sum(5,6) == 55\n    power_base_sum(5,7) == 55\n    power_base_sum(15,0) == 5\n    power_base_sum(15,1) == 10\n    power_base_sum(15,2) == 15\n    power_base_sum(15,3) == 25\n    power_base_sum(15,4) == 35\n    power_base_sum(15,5) == 35\n    power_base_sum(15,6) == 35\n    power_base_sum(15,7) == 35\n    power_base_sum(30,0) == 3\n    power_base_sum(30,1) == 12\n    power_base_sum(30,2) == 18\n    power_base_sum(30,3) == 27\n    power_base_sum(30,4) == 36\n    power_base_sum(30,5) == 36\n    power_base_sum(30,6) == 36\n    power_base_sum(30,7) == 36\n    power_base_sum(40,0) == 4\n    power_base_sum(40,1) == 15\n    power_base_sum(40,2) == 30\n    power_base_sum(40,3) == 45\n    power_base_sum(40,4) == 55\n    power_base_sum(40,5) == 55\n    power_base_sum(40,6) == 55\n    power_base_sum(40,7) == 55\n    power_base_sum(50,0) == 5\n    power_base_sum(50,1) == 15\n    power_base_sum(50,2) == 45\n    power_base_sum(50,3) == 55\n    power_base_sum(50,4) == 55\n    power_base_sum(50,5) == 55\n    power_base_sum(50,6) == 55\n    power_base_sum(50,7) == 55\n    power_base_sum(55,0) == 55\n    power_base_sum(55,1) == 55\n    power_base_sum(55,2) == 55\n    power_base_sum(55,3) == 55\n    power_base_sum(55,4) == 55\n    power_base_sum(55,5) == 55\n    power_base_sum(55,6) == 55\n    power_base_sum(55,7) == 55\n    power_base_sum(65,0) == 6\n    power_base_sum(65,1) == 16\n    power_base_sum(65,2) == 35\n    power_base_sum(65,3) == 56\n    power_base_sum(65,4) == 77\n    power_base_sum(65,5) == 80\n    power_base_sum(65,6) == 80\n    power_base_sum(65,7) == 80\n    power_base_sum(80,0) == 8\n    power_base_sum(80,1) == 20\n    power_base_sum(80,2) == 40\n    power_base_sum(80,3) == 56\n    power_base_sum(80,4) == 76\n    power_base_sum(80,5) == 76\n    power_base_sum(80,6) == 76\n    power_base_sum(80,7) == 76\n    power_base_sum(95,0) == 9\n    power_base_sum(95,1) == 21\n    power_base_sum(95,2) == 45\n    power_base_sum(95,3) == 63\n    power_base_sum(95,4) == 87\n    power_base_sum(95,5) == 92\n    power_base_sum(95,6) == 92\n    power_base_sum(95,7) == 92\n    power_base_sum(100,0) == 10\n    power_base_sum(100,1) == 30\n    power_base_sum(100,2) == 60\n    power_base_sum(100,3) == 91\n    power_base_sum(100,4) == 115\n    power_base_sum(100,5) == 115\n    power_base_sum(100,6) == 115\n    power_base_sum(100,7) == 115\n    power_base_sum(95,8) == 116\n    power_base_sum(100,8) == 116\n    power_base_sum(95,9) == 117\n    power_base_sum(100,9) == 117\n    power_base_sum(95,10) == 118\n    power_base_sum(100,10) == 118\n    power_base_sum(95,11) == 119\n    power_base_sum(100,11) == 119\n    power_base_sum(95,12) == 120\n    power_base_sum(100,12) == 120\n    power_base_sum(95,13) == 121\n    power_base_sum(100,13) == 121\n    power_base_sum(95,14) == 122\n    power_base_sum(100,14) == 122\n    power_base_sum(95,15) == 123\n    power_base_sum(100,15) == 123\n    power_base_sum(95,16) == 124\n    power_base_sum(100,16) == 124\n    power_base_sum(95,17) == 125\n    power_base_sum(100,17) == 125\n    power_base_sum(95,18) == 126\n    power_base_sum(100,18) == 126\n    power_base_sum(95,19) == 127\n    power_base_sum(100,19) == 127\n    power_base_sum(95,20) == 128\n    power_base_sum(100,20) == 128\n    power_base_sum(95,21) == 129\n    power_base_sum(100,21) == 129\n    power_base_sum(95,22) == 130\n    power_base_sum(100,22) == 130\n    power_base_sum(95,23) == 131\n    power_base_sum(100,23) == 131\n    power_base_sum(95,24) == 132\n    power_base_sum(100,24) == 132\n    power_base_sum(95,25) == 133\n    power_base_sum(100,25) == 133\n    power_base_sum(95,26) == 134\n    power_base_sum(100,26) == 134\n    power_base_sum(95,27) == 135\n    power_base_sum(100,27) == 135\n    power_base_sum(95,28) == 136\n    power_base_sum(100,28) == 136\n    power_base_sum(95,29) == 137\n    power_base_sum(100,29) == 137\n    power_base_sum(95,30) == 138\n    power_base_sum(100"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     power_base_sum(3, 5) == 55\nassert     power_base_sum(9, 10) == 99\nassert     power_base_sum(9, 11) == 145\nassert     power_base_sum(10, 100) == 1020\nassert     power_base_sum(10, 101) == 1021\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     power_base_sum(4, 6) == 5\nassert     power_base_sum(4, -6) == 3\nassert     power_base_sum(0, 0) == 0\nassert     power_base_sum(0, 1) == 0\nassert     power_base_sum(1, 1) == 1\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     power_base_sum(3, 4) == 21\nassert     power_base_sum(3, -4) == 3\nassert     power_base_sum(1, 1) == 1\nassert     power_base_sum(1, 0) == 1\nassert     power_base_sum(12345, -1234) == 0\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_quotation(\"he said 'hello'\")==['hello']\nassert     extract_quotation(\"he said 'hello'\")==['hello']\nassert     extract_quotation(\"he said 'hello')\")==['hello')\nassert     extract_quotation(\"he said 'hello)')\")==['hello)')]\nassert     extract_quotation(\"he said 'hello)\")==['hello)',]\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_quotation('This is a sample \"text\"') == 'text'\nassert extract_quotation('This is a sample \"text\"') == 'text'\nassert extract_quotation('This is a sample \"text\" \"sample text\"') == 'text'\nassert extract_quotation('This is a sample \"text\"') == ''\nassert extract_quotation('This is a sample \"text\"') == ''\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_quotation('this is a simple test \"string\"') == 'this is a simple test string'\nassert     extract_quotation('this is a simple test \"string\"') == 'this is a simple test string'\nassert     extract_quotation('this is a simple test \"string\"') == 'this is a simple test string'\nassert     extract_quotation('this is a simple test \"string\")') == 'this is a simple test string'\nassert     extract_quotation('this is a simple test\")string\")') == 'this is a simple test string'\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef count_class_names(text):\n    '''\n    Write a function to extract class names from given HTML text.\n    '''\n    pass\n\ndef count_class_names_using_re(text):\n    '''\n    Write a function to extract class names from given HTML text.\n    '''\n    pass\n\ndef count_class_names_using_re_n_group(text):\n    '''\n    Write a function to extract class names from given HTML text.\n    '''\n    pass\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_quotation(\"'Hello World'\") == \"Hello World\"\nassert    extract_quotation(\"Hi there, good evening\") == \"Hi there, good evening\"\nassert    extract_quotation(\"This is 'a long' sentence\") == \"a long\"\nassert    extract_quotation(\"This is 'a long sentence'\") == \"a long sentence\"\nassert    extract_quotation(\"This is 'another long sentence'\") == \"another long sentence\"\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_quotation(\"Hello World\") == 'Hello World'\nassert    extract_quotation(\"What's in the bag and what's left?\") == 'bag and what\\'s left?'\nassert    extract_quotation(\"What is the weather like and how is it going?\") == 'weather like and how is it going?'\nassert    extract_quotation(\"What is the weather like and how is it going?\") == 'weather like and how is it going?'\nassert    extract_quotation(\"What is the weather like and how is it going?\") == 'weather like and how is it going?'\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_quotation(\"hello 'world'!\")=='world'\nassert     extract_quotation(\"hello 'world'\")=='world'\nassert     extract_quotation(\"hello 'world'!\")=='world'\nassert     extract_quotation(\"hello 'world'\")==''\nassert     extract_quotation(\"hello\")==''\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_quotation(\"The quick brown fox jumps over the lazy dog\") == \"The quick brown fox jumps over the lazy dog\"\nassert    extract_quotation(\"John said, 'Goat'\") == \"John said, 'Goat'\"\nassert    extract_quotation(\"John said, 'Goat' \") == \"John said, 'Goat'\"\nassert    extract_quotation(\"'J\" + \"ook said, 'Goat' \") == \"Jook said, 'Goat'\"\nassert    extract_quotation(\"'J\" + \"ook said, 'Goat' \") == \"Jook said, 'Goat'\"\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_quotation('I\\'m a boy. She is a girl.') == ['I\\'m', 'a', 'boy', 'She', 'is', 'a', 'girl']\n\n\ndef remove_spaces(text):\n    '''\n    Write a function to remove all the spaces at the beginning and end of the given text.\n    '''\n    pass\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_quotation(\"He said, \\\"This is a test!\\\" \") == 'he said, this is a test'\nassert extract_quotation(\"He said, \\\"\\\"test\\\"\"\"\") == 'he said, test'\nassert extract_quotation(\"\\\"test\\\"\") == 'test'\nassert extract_quotation(\"\\\"test\\\"\") == 'test'\nassert extract_quotation(\"\\\"test\\\" \") == 'test'\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     multiply_elements((1,2,3)) == (1,2,3)\nassert     multiply_elements((1,1,1)) == (1,2,3)\nassert     multiply_elements((2,2,2)) == (4,4,4)\nassert     multiply_elements((3,3,3)) == (6,6,6)\nassert     multiply_elements((4,4,4)) == (8,8,8)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     multiply_elements(test_tup) == (10, 20, 30, 40, 50, 60)\nassert     multiply_elements((1,2,3,4)) == (1, 2, 3, 4)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     multiply_elements((10, 20)) == (100, 200), \"10 * 20 should be 100\"\nassert     multiply_elements((10, 20, 50)) == (100, 200, 500), \"10 * 20 * 50 should be 100\"\n\ndef nested_sum(test_tuple):\n    '''\n    Write a function that takes as input a tuple of tuples (t_1, t_2,..., t_n) and returns a tuple of length n where the i-th element is equal to sum of all t_i elements.\n    '''\n    pass\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     multiply_elements((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,91"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     multiply_elements((1,2)) == (2,4)\nassert     multiply_elements((2,2,2,2)) == (4,4,4,4)\nassert     multiply_elements((3,2,2,2)) == (6,4,4,4)\nassert     multiply_elements((2,2,2,2,2,2)) == (4,4,4,4,4,4)\nassert     multiply_elements((2,2,2,2)) == (4,4,4,4)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     multiply_elements((1,2,3)) == (1,2,3), \"Wrong result for (1,2,3)\"\nassert     multiply_elements((1,1,1)) == (1,1,1), \"Wrong result for (1,1,1)\"\nassert     multiply_elements((1,1,0)) == (1,1,0), \"Wrong result for (1,1,0)\"\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     multiply_elements((1, 2, 3, 4, 5)) == (1, 2, 3, 10, 15)\nassert     multiply_elements((2, 4, 6, 8, 10)) == (2, 4, 6, 12, 20)\nassert     multiply_elements((2, 2, 2, 2, 2)) == (4, 4, 4, 4, 4)\nassert     multiply_elements((4, 8, 16, 32, 64)) == (8, 16, 32, 64, 128)\nassert     multiply_elements((2, 4, 6, 8, 10)) == (2, 4, 6, 12, 20)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     multiply_elements((1, 2, 3)) == (1, 2, 3, 1, 2, 3)\nassert     multiply_elements((1, 2, 3, 4, 5, 6)) == (1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6)\nassert     multiply_elements((1, 2, 3, 4)) == (1, 2, 3, 4, 1, 2, 3, 4)\nassert     multiply_elements((1, 2)) == (1, 2, 1, 2)\n\ndef reverse_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_N - t_{i+1}.\n    '''\n    pass\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     multiply_elements((1, 2, 3, 4, 5)) == (1, 2, 3, 6, 10), \"The returned tuple does not match the expected result\"\nassert     multiply_elements((10, 11, 12, 13, 14)) == (10, 11, 12, 30, 70), \"The returned tuple does not match the expected result\"\nassert     multiply_elements((10, 11, 12, 13, 14, 15)) == (10, 11, 12, 30, 70, 90), \"The returned tuple does not match the expected result\"\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     multiply_elements((3, 5, 7, 9)) == (3, 15, 35, 105)\nassert     multiply_elements((2, 1)) == (2, 2)\nassert     multiply_elements((1, 2, 3, 4, 5, 6)) == (1, 2, 3, 4, 5, 6)\nassert     multiply_elements((3, 4, 5, 6, 7, 8)) == (3, 8, 20, 36, 70, 144)\nassert     multiply_elements((3, 5, 7, 9, 11, 13)) == (3, 110, 350, 945, 1435, 1806)\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef get_list_sum_sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n] and [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    pass\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_list([1,2,3,4], [3,4,5,6]) == [4,6,9,12], 'incorrect'\nassert     sum_list([1,2,3,4], [4,5,6,7]) == [5,7,9,12], 'incorrect'\nassert     sum_list([1,2,3,4,5], [1,2,3,4,5]) == [2,4,6,8,10], 'incorrect'\nassert     sum_list([1,2,3,4,5], [6,7,8,9,10]) == [7,10,13,16,19], 'incorrect'\nassert     sum_list([1,2,3,4,5], [1,2,3,4,5]) == [2,4,6,8,10], 'incorrect'\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    sum_list([1,2,3], [4,5,6]) == [5,7,9]\n    sum_list([1,2,3], [4,5,6,7,8,9]) == [5,7,9,11,13,15]\n    sum_list([1,2,3], [4,5,6,7,8,9,10]) == [5,7,9,11,13,15,17]\n    sum_list([1,2,3,4], [4,5,6,7,8,9]) == [5,7,9,11,13,15,17]\n    sum_list([1,2,3], [4,5,6,7,8,9,10]) == [5,7,9,11,13,15,17,19]\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert sum_list([1,2,3,4], [1,2,3,4]) == [2,3,4,5], \"Test 1 fail\"\nassert sum_list([1,2,3], [4,5,6]) == [5,7,9], \"Test 2 fail\"\nassert sum_list([1,2,3], [5,6,7,8,9]) == [6,7,8,9,10], \"Test 3 fail\"\nassert sum_list([1,2,3], [4,5,6,7,8,9,10]) == [5,7,9,10,11,13,15], \"Test 4 fail\"\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert sum_list([1,2,3,4,5,6],\n                [1,2,3,4,5,6]) == [2,3,4,5,6,7]\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_list([1,2,3,4],[4,3,2,1]) == [5,6,7,8], 'WRONG'\nassert sum_list([2,3,4],[5,6,7]) == [7,8,9], 'WRONG'\nassert sum_list([1],[2,3,4]) == [3,4,5], 'WRONG'\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_list([1,2,3,4,5], [6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]\nassert     sum_list([1,2,3,4], [6,7,8,9,10]) == [7,8,9,10,1,2,3,4,6,7]\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     consecutive_duplicates([1, 1, 2, 3, 4, 5, 6, 6]) == [[1, 2, 3, 4, 5, 6], [6]]\nassert consecutive_duplicates([1, 1, 2, 3, 4, 5, 5]) == [[1, 2, 3, 4, 5], [5]]\nassert consecutive_duplicates([1, 1, 2, 3, 4, 5, 5, 1]) == [[1], [1, 2, 3, 4, 5, 5]]\nassert consecutive_duplicates([1, 2, 1, 2, 1]) == [[1, 2], [2, 1]]\nassert consecutive_duplicates([1, 1, 2, 2, 1, 3, 4]) == [[1, 2], [2, 1, 3, 4]]\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     consecutive_duplicates(nums = [1,2,2,3,3,4,4,4,4,5]) == True\nassert     consecutive_duplicates(nums = [1,2,2,2,3,3,4,4,4,4]) == False\nassert     consecutive_duplicates(nums = [1,1,1,2,2,2,3,3,4,4,4,4,5,5,5]) == False\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     consecutive_duplicates([1,2,3,4]) ==     True\nassert     consecutive_duplicates([1,2,3,4,5]) ==     True\nassert     consecutive_duplicates([1,2,3,3,4,4]) ==     True\nassert     consecutive_duplicates([1,2,3,4,5,6,7]) ==     True\nassert     consecutive_duplicates([1,2,3,4,5,6,7,7]) ==     True\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     consecutive_duplicates([1,2,3,4,4,4,5,5]) == [1,2,3,4,4,5]\nassert     consecutive_duplicates([1,2,3,4,4,4,5,5,5,6,6,6]) == [1,2,3,4,4,5]\nassert consecutive_duplicates([1,2,3,4,4,4,5,5,5,6,6,6,6]) == []\nassert consecutive_duplicates([1,2,3,4,4,5,5,5,6,6,6,6,6]) == [1,2,3,4,5,6]\n\n\ndef calculate_number_of_inversions(num_list):\n    '''\n    Write a function to find the number of inversions in the input list.\n    '''\n    pass\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef consecutive_duplicates2(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     consecutive_duplicates([1, 2, 2, 3]) == True\nassert     consecutive_duplicates([1, 2, 3, 4]) == False\nassert     consecutive_duplicates([1, 2, 3, 1]) == False\nassert     consecutive_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == False\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     consecutive_duplicates(list(range(1,10))) ==     True, 'FAILED'\nassert consecutive_duplicates([1,1,1,2,2,3]) == False, 'FAILED'\nassert consecutive_duplicates([1,1,1,2,2,3,3,3]) == True, 'FAILED'\nassert consecutive_duplicates([1,1,2,3,3]) == False, 'FAILED'\nassert consecutive_duplicates([1,2,3,1,2,3]) == False, 'FAILED'\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef group_by_owners(owners):\n    '''\n    Write a function to group the lists of owners such that owners of different\n    groups have no common owners. Return the group dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     consecutive_duplicates([1, 2, 3, 3, 4, 5, 5, 5]) ==  [1, 2, 3, 4, 5]\nassert     consecutive_duplicates([1, 2, 3, 3, 4, 5, 5, 6]) ==  [1, 2, 3, 4, 5, 6]\nassert     consecutive_duplicates([1, 2, 3, 4, 4, 4, 5, 6, 6, 6, 6]) ==  [1, 2, 3, 4, 5, 6]\nassert     consecutive_duplicates([1, 2, 3, 4, 5, 5, 5, 5, 5, 5]) ==  [1, 2, 3, 4, 5, 5]\nassert     consecutive_duplicates([1, 2, 3, 4, 5, 6, 6, 6, 6, 6, 6]) ==  [1, 2, 3, 4, 5, 6]\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     lateralsurface_cone(1,2)==2, \"Wrong\"\nassert     lateralsurface_cone(2,3)==5, \"Wrong\"\nassert     lateralsurface_cone(3,4)==9, \"Wrong\"\nassert     lateralsurface_cone(4,5)==18, \"Wrong\"\nassert     lateralsurface_cone(5,6)==27, \"Wrong\"\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nlateralsurface_cone(5,10) == 45\nlateralsurface_cone(5,6) == 20\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef lateralsurface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given radius r and the height h.\n    '''\n    pass\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     lateralsurface_cone(1,0) == 0\nassert     lateralsurface_cone(1,1) == 4\nassert     lateralsurface_cone(1,2) == 8\nassert     lateralsurface_cone(3,0) == 0\nassert     lateralsurface_cone(3,1) == 8\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(lateralsurface_cone(0.5,1))\nprint(lateralsurface_cone(0.5,1.5))\nprint(lateralsurface_cone(0.5,2))\nprint(lateralsurface_cone(0.5,2.5))\nprint(lateralsurface_cone(0.5,3))\nprint(lateralsurface_cone(0.5,3.5))\nprint(lateralsurface_cone(0.5,4))\nprint(lateralsurface_cone(0.5,4.5))\nprint(lateralsurface_cone(0.5,5))\nprint(lateralsurface_cone(0.5,5.5))\nprint(lateralsurface_cone(0.5,6))\nprint(lateralsurface_cone(0.5,6.5))\nprint(lateralsurface_cone(0.5,7))\nprint(lateralsurface_cone(0.5,7.5))\nprint(lateralsurface_cone(0.5,8))\nprint(lateralsurface_cone(0.5,8.5))\nprint(lateralsurface_cone(0.5,9))\nprint(lateralsurface_cone(0.5,9.5))\nprint(lateralsurface_cone(0.5,10))\nprint(lateralsurface_cone(0.5,10.5))\n\nprint(lateralsurface_cone(0.5,0.3))\nprint(lateralsurface_cone(0.5,0.2))\nprint(lateralsurface_cone(0.5,0.1))\nprint(lateralsurface_cone(0.5,0.05))\nprint(lateralsurface_cone(0.5,0.01))\nprint(lateralsurface_cone(0.5,0.001))\nprint(lateralsurface_cone(0.5,0))\nprint(lateralsurface_cone(0.5,-0.1))\nprint(lateralsurface_cone(0.5,-0.05))\nprint(lateralsurface_cone(0.5,-0.01))\nprint(lateralsurface_cone(0.5,-0.001))\nprint(lateralsurface_cone(0.5,-0.0001))\nprint(lateralsurface_cone(0.5,-0.00001))\nprint(lateralsurface_cone(0.5,-0.000001))\nprint(lateralsurface_cone(0.5,-0.0000001))\nprint(lateralsurface_cone(0.5,-0.00000001))\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef lateralsurface_cuboid(l,w,h):\n    '''\n    Write a function to find the lateral surface area of a cuboid given length l, width w and height h.\n    '''\n    pass\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     lateralsurface_cone(0.5, 0.1) == 0, 'incorrect lateralsurface_cone for 0.5, 0.1'\nassert     lateralsurface_cone(0.5, 2) == 0, 'incorrect lateralsurface_cone for 0.5, 2'\nassert     lateralsurface_cone(0.5, 10) == 1.0986122886681098, 'incorrect lateralsurface_cone for 0.5, 10'\nassert     lateralsurface_cone(0.5, 20) == 2.010986122886688, 'incorrect lateralsurface_cone for 0.5, 20'\nassert     lateralsurface_cone(1.5, 0.1) == 0, 'incorrect lateralsurface_cone for 1.5, 0.1'\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     replace_specialchar('A comma a,b,c') == 'A colon a:b:c'\nassert     replace_specialchar('A comma a,b,c') == 'A colon a:b:c'\nassert     replace_specialchar('A comma a,, c') == 'A colon a:,c'\nassert     replace_specialchar('A comma a,,, c') == 'A colon a:,,, c'\nassert     replace_specialchar('A comma a,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,') == 'A colon a:b:c'\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     re.sub(r'[,.]','::',text) == text,\\\n            \"Error: failed to replace the special characters in the original string.\"\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     replace_specialchar('hello') == 'hello'\nassert     replace_specialchar('hello:') == 'hello:'\nassert     replace_specialchar('hello, world') == 'hello, world'\nassert     replace_specialchar('hello:;') == 'hello:;'\nassert     replace_specialchar('a:b:c:d') == 'a:b:c:d'\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     replace_specialchar(\"Mike\") == \"mike\"\nassert     replace_specialchar(\"asdf:asdf:asdf:df:asdf\") == \"asdf:asdf:asdf:df:asdf\"\nassert     replace_specialchar(\"Hello,World:! \") == \"Hello,World:! \"\nassert     replace_specialchar(\"mike: mike: mike\") == \"mike: mike: mike\"\nassert     replace_specialchar(\"::::::\") == \":::::\"\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     'a:bc:de' == replace_specialchar('a:bc:de')\nassert     'a:bc:de' == replace_specialchar('a:bc:d')\nassert     'a:bc:de' == replace_specialchar('a:bc:d:e')\nassert     'a:bc:de' == replace_specialchar('a:bc:d')\nassert     'a:bc:de' == replace_specialchar('a:bc:de')\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     replace_specialchar('Mr John Smith    ') ==     'Mr John Smith:','replace_specialchar failed'\nassert     replace_specialchar('Mr.John Smith   ') ==     'Mr.John Smith:','replace_specialchar failed'\nassert     replace_specialchar('Mr.John Smith   ') ==     'Mr.John Smith:','replace_specialchar failed'\nassert     replace_specialchar('Mr.John Smith   ') ==     'Mr.John Smith:','replace_specialchar failed'\nassert     replace_specialchar('Mr.John Smith   ') ==     'Mr.John Smith:','replace_specialchar failed'\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r'[,;]+', ':', text)\n\nassert\nreplace_specialchar(\"This text contains a space, comma, dot, and comma\")\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     \"x:x:x:x\" == replace_specialchar(\"x:x:x:x\")\nassert     \"x;x;x;x\" == replace_specialchar(\"x;x;x;x\")\nassert     \"x:x;x:x;x:x\" == replace_specialchar(\"x:x;x:x;x:x\")\nassert     \"x:x:x\" == replace_specialchar(\"x:x:x\")\nassert     \"x;x:x\" == replace_specialchar(\"x;x:x\")\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     replace_specialchar('spaces:,,.') =='spaces: : :.'\nassert     replace_specialchar('spaces:,.') =='spaces: :.'\nassert     replace_specialchar('spaces:.') =='spaces:.'\nassert     replace_specialchar('spaces: : ') =='spaces: : :'\nassert     replace_specialchar('spaces: :') =='spaces: : :'\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     re.match(r'^[:;,.]$', replace_specialchar('myname.is:D.com')) == None     # no special characters\nassert     re.match(r'^[:;,.]$', replace_specialchar('myname.is:D.com,mycompany.is:D.com')) == None     # more than one special character\nassert     re.match(r'^[:;,.]$', replace_specialchar('myname.is:D.com,myname.is:D.com')) == None     # trailing space\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_first_occurrence([1, 2, 3, 5, 1, 1, 2, 4, 2, 3], 1) == 0\nassert     find_first_occurrence([1, 2, 3, 5, 1, 1, 2, 4, 2, 3], 5) == 3\nassert     find_first_occurrence([1, 2, 3, 5, 1, 1, 2, 4, 2, 3], 2) == 1\nassert     find_first_occurrence([1, 2, 3, 5, 1, 1, 2, 4, 2, 3], 3) == 3\nassert     find_first_occurrence([1, 2, 3, 5, 1, 1, 2, 4, 2, 3], 4) == 3\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_first_occurrence([1, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5], 4) == 3\nassert     find_first_occurrence([1, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5], 5) == -1\nassert     find_first_occurrence([1, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5], 2) == -1\nassert     find_first_occurrence([1, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5], 3) == 2\nassert     find_first_occurrence([1, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5], 6) == -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_first_occurrence([1,2,3,5,5], 5) == 3\nassert     find_first_occurrence([1,2,3,5,5], 1) == 0\nassert     find_first_occurrence([1,2,3,5,5], 2) == 1\nassert     find_first_occurrence([1,2,3,5,5], 3) == 2\nassert     find_first_occurrence([1,2,3,5,5], 4) == -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_first_occurrence([1,3,4,4,5,7,8], 4) == 4\nassert     find_first_occurrence([1,3,4,4,5,7,8], 0) == -1\nassert     find_first_occurrence([1,3,4,4,5,7,8], 2) == -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef find_last_occurrence(A, x):\n    '''\n    Write a function to find the index of the last occurrence of a given number in a sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_first_occurrence([1,2,3,4,5,6,7,8,9,10],5) == 5\nassert     find_first_occurrence([1,2,3,4,5,6,7,8,9,10],6) == 6\n\ndef find_all_occurrences(A, x):\n    '''\n    Write a function to find all occurrences of a given number in a sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nfind_first_occurrence([1, 2, 4, 3, 6, 6, 7], 2) == 1\nassert\nfind_first_occurrence([1, 2, 4, 3, 6, 6, 7], 6) == 4\nassert\nfind_first_occurrence([1, 2, 4, 3, 6, 6, 7], 7) == 6\nassert\nfind_first_occurrence([1, 2, 4, 3, 6, 6, 7], 3) == 2\nassert\nfind_first_occurrence([1, 2, 4, 3, 6, 6, 7], 1) == 0\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_first_occurrence([1,2,3,4,5,6], 3) == 3\nassert     find_first_occurrence([1,2,3,4,5,6], 7) == -1\nassert     find_first_occurrence([1,2,3,4,5,6], 6) == 4\nassert     find_first_occurrence([1,2,3,4,5,6], 4) == 5\nassert     find_first_occurrence([1,2,3,4,5,6], 5) == 6\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert sum_Of_Subarray_Prod([1,2,3,4]) == 24\nassert sum_Of_Subarray_Prod([-1,2,3,4]) == -24\nassert sum_Of_Subarray_Prod([-1,1,2,3,4]) == -4\nassert sum_Of_Subarray_Prod([0,2,3,4]) == 0\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_Of_Subarray_Prod([1,2,3,4,5]) == 120\nassert     sum_Of_Subarray_Prod([1,3,5]) == 30\nassert     sum_Of_Subarray_Prod([2,4,5]) == 120\nassert     sum_Of_Subarray_Prod([3,4,5]) == 60\nassert     sum_Of_Subarray_Prod([1,2,3]) == 6\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_Of_Subarray_Prod([1,2,3,4]) == 24\nassert     sum_Of_Subarray_Prod([]) == 0\nassert     sum_Of_Subarray_Prod([1,2,3,4,5]) == 30\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_Of_Subarray_Prod([2,3,4,5]) == 120\nassert     sum_Of_Subarray_Prod([1,2,3,4,5]) == 30\nassert     sum_Of_Subarray_Prod([-1, -2, -3, -4, -5]) == -300\nassert     sum_Of_Subarray_Prod([-10, -10, -10, -10, -10]) == -10000\nassert     sum_Of_Subarray_Prod([-1, 2, 3, 4, 5]) == 0\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_Of_Subarray_Prod([1, 2, 3]) == 1 * 2 * 3 == 30\nassert sum_Of_Subarray_Prod([1, 2, 3, 4]) == 1 * 2 * 3 * 4 == 60\nassert sum_Of_Subarray_Prod([3, 2, 1, 5]) == 3 * 2 * 1 * 5 == 60\nassert sum_Of_Subarray_Prod([2, 3, 4]) == 2 * 3 * 4 == 24\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_Of_Subarray_Prod([2, 3, 4, 5]) == 45\nassert     sum_Of_Subarray_Prod([2, 3, 4, 5, 1]) == 22\nassert     sum_Of_Subarray_Prod([2, 3, 4, 5, 1, 8, 13, 21]) == 45"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_Of_Subarray_Prod([1,2,3]) == 6\nassert     sum_Of_Subarray_Prod([1,2]) == 2\nassert     sum_Of_Subarray_Prod([1,2,3,4,5]) == 120\nassert     sum_Of_Subarray_Prod([1,2,3,4,5,6,7,8]) == 720\nassert     sum_Of_Subarray_Prod([-1, -2, -3, -4, -5]) == -120\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_Of_Subarray_Prod([-1, -2, -3]) == -6\nassert sum_Of_Subarray_Prod([-1, -2, -3, -4]) == -24\nassert sum_Of_Subarray_Prod([-1, -2, -3, -4, -5]) == -120\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_Of_Subarray_Prod([1,3,4,6,7,8]) == 4*((1*3+3*4+4*6+6*7+7*8+8*7)) #1,3,4\nassert     sum_Of_Subarray_Prod([1,3,4,5,6,7,8]) == 4*((1*3+3*4+4*5+5*6+6*7+7*8+8*7)) #1,3,4,5\nassert     sum_Of_Subarray_Prod([1,2,3,4,5,6,7,8]) == 4*((1*2+2*3+3*4+4*5+5*6+6*7+7*8+8*7)) #1,2,3,4,5\nassert     sum_Of_Subarray_Prod([1,2,3,4,5,6]) == 4*((1*2+2*3+3*4+4*5+5*6+6*7+7*8+8*7)) #1,2,3,4,5\nassert     sum_Of_Subarray_Prod([1,2,3,4,5,6,7,8]) == 4*((1*2+2*3+3*4+4*5+5*6+6*7+7*8+8*7)) #1,2,3,4,5,6\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nn = 20\nprint('n = ',n)\nprint('set_middle_bits(n): ',set_middle_bits(n))\n\nn = 0b010111110\nprint('n = ',n)\nprint('set_middle_bits(n): ',set_middle_bits(n))\n\nn = 0b000100001\nprint('n = ',n)\nprint('set_middle_bits(n): ',set_middle_bits(n))\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     set_middle_bits(1) == 0\nassert     set_middle_bits(2) == 3\nassert     set_middle_bits(3) == 7\nassert     set_middle_bits(4) == 11\nassert     set_middle_bits(5) == 15\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nn = 10\nset_middle_bits(n)\nassert (n == 8) \n\ndef set_middle_bits_range(n): \n    '''\n    Write a python function to toggle bits of the number in a range defined by user. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    pass\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef set_middle_bits_test(input, expected_output):\n    '''\n    Tests the set_middle_bits function\n    '''\n    # set_middle_bits(9)\n    # set_middle_bits(0)\n    # set_middle_bits(1)\n    # set_middle_bits(5)\n    # set_middle_bits(100)\n    # set_middle_bits(103)\n    # set_middle_bits(9000000000000000)\n    assert set_middle_bits(input) == expected_output\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    assert set_middle_bits(0xffff) == 0xffff\n    assert set_middle_bits(0xffffffff) == 0x0\n    assert set_middle_bits(0b0110101011010101010101010101010101) == 0b11010101011010101010101010101010101\n    assert set_middle_bits(0b00000011000101010101010101010101010101) == 0b110001010101010101010101010101010101\n    "
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     set_middle_bits(128) == (128 << 1) | 128, \\\n    \"'set_middle_bits' function is not correct.\"\nassert     set_middle_bits(0) == 0, \\\n    \"'set_middle_bits' function is not correct.\"\nassert     set_middle_bits(9) == 9, \\\n    \"'set_middle_bits' function is not correct.\"\nassert     set_middle_bits(10) == 10, \\\n    \"'set_middle_bits' function is not correct.\"\nassert     set_middle_bits(11) == 11, \\\n    \"'set_middle_bits' function is not correct.\"\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     set_middle_bits(0x
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     left_insertion([1,2,3,4,5], 3) == 2\nassert     left_insertion([1,2,3,4,5], 5) == 5\nassert     left_insertion([1,2,3,4,5], 6) == 4\nassert     left_insertion([1,2,3,4,5], 2) == 1\nassert     left_insertion([1,2,3,4,5], 0) == 0\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     left_insertion([1, 2, 3, 5, 6], 5) == 3\nassert     left_insertion([1, 2, 3, 5, 6], 1) == 0\nassert     left_insertion([1, 2, 3, 5, 6], 6) == 4\nassert     left_insertion([1, 2, 3, 5, 6], 7) == 5\nassert     left_insertion([1, 2, 3, 5, 6], 0) == 2\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     left_insertion([1,2,3,4,5], 1) == 1\nassert     left_insertion([1,2,3,4,5], 4) == 4\nassert     left_insertion([1,2,3,4,5], 5) == 4\nassert     left_insertion([1,2,3,4,5], 6) == 4\nassert     left_insertion([1,2,3,4,5], 10) == 5\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert left_insertion([1,2,3,4], -1) == 3\nassert left_insertion([1,2,3,4], 0) == 0\nassert left_insertion([1,2,3,4], 1) == 1\nassert left_insertion([1,2,3,4], 2) == 2\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    left_insertion([1,2,3,4,5], 5) == 4\n    left_insertion([1,2,3,4,5], 2) == 1\n    left_insertion([1,2,3,4,5], 4) == 4\n    left_insertion([1,2,3,4,5], 6) == 5\n    left_insertion([1,2,3,4,5], 1) == 0\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     left_insertion([1,2,4,6,8], 4) == 3\nassert     left_insertion([1,2,4,6,8], 5) == 4\nassert     left_insertion([1,2,4,6,8], 1) == 0\nassert     left_insertion([1,2,4,6,8], 9) == 5\nassert     left_insertion([1,2,4,6,8], 10) == 6\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     left_insertion([1,3,5], 1) == 0     # case 1\nassert     left_insertion([1,3,5], 3) == 1     # case 2\nassert     left_insertion([1,3,5], 5) == 2     # case 3\nassert     left_insertion([1,3,5], 6) == 3     # case 4\nassert     left_insertion([1,3,5], 7) == 4     # case 5\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     left_insertion([1, 2, 3], 3) == 2, \"The value of x was not correct\"\nassert left_insertion([1, 2, 3], 4) == 1, \"The value of x was not correct\"\nassert left_insertion([1, 2, 3], 0) == 0, \"The value of x was not correct\"\nassert left_insertion([], -1) == -1, \"The value of x was not correct\"\nassert left_insertion([1, 2, 3, 4], 5) == 3, \"The value of x was not correct\"\nprint(\"SUCCESS: test_left_insertion\")\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(check_str('ADONO'))\nassert \nprint(check_str('abcd'))\nassert \nprint(check_str('tweet'))\nassert not \nprint(check_str('tweet'))\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n\ndef check_str_2(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using re.\n    '''\n    pass\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    # Code here\n    pass\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert (check_str(\"aeyow\") == False)\nassert (check_str(\"abc\") == True)\nassert (check_str(\"qwe\") == True)\nassert (check_str(\"qwerty\") == True)\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    if __name__ == '__main__':\n        #print(\"------Start------\")\n        assert check_str(\"Aa\"), \"Error1: 'Aa' should be a vowel\"\n        assert check_str(\"eE\"), \"Error2: 'eE' should be a vowel\"\n        assert check_str(\"dD\"), \"Error3: 'dD' should be a vowel\"\n        "
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_str('e') == True \nassert     check_str('i') == False \nassert     check_str('E') == True \nassert     check_str('B') == False \nassert     check_str('@') == False \n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_str(\"Hey\") == False, \"Fail\"\nassert     check_str(\"hey\") == True, \"Fail\"\nassert     check_str(\"hello\") == True, \"Fail\"\nassert     check_str(\"hi\") == True, \"Fail\"\nassert     check_str(\"0123456789\") == False, \"Fail\"\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     geometric_sum(4) == 6, \"Should be equal to 6\"\nassert     geometric_sum(2) == 4, \"Should be equal to 4\"\nassert     geometric_sum(8) == 23, \"Should be equal to 23\"\n\nprint(\"Well done, you passed the test\")\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef min_elements(lst, k):\n    '''\n    Write a function to calculate the minimum numbers of elements required to make the sum of lst and sum to k. \n    The sum can be represented as a sum of some product of a set of integers.\n    Note: The set of integers can be of any size. \n    For example, if we want to calculate the minimum numbers of elements required to make a sum of 28, \n    then the set of integers can be the integers from 1 to 10.\n    '''\n    pass\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     geometric_sum(4) == 3\nassert     geometric_sum(5) == 8\nassert     geometric_sum(6) == 15\n\ndef better_geometric_sum(n):\n    '''\n    Write a function to calculate the better geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-10.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return (1 + better_geometric_sum(n-1)) * 1.0 / (n-1)"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     geometric_sum(4) == 4\nassert     geometric_sum(5) == 28.0\nassert     geometric_sum(6) == 144.0\nassert     geometric_sum(7) == 280.0\nassert     geometric_sum(8) == 1600.0\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     geometric_sum(0) == 1\nassert     geometric_sum(1) == 1\nassert     geometric_sum(2) == 1\nassert     geometric_sum(3) == 2\nassert     geometric_sum(4) == 4\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     geometric_sum(5) == 8, 'Should be 8'\nassert geometric_sum(8) == 12, 'Should be 12'\n\ndef arithmetic_sum(n):\n    '''\n    Write a function to calculate the arithmetic sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    pass\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    geometric_sum(1) == 1, \"incorrect\"\n    geometric_sum(2) == 2, \"incorrect\"\n    geometric_sum(3) == 6, \"incorrect\"\n    geometric_sum(4) == 15, \"incorrect\"\n    geometric_sum(5) == 43, \"incorrect\"\n    geometric_sum(6) == 132, \"incorrect\"\n    geometric_sum(7) == 429, \"incorrect\"\n    geometric_sum(8) == 1310, \"incorrect\"\n    geometric_sum(9) == 5555, \"incorrect\"\n    geometric_sum(10) == 22055, \"incorrect\"\n    geometric_sum(11) == 703525, \"incorrect\"\n    geometric_sum(12) == 4075515, \"incorrect\"\n    geometric_sum(13) == 20755255, \"incorrect\"\n    geometric_sum(14) == 97552555, \"incorrect\"\n    geometric_sum(15) == 507552555, \"incorrect\"\n    geometric_sum(16) == 2775525555, \"incorrect\"\n    geometric_sum(17) == 12575525555, \"incorrect\"\n    geometric_sum(18) == 7755255555, \"incorrect\"\n    geometric_sum(19) == 35755255555, \"incorrect\"\n    geometric_sum(20) == 167755255555, \"incorrect\"\n    geometric_sum(21) == 8755255555, \"incorrect\"\n    geometric_sum(22) == 4755255, \"incorrect\"\n    geometric_sum(23) == 27755, \"incorrect\"\n    geometric_sum(24) == 125, \"incorrect\"\n    geometric_sum(25) == 775, \"incorrect\"\n    geometric_sum(26) == 35, \"incorrect\"\n    geometric_sum(27) == 167, \"incorrect\"\n    geometric_sum(28) == 875, \"incorrect\"\n    geometric_sum(29) == 475, \"incorrect\"\n    geometric_sum(30) == 27, \"incorrect\"\n    geometric_sum(31) == 125, \"incorrect\"\n    geometric_sum(32) == 775, \"incorrect\"\n    geometric_sum(33) == 35, \"incorrect\"\n    geometric_sum(34) == 167, \"incorrect\"\n    geometric_sum(35) == 875, \"incorrect\"\n    geometric_sum(36) == 475, \"incorrect\"\n    geometric_sum(37) == 27, \"incorrect\"\n    geometric_sum(38) == 125, \"incorrect\"\n    geometric_sum(39) == 775, \"incorrect\"\n    geometric_sum(40) == 35, \"incorrect\"\n    geometric_sum(41) == 167, \"incorrect\"\n    geometric_sum(42) == 875, \"incorrect\"\n    geometric_sum(43) == 475, \"incorrect\"\n    geometric_sum(44) == 27, \"incorrect\"\n    geometric_sum(45) == 125, \"incorrect\"\n    geometric_sum(46) == 775, \"incorrect\"\n    geometric_sum(47) == 35, \"incorrect\"\n    geometric_sum(48) == 167, \"incorrect\"\n    geometric_sum(49) == 875, \"incorrect\"\n    geometric_sum(50) == 475, \"incorrect\"\n    geometric_sum(51) == 27, \"incorrect\"\n    geometric_sum(52) == 125, \"incorrect\"\n    geometric_sum(53) == 775, \"incorrect\"\n    geometric_sum(54) == 35, \"incorrect\"\n    geometric_sum(55) == 167, \"incorrect\"\n    geometric_sum(56) == 875, \"incorrect\"\n    geometric_sum(57) == 475, \"incorrect\"\n    geometric_sum(58) == 27, \"incorrect\"\n    geometric_sum(59) == 125, \"incorrect\"\n    geometric_sum(60) == 775, \"incorrect\"\n    geometric_sum(61) == 35, \"incorrect\"\n    geometric_sum(62) == 167, \"incorrect\"\n    geometric_sum(63) == 875, \"incorrect\"\n    geometric_sum(64) == 475, \"incorrect\"\n    geometric_sum(65) == 27, \"incorrect\"\n    geometric_sum(66) == 125, \"incorrect\"\n    geometric_sum(67) == 775, \"incorrect\"\n    geometric_sum(68) == 35, \"incorrect\"\n    geometric_sum(69) == 167, \"incorrect\"\n    geometric_sum(70) == 875, \"incorrect\"\n    geometric_sum(71) == 475, \"incorrect\"\n    geometric_sum(72) == 27, \"incorrect\"\n    geometric_sum(73) == 125, \"incorrect\"\n    geometric_sum(74) == 775, \"incorrect\"\n    geometric_sum(75) == 35, \"incorrect\"\n    geometric_sum(76) == 167, \"incorrect\"\n    geometric_sum(77) == 875, \"incorrect\"\n    geometric_sum(78) == 475, \"incorrect\"\n    geometric_sum(79) == 27, \"incorrect\"\n    geometric_sum(80) == 125, \"incorrect\"\n    geometric_sum(81) == 775, \"incorrect\"\n    geometric_sum(82) == 35, \"incorrect\"\n    geometric_sum(83) == 167, \"incorrect\"\n    geometric_sum(84) == 875, \"incorrect\"\n    geometric_sum(85) == 475, \"incorrect\"\n    geometric_sum(86) == 27, \"incorrect\"\n    geometric_sum(87) == 125, \"incorrect\"\n    geometric_sum(88) == 775, \"incorrect\"\n    geometric_sum(89) == 35, \"incorrect\"\n    geometric_sum(90) == 167, \"incorrect\"\n    geometric_sum(91) == 875, \"incorrect\"\n    geometric_sum(92) == 475, \"incorrect\"\n    geometric_sum(93) == 27, \"incorrect\"\n    geometric_sum(94) == 125, \"incorrect\"\n    geometric_sum(95) == 775, \"incorrect\"\n    geometric_sum(96) == 35, \"incorrect\"\n    geometric_sum(97) == 167, \"incorrect\"\n    geometric_sum(98) == 875, \"incorrect\"\n    geometric_sum(99) == 475, \"incorrect\"\n    geometric_sum(100) == 27, \"incorrect\"\n    geometric_sum(101) == 125, \"incorrect\"\n    geometric_sum(102) == 775, \"incorrect\"\n    geometric_sum(103) == 35, \"incorrect\"\n    geometric_sum(104) == 167, \"incorrect\"\n    geometric_sum(105) == 875, \"incorrect\"\n    geometric_sum(106) == 475, \"incorrect\"\n    geometric_sum(107) == 27, \"incorrect\"\n    geometric_sum(108) == 125, \"incorrect\"\n    geometric_sum(109) == 775, \"incorrect\"\n    geometric_sum(110) == 35, \"incorrect\"\n    geometric_sum(111) == 167, \"incorrect\"\n    geometric_sum(112) == 875, \"incorrect\"\n    geometric_sum(113) == 475, \"incorrect\"\n    geometric_sum(114) == 27, \"incorrect\"\n    geometric_sum(115) == 125, \"incorrect\"\n    geometric_sum(116) == 775, \"incorrect\"\n    geometric_sum(117) == 35, \"incorrect\"\n    geometric_sum(118) == 167, \"incorrect"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert          geometric_sum(1) == 0\nassert          geometric_sum(2) == 1\nassert          geometric_sum(3) == 2\nassert          geometric_sum(4) == 3\nassert          geometric_sum(5) == 6\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Index(1) == 0\nassert     find_Index(2) == 0\nassert     find_Index(3) == 1\nassert     find_Index(4) == 1\nassert     find_Index(5) == 2\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef is_Perfect_Number(n):\n    '''\n    Write a python function to check if n is a perfect number.\n    '''\n    pass\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef find_TriangularNumbers(n):\n    '''\n    Write a python function to print the first n triangular numbers. https://www.geeksforgeeks.org/print-first-n-triangular-numbers/\n    '''\n    pass\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef generate_n_digits_triangular_number(n): \n    '''\n    Write a python function to generate a random triangular number of given length with n digits. The number should be \n    generated using a uniform distribution.\n    '''\n    pass\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Index(2) == 0, \"Wrong output\"\nassert     find_Index(3) == 1, \"Wrong output\"\nassert     find_Index(4) == 2, \"Wrong output\"\nassert     find_Index(5) == 3, \"Wrong output\"\nassert     find_Index(6) == 4, \"Wrong output\"\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nfind_Index(1) == 0\nfind_Index(2) == 1\nfind_Index(3) == 2\nfind_Index(4) == 3\nfind_Index(5) == 4\nfind_Index(6) == 5\nfind_Index(7) == 6\nfind_Index(8) == 7\nfind_Index(9) == 8\nfind_Index(10) == 9\nfind_Index(11) == 10\nfind_Index(12) == 11\nfind_Index(13) == 12\nfind_Index(14) == 13\nfind_Index(15) == 14\nfind_Index(16) == 15\nfind_Index(17) == 16\nfind_Index(18) == 17\nfind_Index(19) == 18\nfind_Index(20) == 19\nfind_Index(21) == 20\nfind_Index(22) == 21\nfind_Index(23) == 22\nfind_Index(24) == 23\nfind_Index(25) == 24\nfind_Index(26) == 25\nfind_Index(27) == 26\nfind_Index(28) == 27\nfind_Index(29) == 28\nfind_Index(30) == 29\nfind_Index(31) == 30\nfind_Index(32) == 31\nfind_Index(33) == 32\nfind_Index(34) == 33\nfind_Index(35) == 34\nfind_Index(36) == 35\nfind_Index(37) == 36\nfind_Index(38) == 37\nfind_Index(39) == 38\nfind_Index(40) == 39\nfind_Index(41) == 40\nfind_Index(42) == 41\nfind_Index(43) == 42\nfind_Index(44) == 43\nfind_Index(45) == 44\nfind_Index(46) == 45\nfind_Index(47) == 46\nfind_Index(48) == 47\nfind_Index(49) == 48\nfind_Index(50) == 49\nfind_Index(51) == 50\nfind_Index(52) == 51\nfind_Index(53) == 52\nfind_Index(54) == 53\nfind_Index(55) == 54\nfind_Index(56) == 55\nfind_Index(57) == 56\nfind_Index(58) == 57\nfind_Index(59) == 58\nfind_Index(60) == 59\nfind_Index(61) == 60\nfind_Index(62) == 61\nfind_Index(63) == 62\nfind_Index(64) == 63\nfind_Index(65) == 64\nfind_Index(66) == 65\nfind_Index(67) == 66\nfind_Index(68) == 67\nfind_Index(69) == 68\nfind_Index(70) == 69\nfind_Index(71) == 70\nfind_Index(72) == 71\nfind_Index(73) == 72\nfind_Index(74) == 73\nfind_Index(75) == 74\nfind_Index(76) == 75\nfind_Index(77) == 76\nfind_Index(78) == 77\nfind_Index(79) == 78\nfind_Index(80) == 79\nfind_Index(81) == 80\nfind_Index(82) == 81\nfind_Index(83) == 82\nfind_Index(84) == 83\nfind_Index(85) == 84\nfind_Index(86) == 85\nfind_Index(87) == 86\nfind_Index(88) == 87\nfind_Index(89) == 88\nfind_Index(90) == 89\nfind_Index(91) == 90\nfind_Index(92) == 91\nfind_Index(93) == 92\nfind_Index(94) == 93\nfind_Index(95) == 94\nfind_Index(96) == 95\nfind_Index(97) == 96\nfind_Index(98) == 97\nfind_Index(99) == 98\nfind_Index(100) == 99\nfind_Index(101) == 100\nfind_Index(102) == 101\nfind_Index(103) == 102\nfind_Index(104) == 103\nfind_Index(105) == 104\nfind_Index(106) == 105\nfind_Index(107) == 106\nfind_Index(108) == 107\nfind_Index(109) == 108\nfind_Index(110) == 109\nfind_Index(111) == 110\nfind_Index(112) == 111\nfind_Index(113) == 112\nfind_Index(114) == 113\nfind_Index(115) == 114\nfind_Index(116) == 115\nfind_Index(117) == 116\nfind_Index(118) == 117\nfind_Index(119) == 118\nfind_Index(120) == 119\nfind_Index(121) == 120\nfind_Index(122) == 121\nfind_Index(123) == 122\nfind_Index(124) == 123\nfind_Index(125) == 124\nfind_Index(126) == 125\nfind_Index(127) == 126\nfind_Index(128) == 127\nfind_Index(129) == 128\nfind_Index(130) == 129\nfind_Index(131) == 130\nfind_Index(132) == 131\nfind_Index(133) == 132\nfind_Index(134) == 133\nfind_Index(135) == 134\nfind_Index(136) == 135\nfind_Index(137) == 136\nfind_Index(138) == 137\nfind_Index(139) == 138\nfind_Index(140) == 139\nfind_Index(141) == 140\nfind_Index(142) == 141\nfind_Index(143) == 142\nfind_Index(144) == 143\nfind_Index(145) == 144\nfind_Index(146) == 145\nfind_Index(147) == 146\nfind_Index(148) == 147\nfind_Index(149) == 148\nfind_Index(150) == 149\nfind_Index(151) == 150\nfind_Index(152) == 151\nfind_Index(153) == 152\nfind_Index(154) == 153\nfind_Index(155) == 154\nfind_Index(156) == 155\nfind_Index(157) == 156\nfind_Index(158) == 157\nfind_Index(159) == 158\nfind_Index(160) == 159\nfind_Index(161) == 160\nfind_Index(162) == 161\nfind_Index(163) == 162\nfind_Index(164) == 163\nfind_Index(165) == 164\nfind_Index(166) == 165\nfind_Index(167) == 166\nfind_Index(168) == 167\nfind_Index(169) == 168\nfind_Index(170) == 169\nfind_Index(171) == 170\nfind_Index(172) == 171\nfind_Index(173) == 172\nfind_Index(174) == 173\nfind_Index(175) == 174\nfind_Index(176) == 175\nfind_Index(177) == 176\nfind_Index(178) == 177\nfind_Index(179) == 178\nfind_Index(180) == 179\nfind_Index(181) == 180\nfind_Index(182) == 181\nfind_Index(183) == 182\nfind_Index(184) == 183\nfind_Index(185) == 184\nfind_Index(186) == 185\nfind_Index(187) == 186\nfind_Index(188) == 187\nfind_Index(189) == 188\nfind_Index(190) == 189\nfind_Index(191) == 190\nfind_Index(192) == 191\nfind_Index(193) == 192\nfind_Index(194) == 193\nfind_Index(195) == 194\nfind_Index(196) == 195\nfind_Index(197) == 196\nfind_Index(198) == 197\nfind_Index(199) == 198\nfind_Index(200) == 199\nfind_Index(201) == 200\nfind_Index(202) == 201\nfind_Index(203) == 202\nfind_Index(204) == 203\nfind_Index(205) == 204\nfind_Index(206) == 205\nfind_Index(207) == 206\nfind_Index(208) == 207\nfind_Index(209) == 208\nfind_Index(210) == 209\nfind_Index(211) == 210\nfind_Index(212) == 211\nfind_Index(213) == 212\nfind_Index(214) == 213\nfind_Index(215) == 214\nfind_Index(216) == 215\nfind_Index(217) == 216\nfind_Index(218) == 217\nfin"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_Index(2) == 1, \"Test Case 1\"\nassert     find_Index(3) == 2, \"Test Case 2\"\nassert     find_Index(4) == 3, \"Test Case 3\"\nassert     find_Index(5) == 4, \"Test Case 4\"\nassert     find_Index(6) == 5, \"Test Case 5\"\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    pass\n\ndef check_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    pass\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Index(3) == 0\nassert     find_Index(4) == 1\nassert     find_Index(5) == 2\nassert     find_Index(6) == 3\nassert     find_Index(7) == 4\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(find_Index(3))\nprint(find_Index(4))\nprint(find_Index(5))\nprint(find_Index(6))\nprint(find_Index(7))\nprint(find_Index(8))\nprint(find_Index(9))\nprint(find_Index(10))\nprint(find_Index(11))\nprint(find_Index(12))\nprint(find_Index(13))\nprint(find_Index(14))\nprint(find_Index(15))\nprint(find_Index(16))\nprint(find_Index(17))\nprint(find_Index(18))\nprint(find_Index(19))\nprint(find_Index(20))\nprint(find_Index(21))\nprint(find_Index(22))\nprint(find_Index(23))\nprint(find_Index(24))\nprint(find_Index(25))\nprint(find_Index(26))\nprint(find_Index(27))\nprint(find_Index(28))\nprint(find_Index(29))\nprint(find_Index(30))\nprint(find_Index(31))\nprint(find_Index(32))\nprint(find_Index(33))\nprint(find_Index(34))\nprint(find_Index(35))\nprint(find_Index(36))\nprint(find_Index(37))\nprint(find_Index(38))\nprint(find_Index(39))\nprint(find_Index(40))\nprint(find_Index(41))\nprint(find_Index(42))\nprint(find_Index(43))\nprint(find_Index(44))\nprint(find_Index(45))\nprint(find_Index(46))\nprint(find_Index(47))\nprint(find_Index(48))\nprint(find_Index(49))\nprint(find_Index(50))\nprint(find_Index(51))\nprint(find_Index(52))\nprint(find_Index(53))\nprint(find_Index(54))\nprint(find_Index(55))\nprint(find_Index(56))\nprint(find_Index(57))\nprint(find_Index(58))\nprint(find_Index(59))\nprint(find_Index(60))\nprint(find_Index(61))\nprint(find_Index(62))\nprint(find_Index(63))\nprint(find_Index(64))\nprint(find_Index(65))\nprint(find_Index(66))\nprint(find_Index(67))\nprint(find_Index(68))\nprint(find_Index(69))\nprint(find_Index(70))\nprint(find_Index(71))\nprint(find_Index(72))\nprint(find_Index(73))\nprint(find_Index(74))\nprint(find_Index(75))\nprint(find_Index(76))\nprint(find_Index(77))\nprint(find_Index(78))\nprint(find_Index(79))\nprint(find_Index(80))\nprint(find_Index(81))\nprint(find_Index(82))\nprint(find_Index(83))\nprint(find_Index(84))\nprint(find_Index(85))\nprint(find_Index(86))\nprint(find_Index(87))\nprint(find_Index(88))\nprint(find_Index(89))\nprint(find_Index(90))\nprint(find_Index(91))\nprint(find_Index(92))\nprint(find_Index(93))\nprint(find_Index(94))\nprint(find_Index(95))\nprint(find_Index(96))\nprint(find_Index(97))\nprint(find_Index(98))\nprint(find_Index(99))\nprint(find_Index(100))\nprint(find_Index(101))\nprint(find_Index(102))\nprint(find_Index(103))\nprint(find_Index(104))\nprint(find_Index(105))\nprint(find_Index(106))\nprint(find_Index(107))\nprint(find_Index(108))\nprint(find_Index(109))\nprint(find_Index(110))\nprint(find_Index(111))\nprint(find_Index(112))\nprint(find_Index(113))\nprint(find_Index(114))\nprint(find_Index(115))\nprint(find_Index(116))\nprint(find_Index(117))\nprint(find_Index(118))\nprint(find_Index(119))\nprint(find_Index(120))\nprint(find_Index(121))\nprint(find_Index(122))\nprint(find_Index(123))\nprint(find_Index(124))\nprint(find_Index(125))\nprint(find_Index(126))\nprint(find_Index(127))\nprint(find_Index(128))\nprint(find_Index(129))\nprint(find_Index(130))\nprint(find_Index(131))\nprint(find_Index(132))\nprint(find_Index(133))\nprint(find_Index(134))\nprint(find_Index(135))\nprint(find_Index(136))\nprint(find_Index(137))\nprint(find_Index(138))\nprint(find_Index(139))\nprint(find_Index(140))\nprint(find_Index(141))\nprint(find_Index(142))\nprint(find_Index(143))\nprint(find_Index(144))\nprint(find_Index(145))\nprint(find_Index(146))\nprint(find_Index(147))\nprint(find_Index(148))\nprint(find_Index(149))\nprint(find_Index(150))\nprint(find_Index(151))\nprint(find_Index(152))\nprint(find_Index(153))\nprint(find_Index(154))\nprint(find_Index(155))\nprint(find_Index(156))\nprint(find_Index(157))\nprint(find_Index(158))\nprint(find_Index(159))\nprint(find_Index(160))\nprint(find_Index(161))\nprint(find_Index(162))\nprint(find_Index(163))\nprint(find_Index(164))\nprint(find_Index(165))\nprint(find_Index(166))\nprint(find_Index(167))\nprint(find_Index(168))\nprint(find_Index(169))\nprint(find_Index(170))\nprint(find_Index(171))\nprint(find_Index(172))\nprint(find_Index(173))\nprint(find_Index(174))\nprint(find_Index(175))\nprint(find_Index(176))\nprint(find_Index(177))\nprint(find_Index(178))\nprint(find_Index(179))\nprint(find_Index(180))\nprint(find_Index(181))\nprint(find_Index(182))\nprint(find_Index(183))\nprint(find_Index(184))\nprint(find_Index(185))\nprint(find_Index(186))\nprint(find_Index(187))\nprint(find_Index(188))\nprint(find_Index(189))\nprint(find_Index(190))\nprint(find_Index(191))\nprint(find_Index(192))\nprint(find_Index(193))\nprint(find_Index(194))\nprint(find_Index(195))\nprint(find_Index(196))\nprint(find_Index(197))\nprint(find_Index(198))\nprint(find_Index(199))\nprint(find_Index(200))\nprint(find_Index(201))\nprint(find_Index(202))\nprint(find_Index(203))\nprint(find_Index(204))\nprint(find_Index(205))\nprint(find_Index(206))\nprint(find_Index(207))\nprint(find_Index(208))\nprint(find_Index(209))\nprint(find_Index(210))\nprint(find_Index(211))\nprint(find_Index(212))\nprint(find_Index(213))\nprint(find_Index(214))\nprint(find_Index(215))\nprint(find_Index(216))\nprint(find_Index(217))\nprint(find_Index(218))\nprint(find_Index(219))\nprint(find_Index(220))"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tuple_to_dict((1,2,3,4,5)) == {1:2,2:3,3:4,4:5}\nassert     tuple_to_dict(('a','b',('c','d'),'e',(1,2,3))) == {'a':'b',('c','d'):1,2:3,(1,2,3):'e'}\nassert     tuple_to_dict((1,2,3,4,5)) == {1:2,2:3,3:4,4:5}\nassert     tuple_to_dict(('a','b',('c','d'),'e',(1,2,3))) == {'a':'b',('c','d'):1,2:3,(1,2,3):'e'}\nassert     tuple_to_dict((1,2,3,4,5)) == {1:2,2:3,3:4,4:5}\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_to_dict((\"a\", \"b\", \"c\", \"d\")) == {'a': 1, 'b': 2, 'c': 3, 'd': 4}, \"Test Failed\"\nassert     tuple_to_dict((\"a\", \"b\", \"c\")) == {'a': 1, 'b': 2, 'c': 3}, \"Test Failed\"\nassert     tuple_to_dict((\"a\")) == {'a': 1}, \"Test Failed\"\nassert     tuple_to_dict((\"a\", \"b\", \"c\", \"d\", \"e\")) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, \"Test Failed\"\nassert     tuple_to_dict((\"a\", \"b\", \"c\", \"d\")) == {'a': 1, 'b': 2, 'c': 3, 'd': 4}, \"Test Failed\"\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tuple_to_dict(tuple_list) == {\n        (1,2,3): [(1,2), (2,3)],\n        (1,1,1): [(1,1), (1,1)]"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tuple_to_dict((1, 2, 3, 4)) == {1:2, 2:3, 3:4}\nassert tuple_to_dict((1, 2, 3, 4)) == {1:2, 2:3, 3:4}\nassert tuple_to_dict((1, 2, 3, 4, 5)) == {1:2, 2:3, 3:4}\nassert tuple_to_dict((1, 2, 3)) == {1:2, 2:3}\nassert tuple_to_dict((1)) == {1:1}\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef dict_to_tuple(test_dict):\n    '''\n    Write a function to convert the given dictionary to a tuple. https://www.geeksforgeeks.org/python-convert-dict-to-tuple/\n    '''\n    pass\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tuple_to_dict(('a', 1, 'c', 2)) == {('a', 1): ('c', 2)}\nassert tuple_to_dict(('a', 'b', 'c', 'd')) == {('a', 'b'): ('c', 'd')}\nprint(tuple_to_dict(('a', 1, 'c', 2)))\nprint(tuple_to_dict(('a', 'b', 'c', 'd')))\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tuple_to_dict((\"apple\", \"banana\", \"cherry\")) == {\"apple\": \"banana\", \"banana\": \"cherry\"}\nassert     tuple_to_dict((\"apple\", \"banana\", \"cherry\", \"orange\", \"kiwi\", \"apple\")) == {\"apple\": \"banana\", \"banana\": \"cherry\", \"cherry\": \"kiwi\", \"orange\": \"apple\", \"kiwi\": \"apple\"}"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     all_Characters_Same(s) == True\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nall_Characters_Same(\"abc\") == True, 'this should return True'\nassert \nall_Characters_Same(\"aa\") == False, 'this should return False'\nassert \nall_Characters_Same(\"abc\") == True, 'this should return True'\nassert \nall_Characters_Same(\"abc\") == False, 'this should return False'\nassert \nall_Characters_Same(\"abc\") == True, 'this should return True'\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     all_Characters_Same('a') == True, \"Wrong result for all_Characters_Same\"\nassert     all_Characters_Same('aa') == True, \"Wrong result for all_Characters_Same\"\nassert     all_Characters_Same('aA') == False, \"Wrong result for all_Characters_Same\"\nassert     all_Characters_Same('aB') == False, \"Wrong result for all_Characters_Same\"\nassert     all_Characters_Same('abc') == False, \"Wrong result for all_Characters_Same\"\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     all_Characters_Same('abcdefg') == True, 'Wrong answer'\nassert all_Characters_Same('abcdfe') == False, 'Wrong answer'\nassert all_Characters_Same('abcd') == False, 'Wrong answer'\nassert all_Characters_Same('abcdee') == False, 'Wrong answer'\nassert all_Characters_Same('abcdd') == False, 'Wrong answer'\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     all_Characters_Same('abc') == True\nassert     all_Characters_Same('abcdefghi') == True\nassert     all_Characters_Same('abcabc') == True\nassert     all_Characters_Same('abcdefghiabc') == True\nassert     all_Characters_Same('abcdefghijabc') == True\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     all_Characters_Same('aabcc') == True\nassert     all_Characters_Same('bb') == True\nassert     all_Characters_Same('abcc') == True\nassert     all_Characters_Same('abccb') == False\nassert     all_Characters_Same('abb') == False\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     all_Characters_Same('abcd') == True, 'Should be True'\nassert     all_Characters_Same('abb') == False, 'Should be False'\nassert     all_Characters_Same('abbc') == True, 'Should be True'\nassert     all_Characters_Same('abcabc') == True, 'Should be True'\nassert     all_Characters_Same('abcabcdef') == True, 'Should be True'\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     all_Characters_Same('b') == True, 'FAILED'\nassert all_Characters_Same('q') == False, 'FAILED'\nassert all_Characters_Same('x') == False, 'FAILED'\nassert all_Characters_Same('x') == False, 'FAILED'\nassert all_Characters_Same('x') == False, 'FAILED'\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     all_Characters_Same([\"a\",\"a\",\"a\",\"a\"]) == True\nassert     all_Characters_Same([\"b\",\"b\",\"b\",\"b\"]) == False\nassert     all_Characters_Same([\"c\",\"c\",\"c\",\"c\",\"c\"]) == False\nassert     all_Characters_Same([\"d\",\"d\",\"d\",\"d\",\"d\",\"d\",\"d\"]) == False\nassert     all_Characters_Same([\"c\",\"c\",\"c\",\"c\",\"c\"]) == True\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert area_tetrahedron(2.5) == 1.25, \\\n'''area_tetrahedron should be 1.25\nand got %s''' %area_tetrahedron(2.5)\n\nprint('OK')\n\ndef area_square(side):\n    '''\n    Write a function to caluclate the area of a square.\n    '''\n    pass\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     area_tetrahedron(3.5) == 0.00621355\nassert     area_tetrahedron(-4.0) == 0.0\nassert     area_tetrahedron(0.0) == 0.0\n\ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    pass\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     area_tetrahedron(1.4) == 1.08333333, 'Incorrect return value'\nassert     area_tetrahedron(1.8) == 1.16666667, 'Incorrect return value'\n\ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    pass\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     area_tetrahedron(1) == 0.5\nassert     area_tetrahedron(2) == 1.0\nassert     area_tetrahedron(3) == 1.0\nassert     area_tetrahedron(4) == 1.0\nassert     area_tetrahedron(5) == 1.0\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nassert area_tetrahedron(1) == 2\nassert area_tetrahedron(2) == 10\nassert area_tetrahedron(3) == 14\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert area_tetrahedron(1.0) == math.sqrt(2) / 2\nassert area_tetrahedron(2.0) == 1.0\nassert area_tetrahedron(3.0) == 2.0\nassert area_tetrahedron(4.0) == 3.0\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n\ndef area_hexahedron(side):\n    '''\n    Write a function to caluclate the area of a hexahedron.\n    '''\n    pass\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef area_circle(radius):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    pass\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert rotate_right([1,2,3], 2) == [3,1,2]\nassert rotate_right([1,2,3], -1) == [2,3,1]\nassert rotate_right([1,2,3], -2) == [3,1,2]\nassert rotate_right([1,2,3], -3) == [1,2,3]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef rotate_right(list, n):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # if list is not empty\n    if len(list) > 0:\n        # find the length of list\n        length = len(list)\n        # rotate by n times\n        for i in range(n):\n            # put the last element at the end of list\n            list.append(list[length - 1])\n            # remove the last element\n            list.pop()\n        # return the list after rotation\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rotate_right([1, 2, 3, 4, 5], 3) == [5, 1, 2, 3, 4]\nassert     rotate_right([1, 2, 3, 4, 5], 5) == [5, 1, 2, 3, 4]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rotate_right([1,2,3,4], 2) ==[3,4,1,2] \nassert     rotate_right([1,2,3,4], 1) ==[4,1,2,3]\nassert     rotate_right([1,2,3,4], 0) ==[1,2,3,4]\nassert     rotate_right([], 1) ==[]\nassert     rotate_right([], -1) ==[]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     rotate_right([1,2,3,4,5], 3) == [[3,4,5,1,2], [4,5,1,2,3], [5,1,2,3,4], [1,2,3,4,5], [2,3,4,5,1]]\n\n\ndef append_each_element_to_list_reverse(list):\n    '''\n    Write a function to append each element in a given list to a list in reverse order. https://www.geeksforgeeks.org/python-reverse-a-given-list-in-order/\n    '''\n    pass\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    pass\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_none((1,2,3)) == True, \"Expected: True\"\nassert     check_none((1,2,3,4)) == False, \"Expected: False\"\nassert     check_none((1,None,3)) == True, \"Expected: True\"\nassert     check_none((1,None,3,4)) == False, \"Expected: False\"\nassert     check_none((None,2,3)) == True, \"Expected: True\"\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_none((1,2,3,4)) == True, \"The tuple does not have any None value\"\nassert     check_none((1,2,None,4)) == False, \"The tuple has None value\"\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_none((1,None,2)) == True, \\\n        \"First assertion should be True as the tuple contains 2 none values\"\nassert     check_none((1,2,None)) == False, \\\n        \"Second assertion should be False as the tuple does not contains any none values\"\nassert     check_none((None,1,2)) == False, \\\n        \"Third assertion should be False as the tuple does not contains any none values\"\n\nprint(\"All the assertions are True\")\n\n\ndef find_max(test_list):\n    '''\n    Write a function to find the maximum value in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_none(('a', None, 'c')) == True, \"Wrong return value\"\nassert     check_none(('a', 1, 'c')) == False, \"Wrong return value\"\nassert     check_none((1, None, 'c')) == False, \"Wrong return value\"\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_none((1,None,2))\nassert     check_none((1,'a',None))\nassert     check_none(None)\nassert not check_none(('a',None,'b'))\nassert not check_none(('a','b',None))\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_none((1,2,3)) == False\nassert     check_none((1,2,3,None)) == True\nassert     check_none(('a',None,'b',None,'c')) == True\nassert     check_none((None,None,None,None,None)) == False\n\ndef get_list_common_items(list1, list2):\n    '''\n    Write a function to find the items in common and not in list1 and not in list2\n    '''\n    pass\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_none(tup1) == True\nassert check_none(tup2) == False\nassert check_none(tup3) == False\nassert check_none(tup4) == False\nassert check_none(tup5) == True\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_none((1,2,3,None,5,None,6,7)) == False, \"Should return False\"\nassert     check_none((1,2,3,4,5,6,7)) == True, \"Should return True\"\nassert     check_none(('a','b','c')) == True, \"Should return True\"\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert check_none((1, 2, 4, 5)) == False\nassert check_none((1, 2, 4, None)) == False\nassert check_none((1, 2, None, 5)) == True\nassert check_none((1, None, 2, 5)) == True\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    # test 1\n    print(check_none((None,)))\n    # test 2\n    print(check_none((1, 2, 3, None, None)))\n    # test 3\n    print(check_none((None, 2)))\n    # test 4\n    print(check_none((None, None, None)))\n    # test 5\n    print(check_none((None,)))\n    # test 6\n    print(check_none((None, None, None, None, None)))\n    # test 7\n    print(check_none((1, None, 2)))\n    # test 8\n    print(check_none((1, 2, None)))\n    # test 9\n    print(check_none((1, 2, 3, 4, 5, None))"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     divisible_by_digits(3, 6) == [\"3\", \"4\", \"5\"]\nassert     divisible_by_digits(12, 13) == [\"12\", \"13\"]\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ndivisible_by_digits(10,10) == [], \"incorrect result\"\nassert \ndivisible_by_digits(10,20) == ['10'], \"incorrect result\"\nassert \ndivisible_by_digits(10,30) == ['10','20','30'], \"incorrect result\"\nassert \ndivisible_by_digits(10,40) == ['10','20','30','40'], \"incorrect result\"\nassert \ndivisible_by_digits(10,50) == ['10','20','30','40','50'], \"incorrect result\"\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef divisible_by_three(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by three. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     divisible_by_digits(0, 10) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     divisible_by_digits(1, 10) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     divisible_by_digits(2, 10) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     divisible_by_digits(3, 10) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     divisible_by_digits(4, 10) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     divisible_by_digits(1, 13) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 'Wrong'\nassert     divisible_by_digits(1, 19) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], 'Wrong'\nassert     divisible_by_digits(1, 50) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], 'Wrong'\nassert     divisible_by_digits(1, 100) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], 'Wrong'\nassert     divisible_by_digits(1, 501) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200], 'Wrong'\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef find_digits(num):\n    '''\n    Write a function to find all digits of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     divisible_by_digits(0,100) == {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100}\n\n\ndef number_to_text(num):\n    '''\n    Write a function to convert a number to a string of text.\n    For example:\n        number_to_text(12) --> \"twelve\"\n        number_to_text(24) --> \"twenty four\"\n        number_to_text(-12) --> \"twelve\"\n    '''\n    pass\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     divisible_by_digits(123,124) == True, 'incorrect'\nassert     divisible_by_digits(12,3) == False, 'incorrect'\nassert     divisible_by_digits(11,9) == True, 'incorrect'\nassert     divisible_by_digits(15,17) == False, 'incorrect'\n\ndef sum_divisible_by_number(startnum, endnum):\n    '''\n    Write a function that returns the sum of numbers divisible by a given number from startnum to endnum. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-25.php\n    '''\n    pass\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sector_area(1,math.pi/2) == math.pi\nassert sector_area(1,1) == math.pi\nassert sector_area(1,0) == 0\nassert sector_area(1,3.14) == 1.5*math.pi\nassert sector_area(1,0) == 0\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sector_area(10,0) == None\nassert sector_area(10,45) == None\nassert sector_area(10,90) == 0\nassert sector_area(10,360) == 0\nassert sector_area(10,315) == 360*10\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sector_area(1,3) == math.pi*(1**2)*0.25\nassert sector_area(1,2) == math.pi*(1**2)\nassert sector_area(1,360) == math.pi*(1**2)\nassert sector_area(2,3) == None\nassert sector_area(2,0) == None\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef sphere_area(r):\n    '''\n    Write a function to calculate the area of a sphere. The function takes the radius as input. Function should return None if the radius is less than or equal to zero.\n    '''\n    pass\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sector_area(2,360) == None\nassert     sector_area(2,80) == None\nassert     sector_area(2,0) == None\nassert     sector_area(2,350) == None\nassert     sector_area(2,240) == None\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sector_area(3,45) == 2.4\nassert     sector_area(1,math.pi/2) == 1\nassert     sector_area(1,1) == 1\nassert     sector_area(1,math.pi*2) is None\nassert     sector_area(1,math.pi*3) is None\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sector_area(2,0) == None, 'incorrect area calculation'\nassert sector_area(2,90) == math.pi * 4 * 2, 'incorrect area calculation'\nassert sector_area(2,180) == None, 'incorrect area calculation'\nassert sector_area(2,360) == math.pi * 4 * 2, 'incorrect area calculation'\n\ndef sector_volume(r,a):\n    '''\n    Write a function to find volume of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pass\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sector_area(1, 10) == 5\nassert     sector_area(1, -10) == None\nassert     sector_area(1, 360) == None\nassert     sector_area(1, 0) == None\nassert     sector_area(0, 10) == None\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sector_area(10, 0) == None\nassert sector_area(10, 20) == 25.4768\nassert sector_area(10,30) == 25.4768\nassert sector_area(10,40) == 25.4768\nassert sector_area(10,50) == None\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nsector_area(1,360) == math.pi*(1/2)**2\n\ndef cone_area(r,a):\n    '''\n    Write a function to find area of a cone. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    pass\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef longest_common_substring(X, Y, Z): \n    '''\n    Write a function to find the longest common substring of the given three string sequence. https://www.geeksforgeeks.org/longest-common-substring-of-three-strings/\n    '''\n    pass\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     lcs_of_three(\"AGGTAB\", \"GXTXAYB\", \"TGY\") == \"GTAB\", \"incorrect\"\nassert     lcs_of_three(\"AGGTAB\", \"GXTXAYB\", \"GTAB\") == \"AGGTAB\", \"incorrect\"\nassert     lcs_of_three(\"AGGTAB\", \"GXTXAYB\", \"TGTAB\") == \"GTAB\", \"incorrect\"\nassert     lcs_of_three(\"AGGTAB\", \"GXTXAYB\", \"GXTXAYB\") == \"AGGTAB\", \"incorrect\"\nassert     lcs_of_three(\"AGGTAB\", \"GXTXAYB\", \"AGGTAB\") == \"AGGTAB\", \"incorrect\"\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nlcs_of_three(X,Y,Z) == lcs_of_three_optimized(X,Y,Z)\n\ndef lcs_of_three_optimized(X,Y,Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence.\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    T = [[[0 for k in range(n+1)] for j in range(m+1)] for i in range(o+1)]\n    for i in range(1,o+1):\n        for j in range(1,n+1):\n            for k in range(1,m+1):\n                if Z[i-1]==Y[j-1]==X[k-1]:\n                    T[i][j][k] = T[i-1][j-1][k-1]+1\n                else:\n                    T[i][j][k] = max(T[i-1][j][k],T[i][j-1][k],T[i][j][k-1])\n    return T[o][n][m]\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     lcs_of_three('aabcd', 'abcd', 'ad') == 1\nassert     lcs_of_three('aabcd', 'abcd', 'aac') == 2\nassert     lcs_of_three('aabcd', 'abcd', 'ab') == 1\nassert     lcs_of_three('aabcd', 'abcd', 'abcd') == 3\nassert     lcs_of_three('aabcd', 'abcd', 'a') == 0\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     lcs_of_three(X = 'ABCBDAB', Y = 'BDCABA', Z = 'BDCABA') == 2\nassert     lcs_of_three(X = 'ABCBDAB', Y = 'ABCBCDAB', Z = 'ABCDABCDA') == 3\n\n\ndef lcs_of_four(X, Y, Z, T):\n    '''\n    Write a function to find the longest common subsequence of the given four string sequence.\n    '''\n    pass\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     lcs_of_three('ABCDGH','ACEFGHI','ABCDEFGHI') == 'ACEFGHI'\nassert     lcs_of_three('ABCDGH','ACEFGHI','ABCDEFGHI') == 'ABCDEFGHI'\nassert     lcs_of_three('ABCDGH','ACEFGHI','ABCDEFGHI') == 'ABCDEFGHI'\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nX = \"abcdef\"\nY = \"efg\"\nZ = \"hijkl\"\nlcs_of_three(X, Y, Z)"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     lcs_of_three('ABCDGH', 'AEDFHR', 'CDEDFG') == 'ABCD', \"Should be ABCD\"\nassert     lcs_of_three('ABCDGH', 'AEDFHR', 'CDEDFG'), \"Should be ABCD\"\nassert     lcs_of_three('ABCDGH', 'AEDFHR', 'CDEDFG'), \"Should be ABCD\"\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     capital_words_spaces('Hello World') == 'Hello World'\nassert     capital_words_spaces('hello world') == 'hello world'\nassert     capital_words_spaces('HELLO WORLD') == 'HELLO WORLD'\nassert     capital_words_spaces('hello_world') == 'hello_world'\nassert     capital_words_spaces('HELLO WORLD!') == 'HELLO WORLD!'\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     capital_words_spaces('Have a nice day') ==     'Have a nice day'\nassert     capital_words_spaces('Have a nice day ') ==     'Have a nice day '\nassert     capital_words_spaces('Have a nice day    ') ==     'Have a nice day    '\nassert     capital_words_spaces('      Have a nice day') ==     '      Have a nice day'\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef join_sentences(str1):\n    '''\n    Write a function to join all the sentences in a given string. If the sentence has multiple words,\n    then join them without separating words by space.\n    '''\n    pass\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    capital_words_spaces(\"pythoN is Python\") == \"Python is Python\"\nassert capital_words_spaces(\"pythON is Python\") == \"Python is Python\"\nassert capital_words_spaces(\"pythoN is python\") == \"python is Python\"\nassert capital_words_spaces(\"pythoN is python3\") == \"python3 is Python\"\nassert capital_words_spaces(\"pythoN is python3.4\") == \"python3.4 is Python\"\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     capital_words_spaces(\"This is a string with spaces.\") == \"This is a string with spaces\"\nassert     capital_words_spaces(\"This is a string\") == \"This is a string\"\nassert     capital_words_spaces(\"This is a string with spaces.\") == \"This is a string with spaces\"\nassert     capital_words_spaces(\"This is a string with spaces.\") == \"This is a string with spaces\"\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ncapital_words_spaces('Hello World') == 'Hello World','should capitalize first word'\nassert capital_words_spaces('Hello  World') == 'Hello  World','should capitalize first and second words'\nassert capital_words_spaces('Hello World!') == 'Hello World!','should capitalize only first word'\nassert capital_words_spaces('This is a test') == 'This is a test','should capitalize first, middle and last words'\nassert capital_words_spaces('1 2 3') == '1 2 3','should capitalize only first word'\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     capital_words_spaces(\"sJAsCoVAsWnd\") == \"sJAsCoVAsWnd\"\nassert     capital_words_spaces(\"foO BaS\") == \"foO BaS\"\nassert     capital_words_spaces(\"sJAsCoVAsWnde\") == \"sJAsCoVAsWnde\"\nassert     capital_words_spaces(\"sjAsCoVAsWnd\") == \"sjAsCoVAsWnd\"\nassert     capital_words_spaces(\"AAsCoVAsWnd\") == \"AAsCoVAsWnd\"\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     capital_words_spaces('He said his name') == 'He said his name'\nassert     capital_words_spaces('Hello world') == 'Hello world'\nassert     capital_words_spaces('Hello World') == 'Hello World'\nassert     capital_words_spaces('Hi!') == 'Hi!'\nassert     capital_words_spaces('!!!') == '!!!'\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nsort_numeric_strings(nums_str) == ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0']\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_numeric_strings(['1', '2', '3']) == ['1', '2', '3']\nassert     sort_numeric_strings(['2', '1', '3']) == ['1', '2', '3']\nassert     sort_numeric_strings(['3', '1', '2']) == ['1', '2', '3']\nassert     sort_numeric_strings(['3', '2', '1']) == ['1', '2', '3']\nassert     sort_numeric_strings(['1', '1', '1', '1']) == ['1', '1', '1', '1']\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_numeric_strings(['1','5','3','100','0']) == ['0','1','3','5','100']\nassert     sort_numeric_strings(['1','5','3','4','0']) == ['0','1','4','5','3']\nassert     sort_numeric_strings(['100','4','5','3','1']) == ['1','4','5','3','100']\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_numeric_strings(['1', '21', '12', '31', '3', '231', '123', '32', '132', '12321']) == \nassert     sort_numeric_strings(['2', '22', '2', '222', '2', '2222', '2', '2222', '23', '232', '2323']) == \nassert     sort_numeric_strings(['2', '2', '1', '1', '3', '321', '3', '31', '1', '12', '132', '12']) == \nassert     sort_numeric_strings(['2', '2', '1', '1', '3', '1', '321', '3', '321', '1', '12', '132', '12']) == \nassert     sort_numeric_strings(['2', '2', '1', '1', '3', '1', '321', '3', '321', '1', '12', '132', '12']) == \n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert sort_numeric_strings([]) == []\nassert sort_numeric_strings([\"1\",\"2\",\"3\"]) == [\"1\", \"2\", \"3\"]\nassert sort_numeric_strings([\"12\",\"3\",\"4\"]) == [\"3\", \"4\", \"12\"]\nassert sort_numeric_strings([\"1\",\"12\",\"3\"]) == [\"1\", \"3\", \"12\"]\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert sort_numeric_strings(nums_str) == expected_output\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_numeric_strings(['1','2','3','4','5','6','7']) == ['1','2','3','4','5','6','7'], 'incorrect'\nassert     sort_numeric_strings(['abc','2','3','1','2','0','1','0']) == ['1','2','2','1','0','0','1','abc'], 'incorrect'\nassert     sort_numeric_strings(['1','2','3','4','5','6','7','8']) == ['1','2','3','4','5','6','7','8'], 'incorrect'\nassert     sort_numeric_strings(['a','2','3','1','2','0','1','0']) == ['1','2','2','1','0','0','1','a'], 'incorrect'\nassert     sort_numeric_strings(['abc','2','3','1','2','0','1','0']) == ['1','2','2','1','0','0','1','abc'], 'incorrect'\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef remove_first_occurrence(a):\n    '''\n    Write a function to remove the first occurrence of a string from a list of strings\n    '''\n    pass\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_numeric_strings(['783456', '91234', '30000', '12345', '0', '120000', '4567', '1345']) == ['0', '12345', '12345', '4567', '4567', '783456', '1345', '120000']\nassert     sort_numeric_strings(['12345', '4567', '783456', '91234', '0', '120000', '30000', '12345']) == ['0', '12345', '12345', '4567', '4567', '783456', '120000', '91234']\nassert     sort_numeric_strings(['4567', '783456', '91234', '0', '12345', '12345', '120000', '4567']) == ['0', '12345', '12345', '4567', '4567', '783456', '91234', '91234']\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     add_tuple([1,2,3],(3,4,5)) == ([1,2,3] + (3,4,5))\nassert add_tuple([1,2,3],(3,4,5)) == ([1,2,3] + (3,4,5))\n\ndef subtract_tuple(test_list, test_tup):\n    '''\n    Write a function to subtract the given tuple from the given list.\n    '''\n    pass\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add_tuple(['a', 'b', 'c'], ('a', 'b')) == ['a', 'b', 'c', 'a', 'b']\nassert     add_tuple(['a', 'b', 'c'], ('a', 'b', 'c')) == ['a', 'b', 'c', 'a', 'b', 'c']\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add_tuple([], (1, 2, 3, 4))     ==     ([1, 2, 3, 4],)\nassert     add_tuple([1, 2, 3], (4, 5, 6))     ==     ([1, 2, 3, 4, 5, 6],)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add_tuple([], (1, 2, 3)) == (1, 2, 3)\nassert     add_tuple([], (2, 3)) == (2, 3)\nassert     add_tuple([1], (2, 3)) == (1, 2, 3)\nassert     add_tuple([1, 2], (3, 4, 5)) == (1, 2, 3, 4, 5)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef get_second(test_list):\n    '''\n    Write a function to return the second element of the given list.\n    '''\n    pass\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     add_tuple([1,2,3], (4,5,6)) == (1,2,3,4,5,6), \"Wrong\"\nassert     add_tuple([1,2,3], (3,4,5,6)) == (1,2,3,3,4,5,6), \"Wrong\"\nassert     add_tuple([1,2,3], (4,5)) == (1,2,3,4,5), \"Wrong\"\nprint(\"Test passed.\")\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     add_tuple([1,2,3],[4,5,6]) == [1,2,3,4,5,6]\nassert     add_tuple([1,2,3,4],[5,6,7,8]) == [1,2,3,4,5,6,7,8]\nassert     add_tuple([1,2,3,4,5,6,7,8],[9,10,11,12,13]) == [1,2,3,4,5,6,7,8,9,10,11,12,13]\nassert     add_tuple([],(1,2,3)) == [1,2,3]\nassert     add_tuple([],(1,2,3,4,5)) == []\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add_tuple([1,2,3], (4,5,6)) == (1,2,3,4,5,6), \"add_tuple([1,2,3], (4,5,6))\"\nassert     add_tuple([(1,2), (3,4), (5,6), (7,8)], (9,10,11,12)) == [(1,2,9,10), (3,4,11,12), (5,6,13,14)], \"add_tuple([(1,2), (3,4), (5,6), (7,8)], (9,10,11,12))\"\nassert     add_tuple([(1,2), (3,4), (5,6), (7,8)], (9,10,11,12))!= [(1,2,9,10), (3,4,11,12), (5,6,13,14)], \"add_tuple([(1,2), (3,4), (5,6), (7,8)], (9,10,11,12))!= [(1,2,9,10), (3,4,11,12), (5,6,13,14)\"\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_min_heap_helper([1,2,3,4,5,6,7], 6) == True\nassert     check_min_heap_helper([1,2,3,4,5,6,7], 0) == False\nassert     check_min_heap_helper([1,2,3,4,5,6,7], -1) == False\nassert     check_min_heap_helper([1,2,3,4,5,6,7], 7) == False\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef check_min_heap_helper2(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    pass\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_min_heap_helper([1,2,3,4,5,6,7], 2) == True\nassert     check_min_heap_helper([], 1) == False\nassert     check_min_heap_helper([1,2,3,4,5,6,7], 0) == False\nassert     check_min_heap_helper([1,2,3,4,5,6,7], 6) == False"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_min_heap_helper([10, 1, 2, 3, 4, 5, 6, 7], 10) == True\nassert check_min_heap_helper([10, 1, 2, 3, 4, 5, 6, 7], 1) == False\nassert check_min_heap_helper([1, 1], 1) == False\nassert check_min_heap_helper([1], 1) == True\nassert check_min_heap_helper([10], 10) == True\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n\ndef check_min_heap_helper2(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    pass\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_min_heap_helper([1, 5, 3, 2, 4, 7, 9, 6, 8], 0) == True\nassert     check_min_heap_helper([1, 5, 3, 2, 4, 7, 9, 6, 8], 1) == False\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     jacobsthal_num(1) == 0\nassert     jacobsthal_num(2) == 1\nassert     jacobsthal_num(3) == 1\nassert     jacobsthal_num(4) == 3\nassert     jacobsthal_num(5) == 5\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     jacobsthal_num(1) == 0\nassert     jacobsthal_num(2) == 1\nassert     jacobsthal_num(3) == 1\nassert     jacobsthal_num(4) == 3\nassert     jacobsthal_num(5) == 5\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     jacobsthal_num(0) == 0\nassert     jacobsthal_num(1) == 1\nassert     jacobsthal_num(2) == 1\nassert     jacobsthal_num(3) == 4\nassert     jacobsthal_num(4) == 7\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    # we get the following three numbers:\n    #     1\n    #    31\n    #  654321\n    # print(jacobsthal_num(3))\n    # the list of jacobsthal numbers is in the range 1 - 10**5\n    # so the right answer is 12\n    # jacobsthal_num(10**4)\n    # the list of jacobsthal numbers is in the range 1 - 10**10\n    # so the right answer is\n    # jacobsthal_num(10**7)\n    # the list of jacobsthal numbers is in the range 1 - 10**15\n    # so the right answer is\n    # jacobsthal_num(10**11)\n    # the list of jacobsthal numbers is in the range 1 - 10**25\n    # so the right answer is\n    # jacobsthal_num(10**20)\n    # the list of jacobsthal numbers is in the range 1 - 10**30\n    # so the right answer is\n    # jacobsthal_num(10**21)\n    # the list of jacobsthal numbers is in the range 1 - 10**35\n    # so the right answer is\n    # jacobsthal_num(10**22)\n    # the list of jacobsthal numbers is in the range 1 - 10**50\n    # so the right answer is\n    # jacobsthal_num(10**49)\n    # the list of jacobsthal numbers is in the range 1 - 10**120\n    # so the right answer is\n    # jacobsthal_num(10**126)\n    # the list of jacobsthal numbers is in the range 1 - 10**160\n    # so the right answer is\n    # jacobsthal_num(10**160)\n    # the list of jacobsthal numbers is in the range 1 - 10**2000\n    # so the right answer is\n    # jacobsthal_num(10**2000)\n    # the list of jacobsthal numbers is in the range 1 - 10**3000\n    # so the right answer is\n    # jacobsthal_num(10**3000)\n    # the list of jacobsthal numbers is in the range 1 - 10**4000\n    # so the right answer is\n    # jacobsthal_num(10**4000)\n    # the list of jacobsthal numbers is in the range 1 - 10**5000\n    # so the right answer is\n    # jacobsthal_num(10**5000)\n    # the list of jacobsthal numbers is in the range 1 - 10**6000\n    # so the right answer is\n    # jacobsthal_num(10**6000)\n    # the list of jacobsthal numbers is in the range 1 - 10**7000\n    # so the right answer is\n    # jacobsthal_num(10**7000)\n    # the list of jacobsthal numbers is in the range 1 - 10**8000\n    # so the right answer is\n    # jacobsthal_num(10**8000)\n    # the list of jacobsthal numbers is in the range 1 - 10**9000\n    # so the right answer is\n    # jacobsthal_num(10**9000)\n    # the list of jacobsthal numbers is in the range 1 - 10**10000\n    # so the right answer is\n    # jacobsthal_num(10**10000)\n    # the list of jacobsthal numbers is in the range 1 - 10**12000\n    # so the right answer is\n    # jacobsthal_num(10**12000)\n    # the list of jacobsthal numbers is in the range 1 - 10**14000\n    # so the right answer is\n    # jacobsthal_num(10**14000)\n    # the list of jacobsthal numbers is in the range 1 - 10**15000\n    # so the right answer is\n    # jacobsthal_num(10**15000)\n    # the list of jacobsthal numbers is in the range 1 - 10**16000\n    # so the right answer is\n    # jacobsthal_num(10**16000)\n    # the list of jacobsthal numbers is in the range 1 - 10**17000\n    # so the right answer is\n    # jacobsthal_num(10**17000)\n    # the list of jacobsthal numbers is in the range 1 - 10**18000\n    # so the right answer is\n    # jacobsthal_num(10**18000)\n    # the list of jacobsthal numbers is in the range 1 - 10**19000\n    # so the right answer is\n    # jacobsthal_num(10**19000)\n    # the list of jacobsthal numbers is in the range 1 - 10**20000\n    # so the right answer is\n    # jacobsthal_num(10**20000)\n    # the list of jacobsthal numbers is in the range 1 - 10**21000\n    # so the right answer is\n    # jacobsthal_num(10**21000)\n    # the list of jacobsthal numbers is in the range 1 - 10**22000\n    # so the right answer is\n    # jacobsthal_num(10**22000)\n    # the list of jacobsthal numbers is in the range 1 - 10**23000\n    # so the right answer is\n    # jacobsthal_num(10**23000)\n    # the list of jacobsthal numbers is in the range 1 - 10**24000\n    # so the right answer is\n    # jacobsthal_num(10**24000)\n    # the list of jacobsthal numbers is in the range 1 - 10**25000\n    # so the right answer is\n    # jacobsthal_num(10**25000)\n    # the list of jacobsthal numbers is in the range 1 - 10**26000\n    # so the right answer is\n    # jacobsthal_num(10**26000)\n    # the list of jacobsthal numbers is in the range 1 - 10**27000\n    # so the right answer is\n    # jacobsthal_num(10**27000)\n    # the list of jacobsthal numbers is in the range 1 - 10**28000\n    # so the right answer is\n    # jacobsthal_num(10**28000)\n    # the list of jacobsthal numbers is in the range 1 - 10**29000\n    # so the right answer is\n    # jacobsthal_num(10**29000)\n    # the list of jacobsthal numbers is in the range 1 - 10**30000\n    # so the right answer is\n    # jacobsthal_num(10**30000)\n    # the list of jacobsthal numbers is in the range 1 - 10**31000\n    # so the right answer is\n    # jacobsthal_num(10**31000)\n    # the list of jacobsthal numbers is in the range 1 - 10**320000\n    # so the right answer is\n    # jacobsthal_num(10**320000)\n    # the list of jacobsthal numbers is in the range 1 - 10**33000\n    # so the right answer is\n    # jacobsthal_num(10**33000)\n    # the list of jacobsthal numbers is in the range 1 - 10**34000\n    # so the right answer is\n    # jacobsthal_num(10**34000)\n    # the list of jacobsthal numbers is in the range 1 - 10**35000\n    # so the right answer is\n    # jacobsthal_num(10**35000)\n    # the list of jacobsthal numbers is in the range 1 - 10**36000\n    # so the right answer is"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     jacobsthal_num(1) == 1\nassert     jacobsthal_num(2) == 3\nassert     jacobsthal_num(3) == 7\nassert     jacobsthal_num(4) == 15\nassert     jacobsthal_num(5) == 29\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    pass\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef jacobsthal_num_itr(n):\n    '''\n    Write a function to find the nth jacobsthal number using iteration. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    '''\n    pass\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    import math\n    x = 3\n    n = 1\n    while True:\n        x = ((2*x**2) - 2)//(x+1)\n        n += 1\n        if n == n:\n            return x\n        "
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     min_k([(5, 10), (1, 2), (4, 6), (2, 1), (3, 4), (4, 1), (5, 2), (5, 3)], 3) == [(1, 2), (2, 1), (3, 4)]\nassert     min_k([(1, 3, 5, 7), (2, 4), (3, 4), (5, 6, 7), (1, 2, 3)], 3) == [(1, 3, 5, 7)]\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     min_k([(0, 'a', 'b'), (1, 'a', 'c'), (2, 'b', 'c'), (3, 'b', 'd')], 2) == [(0, 'a', 'b'), (2, 'b', 'c')]\nassert     min_k([(0, 'a', 'b'), (1, 'a', 'c'), (2, 'b', 'c'), (3, 'b', 'd')], 3) == [(0, 'a', 'b'), (1, 'a', 'c'), (2, 'b', 'c')]\nassert     min_k([(0, 'a', 'b'), (1, 'a', 'c'), (2, 'b', 'c'), (3, 'b', 'd')], 4) == [(0, 'a', 'b'), (1, 'a', 'c'), (2, 'b', 'c')]\nassert     min_k([(0, 'a', 'b'), (1, 'a', 'c'), (2, 'b', 'c'), (3, 'b', 'd')], 5) == [(0, 'a', 'b'), (1, 'a', 'c')]\nassert     min_k([(0, 'a', 'b'), (1, 'a', 'c'), (2, 'b', 'c'), (3, 'b', 'd')], 6) == []\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert min_k([(1,2),(2,3),(4,5)], 2) == ((1,2),(4,5))\nassert min_k([(1,2),(2,3),(4,5)], 3) == ((1,2),(2,3),(4,5))\nassert min_k([(1,2),(2,3),(4,5)], 4) == ((1,2),(2,3),(4,5))\nassert min_k([(1,2),(2,3),(4,5)], 5) == ((1,2),(2,3),(4,5))\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert min_k([('a', 1), ('b', 2), ('c', 3), ('d', 4)], K=2) == ['b', 'c']\nassert min_k([('a', 1), ('b', 2), ('c', 3), ('d', 4)], K=3) == ['a', 'b', 'c']\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     min_k([(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6)], 2) == [(1, 2, 3), (2, 3, 4)]\nassert     min_k([(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6), (2, 3, 4, 5)], 2) == [(1, 2, 3), (2, 3, 4)]\nassert     min_k([(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6), (2, 3, 4, 5)], 5) == [(1, 2, 3, 4, 5)]\nassert     min_k([(1, 2, 3, 4), (2, 3, 4, 5), (3, 4, 5, 6), (2, 3, 4, 5)], 5) == [(1, 2, 3, 4, 5)]\nassert     min_k([(1, 2, 3), (2, 3, 4), (3, 4, 5, 6), (2, 3, 4, 5)], 7) == [(1, 2, 3, 4, 5, 6)]\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     min_k([[10,20], [30, 40], [50, 60], [70, 80], [90, 100]], 2) == [[30, 40], [50, 60]]\nassert     min_k([[10,20], [30, 40], [50, 60], [70, 80], [90, 100]], 1) == [[10, 20], [70, 80]]\nassert     min_k([[10,20], [30, 40], [50, 60], [70, 80], [90, 100]], 0) == [[10, 20], [70, 80]]\n\n'''\nAnother way to do min_k\n'''\n\ndef min_k_v2(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    pass\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     min_k([(1, 4), (3, 7), (9, 9)], 3) == (1, 3)\nassert min_k([(1, 4), (3, 7), (9, 9)], 1) == (1, 4)\nassert min_k([(1, 4), (3, 7), (9, 9)], 2) == (3, 7)\nassert min_k([(1, 4), (3, 7), (9, 9)], 5) == (1, 3)\nassert min_k([(1, 4), (3, 7), (9, 9)], 6) == (1, 3)\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_index_list([1,2,3,4], [4,5,6,7], [6,7,8,9]) == [4, 6, 7]\n\n'''\nSolution:\n\nWe first make lists of the first three elements of the first list,\nthen lists of the second three elements of the second list, and so on.\nWe return an empty list if at any point, one of the lists is empty.\n\nHowever, we don't have to exhaust all the elements of any given list.\nThis is because, we can use the same index for the lists, thus doing so will allow us to find the common elements. \n\nIf we don't exhaust all the lists at any point, then it would be a problem.\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef extract_index_list2(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    pass\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef test_extract_index_list():\n    l1 = [2,2,1,5,3,3]\n    l2 = [2,1,5,3,3,3]\n    l3 = [1,5,3,3,3,3]\n    assert extract_index_list(l1, l2, l3) == [2, 2, 1, 5]\n    l1 = [3,3,2,2,1,5,3,3]\n    l2 = [2,1,5,3,3,3]\n    l3 = [1,5,3,3,3,3]\n    assert extract_index_list(l1, l2, l3) == []\n    l1 = [2,2,1,5,3,3]\n    l2 = [3,3,2,2,1,5,3,3]\n    l3 = [1,5,3,3,3,3]\n    assert extract_index_list(l1, l2, l3) == [2, 2, 1, 5]\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_index_list(l1, l2, l3) == [[1, 3, 5], [1, 3, 5], [1, 3, 5], [1, 3, 5], [1, 3, 5]]\nassert     extract_index_list(l1, l2, l3) == [[1, 3, 5], [1, 3, 5], [1, 3, 5], [1, 3, 5], [1, 3, 5]]\nassert     extract_index_list(l1, l2, l3) == [[1, 3, 5], [1, 3, 5], [1, 3, 5], [1, 3, 5], [1, 3, 5]]\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_index_list([1, 2, 3], ['a', 'b', 'c'], ['d', 'e', 'f']) == ['a', 'b', 'd', 'e', 'f']\nassert     extract_index_list([1, 2, 3], ['a', 'b', 'c'], ['b', 'e', 'f']) == ['a', 'b', 'b', 'e', 'f']\nassert     extract_index_list([1, 2, 3], ['a', 'b', 'c'], ['d', 'f']) == ['a', 'b', 'd', 'f']\nassert     extract_index_list([1, 2, 3], ['a', 'b', 'c'], ['e', 'f']) == ['a', 'b', 'e', 'f']\nassert     extract_index_list([1, 2, 3], ['a', 'b', 'c'], ['a', 'b']) == ['a', 'b', 'a', 'b']\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_index_list([1, 2, 3], [4, 5, 6], [7, 8, 9]) == [1, 5]\nassert     extract_index_list([1, 2, 3], [4, 5, 6], [7, 8, 9, 1]) == [1, 5, 7, 1]\nassert     extract_index_list([1, 2, 3], [4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6]\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_index_list([1,2,3,4], [1,2,3,4], [1,2,3,4]) == [1,2,3,4], 'Test 1 failed'\nassert     extract_index_list([1,2,3,4], [1,2,3,4], [1,2,3,4]) == [1,2,3,4], 'Test 2 failed'\nassert     extract_index_list([1,2,3,4], [1,2,3,4], [1,2,3,4]) == [1,2,3,4], 'Test 3 failed'\n\ndef find_bigger_index(l1, l2):\n    '''\n    We say that l1's index is bigger if and only if l1's element is bigger than any element in l2. Write a function to find the bigger index in l1, which is bigger than any element in l2. The function should return an index.\n    '''\n    pass\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert extract_index_list([1,2,3,1], [2,3,1,2], [3,1,2,3]) == [1,2]\nassert extract_index_list([1,2,3,1,2,3], [2,3,1,2,3], [3,1,2,3]) == [1,2]\nassert extract_index_list([1,2,3,1,2,3,1,2,3], [2,3,1,2,3], [3,1,2,3]) == []\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_index_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n                            [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],\n                            [21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) ==     [21, 22, 23, 24, 25, 26, 27, 28, 29, 30]\nassert     extract_index_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n                            [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],\n                            [21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) ==     [21, 22, 23, 24, 25, 26, 27, 28, 29, 30]\nassert     extract_index_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n                            [11, 12, 13, 14, 15, 16, 17, 18, 19, 20],\n                            [21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) ==     [21, 22, 23, 24, 25, 26, 27, 28, 29, 30]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     second_smallest([1, 2, 3]) == 2, '1st'\nassert     second_smallest([1, 2, 3, 4]) == 3, '2nd'\nassert     second_smallest([1, 3, 4, 1, 3, 2]) == 3, '3rd'\nassert     second_smallest([3, 1, 1]) == 1, '4th'\nassert     second_smallest([-1, -2, -3]) == -2, '5th'\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     second_smallest([-23, 2, -1]) == -23\nassert     second_smallest([-23, -1, -2]) == -2\nassert     second_smallest([-23, -1, -1]) == -1\nassert     second_smallest([1, 2, 1]) == 1\nassert     second_smallest([1, 1, 1, 1]) == 1\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     second_smallest([1, 5, 30, 3]) == 3\nassert     second_smallest([2, 10, 5, -1, -2]) == -2\nassert     second_smallest([1, 1, 1, 1]) == 1\nassert     second_smallest([1, 1, 1, 1, 1, 1]) == 1\nassert     second_smallest([1, 1, 1, 1, 1, 1, 1, 1]) == 1\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     second_smallest([-23, -13, -6, -15, -1]) == -15\nassert     second_smallest([-5, -1, -9, -5, -7, -2, -2, -9]) == -9\nassert     second_smallest([-5, -1, -9, -5, -7, -2, -2, -9]) == -5\nassert     second_smallest([-5, -1, -9, -5, -7, -2, -2, -9]) == -5\nassert     second_smallest([-5, -1, -9, -5, -7, -2, -2, -9]) == -5\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef is_one_away(s1, s2):\n    '''\n    Write a function to check if two strings are one edit (or zero edits) away.\n    '''\n    pass\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef third_smallest(numbers):\n    '''\n    Write a function to find the third smallest number in a list.\n    '''\n    pass\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     second_smallest([]) == None, 'List is empty!'\nassert second_smallest([0,2,4,6,8,10]) == 2\nassert second_smallest([-100, -2, 0, 2, 4, 6, 8, 10]) == -2\nassert second_smallest([1,2,3,4,5]) == 5\nassert second_smallest([100,2,4,6,8,10]) == 2\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_match_zero_one('')     ==     False \nassert     text_match_zero_one('a')     ==     False \nassert     text_match_zero_one('abbbb')     ==     False \nassert     text_match_zero_one('aaaab')     ==     True \nassert     text_match_zero_one('aab')     ==     True \n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_match_zero_one('abababab') == True\nassert     text_match_zero_one('abbba') == True\nassert     text_match_zero_one('ababab') == True\nassert     text_match_zero_one('aaaa') == False\nassert     text_match_zero_one('aaaaa') == True\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ntext_match_zero_one('abb')\ntext_match_zero_one('bb')\ntext_match_zero_one('bbb')\ntext_match_zero_one('bbba')\ntext_match_zero_one('aaa')\ntext_match_zero_one('b')\n\n\n\n\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pass\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_match_zero_one('aab') == True\nassert     text_match_zero_one('ab') == False\nassert     text_match_zero_one('aa') == True\nassert     text_match_zero_one('a') == True\nassert     text_match_zero_one('') == False\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_match_zero_one(\"abcbbaa\") == True\nassert     text_match_zero_one(\"abcbb\") == False\nassert     text_match_zero_one(\"babcbbaa\") == True\nassert     text_match_zero_one(\"bbabcbbbaa\") == False\nassert     text_match_zero_one(\"\") == True\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_zero_one(\"aab\") == True \nassert text_match_zero_one(\"aab\") == False \nassert text_match_zero_one(\"abab\") == True \nassert text_match_zero_one(\"abab\") == False \nassert text_match_zero_one(\"a\") == False \n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_zero_one('abaaaa') == True\nassert     text_match_zero_one('abc') == False\nassert     text_match_zero_one('a') == True\n\ndef text_match_zero_more(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pass\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_match_zero_one(\"ababab\") == False\nassert     text_match_zero_one(\"abaaa\") == True\nassert     text_match_zero_one(\"ababa\") == True\nassert     text_match_zero_one(\"baab\") == True\nassert     text_match_zero_one(\"abaaaaa\") == True\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_match_zero_one('abbc') == True\nassert     text_match_zero_one('abc') == False\nassert     text_match_zero_one('b') == False\nassert     text_match_zero_one('a') == True\nassert     text_match_zero_one('') == False\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_zero_one(\"abababababababababab\") == True, \\\n        \"Wrong Answer. Expected 'True'\"\nassert     text_match_zero_one(\"ababababababababab\") == False, \\\n        \"Wrong Answer. Expected 'False'\"\nassert     text_match_zero_one(\"aa\") == False, \\\n        \"Wrong Answer. Expected 'False'\"\nassert     text_match_zero_one(\"a\") == False, \\\n        \"Wrong Answer. Expected 'False'\"\nassert     text_match_zero_one(\"bbb\") == True, \\\n        \"Wrong Answer. Expected 'True'\"\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ncount_reverse_pairs([\n    'hello',\n    'hi',\n    'sheila',\n    'bob',\n    'tom',\n    'jack',\n    'james',\n    'shan',\n    'anthony',\n    'jhon'\n]) == 2\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ncount_reverse_pairs([ 'hello', 'hi', 'hi', 'hello']) == 0\ncount_reverse_pairs([ 'hello', 'hi', 'hi', 'hello', 'hello']) == 1\ncount_reverse_pairs([ 'hello', 'hi', 'hi', 'hello', 'hello', 'hello', 'hello']) == 4\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_reverse_pairs([]) == 0\nassert     count_reverse_pairs(['']) == 0\nassert     count_reverse_pairs(['']) == 0\nassert     count_reverse_pairs(['','']) == 0\nassert     count_reverse_pairs(['abcd','abcd']) == 2\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_reverse_pairs([]) == 0, 'The list is empty'\nassert     count_reverse_pairs([]) == 0, 'The list is empty'\nassert     count_reverse_pairs([\"x\", \"x\", \"x\", \"x\", \"x\"]) == 1, 'The string list only has one reverse string pair'\nassert     count_reverse_pairs([\"x\", \"x\", \"x\", \"x\", \"x\"]) == 1, 'The string list only has one reverse string pair'\nassert     count_reverse_pairs([\"x\", \"x\", \"x\", \"y\", \"y\", \"y\"]) == 2, 'The string list has 2 reverse string pair'\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_reverse_pairs([\"abcd\", \"dcba\", \"llrrr\", \"\"]) == 3, \"Wrong output\"\nassert     count_reverse_pairs([\"abcd\", \"dcba\", \"llrrr\", \"eceba\"]) == 2, \"Wrong output\"\nassert     count_reverse_pairs([\"abcd\", \"dcba\", \"eceba\", \"llrrr\"]) == 4, \"Wrong output\"\nassert     count_reverse_pairs([\"abcd\", \"dcba\", \"eceba\", \"llrrr\", \"a\"]) == 5, \"Wrong output\"\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_reverse_pairs([\"a\", \"\", \"a\", \"b\", \"c\", \"\"]) == 1\nassert     count_reverse_pairs([\"\", \"\", \"\", \"\", \"\", \"\"]) == 0\nassert count_reverse_pairs([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]) == 0\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef reverse_even_odd(test_list):\n    '''\n    Write a function to reverse the even and odd characters in the given string list. https://www.geeksforgeeks.org/python-program-to-reverse-the-even-and-odd-characters-in-the-string-list/\n    '''\n    pass\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     unique_sublists([[1,2,3],1,2,2,3]) == {(1,2,3):2, 1:1, 2:2, 2:1}\nassert     unique_sublists([[1,2,3],1,2,2,3,3]) == {(1,2,3):2, 1:1, 2:2, 2:2, 3:1}\nassert     unique_sublists([[1,2,3],1,2,2,3,3,3]) == {(1,2,3):2, 1:1, 2:2, 2:2, 3:3}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    unique_sublists([1,2,3,2,2,1,1,3]) == {(1,3):3, (2,2):2, (1,1):3}\n    unique_sublists([1,2,3,2,2,1,1]) == {(1,1):4, (2,2):3, (1,3):2}\n    unique_sublists([]) == {}\n    unique_sublists([1,2,3,2,2,1]) == {(1,1):4, (2,2):3, (1,3):2}\n    unique_sublists([1,2,3,2,2,1,1]) == {(1,1):4, (2,2):3, (1,3):2}\n    unique_sublists([1,2,3,2,2,1,1,1]) == {(1,1):4, (2,2):3, (1,3):2}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     unique_sublists([]) == {(): 1}\nassert     unique_sublists([1]) == {(): 1, (1,): 1}\nassert     unique_sublists([1, 2]) == {(): 1, (1,): 2, (2,): 1}\nassert     unique_sublists([1, 1, 2]) == {(): 2, (1,): 2, (1, 1): 1, (1, 2): 1, (2,): 2}\nassert     unique_sublists([1, 2, 1, 3, 1, 2, 1]) == {(): 2, (1,): 3, (1, 2): 2, (2,): 2, (1, 1): 3, (1, 3): 1, (1, 2, 2): 1}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     unique_sublists([[1,2,3], 2, 3, 4, 1, 2]) ==     {(1, 2), (3, 4)}, 'Wrong answer'\nassert     unique_sublists([[1,2,3], 2, 3, 4, 1, 2]) ==     {(1, 2), (3, 4)}, 'Wrong answer'\nassert     unique_sublists([[1,2,3], 2, 3, 4, 1, 2]) ==     {(1, 2), (3, 4)}, 'Wrong answer'\nassert     unique_sublists([[1,2,3], 2, 3, 4, 1, 2]) ==     {(1, 2), (3, 4)}, 'Wrong answer'\nassert     unique_sublists([[1,2,3], 2, 3, 4, 1, 2]) ==     {(1, 2), (3, 4)}, 'Wrong answer'\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nunique_sublists([1,1,2,2,2,3,4,4,4,5]) == {(1, 2): 2, (2, 3): 2, (2, 4): 1, (3, 4): 1, (4, 5): 1}\nassert \nunique_sublists([1,1,2,2,2,3,4,4,4,5]) == {(1, 2): 3, (2, 3): 2, (2, 4): 2, (3, 4): 2, (4, 5): 1}\nassert \nunique_sublists([1,1,2,2,2,3,4,4,4,5]) == {(1, 2): 4, (2, 3): 3, (2, 4): 2, (3, 4): 2, (4, 5): 1}\nassert \nunique_sublists([1,1,2,2,2,3,4,4,4,5]) == {(1, 2): 3, (2, 3): 2, (2, 4): 2, (3, 4): 2, (4, 5): 1}\nassert \nunique_sublists([1,1,2,2,2,3,4,4,4,5]) == {(1, 2): 4, (2, 3): 3, (2, 4): 2, (3, 4): 2, (4, 5): 1}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     unique_sublists([[1,2,3],    [1,2,3],    [1,2,3],    [1,2,3]]) == \\\n    {\n        ([1, 2, 3],): 4,\n        ([1, 2, 3],): 3,\n        ([1, 2, 3],): 3,\n        ([1, 2, 3],): 2\n    }\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     unique_sublists([1,2,3,4]) == {(1,1),(2,1),(3,1),(4,1)}\nassert     unique_sublists([1,2,3,3,4]) == {(1,2),(2,2),(3,2),(4,1)}\nassert     unique_sublists([1,2,3,4,4,4]) == {(1,3),(2,3),(3,3),(4,1)}\nassert     unique_sublists([1,1,2,2,3,3,4,4,4,4]) == {(1,5),(2,5),(3,5),(4,1)}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     unique_sublists([]) == {() : 1}\nassert     unique_sublists([1,2,3]) == {(1,): 1, (2,): 1, (3,): 1}\nassert     unique_sublists([1,1,2,2,3,3]) == {(1,1): 2, (1,2): 2, (2,2): 2, (3,3): 2}\nassert     unique_sublists([1,2,3,4,5,6,7,8]) == {(1,1): 1, (1,2): 1, (2,2): 1, (2,3): 1, (3,3): 1, (3,4): 1, (4,4): 1, (4,5): 1, (5,5): 1, (6,6): 1, (7,7): 1, (7,8): 1, (8,8): 1}"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     unique_sublists([]) == {() : 0}\nassert     unique_sublists([1]) == {(): 1}\nassert     unique_sublists([1,1]) == {(): 1, (1,): 1}\nassert     unique_sublists([1,2]) == {(): 1, (1,): 2}\nassert     unique_sublists([1,1,1]) == {(): 1, (1,): 3}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     unique_sublists([[1,2,3],2,2,3,4,5,5,6,7,7,7]) == {((1, 2, 3), 4), ((2, 3, 4, 5), 5), ((5, 6, 7), 7)}, 'incorrectly calculated'\nassert unique_sublists([[1,2,3,4,5],2,2,3,4,5,5,6,7,7,7]) == {((1, 2, 3), 4), ((2, 3, 4, 5), 5), ((5, 6, 7), 7)}, 'incorrectly calculated'\nassert unique_sublists([[1,2,3,4,5],2,2,3,4,5,5,6,7,7,7]) == {((1, 2, 3), 4), ((2, 3, 4, 5), 5), ((5, 6, 7), 7)}, 'incorrectly calculated'\nassert unique_sublists([1,2,3,4,5,6,7,7,7]) == {((1, 2, 3), 4), ((5, 6, 7), 7)}, 'incorrectly calculated'\nassert unique_sublists([1,2,3,4,5,5,5,6,7,7]) == {((1, 2, 3), 4), ((5, 6, 7), 7)}, 'incorrectly calculated'\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_decimal('1.1')\nassert not     is_decimal('1.0')\nassert is_decimal('0.123')\nassert not     is_decimal('0.01')\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n'''\nGiven a string of digits, representing a float, return true if the number is a valid float.\n\nValid examples:\n\n\"1.3\"  ->  True\n\"10\"   ->  True\n\"1.0\"  ->  True\n\"+5\"   ->  False\n\"2.0\"  ->  False\n\"1.2\"  ->  True\n\"1e3\"  ->  True\n\"1e\"   ->  False\n\"1E2\"  ->  False\n\"+5e2\" ->  True\n\"1.5e2\" ->  True\n\"5e2\"  ->  False\n\"1e-5\" ->  False\n\".\"   ->  False\n\"e-\"   ->  False\n\"1.2.3\" ->  False\n\"1.2e5\" ->  True\n\"1.2e-\" ->  False\n\"+.5\"  ->  True\n\"-0.1\" ->  True\n\"-0.1e-2\" ->  True\n\"-1E-3\" ->  True\n\"e+3\"  ->  False\n\"0.\"   ->  False\n\"-\"   ->  False\n\"++1\"  ->  False\n\n'''"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # test your function\n    assert is_decimal('0.1') == True\n    assert is_decimal('0.2') == True\n    assert is_decimal('1.0') == True\n    "
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_decimal(\"10.1\") == True, \"incorrect result\"\nassert     is_decimal(\"10.2\") == False, \"incorrect result\"\nassert     is_decimal(\"-0.1\") == True, \"incorrect result\"\nassert     is_decimal(\"-0.2\") == False, \"incorrect result\"\nassert     is_decimal(\"-0.00\") == False, \"incorrect result\"\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_decimal('12.1') is True, \"expected 'True'\"\nassert     is_decimal('12') is False, \"expected 'False'\"\nassert     is_decimal('12.1.2') is False, \"expected 'False'\"\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef is_decimal(num):\n    '''\n    Write a function that takes a string as an argument and returns a boolean indicating whether the string is a decimal number.\n    '''\n    pass\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_decimal('0') == False\nassert     is_decimal('1') == True\nassert     is_decimal('3.14') == True\nassert     is_decimal('-3.14') == True\nassert     is_decimal('-3.14+') == True\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_decimal(\"3.0\")\nassert     is_decimal(\"3.00\")\nassert     is_decimal(\"3.000\")\nassert     is_decimal(\"3.0011\")\nassert     is_decimal(\"3.0111\")\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_decimal('') == False, 'Wrong answer with an empty string'\nassert     is_decimal('2') == False, 'Wrong answer with a 2 digit number'\nassert     is_decimal('1.2') == False, 'Wrong answer with a number that is not decimal'\nassert     is_decimal('1.2.3') == False, 'Wrong answer with a number that is not decimal'\nassert     is_decimal('1.2.3.4') == False, 'Wrong answer with a number that is not decimal'\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     unique_Element([1,2,3,4,3,2,1]) == True, \"Wrong Answer\"\nassert     unique_Element([1,2,3,4,3,2,1,1]) == False, \"Wrong Answer\"\nassert     unique_Element([1,2,3,4,3,2,1,2]) == True, \"Wrong Answer\"\nassert     unique_Element([1,2,3,4,3,2,1,2,5]) == False, \"Wrong Answer\"\nprint(\"Unique Element check is passed\")\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    unique_Element([1,1,1,2,2,3,4,5,2]) == True\n    unique_Element([1,1,1,2,2,3,4,5,5,6,6,7,8,9,1]) == False\n    unique_Element([1,1,1,1,2,2,3,4,5,6,6,7,8,9,1]) == True\n    unique_Element([1,1,1,2,2,3,4,5,6,7,8,9,1]) == False\n    unique_Element([]) == True\n    unique_Element([1,2,3,4,5,6,7,8,9,10]) == True\n\ndef is_sorted(arr):\n    '''\n    Write a python function to check whether a list of numbers is sorted or not.\n    '''\n    pass\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     unique_Element([1,1,2,3,4,5]) == True, \"Should be True\"\nassert     unique_Element([1,1,2,3,4,5,6]) == False, \"Should be False\"\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     unique_Element([1,1,1,2,2]) == True, 'Error in unique_Element'\nassert     unique_Element([1,1,1,2,2,3,4]) == False, 'Error in unique_Element'\nassert     unique_Element([1,1,1,2,2,3,4,5,5]) == False, 'Error in unique_Element'\nassert     unique_Element([1,2,2,2,2,2,2,2,2,2,2,2,2,2]) == True, 'Error in unique_Element'\nassert     unique_Element([1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]) == False, 'Error in unique_Element'\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nunique_Element([1,2,3,4,5]) == False, \"Wrong Answer\"\nassert \nunique_Element([1,1,1,1]) == True, \"Wrong Answer\"\nassert \nunique_Element([1,2,2,2]) == True, \"Wrong Answer\"\n\ndef same_Element(arr1, arr2):\n    '''\n    Write a python function to check whether two lists contain the same elements or not.\n    '''\n    pass\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     unique_Element([1,1,1,1,1,1,2,2,2,3,3,3]) == True, 'Fail'\nassert     unique_Element([1,1,1,1,1,2,2,2,3,3,3]) == False, 'Fail'\nassert     unique_Element([1,1,1,1,1,2,2,2,2,2,3,3]) == True, 'Fail'\n\nprint('Passed all test cases'"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     unique_Element([1,2,1,3,1]) == True\nassert     unique_Element([1,2,1,2]) == False\nassert     unique_Element([]) == True\nassert     unique_Element([1,2,3,4]) == True\nassert     unique_Element([]) == True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     unique_Element([1, 2, 1, 3, 4]) == True, \"Error found in unique_Element().\"\nassert     unique_Element([1, 1, 1]) == True, \"Error found in unique_Element().\"\nassert     unique_Element([2, 1, 1]) == False, \"Error found in unique_Element().\"\nassert     unique_Element([1, 2, 3, 4, 5]) == False, \"Error found in unique_Element().\"\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     unique_Element([1,2,3,4,4,5,5,6]) == True, \"Failed\"\nassert     unique_Element([1,2,3,4,4,4,4,6]) == True, \"Failed\"\nassert     unique_Element([1,2,3,4,5,6]) == False, \"Failed\"\nassert     unique_Element([1,2,3,4,5]) == True, \"Failed\"\nassert     unique_Element([1,2,3,4,5,1,2,3,4,5,1,2,3,4,5]) == False, \"Failed\"\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     unique_Element([1,2,3]) == False, 'incorrect result'\nassert     unique_Element([1,2,3,2]) == True, 'incorrect result'\nassert     unique_Element([1,2,3,4]) == False, 'incorrect result'\nassert     unique_Element([1,2,3,4,5]) == True, 'incorrect result'\nassert     unique_Element([5,1,2,3,4]) == False, 'incorrect result'\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_monthnumber_number(30) == True, \"The output should be True\"\nassert     check_monthnumber_number(31) == False, \"The output should be False\"\nassert     check_monthnumber_number(32) == True, \"The output should be True\"\nassert     check_monthnumber_number(1) == False, \"The output should be False\"\nassert     check_monthnumber_number(13) == False, \"The output should be False\"\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_monthnumber_number(12) == True\nassert     check_monthnumber_number(1) == False\nassert     check_monthnumber_number(0) == False\nassert     check_monthnumber_number(-1) == False\nassert     check_monthnumber_number(13) == False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_monthnumber_number(1) == True, 'Passing 1 and 30 for month number'\nassert     check_monthnumber_number(2) == False, 'Passing 2 and 28 for month number'\nassert     check_monthnumber_number(3) == True, 'Passing 3 and 31 for month number'\nassert     check_monthnumber_number(4) == False, 'Passing 4 and 30 for month number'\nassert     check_monthnumber_number(5) == False, 'Passing 5 and 31 for month number'\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint('-----------------')\n\ndef check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    pass\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_monthnumber_number(3) == True, \"Fail\"\nassert     check_monthnumber_number(5) == False, \"Fail\"\nassert     check_monthnumber_number(2) == False, \"Fail\"\nassert     check_monthnumber_number(12) == False, \"Fail\"\nassert     check_monthnumber_number(10) == False, \"Fail\"\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_monthnumber_number(1) == True\nassert     check_monthnumber_number(2) == False\nassert     check_monthnumber_number(3) == True\nassert     check_monthnumber_number(4) == True\nassert     check_monthnumber_number(5) == False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_monthnumber_number(31) == True\nassert     check_monthnumber_number(30) == True\nassert     check_monthnumber_number(29) == True\nassert     check_monthnumber_number(28) == True\nassert     check_monthnumber_number(31) == True\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_monthnumber_number(1) == True, 'Check 1'\nassert     check_monthnumber_number(2) == False, 'Check 2'\nassert     check_monthnumber_number(4) == False, 'Check 4'\nassert     check_monthnumber_number(6) == False, 'Check 6'\nassert     check_monthnumber_number(8) == False, 'Check 8'\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_monthnumber_number(11) == True\nassert     check_monthnumber_number(2) == False\nassert     check_monthnumber_number(12) == True\nassert     check_monthnumber_number(13) == True\nassert     check_monthnumber_number(21) == True\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef find_max_cont(arr, n):\n    '''\n    Write a python function to find the maximum contiguous sub-array of the given array. https://www.geeksforgeeks.org/maximum-contiguous-subarray/\n    '''\n    pass\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_min_diff([2,3,4,7,8,9], 5) == 1\nassert     find_min_diff([1,2,3,4,5,6], 2) == 3\nassert     find_min_diff([1,5,7,9,11,13], 10) == 2\nassert     find_min_diff([1,5,7,9,11,13], 1) == 1\nassert     find_min_diff([1,5,7,9,11,13], 14) == -1\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_min_diff([2,6,9,10,4],4) == 2\nassert     find_min_diff([2,6,9,10,4],5) == -1\nassert     find_min_diff([1,2,3,4,5],4) == 3\nassert     find_min_diff([1,2,3,4,5],5) == -1\nassert     find_min_diff([1,2,3,4,5],1) == 1\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_min_diff([1, 4, 8, 2, 3], 4) == 2\nassert     find_min_diff([1, 4, 8, 2, 3], 5) == 4\nassert     find_min_diff([1, 4, 8, 2, 3], 6) == 3\nassert     find_min_diff([1, 4, 8, 2, 3], 7) == 1\nassert     find_min_diff([1, 4, 8, 2, 3], 0) == 0\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_min_diff([1,2,5,6,7], 5) == 5 \nassert find_min_diff([1,2,4,5], 5) == 5\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert find_min_diff([],0) == 0\nassert find_min_diff([1],1) == 1\nassert find_min_diff([1,2,3],2) == 1\nassert find_min_diff([1,3,4],2) == -1\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_min_diff([1,2,3],1) == 0\nassert     find_min_diff([1,3,5],1) == 0\nassert     find_min_diff([4,5,10],1) == 1\nassert     find_min_diff([-4,-5,-10],1) == 1\nassert     find_min_diff([1,2,3],2) == 1\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\narr = [5, 1, 12, 11]\nn = len(arr)\nprint(\"The minimum difference is\", find_min_diff(arr, n))\n\n\ndef find_min_diff2(arr, n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    pass\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     number_ctr(\"one\") == 1, \"Should be 1\"\nassert     number_ctr(\"two\") == 2, \"Should be 2\"\nassert     number_ctr(\"three\") == 3, \"Should be 3\"\nassert     number_ctr(\"four\") == 4, \"Should be 4\"\nassert     number_ctr(\"five\") == 5, \"Should be 5\"\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     number_ctr('1234') == 2, \"Wrong\"\nassert     number_ctr('123') == 3, \"Wrong\"\nassert     number_ctr('abc') == 0, \"Wrong\"\nassert     number_ctr('') == 0, \"Wrong\"\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    assert(number_ctr(\"12345678\") == 8)\n    assert(number_ctr(\"101112131415161718\") == 9)\n    assert(number_ctr(\"abcdefghij\") == 5)\n    "
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef string_ctr(str):\n    '''\n    Write a python function to count number of strings in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     number_ctr('') == 0, 'check the correctness'\nassert     number_ctr('1') == 1, 'check the correctness'\nassert     number_ctr('1000000') == 1, 'check the correctness'\nassert     number_ctr('1234567890') == 10, 'check the correctness'\nassert     number_ctr('1234567890') == 10, 'check the correctness'\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     number_ctr('05') == 1\nassert     number_ctr('0001') == 0\nassert     number_ctr('1234567890') == 10\nassert     number_ctr('12345678901234567890') == 11\n\ndef number_len(str):\n    '''\n    Write a python function to count length of a string\n    '''\n    pass\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     number_ctr('') == 0, 'Empty string'\nassert number_ctr('abcd') == 4, 'abc'\nassert number_ctr('abcdefg') == 6, 'abcdefg'\nassert number_ctr('abcdefg123') == 6, 'abcdefg123'\nassert number_ctr('abcdefg123456') == 6, 'abcdefg123456'\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     number_ctr(\"Some string with digits\") == 3\nassert     number_ctr(\"Number\") == 1\nassert     number_ctr(\"\") == 0\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     number_ctr('123456789') == 9, 'FAILED'\nassert     number_ctr('1') == 1, 'FAILED'\nassert     number_ctr('1') == 1, 'FAILED'\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     number_ctr('hello world') == 4\nassert number_ctr('111222333') == 5\nassert number_ctr('123') == 1\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nis_polite(2) == 3\nis_polite(3) == 5\nis_polite(5) == 11\nis_polite(7) == 17\nis_polite(11) == 37\nis_polite(20) == 57\nis_polite(30) == 83\nis_polite(50) == 113\nis_polite(100) == 197\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_polite(0) == 1\nassert     is_polite(1) == 2\nassert     is_polite(2) == 4\nassert     is_polite(3) == 7\nassert     is_polite(4) == 10\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_polite(1) == 1\nassert     is_polite(2) == 2\nassert     is_polite(3) == 3\nassert     is_polite(4) == 4\nassert     is_polite(5) == 5\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef check_polite(n, k):\n    '''\n    Write a function to check if a number n is polite or not.\n    '''\n    pass\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(is_polite(0))\nprint(is_polite(1))\nprint(is_polite(2))\nprint(is_polite(3))\nprint(is_polite(4))\nprint(is_polite(5))\nprint(is_polite(6))\nprint(is_polite(7))\nprint(is_polite(8))\nprint(is_polite(9))\nprint(is_polite(10))\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_polite(5) == 3\nassert     is_polite(5) == 5\nassert     is_polite(5) == 0\nassert     is_polite(10) == 4\nassert     is_polite(13) == 4\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_polite(1) == 1\nassert     is_polite(2) == 2\nassert     is_polite(3) == 3\nassert     is_polite(4) == 5\nassert     is_polite(5) == 7\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     pair_wise([1, 2, 3, 4, 5]) == [[1, 2], [2, 3], [3, 4], [4, 5]]\nassert pair_wise([1, 1, 2, 2, 3]) == [[1, 1], [1, 2], [2, 2], [2, 3]]\nassert pair_wise([2, 2, 3]) == [[2, 2], [2, 3]]\nassert pair_wise([1, 2, 2, 4, 4, 5, 5, 6, 6, 6]) == [[1, 2], [2, 2], [2, 4], [4, 4], [4, 5], [5, 5], [5, 6], [6, 6], [6, 6]]\nassert pair_wise([]) == []\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     pair_wise([1, 2, 3, 4, 5]) == [[1, 2], [2, 3], [3, 4], [4, 5]]\nassert pair_wise([]) == []\nassert pair_wise([1, 2]) == [[1, 2]]\nassert pair_wise([1, 2, 3]) == [[1, 2], [2, 3]]\nassert pair_wise([1, 2, 3, 4, 5]) == [[1, 2], [2, 3], [3, 4], [4, 5]]\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(\"Check your answers. \\n\")"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     pair_wise([1, 2, 3]) == [[1, 2], [2, 3], [3, 1]]\nassert     pair_wise([]) == []\nassert     pair_wise([1, 1, 1, 1]) == [[1, 1], [1, 1]]\n\n\ndef odd_even(l1):\n    '''\n    Write a function to return a list of the elements of a given list, except those elements that are divisible by 5.\n    '''\n    pass"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     pair_wise([1,2,3,4,5,6,7,8,9]) == [\n        [1,2],\n        [2,3],\n        [3,4],\n        [4,5],\n        [5,6],\n        [6,7],\n        [7,8],\n        [8,9]\n    ]\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     pair_wise([0, 1, 2, 3, 4]) == [[0, 1], [1, 2], [2, 3], [3, 4], [4, 0]]\nassert     pair_wise([0, 1, 2, 3, 4, 5]) == [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 0]]\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     pair_wise([1,2,3,4]) == [(1, 2), (2, 3), (3, 4)]\nassert pair_wise([1,2,3,4]) == [(1, 2), (2, 3), (3, 4)]\nassert pair_wise([1,2,3,4,5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]\nassert pair_wise([1,2,3,4,5,6]) == [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]\nassert pair_wise([1,2,3,4,5,6,7,8,9]) == [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9)]\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     pair_wise([1,2,3]) == [[1,2], [2,3], [3,1]]\nassert pair_wise([1,2,3,4,5]) == [[1,2], [2,3], [3,4], [4,5]]\nassert pair_wise([1,2,3,4]) == [[1,2], [2,3], [3,4]]\nassert pair_wise([1,2,3]) == [[1,2], [2,3]]\nassert pair_wise([1,2,3,4,5,6]) == [[1,2], [2,3], [3,4], [4,5], [5,6]]\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef get_pairs_count2(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pass\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    [1, 2, 2, 2, 2], 4 == get_pairs_count([1, 2, 2, 2, 2], 4)\nassert not\n    [1, 2, 2, 2, 2], 3 == get_pairs_count([1, 2, 2, 2, 2], 3)\nassert not \n    [1, 2, 2, 2, 2], 2 == get_pairs_count([1, 2, 2, 2, 2], 2)\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_pairs_count([1,2,3,4,5], 6) == 3\nassert     get_pairs_count([2,3,4,5], 6) == 0\nassert     get_pairs_count([-1,1,2,3,4], 4) == 3\nassert     get_pairs_count([1,2,3,4,5,6], 6) == 0\nassert     get_pairs_count([1,2,3,4,5,6], -6) == 4\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    \n    # if all the numbers are negative or greater than or equal to the sum, then there are no pairs with the given sum\n    if not all(num>=0 for num in arr):\n        return 0\n    \n    pairs = 0\n    # sort the array in descending order\n    sorted_arr = sorted(arr, reverse=True)\n    for i in range(0,len(sorted_arr)):\n        # for every element in the array, get the number of pairs with the sum of the i+1th and ith element\n        pairs += check_pairs_with_sum(sorted_arr, i+1, i)\n    \n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_pairs_count([1,1,2,2,3,3,4],4) == 2, \"Should be 2 pairs with the sum 4\"\nassert     get_pairs_count([1,1,2,2,3,3,4],5) == 0, \"Should be 0 pairs with the sum 5\"\nassert     get_pairs_count([1,1,2,2,3,3,4],10) == 0, \"Should be 0 pairs with the sum 10\"\nassert     get_pairs_count([1,1,2,2,3,3,4],12) == 2, \"Should be 2 pairs with the sum 12\"\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_pairs_count([1, 2, 3, 4, 5], 8) == 4\nassert get_pairs_count([1, 2, 3, 4, 5], 0) == 0\nassert get_pairs_count([1, 2, 3, 4, 5], 3) == 1\nassert get_pairs_count([1, 2, 3, 4, 5], 7) == 2\nassert get_pairs_count([1, 2, 3, 4, 5], 10) == 1\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_pairs_count([1,2,3,4,5], 6) == 2\nassert     get_pairs_count([1,2,3,4,5], 8) == 3\nassert     get_pairs_count([1,2,3,4,5], 4) == 0\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_pairs_count([1,2,3],4) == 2, \"Wrong Output\"\nassert     get_pairs_count([2,3,4],5) == 0, \"Wrong Output\"\nassert     get_pairs_count([3,4,5],6) == 2, \"Wrong Output\"\nassert     get_pairs_count([1,2,3,4],5) == 1, \"Wrong Output\"\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nDiff([1,2,3],[1,2,4])\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n'''\nDifference between two sets A and B is the set of all objects that are in A but not in B. The set difference of A and B is the set of all objects that are in A but not in B. The set difference of A and B is the set of all objects that are in A but not in B.\n\nThe set difference of two sets A and B can also be written as (A-B).\n'''\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Diff([1,2,3],[\"a\",\"b\",\"c\"]) ==  2\nassert     Diff([],[\"a\",\"b\",\"c\"]) ==  0\nassert     Diff([1,2,3],[]) ==  3\nassert     Diff([1,2,3],[4,5,6]) ==  1\n\ndef Diff2(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    pass\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Diff([1, 2, 3, 4], [3, 4, 5, 6]) == [1, 2]\nassert     Diff([1, 2, 3, 4], [3, 5, 6, 7]) == []\nassert     Diff([1, 2, 3, 4], [4, 5, 6, 7]) == [1, 2]\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Diff([1,2,3],[1,2,4]) == [-1,-2,-2]\nassert     Diff([1,2,3,4],[1,2,4]) == [-1,-2,-2]\nassert     Diff([1,2,3,4],[1,2,4,5]) == [-1,-2,-2]\nassert     Diff([1,2,3,4,5,6],[1,2,4,5,7]) == [-1,-2,-2]\nassert     Diff([1,2,3,4,5,6],[1,2,4,5,7,8]) == [-1,-2,-2]\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Diff([1,2],[1,2,3]) == [2], 'Wrong output'\nassert     Diff([1,2],[1,2]) == [], 'Wrong output'\nassert     Diff([1,2,3], [1,2,3]) == [], 'Wrong output'\nassert     Diff([1,2,3,4,5], [1,2,3,4,5]) == [4,5], 'Wrong output'\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Diff(li1,li2)==[1,2]\nassert     Diff(li1,li3)==[]\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nodd_num_sum(1) == 4\nassert odd_num_sum(2) == 5\nassert odd_num_sum(3) == 6\nassert odd_num_sum(4) == 7\nassert odd_num_sum(5) == 8\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    odd_num_sum(3) == 36\n    odd_num_sum(5) == 36\n    odd_num_sum(8) == 256\n    odd_num_sum(100) == 3000\n    odd_num_sum(99) == 15144\n    odd_num_sum(100) == 15144\n    odd_num_sum(200) == 22960\n    odd_num_sum(1000) == 160566400\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     odd_num_sum(0) == 0, \"Odd number sum for n=0 should be 0\"\nassert odd_num_sum(1) == 1, \"Odd number sum for n=1 should be 1\"\nassert odd_num_sum(2) == 1, \"Odd number sum for n=2 should be 1\"\nassert odd_num_sum(3) == 1, \"Odd number sum for n=3 should be 1\"\nassert odd_num_sum(4) == 2, \"Odd number sum for n=4 should be 2\"\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     odd_num_sum(7) == 45, 'Function should return sum of 4th power of first n odd natural numbers.'\nassert     odd_num_sum(8) == 63, 'Function should return sum of 4th power of first n odd natural numbers.'\nassert     odd_num_sum(0) == 0, 'Function should return sum of 4th power of first n odd natural numbers.'\nassert odd_num_sum(1) == 0, 'Function should return sum of 4th power of first n odd natural numbers.'\nassert odd_num_sum(3) == 0, 'Function should return sum of 4th power of first n odd natural numbers.'\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef e_num_sum(n) :\n    '''\n    Write a python function to find the sum of fourth power of first n even natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nodd_num_sum(5) == 31\nodd_num_sum(10) == 41\nodd_num_sum(12) == 252\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_expression(\"( ( ) )\") == True\nassert check_expression(\"( ) )\") == False\nassert check_expression(\"( ) ) ( )\") == True\nassert check_expression(\"(( ) ) )\") == False\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef distribute_coins(coins, sum):\n    '''\n    Given a non-empty array of positive integers representing the number of coins in each of the buckets,\n    determine the minimum number of coins needed to form a target sum.\n\n    If it's not possible to form the target sum, return -1.\n    '''\n    n = len(coins)\n\n    d = dict()\n    for i in range(n):\n        d[coins[i]] = i\n\n    dp = [float('inf')] * (sum + 1)\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     (check_expression('((()))') == False), 'error: input: ((()))'\nassert     (check_expression('(((()))') == True), 'error: input: (((())))'\nassert     (check_expression('((((((()))))))') == False), 'error: input: ((((((())))))))'\nassert     (check_expression('((((()))') == False), 'error: input: ((((()))))'\nassert     (check_expression('((())))') == False), 'error: input: ((())'\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_expression('((())))') == False, \"1.1\"\nassert     check_expression('((()))') == True, \"1.2\"\nassert     check_expression('((()())())') == True, \"1.3\"\nassert     check_expression('((()())(((())))') == False, \"1.4\"\nassert     check_expression('((((())))))') == False, \"1.5\"\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_expression('((a+b)*c)/d') == False, \"Balanced expressions are incorrect\"\nassert     check_expression('((a+b)*c)/d') == False, \"Balanced expressions are incorrect\"\nassert     check_expression('((a+b)*c)/d') == True, \"Balanced expressions are incorrect\"\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_expression('(((a+b)-c)+(d-e))') == True\nassert     check_expression('(a+b)-(c+d)') == False\nassert     check_expression('(((a+b)-c)-d)') == False\nassert     check_expression('(a+b)-c') == True\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    check_expression(\"((((a)))\") == True, \"Case 1 is incorrect\"\n    check_expression(\"((((a))))\") == False, \"Case 2 is incorrect\"\n    check_expression(\"((((a)))))\") == False, \"Case 3 is incorrect\"\n    check_expression(\"((((a)))\") == False, \"Case 4 is incorrect\"\n    check_expression(\"((((a)))))\") == False, \"Case 5 is incorrect\"\n    check_expression(\"(((((a)))))\") == True, \"Case 6 is incorrect\"\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_expression('(a+b)*(c+d)') == False\nassert     check_expression('((a+b)*(c+d))') == False\nassert     check_expression('(((a+b)*(c+d))') == False\nassert     check_expression('(a+b)*(c+d*e)') == True\nassert     check_expression('(((a+b)*(c+d*e))') == False\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n'''\nThis problem is an input question that can be solved using recursion.\n\nConsider the following input expression:\nA = (B + (C - D) * E) / F\n\nA is a parenthesis expression.\n\n(B + (C - D) * E) = (A * (B + D))\n    (A * (B + D) * E) + (C * D) = A * (B + D * E)\n    (A * (B + D) * E) + (C * D) = A * ((B + D) * E)\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_expression(\"(()()((())\") == False\nassert check_expression(\"((())\") == True\nassert check_expression(\"(((()))\") == True\nassert check_expression(\"((((((())())))))\") == True\nassert check_expression(\"((()))(((())))\") == True\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_length(\"hello world\",2) == \"hlo wrold\"\nassert     remove_length(\"hello world\",0) == \"\"\nassert     remove_length(\"hello world\",1) == \"hlo world\"\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_length('I love Python', 2) == 'I love Python'\nassert     remove_length('I love Python', 4) == 'I love Python'\nassert     remove_length('I love Python', 6) == 'I love Python'\nassert     remove_length('I love Python', 8) == 'I love Python'\nassert     remove_length('I love Python', 9) == 'I love Python'\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_length('the quick brown fox jumps over the lazy dog', 5) == 'he quick brown fox jumps over'\nassert     remove_length('he quick brown fox jumps over the lazy dog', 2) == 'he quick brown fox jumps over'\nassert     remove_length('he quick brown fox jumps over the lazy dog', 3) == 'he quick brown fox jumps'\nassert     remove_length('the quick brown fox jumps over the lazy dog', 3) == 'the quick brown fox jumps over the lazy dog'\nassert     remove_length('he quick brown fox jumps over the lazy dog', 6) == 'the quick brown fox jumps over the lazy dog'\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nremove_length(\"aaaaaaaaaaa\", 4) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 5) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 1) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 2) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 3) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 0) == \"\"\nremove_length(\"aaaaaaaaaaa\", 1) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 2) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 3) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 4) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 5) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 6) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 7) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 8) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 9) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 10) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 11) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 12) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 13) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 14) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 15) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 16) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 17) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 18) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 19) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 20) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 21) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 22) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 23) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 24) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 25) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 26) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 27) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 28) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 29) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 30) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 31) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 32) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 33) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 34) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 35) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 36) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 37) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 38) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 39) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 40) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 41) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 42) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 43) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 44) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 45) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 46) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 47) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 48) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 49) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 50) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 51) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 52) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 53) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 54) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 55) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 56) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 57) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 58) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 59) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 60) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 61) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 62) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 63) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 64) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 65) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 66) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 67) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 68) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 69) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 70) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 71) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 72) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 73) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 74) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 75) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 76) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 77) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 78) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 79) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 80) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 81) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 82) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 83) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 84) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 85) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 86) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 87) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 88) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 89) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 90) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 91) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 92) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 93) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 94) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 95) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 96) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 97) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 98) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 99) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 100) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 101) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 102) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 103) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 104) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 105) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 106) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 107) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 108) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 109) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 110) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 111) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 112) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 113) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 114) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 115) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 116) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 117) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 118) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 119) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 120) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 121) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 122) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 123) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 124) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 125) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 126) == \"a\"\nremove_length(\"aaaaaaaaaaa\", 127) == \"a\"\nremov"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_length('', 0) == ''\nassert     remove_length('abcabc', 1) == 'abc'\nassert     remove_length('abcabc', 2) == 'bc'\nassert     remove_length('abcabcabcabc', 3) == 'bcabc'\nassert     remove_length('abcabcabca', 3) == 'abcabc'\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_length('kalpak',3) == 'kalpak'\nassert     remove_length('abac',1) == 'abac'\nassert     remove_length('kalpak',1) == ''\nassert     remove_length('kalpak',0) == ''\n\n'''\ndictionary\n'''\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_length('themanran', 2) == 'themanran'\nassert     remove_length('themanran', 3) == 'ran'\nassert     remove_length('themanran', 4) == 'ran'\nassert     remove_length('themanran', 5) == 'ran'\nassert     remove_length('themanran', 6) =='manran'\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint('''\nHere is the result of remove_length:\n''')\n\nprint(remove_length('hello world', 1))\nprint(remove_length('hello world', 3))\nprint(remove_length('hello world', 1))\nprint(remove_length('hello world', 2))\nprint(remove_length('hello world', 1))\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    occurance_substring(\"how are you\",\"you\") == None\n    occurance_substring(\"I am your developer\",\"you\") == \"I\"\n    occurance_substring(\"you are your developer\",\"you\") == \"you\"\n    occurance_substring(\"I am your developer\",\"you\") == \"I\"\n    occurance_substring(\"I am your developer\",\"you\") == \"I\"\n    occurance_substring(\"you are your developer\",\"you\") == \"you\"\n    occurance_substring(\"I am your developer\",\"you\") == \"I\"\n    occurance_substring(\"I am your developer\",\"you\") == \"I\"\n    occurance_substring(\"you are your developer\",\"you\") == \"you\"\n    occurance_substring(\"I am your developer\",\"you\") == \"I\"\n    occurance_substring(\"I am your developer\",\"you\") == \"I\"\n    occurance_substring(\"you are your developer\",\"you\") == \"you\"\n    occurance_substring(\"I am your developer\",\"you\") == \"I\"\n    occurance_substring(\"I am your developer\",\"you\") == \"I\"\n    occurance_substring(\"you are your developer\",\"you\") == \"you\"\n    occurance_substring(\"I am your developer\",\"you\") == \"I\"\n    occurance_substring(\"I am your developer\",\"you\") == \"I\"\n    occurance_substring(\"you are your developer\",\"you\") == \"you\"\n    occurance_substring(\"I am your developer\",\"you\") == \"I\"\n    occurance_substring(\"I am your developer\",\"you\") == \"I\"\n    occurance_substring(\"you are your developer\",\"you\") == \"you\"\n\nprint(\"\\n\")\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     occurance_substring(\"dasdasdasdasdasdasdasddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     occurance_substring('aabbccdddeeffghhhiiiii', 'ddd') ==    [2, 5]\nassert     occurance_substring('aabbccdddeeffghhhiiiii', 'ddd') ==    [2, 5]\nassert     occurance_substring('aabbccdddeeffghhhiiiii', 'eee') ==    None\nassert     occurance_substring('aabbccdddeeffghhhiiiii', 'll') ==    None\nassert     occurance_substring('aabbccdddeeffghhhiiiii', 'dd') ==    [2, 5]\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     occurance_substring('ababababab','ab') == [0,0,2,3]\nassert     occurance_substring('aabbabaaabbb','ba') == [0,0,2,4,6]\nassert     occurance_substring('ababababab','ab') == [0,0,2,3]\nassert     occurance_substring('aabbabaaabbb','ba') == [0,0,2,4,6]\nassert     occurance_substring('abc','c') == None\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef match_all(pattern,text):\n    '''\n    Write a function to match all occurrence of substrings with the pattern.\n    If there is more than one match, return the first occurrence.\n    '''\n    pass\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     occurance_substring('aaaa','aa') == (0,0)\nassert     occurance_substring('aaaaa','aa') == (0,0)\nassert     occurance_substring('aaaaaaaaaa','aa') == (0,0)\nassert     occurance_substring('aaaaaaaaaaa','aa') == (0,0)\nassert     occurance_substring('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa','aa') == (0,0)\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     occurance_substring('tghqdhjjm mqmfd mqmfdhjjmh mdf jhjmh qmf hdhjm','mqmfd') == (1,8)\nassert occurance_substring('tghqdhjjm mqmfd mqmfdhjjmh mdf jhjmh qmf hdhjm', 'tghqdhjjm') == (None, None)\nassert occurance_substring('tghqdhjjm mqmfd mqmfdhjjmh mdf jhjmh qmf hdhjm','mqmfdhjjm') == (None, None)\nassert occurance_substring('tghqdhjjm mqmfd mqmfdhjjmh mdf jhjmh qmf hdhjm', 'tghqdhjjm mqmfd') == (None, None)\nassert occurance_substring('tghqdhjjm mqmfd mqmfdhjjmh mdf jhjmh qmf hdhjm', 'tghqdhjjm hjmh') == (None, None)\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     occurance_substring('abcabcabcabc', 'abc') == [0, 3]\nassert     occurance_substring('abcabcabcabc', 'abcabc') == None\nassert     occurance_substring('abcabcabcabc', 'abcabcabc') == None\nassert     occurance_substring('abcabcabcabc', 'abcabcabcabc') == None\n\ndef is_palindrome(text):\n    '''\n    Write a function to check if a string is a palindrome or not. A palindrome is a string that is written the same forward and backward.\n    '''\n    pass\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     occurance_substring(\"hello how are you\",\"are\") ==    ['are', 4]\nassert    occurance_substring(\"hello how are you\",\"are!\") ==    None\nassert    occurance_substring(\"123\",\"\") ==    None\nassert    occurance_substring(\"abcde\",\"abbc\") ==    ['abbc', 4]\nassert    occurance_substring(\"abcde\",\"abbcde\") ==    ['abbcde', 5]\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    \ntext = \"aaaaaaaaaaaaababbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     odd_position([1,2,3,4,5]) == True\nassert     odd_position([1,2,3,4,5,6]) == False\nassert     odd_position([1,2,3,4,5,7]) == True\nassert     odd_position([1,2,3,4,5,6,7]) == False\nassert odd_position([1,2,3,4,5,6,7,8,9]) == False\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     odd_position([1, 3, 6, 9, 4]) == False\nassert     odd_position([1, 3, 6, 9, 4, 5]) == True\nassert     odd_position([1, 3, 6, 9, 4, 5, 7]) == False\nassert odd_position([1, 3, 6, 9, 4, 5, 7, 8]) == False\nassert odd_position([1, 3, 6, 9, 4, 5, 7, 8, 9]) == True\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     odd_position([2, 4, 0, 6, 8, 10]) == False, 'wrong'\nassert     odd_position([1, 3, 5]) == True, 'wrong'\nassert     odd_position([9, 6, 7, 2, 3, 1]) == True, 'wrong'\nassert     odd_position([1, 2, 4, 7, 11, 13, 14, 16, 19, 20, 22, 25, 27, 29, 30, 31]) == False, 'wrong'\n\ndef odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odds = [num for i, num in enumerate(nums) if i % 2 == 1]\n    return len(odds) == 0\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     odd_position([1,2,3,4,5,6,7,8,9,10]) == False\nassert     odd_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == False, \"Wrong output\"\nassert     odd_position([1, 3, 5, 7, 9]) == True, \"Wrong output\"\nassert     odd_position([1, 3, 5, 7, 9, 11]) == True, \"Wrong output\"\nassert     odd_position([1, 3, 5, 7, 9, 11, 13]) == False, \"Wrong output\"\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     odd_position([2,3,4,5]) == True, \"Should be True\"\nassert     odd_position([2,4,6,8,10]) == False, \"Should be False\"\nassert     odd_position([-1,-3,-4,-5,6]) == True, \"Should be True\"\nassert     odd_position([]) == False, \"Should be False\"\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert odd_position([1,2,3,4,5,6,7,8])\nassert odd_position([1,1,1,1,1,1,1,1])\nassert odd_position([1,2,3,4,5,6,7]) == False\nassert odd_position([0,0,0,0,0,0,0,0]) == False\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ncount_vowels('this is the best') == 1\nassert count_vowels('this is the best') == 1\nassert count_vowels('this is the best') == 1\nassert count_vowels('this is the best') == 1\nassert count_vowels('this is the best') == 1\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_vowels('abcd') == 5, count_vowels('abcd')\nassert     count_vowels('qzqxz') == 3, count_vowels('qzqxz')\nassert     count_vowels('qsxz') == 2, count_vowels('qsxz')\nassert     count_vowels('x') == 0, count_vowels('x')\nassert     count_vowels('x') == 0, count_vowels('x')\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ncount_vowels(\"abcbaba\") == 4\ncount_vowels(\"cae\") == 0\ncount_vowels(\"aabbcbb\") == 2"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    cnt = 0\n    for i in range(len(test_str)):\n        if test_str[i] in 'aeiou':\n            if i < len(test_str) - 1 and test_str[i+1] in 'aeiou':\n                cnt += 1\n            else:\n                cnt += 2\n    return cnt"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_vowels(\"programming\") == 1, \"Should return 1 for 'program'\"\nassert     count_vowels(\"is\") == 2, \"Should return 2 for 'is' and 'i'\"\nassert     count_vowels(\"I am a student.\") == 2, \"Should return 2 for 'I' and 'am'\"\nassert     count_vowels(\"abecedarian\") == 2, \"Should return 2 for 'abecedarian\"\nassert     count_vowels(\"\") == 0, \"Should return 0 for an empty string\"\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ntest_str1 = \"ababcbacadefegdehijhklij\"\ntest_str2 = \"abcbaca\"\ntest_str3 = \"acdfegde\"\nassert count_vowels(test_str1) == 5\nassert count_vowels(test_str2) == 6\nassert count_vowels(test_str3) == 3\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_vowels(\"\") == 0\nassert     count_vowels(\"a\") == 0\nassert     count_vowels(\"aa\") == 1\nassert     count_vowels(\"ae\") == 1\nassert     count_vowels(\"aea\") == 2\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_vowels(\"AaEeIiOoUu\") == 4\nassert     count_vowels(\"pPoooos\") == 5\nassert     count_vowels(\"aaEeIiOoUu\") == 4\nassert     count_vowels(\"pPoo\") == 4\nassert     count_vowels(\"\") == 0\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_vowels(\"aaeiou\") == 3\nassert     count_vowels(\"a\") == 1\nassert     count_vowels(\"aeiou\") == 2\nassert     count_vowels(\"ae\") == 0\nassert     count_vowels(\"aei\") == 0\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert find_sum([1, 2, 5, 5, 3, 5]) == 7\nassert find_sum([1, 2, 5, 5, 3, 5, 5]) == 8\nassert find_sum([]) == 0"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert find_sum([1,2,3,4,5,6,7,8,9]) == 55, \"Wrong answer\"\nassert find_sum([5,7,7,7,8]) == 29, \"Wrong answer\"\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_sum([0, 1, 2, 3, 3, 3, 4, 5, 6, 7, 8, 9, 10]) == 15\nassert     find_sum([1, 2, 2, 3, 4, 4, 5, 5, 6, 7, 8, 8, 8]) == 10\nassert     find_sum([0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9\nassert     find_sum([0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1\nassert     find_sum([1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 0\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef find_sum(arr):\n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # use the set method to remove duplicate elements\n    pass\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_sum([]) == 0, \"Empty List\"\nassert     find_sum([1]) == 1, \"One Element\"\nassert     find_sum([1, 2]) == 3, \"Two Elements\"\nassert     find_sum([1, 2, 3]) == 6, \"Three Elements\"\nassert     find_sum([1, 2, 2]) == 5, \"Repeated Elements\"\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_sum([1, 1, 3, 4, 5, 7]) == 8, '1 + 1 + 3 + 4 + 5 + 7'\nassert     find_sum([1, 1, 3, 4, 5, 7, 1]) == 9, '1 + 1 + 3 + 4 + 5 + 7 + 1'\nassert     find_sum([1, 1, 3, 4, 5, 7, 1, 1]) == 10, '1 + 1 + 3 + 4 + 5 + 7 + 1 + 1'\nassert     find_sum([1, 2, 3, 4, 5, 6]) == 10, '1 + 2 + 3 + 4 + 5 + 6'\nassert     find_sum([1, 2, 3, 4, 5, 6, 7]) == 13, '1 + 2 + 3 + 4 + 5 + 6 + 7'\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_sum([2,5,3,2,8,2,3,5]) == 10\nassert     find_sum([2,5,3,2,8,2,3,5,6]) == 12\nassert     find_sum([2,5,3,2,8,2,3,5,6,6,8]) == 16\nassert     find_sum([]) == 0\nassert     find_sum([1,5,3,2,8,2,3,5,6]) == 17\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_sum([1,2,3,4,5,6]) == 15, \"Should be: 15\"\nassert     find_sum([1,2,3,4,5,5]) == 15, \"Should be: 15\"\nassert     find_sum([1,2,3,4,5,4]) == 15, \"Should be: 15\"\nassert     find_sum([1,2,3,4,5,3]) == 15, \"Should be: 15\"\nassert     find_sum([1,2,3,4,5,6,6]) == 15, \"Should be: 15\"\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     pack_consecutive_duplicates([1,2,3,4,5,1,2,3,4,5]) == [[1,2,3,4,5],[1,2,3,4,5]]\nassert     pack_consecutive_duplicates([1,2,3,4,5,1,2,3,4,5]) == [[1,2,3,4,5],[1,2,3,4,5]]\n\ndef max_duplicate_subset(arr, n):\n    '''\n    Given an array, find the maximum subset of length k with k distinct numbers.\n    '''\n    pass\n\ndef max_duplicate_subset_with_sort(arr, n):\n    '''\n    Given an array, find the maximum subset of length k with k distinct numbers.\n    '''\n    pass\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     pack_consecutive_duplicates([1,1,2,3]) == [[1,2],[1,3]]\nassert     pack_consecutive_duplicates([1,1,1,3]) == [[1,1,3]]\nassert     pack_consecutive_duplicates([1,1,2,2,2,3]) == [[1,2],[1,2,2,3]]\nassert     pack_consecutive_duplicates([1,1,1,1]) == [[1,1]]\nassert     pack_consecutive_duplicates([1,1,1,1,2]) == [[1,1,2]]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     pack_consecutive_duplicates([1,1,1,1,1,1,1,2,2,2,2,2,2,3,3]) == [[1, 1, 1, 1, 1, 1], [1, 2, 2, 2, 2], [1, 3, 3], [2, 2, 2, 2, 2], [2, 3], [3, 3]]\nassert     pack_consecutive_duplicates([1,1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3]) == [[1, 1, 1, 1, 1], [1, 2, 2, 2, 2], [1, 3, 3], [2, 2, 2, 2, 2], [2, 3], [3, 3]]\nassert     pack_consecutive_duplicates([1,1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3]) == [[1, 1, 1, 1, 1], [1, 2, 2, 2, 2], [1, 3, 3], [2, 2, 2, 2, 2], [2, 3], [3, 3]]\nassert     pack_consecutive_duplicates([]) == []\nassert     pack_consecutive_duplicates(None) == []\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     pack_consecutive_duplicates([\"n\", \"i\", \"s\", \"n\", \"e\", \"s\", \"n\", \"s\", \"n\"]) == [['n', 'i','s'], ['n', 'e','s'], ['n','s', 'n']]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     pack_consecutive_duplicates([2,2,2]) == [[2,2],2,[2,2]]\nassert pack_consecutive_duplicates([2,2,2,2]) == [[2,2,2],[2,2],2,[2,2]]\nassert pack_consecutive_duplicates([]) == []\nassert pack_consecutive_duplicates([1]) == [[1]]\nassert pack_consecutive_duplicates([1,1,1]) == [[1],[1,1]]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     pack_consecutive_duplicates([]) == []\nassert     pack_consecutive_duplicates([1,2,3,4,5,6,7,8]) == [[1,2,3],[4,5,6],[7,8]]\nassert     pack_consecutive_duplicates([1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8]) == [[1,1,2,2],[3,3,4,4],[5,5,6,6],[7,7,8,8]]\nassert     pack_consecutive_duplicates([1,2,3,4,5,6,7,8,8,9,10]) == [[1,2,3,4],[5,6,7,8],[9,10]]\nassert     pack_consecutive_duplicates([1,1,1,2,2,2,3,3,3,4,4,4,5,5,5,6,6,6,7,7,7,7,8,8,8,9,10,10]) == [[1,1,1,2,2,2],[3,3,3,4,4,4],[5,5,5,6,6,6],[7,7,7,8,8,8],[9,9,9,10,10]]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     pack_consecutive_duplicates([1,2,3,3,4,5]) == [[1,2,3],[3,4,5]]\nassert     pack_consecutive_duplicates([1,2,3,4,5]) == [[1,2,3,4,5]]\nassert     pack_consecutive_duplicates([]) == []\n\n'''\nPython code to demonstrate working of groupby() \n'''\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     pack_consecutive_duplicates([]) == []\nassert     pack_consecutive_duplicates([0]) == [[0]]\nassert     pack_consecutive_duplicates([1,1,1]) == [[1], [1,1], [1,1,1]]\nassert     pack_consecutive_duplicates([1,2,3,4,4]) == [[1], [2], [3], [4], [4,4]]\nassert     pack_consecutive_duplicates([1,2,3,4,5,5,5]) == [[1], [2], [3], [4], [5], [5,5], [5,5,5]]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert pack_consecutive_duplicates([1,2,2,2,3,3]) == [[1, 2], [2, 2], [3, 3]]\nassert pack_consecutive_duplicates([1,1,2,3,4,4,5,6]) == [[1, 1], [2, 3], [4, 5], [6]]\nassert pack_consecutive_duplicates([1,1,2,3,4,4,5,6]) == [[1, 1], [2, 3], [4, 5], [6]]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     pack_consecutive_duplicates([1,1,2,3,4,3,4,1,2]) == [[1,1], [2,3,4], [3], [4]]\nassert     pack_consecutive_duplicates([1,1,2,3,3,4,2,4,3,5,4,5,3,2]) == [[1,1], [2,3,4], [3,4], [5,2,4,5]]\nassert     pack_consecutive_duplicates([1,1,2,2,3,3,4,4,5,5,5,5,2,4]) == [[1,1], [2,2,3,3,4,4], [5,5]]\nassert     pack_consecutive_duplicates([1,1,2,2,3,3,4,4,5,5,5,5,2,4,4,3,3,2]) == [[1,1], [2,2,3,3,4,4,5,5,5], [2,4], [3,3,4], [5,5]]\n\ndef delete_duplicates(list1):\n    '''\n    Write a function to delete duplicate elements from a given list.\n    '''\n    pass\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nassert unique_sublists([[1,2,3], [2,3], [3], [1,2,3,4], []]) == {\n    (1, 2, 3): 2,\n    (2, 3): 2,\n    (3): 2,\n    (1, 2, 3, 4): 1\n}\nassert unique_sublists([[1,2,3], [2,3], [3], [1,2,3,4], [5,2,3,4]]) == {\n    (1, 2, 3): 2,\n    (2, 3): 2,\n    (3): 2,\n    (1, 2, 3, 4): 1,\n    (5, 2, 3, 4): 1\n}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     unique_sublists([1,2,3,3,3,4]) == { (1,3): 1, (2,3): 1, (3,3): 1, (4,): 1 }\nassert     unique_sublists([1,2,3,3,3,4,5]) == { (1,3): 2, (2,3): 2, (3,3): 2, (4,): 1, (5,): 1 }\nassert     unique_sublists([1,2,3,3,3,4,5,5]) == { (1,3): 3, (2,3): 3, (3,3): 3, (4,): 2, (5,): 2 }\nassert     unique_sublists([1,2,3,3,3,4,5,5,5,5,5]) == { (1,3): 5, (2,3): 5, (3,3): 5, (4,): 4, (5,): 4 }\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert unique_sublists([1,2,3,4,5]) == {(1, 1), (2, 1), (3, 1), (4, 1), (5, 1)}\nassert unique_sublists([[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]]) == {(1, 2), (1, 3), (1, 4), (1, 5), (2, 2), (2, 3), (2, 4), (2, 5), (3, 3), (3, 4), (3, 5), (4, 4), (4, 5), (5, 5)}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     unique_sublists([]) == {}\nassert     unique_sublists([[]]) == {}\nassert     unique_sublists([[]]) == {}\nassert     unique_sublists([[], []]) == {}\nassert     unique_sublists([[], [1], [1], [1, 2]]) == {(1, 2): 3, (1,): 2, (): 1}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     unique_sublists([1, 2, 3, 4, 5]) == {(1, 1), (2, 1), (3, 1), (4, 1), (5, 1)}, 'Wrong result for same lists.'\nassert     unique_sublists([1, 1, 1, 1, 1, 1]) == {(1, 6)}, 'Wrong result for same list.'\nassert     unique_sublists([1, 1, 1, 2, 1]) == {(1, 4), (2, 3)}, 'Wrong result for list with equal sublists.'\nassert     unique_sublists([1, 2, 3, 4, 5]) == {(1, 1), (2, 1), (3, 1), (4, 1), (5, 1)}, 'Wrong result for list with unequal sublists.'\nassert     unique_sublists([1, 2, 3, 4, 5, 5]) == {(1, 1), (2, 1), (3, 1), (4, 1), (5, 2)}, 'Wrong result for list with unequal sublists.'\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert unique_sublists([]) == {}\nassert unique_sublists([1]) == {}\nassert unique_sublists([1,2]) == {(1,): 1, (2,): 1}\nassert unique_sublists([1,2,1,1]) == {(1,): 2, (2,): 2}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     unique_sublists([]) == {}\nassert     unique_sublists([1, 2, 3, 4, 5]) == {(1,): 1, (2,): 1, (3,): 1, (4,): 1, (5,): 1}\nassert     unique_sublists([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == {(1,): 2, (2,): 3, (3,): 3, (4,): 2, (5,): 2}\nassert     unique_sublists([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == {(1,): 5}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     unique_sublists(['a', 'a', 'b', 'b', 'c', 'd']) == {\n            ('a', 'a'): 2,\n            ('b', 'b'): 2,\n            ('c', 'd'): 1\n            }\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     unique_sublists([[1,2,3,4,5,6,7], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9]]) == {(1,2,3,4,5,6,7):2, (1,2,3,4,5,6,7,8,9):1}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef sum_sublists(list1):\n    '''\n    Write a function to sum the numbers in the lists. The function should return a dictionary, where the keys are the numbers of the lists. The values should be the sum of the numbers of the lists.\n    '''\n    pass\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nfind_combinations([(1,2), (3,4), (5,6)]) == [(1,2,3), (1,2,4), (1,2,5), (1,2,6), (1,3,4), (1,3,5), (1,3,6), (1,4,5), (1,4,6), (1,5,6), (2,3,4), (2,3,5), (2,3,6), (2,4,5), (2,4,6), (2,5,6), (3,4,5), (3,4,6), (3,5,6), (4,5,6)]\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_combinations([(1, 2), (3, 4), (5, 6)]) ==     [((1, 2), (3, 4)), ((1, 2), (5, 6)), ((1, 6), (3, 4)), ((1, 6), (5, 4)), ((1, 6), (5, 2)), ((1, 2), (5, 6)), ((5, 2), (1, 6)), ((5, 2), (3, 6)), ((5, 6), (1, 2)), ((5, 6), (3, 2))]     \nassert     find_combinations([(3, 4), (2, 5), (1, 6)]) ==     [((3, 4), (2, 5)), ((1, 6), (3, 4)), ((1, 6), (2, 5)), ((2, 5), (1, 6)), ((2, 5), (3, 4)), ((2, 5), (1, 6)), ((2, 5), (3, 6)), ((1, 6), (2, 5)), ((1, 6), (3, 5)), ((1, 6), (3, 4)), ((3, 4), (1, 6))]     \nassert     find_combinations([(2, 4), (3, 5), (5, 6)]) ==     [((2, 4), (3, 5)), ((3, 5), (2, 4)), ((3, 5), (5, 6)), ((5, 6), (3, 5)), ((5, 6), (2, 4)), ((5, 6), (2, 5)), ((5, 6), (3, 4)), ((5, 6), (3, 2)), ((5, 2), (3, 6)), ((5, 2), (2, 6)), ((5, 2), (2, 5)), ((5, 6), (2, 2)), ((5, 2), (2, 4)), ((5, 2), (2, 5)), ((5, 2), (2, 6)), ((5, 2), (2, 3)), ((5, 2), (2, 4)), ((5, 2), (2, 5)), ((5, 2), (2, 6)), ((5, 2), (3, 2)), ((5, 2), (3, 4)), ((5, 2), (3, 5)), ((5, 2), (3, 6)), ((5, 2), (3, 3)), ((5, 2), (3, 4)), ((5, 2), (3, 5)), ((5, 2), (3, 6)), ((5, 2), (3, 4)), ((5, 2), (3, 5)), ((5, 2), (3, 6)), ((5, 2), (3, 3)), ((5, 2), (3, 4)), ((5, 2), (3, 5)), ((5, 2), (3, 6)), ((5, 2), (3, 3)), ((5, 2), (3, 4)), ((5, 2), (3, 5)), ((5, 2), (3, 6)), ((5, 2), (3, 3)), ((5, 2), (3, 5)), ((5, 2), (3, 6)), ((5, 2), (3, 4)), ((5, 2), (3, 5)), ((5, 2), (3, 6)), ((5, 2), (3, 3)), ((5, 2), (3, 4)), ((5, 2), (3, 5)), ((5, 2), (3, 6)), ((5, 2), (3, 3)), ((5, 2), (3, 4)), ((5, 2), (3, 5)), ((5, 2), (3, 6)), ((5, 2), (3, 4)), ((5, 2), (3, 5)), ((5, 2), (3, 6)), ((5, 2), (3, 3)), ((5, 2), (3, 4)), ((5, 2), (3, 5)), ((5, 2), (3, 6)), ((5, 2), (3, 4)), ((5, 2), (3, 5)), ((5, 2), (3, 6)), ((5, 2), (3, 3)), ((5, 2), (3, 4)), ((5, 2), (3, 5)), ((5, 2), (3, 6)), ((5, 2), (3, 3)), ((5, 2), (3, 4)), ((5, 2), (3, 5)), ((5, 2), (3, 6)), ((5, 2), (3, 4)), ((5, 2), (3, 5)), ((5, 2), (3, 6)), ((5, 2), (3, 3)), ((5, 2), (3, 4)), ((5, 2), (3, 5)), ((5, 2), (3, 6)), ((5, 2), (3, 4)), ((5, 2), (3, 5)), ((5, 2), (3, 6)), ((5, 2), (3, 3)), ((5, 2), (3, 4)), ((5, 2), (3, 5)), ((5, 2), (3, 6)), ((5, 2), (3, 4)), ((5, 2), (3, 5)), ((5, 2), (3, 6)), ((5, 2), (3, 3)), ((5, 2), (3, 4)), ((5, 2), (3, 5)), ((5, 2), (3, 6)), ((5, 2), (3, 4)), ((5, 2), (3, 5)), ((5, 2), (3, 6)), ((5, 2), (3, 3)), ((5, 2), (3, 4)), ((5, 2), (3, 5)), ((5, 2), (3, 6)), ((5, 2), (3, 3)), ((5, 2), (3, 4)), ((5, 2), (3, 5)), ((5, 2), (3, 6)), ((5, 2), (3, 4)), ((5, 2), (3, 5)), ((5, 2), (3, 6)), ((5, 2), (3, 3)), ((5, 2), (3, 4)), ((5, 2), (3, 5)), ((5, 2), (3, 6)), ((5, 2), (3, 4)), ((5, 2), (3, 5)), ((5, 2), (3, 6)), ((5, 2), (3, 3)), ((5, 2), (3, 4)), ((5, 2), (3, 5)), ((5, 2), (3, 6)), ((5, 2), (3, 4)), ((5, 2), (3, 5)), ((5, 2), (3, 6)), ((5, 2), (3, 3)), ((5, 2), (3, 4)), ((5, 2), (3, 5)), ((5, 2), (3, 6)), ((5, 2), (3, 4)), ((5, 2), (3, 5)), ((5, 2), (3, 6)), ((5, 2), (3, 3)), ((5, 2), (3, 4)), ((5, 2), (3, 5)), ((5, 2), (3, 6)), ((5, 2), (3, 4)), ((5, 2), (3, 5)), ((5, 2), (3, 6)), ((5, 2), (3, 3)), ((5, 2), (3, 4)), ((5, 2), (3, 5)), ((5, 2), (3, 6)), ((5, 2), (3, 3)), ((5, 2), (3, 4)), ((5, 2), (3, 5)), ((5, 2), (3, 6)), ((5, 2), (3, 4)), ((5, 2), (3, 5)), ((5, 2), (3, 6)), ((5, 2), (3, 3)), ((5, 2), (3, 4)), ((5, 2), (3, 5)), ((5, 2), (3, 6)), ((5, 2), (3, 3)), ((5, 2), (3, 4)), ((5, 2), (3, 5)), ((5, 2), (3, 6)), ((5, 2), (3, 4)), ((5, 2), (3, 5)), ((5, 2), (3, 6)), ((5, 2), (3, 3)), ((5, 2), (3, 4)), ((5, 2), (3, 5)), ((5, 2), (3, 6)), ((5, 2), (3, 4)), ((5, 2), (3, 5)), ((5, 2), (3, 6)), ((5, 2), (3, 3)), ((5, 2), (3, 4)), ((5, 2), (3, 5)), ((5"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_combinations([(1, 2), (2, 3)]) == [(1, 2), (2, 3)]\nassert     find_combinations([(2, 3), (1, 2), (3, 4), (1, 2)]) == [(1, 2), (3, 4), (1, 2), (2, 3)]\nassert     find_combinations([(1, 2), (2, 3), (3, 4), (4, 5)]) == None\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod(verbose=True)"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_combinations([(1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)]) == [\n        (1, 2, 3),\n        (1, 2, 4),\n        (1, 3, 4),\n        (2, 3, 4),\n        (1, 2, 3, 4),\n    ]\n\n\ndef find_subsets_in_list(l):\n    '''\n    Write a function to find the subsets in a list.\n    '''\n    pass\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_combinations(tuple(['A','B','C','D'])) ==  set(('A','B','C','D'),('A','C','D'),('A','B','D'),('C','B','D'))\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_combinations([(3,), (2,), (1,), (4,), (3,)]) == [\n    ((3,),), ((3,), (2,)), ((3,), (1,)), ((3,), (2, 4)), ((3,), (1, 2)), ((3,), (1, 4)), ((3,), (2, 3)), ((3,), (2, 1)), ((3,), (1, 2, 3)), ((3,), (2, 1, 4)), ((3,), (1, 2, 3, 4)), ((2,), (1, 3)), ((2,), (1, 4)), ((2,), (1, 3, 4)), ((2,), (1, 4, 3)), ((2,), (1, 3, 4, 5)), ((2,), (1, 3, 4, 5, 6)), ((2,), (1, 3, 4, 5, 6, 7)), ((2,), (1, 3, 4, 5, 6, 7, 8))]\nassert     find_combinations([(1,), (2,), (3,), (4,), (5,)]) == [\n    ((1,),), ((1,), (2,)), ((1,), (2, 3)), ((1,), (2, 4)), ((1,), (2, 3, 4)), ((1,), (3,)), ((1,), (4,)), ((1,), (5,)), ((2,), (1, 3)), ((2,), (1, 4)), ((2,), (1, 3, 4)), ((2,), (1, 4, 3)), ((2,), (1, 3, 4, 5)), ((2,), (1, 3, 4, 5, 6)), ((2,), (1, 3, 4, 5, 6, 7)), ((2,), (1, 3, 4, 5, 6, 7, 8)), ((2,), (1, 3, 4, 5, 6, 7, 8, 9))]\nassert     find_combinations([(2,), (3,), (4,), (5,), (6,)]) == [\n    ((2,),), ((2,), (3,)), ((2,), (3, 4)), ((2,), (3, 5)), ((2,), (3, 4, 5)), ((2,), (4,)), ((2,), (5,)), ((2,), (6,)), ((3,), (2,)), ((3,), (2, 3)), ((3,), (2, 4)), ((3,), (2, 3, 4)), ((3,), (2, 4, 3)), ((3,), (2, 3, 4, 5)), ((3,), (2, 3, 4, 5, 6)), ((3,), (2, 3, 4, 5, 6, 7)), ((3,), (2, 3, 4, 5, 6, 7, 8)), ((3,), (2, 3, 4, 5, 6, 7, 8, 9)), ((3,), (2, 3, 4, 5, 6, 7, 8, 9, 10))]\nassert     find_combinations([(2,), (3,), (4,), (5,), (6, 7)]) == [\n    ((2,), (3,)), ((2,), (3, 4)), ((2,), (3, 5)), ((2,), (3, 4, 5)), ((2,), (4,)), ((2,), (5,)), ((2,), (6,)), ((3,), (2,)), ((3,), (2, 3)), ((3,), (2, 4)), ((3,), (2, 3, 4)), ((3,), (2, 4, 3)), ((3,), (2, 3, 4, 5)), ((3,), (2, 3, 4, 5, 6)), ((3,), (2, 3, 4, 5, 6, 7)), ((3,), (2, 3, 4, 5, 6, 7, 8)), ((3,), (2, 3, 4, 5, 6, 7, 8, 9)), ((3,), (2, 3, 4, 5, 6, 7, 8, 9, 10)), ((3,), (2, 3, 4, 5, 6, 7, 8, 9, 10, 11))]\nassert     find_combinations([(2,), (3,), (4,), (5,), (6, 7, 8)]) == [\n    ((2,), (3,)), ((2,), (3, 4)), ((2,), (3, 5)), ((2,), (3, 4, 5)), ((2,), (4,)), ((2,), (5,)), ((2,), (6,)), ((3,), (2,)), ((3,), (2, 3)), ((3,), (2, 4)), ((3,), (2, 3, 4)), ((3,), (2, 4, 3)), ((3,), (2, 3, 4, 5)), ((3,), (2, 3, 4, 5, 6)), ((3,), (2, 3, 4, 5, 6, 7)), ((3,), (2, 3, 4, 5, 6, 7, 8)), ((3,), (2, 3, 4, 5, 6, 7, 8, 9)), ((3,), (2, 3, 4, 5, 6, 7, 8, 9, 10)), ((3,), (2, 3, 4, 5, 6, 7, 8, 9, 10, 11)), ((4,), (2,)), ((4,), (2, 3)), ((4,), (2, 3, 4)), ((4,), (2, 3, 4, 5)), ((4,), (2, 3, 4, 5, 6)), ((4,), (2, 3, 4, 5, 6, 7)), ((4,), (2, 3, 4, 5, 6, 7, 8)), ((4,), (2, 3, 4, 5, 6, 7, 8, 9)), ((4,), (2, 3, 4, 5, 6, 7, 8, 9, 10)), ((4,), (2, 3, 4, 5, 6, 7, 8, 9, 10, 11))]\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_combinations([(1, 2, 3, 4), (1, 2, 3, 5), (1, 2, 3, 6), (1, 2, 4), (1, 2, 4, 5), (1, 2, 4, 6), (1, 2, 5), (1, 2, 5, 6), (1, 3, 4), (1, 3, 4, 5), (1, 3, 4, 6), (1, 3, 5), (1, 3, 5, 6), (1, 4, 5), (1, 4, 5, 6), (1, 6), (1, 6, 5), (2, 3, 4), (2, 3, 4, 5), (2, 3, 4, 6), (2, 3, 5), (2, 3, 5, 6), (2, 4), (2, 4, 5), (2, 4, 5, 6), (2, 5), (2, 5, 6), (3, 4), (3, 4, 5), (3, 4, 5, 6), (3, 5), (3, 5, 6), (4), (4, 5), (4, 5, 6), (5), (5, 6), (6)]) == [(1, 2, 3, 4), (1, 2, 3, 5), (1, 2, 3, 6), (1, 2, 4), (1, 2, 4, 5), (1, 2, 4, 6), (1, 2, 5), (1, 2, 5, 6), (1, 3, 4), (1, 3, 4, 5), (1, 3, 4, 6), (1, 3, 5), (1, 3, 5, 6), (1, 4), (1, 4, 5), (1, 4, 5, 6), (1, 6), (1, 6, 5), (2, 3, 4), (2, 3, 4, 5), (2, 3, 4, 6), (2, 3, 5), (2, 3, 5, 6), (2, 4), (2, 4, 5), (2, 4, 5, 6), (2, 5), (2, 5, 6), (3, 4), (3, 4, 5), (3, 4, 5, 6), (3, 5), (3, 5, 6), (4), (4, 5), (4, 5, 6), (5), (5, 6), (6)]:\n    print('test_find_combinations: passed')\nelse:\n    print('test_find_combinations: failed')\n\n'''\nSample output:\n\ntest_find_combinations: passed\n'''\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_combinations([(1,2),(4,6)]) == [(1,4),(2,6),(1,6),(4,6)]\nassert     find_combinations([(1,2),(4,6)]) == [(1,4),(2,6),(1,6),(4,6)]\nassert     find_combinations([(1,2),(4,6)]) == [(1,4),(2,6),(1,6),(4,6)]\nassert     find_combinations([(1,2),(4,6)]) == [(1,4),(2,6),(1,6),(4,6)]\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_combinations(['(1, 2)', '(1, 3)', '(1, 4)', '(1, 5)', '(1, 6)', '(1, 7)', '(1, 8)', '(1, 9)', '(1, 10)', '(1, 11)', '(1, 12)', '(1, 13)', '(1, 14)', '(1, 15)', '(1, 16)', '(1, 17)', '(1, 18)', '(1, 19)', '(1, 20)', '(2, 3)', '(2, 4)', '(2, 5)', '(2, 6)', '(2, 7)', '(2, 8)', '(2, 9)', '(2, 10)', '(2, 11)', '(2, 12)', '(2, 13)', '(2, 14)', '(2, 15)', '(2, 16)', '(2, 17)', '(2, 18)', '(2, 19)', '(2, 20)', '(3, 4)', '(3, 5)', '(3, 6)', '(3, 7)', '(3, 8)', '(3, 9)', '(3, 10)', '(3, 11)', '(3, 12)', '(3, 13)', '(3, 14)', '(3, 15)', '(3, 16)', '(3, 17)', '(3, 18)', '(3, 19)', '(3, 20)', '(4, 5)', '(4, 6)', '(4, 7)', '(4, 8)', '(4, 9)', '(4, 10)', '(4, 11)', '(4, 12)', '(4, 13)', '(4, 14)', '(4, 15)', '(4, 16)', '(4, 17)', '(4, 18)', '(4, 19)', '(4, 20)', '(5, 6)', '(5, 7)', '(5, 8)', '(5, 9)', '(5, 10)', '(5, 11)', '(5, 12)', '(5, 13)', '(5, 14)', '(5, 15)', '(5, 16)', '(5, 17)', '(5, 18)', '(5, 19)', '(5, 20)', '(6, 7)', '(6, 8)', '(6, 9)', '(6, 10)', '(6, 11)', '(6, 12)', '(6, 13)', '(6, 14)', '(6, 15)', '(6, 16)', '(6, 17)', '(6, 18)', '(6, 19)', '(6, 20)', '(7, 8)', '(7, 9)', '(7, 10)', '(7, 11)', '(7, 12)', '(7, 13)', '(7, 14)', '(7, 15)', '(7, 16)', '(7, 17)', '(7, 18)', '(7, 19)', '(7, 20)', '(8, 9)', '(8, 10)', '(8, 11)', '(8, 12)', '(8, 13)', '(8, 14)', '(8, 15)', '(8, 16)', '(8, 17)', '(8, 18)', '(8, 19)', '(8, 20)', '(9, 10)', '(9, 11)', '(9, 12)', '(9, 13)', '(9, 14)', '(9, 15)', '(9, 16)', '(9, 17)', '(9, 18)', '(9, 19)', '(9, 20)', '(10, 11)', '(10, 12)', '(10, 13)', '(10, 14)', '(10, 15)', '(10, 16)', '(10, 17)', '(10, 18)', '(10, 19)', '(10, 20)', '(11, 12)', '(11, 13)', '(11, 14)', '(11, 15)', '(11, 16)', '(11, 17)', '(11, 18)', '(11, 19)', '(11, 20)', '(12, 13)', '(12, 14)', '(12, 15)', '(12, 16)', '(12, 17)', '(12, 18)', '(12, 19)', '(12, 20)', '(13, 14)', '(13, 15)', '(13, 16)', '(13, 17)', '(13, 18)', '(13, 19)', '(13, 20)', '(14, 15)', '(14, 16)', '(14, 17)', '(14, 18)', '(14, 19)', '(14, 20)', '(15, 16)', '(15, 17)', '(15, 18)', '(15, 19)', '(15, 20)', '(16, 17)', '(16, 18)', '(16, 19)', '(16, 20)', '(17, 18)', '(17, 19)', '(17, 20)', '(18, 19)', '(18, 20)']\n    ):\n        # driver code to test the above function \n        \n        # creating a list of tuples \n        l1 = ['(1, 2)', '(1, 3)', '(1, 4)', '(1, 5)', '(1, 6)', '(1, 7)', '(1, 8)', '(1, 9)', '(1, 10)', '(1, 11)', '(1, 12)', '(1, 13)', '(1, 14)', '(1, 15)', '(1, 16)', '(1, 17)', '(1, 18)', '(1, 19)', '(1, 20)', '(2, 3)', '(2, 4)', '(2, 5)', '(2, 6)', '(2, 7)', '(2, 8)', '(2, 9)', '(2, 10)', '(2, 11)', '(2, 12)', '(2, 13)', '(2, 14)', '(2, 15)', '(2, 16)', '(2, 17)', '(2, 18)', '(2, 19)', '(2, 20)', '(3, 4)', '(3, 5)', '(3, 6)', '(3, 7)', '(3, 8)', '(3, 9)', '(3, 10)', '(3, 11)', '(3, 12)', '(3, 13)', '(3, 14)', '(3, 15)', '(3, 16)', '(3, 17)', '(3, 18)', '(3, 19)', '(3, 20)', '(4, 5)', '(4, 6)', '(4, 7)', '(4, 8)', '(4, 9)', '(4, 10)', '(4, 11)', '(4, 12)', '(4, 13)', '(4, 14)', '(4, 15)', '(4, 16)', '(4, 17)', '(4, 18)', '(4, 19)', '(4, 20)', '(5, 6)', '(5, 7)', '(5, 8)', '(5, 9)', '(5, 10)', '(5, 11)', '(5, 12)', '(5, 13)', '(5, 14)', '(5, 15)', '(5, 16)', '(5, 17)', '(5, 18)', '(5, 19)', '(5, 20)', '(6, 7)', '(6, 8)', '(6, 9)', '(6, 10)', '(6, 11)', '(6, 12)', '(6, 13)', '(6, 14)', '(6, 15)', '(6, 16)', '(6, 17)', '(6, 18)', '(6, 19)', '(6, 20)', '(7, 8)', '(7, 9)', '(7, 10)', '(7, 11)', '(7, 12)', '(7, 13)', '(7, 14)', '(7, 15)', '(7, 16)', '(7, 17)', '(7, 18)', '(7, 19)', '(7, 20)', '(8, 9)', '(8, 10)', '(8, 11)', '(8, 12)', '(8, 13)', '(8, 14)', '(8, 15)', '(8, 16)', '(8, 17)', '(8, 18)', '(8, 19)', '(8, 20)', '(9, 10)', '(9, 11)', '(9, 12)', '(9, 13)', '(9, 14)', '(9, 15)'"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef is_prime(n) : \n    '''\n    Given a positive integer n, write a python function to check whether it is a prime number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_divisors(4) == 2\nassert     count_divisors(6) == 3\nassert     count_divisors(9) == 4\nassert     count_divisors(10) == 5\nassert     count_divisors(20) == 6\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef get_factors(n) : \n    '''\n    Write a python function to print the factors of a number. \n    '''\n    pass\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    count_divisors(4) == 2\n    count_divisors(5) == 2\n    count_divisors(3) == 1\n    count_divisors(10) == 4\n    count_divisors(100) == 31\n    count_divisors(20) == 6\n    count_divisors(30) == 9\n\n    count_divisors(1) == 1\n    count_divisors(7) == 1\n    count_divisors(0) == 0\n    count_divisors(5) == 1\n    count_divisors(10) == 2\n    count_divisors(12) == 3\n    count_divisors(24) == 4\n    count_divisors(25) == 5\n\ndef get_divisors(n):\n    '''\n    Write a python function to get divisors of a given number n. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    pass\n    "
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ncount_divisors(6) == 5\ncount_divisors(8) == 7\ncount_divisors(14) == 8"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert count_divisors(0) == 0\nassert count_divisors(2) == 3\nassert count_divisors(3) == 2\nassert count_divisors(5) == 5\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert count_divisors(9) == 2\nassert count_divisors(6) == 3\nassert count_divisors(24) == 4\n\ndef smallest_non_repeat_substring(s):\n    '''\n    Write a python function to find the smallest substring with no repeating characters. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    pass\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_divisors(4) == 2, 'expected 2, but got {0}'.format(count_divisors(4))\nassert     count_divisors(6) == 3, 'expected 3, but got {0}'.format(count_divisors(6))\nassert     count_divisors(7) == 4, 'expected 4, but got {0}'.format(count_divisors(7))\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_divisors(4) == 1\nassert     count_divisors(6) == 1\nassert     count_divisors(1) == 1\nassert     count_divisors(10) == 2\nassert     count_divisors(11) == 3\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     odd_length_sum([10, 1, 2, 3, 4, 5]) == 31\nassert     odd_length_sum([10, 11, 12, 13, 14, 15]) == 49\nassert     odd_length_sum([10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == 379\n\n\ndef zeros(n):\n    '''\n    Write a python function to find the sum of all elements of an array which are zero in a given array. \n    '''\n    pass"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nodd_length_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 27\nodd_length_sum([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == -27\nodd_length_sum([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 23\n\n\ndef alternating(arr):\n    '''\n    Write a python function to find the sum of all alternating subarrays. https://www.geeksforgeeks.org/sum-of-all-alternating-subarrays/\n    '''\n    pass\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nodd_length_sum([1, 2, 3, 4, 5]) == 7, \"wrong odd_length_sum result\"\n\ndef odd_length_sum2(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    pass\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     odd_length_sum([1, 2, 3, 4, 5]) == 12, odd_length_sum([1, 2, 3, 4, 5])\nassert     odd_length_sum([1, 2, 3]) == 0, odd_length_sum([1, 2, 3])\n\ndef odd_length_subarray(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    pass\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     odd_length_sum([1, 2, 3, 4, 5, 6]) == 15, 'Wrong result'\nassert     odd_length_sum([1, 1, 1, 1, 1]) == 0, 'Wrong result'\nassert     odd_length_sum([1, 1, 1, 1, 1, 1]) == 2, 'Wrong result'\nassert     odd_length_sum([1, 1, 2, 3, 4, 5, 6]) == 31, 'Wrong result'\nassert     odd_length_sum([1, 1, 2, 2, 4, 4, 6]) == 17, 'Wrong result'\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nodd_length_sum([1, 2, 3, 4, 5]) == 10\n\ndef sum_of_odd_length_subarrays(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays in an array.\n    https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    pass\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     odd_length_sum([1,2,3,4]) == 10\nassert     odd_length_sum([1,2,3,4,5]) == 11\nassert     odd_length_sum([1,2,3,4,5,6,7,8,9]) == 37\nassert     odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) == 420\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     rgb_to_hsv(255, 255, 255) == (255, 255, 255)\nassert     rgb_to_hsv(255, 255, 0) == (255, 255, 0)\nassert     rgb_to_hsv(0, 255, 0) == (0, 255, 0)\nassert     rgb_to_hsv(0, 0, 255) == (0, 0, 255)\nassert     rgb_to_hsv(128, 0, 0) == (128, 0, 0)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rgb_to_hsv(0, 0, 0) == (0.0, 0.0, 0.0)\nassert     rgb_to_hsv(255, 255, 255) == (0.0, 0.0, 0.0)\nassert     rgb_to_hsv(128, 64, 0) == (0.0, 0.0, 0.0)\nassert     rgb_to_hsv(255, 0, 0) == (0.0, 0.0, 0.0)\nassert     rgb_to_hsv(255, 255, 128) == (0.0, 0.0, 0.0)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nassert rgb_to_hsv(255, 255, 255) == (1, 1, 1)\nassert rgb_to_hsv(0, 0, 0) == (0, 0, 0)\nassert rgb_to_hsv(50, 50, 50) == (0.5, 0.5, 0.5)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert \nassert \n\nprint(\"TESTCASE 1:\", rgb_to_hsv(255, 255, 255)) # HSV: (255, 255, 255)\nprint(\"TESTCASE 2:\", rgb_to_hsv(255, 0, 0)) # HSV: (0, 255, 255)\nprint(\"TESTCASE 3:\", rgb_to_hsv(0, 255, 255)) # HSV: (0, 255, 255)\nprint(\"TESTCASE 4:\", rgb_to_hsv(0, 0, 255)) # HSV: (0, 255, 255)\nprint(\"TESTCASE 5:\", rgb_to_hsv(0, 0, 0)) # HSV: (0, 0, 255)\nprint(\"TESTCASE 6:\", rgb_to_hsv(1, 1, 1)) # HSV: (255, 255, 255)\nprint(\"TESTCASE 7:\", rgb_to_hsv(0, 0, 0)) # HSV: (0, 0, 0)"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef rgb_to_hsv_1(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color.\n    Hue - 120 to 360\n    Saturation - 100 to 255\n    Value - 100 to 255\n    '''\n    pass\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef hsv_to_rgb(h, s, v):\n    '''\n    Write a function to convert hsv color to rgb color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    pass\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     mul_even_odd([2,4,6,8,10]) == 24\nassert     mul_even_odd([2,4,6,8,10,12]) == 60\nassert     mul_even_odd([2,4,6,8,10,12,14,16]) == 720\nassert     mul_even_odd([2,4,6,8,10,12,14,16,18,20,22,24]) == 2184\nassert     mul_even_odd([2,4,6,8,10,12,14,16,18,20,22,24,26,28,30]) == 21848\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     mul_even_odd([1,2,3,4,5]) == 120\nassert     mul_even_odd([2,4,5,8,10]) == 600\nassert     mul_even_odd([3,5,7,9]) == 0\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     mul_even_odd([1, 2, 3, 4, 5, 6]) == 15, 'incorrect output'\nassert     mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8]) == 120, 'incorrect output'\nassert     mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 360, 'incorrect output'\nassert     mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 360, 'incorrect output'\nassert     mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 720, 'incorrect output'\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    \n    \n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     mul_even_odd([1, 2, 3, 4, 5, 6, 7]) == 72\nassert     mul_even_odd([10, 11, 12, 13, 14, 15, 16]) == 120\nassert     mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 72\nassert     mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == 504\n\ndef is_even(number):\n    '''\n    Write a function which checks whether given number is even or odd.\n    '''\n    pass\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     mul_even_odd([10, 20, 30, 40]) == 720, mul_even_odd([10, 20, 30, 40])\nassert     mul_even_odd([10, 20, 30, 40, 50]) == 900, mul_even_odd([10, 20, 30, 40, 50])\nassert     mul_even_odd([10, 20, 30, 40, 50, 60]) == 960, mul_even_odd([10, 20, 30, 40, 50, 60])\nassert     mul_even_odd([]) == 1, mul_even_odd([])\nassert     mul_even_odd([1, 2, 3, 4, 5]) == 120, mul_even_odd([1, 2, 3, 4, 5])\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     mul_even_odd([1,2,3,4])==6, \"Expected: 6\"\nassert     mul_even_odd([3,4,5])==30, \"Expected: 30\"\nassert     mul_even_odd([2,3])==6, \"Expected: 6\"\nassert     mul_even_odd([-1,-2])==-6, \"Expected: 6\"\nprint(\"mul_even_odd passed all test cases\")\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tuple_str_int('(1, 2, 3, )') == (1, 2, 3)\nassert     tuple_str_int('( )') == ()\nassert     tuple_str_int('(1, 2, 3, )') == (1, 2, 3)\nassert     tuple_str_int('(1, )') == (1,)\nassert     tuple_str_int('( )') == ()\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_str_int('(0, 1, 2, 3)') == (0, 1, 2, 3)\nassert     tuple_str_int('(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)') == (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\nassert     tuple_str_int('(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)') == (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nassert     tuple_str_int('(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)') == (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)\nassert     tuple_str_int('(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)') == (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_str_int(('a', 'b', 'c') ) == (1, 2, 3)\nassert     tuple_str_int(('a', 'b', 'c', 'a') ) == (1, 2, 3, 1)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef add_list(a,b):\n    '''\n    Write a function to add two lists element-wise.\n    '''\n    pass\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tuple_str_int('(1, 2, 3)')     ==     (1, 2, 3)\nassert     tuple_str_int('(1, 2, 3.4)')     ==     (1, 2, 3.4)\nassert     tuple_str_int('(1, 2, 3.4)')     ==     (1, 2, 3.4)\nassert     tuple_str_int('(1, 2, 3.4)')     ==     (1, 2, 3.4)\nassert     tuple_str_int('1, 2, 3')     ==     (1, 2, 3)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tuple_str_int( ('a', 'b', 'c') ) == (1, 2, 3)\nassert     tuple_str_int( ('a', ) ) == (1, )\nassert     tuple_str_int( ('a', ) ) == (1, )\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tuple_str_int(('1', '2', '3')) == (1, 2, 3)\nassert     tuple_str_int(('1', '2', '3', '4')) == (1, 2, 3, 4)\nassert     tuple_str_int(('1', '2', '3', '4', '5')) == (1, 2, 3, 4, 5)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tuple_str_int(\"(1,2,3)\") == (1,2,3), \"should return (1,2,3)\"\nassert     tuple_str_int(\"(1.3,2.2,3)\") == (1.3,2.2,3), \"should return (1.3,2.2,3)\"\nassert     tuple_str_int(\"('1',2,3)\") == (1,2,3), \"should return (1,2,3)\"\nassert     tuple_str_int(\"(1,2,3)\") == (1,2,3), \"should return (1,2,3)\"\nassert     tuple_str_int(\"(1,2,3,1.2)\") == (1,2,3,1.2), \"should return (1,2,3,1.2)\"\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tuple_str_int(('0','1')) == (0,1)\nassert     tuple_str_int('()') == ()\nassert     tuple_str_int('(0,1)') == (0,1)\nassert     tuple_str_int('(0,1,2)') == (0,1,2)\nassert     tuple_str_int('(0,1,2,3)') == (0,1,2,3)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tuple_str_int('(1,2,3)') == (1, 2, 3), \"Wrong tuple_str_int\"\nassert     tuple_str_int('(1)') == (1,), \"Wrong tuple_str_int\"\nassert     tuple_str_int('(1,2,3,') == (1, 2, 3), \"Wrong tuple_str_int\"\nassert     tuple_str_int('(1,2,3)') == (1, 2, 3), \"Wrong tuple_str_int\"\n\ndef tuple_str_float(test_str):\n    '''\n    Write a function to convert tuple string to float tuple.\n    '''\n    pass\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \na = [0,4,8,2,1,3]\nassert right_insertion(a, 8) == 5\nassert right_insertion(a, 2) == 4\nassert right_insertion(a, 1) == 2\nassert right_insertion(a, 10) == 7\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef find_longest_unsorted_subarray(a):\n    '''\n    Write a function that accepts an unsorted array of integers, and returns the length of the longest consecutive elements sequence.\n    '''\n    pass\n\ndef find_longest_unsorted_subarray(a):\n    '''\n    Write a function that accepts an unsorted array of integers, and returns the length of the longest consecutive elements sequence.\n    '''\n    pass\n\ndef find_longest_unsorted_subarray(a):\n    '''\n    Write a function that accepts an unsorted array of integers, and returns the length of the longest consecutive elements sequence.\n    '''\n    pass\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert right_insertion([1, 2, 3, 5, 6, 7, 8, 9, 10], 1) == 1\nassert right_insertion([1, 2, 3, 5, 6, 7, 8, 9, 10], 10) == 10\nassert right_insertion([1, 2, 3, 5, 6, 7, 8, 9, 10], 6) == 7\nassert right_insertion([1, 2, 3, 5, 6, 7, 8, 9, 10], 4) == 4\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef binary_search(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    lo = 0\n    hi = len(a) - 1\n    \n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if x > a[mid]:\n            lo = mid + 1\n        elif x < a[mid]:\n            hi = mid - 1\n        else:\n            return mid\n    return lo\n\ndef test_binary_search():\n    a = [2,4,7,9,11,19,23,27,32,37,41,55,90,101,155,201,257,333,377,411,455,507,608,666,703,776,808,908,999,1011,1031,1061,1101,1216,1428,1555,1723,1819,1901,2061,2102,2217,2322,2432,2557,2764,2876,2983,3092,3179,3292,3404,3495,3583,3714,3786,3897,4029,4131,4152,4168,4190,4214,4255,4266,4278,4292,4344,4518,4666,4786,4873,4991,5017,5044,5157,5194,5284,5416,5511,5614,5742,5878,5981,6075,6154,6265,6328,6465,6704,6668,6748,6836,6965,7089,7207,7307,7320,7437,7558,7774,7870,7982,8099,8157,8231,8272,8296,8346,8395,8423,8548,8730,8827,9001,9134,9184,9302,9363,9377,9471,9554,9589,9646,9695,9812,9872,9914,9986,10101,10175,10227,10345,10510,10637,10739,10859,10979,11035,11126,11208,11356,11486,11598,11690,11715,11823,11968,12125,12361,12588,12616,12842,12917,13113,13459,13501,13714,13942,14177,14375,14523,14723,15058,15331,15601,15835,16130,16472,16791,17201,17429,17568,17823,18109,18473,19106,19451,19724,19968,20366,20689,20825,21057,21231,21471,21708,21948,22232,2256,22983,23331,23519,23922,24242,24596,24735,25021,25346,25610,26019,26281,26693,26934,27257,27410,27698,27896,28067,28435,28801,29056,29534,29893,30142,30489,30826,31096,31367,31518,31885,32052,32426,32531,32738,32855,33087,33459,33887,34265,34668,35043,35456,35964,36364,36794,37024,37650,38026,38500,39109,39603,40203,40637,41007,41065,41181,41242,41563,41734,42009,42137,42529,42862,43083,43424,43917,44238,44641,44959,45346,45844,46088,46608,46981,47363,47525,47805,47988,48487,48999,49647,49769,50048,50596,50941,51226,51527,51848,52122,52272,52537,52829,53094,53257,53741,54416,54787,55050,55378,55863,56238,56634,57062,57482,57861,58347,58821,59246,59900,60623,61186,61731,62233,62612,62989,63229,63396,63768,64139,64607,64848,65071,65590,65992,66457,66896,67418,67884,68458,68993,69556,69968,70506,71060,71779,72418,73091,73457,74411,74685,75296,75794,76412,76862,77071,77651,77989,78452,79132,79497,80412,80531,81444,82246,82467,82926,83797,84352,84872,85590,86286,87102,87704,88443,88894,89492,89886,90701,91345,91828,92480,92872,93453,94571,94893,95333,95774,95889,96406,96470,97169,97704,98423,98985,99587,99896,100360,100842,101040,101082,101918,102618,103058,103467,103869,104589,104929,105398,105730,106427,107025,107500,107872,107996,108406,109111,111485,111769,112097,112793,113088,113266,113619,114044,114646,114728,115072,115488,115525,115776,115943,116417,116851,117094,117335,117708,117906,118370,118805,119002,120434,121205,121606,122053,122125,122788,123688,124490,125114,125426,125970,126445,126994,127658,128217,128776,129363,130544,131214,131678,132372,132990,133524,134065,134578,134917,135222,135595,135881,136495,136911,137347,137584,137961,138385,138370,138705,139062,139952,140117,140700,141105,141388,141861,142425,142708,143316,143799,144571,144939,145428,145923,146337,146775,146987,147694,147790,148000,148528,148983,150549,150975,151093,152074,153090,154096,154918,155864,156737,157795,158111,158550,158601,159432,160589,161733,162892,164099,165059,165222,166449,166923,167651,168000,168741,169735,170151,170324,170617,170914,171213,171575,171860,172224,172592,172981,173184,173378,173684,174115,174672,175089,175679,176087,176363,176886,177290,177565,177857,178085,178496,178955,179290,179526,179822,180282,180640,181144,181553,182070,182534,182907,183069,183495,183518,183852,183988,184010,184107,184170,184209,184239,184269,184306,184321,184360,184400,184457,184482,184493,184499,184585,184613,184638,184661,184659,184669,184691,184719,184739,184761,1"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ndef test_right_insertion():\n    a = []\n    assert right_insertion(a, 1) == 0\n    a = [1, 1, 2]\n    assert right_insertion(a, 1) == 2\n    a = [1, 1, 2]\n    assert right_insertion(a, 3) == 3\n    a = [1, 1, 3]\n    assert right_insertion(a, 4) == 4\n    a = [1, 2, 3]\n    "
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef check_pairs(a):\n    '''\n    Write a function to check whether all of the pairs (i, j) satisfy 0 = i + j.\n    '''\n    for i, x in enumerate(a):\n        for j in range(i+1, len(a)):\n            if x + a[j]!= 0:\n                return False\n    return True"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     right_insertion([1,2,3,4],4) == 3\nassert     right_insertion([1,2,3,4],4.0) == 4\nassert     right_insertion([1,2,3,4],5) == 4\nassert     right_insertion([1,2,3,4],6) == 5\nassert     right_insertion([1,2,3,4],0) == 1\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     right_insertion([], 0) == 0 \nassert     right_insertion([], 1) == 1 \nassert     right_insertion([], 2) == 2 \nassert     right_insertion([], 3) == 3 \nassert     right_insertion([1], 0) == 0 \n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if not a:\n        return 0\n    if x < a[-1]:\n        return len(a)\n    else:\n        return bisect.bisect_right(a, x)\n\n\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if not a:\n        return 0\n    if x < a[-1]:\n        return len(a)\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) // 2\n        if x < a[mid]:\n            high = mid\n        else:\n            low = mid + 1\n    return low\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    low = 0\n    high = len(a)\n    while low < high:\n        mid = (low + high) // 2\n        if x < a[mid]:\n            high = mid\n        else:\n            low = mid + 1\n    return low\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_match_three('abbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_match_three('bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ntext_match_three(\"abbbbbbbbbb\")\nassert text_match_three(\"abbb\") == False\nassert text_match_three(\"abbbbbbbbbbbb\") == False\nassert text_match_three(\"abbbbbbbbbbbb\") == False\n\ntext_match_three(\"bbbbbbbbbbbb\")\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has a 'b' followed by two 'a'.\n    '''\n    pass\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ntext_match_three('ababababab') == True\ntext_match_three('aba') == True\ntext_match_three('bba') == False\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_three('abababab') == True\nassert     text_match_three('abababc') == False\nassert     text_match_three('ababab') == False\nassert     text_match_three('') == False\nassert     text_match_three('ababc') == False\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_three(\"abababababab\") == False\nassert     text_match_three(\"bbbbbbbbbbb\") == True\nassert     text_match_three(\"bbbabbbbbbb\") == False\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_match_three('bbbbbbb') == True, \"Test case failed\"\nassert     text_match_three('bbbbbbbb') == False, \"Test case failed\"\nassert     text_match_three('abc') == False, \"Test case failed\"\nassert     text_match_three('abcabcabc') == True, \"Test case failed\"\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_three('ababbabababababab') == True\nassert     text_match_three('ababbb') == False\nassert     text_match_three('abababab') == True\nassert     text_match_three('abababab') == False\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     new_tuple(['abc', 'def', 'ghi'], 'ABCDEFG') == ('ABC', 'DEF', 'GHI')\nassert     new_tuple(('a', 'b', 'c'), 'ABCDEF') == ('ABC', 'DEF', 'ABC')\nassert     new_tuple([1, 2, 3], 'ABCDEF') == ('ABCDEF', 1, 2, 3)\nassert     new_tuple([1, 2, 3], 'ABCD') == ('ABCD', 1, 2, 3)\nassert     new_tuple((1, 2, 3), 'ABCDEF') == ('ABCDEF', 1, 2, 3)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     new_tuple([\"five\", \"six\", \"seven\"], \"string\") ==     (5, 6, 7)\nassert     new_tuple([\"one\", \"two\", \"three\"], \"string\") ==     (1, 2, 3)\nassert     new_tuple([\"one\", \"two\", \"three\"], \"string\") ==     (1, 2, 3)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     new_tuple([\"hello\", \"world\"], \"world\") == (\"world\", \"hello\")\nassert new_tuple([\"hello\", \"world\"], \"pink\") == (\"pink\", \"hello\")\nassert new_tuple([\"hello\", \"world\"], \"red\") == (\"red\", \"hello\")\nassert new_tuple([\"hello\", \"world\"], \"blue\") == (\"blue\", \"hello\")\nassert new_tuple([\"hello\", \"world\"], \"pink\") == (\"pink\", \"hello\")\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ntest_data = ['a', 'b', 'c']\ntest_data2 = ['hello', 'world']\ntest_data3 = []\ntest_data4 = (1, 2, 3)\ntest_data5 = (1, '2', '3')\ntest_data6 = (1, '2', [3, '4'], '5')\n\nassert new_tuple(test_data, test_data2) == (1, '2', '3', 'hello', 'world')\nassert new_tuple(test_data, test_data3) == (1, '2', [3, '4'], '5')\nassert new_tuple(test_data, test_data4) == (1, 2, 3, 1, 2, 3)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    test_list = [1, 2, 3]\n    test_string = \"abc\"\n\n    new_tuple = new_tuple(test_list, test_string)\n    print(f\"The new tuple created from the given list {test_list} and the given string is {new_tuple}\")"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     new_tuple([\"Hello\", \"World\", \"!\", \"!!\", \"!!!\"], \"Hello World!!\") ==     (\n    \"Hello\", \"World\", \"!\", \"!!\", \"!!!\")\nassert     new_tuple([\"This\", \"is\", \"a\", \"test\", \"list\"], \"Test\") ==     (\n    \"Test\", \"Test\", \"Test\", \"Test\", \"Test\")\nassert     new_tuple([\"This\", \"is\", \"a\", \"test\", \"list\"], \"Test\") ==     (\"Test\", \"Test\", \"Test\")\nassert     new_tuple([\"This\", \"is\", \"a\", \"test\", \"list\"], \"Test\") ==     (\n    \"This\", \"is\", \"a\", \"test\", \"list\")\nassert     new_tuple([\"This\", \"is\", \"a\", \"test\", \"list\"], \"Test\") ==     (\n    \"This\", \"is\", \"a\", \"Test\", \"list\")\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     new_tuple([\"a\", \"b\", \"c\"], \"ABC\") ==     (\"a\", \"b\", \"c\")\nassert     new_tuple([\"A\", \"b\", \"c\"], \"ABC\") ==     (\"a\", \"b\", \"c\")\nassert     new_tuple([\"a\", \"b\", \"c\"], \"CBA\") ==     (\"b\", \"a\", \"c\")\nassert     new_tuple([\"A\", \"b\", \"c\"], \"CBA\") ==     (\"b\", \"a\", \"c\")\nassert     new_tuple([\"a\", \"b\", \"c\"], \"ABC\") ==     (\"a\", \"b\", \"c\")\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ntest_list1 = ['a','b','c','d','e','f']\ntest_str1 = 'a,b,c,d,e,f'\ntest_tuple1 = ('a','b','c','d','e','f')\n\ntest_list2 = ['g','h','i','j','k','l']\ntest_str2 = 'g,h,i,j,k,l'\ntest_tuple2 = ('g','h','i','j','k','l')\n\ntest_list3 = ['m','n','o','p','q','r','s']\ntest_str3 ='m,n,o,p,q,r,s'\ntest_tuple3 = ('m','n','o','p','q','r','s')\n\ntest_list4 = ['t','u','v','w','x','y','z']\ntest_str4 = 't,u,v,w,x,y,z'\ntest_tuple4 = ('t','u','v','w','x','y','z')"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     even_position([10, 20, 30, 40, 50, 60, 70]) == True\nassert     even_position([10, 20, 33, 40, 50, 60, 69]) == False\nassert even_position([1, 2, 3, 4, 5]) == False\nassert even_position([]) == False\nassert even_position([1, 3, 5, 7]) == False\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     even_position([1,2,3,4])         ==     True\nassert     even_position([3,4,5,6])         ==     False\nassert     even_position([2,3,4,5,6])         ==     True\nassert     even_position([1,3,5,7,9])         ==     True\nassert     even_position([1,3,5,7,9,11])     ==     True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     even_position([1,2,3,4,5,6]) == True, \"1,3,5 should return True\"\nassert even_position([1,2,3,4,5,6,7]) == False, \"1,7 should return False\"\nassert even_position([]) == False, \"empty list should return False\"\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     even_position([1, 2, 3, 4, 5, 6, 7]) == True, \"1st case\"\nassert     even_position([1, 2, 3, 4, 5, 6, 9]) == False, \"2nd case\"\nassert     even_position([1, 2, 3, 4, 5, 7]) == False, \"3rd case\"\nassert even_position([1, 2, 3, 4, 5, 6, 9]) == False, \"4th case\"\nassert even_position([1, 2, 3, 4, 5, 6, 9, 15]) == True, \"5th case\"\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     even_position([4, 5, 6, 7, 8, 9, 10]) == True, \"There are even numbers\"\nassert     even_position([1, 2, 3, 4, 5]) == True, \"There are even numbers\"\nassert     even_position([4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == False, \"There are even numbers\"\nassert     even_position([4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == False, \"There are even numbers\"\nassert     even_position([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == True, \"There are even numbers\"\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     even_position([1,2,3,4,5,6]) == True\nassert     even_position([1,2,3,4,5,6,8]) == True\nassert     even_position([1,2,3,4,5,6,7]) == False\nassert     even_position([1,2,3,4,5,6,8,9]) == False\nassert     even_position([1,2,3,4,5,6,7,8,9]) == True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     even_position([2,3,4,5,6]) == True, \"even_position\"\nassert     even_position([2,3,4,5,7]) == False, \"even_position\"\nassert     even_position([]) == False, \"even_position\"\nassert     even_position([2,3,4,5,7,8,9]) == True, \"even_position\"\nassert     even_position([2,3,4,5,7,8,9,10]) == False, \"even_position\"\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     even_position([1,2,3,4,5,6]) == True\nassert     even_position([1,2,3,4,5,6,7]) == False\nassert even_position([]) == False\nassert even_position([1]) == True\nassert even_position([1,2,3,4]) == False\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint(even_position([2,3,4,1,4,6,3,3]))\nprint(even_position([2,3,4,1,4,6,3,2]))\nprint(even_position([0,0,0,0]))\nprint(even_position([0]))\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     even_position([1, 2, 3, 4, 5, 6, 7]) == False, \"should be False\"\nassert     even_position([1, 2, 3, 4, 5, 6, 7, 8]) == True, \"should be True\"\nassert even_position([]) == False, \"should be False\"\nassert even_position([1, 2, 3, 4, 5, 6, 7]) == False, \"should be False\"\nassert even_position([1, 2, 3, 4, 5, 6, 7, 8]) == True, \"should be True\"\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_nested([(1, 2, 4), (2, 3, 4), (3, 2, 4), (4, 2, 3)]) == [(1, 2, 4), (3, 2, 4), (4, 2, 3)]\nassert remove_nested((1, 2, 4)) == (1, 2, 4)\nassert remove_nested((1, 2, 3, 4)) == (1, 2, 3, 4)\nassert remove_nested((1, 2, 4, 3, 4)) == (1, 2, 4, 3, 4)\nassert remove_nested((1, 2, 4, 3, 4)) == (1, 2, 4, 3, 4)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_nested(test_tup) == (test_tup[0], test_tup[1])\nassert remove_nested((1,2,3,4)) == (1,2,3,4)\nassert remove_nested((1,2,3,4,5)) == (1,2,3,5)\nassert remove_nested((1,2,3,4,5,6)) == (1,2,3,4,5)\nassert remove_nested((1,2,3,4,5,6,7,8)) == (1,2,3,4,5,6)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_nested((0,1,2,(1,2),3)) == (0,1,2,3)\nassert     remove_nested((0,1,2,(1,2),3)) == (0,1,2,3)\nassert     remove_nested((0,1,2,(1,2),3)) == (0,1,2,3)\nassert     remove_nested((0,1,2,(1,2),3)) == (0,1,2,3)\n\nprint(\"\\n>>> TEST 1: \", end=\"\")\nremove_nested((0,1,2,(1,2),3))\nprint(\"Passed!\")\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_nested((1,)) == ((),)\nassert     remove_nested((1,2,3)) == ((),(2,3))\nassert     remove_nested((1,2,3,4,5,6)) == ((),(2,3,4,5,6))\nassert     remove_nested((1,2,3,4,5,6,7,8,9)) == ((),(2,3,4,5,6,7,8,9))\n\nprint('All tests passed'"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_nested((1,2,3,4,5,6,7,8,9)) == ((1,2,3,4,5,6,7,8,9),)\nassert     remove_nested((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19)) == ((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19),)\nassert     remove_nested((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21)) == ((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21),)\nassert     remove_nested((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22)) == ((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22),)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_nested((1,2)) == (1,)\nassert     remove_nested((1,2,3)) == (1,2)\nassert     remove_nested((1,2,3,4)) == (1,2,3)\nassert     remove_nested((1,2,3,4,5)) == (1,2,3,4)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint('\\nPrinting tuple after calling remove_nested...')\nprint(remove_nested(test_tup))\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_nested(((1, 2), (3, 4))) == ((1, 2), (3, 4))\nassert     remove_nested(((1, 2), (3,))) == ((1, 2),)\nassert     remove_nested(((1, 2, 3, 4), (5, 6, 7), (8, 9, 10))) == ((1, 2, 3, 4), (5, 6, 7), (8, 9, 10))\nassert     remove_nested(((1, 2, 3), (4,), (5,))) == ((1, 2, 3),)\nassert     remove_nested(((1, 2, 3, 4), (5,), (6,))) == ((1, 2, 3, 4),)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_nested((1,1,1)) == (1,), \"Tuples do not work as operands.\"\nassert     remove_nested((1,2,3,4,5)) == (1,2,3,4,5), \"Wrong result.\"\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_list([1, 2, 3, 4]) == 2, \"incorrect\"\nassert     count_list([[1, 2], 3, 4, 5]) == 3, \"incorrect\"\nassert     count_list([[1, 2], 1, 1, 2]) == 4, \"incorrect\"\nassert     count_list([1, 2, 1, 2, 1, 2]) == 5, \"incorrect\"\nassert     count_list([[1, 2], 1, 1, 2, 1, 2]) == 6, \"incorrect\"\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_list([[1,2],[3,4],[5,6]]) == 1, \"Should be 1\"\nassert     count_list([[1,2],[3,4],[5,6], [1,2]]) == 2, \"Should be 2\"\nassert     count_list([[1,2],[3,4],[5,6], [[1,2]]]) == 3, \"Should be 3\"\nassert     count_list([[1,2],[3,4],[5,6], [[1,2],[3,4]]]) == 4, \"Should be 4\"\nassert     count_list([[1,2],[3,4],[5,6], [[1,2],[3,4],[5,6]]]) == 5, \"Should be 5\"\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_list([[1,2],[3,4],[5,6]]) == 4\nassert     count_list([[1,2,3],1,[1,2,3]]) == 4\nassert     count_list([1,[1,2,3],1,[1,2,3]]) == 4\nassert     count_list([[1],[1,2,3],1,[1,2,3]]) == 4\nassert     count_list([[1],[1,2,3],1,1,[1,2,3]]) == 4\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_list([[], [1,2,3], [1,2,3], [], [],[]]) == 2 \nassert     count_list([[], [1,2,3], [1,2,3], [], [], []]) == 5 \nassert count_list([[], [1,2,3], [1,2,3], [], [], [], []]) == 2 \nassert count_list([[], [1,2,3], [1,2,3], [], [], [], [], []]) == 5 \nassert count_list([[], [1,2,3], [1,2,3], [], [], [], [], []]) == 2 \n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_list([[1,2,3],[1,2,3,4],[1,2,3,4,5,6]]) == 3, 'first case'\nassert     count_list([[1,2,3,4],[1,2,3,4,5,6]]) == 2,'second case'\nassert     count_list([[1,2,3],[1,2,3,4,5,6,7]]) == 1, 'third case'"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_list([[1,2,3], 1,2,3, 5]) == 4\nassert     count_list([[1,2,3], 1,2,3, 5,5,5]) == 5\nassert     count_list([[1,2,3], 1,2,3, 5]) == 4\nassert     count_list([[1,2,3], 1,2,3, 5,5]) == 4\nassert     count_list([[1,2,3], 1,2,3]) == 4\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_list(input_list = [[1], [2], [3], [4], [5], [6], [7], [8], [9], [10]]) == 2\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert count_list([[1,2,3], [4,5,6], [7,8,9]]) == 3\nassert count_list([[1,2,3], [1,2,3], [1,2,3]]) == 3\nassert count_list([[1,2,3], [1,2,3], [1,2,3]]) == 3\nassert count_list([[1,2,3], [1,2,3], [1,2,3]]) == 3\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     last([1, 2, 3, 4], 4) == 3, \"Wrong Answer\"\nassert    last([1, 2, 3, 4], 1) == 1, \"Wrong Answer\"\nassert    last([1, 2, 3, 4], 5) == 4, \"Wrong Answer\"\nassert    last([1, 2, 3, 4], 0) == 0, \"Wrong Answer\"\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nlast([1,2,3,4,5,6,7,8], 3) == 5\nassert last([1,2,3,4,5,6,7,8], 8) == 7\nassert last([1,2,3,4,5,6,7,8], 6) == 6\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     last([1, 2, 3, 4, 5, 6, 7], 7) == 6\nassert     last([2, 3, 4, 5, 6, 7, 7], 7) == 6\nassert     last([2, 3, 4, 5, 6, 7], 3) == 4\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     last([], 2) == -1\nassert    last([1, 2, 3, 4, 5, 6], 1) == -1\nassert    last([1, 2, 3, 4, 5, 6], 5) == 6\nassert    last([1, 2, 3, 4, 5, 6], 2) == 3\nassert    last([1, 2, 3, 4, 5, 6], 6) == 5\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     last([1, 2, 3, 4], 1) == 3, \"last([1, 2, 3, 4], 1) should be 2\"\nassert     last([1, 2, 3, 4], 2) == 4, \"last([1, 2, 3, 4], 2) should be 4\"\nassert     last([1, 2, 3, 4], 5) == -1, \"last([1, 2, 3, 4], 5) should be -1\"\nassert     last([1, 2, 3, 4], -1) == -1, \"last([1, 2, 3, 4], -1) should be -1\"\nassert     last([], 1) == -1, \"last([], 1) should be -1\"\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     last([1,2,3],1) == 3, 'failed'\nassert     last([1,2,3],2) == 2, 'failed'\nassert     last([1,2,3],3) == 3, 'failed'\nassert     last([1,2,3,3,3,3,3],3) == 6, 'failed'\nassert     last([1,2,3,3,3,3,3],4) == 0, 'failed'\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     last([2,5,7,8,9,11,12,15],7)==4\nassert    last([2,5,7,8,9,11,12,15],8)==6\nassert    last([2,5,7,8,9,11,12,15],15)==7\nassert    last([2,5,7,8,9,11,12,15],1)==0\nassert    last([2,5,7,8,9,11,12,15],0)==0\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n'''\nSolution is given by the interviewer,\ncheck the correctness of last function\n\n'''\n\ndef last_recursive(arr,x,low,high):\n    '''\n    Write a function to find the last position of an element in a sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     last([5,7,7,8,10],7)==3\nassert     last([],8)==-1\nassert     last([3,4,6,7,9,10,11,12,13,15,16],16)==6\nassert     last([2,5,6,7,8,9],5)==3\nassert     last([1,3,4,5],3)==2\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_starta_endb('asdf') == 'asd'\nassert     text_starta_endb('asdaa') == 'asda'\nassert     text_starta_endb('asdaab') == 'asdaab'\nassert     text_starta_endb('asdaabc') == 'asdaabc'\nassert     text_starta_endb('asdaaabcd') == 'asdaabcd'\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pass\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_starta_endb('aba') == False, 'ababa'\nassert     text_starta_endb('aba') == False, 'ababa'\nassert     text_starta_endb('ab') == False, 'ababa'\nassert     text_starta_endb('aba') == True, 'abaab'\nassert     text_starta_endb('ba') == True, 'abaab'\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_starta_endb('aaab')     == 'aaab'\nassert     text_starta_endb('aaab')     == 'aaab'\nassert     text_starta_endb('aab')     == ''\nassert     text_starta_endb('ab')     == ''\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_starta_endb('ababab') == True\nassert     text_starta_endb('ababc') == False\nassert     text_starta_endb('abcd') == False\nassert     text_starta_endb('ab') == False\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_starta_endb('ab') == False, \"Wrong Answer\"\nassert     text_starta_endb('abab') == True, \"Wrong Answer\"\n\ndef endswith(pattern):\n    '''\n    Write a function that matches a string ending with a pattern.\n    '''\n    pass\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_starta_endb( 'a') == True, \"Wrong result of text_starta_endb.\"\nassert     text_starta_endb('a') == True, \"Wrong result of text_starta_endb.\"\nassert     text_starta_endb('ab') == True, \"Wrong result of text_starta_endb.\"\nassert     text_starta_endb('abc') == False, \"Wrong result of text_starta_endb.\"\nassert     text_starta_endb('abcd') == False, \"Wrong result of text_starta_endb.\"\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ntext_starta_endb('startaabcdef')\ntext_starta_endb('startaabcdefg')\ntext_starta_endb('startaabcdefgh')\ntext_starta_endb('startaabcdefghi')\ntext_starta_endb('startaabcdefghij')\ntext_starta_endb('startaabcdefghijkl')\ntext_starta_endb('startaabcdefghijklmn')\ntext_starta_endb('startaabcdefghijklmnop')\ntext_starta_endb('startaabcdefghijklmnopq')\ntext_starta_endb('startaabcdefghijklmnopqr')\ntext_starta_endb('startaabcdefghijklmnopqrs')\ntext_starta_endb('startaabcdefghijklmnopqrsu')\ntext_starta_endb('startaabcdefghijklmnopqrsut')\ntext_starta_endb('startaabcdefghijklmnopqrsutu')\ntext_starta_endb('startaabcdefghijklmnopqrsutuv')\ntext_starta_endb('startaabcdefghijklmnopqrsutuvw')\ntext_starta_endb('startaabcdefghijklmnopqrsutuvwx')\ntext_starta_endb('startaabcdefghijklmnopqrsutuvwxy')\ntext_starta_endb('startaabcdefghijklmnopqrsutuvwxyz')\ntext_starta_endb('startaabcdefghijklmnopqrsutuvwxyz')\n\nassert text_starta_endb('startaabcdefghij') == True\nassert text_starta_endb('startaabcdefghijk') == False\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_starta_endb(\"This is a test string\") == True, \"Should match\"\nassert     text_starta_endb(\"This is a test string\") == False, \"Should not match\"\nassert     text_starta_endb(\"This is a test string b\") == True, \"Should match\"\nassert     text_starta_endb(\"This is a test string a\") == False, \"Should not match\"\nassert     text_starta_endb(\"This is a test string test string\") == True, \"Should match\"\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_starta_endb('abcd') == 'abcd'\nassert     text_starta_endb('aaaab') == 'aaaab'\nassert     text_starta_endb('aab') == 'aab'\nassert     text_starta_endb('aabcd') == 'aabcd'\nassert     text_starta_endb('ab') == 'ab'\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     return_sum({\"a\": 1, \"b\": 2, \"c\": 3}) == 6, \"Should be 6\"\nassert     return_sum({1: 1, 2: 2, 3: 3}) == 6, \"Should be 6\"\nassert     return_sum({2: 1, 1: 1, 3: 3}) == 2, \"Should be 2\"\nassert     return_sum({1: 2, 3: 4}) == 6, \"Should be 6\"\nassert     return_sum({1: 2, 3: 4}) == 6, \"Should be 6\"\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     return_sum({'a': 1, 'b': 2, 'c': 3}) == 6, 'Wrong!'\nassert     return_sum({'a': 2, 'b': 2, 'c': 3}) == 5, 'Wrong!'\nassert     return_sum({'a': 1, 'b': 2, 'c': 3, 'd': 4}) == 7, 'Wrong!'\nassert     return_sum({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}) == 13, 'Wrong!'\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     return_sum({1:2,3:4}) == 6, \"The expected result is 6\"\nassert     return_sum({1:2,3:4,5:6}) == 9, \"The expected result is 9\"\nassert     return_sum({1:2,3:4,5:6,7:8,9:10}) == 30, \"The expected result is 30\"\nassert     return_sum({1:2,3:4,5:6}) == 12, \"The expected result is 12\"\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     return_sum({1:2, 2:3}) == 5, \"Wrong return value\"\n\nprint('Done!')\n\n'''\nOutput:\n    Done!\n'''\n\n'''\nLesson 6: Conditionals and Booleans\n\nIf, If-Else, If-Elif-Else, And, Or, Not\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     return_sum({1:1, 2:2, 3:3}) == 6\nassert     return_sum({1:1, 2:2, 3:3}) == 6\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     return_sum({}) == 0, \"Error in return_sum\"\nassert     return_sum({\"a\":1, \"b\":2}) == 3, \"Error in return_sum\"\nassert     return_sum({\"a\":1, \"b\":2, \"c\":3}) == 6, \"Error in return_sum\"\nassert     return_sum({\"a\":1, \"b\":2, \"c\":3, \"d\":4, \"e\":5, \"f\":6}) == 15, \"Error in return_sum\"\nassert     return_sum({\"a\":1, \"b\":2, \"c\":3, \"d\":4, \"e\":5, \"f\":6, \"g\":7}) == 21, \"Error in return_sum\"\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nreturn_sum({\"Harry\": 8, \"Ron\": 12, \"Hermione\": 3, \"Arron\": 3})\nassert \nreturn_sum({\"Harry\": 8, \"Ron\": 12, \"Hermione\": 3, \"Arron\": 3})\nassert \nreturn_sum({\"Harry\": 8, \"Ron\": 12, \"Hermione\": 3, \"Arron\": 3})\n\n'''\nWrite a function to find the sum of all even and odd numbers in the given dictionary.\n'''\n\ndef return_sum(dict):\n    '''\n    Write function to find the sum of all even and odd numbers in the given dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     return_sum({'a': 1, 'b': 2, 'c': 3}) == 6\nassert     return_sum({}) == 0\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_odd(1, 5) == 9, 'incorrect sum_odd'\nassert     sum_odd(1, 20) == 19, 'incorrect sum_odd'\nassert     sum_odd(10, 3) == 15, 'incorrect sum_odd'\nassert     sum_odd(10, 20) == 21, 'incorrect sum_odd'\nassert     sum_odd(0, 5) == 0, 'incorrect sum_odd'\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert sum_odd(1, 2) == 2\nassert sum_odd(1, 2) == 4\nassert sum_odd(10, 10) == 20\nassert sum_odd(10, 20) == 20\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef print_reverse(s):\n    '''\n    Write a python function to print the reverse of a string.\n    '''\n    pass\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_odd(10, 20) == 30, \"Incorrect output\"\nprint(f\"sum_odd('10', '20') returns {sum_odd('10', '20')} (should be 30)\")\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nsum_odd(2) == 0, \"Should be: 0\"\nsum_odd(5) == 1, \"Should be: 1\"\nsum_odd(10) == 6, \"Should be: 6\"\nsum_odd(11) == 10, \"Should be: 10\"\nsum_odd(12) == 12, \"Should be: 12\"\nsum_odd(15) == 15, \"Should be: 15\"\nsum_odd(16) == 16, \"Should be: 16\"\nsum_odd(20) == 28, \"Should be: 28\"\nsum_odd(21) == 29, \"Should be: 29\"\nsum_odd(22) == 30, \"Should be: 30\"\nsum_odd(25) == 42, \"Should be: 42\"\nsum_odd(26) == 43, \"Should be: 43\"\nsum_odd(27) == 44, \"Should be: 44\"\nsum_odd(30) == 60, \"Should be: 60\"\nsum_odd(31) == 61, \"Should be: 61\"\nsum_odd(32) == 62, \"Should be: 62\"\nsum_odd(35) == 68, \"Should be: 68\"\nsum_odd(36) == 69, \"Should be: 69\"\nsum_odd(37) == 70, \"Should be: 70\"\nsum_odd(40) == 100, \"Should be: 100\"\nsum_odd(41) == 101, \"Should be: 101\"\nsum_odd(42) == 102, \"Should be: 102\"\nsum_odd(45) == 138, \"Should be: 138\"\nsum_odd(46) == 139, \"Should be: 139\"\nsum_odd(47) == 140, \"Should be: 140\"\nsum_odd(50) == 150, \"Should be: 150\"\nsum_odd(51) == 151, \"Should be: 151\"\nsum_odd(52) == 152, \"Should be: 152\"\nsum_odd(55) == 155, \"Should be: 155\"\nsum_odd(56) == 156, \"Should be: 156\"\nsum_odd(57) == 157, \"Should be: 157\"\nsum_odd(60) == 168, \"Should be: 168\"\nsum_odd(61) == 169, \"Should be: 169\"\nsum_odd(62) == 170, \"Should be: 170\"\nsum_odd(65) == 175, \"Should be: 175\"\nsum_odd(66) == 176, \"Should be: 176\"\nsum_odd(67) == 177, \"Should be: 177\"\nsum_odd(70) == 180, \"Should be: 180\"\nsum_odd(71) == 181, \"Should be: 181\"\nsum_odd(72) == 182, \"Should be: 182\"\nsum_odd(75) == 185, \"Should be: 185\"\nsum_odd(76) == 186, \"Should be: 186\"\nsum_odd(77) == 187, \"Should be: 187\"\nsum_odd(80) == 188, \"Should be: 188\"\nsum_odd(81) == 189, \"Should be: 189\"\nsum_odd(82) == 190, \"Should be: 190\"\nsum_odd(85) == 195, \"Should be: 195\"\nsum_odd(86) == 196, \"Should be: 196\"\nsum_odd(87) == 197, \"Should be: 197\"\nsum_odd(90) == 200, \"Should be: 200\"\nsum_odd(91) == 201, \"Should be: 201\"\nsum_odd(92) == 202, \"Should be: 202\"\nsum_odd(95) == 205, \"Should be: 205\"\nsum_odd(96) == 206, \"Should be: 206\"\nsum_odd(97) == 207, \"Should be: 207\"\nsum_odd(100) == 208, \"Should be: 208\"\nsum_odd(101) == 209, \"Should be: 209\"\nsum_odd(102) == 210, \"Should be: 210\"\nsum_odd(105) == 215, \"Should be: 215\"\nsum_odd(106) == 216, \"Should be: 216\"\nsum_odd(107) == 217, \"Should be: 217\"\nsum_odd(110) == 218, \"Should be: 218\"\nsum_odd(111) == 219, \"Should be: 219\"\nsum_odd(112) == 220, \"Should be: 220\"\nsum_odd(115) == 225, \"Should be: 225\"\nsum_odd(116) == 226, \"Should be: 226\"\nsum_odd(117) == 227, \"Should be: 227\"\nsum_odd(120) == 228, \"Should be: 228\"\nsum_odd(121) == 229, \"Should be: 229\"\nsum_odd(122) == 230, \"Should be: 230\"\nsum_odd(125) == 235, \"Should be: 235\"\nsum_odd(126) == 236, \"Should be: 236\"\nsum_odd(127) == 237, \"Should be: 237\"\nsum_odd(130) == 238, \"Should be: 238\"\nsum_odd(131) == 239, \"Should be: 239\"\nsum_odd(132) == 240, \"Should be: 240\"\nsum_odd(135) == 245, \"Should be: 245\"\nsum_odd(136) == 246, \"Should be: 246\"\nsum_odd(137) == 247, \"Should be: 247\"\nsum_odd(140) == 248, \"Should be: 248\"\nsum_odd(141) == 249, \"Should be: 249\"\nsum_odd(142) == 250, \"Should be: 250\"\nsum_odd(145) == 255, \"Should be: 255\"\nsum_odd(146) == 256, \"Should be: 256\"\nsum_odd(147) == 257, \"Should be: 257\"\nsum_odd(150) == 258, \"Should be: 258\"\nsum_odd(151) == 259, \"Should be: 259\"\nsum_odd(152) == 260, \"Should be: 260\"\nsum_odd(155) == 265, \"Should be: 265\"\nsum_odd(156) == 266, \"Should be: 266\"\nsum_odd(157) == 267, \"Should be: 267\"\nsum_odd(160) == 268, \"Should be: 268\"\nsum_odd(161) == 269, \"Should be: 269\"\nsum_odd(162) == 270, \"Should be: 270\"\nsum_odd(165) == 275, \"Should be: 275\"\nsum_odd(166) == 276, \"Should be: 276\"\nsum_odd(167) == 277, \"Should be: 277\"\nsum_odd(170) == 278, \"Should be: 278\"\nsum_odd(171) == 279, \"Should be: 279\"\nsum_odd(172) == 280, \"Should be: 280\"\nsum_odd(175) == 285, \"Should be: 285\"\nsum_odd(176) == 286, \"Should be: 286\"\nsum_odd(177) == 287, \"Should be: 287\"\nsum_odd(180) == 288, \"Should be: 288\"\nsum_odd(181) == 289, \"Should be: 289\"\nsum_odd(182) == 290, \"Should be: 290\"\nsum_odd(185) == 295, \"Should be: 295\"\nsum_odd(186) == 296, \"Should be: 296\"\nsum_odd(187) == 297, \"Should be: 297\"\nsum_odd(190) == 298, \"Should be: 298\"\nsum_odd(191) == 299, \"Should be: 299\"\nsum_odd(192) == 300, \"Should be: 300\"\nsum_odd(195) == 305, \"Should be: 305\"\nsum_odd(196) == 306, \"Should be: 306\"\nsum_odd(197) == 307, \"Should be: 307\"\nsum_odd(200) == 308, \"Should be: 308\"\nsum_odd(201) == 309, \"Should be: 309\"\nsum_odd(202) == 310, \"Should be: 310\"\nsum_odd(205) == 315, \"Should be: 315\"\nsum_odd(206) == 316, \"Should be: 316\"\nsum_odd(207) == 317, \"Should be: 317\"\nsum_odd(210) == 318, \"Should be: 318\"\nsum_odd(211) == 319, \"Should be: 319\"\nsum_odd(212) == 320, \"Should be: 320\"\nsum_odd(215) == 325"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_odd(1, 0) == 0\nassert     sum_odd(1, 2) == 3\nassert     sum_odd(2, -4) == 0\nassert     sum_odd(2, 1) == 3\nassert     sum_odd(2, 2) == 5\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_odd(3) == 1\nassert     sum_odd(0) == 0\nassert     sum_odd(15) == 30\nassert     sum_odd(10) == 17\nassert     sum_odd(8) == 17\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     _sum([]) == 0\nassert     _sum([1]) == 1\nassert     _sum([1,2]) == 3\nassert     _sum([1,2,3]) == 6\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert abs(10-_sum([1,2,3,4,5,6])) < 1e-9, f\"Expected 10.0, got {_sum([1,2,3,4,5,6])}\"\nassert abs(10-_sum([-1,-2,-3,-4,-5,-6])) < 1e-9, f\"Expected 10.0, got {_sum([-1,-2,-3,-4,-5,-6])}\"\n\nprint(\"Coding complete!\""
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert         _sum([0]) == 0\nassert         _sum([1]) == 1\nassert         _sum([0,1]) == 1\nassert         _sum([1,2]) == 3\nassert         _sum([1,2,3]) == 6\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert         _sum([1, 2, 3, 4, 5, 6]) == 15\nassert         _sum([1, 0, 1, -1]) == 1\nassert         _sum([1, 2, -3, 4, -5, 6]) == 1"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    _sum([1,2,3]) == 6\nassert \n    _sum([]) == 0\n    "
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     _sum([1, 2, 3]) == 6, \"Should be 6\"\nassert     _sum([]) == 0, \"Should be 0\"\nassert     _sum([-5, 1, 3, 0, -5, -2, -2, -1]) == 6, \"Should be 6\"\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef _diff(arr):  \n    '''\n    Write a python function to find the absolute difference of an array.\n    '''\n    pass\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert _____, _____\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     _sum([1, 2, 3, 4, 5]) == 15\nassert     _sum([1, 2, 3, 4, 5, 5]) == 20\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nleft_rotate(3,1) == 3 << 1\nleft_rotate(3,2) == 3 << 2\nleft_rotate(3,3) == 3 << 3\n\ndef right_rotate(n,d):\n    '''\n    Write a function to rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    pass\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     left_rotate(2,2) ==     0b0100\nassert     left_rotate(2,3) ==     0b0110\nassert     left_rotate(2,5) ==     0b0111\nassert     left_rotate(2,7) ==     0b1001\nassert     left_rotate(2,9) ==     0b1011\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     left_rotate(8,2) == 4\nassert     left_rotate(16,3) == 8\nassert     left_rotate(31,5) == 16\nassert     left_rotate(31,3) == 15\nassert     left_rotate(0,1) == 1\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     left_rotate(11,2) == left_rotate(10,1) == left_rotate(10,0) == left_rotate(10,10) == left_rotate(10,11) == left_rotate(11,1) == left_rotate(11,0) == left_rotate(11,10) == left_rotate(11,11) == 11\nassert     left_rotate(25,2) == left_rotate(24,1) == left_rotate(24,0) == left_rotate(24,10) == left_rotate(24,11) == left_rotate(25,1) == left_rotate(25,0) == left_rotate(25,10) == left_rotate(25,11) == 25\n\ndef right_rotate(n,d):\n    '''\n    Write a function to rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    pass\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nleft_rotate(1,0) == 1\nleft_rotate(1,1) == 0\nleft_rotate(1,2) == 0\nleft_rotate(1,3) == 0\nleft_rotate(1,4) == 0\nleft_rotate(1,8) == 0\nleft_rotate(1,15) == 0\nleft_rotate(1,16) == 0\nleft_rotate(1,31) == 0\nleft_rotate(1,32) == 0\nleft_rotate(1,64) == 0\nleft_rotate(1,80) == 0\nleft_rotate(1,128) == 0\nleft_rotate(1,255) == 0\nleft_rotate(1,256) == 0\n\nleft_rotate(0,0) == 0\nleft_rotate(0,1) == 0\nleft_rotate(0,2) == 0\nleft_rotate(0,3) == 0\nleft_rotate(0,4) == 0\nleft_rotate(0,8) == 0\nleft_rotate(0,15) == 0\nleft_rotate(0,16) == 0\nleft_rotate(0,31) == 0\nleft_rotate(0,32) == 0\nleft_rotate(0,64) == 0\nleft_rotate(0,80) == 0\nleft_rotate(0,128) == 0\nleft_rotate(0,255) == 0\nleft_rotate(0,256) == 0\n\nleft_rotate(0,128) == 0\nleft_rotate(0,255) == 0\nleft_rotate(0,256) == 0\nleft_rotate(1,128) == 0\nleft_rotate(1,255) == 0\nleft_rotate(1,256) == 0\nleft_rotate(2,128) == 0\nleft_rotate(2,255) == 0\nleft_rotate(2,256) == 0\nleft_rotate(4,128) == 0\nleft_rotate(4,255) == 0\nleft_rotate(4,256) == 0\nleft_rotate(8,128) == 0\nleft_rotate(8,255) == 0\nleft_rotate(8,256) == 0\n\nleft_rotate(0,128) == 0\nleft_rotate(0,255) == 0\nleft_rotate(0,256) == 0\nleft_rotate(1,128) == 0\nleft_rotate(1,255) == 0\nleft_rotate(1,256) == 0\nleft_rotate(2,128) == 0\nleft_rotate(2,255) == 0\nleft_rotate(2,256) == 0\nleft_rotate(4,128) == 0\nleft_rotate(4,255) == 0\nleft_rotate(4,256) == 0\nleft_rotate(8,128) == 0\nleft_rotate(8,255) == 0\nleft_rotate(8,256) == 0\n\nleft_rotate(0,128) == 0\nleft_rotate(0,255) == 0\nleft_rotate(0,256) == 0\nleft_rotate(1,128) == 0\nleft_rotate(1,255) == 0\nleft_rotate(1,256) == 0\nleft_rotate(2,128) == 0\nleft_rotate(2,255) == 0\nleft_rotate(2,256) == 0\nleft_rotate(4,128) == 0\nleft_rotate(4,255) == 0\nleft_rotate(4,256) == 0\nleft_rotate(8,128) == 0\nleft_rotate(8,255) == 0\nleft_rotate(8,256) == 0\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     left_rotate(16,1) == 0b11111111, \"rotate_left_error\"\nassert left_rotate(16,2) == 0b11111110, \"rotate_left_error\"\nassert left_rotate(16,3) == 0b11111111, \"rotate_left_error\"\nassert left_rotate(16,4) == 0b11111110, \"rotate_left_error\"\nassert left_rotate(16,5) == 0b11111111, \"rotate_left_error\"\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_all_spaces('') == ''\nassert     remove_all_spaces('  ') == ''\nassert     remove_all_spaces('whitespace') == 'whitespace'\nassert     remove_all_spaces(' ') == ''\nassert     remove_all_spaces('   ') =='  '\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_all_spaces('This is a sample string  ') == 'This is a sample string'\nassert     remove_all_spaces('This is a sample  string') == 'This is a sample string'\nassert     remove_all_spaces('This is a sample string') == 'This is a sample string'\nassert     remove_all_spaces('This is a sample') == 'This is a sample'\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(' ', '')\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_all_spaces(\"\") == \"\", \"No spaces in empty string\"\nassert     remove_all_spaces(\"A\") == \"A\", \"One space in non-empty string\"\nassert     remove_all_spaces(\"A \") == \"A\", \"Two spaces in non-empty string\"\nassert     remove_all_spaces(\"A   \") == \"A\", \"Three spaces in non-empty string\"\nassert     remove_all_spaces(\"A   B\") == \"A\", \"Three spaces in non-empty string\"\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_all_spaces(\"     \") == \"\"\nassert     remove_all_spaces(\"     \\n\") == \"\"\nassert     remove_all_spaces(\"   \\n\") == \"\"\nassert     remove_all_spaces(\"    \\n\\t\") == \"\"\nassert     remove_all_spaces(\"\\t\\n\") == \"\"\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_all_spaces(    \" \") == \"\"\nassert     remove_all_spaces(    \"   \") == \"\"\nassert     remove_all_spaces(    \"a\") == \"a\"\nassert     remove_all_spaces(    \"     \") == \"\"\nassert     remove_all_spaces(    \"a   \") == \"a\"\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_all_spaces(' a ') == 'a'\nassert     remove_all_spaces(' a\\n') == 'a'\nassert     remove_all_spaces(' a\\t') == 'a'\nassert     remove_all_spaces('\\t') ==''\nassert     remove_all_spaces('   ') == ''\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert remove_all_spaces(\"a      b      c\") == \"abc\", '\"abc\" is not \"abc\"'\nassert remove_all_spaces(\"a \\t b \\n c \\t\") == \"abc\", '\"abc\" is not \"abc\"'\nassert remove_all_spaces(\"a\\n\\t\\t\\t\\tb\\n\\t\\t\\t\\tc\\n\") == \"abc\", '\"abc\" is not \"abc\"'\nassert remove_all_spaces(\"\") == \"\", '\"abc\" is not \"abc\"'\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef remove_spaces(text):\n    '''\n    Write a function to remove all spaces from a string.\n    '''\n    pass\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_all_spaces('  ') == '', \"Expected an empty string\"\nassert     remove_all_spaces(' ') == '', \"Expected an empty string\"\nassert     remove_all_spaces('  \\t\\n ') == '', \"Expected an empty string\"\nassert     remove_all_spaces('\\t \\n') == '', \"Expected an empty string\"\nassert     remove_all_spaces('  \\t  \\n') == '', \"Expected an empty string\"\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_all_spaces(\" test \") == \"test\", \"Should remove whitespaces\"\nassert     remove_all_spaces(\" test \") == \"test\", \"Should remove whitespaces\"\nassert     remove_all_spaces(\"   test  \") == \"test\", \"Should remove whitespaces\"\nassert     remove_all_spaces(\"\") == \"\", \"Should remove whitespaces\"\nassert     remove_all_spaces(\" \") == \"\", \"Should remove whitespaces\"\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     test_three_equal(1, 2, 3) == 3, \"Should be 3\"\nassert     test_three_equal(1, 1, 1) == 3, \"Should be 3\"\nassert     test_three_equal(1, 1, 2) == 2, \"Should be 2\"\nassert     test_three_equal(1, 2, 2) == 2, \"Should be 2\"\nassert     test_three_equal(2, 2, 2) == 2, \"Should be 2\"\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    test_three_equal(0,0,0) == 0\n    test_three_equal(1,1,1) == 2\n    test_three_equal(2,2,2) == 2\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     test_three_equal(10,10,10) == 3, \"Fail\"\nassert     test_three_equal(5,7,7) == 0, \"Fail\"\nassert     test_three_equal(10,10,10) == 0, \"Fail\"\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     test_three_equal(1,1,1) == 3, '1,1,1'\nassert     test_three_equal(1,2,1) == 2, '1,2,1'\nassert     test_three_equal(3,3,3) == 3, '3,3,3'\nassert     test_three_equal(3,3,1) == 2, '3,3,1'\nassert     test_three_equal(3,3,2) == 1, '3,3,2'\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     three_equal(1, 1, 1) ==     0, 'Fail'\nassert     three_equal(2, 2, 2) ==     1, 'Fail'\nassert     three_equal(3, 1, 1) ==     2, 'Fail'"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     test_three_equal(2,2,2) == 0\nassert     test_three_equal(3,3,3) == 3\nassert     test_three_equal(1,1,1) == 3\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     test_three_equal(1,2,3) == 1\nassert     test_three_equal(3,3,3) == 3\nassert     test_three_equal(3,2,3) == 0\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     test_three_equal(1,2,1) == 2, \"Should be 2\"\nassert     test_three_equal(1,1,1) == 3, \"Should be 3\"\nassert     test_three_equal(3,3,3) == 1, \"Should be 1\"\nassert     test_three_equal(10,10,10) == 3, \"Should be 3\"\nassert     test_three_equal(5,6,7) == 0, \"Should be 0\"\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == '__main__':\n    arr = [1,2,4,5,6,7,8,9]\n    assert count_rotation(arr) == 6\n    print(\"Passed!\""
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_rotation([])== 0, \"The input list is empty\"\nassert     count_rotation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 9, \"The input list is not sorted\"\nassert     count_rotation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 10, \"The input list is not sorted\"\nassert     count_rotation([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) == 16, \"The input list is not sorted\"\nassert     count_rotation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 18, \"The input list is not sorted\"\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(count_rotation([1, 2, 3, 4, 5, 6, 7])) #6\nprint(count_rotation([5, 6, 7, 8, 9, 1, 2, 3, 4])) #0\nprint(count_rotation([6, 7, 8, 9, 1, 2, 3, 4, 5])) #1\nprint(count_rotation([1, 2, 3, 4, 5, 6, 7, 8, 9])) #0"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_rotation([1,2,3,4,5]) == 2, \"count_rotation should return 2\"\nassert count_rotation([5,4,3,2,1]) == 1, \"count_rotation should return 1\"\nassert count_rotation([3,2,1,5,4]) == 0, \"count_rotation should return 0\"\nassert count_rotation([5,4,3,1,2]) == 0, \"count_rotation should return 0\"\nassert count_rotation([1,2,3,4,5,6,7]) == 3, \"count_rotation should return 3\"\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_rotation([1,2,3]) == 0\nassert     count_rotation([1,2,3,4,5]) == 1\nassert     count_rotation([1,2,3,4,5,6]) == 1\nassert     count_rotation([1,2,3,4,5,6,7]) == 1\nassert     count_rotation([1,2,3,4,5,6,7,8]) == 2\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_rotation([]) == 0\nassert     count_rotation([1]) == 0\nassert     count_rotation([1,1]) == 0\nassert     count_rotation([1,2]) == 1\nassert     count_rotation([1,2,3]) == 2\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_rotation([1,2,3,4,5]) == 0, \"Wrong output\"\nassert     count_rotation([4,5,6,7,1,2,3]) == 1, \"Wrong output\"\nassert     count_rotation([5,6,7,8,9,1,2,3,4]) == 4, \"Wrong output\"\nassert     count_rotation([10,1,2,3,4,5,6,7,8]) == 5, \"Wrong output\"\nassert     count_rotation([10,1,2,3,4,5,6,7,8,9]) == 6, \"Wrong output\"\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_rotation([1,2,3,4,5]) == 2\nassert     count_rotation([1,2,3,4,5,6,7,8,9,10]) == 5\nassert     count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == 5\nassert count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 6\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ncount_rotation([]) == 0\ncount_rotation([1,2,3,4]) == 0\ncount_rotation([1,2,3,4,4]) == 1\ncount_rotation([1,2,3,4,4,4]) == 2\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert not is_perfect_square(5)\nassert is_perfect_square(4)\nassert not is_perfect_square(9)\nassert not is_perfect_square(12)\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef check_perfect_square(n) :\n    '''\n    The question can be stated as :\n    In mathematics, a perfect square is an integer n such that sqrt(n) = n.\n    Write a function that determines whether the given number is perfect square or not.\n    Input Format:\n    The first line of the input contains an integer T denoting the number of test cases. Then T test cases follow.\n    Each test case contains an integer N.\n    Output Format:\n    For each test case, output a single line containing \u201cYES\u201d or \u201cNO\u201d based on whether the given number is perfect square or not.\n    '''\n    pass\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nis_perfect_square(3)\nis_perfect_square(9)\nis_perfect_square(5)\nis_perfect_square(25)\nis_perfect_square(5)\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert \n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_perfect_square(16) == False, \"This should be false\"\nassert     is_perfect_square(1) == False, \"This should be false\"\nassert     is_perfect_square(4) == True, \"This should be true\"\nassert     is_perfect_square(9) == False, \"This should be false\"\nassert     is_perfect_square(16) == True, \"This should be true\"\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_perfect_square(121) == True, \"Input: {121}, output: {true}\"\nassert     is_perfect_square(121.0) == True, \"Input: {121.0}, output: {true}\"\nassert     is_perfect_square(0) == False, \"Input: {0}, output: {false}\"\nassert     is_perfect_square(0.0) == False, \"Input: {0.0}, output: {false}\"\nassert     is_perfect_square(7) == True, \"Input: {7}, output: {true}\"\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_perfect_square(1) == False\nassert     is_perfect_square(4) == True\nassert     is_perfect_square(9) == False\nassert     is_perfect_square(16) == True\nassert     is_perfect_square(25) == False\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nis_perfect_square(1) == False\nis_perfect_square(4) == False\nis_perfect_square(25) == True\nis_perfect_square(18) == True\nis_perfect_square(1000000) == False\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_perfect_square(121) == True\nassert     is_perfect_square(81) == False\nassert     is_perfect_square(6) == False\nassert     is_perfect_square(0) == False\nassert     is_perfect_square(1) == True\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert is_product_even([1, 2, 3, 4, 5]) == False, \"Should return False\"\nassert is_product_even([1, 2, 3, 4, 5, 5]) == False, \"Should return False\"\nassert is_product_even([3, 4, 5]) == False, \"Should return False\"\nassert is_product_even([1, 2, 3, 4, 5, 6]) == True, \"Should return True\"\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_product_even([-1, 2, 3]) == False, \"Error!\"\nassert     is_product_even([1, 2, 3]) == True, \"Error!\"\nassert     is_product_even([0, 1, 2, 3]) == False, \"Error!\"\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_product_even([1, 2, 3, 4, 5, 6, 7]) == False,'should return False if the product of numbers in the list is even'\nassert     is_product_even([1, 2, 3, 4, 5, 6, 7, 8, 9]) == True,'should return True if the product of numbers in the list is even'\nassert     is_product_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True,'should return True if the product of numbers in the list is even'\nassert     is_product_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == True,'should return True if the product of numbers in the list is even'\nassert     is_product_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]) == True,'should return True if the product of numbers in the list is even'\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_product_even([2,4]) == True, 'Wrong answer'\nassert     is_product_even([2,4,5]) == True, 'Wrong answer'\nassert     is_product_even([2,4,3]) == True, 'Wrong answer'\nassert     is_product_even([1,4,4]) == False, 'Wrong answer'\nassert     is_product_even([2,1,4,2]) == False, 'Wrong answer'\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert not is_product_even([])\nassert not is_product_even([])\nassert not is_product_even([1])\nassert not is_product_even([2])\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_product_even([2, 4, 6, 8]) == True\nassert     is_product_even([2, 4, 6, 9]) == False\nassert     is_product_even([2, 4, 6, 10]) == False\nassert     is_product_even([2, 4, 6, 11]) == False\nassert     is_product_even([1, 2, 3, 4]) == False\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_sum_list([[], [-2], [3, 4], [], [-1]]) == [[-1], [-1], [3, 4], [], [-2]]\nassert     max_sum_list([[], [-2], [3, 4], [], [-1], [-3]]) == [[-1], [-1], [3, 4], [], [-2]]\n\ndef max_sum_2_lists(list1, list2):\n    '''\n    Write a function that returns a list with the two highest sum elements in the input lists.\n    '''\n    pass\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint('Check correctness of max_sum_list: PASSED')\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert max_sum_list([]) == []\nassert max_sum_list([]) == []\nassert max_sum_list([0]) == [[0]]\nassert max_sum_list([1,2]) == [[1,2]]\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert max_sum_list([[1], [-3, -6], [-2, -8], [-3, 5, 8]]) == [6, -2, 8], \"Wrong answer\"\n\ndef max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    pass\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    max_sum_list([1,4,5,7])\n    ==    [[1,4,5,7],\n        [1,4,5,7],\n        [1,4,5,7],\n        [1,4,5,7]]\n\n    max_sum_list([1,4,5,7])\n    ==    [[1,4,5,7],\n        [1,4,5,7],\n        [1,4,5,7],\n        [1,4,5,7]]\n\n    max_sum_list([1,4,5,7])\n    ==    [[1,4,5,7],\n        [1,4,5,7],\n        [1,4,5,7],\n        [1,4,5,7]]\n\n    max_sum_list([1,4,5,7])\n    ==    [[1,4,5,7],\n        [1,4,5,7],\n        [1,4,5,7],\n        [1,4,5,7]]\n\n    max_sum_list([1,4,5,7])\n    ==    [[1,4,5,7],\n        [1,4,5,7],\n        [1,4,5,7],\n        [1,4,5,7]]\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_sum_list([[1], [3, 5], [6, 10], [-1, -3]]) == [[-1, -3], [6, 10], [6, 10], [1, 5]]\nassert     max_sum_list([[1, 2], [2, 3], [4, 5], [2, 5], [-1, -3]]) == [[-1, -3], [-1, -3], [4, 5], [2, 5], [2, 5]]\nassert     max_sum_list([[1], [3, 5], [6, 10], [-1, -3]]) == [[-1, -3], [6, 10], [-1, -3], [1, 5]]\nassert     max_sum_list([[1, 2], [2, 3], [4, 5], [2, 5], [0, -1]]) == [[0, -1], [2, 5], [4, 5], [2, 5], [1, 5]]\nassert     max_sum_list([[1], [3, 5], [6, 10], [-1, -3], [0, -1]]) == [[-1, -3], [-1, -3], [6, 10], [0, -1], [-1, -3]]\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_sum_list([]) == 0\nassert     max_sum_list([1]) == 1\nassert     max_sum_list([1,2]) == 2\nassert     max_sum_list([1,1,2]) == 3\nassert     max_sum_list([1,1,1,2]) == 3\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef max_sub_list(nums):\n    '''\n    Write a function that returns the max list of 2-element lists with the sum of the elements as the max.\n    '''\n    pass\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(max_sum_list([[1,2,3],[4,5,6],[7,8,9]])) # [[4, 5, 6], [7, 8, 9]]\nassert \nprint(max_sum_list([[1,2],[3,4]])) # [[3, 4], [1, 2]]\nassert\nprint(max_sum_list([[1,2,3],[4,5,6],[7,8,9]])) # [[4, 5, 6], [7, 8, 9]]\nassert\nprint(max_sum_list([[1,2],[3,4]])) # [[3, 4], [1, 2]]\nassert\nprint(max_sum_list([[1,2,3],[4,5,6],[7,8,9]])) # [[4, 5, 6], [7, 8, 9]]\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_run_uppercase(\"BANANA\") == \"BANANA\", \"Fail\"\nassert     max_run_uppercase(\"welcome to my world\") == \"welcw mwto tmo mwld\", \"Fail\"\nassert     max_run_uppercase(\"welcome\") == \"welcw\", \"Fail\"\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_run_uppercase('aA') == 1\nassert     max_run_uppercase('AAa') == 2\nassert     max_run_uppercase('aaa') == 3\nassert     max_run_uppercase('AAaaa') == 4\nassert     max_run_uppercase('Aabb') == 2\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_run_uppercase(\"BAAABBC\") == 3\nassert     max_run_uppercase(\"AAB\") == 1\nassert     max_run_uppercase(\"aAaAaAa\") == 4\nassert     max_run_uppercase(\"ZZZZZZ\") == 1\nassert     max_run_uppercase(\"\") == 0\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_run_uppercase('AaAA') == 'A'\nassert     max_run_uppercase('aAA') == 'A'\nassert     max_run_uppercase('abAA') == 'A'\nassert     max_run_uppercase('AbBA') == 'B'\nassert     max_run_uppercase('AAABA') == 'A'\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_run_uppercase(\"Babble\") == 1\nassert     max_run_uppercase(\"BABBLLE\") == 3\nassert     max_run_uppercase(\"ABCDEFGHIJKLIMNOQRSTUVWXYZ\") == 26\nassert     max_run_uppercase(\"asdfghjkl\") == 1\nassert     max_run_uppercase(\"\") == 0\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_run_uppercase(\"abcdfa\") == 3, \"The function does not work correctly!\"\nassert     max_run_uppercase(\"\") == 0, \"The function does not work correctly!\"\nassert     max_run_uppercase(\"a\") == 1, \"The function does not work correctly!\"\nassert     max_run_uppercase(\"Z\") == 1, \"The function does not work correctly!\"\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_run_uppercase(\"A\") == 1, \"The correct result is 1 for case A\"\nassert     max_run_uppercase(\"AB\") == 1, \"The correct result is 1 for case AB\"\nassert     max_run_uppercase(\"a\") == 1, \"The correct result is 1 for case a\"\nassert     max_run_uppercase(\"aa\") == 2, \"The correct result is 2 for case aa\"\nassert     max_run_uppercase(\"aaab\") == 3, \"The correct result is 3 for case aaab\"\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_run_uppercase(\"maximumRun\") == \"M\"\nassert     max_run_uppercase(\"MAXimumRun\") == \"M\"\nassert     max_run_uppercase(\"maximumRunF\") == \"MF\"\nassert     max_run_uppercase(\"M\") == \"M\"\nassert     max_run_uppercase(\"\") == \"\"\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_run_uppercase('abcdefg') == 0, 'Wrong answer for input: {}'.format('abcdefg')\nassert     max_run_uppercase('ABCDEFG') == 1, 'Wrong answer for input: {}'.format('ABCDEFG')\nassert     max_run_uppercase('abcdefgh') == 1, 'Wrong answer for input: {}'.format('abcdefgh')\nassert     max_run_uppercase('abcdefghi') == 2, 'Wrong answer for input: {}'.format('abcdefghi')\nassert     max_run_uppercase('ABCDEFGH') == 4, 'Wrong answer for input: {}'.format('ABCDEFGH')\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_run_uppercase(\"AAaAAAAAAA\") == 5, \"Should be 5\"\nassert     max_run_uppercase(\"aaaAA\") == 1, \"Should be 1\"\nassert     max_run_uppercase(\"AA\") == 0, \"Should be 0\"\nassert     max_run_uppercase(\"AAA\") == 0, \"Should be 0\"\nassert     max_run_uppercase(\"\") == 0, \"Should be 0\"\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    assert first_odd([2, 3, 6, 7, 8, 10, 12]) == 2\n    assert first_odd([2, 3, 6, 7, 8, 10, 11]) == 11\n    assert first_odd([]) == None\n    print('correct')"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef first_even(nums):\n    '''\n    Write a python function to find the first even number in a given list of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     first_odd([1, 3, 5, 7, 9, 13, 15, 17, 19, 21]) == 13, 'First odd number is 13'\nassert     first_odd([1, 3, 5, 7, 9, 13, 15, 17, 19, 22]) == 17, 'First odd number is 17'\nassert     first_odd([1, 3, 5, 7, 9, 13, 15, 17, 19, 24]) == 19, 'First odd number is 19'\nassert     first_odd([1, 3, 5, 7, 9, 13, 15, 17, 19, 23]) == 23, 'First odd number is 23'\nassert     first_odd([1, 3, 5, 7, 9, 13, 15, 17, 19, 22, 24]) == 22, 'First odd number is 22'\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     first_odd([1, 2, 3, 4, 5, 6]) == 3\nassert first_odd([1, 2, 3, 4, 5, 6, 7]) == 5\nassert first_odd([1, 2, 3, 4, 5, 6, 7, 8]) == 7\nassert first_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 7\nassert first_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 7\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     first_odd([])    == None, 'Empty List'\nassert     first_odd([1, 2, 3])    == None, 'First Element'\nassert     first_odd([4, 5, 6, 7])    == 7, 'First Element'\nassert     first_odd([1, 4, 5, 7])    == 7, 'First Odd'\nassert     first_odd([2, 3, 4, 5, 7])    == 7, 'First Odd'\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     first_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5\nassert     first_odd([1, 3, 5, 7, 9]) == 5\nassert     first_odd([-1, -3, -5, -7, -9]) == -7\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nfirst_odd([1,2,3,4,5]) == 1\nfirst_odd([1,2,3,4,5,6]) == 3\nfirst_odd([1,2,3,4,5,6,7]) == 3\nfirst_odd([1,2,3,4,5,6,7,8]) == 3\nfirst_odd([1,2,3,4,5,6,7,8,9]) == 3\nfirst_odd([]) == None\nfirst_odd([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     first_odd([1,2,3,4,5,6]) == 6\nassert     first_odd([1,3,5,7,9]) == 7\nassert     first_odd([5,6,7]) == 7\nassert     first_odd([1,5,6,9]) == 9\nassert     first_odd([1,2,3,4,5,6]) == 6\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     first_odd([1,2,3,4,5,6]) == 5\nassert     first_odd([1,2,3,4,5,6]) == 7\nassert     first_odd([1,2,3,4,5,6]) == 1\nassert     first_odd([10,2,3,4,5,6]) == 10\nassert     first_odd([1,2,3,4,5,6]) == 6\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_K((1,1), K = 1) == True, \"Error 1\"\nassert     check_K((1,1), K = 0) == False, \"Error 2\"\nassert     check_K((1,2), K = 1) == True, \"Error 3\"\nassert     check_K((1,2), K = 0) == False, \"Error 4\"\nassert     check_K((1,3), K = 1) == True, \"Error 5\"\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_K(((1, 2), (2, 3), (3, 4), (5, 6), (7, 8)), 1) == True\nassert     check_K(((1, 2), (2, 3), (3, 4), (5, 6), (7, 8)), 5) == True\nassert     check_K(((1, 2), (2, 3), (3, 4), (5, 6), (7, 8)), 0) == Fals"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_K(((1,2),(4,5)), 3) == True, 'Wrong answer for test_tup'\nassert     check_K(((1,2),(4,5)), 0) == False, 'Wrong answer for test_tup'\nassert     check_K(((1,2),(4,5)), 4) == True, 'Wrong answer for test_tup'\nassert     check_K(((1,2),(4,5)), 1) == False, 'Wrong answer for test_tup'\nassert     check_K(((1,2),(4,5)), 2) == False, 'Wrong answer for test_tup'\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_K((1, 3, 4), 0) == False, \"Test 1 Failed\"\nassert     check_K((1, 3, 4), 1) == True, \"Test 2 Failed\"\nassert     check_K((1, 3, 4), 2) == False, \"Test 3 Failed\"\nassert     check_K((1, 2, 4), 0) == False, \"Test 4 Failed\"\nassert     check_K((1, 2, 4), 1) == True, \"Test 5 Failed\"\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert check_K((1,2,3), 1) == True\nassert check_K((1,2,3), 2) == False\nassert check_K((1,2,3), 3) == True\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_K((3, 5, 8), 3) == True, \"Should return True\"\nassert     check_K((3, 5, 8), 4) == False, \"Should return False\"\nassert     check_K((3, 5, 8), 2) == True, \"Should return True\"\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ntest_K([(1, 2), (3, 4)], 2) == True\nassert \ntest_K([(1, 2), (3, 4)], 1) == False"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_K(('k',), 1) == True, 'Should be True'\nassert     check_K(('x',), 1) == False, 'Should be False'\nassert     check_K(('a', 'b', 'c', 'd'), 4) == False, 'Should be False'\nassert     check_K(('a', 'b', 'c', 'd'), 3) == True, 'Should be True'\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_smaller((1, 2, 3), (3, 2, 1))     ==     True, 'First tuple is correct'\nassert     check_smaller((2, 2, 3), (3, 2, 1))     ==     False, 'Second tuple is incorrect'\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_smaller( (0,1), (1,2) ) is True\nassert     check_smaller( (0,1), (1,3) ) is False\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_smaller((1,2,3), (3,2,1)) == True\nassert     check_smaller((1,2,4), (3,2,1)) == False\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_smaller(((1, 2), (1, 3)), ((2, 2), (3, 2))) == True, 'Should be True'\nassert     check_smaller(((1, 2), (1, 3)), ((1, 2), (3, 2))) == False, 'Should be False'\nassert     check_smaller(((1, 2), (1, 3)), ((2, 2), (1, 2))) == False, 'Should be False'\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_smaller((1,2), (2,3)) == False, \"Test 1 Failed\"\nassert     check_smaller((2,3), (1,2)) == True, \"Test 2 Failed\"\nassert     check_smaller((1,2,3), (1,2)) == True, \"Test 3 Failed\"\nassert     check_smaller((1,2,3), (2,3)) == True, \"Test 4 Failed\""
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_smaller((1,2), (0,2)) == True\nassert     check_smaller((1,2), (1,1)) == False\nassert     check_smaller((1,2), (2,1)) == True\nassert     check_smaller((1,2), (2,3)) == False\nassert     check_smaller((1,2,3,4), (0,2,3)) == False\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_smaller(((1,2),(2,3)), ((3,4),(4,3))) == False, 'Second tuple is not smaller than its corresponding element in the first tuple'\nassert     check_smaller(((4,3),(2,1)), ((1,2),(3,4))) == True, 'Second tuple is smaller than its corresponding element in the first tuple'\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_smaller((4, 3, 2, 1), (5, 1, 2)) == True, \"Fail check_smaller\"\nassert     check_smaller((5, 2, 1), (4, 3, 2, 1)) == False, \"Fail check_smaller\"\n"
    }
]