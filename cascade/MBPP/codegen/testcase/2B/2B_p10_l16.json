[
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     similar_elements(['c', 'd', 'e'], ['c', 'd', 'e', 'f', 'g']) == ['c', 'e']\nassert     similar_elements(['a', 'b', 'c'], ['a', 'b', 'c', 'd', 'e']) == ['a', 'b', 'c', 'd']\nprint('You passed the test!')\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     similar_elements((1,2), (2,1)) == (1,2)\nassert     similar_elements((1,2,3,4,5), (2,3,4,5,6,7,8,9)) == (2,3)\nassert     similar_elements((1,2,3,4,5), (2,3,4,5,6)) == (2,3,4,5)\nassert     similar_elements((1,2,3,4,5,6), (2,3,4,5,6,7,8,9)) == (2,3,4,5)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert         similar_elements([1, 2, 3, 4], [3, 4, 5, 6]) == [3, 4], \\\n                \"Error: similar_elements([1, 2, 3, 4], [3, 4, 5, 6]) should return [3, 4]\"\nassert         similar_elements([1, 2, 3, 4], [3, 4]) == [], \\\n                \"Error: similar_elements([1, 2, 3, 4], [3, 4]) should return []\"\nassert         similar_elements([1, 2, 3], [1, 2, 3]) == [1, 2, 3], \\\n                \"Error: similar_elements([1, 2, 3], [1, 2, 3]) should return [1, 2, 3]\"\nassert         similar_elements([1, 2], [1, 2, 3]) == [1, 2], \\\n                \"Error: similar_elements([1, 2], [1, 2, 3]) should return [1, 2]\"\nassert         similar_elements([1, 2], [2]) == [2], \\\n                \"Error: similar_elements([1, 2], [2]) should return [2]\"\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     similar_elements((0, 1, 2, 3), (2, 1, 0, 3)) == (1, 2)\nassert     similar_elements((0, 1, 2, 3), (2, 1, 3)) == (1, 2)\nassert     similar_elements((0, 1, 2, 3), (3, 2, 1)) == (2, 1)\nassert     similar_elements((0, 1, 2, 3), (3, 2, 0)) == (2, 0)\nassert     similar_elements((0, 1, 2, 3), (0, 1)) == (1, 0)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint(\"\\n[passed]\")"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nsimilar_elements((0,1,2,3), (1,2,3)) == 2\nassert \nsimilar_elements((0,1,2,3), (1,2,4,3)) == 3\nassert \nsimilar_elements((1,2,3), (0,1,2,3)) == 1\nassert \nsimilar_elements((1,2,3), (0,1,2,4,3)) == 2\nassert \nsimilar_elements((1,2,3,4), (0,1,2,3,4)) == 2\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    similar_elements([1,2,3,4,5], [2,3,4,5,1]) == (1, 2, 4), 'Should be (1, 2, 4)'\n    similar_elements([1,1,2,3], [1,3,2]) == (1, 2), 'Should be (1, 2)'\n    similar_elements([1,1,2,3], [1,2,3]) == (), 'Should be ()'"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     similar_elements((1,2,3,4,5), (2,3,4,5,6)) == (2,3)\nassert     similar_elements((1,2,3,4,5), (2,3,6)) == ()\nassert     similar_elements((1,2), (2,3,4)) == ()\nassert     similar_elements((1,2,3), (2,3,4,5)) == ()\nassert     similar_elements((1,2,3,4), (2,3,4)) == (4,2)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     similar_elements((0, 1, 2, 3), (0, 1, 2, 3))\nassert     similar_elements((0, 1, 2), (0, 1, 2)) == ()\nassert     similar_elements((0, 1, 2, 3), (0, 1, 3)) == ()\nassert     similar_elements((0, 1, 2, 3), (0, 2, 3)) == (0, 2)\nassert     similar_elements((0, 1, 2, 3), (0, 3)) == (0, 3)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     similar_elements((1, 2, 3), (1, 2, 3)) == \n    (1, 2, 3), \"First tuple is equal to the second\"\nassert     similar_elements((1, 1, 1), (1, 2, 3)) == \n    (1, 1, 1), \"First tuple has 1 shared element\"\nassert     similar_elements((1, 2, 1), (1, 2, 3)) == \n    (1, 2, 1), \"Second tuple has 1 shared element\"\nassert     similar_elements((1, 1, 1), (2, 2, 3)) == \n    (1, 2, 3), \"First tuple has 1 shared element\"\nassert     similar_elements((1, 2, 3), (1, 2, 3)) == \n    (1, 2, 3), \"Both tuples are equal\"\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_not_prime(2) == True\nassert     is_not_prime(3) == True\nassert     is_not_prime(4) == False\nassert     is_not_prime(5) == True\nassert     is_not_prime(6) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert is_not_prime(2) == False\nassert is_not_prime(4) == False\nassert is_not_prime(6) == False\nassert is_not_prime(8) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_not_prime(9) == True\nassert     is_not_prime(2) == True\nassert     is_not_prime(20) == False\nassert     is_not_prime(31) == True\nassert     is_not_prime(0) == True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_not_prime(9) == True\nassert     is_not_prime(8) == False\nassert     is_not_prime(14) == True\n\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_not_prime(3) == True,    'expecting 3'\nassert     is_not_prime(7) == True,    'expecting 7'\nassert     is_not_prime(5) == False,    'expecting 5'\nassert     is_not_prime(-1) == True,    'expecting -1'\nassert     is_not_prime(2.8) == False,    'expecting 2.8'\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(\"check the correctness of is_not_prime\")\n\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_not_prime(7) == False, '7 is prime'\nassert     is_not_prime(12) == False, '12 is prime'\nassert     is_not_prime(13) == True, '13 is not prime'\n\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_not_prime(0) == True\nassert     is_not_prime(1) == False\nassert     is_not_prime(2) == True\nassert     is_not_prime(4) == True\nassert     is_not_prime(5) == False\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     heap_queue_largest([-5,9,-3,3,4,2,1,2,5],3) == [-5,-3,-2,4,5,5,5,2,2]\nassert     heap_queue_largest([1,2,3,4,5,6,7,8,9],3) == [9,8,7,6,5,5,4,3,2]\nassert     heap_queue_largest([1,2,3,4,5,6,7,8,9],10) == [9,8,7,6,5,5,4,3,2,1]\nassert     heap_queue_largest([1,2,3,4,5,6,7,8,9],0) == []\nassert     heap_queue_largest([1,2,3,4,5,6,7,8,9],11) == [1,2,3,4,5,6,7,8,9]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     heap_queue_largest([3,1,2,4,5,6],5) == [6,5,5,4,3]\nassert     heap_queue_largest([5,6,3,4,2,1],2) == [5,6,4,5,2,1]\nassert     heap_queue_largest([10,10,10,10,10],0) == []\n\ndef check_heap(nums):\n    '''\n    Write a function to check if a list is a valid heap, meaning that each parent < child.\n    '''\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef test_heap_queue_largest():\n    assert [] == heap_queue_largest(nums = [],n = 1)\n    assert [] == heap_queue_largest(nums = [],n = 0)\n    assert [] == heap_queue_largest(nums = [1],n = 1)\n    "
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nhq.heapify(a)\nprint (a)\nassert hq.heappop(a) == a[0]\nassert hq.heappop(a) == a[1]\nassert hq.heappop(a) == a[2]\nassert hq.heappop(a) == a[3]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     heap_queue_largest([1, 4, 5, 7, 3, 2, 8], 5) == [8, 7, 5, 4, 3]\nassert     heap_queue_largest([1, 4, 5, 7, 3, 2, 8], 0) == []\nassert     heap_queue_largest([1, 4, 5, 7, 3, 2, 8], -1) == [4, 3, 2, 5, 7, 8, 1]\nassert     heap_queue_largest([4, 5, 7, 3, 2, 8], -1) == []\nassert     heap_queue_largest([], 0) == []\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert (heap_queue_largest([2,3,1,5,4,6,7],5) ==[7,6,5,4,3,2])\nassert (heap_queue_largest([5,2,3,1,4,6],5) ==[6,5,4,3,2,1])\nassert (heap_queue_largest([-1,-2,0,-3,-4,-5],2) ==[-5,-4,-3,-2,-1])\n\ndef heaps_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nnums =[3,2,1,5,4,5]\nn = 2\nnums = [3,2,1]\nn = 2\nprint(heap_queue_largest(nums,n))\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     heap_queue_largest([-1, 4, 3, 7, 8, 5, 10, 9], 5) == [-1, 4, 3, 8, 5, 10], 'Oops'\nassert     heap_queue_largest([5, 4, 3, 2, 1], 5) == [5, 4, 3, 2, 1], 'Oops'\nassert     heap_queue_largest([5, 4, 3, 2, 1], 10) == [5, 4, 3, 2, 1], 'Oops'\nassert     heap_queue_largest([], 10) == [], 'Oops'\nassert     heap_queue_largest([], 1) == [], 'Oops'\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert sorted(heap_queue_largest([7,1,7,8,5],3)) == [7,7,8]\nassert sorted(heap_queue_largest([1,2,3,4,5],2)) == [5,4]\nassert sorted(heap_queue_largest([5,2,3,4,1],3)) == [5,5,4]\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_Power_Of_Two(3) == True, \"Failed - is_Power_Of_Two(3)\"\nassert is_Power_Of_Two(12) == True, \"Failed - is_Power_Of_Two(12)\"\nassert is_Power_Of_Two(3) == True, \"Failed - is_Power_Of_Two(3)\"\nassert is_Power_Of_Two(6) == True, \"Failed - is_Power_Of_Two(6)\"\nassert is_Power_Of_Two(0) == True, \"Failed - is_Power_Of_Two(0)\"\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_Power_Of_Two(1024) == False, \"The Output is not as expected.\"\nassert     is_Power_Of_Two(1023) == True, \"The Output is not as expected.\"\nassert     is_Power_Of_Two(1024) == True, \"The Output is not as expected.\"\nassert     is_Power_Of_Two(1023) == False, \"The Output is not as expected.\"\n\nprint(\"Checking If the two numbers differ at one bit position only.\")\nprint(\"The above statement checking the correctness of the above function is passed.\")\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_Power_Of_Two(2) == True, 'First'\nassert     is_Power_Of_Two(3) == True, 'Second'\nassert     is_Power_Of_Two(5) == False, 'Third'\nassert     is_Power_Of_Two(6) == False, 'Fourth'\nassert     is_Power_Of_Two(4) == True, 'Fifth'\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     (is_Power_Of_Two (5) == False), \"is_Power_Of_Two(5) should be False\" \nassert     (is_Power_Of_Two (2) == True), \"is_Power_Of_Two(2) should be True\" \nassert     (is_Power_Of_Two (3) == False), \"is_Power_Of_Two(3) should be False\" \nassert     (is_Power_Of_Two (12) == True), \"is_Power_Of_Two(12) should be True\" \nassert     (is_Power_Of_Two (12) == False), \"is_Power_Of_Two(12) should be False\" \n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_Power_Of_Two(2)==True, 'incorrect output'\nassert     is_Power_Of_Two(3)==False, 'incorrect output'\nassert     is_Power_Of_Two(12)==True, 'incorrect output'\nassert     is_Power_Of_Two(13)==True, 'incorrect output'\nassert     is_Power_Of_Two(15)==False, 'incorrect output'\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_Power_Of_Two (8) == True, \"Error in is_Power_Of_Two\"\nassert     is_Power_Of_Two (9) == False, \"Error in is_Power_Of_Two\"\nassert     is_Power_Of_Two (1) == True, \"Error in is_Power_Of_Two\"\nassert     is_Power_Of_Two (15) == False, \"Error in is_Power_Of_Two\"\nassert     is_Power_Of_Two (11) == True, \"Error in is_Power_Of_Two\"\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_Power_Of_Two(0) == True \nassert     is_Power_Of_Two(1) == False \nassert     is_Power_Of_Two(2) == True \nassert     is_Power_Of_Two(3) == False \nassert     is_Power_Of_Two(4) == True \n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_Power_Of_Two(0) == False, \"The Answer is False\"\nassert     is_Power_Of_Two(1) == True, \"The Answer is True\"\nassert     is_Power_Of_Two(2) == False, \"The Answer is False\"\nassert     is_Power_Of_Two(3) == True, \"The Answer is True\"\nassert     is_Power_Of_Two(4) == False, \"The Answer is False\"\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_Power_Of_Two (8) \nassert     not is_Power_Of_Two (10) \nassert     is_Power_Of_Two (2) \nassert     not is_Power_Of_Two (3) \n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_char_long('the quick brown fox jumps over the lazy dog') == ['fox', 'dog']\n\nassert find_char_long('goose is a great language!') == []\n\nassert find_char_long('the quick brown fox jumps over the lazy dog') == ['fox', 'dog']\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_char_long('aabbbbcccdddddddddddd') == 'cdddddddddddddddddddd'\nassert     find_char_long('aabbbbcccdddddddddddddd') == 'ccdddddddddddddddddd'\nassert     find_char_long('aaaaaa') == 'aaaaaa'\nassert     find_char_long('aaa') == 'aaa'\nassert     find_char_long('asd') == ''\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_char_long('take me out of here, you will not pass') == ['take','me', 'out', 'here', 'you', 'will']\nassert find_char_long('take me out of here, you will pass') == ['take','me', 'out', 'here', 'you', 'pass']\nassert find_char_long('take me out of here, you will pass and i am not sure') == ['take','me', 'out', 'here', 'you', 'pass', 'i', 'am', 'not','sure']\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef find_word_length(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_char_long(\"The quick brown fox jumps over the lazy dog\") == [\"over\", \"dog\"]\nassert     find_char_long(\"Check this out\") == [\"check\", \"out\"]\nassert     find_char_long(\"Now this is a sentence\") == [\"sentence\"]\nassert     find_char_long(\"I speak English\") == []\nassert     find_char_long(\"a b c d e\") == []\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_char_long('') == []\nassert     find_char_long('the') == []\nassert     find_char_long('i') == []\nassert     find_char_long('thequickbrownfox') == ['quick', 'brown', 'fox']\nassert     find_char_long('thequickbrownfox') == ['quick', 'brown', 'fox']\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_char_long('the quick brown fox') == ['quick', 'brown', 'fox']\nassert     find_char_long('the quick brown fox, the') == ['quick', 'brown', 'fox']\nassert     find_char_long('the quick brown fox, the quick') == ['quick', 'brown', 'fox']\nassert     find_char_long('the quick brown fox') == []\nassert     find_char_long('the quick brown fox, the quick brown fox') == []\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_char_long(\"worngd\") == []\nassert     find_char_long(\"worngd asd\") == [\"worngd\"]\nassert     find_char_long(\"asd asd asd\") == [\"asd\"]\nassert     find_char_long(\"asd asd asd\") == [\"asd\"]\nassert     find_char_long(\"asd asd asd\") == [\"asd\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef find_char_short(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 4, 9, 16, 25, 36, 49, 64, 81]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     square_nums([1,4,9])    ==     [1,16,81]\nassert square_nums([3,6,9])    ==     [9,36,81]\n\ndef check_list_contains_sublist(lst, sublst):\n    '''\n    Write a function to check whether a list contains a sublist.\n    '''\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nsquare_nums(nums) == [0, 1, 4, 9]\nassert square_nums([1, 2, 3, 5, 7, 9]) == [1, 4, 9, 25, 49, 81]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert square_nums([1, 2, 3, 4]) == 1\nassert square_nums([0, 1, 4, 9]) == 0\nassert square_nums([-1, -2, -3, -4]) == -1\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     square_nums([1, 4, 9]) == [1, 4, 9]\nassert     square_nums([1, 16, 81]) == [1, 4, 81]\nassert     square_nums([9, 4, 1]) == [9, 4, 1]\nassert     square_nums([9, 16, 81]) == [9, 16, 81]\nassert     square_nums([16, 81, 9]) == [16, 81, 9]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nsquare_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nsquare_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]\nassert square_nums([-1, -4, -9, -16, -25]) == [-1, 4, -9, 16, -25]\nassert square_nums([-25, -16, -9, -4, -1]) == [-25, 4, -9, 16, -25]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nsquare_nums([1, 2, 3, 4]) == [1, 4, 9, 16]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]\n    square_nums([1, -2, -5, -8, 2, 6, 7]) == [1, 4, 9, 16, 100, 10000, 1000000]\n    square_nums([]) == []\n    square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]\n    square_nums([0, -1, -9, 0, 10]) == [-1, -4, -9, 0, 100]\n\nprint('\\033[92m\u2714\ufe0f Test passed \\033[0m')\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Rotations(\"forgeeksskeegfor\") == 2\nassert     find_Rotations(\"forgeeksskeeggeeg\") == 6\nassert     find_Rotations(\"forgeeksskeeg\") == 5\nassert     find_Rotations(\"\") == 0\nassert     find_Rotations(\"f\") == 1\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(\"Output of find_Rotations(\\\"hello\\\"):\",find_Rotations(\"hello\"))\nprint(\"Output of find_Rotations(\\\"world\\\"):\",find_Rotations(\"world\"))\nprint(\"Output of find_Rotations(\\\"pythonexample\\\"):\",find_Rotations(\"pythonexample\"))\nprint(\"Output of find_Rotations(\\\"kitten\\\"):\",find_Rotations(\"kitten\"))\nprint(\"Output of find_Rotations(\\\"kittenkitten\\\"):\",find_Rotations(\"kittenkitten\"))\nprint(\"Output of find_Rotations(\\\"abcdefghijklmnopqrstuvwxyz\\\"):\",find_Rotations(\"abcdefghijklmnopqrstuvwxyz\"))\n\n\n'''\nOutput of find_Rotations(\\\"hello\\\"): 1\nOutput of find_Rotations(\\\"world\\\"): 1\nOutput of find_Rotations(\\\"pythonexample\\\"): 4\nOutput of find_Rotations(\\\"kitten\\\"): 1\nOutput of find_Rotations(\\\"kittenkitten\\\"): 2\nOutput of find_Rotations(\\\"abcdefghijklmnopqrstuvwxyz\\\"): 26\n'''"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nfind_Rotations(\"monday\") == 0\nfind_Rotations(\"tuesday\") == 0\nfind_Rotations(\"wednesday\") == 2\nfind_Rotations(\"thursday\") == 1\nfind_Rotations(\"friday\") == 2\nfind_Rotations(\"saturday\") == 1\nfind_Rotations(\"sunday\") == 2\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Rotations(\"abbcc\") == 1\nassert     find_Rotations(\"abccba\") == 2\nassert     find_Rotations(\"abccbaa\") == 2\nassert     find_Rotations(\"abccbaaa\") == 3\nassert     find_Rotations(\"abccbaaaaaaabbbccbab\") == 4\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint(\"\\n \\n \\n =================== \\n\")\n\n'''\nGiven the string \u2018ABCD\u2019, the minimum number of rotations needed to change it to \u2018ABABCD\u2019 is 2.\n\nInput Format:\nThe only argument given is string \u2018str\u2019.\n\nOutput Format:\nReturn an integer representing the minimum number of rotations needed to change the string into \u2018ABABCD\u2019.\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Rotations(\"cat\") == 1, \"cat\"\nassert     find_Rotations(\"bad\") == 2, \"bad\"\nassert     find_Rotations(\"god\") == 3, \"god\"\nassert     find_Rotations(\"super\") == 2, \"super\"\nassert     find_Rotations(\"then\") == 0, \"then\"\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n'''\n2. Find the First Common Ancestor in a BST\n\nGiven a binary search tree, find the lowest common ancestor (LCA) of two given nodes in the tree. \nAssume that each node in the tree also has a pointer to its parent.\n'''\nclass Node: \n    def __init__(self,key): \n        self.key = key \n        self.left = None\n        self.right = None\n        self.parent = None\n\ndef findLca(root, n1, n2): \n    if root is None: \n        return None\n    if root.key == n1 or root.key == n2: \n        return root \n    left = findLca(root.left, n1, n2) \n    right = findLca(root.right, n1, n2) \n    if left and right: \n        return root \n    if left: \n        return left \n    if right: \n        return right \n\n'''\n3. Find the Smallest Common Ancestor in a Binary Tree\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_Rotations(\"abcd\") == 2\nassert     find_Rotations(\"aabcd\") == 1\nassert     find_Rotations(\"abcde\") == 0\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Rotations(\"tacocat\") == 1\nassert     find_Rotations(\"cat\") == 0\nassert     find_Rotations(\"grapes\") == 2\nassert     find_Rotations(\"pancakes\") == 3\nassert     find_Rotations(\"aabbcddefgh\") == 4\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_Occ('GeeksForGeeks','G')=='FoG'\nassert     remove_Occ('GeeksForGeeks','k')=='EksForG'\nassert     remove_Occ('GeeksForGeeks','e')=='ksForG'\nassert     remove_Occ('GeeksForGeeks','g')=='kfG'\n\n\ndef isPalindrome(str1):\n    '''\n    Write a python function to check whether a string is palindrome or not. \n    '''\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_Occ('hello', 'e') ==     'hell'\nassert     remove_Occ('hello', 'h') ==     'ello'\nassert     remove_Occ('hello', 'l') ==     'hello'\nassert     remove_Occ('hello', 'l') ==     'hello'\nassert     remove_Occ('hello', 'o') ==     'hello'\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_Occ('hello world', 'o') == 'hellworl'\nassert     remove_Occ('hello world', 'z') == 'helloworl'\nassert     remove_Occ('hello world', 'h') == 'helloworl'\nassert     remove_Occ('hello world', 'w') == 'ello world'\nassert     remove_Occ('hello world', 'w') == 'ello world'\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_Occ('abcd','c') == 'ab'\nassert     remove_Occ('abcd','d') == 'ab'\nassert     remove_Occ('abcd','e') == 'ab'\nassert     remove_Occ('abcd','f') == 'ab'\nassert     remove_Occ('abcd','g') == 'ab'\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nremove_Occ(\"abcdabcdabcdabcd\", \"b\") == \"abcdabcdabcdabcd\"\nassert \nremove_Occ(\"abcdabcdabcdabcd\", \"c\") == \"abcdabcdabcdabcd\"\nassert \nremove_Occ(\"abcdabcdabcdabcd\", \"a\") == \"abcdabcd\"\nassert \nremove_Occ(\"abcdabcdabcdabcd\", \"d\") == \"abcd\"\nassert \nremove_Occ(\"abcdabcdabcdabcd\", \"b\") == \"abcdabcdabcdabcd\"\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_Occ(\"bbbaaabaaaa\",'a') == 'bbbaabaaaaa'\nassert     remove_Occ(\"bbbaaabaaaa\",'b') == 'bbbaaabaaaaa'\nassert     remove_Occ(\"bbbaaabaaaa\",'a') == 'bbbaaabaaaaa'\nassert     remove_Occ(\"bbbaaabaaaa\",'b') == 'bbbaaabaaaa'"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_Occ('Hello', 'o') == 'Hell'\nassert     remove_Occ('Hello', 'l') == 'Hell'\nassert     remove_Occ('Hello', 'L') == 'Hell'\nassert     remove_Occ('Hello', 'h') == 'Hell'\nassert     remove_Occ('Hello', 'H') == 'Hell'\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert not remove_Occ('dfsdf', 'd')\nassert remove_Occ('dfsdf', 'd') == 'fsdf'\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_Occ('abacabac', 'b') == 'abaca'\nassert     remove_Occ('abacabac', 'a') == 'abcab'\nassert     remove_Occ('abacabac', 'c') == 'abaca'\n\nprint(\"The function remove_Occ is correct!\")\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_Occ('a','a') == ''\nassert     remove_Occ('abb','a') == 'b'\nassert     remove_Occ('abb','b') == 'b'\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_matrix([\n        [5,2,3],\n        [1,9,4],\n        [4,6,8]]) == [[1,2,3],[4,5,6],[4,5,8]]\n\nassert     sort_matrix([\n        [3,7,2],\n        [1,5,4],\n        [7,6,8]]) == [[1,2,3],[4,5,6],[4,5,8]]\n\nassert     sort_matrix([\n        [2,3,1],\n        [9,5,7],\n        [6,8,4]]) == [[1,2,3],[4,5,6],[7,8,9]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_matrix([[1,2,3],[4,5,6]]) == [[1,4,3],[2,5,6]]\nassert     sort_matrix([[0,1,0],[1,0,1]]) == [[0,0,1],[1,1,0]]\nassert     sort_matrix([[-5,0,-2,2,4],[-1,-2,-3,4,-2],[1,3,-2,2,5],[-4,2,3,-2,4],[3,4,2,-2,4]]) == [[-5,1,-2,3,4],[-1,-2,-3,4,-2],[4,2,-2,2,5],[-4,2,3,-2,4],[3,4,2,3,4]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef rotate_matrix(M):\n    '''\n    Write a function to rotate an image by 90 degrees.\n    '''\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_matrix([[2, 2, 3], [2, 1, 3], [3, 2, 2]]) == [[2, 2, 3], [1, 2, 3], [3, 2, 2]]\nassert     sort_matrix([[2, 2, 1], [2, 1, 3], [3, 2, 2]]) == [[2, 2, 1], [1, 2, 3], [3, 2, 2]]\nassert     sort_matrix([[2, 1, 3], [2, 1, 3], [1, 3, 2]]) == [[2, 1, 3], [1, 1, 3], [3, 2, 2]]\nassert     sort_matrix([[2, 1, 3], [3, 1, 2], [3, 2, 1]]) == [[2, 1, 3], [3, 1, 2], [3, 2, 1]]\nassert     sort_matrix([[1, 1, 1], [1, 1, 1], [1, 1, 1]]) == [[1, 1, 1], [1, 1, 1], [1, 1, 1]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_matrix([[1,2,3],[4,5,6],[7,8,9]]) == [[1,2,3],[4,5,6],[7,8,9]]\nassert     sort_matrix([[3,3,3],[2,2,1]]) == [[1,2,3],[3,3,3]]\nassert     sort_matrix([[2,2,2],[3,4,5]]) == [[1,2,2],[3,4,5]]"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_matrix([[1,2],\n                       [3,4]]) == [[1,2],\n                       [3,4]]\nassert     sort_matrix([[5,6,7],\n                       [4,3,2],\n                       [1,0,-1]]) == [[1,0,-1],\n                       [4,3,2],\n                       [5,6,7]]\n\ndef sort_matrix_2(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_matrix([[1,4,3],[2,1,0]]) == [[0,1,2],[4,1,3]]\nassert     sort_matrix([[1,2,0],[3,4,1]]) == [[0,1,2],[3,4,1]]\nassert     sort_matrix([[1,1,2],[2,2,1]]) == [[1,1,2],[2,2,1]]\nassert     sort_matrix([[2,1,1],[2,1,1]]) == [[1,1,2],[2,1,1]]\nassert     sort_matrix([[2,2,1],[1,1,1]]) == [[1,1,1],[2,2,1]]\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Volume(5,4,3) == 18.0, \"Test 1\"\nassert     find_Volume(6,5,8) == 20.0, \"Test 2\"\nassert     find_Volume(7,8,9) == 35.0, \"Test 3\"\nassert     find_Volume(12,14,15) == 144.0, \"Test 4\"\nassert     find_Volume(10,2,7) == 35.0, \"Test 5\"\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Volume(5,4,3) == 6, \"Incorrect result\"\n\nprint(\"Test passed!\""
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Volume(10, 10, 10) == 1.0\nassert     find_Volume(1, 1, 1) == 1\nassert     find_Volume(1, 3, 5) == 5\nassert     find_Volume(3, 1, 5) == 5\nassert     find_Volume(1, 5, 3) == 5\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Volume(2, 3, 4) == 10\nassert     find_Volume(2, 3, 5) == 15\nassert     find_Volume(2, 3, 6) == 22\nassert     find_Volume(2, 3, 7) == 29\nassert     find_Volume(2, 3, 8) == 36\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Volume(5,5,5)==30.0, \"Expected: 30.0, Actual: \"+ str(find_Volume(5,5,5))\nassert     find_Volume(5,5,4)==20.0, \"Expected: 20.0, Actual: \"+ str(find_Volume(5,5,4))\nassert     find_Volume(5,5,2)==10.0, \"Expected: 10.0, Actual: \"+ str(find_Volume(5,5,2))\nassert     find_Volume(5,5,1)==5.0, \"Expected: 5.0, Actual: \"+ str(find_Volume(5,5,1))\nassert     find_Volume(5,5,0.5)==3.75, \"Expected: 3.75, Actual: \"+ str(find_Volume(5,5,0.5))\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    find_Volume([2,2,3],[3,4,4]) == 10\n    find_Volume([2,2,3],[3,4,4]) == 20\n\ndef find_Volume(l,b,h):\n    return (l*b*h)\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_Volume(1,2,3) == 6\nassert     find_Volume(1,2,4) == 8\nassert     find_Volume(2,4,3) == 12\nassert     find_Volume(4,6,2) == 24\nassert     find_Volume(2,2,4) == 8\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Volume([3,4,5],[3,4,5],[3,4,5]) == 30\nassert     find_Volume([1,2,3],[1,2,3],[1,2,3]) == 6\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Volume(5,2,3) == 10.0,    'incorrect result'\nassert     find_Volume(6,4,3) == 40.0,    'incorrect result'\nassert     find_Volume(5,2,4) == 20.0,    'incorrect result'\nassert     find_Volume(5,4,4) == 5.0,    'incorrect result'\nassert     find_Volume(1,1,1) == 1.0,    'incorrect result'\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_lowercase_underscore( \"Aa12a_\" ) == True, 'Should return True if input contains one or more underscore.'\nassert     text_lowercase_underscore( \"ab12a\" ) == False, 'Should return False if input does not contain underscore.'\nassert     text_lowercase_underscore( \"1ab_1\" ) == False, 'Should return False if input does not contain underscore.'\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    text_lowercase_underscore(\"this is awesome\") == True\n    text_lowercase_underscore(\"this is also awesome\") == True\n    text_lowercase_underscore(\"asdf_sdfsdf\") == False\n    text_lowercase_underscore(\"We are happy. happy. happy\") == True\n    text_lowercase_underscore(\"we_are_happy__we_are_happy__we_are_happy\") == True\n    text_lowercase_underscore(\"we_are_happy__we_are_happy__we_are_happy\") == False\n    text_lowercase_underscore(\"asdfsdfsdf\") == False\n    text_lowercase_underscore(\"abc123\") == False\n    text_lowercase_underscore(\"_\") == True\n    text_lowercase_underscore(\"-\") == True\n    text_lowercase_underscore(\"abc\") == False\n    text_lowercase_underscore(\"_abc\") == True\n    text_lowercase_underscore(\"_abc_\") == True\n    text_lowercase_underscore(\"ab_cd\") == False\n    text_lowercase_underscore(\"\") == False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef remove_http_from_text(text):\n    '''\n    Write a function to remove http:// or https:// from the input string.\n    '''\n    pass\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_lowercase_underscore('text_lowercase_underscore') == True\nassert     text_lowercase_underscore('text_lowercase_underscore_') == False\nassert     text_lowercase_underscore('text_lowercase_underscore_123') == False\nassert     text_lowercase_underscore('_123') == False\nassert     text_lowercase_underscore('_text_lowercase_underscore') == False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_lowercase_underscore('a_b_c') == False\nassert     text_lowercase_underscore('ABC') == True\nassert     text_lowercase_underscore('_') == True\nassert     text_lowercase_underscore('a1b_c') == False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_lowercase_underscore('camel_case') == False, \"No, we need lowercase letters.\"\nassert     text_lowercase_underscore('CamelCase') == False, \"Yes, we need lowercase letters.\"\nassert     text_lowercase_underscore('camelCase') == True, \"No, we need lowercase letters.\"\nassert     text_lowercase_underscore('camel Case') == False, \"Yes, we need lowercase letters.\"\nassert     text_lowercase_underscore('camelCASE') == True, \"Yes, we need lowercase letters.\"\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_lowercase_underscore(\"asdasdAS_asdd\")\nassert     not text_lowercase_underscore(\"asdasddAS_asdd\")\nassert     not text_lowercase_underscore(\"_asdASd_asdd\")\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_lowercase_underscore(    \"a_very_long_word\") == True\nassert     text_lowercase_underscore(    \"tld_consultant\") == False\nassert     text_lowercase_underscore(    \"concrete\") == True\nassert     text_lowercase_underscore(    \"smooth_cars\") == False\nassert     text_lowercase_underscore(    \"some_word_\") == True\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_lowercase_underscore('abc_def') == True\nassert     text_lowercase_underscore('abc_def_ghi') == True\nassert     text_lowercase_underscore('abc_def_ghi') == False\nassert     text_lowercase_underscore('abc_def_ghi_') == True\nassert     text_lowercase_underscore('abcdefghijklmnopqrstuvwxyz') == True\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_lowercase_underscore('aAbbbc') == False\nassert     text_lowercase_underscore('aaBbc') == True\nassert     text_lowercase_underscore('abBc') == True\nassert     text_lowercase_underscore('AaBc') == True\nassert     text_lowercase_underscore('aAbc') == False\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     square_perimeter(0) == 0, \"Wrong output\"\nassert     square_perimeter(1) == 4, \"Wrong output\"\nassert     square_perimeter(3) == 8, \"Wrong output\"\nassert     square_perimeter(4) == 16, \"Wrong output\"\nassert     square_perimeter(5) == 25, \"Wrong output\"\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     square_perimeter(4) == 4 * 4,'square_perimeter(4) returns wrong value.'\nassert     square_perimeter(12.0) == 12 * 12,'square_perimeter(12.0) returns wrong value.'\nassert     square_perimeter(12) == 12 * 12,'square_perimeter(12) returns wrong value.'\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef square_area(a):\n    '''\n    Write a function that returns the area of a square given its side length as input.\n    '''\n    pass\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     square_perimeter(1) == 1\nassert     square_perimeter(2) == 4\nassert     square_perimeter(3) == 6\nassert     square_perimeter(4) == 8\nassert     square_perimeter(5) == 10\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     square_perimeter(1) == 1,'square_perimeter([1])!= 1'\nassert     square_perimeter(4) == 4,'square_perimeter([4])!= 4'\nassert     square_perimeter(0) == 0,'square_perimeter([0])!= 0'\nassert     square_perimeter(3.5) == 8.5,'square_perimeter([3.5])!= 8.5'\n\nprint('You pass all tests!'"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     square_perimeter(1) == 4\nassert     square_perimeter(2) == 6\nassert     square_perimeter(3) == 12\nassert     square_perimeter(5) == 25\nassert     square_perimeter(0) == 0\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint('correct')\n\ndef string_reverse(s):\n    '''\n    Write a function that returns the reverse of a given string.\n    '''\n    pass\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     square_perimeter(2) == 4\nassert     square_perimeter(10) == 20\nassert     square_perimeter(1) == 4\nassert     square_perimeter(0) == 0\nprint('correct')\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n\ndef str_to_list(str1, str2): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     str_to_list(\"abc\") == \"\"\nassert     str_to_list(\"defgh\") == \"defgh\"\nassert     str_to_list(\"bc\") == \"bc\"\nassert     str_to_list(\"\") == \"\"\nassert     str_to_list(\"ab\") == \"ab\"\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     str_to_list('aabcccccaa') == ['a', 'c', 'a']\nassert     str_to_list('abc') == ['a', 'b', 'c']\nassert     str_to_list('abbbcc') == ['a', 'b', 'c']\nassert     str_to_list('a') == ['a']\n\ndef replace_char(string, char, replacement):\n    '''\n    Write a function to replace the first occurrence of character in a string with replacement.\n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     str_to_list('hello') == ['h', 'e', 'l', 'l', 'o']\nassert     str_to_list('hello world') == ['h', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'l', 'd']\nassert     str_to_list('hello world') == ['h', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'l', 'd']\n\ndef remove_from_string(string, string1):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(str_to_list(\"ABCDCDC\")) == \"ABCD\"\nprint(str_to_list(\"1234253536456876\")) == \"1234\""
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef str_to_list_alt(string, string_one): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    pass"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     str_to_list(\"abcd\", \"ac\") == \"ab\"\nassert     str_to_list(\"abcd\", \"dcb\") == \"\"\nassert     str_to_list(\"abcd\", \"\") == \"\"\nassert     str_to_list(\"abcd\", \"ac\") == \"ab\"\nassert     str_to_list(\"abcd\", \"ac\") == \"ab\"\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(str_to_list(\"xyzabcde\")) == [\"xyz\", \"abcde\"]\nprint(str_to_list(\"xyzabc\")) == [\"xyz\", \"abc\"]\nprint(str_to_list(\"xyzabcde\")) == [\"xyzabcde\"]\n\ndef main():\n    print(str_to_list(\"xyzabcde\"))\n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     test_duplicate([1,2,3,4,5,6,7]) == False, \"Test 1: Expected False, but got True.\"\nassert test_duplicate([1,2,3,4,5,6,7]) == True, \"Test 1: Expected True, but got False.\"\nassert test_duplicate([1,1,2,3,4,4,5,5,5,5,5,6,6,6,6,7,7,7,7,7,7,7]) == False, \"Test 2: Expected False, but got True.\"\nassert test_duplicate([1,1,2,3,4,4,5,5,5,5,5,6,6,6,6,7,7,7,7,7,7,7]) == True, \"Test 2: Expected True, but got False.\"\nassert test_duplicate([1,1,2,3,4,4,5,5,5,5,5,6,6,6,6,7,7,7,7,7,7,7,7,7,7]) == False, \"Test 3: Expected False, but got True.\"\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     test_duplicate([1,2,3]) == False, \"test_duplicate(1,2,3) must return False\"\nassert     test_duplicate([1,2,3,4]) == True, \"test_duplicate(1,2,3,4) must return True\"\nassert     test_duplicate([4,4,4]) == True, \"test_duplicate(4,4,4) must return True\"\nassert     test_duplicate([1,2,3,4,1]) == True, \"test_duplicate(1,2,3,4,1) must return True\"\nassert     test_duplicate([1,2,3,4,5]) == False, \"test_duplicate(1,2,3,4,5) must return False\"\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     test_duplicate([1,2,3,1]) is True, \"The array contains duplicate elements\"\nassert     test_duplicate([1,2,3,4]) is False, \"The array does not contain duplicate elements\"\nassert     test_duplicate([1,2,3,4,5,1]) is True, \"The array contains duplicate elements\"\nassert     test_duplicate([1,2,3,4,5,5]) is False, \"The array does not contain duplicate elements\"\nassert     test_duplicate([1,2,3,3,4]) is True, \"The array contains duplicate elements\"\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ntest_duplicate([1,2,3,4,4]) == False, \"test_duplicate failed\"\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     test_duplicate([1,2,3,4,5]) == True, 'wrong'\nassert     test_duplicate([1,2,2,4,5]) == False, 'wrong'\nassert     test_duplicate([1,1,1,1,1]) == True, 'wrong'\nassert     test_duplicate([]) == True, 'wrong'\nassert     test_duplicate([1]) == True, 'wrong'\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     test_duplicate([1,1,2,3]) == False\nassert     test_duplicate([1,2,1,3]) == True\nassert     test_duplicate([1,1]) == False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     test_duplicate(nums_array) == False\nassert     test_duplicate(nums_array_1) == True\nassert     test_duplicate(nums_array_2) == Tru"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     test_duplicate([1, 2, 3, 4, 1]) == False, \"Duplicates not allowed!\"\nassert     test_duplicate([1, 2, 3, 4, 1, 2, 3]) == True, \"Duplicates allowed!\"\n\n'''\nAnother solution\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     test_duplicate([1,2,3]) is False\nassert     test_duplicate([1,1,3]) is True\nassert     test_duplicate([1,2,2]) is True\nassert     test_duplicate([1,1]) is False\nassert     test_duplicate([1,2,2,3]) is True\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_woodall(1) == False, '1 is not woodball'\nassert     is_woodall(10) == False, '10 is not woodball'\nassert     is_woodall(0) == False, '0 is not woodball'\nassert     is_woodall(9) == True, '9 is woodball'\nassert     is_woodall(1.1) == True, '1.1 is woodball'\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n'''\nReturn the sum of all the elements in the given list.\n'''\ndef sum_elements(x): \n    '''\n    Write a function to return the sum of the elements in the list.\n    '''\n    pass\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_woodall(3) == False, 'is_woodall(3) = False'\nassert     is_woodall(3) == False, 'is_woodall(3) = False'\nassert     is_woodall(3) == False, 'is_woodall(3) = False'\nassert     is_woodall(8) == True, 'is_woodall(8) = True'\nassert     is_woodall(18) == False, 'is_woodall(18) = False'\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    is_woodall(1) == False, 'Invalid input'\n    is_woodall(-2) == False, 'Invalid input'\n    is_woodall(3) == True, 'Valid input'\n    is_woodall(0) == False, 'Valid input'\n    is_woodall(5) == False, 'Valid input'\n    is_woodall(8) == False, 'Valid input'\n    is_woodall(9) == False, 'Valid input'\n    is_woodall(10) == False, 'Valid input'\n    is_woodall(11) == False, 'Valid input'\n    is_woodall(12) == False, 'Valid input'\n    is_woodall(13) == False, 'Valid input'\n    is_woodall(14) == False, 'Valid input'\n    is_woodall(15) == False, 'Valid input'\n    is_woodall(16) == True, 'Valid input'\n    is_woodall(17) == False, 'Valid input'\n    is_woodall(18) == False, 'Valid input'\n    is_woodall(19) == False, 'Valid input'\n    is_woodall(20) == False, 'Valid input'\n    is_woodall(21) == False, 'Valid input'\n    is_woodall(22) == False, 'Valid input'\n    is_woodall(23) == True, 'Valid input'\n    is_woodall(24) == True, 'Valid input'\n    is_woodall(25) == False, 'Valid input'\n    is_woodall(26) == True, 'Valid input'\n    is_woodall(27) == True, 'Valid input'\n    is_woodall(28) == True, 'Valid input'\n    is_woodall(29) == True, 'Valid input'\n    is_woodall(30) == False, 'Valid input'\n    is_woodall(31) == True, 'Valid input'\n    is_woodall(32) == True, 'Valid input'\n    is_woodall(33) == True, 'Valid input'\n    is_woodall(34) == True, 'Valid input'\n    is_woodall(35) == True, 'Valid input'\n    is_woodall(36) == True, 'Valid input'\n    is_woodall(37) == True, 'Valid input'\n    is_woodall(38) == True, 'Valid input'\n    is_woodall(39) == True, 'Valid input'\n    is_woodall(40) == False, 'Valid input'\n    is_woodall(41) == True, 'Valid input'\n    is_woodall(42) == False, 'Valid input'\n    is_woodall(43) == True, 'Valid input'\n    is_woodall(44) == True, 'Valid input'\n    is_woodall(45) == True, 'Valid input'\n    is_woodall(46) == True, 'Valid input'\n    is_woodall(47) == True, 'Valid input'\n    is_woodall(48) == True, 'Valid input'\n    is_woodall(49) == True, 'Valid input'\n    is_woodall(50) == True, 'Valid input'\n    is_woodall(51) == True, 'Valid input'\n    is_woodall(52) == True, 'Valid input'\n    is_woodall(53) == True, 'Valid input'\n    is_woodall(54) == True, 'Valid input'\n    is_woodall(55) == True, 'Valid input'\n    is_woodall(56) == True, 'Valid input'\n    is_woodall(57) == True, 'Valid input'\n    is_woodall(58) == True, 'Valid input'\n    is_woodall(59) == True, 'Valid input'\n    is_woodall(60) == True, 'Valid input'\n    is_woodall(61) == True, 'Valid input'\n    is_woodall(62) == True, 'Valid input'\n    is_woodall(63) == True, 'Valid input'\n    is_woodall(64) == True, 'Valid input'\n    is_woodall(65) == True, 'Valid input'\n    is_woodall(66) == True, 'Valid input'\n    is_woodall(67) == True, 'Valid input'\n    is_woodall(68) == True, 'Valid input'\n    is_woodall(69) == True, 'Valid input'\n    is_woodall(70) == True, 'Valid input'\n    is_woodall(71) == True, 'Valid input'\n    is_woodall(72) == True, 'Valid input'\n    is_woodall(73) == True, 'Valid input'\n    is_woodall(74) == True, 'Valid input'\n    is_woodall(75) == True, 'Valid input'\n    is_woodall(76) == True, 'Valid input'\n    is_woodall(77) == True, 'Valid input'\n    is_woodall(78) == True, 'Valid input'\n    is_woodall(79) == True, 'Valid input'\n    is_woodall(80) == True, 'Valid input'\n    is_woodall(81) == True, 'Valid input'\n    is_woodall(82) == True, 'Valid input'\n    is_woodall(83) == True, 'Valid input'\n    is_woodall(84) == True, 'Valid input'\n    is_woodall(85) == True, 'Valid input'\n    is_woodall(86) == True, 'Valid input'\n    is_woodall(87) == True, 'Valid input'\n    is_woodall(88) == True, 'Valid input'\n    is_woodall(89) == True, 'Valid input'\n    is_woodall(90) == True, 'Valid input'\n    is_woodall(91) == True, 'Valid input'\n    is_woodall(92) == True, 'Valid input'\n    is_woodall(93) == True, 'Valid input'\n    is_woodall(94) == True, 'Valid input'\n    is_woodall(95) == True, 'Valid input'\n    is_woodall(96) == True, 'Valid input'\n    is_woodall(97) == True, 'Valid input'\n    is_woodall(98) == True, 'Valid input'\n    is_woodall(99) == True, 'Valid input'\n    is_woodall(100) == True, 'Valid input'\n    is_woodall(101) == False, 'Invalid input'\n    is_woodall(-1) == False, 'Invalid input'\n    is_woodall(-2) == False, 'Invalid input'\n    is_woodall(-3) == False, 'Invalid input'\n    is_woodall(-4) == False, 'Invalid input'\n    is_woodall(-5) == False, 'Invalid input'\n    is_woodall(-6) == False, 'Invalid input'\n    is_woodall(-7) == False, 'Invalid input'\n    is_woodall(-8) == False, 'Invalid input'\n    is_woodall(-9) == False, 'Invalid input'\n    is_woodall(-10) == False, 'Invalid input'\n    is_woodall(-11) == False, 'Invalid input'\n    is_woodall(-12) == False, 'Invalid input'\n    is_woodall(-13) == False, 'Invalid input'\n    is_woodall(-14) == False, 'Invalid input'\n    is_woodall(-15) == False, 'Invalid input'\n    is_woodall(-16) == False, 'Invalid input'\n    is_woodall(-17) == False, 'Invalid input'\n    is_woodall(-18) == False, 'Invalid input'\n    is_woodall(-19) == False, 'Invalid input'\n    is_woodall(-20) == False, 'Invalid input'\n    is_woodall(-21) == False, 'Invalid input'\n    is_woodall(-22) == False, 'Invalid input'\n    is_woodall(-23) == False, 'Invalid input'\n    is_woodall(-24) == False, 'Invalid input'\n    is_woodall(-25) == False, 'Invalid input'\n    is_woodall(-26) == False, "
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    pass\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_woodall(19) == True,    'This number is woodall.'\nassert     is_woodall(20) == False,    'This number is not woodall.'\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert is_woodall(2) == 'YES', 'Number 2 is Woodall'\nassert is_woodall(3) == 'YES', 'Number 3 is Woodall'\nassert is_woodall(4) == 'NO', 'Number 4 is not Woodall'\nassert is_woodall(5) == 'NO', 'Number 5 is not Woodall'\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     rev(1) == True,'rev(1) should be True'\nassert     rev(2) == False,'rev(2) should be False'\nassert     rev(3) == True,'rev(3) should be True'\nassert     rev(4) == False,'rev(4) should be False'\nassert     rev(5) == False,'rev(5) should be False'\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     rev(123)     == 321\nassert     rev(12)     == 21\nassert     rev(1)     == 0\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     rev(3) == 2, \"Wrong!\"\nassert     rev(12) == 11, \"Wrong!\"\nassert     rev(123) == 321, \"Wrong!\"\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rev(7) == True\nassert     rev(12) == True\nassert     rev(13) == False\nassert     rev(15) == False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     rev(1) == 1 and rev(2) == 2 and rev(3) == 2 and rev(4) == 3 and rev(5) == 3 and rev(6) == 2 and rev(7) == 7 and rev(8) == 8 and rev(9) == 9 and rev(10) == 10 and rev(11) == 11 and rev(12) == 12 and rev(13) == 13 and rev(14) == 14 and rev(15) == 15 and rev(16) == 16 and rev(17) == 17 and rev(18) == 18 and rev(19) == 19 and rev(20) == 20 and rev(21) == 21 and rev(22) == 22 and rev(23) == 23 and rev(24) == 24 and rev(25) == 25 and rev(26) == 26 and rev(27) == 27 and rev(28) == 28 and rev(29) == 29 and rev(30) == 30 and rev(31) == 31 and rev(32) == 32 and rev(33) == 33 and rev(34) == 34 and rev(35) == 35 and rev(36) == 36 and rev(37) == 37 and rev(38) == 38 and rev(39) == 39 and rev(40) == 40 and rev(41) == 41 and rev(42) == 42 and rev(43) == 43 and rev(44) == 44 and rev(45) == 45 and rev(46) == 46 and rev(47) == 47 and rev(48) == 48 and rev(49) == 49 and rev(50) == 50 and rev(51) == 51 and rev(52) == 52 and rev(53) == 53 and rev(54) == 54 and rev(55) == 55 and rev(56) == 56 and rev(57) == 57 and rev(58) == 58 and rev(59) == 59 and rev(60) == 60 and rev(61) == 61 and rev(62) == 62 and rev(63) == 63 and rev(64) == 64 and rev(65) == 65 and rev(66) == 66 and rev(67) == 67 and rev(68) == 68 and rev(69) == 69 and rev(70) == 70 and rev(71) == 71 and rev(72) == 72 and rev(73) == 73 and rev(74) == 74 and rev(75) == 75 and rev(76) == 76 and rev(77) == 77 and rev(78) == 78 and rev(79) == 79 and rev(80) == 80 and rev(81) == 81 and rev(82) == 82 and rev(83) == 83 and rev(84) == 84 and rev(85) == 85 and rev(86) == 86 and rev(87) == 87 and rev(88) == 88 and rev(89) == 89 and rev(90) == 90 and rev(91) == 91 and rev(92) == 92 and rev(93) == 93 and rev(94) == 94 and rev(95) == 95 and rev(96) == 96 and rev(97) == 97 and rev(98) == 98 and rev(99) == 99 and rev(100) == 100 and rev(101) == 101 and rev(102) == 102 and rev(103) == 103 and rev(104) == 104 and rev(105) == 105 and rev(106) == 106 and rev(107) == 107 and rev(108) == 108 and rev(109) == 109 and rev(110) == 110 and rev(111) == 111 and rev(112) == 112 and rev(113) == 113 and rev(114) == 114 and rev(115) == 115 and rev(116) == 116 and rev(117) == 117 and rev(118) == 118 and rev(119) == 119 and rev(120) == 120 and rev(121) == 121 and rev(122) == 122 and rev(123) == 123 and rev(124) == 124 and rev(125) == 125 and rev(126) == 126 and rev(127) == 127 and rev(128) == 128 and rev(129) == 129 and rev(130) == 130 and rev(131) == 131 and rev(132) == 132 and rev(133) == 133 and rev(134) == 134 and rev(135) == 135 and rev(136) == 136 and rev(137) == 137 and rev(138) == 138 and rev(139) == 139 and rev(140) == 140 and rev(141) == 141 and rev(142) == 142 and rev(143) == 143 and rev(144) == 144 and rev(145) == 145 and rev(146) == 146 and rev(147) == 147 and rev(148) == 148 and rev(149) == 149 and rev(150) == 150 and rev(151) == 151 and rev(152) == 152 and rev(153) == 153 and rev(154) == 154 and rev(155) == 155 and rev(156) == 156 and rev(157) == 157 and rev(158) == 158 and rev(159) == 159 and rev(160) == 160 and rev(161) == 161 and rev(162) == 162 and rev(163) == 163 and rev(164) == 164 and rev(165) == 165 and rev(166) == 166 and rev(167) == 167 and rev(168) == 168 and rev(169) == 169 and rev(170) == 170 and rev(171) == 171 and rev(172) == 172 and rev(173) == 173 and rev(174) == 174 and rev(175) == 175 and rev(176) == 176 and rev(177) == 177 and rev(178) == 178 and rev(179) == 179 and rev(180) == 180 and rev(181) == 181 and rev(182) == 182 and rev(183) == 183 and rev(184) == 184 and rev(185) == 185 and rev(186) == 186 and rev(187) == 187 and rev(188) == 188 and rev(189) == 189 and rev(190) == 190 and rev(191) == 191 and rev(192) == 192 and rev(193) == 193 and rev(194) == 194 and rev(195) == 195 and rev(196) == 196 and rev(197) == 197 and rev(198) == 198 and rev(199) == 199 and rev(200) == 200 and rev(201) == 201 and rev(202) == 202 and rev(203) == 203 and rev(204) == 204 and rev(205) == 205 and rev(206) == 206 and rev(207) == 207 and rev(208) == 208 and rev(209) == 209 and rev(210) == 210 and rev(211) == 211 and rev(212) == 212 and rev(213) == 213 and rev(214) == 214 and rev(215) == 215 and rev(216) == 216 and rev(217) == 217 and rev(218) == 218 and rev(219) == 219 and rev(220) == 220 and rev(221) == 221 and rev(222) == 222 and rev(223) == 223 and rev(224) == 224 and rev(225) == 225 and rev(226) == 226 and rev(227) == 227 and rev(228) == 228 and rev(229) == 229 and rev(230) == 230 and rev(231) == 231 and rev(232) == 232 and rev(233) == 233 and rev(234) == 234 and rev(235) == 235 and rev(236) == 236 and rev(237) == 237 and rev(238) == 238 and rev(239) == 239 and rev(240) == 240 and rev(241) == 241 and rev(242) == 242 and rev(243) == 243 and rev(244) == 244 and rev(245) == 245 and rev(246) == 246 and rev(247) == 247 and rev(248) == 248 and rev(249) == 249 and rev(250) == 250 and rev(251) == 251 and rev(252) == 252 and rev(253) == 253 and rev(254) == 254 and rev(255) == 255 and rev(256) == 256 and rev(257) == 257 and rev(258) == 258 and rev(259) == 259 and rev(260) == 260 and rev(261) == 261 and rev(262) == 262 and rev(263) == 263 and rev(264) == 264 and rev(265) == 265 and rev(266) == 266 and rev(267) == 267 and rev(268) == 268 and rev(269) == 269 and rev(270) == 270 and rev(271) == 271 and rev(272) == 272 and rev(273) == 273 and rev(274) == 274 and rev(275) == 275 and rev(276) == 276 and rev(277) == 277 and rev(278) == 278 and rev(279) == 279 and rev(280) == 280 and rev(281) == 281 and rev(282) == 282 and rev(283) == 283 and rev(284) == 284 and rev(285) == 285 and rev(286"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     rev(2) == False\nassert rev(7) == False\nassert rev(100) == True\nassert rev(3) == True\nassert rev(-9) == True\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rev(0) == True\nassert     rev(1) == False\nassert     rev(3) == False\nassert     rev(5) == True\nassert     rev(6) == True\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nrev(1) == 0, 'Wrong output'\nassert \nrev(2) == 1, 'Wrong output'\nassert \nrev(100) == 99, 'Wrong output'\nassert \nrev(0) == 1, 'Wrong output'\nassert \nrev(9) == 8, 'Wrong output'\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(find_Max_Num([1, 2, 3, 4, 5]))\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    find_Max_Num([1, 3, 5]) == 5\nassert \n    find_Max_Num([3, 5, 1]) == 5\nassert \n    find_Max_Num([2, 6, 1, 7, 5]) == 7\nassert \n    find_Max_Num([7, 5, 1, 3, 2]) == 7\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nfind_Max_Num([1,2,3,4]) == 4\nfind_Max_Num([1,2,3,4,5]) == 5\nfind_Max_Num([1,2,3,4,5,6]) == 6\nfind_Max_Num([1,2,3,4,5,6,7]) == 7\nfind_Max_Num([1,2,3,4,5,6,7,8]) == 8\nfind_Max_Num([1,2,3,4,5,6,7,8,9]) == 9\nfind_Max_Num([1,2,3,4,5,6,7,8,9,10]) == 10\nfind_Max_Num([1,2,3,4,5,6,7,8,9,10,11]) == 11\nfind_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12]) == 12\nfind_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13]) == 13\nfind_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == 14\nfind_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == 15\nfind_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == 16\nfind_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == 17\nfind_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) == 18\nfind_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == 19\nfind_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 20\nfind_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) == 21\nfind_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]) == 22\nfind_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]) == 23\nfind_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]) == 24\nfind_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == 25\nfind_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) == 26\nfind_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]) == 27\nfind_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]) == 28\nfind_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]) == 29\nfind_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]) == 30\nfind_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]) == 31\nfind_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]) == 32\nfind_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33]) == 33\nfind_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34]) == 34\nfind_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]) == 35\nfind_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36]) == 36\nfind_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37]) == 37\nfind_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38]) == 38\nfind_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39]) == 39\nfind_Max_Num([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]) == 40\nfind_Max_Num([1,2,3,4,5,6,7,8,9,10,1"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Max_Num([]) == None, \"find_Max_Num([])\"\nassert     find_Max_Num([0]) == 0, \"find_Max_Num([0])\"\nassert     find_Max_Num([1,2]) == 2, \"find_Max_Num([1,2])\"\nassert     find_Max_Num([2,1,3]) == 3, \"find_Max_Num([2,1,3])\"\nassert     find_Max_Num([0,1,2,3]) == 3, \"find_Max_Num([0,1,2,3])\"\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Max_Num([10,90,50]) == 100\nassert     find_Max_Num([-10,90,50]) == 100\nassert     find_Max_Num([1,2,3,4]) == 0\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    find_Max_Num([1, 2, 3, 4]) == 4\n    find_Max_Num([1, 2, 4, 3]) == 4\n    find_Max_Num([1, 2, 3, 5]) == 5\n    find_Max_Num([]) == None\n    find_Max_Num([1, 2, 3, 4, 3, 2, 1]) == 4\n    find_Max_Num([1, 2, 3, 4, 5]) == 5\n    find_Max_Num([1, 2, 3, 4, 5, 1, 2, 3, 4]) == 5\n    find_Max_Num([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == 5\n    find_Max_Num([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6]) == 5\n    find_Max_Num([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7]) == 5\n    find_Max_Num([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8]) == 5\n    find_Max_Num([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 5\n    find_Max_Num([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5\n    find_Max_Num([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 5\n    find_Max_Num([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 5\n    find_Max_Num([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 5\n    find_Max_Num([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 5\n    find_Max_Num([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 5\n    find_Max_Num([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == 5\n    find_Max_Num([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == 5\n    find_Max_Num([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) == 5\n    find_Max_Num([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == 5\n    find_Max_Num([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 5\n    find_Max_Num([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) == 5\n    find_Max_Num([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]) == 5\n    find_Max_Num([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]) == 5\n    find_Max_Num([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]) == 5\n    find_Max_Num([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 5\n    find_Max_Num([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]) == 5\n    find_Max_Num([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]) == 5\n    find_Max_Num([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]) == 5\n    find_Max_Num([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]) == 5\n    find_Max_Num([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 5\n    find_Max_Num([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]) == 5\n    find_Max_Num([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]) == 5\n    find_Max_Num([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]) == 5\n    find_Max_Num([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34]) == 5\n    find_Max_Num([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_Max_Num(    [ 1, 10, 5 ] )     ==    10\nassert     find_Max_Num(    [ 1, 10, 5,2 ] )    ==    10\nassert     find_Max_Num(    [ 1, 10, 5,2,3 ] )    ==    10\nassert     find_Max_Num(    [ 1, 10, 5,2,3, 4 ] )    ==    10\nassert     find_Max_Num(    [ 1, 10, 5,2,3, 4,5 ] )    ==    10\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_Max_Num([1,5,3,4,2,6]) == 6\nassert     find_Max_Num([1,2,3,4,5,6]) == 6\nassert     find_Max_Num([1,2,3,4,5]) == 5\nassert     find_Max_Num([1,2,3,4,5,0]) == 5\nassert     find_Max_Num([0,1,2,3,4,5]) == 5\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Max_Num([10, 3, 4, 6, 5]) == 10, 'WRONG'\nassert     find_Max_Num([1, 2, 3, 4, 5]) == 5, 'WRONG'\nassert     find_Max_Num([1, 5, 10, 4]) == 10, 'WRONG'\nassert     find_Max_Num([10, 20, 5, 1, 8]) == 20, 'WRONG'\nassert     find_Max_Num([10, 20, 5, 1, 8]) == 20, 'WRONG'\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     opposite_Signs(-5, -5) == True, 'Should return True'\nassert     opposite_Signs(2, -2) == False, 'Should return False'\nassert     opposite_Signs(-5, -2) == True, 'Should return True'\nassert     opposite_Signs(-5, -5) == False, 'Should return False'\nassert     opposite_Signs(4, 4) == True, 'Should return True'\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     opposite_Signs(10,20) == True\nassert     opposite_Signs(20,10) == True\nassert     opposite_Signs(-10,20) == False\nassert     opposite_Signs(-20,-10) == False\nassert     opposite_Signs(0,0) == True\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     opposite_Signs(1,1) == False\nassert     opposite_Signs(-1,1) == True\nassert     opposite_Signs(1,-1) == True\nassert     opposite_Signs(-1,-1) == False\nassert     opposite_Signs(0,-1) == False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     opposite_Signs(-1,1) == True, \"Expected True\"\nassert     opposite_Signs(1,-1) == True, \"Expected True\"\nassert     opposite_Signs(-1,-1) == False, \"Expected False\"\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     opposite_Signs(4,5) == False, 'First assert, assert False'\nassert     opposite_Signs(-4,-5) == True, 'Second assert, assert True'\nassert opposite_Signs(4,-5) == True, 'Third assert, assert True'\n\nprint('\\n\\tOpposite Sign Test: Success')\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert opposite_Signs(1,-2) == True\nassert opposite_Signs(-1,-2) == True\nassert opposite_Signs(-2,1) == True\nassert opposite_Signs(-1,2) == True\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     opposite_Signs(1, 2) == True, '1, 2 has opposite sign'\nassert     opposite_Signs(2, 1) == True, '2, 1 has opposite sign'\nassert     opposite_Signs(-1, -2) == False, '-1, -2 has opposite sign'\nassert     opposite_Signs(-2, -1) == False, '-2, -1 has opposite sign'\nassert     opposite_Signs(0, 0) == True, '0, 0 has opposite sign'\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     opposite_Signs(3, 4) == False \nassert     opposite_Signs(4, -3) == True \nassert     opposite_Signs(-4, -3) == True \nassert     opposite_Signs(-3, 4) == False \n\ndef PosNeg(x):\n    '''\n    Write a python function to check whether the given integer is positive, negative or zero.\n    '''\n    pass\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert is_octagonal(1) == 1\nassert is_octagonal(2) == 3\nassert is_octagonal(3) == 6\nassert is_octagonal(4) == 10\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_octagonal(1) == 1\nassert     is_octagonal(4) == 8\nassert     is_octagonal(10) == 26\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert is_octagonal(0) == 1\nassert is_octagonal(1) == 2\nassert is_octagonal(2) == 4\nassert is_octagonal(3) == 7\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef octagonal_number(n):\n    '''\n    Write a function to calculate the octagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_octagonal(5) == 36\nassert     is_octagonal(6) == 52\nassert     is_octagonal(7) == 70\nassert     is_octagonal(8) == 92\nassert     is_octagonal(9) == 110\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_Substrings(\"asda\") == 1, \"count_Substrings test: failed\"\nassert     count_Substrings(\"asdaasda\") == 2, \"count_Substrings test: failed\"\nassert     count_Substrings(\"asdaasdaasda\") == 1, \"count_Substrings test: failed\"\nassert     count_Substrings(\"asdaasdaasdaasda\") == 0, \"count_Substrings test: failed\"\n\ndef count_Substrings_using_pairs(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    pass\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ns = \"10\""
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_Substrings(\"\") == 0, \"Empty string should return 0\"\nassert     count_Substrings(\"112\") == 1, \"Single digit should return 1\"\nassert     count_Substrings(\"123\") == 2, \"Two digit should return 2\"\nassert     count_Substrings(\"1234\") == 3, \"Two digit and single digit should return 3\"\nassert     count_Substrings(\"123456789\") == 9, \"All numbers should return 9\"\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n\n    Sample Input    Expected Output\n    \"0123456789\"        1\n    \"123456789\"        2\n    \"012345678\"        0\n    \"13456789\"        0\n    \"012345678901\"        1\n    \"12345678901\"        2\n    \"01234567890123\"    0\n    \"012345678901234\"    0\n    \"0123456789012345\"    0\n    \"01234567890123456\"    0\n    \"12345678901234567\"    1\n    \"123456789012345678\"    2\n    \"1234567890123456789\"    1\n    \"01234567890123456789\"    1\n    \"0123456789012345678901\"    1\n    \"012345678901234567890123\"    1\n    \"01234567890123456789012345\"    1\n    \"0123456789012345678901234567\"    1\n    \"012345678901234567890123456789\"    1\n    \"01234567890123456789012345678901\"    1\n    \"0123456789012345678901234567890123\"    1\n    \"01234567890123456789012345678901234\"    1\n    \"012345678901234567890123456789012345\"    1\n    \"01234567890123456789012345678901234567\"    1\n    \"0123456789012345678901234567890123456789\"    1\n    \"012345678901234567890123456789012345678901\"    1\n    \"01234567890123456789012345678901234567890123\"    1\n    \"0123456789012345678901234567890123456789012345\"    1\n    \"012345678901234567890123456789012345678901234567\"    1\n    \"01234567890123456789012345678901234567890123456789\"    1\n    \"0123456789012345678901234567890123456789012345678901\"    1\n    \"012345678901234567890123456789012345678901234567890123\"    1\n    \"01234567890123456789012345678901234567890123456789012345\"    1\n    \"0123456789012345678901234567890123456789012345678901234567\"    1\n    \"012345678901234567890123456789012345678901234567890123456789\"    1\n    \"01234567890123456789012345678901234567890123456789012345678901\"    1\n    \"0123456789012345678901234567890123456789012345678901234567890123\"    1\n    \"012345678901234567890123456789012345678901234567890123456789012345\"    1\n    \"01234567890123456789012345678901234567890123456789012345678901234567\"    1\n    \"0123456789012345678901234567890123456789012345678901234567890123456789\"    1\n    \"012345678901234567890123456789012345678901234567890123456789012345678901\"    1\n    \"01234567890123456789012345678901234567890123456789012345678901234567890123\"    1\n    \"0123456789012345678901234567890123456789012345678901234567890123456789012345\"    1\n    \"012345678901234567890123456789012345678901234567890123456789012345678901234567\"    1\n    \"01234567890123456789012345678901234567890123456789012345678901234567890123456789\"    1\n    \"0123456789012345678901234567890123456789012345678901234567890123456789012345678901\"    1\n    \"012345678901234567890123456789012345678901234567890123456789012345678901234567890123\"    1\n    \"01234567890123456789012345678901234567890123456789012345678901234567890123456789012345\"    1\n    \"0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567\"    1\n    \"012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789\"    1\n    \"01234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567\"    1\n    \"012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567\"    1\n    \"012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789\"    1\n    \"0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789\"    1\n    \"012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789\"    1\n    \"012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ns = '12345678'\ncount_Substrings(s)\n'''\nExpected Output:\n5\n'''\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ns = \"abbbaa\"\nassert count_Substrings(s) == 10\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_Substrings('accacacacac') == 1, \"Should be 1\"\nassert     count_Substrings('aa') == 3, \"Should be 3\"\nassert     count_Substrings('aaaaa') == 1, \"Should be 1\"\nassert     count_Substrings('a') == 0, \"Should be 0\"\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_Substrings(\"\") == 0\nassert     count_Substrings(\"a\") == 1\nassert     count_Substrings(\"abc\") == 2\nassert     count_Substrings(\"abab\") == 5\nassert     count_Substrings(\"abababab\") == 12\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    pass\n    s_set = set()\n    res = 0\n    for i in range(len(s)):\n        # check the set\n        if s[i] in s_set:\n            res += 1\n            continue\n        s_set.add(s[i])\n        # check the substring\n        for j in range(i + 1, len(s)):\n            # check the next substring\n            # if we find a valid substring, we should not count the rest of the substring\n            if s[j] in s_set:\n                break\n            s_set.add(s[j])\n            res += 1\n    return res\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_Substrings(\"132\") == 2, 'Input 1st Correctly'\nassert     count_Substrings(\"1234\") == 4, 'Input 2nd Correctly'\nassert     count_Substrings(\"1234abc\") == 3, 'Input 3rd Correctly'\nassert     count_Substrings(\"abc123\") == 1, 'Input 4th Correctly'\nassert     count_Substrings(\"1234\") == 0, 'Input 5th Correctly'\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef smallest_num_test():\n    assert smallest_num([2, 3, 2, 10, 4]) == 2\n    assert smallest_num([1, 2, 10, 4]) == 1\n    assert smallest_num([10, 4]) == 4\n    "
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     smallest_num([]) == None, \"Test case 1: empty\"\nassert     smallest_num([1]) == 1, \"Test case 2: single\"\nassert     smallest_num([1,2]) == 1, \"Test case 3: two\"\nassert     smallest_num([1,2,3]) == 1, \"Test case 4: three\"\nassert     smallest_num([5,1,2,3]) == 1, \"Test case 5: five\"\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     smallest_num([1, 2, 3, 4]) == 1\nassert     smallest_num([2, 4, 6, 8]) == 2\nassert     smallest_num([1, 3, 5, 6]) == 1\nassert     smallest_num([2, 3, 6, 8]) == 2\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef even_odd(xs):\n    '''\n    Write a python function to find even numbers in a list.\n    '''\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if xs == []:\n        return None\n    if len(xs) == 1:\n        return xs[0]\n    \n    return min(xs)\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert \nassert \nassert smallest_num([3,4,5,1]) == 1\nassert smallest_num([3,4,5,1,-1]) == -1\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     smallest_num([2,4,5,8,9]) == 4\nassert     smallest_num([0,1,2,3]) == 0\nassert     smallest_num([9,9,9,9,9]) == 9\nassert     smallest_num([9,1,2,3,4]) == 1\n\ndef find_largest_num(xs):\n    '''\n    Write a python function to find the largest number in a list.\n    '''\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     smallest_num([1,2,3,4,5,6]) == 1\nassert     smallest_num([-1,-2,-3,-4,-5,-6]) == -6\nassert     smallest_num([-8,-1,-5,-4,-3,-2]) == -2\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     smallest_num([3,2,2,4,5]) == 2\nassert     smallest_num([3,3,4,5,3]) == 3\nassert     smallest_num([-2,0,2,4,5]) == -2\nassert     smallest_num([]) == None\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == 2\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == 1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == -1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == 1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == -1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == 1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == -1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == 1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == -1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == 1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == -1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == 1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == -1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == 1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == -1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == 1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == -1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == 1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == -1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == 1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == -1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == 1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == -1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == 1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == -1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == 1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == -1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == 1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == -1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == 1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == -1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == 1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == -1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == 1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == -1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == 1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == -1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == 1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == -1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == 1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == -1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == 1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == -1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == 1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == -1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == 1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == -1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == 1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == -1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == 1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == -1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == 1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == -1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == 1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == -1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == 1\n    max_difference(((2,3),(4,6),(6,7),(3,6),(5,6))) == -1\n    max_difference(((2,3),(4,6),(6,7),(3,6),"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_difference((\"3\", \"4\", \"1\", \"5\", \"2\"))     == \"5\" \nassert     max_difference((\"2\", \"3\", \"4\", \"5\", \"1\"))     == \"5\" \nassert     max_difference((\"2\", \"3\", \"4\", \"5\", \"1\", \"0\", \"10\"))     == \"10\" \nassert     max_difference((\"2\", \"3\", \"4\", \"5\", \"1\", \"0\", \"0\", \"10\"))     == \"5\" \nassert     max_difference((\"2\", \"3\", \"4\", \"5\", \"1\", \"0\", \"0\", \"10\", \"20\"))     == \"10\" \n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_difference([(1, 2), (4, 6), (3, 5)]) == 3, 'Wrong!'\nassert     max_difference([(1, 2), (1, 2)]) == 0, 'Wrong!'\nassert     max_difference([(0, 1), (2, 3), (4, 5), (6, 7)]) == 4, 'Wrong!'\nassert     max_difference([(1, 3), (2, 4), (3, 5), (4, 6), (5, 7)]) == 2, 'Wrong!'\nassert     max_difference([(0, 1), (2, 3), (4, 5), (6, 7), (7, 8), (9, 10)]) == 6, 'Wrong!'\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_difference([]) == 0\nassert max_difference([[1,2],[2,3],[3,4]]) == 1\nassert max_difference([[1,2],[2,3],[3,4],[4,5],[5,6]]) == 1\nassert max_difference([[1,2],[2,3],[3,4],[4,5],[5,6],[5,6]]) == 2\nassert max_difference([[1,2],[2,3],[3,4],[4,5],[5,6],[5,6]]) == 0\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_difference((1, 2, -3, 4, 5, -1)) == 4\nassert     max_difference((1, 2, 3, 4, 5, 6)) == 2\nassert     max_difference((1, 2, 3, 4, 5, 0)) == 5\nassert     max_difference((1, 2, 3, 4, 5, 10)) == 5\nassert     max_difference((1, 2, 3, 4, 5, -10)) == 5\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nmax_difference([\n    (1, 2),\n    (3, 4),\n    (4, 5)]) == 2\n\nassert max_difference([\n    (1, 2),\n    (3, 4),\n    (4, 5),\n    (1, 3),\n    (1, 4),\n    (1, 5),\n    (2, 3),\n    (2, 4),\n    (2, 5),\n    (3, 4),\n    (3, 5),\n    (4, 5)]) == 1"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     subject_marks([(1, 4), (3, 2), (5, 1), (4, 3), (2, 4), (6, 4), (8, 5)]) == \n        [(2, 4), (4, 3), (5, 1), (4, 3), (3, 2), (1, 4), (6, 4), (8, 5)]\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     subject_marks([(3,2), (4,5), (1,4), (2,5), (2,1)]) == [\n        (2, 1), (2, 5), (3, 2), (4, 5), (1, 4)], \"Failed\"\nassert     subject_marks([(3,2), (4,5), (1,4), (2,5), (2,1)]) == [(2, 1), (2, 5), (3, 2), (4, 5), (1, 4)], \"Failed\"\nassert     subject_marks([(3,2), (4,5), (1,4), (2,5), (2,1)]) == [(2, 1), (2, 5), (3, 2), (4, 5), (1, 4)], \"Failed\"\nassert     subject_marks([(3,2), (4,5), (1,4), (2,5), (2,1)]) == [(2, 1), (2, 5), (3, 2), (4, 5), (1, 4)], \"Failed\"\nassert     subject_marks([(3,2), (4,5), (1,4), (2,5), (2,1)]) == [(2, 1), (2, 5), (3, 2), (4, 5), (1, 4)], \"Failed\"\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert [('Art', 80), ('English', 100), ('History', 90), ('Math', 100)] == subject_marks(\n    [('Art', 80), ('English', 100), ('History', 90), ('Math', 100)])\n\nassert \nassert [('History', 90), ('Math', 100), ('English', 100), ('Art', 80)] == subject_marks(\n    [('History', 90), ('Math', 100), ('English', 100), ('Art', 80)])\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     subject_marks([(3, 'a'), (2, 'b'), (1, 'c'), (1, 'd'), (2, 'e')]) == \\\n            [(1, 'c'), (1, 'd'), (2, 'e'), (2, 'b'), (3, 'a')], 'Fail'\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     subject_marks([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)]) == \n        [(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)], 'Should sort according to the second value'\nassert     subject_marks([(2, 5), (4, 4), (2, 3), (2, 1)]) == \n        [(2, 1), (2, 3), (2, 5), (4, 4)], 'Should sort according to the second value'\nassert     subject_marks([(2, 5), (1, 2), (4, 4), (2, 1), (3, 3)]) == \n        [(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)], 'Should sort according to the second value'\nassert     subject_marks([(2, 5), (1, 2), (4, 4), (2, 1), (2, 3)]) == \n        [(2, 1), (1, 2), (2, 3), (2, 5), (4, 4)], 'Should sort according to the second value'\nassert     subject_marks([(2, 5), (1, 2), (4, 4), (2, 1), (2, 3)]) == \n        [(2, 1), (1, 2), (2, 3), (2, 5), (4, 4)], 'Should sort according to the second value'\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     subject_marks([('Biology', 70), ('Physics', 90), ('Chemistry', 50), ('Maths', 60)]) == \\\n            [('Chemistry', 50), ('Physics', 90), ('Maths', 60), ('Biology', 70)]\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nrecursive_list_sum([1,2,3,4,5,6,7,8,9,10]) == 55\n\ndef recursive_list_sum_no_repetition(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     recursive_list_sum([1, 2, 3, 4]) == 10, \"Should sum to 10\"\nassert     recursive_list_sum([1, 2, 3, 4, 5, 6]) == 15, \"Should sum to 15\"\nassert     recursive_list_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 36, \"Should sum to 36\"\nassert     recursive_list_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55, \"Should sum to 55\"\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     recursive_list_sum([1,2,[3,4],5]) == 15\nassert     recursive_list_sum([1,2,[3,4],5,5,5]) == 30\nassert     recursive_list_sum([1,2,[3,4],5,5,5,5,5,5]) == 45\nassert     recursive_list_sum([1,2,3,4,5,6,7,8,9]) == 45\nassert     recursive_list_sum([1,2,3,4,5,6,7,8,9,10]) == 55\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    # ----------------------- \n    # Correct result\n    # ----------------------- \n    recursive_list_sum([1, 2, 3])\n    # 15\n    recursive_list_sum([1, 2, 3, 4])\n    # 15\n    recursive_list_sum([1, 2, [3, 4], 5])\n    # 15\n    recursive_list_sum([1, 2, [3], 4])\n    # 15\n    recursive_list_sum([])\n    # 0\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     recursive_list_sum([1,2,3]) == 6, \"incorrect result\"\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nimport os\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     recursive_list_sum([1, 2, 3, 4, 5]) == 15\nassert     recursive_list_sum([[1, 2], [3, 4, 5], [6, 7, 8, 9, 10, 11]]) == 55\nassert     recursive_list_sum([[1, 2, [3, 4, [5, 6, 7, 8]]], [[9, 10, 11], 12, 13], 14, 15]) == 98\nassert     recursive_list_sum([]) == 0\nassert     recursive_list_sum([1, 2, 3, 4, 5]) == 15\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     recursive_list_sum([1,2,3,4]) == 10\nassert     recursive_list_sum([]) == 0\nassert     recursive_list_sum([1,2]) == 3\nassert     recursive_list_sum([1,2,3]) == 6\nassert     recursive_list_sum([1,2,3,4]) == 13\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     pos_count([3, 2, 1, -1, -4, -6]) == 2\nassert     pos_count([-4, -4, 1, 1]) == 3\nassert     pos_count([1, 1, -1]) == 2\nassert     pos_count([]) == 0\n\n\ndef largest_seq(list):\n    '''\n    Write a python function to find the largest element in a list.\n    '''\n    pass\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     pos_count([1,0,-2,-3,4,5,-1,-2,5,6]) == 2, \"Wrong result\"\nassert     pos_count([1,0,-2,0,0,4,5,6,0,-3,0,9]) == 5, \"Wrong result\"\nassert     pos_count([0,1,-2,3,4,5,0,2,4]) == 5, \"Wrong result\"\nassert     pos_count([1,0,0,-2,4,5,-1,0,0]) == 6, \"Wrong result\"\nassert     pos_count([1,2,3,4,5,6,7,8,9]) == 0, \"Wrong result\"\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef pos_count2(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pass\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     pos_count([]) == 0, 'Empty list'\nassert     pos_count([1, 2, 3, 4]) == 4, 'list with all positives numbers'\nassert     pos_count([-1, -2, -3, -4]) == 3, 'list with all negative numbers'\nassert     pos_count([0, 0, 0, 0]) == 0, 'all zero numbers'\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef pos_count2(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return sum(1 for x in list if x > 0)\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == '__main__':\n    list = [-1, 2, -3, 4, 5, 6, -7, -8]\n    pos_count(list)\n    print(list)\n\n    print()\n\n    list = [1,2,3,4,5,6,7,8]\n    pos_count(list)\n    print(list)\n    \n    print()\n    \n    list = []\n    pos_count(list)\n    print(list)\n    \n    print()\n\n    list = []\n    for i in range(10):\n        list.append(i)\n    pos_count(list)\n    print(list)\n    \n    print()\n    \n    list = []\n    for i in range(10):\n        list.append(i)\n    pos_count(list)\n    print(list)\n    \n    print()\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     pos_count([-2, -2, -3, 0, 1, 2, 4]) == 0\nassert     pos_count([1, 0, -2, 3]) == 3\nassert     pos_count([-1, -2, -3]) == 3\nassert     pos_count([-1, -2, -3, -4]) == 3\nassert     pos_count([0, 0, 0, 0, 0, 0]) == 0\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert pos_count([-3, -2, 0, 1, 2]) == 2\nassert pos_count([-1, -3, -2]) == 1\nassert pos_count([-1, 0, 1]) == 1\nassert pos_count([0, 1, 2]) == 3\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pass\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(bell_number(10))\nprint(bell_number(8))\nprint(bell_number(15))\n\ndef bell_number_factorial(n):\n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    pass\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     bell_number(0) == 1, \"bell_number(0) = 1\"\nassert     bell_number(1) == 1, \"bell_number(1) = 1\"\nassert     bell_number(2) == 2, \"bell_number(2) = 2\"\nassert     bell_number(3) == 4, \"bell_number(3) = 4\"\nassert     bell_number(4) == 7, \"bell_number(4) = 7\"\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     bell_number(1) == 2, \"bell_number(1) = 2\"\nassert     bell_number(2) == 7, \"bell_number(2) = 7\"\nassert     bell_number(3) == 7, \"bell_number(3) = 7\"\nassert     bell_number(4) == 7, \"bell_number(4) = 7\"\nassert     bell_number(5) == 12, \"bell_number(5) = 12\"\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     bell_number(1) == 1\nassert     bell_number(2) == 2\nassert     bell_number(3) == 4\nassert     bell_number(4) == 7\nassert     bell_number(5) == 11\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     bell_number(3) == 6, \"3!\"\nassert     bell_number(2) == 2, \"2!\"\nassert     bell_number(1) == 1, \"1!\"\nassert     bell_number(4) == 10, \"4!\"\nassert     bell_number(12) == 720, \"12!\"\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     bell_number(4) == 5\nassert     bell_number(5) == 7\nassert     bell_number(6) == 9\nassert     bell_number(7) == 10\nassert     bell_number(8) == 13\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert bell_number(5) == 5\nassert bell_number(10) == 10\nassert bell_number(21) == 10\nassert bell_number(15) == 5\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    bell_number([2,2,1,1]) == 2\n    bell_number([4,3,3,2,1]) == 6\n    bell_number([2,2,1,1,4,4]) == 2\n    bell_number([2,2,1,1,1,1]) == 1\n    bell_number([2,2,1,1,1,1,1,1]) == 0\n    bell_number([2,2,1,1,1,1,1,1,1,1]) == 0\n    bell_number([2,2,1,1,1,1,1,1,1,1,1,1,1]) == 0\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_Monotonic([1,2,3,3,3,4,5])==True\nassert     is_Monotonic([1,2,3,4,5,4,3])==True\nassert     is_Monotonic([1,2,3,4,5,2,3])==True\nassert     is_Monotonic([1,2,3,4,5,1])==False\n\ndef is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    pass\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_Monotonic([1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1,5,5,4,5,1,2,3,1"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    is_Monotonic([1, 5, 2, 4, 5, 3, 5]) == True\n    is_Monotonic([1, 4, 5, 5, 3, 2, 5]) == True\n    is_Monotonic([1, 2, 5, 4, 3, 5]) == True\n    is_Monotonic([1, 5, 2, 4, 3, 5]) == False\n    is_Monotonic([1, 5, 2, 4, 5, 3, 5, 5, 4, 5]) == False\n    is_Monotonic([1, 5, 2, 4, 5, 3, 5, 5, 4, 5, 5]) == False\n    is_Monotonic([1, 2, 3, 4, 5, 5, 5, 5]) == True\n    is_Monotonic([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == True\n    is_Monotonic([1, 5, 2, 4, 3, 5, 5, 5, 5, 5, 5, 5, 5]) == False\n    is_Monotonic([1, 5, 2, 4, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == False\n    is_Monotonic([1, 5, 2, 4, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == False\n    is_Monotonic([1, 5, 2, 4, 3, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, "
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_Monotonic([1, 2, 3, 5]) == True, \"Test 1 Failed\"\nassert     is_Monotonic([3, 2, 1]) == False, \"Test 2 Failed\"\nassert     is_Monotonic([3, 4, 2, 1]) == True, \"Test 3 Failed\"\nassert     is_Monotonic([3, 4, 2, 5]) == True, \"Test 4 Failed\"\nassert     is_Monotonic([3, 5, 2, 1]) == True, \"Test 5 Failed\"\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_Monotonic([1, 1, 2, 1, 2]) == True\nassert     is_Monotonic([3, 1, 2]) == False\nassert     is_Monotonic([1, 1, 1]) == True\nassert     is_Monotonic([1, 2, 1, 1]) == False\nassert     is_Monotonic([1, 1, 2, 2, 3]) == False\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_Monotonic([1,1,1]) == True\nassert     is_Monotonic([1,1,2]) == False\nassert     is_Monotonic([3,2,1]) == True\nassert     is_Monotonic([2,3,1]) == False\nassert     is_Monotonic([2,2,1]) == True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef test_is_Monotonic():\n    assert is_Monotonic([]) == False\n    assert is_Monotonic([1,2,1,3,4,4,3,2,1]) == False\n    assert is_Monotonic([1,2,1,3,4,4,3,2,1,2,3]) == True\n    "
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_sublist([], [1,2,3]) == False\nassert     is_sublist([], [1,2]) == False\nassert     is_sublist([1,2], [1,2]) == True\nassert     is_sublist([1,2], [2,2]) == True\nassert     is_sublist([1,2,3], [3,2]) == True\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef is_sublist_rec(s, l):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    pass\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef test_is_sublist():\n    assert is_sublist([1,2,3,4,5], [1,2,3]) == True\n    assert is_sublist([1,2,3,4,5], [1]) == True\n    assert is_sublist([1,2,3,4,5], [1,3]) == True\n    "
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_sublist([],    []) == False\nassert     is_sublist([],    [[]]) == False\nassert     is_sublist([],    [[],\n                                      []]) == False\nassert     is_sublist([],    [[],\n                                      [],\n                                      []]) == False"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_sublist([1,2,3,4,5], [1,2,3]) == True\nassert     is_sublist([1,2,3,4,5], [1,2,3,4,5,]) == False\n\ndef rec_sum_even(n):\n    '''\n    Write a function that, given a list of length n, \n    returns the sum of the items in the list, \n    except for the first and last items. \n    If the list is of length 1, it should return the sum of the item.\n    '''\n    pass\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_sublist([1,2,3,4], [1,2,3,4,5]) == True, \"Given list doesn't contain the sublist\"\nassert     is_sublist([1,2,3,4], [1,2,3,4,6]) == False, \"Given list doesn't contain the sublist\"\nassert     is_sublist([1,2,3], [1,2,3,4,5,6,7]) == True, \"Given list doesn't contain the sublist\"\nassert     is_sublist([1,2,3], [1,2,4,5,6,7]) == False, \"Given list doesn't contain the sublist\"\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_sublist([1,2,3,4], [1,2]) == True, \"1,2,3,4\"\nassert is_sublist([1,2,3,4], [1,2,3]) == True, \"1,2,3,4\"\nassert is_sublist([1,2,3,4], [1,2,3,4]) == True, \"1,2,3,4\"\nassert is_sublist([1,2,3,4], [1,2,3,5]) == False, \"1,2,3,4\"\nassert is_sublist([1,2,3,4,5,6], [1,2,3,4,5]) == True, \"1,2,3,4,5,6\"\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_sublist([1, 2, 3], (1, 2)) == False\nassert     is_sublist([1, 2, 3], (1,)) == True\nassert     is_sublist([1, 2, 3], (1, 3)) == True\nassert     is_sublist([1, 2, 3], (1, 3, 2)) == True\nassert     is_sublist([1, 2, 3, 4], (1, 2)) == True\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_sublist([], []) == False, \"is_sublist([], [])\"\nassert     is_sublist([], [1,2,3]) == False, \"is_sublist([], [1,2,3])\"\nassert     is_sublist([1,2,3], []) == False, \"is_sublist([1,2,3], [])\"\nassert     is_sublist([1,2,3], [1,2,3]) == True, \"is_sublist([1,2,3], [1,2,3])\"\nassert     is_sublist([1,2,3,4], [1,2]) == True, \"is_sublist([1,2,3,4], [1,2])\"\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef count_tuples(Input, Tuple):\n    '''\n    Write a function to count the number of elements in an array that are also in a given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_equal_tuple([(1,2,3),(4,5,6)]) == True\nassert     find_equal_tuple([(1,2,3),(4,5,7)]) == False\nassert     find_equal_tuple([(1,2,3),(4,5,6)]) == True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_equal_tuple([(1, 2, 3), (4, 5)]) == True, \"Testcase 1 Failed!\"\nassert     find_equal_tuple([(1, 2), (3, 4)]) == True, \"Testcase 2 Failed!\"\nassert     find_equal_tuple([(1, 2), (3, 4, 5)]) == True, \"Testcase 3 Failed!\"\nassert     find_equal_tuple([(1, 2), (3, 4, 5), (6, 7)]) == False, \"Testcase 4 Failed!\"\nassert     find_equal_tuple([(1, 2), (3, 4, 5), (6, 7, 8, 9)]) == False, \"Testcase 5 Failed!\"\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_equal_tuple([(1, 2, 3), (4, 5), (6, 7)]) == True, 'Wrong answer'\nassert     find_equal_tuple([(1, 2), (2, 3), (3, 4)]) == False, 'Wrong answer'\nassert     find_equal_tuple([(1, 2, 3, 4, 5), (2, 3, 4), (3, 4, 5)]) == True, 'Wrong answer'\nassert     find_equal_tuple([(1, 2, 3), (4, 5), (6, 7), (8, 9)]) == False, 'Wrong answer'\nassert     find_equal_tuple([(1, 2, 3), (4, 5), (6, 7), (8, 9, 10)]) == True, 'Wrong answer'\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_equal_tuple((1, 2, 3)) == True, 'Testing1'\nassert     find_equal_tuple((3, 2, 1)) == False, 'Testing2'\nassert     find_equal_tuple((3, 4, 5)) == True, 'Testing3'\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_equal_tuple([(1, 2), (1,), (1, 2, 3), (1, 2)]) == False\nassert     find_equal_tuple([(1,), (1,), (1, 2, 3), (1, 2)]) == True\nassert     find_equal_tuple([(1, 2), (1,), (1, 2, 3), (1, 2)]) == True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_equal_tuple(\n        ((1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),(1,),("
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_equal_tuple(\n            (1, 2, 3),\n            (2, 3),\n            (1, 2, 4),\n            (1, 2)\n        ) == True, \"should return True\"\nassert     find_equal_tuple(\n            (1, 2, 3),\n            (2, 3),\n            (1, 2),\n            (1, 2)\n        ) == False, \"should return False\"\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_equal_tuple([(1,2,3),(2,3),(4,5,6)]) == True\nassert     find_equal_tuple([(1,2,3,4),(2,3,4),(4,5,6)]) == False\nassert     find_equal_tuple([(1,2,3,4),(2,3,4,5)]) == False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_equal_tuple([(1,2), (3,4), (5,6)]) == True, \"Wrong result\"\nassert find_equal_tuple([(1,2), (3,4), (5,6), (7,8)]) == False, \"Wrong result\"\nassert find_equal_tuple([(1,2), (3,4)]) == False, \"Wrong result\"\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\n\ndef bucket_sort(nums):\n    '''\n    Write a function to sort a list of elements by distributing the elements into buckets.\n    '''\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert comb_sort([4,5,6,7,7,1,2,3]) == [1,2,3,4,5,6,7,7]\nassert comb_sort([4,5,6,7,7,1,2,3,6]) == [1,2,3,4,5,6,7,7,6]\nassert comb_sort([4,5,6,7,7,1,2,3,2]) == [1,2,2,4,5,6,7,7,7]\nassert comb_sort([4,5,6,7,7,1,2,3,1]) == [1,1,2,2,4,5,6,7,7]\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     comb_sort([4, 3, 2, 1]) == [1, 2, 3, 4]\nassert     comb_sort([2, 3, 5, 4, 1]) == [1, 2, 3, 4, 5]\nassert     comb_sort([2, 3, 5, 4, 1, 5]) == [1, 2, 3, 4, 5, 5]\nassert     comb_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     comb_sort([1, 2, 3, 4]) == [1, 2, 3, 4]\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     comb_sort([1,5,2,1]) == [1,1,2,5]\nassert     comb_sort([1,5,2,1,3]) == [1,1,2,3,5]\nassert     comb_sort([1,5,2,1,7]) == [1,1,2,5,7]\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     dif_Square(2) == True \nassert     dif_Square(0) == False \nassert     dif_Square(6) == True \nassert     dif_Square(15) == True \nassert     dif_Square(1) == False \n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     dif_Square(2) == True, \"Should return True\"\nassert     dif_Square(4) == False, \"Should return False\"\nassert     dif_Square(10) == True, \"Should return True\"\nassert     dif_Square(50) == False, \"Should return False\"\nassert     dif_Square(31) == False, \"Should return False\"\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert not dif_Square(2)\nassert dif_Square(1)\nassert not dif_Square(0)\nassert not dif_Square(4)\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     dif_Square(0) == False, '0 should not be in the correct value'\nassert     dif_Square(1) == False, '1 should not be in the correct value'\nassert     dif_Square(2) == True, '2 should be in the correct value'\nassert     dif_Square(3) == True, '3 should be in the correct value'\nassert     dif_Square(4) == False, '4 should not be in the correct value'\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     dif_Square(0)    ==    True,    'Wrong answer in a function which can be represented as the difference of two squares'\nassert     dif_Square(5)    ==    True,    'Wrong answer in a function which can be represented as the difference of two squares'\nassert     dif_Square(15)    ==    False,    'Wrong answer in a function which can be represented as the difference of two squares'\nassert     dif_Square(-5)    ==    False,    'Wrong answer in a function which can be represented as the difference of two squares'\nassert     dif_Square(1)    ==    False,    'Wrong answer in a function which can be represented as the difference of two squares'\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert not dif_Square(2) # it should return False\nassert not dif_Square(3) # it should return False\nassert not dif_Square(7) # it should return False\nassert dif_Square(6) # it should return True\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    dif_Square(0) == True\n    dif_Square(1) == False\n    dif_Square(2) == True\n    dif_Square(3) == False\n    dif_Square(4) == True\n    dif_Square(5) == False\n    dif_Square(6) == True\n    dif_Square(7) == True\n    dif_Square(8) == False\n    dif_Square(9) == True\n    dif_Square(10) == False\n    dif_Square(20) == True\n    dif_Square(21) == False\n    dif_Square(22) == True\n    dif_Square(25) == False\n    dif_Square(26) == True\n    dif_Square(27) == True\n    dif_Square(28) == True\n    dif_Square(31) == True\n    dif_Square(32) == False\n    dif_Square(33) == True\n    dif_Square(34) == True\n    dif_Square(35) == True\n    dif_Square(36) == True\n    dif_Square(37) == True\n    dif_Square(38) == True\n    dif_Square(39) == True\n    dif_Square(40) == True\n    dif_Square(41) == False\n    dif_Square(42) == True\n    dif_Square(43) == True\n    dif_Square(44) == False\n    dif_Square(45) == True\n    dif_Square(46) == True\n    dif_Square(47) == True\n    dif_Square(48) == True\n    dif_Square(49) == True\n    dif_Square(50) == True\n    dif_Square(51) == True\n    dif_Square(52) == True\n    dif_Square(53) == True\n    dif_Square(54) == True\n    dif_Square(55) == True\n    dif_Square(56) == True\n    dif_Square(57) == True\n    dif_Square(58) == True\n    dif_Square(59) == True\n    dif_Square(60) == True\n    dif_Square(61) == True\n    dif_Square(62) == True\n    dif_Square(63) == True\n    dif_Square(64) == True\n    dif_Square(65) == True\n    dif_Square(66) == True\n    dif_Square(67) == True\n    dif_Square(68) == True\n    dif_Square(69) == True\n    dif_Square(70) == True\n    dif_Square(71) == True\n    dif_Square(72) == True\n    dif_Square(73) == True\n    dif_Square(74) == True\n    dif_Square(75) == True\n    dif_Square(76) == True\n    dif_Square(77) == True\n    dif_Square(78) == True\n    dif_Square(79) == True\n    dif_Square(80) == True\n    dif_Square(81) == True\n    dif_Square(82) == True\n    dif_Square(83) == True\n    dif_Square(84) == True\n    dif_Square(85) == True\n    dif_Square(86) == True\n    dif_Square(87) == True\n    dif_Square(88) == True\n    dif_Square(89) == True\n    dif_Square(90) == True\n    dif_Square(91) == True\n    dif_Square(92) == True\n    dif_Square(93) == True\n    dif_Square(94) == True\n    dif_Square(95) == True\n    dif_Square(96) == True\n    dif_Square(97) == True\n    dif_Square(98) == True\n    dif_Square(99) == True\n    dif_Square(100) == True\n    dif_Square(101) == True\n    dif_Square(102) == True\n    dif_Square(103) == True\n    dif_Square(104) == True\n    dif_Square(105) == True\n    dif_Square(106) == True\n    dif_Square(107) == True\n    dif_Square(108) == True\n    dif_Square(109) == True\n    dif_Square(110) == True\n    dif_Square(111) == True\n    dif_Square(112) == True\n    dif_Square(113) == True\n    dif_Square(114) == True\n    dif_Square(115) == True\n    dif_Square(116) == True\n    dif_Square(117) == True\n    dif_Square(118) == True\n    dif_Square(119) == True\n    dif_Square(120) == True\n    dif_Square(121) == True\n    dif_Square(122) == True\n    dif_Square(123) == True\n    dif_Square(124) == True\n    dif_Square(125) == True\n    dif_Square(126) == True\n    dif_Square(127) == True\n    dif_Square(128) == True\n    dif_Square(129) == True\n    dif_Square(130) == True\n    dif_Square(131) == True\n    dif_Square(132) == True\n    dif_Square(133) == True\n    dif_Square(134) == True\n    dif_Square(135) == True\n    dif_Square(136) == True\n    dif_Square(137) == True\n    dif_Square(138) == True\n    dif_Square(139) == True\n    dif_Square(140) == True\n    dif_Square(141) == True\n    dif_Square(142) == True\n    dif_Square(143) == True\n    dif_Square(144) == True\n    dif_Square(145) == True\n    dif_Square(146) == True\n    dif_Square(147) == True\n    dif_Square(148) == True\n    dif_Square(149) == True\n    dif_Square(150) == True\n    dif_Square(151) == True\n    dif_Square(152) == True\n    dif_Square(153) == True\n    dif_Square(154) == True\n    dif_Square(155) == True\n    dif_Square(156) == True\n    dif_Square(157) == True\n    dif_Square(158) == True\n    dif_Square(159) == True\n    dif_Square(160) == True\n    dif_Square(161) == True\n    dif_Square(162) == True\n    dif_Square(163) == True\n    dif_Square(164) == True\n    dif_Square(165) == True\n    dif_Square(166) == True\n    dif_Square(167) == True\n    dif_Square(168) == True\n    dif_Square(169) == True\n    dif_Square(170) == True\n    dif_Square(171) == True\n    dif_Square(172) == True\n    dif_Square(173) == True\n    dif_Square(174) == True\n    dif_Square(175) == True\n    dif_Square(176) == True\n    dif_Square(177) == True\n    dif_Square(178) == True\n    dif_Square(179) == True\n    dif_Square(180) == True\n    dif_Square(181) == True\n    dif_Square(182) == True\n    dif_Square(183) == True\n    dif_Square(184) == True\n    dif_Square(185) == True\n    dif_Square(186) == True\n    dif_Square(187) == True\n    dif_Square(188) == True\n    dif_Square(189) == True\n    dif_Square(190) == True\n    dif_Square(191) == True\n    dif_Square(192) == True\n    dif_Square(193) ="
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n'''\n  start with 'cat'\n  pattern = ['cat', 'dog']\n  should return True\n  \n  start with 'cat'\n  pattern = ['cat','sat']\n  should return True\n  \n  start with 'cat'\n  pattern = ['cat', 'dot']\n  should return False\n'''\ndef is_samepatterns(colors, patterns):\n    pass\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_samepatterns([['red', 'green'], ['red', 'blue']]    ,    ['red', 'green','red', 'blue']) == True\nassert     is_samepatterns([['red', 'green'], ['red', 'blue']]    ,    ['green','red', 'blue', 'green']) == False\nassert     is_samepatterns([['red', 'green'], ['red', 'blue']]    ,    ['red', 'green','red', 'green']) == False\nassert     is_samepatterns([['red', 'green'], ['red', 'blue']]    ,    ['red', 'green','red', 'blue']) == False\nassert     is_samepatterns([['red', 'green'], ['red', 'blue']]    ,    ['red', 'green','red', 'blue']) == False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_samepatterns([],    []) == True\nassert     is_samepatterns([],    [\"\"]) == False\nassert     is_samepatterns([\"red\", \"green\", \"blue\"], [\"\"]) == False\nassert     is_samepatterns([\"red\", \"green\", \"blue\"], [\"green\", \"red\", \"green\"]) == True\nassert     is_samepatterns([\"red\", \"green\", \"blue\"], [\"green\", \"red\", \"blue\"]) == False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_samepatterns([], []) == False\nassert     is_samepatterns([], ['a']) == False\nassert     is_samepatterns(['a', 'b'], []) == False\nassert     is_samepatterns(['a', 'b'], ['a', 'b']) == True\nassert     is_samepatterns(['a', 'b'], ['b', 'a']) == True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nis_samepatterns(colors, patterns) == True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert (is_samepatterns(colors=[\"red\", \"white\", \"black\"], patterns=[\"xwxb\", \"wxwxb\"]) == True) == True\nassert (is_samepatterns(colors=[\"red\", \"white\", \"black\"], patterns=[\"xxwxb\", \"wxxwb\"]) == False) == True\nassert (is_samepatterns(colors=[\"red\", \"white\", \"black\"], patterns=[\"xwxb\", \"wxxwb\"]) == False) == True\nassert (is_samepatterns(colors=[\"red\", \"white\", \"black\"], patterns=[\"xwxb\", \"wxxwb\"]) == False) == True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_samepatterns([], []) == True, \"Wrong Answer\"\nassert     is_samepatterns(['red'], ['red', 'blue']) == False, \"Wrong Answer\"\nassert     is_samepatterns(['red', 'blue'], ['red', 'blue']) == True, \"Wrong Answer\"\nassert     is_samepatterns(['green','red','red', 'blue', 'blue'], ['green','red', 'blue']) == True, \"Wrong Answer\"\nassert     is_samepatterns(['green','red','red', 'blue', 'blue'], ['green','red', 'blue']) == False, \"Wrong Answer\"\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_samepatterns(['red', 'green', 'blue'], ['red', 'green', 'blue']) == True\nassert     is_samepatterns(['red', 'green', 'blue'], ['green','red', 'blue']) == False\nassert     is_samepatterns(['red', 'green', 'blue'], ['blue', 'green','red']) == True\nassert     is_samepatterns(['red', 'green', 'blue'], ['red', 'green', 'blue']) == False\nassert     is_samepatterns(['red', 'green', 'blue'], ['red', 'green', 'blue','red', 'green', 'blue']) == False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_samepatterns([1, 2, 3], [[1], [2], [3]]) == False\nassert     is_samepatterns([1, 2, 3], [[1, 2], [3]]) == True\n\nprint(\"passed all test cases\")\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    find_tuples([(3,4),(6,8),(10,12)],2) == [(3,4),(6,8)]\n    find_tuples([(3,4),(6,8),(10,12)],3) == [(3,4),(6,8),(10,12)]\n    find_tuples([(3,4),(6,8),(10,12)],4) == []\n    find_tuples([(3,4),(6,8),(10,12)],5) == []\n\n\ndef is_prime(n):\n    '''\n    Write a function to check if a given number is prime or not.\n    '''\n    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_tuples([(1,2),(3,4),(6,7)], 2) == [(1,6),(2,4)]\nassert     find_tuples([(1,2),(3,4),(6,7)], 3) == [(1,2),(3,4),(6,7)]\nassert     find_tuples([(1,2),(3,4),(6,7)], 4) == []\nassert     find_tuples([(1,2,3),(4,5,6),(7,8,9)], 4) == [(1,2,4),(1,3,5),(1,5,6),(1,7,8),(1,8,9),(2,3,4),(2,4,5),(2,5,6),(2,7,8),(2,8,9),(3,4,5),(3,5,6),(3,7,8),(3,8,9),(4,5,6),(4,5,7),(4,5,8),(4,5,9),(5,6,7),(5,6,8),(5,6,9),(6,7,8),(6,7,9),(7,8,9)]\nassert     find_tuples([(1,2,3),(4,5,6),(7,8,9)], 5) == [(1,2,3,4,5)]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_tuples([(2,3),(4,5),(6,7)], 3) == [(2,3),(4,5)]\nassert     find_tuples([(2,3),(4,5),(6,7)], 5) == [(2,3),(4,5),(6,7)]\nassert     find_tuples([(2,3),(4,5),(6,7)], 7) == [(2,3),(4,5),(6,7)]\nassert     find_tuples([(2,3),(4,5),(6,7)], 0) == []\nassert     find_tuples([(2,3),(4,5),(6,7)], 6) == [(2,3),(4,5),(6,7)]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_tuples([(1,2,3,4,5,6), (1,2,3,4,5,6), (1,2,3,4,5,6)], 2) == [(1, 2, 3, 4, 5, 6)]\nassert     find_tuples([(1,2,3,4,5,6), (1,2,3,4,5,6), (1,2,3,4,5,6)], 4) == [(1, 2, 3, 4, 5, 6)]\nassert     find_tuples([(1,2,3,4,5,6), (1,2,3,4,5,6), (1,2,3,4,5,6)], 3) == [(1, 2, 3, 4, 5, 6)]\nassert     find_tuples([(1,2,3,4,5,6), (1,2,3,4,5,6), (1,2,3,4,5,6)], 1) == []\nassert     find_tuples([(1,2,3,4,5,6), (1,2,3,4,5,6), (1,2,3,4,5,6)], 0) == []\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_tuples(    [[2, 4, 6, 8], [1, 4, 5, 8], [1, 2, 6, 8], [1, 2, 3, 4], [1, 2, 3, 4]], 4 ) == [[1, 2, 3, 4]]\nassert     find_tuples(    [[2, 4, 6, 8], [1, 4, 5, 8], [1, 2, 6, 8], [1, 2, 3, 4], [1, 2, 3, 4]], 5 ) == [[1, 2, 3, 4]]\nassert     find_tuples(    [[2, 4, 6, 8], [1, 4, 5, 8], [1, 2, 6, 8], [1, 2, 3, 4], [1, 2, 3, 4]], 6 ) == [[1, 2, 3, 4]]\nassert     find_tuples(    [[2, 4, 6, 8], [1, 4, 5, 8], [1, 2, 6, 8], [1, 2, 3, 4], [1, 2, 3, 4]], 7 ) == [[1, 2, 3, 4]]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_tuples([(1, 2), (3, 4)], 2) == [(1, 2), (3, 4)]\nassert     find_tuples([(1, 2), (3, 4)], 5) == []\nassert     find_tuples([(1, 2), (3, 4), (5, 6), (7, 8)], 3) == [(3, 4), (5, 6)]\nassert     find_tuples([(1, 2), (3, 4), (5, 6), (7, 8)], 4) == []\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_tuples([(1,2), (4,6), (8,10), (20,24)], 2) == [(1,4), (2,6), (4,8), (6,10), (8,20), (10,24)]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nfind_tuples([(0, 3), (2, 4), (5, 7), (8, 11), (13, 15), (16, 18), (20, 22)], 5) == [(0, 3), (5, 7), (16, 18)]\nassert find_tuples([(0, 3), (2, 4), (5, 7), (8, 11), (13, 15), (16, 18), (20, 22)], 3) == []\nassert find_tuples([(0, 3), (2, 4), (5, 7), (8, 11), (13, 15), (16, 18), (20, 22)], 2) == [(0, 3), (2, 4), (16, 18)]\nassert find_tuples([(0, 3), (2, 4), (5, 7), (8, 11), (13, 15), (16, 18), (20, 22)], 1) == [(0, 3), (2, 4)]\nassert find_tuples([(0, 3), (2, 4), (5, 7), (8, 11), (13, 15), (16, 18), (20, 22)], 4) == []\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef is_Div(n): \n    '''\n    Write a python function to check whether a number is divisible by 11 or not.\n    '''\n    pass\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_Diff(1) == False, \"is_Diff(1) returns False\"\nassert     is_Diff(2) == True, \"is_Diff(2) returns True\"\nassert     is_Diff(2) == False, \"is_Diff(2) returns False\"\nassert     is_Diff(3) == True, \"is_Diff(3) returns True\"\nassert     is_Diff(4) == False, \"is_Diff(4) returns False\"\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef is_Divisible(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    pass\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert is_Diff(9) == True\nassert is_Diff(22) == False\nassert is_Diff(100) == True\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_Diff(100) == False, \"is_Diff should return False\"\nassert     is_Diff(11) == True, \"is_Diff should return True\"\nassert     is_Diff(22) == True, \"is_Diff should return True\"\n\n'''\nWrite a python function to find the smallest number in a list.\n'''\n\ndef find_smallest_number(numbers):\n    '''\n    Write a python function to find the smallest number in a list.\n    '''\n    pass\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert is_Diff(10)\nassert is_Diff(11)\nassert is_Diff(12)\nassert not is_Diff(13)\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_Diff(10) == False\nassert     is_Diff(11) == True\nassert     is_Diff(12) == False\nassert     is_Diff(111) == False\nassert     is_Diff(999) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n'''\nInput: 7\nOutput: False\n\nInput: 11\nOutput: True\n\nInput: 7\nOutput: False\n\nInput: 13\nOutput: True\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert word_len('hi') == False\nassert word_len('abc') == True\nassert word_len('abcdef') == False\nassert word_len('abcdefg') == True\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     word_len('Python')\nassert     not word_len('Hello')\nassert     not word_len('abc')\nassert     not word_len('PYTHON')\n\ndef word_check(s): \n    '''\n    Write a python function to check whether the string contains only alphabets or not.\n    '''\n    pass\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     word_len('') == False, \"word_len('') == False\"\nassert     word_len('a') == True, \"word_len('a') == True\"\nassert     word_len('aa') == False, \"word_len('aa') == False\"\nassert     word_len('abc') == False, \"word_len('abc') == False\"\nassert     word_len('abcdefg') == False, \"word_len('abcdefg') == False\"\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     word_len(\"Python\") == False, \"not right\"\nassert     word_len(\"Python\") == True, \"right\"\n\nassert     word_len(\"It\") == False, \"not right\"\nassert     word_len(\"It\") == True, \"right\"\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     word_len('hello') == False, \"a\"\nassert     word_len('how') == False, \"a\"\nassert     word_len('') == False, \"b\"\nassert     word_len('h') == True, \"b\"\nassert     word_len('hello!') == False, \"c\"\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     word_len('hello') == False\nassert     word_len('goodbye') == True\nassert     word_len('') == False\nassert     word_len('12') == True\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef double_word(s):\n    '''\n    Write a python function to check whether the given string contains any repeated words.\n    '''\n    pass\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nword_len(\"hello\") == True\nassert word_len(\"\") == False\nassert word_len(\"abc\") == False\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     word_len('Python') == True, 'Length of word should be odd'\nassert word_len('hello world') == False, 'Length of word should be odd'\nassert word_len('') == False, 'Length of word should be odd'\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tetrahedral_number(1) == 4, 'Expected 4, got %d' % tetrahedral_number(1)\nassert     tetrahedral_number(2) == 6, 'Expected 6, got %d' % tetrahedral_number(2)\nassert     tetrahedral_number(3) == 12, 'Expected 12, got %d' % tetrahedral_number(3)\nassert     tetrahedral_number(4) == 20, 'Expected 20, got %d' % tetrahedral_number(4)\nassert     tetrahedral_number(5) == 48, 'Expected 48, got %d' % tetrahedral_number(5)\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    assert tetrahedral_number(1) == 1, 'FAIL'\n    assert tetrahedral_number(2) == 6, 'FAIL'\n    assert tetrahedral_number(3) == 24, 'FAIL'\n    assert tetrahedral_number(4) == 60, 'FAIL'\n    "
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef fibonacci_numbers(n):\n    '''\n    Write a function to find the nth Fibonacci number.\n    '''\n    pass\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tetrahedral_number(1) == 2\nassert     tetrahedral_number(2) == 5\nassert     tetrahedral_number(3) == 13\nassert     tetrahedral_number(4) == 30\nassert     tetrahedral_number(5) == 92\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tetrahedral_number(0) == 1\nassert     tetrahedral_number(1) == 4\nassert     tetrahedral_number(2) == 10\nassert     tetrahedral_number(3) == 20\nassert     tetrahedral_number(4) == 30\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert tetrahedral_number(2) == 1\nassert tetrahedral_number(4) == 10\nassert tetrahedral_number(5) == 15\nassert tetrahedral_number(6) == 21\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint('ok')\n\ndef sum_of_numbers(n): \n    '''\n    Write a function to find the sum of the first n positive integers.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     volume_sphere(1) == 1\nassert     volume_sphere(2) == 12.5\nassert     volume_sphere(3) == 27.8\n\ndef volume_cylinder(r1, r2):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nvolume_sphere(1) == math.pi * 4/3 * 1 ** 2\nassert \nvolume_sphere(2) == math.pi * 4/3 * (2 ** 2)\nassert \nvolume_sphere(0) == 0\nassert \nvolume_sphere(1.2) == 0\nassert \nvolume_sphere(-1.2) == 0\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(\"\\nTesting volume_sphere.py\")\nprint(\"Volume of a sphere with radius 2.7 is:\", volume_sphere(2.7))\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    volume_sphere(1) ==  4.188405735172514, \"Wrong!\"\n\ndef volume_cylinder(r1,r2):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(volume_sphere(1))\n\nassert volume_sphere(3) == math.pi * 3**2 / 4\nassert volume_sphere(2) == 4 / 3 * math.pi * 2**3\nassert volume_sphere(0) == 0\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     volume_sphere(2) == 22.8700265567\nassert     volume_sphere(5) == 19.53905851237\nassert     volume_sphere(10) == 585.261209111\nassert     volume_sphere(20) == 827.6180597674\nassert     volume_sphere(30) == 1065.935341254\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef is_prime(number):\n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     volume_sphere(1.0) == 4/3*math.pi*r**3\nassert     volume_sphere(2.0) == 4/3*math.pi*r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     volume_sphere(4) == 28.6640625, \"Wrong result\"\nassert     volume_sphere(8) == 50, \"Wrong result\"\nassert     volume_sphere(1) == 1.0, \"Wrong result\"\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_Char(\"hello\") == 8\nassert     get_Char(\"world\") == 16\nassert     get_Char(\"\") == 0\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    assert get_Char(\"VICTOR\") == 115\n    assert get_Char(\"COURTNEY\") == 108\n    assert get_Char(\"RUNNON\") == 99\n    assert get_Char(\"RUNNON\") == 99\n    print(\"The tests are done!\")\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_Char(\"welcome\") == 26\nassert     get_Char(\"w\") == 45\n\ndef get_String(strr):\n    '''\n    Write a python function to find the string made by adding all the characters of the given string modulo 26.\n    '''\n    pass\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_Char('aba') == 'C', 'Failed: get_Char'\nassert get_Char('a') == 'a', 'Failed: get_Char'\nassert get_Char('b') == 'B', 'Failed: get_Char'\nassert get_Char('c') == 'C', 'Failed: get_Char'\nassert get_Char('d') == 'D', 'Failed: get_Char'\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_Char(\"abcd\") == \"a\"\nassert     get_Char(\"cafe\") == \"f\"\nassert     get_Char(\"zw\") == \"z\"\nassert     get_Char(\"\") == \"\"\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_Char(\"\") == 0, 'Empty String'\nassert     get_Char(\"A\") == 1, 'A'\nassert     get_Char(\"AB\") == 24, 'AB'\nassert     get_Char(\"ABC\") == 216, 'ABC'\nassert     get_Char(\"ABCD\") == 43, 'ABCD'\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_Char(\"ds\") == 26, \"Incorrect output\"\nassert get_Char(\"ds\") == 0, \"Incorrect output\"\nassert     get_Char(\"dd\") == 7, \"Incorrect output\"\nassert get_Char(\"z\") == 22, \"Incorrect output\"\nprint(\"You have successfully passed the test!\")\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_Char(\"computer\") == 0\nassert     get_Char(\"apple\") == 0\nassert     get_Char(\"python\") == 0\nassert     get_Char(\"kojiro\") == 9\nassert     get_Char(\"python\") == 14\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_Char(\"az\") == 10, \"Result is not as expected\"\nassert     get_Char(\"b\") == 9, \"Result is not as expected\"\nassert     get_Char(\"q\") == 27, \"Result is not as expected\"\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef check(sequence, n):\n    '''\n    Check the correctness of the code by checking the correctness of sequence(n).\n    '''\n    pass\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sequence(1)     == 1\nassert     sequence(2)     == 2\nassert     sequence(3)     == 3\nassert     sequence(4)     == 4\nassert     sequence(5)     == 5\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sequence(0) == 1\nassert     sequence(1) == 1\nassert     sequence(2) == 2\nassert     sequence(3) == 3\nassert     sequence(4) == 5\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n\ndef get_sequence():\n    '''\n    Write a function that given a number returns the corresponding sequence of the newman conway sequence.\n    '''\n    pass\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nassert sequence(0) == 1\nassert sequence(1) == 0\nassert sequence(2) == 0\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n'''\nSome older code:\n\ndef surfacearea_sphere(r):\n    surface = 4 * math.pi * r**2\n    return surface\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef is_prime(n):\n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     surfacearea_sphere(1.3) ==     43.2\nassert     surfacearea_sphere(2.9) ==     56.2\nassert     surfacearea_sphere(2.8) ==     60.0\nassert     surfacearea_sphere(3.4) ==     67.7\nassert     surfacearea_sphere(4.5) ==     81.0\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef find_min(lst, target):\n    '''\n    Write a function to find the index of minimum element.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     surfacearea_sphere(1.0) == 4 * math.pi * 1**2, 'incorrect surface area'\nassert     surfacearea_sphere(5.0) == 4 * math.pi * 5**2, 'incorrect surface area'\nassert     surfacearea_sphere(2.0) == 4 * math.pi * 2**2, 'incorrect surface area'\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     surfacearea_sphere(1) == 4, \"Expected: 4, Actual: %d\" % surfacearea_sphere(1)\nassert     surfacearea_sphere(2) == 56, \"Expected: 56, Actual: %d\" % surfacearea_sphere(2)\nassert     surfacearea_sphere(3) == 110, \"Expected: 110, Actual: %d\" % surfacearea_sphere(3)\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n'''\n    Your task is to return the surface area of a sphere with radius r.\n    \n    Input Format:\n    The first line contains T, the number of test cases.\n    The next T lines each contain one number, r.\n    \n    Output Format:\n    Return the surface area of the sphere with radius r.\n    \n    Constraints:\n    0 < r < 1e6\n    \n    Example:\n    Input:\n    5\n    0.3\n    0.8\n    1\n    0.1\n    0.5\n    \n    Output:\n    41.42\n    48.27\n    84.4\n    11.9\n    40.21\n'''\ndef surfacearea_sphere(r):\n    pass\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ncentered_hexagonal_number(1) == 6\nassert centered_hexagonal_number(3) == 28\nassert centered_hexagonal_number(8) == 352\nassert centered_hexagonal_number(14) == 708\nassert centered_hexagonal_number(21) == 10352\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return 0\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     centered_hexagonal_number(1) == 3, \"Wrong result\"\nassert     centered_hexagonal_number(2) == 8, \"Wrong result\"\nassert     centered_hexagonal_number(3) == 15, \"Wrong result\"\nassert     centered_hexagonal_number(4) == 21, \"Wrong result\"\nassert     centered_hexagonal_number(5) == 28, \"Wrong result\"\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ncentered_hexagonal_number(1) == 1\ncentered_hexagonal_number(2) == 2\ncentered_hexagonal_number(3) == 4\ncentered_hexagonal_number(4) == 7\ncentered_hexagonal_number(5) == 10\ncentered_hexagonal_number(6) == 14\ncentered_hexagonal_number(7) == 21\ncentered_hexagonal_number(8) == 28\ncentered_hexagonal_number(9) == 36\ncentered_hexagonal_number(10) == 40\ncentered_hexagonal_number(20) == 108\ncentered_hexagonal_number(50) == 256\ncentered_hexagonal_number(100) == 645\ncentered_hexagonal_number(500) == 94500\ncentered_hexagonal_number(1000) == 262500\ncentered_hexagonal_number(5000) == 5967000\ncentered_hexagonal_number(10000) == 5432640\ncentered_hexagonal_number(50000) == 7838400\ncentered_hexagonal_number(100000) == 13368640\ncentered_hexagonal_number(1000000) == 2812000\ncentered_hexagonal_number(5000000) == 8740000\ncentered_hexagonal_number(1000000000) == 4116000\ncentered_hexagonal_number(10000000000) == 9260000\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     centered_hexagonal_number(0) == 1\nassert    centered_hexagonal_number(1) == 3\nassert    centered_hexagonal_number(2) == 5\nassert    centered_hexagonal_number(3) == 7\nassert    centered_hexagonal_number(4) == 9\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     centered_hexagonal_number(1) == 1\nassert     centered_hexagonal_number(3) == 10\nassert     centered_hexagonal_number(6) == 54\nassert     centered_hexagonal_number(8) == 108\nassert     centered_hexagonal_number(10) == 2837\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     centered_hexagonal_number(1) == 1\nassert     centered_hexagonal_number(2) == 3\nassert     centered_hexagonal_number(3) == 6\nassert     centered_hexagonal_number(4) == 10\nassert     centered_hexagonal_number(5) == 15\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     centered_hexagonal_number(1) == 1\nassert     centered_hexagonal_number(2) == 3\nassert     centered_hexagonal_number(3) == 4\nassert     centered_hexagonal_number(4) == 7\nassert     centered_hexagonal_number(5) == 10\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ncentered_hexagonal_number(1) == 3\ncentered_hexagonal_number(2) == 5\ncentered_hexagonal_number(3) == 7\ncentered_hexagonal_number(4) == 11\ncentered_hexagonal_number(5) == 13\ncentered_hexagonal_number(6) == 15\ncentered_hexagonal_number(7) == 17\ncentered_hexagonal_number(8) == 19\ncentered_hexagonal_number(9) == 21\ncentered_hexagonal_number(10) == 23\ncentered_hexagonal_number(11) == 25\ncentered_hexagonal_number(12) == 27\ncentered_hexagonal_number(13) == 29\ncentered_hexagonal_number(14) == 31\ncentered_hexagonal_number(15) == 33\ncentered_hexagonal_number(16) == 35\ncentered_hexagonal_number(17) == 37\ncentered_hexagonal_number(18) == 39\ncentered_hexagonal_number(19) == 41\ncentered_hexagonal_number(20) == 43\ncentered_hexagonal_number(21) == 45\ncentered_hexagonal_number(22) == 47\ncentered_hexagonal_number(23) == 49\ncentered_hexagonal_number(24) == 51\ncentered_hexagonal_number(25) == 53\ncentered_hexagonal_number(26) == 55\ncentered_hexagonal_number(27) == 57\ncentered_hexagonal_number(28) == 59\ncentered_hexagonal_number(29) == 61\ncentered_hexagonal_number(30) == 63\ncentered_hexagonal_number(31) == 65\ncentered_hexagonal_number(32) == 67\ncentered_hexagonal_number(33) == 69\ncentered_hexagonal_number(34) == 71\ncentered_hexagonal_number(35) == 73\ncentered_hexagonal_number(36) == 75\ncentered_hexagonal_number(37) == 77\ncentered_hexagonal_number(38) == 79\ncentered_hexagonal_number(39) == 81\ncentered_hexagonal_number(40) == 83\ncentered_hexagonal_number(41) == 85\ncentered_hexagonal_number(42) == 87\ncentered_hexagonal_number(43) == 89\ncentered_hexagonal_number(44) == 91\ncentered_hexagonal_number(45) == 93\ncentered_hexagonal_number(46) == 95\ncentered_hexagonal_number(47) == 97\ncentered_hexagonal_number(48) == 99\ncentered_hexagonal_number(49) == 101\ncentered_hexagonal_number(50) == 103\ncentered_hexagonal_number(51) == 105\ncentered_hexagonal_number(52) == 107\ncentered_hexagonal_number(53) == 109\ncentered_hexagonal_number(54) == 111\ncentered_hexagonal_number(55) == 113\ncentered_hexagonal_number(56) == 115\ncentered_hexagonal_number(57) == 117\ncentered_hexagonal_number(58) == 119\ncentered_hexagonal_number(59) == 121\ncentered_hexagonal_number(60) == 123\ncentered_hexagonal_number(61) == 125\ncentered_hexagonal_number(62) == 127\ncentered_hexagonal_number(63) == 129\ncentered_hexagonal_number(64) == 131\ncentered_hexagonal_number(65) == 133\ncentered_hexagonal_number(66) == 135\ncentered_hexagonal_number(67) == 137\ncentered_hexagonal_number(68) == 139\ncentered_hexagonal_number(69) == 141\ncentered_hexagonal_number(70) == 143\ncentered_hexagonal_number(71) == 145\ncentered_hexagonal_number(72) == 147\ncentered_hexagonal_number(73) == 149\ncentered_hexagonal_number(74) == 151\ncentered_hexagonal_number(75) == 153\ncentered_hexagonal_number(76) == 155\ncentered_hexagonal_number(77) == 157\ncentered_hexagonal_number(78) == 159\ncentered_hexagonal_number(79) == 161\ncentered_hexagonal_number(80) == 163\ncentered_hexagonal_number(81) == 165\ncentered_hexagonal_number(82) == 167\ncentered_hexagonal_number(83) == 169\ncentered_hexagonal_number(84) == 171\ncentered_hexagonal_number(85) == 173\ncentered_hexagonal_number(86) == 175\ncentered_hexagonal_number(87) == 177\ncentered_hexagonal_number(88) == 179\ncentered_hexagonal_number(89) == 181\ncentered_hexagonal_number(90) == 183\ncentered_hexagonal_number(91) == 185\ncentered_hexagonal_number(92) == 187\ncentered_hexagonal_number(93) == 189\ncentered_hexagonal_number(94) == 191\ncentered_hexagonal_number(95) == 193\ncentered_hexagonal_number(96) == 195\ncentered_hexagonal_number(97) == 197\ncentered_hexagonal_number(98) == 199\ncentered_hexagonal_number(99) == 201\ncentered_hexagonal_number(100) == 203\ncentered_hexagonal_number(101) == 205\ncentered_hexagonal_number(102) == 207\ncentered_hexagonal_number(103) == 209\ncentered_hexagonal_number(104) == 211\ncentered_hexagonal_number(105) == 213\ncentered_hexagonal_number(106) == 215\ncentered_hexagonal_number(107) == 217\ncentered_hexagonal_number(108) == 219\ncentered_hexagonal_number(109) == 221\ncentered_hexagonal_number(110) == 223\ncentered_hexagonal_number(111) == 225\ncentered_hexagonal_number(112) == 227\ncentered_hexagonal_number(113) == 229\ncentered_hexagonal_number(114) == 231\ncentered_hexagonal_number(115) == 233\ncentered_hexagonal_number(116) == 235\ncentered_hexagonal_number(117) == 237\ncentered_hexagonal_number(118) == 239\ncentered_hexagonal_number(119) == 241\ncentered_hexagonal_number(120) == 243\ncentered_hexagonal_number(121) == 245\ncentered_hexagonal_number(122) == 247\ncentered_hexagonal_number(123) == 249\ncentered_hexagonal_number(124) == 251\ncentered_hexagonal_number(125) == 253\ncentered_hexagonal_number(126) == 255\ncentered_hexagonal_number(127) == 257\ncentered_hexagonal_number(128) == 259\ncentered_hexagonal_number(129) == 261\ncentered_hexagonal_number(130) == 263\ncentered_hexagonal_number(131) == 265\ncentered_hexagonal_number(132) == 267\ncentered_hexagonal_number(133) == 269\ncentered_hexagonal_number(134) == 271\ncentered_hexagonal_number(135) == 273\ncentered_hexagonal_number(136) == 275\ncentered_hexagonal_number(137) == 277\ncentered_hexagonal_number(138) == 279\ncentered_hexagonal_number(139) == 281\ncentered_hexagonal_number(140) == 283\ncentered_hexagonal_number(141) == 285\ncentered_hexagonal_number(142) == 287\ncentered_hexagonal_number(143) == 289\ncentered_hexagonal_number(144) == 291\ncentered_hexagonal_number(145) == 293\ncentered_hexagonal_number(146) == 295\ncentered_hexagonal_number(147) == 297\ncentered_hexagonal_number(148) == 299\ncentered_hexagonal_number(149) == 301\ncentered_hexagonal_number(150) == 303\ncentered_hexagonal_number(151) == 305\ncentered_hexagonal_number(152) == 307\ncentered_hexagonal_number(153) == 309\ncentered_hexagonal_number(154) == 311\ncentered_hexagonal_number(155) == 313\ncentered_hexagonal_number(156) == 315\ncentered_hexagonal_number(157) == 317\ncentered_hexagonal_number(158) == 319\ncentered_hexagonal_number(159) == 321\ncentered_hexagonal_number(160) == 323\ncentered_hexagonal_number(161) == 325\ncentered_hexagonal_number(162) == 327\ncentered_hexagonal_number(163) == 329\ncentered_hexagonal_number(164) == 331\ncentered_hexagonal_number(165) == 333\ncentered_hexagonal_number(166) == 335\ncentered_he"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     merge_dictionaries_three({'a': 1, 'b': 2}, {'b': 2, 'c': 3},{'a': 1, 'd': 4}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4}\nassert merge_dictionaries_three({'a': 1, 'b': 2}, {'b': 2, 'c': 3},{'a': 1, 'd': 4}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4}\nassert merge_dictionaries_three({'a': 1, 'b': 2}, {'a': 1},{'a': 1, 'b': 2, 'c': 3, 'd': 4}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4}\nassert merge_dictionaries_three({'a': 1, 'b': 2}, {'b': 2, 'c': 3},{'a': 1, 'd': 4}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4}\nassert merge_dictionaries_three({'a': 1, 'b': 2}, {'b': 2, 'c': 3},{'a': 1, 'd': 4, 'e': 5}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'a': 2, 'd': 4, 'e': 5}, {'f': 6, 'g': 7, 'h': 8}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8}\n\ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries. The merged dictionary should be a shallow copy of \n    dict1 and dict2.\n    '''\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     merge_dictionaries_three({'a':1,'b':2}, {'b':1,'c':2}, {'d':3}) == {'a':1,'b':2,'c':2,'d':3}\nassert     merge_dictionaries_three({'d':3,'e':4}, {'a':1,'b':2}, {'c':2,'d':3}) == {'a':1,'b':2,'c':2,'d':3,'e':4}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     merge_dictionaries_three({1:2,3:4,5:6},{5:6,7:8},{1:2,4:5,6:7}) == \\\n            {1: 2, 2: 5, 3: 4, 4: 5, 5: 6, 6: 7}\n\nassert merge_dictionaries_three({1:2,3:4},{5:6,7:8},{1:2,4:5,6:7}) == {1: 2, 2: 5, 3: 4, 4: 5, 5: 6, 6: 7}\n\nassert merge_dictionaries_three({1:2,3:4,5:6},{5:6,7:8},{1:2}) == {1: 2, 2: 5, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     merge_dictionaries_three(\n    {1:1, 2:4}, \n    {1:10, 2:20, 3:30}, \n    {1:100, 2:200, 3:300}\n) == {1:1, 2:2, 3:3, 4:4, 5:5, 6:6, 7:7, 8:8, 9:9, 10:10, 11:11, 12:12, 13:13, 14:14, 15:15, 16:16, 17:17, 18:18, 19:19, 20:20, 21:21, 22:22, 23:23, 24:24, 25:25, 26:26, 27:27, 28:28, 29:29, 30:30, 31:31, 32:32, 33:33, 34:34, 35:35, 36:36, 37:37, 38:38, 39:39, 40:40, 41:41, 42:42, 43:43, 44:44, 45:45, 46:46, 47:47, 48:48, 49:49, 50:50, 51:51, 52:52, 53:53, 54:54, 55:55, 56:56, 57:57, 58:58, 59:59, 60:60, 61:61, 62:62, 63:63, 64:64, 65:65, 66:66, 67:67, 68:68, 69:69, 70:70, 71:71, 72:72, 73:73, 74:74, 75:75, 76:76, 77:77, 78:78, 79:79, 80:80, 81:81, 82:82, 83:83, 84:84, 85:85, 86:86, 87:87, 88:88, 89:89, 90:90, 91:91, 92:92, 93:93, 94:94, 95:95, 96:96, 97:97, 98:98, 99:99, 100:100}, \n    {1:1, 2:2, 3:3}, \n    {1:10, 2:20, 3:30}, \n    {1:100, 2:200, 3:300}\n    ) == {1:1, 2:2, 3:3, 4:4, 5:5, 6:6, 7:7, 8:8, 9:9, 10:10, 11:11, 12:12, 13:13, 14:14, 15:15, 16:16, 17:17, 18:18, 19:19, 20:20, 21:21, 22:22, 23:23, 24:24, 25:25, 26:26, 27:27, 28:28, 29:29, 30:30, 31:31, 32:32, 33:33, 34:34, 35:35, 36:36, 37:37, 38:38, 39:39, 40:40, 41:41, 42:42, 43:43, 44:44, 45:45, 46:46, 47:47, 48:48, 49:49, 50:50, 51:51, 52:52, 53:53, 54:54, 55:55, 56:56, 57:57, 58:58, 59:59, 60:60, 61:61, 62:62, 63:63, 64:64, 65:65, 66:66, 67:67, 68:68, 69:69, 70:70, 71:71, 72:72, 73:73, 74:74, 75:75, 76:76, 77:77, 78:78, 79:79, 80:80, 81:81, 82:82, 83:83, 84:84, 85:85, 86:86, 87:87, 88:88, 89:89, 90:90, 91:91, 92:92, 93:93, 94:94, 95:95, 96:96, 97:97, 98:98, 99:99, 100:100}\n\ndef merge_dictionaries_two(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     merge_dictionaries_three({'a': 1, 'b': 2}, {'c': 1, 'd': 2}, {'e': 1, 'f': 2}) == {'a': 1, 'b': 2, 'c': 1, 'd': 2, 'e': 1, 'f': 2}\nassert     merge_dictionaries_three({'a': 1}, {'b': 2}, {'c': 1, 'd': 2}) == {'a': 1, 'b': 2, 'c': 1, 'd': 2}\nassert     merge_dictionaries_three({'a': 1, 'b': 2}, {'c': 1, 'd': 2}, {}) == {'a': 1, 'b': 2, 'c': 1, 'd': 2}\n\ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries.\n    '''\n    # input validation \n    if not dict1 or not dict2:\n        return None\n    if type(dict1) is not dict or type(dict2) is not dict:\n        return None\n    # input type check\n    if type(dict1)!= dict or type(dict2)!= dict:\n        return None\n    # return dict1.update(dict2)\n    # return dict1.__add__(dict2)\n    # zip and return dict\n    # zip_dict = dict1.copy()\n    # zip_dict.update(dict2)\n    # return zip_dict\n    # return dict(dict1, **dict2)\n    # return dict1 | dict2\n    # return {**dict1, **dict2}\n    # return {**dict1, **dict2, **dict3}\n    # return {**dict1, **dict2, **dict3, **dict4}\n    # return {**dict1, **dict2, **dict3, **dict4, **dict5}\n    # return dict1.update({**dict1, **dict2})\n    # return dict1.update(**dict2)\n    # return dict1.update({**dict1, **dict2}, **dict3)\n    # return dict1.update(**dict2, **dict3, **dict4)\n    # return dict1.update(**dict2, **dict3, **dict4, **dict5)\n    # return dict1.update(**dict2, **dict3, **dict4, **dict5, **dict6)\n    # return dict1.update(**dict2, **dict3, **dict4, **dict5, **dict6)\n    # return dict1.update(**dict2, **dict3, **dict4, **dict5, **dict6, **dict7)\n    # return dict1.update(**dict2, **dict3, **dict4, **dict5, **dict6, **dict7, **dict8)\n    # return dict1.update(**dict2, **dict3, **dict4, **dict5, **dict6, **dict7, **dict8, **dict9)\n    # return dict1.update(**dict2, **dict3, **dict4, **dict5, **dict6, **dict7, **dict8, **dict9, **dict10)\n    # return dict1.update(**dict2, **dict3, **dict4, **dict5, **dict6, **dict7, **dict8, **dict9, **dict10, **dict11)\n    # return dict1.update(**dict2, **dict3, **dict4, **dict5, **dict6, **dict7, **dict8, **dict9, **dict10, **dict11, **dict12)\n    # return dict1.update(**dict2, **dict3, **dict4, **dict5, **dict6, **dict7, **dict8, **dict9, **dict10, **dict11, **dict12, **dict13)\n    # return dict1.update(**dict2, **dict3, **dict4, **dict5, **dict6, **dict7, **dict8, **dict9, **dict10, **dict11, **dict12, **dict13, **dict14)\n    # return dict1.update(**dict2, **dict3, **dict4, **dict5, **dict6, **dict7, **dict8, **dict9, **dict10, **dict11, **dict12, **dict13, **dict14, **dict15)\n    # return dict1.update(**dict2, **dict3, **dict4, **dict5, **dict6, **dict7, **dict8, **dict9, **dict10, **dict11, **dict12, **dict13, **dict14, **dict15, **dict16)\n    # return dict1.update(**dict2, **dict3, **dict4, **dict5, **dict6, **dict7, **dict8, **dict9, **dict10, **dict11, **dict12, **dict13, **dict14, **dict15, **dict16, **dict17)\n    # return dict1.update(**dict2, **dict3, **dict4, **dict5, **dict6, **dict7, **dict8, **dict9, **dict10, **dict11, **dict12, **dict13, **dict14, **dict15, **dict16, **dict17, **dict18)\n    # return dict1.update(**dict2, **dict3, **dict4, **dict5, **dict6, **dict7, **dict8, **dict9, **dict10, **dict11, **dict12, **dict13, **dict14, **dict15, **dict16, **dict17, **dict18, **dict19)\n    # return dict1.update(**dict2, **dict3, **dict4, **dict5, **dict6, **dict7, **dict8, **dict9, **dict10, **dict11, **dict12, **dict13, **dict14, **dict15, **dict16, **dict17, **dict18, **dict19, **dict20)\n    # return dict1.update(**dict2, **dict3, **dict4, **dict5, **dict6, **dict7, **dict8, **dict9, **dict10, **dict11, **dict12, **dict13, **dict14, **dict15, **dict16, **dict17, **dict18, **dict19, **dict20, **dict21)\n    # return dict1.update(**dict2, **dict3, **dict4, **dict5, **dict6, **dict7, **dict8, **dict9, **dict10, **dict11, **dict12, **dict13, **dict14, **dict15, **dict16, **dict17, **dict18, **dict19, **dict20, **dict21, **dict22)\n    # return dict1.update(**dict2, **dict3, **dict4, **dict5, **dict6, **dict7, **dict8, **dict9, **dict10, **dict11, **dict12, **dict13, **dict14, **dict15, **dict16, **dict17, **dict18, **dict19, **dict20, **dict21, **dict22, **dict23)\n    # return dict1.update(**dict2, **dict3, **dict4, **dict5, **dict6, **dict7, **dict8, **dict9, **dict10, **dict11, **dict12, **dict13, **dict14, **dict15, **dict16, **dict17, **dict18, **dict19, **dict20, **dict21, **dict22, **dict23, **dict24)\n    # return dict1.update(**dict2, **dict3, **dict4, **dict5, **dict6, **dict7, **dict8, **dict9, **dict10, **dict11, **dict12, **dict13, **dict14, **dict15, **dict16, **dict17, **dict18, **dict19, **dict20, **dict21, **dict22, **dict23, **dict24, **dict25)\n    # return dict1.update(**dict2, **dict3, **dict4, **dict5, **dict6, **dict7, **dict8, **dict9, **dict10, **dict11, **dict12"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     merge_dictionaries_three(\n    dict1 = { \"a\": 1, \"b\": 2 },\n    dict2 = { \"b\": 2, \"c\": 3 },\n    dict3 = { \"c\": 3, \"d\": 4 }\n) == { \"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4 }"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     merge_dictionaries_three({1:3,2:4,3:5}, {1:2,2:5,3:5},{2:3,3:7}) == {1: 2, 2: 5, 3: 5}\nassert    merge_dictionaries_three({1:2,2:5,3:5}, {1:3,2:4,3:5},{3:7}) == {1: 3, 2: 5, 3: 7}\nassert    merge_dictionaries_three({1:2,2:5,3:5}, {1:3,2:4,3:5},{1:4}) == {1: 4, 2: 5, 3: 5}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     merge_dictionaries_three({\"1\":\"a\"}, {\"1\":\"b\"}, {\"2\":\"c\"}) == {\"1\":\"a\", \"2\":\"c\"}\nassert    merge_dictionaries_three({\"1\":\"a\"}, {\"1\":\"b\"}, {\"3\":\"c\"}) == {\"1\":\"a\", \"3\":\"c\"}\nassert    merge_dictionaries_three({\"1\":\"a\"}, {\"2\":\"c\"}, {\"1\":\"b\"}) == {\"1\":\"a\", \"2\":\"c\"}\nassert    merge_dictionaries_three({\"1\":\"a\"}, {\"3\":\"c\"}, {\"2\":\"b\"}) == {\"1\":\"a\", \"2\":\"b\", \"3\":\"c\"}\nassert    merge_dictionaries_three({\"1\":\"a\"}, {\"3\":\"c\"}, {\"3\":\"d\"}) == {\"1\":\"a\", \"3\":\"c\", \"3\":\"d\"}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     merge_dictionaries_three(\n        {'k1': 1, 'k2': 2},\n        {'k1': 1, 'k2': 2},\n        {'k1': 3, 'k2': 2}) == {'k1': 3, 'k2': 2}\n\nassert     merge_dictionaries_three(\n        {'k1': 1, 'k2': 2},\n        {'k1': 1, 'k2': 2},\n        {'k1': 3, 'k2': 2, 'k3': 3}) == {'k1': 3, 'k2': 2, 'k3': 3}"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert freq_count([1,2,3,4,5,5,5,5,5]) == {1:4, 2:3, 3:2, 4:1}\n\n\ndef freq_count_1(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d = {}\n    for i in list1:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     freq_count([]) == {}\nassert     freq_count([1]) == {1: 1}\nassert     freq_count([1,2,1]) == {1: 2, 2: 1}\nassert     freq_count([1,2,3,4,5,5,5,5,5]) == {1: 5, 2: 4, 3: 3, 4: 2, 5: 1}\nassert     freq_count([1,2,3,4,5,5,5,5,5,6,7,8,9,2,7,3,2,2,2,2,3,2,3,3,3,3,3,3]) == {1: 5, 2: 5, 3: 4, 4: 3, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nfreq_count([]) == {}\nfreq_count([1,2,3]) == {1: 3, 2: 2, 3: 1}\nfreq_count([-1,2,3]) == {-1: 1, 2: 2, 3: 1}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     freq_count([]) == {}\nassert     freq_count([1]) == {1:1}\nassert     freq_count([1,1]) == {1:2}\nassert     freq_count([1,1,1]) == {1:3}\nassert     freq_count([1,2,1]) == {1:2, 2:1}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     freq_count([]) == {}\nassert     freq_count([1,2,3,4,5,6]) == {1:4, 2:3, 3:2, 4:1, 5:1, 6:1}\nassert     freq_count([0,0,0,0,1,1,2,3]) == {0:5, 1:4, 2:3, 3:2}\nassert     freq_count([0,0,0,0,1,1,2,2,3,3,4,4]) == {0:6, 1:5, 2:4, 3:3, 4:2}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     freq_count([1,2,3,3,4,5,6,7,8,8]) == {1:2,2:3,3:3,4:1,5:1,6:1,7:1,8:1}\nassert     freq_count([]) == {}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     freq_count([])== {}\nassert     freq_count([1])== {1:1}\nassert     freq_count([1,1,2])== {1:3,2:1}\nassert     freq_count([1,1,1])== {1:3,1:2}\nassert     freq_count([3,3,1,3,4,2,2,2,2,4,4])== {1:4,2:4,3:3,4:2}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     freq_count([1,2,3]) == {\"1\":3, \"2\":2, \"3\":1}\nassert     freq_count([2,2,1,1,1]) == {\"1\":4, \"2\":3}\nassert     freq_count([]) == {}\nassert     freq_count(None) == {}\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    pass\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     closest_num(12) == 11\nassert     closest_num(1) == 0\nassert     closest_num(23) == 22\nassert     closest_num(100) == 99\nassert     closest_num(1000) == 1001\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     closest_num(12) == 11\nassert     closest_num(3) == 2\nassert     closest_num(5) == 3\nassert     closest_num(17) == 16\nassert     closest_num(19) == 19\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     closest_num(12) == 10\nassert     closest_num(14) == 13\nassert     closest_num(16) == 15\nassert     closest_num(9) == 7\nassert     closest_num(99) == 100\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert closest_num(9) == 1\nassert closest_num(0) == 0\nassert closest_num(123) == 1\nassert closest_num(7) == 7\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     closest_num(3) == 2\nassert closest_num(4) == 3\nassert closest_num(5) == 3\nassert closest_num(6) == 4\nassert closest_num(7) == 4\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     closest_num(10) == 9\nassert     closest_num(1) == 0\nassert     closest_num(11) == 10\nassert     closest_num(11.1) == 10\nassert     closest_num(0.99) == 0\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     len_log([]) == 0, \"Example 1: Expected 0\"\nassert     len_log([\" \"]) == 0, \"Example 2: Expected 0\"\nassert     len_log([\"string\"]) == 3, \"Example 3: Expected 3\"\nassert     len_log([\"hello\"]) == 4, \"Example 4: Expected 4\"\nassert     len_log([\"abcde\"]) == 5, \"Example 5: Expected 5\"\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef longest_word(list1):\n    '''\n    Write a python function to find the longest word in a list of words.\n    '''\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     len_log(['python','is','a','general','language']) == len('python is a general language')\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     len_log([]) == 0, \"Empty list should return 0\"\nassert     len_log([\"abcd\", \"zzz\"]) == 4, \"List of words\"\nassert     len_log([\"a\", \"ab\", \"aba\", \"abcd\"]) == 5, \"Longest word\"\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     len_log([]) == 0, \"empty\"\nassert     len_log([0, 1]) == 1, \"single\"\nassert     len_log([0, 1, 2, 3, 4]) == 5, \"multiple\"\nassert     len_log([0, 1, 0, 0]) == 2, \"short\"\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     len_log([\"hello\", \"goodbye\"]) == 3\nassert     len_log([\"hello\", \"goodbye\", \"hello\"]) == 4\nassert     len_log([\"hello\", \"goodbye\", \"hello\", \"goodbye\"]) == 5\nassert     len_log([\"hello\", \"goodbye\", \"hello\", \"goodbye\"]) == 5\nassert     len_log([\"hello\", \"goodbye\", \"hello\", \"goodbye\", \"hello\"]) == 6\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     len_log([\"a\",\"b\",\"a\",\"c\",\"d\",\"a\"]) == 5\nassert    len_log([]) == 0\nassert len_log([\"a\",\"b\",\"a\",\"c\",\"d\",\"a\"]) == 5\nassert len_log([\"\"]) == 0\nassert len_log([1]) == 1\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(\"The output of function find_substring is:\")\nprint(find_substring([\"abc\",\"de\",\"abc\"], \"abc\"))\nprint(find_substring([\"abc\",\"de\",\"abc\"], \"de\"))\nprint(find_substring([\"abc\",\"de\",\"abc\"], \"abcde\"))\nprint(find_substring([\"abc\",\"de\",\"abc\"], \"abcdef\"))\nprint(find_substring([\"abc\",\"de\",\"abc\"], \"abcabc\"))\nprint(find_substring([\"abc\",\"de\",\"abc\"], \"abcabcdef\"))\nprint(find_substring([\"abc\",\"de\",\"abc\"], \"defabc\"))\nprint(find_substring([\"abc\",\"de\",\"abc\"], \"abc\"))\nprint(find_substring([\"abc\",\"de\",\"abc\"], \"abcabcabc\"))\nprint(find_substring([\"abc\",\"de\",\"abc\"], \"abcabcabcdef\"))\nprint(find_substring([\"abc\",\"de\",\"abc\"], \"defabcabc\"))\nprint(find_substring([\"abc\",\"de\",\"abc\"], \"abcabc\"))\nprint(find_substring([\"abc\",\"de\",\"abc\"], \"abcabcabcabcabc\"))\nprint(find_substring([\"abc\",\"de\",\"abc\"], \"abcabcabcabcabcabc\"))\nprint(find_substring([\"abc\",\"de\",\"abc\"], \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcab"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_substring(\"i love my cat\", \"cat\") == True\nassert    find_substring(\"i love my cat\", \"cat\") == False\nassert    find_substring(\"i love my cat\", \"my\") == True\nassert    find_substring(\"i love my cat\", \"i love\") == True\nassert    find_substring(\"i love my cat\", \"love\") == False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_substring(\"abc\",\"abc\")\nassert     find_substring(\"abc\",\"bc\") == False\nassert     find_substring(\"abc\",\"def\") == False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_substring('#{}#{}#{}#', '#{}#{}#{}#') == True, \\\n            'Not correct'\nassert     find_substring('#{}#{}#{}#', '#{}#{}#{}#{}#') == True, \\\n            'Not correct'\nassert     find_substring('#{}#{}#{}#', '#{}#{}#{}#') == False, \\\n            'Not correct'\nassert     find_substring('#{}#{}#{}#', '#{}#') == True, \\\n            'Not correct'\nassert     find_substring('#{}#{}#{}#', '') == True, \\\n            'Not correct'\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_substring( \"code\", \"code\") == True\nassert     find_substring( \"abc\", \"abc\") == True\nassert     find_substring(\"abc\", \"abcd\") == False\nassert     find_substring(\"abc\", \"abcc\") == True\nassert     find_substring(\"abc\", \"abcdabc\") == False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_substring(\"this is a test\",\"test\") == True\nassert     find_substring(\"this is a test\",\"t\") == False\nassert     find_substring(\"1\",\"1\") == True\nassert     find_substring(\"1\",\"1.0\") == False\nassert     find_substring(\"1\",\"1_\") == False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_substring('ab', 'ab') == True\nassert     find_substring('ab', 'ac') == False\nassert     find_substring('apple', 'ap') == True\nassert     find_substring('orange', 'or') == True\nassert     find_substring('abc', 'abc') == True\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_substring('thequickbrownfoxjumpsoverthelazydog', 'quick') == True\nassert     find_substring('thequickbrownfoxjumpsoverthelazydog', 'the') == True\nassert     find_substring('thequickbrownfoxjumpsoverthelazydog', 'thequick') == False\nassert     find_substring('thequickbrownfoxjumpsoverthelazydog', 'the') == False\nassert     find_substring('thequickbrownfoxjumpsoverthelazydog', 'quickbrown') == False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_substring('themanran', 'the') == 1\nassert     find_substring('iloveyou', 'you') == 1\nassert     find_substring('i', 'i') == 0\nassert     find_substring('', 'hello') == 0\nassert     find_substring('themanran', '') == 0\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nis_undulating(7) == True\nis_undulating(5) == False\nis_undulating(0) == False\nis_undulating(-1) == False\nis_undulating(1) == True\nis_undulating(-2) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nis_undulating(12) == True, \"False\"\nis_undulating(27) == True, \"False\"\nis_undulating(7) == False, \"True\"\nis_undulating(16) == True, \"True\"\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_undulating(1) == False, \"Should return False if n is 1.\"\nassert     is_undulating(7) == False, \"Should return False if n is 7.\"\nassert     is_undulating(8) == False, \"Should return False if n is 8.\"\nassert     is_undulating(10) == True, \"Should return True if n is 10.\"\nassert     is_undulating(15) == True, \"Should return True if n is 15.\"\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_undulating(0) == False\nassert     is_undulating(5) == True\nassert     is_undulating(6) == True\nassert     is_undulating(7) == True\nassert     is_undulating(8) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_undulating(0) == True, 'Function is_undulating needs to return True.'\nassert     is_undulating(1) == True, 'Function is_undulating needs to return True.'\nassert     is_undulating(2) == False, 'Function is_undulating needs to return False.'\nassert     is_undulating(100) == True, 'Function is_undulating needs to return True.'\nassert     is_undulating(101) == False, 'Function is_undulating needs to return False.'\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_undulating(1)    ==    True,    'incorrect'\nassert     is_undulating(2)    ==    False,    'incorrect'\nassert     is_undulating(0)    ==    True,    'incorrect'\nassert     is_undulating(10)    ==    False,    'incorrect'\nassert     is_undulating(199)    ==    True,    'incorrect'\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     power(2, 3) == 8\nassert     power(0, 3) == 0\nassert     power(1, 3) == 1\nassert     power(2, 0) == 1\nassert     power(2, -3) == 8\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef even_odd_sum(a,b):\n    '''\n    Write a function to compute sum of even numbers and sum of odd numbers.\n    '''\n    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     power(2, 1) == 2\nassert     power(2, 2) == 4\nassert     power(3, 1) == 3\nassert     power(3, 2) == 9\nassert     power(4, 1) == 4\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint (\"Pass\" if  (4 == power(4,1)) else \"Fail\")\nprint (\"Pass\" if  (16 == power(4,2)) else \"Fail\")\nprint (\"Pass\" if  (4 == power(a=4, b=1)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(b=0, a=4)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=4, b=0)) else \"Fail\")\nprint (\"Pass\" if  (10000 == power(a=4, b=2)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=0, b=2)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=4, b=3)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=4, b=4)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=0, b=4)) else \"Fail\")\nprint (\"Pass\" if  (1 == power(a=1, b=4)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=4, b=5)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=4, b=6)) else \"Fail\")\nprint (\"Pass\" if  (1 == power(a=4, b=6)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=4, b=7)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=4, b=8)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=4, b=9)) else \"Fail\")\nprint (\"Pass\" if  (1 == power(a=4, b=9)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=4, b=10)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=4, b=11)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=4, b=12)) else \"Fail\")\nprint (\"Pass\" if  (1 == power(a=4, b=12)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=4, b=13)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=4, b=14)) else \"Fail\")\nprint (\"Pass\" if  (1 == power(a=4, b=14)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=4, b=15)) else \"Fail\")\nprint (\"Pass\" if  (1 == power(a=4, b=15)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=4, b=16)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=4, b=17)) else \"Fail\")\nprint (\"Pass\" if  (1 == power(a=4, b=17)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=4, b=18)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=4, b=19)) else \"Fail\")\nprint (\"Pass\" if  (1 == power(a=4, b=19)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=4, b=20)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=4, b=21)) else \"Fail\")\nprint (\"Pass\" if  (1 == power(a=4, b=21)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=4, b=22)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=4, b=23)) else \"Fail\")\nprint (\"Pass\" if  (1 == power(a=4, b=23)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=4, b=24)) else \"Fail\")\nprint (\"Pass\" if  (1 == power(a=4, b=24)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=4, b=25)) else \"Fail\")\nprint (\"Pass\" if  (1 == power(a=4, b=25)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=4, b=26)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=4, b=27)) else \"Fail\")\nprint (\"Pass\" if  (1 == power(a=4, b=27)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=4, b=28)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=4, b=29)) else \"Fail\")\nprint (\"Pass\" if  (1 == power(a=4, b=29)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=4, b=30)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=4, b=31)) else \"Fail\")\nprint (\"Pass\" if  (1 == power(a=4, b=31)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=4, b=32)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=4, b=33)) else \"Fail\")\nprint (\"Pass\" if  (1 == power(a=4, b=33)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=4, b=34)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=4, b=35)) else \"Fail\")\nprint (\"Pass\" if  (1 == power(a=4, b=35)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=4, b=36)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=4, b=37)) else \"Fail\")\nprint (\"Pass\" if  (1 == power(a=4, b=37)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=4, b=38)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=4, b=39)) else \"Fail\")\nprint (\"Pass\" if  (1 == power(a=4, b=39)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=4, b=40)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=4, b=41)) else \"Fail\")\nprint (\"Pass\" if  (1 == power(a=4, b=41)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=4, b=42)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=4, b=43)) else \"Fail\")\nprint (\"Pass\" if  (1 == power(a=4, b=43)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=4, b=44)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=4, b=45)) else \"Fail\")\nprint (\"Pass\" if  (1 == power(a=4, b=45)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=4, b=46)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=4, b=47)) else \"Fail\")\nprint (\"Pass\" if  (1 == power(a=4, b=47)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=4, b=48)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=4, b=49)) else \"Fail\")\nprint (\"Pass\" if  (1 == power(a=4, b=49)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=4, b=50)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=4, b=51)) else \"Fail\")\nprint (\"Pass\" if  (1 == power(a=4, b=51)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a=4, b=52)) else \"Fail\")\nprint (\"Pass\" if  (0 == power(a="
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     power(2,3) == 8\nassert     power(3,2) == 9\nassert     power(3,5) == 27\nassert     power(0,5) == 0\nassert     power(0,0) == 1\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert power(2,3) == 8\nassert power(2,3) == 8\nassert power(3,2) == 9\nassert power(3,2) == 9\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     power(a=4,b=2) == 16\nassert     power(a=9,b=3) == 81\nassert     power(a=18,b=3) == 162\nassert     power(a=123,b=3) == 945\nassert     power(a=2,b=0) == 1\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(\"Your code : \")\nprint(power(2, 5))\nif __name__ == \"__main__\":\n    a = int(input(\"Enter a: \"))\n    b = int(input(\"Enter b: \"))\n    print(power(a, b))\n    \n    \n    "
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     power(5,3)==25, \"should be True\"\nassert     power(5,1)==5, \"should be True\"\nassert     power(1,2)==1, \"should be True\"\nassert     power(2,3)==8, \"should be True\"\nassert     power(3,2)==9, \"should be True\"\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     (power(2,2)    == 4), '2^2 == 4'\nassert     (power(2,2)    == 8), '2^2 == 8'\nassert     (power(5,3)    == 25), '5^3 == 25'\nassert     (power(4,2)    == 16), '4^2 == 16'\nassert     (power(2,0)    == 1), '2^0 == 1'\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ntest_list = [(1, 2), (1, 3), (2, 2), (3, 4), (4, 5)]\nassert index_minimum(test_list) == (1, 2)\nprint('Test Passed')\n\ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     index_minimum([(1,2), (1,4), (1,3)]) == (1, 1)\nassert     index_minimum([(1,2), (1,5), (1,4)]) == (1, 4)\nassert     index_minimum([(1,2), (1,3)]) == (1, 1)\nassert     index_minimum([(1,1)]) == (1,1)\nassert     index_minimum([(2,1), (1,3)]) == (2, 1)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     index_minimum([('Bart',10),('Lisa',12),('Adam',4),('Maggie',14)]) == ('Lisa',12)\nassert index_minimum([('Bart',10),('Lisa',12),('Adam',11),('Maggie',14)]) == ('Adam',11)\nassert index_minimum([('Bart',10),('Lisa',12),('Adam',11),('Maggie',14)]) == ('Lisa',12)\nassert index_minimum([('Adam',11),('Bart',10),('Lisa',12),('Maggie',14)]) == ('Adam',11)\nassert index_minimum([('Adam',11),('Bart',10),('Lisa',12),('Maggie',14)]) == ('Lisa',12)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef search(test_list, value):\n    '''\n    Given a list of tuples, write a function that returns a dictionary\n    that contains the key with the given value, or None if there is not value\n    in the list.\n    '''\n    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n\n\n\n\ndef multiply_every_number(test_list):\n    '''\n    Given a list of numbers, write a function that returns the product of every number in the list. \n    '''\n    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert index_minimum([('a', 1), ('a', 1), ('b', 2), ('b', 2), ('c', 3), ('c', 3)]) == ('a', 1)\nassert index_minimum([('a', 1), ('a', 1), ('b', 2), ('b', 2), ('c', 3), ('c', 3)]) == ('b', 2)\nassert index_minimum([('a', 1), ('a', 1), ('b', 2), ('b', 2), ('c', 3), ('c', 3)]) == ('a', 1)\nassert index_minimum([('a', 1), ('a', 1), ('b', 2), ('b', 2), ('c', 3), ('c', 3)]) == ('c', 3)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     index_minimum([(1,2),(3,4),(2,3)]) == (1,2)\nassert     index_minimum([(1,2),(1,3),(1,4)]) == (1,1)\nassert     index_minimum([(1,2),(2,3),(1,4)]) == (1,2)\nassert     index_minimum([(1,2),(2,3),(2,4)]) == (1,2)\nassert     index_minimum([(1,2),(2,3),(2,3)]) == (1,2)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     index_minimum([('C', 1), ('B', 2), ('C', 3)]) == ('C', 1)\nassert     index_minimum([('B', 2), ('C', 1), ('B', 3)]) == ('B', 2)\nassert     index_minimum([('B', 1), ('C', 2), ('A', 3)]) == ('A', 3)\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Find_Min_Length([[2,6,3,7,8,1],[4,5,9,10,11,12],[13,14,15,16,17,18]]) == 3, \"Test Case Failed.\"\nassert     Find_Min_Length([[3,4,5,6,7,8,9,10,11,12],[1,2,3,4,5,6,7,8,9,10,11,12],[13,14,15,16,17,18,19,20,21,22,23,24]]) == 4, \"Test Case Failed.\"\nassert Find_Min_Length([[1,2,3,4],[5,6,7,8,9,10,11,12],[13,14,15,16,17,18,19,20,21,22,23,24]]) == 5, \"Test Case Failed.\"\n\n\ndef Find_First_Common_Element(lst1,lst2):\n    '''\n    Write a python function to find the first common element between two list of elements.\n    '''\n    pass"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the biggest list in a list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Find_Min_Length([1,2,3,4,5]) == 1\nassert     Find_Min_Length([[1,2],[3,4],[5,6]]) == 1\nassert     Find_Min_Length([[1,2],[3,4],[5,6],[7,8],[9,10]]) == 3\nassert     Find_Min_Length([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16]]) == 4\nassert     Find_Min_Length([[1,2,3,4],[5,6,7,8],[9,10,11,12],[13,14,15,16],[17,18,19,20]]) == 5\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Find_Min_Length([[10],[20],[30],[40],[50]]) == 2, 'WRONG!'\nassert     Find_Min_Length([[1],[2],[3],[4],[5]]) == 1, 'WRONG!'\nassert     Find_Min_Length([[1],[2],[3],[4]]) == 1, 'WRONG!'\nassert     Find_Min_Length([[1,2,3,4,5],[6,7,8,9,10]]) == 3, 'WRONG!'\nassert     Find_Min_Length([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]]) == 3, 'WRONG!'\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Find_Min_Length([[1,2,3], [5,6,7], [10,11,12]]) == 3\nassert     Find_Min_Length([[1,2,3], [5,6,7], [10,11]]) == 3\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Find_Min_Length([[],0,[],[0]]) == 0\nassert     Find_Min_Length([[],0,[0]]) == 0\nassert     Find_Min_Length([[],[0],0,0]) == 0\nassert     Find_Min_Length([[],[0],0,0,0]) == 0\nassert     Find_Min_Length([[],[0],0,0,0,0]) == 0\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef Find_Max(lst):  \n    '''\n    Write a python function to find the maximum element in a list.\n    '''\n    pass\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Find_Min_Length([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]) == 3\nassert     Find_Min_Length([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]) == 5\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     divisor(2) == 2\nassert     divisor(3) == 2\nassert     divisor(4) == 2\nassert     divisor(7) == 3\nassert     divisor(1) == 1\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n\ndef divisors(n):\n    if n == 0:\n        return None\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    else:\n        return (n + 1) * divisors(n - 1)\n\n\ndef divisors(n):\n    divisor_list = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisor_list.append(i)\n    return divisor_list\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     divisor(0) == 0, 'Should be 0'\nassert     divisor(1) == 1, 'Should be 1'\nassert     divisor(2) == 1, 'Should be 1'\nassert     divisor(3) == 2, 'Should be 2'\nassert     divisor(4) == 2, 'Should be 2'\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef prime_factor(n):\n    '''\n    Write a python function to find the prime factorization of a given integer.\n    '''\n    pass\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     divisor(10) == 2\nassert     divisor(3) == 1\nassert     divisor(9) == 3\nassert     divisor(12) == 3\nassert     divisor(5) == 1\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     divisor(10) == 4, 'divisor function does not work.'\nassert     divisor(15) == 6, 'divisor function does not work.'\nassert     divisor(13) == 4, 'divisor function does not work.'\nassert     divisor(5) == 1, 'divisor function does not work.'\nassert     divisor(0) == 1, 'divisor function does not work.'\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     divisor(8) == 3\nassert     divisor(5) == 5\nassert     divisor(10) == 4\nassert     divisor(11) == 6\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for item in list1:\n        freq_dict[item] = freq_dict.get(item, 0) + 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     frequency_lists([1,2,3,4]) == {1:1,2:1,3:1,4:1}, \"wrong answer\"\nassert     frequency_lists([1,3,5,2]) == {1:2,2:1,3:2,5:1}, \"wrong answer\"\nassert     frequency_lists([2,2,2,2,2,2,2,2,2,2,2,2]) == {2:5}, \"wrong answer\"\n\n\ndef word_dict(text):\n    '''\n    Given a sentence as a string, return a dictionary of each word and its count in the sentence\n    '''\n    pass\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert frequency_lists([[1,2], [3], [4], [5]]) == {1:2, 3:1, 4:1, 5:1}\nassert frequency_lists([1,2,3,4]) == {1:2, 2:2, 3:1, 4:1}\nassert frequency_lists([]) == {}\nassert frequency_lists([[]]) == {}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     frequency_lists([[1], [2], [3], [4], [5], [6]]) == {1: 3, 2: 2, 3: 1, 4: 1, 5: 1, 6: 1}\nassert     frequency_lists([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == {1: 3, 2: 3, 3: 2}\nassert     frequency_lists([[1, 2], [1, 2, 3, 4], [1, 2], [1, 2]]) == {1: 4, 2: 3}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     frequency_lists([[1,2,3],['a','b','c']]) == {1: 2, 2: 2, 3: 2, 'a': 1, 'b': 1, 'c': 1}\nassert     frequency_lists([[1,2,2],['a','a','a']]) == {1: 3, 2: 2, 'a': 3}\nassert     frequency_lists([[1],['a','a','a']]) == {1: 3, 'a': 3}\nassert     frequency_lists([[1],[1]]) == {1: 2}\nassert     frequency_lists([[1,2,3,4],[2,3,4,5,6,7,8,9]]) == {1: 2, 2: 2, 3: 2, 4: 2, 5: 2, 6: 2, 7: 2, 8: 2, 9: 2}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nlist1 = [['a'], ['a', 'b'], ['a'], ['b']]\nassert frequency_lists(list1) == {'a': 2, 'b': 2}\n\nlist1 = [['a'], ['a', 'b'], ['b']]\nassert frequency_lists(list1) == {'a': 2, 'b': 1}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     frequency_lists(\n                    [[1,2,3,4,5],\n                    [1,2,3,4,5],\n                    [1,2,3,4,5],\n                    [1,2,3,4,5],\n                    [1,2,3,4,5],\n                    [1,2,3,4,5]]\n                ) == {\n                    1: 5,\n                    2: 5,\n                    3: 5,\n                    4: 5,\n                    5: 5\n                }\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     frequency_lists([[1,2,3],['a','b'],['a','b']]) == {'a': 2, 'b': 2, 1: 1}\nassert     frequency_lists([[1,2,3],['a','b'],['a','b']]) == {'a': 2, 'b': 2, 1: 1}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert frequency_lists([[1,2,3],[2],[1,1]]) == {1:3, 2:1, 3:1}\nassert frequency_lists([[1,2,3,4],[2],[1,1]]) == {1:4, 2:1, 3:3, 4:1}\nassert frequency_lists([[1,2,3],[2,2],[1,1]]) == {1:2, 2:2, 3:2}\nassert frequency_lists([[1,2,3,4],[2,2],[1,1]]) == {1:4, 2:2, 3:3, 4:1}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     frequency_lists([[1,2,3],[1,2,3],[1,2,3]]) == {1: 3, 2: 2, 3: 3}\nassert frequency_lists([[1,2,3],[1,2,3],[1,2,3]]) == {1: 4, 2: 3, 3: 3}\nassert frequency_lists([[1,2],[1,2],[1,2]]) == {1: 3, 2: 2}\nassert frequency_lists([[1,2,3],[1,2,3],[1,2,3]]) == {1: 3, 2: 2, 3: 3}\nassert frequency_lists([[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]]) == {1: 3, 2: 2, 3: 3, 4: 2, 5: 2}\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     multiply_num([1, 2, 3, 4]) == 24, \"incorrect\"\nassert     multiply_num([1, 2, 3, 4, 5]) == 120, \"incorrect\"\nassert     multiply_num([1, 2, 3, 4, 5, 6]) == 360, \"incorrect\"\nassert     multiply_num([1, 2, 3, 4, 5, 6, 7]) == 420, \"incorrect\"\nassert     multiply_num([1, 2, 3, 4, 5, 6, 7, 8]) == 840, \"incorrect\"\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    multiply_num([2,4,6]) == 48\n    multiply_num([2,6,9]) == 360\n    multiply_num([4,6,9]) == 720\n    multiply_num([2,2,2]) == 8\n    multiply_num([4,2,2]) == 16\n    multiply_num([9,6,3]) == 1872\n    multiply_num([]) == None\n\ndef factorial(n):  \n    '''\n    Write a function that calculates the factorial of a number. The function should return the result as an integer.\n    '''\n    pass\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     multiply_num([5,3,2,6]) == 18\nassert     multiply_num([1,2,3,4]) == 24\nassert     multiply_num([5,3]) == 15\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     multiply_num([]) == 1, \"A list should be empty.\"\nassert     multiply_num([1, 2, 3, 4]) == 24, \"Should be 24.\"\nassert     multiply_num([1, 2, 3, 4, 5]) == 120, \"Should be 120.\"\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     multiply_num([2, 4, 6]) == 48\nassert     multiply_num([]) == 1\nassert     multiply_num([3]) == 3\n\n'''\nExample 2:\n'''\n\ndef sum_num(numbers):\n  '''\n  Write a function to sum all the numbers in a list\n  '''\n  pass\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef reverse_str(string):\n    '''\n    Write a function which will reverse the string.\n    '''\n    pass\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     multiply_num([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\nassert     multiply_num([1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     multiply_num([1, 2]) == [1, 2]\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert multiply_num([1, 2, 3, 4]) == 24\nassert multiply_num([1, 3, 5]) == 15\n\n\ndef max_num(numbers):  \n    '''\n    Write a function which takes a list of numbers and returns the maximum number in the list.\n    '''\n    pass\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     decimal_to_binary(0) == \"0\"\nassert     decimal_to_binary(1) == \"1\"\nassert     decimal_to_binary(2) == \"10\"\nassert     decimal_to_binary(3) == \"11\"\nassert     decimal_to_binary(4) == \"100\"\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef decimal_to_octal(n):\n    '''\n    Write a function to convert the given decimal number to its octal equivalent, represented as a string with no leading zeros.\n    '''\n    pass\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     decimal_to_binary(45) == \"10010101\"\nassert     decimal_to_binary(100) == \"100000\"\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     decimal_to_binary(0) == 0\nassert     decimal_to_binary(1) == '1'\nassert     decimal_to_binary(2) == '10'\nassert     decimal_to_binary(3) == '11'\nassert     decimal_to_binary(4) == '100'\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(decimal_to_binary(0))\nassert \nprint(decimal_to_binary(1))\nassert \nprint(decimal_to_binary(2))\nassert \nprint(decimal_to_binary(3))\nassert \nprint(decimal_to_binary(10))\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     decimal_to_binary(18) == '101010'\nassert     decimal_to_binary(23) == '110111'\nassert     decimal_to_binary(15) == '101'\nassert     decimal_to_binary(21) == '11100'\nassert     decimal_to_binary(0) == '0'\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     decimal_to_binary(2) == \"10\"\nassert     decimal_to_binary(9) == \"1001\"\nassert     decimal_to_binary(42) == \"101000100\"\nassert     decimal_to_binary(6) == \"111\"\nassert     decimal_to_binary(7) == \"1111\"\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     decimal_to_binary(0)    ==  '0'\nassert     decimal_to_binary(1)    ==  '1'\nassert     decimal_to_binary(2)    ==  '10'\nassert     decimal_to_binary(3)    ==  '11'\nassert     decimal_to_binary(4)    ==  '100'\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert next_smallest_palindrome(1) == 1\nassert next_smallest_palindrome(2) == 3\nassert next_smallest_palindrome(5) == 6\nassert next_smallest_palindrome(7) == 9\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert next_smallest_palindrome(12321) == 123211\nassert next_smallest_palindrome(122341) == 123241\nassert next_smallest_palindrome(122341) == 123241\nassert next_smallest_palindrome(12321) == 12321\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     next_smallest_palindrome(2) == 3\nassert     next_smallest_palindrome(3) == 4\nassert     next_smallest_palindrome(5) == 7\nassert     next_smallest_palindrome(13) == 17\nassert     next_smallest_palindrome(18) == 27\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     next_smallest_palindrome(123) == 321\nassert     next_smallest_palindrome(2) == 3\nassert     next_smallest_palindrome(11) == 11\nassert     next_smallest_palindrome(123456) == 4321\nassert     next_smallest_palindrome(1234567) == 4431\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert next_smallest_palindrome(12321) == 121, \"wrong\"\nassert next_smallest_palindrome(54321) == 543, \"wrong\"\nassert next_smallest_palindrome(66432) == 664, \"wrong\"\nassert next_smallest_palindrome(6432) == 643, \"wrong\"\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     next_smallest_palindrome(123) == 321\nassert     next_smallest_palindrome(1234) == 1342\nassert     next_smallest_palindrome(0) == 0\nassert     next_smallest_palindrome(1) == 1\n\ndef next_palindrome(num):\n    '''\n    Write a function to find the next palindrome of a specified integer, returned as an integer.\n    '''\n    pass\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint('Test 1:', next_smallest_palindrome(1234321))\nprint('Test 2:', next_smallest_palindrome(21334321))\nprint('Test 3:', next_smallest_palindrome(212312321))\nprint('Test 4:', next_smallest_palindrome(2123))\nprint('Test 5:', next_smallest_palindrome(2122))\nprint('Test 6:', next_smallest_palindrome(2221))\nprint('Test 7:', next_smallest_palindrome(222))\nprint('Test 8:', next_smallest_palindrome(1))\nprint('Test 9:', next_smallest_palindrome(12321))\nprint('Test 10:', next_smallest_palindrome(212321))\nprint('Test 11:', next_smallest_palindrome(212321))\nprint('Test 12:', next_smallest_palindrome(1234321))\nprint('Test 13:', next_smallest_palindrome(1324321))\nprint('Test 14:', next_smallest_palindrome(1324321))\nprint('Test 15:', next_smallest_palindrome(123))\nprint('Test 16:', next_smallest_palindrome(21))\nprint('Test 17:', next_smallest_palindrome(222))\nprint('Test 18:', next_smallest_palindrome(2121))\nprint('Test 19:', next_smallest_palindrome(2221))\nprint('Test 20:', next_smallest_palindrome(2222))\nprint('Test 21:', next_smallest_palindrome(1))\nprint('Test 22:', next_smallest_palindrome(11))\nprint('Test 23:', next_smallest_palindrome(12321))\nprint('Test 24:', next_smallest_palindrome(1234321))\nprint('Test 25:', next_smallest_palindrome(21334321))\nprint('Test 26:', next_smallest_palindrome(212312321))\nprint('Test 27:', next_smallest_palindrome(2123))\nprint('Test 28:', next_smallest_palindrome(2122))\nprint('Test 29:', next_smallest_palindrome(2221))\nprint('Test 30:', next_smallest_palindrome(222))\nprint('Test 31:', next_smallest_palindrome(1))\nprint('Test 32:', next_smallest_palindrome(12321))\nprint('Test 33:', next_smallest_palindrome(1234321))\nprint('Test 34:', next_smallest_palindrome(21334321))\nprint('Test 35:', next_smallest_palindrome(212312321))\nprint('Test 36:', next_smallest_palindrome(2123))\nprint('Test 37:', next_smallest_palindrome(2122))\nprint('Test 38:', next_smallest_palindrome(2221))\nprint('Test 39:', next_smallest_palindrome(222))\nprint('Test 40:', next_smallest_palindrome(1))\nprint('Test 41:', next_smallest_palindrome(11))\nprint('Test 42:', next_smallest_palindrome(12321))\nprint('Test 43:', next_smallest_palindrome(1234321))\nprint('Test 44:', next_smallest_palindrome(21334321))\nprint('Test 45:', next_smallest_palindrome(212312321))\nprint('Test 46:', next_smallest_palindrome(2123))\nprint('Test 47:', next_smallest_palindrome(2122))\nprint('Test 48:', next_smallest_palindrome(2221))\nprint('Test 49:', next_smallest_palindrome(222))\nprint('Test 50:', next_smallest_palindrome(1))\nprint('Test 51:', next_smallest_palindrome(11))\nprint('Test 52:', next_smallest_palindrome(12321))\nprint('Test 53:', next_smallest_palindrome(1234321))\nprint('Test 54:', next_smallest_palindrome(21334321))\nprint('Test 55:', next_smallest_palindrome(212312321))\nprint('Test 56:', next_smallest_palindrome(2123))\nprint('Test 57:', next_smallest_palindrome(2122))\nprint('Test 58:', next_smallest_palindrome(2221))\nprint('Test 59:', next_smallest_palindrome(222))\nprint('Test 60:', next_smallest_palindrome(1))\nprint('Test 61:', next_smallest_palindrome(12321))\nprint('Test 62:', next_smallest_palindrome(1234321))\nprint('Test 63:', next_smallest_palindrome(21334321))\nprint('Test 64:', next_smallest_palindrome(212312321))\nprint('Test 65:', next_smallest_palindrome(2123))\nprint('Test 66:', next_smallest_palindrome(2122))\nprint('Test 67:', next_smallest_palindrome(2221))\nprint('Test 68:', next_smallest_palindrome(222))\nprint('Test 69:', next_smallest_palindrome(1))\nprint('Test 70:', next_smallest_palindrome(12321))\nprint('Test 71:', next_smallest_palindrome(1234321))\nprint('Test 72:', next_smallest_palindrome(21334321))\nprint('Test 73:', next_smallest_palindrome(212312321))\nprint('Test 74:', next_smallest_palindrome(2123))\nprint('Test 75:', next_smallest_palindrome(2122))\nprint('Test 76:', next_smallest_palindrome(2221))\nprint('Test 77:', next_smallest_palindrome(222))\nprint('Test 78:', next_smallest_palindrome(1))\nprint('Test 79:', next_smallest_palindrome(12321))\nprint('Test 80:', next_smallest_palindrome(1234321))\nprint('Test 81:', next_smallest_palindrome(21334321))\nprint('Test 82:', next_smallest_palindrome(212312321))\nprint('Test 83:', next_smallest_palindrome(2123))\nprint('Test 84:', next_smallest_palindrome(2122))\nprint('Test 85:', next_smallest_palindrome(2221))\nprint('Test 86:', next_smallest_palindrome(222))\nprint('Test 87:', next_smallest_palindrome(1))\nprint('Test 88:', next_smallest_palindrome(12321))\nprint('Test 89:', next_smallest_palindrome(1234321))\nprint('Test 90:', next_smallest_palindrome(21334321))\nprint('Test 91:', next_smallest_palindrome(212312321))\nprint('Test 92:', next_smallest_palindrome(2123))\nprint('Test 93:', next_smallest_palindrome(2122))\nprint('Test 94:', next_smallest_palindrome(2221))\nprint('Test 95:', next_smallest_palindrome(222))\nprint('Test 96:', next_smallest_palindrome(1))\nprint('Test 97:', next_smallest_palindrome(12321))\nprint('Test 98:', next_smallest_palindrome(1234321))\nprint('Test 99:', next_smallest_palindrome(21334321))\nprint('Test 100:', next_smallest_palindrome(212312321))\nprint('Test 101:', next_smallest_palindrome(2123))\nprint('Test 102:', next_smallest_palindrome(2122))\nprint('Test 103:', next_smallest_palindrome(2221))\nprint('Tes"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     next_smallest_palindrome(121) == 121\nassert     next_smallest_palindrome(10) == 11\nassert     next_smallest_palindrome(100) == 101\nassert     next_smallest_palindrome(2) == 3\nassert     next_smallest_palindrome(11) == 11\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = low + (high - low) // 2\n        if arr[mid] == k - 1:\n            return mid\n        elif arr[mid] < k - 1:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n\n\n\ndef kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    lo = 0\n    high = len(arr) - 1\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     kth_element([1,2,3,4,5,6,7,8,9,10,11,12], 6) == 10\nassert     kth_element([1,2,3,4,5,6,7,8,9,10,11,12], 1) == 1\nassert     kth_element([1,2,3,4,5,6,7,8,9,10,11,12], 5) == 11\nassert     kth_element([1,2,3,4,5,6,7,8,9,10,11,12], 2) == 2\nassert     kth_element([1,2,3,4,5,6,7,8,9,10,11,12], 11) == 11\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     kth_element([1,3,2,5,4,6,7,8], 3) == 4\nassert     kth_element([1,3,2,5,4,6,7,8], 8) == 8\nassert     kth_element([1,3,2,5,4,6,7,8], 1) == 1\nassert     kth_element([1,3,2,5,4,6,7,8], 10) == None\nassert     kth_element([1,3,2,5,4,6,7,8], -1) == None\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert kth_element([1,2,3], 1) == 1\nassert kth_element([1,2,3], 2) == 2\nassert kth_element([1,2,3], 3) == 3\nassert kth_element([1,2,3,4], 3) == 4\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     kth_element([1, 2, 3, 4, 5], 4) == 5, \"Should be 5\"\nassert kth_element([1, 2, 3, 4, 5], 5) == 5, \"Should be 5\"\nassert kth_element([1, 2, 3, 4, 5], 1) == 1, \"Should be 1\"\nassert kth_element([1, 2, 3, 4, 5], 6) == None, \"Should be None\"\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef kth_element_using_binary_search(arr, k):\n    '''\n    Find the kth element in the given array using binary search.\n    '''\n    pass\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\narr = [1,2,3,4,5,6,7,8,9,10]\nk = 10\nprint(kth_element(arr, k))\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\narr = [1,2,3,4,5,6,7,8,9]\nk = 4\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     kth_element([10,20,30,40,50], 1) == 10\nassert     kth_element([10,20,30,40,50], 5) == 40\nassert     kth_element([1,2,3,4,5], 1) == 1\nassert     kth_element([1,2,3,4,5], 5) == 5\nassert     kth_element([], 1) == None\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(\"\\nCheck your implementation:\")\n\nprint(snake_to_camel(\"my_favorite_snake_case\"))\nprint(snake_to_camel(\"my_favorite_snake_case_2\"))\nprint(snake_to_camel(\"my_favorite_snake_case_3\"))\nprint(snake_to_camel(\"my_favorite_snake_case_4\"))\nprint(snake_to_camel(\"my_favorite_snake_case_5\"))\nprint(snake_to_camel(\"my_favorite_snake_case_6\"))\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     snake_to_camel(\"snake_case\")     == \"snakeCase\"\nassert     snake_to_camel(\"camel_case\")     == \"camelCase\"\nassert     snake_to_camel(\"snake_camel\")     == \"snakeCamel\"\nassert     snake_to_camel(\"snake_Camel\")     == \"snakeCamel\"\nassert     snake_to_camel(\"snake_camel_case\") == \"snakeCamelCase\"\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     snake_to_camel('snake_camel_case') =='snakeCamelCase'\nassert     snake_to_camel('snake_snake_snake_case') =='snakeSnakeSnakeCase'\nassert     snake_to_camel('snake_snake_snake_snake_case') =='snakeSnakeSnakeSnakeCase'\nassert     snake_to_camel('snake_snake_snake_snake_snake_case') =='snakeSnakeSnakeSnakeSnakeCase'\nassert     snake_to_camel('snake_snake_snake_snake_snake_snake_case') =='snakeSnakeSnakeSnakeSnakeSnakeSnakeCase'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     snake_to_camel(\"camelCase\") == \"camelCamelCase\", \n\"Conversion fails\"\nassert     snake_to_camel(\"camel_Case\") == \"camelCamelCase\", \n\"Conversion fails\"\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     snake_to_camel('snake') =='snake', 'incorrect'\nassert     snake_to_camel('camelCase') == 'camel_case', 'incorrect'\nassert     snake_to_camel('CamelCase') == 'camel_case', 'incorrect'\nassert     snake_to_camel('snake_case') =='snake_case', 'incorrect'\nassert     snake_to_camel('snake_case2') =='snake_case2', 'incorrect'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint('')\n\ndef snake_to_camel_2(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    s = list(word)\n    n = 0\n    out = \"\"\n    while n < len(s) - 1:\n        if s[n] == \"_\":\n            out += s[n+1].upper()\n        else:\n            out += s[n]\n        n += 1\n    out += s[n]\n    return out\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     snake_to_camel(\"snake_case\") == \"snakeCase\", \"Fail\"\nassert     snake_to_camel(\"snake_case_1\") == \"snakeCase1\", \"Fail\"\nassert     snake_to_camel(\"snake_case_2\") == \"snakeCase2\", \"Fail\"\nassert     snake_to_camel(\"snake_case_3\") == \"snakeCase3\", \"Fail\"\nassert     snake_to_camel(\"snake_case_4\") == \"snakeCase4\", \"Fail\"\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     snake_to_camel('snake_case') =='snakeCase','snake_to_camel is not correct'\nassert snake_to_camel('snake_snake_case') =='snakeSnakeCase','snake_to_camel is not correct'\nassert snake_to_camel('snake_snake_snake_case') =='snakeSnakeSnakeCase','snake_to_camel is not correct'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     snake_to_camel('my_snake_case') == 'MySnakeCase', 'error'\nassert     snake_to_camel('my_snake_case_') == 'MySnakeCase', 'error'\nassert     snake_to_camel('my_snake_case_2') == 'MySnakeCase2', 'error'\nassert     snake_to_camel('my_snake_case_3') == 'MySnakeCase3', 'error'\nassert     snake_to_camel('my_snake_case_4') == 'MySnakeCase4', 'error'\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     eulerian_num(5, 10) == 5\nassert     eulerian_num(5, 1) == 5\nassert     eulerian_num(1, 10) == 10\nassert     eulerian_num(1, 1) == 1\nassert     eulerian_num(2, 2) == 2\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     eulerian_num(1, 1) == 1\nassert     eulerian_num(1, 2) == 0\nassert     eulerian_num(3, 2) == 1\nassert     eulerian_num(2, 1) == 0\nassert     eulerian_num(3, 3) == 2\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     eulerian_num(3, 6) == 8\nassert     eulerian_num(3, 7) == 8\nassert     eulerian_num(5, 12) == 8\nassert     eulerian_num(9, 24) == 40\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert \nassert \n\ndef count_eulerian_cycles(n, m): \n    '''\n    Write a function to find the number of eulerian cycles in a graph.\n    '''\n    pass\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \neulerian_num(1, 1) == 1\neulerian_num(2, 3) == 2\neulerian_num(1, 0) == 0\n\ndef eulerian_path(n, m): \n    '''\n    Write a function to find the Eulerian path a(n, m) of an Eulerian graph.\n    '''\n    pass\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     eulerian_num(1, 1) == 1, 'eulerian_num(1, 1) is wrong'\nassert     eulerian_num(2, 1) == 1, 'eulerian_num(2, 1) is wrong'\nassert     eulerian_num(2, 2) == 2, 'eulerian_num(2, 2) is wrong'\nassert     eulerian_num(3, 2) == 2, 'eulerian_num(3, 2) is wrong'\nassert     eulerian_num(5, 2) == 4, 'eulerian_num(5, 2) is wrong'\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \neulerian_num(1, 1) == 1\neulerian_num(2, 1) == 1\neulerian_num(3, 1) == 1\neulerian_num(3, 2) == 2\neulerian_num(3, 4) == 4\neulerian_num(10, 4) == 3\neulerian_num(10, 8) == 3\neulerian_num(10, 24) == 5\neulerian_num(20, 4) == 7\neulerian_num(20, 8) == 8\neulerian_num(20, 24) == 11\neulerian_num(50, 4) == 23\neulerian_num(50, 8) == 23\neulerian_num(50, 24) == 29\neulerian_num(100, 4) == 40\neulerian_num(100, 8) == 40\neulerian_num(100, 24) == 42\neulerian_num(1000, 4) == 155\neulerian_num(1000, 8) == 155\neulerian_num(1000, 24) == 575"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     eulerian_num(2, 3) == 1, \"eulerian_num(2, 3) is wrong\"\nassert     eulerian_num(10, 5) == 6, \"eulerian_num(10, 5) is wrong\"\nassert     eulerian_num(1, 2) == 1, \"eulerian_num(1, 2) is wrong\"\nassert     eulerian_num(1, 1) == 1, \"eulerian_num(1, 1) is wrong\"\nassert     eulerian_num(5, 3) == 2, \"eulerian_num(5, 3) is wrong\"\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_sublists([['a', 'c', 'b'], ['a', 'b']]) == [['a', 'c', 'b'], ['a', 'b']]\nassert     sort_sublists([['a', 'b'], ['c']]) == [['a', 'c'], ['a', 'b']]\nassert     sort_sublists([['b'], ['a', 'c']]) == [['a', 'c'], ['b']]\nassert     sort_sublists([['a'], ['b', 'c']]) == [['a', 'b'], ['a', 'c']]\nassert     sort_sublists([['a', 'b'], ['b', 'c']]) == [['a', 'b'], ['b', 'c']]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_sublists([[\"c\", \"a\", \"b\"], [\"a\", \"b\", \"d\"], [\"a\", \"c\", \"e\"]]) ==     [[\"a\", \"c\", \"e\"], [\"a\", \"b\", \"d\"], [\"a\", \"b\", \"c\"]]\nassert     sort_sublists([[\"c\", \"b\", \"a\"], [\"a\", \"b\", \"d\"], [\"a\", \"c\", \"e\"]]) ==     [[\"a\", \"c\", \"e\"], [\"a\", \"b\", \"d\"], [\"a\", \"b\", \"c\"]]\nassert     sort_sublists([[\"c\", \"b\", \"a\"], [\"a\", \"b\", \"d\"], [\"a\", \"c\", \"e\"]]) ==     [[\"a\", \"c\", \"e\"], [\"a\", \"b\", \"d\"], [\"a\", \"b\", \"c\"]]\nassert     sort_sublists([[\"c\", \"b\", \"a\"], [\"a\", \"b\", \"d\"], [\"a\", \"c\", \"e\"]]) ==     [[\"a\", \"c\", \"e\"], [\"a\", \"b\", \"d\"], [\"a\", \"b\", \"c\"]]\nassert     sort_sublists([[\"c\", \"b\", \"a\"], [\"a\", \"b\", \"d\"], [\"a\", \"c\", \"e\"]]) ==     [[\"a\", \"c\", \"e\"], [\"a\", \"b\", \"d\"], [\"a\", \"b\", \"c\"]]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef first_occurrence(input_list):\n    '''\n    Write a function that finds the first occurrence of a given string in a given list of strings.\n    Return the index of the first occurrence. If the string isn't found, return -1.\n    '''\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef combine_lists(input_list):\n    '''\n    Write a function to combine a list of strings into a single string.\n    '''\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nsort_sublists([[1, 2], ['a', 'b', 'c']]) == [[1, 2], ['a', 'b', 'c']]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_sublists([[\"a\", \"b\", \"c\"], [\"e\", \"d\", \"f\"], [\"m\", \"n\", \"k\"]]) == \\\n        [\"a\", \"e\", \"b\", \"d\", \"c\", \"m\", \"n\", \"k\", \"f\", \"e\", \"m\"]\nassert sort_sublists([[\"a\", \"b\", \"c\"], [\"e\", \"d\", \"f\"], [\"m\", \"n\", \"k\"]]) == \\\n        [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"m\", \"n\", \"k\"]\nassert sort_sublists([[\"a\", \"b\", \"c\"], [\"e\", \"d\", \"f\"], [\"m\", \"n\", \"k\"]]) == \\\n        [\"a\", \"b\", \"c\", \"e\", \"d\", \"f\", \"m\", \"n\", \"k\"]"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_sublists([[\"banana\", \"kiwi\"], [\"pineapple\", \"tomato\"]]) == [['pineapple', 'kiwi'], ['banana', 'tomato']]\nassert     sort_sublists([[\"apple\", \"orange\", \"kiwi\"], [\"banana\", \"orange\", \"pineapple\"]]) == [['apple', 'orange', 'kiwi'], ['banana', 'orange', 'pineapple']]\nassert     sort_sublists([[\"banana\", \"kiwi\"], [\"pineapple\", \"tomato\"]]) == [['pineapple', 'kiwi'], ['banana', 'tomato']]\nassert     sort_sublists([[\"pineapple\", \"kiwi\"], [\"orange\", \"apple\"]]) == [['pineapple', 'kiwi'], ['orange', 'apple']]\n\ndef min_max(input_list):\n    '''\n    Write a function to find the min and max values in a given list of lists of integers.\n    '''\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_sublists([['c', 'a', 'b'], ['a', 'c', 'b'], ['b', 'a', 'c']]) == [['a', 'c', 'b'], ['b', 'a', 'c'], ['c', 'a', 'b']]\nassert     sort_sublists([['c', 'b', 'a'], ['a', 'c', 'b'], ['b', 'a', 'c']]) == [['a', 'c', 'b'], ['b', 'a', 'c'], ['c', 'b', 'a']]\nassert     sort_sublists([['c', 'b', 'a'], ['a', 'c', 'b']]) == [['a', 'c', 'b'], ['b', 'a', 'c']]\nassert sort_sublists([['c', 'a']]) == [['a', 'c']]\nassert sort_sublists([['a', 'c']]) == [['a', 'c']]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    sort_sublists([['lala', 'baba', 'aba', 'bbb', 'baa'], \n        ['a', 'b', 'aa', 'bb', 'aaa'], \n        ['a', 'a', 'b', 'bb', 'bbb'], \n        ['a', 'aa', 'a', 'a', 'aa']]) == [['a', 'a', 'b', 'bb', 'bbb'], \n        ['a', 'aa', 'aa', 'a', 'a'], \n        ['a', 'a', 'bb', 'b', 'bbb'], \n        ['lala', 'baba', 'aba', 'bbb', 'baa']]\nassert \n    sort_sublists([['lala', 'baba', 'aba', 'bbb', 'baa'], \n        ['a', 'b', 'aa', 'bb', 'aaa'], \n        ['a', 'a', 'b', 'bb', 'bbb'], \n        ['a', 'aa', 'a', 'a', 'aa']]) == [['a', 'a', 'b', 'bb', 'bbb'], \n        ['a', 'aa', 'aa', 'a', 'a'], \n        ['a', 'a', 'b', 'bb', 'bbb'], \n        ['lala', 'baba', 'aba', 'bbb', 'baa']]\nassert \n    sort_sublists([['a', 'b', 'aa', 'bb', 'aaa'], \n        ['lala', 'baba', 'aba', 'bbb', 'baa'], \n        ['a', 'a', 'bb', 'b', 'bbb'], \n        ['a', 'aa', 'a', 'a', 'aa']]) == [['a', 'a', 'b', 'bb', 'bbb'], \n        ['a', 'aa', 'aa', 'a', 'a'], \n        ['a', 'a', 'bb', 'b', 'bbb'], \n        ['lala', 'baba', 'aba', 'bbb', 'baa']]\nassert \n    sort_sublists([['lala', 'baba', 'aba', 'bbb', 'baa'], \n        ['a', 'b', 'aa', 'bb', 'aaa'], \n        ['a', 'a', 'b', 'bb', 'bbb'], \n        ['a', 'aa', 'a', 'a', 'aa']]) == [['a', 'a', 'b', 'bb', 'bbb'], \n        ['a', 'aa', 'aa', 'a', 'a'], \n        ['a', 'a', 'bb', 'b', 'bbb'], \n        ['lala', 'baba', 'aba', 'bbb', 'baa']]\nassert \n    sort_sublists([['lala', 'baba', 'aba', 'bbb', 'baa'], \n        ['a', 'b', 'aa', 'bb', 'aaa'], \n        ['a', 'a', 'b', 'bb', 'bbb'], \n        ['a', 'aa', 'a', 'a', 'aa']]) == [['a', 'a', 'b', 'bb', 'bbb'], \n        ['a', 'aa', 'aa', 'a', 'a'], \n        ['a', 'a', 'bb', 'b', 'bbb'], \n        ['lala', 'baba', 'aba', 'bbb', 'baa']]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nsort_sublists(sublists) == ['2', '1', '3', '5', '4']"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    count([True, True, True, False, True, True]) == 5\n    count([True, False, False, True, False]) == 2\n    count([True, True, False, False]) == 3\n    count([True, False, False, False]) == 1\n    count([]) == 0\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count([True, False, False, False, True, False]) == 4, \\\n            \"Wrong output\"\nassert count([True, False, False, False]) == 3, \\\n            \"Wrong output\"\nassert count([]) == 0, \\\n            \"Wrong output\"\nassert count([None, True, True, False, False, False, False, False, False, False]) == 3, \\\n            \"Wrong output"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    count([True, True, False, False, True]) == 3\nassert \n    count([True, True, False, False, True]) == 1\nassert \n    count([True, True, False, False, True, False, False]) == 4\nassert \n    count([True, True, False, False, True]) == 1\nassert \n    count([]) == 0\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count([\"True\",\"True\",\"True\",\"False\",\"False\",\"False\"]) == 3\nassert     count([\"True\",\"False\",\"True\",\"False\",\"False\",\"False\"]) == 1\nassert     count([\"False\",\"False\",\"True\",\"False\",\"False\",\"False\"]) == 1\nassert     count([]) == 0\n\n\ndef max_depth(lst):\n    '''\n    Write a python function to count max depth in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count([True,True,False,True,True]) == 2, f\"Expected 2; got {count([True,True,False,True,True])}\"\nassert     count([True,False,False,True,False,True]) == 5, f\"Expected 5; got {count([True,False,False,True,False,True])}\"\nassert     count([True,True,False,False,True,True,False,True,True]) == 10, f\"Expected 10; got {count([True,True,False,False,True,True,False,True,True])}\"\nassert     count([True,True,False,True,True,False,True,True,True,True]) == 10, f\"Expected 10; got {count([True,True,False,True,True,False,True,True,True,True])}\"\n\nprint('ALL TESTS PASSED')"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count([True, False, True, True, False, True, True, False, False, True, False]) == 5, \"wrong\"\nassert     count([True, False, True, True, False, False]) == 5, \"wrong\"\nassert     count([True, False, True, True, False]) == 4, \"wrong\"\nassert     count([True]) == 1, \"wrong\"\nassert     count([]) == 0, \"wrong\"\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count([True,False,True,True,False]) == 3, \"Should return 3\"\nassert     count([True,False,True,False,True]) == 1, \"Should return 1\"\nassert     count([]) == 0, \"Should return 0\"\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count([False, True, False, True, True, False]) == 4, \"True is not in the list.\"\nassert     count([True, False, False, True, False, False]) == 4, \"True is not in the list.\"\nassert     count([True, True, False, False, True, False, True]) == 4, \"True is not in the list.\"\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef all_unique(lst):\n    '''\n    Write a python function to check if all the elements in the list are unique.\n    '''\n    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count([True, False, True, True, True]) == 2\nassert     count([False, False, True, False, False, False]) == 2\nassert     count([False, False, True, False, True]) == 2\nassert     count([False, True, False, False, False]) == 2\nassert     count([False, True, True, False]) == 1\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add_lists([1,2,3],[(2,3),(5,6),(8,9)]) == [(1,2),(2,3),(5,6),(8,9)]\nassert     add_lists([1,2],[(2,3)]) == [(1,2),(2,3)]\n\nprint (\"Checking add_lists function: passed\")\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add_lists([1,2,3], (5,6,7)) == [(1,2,3), (5,6,7)]\nassert     add_lists([1,2,3], (6,7)) == [(1,2,3), (6,7)]"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add_lists([], [(1,2), (3,4)]) == [(1,2), (3,4)]\nassert     add_lists([(1,2)], [(3,4)]) == [(1,2), (3,4)]\nassert     add_lists([(1,2,3), (4,5,6), (7,8,9), (10,11,12)], [(1,2,3), (4,5,6), (7,8,9)]) == [(1,2,3), (4,5,6), (7,8,9), (10,11,12)]\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_lists(test_list, test_tup) == [1,2,3,4,5,6,7]\nprint('\\nPASSED: add_lists')\n\ndef subtract_lists(test_list, test_tup):\n    '''\n    Write a function to remove the given list from the given tuples.\n    '''\n    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     add_lists([1, 2, 3, 4], (1, 2, 3)) == (1, 2, 3, 4)\nassert     add_lists([], (1, 2, 3)) == (1, 2, 3)\nassert     add_lists([1], (1, 2, 3)) == (1, 2, 3)\nassert     add_lists([1,2], (3, 4)) == (1, 2, 3, 4)\nassert     add_lists([1,2,3], (3, 4)) == (1, 2, 3, 4)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     add_lists([], (1,2,3,4)) == ((1,2,3,4),)\nassert     add_lists([1,2], (3,4,5)) == ((1,2,3,4,5),)\nassert     add_lists([1,2,3], (4,5,6)) == ((1,2,3,4,5,6),)\nassert     add_lists([1,2,3], (4,5)) == ((1,2,3,4,5),)\nassert     add_lists([1,2,3], (4)) == ((1,2,3,4),)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ntest_list = [1, 2, 3]\ntest_tup = (1, 2, 3)\n\nresult = add_lists(test_list, test_tup)\nassert result == (1, 2, 3, 1, 2, 3)"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n'''\nIn this question, you will take three sorted lists,\ncombine them into one sorted list.\n\nEach of the following operations is allowed:\n* addition,\n* subtraction,\n* multiplication,\n* division,\n* floor division,\n* exponentiation,\n* left shift,\n* right shift.\n\nFor addition and subtraction, it is guaranteed that there will always be one integer in each list.\nFor multiplication, it is guaranteed that there will always be one integer in each list.\nFor division, it is guaranteed that there will always be one integer in each list.\nFor exponentiation, it is guaranteed that there will always be one integer in each list.\nFor left shift, it is guaranteed that there will always be one integer in each list.\nFor right shift, it is guaranteed that there will always be one integer in each list.\n\nYou must not use any built-in data structure in Python.\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     merge_sorted_list([1, 3, 5], [2, 4, 6], [7, 8, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 'incorrect'\nassert     merge_sorted_list([0], [1], []) == [0, 1], 'incorrect'\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nnum1 = [2,5,9]\nnum2 = [1,4,6]\nnum3 = [3]\nmerge_sorted_list(num1,num2,num3)\nassert num1 == [1,2,4,5,6,9]\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     merge_sorted_list([1,2,3],[1,2,3],[1,2,3]) == [1,1,2,2,3,3]\nassert     merge_sorted_list([],[],[]) == []\nassert     merge_sorted_list([],[3,2,1],[3,4,1]) == [1,1,2,2,3,3,4,4]\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     merge_sorted_list([1,2,3,4,5], [3,6,7], [2,1,4,5,8]) == sorted([1,2,3,3,4,5,6,7,8])\nassert     merge_sorted_list([1,2,3,4,5], [3,6,7], [1,2,4,5,8]) == sorted([1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8])\nassert     merge_sorted_list([1,2,3,4,5], [3,6,7], [1,2,4,5,8,9]) == sorted([1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9])\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     merge_sorted_list([1,2,3], [4,5,6], [7,8,9]) == [1,2,3,4,5,6,7,8,9]\nassert     merge_sorted_list([4,5], [2,3], [1,6,7,8]) == [1,2,3,4,5,6,7,8]\nassert     merge_sorted_list([1,2,3], [4], [5,6,7,8]) == [1,2,3,4,5,6,7,8]\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     merge_sorted_list([1,3,4,5],\n                        [2,4,6],\n                        [4,2,5]) == [1,2,3,4,4,5,6]\nassert     merge_sorted_list([1,3,4,5],\n                        [2,4,6],\n                        []) == [1,2,3,4,5,6]\nassert     merge_sorted_list([],\n                        [2,4,6],\n                        [4,2,5]) == []\nassert     merge_sorted_list([1],\n                        [2,4,6],\n                        [4,2,5]) == [1,2,4,2,4,5,6]\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     merge_sorted_list([1,2,3],[4,5,6],[3,8,9]) == sorted([1,2,3,3,4,5,6,8,9])\nassert     merge_sorted_list([1,2,3],[4,5,6],[3,8,9],num2 = \"a\") == sorted([1,2,3,4,5,6,3,8,9])\nassert     merge_sorted_list([1,2,3],[4,5,6],[3,8,9],num3 = \"b\") == sorted([1,2,3,4,5,6,3,8,9])\n\n\ndef merge_sort_list(num1,num2,num3):\n    '''\n    Write a function to merge three sorted lists into a single sorted list.\n    '''\n    pass\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nodd_Equivalent(s = \"1010101010101010\",n = 1) == 3, \"Should be 3\"\nassert odd_Equivalent(s = \"1010101010101010\",n = 3) == 1, \"Should be 1\"\nassert odd_Equivalent(s = \"1010101010101010\",n = 4) == 1, \"Should be 1\"\nassert odd_Equivalent(s = \"1010101010101010\",n = 5) == 2, \"Should be 2\"\nassert odd_Equivalent(s = \"1010101010101010\",n = 6) == 2, \"Should be 2\"\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nodd_Equivalent('00000101', 2) == 1\n\ndef even_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    pass\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nodd_Equivalent('010101',2) == 1, \"Test Case Failed\"\nassert odd_Equivalent('1010',1) == 1, \"Test Case Failed\"\nassert odd_Equivalent('1010101',2) == 4, \"Test Case Failed\"\nassert odd_Equivalent('10101',4) == 6, \"Test Case Failed\"\nassert odd_Equivalent('1010101010101',4) == 8, \"Test Case Failed\"\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nodd_Equivalent(\"1011101\",2) == \"1001011\"\nassert odd_Equivalent(\"0110111\",2) == \"01110100\"\nassert odd_Equivalent(\"0000\",1) == \"0001\"\nassert odd_Equivalent(\"\",1) == \"00\"\nassert odd_Equivalent(\"\",0) == \"\"\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nodd_Equivalent(\"1101\", 2) == 2\nassert odd_Equivalent(\"1101\", 3) == 6\nassert odd_Equivalent(\"1101\", 4) == 10\nassert odd_Equivalent(\"1101\", 5) == 12\nassert odd_Equivalent(\"1101\", 6) == 14\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nodd_Equivalent(\"0010101010101011101\",2) == 14\nprint(\"correct\")\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nodd_Equivalent(s = \"1011010\", n = 4) == 0\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     common_in_nested_lists([[1, 2, 3], [2, 3], [1, 2], [3, 4, 5, 6]]) == set([2, 3])\nassert     common_in_nested_lists([['apple', 'pear', 'banana'], ['orange'], ['apple', 'pear'], ['banana']]) == set(['banana'])\nassert     common_in_nested_lists([[1, 2], [[1, 2]], [[1, 2]], [[1, 2]]]) == set([1, 2])\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     common_in_nested_lists([[1,2],[3]]) == [1,3]\nassert     common_in_nested_lists([[7],[[1,2],[3]]]) == [1,2]\nassert     common_in_nested_lists([[[[1]]],[[1,2],[3]]]) == [1,3]\nassert     common_in_nested_lists([[1,2,3],[1,2]]) == [1,2]\nassert     common_in_nested_lists([[1,2,3],[4,5]]) == []\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ncommon_in_nested_lists([[1], [2], [3]]) == [1, 2, 3]\nassert \ncommon_in_nested_lists([[1], [2], [3], [4]]) == [1, 2, 3, 4]\nassert \ncommon_in_nested_lists([[1, 2], [2, 3], [1, 2]]) == [1, 2]\nassert \ncommon_in_nested_lists([[1], [2, 3], [4, 5]]) == [1, 2, 3, 4, 5]\nassert \ncommon_in_nested_lists([[1, 2], [2, 3], [1]]) == [1]\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     common_in_nested_lists([['a', 'b', 'd', 'e', 'c', 'h'], ['a', 'c', 'f', 'g', 'e', 'j', 'k','m', 'f'], ['d', 'e', 'i', 'l', 'k','m', 'n'], ['b', 'c', 'f', 'h', 'l', 'n', 'o'], ['m', 'n', 'o', 'p'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k','m', 'n', 'o', 'p']]) == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k','m', 'n', 'o', 'p']\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     common_in_nested_lists([[], [], []]) == []\nassert     common_in_nested_lists([[1, 2], [], [1, 2]]) == [1]\nassert     common_in_nested_lists([[1, 2], [1, 2], [1, 2]]) == [1, 2]\nassert     common_in_nested_lists([[1, 2], [1, 2], [1]]) == [1, 2]\nassert     common_in_nested_lists([[1, 2], [2], [1, 2]]) == [1, 2]\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     common_in_nested_lists([[1,2],[3,4],[5,6]]) == [[5,6]]\nassert     common_in_nested_lists([[1,2],[3,4],[5,6],[8,9]]) == [[1,2],[3,4],[5,6]]\nassert     common_in_nested_lists([[1,2,3],[4,5,6,7],[8,9,10,11]]) == [[1,2,3],[4,5,6],[8,9,10,11]]\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert common_in_nested_lists([1,2,3,[4,5,6]]) == [4,5,6]\nassert common_in_nested_lists([1,2,3,[4,5,6],7]) == 7\nassert common_in_nested_lists([1,2,3,[4,5,6],7,[7,8,9]]) == 7\nassert common_in_nested_lists([1,2,3,[4,5,6],7,[7,8,9],[9,8,7]]) == [7,8,9]\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     common_in_nested_lists([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6], 'wrong output'\nassert     common_in_nested_lists([1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6], 'wrong output'\nassert     common_in_nested_lists([[1,2,3], [1,2], [1,2,3], [4,5,6]]) == [1,2,3,4,5,6], 'wrong output'\nassert     common_in_nested_lists([[1,2,3], [], [1,2,3], [4,5,6]]) == [], 'wrong output'\nassert     common_in_nested_lists([[1,2,3], [4,5,6], [1,2,3], [4,5,6]]) == [1,2,3,4,5,6], 'wrong output'\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    common_in_nested_lists([[1,2,3],\n    [2,2,1],\n    [1,1,1]]) == 1\n\nassert common_in_nested_lists([[1,2,3],\n    [3,2,1],\n    [1,1,1]]) == 1\n\nassert common_in_nested_lists([[1,2,3],\n    [1,1,1]]) == 1\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(\"\\t>>> Check result:\", common_in_nested_lists([1,2,[3,4,5],6,[7,8,9]]) == 7, \"The correct output is 7\")\nassert \nprint(\"\\t>>> Check result:\", common_in_nested_lists([1,2,[3,4,5],6,[7,8,9]]) == 8, \"The correct output is 8\")\nassert \nprint(\"\\t>>> Check result:\", common_in_nested_lists([1,2,[3,4,5],6,[7,8,9]]) == 9, \"The correct output is 9\")\nassert \nprint(\"\\t>>> Check result:\", common_in_nested_lists([1,2,[3,4,5],6,[7,8,9]]) == 10, \"The correct output is 10\")\nassert \nprint(\"\\t>>> Check result:\", common_in_nested_lists([1,2,[3,4,5],6,[7,8,9]]) == 11, \"The correct output is 11\")\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_integer('1') == True\nassert     check_integer('1.0') == True\nassert     check_integer('+1') == False\nassert     check_integer('-1') == False\nassert     check_integer('+12') == True\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_integer('10') == True, \"String with float number\"\nassert     check_integer('10') == False, \"String without float number\"\nassert     check_integer('ten') == True, \"String with integer\"\nassert     check_integer('ten') == False, \"String without integer\"\nassert     check_integer('0') == True, \"Integer zero\"\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_integer('1') == True, 'testing failed'\nassert     check_integer('1.5') == False, 'testing failed'\nassert     check_integer('abc') == False, 'testing failed'\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert check_integer('12')\nassert not check_integer('asdf')\nassert not check_integer('0')\nassert check_integer('2')\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_integer('a') == False, \"Wrong answer. Expected False\"\nassert     check_integer('-1') == False, \"Wrong answer. Expected False\"\nassert     check_integer('1a') == False, \"Wrong answer. Expected False\"\nassert     check_integer('1.1') == False, \"Wrong answer. Expected False\"\nassert     check_integer('0') == False, \"Wrong answer. Expected False\"\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_integer('0') is True\nassert     check_integer('1') is True\nassert     check_integer('-1') is True\nassert     check_integer('1.1') is False\nassert     check_integer('one') is False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_integer('42') == True,'Expected true'\nassert     check_integer('42.2') == True,'Expected true'\nassert     check_integer('-42') == True,'Expected true'\nassert     check_integer('0') == True,'Expected true'\nassert     check_integer('00') == True,'Expected true'\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    if type(text) == int:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_integer('1') is True\nassert     check_integer('-1') is True\nassert     check_integer('5') is True\nassert     check_integer('5.5') is True\nassert     check_integer('abc') is False\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n'''\nGiven a list of dictionaries \nreturn a list of dictionaries of distinct keys.\n'''\n\ndef distinct_keys(list1):\n    '''\n    Write a function to return distinct key values in a list of dictionaries.\n    '''\n    pass\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     empty_dit([{}, {}, {}])\nassert not empty_dit([{}, {}, {'greet':'hey'}])\nassert not empty_dit([{'greet':'hey'}])\nassert not empty_dit([{}])\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     empty_dit([]) == True, 'Empty list should return True'\nassert     empty_dit([{}]) == True, 'Empty dictionary should return True'\nassert     empty_dit([{1:2}, {}, {1:2}]) == False, 'Two empty dictionaries should return False'\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     empty_dit([{}, {}, {}]) == False, \"Expected empty_dit([{}, {}, {}]) to be False.\"\nassert     empty_dit([{}, {}, {}]) == True, \"Expected empty_dit([{}, {}, {}]) to be True.\"\nassert     empty_dit([{}, {}, {}]) == False, \"Expected empty_dit([{}, {}, {}]) to be False.\"\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     empty_dit([])\nassert not empty_dit([{}, {}, {}])\nassert not empty_dit([{}, {}, {}, {}])\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     empty_dit([{},{},{}]) == True, \"It should return true if all dictionaries are empty.\"\nassert     empty_dit([{'name': 'Jack'}, {'name': 'John'}, {'name': 'Tom'}]) == True, \"It should return true if all dictionaries are empty.\"\nassert     empty_dit([{'name': 'Jack'}, {'name': 'Jack'}, {'name': 'Tom'}]) == False, \"It should return false if not all dictionaries are empty.\"\nassert     empty_dit([{'a': 1, 'b': 2}, {'a': 1, 'b': 2}, {'a': 1, 'b': 2}]) == True, \"It should return true if all dictionaries are empty.\"\nassert     empty_dit([{'a': 1, 'b': 2}, {'a': 1, 'b': 2}, {'a': 1, 'b': 2}]) == False, \"It should return false if not all dictionaries are empty.\""
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef count_empty_dit(list1):\n    '''\n    Write a function to count the number of empty dictionaries in a list.\n    '''\n    pass\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef change_dict_key_order(dict1, dict2):\n    '''\n    Write a function to change the keys order of dict1 and change them with keys from dict2.\n    '''\n    pass\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     empty_dit([{}, {}, {}]) == True, 'Wrong'\nassert     empty_dit([{}, {}, {'a': 'b'}]) == False, 'Wrong'\nassert empty_dit([{}, {'a': 'b'}]) == False, 'Wrong'\n\ndef empty_dit2(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    pass\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tuple_to_int((1,2,3)) == 6, \"Expected 6, received {}\".format(tuple_to_int((1,2,3)))\nassert     tuple_to_int((1,2,3,4,5,6)) == 15, \"Expected 15, received {}\".format(tuple_to_int((1,2,3,4,5,6)))\nassert     tuple_to_int((1,2,3,4,5,6,7)) == 21, \"Expected 21, received {}\".format(tuple_to_int((1,2,3,4,5,6,7)))\nassert     tuple_to_int((1,2,3,4,5,6,7,8,9,10)) == 362880, \"Expected 362880, received {}\".format(tuple_to_int((1,2,3,4,5,6,7,8,9,10)))\n\ndef int_to_tuple(num):\n    '''\n    Write a function to convert a given integer into a tuple of positive integers.\n    '''\n    pass\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_to_int((3, 5, 7)) == -11\nassert     tuple_to_int((0, 3, 5, 7)) == -11\nassert     tuple_to_int((1,)) == -1\nassert     tuple_to_int((1, 1)) == -2\nassert     tuple_to_int((1, 1, 1)) == -3\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_to_int((3, 4, 6)) == 12\nassert     tuple_to_int((1, 1, 1)) == 3\nassert     tuple_to_int((1, 1)) == 2\nassert     tuple_to_int((4, 6, 9)) == 99\nassert     tuple_to_int((6, 8, 9)) == 99\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tuple_to_int((1,2)) == 10\nassert     tuple_to_int((1,2,3)) == 33\nassert     tuple_to_int((1,2,3,4)) == 24\nassert     tuple_to_int((1,2,3,4,5)) == 14\nassert     tuple_to_int((2,2,2,2)) == 4\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tuple_to_int((1, 2)) == 3, \"Wrong answer. This should be 5\"\nassert     tuple_to_int((3, 1, 5, 8, 2)) == 36, \"Wrong answer. This should be 36\"\nassert     tuple_to_int((10, 2)) == 12, \"Wrong answer. This should be 12\"\n\n\ndef int_to_tuple(num):\n    '''\n    Write a function to convert a given integer into a tuple of positive integers.\n    '''\n    pass\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tuple_to_int([1,2,3,4,5,6]) == 240, \"error\"\nassert     tuple_to_int((1,2,3,4,5,6)) == 240, \"error\"\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tuple_to_int(tuple()) == 0\nassert     tuple_to_int(tuple([1, 2, 3])) == 123\nassert     tuple_to_int(tuple([-1, -2, -3])) == -123\nassert     tuple_to_int(tuple([-1, -2, -3, -4])) == -123\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tuple_to_int((3,4)) == 5\nassert tuple_to_int((1,2,3)) == 6\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tuple_to_int((10, 20, 30, 40)) == 200\nassert     tuple_to_int((10, 20)) == 20\nassert     tuple_to_int((1, 10, 100)) == 1101\nassert     tuple_to_int((1,)) == 1\nassert     tuple_to_int((1, 10)) == 11\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tuple_to_int((1,2,3)) == 6\nassert     tuple_to_int((1,2)) == 2\nassert     tuple_to_int((2,2)) == 4\nassert     tuple_to_int((1,1,1)) == 3\nassert     tuple_to_int((1,2,3,4)) == 12\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     list_to_float([[2, 1], [8, 3]]) == [[2.0, 1.0], [8.0, 3.0]]\nassert     list_to_float([[2, 1], [2, 3]]) == [[2.0, 1.0], [2.0, 3.0]]\nassert     list_to_float([[2, 1], [2, 3.0]]) == [[2.0, 1.0], [2.0, 3.0]]\nassert     list_to_float([[2, 1], [2, 3.0]]) == [[2.0, 1.0], [2.0, 3.0]]\nassert     list_to_float([[2, 1, 2], [8, 3, 2]]) == [[2.0, 1.0, 2.0], [8.0, 3.0, 2.0]]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     list_to_float([[1, 2, 3], [3, 4, 5], ['a', 'b', 'c']]) == [[1., 2., 3.], [3., 4., 5.], ['a', 'b', 'c']]\nassert     list_to_float([['1', '2', '3'], ['3', '4', '5'], ['a', 'b', 'c']]) == [[1., 2., 3.], [3., 4., 5.], ['a', 'b', 'c']]\nassert     list_to_float([[1, 2, 3], ['a', 'b', 'c']]) == [[1., 2., 3.], ['a', 'b', 'c']]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     list_to_float([[2, 6, 9], [4, 7, 8]]) == [[2.0, 6.0, 9.0], [4.0, 7.0, 8.0]]\nassert list_to_float([[1.5, 'hello', True, False], ['a', 2.2, True, False], ['a', 1.2, True, False]]) == [[1.5, 'hello', True, False], ['a', 2.2, True, False], ['a', 1.2, True, False]]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     list_to_float([[\"x\", \"y\", \"z\"], [\"a\", \"b\", \"c\"], [\"1\", \"2\", \"3\"], [\"4\", \"5\", \"6\"]]) == [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [\"a\", \"b\", \"c\"], [\"1\", \"2\", \"3\"]]\nassert list_to_float([[\"x\", \"y\", \"z\"], [\"a\", \"b\", \"c\"], [\"1\", \"2\", \"3\"], [\"4\", \"5\", \"6\"]]) == [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [\"a\", \"b\", \"c\"], [\"1\", \"2\", \"3\"]]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     list_to_float([1, \"2\", 3.4, 5]) == [1.0, 2.0, 3.4, 5.0], \"Wrong\"\nassert     list_to_float([]) == [], \"Wrong\"\nassert     list_to_float([[1], 1]) == [1.0, 1.0], \"Wrong\"\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     list_to_float([[1, 2], [3, 4]]) == [[1.0, 2.0], [3.0, 4.0]]\nassert     list_to_float([[1, 'a', 3], ['b', 'c', 4]]) == [[1.0, 'a', 3.0], ['b', 'c', 4.0]]\nassert     list_to_float([['a', 1, 'b'], ['c', 'd', 4]]) == [['a', 1.0, 'b'], ['c', 'd', 4.0]]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     list_to_float([[1,2,3],[4,5,6]]) == [[1.0,2.0,3.0],[4.0,5.0,6.0]]\n\nassert list_to_float([[1,2,3],[4,5,6,7,8]]) == [[1.0,2.0,3.0],[4.0,5.0,6.0]]\n\n\n\ndef remove_duplicates(test_list):\n    '''\n    Write a function that removes all duplicate entries from a list of list\n    '''\n    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nlist_to_float([[1,2,3], [4,5,6],'string', ['string']])\nlist_to_float([[1,2,3], ['string','string']])\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint()\nprint('')\nprint('Testing: string_to_list')\nprint('-------------------')\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     string_to_list('hi world') == ['hi', 'world']\nassert     string_to_list(' hi  world') == ['hi', 'world']\nassert     string_to_list(' hi world') == ['hi', 'world']\nassert     string_to_list('hi world') == ['hi', 'world']\nassert     string_to_list('hello world') == ['hello', 'world']\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     string_to_list('Hello') == ['H', 'e', 'l', 'l', 'o']\nassert     string_to_list('Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.') == ['H', 'i', 'He', 'l', 'd', 'Be', 'lor', 'Or', 'Ne', 'nu', 'Ni', 'pa', 'll','so', 'th']\nassert     string_to_list('1, 2, 4, 7, 8, 9, 15, 16, 19') == ['1', '2', '4', '7', '8', '9', '15', '16', '19']\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef list_to_string(list):\n    '''\n    Write a function to convert a list of strings to a single string with each string separated by a space character.\n    '''\n    pass\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nstring_to_list('hello world') == ['hello', 'world']\nstring_to_list('hello world') == ['hello', 'world']\nstring_to_list('hello world') == ['hello', 'world']\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nstring_to_list(\"a string\") == [\"a\", \"string\"]\nstring_to_list(\"  a string\") == [\"a\", \"string\"]\nstring_to_list(\"a,b,c,d\") == [\"a\", \"b\", \"c\", \"d\"]\n\n\ndef find_max(input):\n    '''\n    Write a function to find the max in a list of numbers and return the index of the max.\n    '''\n    pass\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     string_to_list(\"abc def\") == [\"abc\", \"def\"]\nassert     string_to_list(\"abc, def\") == [\"abc\", \"def\"]\nassert     string_to_list(\"abc  def\") == [\"abc\", \"def\"]\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     string_to_list('spaces') == ['spaces']\nassert     string_to_list('spacesspace') == ['spacespace']\nassert     string_to_list('spaces     spacespace') == ['spaces','spacespace']\n\ndef nested_to_string(nested): \n    '''\n    Write a function to flatten a nested list. Names of this function should be nested_to_string and it \n    should take a nested list and return a string of all items in a list.\n    '''\n    pass\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     string_to_list(\"hi\") == [\"hi\"]\nassert     string_to_list(\"hi there\") == [\"hi\",\"there\"]\nassert     string_to_list(\"hi there hello\") == [\"hi\",\"there\",\"hello\"]\nassert     string_to_list(\"hi there hello there\") == [\"hi\",\"there\",\"hello\",\"there\"]\nassert     string_to_list(\"one\") == [\"one\"]\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     search([1,2,2,3,3,3,4]) == 3\nassert search([1,2,3,4]) == None\nassert search([1,2,2,2,2,2,2,2,2,2,2,3,3,3]) == 2\nassert search([1,2,2,2,2,2,2,2,2,2,2,3,3,3]) == 2\nassert search([1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3]) == 2\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(search([1,2,3,3,4,4,5,6]))\nassert search([1,2,2,3,4,5,6]) == 2\nprint(\"exercise 8: pass\")\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     search([1,1,2,3,4,5]) == 1\nassert     search([1,2,3,4,5,6]) == 6\nassert     search([1,2,3,4,5,6,6]) == 6\nassert     search([1,2,3,4,5,6,6,7,8,9]) == 8\nassert     search([1,2,3,4,5,5,6,6,7,8,9]) == 9\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     search([1, 2, 2, 3, 3, 3, 4, 4, 4, 5]) == 4, 'Wrong Answer'\nassert     search([1, 2, 2, 3, 3, 3, 4, 4, 4, 5]) == 4, 'Wrong Answer'\nassert     search([1, 2, 2, 2, 2, 3, 4, 4, 4, 5]) == 2, 'Wrong Answer'\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef search(arr, x):\n    '''\n    Write a python function to find the index of an element in an array if it is present else return -1.\n    '''\n    pass\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     search([1,2,3,4,6,6,7,8,8,9]) == 8\nassert     search([1,2,3,4,5,6,6,7,8,9]) == 7\nassert     search([1,2,3,4,5,6,7,8,9]) == 9\nassert     search([1,2,3,4,5,6,7,8,9]) == 7\nassert     search([1,2,3,4,5,6,6,7,8,9]) == 6\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nsearch([10,10,11,11,12,13]) == 11\nsearch([0,0,0,0,0,0,0]) == 0\nassert search([0,1,0,0,0,1,2]) == "
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     search([1,2,1,3,4,4,4,4,5])    == 1, \"should return 1\"\nassert     search([1,2,1,3,4,5,5,5,5])    == 5, \"should return 5\"\nassert     search([1,2,3,4,4,5,5,6,7])    == -1, \"should return -1\"\n\ndef search_array(arr, n):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     search([1,2,3,4,5]) == 4\nassert     search([1,2,3,4,5]) == -1\nassert     search([1,2,2,4,5]) == 2\nassert     search([1,2,2,4,5]) == -1\nassert     search([1,2,2,4,5]) == -1\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_product_tuple([(1,2),(3,4),(5,6),(7,8)]) == (24,60)\nassert max_product_tuple([(4,2),(3,8),(1,6),(7,4)]) == (24,60)\nassert max_product_tuple([(4,2),(3,8),(1,6),(7,4)]) == (24,60)\nassert max_product_tuple([(4,2),(3,8),(1,6),(7,4)]) == (24,60)\n\n'''\nGiven a list of (x,y) coordinates, where each point has a positive integer value, \nfind the maximum length of a line segment, where the line segment crosses any point.\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_product_tuple([(1, -3), (5, -4), (2, -1)]) == (5, -4)\nassert     max_product_tuple([(1, -3), (5, -4), (2, -1)], (1, 3)) == (5, -4)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_product_tuple([(2, -3), (1, 2), (1, 3), (5, 4), (-1, 1), (2, 2)]) == 8\nassert     max_product_tuple([(0, 0), (0, 0), (0, 0)]) == 0\nassert     max_product_tuple([(-3, -5), (-5, -2), (-7, -5), (-1, -1), (4, -2), (1, 4)]) == -12\nassert     max_product_tuple([(0, 0), (0, 0), (0, 0)]) == 0\nassert     max_product_tuple([]) == 0\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert max_product_tuple([(2,3),(1,7),(-2,-1),(5,2)]) == 28\nassert max_product_tuple([(2,-3),(-1,7),(-5,2)]) == 15\nassert max_product_tuple([(-1,7),(2,-3),(-5,2)]) == -54\nassert max_product_tuple([(7,2),(1,-3),(-5,2)]) == -54\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_product_tuple([(1,2),(-1,-2),(-3,2),(2,2),(-2,-3),(1,-1),(2,3),(-1,-1)]) == 4\nassert     max_product_tuple([(1,2),(3,4),(5,6)]) == 60\n\n\ndef min_product_tuple(list1):\n    '''\n    Write a function to find the minimum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    max_product_tuple([(2, 3), (4, 5), (6, 7), (4, 5), (6, 7)]) == 18\nassert max_product_tuple([(2, 3), (4, 5), (6, 7), (5, 6), (4, 5)]) == 30\nassert max_product_tuple([(5, 6), (4, 5), (6, 7), (4, 5), (6, 7)]) == 120\nassert max_product_tuple([(5, 6), (4, 5), (6, 7), (5, 6), (4, 5)]) == 120\nassert max_product_tuple([(2, 3), (4, 5), (6, 7), (4, 5), (6, 7)]) == 18\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     amicable_numbers_sum(2) == 3\nassert     amicable_numbers_sum(10) == 28\nassert     amicable_numbers_sum(5) == 10\nassert     amicable_numbers_sum(100) == 5050\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     amicable_numbers_sum(20) == 10\nassert     amicable_numbers_sum(40) == 20\nassert     amicable_numbers_sum(50) == 30\nassert     amicable_numbers_sum(100) == 68\nassert     amicable_numbers_sum(300) == 233\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     amicable_numbers_sum(10) == 55\nassert     amicable_numbers_sum(1) == 0\nassert     amicable_numbers_sum(100) == 446"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n'''\nAmicable numbers are pair of numbers whose sum is same as the product of the two numbers.\ne.g. 1 + 11 = 12\n1*11 = 1 + 1 + 2 = 3\n2*3 = 2 + 2 + 4 = 6\n12*6 = 1 + 1 + 1 + 1 + 2 + 2 + 4 = 24\n'''\n\ndef amicable_numbers_sum(limit):\n    '''\n    Find all the amicable numbers under a given limit.\n    '''\n    # Python3 program to find amicable numbers under a given limit\n    # Function to find sum of amicable numbers under limit\n    def find_sum(n):\n        # Return sum of all amicable numbers below n\n        s = 0\n        for i in range(1, n + 1):\n            if (s + i) == n:\n                s = 0\n                continue\n            elif (s + i) > n:\n                break\n            s += i\n\n        return s\n\n    # Function to return sum of amicable numbers\n    def sum_of_amicable_numbers(n):\n        # Return sum of all amicable numbers below n\n        s = 0\n        for i in range(1, n + 1):\n            if (s + i) == n:\n                s = 0\n                continue\n            elif (s + i) > n:\n                break\n            s += i\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    amicable_numbers_sum(100) == \n    706\n    \nassert \n    amicable_numbers_sum(1000) == \n    1213\n    \nassert \n    amicable_numbers_sum(10000) == \n    33049\n\nassert \n    amicable_numbers_sum(100000000) == \n    28657\n    \n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     amicable_numbers_sum(10) == 35\nassert     amicable_numbers_sum(100) == 438\nassert     amicable_numbers_sum(1000) == 484"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     angle_complex(1+1j, 1+2j) == cmath.phase(1+1j), 'Wrong Answer'\nassert     angle_complex(2,1) == cmath.phase(2), 'Wrong Answer'\nassert     angle_complex(2,3) == cmath.phase(2/3), 'Wrong Answer'\nassert     angle_complex(1,2) == cmath.phase(1), 'Wrong Answer'\nassert     angle_complex(3,4) == cmath.phase(3/4), 'Wrong Answer'\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     angle_complex(3+4j,6+7j) == 45\nassert     angle_complex(3+4j,6-7j) == -45\nassert     angle_complex(6+7j,3-4j) == -45\nassert     angle_complex(6-7j,3+4j) == 45\nassert     angle_complex(3+4j,3) == 0\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     angle_complex(4.5,3) == cmath.polar(complex(4.5,3))[1]\nassert     angle_complex(2,3) == cmath.polar(complex(2,3))[1]\nassert     angle_complex(4.5,-3) == cmath.polar(complex(4.5,-3))[1]\nassert     angle_complex(5,3) == cmath.polar(complex(5,3))[1]\nassert     angle_complex(-2,3) == cmath.polar(complex(-2,3))[1]\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     angle_complex(1, 0) == 0\nassert     angle_complex(1, 1) == 0\nassert     angle_complex(-1, -1) == 0\nassert     angle_complex(2, -1) == 1\nassert     angle_complex(1.1, -1.1) == 1\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     angle_complex(1+0j, -1+0j) == 90, 'First Test'\nassert     angle_complex(0+1j, -0+1j) == 90, 'Second Test'\nassert     angle_complex(1+0j, 0+1j) == 0, 'Third Test'\nassert     angle_complex(0+0j, 1+1j) == 0, 'Fourth Test'\n\nprint('PASSED')\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     angle_complex((3+4j), (0+0j)) ==  1.5707963267948966\nassert     angle_complex((2+3j), (1+0j)) == -1.5707963267948966\nassert     angle_complex((0+0j), (1+0j)) == -0.0\nassert     angle_complex((0+0j), (2+3j)) ==  0.0\nassert     angle_complex((0+0j), (1+1j)) == -1.5707963267948966\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     angle_complex(complex(1,1), complex(1,1)) == 0.0, 'incorrect'\nassert     angle_complex(complex(1,1), complex(-1,1)) == 0.7853981633974483, 'incorrect'\nassert     angle_complex(complex(1,1), complex(1,-1)) == 1.5707963267948966, 'incorrect'\nassert     angle_complex(complex(-1,1), complex(1,1)) == 1.5707963267948966, 'incorrect'\nassert     angle_complex(complex(1,1), complex(-1,-1)) == 2.3561944901923438, 'incorrect'\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     angle_complex(5,3) ==  cmath.polar(5+3j)[0]\nassert     angle_complex(5,3) ==  cmath.polar(5+3j)[1]\n\ndef angle(x,y):\n    '''\n    Write a function to get the angle of a vector.\n    '''\n    pass\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     angle_complex(4,5) == -0.7853981633974483\nassert     angle_complex(-4,5) ==  0.7853981633974483\nassert     angle_complex(1,5) ==  0.7853981633974483\nassert     angle_complex(0,0) ==  0\nassert     angle_complex(0,2) == -0.7853981633974483\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     angle_complex(0,0) == 0, \"Wrong Answer\"\nassert     angle_complex(1,0) == 90, \"Wrong Answer\"\nassert     angle_complex(0,-1) == -90, \"Wrong Answer\"\nassert     angle_complex(0,-2) == -180, \"Wrong Answer\"\nassert     angle_complex(0,1) == -90, \"Wrong Answer\"\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_length('10101001101') == 5\nassert find_length('10101101') == 2\nassert find_length('1010') == 0\nassert find_length('01100100') == 0\nassert find_length('101') == 1\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef find_length_of_longest_substring_with_at_most_k_distinct(s, k):\n    d = {}\n    max_d = 0\n    max_l = 0\n    left = 0\n    cnt = 0\n    for right in range(len(s)):\n        d[s[right]] = d.get(s[right], 0) + 1\n        if len(d) <= k:\n            cnt += 1\n            if max_d < cnt:\n                max_l = right - left + 1\n                max_d = cnt\n            elif max_d == cnt:\n                max_l = right - left + 1\n                \n        while len(d) > k:\n            left = d[s[left]]\n            d[s[left]] = d.get(s[left], 0) - 1\n            cnt -= 1\n            if left < k:\n                break\n    return max_l\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_length(0) == 0 \nassert     find_length(11) == 0 \nassert     find_length(0101) == 3\nassert     find_length(11011101) == 6\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_length(\"1010011\") == 0\nassert     find_length(\"10101010\") == 3\nassert     find_length(\"11100110\") == 3\nassert     find_length(\"00111\") == 1\nassert     find_length(\"0101\") == 3\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_length('00110010001101') == 4\nassert     find_length('001100100000111') == 3\nassert     find_length('001100100000110') == 2\nassert     find_length('111111') == 0\n\n'''\nWrite a function that takes in a binary string as a parameter and returns an integer. Your function should return the value that appears most frequently in the given binary string. If there is a tie, return the lowest value.\n'''\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_length('') == 0\nassert     find_length('00') == 0\nassert     find_length('10') == 2\nassert     find_length('101') == 1\nassert     find_length('100') == 1\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_length('00110') == 1, 'Should return 1'\nassert     find_length('11001') == 3, 'Should return 3'\nassert     find_length('100100') == 4, 'Should return 4'\nassert     find_length('10100') == 5, 'Should return 5'\nassert     find_length('10101') == 3, 'Should return 3'\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_length(\"11010101\") == 3\nassert     find_length(\"10101\") == 2\nassert     find_length(\"001101\") == 3\nassert     find_length(\"0011010101\") == 0\n\ndef find_gaps(string):\n    '''\n    Write a function to find the minimum number of 0s and maximum number of 1s in any substring of the given binary string.\n    '''\n    pass\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(sum(5,5))\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     (sum(32,48) == 32+24+8+4)\nassert     (sum(256,64) == 256+32+16+8)\nassert     (sum(64,128) == 64+16+8+4)\nassert     (sum(1024,4096) == 1024+32+16+8)\nassert     (sum(128,1024) == 128+16+8+4)\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum(1,4) == 3\nassert sum(1,2) == 1\nassert sum(10,20) == 10\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum(10,30) == 10 + 15 + 5\nassert     sum(30,10) == 10 + 15 + 5\nassert     sum(0,30) == 0\nassert     sum(30,0) == 0\nassert     sum(0,0) == 0\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert sum(10,12) == 4\nassert sum(20,30) == 10\nassert sum(6,6) == 6\nassert sum(7,9) == 5\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum(9,36) == 3, \"Incorrect result\"\nprint(\"sum is correct\")\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum(12,16) == 4\nassert     sum(100,200) == 200\nassert     sum(19,22) == 22\nassert     sum(1,2) == 3\nassert     sum(0,1) == 1\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n'''\n    To solve the given problem, we need to find the first common divisor (also called lowest common multiple) of two numbers.\n    The first common divisor of two numbers is the smallest positive integer that evenly divides both of them.\n    Write a python function to calculate the first common divisor of two numbers.\n    Write a python program to find the first common divisor of two numbers.\n'''\n\ndef lcm(a,b): \n    '''\n    Write a python function to find the least common multiple (also called greatest common divisor or HCF) of two given numbers.\n    '''\n    pass\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     multiply_int(0, 0) == 0\nassert     multiply_int(1, 0) == 0\nassert     multiply_int(0, 1) == 0\nassert     multiply_int(-1, 0) == 0\nassert     multiply_int(0, -1) == 0\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     multiply_int(2, 3) == 6\nassert     multiply_int(-2, -3) == -6\nassert     multiply_int(2, -3) == -6\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     multiply_int(2, 5) == 10\nassert     multiply_int(-2, 5) == -10\nassert     multiply_int(2, -5) == -20\nassert     multiply_int(-2, -5) == 20\nassert     multiply_int(0, 0) == 0\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     multiply_int(2, 2) == 4\nassert     multiply_int(4, 5) == 20\nassert     multiply_int(1000000, 1000000) == 100000000\nassert     multiply_int(2, -2) == 0\nassert     multiply_int(-2, -2) == 0\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     multiply_int(1, 1) == 1, \"1 * 1 = 1\"\nassert     multiply_int(2, 5) == 10, \"2 * 5 = 10\"\nassert     multiply_int(2, -5) == -10, \"2 * -5 = -10\"\nassert     multiply_int(-2, 5) == -10, \"5 * -2 = 10\"\n\nprint(\"Test passed\")\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    multiply_int(4, 5) == 20\nassert multiply_int(4, -5) == -20\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert multiply_int(1, 2) == 2\nassert multiply_int(2, 5) == 10\nassert multiply_int(3, 3) == 9\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     multiply_int(1, 2) == 2\nassert     multiply_int(3, 4) == 12\nassert     multiply_int(-1, -2) == -4\nassert     multiply_int(-1, 2) == -2\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    # Test Case 1\n    long_words(4, [\"Python\", \"Computer\", \"In\", \"Language\"]) == [\"Computer\", \"Language\"]\n    # Test Case 2\n    long_words(4, [\"Python\", \"Java\", \"Computer\", \"In\", \"Python\", \"Language\"]) == [\"Java\", \"Python\"]\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     long_words(4, [\"pneumonia\", \"birch\", \"coughing\", \"respiratory\", \"nausea\"]) == [\"respiratory\", \"nausea\"]\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     long_words(3, ['Python', 'is','really', 'great']) == ['Python', 'is','really']\nassert     long_words(3, ['Python', 'is','really', 'great', 'java', 'is', 'awesome', 'javascript']) == ['Python', 'is','really', 'java']\nassert     long_words(3, ['Python', 'is','really', 'great', 'java', 'is', 'awesome', 'javascript', 'totally']) == ['Python', 'is','really', 'java', 'javascript']\n\n\n\ndef longest_common_prefix(strs):\n    '''\n    Write a function to find the longest common prefix string among multiple given strings.\n    '''\n    pass\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(\"All tests: OK\")\n\ndef long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    output = []\n    for word in words:\n        if len(word) > n:\n            output.append(word)\n    return output\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert long_words(5,[\"python\", \"cat\", \"geeks\"]) == [\"python\", \"cat\", \"geeks\"], \"Should return all the words with more than 5 characters\"\nassert long_words(2,[\"python\", \"cat\", \"geeks\"]) == [\"python\", \"geeks\"], \"Should only return the word with more than 2 characters\"\nassert long_words(4,[\"python\", \"cat\", \"geeks\"]) == [], \"Should return an empty list if no word has more than 4 characters\"\nassert long_words(0,[\"python\", \"cat\", \"geeks\"]) == [\"python\"], \"Should return an empty list if no word has more than 0 characters\"\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef has_diff_len(str_1, str_2):\n    '''\n    Write a function to check whether two given strings are anagrams or not.\n    An anagram is a word, phrase, or name formed by rearranging the letters of another, such as'spar', formed from 'rasp'.\n    '''\n    pass\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     long_words(1, [\"w\", \"wo\", \"wor\", \"worl\", \"world\"]) == [\"w\", \"wo\", \"wor\", \"worl\"]\nassert     long_words(2, [\"hello\", \"leetcode\"]) == [\"hello\"]\nassert     long_words(3, [\"lets\", \"lets\", \"lets\", \"lets\"]) == [\"lets\"]\nassert     long_words(4, [\"hello\", \"abcdef\", \"abcdefg\", \"abcdefhello\", \"ab\"]) == [\"abcdef\", \"abcdefg\"]\nassert     long_words(5, [\"a\", \"aaa\", \"aaaa\", \"aaaaa\", \"aaaaaa\"]) == [\"aaa\", \"aaaa\", \"aaaaa\"]\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     long_words(5, ['hello', 'hi', 'hey', 'bye']) == ['hello', 'hi', 'bye']\nassert     long_words(5, ['hello', 'hi', 'bye']) == ['hi', 'bye']\nassert     long_words(5, ['hello']) == ['hello']\nassert     long_words(5, ['he', 'hi', 'hello', 'bye']) == ['hi', 'hello', 'bye']"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nassert long_words(3, [\"python\", \"numpy\", \"dtype\", \"datetime\"]) == [\"dtype\"]\nassert long_words(2, [\"apple\", \"car\"]) == [\"apple\"]\nassert long_words(1, [\"he\", \"she\", \"his\"]) == []\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     magic_square_test([\n        [5,3,4,6,7,8,9,1,2],\n        [6,7,2,1,9,5,3,4,8],\n        [1,9,8,3,4,2,5,6,7],\n        [8,5,9,7,6,1,4,2,3],\n        [4,2,6,8,5,3,7,9,1],\n        [7,1,3,9,2,4,8,5,6],\n        [9,6,1,5,3,7,2,8,4],\n        [2,8,7,4,1,9,6,3,5],\n        [3,4,5,2,8,6,1,7,9]\n    ]) == False, 'Should return False if the matrix is not magic'\n\nassert     magic_square_test([\n        [2,7,4,1,5,9,8,3,6],\n        [6,1,8,7,5,3,2,4,9],\n        [4,9,2,3,8,6,1,7,5],\n        [8,5,3,7,9,4,2,6,1],\n        [3,4,5,6,1,7,2,8,9],\n        [9,6,1,8,3,5,4,2,7],\n        [7,2,4,9,6,1,5,3,8],\n        [1,3,5,2,8,7,9,6,4],\n        [5,9,8,6,4,3,2,1,7]\n    ]) == True, 'Should return True if the matrix is magic'\n\nprint('We are done')"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     magic_square_test([[8, 1, 6],\n                            [3, 5, 7],\n                            [4, 9, 2]]) == True, \\\n        \"test case failed\"\nassert     magic_square_test([[2, 7, 6],\n                            [9, 5, 1],\n                            [4, 3, 8]]) == False, \\\n        \"test case failed\"\nassert     magic_square_test([[1, 2, 3],\n                            [4, 5, 6],\n                            [7, 8, 9]]) == False, \\\n        \"test case failed\"\nassert     magic_square_test([[1, 2, 3, 4],\n                            [5, 6, 7, 8],\n                            [9, 10, 11, 12],\n                            [13, 14, 15, 16]]) == False, \\\n        \"test case failed\"\nassert     magic_square_test([[1, 2, 3, 4],\n                            [5, 6, 7, 8],\n                            [9, 10, 11, 12],\n                            [13, 14, 15, 16],\n                            [17, 18, 19, 20],\n                            [21, 22, 23, 24]]) == True, \\\n        \"test case failed\"\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     magic_square_test([[8, 3, 4], \n    [1, 5, 9], \n    [6, 7, 2]]) == True\nassert     magic_square_test([[4, 9, 2], \n    [5, 3, 7], \n    [8, 1, 6]]) == False\nassert     magic_square_test([[1, 2, 3], \n    [4, 5, 6], \n    [7, 8, 9]]) == False\nassert     magic_square_test([[2, 7, 6], \n    [8, 5, 1], \n    [9, 3, 4]]) == Fals"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     magic_square_test([\n            [4, 3, 8, 9],\n            [9, 5, 1, 3],\n            [2, 7, 6, 4],\n            [1, 6, 2, 5]\n        ]) == True, \"Should be True\"\nassert     magic_square_test([\n            [1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]\n        ]) == False, \"Should be False\"\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nmagic_square_test([[8,3,4],[1,5,9],[6,7,2]])\nmagic_square_test([[4,9,2],[3,5,7],[8,1,6]])\nmagic_square_test([[2,7,6],[9,5,1],[4,3,8]])"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_occurrences([1,1,1,2,2,3,3]) == 3\nassert     max_occurrences([1,1,1,2,2,3,3,3,1,1,1,2,2,3,3,3,2,2]) == 1\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef find_max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    pass\n\n\ndef find_max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    occurrence_count = defaultdict(int)\n    for item in nums:\n        occurrence_count[item] += 1\n    return max(occurrence_count.items(), key=lambda x: x[1])[0]\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert \nassert \nassert max_occurrences([1, 2, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, "
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_occurrences([1, 2, 3, 4]) == 1, \\\n    'Fail the test'\nassert max_occurrences([1, 2, 3, 4, 1]) == 4, \\\n    'Fail the test'\nassert max_occurrences([1, 2, 3, 4, 1, 4]) == 4, \\\n    'Fail the test'\nassert max_occurrences([3, 3, 3, 3, 4]) == 4, \\\n    'Fail the test'\nassert max_occurrences([1, 2, 3, 4, 1, 2, 2, 3]) == 4, \\\n    'Fail the test'\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef max_frequency(nums):\n    '''\n    Given an array of integers, find the most frequent integer in it. The most frequent element is the one that appears most frequently in the array.\n\n    Example 1:\n\n    Input: arr[] = {1,2,3,1,2,3,3,4,4,4}\n    Output: 4\n    Explanation: The most frequent element is 4, its frequency is 5.\n\n    Example 2:\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nnums = [1, 1, 2, 2, 2, 1, 1, 3, 3, 3, 3, 3, 3, 3, 3]\nassert max_occurrences(nums) == 3\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_occurrences([1,2,2,1,1,3,3,1,1,2,2,1,2,1,3,3,1,1,3,3,1,2,2,1]) == 1\n\ndef max_frequency(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # [1,2,2,1,1,3,3,1,1,2,2,1,2,1,3,3,1,1,3,3,1,2,2,1]\n    # freq = defaultdict(int)\n    # for n in nums:\n    #     freq[n] += 1\n    # return freq.most_common(1)[0][0]\n    freq = {}\n    for n in nums:\n        freq[n] = freq.get(n, 0) + 1\n    return max(freq, key=freq.get)\n\ndef max_frequency(nums):\n    freq = {}\n    for n in nums:\n        freq[n] = freq.get(n, 0) + 1\n    return max(freq, key=freq.get)\n\ndef max_frequency(nums):\n    freq = defaultdict(int)\n    for n in nums:\n        freq[n] += 1\n    return max(freq, key=freq.get)\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_occurrences([1,1,1,2,2,3,3,4,4,4,5,6]) == 4, \\\n    'Output: 4'\nassert     max_occurrences([]) == None, \\\n    'Output: None'\nassert     max_occurrences([1,2,3]) == None, \\\n    'Output: None'\nassert     max_occurrences([1,2,3,4,5,6]) == None, \\\n    'Output: None'\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n    return max(counts.items(), key=lambda x: x[1])\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     reverse_vowels( \"hello\" ) == \"holle\"\nassert     reverse_vowels( \"abcd\" ) == \"dcba\"\nassert     reverse_vowels( \"why\" ) == \"why\"\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    result = \"\"\n    for char in str1:\n        if char in vowels:\n            result += char\n        else:\n            result += char\n    return result\n\nassert \n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     reverse_vowels('hello') == 'holle', \"Wrong\"\nassert     reverse_vowels('hello world') == 'dlrow olleh', \"Wrong\"\nassert     reverse_vowels('hello world') == 'dlrow olleh', \"Wrong\"\nassert     reverse_vowels('hello world') == 'dlrow olleh', \"Wrong\"\nassert     reverse_vowels('hello world') == 'dlrow olleh', \"Wrong\"\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     reverse_vowels('hieeelalaooo') == 'oohlalaeeelahi', 'test failed'\nassert     reverse_vowels('kathrine') == 'inzrdtge', 'test failed'\nassert     reverse_vowels('h') == 'z', 'test failed'\nassert     reverse_vowels('a') == 'a', 'test failed'\nassert     reverse_vowels('xyz') == 'zyx', 'test failed'\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef reverse_vowels_modified(str1):\n    '''\n    Modify the above function to convert the vowels into a new string and return it.\n    '''\n    pass\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     reverse_vowels(\"hello\") == \"holle\"\nassert     reverse_vowels(\"a\") == \"a\"\nassert     reverse_vowels(\"reversing_vowels\") == \"gingers_apace\"\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     reverse_vowels('hello') == 'holle'\nassert     reverse_vowels('this is the meen') == 'this is the meen'\nassert     reverse_vowels('we') == 'we'\nassert     reverse_vowels('hi my name is Fred') == 'edgih im fred'\nassert     reverse_vowels('oh!') == 'h!o'\nprint('Great test')\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     reverse_vowels(\"hello!\") == \"!olleh\", \"Should return '!olleh' for the string 'hello!'\"\nassert     reverse_vowels(\"The greatest victory is worth the waste of time, but not the waste of time.\") == \"The gUrAtE tHe greatest vOlUcI tHe wAtEr wAsT of tHe wAsT.\", \"Should return 'The gUrAtE tHe greatest vOlUcI tHe wAtEr wAsT of tHe wAsT.' for the string 'The greatest victory is worth the waste of time, but not the waste of time.'\""
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tup_string(tuple()) == \"\"\nassert     tup_string((1,)) == \"1\"\nassert     tup_string((1,2)) == \"1 2\"\nassert     tup_string((1,2,3)) == \"1 2 3\"\nassert     tup_string((1,2,3,4)) == \"1 2 3 4\"\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    tup_string((1,2,3,4)) == '1, 2, 3, 4'\nassert tup_string((1,2,'3',4)) == '1, 2, 3, 4'\nassert tup_string((1,2,'3',4,5,6)) == '1, 2, 3, 4, 5, 6'\nassert tup_string((1,2,'3',4,5,6,'7',8)) == '1, 2, 3, 4, 5, 6, 7, 8'\nassert tup_string((1,2,3,4)) == '1, 2, 3, 4'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tup_string((1, 2, 3, 4, 5, 6)) == '1, 2, 3, 4, 5, 6'\nassert     tup_string((1, 1, 1, 1, 1, 1)) == '1, 1, 1, 1, 1, 1'\nassert     tup_string((1,)) == '1, '\nassert     tup_string((1, 2, 3, 4, 5, 6)) == '1, 2, 3, 4, 5, 6'\nassert     tup_string((1, 2, 3, 4, 5, 6)) == '1, 2, 3, 4, 5, 6'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tup_string((1, 'hello', 'world')) == '1hello2world'\nassert     tup_string((5, 'hello', 'world')) == '5hello2world'\nassert     tup_string((3, 5)) == '35'\nassert     tup_string((0,)) == '0'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tup_string((1,2,3)) == str(tuple(range(1,4))), \"First\"\nassert     tup_string((1,2,3,4)) == str(tuple(range(1,5))), \"Second\"\nassert     tup_string((1,2,3,4,5,6,7,8,9,10)) == str(tuple(range(1,11))), \"Third\"\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert         tup_string((10, 20, 30)) == '10 20 30'\nassert         tup_string((10,)) == '10'\nassert         tup_string((10, 20)) == '10 20'\nassert         tup_string((10, 20, 30, 40, 50)) == '10 20 30 40 50'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(str(x) for x in tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tup_string(()) == '()', 'Wrong return value'\nassert     tup_string((1, 2, 3)) == '(1, 2, 3)', 'Wrong return value'\nassert     tup_string((1, 2, '3')) == '(1, 2, \\'3\\')', 'Wrong return value'\nassert     tup_string((1, '2', 3)) == '(1, \\'2\\', 3)', 'Wrong return value'\nassert     tup_string((1, '2', '3')) == '(1, \\'2\\', \\'3\\')', 'Wrong return value'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_negativenum([1, -2, 3, -4, -5, -6]) == -7, \"Should be -7\"\nassert     sum_negativenum([-2, -4, -6, -8, -10]) == -32, \"Should be -32\"\nassert     sum_negativenum([1, 2, 3, 4, 5, 6, -7]) == 0, \"Should be 0\"\nassert     sum_negativenum([-2, -4, -6, -8, -10]) == -32, \"Should be -32\"\nprint('All tests passed')\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_negativenum([0,-3,4,9]) == -6\nassert     sum_negativenum([0,-3,4,-9]) == -6\nassert     sum_negativenum([0,-3,4,-9,5,4,4,4]) == -3\nassert     sum_negativenum([-3,-4,5,4,-4]) == 3\nassert     sum_negativenum([-3,-4,5,-4,-4]) == 0\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print('Testing sum_negativenum...')\n    assert sum_negativenum([-3, -4, -5]) == -3\n    assert sum_negativenum([-3, 4, -5]) == -3\n    assert sum_negativenum([-3, 4, 5]) == -3\n    "
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nsum_negativenum([-1, -1, -1]) == 0\n\ndef sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # the nums will be passed as list of numbers\n    # so the below step will make them int type\n    nums = list(map(int,nums))\n\n    # we will add the sum of negative numbers\n    # to the number list\n    return sum([n for n in nums if n < 0])\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_negativenum([-1, -2, -3, -4, -5, -6]) == -21\nassert     sum_negativenum([-1, -2, -3, -4, -5, 0, 1, 2]) == -10\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_negativenum([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == -1\nassert     sum_negativenum([-1, -2, -3, -4, -5]) == -10\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_negativenum([2,-3,4,-1,5,-9,-3]) == 6\nassert     sum_negativenum([2,-3,4]) == 5\nassert     sum_negativenum([0,-1,1]) == 1\nassert     sum_negativenum([]) == 0\nassert     sum_negativenum([-1]) == 0\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_negativenum([-1, -2, -3, -4]) == -1\nassert     sum_negativenum([-4, -3, -2, -1]) == -5\nassert     sum_negativenum([1, 2, -3, 4]) == -1\nassert     sum_negativenum([1, -2, -3, -4]) == -1\nassert     sum_negativenum([-1, -2, 3, -4]) == -5\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     hexagonal_num(0) == 0\nassert hexagonal_num(1) == 3\nassert hexagonal_num(2) == 7\nassert hexagonal_num(3) == 11\nassert hexagonal_num(4) == 15\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nhexagonal_num(1) == 1\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nhexagonal_num(1) == 1\nhexagonal_num(2) == 3\nhexagonal_num(3) == 5\nhexagonal_num(4) == 7\nhexagonal_num(5) == 11\nhexagonal_num(6) == 13\nhexagonal_num(7) == 15\nhexagonal_num(8) == 19\nhexagonal_num(9) == 23\nhexagonal_num(10) == 29\nhexagonal_num(11) == 31\nhexagonal_num(12) == 37\nhexagonal_num(13) == 41\nhexagonal_num(14) == 43\nhexagonal_num(15) == 47\nhexagonal_num(16) == 53\nhexagonal_num(17) == 59\nhexagonal_num(18) == 61\nhexagonal_num(19) == 67\nhexagonal_num(20) == 71\nhexagonal_num(21) == 73\nhexagonal_num(22) == 79\nhexagonal_num(23) == 83\nhexagonal_num(24) == 89\nhexagonal_num(25) == 97\nhexagonal_num(26) == 101\nhexagonal_num(27) == 103\nhexagonal_num(28) == 107\nhexagonal_num(29) == 109\nhexagonal_num(30) == 113\nhexagonal_num(31) == 127\nhexagonal_num(32) == 131\nhexagonal_num(33) == 137\nhexagonal_num(34) == 139\nhexagonal_num(35) == 149\nhexagonal_num(36) == 151\nhexagonal_num(37) == 157\nhexagonal_num(38) == 163\nhexagonal_num(39) == 167\nhexagonal_num(40) == 173\nhexagonal_num(41) == 179\nhexagonal_num(42) == 181\nhexagonal_num(43) == 191\nhexagonal_num(44) == 193\nhexagonal_num(45) == 197\nhexagonal_num(46) == 199\nhexagonal_num(47) == 201\nhexagonal_num(48) == 205\nhexagonal_num(49) == 209\nhexagonal_num(50) == 211\nhexagonal_num(51) == 215\nhexagonal_num(52) == 219\nhexagonal_num(53) == 221\nhexagonal_num(54) == 225\nhexagonal_num(55) == 229\nhexagonal_num(56) == 231\nhexagonal_num(57) == 235\nhexagonal_num(58) == 239\nhexagonal_num(59) == 241\nhexagonal_num(60) == 245\nhexagonal_num(61) == 249\nhexagonal_num(62) == 251\nhexagonal_num(63) == 255\nhexagonal_num(64) == 259\nhexagonal_num(65) == 263\nhexagonal_num(66) == 269\nhexagonal_num(67) == 271\nhexagonal_num(68) == 277\nhexagonal_num(69) == 281\nhexagonal_num(70) == 283\nhexagonal_num(71) == 293\nhexagonal_num(72) == 295\nhexagonal_num(73) == 299\nhexagonal_num(74) == 301\nhexagonal_num(75) == 305\nhexagonal_num(76) == 309\nhexagonal_num(77) == 311\nhexagonal_num(78) == 313\nhexagonal_num(79) == 317\nhexagonal_num(80) == 319\nhexagonal_num(81) == 321\nhexagonal_num(82) == 323\nhexagonal_num(83) == 329\nhexagonal_num(84) == 331\nhexagonal_num(85) == 335\nhexagonal_num(86) == 339\nhexagonal_num(87) == 341\nhexagonal_num(88) == 343\nhexagonal_num(89) == 347\nhexagonal_num(90) == 349\nhexagonal_num(91) == 353\nhexagonal_num(92) == 357\nhexagonal_num(93) == 361\nhexagonal_num(94) == 365\nhexagonal_num(95) == 369\nhexagonal_num(96) == 373\nhexagonal_num(97) == 377\nhexagonal_num(98) == 379\nhexagonal_num(99) == 383\nhexagonal_num(100) == 387\nhexagonal_num(101) == 391\nhexagonal_num(102) == 395\nhexagonal_num(103) == 399\nhexagonal_num(104) == 401\nhexagonal_num(105) == 405\nhexagonal_num(106) == 409\nhexagonal_num(107) == 411\nhexagonal_num(108) == 415\nhexagonal_num(109) == 419\nhexagonal_num(110) == 421\nhexagonal_num(111) == 423\nhexagonal_num(112) == 427\nhexagonal_num(113) == 429\nhexagonal_num(114) == 431\nhexagonal_num(115) == 435\nhexagonal_num(116) == 439\nhexagonal_num(117) == 443\nhexagonal_num(118) == 447\nhexagonal_num(119) == 451\nhexagonal_num(120) == 455\nhexagonal_num(121) == 459\nhexagonal_num(122) == 463\nhexagonal_num(123) == 467\nhexagonal_num(124) == 471\nhexagonal_num(125) == 475\nhexagonal_num(126) == 479\nhexagonal_num(127) == 483\nhexagonal_num(128) == 487\nhexagonal_num(129) == 491\nhexagonal_num(130) == 495\nhexagonal_num(131) == 499\nhexagonal_num(132) == 503\nhexagonal_num(133) == 507\nhexagonal_num(134) == 511\nhexagonal_num(135) == 515\nhexagonal_num(136) == 519\nhexagonal_num(137) == 523\nhexagonal_num(138) == 527\nhexagonal_num(139) == 531\nhexagonal_num(140) == 535\nhexagonal_num(141) == 539\nhexagonal_num(142) == 543\nhexagonal_num(143) == 547\nhexagonal_num(144) == 551\nhexagonal_num(145) == 555\nhexagonal_num(146) == 559\nhexagonal_num(147) == 563\nhexagonal_num(148) == 567\nhexagonal_num(149) == 571\nhexagonal_num(150) == 575\nhexagonal_num(151) == 579\nhexagonal_num(152) == 583\nhexagonal_num(153) == 587\nhexagonal_num(154) == 591\nhexagonal_num(155) == 595\nhexagonal_num(156) == 599\nhexagonal_num(157) == 603\nhexagonal_num(158) == 607\nhexagonal_num(159) == 611\nhexagonal_num(160) == 615\nhexagonal_num(161) == 619\nhexagonal_num(162) == 623\nhexagonal_num(163) == 627\nhexagonal_num(164) == 631\nhexagonal_num(165) == 635\nhexagonal_num(166) == 639\nhexagonal_num(167) == 643\nhexagonal_num(168) == 647\nhexagonal_num(169) == 651\nhexagonal_num(170) == 655\nhexagonal_num(171) == 659\nhexagonal_num(172) == 663\nhexagonal_num(173) == 667\nhexagonal_num(174) == 671\nhexagonal_num(175) == 675\nhexagonal_num(176) == 679\nhexagonal_num(177) == 683\nhexagonal_num(178) == 687\nhexagonal_num(179) == 691\nhexagonal_num(180) == 695\nhexagonal_num(181) == 699\nhexagonal_num(182) == 703\nhexagonal_num(183) == 707\nhexagonal_num(184) == 711\nhexagonal_num(185) == 715\nhexagonal_num(186) == 719\nhexagonal_num(187) == 723\nhexagonal_num(188) == 727\nhexagonal_num(189) == 731\nhexagonal_num(190) == 735\nhexagonal_num(191) == 739\nhexagonal_num(192) == 743\nhexagonal_num(193"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n'''\nGiven n, generate a hexagonal pattern in the form of a list of strings. \nThe strings should be arranged in such a way that the i-th row begins with \nthe i-th string, followed by strings constructed by concatenating the hexagonal \npattern in a (odd) way for each subsequent row.\n'''\n\ndef generate_hexagonal_pattern(n): \n    '''\n    Write a function to generate a hexagonal pattern in the form of a list of \n    strings. The strings should be arranged in such a way that the i-th row begins \n    with the i-th string, followed by strings constructed by concatenating the \n    hexagonal pattern in a (odd) way for each subsequent row. \n    '''\n    pass\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(\"Pass\" if (10 == hexagonal_num(1)) else \"Fail\")\nprint(\"Pass\" if (16 == hexagonal_num(2)) else \"Fail\")\nprint(\"Pass\" if (19 == hexagonal_num(3)) else \"Fail\")\nprint(\"Pass\" if (25 == hexagonal_num(4)) else \"Fail\")\nprint(\"Pass\" if (48 == hexagonal_num(5)) else \"Fail\")\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     hexagonal_num(0) == 0, \"Error hexagonal_num(0)\"\nassert     hexagonal_num(1) == 1, \"Error hexagonal_num(1)\"\nassert     hexagonal_num(2) == 3, \"Error hexagonal_num(2)\"\nassert     hexagonal_num(3) == 5, \"Error hexagonal_num(3)\"\nassert     hexagonal_num(4) == 7, \"Error hexagonal_num(4)\"\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     hexagonal_num(1) == 1\nassert     hexagonal_num(2) == 5\nassert     hexagonal_num(3) == 13\nassert     hexagonal_num(4) == 31\nassert     hexagonal_num(5) == 145\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert zero_count([]) == 0.0\nassert zero_count([1,0,1,1,1]) == 0.0\nassert zero_count([1,0,0,1,0,1,1,0,1,1,0,0,0,0,1,1,0,0,0,0,1,1,1,0,1,0,0,1,1,1,1,0,1,1,1,1,0,0,0,0,0,1,1,1,1,0,0,0,1,1,1,1,1,0,1,1,0,0,0,1,1,1,1,0,0,1,1,0,0,1,1,1,1,0,0,0,0,1,1,0,1,0,1,1,0,1,1,1,1,0,1,0,1,1,1,1,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,0,1,0,1,1,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,0,1,1,0,1,1,1,1,1,0,0,1,1,1,0,0,1,1,0,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     zero_count([0, 0, 1, 1]) == 0.25\nassert     zero_count([0, 1, 0, 1, 0, 1, 0, 1, 0]) == 0.75\nassert     zero_count([0, 0, 1, 1, 0, 0, 0, 1, 0]) == 0.5\nassert     zero_count([0, 0, 1, 1, 0, 0, 0, 1, 0, 1]) == 0.5\nassert     zero_count([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    zero_count([1,2,3,0]) == 0.5\n    zero_count([0,1,3,0,4,5]) == 0.5\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     zero_count([1, 2, 3, 4]) == 0.25\nassert     zero_count([0, 0, 1, 2, 3, 4, 5, 6, 7, 0]) == 0.0\nassert     zero_count([0, 1, 2, 3, 4, 5, 6, 7, 0]) == 0.25\nassert     zero_count([0, 0, 1, 1, 1, 1, 1, 1, 0]) == 0.5\nassert     zero_count([1, 1, 1, 1, 1, 1, 1, 0, 0]) == 1.0\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     zero_count([0,1,0,1,1]) == 0.5\nassert     zero_count([0,1,0,1,0]) == 0.5\nassert     zero_count([0,0,0,0,0]) == 0\nassert     zero_count([0,1,0,0,0]) == 0.5\nassert     zero_count([0,1,0,1,1,1]) == 0.5\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    is_Sum_Of_Powers_Of_Two(2) == True\n    is_Sum_Of_Powers_Of_Two(4) == False\n    is_Sum_Of_Powers_Of_Two(10) == False\n    is_Sum_Of_Powers_Of_Two(29) == True\n    is_Sum_Of_Powers_Of_Two(36) == True\n    is_Sum_Of_Powers_Of_Two(2**100) == True"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(2) == True, \"is_Sum_Of_Powers_Of_Two function does not return True for given input 2.\"\nassert     is_Sum_Of_Powers_Of_Two(4) == True, \"is_Sum_Of_Powers_Of_Two function does not return True for given input 4.\"\nassert     is_Sum_Of_Powers_Of_Two(64) == True, \"is_Sum_Of_Powers_Of_Two function does not return True for given input 64.\"\nassert     is_Sum_Of_Powers_Of_Two(5) == False, \"is_Sum_Of_Powers_Of_Two function does not return False for given input 5.\"\nassert     is_Sum_Of_Powers_Of_Two(9) == True, \"is_Sum_Of_Powers_Of_Two function does not return True for given input 9.\"\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(0) == True\nassert     is_Sum_Of_Powers_Of_Two(1) == False\nassert     is_Sum_Of_Powers_Of_Two(2) == True\nassert     is_Sum_Of_Powers_Of_Two(3) == True\nassert     is_Sum_Of_Powers_Of_Two(4) == True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    #code here\n    ans = []\n\n    if n <= 0:\n        return False\n\n    while n!= 0:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            return False\n        ans.append(2)\n    return True if len(ans) == 1 else False"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n'''\nWrite a python function to check whether a given number is a power of 2 or not.\n\nNote: Assume the number is positive.\n'''\ndef is_Power_of_Two(n):\n    '''\n    Write a python function to check whether the given number is a power of 2 or not.\n    \n    Note: Assume the number is positive.\n    '''\n    pass\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(\"Enter the number to check whether it is Sum of powers of 2 or not: \")\n    n = int(input())\n    if is_Sum_Of_Powers_Of_Two(n):\n        print(\"Yes, the number can be represented as Sum of powers of 2\")\n    else:\n        print(\"No, the number cannot be represented as Sum of powers of 2\")"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    '''\n    Input:\n    n = 16\n    Output:\n    True\n    '''\n    n = int(input())\n    result = is_Sum_Of_Powers_Of_Two(n)\n    print(result"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    is_Sum_Of_Powers_Of_Two(1) == False\n    is_Sum_Of_Powers_Of_Two(2) == True\n    is_Sum_Of_Powers_Of_Two(3) == True\n    is_Sum_Of_Powers_Of_Two(4) == False\n    is_Sum_Of_Powers_Of_Two(5) == False\n    is_Sum_Of_Powers_Of_Two(6) == True\n    is_Sum_Of_Powers_Of_Two(7) == False\n    is_Sum_Of_Powers_Of_Two(8) == True\n    is_Sum_Of_Powers_Of_Two(9) == True\n    is_Sum_Of_Powers_Of_Two(10) == False\n    is_Sum_Of_Powers_Of_Two(11) == True\n    is_Sum_Of_Powers_Of_Two(12) == False\n    is_Sum_Of_Powers_Of_Two(15) == False\n    is_Sum_Of_Powers_Of_Two(16) == False\n    is_Sum_Of_Powers_Of_Two(17) == True\n    is_Sum_Of_Powers_Of_Two(18) == True\n    is_Sum_Of_Powers_Of_Two(19) == False\n    is_Sum_Of_Powers_Of_Two(20) == True\n    is_Sum_Of_Powers_Of_Two(21) == True\n    is_Sum_Of_Powers_Of_Two(22) == True\n    is_Sum_Of_Powers_Of_Two(25) == True\n    is_Sum_Of_Powers_Of_Two(27) == False\n    is_Sum_Of_Powers_Of_Two(28) == True\n    is_Sum_Of_Powers_Of_Two(29) == True\n    is_Sum_Of_Powers_Of_Two(30) == False\n    is_Sum_Of_Powers_Of_Two(31) == True\n    is_Sum_Of_Powers_Of_Two(32) == True\n    is_Sum_Of_Powers_Of_Two(33) == True\n    is_Sum_Of_Powers_Of_Two(34) == False\n    is_Sum_Of_Powers_Of_Two(35) == True\n    is_Sum_Of_Powers_Of_Two(36) == True\n    is_Sum_Of_Powers_Of_Two(37) == True\n    is_Sum_Of_Powers_Of_Two(38) == True\n    is_Sum_Of_Powers_Of_Two(39) == False\n    is_Sum_Of_Powers_Of_Two(40) == True\n    is_Sum_Of_Powers_Of_Two(41) == True\n    is_Sum_Of_Powers_Of_Two(42) == True\n    is_Sum_Of_Powers_Of_Two(43) == False\n    is_Sum_Of_Powers_Of_Two(44) == True\n    is_Sum_Of_Powers_Of_Two(45) == True\n    is_Sum_Of_Powers_Of_Two(46) == True\n    is_Sum_Of_Powers_Of_Two(47) == True\n    is_Sum_Of_Powers_Of_Two(48) == True\n    is_Sum_Of_Powers_Of_Two(49) == True\n    is_Sum_Of_Powers_Of_Two(50) == False\n    is_Sum_Of_Powers_Of_Two(51) == True\n    is_Sum_Of_Powers_Of_Two(52) == True\n    is_Sum_Of_Powers_Of_Two(53) == True\n    is_Sum_Of_Powers_Of_Two(54) == True\n    is_Sum_Of_Powers_Of_Two(55) == True\n    is_Sum_Of_Powers_Of_Two(56) == True\n    is_Sum_Of_Powers_Of_Two(57) == True\n    is_Sum_Of_Powers_Of_Two(58) == True\n    is_Sum_Of_Powers_Of_Two(59) == True\n    is_Sum_Of_Powers_Of_Two(60) == True\n    is_Sum_Of_Powers_Of_Two(61) == True\n    is_Sum_Of_Powers_Of_Two(62) == False\n    is_Sum_Of_Powers_Of_Two(63) == True\n    is_Sum_Of_Powers_Of_Two(64) == True\n    is_Sum_Of_Powers_Of_Two(65) == True\n    is_Sum_Of_Powers_Of_Two(66) == True\n    is_Sum_Of_Powers_Of_Two(67) == True\n    is_Sum_Of_Powers_Of_Two(68) == True\n    is_Sum_Of_Powers_Of_Two(69) == True\n    is_Sum_Of_Powers_Of_Two(70) == True\n    is_Sum_Of_Powers_Of_Two(71) == True\n    is_Sum_Of_Powers_Of_Two(72) == True\n    is_Sum_Of_Powers_Of_Two(73) == True\n    is_Sum_Of_Powers_Of_Two(74) == True\n    is_Sum_Of_Powers_Of_Two(75) == True\n    is_Sum_Of_Powers_Of_Two(76) == True\n    is_Sum_Of_Powers_Of_Two(77) == True\n    is_Sum_Of_Powers_Of_Two(78) == True\n    is_Sum_Of_Powers_Of_Two(79) == True\n    is_Sum_Of_Powers_Of_Two(80) == True\n    is_Sum_Of_Powers_Of_Two(81) == True\n    is_Sum_Of_Powers_Of_Two(82) == True\n    is_Sum_Of_Powers_Of_Two(83) == True\n    is_Sum_Of_Powers_Of_Two(84) == True\n    is_Sum_Of_Powers_Of_Two(85) == True\n    is_Sum_Of_Powers_Of_Two(86) == True\n    is_Sum_Of_Powers_Of_Two(87) == True\n    is_Sum_Of_Powers_Of_Two(88) == True\n    is_Sum_Of_Powers_Of_Two(89) == True\n    is_Sum_Of_Powers_Of_Two(90) == True\n    is_Sum_Of_Powers_Of_Two(91) == True\n    is_Sum_Of_Powers_Of_Two(92) == True\n    is_Sum_Of_Powers_Of_Two(93) == True\n    is_Sum_Of_Powers_Of_Two(94) == True\n    is_Sum_Of_Powers_Of_Two(95) == True\n    is_Sum_Of_Powers_Of_Two(96) == True\n    is_Sum_Of_Powers_Of_Two(97) == True\n    is_Sum_Of_Powers_Of_Two(98) == True\n    is_Sum_Of_Powers_Of_Two(99) == True\n    is_Sum_Of_Powers_Of_Two(100) == True\n    is_Sum_Of_Powers_Of_Two(101) == False\n    is_Sum_Of_Powers_Of_Two(102) == True\n    is_Sum_Of_Powers_Of_Two(103) == True\n    is_Sum_Of_Powers_Of_Two(104) == True\n    is_Sum_Of_Powers_Of_Two(105) == True\n    is_Sum_Of_Powers_Of_Two(106) == True\n    is_Sum_Of_Powers_Of_Two(107) == True\n    is_Sum_Of_Powers_Of_Two(108) == True\n    is_Sum_Of_Powers_Of_Tw"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     circle_circumference(1) == 3.141592653589793\nassert     circle_circumference(3) == 12.566370614359172\nassert     circle_circumference(10) == 28.274333882308594\nassert     circle_circumference(100) == 3141592653589793\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     circle_circumference(1) == math.pi * 2, 'Circle circumference'\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     (circle_circumference(2) == 12.566370614359172)\nassert     (circle_circumference(1) == 2.260029296875)\nassert     (circle_circumference(3) == 12.13559360351562)\nassert     (circle_circumference(0) == 0.0)\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     circle_circumference(10) == 50.26548245743669\nassert circle_circumference(100) == 314.1592653589793\nassert circle_circumference(1) == 3.141592653589793"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     circle_circumference(1)         == pi*2, \"Wrong\"\nassert     circle_circumference(2)         == pi*4, \"Wrong\"\nassert     circle_circumference(3)         == pi*6, \"Wrong\"\nassert     circle_circumference(4)         == pi*8, \"Wrong\"\nassert     circle_circumference(5)         == pi*10, \"Wrong\"\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nfrom math import pi, sin, cos\ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     circle_circumference(1) == math.pi*2\nassert     circle_circumference(2) == 2*math.pi*2\nassert     circle_circumference(3) == 2*math.pi*2 + 2*math.pi*2\nassert     circle_circumference(4) == 2*math.pi*2 + 4*math.pi*2\nassert     circle_circumference(5) == 2*math.pi*2 + 5*math.pi*2\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     circle_circumference(5) == 36.831\nassert     circle_circumference(1) == 24.868\nassert     circle_circumference(2) == 25.809\nassert     circle_circumference(0.5) == 14.945\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_singly([[[]]]) == set()\nassert     extract_singly([[],[]]) == set()\nassert     extract_singly([[],[[]]]) == set()\nassert     extract_singly([[[]]]) == set()\nassert     extract_singly([[],[]]) == set()\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_singly([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) ==  {1, 2, 3, 4, 5, 6, 7, 8, 9}\nassert     extract_singly([[1, 2], [3, 4, 5], [6, 7, 8], [9]]) == {1, 2, 3, 4, 5, 6, 7, 8, 9}\nassert     extract_singly([[1, 2], [3, 4, 5], [6, 7], [8]]) == {1, 2, 3, 4, 5, 6, 7, 8}\nassert     extract_singly([[1, 2], [3, 4, 5], [6, 7], [8, 9]]) == {1, 2, 3, 4, 5, 6, 7, 8, 9}\nassert     extract_singly([[1, 2], [3, 4, 5], [6], [7, 8, 9]]) == {1, 2, 3, 4, 5, 6, 7, 8, 9}\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_singly([[],2,3]) == 2, \"extract_singly must be correct\"\nassert     extract_singly([[2],3]) == 2, \"extract_singly must be correct\"\nassert     extract_singly([[2,3],4]) == 2, \"extract_singly must be correct\"\nassert     extract_singly([[2,3,4],5]) == 2, \"extract_singly must be correct\"\nassert     extract_singly([[2,3,4,5],6]) == 2, \"extract_singly must be correct\"\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_singly([[2, 4, 5], [2, 3], 4, 5, 6]) == set([2, 2, 3, 4, 5, 5, 6])\nassert     extract_singly([[2, 2, 2], 2, 2, 2, 2]) == set([2, 2, 2, 2, 2, 2])\nassert     extract_singly([[2, 2, 2], 2, 2, 2, 2, 2]) == set([2, 2, 2, 2, 2, 2])\nassert     extract_singly([[2, 2, 2, 2], 2, 2, 2, 2, 2]) == set([2, 2, 2, 2, 2, 2])\nassert     extract_singly([[2, 2, 2, 2], 2, 2, 2, 2, 2, 2, 2]) == set([2, 2, 2, 2, 2, 2, 2, 2])\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_singly([[],[2,3],[5,6]]) == [2,3,5,6]\nassert     extract_singly([[2],[3],[5],[6]]) == [2,3,5,6]\nassert     extract_singly([[2,3],[5,6]]) == [2,3,5,6]\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_singly([[],[[],]]) == []\nassert     extract_singly([[[]]]) == []\nassert     extract_singly([[[]]]) == []\nassert     extract_singly([[[],[[],]]]) == []\nassert     extract_singly([[[[]]]]) == []\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_singly([[1],2,3,4,5]) == 6 \nassert     extract_singly([[1],2,[3],4,5]) == 5 \nassert     extract_singly([[1],2,[3],4]) == 4 \nassert     extract_singly([[1],2,[3],4,5,6]) == 6\nassert     extract_singly([[1,2,3],4,5,6]) == 6\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_singly([[1,2,3],[4,5,6,7]]) == {1,2,3,4,5,6,7}\nassert     extract_singly([[1,2,3],[4,5,6]]) == {1,2,3,4,5,6}\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_singly([1,2,3,4]) == {1,2,3,4}\nassert     extract_singly([[1],[2],[3]]) == {1,2,3}\nassert     extract_singly([1,2,3,4,5]) == {1,2,3,4,5}\nassert     extract_singly([1,2,3,4,5,6]) == {1,2,3,4,5,6}\nassert     extract_singly([1,2,3,4,5,6,7]) == {1,2,3,4,5,6,7}\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     pancake_sort([4, 5, 3, 2, 1]) == [1, 2, 3, 4, 5]\nassert     pancake_sort([3, 2, 1]) == [1, 2, 3]\nassert     pancake_sort([1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     pancake_sort([1]) == [1]\nassert     pancake_sort([]) == []\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \npancake_sort([2,5,3,1,4]) == [1,2,3,4,5]\nassert\npancake_sort([2,5,3,1,4]) == [1,2,4,3,5]\nassert\npancake_sort([2,5,3,1,4]) == [1,3,2,4,5]\nassert\npancake_sort([2,5,3,1,4]) == [2,1,3,5,4]\nassert\npancake_sort([2,5,3,1,4]) == [4,5,3,1,2]\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    #step 1: detect the largest value\n    max_value = nums[0]\n    for i in range(len(nums)-1):\n        if nums[i] > max_value:\n            max_value = nums[i]\n    \n    #step 2: find the index of the max value\n    max_value_index = nums.index(max_value)\n    \n    #step 3: swap with the last value\n    nums[max_value_index],nums[-1] = nums[-1],nums[max_value_index]\n    \n    #step 4: find the index of the last value\n    last_index = len(nums)-1\n    while last_index > 0 and nums[last_index] > nums[last_index-1]:\n        nums[last_index],nums[last_index-1] = nums[last_index-1],nums[last_index]\n        last_index -= 1\n        \n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     pancake_sort(\n[6, 5, 4, 3, 2, 1]) ==\n    [1, 2, 3, 4, 5, 6]\nassert     pancake_sort(\n[1, 1, 1, 1]) ==\n    [1, 1, 1, 1]\nassert     pancake_sort(\n[1]) ==\n    [1]\nassert     pancake_sort([]) ==\n    []\nassert     pancake_sort([5]) ==\n    [5]\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef pancake_sort(nums):\n    '''\n    Check if the list is a valid sorted version of the list.\n    '''\n    pass\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef pancake_sort_iterative(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    n = len(nums)\n\n    for i in range(n):\n        cur_min = i\n        for j in range(i+1, n):\n            if nums[j] < nums[cur_min]:\n                cur_min = j\n        nums[i], nums[cur_min] = nums[cur_min], nums[i]\n        print(nums)\n        \n        \nassert \n\ndef pancake_sort_recursive(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    n = len(nums)\n    \n    def helper(nums, i, k):\n        if i == k:\n            return nums\n        \n        cur_min = i\n        for j in range(i+1, k+1):\n            if nums[j] < nums[cur_min]:\n                cur_min = j\n        \n        nums[i], nums[cur_min] = nums[cur_min], nums[i]\n        return helper(nums, i+1, k)\n    \n    return helper(nums, 0, n-1)\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n'''\nWrite a function to find the number of items in a list that are greater than some value in a sorted list.\n'''\ndef count_greaterthan(list1,list2):\n    '''\n    Write a function to count number items in a list that are greater than some value in a sorted list.\n    '''\n    pass\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_samepair([1,2,3],[1,2,3],[1,2,3]) == 3\nassert     count_samepair([1,2,3],[1,2,3],[5,4,3]) == 0\nassert     count_samepair([1,2,3],[1,2,3],[]) == 0\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_samepair([1,2,3],[1,1,3],[1,1,1])==[1,1,1]\nassert     count_samepair([1,2,3],[1,2,3],[1,2,3])==[1,1,1]\nassert     count_samepair([1,2,3],[1,2,1],[1,1,1])==[1]\nassert     count_samepair([1,2,3],[1,2,1],[1,2,1])==[1]\nassert     count_samepair([1,2,3],[1,2,1],[1,2,1])==[1]\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    (count_samepair([1,2,3],[3,4,5],[2,3,4])) == 0, 'Wrong result'\n    (count_samepair([1,2,3],[2,3,4],[3,4,5])) == 3, 'Wrong result'\n    (count_samepair([1,2,3],[2,3,4],[3,3,4])) == 2, 'Wrong result'\n    (count_samepair([1,2,3],[2,3,4],[3,3,4,5])) == 0, 'Wrong result'\n    (count_samepair([1,2,3],[2,3,4],[3,3,4,5,6])) == 2, 'Wrong result'\n    (count_samepair([1,2,3],[2,3,4],[3,3,4,5,6,7])) == 4, 'Wrong result'\n    (count_samepair([1,2,3],[2,3,4],[3,3,4,5,6,7,8])) == 5, 'Wrong result'\n    (count_samepair([1,2,3],[2,3,4],[3,3,4,5,6,7,8,9])) == 3, 'Wrong result'\n    (count_samepair([1,2,3],[2,3,4],[3,3,4,5,6,7,8,9,10])) == 4, 'Wrong result'\n    (count_samepair([1,2,3],[2,3,4],[3,3,4,5,6,7,8,9,10,11])) == 0, 'Wrong result'\n    (count_samepair([1,2,3],[2,3,4],[3,3,4,5,6,7,8,9,10,11,12])) == 0, 'Wrong result'\n    (count_samepair([1,2,3],[2,3,4],[3,3,4,5,6,7,8,9,10,11,12,13])) == 0, 'Wrong result'\n    (count_samepair([1,2,3],[2,3,4],[3,3,4,5,6,7,8,9,10,11,12,13,14])) == 0, 'Wrong result'\n    (count_samepair([1,2,3],[2,3,4],[3,3,4,5,6,7,8,9,10,11,12,13,14,15])) == 0, 'Wrong result'\n    (count_samepair([1,2,3],[2,3,4],[3,3,4,5,6,7,8,9,10,11,12,13,14,15,16])) == 0, 'Wrong result'\n    (count_samepair([1,2,3],[2,3,4],[3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])) == 0, 'Wrong result'\n    (count_samepair([1,2,3],[2,3,4],[3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])) == 0, 'Wrong result'\n    (count_samepair([1,2,3],[2,3,4],[3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])) == 0, 'Wrong result'\n    (count_samepair([1,2,3],[2,3,4],[3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])) == 0, 'Wrong result'\n    (count_samepair([1,2,3],[2,3,4],[3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])) == 0, 'Wrong result'\n    (count_samepair([1,2,3],[2,3,4],[3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])) == 0, 'Wrong result'\n    (count_samepair([1,2,3],[2,3,4],[3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])) == 0, 'Wrong result'\n    (count_samepair([1,2,3],[2,3,4],[3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])) == 0, 'Wrong result'\n    (count_samepair([1,2,3],[2,3,4],[3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])) == 0, 'Wrong result'\n    (count_samepair([1,2,3],[2,3,4],[3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26])) == 0, 'Wrong result'\n    (count_samepair([1,2,3],[2,3,4],[3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27])) == 0, 'Wrong result'\n    (count_samepair([1,2,3],[2,3,4],[3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28])) == 0, 'Wrong result'\n    (count_samepair([1,2,3],[2,3,4],[3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29])) == 0, 'Wrong result'\n    (count_samepair([1,2,3],[2,3,4],[3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30])) == 0, 'Wrong result'\n    (count_samepair([1,2,3],[2,3,4],[3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31])) == 0, 'Wrong result'\n    (count_samepair([1,2,3],[2,3,4],[3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32])) == 0, 'Wrong result'\n    (count_samepair([1,2,3],[2,3,4],[3,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33])) == 0, 'W"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_samepair([1,2,3,4,5,6,7,8],['a','b','c','d','e','f','g','h'],[1,2,3,4,5,6,7,8]) == 1, \"Counting function does not return correct count\"\nassert count_samepair([1,2,3,4,5,6,7,8],['a','b','c','d','e','f','g','h'],[1,2,3,4,5,6,7,8]) == 0, \"Counting function does not return correct count\"\nassert count_samepair([1,2,3,4,5,6,7,8],['a','b','c','d','e','f','g','h'],[1,1,1,1,1,1,1,1]) == 1, \"Counting function does not return correct count\"\nassert count_samepair([1,2,3,4,5,6,7,8],['a','b','c','d','e','f','g','h'],[1,1,1,1,1,1,1,1]) == 0, \"Counting function does not return correct count\""
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_samepair([1,1,1,1,1],[\"A\",\"A\",\"A\",\"A\",\"A\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]) == 10, \"incorrect\"\nassert     count_samepair([1,1,1,1,1],[\"B\",\"B\",\"B\",\"B\",\"B\"],[\"A\",\"A\",\"A\",\"A\",\"A\"]) == 0, \"incorrect\"\n\ndef count_samepair2(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    pass"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_samepair([1,2,3], [1,2,3], [1,2,3]) == 3\nassert count_samepair([1,2,3], [1,2,3], [1,2,4]) == 2\nassert count_samepair([1,2,3], [1,2,3], [2,3,4]) == 2\nassert count_samepair([1,2,3], [1,2,3], [3,4,5]) == 1\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_samepair([1,2,3],[1,2,3],[1,2,3])==3\nassert     count_samepair([1,1,1],[1,2,3],[1,2,3])==0\nassert     count_samepair([1,2,1],[1,2,3],[1,2,3])==0\n\ndef count_samepair_1(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(0,len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_samepair([1,2,3], [1,2,3], [1,2,3]) == 1\nassert     count_samepair([1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5]) == 2\nassert     count_samepair([1,2,3,1,2,3], [1,2,3,1,2,3], [1,2,3,1,2,3]) == 1\nassert     count_samepair([], [], []) == 0\nassert     count_samepair([2,1], [], []) == 0\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_samepair([1,2,3,4],[1,2,3,4],[1,2,3,4]) == 4,'should return 4'\nassert     count_samepair([1,2,3,1,2,3,1,2,3],[1,2,3,1,2,3,1,2,3],[1,2,3,1,2,3,1,2,3]) == 6,'should return 6'\nassert     count_samepair([1,2,3],[1,2,3],[1,2,3]) == 3,'should return 3'\nassert     count_samepair([1,2,3],[1,2,3],[4,5,6]) == 0,'should return 0'\n\ndef count_samepair2(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    pass\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_lists((1,2,3,4,5)) == 2\nassert     find_lists(()) == 0\nassert     find_lists((1,2,3)) == 1\nassert     find_lists((1,2,3,4,5,1,2,3)) == 3\nassert     find_lists((1,2,3,4,5,1,2,3,4,5,6,7,8,9,1,2,3,4,5)) == 5\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_lists(([0,1,2,3,4,5,6,7,8,9],[10,11,12,13,14,15,16,17,18,19])) == 2\nassert     find_lists(([0,1,2,3,4,5,6,7,8,9],[10,11,12,13,14,15,16,17,18,19])) == 2\nassert     find_lists(([0,1,2,3,4,5,6,7,8,9],[10,11,12,13,14,15,16,17,18,19])) == 2\nassert     find_lists(([0,1,2,3,4,5,6,7,8,9],[10,11,12,13,14,15,16,17,18,19])) == 2\nassert     find_lists(([0,1,2,3,4,5,6,7,8,9],[10,11,12,13,14,15,16,17,18,19])) == 2\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_lists((((5, 6), (2, 3), (4, 1)), \n                    ((3, 4), (1, 2), (5, 6)), \n                    ((1, 2), (2, 3), (3, 4)))) == 3, \"Wrong\"\nassert     find_lists((((5, 6), (2, 3), (4, 1)), \n                    ((3, 4), (1, 2), (5, 6)), \n                    ((1, 2), (2, 3), (3, 4)))) == 2, \"Wrong\"\nassert     find_lists((((5, 6), (2, 3), (4, 1)), \n                    ((3, 4), (1, 2), (5, 6)), \n                    ((1, 2), (2, 3), (3, 4)))) == 1, \"Wrong\"\nassert     find_lists(((5, 6), (2, 3), (4, 1))) == 0, \"Wrong\"\nassert     find_lists(((2, 3), (4, 1), (6, 7))) == 0, \"Wrong\"\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_lists(((1, 2, 3),)) == 1, \"Wrong answer\"\nassert     find_lists((((1, 2, 3), (4, 5, 6)), ((7, 8, 9), (10, 11, 12)))) == 2, \"Wrong answer\"\nassert     find_lists((((1, 2, 3),), ((4, 5, 6), (7, 8, 9), (10, 11, 12)))) == 3, \"Wrong answer\"\nassert     find_lists((((1, 2, 3),), ((4, 5, 6),), ((7, 8, 9),), ((10, 11, 12),))) == 4, \"Wrong answer\"\nassert     find_lists(((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12))) == 4, \"Wrong answer\"\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_lists(((1, 2, 3), (4, 5, 6), (7, 8, 9))) == (3, )\nassert     find_lists(((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12))) == (3, )\nassert     find_lists(((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15))) == (3, )\nassert     find_lists(((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18))) == (3, )\nassert     find_lists(((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18), (19, 20, 21))) == (3, )\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_lists((1,2,3,4,5,6,7,8,9,10)) == 3, 'Please correct the result'\nassert     find_lists((1,2,3,4,5,6,7,8,9)) == 2, 'Please correct the result'\nassert     find_lists(('a','b','c','d','e','f','g','h','i','j','k','l','m')) == 4, 'Please correct the result'\n\ndef find_tuple_count(Input):\n    '''\n    Write a function to count tuples in a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_lists((1,2,3,4,5,6))     == 1, 'Wrong Output'\nassert     find_lists((1,2,3,4,5,None,6)) == 2, 'Wrong Output'\nassert     find_lists((1,2,3,4,5,None,6,7,8,9)) == 3, 'Wrong Output'\nassert     find_lists(('a','b','c',None,None,None,None)) == 0, 'Wrong Output'\n\n'''\nWrite a function to print number of elements in a tuple.\n'''\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_lists(('abcd','abc','def','xyz')) == 2, \\\n        '\\n\\nExpected 2 but got {0}'.format(find_lists(('abcd','abc','def','xyz')))\nassert     find_lists(('a', 'b', 'c', 'd')) == 0, \\\n        '\\n\\nExpected 0 but got {0}'.format(find_lists(('a', 'b', 'c', 'd')))\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_lists(([1],)) == 1, \\\n            'Wrong output'\nassert     find_lists(([1, 1],)) == 1, \\\n            'Wrong output'\nassert     find_lists(([1, 1, 1],)) == 1, \\\n            'Wrong output'\nassert     find_lists(([1, 2, 3],)) == 2, \\\n            'Wrong output'\nassert     find_lists(([1, 2, 3, 4],)) == 2, \\\n            'Wrong output'\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_Abs_Diff([-6, -3, -2, -1, 4, 3]) == 5\nassert     max_Abs_Diff([-6, -3, -2, -1, 4, 3]) == 5\nassert     max_Abs_Diff([-6, -3, -2, -1, 4, 3]) == 5\nassert     max_Abs_Diff([-6, -3, -2, -1, 4, 3]) == 5\nassert     max_Abs_Diff([-6, -3, -2, -1, 4, 3]) == 5\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_Abs_Diff([1,2,3]) == 1\nassert     max_Abs_Diff([-1,2,3]) == 3\nassert     max_Abs_Diff([1,2,3,4]) == 1\nassert     max_Abs_Diff([-1,2,3,4]) == 3\nassert     max_Abs_Diff([1,2,3,4,5]) == 4\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert max_Abs_Diff([-1, 2, 1, 3]) == 2, \"Should be 2\"\nassert max_Abs_Diff([1, 2, -3, 4]) == 4, \"Should be 4\"\nassert max_Abs_Diff([3, 4, -5, 1]) == 3, \"Should be 3\"\nassert max_Abs_Diff([-3, -4, -5, -1]) == 4, \"Should be 4\"\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_Abs_Diff([1, 2, 3, 4]) == 2, 'incorrect'\nassert     max_Abs_Diff([-5, -3, -2, -1, 0]) == 3, 'incorrect'\nassert     max_Abs_Diff([-3, -2, -1, -0, 1]) == 4, 'incorrect'\nassert     max_Abs_Diff([-2, -1, 0, 1, 2]) == 2, 'incorrect'\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_Abs_Diff([-2, 3, -5, -4, 0]) == 7\nassert     max_Abs_Diff([1, 2, 3, 4]) == 3\nassert     max_Abs_Diff([-2, -3, -4, -5, -6, -7]) == 5"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_Abs_Diff([3, 2, -5]) == 3, \"Case Failed\"\nassert     max_Abs_Diff([4, 7, 1, 10, 23, 2]) == 10, \"Case Failed\"\nassert     max_Abs_Diff([5, 7, 3, 2]) == 5, \"Case Failed\"\nassert     max_Abs_Diff([-5, -10, -3, -2, -1, 0, 1, 3, 5, 2]) == 5, \"Case Failed\"\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) == 0: \n        return -1\n    elif len(arr) == 1: \n        return 0\n    else: \n        l = len(arr) \n        max_diff = abs(arr[0] - arr[1]) \n        for i in range(1, l - 1): \n            diff = abs(arr[i] - arr[i - 1]) \n            if max_diff < diff: \n                max_diff = diff \n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_Abs_Diff([1, 2, 3, 4, 5, 6]) == 6\nassert     max_Abs_Diff([1, 2, 3, -4, 5, 6]) == 6\nassert     max_Abs_Diff([-1, 2, -3, -4, 5, 6]) == 6\nassert     max_Abs_Diff([1, 2, -3, 4, 5, 6]) == 3\nassert     max_Abs_Diff([-1, -2, -3, -4, -5, -6]) == 6\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert \nassert max_Abs_Diff([-2, 1, 2, -3, 4, 5, 6]) == 8\nassert max_Abs_Diff([2, 4, -7, 10, 11, 12, -15, -2]) == 17"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nfind_solution(a = 1, b = 2, n = 3) == (1, 1)\nfind_solution(a = 1, b = 2, n = 3) == (0, 1)\nfind_solution(a = 1, b = 2, n = 5) == (0, 1)\nfind_solution(a = 1, b = 2, n = 4) == (0, 1)\nfind_solution(a = 1, b = 2, n = 3) == (1, 1)\nfind_solution(a = 1, b = 2, n = 2) == (1, 0)\nfind_solution(a = 1, b = 2, n = 1) == (1, 0)\nfind_solution(a = 1, b = 2, n = 0) == (1, 0)\nfind_solution(a = 1, b = 2, n = 100000) == (1, 0)\nfind_solution(a = 1, b = 2, n = 0) == (1, 0)\nfind_solution(a = 1, b = 2, n = -1) == (1, 0)\nfind_solution(a = 1, b = 2, n = -2) == (1, 0)\nfind_solution(a = 1, b = 2, n = -3) == (1, 0)\nfind_solution(a = 1, b = 2, n = -4) == (1, 0)\nfind_solution(a = 1, b = 2, n = -5) == (1, 0)\nfind_solution(a = 1, b = 2, n = -6) == (1, 0)\nfind_solution(a = 1, b = 2, n = -7) == (1, 0)\nfind_solution(a = 1, b = 2, n = -8) == (1, 0)\nfind_solution(a = 1, b = 2, n = -9) == (1, 0)\nfind_solution(a = 1, b = 2, n = -10) == (1, 0)\nfind_solution(a = 1, b = 2, n = -11) == (1, 0)\nfind_solution(a = 1, b = 2, n = -12) == (1, 0)\nfind_solution(a = 1, b = 2, n = -13) == (1, 0)\nfind_solution(a = 1, b = 2, n = -14) == (1, 0)\nfind_solution(a = 1, b = 2, n = -15) == (1, 0)\nfind_solution(a = 1, b = 2, n = -16) == (1, 0)\nfind_solution(a = 1, b = 2, n = -17) == (1, 0)\nfind_solution(a = 1, b = 2, n = -18) == (1, 0)\nfind_solution(a = 1, b = 2, n = -19) == (1, 0)\nfind_solution(a = 1, b = 2, n = -20) == (1, 0)\nfind_solution(a = 1, b = 2, n = -21) == (1, 0)\nfind_solution(a = 1, b = 2, n = -22) == (1, 0)\nfind_solution(a = 1, b = 2, n = -23) == (1, 0)\nfind_solution(a = 1, b = 2, n = -24) == (1, 0)\nfind_solution(a = 1, b = 2, n = -25) == (1, 0)\nfind_solution(a = 1, b = 2, n = -26) == (1, 0)\nfind_solution(a = 1, b = 2, n = -27) == (1, 0)\nfind_solution(a = 1, b = 2, n = -28) == (1, 0)\nfind_solution(a = 1, b = 2, n = -29) == (1, 0)\nfind_solution(a = 1, b = 2, n = -30) == (1, 0)\nfind_solution(a = 1, b = 2, n = -31) == (1, 0)\nfind_solution(a = 1, b = 2, n = -32) == (1, 0)\nfind_solution(a = 1, b = 2, n = -33) == (1, 0)\nfind_solution(a = 1, b = 2, n = -34) == (1, 0)\nfind_solution(a = 1, b = 2, n = -35) == (1, 0)\nfind_solution(a = 1, b = 2, n = -36) == (1, 0)\nfind_solution(a = 1, b = 2, n = -37) == (1, 0)\nfind_solution(a = 1, b = 2, n = -38) == (1, 0)\nfind_solution(a = 1, b = 2, n = -39) == (1, 0)\nfind_solution(a = 1, b = 2, n = -40) == (1, 0)\nfind_solution(a = 1, b = 2, n = -41) == (1, 0)\nfind_solution(a = 1, b = 2, n = -42) == (1, 0)\nfind_solution(a = 1, b = 2, n = -43) == (1, 0)\nfind_solution(a = 1, b = 2, n = -44) == (1, 0)\nfind_solution(a = 1, b = 2, n = -45) == (1, 0)\nfind_solution(a = 1, b = 2, n = -46) == (1, 0)\nfind_solution(a = 1, b = 2, n = -47) == (1, 0)\nfind_solution(a = 1, b = 2, n = -48) == (1, 0)\nfind_solution(a = 1, b = 2, n = -49) == (1, 0)\nfind_solution(a = 1, b = 2, n = -50) == (1, 0)\nfind_solution(a = 1, b = 2, n = -51) == (1, 0)\nfind_solution(a = 1, b = 2, n = -52) == (1, 0)\nfind_solution(a = 1, b = 2, n = -53) == (1, 0)\nfind_solution(a = 1, b = 2, n = -54) == (1, 0)\nfind_solution(a = 1, b = 2, n = -55) == (1, 0)\nfind_solution(a = 1, b = 2, n = -56) == (1, 0)\nfind_solution(a = 1, b = 2, n = -57) == (1, 0)\nfind_solution(a = 1, b = 2, n = -58) == (1, 0)\nfind_solution(a = 1, b = 2, n = -59) == (1, 0)\nfind_solution(a = 1, b = 2, n = -60) == (1, 0)\nfind_solution(a = 1, b = 2, n = -61) == (1, 0)\nfind_solution(a = 1, b = 2, n = -62) == (1, 0)\nfind_solution(a = 1, b = 2, n = -63) == (1, 0)\nfind_solution(a = 1, b = 2, n = -64) == (1, 0)\nfind_solution(a = 1, b = 2, n = -65) == (1, 0)\nfind_solution(a = 1, b = 2, n = -66) == (1, 0)\nfind_solution(a = 1, b = 2, n = -67) == (1, 0)\nfind_solution(a = 1, b = 2, n = -68) == (1, 0)\nfind_solution(a = 1, b = 2, n = -69) == (1, 0)\nfind_solution(a = 1, b = 2, "
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_solution(1, 1, 3) ==     (1, 1)\nassert     find_solution(1, 3, 3) ==     (1, 2)\nassert     find_solution(2, 1, 5) ==     (2, 1)\nassert     find_solution(2, 3, 5) ==     (2, 3)\nassert     find_solution(3, 1, 5) ==     (2, 2)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nassert find_solution(3,4,15) == (2,3)\nassert find_solution(3,4,8) == (None, None)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_solution(3, 7, 17) ==     (3, 7), \"Should be (3, 7).\"\nassert     find_solution(9, 1, 36) == None, \"Should be None.\"\nassert     find_solution(0, 1, 1) ==     (0, 1), \"Should be (0, 1).\"\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_solution((1, 1), 1, 5) == (1, 2)\nassert     find_solution((1, 1), 2, 5) == (1, 4)\nassert     find_solution((1, 1), 5, 5) == (2, 3)\nassert     find_solution((2, 1), 1, 5) == (2, 2)\nassert     find_solution((2, 1), 2, 5) == (2, 4)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_solution(1, 2, 3) == (1, 2), 'test 1 expected (1, 2), got'+ str(find_solution(1, 2, 3))\nassert     find_solution(1, 2, 4) == (2, 1), 'test 2 expected (2, 1), got'+ str(find_solution(1, 2, 4))\nassert     find_solution(1, 3, 4) == None, 'test 3 expected None, got'+ str(find_solution(1, 3, 4))\nassert     find_solution(1, 2, 5) == None, 'test 4 expected None, got'+ str(find_solution(1, 2, 5))\nassert     find_solution(2, 2, 5) == (2, 1), 'test 5 expected (2, 1), got'+ str(find_solution(2, 2, 5))\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint(\"All tests for find_solution() passed\")\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_solution((1,2), (5,6), 9) == (2, -1)\nassert     find_solution((1,2), (5,6), 10) is None\nassert     find_solution((3,1), (1,2), 6) == (1, 1)\n\na, b, n = (1,2), (3,4), 5\nprint(find_solution(a, b, n))"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_elements([1,2,3], [1]) == None\nassert remove_elements([1,2,3], [2,3]) == None\nassert remove_elements([1,2,3], [1,4]) == None\nassert remove_elements([1,2,3], []) == None\nassert remove_elements([1,2,3], None) == None\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_elements([1, 2, 3, 4], [2, 3, 4]) == [[1, 2], [1, 3], [1, 4]]\nassert     remove_elements([1, 2, 3, 4], [3, 4]) == [[1, 2], [1, 3], [1, 4]]\nassert     remove_elements([1, 2, 3, 4], [1, 2, 3, 4]) == [[]]\nassert     remove_elements([1, 2, 3, 4], [1, 2, 3]) == [[]]\nassert     remove_elements([1, 2, 3, 4], []) == [[]]\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_elements([1,2,3,4,5],[2,5,6]) == [[1,3,4],[]]\nassert     remove_elements([1,2,3,4,5],[2,5,4]) == [[1,2,3],[]]\nassert     remove_elements([1,2,3,4,5],[2,4,5]) == [[1,2,3],[]]\nassert     remove_elements([1,2,3,4,5],[2,4]) == [[1,2,3],[]]\nassert     remove_elements([1,2,3,4,5],[]) == [[1,2,3,4,5]]\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_elements([1, 2, 3], [2, 3, 4]) == [1, 4], \"remove_elements test case failed\"\nassert     remove_elements([1, 2, 3], [3, 4]) == [], \"remove_elements test case failed\"\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_elements([1, 2, 3, 4, 5], [3, 4, 5]) == [[1, 2], []]\nassert     remove_elements([1, 2, 3, 4, 5], [2]) == [[1, 2, 3, 4, 5]]\nassert     remove_elements([1, 2, 3, 4, 5], [5]) == [[1, 2, 3, 4]]\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_elements([1, 2, 3], [1, 2, 3]) == []\nassert     remove_elements([1, 2, 3], [2, 3]) == [1, 3]\nassert     remove_elements([1, 2, 3], [1, 2]) == [1, 3]\nassert     remove_elements([1, 2, 3], []) == []\nassert     remove_elements([], [1, 2, 3]) == []\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_elements([1,2,3,4], [3,4,5,6]) == [1,2]\nassert     remove_elements([2,1,2,3,4], [1,2,3,4,5,6]) == []\nassert     remove_elements([3,2,1,2,3,4], [1,2,3,4,5,6]) == []\n\n'''\nGiven a 2D grid map of '1's (land) and '0's (water), count the number of islands. An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.\n\nExample 1:\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_elements([2,4,6], [2,4]) == []\nassert     remove_elements([2,4,6,6], [2,4]) == [6]\nassert     remove_elements([2,4,6,6], [4,6]) == [4]\nassert     remove_elements([], [2,4,6,6]) == []\nassert     remove_elements([2,4,6], []) == []\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_elements(['a', 'b', 'c', 'd', 'e'], ['c', 'd', 'e', 'f']) == ['a', 'b', 'f']\nassert     remove_elements(['a', 'b', 'c', 'd', 'e'], ['e', 'f', 'g']) == ['a', 'b', 'c', 'd', 'g']\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(\"Correct sum_series\") if sum_series(5) == 0\nprint(\"Correct sum_series\") if sum_series(10) == 1\n\n\ndef sum_series_b(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    \n    This one needs to be recursive.\n    '''\n    pass\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_series(1) == 0, 'Expected 0'\nassert     sum_series(5) == 7, 'Expected 7'\nassert     sum_series(20) == 68, 'Expected 68'\nassert     sum_series(50) == 2178, 'Expected 2178'\nassert     sum_series(100) == 12586269025, 'Expected 12586269025'\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_series(5) == 0, 'Wrong output!'\nassert     sum_series(6) == 2, 'Wrong output!'\nassert     sum_series(10) == 6, 'Wrong output!'\nassert     sum_series(13) == 11, 'Wrong output!'\nassert     sum_series(11) == 11, 'Wrong output!'\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_series(4) == 4\nassert     sum_series(8) == 4 + 6 + 4 + 2 + 4 + 2 + 2 + 1\nassert     sum_series(10) == 4 + 6 + 4 + 2 + 4 + 2 + 2 + 1 + 0 + 0\nassert     sum_series(1) == 1\nassert     sum_series(2) == 2\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert sum_series(6) == 10\nassert sum_series(100) == 2520\nassert sum_series(1000) == 102500\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert sum_series(3) == 1 + 2 + 3\nassert sum_series(7) == 3 + 5 + 7\nassert sum_series(14) == 5 + 11 + 17 + 23 + 29 + 31\nassert sum_series(20) == 11 + 17 + 23 + 29 + 31 + 37 + 43 + 49 + 55 + 61 + 67 + 73 + 79 + 85 + 91 + 97\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_series(0) == 0, \"the test is failed\"\nassert     sum_series(1) == 1, \"the test is failed\"\nassert     sum_series(2) == 3, \"the test is failed\"\nassert     sum_series(4) == 7, \"the test is failed\"\nassert     sum_series(10) == 45, \"the test is failed\"\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_series(2) == 1\nassert     sum_series(10) == 55\nassert     sum_series(4) == 17\nassert     sum_series(3) == 10\nassert     sum_series(1) == 0\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     area_polygon(4, 3) == 0.5, \"Wrong area\"\nassert     area_polygon(1, 1) == 0, \"Wrong area\"\nassert     area_polygon(2, 1) == 0.5, \"Wrong area\"\nassert     area_polygon(3, 2) == 1, \"Wrong area\"\nassert     area_polygon(5, 3) == 1.75, \"Wrong area\"\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     area_polygon(3, 5) == 6\nassert     area_polygon(3, 4) == 5\nassert     area_polygon(4, 5) == 10\nassert     area_polygon(3, 3) == 6\nassert     area_polygon(2, 10) == 50\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \narea_polygon(4,5) == 2*pi*25/4\nassert area_polygon(4,5) == area_polygon(5,5) == pi*25/4\nassert area_polygon(4,5) == area_polygon(3,5) == pi*25/4\nassert area_polygon(4,5) == area_polygon(1,5) == pi*25/4\n\ndef perimeter_polygon(s, l):\n    '''\n    Write a function to calculate the perimeter of a regular polygon given the length and number of its sides.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     area_polygon(3, 3) == 30.0\nassert area_polygon(4, 4) == 60.0\nassert area_polygon(1, 1) == 1.0\n\ndef volume_cone(height, radius):\n    '''\n    Write a function to calculate the volume of a cone given its height and radius.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     area_polygon(3, 4) == 10.5\nassert     area_polygon(5, 8) == 78.5\nassert     area_polygon(5, 4) == 28.0\nassert     area_polygon(5, 6) == 44.5\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     area_polygon(10, 4) == (4 * 10 * tan(pi / 4) / (pi - 2))\nassert     area_polygon(6, 5) == (pi * 6 * 6) / 2\nassert     area_polygon(15, 6) == (pi * 15 * 15) / 4\nassert     area_polygon(2, 6) == (pi * 2 * (2 * 2 * 2 + 2 * 2 + 2 * 2)) / 10\nassert     area_polygon(3, 3) == (pi * 3 * 3) / 4\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     area_polygon(3, 5) == 15.0, \"area_polygon(3, 5) = 15\"\nassert     area_polygon(3, 3) == 5.0, \"area_polygon(3, 3) = 5\"\nassert     area_polygon(4, 4) == 10.0, \"area_polygon(4, 4) = 10\"\nassert     area_polygon(10, 1) == 0.0, \"area_polygon(10, 1) = 0\"\nassert     area_polygon(10, 10) == 40.0, \"area_polygon(10, 10) = 40\"\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     area_polygon(4,2) == 8\nassert     area_polygon(3,2) == 6\nassert     area_polygon(6,2) == 12\nassert     area_polygon(4,3) == 20\nassert     area_polygon(8,2) == 16\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ndiv_sum(6) == True\ndiv_sum(9) == False\ndiv_sum(10) == True\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     div_sum(9) == True\nassert     div_sum(12) == False\nassert     div_sum(17) == True\nassert     div_sum(101) == False\nassert     div_sum(109) == True\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(\"div_sum should return True if the sum of the divisors of two integers are the same. \"\n\"div_sum should return False if they are not.\")\nprint(div_sum(0))\nprint(div_sum(3))\nprint(div_sum(4))\nprint(div_sum(6))\nprint(div_sum(12))\n\ndef fizz_buzz(n):\n    '''\n    Write a function that takes a number and determines if it is a multiple of 3, 5, or both.\n    '''\n    pass\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     div_sum(6) == True, \"Test Failed\" \nassert     div_sum(7) == False, \"Test Failed\" \nassert     div_sum(0) == False, \"Test Failed\" \n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     div_sum(12) == True\nassert     div_sum(10) == True\nassert     div_sum(20) == True\nassert     div_sum(40) == False\nassert     div_sum(50) == False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef has_double(n):\n    '''\n    Write a function to determine whether or not the given positive integer n has a \n    double. A double is a number that is the sum of two different numbers.\n    '''\n    pass\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ndiv_sum(1) == True, \"div_sum(1) should be True\"\nassert \ndiv_sum(2) == True, \"div_sum(2) should be True\"\nassert \ndiv_sum(3) == False, \"div_sum(3) should be False\"\nassert \ndiv_sum(4) == True, \"div_sum(4) should be True\"\nassert \ndiv_sum(12) == False, \"div_sum(12) should be False\"\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef sum_div(n):\n    '''\n    Write a function to determine if the sum of all of the divisors of n is greater than or equal to n.\n    '''\n    pass\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_char_position(\"\") == 0, \"Input:  =  \"\nassert     count_char_position(\"a\") == 1, \"Input:  =  \"\nassert     count_char_position(\"ab\") == 1, \"Input:  =  \"\nassert     count_char_position(\"abc\") == 2, \"Input:  =  \"\nassert     count_char_position(\"abcd\") == 1, \"Input:  =  \"\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_char_position('banana') == 3\nassert     count_char_position('hippopotamus') == 3\nassert     count_char_position('kittens') == 0\nassert     count_char_position('monkeys') == 3\nassert     count_char_position('To be or not to be, that is the question') == 5\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(count_char_position(\"How are you doing?\"))     # Should print 2\nprint(count_char_position(\"hEllO wORlD\"))             # Should print 1\nprint(count_char_position(\"HELLO WORLD\"))             # Should print 2\nprint(count_char_position(\"hEllO\"))                 # Should print 1\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_char_position('') == 0, \"TypeError\"\nassert     count_char_position('a') == 1, \"TypeError\"\nassert     count_char_position('A') == 1, \"TypeError\"\nassert     count_char_position('aAbBa') == 5, \"TypeError\"\nassert     count_char_position('abcdefghijklmnopqrstuvwxyz') == 26, \"TypeError\"\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_char_position('abracadabra') == 3, \"it should return the length of string\"\nassert     count_char_position('abracadabra') == 3, \"it should return the length of string\"\nassert     count_char_position('abracadabra') == 2, \"it should return the length of string\"\nassert     count_char_position('abracadabra') == 5, \"it should return the length of string\"\nassert     count_char_position('abracadabra') == 8, \"it should return the length of string\"\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_char_position('PYTHON') == 2\nassert     count_char_position('python') == 2\nassert     count_char_position('Python') == 0\nassert     count_char_position('pYthOn') == 0\nassert     count_char_position('abcabc') == 3\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_char_position(\"abcd\") == 2, \"Wrong answer\"\nassert     count_char_position(\"aab\") == 2, \"Wrong answer\"\nassert     count_char_position(\"abc\") == 3, \"Wrong answer\"\nassert     count_char_position(\"abcA\") == 3, \"Wrong answer\"\nassert     count_char_position(\"abcABC\") == 4, \"Wrong answer\"\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_even_pair([2,1,3,5,4,6,1,3,3,1]) == 2\nassert     find_even_pair([2,1,3,5,6,4,6,1,3,3,1]) == 0\nassert     find_even_pair([2,1,3,5,6,4,5,1,3,3,1]) == 4\nassert     find_even_pair([2,1,3,5,6,4,5,1,3,3,1,2]) == 3\nassert     find_even_pair([2,1,3,5,6,4,5,1,3,3,1,2,3]) == 2\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nfind_even_pair([1,2,3,4,5]) == 1\nfind_even_pair([4,5,6,7,8,9,10]) == 4\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_even_pair([1, 2, 3, 4, 5]) == 3, \"Should be 3\"\nassert     find_even_pair([1, 2, 3, 4, 5, 6, 7, 8]) == 0, \"Should be 0\"\nassert     find_even_pair([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 2, \"Should be 2\"\nassert     find_even_pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3, \"Should be 3\"\nassert     find_even_pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 1, \"Should be 1\"\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_even_pair([2, 3, 4]) == 1, \"xor of 2 and 4\"\nassert     find_even_pair([1, 3, 4]) == 2, \"xor of 3 and 4\"\nassert     find_even_pair([2, 2, 2]) == 2, \"xor of 2 and 2\"\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    A = [1, 1, 0, 1, 0]\n    print(find_even_pair(A))\n    # Output: 2\n\n    A = [1, 1, 1, 1, 1]\n    print(find_even_pair(A))\n    # Output: 1\n    \n    A = [1, 1, 1, 2, 2]\n    print(find_even_pair(A))\n    # Output: 2\n\n    A = [0, 0, 0, 0]\n    print(find_even_pair(A))\n    # Output: 0"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_even_pair([2,3,4]) == 3\nassert     find_even_pair([2,2,4]) == 2\nassert     find_even_pair([1,2,3,4]) == 3\nassert     find_even_pair([0,2,3,4]) == 0\nassert     find_even_pair([1,1,3,3,7,8,9,10,11,13,14,16]) == 3\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_even_pair([2,3,4,6,7,12]) == 2\nassert     find_even_pair([5,6,7,10]) == 2\nassert     find_even_pair([2,3,4,5,6,7]) == 2\nassert     find_even_pair([1,2,3,4,5,6]) == 0\nassert     find_even_pair([]) == 0\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     next_power_of_2(15) == 16, 'incorrect output'\nassert     next_power_of_2(16) == 16, 'incorrect output'\nassert     next_power_of_2(1) == 2, 'incorrect output'\nassert     next_power_of_2(2) == 4, 'incorrect output'\n\ndef next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # find the next power of 2 greater than or equal to n\n    while (1 << next_power_of_2(n) <= n):\n        n = next_power_of_2(n)\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef max_value_in_dict(d): \n    '''\n    Write a python function to find the maximum value in the dict.\n    '''\n    pass\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     next_power_of_2(0) == 1\nassert     next_power_of_2(1) == 1\nassert     next_power_of_2(2) == 2\nassert     next_power_of_2(3) == 2\nassert     next_power_of_2(4) == 4\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nnext_power_of_2(1) == 1\nnext_power_of_2(9) == 4\nnext_power_of_2(5) == 8\nnext_power_of_2(100) == 1024\n\ndef prefix_power_of_2(n): \n    '''\n    Write a python function to find the prefix power of 2 greater than n.\n    '''\n    pass\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     next_power_of_2(3) == 4\nassert     next_power_of_2(9) == 8\nassert     next_power_of_2(13) == 8\nassert     next_power_of_2(37) == 16\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     next_power_of_2(1) == 1\nassert     next_power_of_2(2) == 2\nassert     next_power_of_2(5) == 4\nassert     next_power_of_2(8) == 8\nassert     next_power_of_2(16) == 16\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     next_power_of_2(0) == 1\nassert     next_power_of_2(1) == 1\nassert     next_power_of_2(2) == 2\nassert     next_power_of_2(3) == 2\nassert     next_power_of_2(4) == 4\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     next_power_of_2(8) == 1\nassert     next_power_of_2(15) == 2\nassert     next_power_of_2(16) == 2\nassert     next_power_of_2(32) == 4\nassert     next_power_of_2(64) == 8\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     frequency([1,2,3,4],1) == 2\nassert     frequency([1,2,3,4],4) == 1\nassert     frequency([1,2,3,4],5) == 0\nassert     frequency([1,2,3,4,2,2,2,2],2) == 2\nassert     frequency([1,2,3,4,2,2,2,2],4) == 1\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     frequency([1,1,2,2,3,3,3,3,3,3,4,5],3) == 3\nassert     frequency([1,1,2,2,3,3,3,3,3,3,4,5],0) == 0\nassert     frequency([1,1,2,2,3,3,3,3,3,3,4,5],9) == 0\nassert     frequency([1,1,2,2,3,3,3,3,3,3,4,5],5) == 4\nassert     frequency([1,1,2,2,3,3,3,3,3,3,4,5],4) == 4\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     frequency([2,2,2,2,2],2)==4\nassert     frequency([1,1,1,1,1],1)==5\nassert     frequency([1,1,1,1,1,1],1)==6\nassert     frequency([2,2,2,2,2],2)==4\nassert     frequency([1,1,1,1,1,1,1,1,1,1],1)==10\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nfrequency([1,1,1,2,2,2],1) == 3\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     frequency([1,2,3,3,4,5],3) == 2, \"Not correct\"\nassert     frequency([1,2,3,3,4,5],7) == 0, \"Not correct\"\nassert     frequency([1,2,3,3,4,5],2) == 3, \"Not correct\"\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     frequency([1,1,1],1) == 2\nassert     frequency([1,1,2,1,1,1,1],1) == 6\nassert     frequency([1,1,2,1,2,1,1],1) == 4\nassert     frequency([1,2,1,2,1,1,1],1) == 2\nassert     frequency([1,1,1,1],1) == 4\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     frequency(nums, 5) == 0\nassert     frequency(nums, 1) == 0\nassert     frequency(nums, 9) == 1\nassert     frequency(nums, 9) == 1\nassert     frequency(nums, 8) == 0\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     frequency([1,2,3,4,4],4) == 2\nassert     frequency([1,2,3,4],4) == 1\nassert     frequency([1,2,3,4,5,6,7,7,7,8,9,10,10,10,10,10],10) == 5\nassert     frequency([1,2,3,4,5,5,5,5,5,5],5) == 4\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     frequency([2,3,2,2,2,3,4,5],2) == 3\nassert     frequency([2,3,2,2,2,3,4,5],5) == 2\nassert     frequency([2,3,2,2,2,3,4,5],3) == 2\nassert     frequency([1,2,3,4,4,5,6],3) == 2\nassert     frequency([1,2,3,4,4,5,6],0) == 0\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_range_list([1, 2, 3, 4, 5], 1, 5) == 10\nassert     sum_range_list([1, 2, 3, 4, 5], 2, 4) == 9\nassert     sum_range_list([1, 2, 3, 4, 5], 0, 5) == 15\nassert     sum_range_list([1, 2, 3, 4, 5], 0, -1) == 15\nassert     sum_range_list([1, 2, 3, 4, 5], -1, -1) == 1\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert sum_range_list([1,2,3,4,5], 1, 4) == 15\nassert sum_range_list([1,2,3,4,5], 0, 3) == 10\nassert sum_range_list([1,2,3,4,5], 2, 5) == 9\nassert sum_range_list([1,2,3,4,5], 0, 5) == 15\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert sum_range_list([1,2,3,4], 1, 3) == 10\nassert sum_range_list([1,2,3,4], 1, 2) == 10\nassert sum_range_list([1,2,3,4], 0, 4) == 10\nassert sum_range_list([1,2,3,4], -2, -1) == 3\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nassert sum_range_list([3, 2, 4, 1], 2, 3) == 6\nassert sum_range_list([1, 2, 3, 4, 5, 6], 2, 4) == 13\nassert sum_range_list([2, 4, 6, 8, 10, 12, 14, 16, 18, 20], 2, 6) == 30\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef even_odd_list(list1, m, n):\n    '''\n    Write a function to check whether a list is a palindrome.\n    '''\n    pass\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_range_list([0,3,6,9],1,4) == 0 \nassert     sum_range_list([1,2,3,4],1,4) == 1 \nassert     sum_range_list([1,2,3,4],0,2) == 6 \nassert     sum_range_list([1,2,3,4],0,5) == 10 \nassert     sum_range_list([1,2,3,4],0,3) == 3 \n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_range_list([1, 2, 3, 4, 5, 6], 1, 4) == 9\nassert     sum_range_list([1, 2, 3, 4, 5, 6], 2, 4) == 10\nassert     sum_range_list([1, 2, 3, 4, 5, 6], 0, 4) == 15\nassert     sum_range_list([1, 2, 3, 4, 5, 6], 4, 4) == 6\nassert     sum_range_list([1, 2, 3, 4, 5, 6], 0, 2) == 6\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_range_list([0, 1, 2, 3, 4], 2, 5) == 10\nassert     sum_range_list([1, 2, 3, 4, 5], 2, 5) == 13\nassert     sum_range_list([0, 1, 2, 3, 4], 2, 5) == 10\nassert     sum_range_list([1, 2, 3, 4, 5], 2, 5) == 10\nassert     sum_range_list([1, 2, 3, 4, 5], 0, 5) == 15\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert perimeter_pentagon(1) == 5.0, \\\n'''\nRun the function to compute the perimeter of a regular pentagon from the length of its sides.\nNote that the value returned must be a float.\n\nIf you get an error, make sure that you have defined and imported the math module.\n\nExample:\n    Input: 5\n    Output: 10.0\n'''\nassert perimeter_pentagon(2) == 10.0, \\\n'''\nRun the function to compute the perimeter of a regular pentagon from the length of its sides.\nNote that the value returned must be a float.\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     perimeter_pentagon(2) == 5.0\nassert     perimeter_pentagon(5) == 15.0\nassert     perimeter_pentagon(9) == 22.5\nassert     perimeter_pentagon(12) == 30.0\n\ndef area_square(b):\n    '''\n    Write a function to find the area of a square from its length.\n    '''\n    pass\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    pass\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     perimeter_pentagon(1) == 5, \"Wrong answer. Expected: 5, got %s\" % 5\nassert     perimeter_pentagon(2) == 10, \"Wrong answer. Expected: 10, got %s\" % 10\nassert     perimeter_pentagon(5) == 20, \"Wrong answer. Expected: 20, got %s\" % 20\nassert     perimeter_pentagon(10) == 40, \"Wrong answer. Expected: 40, got %s\" % 40\nassert     perimeter_pentagon(20) == 80, \"Wrong answer. Expected: 80, got %s\" % 80\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     perimeter_pentagon(1) == 5.0\nassert     perimeter_pentagon(2) == 10.0\nassert     perimeter_pentagon(3) == 15.0\nassert     perimeter_pentagon(4) == 20.0\nassert     perimeter_pentagon(5) == 25.0\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     perimeter_pentagon(5) == 10, \"10\"\nassert     perimeter_pentagon(3) == 12, \"12\"\nassert     perimeter_pentagon(1) == 4, \"4\"\nassert     perimeter_pentagon(0) == 0, \"0\"\nassert     perimeter_pentagon(-1) == 0, \"0\"\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef find_pentagon_nearest(a, n):\n    '''\n    Write a function to find the nearest pentagon of a length a from a list of n pentagon lengths.\n    '''\n    pass\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     perimeter_pentagon(5) == 15, \"Wrong answer\"\nprint(\"Correct\")\n\ndef area_hexagon(a):\n    '''\n    Write a function to find the area of a regular hexagon from its length of sides.\n    '''\n    pass\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     perimeter_pentagon(1) == 1, \"WRONG\"\nassert     perimeter_pentagon(2) == 5, \"WRONG\"\nassert     perimeter_pentagon(3) == 10, \"WRONG\"\nassert     perimeter_pentagon(4) == 12, \"WRONG\"\nassert     perimeter_pentagon(5) == 15, \"WRONG\"\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     perimeter_pentagon(6) == 12, \"You should return the length of the hypotenuse of a pentagon with the given length of the side\"\n\ndef perimeter_square(a):\n    '''\n    Write a function to find the perimeter of a regular square from the length of its side.\n    '''\n    pass\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_occurance('abcd') == 1, \"Wrong result\"\nassert     count_occurance('ab') == 0, \"Wrong result\"\nassert     count_occurance('abcd', 'c') == 2, \"Wrong result\"\nassert     count_occurance('abcd', 'd') == 1, \"Wrong result\"\nassert     count_occurance('abcd','s') == 2, \"Wrong result\"\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_occurance(\"how are you\") == 1\nassert     count_occurance(\"how are you and you\") == 2\nassert     count_occurance(\"how are you and how are you\") == 2\nassert     count_occurance(\"how are you and you and how are you\") == 2\nassert     count_occurance(\"\") == 0\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    \n    # simple testcases\n    # print (count_occurance('hello'))\n    # print (count_occurance('how are you?'))\n    \n    # full testcases\n    # import random\n    # test_s = ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(10))\n    # print (test_s)\n    # print (count_occurance(test_s))\n    \n    print (count_occurance('xyxyyxyxyx')"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_occurance('abcstdabc') == 2\nassert     count_occurance('abc') == 0\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_occurance(\"abcde\") == 1\nassert     count_occurance(\"abcdea\") == 2\nassert     count_occurance(\"abcdeab\") == 3\nassert     count_occurance(\"\") == 0\n\ndef count_occurance_recursive(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef sum_of_numbers(lst):\n    '''\n    Write a function that returns the sum of all the items in a list.\n    '''\n    pass\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    return s.count(\"std\")\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_occurance('abcabcabc') == 3\nassert     count_occurance('a') == 1\nassert     count_occurance('a') == 1\nassert     count_occurance('abc') == 2\nassert     count_occurance('abc') == 2\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_type((1, 2, 3)) == None, \"The tuple is having only one element\"\nassert     check_type((1, \"a\", 3)) == None, \"The tuple is having only one element\"\nassert     check_type((1, 1.0, 3)) == None, \"The tuple is having only one element\"\nassert     check_type((1, 1, 1.0, 3)) == None, \"The tuple is having only one element\"\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_type((\"banana\", \"mango\")) == \"all values are of the same data type\", \"Result should be 'all values are of the same data type'\"\nassert     check_type((\"banana\", \"orange\")) == \"all values are of the same data type\", \"Result should be 'all values are of the same data type'\"\nassert     check_type((\"orange\", \"banana\")) == \"all values are of the same data type\", \"Result should be 'all values are of the same data type'\"\nassert     check_type((\"apple\", \"banana\")) == \"all values are of the same data type\", \"Result should be 'all values are of the same data type'\"\nassert     check_type((\"banana\", \"apple\")) == \"all values are of the same data type\", \"Result should be 'all values are of the same data type'\"\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_type(('a','b','a')) == True, 'Your function does not work'\nassert     check_type(('a','a','a')) == True, 'Your function does not work'\nassert     check_type(('a','a','b')) == False, 'Your function does not work'\nassert     check_type(('a','a','a','a','a')) == False, 'Your function does not work'\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_type([1,2,3,4]) == False, \"wrong\"\nassert     check_type([1,2,3,4,5]) == True, \"wrong\"\nassert     check_type([\"a\",\"b\",\"c\"]) == True, \"wrong\"\nassert     check_type([\"a\",\"b\",\"c\",\"d\"]) == False, \"wrong\"\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_type([1, 2,'string']) == True\nassert     check_type([1, 2.0,'string']) == False\nassert     check_type([1,'string','string']) == False\nassert     check_type([1, 1, 1]) == True\nassert     check_type([1, 1, 1.0]) == False\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_type([1,2,3,4,5]) == True, \"List should have same data type\"\nassert     check_type((1,2,3,4,5)) == True, \"Tuple should have same data type\"\n\ndef equal_type(*test_tuple):\n    '''\n    Write a function to check if all the elements are equal or not.\n    '''\n    pass\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_type((1,2,3,'hi')) == True, \"Type check failed\"\nassert check_type((1,2,'hi')) == False, \"Type check failed\"\n\ndef check_sequence(test_sequence):\n    '''\n    Write a function to check if all the elements in sequence have same data type or not.\n    '''\n    pass\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_type((1, 2, 3)) == True, \"List are not same type.\"\nassert     check_type((1, '2', 3)) == False, \"String are not same type.\"\nassert     check_type(('1', '2', '3')) == False, \"Tuple are not same type.\"\nassert     check_type(()) == True, \"Empty tuple.\"\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_type((1,2,'A')) == False\nassert     check_type((1,'2','A')) == True\nassert     check_type((1,2,3,4,5,6,7,8,9)) == True\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    pass\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef majority_element(arr, n):\n    '''\n    Write a function that takes in a sorted array, its length (n), and returns the index of the majority element, if the majority element exists. If there is no majority element, return -1.\n    '''\n    pass\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef test_majority_element():\n    assert is_majority([1,1,1,3,3,2,2,2], 7, 3) == True\n    assert is_majority([1,1,1,2,2,2,2], 6, 2) == True\n    assert is_majority([1,1,1,1,1,1], 5, 1) == True\n    "
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_majority([1,2,3,4,5], 5, 3) == True, 'Not correct'\nassert     is_majority([1,2,3,4,5], 5, 5) == False, 'Not correct'\nassert     is_majority([1,2,3,4,5], 5, 4) == True, 'Not correct'\nassert     is_majority([1,2,3,4,5], 5, 1) == True, 'Not correct'\nassert     is_majority([1,2,3,4,5], 5, 0) == False, 'Not correct'\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint('  Passed all tests!  ')\n\nprint('')\n\nimport random\n\ndef test_majority():\n    # Test data for is_majority\n    data = [(random.randint(0, 100), random.randint(0, 100), random.randint(0, 100)) for i in range(100)]\n    for i, d in enumerate(data):\n        x, y, z = d\n        assert is_majority(data, i, x) == (y == z)\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nis_majority([2,2,1,1,1,2,2],5,2) == True\nis_majority([1,1,2,2,2],5,2) == False\nis_majority([1,1,2,2,2],5,1) == True\nis_majority([1,1,1,1,1],5,1) == True\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef is_majority_2(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # check the correctness of the returned value\n    \n    # return 0/1\n    \n    def count(arr, x, l, r):\n        cnt = 0\n        while (l <= r):\n            if arr[l] == x:\n                cnt += 1\n                l += 1\n            else:\n                break\n        while (l <= r):\n            if arr[r] == x:\n                cnt += 1\n                r -= 1\n            else:\n                break\n        return cnt\n    \n    if count(arr, x, 0, n - 1) > (n // 2):\n        return 1\n    return 0\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    arr = [3, 5, 5, 2, 1]\n    print(is_majority(arr, len(arr), 5))"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nis_majority([1,1,1,1,2,2,2,2], 8, 2) == True\nis_majority([1,1,1,2,2,2,2], 8, 2) == False\nis_majority([1,1,1,1,2,2,2,2], 8, 1) == True\nis_majority([1,1,1,1,2,2,2,2], 8, 2) == False\nis_majority([1,1,1,1,1,2,2,2,2], 8, 2) == False\nis_majority([1,1,1,1,1,1,2,2,2,2], 8, 2) == False\nis_majority([1,1,1,1,1,1,1,2,2,2,2], 8, 3) == False\nis_majority([1,1,1,1,1,1,1,1,1,2,2,2,2], 8, 4) == False\nis_majority([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ncount_Set_Bits(14) == 5 # set bits in binary number are = 1, so total set bits = 5. \ncount_Set_Bits(15) == 6 # set bits in binary number are = 1, so total set bits = 6. \n\n\n'''\nWrite a Python program to check whether a given number is a perfect square or not.\n'''\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_Set_Bits(11) == 2\nassert     count_Set_Bits(0) == 0\nassert     count_Set_Bits(7) == 1\nassert     count_Set_Bits(1) == 1\nassert     count_Set_Bits(9) == 2\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_Set_Bits(0) == 0, \"count_Set_Bits(0) should be 0\"\nassert     count_Set_Bits(1) == 1, \"count_Set_Bits(1) should be 1\"\nassert     count_Set_Bits(2) == 1, \"count_Set_Bits(2) should be 1\"\nassert     count_Set_Bits(3) == 1, \"count_Set_Bits(3) should be 1\"\nassert     count_Set_Bits(5) == 1, \"count_Set_Bits(5) should be 1\"\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return sum([int(c) for c in bin(n)[2:] if int(c) == 1])\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_Set_Bits(2) == 1, \"Should be 1\"\nassert     count_Set_Bits(13) == 2, \"Should be 2\"\nassert     count_Set_Bits(0) == 0, \"Should be 0\"\nassert     count_Set_Bits(15) == 1, \"Should be 1\"\nassert     count_Set_Bits(-1) == 0, \"Should be 0\"\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef count_Set_Bits_more(n):\n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    pass\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_Set_Bits(8) == 1\nassert count_Set_Bits(10) == 2\nassert count_Set_Bits(12) == 2\nassert count_Set_Bits(100) == 9\nassert count_Set_Bits(6) == 2\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef count_Set_Bits_Pythonic(n): \n    '''\n    Write a pythonic solution to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    n = n.to_bytes((n.bit_length()+7)//8, 'big')\n    return sum([0 if not (i & (1 << j)) else 1 for j in range(n.bit_length())])\n    "
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nodd_values_string(\"abcdabca\")\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     odd_values_string(\"a\") == \"a\"\nassert     odd_values_string(\"ab\") == \"a\"\nassert     odd_values_string(\"abcd\") == \"a\"\nassert     odd_values_string(\"abcdz\") == \"b\"\nassert     odd_values_string(\"abcde\") == \"abcde\"\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     odd_values_string(\"Python\") == \"yPto\"\nassert     odd_values_string(\"abhij\") == \"\"\nassert     odd_values_string(\"abhi\") == \"hi\"\nassert     odd_values_string(\"abhi\") == \"\""
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     odd_values_string('aabcd') == 'aabc'\nassert     odd_values_string('abc') == 'abc'\nassert     odd_values_string('axcy') == 'ac'\n\n\n\n\ndef prime_numbers(num):\n    '''\n    Write a python function to find if the given number is a prime number or not.\n    '''\n    pass\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     odd_values_string('abcdabcde') == 'abcdabcd', 'odd values'\nassert     odd_values_string('a') == '', 'empty string'\nassert     odd_values_string('abca') == 'abca','single char'\nassert     odd_values_string('abcd') == '', 'empty string'\nassert     odd_values_string('abcde') == 'abcde','single char'\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     odd_values_string('String') == ''\nassert odd_values_string('String') == 'et'\nassert odd_values_string('Twinkle, twinkle, little star, How I wonder what you are! Up above the world so high, Like a diamond in the sky. Twinkle, twinkle, little star, How I wonder what you are') == 'Twinkle, twinkle, little star, What I wonder what you are'\nassert odd_values_string('Of course, sometimes the work is so much fun') == 'Of course, sometimes the work so'\nassert odd_values_string('Very fun and interesting') == 'Very fun and interesting'\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     odd_values_string(\"abab\") == \"abba\"\nassert     odd_values_string(\"ababababab\") == \"abababab\"\nassert     odd_values_string(\"ababab\") == \"abab\"\nprint('All test cases have passed')\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     odd_values_string(\"aabcc\") == \"ac\", \"Should return 'ac' for given 'aabcc' string\"\nassert     odd_values_string(\"w3resource\") == \"\", \"Should return '', for given '' string\"\nassert     odd_values_string(\"k\") == \"k\", \"Should return 'k' for given 'k' string\"\nassert     odd_values_string(\"python\") == \"yth\", \"Should return 'yth' for given 'python' string\"\nassert     odd_values_string(\"gggggggggggggggg\") == \"g\", \"Should return 'g' for given 'gggggggggggggggg' string\"\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert odd_values_string('abbcbdddddde') == 'abbce'\nassert odd_values_string('abbcbbdddddd') == 'abbce'\nassert odd_values_string('abbcdeeedcba') == 'abbce'\nassert odd_values_string('abcde') == 'abc'\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     min_of_three(2,3,5) == 2, 'WRONG!!'\nassert     min_of_three(1,1,1) == 1, 'WRONG!!'\nassert     min_of_three(-1,-1,-1) == -1, 'WRONG!!'\nassert     min_of_three(1,1,1) == 1, 'WRONG!!'\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert min_of_three(5,2,3) == 2\nassert min_of_three(-10,-7,1) == -7\nassert min_of_three(50,-20,-30) == -30\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     min_of_three(2,4,3) == 2\nassert     min_of_three(4,3,3) == 3\nassert     min_of_three(4,4,3) == 3\nassert     min_of_three(1,2,3) == 1\nassert     min_of_three(1,2,2) == 2\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    min_of_three(10,20,30) == 10\n    min_of_three(10,20,30) == 30\n    min_of_three(10,20,30) == 20\n    min_of_three(-10,20,30) == -10\n    min_of_three(-10,20,30) == 20"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     min_of_three(1,2,3) == 1\nassert min_of_three(1,2,3)!= 2\nassert min_of_three(1,2,3)!= 3\n\nprint('done.'"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     min_of_three(1,2,3) == 1\nassert min_of_three(1,2,3) == 1\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     min_of_three(10,5,4) == 5\nassert     min_of_three(10,5,4) == 4\nassert     min_of_three(10,5,4) == 10\nassert     min_of_three(10,5,4) == 10\n\nprint('\"PASSED\"')\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef max_of_three(a,b,c): \n    '''\n    Write a function to find maximum of three numbers.\n    '''\n    pass\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(1,0,1) == True\nassert     all_Bits_Set_In_The_Given_Range(1,0,2) == False\nassert     all_Bits_Set_In_The_Given_Range(1,2,2) == False\nassert     all_Bits_Set_In_The_Given_Range(1,0,4) == True\nassert     all_Bits_Set_In_The_Given_Range(1,4,4) == True\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(3, 0, 1) == True, \"Should return True\"\nassert     all_Bits_Set_In_The_Given_Range(3, 1, 2) == False, \"Should return False\"\nassert     all_Bits_Set_In_The_Given_Range(2, 0, 1) == False, \"Should return False\"\nassert     all_Bits_Set_In_The_Given_Range(4, 0, 1) == False, \"Should return False\"\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nall_Bits_Set_In_The_Given_Range(5,0,3)\nall_Bits_Set_In_The_Given_Range(8,4,7)\nall_Bits_Set_In_The_Given_Range(10,5,9)\nall_Bits_Set_In_The_Given_Range(13,1,11)\nall_Bits_Set_In_The_Given_Range(20,2,19)"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(5,1,4) == True\nassert     all_Bits_Set_In_The_Given_Range(6,1,4) == False\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(4,1,4) == True \nassert     all_Bits_Set_In_The_Given_Range(4,2,4) == True \nassert     all_Bits_Set_In_The_Given_Range(4,4,4) == True \nassert     all_Bits_Set_In_The_Given_Range(4,1,3) == False \nassert     all_Bits_Set_In_The_Given_Range(4,3,4) == False \n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(13,2,5) == True\nassert     all_Bits_Set_In_The_Given_Range(13,2,13) == False\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(n=6,l=5,r=15) == False\nassert     all_Bits_Set_In_The_Given_Range(n=6,l=5,r=16) == True\nassert     all_Bits_Set_In_The_Given_Range(n=6,l=5,r=17) == False\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(5,1,4) == True\nassert     all_Bits_Set_In_The_Given_Range(5,1,3) == False\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == '__main__':\n    import doctest\n    if doctest.testmod().failed == 0:\n        print(\"\\n*** ALL TEST PASSED!\\n\")"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     re_arrange_array([5, 6, 7, -8], 3) == [-8, 5, 6, 7], 'Should re_arrange_array([5, 6, 7, -8], 3) == [-8, 5, 6, 7]'\nassert     re_arrange_array([5, 6, 7, -8, 9], 3) == [-8, 5, 6, 7, 9], 'Should re_arrange_array([5, 6, 7, -8, 9], 3) == [-8, 5, 6, 7, 9]'\nassert     re_arrange_array([5, -8, 6, 7, -9], 3) == [5, -8, 6, 7, -9], 'Should re_arrange_array([5, -8, 6, 7, -9], 3) == [5, -8, 6, 7, -9]'\nassert     re_arrange_array([5, -8, 6, 7, -9, 10], 3) == [5, -8, 6, 7, -9, 10], 'Should re_arrange_array([5, -8, 6, 7, -9, 10], 3) == [5, -8, 6, 7, -9, 10]'\nassert     re_arrange_array([5, -8, 6, 7, -9, 10, -12], 3) == [-12, 5, -8, 6, 7, -9, 10], 'Should re_arrange_array([5, -8, 6, 7, -9, 10, -12], 3) == [-12, 5, -8, 6, 7, -9, 10]'\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert not re_arrange_array([-1, 3, 5], 1) == [-1, 3, 5]\nassert re_arrange_array([-1, 3, 5], 2) == [-1, 3, 5]\nassert re_arrange_array([-1, 3, 5], 3) == [-1, -3, 5]\nassert re_arrange_array([-1, 3, 5], 4) == [-1, -3, 5]\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\narr = [1,2,3,4,5,6]\nn = 3\nre_arrange_array(arr, n)\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     re_arrange_array([1, 1, 1, 1, 1, 1], 1) == [1, 1, 1, 1, 1, 1]\nassert     re_arrange_array([1, -1, 1, 1, -1, 1], 1) == [-1, 1, -1, 1, 1, 1]\nassert     re_arrange_array([1, -1, 1, 1, -1, 1], 2) == [-1, -1, 1, 1, 1, 1]\nassert     re_arrange_array([1, -1, 1, 1, -1, 1], 3) == [-1, -1, -1, 1, 1, 1]\nassert     re_arrange_array([1, -1, 1, 1, -1, 1], 4) == [-1, -1, -1, -1, 1, 1]\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     replace_blank(\"\",\"\") == \"\", \"You have not passed the test\"\nassert replace_blank(\"\",\"a\") == \"a\", \"You have not passed the test\"\nassert replace_blank(\"a\",\"\") == \"a\", \"You have not passed the test\"\nassert replace_blank(\"\",\" \") == \" \", \"You have not passed the test\"\nassert replace_blank(\"\",\"a b\") == \"a b\", \"You have not passed the test\"\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     replace_blank('Hi John,','') == 'Hi John,', 'incorrect'\nassert     replace_blank('','') == '', 'incorrect'\nassert     replace_blank('Hi John,','') == 'Hi John,', 'incorrect'"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    replace_blank('This is a test','.') == 'This is a test.'\n    replace_blank('Bye, byee',',') == 'Bye, byee'\n    replace_blank('',',') == ','\n    "
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     replace_blank(\"I love Python\",'P') == \"I love Python\"\nassert     replace_blank(\"I love Python\",'k') == \"I k love Python\"\nassert     replace_blank(\"I love Python\",'') == \"I love Python\""
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     replace_blank('hello world', 'b') == 'bhilw'\nassert     replace_blank('a b', 'c') == 'abc'\nassert     replace_blank('','') == ''\nassert     replace_blank('world','') == 'world'\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     replace_blank('a  ', '!') == 'a!', 'The test failed!'\nassert     replace_blank('', '!') == '!', 'The test failed!'\nassert     replace_blank('', '') == '', 'The test failed!'\nassert     replace_blank('', 'a') == 'a', 'The test failed!'\nassert     replace_blank('ab', '!') == 'a!b', 'The test failed!'\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     replace_blank('This is a test string with a blank character', '#') == 'This is a test string with a # character'\nassert     replace_blank('', '#') == ''\nassert     replace_blank('THIS IS A TEST STRING WITH A BLANK CHARACTER', '#') == 'THIS IS A TEST STRING WITH A # CHARACTER'\nassert     replace_blank('This is a test string with a blank character','') == 'This is a test string with a blank character'\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(replace_blank(\"We are happy\",\"x\"))\n\n'''\nWe are happy\n'''"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     larg_nnum([1,2,3,4,5,6,7,8,9],3) == [9,8,7], \"Wrong!\"\nassert larg_nnum([1,2,3,4,5,6,7,8,9],2) == [7,9], \"Wrong!\"\nassert larg_nnum([1,2,3,4,5,6,7,8,9],1) == [8], \"Wrong!\"\nassert larg_nnum([1,2,3,4,5,6,7,8,9],0) == [], \"Wrong!\"\n\ndef larg_nseq(seq,n):\n    '''\n    Write a function that takes in a sequence and an integer n and returns a list containing the n largest items from the sequence.\n    '''\n    pass\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     larg_nnum([1,2,3,4,5],1)==[5]\nassert     larg_nnum([1,2,3,4,5],2)==[3,4]\nassert     larg_nnum([1,2,3,4,5],3)==[2,4,5]\nassert     larg_nnum([1,2,3,4,5],4)==[1,2,3,4]\nassert     larg_nnum([1,2,3,4,5],5)==[1,2,3,4,5]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nlarg_nnum([0, 1, 2, 10, -1, 50, 1, 1], 3) == [50, 2, 0]\nassert \nlarg_nnum([0, 1, 2, 10, -1, 50, 1, 1], 4) == [50, 2, 0, 1]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef larg_nnum_bis(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Your code here\n    n = n + 1\n    b = []\n    for i in range(n):\n        max1 = max(list1)\n        list1.remove(max1)\n        b.append(max1)\n    return b\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nlarg_nnum([1,2,3,4,5,6,7],5) == [7,6,5,4,3]\nassert larg_nnum([5,2,3,4,1],4) == [4,3,2,5]\nassert larg_nnum([1,2,3,4,5,6,7],3) == [7,6,5]\n\ndef larg_idx(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    pass\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     larg_nnum([1,2,3,4,5], 2) == [5,4]\nassert     larg_nnum([1,2,3,4,5], 1) == [5]\nassert     larg_nnum([1,2,3,4,5], 5) == [1,2,3,4,5]\nassert     larg_nnum([1,2,3,4,5], 0) == []\nassert     larg_nnum([1,2,3,4,5], -1) == []\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     larg_nnum([8,5,2,4,9,7,6,3],4) == [9,7,6,3]\nassert     larg_nnum([7,8,4,9,5,2,3,6],3) == [9,5,2]\nassert     larg_nnum([4,5,2,3,6,7,8],3) == [4,5,2]\n\ndef mycmp(tuple1,tuple2):\n    '''\n    Write a function that takes in 2 tuples and returns an integer representing which tuple is larger. The function should be case sensitive.\n    '''\n    pass\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     larg_nnum([1,2,3,4,5,6,7],4) == [6,7,5,4]\nassert     larg_nnum([1,2,3,4,5,6,7,1,2,3,4,5,6,7],2) == [7,6]\nassert     larg_nnum([1,2,3,4,5,6,7,1,2,3,4,5,6,7],7) == [7,6,1,2,3,4,5]\nassert     larg_nnum([1,2,3,4,5,6,7,1,2,3,4,5,6,7],1) == [1,2,3,4,5,6,7]\nassert     larg_nnum([1,2,3,4,5,6,7,1,2,3,4,5,6,7],0) == [1,2,3,4,5,6,7]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef heapsort(list1):\n    '''\n    Write a function that takes in a list and sorts it using the heapsort algorithm.\n    '''\n    pass\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     larg_nnum(['c', 'a', 'b'], 3) == ['a', 'b', 'c'], 'Test 1 Failed'\nassert     larg_nnum(['c', 'a', 'b'], 1) == ['a'], 'Test 2 Failed'\n\ndef larg_n(list1, n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     lateralsuface_cylinder(1,2) == 4\nassert     lateralsuface_cylinder(2,1) == 4\nassert     lateralsuface_cylinder(2,2) == 8\nassert     lateralsuface_cylinder(3,3) == 12\nassert     lateralsuface_cylinder(4,4) == 16\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     lateralsuface_cylinder(5,3) == 12\nassert     lateralsuface_cylinder(10,3) == 44\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     lateralsuface_cylinder(3,0.5) == 2\nassert     lateralsuface_cylinder(3,1) == 2\nassert     lateralsuface_cylinder(0,3) == 0\n\ndef lateralsuface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     lateralsuface_cylinder(r=0.5, h=1) == 0\nassert     lateralsuface_cylinder(r=0.5, h=2) == 2*np.pi*0.5**2\nassert     lateralsuface_cylinder(r=0.5, h=3) == 2*np.pi*0.5**2 + np.pi*0.5**2\n\ndef lateralsuface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     volume_cube(2) == 8, \"Wrong volume\"\nassert     volume_cube(3) == 27, \"Wrong volume\"\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     volume_cube(1) == 1\nassert     volume_cube(2) == 2\nassert     volume_cube(3) == 6\nassert     volume_cube(4) == 12\nassert     volume_cube(5) == 20\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     volume_cube(1) == 1\nassert     volume_cube(3) == 27\nassert     volume_cube(10) == 3650\n\ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder given its radius and height.\n    '''\n    pass\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     volume_cube(2) == 8\nassert     volume_cube(3) == 27\n\ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     volume_cube(1) == 1\nassert     volume_cube(4) == 64\nassert     volume_cube(8) == 705\n\ndef volume_cone(r, h):\n    '''\n    Given the radius and height of a cone, find its volume.\n    '''\n    pass\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     volume_cube(1) == 1, \"Should return 1\"\nassert     volume_cube(2) == 8, \"Should return 8\"\nassert     volume_cube(3) == 27, \"Should return 27\"\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     volume_cube(1) == 1, 'wrong'\nassert     volume_cube(2) == 8, 'wrong'\nassert     volume_cube(3) == 27, 'wrong'\n\ndef cube_volume(s):\n    '''\n    Write a function to calculate the volume of a cube with sides\n    given.\n    '''\n    pass\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     volume_cube(1) == 1\nassert     volume_cube(3) == 27\nassert     volume_cube(4) == 64\nassert     volume_cube(5) == 125\nassert     volume_cube(6) == 216\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     volume_cube(1) == 1\nassert     volume_cube(2) == 8\nassert     volume_cube(3) == 27\nassert     volume_cube(4) == 64\nassert     volume_cube(5) == 125\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \neven_bit_set_number(10) == 8\nassert even_bit_set_number(11) == 0\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \neven_bit_set_number(3) == 4\nassert even_bit_set_number(5) == 1\nassert even_bit_set_number(1) == 0\nassert even_bit_set_number(10) == 4\n\ndef even_bit_count(n): \n    '''\n    Write a python function to count the number of even bits in a given number.\n    '''\n    pass\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     even_bit_set_number(11) == 1, \"Check failed\"\nassert     even_bit_set_number(22) == 2, \"Check failed\"\nassert     even_bit_set_number(33) == 0, \"Check failed\"\nassert     even_bit_set_number(45) == 4, \"Check failed\"\nassert     even_bit_set_number(17) == 0, \"Check failed\"\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     even_bit_set_number(2) == 0, \"Error in even_bit_set_number\"\nassert     even_bit_set_number(3) == 1, \"Error in even_bit_set_number\"\nassert     even_bit_set_number(11) == 1, \"Error in even_bit_set_number\"\nassert     even_bit_set_number(2**12 -1 ) == 1, \"Error in even_bit_set_number\"\nassert     even_bit_set_number(2**15 -1 ) == 0, \"Error in even_bit_set_number\"\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     even_bit_set_number(3) == True\nassert     even_bit_set_number(9) == False\nassert even_bit_set_number(99) == True\n\ndef bit_flip(n): \n    '''\n    Write a python function to flip bits in a given number.\n    '''\n    pass\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     even_bit_set_number(1) == False, \"1 should not be even\"\nassert     even_bit_set_number(2) == True, \"2 should be even\"\nassert     even_bit_set_number(3) == True, \"3 should be even\"\nassert     even_bit_set_number(0x03) == True, \"0x03 should be even\"\nassert     even_bit_set_number(0x02) == False, \"0x02 should not be even\"\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     even_bit_set_number(1) == False\nassert even_bit_set_number(7) == True\nassert even_bit_set_number(7) == False\nassert even_bit_set_number(15) == False\nassert even_bit_set_number(0) == False\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     even_bit_set_number(8) == 8, \"Should be 8\"\nassert even_bit_set_number(0) == 0, \"Should be 0\"\nassert even_bit_set_number(5) == 0, \"Should be 0\"\nassert even_bit_set_number(10) == 2, \"Should be 2\"\nassert even_bit_set_number(2) == 0, \"Should be 0\"\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \neven_bit_set_number(1) == 0\neven_bit_set_number(2) == 1\neven_bit_set_number(3) == 1\neven_bit_set_number(8) == 1\neven_bit_set_number(9) == 1\neven_bit_set_number(10) == 0\neven_bit_set_number(15) == 1\neven_bit_set_number(16) == 0\neven_bit_set_number(32) == 1\neven_bit_set_number(33) == 1\neven_bit_set_number(44) == 0\neven_bit_set_number(45) == 1\neven_bit_set_number(56) == 1\neven_bit_set_number(57) == 0\neven_bit_set_number(64) == 1\neven_bit_set_number(65) == 1\neven_bit_set_number(72) == 0\neven_bit_set_number(73) == 1\neven_bit_set_number(80) == 0\neven_bit_set_number(81) == 1\neven_bit_set_number(88) == 0\neven_bit_set_number(89) == 1\neven_bit_set_number(96) == 1\neven_bit_set_number(97) == 0\neven_bit_set_number(98) == 0\neven_bit_set_number(99) == 1\neven_bit_set_number(100) == 1\neven_bit_set_number(101) == 1\neven_bit_set_number(102) == 1\neven_bit_set_number(103) == 1\neven_bit_set_number(104) == 1\neven_bit_set_number(105) == 1\neven_bit_set_number(106) == 1\neven_bit_set_number(107) == 0\neven_bit_set_number(108) == 1\neven_bit_set_number(109) == 1\neven_bit_set_number(110) == 1\neven_bit_set_number(111) == 0\neven_bit_set_number(112) == 1\neven_bit_set_number(113) == 1\neven_bit_set_number(114) == 1\neven_bit_set_number(115) == 0\neven_bit_set_number(116) == 1\neven_bit_set_number(117) == 1\neven_bit_set_number(118) == 0\neven_bit_set_number(119) == 1\neven_bit_set_number(120) == 1\neven_bit_set_number(121) == 1\neven_bit_set_number(122) == 0\neven_bit_set_number(123) == 1\neven_bit_set_number(124) == 1\neven_bit_set_number(125) == 1\neven_bit_set_number(126) == 0\neven_bit_set_number(127) == 1\neven_bit_set_number(128) == 1\neven_bit_set_number(129) == 1\neven_bit_set_number(130) == 1\neven_bit_set_number(131) == 0\neven_bit_set_number(132) == 1\neven_bit_set_number(133) == 1\neven_bit_set_number(134) == 0\neven_bit_set_number(135) == 1\neven_bit_set_number(136) == 0\neven_bit_set_number(137) == 1\neven_bit_set_number(138) == 1\neven_bit_set_number(139) == 0\neven_bit_set_number(140) == 1\neven_bit_set_number(141) == 1\neven_bit_set_number(142) == 1\neven_bit_set_number(143) == 0\neven_bit_set_number(144) == 1\neven_bit_set_number(145) == 0\neven_bit_set_number(146) == 1\neven_bit_set_number(147) == 1\neven_bit_set_number(148) == 0\neven_bit_set_number(149) == 1\neven_bit_set_number(150) == 1\neven_bit_set_number(151) == 1\neven_bit_set_number(152) == 1\neven_bit_set_number(153) == 1\neven_bit_set_number(154) == 1\neven_bit_set_number(155) == 1\neven_bit_set_number(156) == 1\neven_bit_set_number(157) == 0\neven_bit_set_number(158) == 1\neven_bit_set_number(159) == 1\neven_bit_set_number(160) == 1\neven_bit_set_number(161) == 0\neven_bit_set_number(162) == 1\neven_bit_set_number(163) == 1\neven_bit_set_number(164) == 1\neven_bit_set_number(165) == 0\neven_bit_set_number(166) == 1\neven_bit_set_number(167) == 1\neven_bit_set_number(168) == 0\neven_bit_set_number(169) == 1\neven_bit_set_number(170) == 1\neven_bit_set_number(171) == 1\neven_bit_set_number(172) == 1\neven_bit_set_number(173) == 1\neven_bit_set_number(174) == 1\neven_bit_set_number(175) == 1\neven_bit_set_number(176) == 1\neven_bit_set_number(177) == 0\neven_bit_set_number(178) == 1\neven_bit_set_number(179) == 1\neven_bit_set_number(180) == 1\neven_bit_set_number(181) == 0\neven_bit_set_number(182) == 1\neven_bit_set_number(183) == 1\neven_bit_set_number(184) == 1\neven_bit_set_number(185) == 0\neven_bit_set_number(186) == 1\neven_bit_set_number(187) == 1\neven_bit_set_number(188) == 0\neven_bit_set_number(189) == 1\neven_bit_set_number(190) == 1\neven_bit_set_number(191) == 1\neven_bit_set_number(192) == 0\neven_bit_set_number(193) == 1\neven_bit_set_number(194) == 0\neven_bit_set_number(195) == 1\neven_bit_set_number(196) == 1\neven_bit_set_number(197) == 0\neven_bit_set_number(198) == 1\neven_bit_set_number(199) == 1\neven_bit_set_number(200) == 1\neven_bit_set_number(201) == 0\neven_bit_set_number(202) == 1\neven_bit_set_number(203) == 1\neven_bit_set_number(204) == 1\neven_bit_set_number(205) == 0\neven_bit_set_number(206) == 1\neven_bit_set_number(207) == 1\neven_bit_set_number(208) == 1\neven_bit_set_number(209) == 0\neven_bit_set_number(210) == 1\neven_bit_set_number(211) == 1\neven_bit_set_number(212) == 1\neven_bit_set_number(213) == 0\neven_bit_set_number(214) == 1\neven_bit_set_number(215) == 0\neven_bit_set_number(216) == 1\neven_bit_set_number(217) == 1\neven_bit_set_number(218) == 0\neven_bit_set_number(219) == 1\neven_bit_set_number(220) == 1\neven_bit_set_number(221) == 1\neven_bit_set_number(222) == 1\neven_bit_set_number(223) == 1\neven_bit_set_number(224) == 1\neven_bit_set_number(225) == 1\neven_bit_set_number(226) == 1\neven"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_occurences([(1, 2), (3, 1), (1, 1), (5, 3)]) == {(1, 2): 1, (3, 1): 1, (5, 3): 1}\nassert     check_occurences([('a', 1), ('b', 2), ('a', 3), ('a', 2)]) == {('a', 1): 1, ('b', 2): 1}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ntest_list1 = [(1,3,3), (3,3,1), (1,3,3)]\nassert check_occurences(test_list1) == Counter(test_list1)\n\ntest_list2 = [(1,3,3), (3,1,1), (2,3,1), (1,3,3)]\nassert check_occurences(test_list2) == Counter(test_list2)\n\ntest_list3 = [(1,3,3), (3,3,1), (1,3,3), (1,3,3)]\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    check_occurences([('a', 'a'), ('a', 'b'), ('b', 'b')]) == {('a', 'a'): 1, ('a', 'b'): 1, ('b', 'b'): 1}\n    check_occurences([('a', 'a'), ('a', 'b'), ('b', 'a'), ('b', 'b')]) == {('a', 'a'): 2, ('a', 'b'): 2, ('b', 'a'): 2, ('b', 'b'): 2}\n    check_occurences([('a', 'a'), ('a', 'b'), ('b', 'a')]) == {('a', 'a'): 2, ('a', 'b'): 1, ('b', 'a'): 1}\n    check_occurences([('a', 'a'), ('a', 'a'), ('a', 'b')]) == {('a', 'a'): 3}\n    check_occurences([('a', 'a'), ('a', 'a'), ('a', 'b'), ('a', 'b')]) == {('a', 'a'): 4}\n    check_occurences([]) == {}\n    check_occurences([(1, 2), (2, 3), (3, 1), (1, 2), (2, 1), (3, 2), (1, 1)]) == {(1, 2): 3, (1, 3): 2, (2, 1): 2, (3, 2): 1}\n    check_occurences([(1, 2), (2, 1), (3, 2), (1, 2), (2, 1), (3, 1), (1, 1)]) == {(1, 2): 2, (1, 3): 1, (2, 1): 2, (3, 2): 1}\n    check_occurences([(1, 2), (2, 3), (3, 4), (4, 5)]) == {(1, 2): 2, (1, 3): 1, (2, 3): 1, (3, 4): 1}\n    check_occurences([(1, 2), (1, 3), (2, 4), (3, 4)]) == {(1, 2): 2, (1, 3): 2, (2, 4): 1, (3, 4): 1}\n    check_occurences([(1, 2), (1, 3), (2, 4), (3, 4)]) == {(1, 2): 2, (1, 3): 2, (2, 4): 1, (3, 4): 1}\n\ndef check_reversals(test_list):\n    '''\n    Write a function that takes in a list of integers and returns the number of times that the list's numbers are reversed.\n    '''\n    pass\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_occurences([(1, 1), (1, 1), (1, 1), (1, 1), (2, 1), (2, 1), (2, 1), (2, 1), (1, 1), (1, 1), (2, 1), (2, 1), (2, 1), (3, 1), (3, 1), (3, 1), (3, 1), (1, 1), (1, 1), (3, 1), (3, 1), (3, 1), (1, 1), (1, 1), (1, 1)]) == \n        {(1, 1): 6, (2, 1): 5, (3, 1): 5, (1, 1): 6, (2, 1): 5, (3, 1): 5, (1, 1): 6, (2, 1): 5, (3, 1): 5, (2, 1): 5, (1, 1): 6, (2, 1): 5, (3, 1): 5}\n\n\ndef find_min_num(test_list):\n    '''\n    Write a function that takes in a list of numbers and returns the minimum number in that list.\n    '''\n    pass\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_occurences([(1,2), (2,3), (3,4)]) == Counter({(1, 2): 2, (2, 3): 1, (3, 4): 1})\nassert     check_occurences([(1,2), (1,3), (1,4), (2,3), (2,4), (3,4), (1,2), (2,3)]) == Counter({(1, 2): 2, (1, 3): 2, (1, 4): 2, (2, 3): 2, (2, 4): 1, (3, 4): 2, (1, 2): 1})\nassert     check_occurences([(1,1), (1,2), (2,1), (2,2)]) == Counter({(1, 1): 2, (1, 2): 2, (2, 1): 1, (2, 2): 1})\nassert     check_occurences([(1,1), (2,2), (3,3), (4,4), (2,2), (1,1), (2,2), (2,3)]) == Counter({(1, 1): 2, (1, 2): 2, (2, 2): 2, (2, 3): 1, (3, 3): 1, (4, 4): 1, (2, 2): 1, (2, 3): 1, (2, 4): 1})\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_occurences([(1, 2), (1, 2), (3, 4), (5, 6), (6, 7)]) == {(1, 2): 2, (3, 4): 1, (5, 6): 1, (6, 7): 1}\nassert check_occurences([('1', '2'), ('1', '2'), ('3', '4'), ('5', '6'), ('6', '7')]) == {('1', '2'): 2, ('3', '4'): 1, ('5', '6'): 1, ('6', '7'): 1}\nassert check_occurences([(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6), (5, 6, 7)]) == {(1, 2, 3): 1, (2, 3, 4): 1, (3, 4, 5): 1, (4, 5, 6): 1, (5, 6, 7): 1}\nassert check_occurences([('1', '2', '3'), ('2', '3', '4'), ('3', '4', '5'), ('4', '5', '6'), ('5', '6', '7')]) == {('1', '2', '3'): 1, ('2', '3', '4'): 1, ('3', '4', '5'): 1, ('4', '5', '6'): 1, ('5', '6', '7'): 1}\nassert check_occurences([(1, 2, 3, 4), (2, 3, 4, 5), (3, 4, 5, 6), (4, 5, 6, 7), (5, 6, 7, 8)]) == {(1, 2, 3, 4): 1, (2, 3, 4, 5): 1, (3, 4, 5, 6): 1, (4, 5, 6, 7): 1, (5, 6, 7, 8): 1}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_occurences([]) == {}\nassert     check_occurences([(1,), (1,), (1,)]) == {(1,): 3}\nassert     check_occurences([('a',), ('a',), ('b',), ('b',), ('c',)]) == {('a',): 3, ('b',): 3}\nassert     check_occurences([('a',), ('a',), ('b',), ('b',), ('c',), ('c',)]) == {('a',): 3, ('b',): 3, ('c',): 2}\nassert     check_occurences([('a',), ('a',), ('a',), ('b',), ('b',), ('a',), ('c',)]) == {('a',): 4, ('b',): 3, ('c',): 2}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_occurences([(1, 2), (1, 3), (2, 2), (3, 5)]) == {(1, 2): 2, (2, 2): 1, (3, 5): 1}\nassert     check_occurences([(1, 2), (1, 3), (2, 2)]) == {(1, 2): 2, (1, 3): 0, (2, 2): 1}\nassert     check_occurences([(1, 1), (1, 2)]) == {(1, 1): 2, (1, 2): 1}\nassert     check_occurences([(1, 1), (1, 1)]) == {(1, 1): 2}\nassert     check_occurences([(1, 1), (1, 1), (1, 1), (1, 1)]) == {}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_occurences([('a','b'),('b','c'),('a','b'),('b','a')]) == {('a','b'):2,('b','a'):2,('b','c'):1}\nassert check_occurences([('a','b'),('a','b'),('b','c'),('a','b'),('b','a')]) == {('a','b'):3,('b','a'):3,('b','c'):1}\n\n\ndef sort_dict_by_value(test_dict):\n    '''\n    Write a function that takes in a dictionary and returns a list of tuples in descending order based on the value of the tuple.\n    '''\n    pass\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     number_of_substrings('abd') == 2\nassert     number_of_substrings('bd') == 2\nassert     number_of_substrings('bd') == 1\nassert     number_of_substrings('ab') == 0\nassert     number_of_substrings('abc') == 1\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert number_of_substrings('the') == 3\nassert number_of_substrings('hello') == 3\nassert number_of_substrings('abcdefg') == 5\nassert number_of_substrings('taco cat') == 8\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     number_of_substrings(\"A\") == 1, \"A should have one non-empty substring\"\nassert     number_of_substrings(\" \") == 0, \"space should not be counted\"\nassert     number_of_substrings(\"test\") == 2, \"t should be counted\"\nassert     number_of_substrings(\"Test\") == 2, \"T should be counted\"\nassert     number_of_substrings(\"testtest\") == 4, \"t should be counted\"\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     number_of_substrings('This is a test string') == 3, \n\"Expected 3, actual: %s\" % (number_of_substrings('This is a test string'))\nassert     number_of_substrings('a') == 1, \n\"Expected 1, actual: %s\" % (number_of_substrings('a'))\nassert     number_of_substrings('abcd') == 1, \n\"Expected 1, actual: %s\" % (number_of_substrings('abcd'))\nassert     number_of_substrings('abc') == 1, \n\"Expected 1, actual: %s\" % (number_of_substrings('abc'))\nassert     number_of_substrings('aaaa') == 1, \n\"Expected 1, actual: %s\" % (number_of_substrings('aaaa'))\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     number_of_substrings(\"\") == 0\nassert     number_of_substrings(\"Hello\") == 5\nassert     number_of_substrings(\"hello\") == 6\nassert     number_of_substrings(\"hello there\") == 7\nassert     number_of_substrings(\"hello, world\") == 8\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert \nassert \n\ndef smallest_substring_that_contains_all_characters(str, characters):\n    '''\n    Write a python function to return the smallest substring in the given string such that all characters in the substring appear in the given characters.\n    '''\n    pass\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     number_of_substrings('test') == 2\nassert number_of_substrings('agrrttt') == 4\nassert number_of_substrings(' ') == 1\nassert number_of_substrings(' ') == 1\nassert number_of_substrings(' ') == 1\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef number_of_substrings_with_space(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    pass\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     number_of_substrings('qwwq') == 5, 'incorrect result'\nassert     number_of_substrings('qwqw') == 2, 'incorrect result'\nassert     number_of_substrings('b') == 1, 'incorrect result'\nassert     number_of_substrings('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n'''\nWrite a function that takes in a list of positive integers m and n and finds the total number of sublists of length n with integers less than or equal to twice the previous element and whose sum is less than or equal to m.\n'''\ndef get_number_of_sublists_with_sum_less_than_or_equal_to_m(m,n): \n    '''\n    Write a function that takes in a list of positive integers m and n and finds the total number of sublists of length n with integers less than or equal to twice the previous element and whose sum is less than or equal to m.\n    '''\n    pass\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_total_number_of_sequences(4,2) == 10\nassert     get_total_number_of_sequences(4,3) == 16\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_total_number_of_sequences(2,2) == 1,     \"Error in get_total_number_of_sequences: Expected 1, got %s\" % str(get_total_number_of_sequences(2,2))\nassert     get_total_number_of_sequences(2,3) == 1,     \"Error in get_total_number_of_sequences: Expected 1, got %s\" % str(get_total_number_of_sequences(2,3))\nassert     get_total_number_of_sequences(2,4) == 2,     \"Error in get_total_number_of_sequences: Expected 2, got %s\" % str(get_total_number_of_sequences(2,4))\nassert     get_total_number_of_sequences(3,3) == 1,     \"Error in get_total_number_of_sequences: Expected 1, got %s\" % str(get_total_number_of_sequences(3,3))\nassert     get_total_number_of_sequences(3,4) == 2,     \"Error in get_total_number_of_sequences: Expected 2, got %s\" % str(get_total_number_of_sequences(3,4))\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_total_number_of_sequences(2,1) == 0,     'Wrong Answer:  First!'\nassert     get_total_number_of_sequences(1,2) == 0,     'Wrong Answer:  Second!'\nassert     get_total_number_of_sequences(2,3) == 5,     'Wrong Answer:  Third!'\nassert     get_total_number_of_sequences(5,5) == 15,     'Wrong Answer:  Fourth!'\nassert     get_total_number_of_sequences(4,3) == 15,     'Wrong Answer:  Fifth!'\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_total_number_of_sequences(1,1) == 0\nassert     get_total_number_of_sequences(1,2) == 1\nassert     get_total_number_of_sequences(1,3) == 2\nassert     get_total_number_of_sequences(2,2) == 1\nassert     get_total_number_of_sequences(2,3) == 2\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_total_number_of_sequences(4, 1) == 1, \"4, 1 = 1\"\nassert     get_total_number_of_sequences(4, 2) == 3, \"4, 2 = 3\"\nassert     get_total_number_of_sequences(3, 2) == 3, \"3, 2 = 3\"\nassert     get_total_number_of_sequences(3, 3) == 9, \"3, 3 = 9\"\nassert     get_total_number_of_sequences(2, 1) == 0, \"2, 1 = 0\"\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_total_number_of_sequences(10,3) == 21\nassert get_total_number_of_sequences(5,3) == 8\nassert get_total_number_of_sequences(15,5) == 39\n\nprint('All tests are passed.')"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_total_number_of_sequences(4,2) == 5, \"incorrect\"\nassert     get_total_number_of_sequences(1,1) == 1, \"incorrect\"\nassert     get_total_number_of_sequences(4,1) == 1, \"incorrect\"\nassert     get_total_number_of_sequences(5,2) == 9, \"incorrect\"\nassert     get_total_number_of_sequences(8,4) == 40, \"incorrect\"\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_total_number_of_sequences(10,2) == 6\nassert     get_total_number_of_sequences(20,4) == 36\nassert     get_total_number_of_sequences(20,8) == 3072\nassert     get_total_number_of_sequences(20,12) == 95904\nassert     get_total_number_of_sequences(50,10) == 10"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_total_number_of_sequences(4,5) == 4\nassert     get_total_number_of_sequences(10,5) == 10\nassert     get_total_number_of_sequences(3,5) == 6\nassert     get_total_number_of_sequences(1,5) == 5\nassert     get_total_number_of_sequences(100,5) == 100\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     replace_list([\"1\", \"2\"], [\"0\", \"2\"]) == [\"1\", \"0\", \"2\"], \"Replace method does not return the correct value.\"\nassert     replace_list([\"1\", \"2\", \"3\"], [\"0\", \"2\", \"3\"]) == [\"1\", \"0\", \"2\", \"3\"], \"Replace method does not return the correct value.\"\nassert     replace_list([\"1\", \"2\"], [\"0\", \"1\", \"2\"]) == [\"1\", \"0\", \"2\"], \"Replace method does not return the correct value.\"\nassert     replace_list([\"1\", \"2\", \"3\"], [\"0\", \"1\", \"2\", \"3\"]) == [\"1\", \"0\", \"2\", \"3\"], \"Replace method does not return the correct value.\"\n\nprint(\"\\nReplace method:\")\nreplace_list([\"1\", \"2\"], [\"0\", \"2\"])\nreplace_list([\"1\", \"2\", \"3\"], [\"0\", \"2\", \"3\"])\nreplace_list([\"1\", \"2\"], [\"0\", \"1\", \"2\"])\nreplace_list([\"1\", \"2\", \"3\"], [\"0\", \"1\", \"2\", \"3\"])\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     replace_list([1,2], [3,4,5]) == None, 'First list is not replaced'\nassert     replace_list([1,2], [3]) == None, 'Second list is not replaced'\nassert     replace_list([1,2], [2]) == None, 'Both lists are not replaced'\nassert     replace_list([], [1,2,3]) == None, 'First and second lists are not replaced'\nassert     replace_list([], []) == None, 'Both lists are not replaced'\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     replace_list([1,2,3],['a','b','c'])==[1,'a','b','c','c'], \"Wrong answer\"\nassert     replace_list(['a','b','c','d','e'],['a','b','c'])==['a','b','c','a','b','c','c','d','e'], \"Wrong answer\"\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     replace_list([1,2,3],[4,5]) == [1,2,3,5]\nassert     replace_list([5,4,3],[1,2]) == [5,4,3,2]\nassert     replace_list([2,4,6,8],[1,3,5]) == [2,4,6,8,5,1]\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     replace_list([2,3,4,5,6],[3,4,5,6,7]) == [2,3,4,5,6]\nassert     replace_list([10,20,30,40,50],[30,40,50,60,70]) == [10,20,30,40,50]\nassert     replace_list([1,2,3,4,5],[3,4,5,6,7]) == [1,2,3,4,5]"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(replace_list([1,2,3,4,5],[\"a\",\"b\",\"c\"]))\n\nprint(replace_list([\"a\",\"b\",\"c\"],[1,2,3]))\n\n'''\nWrite a function that takes in a list and returns True if it is sorted in ascending order and False otherwise.\n'''\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     replace_list([1,2,3,4], [3,4,5]) == [1,2,4,5]\nassert     replace_list([1,2,3,4], [3,4,5,6]) == [1,2,3,4,5,6]\nassert     replace_list([1,2,3], [3,4,5]) == [1,2,4]\nassert     replace_list([], [3,4,5]) == []\nassert     replace_list([1,2], [3,4,5]) == [1,2]\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     replace_list([1,2,3,4],[1,2,3]) == [1,2,3,3]\nassert     replace_list([1,2,3,4],[1,3,5]) == [1,2,3,4]\nassert     replace_list([1,2,3,4],[1,2,3]) == [1,2,3,4]\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     replace_list([1,2,3,4,5], [-1,-2,-3,-4,-5]) == [-1,-2,-3,4,5]\nassert     replace_list([1,2,3,4,5], [1,2,3,4,5]) == [1,2,3,4,5]\nassert     replace_list([1,2,3,4,5], [1,2,3,4,5]) == [1,2,3,4,5]\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_charac('abc') == 3, 'Should return 3'\nassert     count_charac('abcde') == 6, 'Should return 6'\nassert     count_charac('abcdef') == 9, 'Should return 9'\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_charac('abc') == 3,'should be 3'\nassert     count_charac('abcdef') == 6,'should be 6'\nassert     count_charac('a') == 1,'should be 1'\nassert     count_charac('') == 0,'should be 0'\nassert     count_charac('a') == 1,'should be 1'\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert count_charac(\"Welcome to SkyDrive!\") == 26\nassert count_charac(\"GeeksQuiz\") == 19\nassert count_charac(\"GeeksQuizGeeksQuizGeeks\") == 11\nassert count_charac(\"GeeksQuizGeeksQuizGeeksGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQuizGeeksQui"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert count_charac(\"abcde\") == 6\nassert count_charac(\"\") == 0\nassert count_charac(\" \") == 0\nassert count_charac(\"\\n\") == 0\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n'''\nQuestion 6\nWrite a function that takes a string as input and return the string after \nreplacing each occurrence of 'p' with 'r'.\n'''\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef count_charac_better(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return str1.count(' ')\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert count_charac('abcdef') == 6\nassert count_charac('abc') == 3\nassert count_charac('a') == 1\nassert count_charac('a') == 1\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     next_Perfect_Square(15) == 25\nassert next_Perfect_Square(10) == 11\nassert next_Perfect_Square(16) == 27\nassert next_Perfect_Square(35) == 37\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     next_Perfect_Square(14) == 16\nassert     next_Perfect_Square(9) == 10\nassert     next_Perfect_Square(5) == 10\nassert     next_Perfect_Square(1) == 1\nassert     next_Perfect_Square(10) == 10\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     next_Perfect_Square(13) == 19\nassert     next_Perfect_Square(14) == 20\nassert     next_Perfect_Square(27) == 29\nassert     next_Perfect_Square(28) == 29\nassert     next_Perfect_Square(31) == 34\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     next_Perfect_Square(1) == 1\nassert     next_Perfect_Square(4) == 2\nassert     next_Perfect_Square(5) == 3\nassert     next_Perfect_Square(8) == 3\nassert     next_Perfect_Square(9) == 4\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef next_Perfect_Square_with_div(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    pass\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(\"PASSED: next_Perfect_Square\")\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     next_Perfect_Square(11) == 12\nassert     next_Perfect_Square(1) == 2\nassert     next_Perfect_Square(7) == 8\nassert next_Perfect_Square(121) == 131\nassert next_Perfect_Square(1000000) == 10000001\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint(\"next_Perfect_Square test cases passed!\")\nprint()\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nN = 5\nassert next_Perfect_Square(N) == 6\n\n\n\ndef next_Perfect_Square(N):\n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if (N <= 1):\n        return -1\n    sqrt = int(math.sqrt(N))\n    while sqrt * sqrt <= N:\n        if sqrt * sqrt == N:\n            return sqrt * sqrt\n        sqrt += 1\n    return sqrt * sqrt\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nif __name__ == '__main__':\n    arr = [1,3,5,4,2]\n    #max_sum(arr)\n\n    arr = [1,3,5,4,2,3,4]\n    #max_sum(arr)\n\n    arr = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    #max_sum(arr)\n\n    arr = [1,3,5,7,11,13,15,10,12]\n    #max_sum(arr)\n\n    arr = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,86"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_sum([0, 1, 2, 4, 8, 0, -1]) == 10\nassert     max_sum([0, 1, 2, 4, 8, 0, -1, 3, 5, 7]) == 15\nassert     max_sum([-5, -1, -2, -4, 3, 5, 6, 7]) == 21\nassert     max_sum([-5, -1, -2, -4, 3, 5, 6, 7, -9, 1]) == 21\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert max_sum([2, 3, 1, 6, 4, 5]) == 7, 'This should return 7'\nassert max_sum([1, 3, 2]) == 4, 'This should return 4'\nassert max_sum([1, 2, 3, 4, 5, 6]) == 9, 'This should return 9'\nassert max_sum([3, 4, 5, 7, 1, 2]) == 7, 'This should return 7'\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_sum([5,4,3,2,1,1,5,4,3,2,1]) == 7\nassert max_sum([1,2,3,4]) == 4\nassert max_sum([1,2,3,5]) == 5\nassert max_sum([1,3,5,4,3]) == 7\nassert max_sum([4,3,10,1,7,8,9]) == 22"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nmax_sum([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 55\nprint('OK')\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     babylonian_squareroot(1) == 1\nassert     babylonian_squareroot(2) == 1.4142135623730951\nassert     babylonian_squareroot(3) == 1.7320508075688772\nassert     babylonian_squareroot(4) == 1.8284271247461903\nassert     babylonian_squareroot(5) == 2\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef manhattan_distance(x1, y1, x2, y2):\n    '''\n    Compute the manhattan distance between two points\n    x1,y1: first point\n    x2,y2: second point\n    '''\n    pass\n\ndef get_distance(x1,y1,x2,y2):\n    '''\n    Compute the distance between two points\n    x1,y1: first point\n    x2,y2: second point\n    '''\n    return manhattan_distance(x1,y1,x2,y2)\n\ndef get_points(point_1, point_2):\n    '''\n    Returns the points of the figure\n    point_1: first point\n    point_2: second point\n    '''\n    pass\n\ndef get_angle(point_1, point_2):\n    '''\n    Returns the angle between two points\n    point_1: first point\n    point_2: second point\n    '''\n    pass\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     babylonian_squareroot(9) == 3\nassert     babylonian_squareroot(11) == 4\nassert     babylonian_squareroot(10) == 3.5\nassert     babylonian_squareroot(100) == 10\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     babylonian_squareroot(5) == 2\nassert     babylonian_squareroot(8) == 3\nassert     babylonian_squareroot(9) == 3\nassert     babylonian_squareroot(16) == 4\nassert     babylonian_squareroot(25) == 4\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     babylonian_squareroot(1) == 0.0\nassert     babylonian_squareroot(4) == 2.0\nassert     babylonian_squareroot(10) == 3.0\nassert     babylonian_squareroot(100) == 5.0\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     babylonian_squareroot(4) == 2\nassert     babylonian_squareroot(9) == 3\nassert     babylonian_squareroot(16) == 4\nassert     babylonian_squareroot(25) == 5\nassert     babylonian_squareroot(31) == 6\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n'''\nTest Cases:\n\nInput    Output\n\ntest[ ]    3\ntest\n\ntest2[ ]    5\ntest2\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     lps('abcbab') == 3\nassert     lps('cacbcac') == 4\nassert     lps('ccbdbdcb') == 3\nassert     lps('gabbbgb') == 2\nassert     lps('bbbbbbbb') == 1\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     lps('babad') == 7\nassert     lps('cbbd') == 3\nassert     lps('a') == 1\nassert     lps('aab') == 3\nassert     lps('abbbb') == 4\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert lps('abac') == 3\nassert lps('baba') == 3\nassert lps('bb') == 2\nassert lps('ba') == 1\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     lps(\"aa\") == 2\nassert     lps(\"abb\") == 1\nassert     lps(\"abcdabcdabcd\") == 6"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nclass Solution:\n    '''\n    A palindromic subsequence of a string is one of the possible permutations of the characters in the string.\n    For example, \"abcd\" has the palindromic subsequence \"a b c d\".\n    Write a function that takes in a string and returns the longest palindromic subsequence.\n    If the input string is not a palindrome, it should return the empty string.\n    '''\n    pass\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     lps(\"abbabcbabba\") == 6, \"output incorrect\"\nassert     lps(\"ababcbabab\") == 4, \"output incorrect\"\nassert     lps(\"abc\") == 3, \"output incorrect\"\nassert     lps(\"baa\") == 2, \"output incorrect\"\nassert     lps(\"abccba\") == 4, \"output incorrect\"\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     lps(\"\") == 0\nassert     lps(\"a\") == 1\nassert     lps(\"ab\") == 2\nassert     lps(\"aba\") == 3\nassert     lps(\"abba\") == 4\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     harmonic_sum(3) == 1\nassert     harmonic_sum(10) == 55\nassert     harmonic_sum(18) == 243\nassert     harmonic_sum(28) == 562\nassert     harmonic_sum(40) == 1023\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nharmonic_sum(0) == 0\nharmonic_sum(1) == 1\nharmonic_sum(2) == 1\nharmonic_sum(3) == 2\nharmonic_sum(4) == 3\nharmonic_sum(5) == 4\nharmonic_sum(6) == 5\nharmonic_sum(7) == 8\nharmonic_sum(8) == 10\nharmonic_sum(9) == 12\nharmonic_sum(10) == 12\nharmonic_sum(11) == 14\nharmonic_sum(12) == 16\nharmonic_sum(13) == 18\nharmonic_sum(14) == 20\nharmonic_sum(15) == 22\nharmonic_sum(16) == 24\nharmonic_sum(17) == 26\nharmonic_sum(18) == 28\nharmonic_sum(19) == 30\nharmonic_sum(20) == 32\nharmonic_sum(21) == 34\nharmonic_sum(22) == 36\nharmonic_sum(23) == 38\nharmonic_sum(24) == 40\nharmonic_sum(25) == 42\nharmonic_sum(26) == 44\nharmonic_sum(27) == 46\nharmonic_sum(28) == 48\nharmonic_sum(29) == 50\nharmonic_sum(30) == 52\nharmonic_sum(31) == 54\nharmonic_sum(32) == 56\nharmonic_sum(33) == 58\nharmonic_sum(34) == 60\nharmonic_sum(35) == 62\nharmonic_sum(36) == 64\nharmonic_sum(37) == 66\nharmonic_sum(38) == 68\nharmonic_sum(39) == 70\nharmonic_sum(40) == 72\nharmonic_sum(41) == 74\nharmonic_sum(42) == 76\nharmonic_sum(43) == 78\nharmonic_sum(44) == 80\nharmonic_sum(45) == 82\nharmonic_sum(46) == 84\nharmonic_sum(47) == 86\nharmonic_sum(48) == 88\nharmonic_sum(49) == 90\nharmonic_sum(50) == 92\nharmonic_sum(51) == 94\nharmonic_sum(52) == 96\nharmonic_sum(53) == 98\nharmonic_sum(54) == 100\nharmonic_sum(55) == 102\nharmonic_sum(56) == 104\nharmonic_sum(57) == 106\nharmonic_sum(58) == 108\nharmonic_sum(59) == 110\nharmonic_sum(60) == 112\nharmonic_sum(61) == 114\nharmonic_sum(62) == 116\nharmonic_sum(63) == 118\nharmonic_sum(64) == 120\nharmonic_sum(65) == 122\nharmonic_sum(66) == 124\nharmonic_sum(67) == 126\nharmonic_sum(68) == 128\nharmonic_sum(69) == 130\nharmonic_sum(70) == 132\nharmonic_sum(71) == 134\nharmonic_sum(72) == 136\nharmonic_sum(73) == 138\nharmonic_sum(74) == 140\nharmonic_sum(75) == 142\nharmonic_sum(76) == 144\nharmonic_sum(77) == 146\nharmonic_sum(78) == 148\nharmonic_sum(79) == 150\nharmonic_sum(80) == 152\nharmonic_sum(81) == 154\nharmonic_sum(82) == 156\nharmonic_sum(83) == 158\nharmonic_sum(84) == 160\nharmonic_sum(85) == 162\nharmonic_sum(86) == 164\nharmonic_sum(87) == 166\nharmonic_sum(88) == 168\nharmonic_sum(89) == 170\nharmonic_sum(90) == 172\nharmonic_sum(91) == 174\nharmonic_sum(92) == 176\nharmonic_sum(93) == 178\nharmonic_sum(94) == 180\nharmonic_sum(95) == 182\nharmonic_sum(96) == 184\nharmonic_sum(97) == 186\nharmonic_sum(98) == 188\nharmonic_sum(99) == 190\nharmonic_sum(100) == 192\nharmonic_sum(101) == 194\nharmonic_sum(102) == 196\nharmonic_sum(103) == 198\nharmonic_sum(104) == 200\nharmonic_sum(105) == 202\nharmonic_sum(106) == 204\nharmonic_sum(107) == 206\nharmonic_sum(108) == 208\nharmonic_sum(109) == 210\nharmonic_sum(110) == 212\nharmonic_sum(111) == 214\nharmonic_sum(112) == 216\nharmonic_sum(113) == 218\nharmonic_sum(114) == 220\nharmonic_sum(115) == 222\nharmonic_sum(116) == 224\nharmonic_sum(117) == 226\nharmonic_sum(118) == 228\nharmonic_sum(119) == 230\nharmonic_sum(120) == 232\nharmonic_sum(121) == 234\nharmonic_sum(122) == 236\nharmonic_sum(123) == 238\nharmonic_sum(124) == 240\nharmonic_sum(125) == 242\nharmonic_sum(126) == 244\nharmonic_sum(127) == 246\nharmonic_sum(128) == 248\nharmonic_sum(129) == 250\nharmonic_sum(130) == 252\nharmonic_sum(131) == 254\nharmonic_sum(132) == 256\nharmonic_sum(133) == 258\nharmonic_sum(134) == 260\nharmonic_sum(135) == 262\nharmonic_sum(136) == 264\nharmonic_sum(137) == 266\nharmonic_sum(138) == 268\nharmonic_sum(139) == 270\nharmonic_sum(140) == 272\nharmonic_sum(141) == 274\nharmonic_sum(142) == 276\nharmonic_sum(143) == 278\nharmonic_sum(144) == 280\nharmonic_sum(145) == 282\nharmonic_sum(146) == 284\nharmonic_sum(147) == 286\nharmonic_sum(148) == 288\nharmonic_sum(149) == 290\nharmonic_sum(150) == 292\nharmonic_sum(151) == 294\nharmonic_sum(152) == 296\nharmonic_sum(153) == 298\nharmonic_sum(154) == 300\nharmonic_sum(155) == 302\nharmonic_sum(156) == 304\nharmonic_sum(157) == 306\nharmonic_sum(158) == 308\nharmonic_sum(159) == 310\nharmonic_sum(160) == 312\nharmonic_sum(161) == 314\nharmonic_sum(162) == 316\nharmonic_sum(163) == 318\nharmonic_sum(164) == 320\nharmonic_sum(165) == 322\nharmonic_sum(166) == 324\nharmonic_sum(167) == 326\nharmonic_sum(168) == 328\nharmonic_sum(169) == 330\nharmonic_sum(170) == 332\nharmonic_sum(171) == 334\nharmonic_sum(172) == 336\nharmonic_sum(173) == 338\nharmonic_sum(174) == 340\nharmonic_sum(175) == 342\nharmonic_sum(176) == 344\nharmonic_sum(177) == 346\nharmonic_sum(178) == 348\nharmonic_sum(179) == 350\nharmonic_sum(180) == 352\nharmonic_sum(181) == 354\nharmonic_sum(182) == 356\nharmonic_sum(183) == 358\nharmonic_sum(184) == 360\nharmonic_sum(185) == 362\nharmonic_sum(186) == 364\nharmonic_sum(187) == 366\nharmonic_sum(188) == 368\nharmonic_sum(189) == 370\nharmonic_sum(190) == 372\nharmonic_sum(191) == 374\nharmonic_sum(192) == 376\nharmonic_sum(193) == 378\nharmonic_sum(194) == 380\nharmonic_sum(195) == 382\nharmonic_sum(196) == 384\nharmonic_sum(197) == 386\nharmonic_sum(198) == 388\nharmonic"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     harmonic_sum(1) == 1\nassert     harmonic_sum(2) == 2\nassert     harmonic_sum(3) == 3\nassert     harmonic_sum(4) == 4\nassert     harmonic_sum(5) == 8\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nharmonic_sum(2) == 1\nharmonic_sum(3) == 2\nharmonic_sum(4) == 3\nharmonic_sum(5) == 5\nharmonic_sum(6) == 8\nharmonic_sum(7) == 11\nharmonic_sum(8) == 20\nharmonic_sum(9) == 36\nharmonic_sum(10) == 45\nharmonic_sum(11) == 55\nharmonic_sum(12) == 90\nharmonic_sum(13) == 150\nharmonic_sum(14) == 210\nharmonic_sum(15) == 330\nharmonic_sum(16) == 540\nharmonic_sum(17) == 810\nharmonic_sum(18) == 1818\nharmonic_sum(19) == 3759\nharmonic_sum(20) == 5760\nharmonic_sum(21) == 9439\nharmonic_sum(22) == 23215\nharmonic_sum(23) == 45179\nharmonic_sum(24) == 64848\nharmonic_sum(25) == 99279\nharmonic_sum(26) == 243281\nharmonic_sum(27) == 546556\nharmonic_sum(28) == 872325\nharmonic_sum(29) == 15585850\nharmonic_sum(30) == 371289796700\nharmonic_sum(31) == 6268796912299\nharmonic_sum(32) == 132364974465301\nharmonic_sum(33) == 3839493316186095\nharmonic_sum(34) == 733169934123944\nharmonic_sum(35) == 13592389097326\nharmonic_sum(36) == 398139301983564\nharmonic_sum(37) == 9176989646425550\nharmonic_sum(38) == 21167466400995600\nharmonic_sum(39) == 46844836152230900\nharmonic_sum(40) == 96188958974545720\nharmonic_sum(41) == 22780239976871280\nharmonic_sum(42) == 498698644845126640\nharmonic_sum(43) == 905878926531036160\nharmonic_sum(44) == 231379261816000\nharmonic_sum(45) == 4888068171113846960\nharmonic_sum(46) == 933616118316668440\nharmonic_sum(47) == 2677729773926759120\nharmonic_sum(48) == 5888922546186950480\nharmonic_sum(49) == 1199525841412797760\nharmonic_sum(50) == 31976858572996331200\nharmonic_sum(51) == 59725899021040953600\nharmonic_sum(52) == 12672275786056118960\nharmonic_sum(53) == 37035569997740089600\nharmonic_sum(54) == 785511456721088320\nharmonic_sum(55) == 14786361534639450560\nharmonic_sum(56) == 43904269824795668080\nharmonic_sum(57) == 8709267751578784800\nharmonic_sum(58) == 1627129989259321760\nharmonic_sum(59) == 464515307900592560\nharmonic_sum(60) == 907882514767283280\nharmonic_sum(61) == 2254058252615136040\nharmonic_sum(62) == 4948330203749173920\nharmonic_sum(63) == 9946585247120517920\nharmonic_sum(64) == 2498246139640019840\nharmonic_sum(65) == 4928909963234526240\nharmonic_sum(66) == 9366466656065236800\nharmonic_sum(67) == 23477633466029502400\nharmonic_sum(68) == 4916440896134399520\nharmonic_sum(69) == 9796345551237163680\nharmonic_sum(70) == 2568226937454214688\nharmonic_sum(71) == 4915187557163395200\nharmonic_sum(72) == 9837040781569632000\nharmonic_sum(73) == 2464421889805260896\nharmonic_sum(74) == 4955103788297935200\nharmonic_sum(75) == 9938288651499881600\nharmonic_sum(76) == 2666386670869481280\nharmonic_sum(77) == 4915755324017898112\nharmonic_sum(78) == 9841442808814104960\nharmonic_sum(79) == 2589784824388448000\nharmonic_sum(80) == 4913965598522445600\nharmonic_sum(81) == 9902601895047231536\nharmonic_sum(82) == 2541183346299639200\nharmonic_sum(83) == 49078859560723678400\nharmonic_sum(84) == 9921273807306831040\nharmonic_sum(85) == 2534261020359712000\nharmonic_sum(86) == 4907905667983166240\nharmonic_sum(87) == 9906814247708288960\nharmonic_sum(88) == 2453754903287192288\nharmonic_sum(89) == 4905923572960739200\nharmonic_sum(90) == 9919167839376514400\nharmonic_sum(91) == 2642705482173895680\nharmonic_sum(92) == 4915965696531075200\nharmonic_sum(93) == 9866106939676818880\nharmonic_sum(94) == 2589184212708670560\nharmonic_sum(95) == 4907873211790440800\nharmonic_sum(96) == 9914779875283556160\nharmonic_sum(97) == 2651420288119388064\nharmonic_sum(98) == 4909932430872697200\nharmonic_sum(99) == 9897421610143580128\nharmonic_sum(100) == 2534284878269693328\nharmonic_sum(101) == 4903998360391395200\nharmonic_sum(102) == 9899487344525924288\nharmonic_sum(103) == 2539335908474874272\nharmonic_sum(104) == 4901129586745595920\nharmonic_sum(105) == 9890982495472736480\nharmonic_sum(106) == 2532856823609877344\nharmonic_sum(107) == 4907878014931408640\nharmonic_sum(108) == 9928989985085462640\nharmonic_sum(109) == 2526339725858980016\nharmonic_sum(110) == 4907878014931408640\nharmonic_sum(111) == 9890982495472736480\nharmonic_sum(112) == 2526339725858980016\nharmonic_sum(113) == 4901129586745595920\nharmonic_sum(114) == 9899487344525924288\nharmonic_sum(115) == 2532856823609877344\nharmonic_sum(116) == 4907878014931408640\nharmonic_sum(117) == 9890982495472736480\nharmonic_sum(118) == 2532856823609877344\nharmonic_sum(119) == 4901129586745595920\nharmonic_sum(120) == 9899487344525924288\nharmonic_sum(121) == 2532856823609877344\nharmonic_sum(122) == 4907878014931408640\nharmonic_sum(123) == 9890982495472736480\nharmonic_sum(124) == 2526339725858980016\nharmonic_sum(125) == 4907878014"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert         harmonic_sum(4) == 4\nassert         harmonic_sum(3) == 2\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n'''\n\n---\n\n---\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     harmonic_sum(3) == 0.5, \"your function does not calculate the harmonic sum correctly.\"\nprint(\"Congratulations, your function works correctly!\")"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     intersection_array([1,2,2,2,2], [1,2,2]) == [1,2,2]\nassert     intersection_array([4,9,5], [9,4,9,8,4]) == []\nassert     intersection_array([1,2,3], [2,3,4]) == [2,3]\nassert     intersection_array([], []) == []\nassert     intersection_array([2,2], [3,4]) == [2,2]\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     intersection_array([1,3,6,7,9,11,15],\n                            [2,4,8,10]) == 5\nassert intersection_array([1,2,3,4,5],\n                            [3,4,5,6,7]) == 4\nassert intersection_array([],\n                            []) == None\nassert intersection_array([1,2,3,4],\n                            [1,4,5]) == 2\nassert intersection_array([1,2,3,4,5],\n                            [1,5,7,9]) == 4\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert intersection_array([1,2,3,4,5,6,7],[1,2,3,4,6,7,9]) == [1,2,3,4,6,7,9]\nassert intersection_array([1,2,3,4,5,6,7],[5,6,7,8,9,10]) == []\nassert intersection_array([1,2,3,4,5,6,7],[2,3,5]) == []\nassert intersection_array([1,2,3,4,5,6,7],[2,3,4,5,6,7,8,9,10]) == []\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     intersection_array([1,2,3], [2,3,4]) == [2,3]\nassert     intersection_array([1,2,3,5], [3,4,5,6]) == []\nassert     intersection_array([1,2,3,5], [3,4,5,6,7]) == []\nassert     intersection_array([1,2,3], [2,3,4,5]) == [2,3]\nassert     intersection_array([1,2,3], [3,4,5,6,7,8,9,10,11,12]) == []\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     intersection_array([1,2,3,4,5,6,7,8,9], [2,3,4,7,8,9]) ==     [2,3,4,7,8,9], \n        'Your answer is incorrect.'\nassert     intersection_array([1,2,3,4,5,6,7,8,9], [2,3,4,7,8,9,10]) ==     [2,3,4,7,8,9], \n        'Your answer is incorrect.'\nassert     intersection_array([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9]) ==     [], \n        'Your answer is incorrect.'\nassert     intersection_array([1,2,3,4,5,6,7,8,9], [10,11,12,13,14,15,16,17,18,19,20]) ==     [], \n        'Your answer is incorrect.'\nassert     intersection_array([], [1,2,3,4,5,6,7,8,9]) ==     [], \n        'Your answer is incorrect.'\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     intersection_array([1,2,2,1], [2,2,1,2]) == [2]\nassert     intersection_array([1,1,2,2], [2,2,1,2]) == [1,2]\nassert     intersection_array([], [2,2,1,2]) == []\nassert     intersection_array([1,2,2,1,3], [2,2,1,2]) == [1,2,2]\nassert     intersection_array([3,3,3,2,2,1], [3,2,1,3]) == [3,2,1]\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef intersection_array_more(array_nums1, array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    pass\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     intersection_array([1,2,2,1], [2,2,1]) == [2,2], 'wrong answer'\nassert     intersection_array([1,2,2,1], [1,2,3]) == [1,2], 'wrong answer'\nassert     intersection_array([1,2,3,4,5,6,6], [1,2,3,4,5,6]) == [1,2,3,4,5,6], 'wrong answer'\nassert     intersection_array([1,2,2,1], [2,2,1]) == [2,2], 'wrong answer'\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     intersection_array([1,2,3,4,5],[0,9,9,4]) ==[1,4]\nassert     intersection_array([1,2,3,4,5],[9,4,5]) ==[4]\nassert     intersection_array([], []) == []\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_X((10, 20, 30, 40, 10), 10) == 3\nassert     count_X((10, 20, 30, 40, 10), 30) == 1\nassert     count_X((10, 20, 30, 40, 10), 20) == 2\nassert     count_X((10, 20, 30, 40, 10), 40) == 1\nassert     count_X((10, 20, 30, 40, 10), 50) == 0\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef max_X(tup): \n    '''\n    Write a python function that takes in a tuple and returns the largest element in the tuple.\n    '''\n    pass\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_X(('hello', 'world'), 'h') == 1, \"incorrect count_X()\"\nassert     count_X(('hello', 'world'), 'e') == 2, \"incorrect count_X()\"\nassert     count_X(('hello', 'world'), 'l') == 3, \"incorrect count_X()\"\nassert     count_X(('hello', 'world'), 'l') == 3, \"incorrect count_X()\"\nassert     count_X(('hello', 'world'), 'o') == 2, \"incorrect count_X()\"\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_X((0,1,2,3,4,5),1) == 1\nassert     count_X((0,1,2,3,4,5),6) == 0\nassert     count_X((0,1,2,3,4,5),5) == 2\nassert     count_X((0,1,2,3,4,5),0) == 1\nassert     count_X((0,1,2,3,4,5),5) == 1\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_X((1,2,3,4,5,6,1,1,1,1), 1) == 4\nassert     count_X((1,2,3,4,5,6,1,1,1,1), 2) == 5\nassert     count_X((1,2,3,4,5,6,1,1,1,1), 5) == 0\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_X([1,3,2,3,2,4], 2) == 3, \"1\"\nassert     count_X([1,3,2,3,2,4], 4) == 0, \"4\"\nassert     count_X([], 5) == 0, \"5\"\nassert count_X([], 6) == 0, \"6\"\nassert count_X([], 7) == 0, \"7\"\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert count_X((), 'X') == 0\nassert count_X((1, 2, 3, 4), 'X') == 0\nassert count_X((1, 2, 3), 'X') == 3\nassert count_X((1, 2, 3), 4) == 0\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_X((1,2,3,3,3), 3) == 3\nassert     count_X((1,2,3,3,3), 4) == 0\nassert     count_X((1,2,3,3,3), 2) == 2\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ncount_X((5,6,5,6,5,6,5), 5) == 1\nassert count_X((5,6,5,6,5,6,5), 6) == 3\n\ndef count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert (count_X((5, 10, 20, 10, 5, 30, 5, 5, 5, 5), 5)) == 3\nassert (count_X((5, 10, 20, 10, 5, 30, 5, 5, 5, 5), 10)) == 0\nassert (count_X((5, 10, 20, 10, 5, 30, 5, 5, 5, 5), 15)) == 0\nassert (count_X((5, 10, 20, 10, 5, 30, 5, 5, 5, 5), 45)) == 0\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     insert_element([1,2,3,4,5],6) == [1,2,6,3,4,5]\nassert     insert_element([1,2,3,4,5],2) == [1,2,2,3,4,5]\nassert     insert_element([1,2,3,4,5],1) == [1,1,2,3,4,5]\nassert     insert_element([1,2,3,4,5],0) == [0,1,2,3,4,5]\n\n\ndef delete_element(list,element):\n    '''\n    Write a function that takes in a list and an element and deletes the element from the list. If the element is not found in the list, it should return False.\n    '''\n    pass\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     insert_element([1,2,3],4) == [1,4,2,3], 'First'\nassert     insert_element([1,2,3],2) == [1,2,2,3], 'Second'\nassert     insert_element([],4) == [4], 'Third'\n\n\n\ndef delete_element(list, element):\n    '''\n    Write a function that takes in a list and an element and deletes the element from the list.\n    '''\n    pass\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     insert_element([3, 2, 1, 2], 3) == [3, 2, 1, 3, 2, 1]\nassert     insert_element([3, 2, 1, 2], 1) == [1, 2, 3, 2, 1, 2]\nassert     insert_element([3, 2, 1, 2], 2) == [1, 2, 2, 3, 2, 1]\nassert     insert_element([3, 2, 1, 2], 0) == [0, 1, 2, 2, 3, 2, 1]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ninsert_element([1,2,3,4],5) == [5,1,2,3,4]\nassert \ninsert_element([1,2,3,4],5) == [5,4,1,2,3]\n\n\n\ndef even_numbers(list):\n    '''\n    Write a function that takes in a list and returns True if the list is even, and False if it is not even.\n    '''\n    pass\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     insert_element([5,6,7,8,9,10], 4) == [4,5,6,7,8,9,10]\nassert     insert_element([1,2,3,4], 2) == [1,2,3,4,2]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     insert_element([1, 2, 3, 4], 3) ==[1, 3, 3, 4]\nassert     insert_element([1, 2, 3, 4], 5) ==[5, 1, 2, 3, 4]\nassert     insert_element([1, 2, 3, 4], -1) ==[-1, 1, 2, 3, 4]\nassert     insert_element([1, 2, 3], 2) ==[1, 2, 2, 3]\nassert     insert_element([1, 2], 2) ==[2, 1, 2]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ninsert_element([1,2,3,4],0) == [0,1,2,3,4]\nassert \ninsert_element([1,2,3,4],1) == [0,1,1,2,3,4]\nassert \ninsert_element([1,2,3,4],2) == [0,1,1,2,3,4]\nassert \ninsert_element([1,2,3,4],3) == [0,1,1,2,3,4]\nassert \ninsert_element([1,2,3,4],4) == [0,1,1,2,3,4]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert insert_element([1, 2, 3, 4], 2) == [1, 2, 2, 3, 4]\nassert insert_element([1, 2, 3, 4], -1) == [-1, 1, 2, 3, 4]\n\ndef get_list_length(list):\n    '''\n    Write a function that takes in a list and returns the length of the list.\n    '''\n    pass\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nassert insert_element([],1) == []\nassert insert_element([1],1) == [1]\nassert insert_element([1,2],1) == [1,1,2]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ninsert_element([1,2,3,4,5],1) == [1,1,2,3,4,5], \"The function should work correctly\"\nassert \ninsert_element([1,2,3,4,5],0) == [0,1,2,3,4,5], \"The function should work correctly\"\nassert \ninsert_element([1,2,3,4,5],6) == [1,2,3,4,5,6], \"The function should work correctly\"\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     convert(complex(-1, -3)) == (1.1071428571428571, 0.0)\nassert     convert(complex(-3, 0)) == (1.1071428571428571, 0.0)\nassert     convert(complex(0, -3)) == (1.1071428571428571, 0.0)\nassert     convert(complex(3, -1)) == (1.1071428571428571, 0.0)\nassert     convert(complex(0, -1)) == (1.1071428571428571, 0.0)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     convert([1+0j, -1+0j]) == ([0, 1], [0, -1])\nassert     convert([1+0j, -1-0j]) == ([0, 1], [0, -1])\nassert     convert([1+1j, -1+1j]) == ([-1, 0], [-1, 1])\nassert     convert([1+1j, -1-1j]) == ([1, 0], [-1, 1])\nassert     convert([1-1j, -1-1j]) == ([1, 0], [-1, 1])\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     convert([1,2,3,4,5,6]) ==  ([1.0, 3.14], [[1, 2], [3, 4], [5, 6]])\nassert     convert([0,1,2,3,4,5,6]) ==  ([1.0, 3.14], [[0, 1], [2, 3], [4, 5], [6, 0]])\nassert     convert([1,-2,3,-4,5,-6]) ==  ([1.0, 3.14], [[1, -2], [3, -4], [5, -6]])\nassert     convert([3,4,5,6,7,8]) ==  ([1.0, 3.14], [[3, 4], [5, 6], [7, 8]])\nassert     convert([1,-2,3,4,5,6]) ==  ([1.0, 3.14], [[1, -2], [3, 4], [5, 6]])\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     convert(complex(-12,4)) == (0.67, 5.0)\nassert    convert(complex(4,-1)) == (1.33, 1.6)\nassert    convert(complex(0,0)) == (0,0)\nassert    convert(complex(0,4)) == (0,5)\nassert    convert(complex(-4,4)) == (1,5)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     convert([1+1j, -2-4j, 1+5j, 2+7j]) == [[1,5,3,7], [2,4,1,2], [1,-2,1,3], [1,1,3,4]]\nprint(\"The function convert works correctly!\")\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     convert([1,2j,3,4,5,6,7,8]) == ([3, 2, 1, 0, 1.414, 2.8284, 4, 5], [1.414, 2.8284])\nassert convert([1+2j, 3+4j, 5, 6]) == ([5, 4, 3, 2], [2, 1, 1, 1])\nassert convert([1,2,3]) == ([1,2,3], [0,1,1])\nassert convert([1,2]) == ([1,2], [1,0])\n\nprint(\"TESTS DONE!\")\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     convert(1) == (1.0, 1.0)\nassert     convert(1+1j) == (1.0+1.0j)\nassert     convert(-1) == (-1.0, -1.0)\nassert     convert(1+1j+1j) == (1.0+1.0j, 1.0+1.0j)\nassert     convert(0+0j) == (0.0, 0.0)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     convert([1, 2]) == (1.0, -2.0)\nassert convert([0, 0]) == (0.0, 0.0)\n\ndef to_polar(complex_numbers):\n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    pass\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     convert((3+4j)) == (3.0, 4.0)\nassert convert((3+4j)) == (3.0, 4.0)\nassert convert((1+1j)) == (1.0, 1.0)\nassert convert((1+1j)) == (1.0, 1.0)\n\ndef string_to_int(s):\n    '''\n    Write a python function to convert a string to integer.\n    '''\n    pass\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_integer([1,1,1,1,1,1,2,2,2,2,2,3,3,4,4,4,4,4,4,4,4,5,5,6,6,7,7]) == 12\nassert     count_integer([1,1,1,1,1,1,2,2,2,2,2,3,3,4,4,4,4,4,4,4,4,5,5,6,6,7,7]) == 10"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_integer([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10, \"Wrong result\"\nassert     count_integer([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]) == 11, \"Wrong result\"\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_integer([]) == 0, 'Wrong value for list: {}'.format(list1)\nassert     count_integer([0]) == 1, 'Wrong value for list: {}'.format(list1)\nassert     count_integer([1]) == 1, 'Wrong value for list: {}'.format(list1)\nassert     count_integer([0,0,0,0,0]) == 5, 'Wrong value for list: {}'.format(list1)\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_integer([1,2,3,4,5]) == 4\nassert     count_integer([-1,-2,-3,-4,-5]) == 5\nassert     count_integer([1,2,3,4]) == 0\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_integer([1, 2, 3]) == 3, \"Function should return 3\"\nassert     count_integer([1, 2, 1]) == 1, \"Function should return 1\"\nassert     count_integer([]) == 0, \"Function should return 0\"\nassert     count_integer([1, -5, 7.8, -8.9]) == 4, \"Function should return 4\"\n\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\""
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_integer([]) == 0, \"Input is empty\"\nassert     count_integer([1,2,3]) == 3, \"Input has 3 elements\"\nassert     count_integer([-3,-2,-1,-4,-3]) == 4, \"Input has 4 elements\"\nassert     count_integer([-3,1,2]) == 3, \"Input has 3 elements\"\nassert     count_integer([1,1,1,1]) == 4, \"Input has 4 elements\"\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_integer([1, 2, 3, 4]) == 4, 'Wrong answer'\nassert count_integer([1, 2, 3, 4]) == 4, 'Wrong answer'\nassert count_integer([]) == 0, 'Wrong answer'\nassert count_integer([1.0, 2, 3, 4]) == 4, 'Wrong answer'\nassert count_integer([1, 2, 3, 4.0]) == 4, 'Wrong answer'\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_integer([1, 2, 3, 4, 5]) == 4, \"Not proper\"\nassert     count_integer([-1, -2, -3, -4, -5]) == 5, \"Not proper\"\nassert     count_integer([1.2, 2.3, 3.4, 4.5, 5.6]) == 6, \"Not proper\"\nassert     count_integer([]) == 0, \"Not proper\"\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_integer([1,2,3,4,5,6,7,8,9,10,11]) == 10\nassert count_integer([1,2,3,4,5,6,7,8,9]) == 9\nassert count_integer([]) == 0\nassert count_integer([1,2,3]) == 3\nassert count_integer([1,2,3,4,5]) == 5\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nl = ['a', 'b', 'c']\nn = 3\nprint(combinations_colors(l, n))"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     combinations_colors([1,2,3], 3) == [[1,2,3], [2,3,1], [3,1,2]]\nassert     combinations_colors([1,2,3], 2) == [[1,2], [1,3], [2,3]]\n\ndef get_permutations(l):\n    '''\n    Write a function that takes in a list and returns a list of all permutations of the list. If there is more than one permutation, return a list with tuples for each permutation.\n    '''\n    pass\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     combinations_colors([1, 2, 3, 4], 4) == [(1, 2, 3, 4), (1, 2, 4, 3), (1, 3, 2, 4), (1, 3, 4, 2), (1, 4, 2, 3), (1, 4, 3, 2), (2, 1, 3, 4), (2, 1, 4, 3), (2, 3, 1, 4), (2, 3, 4, 1), (2, 4, 1, 3), (2, 4, 3, 1), (3, 1, 2, 4), (3, 1, 4, 2), (3, 2, 1, 4), (3, 2, 4, 1), (3, 4, 1, 2), (3, 4, 2, 1)]\nassert     combinations_colors([], 1) == []\nassert     combinations_colors([1, 2, 3], 2) == [(1, 2), (1, 3), (2, 1), (2, 3)]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     combinations_colors([], 1) == []\nassert combinations_colors([], 2) == []\nassert combinations_colors([1], 1) == [[(1,)]*1]\nassert combinations_colors([1, 2], 1) == [[(1, 2)]*1]\nassert combinations_colors([1, 2], 2) == [[(1, 2)]*2]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     combinations_colors(['A', 'B', 'C'], 2) == [['A', 'B'], ['A', 'C'], ['B', 'C'], ['A', 'C']]\nassert     combinations_colors(['A', 'B', 'C', 'D'], 3) == [['A', 'B', 'C'], ['A', 'B', 'D'], ['A', 'C', 'D'], ['A', 'C', 'D'], ['B', 'C', 'D'], ['A', 'C', 'D'], ['A', 'D', 'D'], ['B', 'D', 'D'], ['A', 'D', 'D'], ['C', 'D', 'D']]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     combinations_colors([1, 2, 3], 0) == []\nassert     combinations_colors([1, 2, 3], 2) == [[1, 2], [1, 3], [2, 3]]\nassert     combinations_colors([1, 2, 3], 4) == [[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3],\n                                                [1, 3], [1, 3], [2, 3], [2, 3],\n                                                [1, 3], [1, 3], [2, 3], [2, 3],\n                                                [1, 3], [2, 3]]\n\ndef combinations_digits(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    pass\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     combinations_colors([1, 2, 3, 4], 1) ==  [(1,)]\nassert     combinations_colors([1, 2, 3, 4], 2) ==  [(1,2), (2,3), (3,4)]\nassert     combinations_colors([1, 2, 3, 4], 3) ==  [(1,2,3), (1,2,4), (1,3,4), (2,3,4)]\nassert     combinations_colors([1, 2, 3, 4], 4) ==  [(1,2,3,4)]\nassert     combinations_colors([1, 2, 3, 4], 5) ==  [(1,2,3,4,5)]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     combinations_colors([1,2,3,4], 2) == [[1,2], [1,3], [1,4], [2,3], [2,4], [3,4]]\nassert combinations_colors([1,2,3,4,5], 2) == [[1,2], [1,3], [1,4], [1,5], [2,3], [2,4], [2,5], [3,4], [3,5], [4,5]]\nassert combinations_colors([], 2) == []\nassert combinations_colors([1], 1) == [[1]]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef all_combs(l, n):\n    '''\n    Write a function that takes in a list and length n, and returns a generator of all combinations (with repetition) of the elements of the list.\n    '''\n    pass\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     combinations_colors([1,2,3], 2) == [[(1,1),(2,2),(3,3)], [(1,1),(2,3),(3,2)], [(1,2),(2,1),(3,3)], [(1,2),(2,3),(3,1)], [(1,3),(2,2),(3,1)], [(1,3),(2,1),(3,2)], [(1,1),(2,2),(3,3)], [(1,1),(2,3),(3,2)], [(1,2),(2,2),(3,3)], [(1,2),(2,3),(3,1)], [(1,3),(2,1),(3,2)], [(1,3),(2,2),(3,1)]]\n\ndef make_plan(total_cost, plan_cost, money_per_item):\n    '''\n    Write a function that takes in three parameters: total_cost, plan_cost, and money_per_item, and returns the maximum number of items that can be bought at one time.\n    '''\n    pass\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef count_Primes_nums_optimized(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    pass\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint('TESTING count_Primes_nums')"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ncount_Primes_nums(1) == 0\ncount_Primes_nums(3) == 2\ncount_Primes_nums(10) == 6\ncount_Primes_nums(15) == 10\n\n\n\ndef count_Primes_nums_alt(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    pass\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    result = 0\n    for i in range(2, n):\n        if n % i == 0:\n            result += 1\n    return result\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ncount_Primes_nums(1) == 0\ncount_Primes_nums(2) == 0\ncount_Primes_nums(3) == 2\ncount_Primes_nums(4) == 2\ncount_Primes_nums(5) == 2\ncount_Primes_nums(6) == 4\ncount_Primes_nums(7) == 3\ncount_Primes_nums(8) == 4\ncount_Primes_nums(9) == 4\ncount_Primes_nums(10) == 4\ncount_Primes_nums(11) == 4\ncount_Primes_nums(12) == 4\ncount_Primes_nums(13) == 4\ncount_Primes_nums(14) == 4\ncount_Primes_nums(15) == 4\ncount_Primes_nums(16) == 4\ncount_Primes_nums(17) == 5\ncount_Primes_nums(18) == 5\ncount_Primes_nums(19) == 5\ncount_Primes_nums(20) == 5\ncount_Primes_nums(21) == 5\ncount_Primes_nums(22) == 5\ncount_Primes_nums(23) == 5\ncount_Primes_nums(24) == 5\ncount_Primes_nums(25) == 5\ncount_Primes_nums(26) == 5\ncount_Primes_nums(27) == 5\ncount_Primes_nums(28) == 5\ncount_Primes_nums(29) == 5\ncount_Primes_nums(30) == 5\ncount_Primes_nums(31) == 5\ncount_Primes_nums(32) == 5\ncount_Primes_nums(33) == 5\ncount_Primes_nums(34) == 5\ncount_Primes_nums(35) == 5\ncount_Primes_nums(36) == 5\ncount_Primes_nums(37) == 5\ncount_Primes_nums(38) == 5\ncount_Primes_nums(39) == 5\ncount_Primes_nums(40) == 5\ncount_Primes_nums(41) == 5\ncount_Primes_nums(42) == 5\ncount_Primes_nums(43) == 5\ncount_Primes_nums(44) == 5\ncount_Primes_nums(45) == 5\ncount_Primes_nums(46) == 5\ncount_Primes_nums(47) == 5\ncount_Primes_nums(48) == 5\ncount_Primes_nums(49) == 5\ncount_Primes_nums(50) == 5\ncount_Primes_nums(51) == 5\ncount_Primes_nums(52) == 5\ncount_Primes_nums(53) == 5\ncount_Primes_nums(54) == 5\ncount_Primes_nums(55) == 5\ncount_Primes_nums(56) == 5\ncount_Primes_nums(57) == 5\ncount_Primes_nums(58) == 5\ncount_Primes_nums(59) == 5\ncount_Primes_nums(60) == 5\ncount_Primes_nums(61) == 5\ncount_Primes_nums(62) == 5\ncount_Primes_nums(63) == 5\ncount_Primes_nums(64) == 5\ncount_Primes_nums(65) == 5\ncount_Primes_nums(66) == 5\ncount_Primes_nums(67) == 5\ncount_Primes_nums(68) == 5\ncount_Primes_nums(69) == 5\ncount_Primes_nums(70) == 5\ncount_Primes_nums(71) == 5\ncount_Primes_nums(72) == 5\ncount_Primes_nums(73) == 5\ncount_Primes_nums(74) == 5\ncount_Primes_nums(75) == 5\ncount_Primes_nums(76) == 5\ncount_Primes_nums(77) == 5\ncount_Primes_nums(78) == 5\ncount_Primes_nums(79) == 5\ncount_Primes_nums(80) == 5\ncount_Primes_nums(81) == 5\ncount_Primes_nums(82) == 5\ncount_Primes_nums(83) == 5\ncount_Primes_nums(84) == 5\ncount_Primes_nums(85) == 5\ncount_Primes_nums(86) == 5\ncount_Primes_nums(87) == 5\ncount_Primes_nums(88) == 5\ncount_Primes_nums(89) == 5\ncount_Primes_nums(90) == 5\ncount_Primes_nums(91) == 5\ncount_Primes_nums(92) == 5\ncount_Primes_nums(93) == 5\ncount_Primes_nums(94) == 5\ncount_Primes_nums(95) == 5\ncount_Primes_nums(96) == 5\ncount_Primes_nums(97) == 5\ncount_Primes_nums(98) == 5\ncount_Primes_nums(99) == 5\ncount_Primes_nums(100) == 5\ncount_Primes_nums(101) == 5\ncount_Primes_nums(102) == 5\ncount_Primes_nums(103) == 5\ncount_Primes_nums(104) == 5\ncount_Primes_nums(105) == 5\ncount_Primes_nums(106) == 5\ncount_Primes_nums(107) == 5\ncount_Primes_nums(108) == 5\ncount_Primes_nums(109) == 5\ncount_Primes_nums(110) == 5\ncount_Primes_nums(111) == 5\ncount_Primes_nums(112) == 5\ncount_Primes_nums(113) == 5\ncount_Primes_nums(114) == 5\ncount_Primes_nums(115) == 5\ncount_Primes_nums(116) == 5\ncount_Primes_nums(117) == 5\ncount_Primes_nums(118) == 5\ncount_Primes_nums(119) == 5\ncount_Primes_nums(120) == 5\ncount_Primes_nums(121) == 5\ncount_Primes_nums(122) == 5\ncount_Primes_nums(123) == 5\ncount_Primes_nums(124) == 5\ncount_Primes_nums(125) == 5\ncount_Primes_nums(126) == 5\ncount_Primes_nums(127) == 5\ncount_Primes_nums(128) == 5\ncount_Primes_nums(129) == 5\ncount_Primes_nums(130) == 5\ncount_Primes_nums(131) == 5\ncount_Primes_nums(132) == 5\ncount_Primes_nums(133) == 5\ncount_Primes_nums(134) == 5\ncount_Primes_nums(135) == 5\ncount_Primes_nums(136) == 5\ncount_Primes_nums(137) == 5\ncount_Primes_nums(138) == 5\ncount_Primes_nums(139) == 5\ncount_Primes_nums(140) == 5\ncount_Primes_nums(141) == 5\ncount_Primes_nums(142) == 5\ncount_Primes_nums(143) == 5\ncount_Primes_nums(144) == 5\ncount_Primes_nums(145) == 5\ncount_Primes_nums(146) == 5\ncount_Primes_nums(147) == 5\ncount_Primes_nums(148) == 5\ncount_Primes_nums(149) == 5\ncount_Primes_nums(150) == 5\ncount_Primes_nums(151) == 5\ncount_Primes_nums(152) == 5\ncount"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_Primes_nums(0) == 0 \nassert     count_Primes_nums(1) == 0 \nassert     count_Primes_nums(2) == 1 \nassert     count_Primes_nums(5) == 4 \nassert     count_Primes_nums(12) == 7 \n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert count_Primes_nums(2) == 1\nassert count_Primes_nums(3) == 2\nassert count_Primes_nums(13) == 6\nassert count_Primes_nums(20) == 11\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     swap_numbers(3,4) == (4,3)\nassert     swap_numbers(4,3) == (3,4)\nassert     swap_numbers(1,2) == (2,1)\nassert     swap_numbers(3,3) == (3,3)\nassert     swap_numbers(3,1) == (1,3)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     swap_numbers(2,1) == (1,2)\nassert     swap_numbers(10,13) == (13,10)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     swap_numbers(4,7) == (7,4)\nassert     swap_numbers(3,5) == (5,3)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    swap_numbers(1,2) == (2,1)\n    swap_numbers(11,22) == (22,11)\n    swap_numbers(10,9) == (9,10)\n    swap_numbers(-1,3) == (-3,-1)\n    swap_numbers(-1,-3) == (-3,-1)\n    swap_numbers(0,-3) == (-3,0)\n\n\n\ndef swap_letters(string):\n    '''\n    Write a function that takes in a string and returns a new string with all of the letters in the original string reversed.\n    '''\n    pass\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     swap_numbers(6,4) == (4,6)\nassert     swap_numbers(7,6) == (6,7)\nassert     swap_numbers(6,7) == (7,6)\nassert     swap_numbers(8,4) == (4,8)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    swap_numbers(10,100) == (100, 10)\n    swap_numbers(100,10) == (10,100)\n    swap_numbers(100,99) == (99, 100)\n    swap_numbers(99,100) == (100, 99)\n    swap_numbers(1,2) == (2,1)\n    swap_numbers(2,1) == (1,2)\n    swap_numbers(1,1) == (1,1)\n\n    \n    \n    \n    \n\ndef is_triangle(a,b,c):\n    '''\n    Write a function that takes in 3 numbers and returns True if they can form a triangle.\n    '''\n    pass\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     swap_numbers(1,2) == (2, 1), 'Error: Test 1 Failed'\nassert     swap_numbers(1,1) == (1,1), 'Error: Test 2 Failed'\nassert     swap_numbers(1,1) == (1,1), 'Error: Test 3 Failed'\nassert     swap_numbers(1,1) == (1,1), 'Error: Test 4 Failed'\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     swap_numbers(1, 2) == (2, 1)\nassert     swap_numbers(10, 20) == (20, 10)\nassert     swap_numbers(10, 20) == (20, 10)\n\ndef is_in_letters(word, letter):\n    '''\n    Write a function that takes in a word and a single letter and returns True if that letter is in the word, False if it's not.\n    '''\n    pass\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     swap_numbers(3, 4) == (4, 3)\nassert     swap_numbers(7, 8) == (8, 7)\nassert     swap_numbers(3, 5) == (5, 3)\nassert     swap_numbers(7, 8) == (8, 7)"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     swap_numbers(1,2) == (2, 1)\nassert swap_numbers(1,1) == (1,1)\nassert swap_numbers(2,1) == (1,2)\nassert swap_numbers(1,2) == (2,1)\nassert swap_numbers(3,4) == (4,3)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     maximize_elements((-1, -2), (1, 2)) == (1, 2)\nassert     maximize_elements((-2, -1), (1, 2)) == (1, 2)\nassert     maximize_elements((1, -2), (1, 2)) == (1, 2)\nassert     maximize_elements((-2, 1), (1, 2)) == (1, 2)\nassert     maximize_elements((1, 1), (1, 2)) == (1, 2)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    maximize_elements((1, 2), (5, 6)) == (1, 2)\n    maximize_elements((3, 4), (1, 2)) == (1, 2)\n    maximize_elements((4, 5), (1, 2)) == (1, 2)\n    maximize_elements((5, 6), (3, 4)) == (3, 4)\n    maximize_elements((6, 7), (3, 4)) == (3, 4)\n\n\ndef minimize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to minimize the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     maximize_elements((1, 2, 3), (5, 4, 9)) == (5, 4, 9)\nassert     maximize_elements((1, 2, 3), (1, 2, 3)) == (1, 2, 3)\nassert     maximize_elements((1, 2, 3), (3, 2, 1)) == (3, 2, 1)\nassert     maximize_elements((1, 2, 3), (4, 2, 4)) == (4, 2, 4)\nassert     maximize_elements((5, 6, 7), (4, 5, 6)) == (5, 6, 7)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     maximize_elements((0,1),(4,6)) == (4,6)\nassert     maximize_elements((0,1),(0,1)) == (0,1)\nassert     maximize_elements((0,1),(5,6)) == (5,6)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     (maximize_elements((1,1),(1,1)) == (1,1)) == True, \"Should be (1,1)\"\nassert     (maximize_elements((1,1),(2,1)) == (2,1)) == True, \"Should be (2,1)\"\nassert     (maximize_elements((1,2),(1,1)) == (1,2)) == True, \"Should be (1,2)\"\nassert     (maximize_elements((1,2),(2,1)) == (2,1)) == True, \"Should be (2,1)\"\nassert     (maximize_elements((1,2),(1,2)) == (1,2)) == True, \"Should be (1,2)\"\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     maximize_elements((1,2,3),(2,3,4)) == (2,3,4)\nassert maximize_elements((2,3,4),(1,2,3)) == (2,3,4)\nassert maximize_elements((10,2,3,4),(2,3,4,5)) == (10,2,3,4)\nassert maximize_elements((10,20,30),(10,20,30)) == (10,20,30)\nassert maximize_elements((-1,0),(-2,0)) == (0,0)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     maximize_elements((1, 5, 1, 6, 8), (1, 2, 4, 6, 7)) == (1, 2, 4, 6, 7)\nassert maximize_elements((1, 5, 1, 6, 8), (1, 2, 4, 6, 7)) == (1, 2, 4, 6, 7)\nassert maximize_elements((1, 5, 1, 6, 8, 3), (1, 2, 4, 6, 7)) == (1, 2, 4, 6, 7)\nassert maximize_elements((1, 5, 1, 6, 8, 3), (1, 2, 4, 6, 7)) == (1, 2, 4, 6, 7)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     maximize_elements((0, 1), (1, 1)) == (1, 1)\nassert     maximize_elements((-2, 4), (1, 1)) == (4, 4)\nassert     maximize_elements((0, 1), (1, 2)) == (1, 2)\nassert     maximize_elements((-2, 4), (1, 3)) == (4, 4)\nassert     maximize_elements((0, 1), (1, 1)) == (1, 1)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     maximize_elements((1, 2), (1, 1)) == (2, 2)\nassert     maximize_elements((1, 1), (1, 2)) == (2, 2)\nassert     maximize_elements((1, 2), (2, 1)) == (2, 2)\nassert     maximize_elements((1, 2), (1, 1)) == (2, 2)\nassert     maximize_elements((1, 1), (1, 1)) == (1, 2)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     maximize_elements((-5, -6, -7), (-1, -2, -3)) == (-1, -2, -3)\nassert maximize_elements((-1, -2, -3), (-5, -6, -7)) == (-1, -2, -3)\nassert maximize_elements((1, 2, 3), (4, 5, 6)) == (1, 2, 3)\nassert maximize_elements((1, 2, 3), (4, 5, 6), (1, 2, 3)) == (1, 2, 3)\nassert maximize_elements((1, 2, 3), (4, 5, 6), (2, 3, 4)) == (1, 2, 3)\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nnewman_prime(1) == 2\nassert \nnewman_prime(2) == 3\nassert \nnewman_prime(3) == 5\nassert \nnewman_prime(4) == 7\nassert \nnewman_prime(5) == 11\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nnewman_prime(4) == 5\nnewman_prime(5) == 7\nnewman_prime(6) == 11\n\nprint(\"You've got it right\")"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     newman_prime(5) == 3, \\\n    \"your implementation is wrong. \" + \\\n    \"Newman-Shanks\u2013Williams prime number is {}.\".format(newman_prime(5))\nassert newman_prime(1) == 2, \\\n    \"your implementation is wrong. \" + \\\n    \"Newman-Shanks\u2013Williams prime number is {}.\".format(newman_prime(1))\nassert newman_prime(2) == 3, \\\n    \"your implementation is wrong. \" + \\\n    \"Newman-Shanks\u2013Williams prime number is {}.\".format(newman_prime(2))\nassert newman_prime(3) == 5, \\\n    \"your implementation is wrong. \" + \\\n    \"Newman-Shanks\u2013Williams prime number is {}.\".format(newman_prime(3))\nassert newman_prime(4) == 7, \\\n    \"your implementation is wrong. \" + \\\n    \"Newman-Shanks\u2013Williams prime number is {}.\".format(newman_prime(4))\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     division_elements((0, 0), (0, 0)) == (0, 0)\nassert     division_elements((0, 0), (1, 1)) == (0, 0)\nassert     division_elements((1, 1), (0, 0)) == (0, 0)\nassert     division_elements((1, 1), (1, 1)) == (1, 1)\nassert     division_elements((1, 2), (1, 1)) == (1, 1)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     division_elements((1,2),(3,4)) == (1/3,2/3)\nassert     division_elements((1,2,3),(4,5,6)) == (1/2,2/2,3/2)\nassert     division_elements((1,2,3,4),(5,6,7,8)) == (1/2,2/2,3/2,4/2)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     division_elements((1,2), (3,4)) == (1.5,2.5), 'incorrect answer'\nassert     division_elements((2,5), (3,4)) == (1.5,2.5), 'incorrect answer'\nassert     division_elements((2,10), (4,2)) == (2,5), 'incorrect answer'\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert (1,2,3) == division_elements(test_tup1 = (1,2,3), test_tup2 = (4,5,6))\nassert (1,2,3) == division_elements(test_tup1 = (1,2,3), test_tup2 = (1,2,3))\nassert (1,1,1) == division_elements(test_tup1 = (1,2,3), test_tup2 = (0,0,0))\nassert (1,2,3) == division_elements(test_tup1 = (1,2,3), test_tup2 = (1,2,3))\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     division_elements((1, 2), (2, 3)) == (0.5, 1.5)\nassert     division_elements((2, 2), (1, 1)) == (3, 2)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ntest_tup1 = (4, 5, 6, 8, 11, 20)\ntest_tup2 = (2, 3, 5, 8, 10)\n\nassert division_elements(test_tup1, test_tup2) == (1, 2, 2.5, 3, 2, 1)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     division_elements((3, 2, 5, 8, 12), (5, 2, 9, 8, 10)) == ((3, 2, 3, 6, 7), (0.5, 0.5, 2.0, 4.0, 4.0))\n\nprint(\"Test case 4 - Correct\")\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     division_elements((5, 2, 4), (2, 4, 6)) == (1, 1, 2)\nassert     division_elements((1, 2, 3), (2, 4, 6)) == (0.5, 0.75, 1.0)\nassert     division_elements((1, 2, 3), (2, 4, -5)) == (0.5, 0.0, 0.5)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     division_elements((1, 2, 3), (1, 0, 2)) == (1.0, 0.5, 1.5)\nassert     division_elements((1, 2, 2), (2, 0, 0)) == (2.0, 0.5, 2.0)\nassert     division_elements((1, 2, 1), (1, 2, 1)) == (1.0, 0.5, 1.5)\nassert     division_elements((1, 2, 1), (1, 1, 1)) == (1.0, 1.0, 1.0)\nassert     division_elements((1, 2), (1, 2, 2)) == (1.0, 1.0)\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     split_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == ([1, 2, 3, 4, 5], \n    [6, 7, 8, 9]), \"Error\"\nassert split_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9], 9) == ([1, 2, 3, 4, 5, 6, 7, 8, 9], \n    []), \"Error\"\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     split_two_parts([1,2,3,4,5], 2) == ((1,2),(3,4,5))\nassert     split_two_parts([1,2,3,4,5], 1) == ((1,2),(3,4,5))\nassert     split_two_parts([1,2,3,4,5], 5) == ((1,2,3,4,5))\nassert     split_two_parts([1,2,3,4,5], 3) == ((1,2,3),(4,5))\nassert     split_two_parts([1,2,3,4,5], 4) == ((1,2,3),(4,5))\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef list_in_half(list1):\n    '''\n    Write a function that takes in a list and returns the middle of the list as a new list.\n    '''\n    pass\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     split_two_parts([1,2,3,4,5], 3) == ([1,2,3], [4,5])\nassert     split_two_parts([1,2,3,4,5], 6) == ([1,2], [3,4,5])\nassert     split_two_parts([1,2,3,4,5], 4) == ([1,2,3], [4,5])\nassert     split_two_parts([1,2,3,4,5], 2) == ([1,2], [3,4,5])\nassert     split_two_parts([1,2,3,4,5], 5) == ([1,2,3], [4,5])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     split_two_parts([0,1,2,3,4,5], 2) == ([0,1,2], [3,4,5])\nassert     split_two_parts([0,1,2,3,4,5], 3) == ([0,1,2], [3,4,5])\nassert     split_two_parts([0,1,2,3,4,5], 4) == ([0,1], [2,3,4,5])\nassert     split_two_parts([0,1,2,3,4,5], 5) == ([0,1], [2,3,4])\nassert     split_two_parts([0,1,2,3,4,5], 6) == ([0,1], [2,3,4,5])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     split_two_parts([1,2,3,4,5], 2) == ([1, 2], [3, 4, 5]), \"Wrong answer\"\nassert     split_two_parts([1,2,3,4,5], 5) == ([1, 2], [3, 4, 5]), \"Wrong answer\"\nassert     split_two_parts([1,2,3,4,5], 6) == ([1, 2], [3, 4, 5]), \"Wrong answer\"\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     split_two_parts([1, 2, 3, 4, 5], 2) == (([1, 2, 3], [4, 5]), ([3, 4, 5], [1, 2, 3]))\n\nprint(\"Ex. 4.11 - Success\")"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     split_two_parts([], 2) == ([], [])\nassert     split_two_parts([1, 2, 3], 2) == ([1, 2], [3])\nassert     split_two_parts([1, 2, 3, 4], 2) == ([1, 2], [3, 4])\nassert     split_two_parts([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5])\n\ndef sum_even_keys(dict1):\n    '''\n    Write a function that takes in a dictionary and returns the sum of all the keys in the dictionary that are an even integer.\n    '''\n    pass\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    split_two_parts([1, 2, 3, 4, 5], 3) == ([1, 2, 3], [4, 5])\n    split_two_parts([1, 2, 3, 4, 5], 5) == ([1, 2, 3, 4], [5])\n    split_two_parts([1, 2, 3, 4, 5], 4) == ([1, 2, 3], [4, 5])\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     dog_age(80) == 8\nassert     dog_age(50) == 7\nassert     dog_age(120) == 10\nassert     dog_age(0) == 0\nassert     dog_age(-80) == -8\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint('All test cases passed.')\n\ndef dog_years(m_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    pass\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     dog_age(2) == 4\nassert     dog_age(100) == 10000\nassert     dog_age(1) == 0\nassert     dog_age(0) == 0\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     dog_age(5) == 0, \"incorrect age in dog's years\"\nassert dog_age(1) ==.01, \"incorrect age in dog's years\"\nassert dog_age(60) == 2, \"incorrect age in dog's years\"\nassert dog_age(3) ==.25, \"incorrect age in dog's years\""
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef dog_name(s_name, w_name):\n    '''\n    Write a function to calculate a dog's name.\n    '''\n    pass\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     dog_age(2) ==.5\nassert     dog_age(3) ==.5\nassert     dog_age(100) == 10\nassert     dog_age(3) ==.75\nassert     dog_age(2) ==.5\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     list_split([1,2,3,4,5], 3) == [[1, 2, 3], [4, 5]]\nassert     list_split([1,2,3,4,5], 1) == [[1], [2], [3], [4], [5]]\nassert     list_split([1,2,3,4,5], 5) == [[1], [2], [3], [4], [5]]\nassert     list_split([1,2,3,4,5], 2) == [[1, 2], [3, 4], [5]]\nassert     list_split([1,2,3,4,5], 0) == [[1], [2], [3], [4], [5]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef is_palindrome(S):\n    '''\n    Write a function that takes in a string and checks if it is a palindrome. A palindrome is a word that is the same forwards and backwards.\n    '''\n    pass\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nlist_split([], 0) == []\nlist_split([1, 2, 3, 4], 1) == [[1]]\nlist_split([1, 2, 3, 4], 2) == [[1, 2], [3, 4]]\nlist_split([1, 2, 3, 4], 3) == [[1, 2, 3], [4]]\nlist_split([1, 2, 3, 4], 4) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 5) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 6) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 7) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 8) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 9) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 10) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 11) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 12) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 13) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 14) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 15) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 16) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 17) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 18) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 19) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 20) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 21) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 22) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 23) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 24) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 25) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 26) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 27) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 28) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 29) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 30) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 31) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 32) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 33) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 34) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 35) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 36) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 37) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 38) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 39) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 40) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 41) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 42) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 43) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 44) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 45) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 46) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 47) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 48) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 49) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 50) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 51) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 52) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 53) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 54) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 55) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 56) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 57) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 58) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 59) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 60) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 61) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 62) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 63) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 64) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 65) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 66) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 67) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 68) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 69) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 70) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 71) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 72) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 73) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 74) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 75) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 76) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 77) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 78) == [[1, 2, 3, 4]]\nlist_split([1, 2, 3, 4], 79) == [[1, 2, 3, 4]]"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     list_split([1,2,3,4], 1) == [[1,2,3,4]], 'incorrect result'\nassert     list_split([1,2,3,4], 2) == [[1,2], [3,4]], 'incorrect result'\nassert     list_split([1,2,3,4], 3) == [[1,2,3], [4]], 'incorrect result'\n\ndef list_split_odd(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every odd nth element, returning a list of the resulting lists.\n    '''\n    pass\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert list_split([1, 2, 3], 3) == [[1], [2], [3]]\nassert list_split([1, 2, 3], 2) == [[1, 2], [3]]\nassert list_split([1, 2, 3, 4, 5], 2) == [[1, 2], [3, 4], [5]]\nassert list_split([1, 2, 3, 4, 5], 4) == [[1, 2, 3, 4], [5]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nlist_split([1,2,3,4,5,6,7], 3) == [[1,2,3], [4,5,6], [7]]\n\nassert \nlist_split([1,2,3,4,5,6,7], 1) == [[1,2,3,4,5,6,7]]\n\nassert \nlist_split([1,2,3,4,5,6,7], 2) == [[1,2], [3,4,5], [6,7]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     list_split([1,2,3,4,5,6], 2) == [[1,2],[3,4],[5,6]]\nassert     list_split([1,2,3,4,5,6,7], 2) == [[1,2],[3,4],[5,6],[7]]\nassert     list_split([1,2,3,4,5,6,7,8,9,10], 2) == [[1,2],[3,4],[5,6],[7,8],[9,10]]\nassert     list_split([1,2,3,4,5,6,7,8,9,10], 3) == [[1,2,3],[4,5,6],[7,8,9],[10]]\nassert     list_split([1,2,3,4,5,6,7,8,9,10], 4) == [[1,2,3,4],[5,6,7,8],[9,10]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     list_split([1,2,3,4], 1) == [[1],[2],[3],[4]]\nassert     list_split([1,2,3,4], 2) == [[1,2],[3,4]]\nassert     list_split([1,2,3,4], 3) == [[1,2,3],[4]]\nassert     list_split([1,2,3,4], 4) == [[1,2,3,4]]\nassert     list_split([1,2,3,4], 5) == [[1,2,3,4]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     list_split([1, 2, 3, 4, 5, 6, 7, 8], 2) == [[1, 2], [3, 4], [5, 6], [7, 8]]\nassert     list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 2) == [[1, 2], [3, 4, 5], [6, 7, 8], [9]]\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     lateralsurface_cube(1) == 8\nassert     lateralsurface_cube(2) == 25\nassert     lateralsurface_cube(3) == 81\nassert     lateralsurface_cube(4) == 162\nassert     lateralsurface_cube(5) == 360\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef lateralsurface_octagon(l):\n    '''\n    Write a function to find the lateral surface area of an octagon given its side length.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     lateralsurface_cube(1) == 2\nassert     lateralsurface_cube(2) == 2 * 3\nassert     lateralsurface_cube(3) == 2 * 3 + 2 * 6\nassert     lateralsurface_cube(4) == 2 * 3 + 2 * 6 + 4 * 8\nassert     lateralsurface_cube(5) == 2 * 3 + 2 * 6 + 4 * 8 + 4 * 10\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nlateralsurface_cube(1) == 6\nlateralsurface_cube(2) == 10\nlateralsurface_cube(5) == 50"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    lateralsurface_cube(2) == 8\n    lateralsurface_cube(3) == 18\n    lateralsurface_cube(4) == 32\n    lateralsurface_cube(5) == 46\n    lateralsurface_cube(6) == 60\n    lateralsurface_cube(7) == 72\n    lateralsurface_cube(8) == 84\n    lateralsurface_cube(9) == 108\n    lateralsurface_cube(10) == 124\n    lateralsurface_cube(11) == 144\n    lateralsurface_cube(12) == 180\n    lateralsurface_cube(13) == 240\n    lateralsurface_cube(14) == 432\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     lateralsurface_cube(1) == 6, 'Wrong output'\nassert     lateralsurface_cube(2) == 12, 'Wrong output'\nassert     lateralsurface_cube(3) == 18, 'Wrong output'\nassert     lateralsurface_cube(4) == 24, 'Wrong output'\nassert     lateralsurface_cube(5) == 30, 'Wrong output'\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert lateralsurface_cube(1) == 6\nassert lateralsurface_cube(2) == 20\nassert lateralsurface_cube(3) == 36\nassert lateralsurface_cube(4) == 48\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert lateralsurface_cube(6) == 30\nassert lateralsurface_cube(1) == 6\nassert lateralsurface_cube(2) == 15\nassert lateralsurface_cube(3) == 21\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef sum_digits(n):  \n    '''\n    Write a python function that takes in a number n and returns the sum of its digits.\n    '''\n    pass\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(\"Output of square_Sum function : \", square_Sum(2))\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(\"PASSED\") if (square_Sum(2) == 10) else print(\"FAILED\")\n\nprint(\"=\" * 25)\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert square_Sum(1) == 0\nassert square_Sum(2) == 1\nassert square_Sum(3) == 1\nassert square_Sum(4) == 1\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     square_Sum(4) == 36\nassert square_Sum(15) == 1275\nassert square_Sum(1) == 0\nassert square_Sum(3) == 4\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    square_Sum(10) == 285\n    square_Sum(5) == 28\n    square_Sum(20) == 1220\n    square_Sum(15) == 2520\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nsquare_Sum(3) == 27\nassert \nsquare_Sum(7) == 126\nassert \nsquare_Sum(9) == 361"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nfind_star_num(0) == 1\nfind_star_num(1) == 3\nfind_star_num(2) == 5\nfind_star_num(3) == 7\nfind_star_num(4) == 11\nfind_star_num(5) == 13\nfind_star_num(6) == 15\nfind_star_num(7) == 17\nfind_star_num(8) == 19\nfind_star_num(9) == 21\nfind_star_num(10) == 23\nfind_star_num(11) == 25\nfind_star_num(12) == 27\nfind_star_num(13) == 29\nfind_star_num(14) == 31\nfind_star_num(15) == 33\nfind_star_num(16) == 35\nfind_star_num(17) == 37\nfind_star_num(18) == 39\nfind_star_num(19) == 41\nfind_star_num(20) == 43\nfind_star_num(21) == 45\nfind_star_num(22) == 47\nfind_star_num(23) == 49\nfind_star_num(24) == 51\nfind_star_num(25) == 53\nfind_star_num(26) == 55\nfind_star_num(27) == 57\nfind_star_num(28) == 59\nfind_star_num(29) == 61\nfind_star_num(30) == 63\nfind_star_num(31) == 65\nfind_star_num(32) == 67\nfind_star_num(33) == 69\nfind_star_num(34) == 71\nfind_star_num(35) == 73\nfind_star_num(36) == 75\nfind_star_num(37) == 77\nfind_star_num(38) == 79\nfind_star_num(39) == 81\nfind_star_num(40) == 83\nfind_star_num(41) == 85\nfind_star_num(42) == 87\nfind_star_num(43) == 89\nfind_star_num(44) == 91\nfind_star_num(45) == 93\nfind_star_num(46) == 95\nfind_star_num(47) == 97\nfind_star_num(48) == 99\nfind_star_num(49) == 101\nfind_star_num(50) == 103\nfind_star_num(51) == 105\nfind_star_num(52) == 107\nfind_star_num(53) == 109\nfind_star_num(54) == 111\nfind_star_num(55) == 113\nfind_star_num(56) == 115\nfind_star_num(57) == 117\nfind_star_num(58) == 119\nfind_star_num(59) == 121\nfind_star_num(60) == 123\nfind_star_num(61) == 125\nfind_star_num(62) == 127\nfind_star_num(63) == 129\nfind_star_num(64) == 131\nfind_star_num(65) == 133\nfind_star_num(66) == 135\nfind_star_num(67) == 137\nfind_star_num(68) == 139\nfind_star_num(69) == 141\nfind_star_num(70) == 143\nfind_star_num(71) == 145\nfind_star_num(72) == 147\nfind_star_num(73) == 149\nfind_star_num(74) == 151\nfind_star_num(75) == 153\nfind_star_num(76) == 155\nfind_star_num(77) == 157\nfind_star_num(78) == 159\nfind_star_num(79) == 161\nfind_star_num(80) == 163\nfind_star_num(81) == 165\nfind_star_num(82) == 167\nfind_star_num(83) == 169\nfind_star_num(84) == 171\nfind_star_num(85) == 173\nfind_star_num(86) == 175\nfind_star_num(87) == 177\nfind_star_num(88) == 179\nfind_star_num(89) == 181\nfind_star_num(90) == 183\nfind_star_num(91) == 185\nfind_star_num(92) == 187\nfind_star_num(93) == 189\nfind_star_num(94) == 191\nfind_star_num(95) == 193\nfind_star_num(96) == 195\nfind_star_num(97) == 197\nfind_star_num(98) == 199\nfind_star_num(99) == 201\nfind_star_num(100) == 203\nfind_star_num(101) == 205\nfind_star_num(102) == 207\nfind_star_num(103) == 209\nfind_star_num(104) == 211\nfind_star_num(105) == 213\nfind_star_num(106) == 215\nfind_star_num(107) == 217\nfind_star_num(108) == 219\nfind_star_num(109) == 221\nfind_star_num(110) == 223\nfind_star_num(111) == 225\nfind_star_num(112) == 227\nfind_star_num(113) == 229\nfind_star_num(114) == 231\nfind_star_num(115) == 233\nfind_star_num(116) == 235\nfind_star_num(117) == 237\nfind_star_num(118) == 239\nfind_star_num(119) == 241\nfind_star_num(120) == 243\nfind_star_num(121) == 245\nfind_star_num(122) == 247\nfind_star_num(123) == 249\nfind_star_num(124) == 251\nfind_star_num(125) == 253\nfind_star_num(126) == 255\nfind_star_num(127) == 257\nfind_star_num(128) == 259\nfind_star_num(129) == 261\nfind_star_num(130) == 263\nfind_star_num(131) == 265\nfind_star_num(132) == 267\nfind_star_num(133) == 269\nfind_star_num(134) == 271\nfind_star_num(135) == 273\nfind_star_num(136) == 275\nfind_star_num(137) == 277\nfind_star_num(138) == 279\nfind_star_num(139) == 281\nfind_star_num(140) == 283\nfind_star_num(141) == 285\nfind_star_num(142) == 287\nfind_star_num(143) == 289\nfind_star_num(144) == 291\nfind_star_num(145) == 293\nfind_star_num(146) == 295\nfind_star_num(147) == 297\nfind_star_num(148) == 299\nfind_star_num(149) == 301\nfind_star_num(150) == 303\nfind_star_num(151) == 305\nfind_star_num(152) == 307\nfind_star_num(153) == 309\nfind_star_num(154) == 311\nfind_star_num(155) == 313\nfind_star_num(156) == 315\nfind_star_num(157) == 317\nfind_star_num(158) == 319\nfind_star_num(159) == 321\nfind_star_num(160) == 323\nfind_star_num(161) == 325\nfind_star_num(162) == 327\nfind_star_num(163) == 329\nfind_star_num(164) == 331\nfind_star_num(165) == 333\nfind_star_num(166) == 335\nfind_star_num(167) == 337\nfind_star_num(168) == 339\nfind_star_num(169) == 341\nfind_star_num(170) == 343\nfind_star_num(171) == 345\nfind_star_num(172) == 347\nfind_star_num(173) == 349\nfind_star_num(174) == 351\nfind_star_num(175) == 353\nfind_star_num(176) == 355\nfind_star_num(177) == 357\nfind_star_num(178) == 359\nfind_star_num(179) == 361\nfind_star_num(180) == 363\nfind_star_num"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_star_num(1) == 2\nassert     find_star_num(2) == 3\nassert     find_star_num(3) == 4\nassert     find_star_num(10) == 19\nassert     find_star_num(0) == 1\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint('The correctness of find_star_num() function is correct.')"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert find_star_num(4) == 5\nassert find_star_num(9) == 28\nassert find_star_num(1) == 1\nassert find_star_num(10) == 33\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_star_num(1) == 2\nassert     find_star_num(2) == 2\nassert     find_star_num(3) == 2\nassert     find_star_num(4) == 3\nassert     find_star_num(5) == 4\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_star_num(1) == 1\nassert     find_star_num(2) == 5\nassert     find_star_num(3) == 10\nassert     find_star_num(4) == 20\nassert     find_star_num(5) == 50\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_star_num(1)     ==    0\nassert     find_star_num(2)     ==    1\nassert     find_star_num(3)     ==    2\nassert     find_star_num(10)     ==    20\nassert     find_star_num(16)     ==    55\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_star_num(0) == 1\nassert     find_star_num(1) == 2\nassert     find_star_num(2) == 3\nassert     find_star_num(3) == 4\nassert     find_star_num(4) == 5\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nfind_star_num(1) == 1\nfind_star_num(2) == 4\nfind_star_num(3) == 7\nfind_star_num(4) == 10\nfind_star_num(5) == 14\nfind_star_num(6) == 18\nfind_star_num(7) == 21\nfind_star_num(8) == 25\nfind_star_num(9) == 29\nfind_star_num(10) == 34\n\ndef find_first_4_digit_of_sum(number):\n    '''\n    Write a function to find the first 4 digits of a sum of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_star_num(0) == 1\nassert     find_star_num(1) == 3\nassert     find_star_num(2) == 5\nassert     find_star_num(3) == 7\nassert     find_star_num(4) == 9\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     ascii_value('a') == 65\nassert     ascii_value('A') == 65\nassert     ascii_value('b') == 66\nassert     ascii_value('B') == 66\nassert     ascii_value('c') == 67\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     ascii_value('0') == 48, 'Wrong Answer'\nassert     ascii_value('1') == 49, 'Wrong Answer'\nassert     ascii_value('2') == 50, 'Wrong Answer'\nassert     ascii_value('3') == 51, 'Wrong Answer'\nassert     ascii_value('4') == 52, 'Wrong Answer'\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef word_search(board, word):\n    '''\n    Write a function to see if a word is entirely found within the grid,\n    given the word is written from top to bottom and left to right.\n    '''\n    pass\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     ascii_value('a') == 65\nassert     ascii_value('b') == 66\nassert     ascii_value('c') == 67\nassert     ascii_value('d') == 68\nassert     ascii_value('e') == 69\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('0') == 48\nassert     ascii_value('z') == 122\nassert     ascii_value('A') == 65\nassert     ascii_value('a') == 97\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('b') == 98\nassert     ascii_value('c') == 99\nassert     ascii_value('d') == 100\nassert     ascii_value('e') == 101\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     ascii_value(\"a\") == 97, \"Expected 97, got \" + str(ascii_value(\"a\"))\nassert     ascii_value(\"z\") == 122, \"Expected 122, got \" + str(ascii_value(\"z\"))\nassert     ascii_value(\"0\") == 48, \"Expected 48, got \" + str(ascii_value(\"0\"))\nassert     ascii_value(\"9\") == 57, \"Expected 57, got \" + str(ascii_value(\"9\"))\nassert     ascii_value(\"&\") == 38, \"Expected 38, got \" + str(ascii_value(\"&\"))\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('b') == 98\nassert     ascii_value('c') == 99\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    assert ascii_value('a') == 97\n    assert ascii_value('A') == 65\n    assert ascii_value('2') == 98\n    assert ascii_value('9') == 57\n    "
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert sum_even_and_even_index([1, 2, 3, 4, 5, 6]) == 22\nassert sum_even_and_even_index([3, 4, 5, 6, 8, 9, 10]) == 18\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_even_and_even_index([1,2,3,4,5,6,7]) == 20\nassert     sum_even_and_even_index([1,3,5,7]) == 20\nassert     sum_even_and_even_index([1,3,5]) == 7\nassert     sum_even_and_even_index([1,2,4,5,6,7,8,9]) == 22\nassert     sum_even_and_even_index([1,2,3,4,5,6]) == 5\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_even_and_even_index([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 30, 'incorrect'\nassert     sum_even_and_even_index([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 30, 'incorrect'\nassert     sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 60, 'incorrect'\nassert     sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 90, 'incorrect'\n\nprint(\"All test cases passed\""
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_even_and_even_index([1,2,3,4,5,6,7,8,9]) == 0\nassert     sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10]) == 0\nassert     sum_even_and_even_index([10,11,12,13,14,15,16,17,18]) == 30\nassert     sum_even_and_even_index([10,11,12,13,14,15,16,17,18,19]) == 60\nassert     sum_even_and_even_index([10,11,12,13,14,15,16,17,18,19,20]) == 70\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    sum_even_and_even_index([2,4,6,8]) == 6\n    sum_even_and_even_index([]) == 0\n    sum_even_and_even_index([0,0,2,5,7]) == 0\n    sum_even_and_even_index([1,2,3,4,5,6,7,8]) == 11\n    sum_even_and_even_index([1,2,3,4,5,6,7,8,9]) == 33\n    sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10]) == 33\n    sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11]) == 54\n    sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12]) == 54\n    sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12,13]) == 63\n    sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == 63\n    sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == 63\n    sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == 63\n    sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == 63\n    sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) == 63\n    sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == 63\n    sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 63\n    sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) == 63\n    sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]) == 63\n    sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]) == 63\n    sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]) == 63\n    sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == 63\n    sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) == 63\n    sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]) == 63\n    sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]) == 63\n    sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]) == 63\n    sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]) == 63\n    sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]) == 63\n    sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]) == 63\n    sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33]) == 63\n    sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34]) == 63\n    sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]) == 63\n    sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36]) == 63\n    sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37]) == 63\n    sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38]) == 63\n    sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,2"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_even_and_even_index([1, 2, 3, 4, 5]) == 6\nassert     sum_even_and_even_index([0, 1, 2, 3, 4]) == 4\nassert     sum_even_and_even_index([1, 2, 3, 4, 5, 6]) == 12\nassert     sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7]) == 19\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nsum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0\nassert \nsum_even_and_even_index([2, 4, 6, 8, 10]) == 8\nassert \nsum_even_and_even_index([2, 4, 6, 8, 10, 20, 30]) == 44\nassert \nsum_even_and_even_index([2, 4, 6, 8, 10, 20, 30, 40, 50]) == 60\nassert \nsum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 30\nassert     sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 50\nassert     sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 60\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_even_and_even_index([1,2,3,4,5,6,7]) == 6\nassert sum_even_and_even_index([9,8,7,6,5,4,3,2,1]) == 10\nassert sum_even_and_even_index([1,2,3,4,5,6,7,8,9]) == 16\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \neven_Power_Sum(1) == 0\nassert \neven_Power_Sum(5) == 70\nassert \neven_Power_Sum(4) == 26\nassert \neven_Power_Sum(3) == 10\nassert \neven_Power_Sum(2) == 8\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \neven_Power_Sum(1) == 6\neven_Power_Sum(2) == 10\neven_Power_Sum(3) == 30\neven_Power_Sum(4) == 90\neven_Power_Sum(5) == 522\neven_Power_Sum(6) == 864\neven_Power_Sum(7) == 1296\neven_Power_Sum(8) == 19344\neven_Power_Sum(9) == 362880\neven_Power_Sum(10) == 3628800\neven_Power_Sum(11) == 40229200\neven_Power_Sum(12) == 50390625\neven_Power_Sum(13) == 67928000\neven_Power_Sum(14) == 12834400\neven_Power_Sum(15) == 16998200\neven_Power_Sum(16) == 18451200\neven_Power_Sum(17) == 2076000\neven_Power_Sum(18) == 2415200\neven_Power_Sum(19) == 2879200\neven_Power_Sum(20) == 3628800\neven_Power_Sum(21) == 5172800\neven_Power_Sum(22) == 6356400\neven_Power_Sum(23) == 7307200\neven_Power_Sum(24) == 8413600\neven_Power_Sum(25) == 9153200\neven_Power_Sum(26) == 10422400\neven_Power_Sum(27) == 11119200\neven_Power_Sum(28) == 12012800\neven_Power_Sum(29) == 13328800\neven_Power_Sum(30) == 15328800\neven_Power_Sum(31) == 17052800\neven_Power_Sum(32) == 20806400\neven_Power_Sum(33) == 23113600\neven_Power_Sum(34) == 25292800\neven_Power_Sum(35) == 27397200\neven_Power_Sum(36) == 300460800\neven_Power_Sum(37) == 33331200\neven_Power_Sum(38) == 36598400\neven_Power_Sum(39) == 38877200\neven_Power_Sum(40) == 41390400\neven_Power_Sum(41) == 44552000\neven_Power_Sum(42) == 4790400\neven_Power_Sum(43) == 51262400\neven_Power_Sum(44) == 54418400\neven_Power_Sum(45) == 58052800\neven_Power_Sum(46) == 61201600\neven_Power_Sum(47) == 65446400\neven_Power_Sum(48) == 69078400\neven_Power_Sum(49) == 73079200\neven_Power_Sum(50) == 75986400\neven_Power_Sum(51) == 80208000\neven_Power_Sum(52) == 83793200\neven_Power_Sum(53) == 87314400\neven_Power_Sum(54) == 90599200\neven_Power_Sum(55) == 94588800\neven_Power_Sum(56) == 97177600\neven_Power_Sum(57) == 100774400\neven_Power_Sum(58) == 10415200\neven_Power_Sum(59) == 108638400\neven_Power_Sum(60) == 11171200\neven_Power_Sum(61) == 11465600\neven_Power_Sum(62) == 11718000\neven_Power_Sum(63) == 12065600\neven_Power_Sum(64) == 124939200\neven_Power_Sum(65) == 12814400\neven_Power_Sum(66) == 13193840\neven_Power_Sum(67) == 13604600\neven_Power_Sum(68) == 13919200\neven_Power_Sum(69) == 14302400\neven_Power_Sum(70) == 14712800\neven_Power_Sum(71) == 15114000\neven_Power_Sum(72) == 15517600\neven_Power_Sum(73) == 15929600\neven_Power_Sum(74) == 16344000\neven_Power_Sum(75) == 16761200\neven_Power_Sum(76) == 17098400\neven_Power_Sum(77) == 17436800\neven_Power_Sum(78) == 17861800\neven_Power_Sum(79) == 18216000\neven_Power_Sum(80) == 18642400\neven_Power_Sum(81) == 18953920\neven_Power_Sum(82) == 19265200\neven_Power_Sum(83) == 19730400\neven_Power_Sum(84) == 20013600\neven_Power_Sum(85) == 20491200\neven_Power_Sum(86) == 20902400\neven_Power_Sum(87) == 21280000\neven_Power_Sum(88) == 21766400\neven_Power_Sum(89) == 22188800\neven_Power_Sum(90) == 22517200\neven_Power_Sum(91) == 22856000\neven_Power_Sum(92) == 23193600\neven_Power_Sum(93) == 23644800\neven_Power_Sum(94) == 23907200\neven_Power_Sum(95) == 24331200\neven_Power_Sum(96) == 24771200\neven_Power_Sum(97) == 25158400\neven_Power_Sum(98) == 25542720\neven_Power_Sum(99) == 25919200\neven_Power_Sum(100) == 26339200\neven_Power_Sum(101) == 26776400\neven_Power_Sum(102) == 27209600\neven_Power_Sum(103) == 27557200\neven_Power_Sum(104) == 27961800\neven_Power_Sum(105) == 28405600\neven_Power_Sum(106) == 28733200\neven_Power_Sum(107) == 29206200\neven_Power_Sum(108) == 29679600\neven_Power_Sum(109) == 30037600\neven_Power_Sum(110) == 30521200\neven_Power_Sum(111) == 30924000\neven_Power_Sum(112) == 31334800\neven_Power_Sum(113) == 31739200\neven_Power_Sum(114) == 32145600\neven_Power_Sum(115) == 32530400\neven_Power_Sum(116) == 329208000\neven_Power_Sum(117) == 333113200\neven_Power_Sum(118) == 33671200\neven_Power_Sum(119) == 34044000\neven_Power_Sum(120) == 34423200\neven_Power_Sum(121) == 34809600\neven_Power_Sum(122) == 35373600\neven_Power_Sum(123) == 35908000\neven_Power_Sum(124) == 36557600\neven_Power_Sum(125) == 37105200\neven_Power_Sum(126) == 37702400\neven_Power_Sum(127) == 38271200\neven_Power_Sum(128) == 38861600\neven_Power_Sum(129) == 39484800\neven_Power_Sum(130) == 40059200\neven_Power_Sum(131) == 40674400\neven_Power_Sum(132) == 41428800\neven_Power_Sum(133) == 41904960\neven_Power_Sum(134) == 42440000\neven_Power_Sum(135) == 42813600\neven_Power_Sum(136) == 43379200\neven_Power_Sum(137) == 43799200\neven_Power_Sum(138) == 44541600\neven_Power_Sum(139) == 45272100\neven_Power_Sum(140) == 45925200\neven_Power_Sum(141) == 46504800\neven_Power_Sum(142) == 46945600\neven_Power_Sum(143) == 47454400\neven_Power_Sum(144) == 48640000\neven_Power_Sum(145) == 49161600\neven_Power_Sum(146) == 49637200\neven_Power_Sum(147) == 50381200\neven_Power_Sum(148) == 51609200\neven_Power_Sum"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     even_Power_Sum(10) == 23340\nassert     even_Power_Sum(1) == 1\nassert     even_Power_Sum(3) == 16\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \neven_Power_Sum(10) == 55, \"Wrong result\"\nprint(\"Exercise 2: OK\")\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef even_Power_Sum_Optimized(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    pass"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     even_Power_Sum(1) == 0\nassert     even_Power_Sum(2) == 1\nassert     even_Power_Sum(3) == 4\nassert     even_Power_Sum(4) == 9\nassert     even_Power_Sum(5) == 18\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     even_Power_Sum(3) == 8\nassert     even_Power_Sum(10) == 145\nassert     even_Power_Sum(20) == 2301\nassert     even_Power_Sum(50) == 779680150\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     even_Power_Sum(1) == 0, \"First even natural numbers with raised to the fifth power\"\nassert even_Power_Sum(5) == 1, \"Second even natural numbers with raised to the fifth power\"\nassert even_Power_Sum(10) == 0, \"Third even natural numbers with raised to the fifth power\"\nassert even_Power_Sum(20) == 7, \"Fourth even natural numbers with raised to the fifth power\"\nassert even_Power_Sum(100) == 4, \"Fifth even natural numbers with raised to the fifth power\"\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     even_Power_Sum(1) == 0, 'First test'\nassert     even_Power_Sum(2) == 0, 'Second test'\nassert     even_Power_Sum(3) == 0, 'Third test'\nassert     even_Power_Sum(4) == 0, 'Fourth test'\nassert     even_Power_Sum(5) == 0, 'Fifth test'\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     rear_extract([(2, 3, 4), (1, 2), ('abc',), ('a', 'b', 'c')]) == [4, 3, 'c', 1]\nassert     rear_extract([(2, 3, 4), (1, 2), ('abc',), ('a', 'b', 'c')]) == ['c', 1, 'a', 'b']\nassert     rear_extract([(2, 3, 4), (1, 2), ('abc',), ('a', 'b', 'c')]) == ['b', 'a', 'c', 1]\nassert     rear_extract([(2, 3, 4), (1, 2), ('abc',), ('a', 'b', 'c')]) == ['a', 'b', 'c', 1]\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef front_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the front element of each tuple.\n    '''\n    pass\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rear_extract([(\"x\", 2), (\"y\", 3), (\"z\", 4), (\"u\", 5)]) == [\"z\", \"u\", \"x\", \"y\"]\nassert rear_extract([(\"a\", 1), (\"b\", 2), (\"c\", 3), (\"d\", 4), (\"e\", 5)]) == [\"e\", \"d\", \"c\", \"b\", \"a\"]\nassert rear_extract([(\"a\", 1), (\"b\", 2), (\"c\", 3), (\"d\", 4), (\"e\", 5)]) == [\"e\", \"d\", \"c\", \"b\", \"a\"]\nassert rear_extract([(1, 2), (3, 4), (5, 6)]) == [(1, 2), (5, 6), (3, 4)]\nassert rear_extract([]) == []\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    rear_extract([(1, 2), (3, 4), (5, 6)]) == [(3, 4), (5, 6)]\n    rear_extract([('hello', 'hi'), ('hi', 'hello'), ('hello', 'hi')]) == ['hi', 'hello', 'hi']\n    rear_extract([(1, 2), (3, 4), (5, 6)]) == [(3, 4), (5, 6)]\n    rear_extract([('hello', 'hi'), ('hi', 'hello'), ('hello', 'hi')]) == ['hi', 'hello', 'hi']\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rear_extract([(1, 2), (3, 4), (5, 6)]) ==    [2, 4, 6]\nassert rear_extract([(1, 2), (3, 4), (5, 6, 7)]) ==    [2, 4, 6]\nassert rear_extract([('a', 1), ('b', 2), ('c', 3)]) ==    ['b', 2, 3]\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    rear_extract([(1,2),(3,4),(5,6)]) == [(3,4), (5,6), (1,2)]\n    rear_extract([(1,2,3),(4,5,6)]) == [(4,5,6), (1,2,3)]\n    rear_extract([(1,2),(3,4),(5,6,7)]) == [(5,6,7), (1,2), (3,4)]\n    rear_extract([(1,2),(3,4),(5,6,7)]) == [(5,6,7), (1,2), (3,4)]\n    rear_extract([(1,2),(3,4,5),(6,7,8)]) == [(6,7,8), (1,2), (3,4,5)]\n\n\n\ndef front_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the front element of each tuple.\n    '''\n    pass\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rear_extract([(1, 2), (3, 4), (5, 6)]) == [(1, 6), (3, 4), (5, 6)], 'Reversed list'\nassert     rear_extract([]) == [], 'Empty list'\nassert     rear_extract([(1,)]) == [(1,)], 'Single tuple'\nassert     rear_extract([('a',)]) == ['a'], 'Single string'\nassert     rear_extract([('a',)]) == ['a'], 'Single string'\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef add_tuples(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the sum of the tuple's tuples elements.\n    '''\n    pass\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert \nassert \n\ndef reorder_sentence(sentence):\n    '''\n    Write a function that takes in a sentence as a string and returns the sentence in the correct order.\n    '''\n    pass\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     substract_elements((2, 6, 9), (3, 3, 7)) == (4, 0, 2), \"Should substract 3 and 6 and give 4 and 0 and 2\"\nassert substract_elements((5, 2, 6), (4, 3, 1)) == (4, -1, 1), \"Should substract 5 and 2 and give 4 and -1 and 1\"\nprint(\"Test passed\")\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     substract_elements((1,2,3,4), (5,6,7,8)) == (-1,-2,-3,-4)\nassert substract_elements((1,2,3), (5,6,7)) == (-2,-2,-2)\nassert substract_elements((), ()) == ()\nassert substract_elements((0,), ()) == (0,)\nassert substract_elements((1,2,3,4), (5,6,7,8)) == (-1,-2,-3,-4)\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     substract_elements((1, 2, 3, 4, 5), (3, 4)) == (0, 0, 0, 0, 0)\nassert     substract_elements((1, 2, 3, 4, 5), (3, 5, 8, 9)) == (0, 5, 2, 1)\nassert     substract_elements((1, 2, 3, 4, 5), (3, 5, 8, 7)) == (0, 5, 0, 1)\nassert     substract_elements((1, 2, 3, 4, 5), (3, 5, 8, 9, 10)) == (0, 5, 2, 1, 0)\nassert     substract_elements((1, 2, 3, 4, 5), (3, 5, 8, 9, 10, 11)) == (0, 5, 2, 1, 0, 0)\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     substract_elements((1, 2, 3), (4, 5, 6)) == (1, 2, -3), 'Test 1 Failed'\nassert substract_elements((1, 2, 3), (4, 5, 6, 7)) == (1, 2, 3, -4, -5, -6, -7), 'Test 2 Failed'\nassert substract_elements((1, 2, 3, 4), (4, 5, 6, 7)) == (1, 2, 3, 4, -5, -6, -7), 'Test 3 Failed'\nassert substract_elements((1, 2, 3), (4, 5, 6, 7, 8)) == (1, 2, 3, -4, -5, -6, -7, -8), 'Test 4 Failed'\nassert substract_elements((1, 2, 3, 4), (4, 5, 6, 7, 8)) == (1, 2, 3, 4, -5, -6, -7, -8), 'Test 5 Failed'\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     substract_elements((1, 2), (3, 4)) == (1, -3)\nassert     substract_elements((0, 0), (0, 0)) == (0, 0)\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     substract_elements(('a', 'b', 'c', 'd'), ('e', 'f', 'g', 'h')) == \\\n        (('a', 'b', 'c', 'd'), ('e', 'f', 'g', 'h'))\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     substract_elements((1,2,3), (1,2,3)) == (0,0,0)\nassert     substract_elements((1,2,3), (2,1,2)) == (1,1,1)\nassert     substract_elements((1,2,3), (3,1,2)) == (0,0,2)\nassert     substract_elements((1,2,3), (2,2,1)) == (0,1,1)\nassert     substract_elements((1,2,3), (1,2,3)) == (0,0,0)\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     substract_elements((1, 2, 3), (4, 5, 6)) == (1, 2, -3)\nassert     substract_elements((1, 2, -3), (4, 5, 6)) == (1, 2, 5)\nassert     substract_elements((1, 2, -3), (-4, 5, 6)) == (1, 2, -6)\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     even_binomial_Coeff_Sum(0) == 0, f\"\\nTest Case Failed: even_binomial_Coeff_Sum(0)\\nReturned: {even_binomial_Coeff_Sum(0)}\\nExpected: {0}\"\nassert     even_binomial_Coeff_Sum(1) == 0, f\"\\nTest Case Failed: even_binomial_Coeff_Sum(1)\\nReturned: {even_binomial_Coeff_Sum(1)}\\nExpected: {0}\"\nassert     even_binomial_Coeff_Sum(2) == 1, f\"\\nTest Case Failed: even_binomial_Coeff_Sum(2)\\nReturned: {even_binomial_Coeff_Sum(2)}\\nExpected: {1}\"\nassert     even_binomial_Coeff_Sum(3) == 3, f\"\\nTest Case Failed: even_binomial_Coeff_Sum(3)\\nReturned: {even_binomial_Coeff_Sum(3)}\\nExpected: {3}\"\nassert     even_binomial_Coeff_Sum(4) == 10, f\"\\nTest Case Failed: even_binomial_Coeff_Sum(4)\\nReturned: {even_binomial_Coeff_Sum(4)}\\nExpected: {10}\"\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(even_binomial_Coeff_Sum(10))\n    print(even_binomial_Coeff_Sum(5))\n    print(even_binomial_Coeff_Sum(3))\n    print(even_binomial_Coeff_Sum(1))"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     even_binomial_Coeff_Sum(1)==0 \nassert     even_binomial_Coeff_Sum(2)==1 \nassert     even_binomial_Coeff_Sum(3)==1 \nassert     even_binomial_Coeff_Sum(4)==2 \nassert     even_binomial_Coeff_Sum(10)==20 \n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     even_binomial_Coeff_Sum(2) == 4\nassert     even_binomial_Coeff_Sum(3) == 6\nassert     even_binomial_Coeff_Sum(4) == 14\nassert     even_binomial_Coeff_Sum(10) == 4150\nassert     even_binomial_Coeff_Sum(12) == 4685\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     even_binomial_Coeff_Sum(0) == 0\nassert     even_binomial_Coeff_Sum(1) == 1\nassert     even_binomial_Coeff_Sum(2) == 5\nassert     even_binomial_Coeff_Sum(3) == 8\nassert     even_binomial_Coeff_Sum(4) == 10\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \neven_binomial_Coeff_Sum(0) == 0 \nassert even_binomial_Coeff_Sum(1) == 0 \nassert even_binomial_Coeff_Sum(2) == 0 \nassert even_binomial_Coeff_Sum(3) == 0 \nassert even_binomial_Coeff_Sum(4) == 0 \n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \neven_binomial_Coeff_Sum(5) == 5\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     even_binomial_Coeff_Sum(4) == 6\nassert     even_binomial_Coeff_Sum(10) == 55\nassert     even_binomial_Coeff_Sum(0) == 0\nassert     even_binomial_Coeff_Sum(1) == 0\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # test your function\n    for n in range(1,11):\n        print(n,\":\",even_binomial_Coeff_Sum(n))\n\n\n'''\nReturn the sum of the even indexed binomial coefficients for the given number.\n\nExample:\n\nFor n = 5, we have:\n1 = 1\n2 = 3\n3 = 4\n4 = 3\n5 = 7\nThe binomial coefficients for the even indexed terms of n = 5 are:\n1 = 1\n2 = 3\n3 = 4\n4 = 3\n5 = 7\nsum = 3 + 4 + 3 + 4 + 7 = 12\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \neven_binomial_Coeff_Sum(1) == 1\nassert even_binomial_Coeff_Sum(2) == 2\nassert even_binomial_Coeff_Sum(3) == 8\nassert even_binomial_Coeff_Sum(4) == 20\nassert even_binomial_Coeff_Sum(5) == 40\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     volume_cylinder(2,2) == 2\nassert volume_cylinder(1,1) == 1\nassert volume_cylinder(0,2) == 0\nassert volume_cylinder(2,0) == 0\n\n\nimport math\ndef volume_pyramid(l,b):\n    '''\n    Write a function that takes in the length and height of a pyramid and returns the volume.\n    '''\n    pass\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     volume_cylinder(1,2) == 2.57142857142857\nassert     volume_cylinder(10,5) == 78.5\nassert     volume_cylinder(3,4) == 0\n\nprint('Congratulations! Your volume_cylinder function is correct.')\n\nprint()\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef cylinder(radius, height):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the length and the area of the cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     volume_cylinder(r=1.5,h=1) == 2.56\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     volume_cylinder(5,3) == 78.5, \"Wrong answer\"\nassert     volume_cylinder(1,5) == 4.18, \"Wrong answer\"\nassert     volume_cylinder(10,5) == 170.1, \"Wrong answer\"\n\ndef volume_sphere(r):\n    '''\n    Write a function that takes in the radius of a sphere and returns the volume.\n    '''\n    pass\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     volume_cylinder(10,20) == 80\nassert     volume_cylinder(0.5,2) == 0.14\nassert     volume_cylinder(10,0) == 0\nassert     volume_cylinder(1.01,2) == 0.14\nassert     volume_cylinder(1.0,2) == 0.14"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     volume_cylinder(2,1)==4, \"Incorrect volume\"\nassert     volume_cylinder(1,2)==2, \"Incorrect volume\"\nassert     volume_cylinder(2.1,2)==4.1, \"Incorrect volume\"\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nvolume_cylinder(r = 5, h = 6) == 8\nvolume_cylinder(r = -1, h = 6) == \"Wrong input\"\nvolume_cylinder(r = 0, h = 6) == \"Wrong input\"\nvolume_cylinder(r = 6, h = -1) == \"Wrong input\"\nvolume_cylinder(r = 6, h = 0) == \"Wrong input\"\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint(volume_cylinder(2,4))\n\n\ndef volume_cone(r,h):\n    '''\n    Write a function that takes in the radius and height of a cone and returns the the volume.\n    '''\n    pass\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     volume_cylinder(3,4) == math.pi * math.pow(3,2) * 4\nassert     volume_cylinder(5,4) == math.pi * math.pow(5,2) * 4\nassert     volume_cylinder(5,5) == math.pi * math.pow(5,2) * 5\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     dict_filter({1:0,2:2,3:4},1) == {1:0,3:4}, 'failed on {1:0,2:2,3:4} with 1'\nassert     dict_filter({1:0,2:2,3:4},3) == {3:4}, 'failed on {1:0,2:2,3:4} with 3'\nassert     dict_filter({1:0,2:2,3:4},0) == {1:0,2:2,3:4}, 'failed on {1:0,2:2,3:4} with 0'\nassert     dict_filter({1:0,2:2,3:4},5) == {1:0,3:4}, 'failed on {1:0,2:2,3:4} with 5'\nassert     dict_filter({1:0,2:2,3:4},2) == {2:2,3:4}, 'failed on {1:0,2:2,3:4} with 2'\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     dict_filter({'m': 10, 'n': 0, 'o': 15}, 0) == {'m': 10, 'n': 0, 'o': 15}, 'incorrect'\nassert     dict_filter({'m': 10, 'n': 5, 'o': 15}, 5) == {'m': 10, 'n': 5, 'o': 15}, 'incorrect'\nassert     dict_filter({'m': 10, 'n': 5, 'o': 15}, 10) == {'m': 10, 'n': 5, 'o': 15}, 'incorrect'\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     dict_filter({'a':1,'b':2},1) == {'b':2}\nassert dict_filter({'a':1,'b':2},2) == {'a':1}\nassert dict_filter({'a':1,'b':2},3) == {}\nassert dict_filter({'a':1,'b':2,'c':3},1) == {'b':2}\nassert dict_filter({'a':1,'b':2,'c':3},2) == {'a':1}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     dict_filter({1:1,2:4,3:9},2) == {2:4}\nassert     dict_filter({1:1,2:4,3:9},1) == {1:1}\nassert     dict_filter({1:1,2:4,3:9},3) == {3:9}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     dict_filter({1:10,2:9,3:8,4:7,5:6,6:5,7:4,8:3,9:2,10:1},7) == {10:1}\nassert     dict_filter({1:10,2:9,3:8,4:7,5:6,6:5,7:4,8:3,9:2,10:1},3) == {3:4,8:5}\nassert     dict_filter({1:10,2:9,3:8,4:7,5:6,6:5,7:4,8:3,9:2,10:1},4) == {4:7}\nassert     dict_filter({1:10,2:9,3:8,4:7,5:6,6:5,7:4,8:3,9:2,10:1},3) == {3:4,8:5}\nassert     dict_filter({1:10,2:9,3:8,4:7,5:6,6:5,7:4,8:3,9:2,10:1},3) == {3:4,8:5}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     dict_filter({\"Name\":\"Sanjay\",\"Age\":23,\"Salary\":345.234},23)=={\"Name\":\"Sanjay\",\"Age\":23,\"Salary\":345.234}, \\\n    \"dict_filter failed\"\nassert     dict_filter({\"Name\":\"Sanjay\",\"Age\":23,\"Salary\":345.234},0)=={\"Name\":\"Sanjay\",\"Age\":23,\"Salary\":345.234}, \\\n    \"dict_filter failed\"\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     dict_filter({'a':1,'b':2},1) == {'a':1,'b':2}\nassert     dict_filter({'a':1,'b':2},2) == {'b':2}\nassert     dict_filter({'a':1,'b':2},3) == {}\nassert     dict_filter({'a':1,'b':2},4) == {}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     dict_filter({'a': 1, 'b': 2, 'c': 3}, 2) == {'b': 2, 'c': 3}, 'incorrect'\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3}, 1) == {'a': 1, 'b': 2, 'c': 3}, 'incorrect'\nassert     dict_filter({}, 1) == {}, 'incorrect'\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3}, 4) == {'a': 1, 'c': 3}, 'incorrect'\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3}, -4) == {'a': 1, 'c': 3}, 'incorrect'\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef dict_filter2(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    # if there are no values greater than n, just return the original dictionary\n    if n > 0:\n        return dict\n    # else, just return the empty dictionary\n    else:\n        return {}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     dict_filter({'a': 1, 'b': 1, 'c': 3}, 2) == {'a': 1, 'b': 1}, 'dict_filter({\"a\": 1, \"b\": 1, \"c\": 3}, 2) should return {'a': 1, 'b': 1}'\nassert dict_filter({'a': 1, 'b': 1, 'c': 3}, 0) == {'a': 1, 'b': 1}, 'dict_filter({\"a\": 1, \"b\": 1, \"c\": 3}, 0) should return {'a': 1, 'b': 1}'\nassert dict_filter({'a': 1, 'b': 1, 'c': 3}, 1) == {'b': 1}, 'dict_filter({\"a\": 1, \"b\": 1, \"c\": 3}, 1) should return {'b': 1}'\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_first_elements([1,2,3]) == 1, \"1 should be counted as 1\"\nassert     count_first_elements((1,2,3)) == 1, \"1 should be counted as 1\"\nassert     count_first_elements((1,2,3,4)) == 3, \"3 should be counted as 3\"\nassert     count_first_elements((1,2,3,4,5,6,7)) == 6, \"6 should be counted as 6\"\nassert     count_first_elements((1,2,3,4,5,6,7,8,9,10)) == 9, \"9 should be counted as 9\"\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_first_elements((1,2,3,2,1)) == 3\nassert     count_first_elements((1,1,1,1)) == 4\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_first_elements(('a', 'a', 'a')) == 0, \"return 0 if there is no first element\"\nassert     count_first_elements(('a', 'a', 'a', 'a')) == 3, \"return 3 if there is only one first element\"\nassert     count_first_elements(('a', 'b', 'c', 'a')) == 2, \"return 2 if there are two first elements\"\nassert     count_first_elements(('a', 'b', 'c', 'a', 'a', 'b')) == 2, \"return 2 if there are two first elements\"\nassert     count_first_elements(('a', 'a', 'b', 'c')) == 0, \"return 0 if there are no first elements\"\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    count_first_elements((1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3)) == 4\n    count_first_elements((1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4)) == 4\n    count_first_elements((0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1)) == 5\n    count_first_elements((0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1)) == 5\n    count_first_elements((0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1)) == 5\n    count_first_elements((0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1)) == 5\n    count_first_elements((0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1)) == 5\n\n'''\nQ16: \nYou have to write a function which takes a path of a folder(folder name) and makes a new folder named 'processed' \ninside it. After executing this function, a csv file will be created inside the 'processed' folder named as \n'filename.csv' and all the images inside the 'processed' folder will be renamed so that their names will be \nconsistent with the csv file. \n'''"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_first_elements((6, 0, 1, 3, 4, 0, 7)) == 1\nassert     count_first_elements((2, 0, 1, 2, 1, 2, 1, 1, 3, 1, 1, 1, 1, 1, 0, 2, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return len(test_tup)\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_first_elements((\"John\", \"Joe\")) == 0, \"should return 0\"\nassert count_first_elements((\"John\", \"John\")) == 1, \"should return 1\"\nassert count_first_elements((\"John\", \"Joe\", \"John\")) == 2, \"should return 2\"\n\ndef count_first_elements_with_method_1(tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(tup)-1):\n        if tup[i]!= tup[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_first_elements((1, 2, 4, 4, 3, 2, 1)) == 3, 'Wrong output'\nassert count_first_elements((1, 2, 4, 4, 3, 2, 1)) == 2, 'Wrong output'\nassert count_first_elements((1, 2, 4, 4, 3, 2, 1)) == 0, 'Wrong output'\nassert count_first_elements((1, 2, 4, 4, 3, 2, 1, 3, 2, 3, 4, 4, 3)) == 1, 'Wrong output'\nassert count_first_elements((1, 2, 4, 4, 3, 2, 1, 3, 2, 3, 4, 4, 3)) == 0, 'Wrong output'\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_first_elements((0,1,1,2,2,3,3,4,4)) == 3, 'Test Case 1 Failed'\nassert     count_first_elements((0,1,2,2,3,3,4,4)) == 3, 'Test Case 2 Failed'\nassert     count_first_elements((0,1,2,3,4,5,6,7,8,9)) == 5, 'Test Case 3 Failed'\nassert     count_first_elements((0,1,2,2,3,3,4,4,5,5)) == 2, 'Test Case 4 Failed'\n\n'''\nYou are given a non-empty string s and an integer k.\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_first_elements((0, 1, 2, 3, 4, 4, 4, 5, 3, 2, 1, 2)) == 3, 'count_first_elements is not correct'\n\ndef count_last_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs after the tuple element in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_num_decagonal(1) == 1\nassert     is_num_decagonal(2) == 3\nassert     is_num_decagonal(3) == 4\nassert     is_num_decagonal(4) == 5\nassert     is_num_decagonal(5) == 6\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef find_decagonal_number(n): \n    '''\n    Find the nth decagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef find_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef is_num_decagonal_1(n):\n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert \nassert \nassert \nassert is_num_decagonal(1) == 1\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert is_num_decagonal(1) == 1\nassert is_num_decagonal(2) == 10\nassert is_num_decagonal(3) == 121\nassert is_num_decagonal(4) == 1409\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef is_num_pallindrom(n):\n    '''\n    Write a function to find the nth pallindrom number.\n    '''\n    pass\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert is_num_decagonal(1) == 1\nassert is_num_decagonal(2) == 3\nassert is_num_decagonal(3) == 6\nassert is_num_decagonal(4) == 10\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n\n'''\n    Step 2: Write a function that takes in an array and element and returns a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \n    Write a function that takes in an array and element and returns a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \n    Write a function that takes in an array and element and returns a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \n    Write a function that takes in an array and element and returns a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \n    Write a function that takes in an array and element and returns a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \n    Write a function that takes in an array and element and returns a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \n    Write a function that takes in an array and element and returns a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \n    Write a function that takes in an array and element and returns a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \n    Write a function that takes in an array and element and returns a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \n    Write a function that takes in an array and element and returns a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \n    Write a function that takes in an array and element and returns a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \n    Write a function that takes in an array and element and returns a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \n    Write a function that takes in an array and element and returns a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \n    Write a function that takes in an array and element and returns a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \n    Write a function that takes in an array and element and returns a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \n    Write a function that takes in an array and element and returns a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \n    Write a function that takes in an array and element and returns a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \n    Write a function that takes in an array and element and returns a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \n    Write a function that takes in an array and element and returns a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \n    Write a function that takes in an array and element and returns a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \n    Write a function that takes in an array and element and returns a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \n    Write a function that takes in an array and element and returns a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \n    Write a function that takes in an array and element and returns a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \n    Write a function that takes in an array and element and returns a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \n    Write a function that takes in an array and element and returns a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \n    Write a function that takes in an array and element and returns a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \n    Write a function that takes in an array and element and returns a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \n    Write a function that takes in an array and element and returns a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \n    Write a function that takes in an array and element and returns a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \n    Write a function that takes in an array and element and returns a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \n    Write a function that takes in an array and element and returns a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \n    Write a function that takes in an array and element and returns a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \n    Write a function that takes in an array and element and returns a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \n    Write a function that takes in an array and element and returns a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \n    Write a function that takes in an array and element and returns a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \n    Write a function that takes in an array and element and returns a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \n    Write a function that takes in an array and element and returns a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \n    Write a function that takes in an array and element and returns a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \n    Write a function that takes in an array and element and returns a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \n    Write a function that takes in an array and element and returns a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \n    Write a function that takes in an array and element and returns a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \n    Write a function that takes in an array and element and returns a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \n    Write a function that takes in an array and element and returns a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    \n    Write a function that takes in an array and element and returns a boolean that indicates if the element is in the array an"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sequential_search([1, 2, 3, 4, 5, 6], 1) == (True, 0)\nassert     sequential_search([1, 2, 3, 4, 5, 6], 6) == (True, 4)\nassert     sequential_search([1, 2, 3, 4, 5, 6], 7) == (False, -1)\nassert     sequential_search([], 1) == (False, -1)\nassert     sequential_search([], 5) == (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert (sequential_search([1, 3, 5, 7], 3) == (True, 2))\nassert (sequential_search([], 1) == (False, -1))\nassert (sequential_search([1, 3, 5, 7], 1) == (False, -1))\nassert (sequential_search([1, 3, 5, 7], 7) == (False, -1))\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sequential_search([1,2,3,4,5],2) == (True, 1)\nassert     sequential_search([1,2,3,4,5],3) == (True, 2)\nassert     sequential_search([1,2,3,4,5],1) == (True, 0)\nassert     sequential_search([1,2,3,4,5],5) == (True, 4)\nassert     sequential_search([1,2,3,4,5],100) == (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sequential_search(['apple', 'orange','mango'], 'apple') == (True, 0)\nassert     sequential_search(['apple', 'orange','mango'],'strawberry') == (False, -1)\nassert     sequential_search(['apple', 'orange','mango'], 'kiwi') == (False, -1)\nassert     sequential_search(['apple', 'orange','mango'], 'pineapple') == (False, -1)\nassert     sequential_search(['apple', 'orange','mango'], 'avocado') == (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sequential_search(['h','e','l','l','o','w','o','r','d'], 'h') == (True, 0)\nassert     sequential_search([],'s') == (False, -1)\nassert     sequential_search([], 'f') == (False, -1)\n\n'''\n2. Write a function that takes in an array and an integer and returns a tuple containing the index position of the largest element in the array and the array's length (how many elements the array has).\n'''\ndef largest_number(array):\n    '''\n    Write a function that takes in an array and an integer and returns a tuple containing the index position of the largest element in the array and the array's length (how many elements the array has).\n    '''\n    pass\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sequential_search([1, 2, 3], 1) == (True, 0)\nassert     sequential_search([1, 2, 3], 3) == (True, 2)\nassert     sequential_search([1, 2, 3], -1) == (False, -1)\nassert     sequential_search([], 1) == (False, -1)\nassert     sequential_search([], -1) == (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sequential_search(['apple', 'orange', 'pear', 'grape'], 'orange') == (True, 1)\nassert     sequential_search(['apple', 'orange', 'pear', 'grape'], 'banana') == (False, -1)\nassert     sequential_search(['apple', 'orange', 'pear', 'grape'], 'pineapple') == (False, -1)\nassert     sequential_search(['apple', 'orange', 'pear', 'grape'], 'apple') == (True, 0)\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     all_unique(['abc', 'xyz', 'aba', 'xyz', 'zaba']) == True, 'First all_unique'\nassert     all_unique(['abc', 'xyz', 'aba', 'xyz', 'zaba', 'aba']) == False, 'Second all_unique'\nassert     all_unique(['abc', 'xyz', 'aba', 'xyz', 'zaba']) == True, 'Third all_unique'\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     all_unique([1,2,2,3]) == True\nassert     all_unique([1,2,3]) == False\nassert     all_unique([1,2,2,3,4]) == True\nassert     all_unique([1,2,3,1,2,3]) == False\nassert     all_unique([1,2,2,3,3,4]) == True\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     all_unique([1, 2, 3, 4]) == False, 'Passed 1'\nassert     all_unique([1, 2, 3, 3]) == True, 'Passed 2'\nassert     all_unique([2, 2, 2, 2]) == True, 'Passed 3'\nassert     all_unique([2, 2, 1, 1]) == False, 'Passed 4'\nassert     all_unique([1, 2, 3, 1]) == False, 'Passed 5'\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     all_unique([1, 2, 3, 4, 5, 4]) == False, \"Should be False\"\nassert all_unique([1, 2, 3, 4, 5, 4, ]) == True, \"Should be True\"\nassert all_unique(['foo', 'bar', 'foo', 'foo']) == False, \"Should be False\"\nassert all_unique(['foo', 'foo', 'foo']) == True, \"Should be True\"\nassert all_unique(['foo']) == True, \"Should be True\"\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     all_unique([]) == True, 'All empty lists are unique'\nassert     all_unique([1]) == True, 'A single element list is unique'\nassert     all_unique([1,2]) == False, 'Two lists with same elements are not unique'\nassert     all_unique([1,2,3]) == True, 'Three elements are unique'\nassert     all_unique([1,1,2]) == False, 'Three lists with same elements are not unique'\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     all_unique([1,2,2,3,4,5,6,7,8,9]) == True, \\\n\"function didn't return True if it should.\"\nassert all_unique([1,2,2,3,3,4,4,4,5,5]) == False, \\\n\"function didn't return False if it should.\"\nassert all_unique([1,2,3,4,5,1,2,3,4,5]) == True, \\\n\"function didn't return True if it should.\"\nassert all_unique([1,2,3,4,5,2,3,4,5,6,7,8,9]) == True, \\\n\"function didn't return True if it should.\"\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     all_unique([1,2,3,4])==True,'should return true'\nassert     all_unique([1,1,2,3,4])==False,'should return false'\nassert     all_unique([1,2,3,4,5])==True,'should return true'\nassert     all_unique(['a','a','b','c','d','e','f','g'])==True,'should return true'\nassert     all_unique(['a','a','b','c','d','e','f','g','h'])==False,'should return false'\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    all_unique([1, 2, 2, 3]) == True\n    all_unique([2, 2, 3, 4]) == False\n    all_unique([\"a\", \"b\", \"a\"]) == True\n    all_unique([]) == True\n    all_unique(\"aj\") == False\n    all_unique([\"aj\", \"a\", \"j\"]) == False\n    all_unique([\"a\"]) == True\n    all_unique([]) == True\n    all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == True\n    all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     all_unique([1,1,2,3,4,4,5]) == True,'should return True'\nassert     all_unique([1,1,1,3,4,4,5]) == False,'should return False'\n\n\ndef partition(test_list,low,high):\n    '''\n    Write a python function to partition a given list into 2 lists such that all the elements in left list are smaller than the pivot and all the elements in right list are greater than or equal to the pivot.\n    '''\n    pass\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     all_unique([]) == True, \"1st case - Empty list\"\nassert     all_unique([1,2,3,4,5]) == True, \"2nd case - elements are unique\"\nassert     all_unique([1,2,3,1,4,5]) == False, \"3rd case - elements are not unique\"\nassert     all_unique([1,2,3,4,5,1]) == False, \"4th case - elements are not unique\"\nassert     all_unique([1,1,1,1,1,1,1]) == True, \"5th case - elements are unique\"\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sub_list([1,2,3,4],[1,2,3,4]) == None, 'Wrong result of sub_list([1,2,3,4],[1,2,3,4])'\nassert sub_list([1,2,3,4],[5,6]) == None, 'Wrong result of sub_list([1,2,3,4],[5,6])'\nassert sub_list([1,2,3,4],[4,5]) == None, 'Wrong result of sub_list([1,2,3,4],[4,5])'\nassert sub_list([1,2,3,4],[-1,0]) == None, 'Wrong result of sub_list([1,2,3,4],[-1,0])'\nassert sub_list([1,2,3,4],[-4,0]) == None, 'Wrong result of sub_list([1,2,3,4],[-4,0])'\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sub_list([1,2,3],[4,5,6]) == [-1,-2,-3], \"Should be [-1,-2,-3]\"\nassert     sub_list([1,2,3],[1,2,3]) == [0,0,0], \"Should be [0,0,0]\"\nassert     sub_list([1,2],[1,2,3]) == [-1,0,1], \"Should be [-1,0,1]\"\nassert     sub_list([1,2,3],[1,2]) == [1,-1,1], \"Should be [1,-1,1]\"\nassert     sub_list([1,2,3],[1,2,3,4]) == [-1,-1,-1,1], \"Should be [-1,-1,-1,1]\"\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sub_list([1, 2, 3], [2, 4, 6]) == [1, 1, 3]\nassert     sub_list([1, 2, 3], [1, 2, 2]) == [0, 0, 3]\nassert     sub_list([1, 2, 3], [2, 4, 5]) == [2, 0, 3]\nassert     sub_list([1, 2, 3], [1, 1, 3]) == [1, 2, 1]\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef main():\n    '''\n    Write a program that takes as input two lists of integers \n    and then prints the elements of the first list that are not in the second list. \n    The output is a list of integers. \n    '''\n    list1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    list2 = [5, 6, 8, 9]\n    print(sub_list(list1,list2))\n\nif __name__=='__main__':\n    main()\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert validate(123) == False\nassert validate(1353) == True\nassert validate(1234) == False\nassert validate(1234) == False\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef frequency(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    pass\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     validate(89) == True, \"89 is not less than itself.\"\nassert     validate(89) == False, \"89 is less than itself.\"\nassert     validate(89) == False, \"89 is not less than itself.\"\nassert     validate(111) == True, \"111 is not less than itself.\"\nassert     validate(111) == False, \"111 is less than itself.\"\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(validate(13))\nprint(validate(3))\nprint(validate(18))\nprint(validate(10))\nprint(validate(314))\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     validate(12345) == True\nassert     validate(1000) == True\nassert     validate(6) == False\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint(validate(65),'\\n')\nassert not validate(100),'\\n'\nassert validate(6570),'\\n'\nassert validate(12345678),'\\n'\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef addStrings(num1, num2): \n    '''\n    Write a python function takes in two non-negative integers and returns their sum as a non-negative integer.\n    '''\n    pass\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_element([1,2,3,4,5],1) == True, 'check_element(1,1)'\nassert     check_element([1,2,3,4,5],2) == True, 'check_element(2,2)'\nassert     check_element([1,2,3,4,5],5) == True, 'check_element(5,5)'\nassert     check_element([1,2,3,4,5],6) == False, 'check_element(6,6)'\nassert     check_element([1,2,3,4,5],4) == False, 'check_element(4,4)'\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_element(['x','y','z','z','x'], 'x') == True\nassert     check_element(['x','y','z','z','x'], 'y') == False\nassert     check_element(['x','y','z','z','x'], 'z') == False\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_element([1, 2, 3], 1) == True\nassert check_element([], 1) == False\nassert     check_element([], 1) == False\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint (\"check_element(['apple','banana','orange'], 'apple') \", check_element(['apple','banana','orange'], 'apple') )\nassert check_element(['apple','banana','orange'], 'orange') == True\nassert check_element(['apple','banana','orange'], 'banana') == True\nassert check_element(['apple','banana','orange'], 'orange') == True\nassert check_element(['apple','banana','orange'],'mango') == False\nprint ('check_element function passes all tests!')\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert check_element([1,2,3,4,5,6],4)==True, 'False'\nassert check_element([1,2,3,4,5,6,6],6)==True, 'False'\nassert check_element([1,2,3,4,5,6],3)==False, 'False'\nassert check_element([1,2,3,4,5,6],7)==False, 'False'\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_element(['A','B','C','D','E','F'], 'B') == True\nassert     check_element(['A','B','C','D','E','F'], 'E') == True\nassert     check_element(['A','B','C','D','E','F'], 'A') == True\nassert     check_element(['A','B','C','D','E','F'], 'C') == True\nassert     check_element(['A','B','C','D','E','F'], 'D') == True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_element([1,2,3,4,5],2)==True, \"There are items in the list that are not equal to the given element\"\nassert     check_element([1,2,3,4,5],3)==False, \"There are items in the list that are equal to the given element\"\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef add_to_list(list):\n    '''\n    Write a function that adds the last value to the end of a list.\n    '''\n    pass\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_match_two_three(\"aabbbbba\") == \"yes\", \"aabbbbba\"\nassert     text_match_two_three(\"abbbba\") == \"yes\", \"abbbba\"\nassert     text_match_two_three(\"bbbaabbbbb\") == \"yes\", \"bbbaabbbbb\"\nassert     text_match_two_three(\"bbbbbba\") == \"yes\", \"bbbbbba\"\nassert     text_match_two_three(\"baaabbababbbaa\") == \"yes\", \"baaabbababbbaa\"\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_two_three('ababababab') == True\nassert     text_match_two_three('ababab') == False\nassert     text_match_two_three('ab') == False\nassert     text_match_two_three('abab') == False\nassert     text_match_two_three('ababababab') == False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_match_two_three(\"aabc\") == True\nassert     text_match_two_three(\"abcb\") == True\nassert     text_match_two_three(\"aabc\") == False\nassert     text_match_two_three(\"aabcbb\") == False\nassert     text_match_two_three(\"bbbb\") == False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_match_two_three('ababaa') == True\nassert     text_match_two_three('abab') == False\nassert     text_match_two_three('aa') == False\nassert     text_match_two_three('') == False\nassert     text_match_two_three('ab') == False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_two_three('ababab') == True, 'Not True'\nassert     text_match_two_three('abab') == False, 'Not False'\nassert     text_match_two_three('ababc') == True, 'Not True'\nassert     text_match_two_three('ababcd') == False, 'Not False'\nassert     text_match_two_three('abacabc') == True, 'Not True'\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_two_three(\"ababababab\") == False, \"error text_match_two_three\"\nassert     text_match_two_three(\"aab\") == False, \"error text_match_two_three\"\nassert     text_match_two_three(\"aba\") == False, \"error text_match_two_three\"\nassert     text_match_two_three(\"ab\") == False, \"error text_match_two_three\"\nassert     text_match_two_three(\"a\") == False, \"error text_match_two_three\"\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_match_two_three(\"catcba\") == True, \"should return True\"\nassert     text_match_two_three(\"catabab\") == False, \"should return False\"\nassert     text_match_two_three(\"aaabbbbaaaabb\") == True, \"should return True\"\nassert     text_match_two_three(\"abccba\") == False, \"should return False\"\nassert     text_match_two_three(\"bbbbbb\") == False, \"should return False\"\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_match_two_three('aabaaab') == 'True', \"Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\"\nassert     text_match_two_three('aabaaab') == 'False', \"Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\"\nassert     text_match_two_three('aaaaaaab') == 'False', \"Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\"\nassert     text_match_two_three('abaaaaab') == 'False', \"Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\"\nassert     text_match_two_three('aaaaaaaabb') == 'True', \"Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\"\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_two_three('abcba') == True\nassert     text_match_two_three('abcbb') == False\nassert     text_match_two_three('abcbaa') == False\nassert     text_match_two_three('abcbbb') == True\nassert     text_match_two_three('abcab') == True\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_sub_array_sum_repeated([1,1,1,1,1,1], 5, 5) == 1\nassert     max_sub_array_sum_repeated([1,1,1,1,1,1,1], 5, 6) == 5\nassert     max_sub_array_sum_repeated([2,1,5,1,1,2], 3, 2) == 10\nassert     max_sub_array_sum_repeated([3,1,1,3,1], 1, 5) == 1\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_sub_array_sum_repeated([-2, 1, -3, 4, -1, 2, 1, -5, 4], 5, 2) == 6\nassert max_sub_array_sum_repeated([-2, 1, -3, 4, -1, 2, 1, -5, 4], 5, 3) == 8\nassert max_sub_array_sum_repeated([1, -2, 3, -2], 2, 2) == 4\nassert max_sub_array_sum_repeated([-2, -1, 1, 2, -1, -4, 3, -1, -2, 1, -5, 4], 3, 3) == 6\nassert max_sub_array_sum_repeated([1, -2, 3, -2], 1, 2) == 3\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_sub_array_sum_repeated([2, 1, 5, 1, 3, 2], 3, 2) == 9, 'Wrong max_sub_array_sum_repeated'\nassert     max_sub_array_sum_repeated([2, 1, 5, 1, 3, 2], 4, 3) == 12, 'Wrong max_sub_array_sum_repeated'\nassert     max_sub_array_sum_repeated([2, 1, 5, 1, 3, 2], 5, 4) == 15, 'Wrong max_sub_array_sum_repeated'\nassert     max_sub_array_sum_repeated([2, 1, 5, 1, 3, 2], 5, 5) == 18, 'Wrong max_sub_array_sum_repeated'\nassert     max_sub_array_sum_repeated([2, 1, 5, 1, 3, 2], 6, 5) == 21, 'Wrong max_sub_array_sum_repeated'\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_sub_array_sum_repeated([1, 4, 6, 10], 4, 2) == 20\nassert     max_sub_array_sum_repeated([1, 4, 6, 10], 1, 2) == 15\nassert     max_sub_array_sum_repeated([1, 4, 6, 10], 2, 2) == 10\nassert     max_sub_array_sum_repeated([1, 4, 6, 10], 3, 2) == 19\n\nprint(\"The max sum in the modified array is:\", max_sub_array_sum_repeated([1, 4, 6, 10], 4, 2))\nprint(\"The max sum in the modified array is:\", max_sub_array_sum_repeated([1, 4, 6, 10], 1, 2))\nprint(\"The max sum in the modified array is:\", max_sub_array_sum_repeated([1, 4, 6, 10], 2, 2))\nprint(\"The max sum in the modified array is:\", max_sub_array_sum_repeated([1, 4, 6, 10], 3, 2))\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == '__main__':\n    #TODO: modify the below code to pass all the test cases\n    a = [1, 2, 3, 4, 5, 5, 3, 2, 1]\n    k = 2\n    print(max_sub_array_sum_repeated(a, len(a), k))"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_sub_array_sum_repeated([1,1,3,4,7,1,1,1,1], 4, 3) == 6\nassert     max_sub_array_sum_repeated([1,2,3,2,2], 2, 3) == 4\nassert     max_sub_array_sum_repeated([3,4,6,5,9,1,2,3,4,5], 6, 3) == 15"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_sub_array_sum_repeated([2,1,-1], 2, 2) == 6, \"Should be 6\"\nassert     max_sub_array_sum_repeated([2,4,6,-3,2,3], 5, 3) == 4, \"Should be 4\"\nassert     max_sub_array_sum_repeated([3,2,5,1,3], 3, 2) == 10, \"Should be 10\"\nassert     max_sub_array_sum_repeated([2,2,3,4,5], 2, 2) == 8, \"Should be 8\"\nassert     max_sub_array_sum_repeated([1,2,3,4,5], 2, 2) == 12, \"Should be 12\"\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_sub_array_sum_repeated([3,5,-9,1,3,5,3,5,13], 6, 2) == 7\nassert max_sub_array_sum_repeated([3,2,-1], 2, 2) == -1\nassert max_sub_array_sum_repeated([3,1,3,3,4], 3, 2) == -1\nassert max_sub_array_sum_repeated([-1,0,0,0,0,0,1], 3, 2) == 1\nassert max_sub_array_sum_repeated([1,2,3,4,5], 1, 1) == 15\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_sub_array_sum_repeated([3, 5, -2, 8], 4, 2) == 11\nassert     max_sub_array_sum_repeated([1, 2, 3, 4, -1, -2], 3, 3) == 9\nassert     max_sub_array_sum_repeated([2, 1, 3, -4, -1, 2], 3, 3) == 9\nassert     max_sub_array_sum_repeated([1, 2, 3, 4, -5, -6], 3, 3) == -1\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef check_List_using_sum(n):\n    '''\n    Write a python function that takes a list of integers and returns True if the list contains a list that is sorted in increasing order and all the numbers are unique. Otherwise, return False.\n    '''\n    pass\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert square_Sum(3) == 14\nassert square_Sum(4) == 40\nassert square_Sum(5) == 385"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nsquare_Sum(10) == 5"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     square_Sum(3) == 1, \"square_Sum function does not return the correct value\"\nassert     square_Sum(2) == 4, \"square_Sum function does not return the correct value\"\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     square_Sum(3) == 9\nassert     square_Sum(4) == 14\nassert     square_Sum(5) == 29\nassert     square_Sum(6) == 58\nassert     square_Sum(7) == 82\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nn = 5\nassert square_Sum(n) == 0\n\n\nimport math\nfrom math import sqrt\nfrom math import pi\nfrom math import e\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     square_Sum(6) == 27,'square_Sum is not working'\nassert square_Sum(7) == 36,'square_Sum is not working'\n\ndef square_Sum1(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_length([[0],[1,2,3,4,5]]) ==     5\nassert     max_length([[0],[1,2,3,4,5,6,7]]) ==     7\nassert     max_length([[0,1,2,3,4,5,6,7,8,9,10]]) ==     10\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_length([[1, 2],\n                      [3, 4],\n                      [5, 6]]) == 2\nassert max_length([[1, 2],\n                      [3, 4],\n                      [5, 6],\n                      [7, 8],\n                      [9, 10]]) == 3\nassert max_length([[1, 2],\n                      [3, 4],\n                      [5, 6],\n                      [7, 8]]) == 2\nassert max_length([[1, 2],\n                      [3, 4],\n                      [5, 6]]) == 2\nassert max_length([[1],\n                      [2],\n                      [3]]) == 2\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_length([[1,2,3],[4,5,6,7]]) == 7\nassert     max_length([[1],[2],[3],[4],[5]]) == 5\nassert     max_length([[1,2,3],[4,5,6,7],[1,2,3]]) == 7\nassert     max_length([[1],[2],[3],[4],[5],[6]]) == 6\nassert     max_length([[],[],[],[]]) == 0\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_length([[1,2,3],[4,5]]) == 3, \"Wrong answer\"\nassert     max_length([[1,2,3,4,5,6],[7,8,9]]) == 5, \"Wrong answer\"\nassert     max_length([[1,2,3],[4,5,6],[7]]) == 3, \"Wrong answer\"\nassert     max_length([[1,2],[3]]) == 2, \"Wrong answer\"\nassert     max_length([]) == 0, \"Wrong answer\"\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(\"All the tests are passed\""
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_length([[2,6,9],\n                      [7,8,9],\n                      [4,5,6],\n                      [1,4,7]]) == [9, 9, 9, 7]\nassert     max_length([[2,7,9],\n                      [7,8,9],\n                      [4,5,6],\n                      [1,4,7]]) == [9, 9, 9, 7]\nassert     max_length([[2,7,9],\n                      [7,8,9],\n                      [4,5,6],\n                      [1,4,7],\n                      [3,4,6]]) == [9, 9, 9, 7]\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint('Test case 1:')\nprint(max_length([[1,2], [3,4], [5,6]]))"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_no_of_ways(2, 1) == 1\nassert count_no_of_ways(3, 1) == 2\nassert count_no_of_ways(3, 2) == 3\nassert count_no_of_ways(6, 3) == 7\nassert count_no_of_ways(6, 4) == 13\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert count_no_of_ways(2, 2) == 4\nassert count_no_of_ways(3, 4) == 6\nassert count_no_of_ways(1, 5) == 0"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_no_of_ways(5, 2) == 4, \"Should be 4\"\nassert     count_no_of_ways(10, 3) == 10, \"Should be 10\"\nassert     count_no_of_ways(3, 5) == 0, \"Should be 0\"\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_no_of_ways(5, 2) == 5\nassert count_no_of_ways(4, 2) == 9\nassert count_no_of_ways(2, 2) == 5\nassert count_no_of_ways(1, 2) == 1\nassert count_no_of_ways(5, 3) == 19\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ncount_no_of_ways(2, 2) == 4\ncount_no_of_ways(3, 2) == 8\ncount_no_of_ways(4, 2) == 8\ncount_no_of_ways(3, 2) == 8\ncount_no_of_ways(5, 2) == 9\ncount_no_of_ways(6, 2) == 5\ncount_no_of_ways(3, 2) == 8\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n'''\nGiven a string, find the first and the last index of the substring \"ab\" in it.\n'''\ndef find_index(s): \n    '''\n    Given a string, find the first and the last index of the substring \"ab\" in it.\n    '''\n    pass\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint count_no_of_ways(5, 2) == 7\nprint count_no_of_ways(10, 4) == 1"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef check_sum_of_numbers(n, k): \n    '''\n    Write a function to calculate the sum of the numbers in a series of n elements.\n    '''\n    pass\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find(3,4) == 2\nassert     find(4,3) == 2\nassert     find(0,0) == 0\nassert     find(2147483647,2147483647) == 2147483647\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find(8,2) == 4, \"Test Case Failed\"\nassert     find(8,8) == 8, \"Test Case Failed\"\nassert     find(8,9) == 8, \"Test Case Failed\"\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find(10,6) == 2, \"find(10,6) == 2\"\nassert     find(13,10) == 3, \"find(13,10) == 3\"\nassert     find(22,8) == 3, \"find(22,8) == 3\"\nassert     find(10,1) == 10, \"find(10,1) == 10\"\nassert     find(2,1) == 2, \"find(2,1) == 2\"\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find(4,3) == 1\nassert    find(6,2) == 3\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find(2,4) == 0\nassert     find(2,3) == 0\nassert     find(3,4) == 1\nassert     find(3,3) == 1\nassert     find(4,4) == 1\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef find2(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    pass\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert find(5,5) == 0\nassert find(5,4) == 1\nassert find(9,9) == 0\nassert find(9,10) == 1\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert find(1,2) == 0\nassert find(2,2) == 0\nassert find(3,2) == 1\nassert find(4,2) == 2\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     otherside_rightangle(3,4) == 2, \"Wrong Answer\"\nassert     otherside_rightangle(3,4.5) == 2.5, \"Wrong Answer\"\nassert     otherside_rightangle(3,5) == 2.5, \"Wrong Answer\"\nassert     otherside_rightangle(3.2,4.2) == 2.4, \"Wrong Answer\"\nassert     otherside_rightangle(3.2,4.2) == 2.4, \"Wrong Answer\"\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     otherside_rightangle(3,4) == 1\nassert     otherside_rightangle(1,4) == 2\nassert     otherside_rightangle(2,3) == 4\nassert     otherside_rightangle(1.5,1.5) == math.sqrt(2)\nassert     otherside_rightangle(1.5,3.5) == math.sqrt(2)\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     otherside_rightangle(7,5) == 5\nassert     otherside_rightangle(10,5) == 5\nassert     otherside_rightangle(100,5) == 5\nassert     otherside_rightangle(0,5) == 5\nassert     otherside_rightangle(-1,5) == 5\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     otherside_rightangle(5, 6) == 5\nassert     otherside_rightangle(4, 6) == 5\nassert     otherside_rightangle(1, 6) == 5\nassert     otherside_rightangle(2, 6) == 5\nassert     otherside_rightangle(5, 7) == 5\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     otherside_rightangle(1,1) == 1\nassert otherside_rightangle(1.3,1) == 1.3\nassert otherside_rightangle(3,1.5) == 1.5\nassert otherside_rightangle(2.8,3) == 1.5\n\ndef find_shortest_side_of_triangle(w,h):\n    '''\n    Write a function to find the shortest side of a triangle with the given width and height.\n    '''\n    pass\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     otherside_rightangle(2,3)==3, \"w=2, h=3!= 3\"\nassert     otherside_rightangle(5,7)==5, \"w=5, h=7!= 5\"\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     otherside_rightangle(2,3) == 1.7320508075688772\nassert     otherside_rightangle(3,2) == 2.23606797749979\nassert     otherside_rightangle(5,2) == 2.5\nassert     otherside_rightangle(7,3) == 3.777777777777777\nassert     otherside_rightangle(8,2) == 4\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     otherside_rightangle(1,1) == 1\nassert     otherside_rightangle(5,3) == 5\nassert     otherside_rightangle(2,4) == 2\nassert     otherside_rightangle(1,2) == math.sqrt(2)\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(otherside_rightangle(5,3)) # 3.0\nprint(otherside_rightangle(1,4)) # 2.0\nprint(otherside_rightangle(7,5)) # 5.0\nprint(otherside_rightangle(3,5)) # 0.0\nprint(otherside_rightangle(1,1)) # 1.0\nprint(otherside_rightangle(0,0)) # 0.0\n\ndef otherside_rightangle_2(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    pass\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_val([1,2,3,4]) == 4\nassert     max_val([1,2,4,1,3,5]) == 5\nassert     max_val([]) == None\nassert     max_val([1,2,3,4,'a','c','b']) == 'c'\nassert     max_val([1,2,3,4,'a','c']) == 'c'\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_val([5, 6, 7, 8, 5, 5, 5, 5, 5, 5])    == 5\nassert     max_val([4, 5, 6, 7, 3, 3, 5, 5, 5])    == 7\nassert     max_val([2, 9, 4, 5, 6])    == 9\nassert     max_val([-9, -8, -7, -6, -5, -4, -3, -2, -1, 0])    == 0\nassert     max_val([])    == None\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_val([0,2,3,2]) == 3\nassert     max_val([-1,2,3,-2]) == 3\nassert     max_val([1,2,3,4,5]) == 5\nassert     max_val([2,4,6,-2,1]) == 6\nassert     max_val([0,0,0,0]) == 0\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_val([\"abbbb\", \"ddddd\", \"ccccccc\"]) == \"ccccccc\"\nassert     max_val([\"abbbb\", \"ddddd\", \"ccccccc\", \"dddddddd\"]) == \"ccccccc\"\nassert     max_val([\"abbbb\", \"ddddd\", \"ccccccc\", \"dddddddd\", \"dddddddd\"]) == \"ccccccc\"\nassert     max_val([\"abbbb\", \"ddddd\", \"ccccccc\", \"dddddddd\"]) == \"ccccccc\"\nassert     max_val([\"abbbb\", \"ddddd\", \"ccccccc\", \"dddddddd\", \"bbbbbb\"]) == \"ccccccc\"\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_val([1,2,3,4,5]) == 5\nassert     max_val([5,5,5,5,5]) == 5\nassert     max_val([5,5,5,5,5,5]) == 5\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_val([1, 2, 3]) == 3\nassert     max_val([]) == None\nassert     max_val([-4, -5, -2]) == -2\nassert     max_val([-1, 2, 4, 5, 6, -4]) == 6"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_val([1, 2, 3, 4, 5, 6]) == 6, \"Wrong!\"\nassert     max_val([1, 5, 6, 3, -1]) == 6, \"Wrong!\"\nassert     max_val([-1, 5, 6, 3, -1]) == 6, \"Wrong!\"\nassert     max_val([-1, 5, 6, 3, -1, -7]) == 6, \"Wrong!\"\nassert     max_val([2, 5, 4, 6, 3]) == 6, \"Wrong!\"\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_val([0,2,3,5,6,2,3,5]) == 6, 'Wrong Answer'\nassert     max_val([-1,2,3,5,6,2,3,5]) == 6, 'Wrong Answer'\nassert     max_val([True,2,3,5,6,2,3,5]) == 6, 'Wrong Answer'\nassert     max_val([[1,2,3],5,6,2,3,5]) == 5, 'Wrong Answer'\nassert     max_val([[1,2,3],5,6,2,3,5]) == 5, 'Wrong Answer'\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_div(4) == 2\nassert     sum_div(6) == 2\nassert     sum_div(8) == 4\n\n'''\nWrite a function to return the sum of all numbers divisible by 2 or 3.\n'''\n\ndef sum_div_2_3(n):\n    '''\n    Write a function to return the sum of all numbers divisible by 2 or 3.\n    '''\n    pass\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert sum_div(4) == 4\nassert sum_div(24) == 1"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_div(1)==0, 'Wrong'\nassert     sum_div(12)==15, 'Wrong'\nassert     sum_div(8)==5, 'Wrong'\nassert     sum_div(9)==6, 'Wrong'\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_div(0) == 0, 'Wrong result for sum_div(0)'\nassert     sum_div(1) == 1, 'Wrong result for sum_div(1)'\nassert     sum_div(2) == 2, 'Wrong result for sum_div(2)'\nassert     sum_div(12) == 14, 'Wrong result for sum_div(12)'\nassert     sum_div(23) == 21, 'Wrong result for sum_div(23)'\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert sum_div(1) == 1\nassert sum_div(12) == 3\nassert sum_div(123456) == 1 + 2 + 3 + 4 + 6 + 12 + 24 + 36 + 48 + 60 + 72 + 84 + 96 + 108 + 120\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_div(16) == 2\nassert     sum_div(7) == 5\nassert     sum_div(9) == 3\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_div(1) == 1\nassert     sum_div(2) == 1 + 2\nassert     sum_div(3) == 1 + 2 + 3\nassert     sum_div(4) == 1 + 2 + 3 + 4\nassert     sum_div(5) == 1 + 2 + 3 + 4 + 5\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_div(0) == 0\nassert     sum_div(6) == 1\nassert     sum_div(8) == 2\nassert     sum_div(5) == 5\nassert     sum_div(15) == 14\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_Inv_Count([]) == 0, \"Test 1: Pass\"\nassert     get_Inv_Count([1]) == 0, \"Test 2: Pass\"\nassert     get_Inv_Count([1, 1]) == 0, \"Test 3: Pass\"\nassert     get_Inv_Count([1, 2]) == 1, \"Test 4: Pass\"\nassert     get_Inv_Count([1, 2, 3]) == 2, \"Test 5: Pass\"\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_Inv_Count([1, 1, 3, 5, 1, 3, 5]) == 8, \"Wrong answer\"\nassert     get_Inv_Count([1, 1, 2, 3, 3, 2, 3]) == 5, \"Wrong answer\"\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_Inv_Count([2,5,3,8,1,5]) == 4\nassert     get_Inv_Count([4,4,4,3,4,4]) == 0\nassert     get_Inv_Count([5,4,3,2,1]) == 5\n\ndef get_Rev_Count(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    pass\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_Inv_Count([]) == 0, \"Empty list is an empty array\"\nassert     get_Inv_Count([1]) == 0, \"Single element array is inversions of 1\"\nassert     get_Inv_Count([1, 2]) == 1, \"Two elements array is inversions of 1\"\nassert     get_Inv_Count([1, 2, 3]) == 2, \"Three elements array is inversions of 1\"\nassert     get_Inv_Count([3, 1, 2]) == 2, \"Three elements array is inversions of 2\"\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    pass\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_Inv_Count([1, 3, 2, 5]) == 2, \"Wrong output\"\nassert     get_Inv_Count([1, 2, 3, 4]) == 0, \"Wrong output\"\nassert     get_Inv_Count([1, 2, 4, 3]) == 2, \"Wrong output\"\nassert     get_Inv_Count([3, 2, 1, 4, 5]) == 1, \"Wrong output\"\nassert     get_Inv_Count([3, 2, 4, 1, 5]) == 3, \"Wrong output\"\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_Inv_Count([4, 3, 1, 2]) == 1\nassert     get_Inv_Count([5, 4, 3, 2, 1]) == 1\nassert     get_Inv_Count([1, 5, 4, 3, 2]) == 0\nassert     get_Inv_Count([1, 5, 4, 3, 2, 5, 3, 2]) == 0\nassert     get_Inv_Count([1, 5, 4, 3, 2, 5, 3, 2, 2, 4, 5, 3, 2]) == 3\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == '__main__':\n    arr = []\n    n = int(input('Enter the length of array: '))\n    for i in range(n):\n        arr.append(int(input()))\n    print('Array: ', arr)\n    inv_count = get_Inv_Count(arr)\n    print('Inversions count: ', inv_count)\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     flatten_list([[[1,2,3],4],[[5],[6,7],[8]]]) == [1,2,3,4,5,6,7,8]\nassert     flatten_list([[1,[2,3]],[[4],[5,6]]]) == [1,2,3,4,5,6]\nassert     flatten_list([1,2,3]) == [1,2,3]\nassert     flatten_list([]) == []\nassert     flatten_list([[]]) == []\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     flatten_list([1, 2, 3]) == [1, 2, 3]\nassert     flatten_list([1, 2, [3, 4], 5]) == [1, 2, 3, 4, 5]\nassert     flatten_list([[[2]], 3, 4]) == [2, 3, 4]\nassert     flatten_list([[[[2]]], 3, 4]) == [2, 3, 4]\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     flatten_list([]) == []\nassert     flatten_list([1, 2]) == [1, 2]\nassert     flatten_list([1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     flatten_list([[1, 2], 3, 4]) == [1, 2, 3, 4]\nassert     flatten_list([[[1], 2], 3, 4]) == [1, 2, 3, 4]\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     flatten_list([1, 2, 3, 4]) == [1, 2, 3, 4]\nassert    flatten_list([1, 2, 3, [4, 5], 6]) == [1, 2, 3, 4, 5, 6]\nassert    flatten_list([[[[[[[[1, 2, 3], 4]]]]]]]) == [1, 2, 3, 4]"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     flatten_list([[[]]]) == [[]]\nassert     flatten_list([[[]]]) == [[]]\nassert     flatten_list([[[[]]]]) == [[]]\nassert     flatten_list([[[[]]]]) == [[]]\nassert     flatten_list([[[[[]]]]]) == [[]]\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     flatten_list([1,2,[3,4],[5,6]]) == [1,2,3,4,5,6]\nassert    flatten_list([]) == []\nassert    flatten_list([[]]) == []\nassert    flatten_list([[],[]]) == []\nassert    flatten_list([[],[],[]]) == []\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_aggregate(['a', 'b', 'c', 'd', 'e', 'f']) == 'd', 'It should calculate the max aggregegate as \"d\"'\nassert     max_aggregate(['f', 'c', 'a', 'b', 'b', 'd']) == 'f', 'It should calculate the max aggregegate as \"f\"'\nassert     max_aggregate(['a', 'd', 'f', 'c', 'e', 'b']) == 'd', 'It should calculate the max aggregegate as \"d\"'\nassert     max_aggregate(['c', 'b', 'a', 'f', 'd', 'e']) == 'c', 'It should calculate the max aggregegate as \"c\"'\nassert     max_aggregate(['b', 'e', 'f', 'd', 'a', 'c']) == 'b', 'It should calculate the max aggregegate as \"b\"'\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_aggregate([('a', 4), ('b', 5), ('c', -1), ('d', -1)]) == (4, 5)\nassert     max_aggregate([('a', -1), ('b', -1), ('c', -1), ('d', -1)]) == (-1, -1)\nassert     max_aggregate([('a', -1), ('b', -1), ('c', -1), ('d', -1)]) == (-1, -1)\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_aggregate([(1,3,4),(2,4,5)]) == (4,4,5), \"max_aggregate error.\"\nassert max_aggregate([(1,3,4),(2,4,5)]) == (4,4,5), \"max_aggregate error.\"\nassert max_aggregate([(1,3,4),(2,4,5)]) == (4,4,5), \"max_aggregate error.\"\nassert max_aggregate([(1,3,4),(2,4,5)]) == (4,4,5), \"max_aggregate error.\"\nassert max_aggregate([(1,3,4),(2,4,5)]) == (4,4,5), \"max_aggregate error.\"\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_aggregate([(3, 6), (1, 2), (1, 2), (2, 3)]) == 6\nassert     max_aggregate([(1, 2), (1, 2), (2, 3)]) == 2\nassert     max_aggregate([(2, 3), (1, 2), (1, 2), (2, 3)]) == 3\nassert     max_aggregate([(1, 2), (2, 3), (1, 2), (2, 3)]) == 4\nassert     max_aggregate([(2, 3), (3, 4), (1, 2), (1, 2), (1, 2), (2, 3)]) == 4\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_aggregate([(1, 2), (2, 2), (3, 4)]) == (4, 2)\nassert     max_aggregate([(1, 2), (2, 2), (3, 5), (5, 7)]) == (7, 5)\nassert     max_aggregate([(1, 2), (2, 3), (5, 1), (7, 5), (3, 1)]) == (7, 6)\nassert     max_aggregate([(1, 2), (2, 3), (5, 1), (7, 5), (3, 2)]) == (7, 6)\nassert     max_aggregate([(1, 2), (2, 3), (5, 1), (7, 5), (3, 3)]) == (7, 7)\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_aggregate([(1,2), (3,4), (5,6)]) == 6\nassert     max_aggregate([(1,2,3), (3,4,5), (5,6,7)]) == 7\nassert     max_aggregate([(1,2,3,4), (3,4,5,6), (5,6,7,8)]) == 8\nassert     max_aggregate([(1,2,3,4,5), (3,4,5,6,7), (5,6,7,8,9)]) == 9\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_aggregate([(0, 1), (2, 3), (4, 5), (6, 7)]) == 7\nassert     max_aggregate([(1, 2), (1, 3), (1, 4), (1, 5)]) == 5\nassert     max_aggregate([(1, 2), (3, 3), (1, 4), (5, 5), (2, 4), (4, 5)]) == 10\nassert     max_aggregate([(1, 2), (2, 3), (4, 5), (3, 4), (5, 6), (2, 4), (2, 4)]) == 8\nassert     max_aggregate([(1, 2), (2, 3), (4, 5), (3, 4), (5, 6), (2, 4), (3, 4)]) == 8\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_aggregate([(1, 2), (4, 8), (10, 0)]) == 10\nassert     max_aggregate([(1, 2), (4, 8), (10, 0), (0, 7)]) == 12\nassert     max_aggregate([(1, 1), (2, 1), (3, 1)]) == 1\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_aggregate([('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c')]) == ('a', 'b', 'c')\nassert max_aggregate([('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c')]) == ('a', 'b', 'c')\nassert max_aggregate([('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c')]) == ('a', 'b', 'c')\nassert max_aggregate([('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c')]) == ('a', 'b', 'c')\nassert max_aggregate([('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c'), ('a', 'b', 'c')]) == ('a', 'b', 'c')\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_aggregate([(1,2),(3,4)]) == 4\nassert     max_aggregate([(1,3),(2,4)]) == 3\nassert     max_aggregate([(1,1),(3,4)]) == 4\nassert     max_aggregate([(0,0),(2,3),(4,5),(6,7)]) == 7\nassert     max_aggregate([(0,0),(1,3),(2,5),(3,7)]) == 7\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1<<2*n):\n        if sum_binary(i) == sum_binary(2**n-1):\n            count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_binary_seq(1) == 2\nassert     count_binary_seq(2) == 5\nassert     count_binary_seq(3) == 11\nassert     count_binary_seq(4) == 26\nassert     count_binary_seq(5) == 32\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_binary_seq(1) == 4\nassert     count_binary_seq(2) == 10\nassert     count_binary_seq(3) == 12\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_binary_seq(1) == 1\nassert     count_binary_seq(2) == 1\nassert     count_binary_seq(3) == 2\nassert     count_binary_seq(4) == 5\nassert     count_binary_seq(5) == 11\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_binary_seq(0) == 1, \"Wrong answer\"\nassert     count_binary_seq(1) == 2, \"Wrong answer\"\nassert     count_binary_seq(2) == 4, \"Wrong answer\"\nassert     count_binary_seq(3) == 7, \"Wrong answer\"\nassert     count_binary_seq(4) == 13, \"Wrong answer\"\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_binary_seq(5) ==  6\nassert count_binary_seq(6) ==  23\n\n\n\nfrom functools import reduce"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    count_binary_seq(5) == 4\n    count_binary_seq(6) == 5\n    count_binary_seq(7) == 5\n    count_binary_seq(8) == 5\n    count_binary_seq(9) == 4\n    count_binary_seq(10) == 5"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_binary_seq(1)    ==     1\nassert     count_binary_seq(2)    ==     2\nassert     count_binary_seq(5)    ==     16\nassert     count_binary_seq(10)    ==     354\nassert     count_binary_seq(20)    ==     45\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     dict_depth({1:2, 3:4}) == 2\nassert     dict_depth({1:2, 3:{4:5, 6:7}, 8:9}) == 3\nassert     dict_depth({1:2, 3:{4:5, 6:7, 8:9}}) == 4\nassert     dict_depth({1:2, 3:{4:5, 6:7, 8:9, 11:12, 13:14, 15:16}}) == 5\nassert     dict_depth({1:2, 3:{4:5, 6:7, 8:9, 11:12, 13:14, 15:16, 17:18, 19:20, 21:22}}) == 6\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     dict_depth({}) == 0, \"Given empty dictionary\"\nassert     dict_depth({1: \"hello\", \"name\": 2}) == 2, \"Given dictionary with one key\"\nassert     dict_depth({1: \"hello\", 2: \"world\", 3: \"hello\", 4: \"world\", 5: \"hello\"}) == 3, \"Given dictionary with repeating keys\"\n\n'''\nWrite a function that accepts a dictionary as an argument and returns a dictionary with the\nvalues of the dictionary that are strings.\n'''\ndef only_strings(d):\n    '''\n    Write a function to accept a dictionary and return a dictionary with the\n    values that are strings.\n    '''\n    pass\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     dict_depth({}) == 0\nassert dict_depth({'A': {'B': {'C': {'D': {}}}}}) == 4\nassert dict_depth({'A': {'B': {'C': {'D': {'E': {}}}}}}) == 5\nassert dict_depth({'A': {'B': {'C': {'D': {'E': {'F': {}}}}}}}) == 6"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     dict_depth({\"a\":{\"b\":{\"c\":{\"d\":{}}}}, \"e\":{\"f\":{\"g\":{\"h\":{}}}}, \"i\":{\"j\":{\"k\":{\"l\":{}}}}}) == 3\nassert     dict_depth({\"a\":{\"b\":{\"c\":{\"d\":{}}}, \"e\":{\"f\":{\"g\":{\"h\":{}}}, \"i\":{\"j\":{\"k\":{\"l\":{}}}}}}}) == 4\nassert     dict_depth({\"a\":{\"b\":{\"c\":{\"d\":{}}}, \"e\":{\"f\":{\"g\":{\"h\":{}}}}}) == 2\nassert     dict_depth({\"a\":{\"b\":{\"c\":{}}}}) == 1\nassert     dict_depth({\"a\":{}}) == 0\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     dict_depth({0: {0: 0}, 1: {2: {3: 4}}} ) == 2\nassert     dict_depth({0: {0: 0}, 1: {2: {3: 4}}} ) == 2\nassert     dict_depth({0: {0: 0}, 1: {2: {3: 4}}} ) == 3\nassert     dict_depth({0: {0: 0}, 1: {2: {3: 4}}} ) == 2\nassert     dict_depth({0: {0: 0}, 1: {2: {3: 4}}} ) == 1\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     dict_depth({\n        0: {\n            0: {},\n            1: {},\n            2: {}\n        },\n        1: {\n            0: {},\n            1: {},\n            2: {}\n        },\n        2: {\n            0: {},\n            1: {},\n            2: {}\n        }\n    }) == 3\n\nprint(\"The Depth of the Dict is :\",dict_depth({\n        0: {\n            0: {},\n            1: {},\n            2: {}\n        },\n        1: {\n            0: {},\n            1: {},\n            2: {}\n        },\n        2: {\n            0: {},\n            1: {},\n            2: {}\n        }\n    }))"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert dict_depth({1:2,3:4}) == 1\nassert dict_depth({1:2,3:4,5:6}) == 2\nassert dict_depth({\"1\":{\"2\":1, \"3\":2}, \"2\":{\"3\":3}}) == 2\nassert dict_depth({\"1\":{\"2\":1, \"3\":2}, \"2\":{\"3\":3}, \"3\":None}) == 3\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     dict_depth({'name': 'Michal'}) == 1\nassert     dict_depth({'name': {'first': 'Michal', 'last': 'Morawiec'}}) == 2\nassert     dict_depth({}) == 0\nassert     dict_depth({'name': 'Michal', 'last': 'Morawiec'}) == 1\nassert     dict_depth({'name': {'first': 'Michal'}}) == 2\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     dict_depth({}) == 0\nassert     dict_depth({\"a\":2}) == 1\nassert     dict_depth({\"a\":{\"b\":2}}) == 2\nassert     dict_depth({\"a\": {\"b\": {\"c\": 4}}})) == 3\nassert     dict_depth({\"a\":{\"b\":{\"c\":4}}})) == 3\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    find_Element([[1,2,3,4],[0,4,2,3,5,6],[1,2,3,4,5,6],[0,2,3,4,5,6]],[[0,0],[2,0],[0,0],[1,0],[0,0],[0,0]],3,[3,1,0]) == (2,3)\n    find_Element([[1,2,3,4],[0,4,2,3,5,6],[1,2,3,4,5,6],[0,2,3,4,5,6]],[[0,0],[2,0],[0,0],[1,0],[0,0],[0,0]],3,[3,1,0]) == (2,3)\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Element([1,3,6,7,8,9],3,2,4) == 5, \"Wrong answer. Should be 5\"\nassert     find_Element([1,3,6,7,8,9],3,2,0) == 6, \"Wrong answer. Should be 6\"\nassert     find_Element([1,3,6,7,8,9],3,2,5) == 8, \"Wrong answer. Should be 8\"\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_Element([1,2,3,4],[[0,1],[1,2]],[0,0],[2]) == 3\n\ndef find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    pass\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Element([1,2,3,4,5,6],[[2,3],[3,4],[4,5],[4,5],[5,6]],[3,4],0) == 5\nassert     find_Element([1,2,3,4,5,6],[[2,3],[3,4],[4,5],[4,5],[5,6]],[3,4],1) == 4\nassert     find_Element([1,2,3,4,5,6],[[2,3],[3,4],[4,5],[4,5],[5,6]],[3,4],2) == 1\nassert     find_Element([1,2,3,4,5,6],[[2,3],[3,4],[4,5],[4,5],[5,6]],[3,4],3) == 2\nassert     find_Element([1,2,3,4,5,6],[[2,3],[3,4],[4,5],[4,5],[5,6]],[3,4],4) == 6\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Element([[1,2,3,4,5],[2,3,4,5,6],[3,4,5,6,7]],[[3,5,8,2,7],[2,3,4,5,6],[3,4,5,6,7]],[1,2,3],[0,2,3]) == None\nassert     find_Element([[1,2,3,4,5],[2,3,4,5,6],[3,4,5,6,7]],[[3,5,8,2,7],[2,3,4,5,6],[3,4,5,6,7]],[1,2,3],[0,2,3]) == 3\nassert     find_Element([[1,2,3,4,5],[2,3,4,5,6],[3,4,5,6,7]],[[3,5,8,2,7],[2,3,4,5,6],[3,4,5,6,7]],[1,2,3],[1,2,3]) == 5\nassert     find_Element([[1,2,3,4,5],[2,3,4,5,6],[3,4,5,6,7]],[[3,5,8,2,7],[2,3,4,5,6],[3,4,5,6,7]],[1,2,3],[4,6,7]) == 5\n\nprint('\\nThe test cases have passed...')\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Element([10,20,30,40,50,60],(0,3),0,0) == 50, 'find_Element(arr,ranges,rotations,index) is not working properly.'\nassert     find_Element([10,20,30,40,50,60],(0,3),1,0) == 20, 'find_Element(arr,ranges,rotations,index) is not working properly.'\nassert     find_Element([10,20,30,40,50,60],(0,3),2,0) == 30, 'find_Element(arr,ranges,rotations,index) is not working properly.'\nassert     find_Element([10,20,30,40,50,60],(0,3),0,1) == 50, 'find_Element(arr,ranges,rotations,index) is not working properly.'\nassert     find_Element([10,20,30,40,50,60],(0,3),0,2) == 50, 'find_Element(arr,ranges,rotations,index) is not working properly.'\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint(find_Element([-2,2,5,7,9],3,2,2))\nprint(find_Element([0,3,4,5,6],4,2,0))\nprint(find_Element([0,3,4,5,6],4,3,4))\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     start_withp(['pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon']) == ('pokemon', 'pokemon')\nassert     start_withp(['pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon']) == ('pokemon', 'pokemon')\nassert     start_withp(['pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon']) == ('pokemon', 'pokemon')\nassert     start_withp(['pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', 'pokemon', "
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     start_withp(['i', 'p', 'p', 'e', 'r', 'i', 'p', 'e', 'c', 'r','s', 't', 'e','s', 'p', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e','s', 't', 'e', 'r', 'i', 'p', 'e'"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     start_withp(['app', 'appl', 'appll', 'apple']) ==     [['apple','app']]\nassert     start_withp(['app', 'appl', 'appll', 'apple', 'appp']) ==     [['apple','app']]\nassert     start_withp(['app', 'appl', 'appll', 'apple', 'appp', 'appr', 'appp', 'appll', 'appll']) ==     [['apple','app'],['appll','appr']]\nassert     start_withp(['app', 'appl', 'appll', 'apple', 'appp', 'appr', 'appp', 'appll', 'appll', 'appll']) ==     [['apple','app'],['appll','appr']]"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert start_withp(['p', 'poo', 'apple', 'pear', 'pie', 'pig', 'piggy', 'pumpkin', 'pumpkin pie']) == ['p', 'poo', 'pig', 'piggy', 'pumpkin']\nassert start_withp(['plink', 'plinked', 'puppy', 'poop', 'poopie']) == []\nassert start_withp(['poo', 'apple', 'pear', 'pie', 'pig', 'piggy', 'pumpkin', 'pumpkin pie']) == ['poo', 'piggy', 'pumpkin']\nassert start_withp(['poo', 'apple', 'pear', 'pie', 'pig', 'piggy', 'pumpkin', 'pumpkin pie']) == ['poo', 'piggy', 'pumpkin']\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     start_withp([\"pythons\", \"pythons\", \"python\"]) == [\"python\", \"python\"]\nassert     start_withp([\"pythons\", \"pythons\", \"python\"]) == [\"pythons\", \"python\"]\nassert     start_withp([\"pythons\", \"pythons\", \"python\", \"python\", \"python\"]) == [\"python\", \"python\"]\n\ndef end_withs(words):\n    '''\n    Write a function to return a list of words from a list of words that end with letter's'.\n    '''\n    pass\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef is_word_key(word):\n    '''\n    Write a function to return True if word is the key of the word dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nstart_withp(['panda', 'pandas', 'panda', 'pandas']) == ['panda', 'pandas']\nassert start_withp(['panda', 'pandas', 'dog', 'dog']) == ['panda', 'pandas']\nassert start_withp(['panda', 'pandas', 'panda', 'pandas']) == ['panda', 'pandas']\n\ndef two_digit(num):\n    '''\n    Write a function to return the two digit number of a number.\n    '''\n    pass\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert start_withp([]) == [], \"Expected None\"\nassert start_withp(['a', 'b', 'c', 'd', 'e', 'f']) == ['b', 'c'], \"Not expected\"\nassert start_withp(['p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']) == ['q', 'r'], \"Not expected\"\nassert start_withp(['p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c']) == ['q', 'r','s'], \"Not expected\"\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     start_withp(['hello', 'helpp', 'help', 'helap', 'helppp', 'helpppp', 'helppppp', 'helpppppp', 'helppppppp', 'helpppppppp', 'helppppppppp', 'helpppppppppp', 'helppppppppppp', 'helpppppppppppp']) == ['helpp', 'helppp']\nassert     start_withp(['hello', 'helpp', 'help', 'hela', 'helpp', 'hela', 'helppp', 'helpp', 'helppp', 'helpp', 'helppp', 'helpp', 'helppp', 'helpp', 'helppp', 'helpp', 'helppp', 'helpp', 'helppp']) == ['helpp', 'helppp']\nassert     start_withp(['hello', 'helpp', 'help', 'hela', 'helpp', 'hela', 'helppp', 'helpp', 'helppp', 'helpp', 'helppp', 'helpp', 'helppp', 'helpp', 'helppp', 'helpp', 'helppp', 'helpp', 'helppp', 'helpp', 'helppp']) == ['helpp', 'helppp']\nassert     start_withp(['hello', 'helpp', 'help', 'hela', 'helpp', 'hela', 'helppp', 'helpp', 'helppp', 'helpp', 'helppp', 'helpp', 'helppp', 'helpp', 'helppp', 'helpp', 'helppp', 'helpp', 'helppp', 'helpp', 'helppp']) == ['helpp', 'helppp']\nassert     start_withp(['hello', 'helpp', 'help', 'hela', 'helpp', 'hela', 'helppp', 'helpp', 'helppp', 'helpp', 'helppp', 'helpp', 'helppp', 'helpp', 'helppp', 'helpp', 'helppp', 'helpp', 'helppp', 'helpp', 'helppp']) == ['helpp', 'helppp']\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     start_withp(['p','pale','panda','pandas']) ==     ('p','pandas')\nassert     start_withp(['apple','apply','applying']) ==     ('apple','applying')\nassert     start_withp(['applpple','applppling','applpppple']) ==     ('applpple','applpppple')\nassert     start_withp(['pple','p']) ==     ('p','p')\nassert     start_withp(['pple','ppple','pppl','p']) ==     ('p','p')\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\n\n\nimport collections\n\nclass Solution:\n    # @param A : tuple of integers\n    # @param B : integer\n    # @return an integer\n    def maxSubArray(self, A, n, k):\n        \n        res = float('-inf')\n        curr_sum = 0\n        for i in range(n):\n            curr_sum += A[i]\n            if i == k:\n                res = max(res, curr_sum)\n            elif curr_sum <= 0:\n                curr_sum = 0\n        return res\n        \n        \n        \n        '''\n        # for each row\n        res = float('-inf')\n        curr_sum = 0\n        for i in range(n):\n            curr_sum += A[i]\n            # print(res)\n            res = max(res, curr_sum)\n            curr_sum = max(0, curr_sum)\n        return res\n        '''\n    \n    # check the correctness of maxSubArray\n    def check_maxSubArray(self, A, n, k):\n        if k <= 0 or k >= n:\n            return 0\n        \n        if k == n:\n            return A[k]\n        \n        i = 0\n        curr_sum = 0\n        while i < k:\n            curr_sum += A[i]\n            i += 1\n        \n        while i < n:\n            curr_sum += A[i]\n            if curr_sum > 0:\n                i += 1\n                continue\n            else:\n                return 0\n            \n            \n        return curr_sum\n        \n        \n        '''\n        if k <= 0 or k >= n:\n            return 0\n        \n        if k == n:\n            return A[k]\n        \n        max_ending = 0\n        i = 0\n        while i < k:\n            max_ending += A[i]\n            i += 1\n        \n        max_starting = 0\n        i = k\n        while i < n:\n            max_starting += A[i]\n            if max_ending > 0:\n                i += 1\n                continue\n            else:\n                return 0\n            \n            \n        return max(max_starting, max_ending)\n        '''\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n       "
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef max_sum_increasing_subseq_brute_force(a, n, index, k):\n    '''\n    The brute force approach to the above approach is to try every combination of the indexes and compute the sum of increasing subsequence. The brute force approach is just for the sake of comparison.\n    '''\n    pass\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_sum_increasing_subseq([], 3, 1, 1) == 0\nassert     max_sum_increasing_subseq([1,2,3], 3, 1, 2) == 0\nassert     max_sum_increasing_subseq([2,3,4], 3, 1, 2) == 0\nassert     max_sum_increasing_subseq([1,2,3], 3, 1, 3) == 4\nassert     max_sum_increasing_subseq([1,2,3], 3, 1, 4) == 4\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef max_sum_increasing_subseq_naive(a, n):\n    '''\n    Uses a single array to find the maximum sum of increasing subsequence.\n    '''\n    max_sum_increasing_subseq = a[0]\n    for i in range(1, n):\n        curr_sum = 0\n        for j in range(i):\n            curr_sum += a[j]\n            if curr_sum > max_sum_increasing_subseq:\n                max_sum_increasing_subseq = curr_sum\n    return max_sum_increasing_subseq\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_sum_increasing_subseq([], 0, 0, 0) == (0, 0)\nassert     max_sum_increasing_subseq([], 0, 0, 1) == (0, 0)\nassert     max_sum_increasing_subseq([1], 1, 0, 0) == (1, 1)\nassert     max_sum_increasing_subseq([1, 2], 1, 0, 0) == (1, 2)\nassert     max_sum_increasing_subseq([1, 2, 3], 1, 0, 0) == (1, 3)\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     colon_tuplex((1,2,3),2,2) == (1,2)\nassert     colon_tuplex((1,2,3),2,3) == (1,2,3)\nassert     colon_tuplex((1,2,3,4,5),2,3) == (1,2,3)\nassert     colon_tuplex((1,2,3,4,5),3,4) == (1,2,3,4)\nassert     colon_tuplex((1,2,3,4,5),3,5) == (1,2,3,4)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ncolon_tuplex((1,2),1,3)\n\n'''\nGiven a list of tuples, you have to get a list of tuples with elements \nof every other element repeated.\n\nFor example, the result should be [(2, 3), (2, 4), (2, 5), (3, 4), (3, 5), (4, 5)]. \nThe order of tuples in the result doesn't have to be in any particular order.\n'''\n\ndef colon_tuple_generator(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     colon_tuplex([(1,2,3,4),(5,6,7,8),(9,10,11,12)],[3,4],2)==\\\n        ((1,2),(5,6),(9,10,11,12))\nassert     colon_tuplex([(1,2,3,4),(5,6,7,8),(9,10,11,12)],[3,4],4)==\\\n        ((1,2,3,4),(5,6,7,8))\nassert     colon_tuplex([(1,2,3,4),(5,6,7,8),(9,10,11,12)],[3,4],2)==\\\n        ((1,2),(5,6),(9,10,11,12))"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     colon_tuplex([2,3],[0,1],1) == (2,3)\nassert     colon_tuplex([1,3,2],[0,2,1],2) == (1,2,3)\n\n'''\nWrite a function to get a reversed tuple.\n\nFor example:\n    tuplex = (1,2,3)\n    reversed_tuple = (3,2,1)\n'''\ndef reversed_tuplex(tuplex):\n    '''\n    Write a function to get a reversed tuple.\n    '''\n    pass\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     colon_tuplex(('a',1,2,3),1,2) == 'a'\nassert     colon_tuplex(('a',1,2,3),1,3) == 'a'\nassert     colon_tuplex(('a',1,2,3),1,4) == 'a'\nassert     colon_tuplex(('a',1,2,3),2,1) == 'a'\nassert     colon_tuplex(('a',1,2,3),2,2) == ''\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef mb(dic,tuplex,i,j):\n    '''\n    Write a function to get the matrix block whose top left cell is (i,j).\n    '''\n    pass\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ndef test_1():\n    tuplex = (1,2,3,4,5,6,7)\n    m = 3\n    n = 7\n    actual_result = colon_tuplex(tuplex,m,n)\n    expected_result = ((1,2,3),(4,5,6),(7,))\n    assert actual_result == expected_result\n\ndef test_2():\n    tuplex = (1,2,3,4,5,6,7)\n    m = 1\n    n = 7\n    actual_result = colon_tuplex(tuplex,m,n)\n    expected_result = ((1,2,3,4,5,6,7),)\n    assert actual_result == expected_result\n\ndef test_3():\n    tuplex = (1,2,3,4,5,6,7)\n    m = 7\n    n = 3\n    actual_result = colon_tuplex(tuplex,m,n)\n    expected_result = ((1,2,3),(4,5,6),(7,))\n    "
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    #the tuple is not empty\n    assert (len(tuplex) > 0)\n    #the tuple is only composed of tuples\n    assert all(type(x) is tuple for x in tuplex)\n    assert all(len(x) == 2 for x in tuplex)\n    #the tuples must have the same size\n    assert all(x == m for x in map(len, tuplex))\n    "
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    colon_tuplex(('a','b','c'),1,3) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,1) == ('c:b:a',)\n    colon_tuplex(('a','b','c'),3,3) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),2,2) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),1,1) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),0,3) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,0) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,4) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,5) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,6) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,7) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,8) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,9) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,10) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,11) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,12) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,13) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,14) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,15) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,16) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,17) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,18) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,19) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,20) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,21) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,22) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,23) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,24) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,25) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,26) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,27) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,28) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,29) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,30) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,31) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,32) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,33) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,34) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,35) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,36) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,37) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,38) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,39) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,40) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,41) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,42) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,43) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,44) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,45) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,46) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,47) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,48) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,49) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,50) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,51) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,52) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,53) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,54) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,55) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,56) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,57) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,58) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,59) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,60) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,61) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,62) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,63) == ('a:b:c',)\n    colon_tuplex(('a','b','c'),3,64) == ('a:b:c',)\n    colon_tuplex(('a','b','c')"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     large_product([1,5,7,3,7],\n                        [2,5,2,6,2],\n                        3) == 27\n\n\n'''\nProblem 4:\nGiven a list of numbers, write a function that finds the number of divisors of each number in the list. \n'''\n\ndef num_divisors(nums):\n    '''\n    Write a function to find the specified number of largest divisors of each number in the list.\n    '''\n    pass\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    large_product([2,6,9], [1,3,5], 3) == [9,12,20]\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     large_product([1, 2, 3], [4, 5, 6], 2) ==     [120, 240], \"should be 120\"\nassert     large_product([10, 20, 5], [15, 25, 7], 2) ==     [1200, 2400], \"should be 1200\"\nassert     large_product([10, 20, 5], [15, 25, 7], 3) ==     [12600, 26400], \"should be 12600\"\nassert     large_product([10, 20, 5], [15, 25, 7], 4) ==     [12000, 26000], \"should be 12000\"\nassert     large_product([1, 2, 3], [4, 5, 6], 5) ==     [120, 240, 480], \"should be 120\"\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert large_product([3, 2, 1],\n                     [4, 5, 6],\n                     2) == [12, 60]\nassert large_product([1, 2, 3],\n                     [4, 5, 6],\n                     2) == [24, 60]\nassert large_product([4, 5, 6],\n                     [3, 2, 1],\n                     2) == [120, 360]\n\ndef main():\n    nums1 = [3, 2, 1]\n    nums2 = [4, 5, 6]\n    N = 2\n    print(large_product(nums1, nums2, N))\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     large_product([1, 2, 3, 4], [5, 6, 7, 8], 3) ==  [20, 30, 60] \nassert     large_product([3, 4], [1, 2], 2) ==  [12, 24] \n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     large_product([1,2,3], [4,5,6], 1) == 30\nassert     large_product([1,2,3], [4,5,6], 2) == 600\nassert     large_product([1,2,3], [4,5,6], 3) == 2100\nassert     large_product([1,2,3], [4,5,6], 4) == 2700\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     maximum(7,9) == 9\nassert maximum(9,7) == 9\nassert maximum(9,9) == 9\nassert maximum(9,5) == 9\nassert maximum(5,9) == 9\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     maximum(3,2) == 3, \"Wrong answer\"\nassert maximum(2,3) == 3, \"Wrong answer\"\nassert maximum(5,7) == 7, \"Wrong answer\"\nassert maximum(1,4) == 4, \"Wrong answer\"\nassert maximum(6,7) == 6, \"Wrong answer\"\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     maximum(3,2) == 3\nassert maximum(2,3) == 3\nassert maximum(2,2) == 2\nassert maximum(1,5) == 5\nassert maximum(-3,7) == 7\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     maximum(1,2) == 2\nassert     maximum(3,4) == 4\nassert     maximum(8,9) == 9\nassert     maximum(2,5) == 5\nassert     maximum(4,5) == 5\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     maximum(3,5) == 3\nassert maximum(7,8) == 8\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     maximum(2,1) == 2 \nassert     maximum(1,2) == 2\nassert     maximum(1,1) == 1 \nassert     maximum(2,2) == 2\nassert     maximum(-1,-2) == -1\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     maximum(1,2) == 1\nassert     maximum(3,4) == 4\nassert     maximum(1,0) == 1\nassert     maximum(-1,2) == 2\nassert     maximum(-1,0) == -1\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     maximum(10,20) == 20\nassert     maximum(10,-20) == 10\nassert     maximum(-10,-20) == -10\nassert     maximum(-10,20) == 20"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert maximum(2,1)==2, \"test failed\"\nassert maximum(5,8)==8, \"test failed\"\nassert maximum(5,9)==9, \"test failed\"\nassert maximum(5,-7)==5, \"test failed\"\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     string_to_tuple(\"I'm the man\") == \"I'm the man\", \"Not working\"\nassert string_to_tuple(\"I'm the girl\") == \"I'm the girl\", \"Not working\"\nassert string_to_tuple(\"I'm the boy\") == \"I'm the boy\", \"Not working\"\nassert string_to_tuple(\"I'm the girl boy\") == \"I'm the girl boy\", \"Not working\"\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     string_to_tuple('abcd') == ('a', 'b', 'c', 'd')\nassert     string_to_tuple('efgh') == ('e', 'f', 'g', 'h')\nassert     string_to_tuple('Hello') == ('H', 'e', 'l', 'l', 'o')\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     string_to_tuple('this is a test') == ('t', 'h', 'i','s','', 'a','s', 't', 'e', 'r','s', 'i', 'c', 'e')\nassert     string_to_tuple('coding blocks') == ('c', 'o', 'd', 'i', 'n', 'g', 'e', 'b', 'l', 'u', 'k', 'b', 'a', 'n','s')\nassert     string_to_tuple('is cool') == ('i','s', 'c', 'o', 'o', 'l')\nassert     string_to_tuple('is cool and quiet') == ('i','s', 'c', 'o', 'o', 'l', 'q')\nassert     string_to_tuple('is cool and quiet and excited') == ('i','s', 'c', 'o', 'o', 'l', 'q', 'e', 'x', 'i', 'c', 'e')\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     string_to_tuple('a') == ('a',)\nassert     string_to_tuple('ab') == ('a', 'b')\nassert     string_to_tuple('abcd') == ('a', 'b', 'c', 'd')\n\n\ndef list_to_tuple(lst):\n    '''\n    Write a function to convert a given list of strings to a tuple of characters.\n    '''\n    pass\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     string_to_tuple('abc') == ('a', 'b', 'c')\nassert     string_to_tuple('xyz') == ('x', 'y', 'z')\nassert     string_to_tuple('xyy') == ('x', 'y', 'y')\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     string_to_tuple('abcd') == ('a', 'b', 'c', 'd')\nassert     string_to_tuple('123') == ('1', '2', '3')\nassert     string_to_tuple('') == ()\n\n\ndef tuple_to_string(tuple1):\n    '''\n    Write a function to convert a given tuple of characters to a string.\n    '''\n    pass\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef tuple_to_string(tuple_):\n    '''\n    Write a function to convert a given tuple of characters to a string.\n    '''\n    pass\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(string_to_tuple(''))\nprint(string_to_tuple('hello'))\nprint(string_to_tuple('hello world'))\nprint(string_to_tuple('hello world, goodbye'))\n\ndef string_to_tuple2(str1):\n    '''\n    Write a function to convert a given string to a tuple of integers.\n    '''\n    pass\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef tuple_to_string(t1):\n    '''\n    Write a function to convert a given tuple to a string of characters.\n    '''\n    pass\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     string_to_tuple('I am a programmer') == ('I','', 'a','','m','', 'p', 'r', 'o', 'g', 'r', 'a','m')\nassert     string_to_tuple('Hello world') == ('H', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd')\nassert     string_to_tuple('This is a Python course for students') == ('T', 'h', 'i','s','', 'a', 'n','s','', 'p', 'y', 't', 'h', 'o','', 'n', 'i','s','', 'c', 'e', 'o','m', 'e')\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     set_left_most_unset_bit(4)==1\nassert     set_left_most_unset_bit(8)==1\nassert     set_left_most_unset_bit(64)==1\nassert     set_left_most_unset_bit(128)==0\nassert     set_left_most_unset_bit(10)==0\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n'''\nOutput:\n\nThe value to be set: 1\nThe left most unset bit is set\n'''"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     set_left_most_unset_bit(0b00001101) ==     0b00001100\nassert     set_left_most_unset_bit(0b00000011) ==     0b00000010\nassert     set_left_most_unset_bit(0b00001111) ==     0b00001101\nassert     set_left_most_unset_bit(0b11111111) ==     0b11111111\nassert     set_left_most_unset_bit(0b1111111111111111) == 0b1111111111111111\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     set_left_most_unset_bit(1) == 0 \nassert     set_left_most_unset_bit(0) == 1 \nassert     set_left_most_unset_bit(2147483648) == 1 \nassert     set_left_most_unset_bit(2147483647) == 1 \nassert     set_left_most_unset_bit(2147483647) == 0 \n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nset_left_most_unset_bit(8)\nset_left_most_unset_bit(0b10)\nset_left_most_unset_bit(0b10110010)\nset_left_most_unset_bit(0b00000111)\nset_left_most_unset_bit(0b00000000)\nset_left_most_unset_bit(0b11111)\nset_left_most_unset_bit(0b111111111)\nset_left_most_unset_bit(0b10000000)\nset_left_most_unset_bit(0b0000000000111111)\nset_left_most_unset_bit(0b100000011111)\nset_left_most_unset_bit(0b1111100001111)\nset_left_most_unset_bit(0b1111100001111111)\nset_left_most_unset_bit(0b111110000001111)\nset_left_most_unset_bit(0b1111110000001111)\nset_left_most_unset_bit(0b1111110000000000)\nset_left_most_unset_bit(0b0000000000000001)\nset_left_most_unset_bit(0b000000001000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b0000000001000000)\nset_left_most_unset_bit(0b000000000010000)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b0000000001000000)\nset_left_most_unset_bit(0b0000000010000000)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b0000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_unset_bit(0b000000000000001)\nset_left_most_u"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     volume_cone(1,1) == math.pi, \"volume_cone should be pi\"\nassert     volume_cone(1,0) == 1, \"volume_cone should be 1\"\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     volume_cone(3,4) == 24.0, 'Assertion error'\nassert     volume_cone(4,4) == 16.0, 'Assertion error'\nassert     volume_cone(3,3) == 12.0, 'Assertion error'\nassert     volume_cone(2,2) == 4.0, 'Assertion error'\nassert     volume_cone(1,1) == 1.0, 'Assertion error'\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     volume_cone(4,6)==5.265, 'Wrong volume.'\nassert     volume_cone(1,4)==1.2, 'Wrong volume.'\nassert     volume_cone(1.5,4)==2.6, 'Wrong volume.'\nassert     volume_cone(1,2)==1.0, 'Wrong volume.'\nassert     volume_cone(0,2)==0.0, 'Wrong volume.'\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     volume_cone(1,2) == math.pi*math.pow(1/2,2)*(math.pow(1,2)-1)*0.5\nassert     volume_cone(2,3) == math.pi*math.pow(2,2)*(math.pow(1,2)-1)*(math.pow(2,2)-1)*0.25\nassert     volume_cone(2,0) == math.pi*math.pow(2,2)*(math.pow(1,2)-1)\nassert     volume_cone(0,2) == math.pi*math.pow(0,2)*(math.pow(1,2)-1)\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert volume_cone(3,3) == math.pi*3**2*3/4\nassert volume_cone(1,3) == math.pi*1**2*3/4\nassert volume_cone(2,3) == math.pi*2**2*3/4\nassert volume_cone(3,3) == math.pi*3**2*3/4\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef main():\n    # Test 1\n    r = 5\n    h = 6\n    assert volume_cone(r,h) == 140.633\n    \n    # Test 2\n    r = 6\n    h = 6\n    assert volume_cone(r,h) == 140.633\n    \n    # Test 3\n    r = 8\n    h = 6\n    assert volume_cone(r,h) == 314.6829\n    \n    # Test 4\n    r = 10\n    h = 8\n    "
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     volume_cone(3,5) == 35.56\nassert     volume_cone(4,3) == 60.24\nassert     volume_cone(6,2) == 109.04\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     volume_cone(1,1) ==  1.5333333333333334\nassert     volume_cone(2,2) ==  1.5333333333333334\nassert     volume_cone(4,1) ==  2.6666666666666667\n\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint(volume_cone(2,3))\n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere with radius r.\n    '''\n    pass\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert volume_cone(1,2) == 2\nassert volume_cone(0.2,2) == 0.2**2*math.pi\nassert volume_cone(2,2) == 2*math.pi*2**2\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     highest_Power_of_2(1)    == 1, \"Input 1 should be 1\"\nassert     highest_Power_of_2(10)    == 1, \"Input 10 should be 1\"\nassert     highest_Power_of_2(16)    == 2, \"Input 16 should be 2\"\nassert     highest_Power_of_2(25)    == 2, \"Input 25 should be 2\"\nassert     highest_Power_of_2(36)    == 3, \"Input 36 should be 3\"\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     highest_Power_of_2(1)     == 1\nassert     highest_Power_of_2(10)     == 10\nassert     highest_Power_of_2(11)     == 11\nassert     highest_Power_of_2(15)     == 16\n\ndef fib(n):\n    '''\n    Write a python function to return the Fibonacci series up to the nth term.\n    '''\n    pass\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     highest_Power_of_2(6) == 2\nassert     highest_Power_of_2(50) == 10\nassert     highest_Power_of_2(1) == 1\nassert     highest_Power_of_2(3) == 3\nassert     highest_Power_of_2(4) == 4\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint('\\nTesting: highest_Power_of_2')\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nhighest_Power_of_2(16) == 2\nhighest_Power_of_2(10) == 1\nhighest_Power_of_2(7) == 2\nhighest_Power_of_2(4) == 4\nhighest_Power_of_2(15) == 15\nhighest_Power_of_2(32) == 16\nhighest_Power_of_2(31) == 16\nhighest_Power_of_2(0) == 0\nhighest_Power_of_2(1) == 1\nhighest_Power_of_2(35) == 4\nhighest_Power_of_2(22) == 2\nhighest_Power_of_2(15) == 15\nhighest_Power_of_2(20) == 8\nhighest_Power_of_2(15) == 15\nhighest_Power_of_2(7) == 7\nhighest_Power_of_2(0) == 0\nhighest_Power_of_2(5) == 1\nhighest_Power_of_2(12) == 8\nhighest_Power_of_2(21) == 8\nhighest_Power_of_2(16) == 16\nhighest_Power_of_2(31) == 2\nhighest_Power_of_2(63) == 2\nhighest_Power_of_2(127) == 16\nhighest_Power_of_2(255) == 16\nhighest_Power_of_2(255) == 16\nhighest_Power_of_2(10) == 1\nhighest_Power_of_2(1) == 1\nhighest_Power_of_2(5) == 1\nhighest_Power_of_2(8) == 1\nhighest_Power_of_2(1) == 1\nhighest_Power_of_2(16) == 16\nhighest_Power_of_2(8) == 8\nhighest_Power_of_2(127) == 16\nhighest_Power_of_2(255) == 16\nhighest_Power_of_2(31) == 2\nhighest_Power_of_2(7) == 7\nhighest_Power_of_2(0) == 0\nhighest_Power_of_2(11) == 8\nhighest_Power_of_2(11) == 8\nhighest_Power_of_2(1) == 1\nhighest_Power_of_2(16) == 16\nhighest_Power_of_2(32) == 16\nhighest_Power_of_2(8) == 8\nhighest_Power_of_2(15) == 15\nhighest_Power_of_2(255) == 16\nhighest_Power_of_2(10) == 1\nhighest_Power_of_2(31) == 2\nhighest_Power_of_2(7) == 7\nhighest_Power_of_2(0) == 0\nhighest_Power_of_2(15) == 15\nhighest_Power_of_2(31) == 2\nhighest_Power_of_2(127) == 16\nhighest_Power_of_2(255) == 16\nhighest_Power_of_2(20) == 8\nhighest_Power_of_2(15) == 15\nhighest_Power_of_2(127) == 16\nhighest_Power_of_2(255) == 16\nhighest_Power_of_2(63) == 2\nhighest_Power_of_2(63) == 2\nhighest_Power_of_2(64) == 2\nhighest_Power_of_2(63) == 2\nhighest_Power_of_2(127) == 16\nhighest_Power_of_2(255) == 16\nhighest_Power_of_2(63) == 2\nhighest_Power_of_2(127) == 16\nhighest_Power_of_2(255) == 16\nhighest_Power_of_2(255) == 16\nhighest_Power_of_2(10) == 1\nhighest_Power_of_2(31) == 2\nhighest_Power_of_2(127) == 16\nhighest_Power_of_2(255) == 16\nhighest_Power_of_2(63) == 2\nhighest_Power_of_2(127) == 16\nhighest_Power_of_2(255) == 16\nhighest_Power_of_2(63) == 2\nhighest_Power_of_2(63) == 2\nhighest_Power_of_2(64) == 2\nhighest_Power_of_2(127) == 16\nhighest_Power_of_2(255) == 16\nhighest_Power_of_2(63) == 2\nhighest_Power_of_2(127) == 16\nhighest_Power_of_2(255) == 16\nhighest_Power_of_2(127) == 16\nhighest_Power_of_2(255) == 16\nhighest_Power_of_2(127) == 16\nhighest_Power_of_2(127) == 16\nhighest_Power_of_2(255) == 16\nhighest_Power_of_2(63) == 2\nhighest_Power_of_2(63) == 2\nhighest_Power_of_2(64) == 2\nhighest_Power_of_2(127) == 16\nhighest_Power_of_2(255) == 16\nhighest_Power_of_2(63) == 2\nhighest_Power_of_2(127) == 16\nhighest_Power_of_2(255) == 16\nhighest_Power_of_2(127) == 16\nhighest_Power_of_2(255) == 16\nhighest_Power_of_2(63) == 2\nhighest_Power_of_2(127) == 16\nhighest_Power_of_2(255) == 16\nhighest_Power_of_2(63) == 2\nhighest_Power_of_2(127) == 16\nhighest_Power_of_2(255) == 16\nhighest_Power_of_2(63) == 2\nhighest_Power_of_2(63) == 2\nhighest_Power_of_2(64) == 2\nhighest_Power_of_2(127) == 16\nhighest_Power_of_2(255) == 16\nhighest_Power_of_2(63) == 2\nhighest_Power_of_2(127) == 16\nhighest_Power_of_2(255) == 16\nhighest_Power_of_2(63) == 2\nhighest_Power_of_2(127) == 16\nhighest_Power_of_2(255) == 16\nhighest_Power_of_2(63) == 2\nhighest_Power_of_2(63) == 2\nhighest_Power_of_2(64) == 2\nhighest_Power_of_2(127) == 16\nhighest_Power_of_2(255) == 16\nhighest_Power_of_2(63) == 2\nhighest_Power_of_2(127) == 16\nhighest_Power_of_2(255) == 16\nhighest_Power_of_2(63) == 2\nhighest_Power_of_2(63) == 2\nhighest_Power_of_2(64) == 2\nhighest_Power_of_2(127) == 16\nhighest_Power_of_2(255) == 16\nhighest_Power_of_2(63) == 2\nhighest_Power_of_2(127) == 16\nhighest_Power_of_2(255) == 16\nhighest_Power_of_2(63) == 2\nhighest_Power_of_2(127) == 16\nhighest_Power_of_2(255) == 16\nhighest_Power_of_2(63) == 2\nhighest_Power_of_2(127) == 16\nhighest_Power_of_2(255) == 16\nhighest_Power_of_2(63) == 2\nhighest_Power_of_2(127) == 16\nhighest_Power_of_2(255) == 16\nhighest_Power_of_2(63) == 2\nhighest_Power_of_2(63) == 2\nhighest_Power_of_2(64) == 2\nhighest_Power_of_2(127) == 16\nhighest_Power_of_2(255) == 16\nhighest_Power_of_2(63) == 2\nhighest_Power_of_2(127) == 16\nhighest_Power_of_2(255) == 16\nhighest_Power_of_2(63) == 2\nhighest_Power_of_2(127) == 16\nhighest_Power_of_2(255) == 16\nhighest_Power_of_2(63) == 2\nhighest_Power_of_2(63) == 2\nhighest_Power_of_2(6"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert highest_Power_of_2(5) == 2\nassert highest_Power_of_2(15) == 5\nassert highest_Power_of_2(10) == 1\nassert highest_Power_of_2(20) == 2\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     highest_Power_of_2(10) == 2\nassert     highest_Power_of_2(16) == 2\nassert     highest_Power_of_2(9) == 3\nassert     highest_Power_of_2(7) == 4\nassert     highest_Power_of_2(5) == 1\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     highest_Power_of_2(3) == 1\nassert     highest_Power_of_2(5) == 2\nassert     highest_Power_of_2(7) == 3\nassert     highest_Power_of_2(9) == 4\nassert     highest_Power_of_2(11) == 5\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert find_lucas(5) == 8\nassert find_lucas(10) == 29\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nfind_lucas(1) == 2\nfind_lucas(5) == 8\nfind_lucas(7) == 21\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nfind_lucas(0) == 1\nfind_lucas(1) == 2\nfind_lucas(2) == 3\nfind_lucas(3) == 4\nfind_lucas(4) == 5\nfind_lucas(5) == 8\nfind_lucas(6) == 13\n\n'''\nWrite a function to find then'th super Lucas number.\n\nSuper Lucas number is defined as:\n\nSuper Lucas numbers are the Fibonacci numbers, except when they\nare indexed from 1 to n, where Fibonacci numbers from 1 to n\nare:\n\nF1 = 1\nF2 = 1\nFn = Fn-1 + Fn-2, where F1 = 1 and F2 = 1.\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nfind_lucas(5)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_lucas(2) == 3, 'Test 1 Failed'\nassert     find_lucas(5) == 8, 'Test 2 Failed'\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(\"Test case 1: Correct result should be: 2, and fail case #1: correct result should be: 3\")\nassert \nfind_lucas(1)\n\nassert \nfind_lucas(2)"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert (find_lucas(0) == 2)\nassert (find_lucas(1) == 1)\nassert (find_lucas(5) == 7)\nassert (find_lucas(9) == 20)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_lucas(1) == 2\nassert     find_lucas(2) == 1\nassert     find_lucas(3) == 4\nassert     find_lucas(4) == 7\nassert     find_lucas(5) == 11\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     add_string([0,1,2], \"foo\") == [\"foo\", \"foo\", \"foo\"]\nassert     add_string([0,1,2], \"fo%o\") == [\"fooooooo\", \"fooooooo\", \"fooooooo\"]\nassert     add_string([0,1,2], \"foo{}\") == [\"foo{}\", \"foo{}\", \"foo{}\"]\nassert     add_string([0,1,2], \"foo%d\") == [\"foo0\", \"foo1\", \"foo2\"]\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add_string([1, 2, 3, 4], \"correct: \") == \"correct: 1 2 3 4\"\nassert     add_string([1, 2, 3, 4], \"correct: \") == \"correct: 1 2 3 4\"\nassert     add_string([1, 2, 3, 4], \"correct: \") == \"correct: 1 2 3 4\"\nassert     add_string([1, 2, 3, 4], \"correct: \") == \"correct: 1 2 3 4\"\nassert     add_string([1, 2, 3, 4], \"correct: \") == \"correct: 1 2 3 4\"\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     add_string(['h','e','l','l','o','!'], 'hey') == ['h','e','l','l','o','!'], 'incorrect'\nassert     add_string(['H','e','l','l','o','!'], 'hey') == ['H','e','l','l','o','!'], 'incorrect'\nassert     add_string(['h','e','l','l','o','!'], 'hey') == ['h','e','l','l','o','!'], 'incorrect'\n\ndef add_string_new(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef add_integer(list_, integer):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     add_string([\"Hello\", \"world\"], \"{}\") == \"Hello world\"\nassert     add_string([\"Hello\", \"world\"], \"Hello {0}\") == \"Hello world\"\nassert     add_string([\"Hello\", \"world\"], \"Hello {1}\") == \"Hello world\"\nassert     add_string([\"Hello\", \"world\"], \"Hello {0} {1}\") == \"Hello world hello world\"\nassert     add_string([\"Hello\", \"world\"], \"Hello {1} {0}\") == \"Hello world hello world\"\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add_string(['1', '2', '3'], '{}') == '1 2 3', 'Oops! The result should be 1 2 3'\nassert     add_string(['1', '2', '3'], '{0}') == '1 2 3', 'Oops! The result should be 1 2 3'\nassert     add_string(['1', '2', '3'], '{1}') == '2 3', 'Oops! The result should be 2 3'\nassert     add_string(['1', '2', '3'], '{2}') == '3', 'Oops! The result should be 3'\nassert     add_string(['1', '2', '3'], '{3}') == '', 'Oops! The result should be 3'\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nl1 = ['a', 'b', 'c', 'd', 'e']\nl2 = ['w', 'x', 'y', 'z']\nl3 = {'a':'w', 'b':'x', 'c':'y', 'd':'z'}\nprint(convert_list_dictionary(l1, l2, l3))\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     convert_list_dictionary([], {}, {}) ==     {},     \"Wrong Output\"\nassert     convert_list_dictionary(['ab', 'cd', 'ef'], {'a': 1, 'b': 2, 'c': 3}, {'def': 1}) ==     {'a': 1, 'b': 2, 'c': 3, 'def': 1},     \"Wrong Output\"\nassert     convert_list_dictionary(['ab', 'cd', 'ef'], {'a': 1, 'b': 2, 'c': 3}, {'a': 1, 'b': 2, 'c': 3, 'd': 1}) ==     {'a': 1, 'b': 2, 'c': 3, 'd': 1},     \"Wrong Output\"\n\nprint(\"All test cases passed\""
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     convert_list_dictionary([[\"apple\", \"orange\"], [\"grapes\", \"mango\"]],\n                                 [[10, 20], [\"strawberry\", \"raspberry\"]],\n                                 [\"banana\", \"pear\"]) == {'apple': {'orange': 10, 'grapes': 20},\n                                  'grapes': {'mango': None, 'orange': None},\n                                  'banana': {'pear': None, 'orange': 10},\n                                  'pear': {'banana': None, 'apple': 10}"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     convert_list_dictionary([1, 2, 3], ['a', 'b', 'c'], ['1', '2', '3']) ==     {1: {'a': 1, 'b': 2, 'c': 3}}\nassert     convert_list_dictionary([1, 2, 3], ['a', 'b', 'c'], ['1', '2', '3'], {1: 'a', 2: 'b', 3: 'c'}) == {1: {'a': 1, 'b': 2, 'c': 3}, 2: {'a': 1, 'b': 2, 'c': 3}, 3: {'a': 1, 'b': 2, 'c': 3}}\nassert     convert_list_dictionary([], ['a', 'b', 'c'], ['1', '2', '3']) ==     {}\nassert     convert_list_dictionary([], ['a', 'b', 'c'], ['1', '2', '3'], {'1': 'a', '2': 'b', '3': 'c'}) == {'1': {'a': 1, 'b': 2, 'c': 3}, 2: {'a': 1, 'b': 2, 'c': 3}, 3: {'a': 1, 'b': 2, 'c': 3}}\nassert     convert_list_dictionary([1, 2, 3], ['a', 'b', 'c'], ['1', '2', '3'], {'1': 'a', '2': 'b', '3': 'c'}) == {1: {'a': 1, 'b': 2, 'c': 3}, 2: {'a': 1, 'b': 2, 'c': 3}, 3: {'a': 1, 'b': 2, 'c': 3}}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     convert_list_dictionary([{1,2},{3,4}],[{1,2,3},{4,5,6}],[{1,2,3},{5,6,7}]) ==\n{1: {3: {5: {6: {7: {}}}}}, 2: {4: {5: {6: {}}}}}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     convert_list_dictionary(['a', 'b', 'c'], ['x', 'y', 'z'], ['k1', 'k2', 'k3']) == \n        {\n            'k1': {\n                'x': 'a',\n                'y': 'b',\n                'z': 'c'\n            },\n            'k2': {\n                'x': 'x',\n                'y': 'y',\n                'z': 'z'\n            },\n            'k3': {\n                'x': 'k1',\n                'y': 'k2',\n                'z': 'k3'\n            }\n        }\nassert    convert_list_dictionary(['a', 'b', 'c'], ['x', 'y', 'z'], ['k1', 'k2', 'k3', 'k4']) == \n        {\n            'k1': {\n                'x': 'a',\n                'y': 'b',\n                'z': 'c'\n            },\n            'k2': {\n                'x': 'x',\n                'y': 'y',\n                'z': 'z'\n            },\n            'k3': {\n                'x': 'k1',\n                'y': 'k2',\n                'z': 'k3'\n            },\n            'k4': {\n                'x': 'k1',\n                'y': 'k2',\n                'z': 'k4'\n            }\n        }\nassert    convert_list_dictionary(['a', 'b', 'c'], ['x', 'y', 'z'], ['k1', 'k2', 'k3', 'k4', 'k5']) == \n        {\n            'k1': {\n                'x': 'a',\n                'y': 'b',\n                'z': 'c'\n            },\n            'k2': {\n                'x': 'x',\n                'y': 'y',\n                'z': 'z'\n            },\n            'k3': {\n                'x': 'k1',\n                'y': 'k2',\n                'z': 'k3'\n            },\n            'k4': {\n                'x': 'k1',\n                'y': 'k2',\n                'z': 'k4'\n            },\n            'k5': {\n                'x': 'k1',\n                'y': 'k2',\n                'z': 'k5'\n            }\n        }\nassert    convert_list_dictionary(['a', 'b', 'c'], ['x', 'y', 'z'], ['k1', 'k2', 'k3', 'k4', 'k5', 'k6']) == \n        {\n            'k1': {\n                'x': 'a',\n                'y': 'b',\n                'z': 'c'\n            },\n            'k2': {\n                'x': 'x',\n                'y': 'y',\n                'z': 'z'\n            },\n            'k3': {\n                'x': 'k1',\n                'y': 'k2',\n                'z': 'k3'\n            },\n            'k4': {\n                'x': 'k1',\n                'y': 'k2',\n                'z': 'k4'\n            },\n            'k5': {\n                'x': 'k1',\n                'y': 'k2',\n                'z': 'k5'\n            },\n            'k6': {\n                'x': 'k1',\n                'y': 'k2',\n                'z': 'k6'\n            }\n        }\nassert    convert_list_dictionary(['a', 'b', 'c'], ['x', 'y', 'z'], ['k1', 'k2', 'k3', 'k4', 'k5', 'k6', 'k7']) == \n        {\n            'k1': {\n                'x': 'a',\n                'y': 'b',\n                'z': 'c'\n            },\n            'k2': {\n                'x': 'x',\n                'y': 'y',\n                'z': 'z'\n            },\n            'k3': {\n                'x': 'k1',\n                'y': 'k2',\n                'z': 'k3'\n            },\n            'k4': {\n                'x': 'k1',\n                'y': 'k2',\n                'z': 'k4'\n            },\n            'k5': {\n                'x': 'k1',\n                'y': 'k2',\n                'z': 'k5'\n            },\n            'k6': {\n                'x': 'k1',\n                'y': 'k2',\n                'z': 'k6'\n            },\n            'k7': {\n                'x': 'k1',\n                'y': 'k2',\n                'z': 'k7'\n            }\n        }\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     convert_list_dictionary([{1, 2}, {3, 4}, {5, 6}], {1, 2}, {3, 4}) ==     {1: {2: {3, 4}}, 2: {3, 4}, 3: {4}}\nassert     convert_list_dictionary([{1, 2}, {3, 4}, {5, 6}], {1, 2}, {3, 4}) ==     {1: {2, 3, 4}, 2: 3, 3: 4}\nassert     convert_list_dictionary([{1, 2}, {3, 4}, {5, 6}], {1, 2}, {3, 4}) ==     {1: {2, 3, 4}, 2: {3, 4}}\nassert     convert_list_dictionary([{1, 2}, {3, 4}, {5, 6}], {1, 2}, {3, 4}) ==     {1: {2}, 2: {3, 4}, 3: {4}}\nassert     convert_list_dictionary([{1, 2}, {3, 4}, {5, 6}], {1, 2}, {3, 4}) ==     {1: {2, 3, 4}, 2: {3, 4}}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     convert_list_dictionary(l1, l2, l3) == {'a': '1', 'b': '2', 'c': '3'}\nassert     convert_list_dictionary(l4, l5, l6) == {'a': {'b': '2', 'c': '3'}, 'd': {'e': '4', 'f': '5'}}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     convert_list_dictionary([1, 2, 3], {1: 10, 2: 20, 3: 30}, {10: 'A', 20: 'B', 30: 'C'}) == {1: {'A': 10, 'B': 20, 'C': 30}}\nassert     convert_list_dictionary([1, 2, 3], {1: 10, 2: 20, 3: 30, 4: 40}, {10: 'A', 20: 'B', 30: 'C', 40: 'D'}) == {1: {'A': 10, 'B': 20, 'C': 30}, 2: {'A': 40, 'B': 20, 'C': 30}, 3: {'A': 30, 'B': 20, 'C': 10}, 4: {'A': 40, 'B': 20, 'C': 10}}\nassert     convert_list_dictionary([1, 2, 3], {1: 10, 2: 20, 3: 30}, {10: 'A', 20: 'B', 30: 'C'}) == {1: 10, 2: 20, 3: 30}\nassert     convert_list_dictionary([1, 2, 3], {1: 10, 2: 20, 3: 30}, {10: 'A', 20: 'B', 30: 'C', 4: 40}) == {1: 10, 2: 20, 3: 30}\nassert     convert_list_dictionary([1, 2, 3], {1: 10, 2: 20, 3: 30, 4: 40}, {10: 'A', 20: 'B', 30: 'C', 40: 'D'}) == {1: 10, 2: 20, 3: 30, 4: 40}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     convert_list_dictionary([{'red': '#FF0000'}, {'blue': '#0000FF'}, {'green': '#008000'}], ['green', 'blue','red'], ['red', 'blue', 'green'])\nassert     convert_list_dictionary([{'red': '#FF0000'}, {'blue': '#0000FF'}, {'green': '#008000'}], ['green', 'blue','red'], ['red', 'blue', 'green','red', 'blue'])\nassert     convert_list_dictionary([{'red': '#FF0000'}, {'blue': '#0000FF'}, {'green': '#008000'}], ['green', 'blue','red'], ['red', 'green', 'blue','red', 'blue'])\nassert     convert_list_dictionary([{'red': '#FF0000'}, {'blue': '#0000FF'}, {'green': '#008000'}], ['green', 'blue','red'], ['blue', 'green','red', 'green', 'blue'])\nassert     convert_list_dictionary([{'red': '#FF0000'}, {'blue': '#0000FF'}, {'green': '#008000'}], ['green', 'blue','red'], ['red', 'blue', 'green','red', 'blue'])\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n'''\nFind the maximum sum of the given sequence, where a and b are the respective variables representing the beginning and the ending of the sub-sequence.\n'''\ndef get_max_sum (a, b):\n    '''\n    Write a function to find the maximum sum of the given sequence, where a and b are the respective variables representing the beginning and the ending of the sub-sequence.\n    '''\n    pass\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_max_sum(4) == 7\nassert get_max_sum(5) == 9\nassert get_max_sum(6) == 10\nassert get_max_sum(8) == 22\nassert get_max_sum(10) == 32\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_max_sum (1) == 1\nassert     get_max_sum (2) == 2\nassert     get_max_sum (5) == 14\nassert     get_max_sum (10) == 37\nassert     get_max_sum (100) == 1245\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(get_max_sum(5)) == 15\n\ndef max_sum(n):\n    def f(x):\n        if x == 1:\n            return 1\n        else:\n            return x + max(f(x/2), f(x/3), f(x/4), f(x/5))\n\n    return f(n)\n\nprint(max_sum(5)) == 15\n\ndef max_sum2(n):\n    def f(x):\n        if x == 1:\n            return 1\n        else:\n            return x + max(f(x/2), f(x/3), f(x/4), f(x/5))\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_max_sum(5) == 15\nassert     get_max_sum(7) == 21\nassert     get_max_sum(0) == 0\nassert     get_max_sum(6) == 26\nassert     get_max_sum(1) == 1\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_max_sum(2) == 2\nassert     get_max_sum(4) == 6\nassert     get_max_sum(5) == 13\nassert     get_max_sum(10) == 26\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_max_sum (10) == 15, \"get_max_sum should return 15\"\nassert     get_max_sum (3) == 6, \"get_max_sum should return 6\"\nassert     get_max_sum (2) == 5, \"get_max_sum should return 5\"\nassert     get_max_sum (1) == 1, \"get_max_sum should return 1\"\nassert     get_max_sum (0) == 0, \"get_max_sum should return 0\"\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_max_sum(5) == 28, 'Error in get_max_sum'\nassert     get_max_sum(10) == 55, 'Error in get_max_sum'\nassert     get_max_sum(15) == 128, 'Error in get_max_sum'\nassert     get_max_sum(16) == 232, 'Error in get_max_sum'\nassert     get_max_sum(19) == 385, 'Error in get_max_sum'\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_max_sum (5) == 15, \"Wrong answer\"\nassert     get_max_sum (8) == 33, \"Wrong answer\"\nassert     get_max_sum (16) == 79, \"Wrong answer\"\nassert     get_max_sum (32) == 141, \"Wrong answer\"\nassert     get_max_sum (64) == 253, \"Wrong answer\"\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    max_length_list([4, 5, 6]) == 6\n    max_length_list([0, 0, 0, 0]) == 0\n    max_length_list([4, 5, 6, 7, 0, 8]) == "
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_length_list(['papa', 'ke', 'lalalalala', 'ka', '', 'kap']) == ['papa', 'ka', 'lalalalala', 'kap']\n\n'''\nWrite a function to remove duplicate words.\n\nHints:\n\nUse a set.\n\n'''\ndef remove_duplicates(input_list):\n    '''\n    Write a function to remove duplicate words.\n    '''\n    pass\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_length_list([[2, 3, 4], [4, 4], [1,2,4,3]]) == 4\nassert     max_length_list([[2, 2], [4, 4, 4], [1,2,4,3]]) == 3\nassert     max_length_list([[2, 3, 4], [], [2,3], [2]]) == 3\nassert     max_length_list([[], [2, 3, 4], [], []]) == 3\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_length_list([1,2,3,4]) == 4\nassert     max_length_list([3,2,1]) == 3\nassert     max_length_list([]) == None\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_length_list([1,2,3,4,5,6]) == 6\nassert     max_length_list([1,2,3,4,5,6,7,8,9]) == 9\n\ndef max_length_dict(input_dict):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    pass\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_length_list([\"dog\", \"cat\", \"bear\", \"cat\", \"cat\"]) == 3\nassert     max_length_list([\"dog\", \"cat\", \"bear\", \"cat\"]) == 3\nassert     max_length_list([\"dog\", \"cat\", \"bear\"]) == 2\nassert     max_length_list([\"dog\"]) == 1\nassert     max_length_list([]) == 0\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_length_list([\"hello\", \"world\"]) == [\"hello\"]\nassert     max_length_list([]) == []\nassert     max_length_list([1,2,3]) == []\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_distinct((1,2,3,4,5)) == False, '1'\nassert     check_distinct((1,2,3,4,5,6,7)) == True, '2'\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_distinct((1,2,3)) == True, \"Expected True\"\nassert     check_distinct((1,1,2)) == False, \"Expected False\"\nassert     check_distinct((0,0,0)) == True, \"Expected True\"\nassert     check_distinct((-1,2,-3)) == False, \"Expected True\"\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_distinct((1,2,3,4,5,6,7,8,9,10)) == False, \\\n    \"Error - the returned value should be False.\"\nassert     check_distinct((1,2,3,4,5,6,7,8,9)) == True, \\\n    \"Error - the returned value should be True.\"\nassert     check_distinct((5,6,7,8,5,6,7,8,9)) == True, \\\n    \"Error - the returned value should be True.\""
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_distinct((0,1,2)) == True\nassert     check_distinct((0,1,1)) == False\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_distinct((0, 'a', 'b', 'b', 'c', 'd')) == True\nassert     check_distinct((0, 'b', 'c', 'b', 'a', 'b')) == False\nassert     check_distinct((0, 0, 'a', 'b', 'b', 'b')) == False\nassert     check_distinct((0, 0, 0, 0, 'b', 'b')) == False\nassert     check_distinct((0, 0, 0, 0, 0, 0)) == False\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_distinct((10, 20, 40, 60, 20, 30, 50, 60, 10)) == False, \"Should contain no duplicate\"\nassert     check_distinct((10, 20, 40, 60, 20, 30, 50, 60, 10)) == True, \"Should contain duplicates\"\nassert     check_distinct((10, 20, 40, 60, 20, 30, 50, 60, 10)) == False, \"Should contain no duplicate\""
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef check_divisible(test_tup):\n    '''\n    Write a function to check if a given tuple is divisible by another tuple.\n    '''\n    pass\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_distinct((1, 2, 3)) == True, \"1, 2, 3 should be distinct.\"\nassert     check_distinct((1, 1, 3)) == False, \"1, 1, 3 should not be distinct.\"\nassert     check_distinct((1, 2, 3, 4, 4)) == False, \"1, 2, 3, 4 should not be distinct.\"\nassert     check_distinct((1, 2, 4)) == False, \"1, 2, 4 should not be distinct.\"\nassert     check_distinct((4, 4, 4)) == True, \"All elements are distinct.\"\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_distinct((1,1,1,2,2,2,3,3,3,4,4,4))     ==    True\nassert     check_distinct((1,1,1,2,2,2))     ==    False\nassert     check_distinct((-1,1,1,2,2,2))     ==    False\nassert     check_distinct((-1,1,1,1,2,2))     ==    False\nassert     check_distinct((-1,1,1,1,1,2,2))     ==    False\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_distinct(('a','b','c','d','e','f','g','h','i','j')) == True, 'distinct should be True'\nassert check_distinct(('a','b','c','d','e','f','g','h','i','j','j')) == False, 'distinct should be False'\nassert check_distinct(('a','b','c','d','e','f','g','h','i','j','i')) == False, 'distinct should be False'\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     first_non_repeating_character('abc') == 'a'\nassert     first_non_repeating_character('abcd') == 'b'\nassert     first_non_repeating_character('aabcbcdb') == 'a'\nassert     first_non_repeating_character('aaaabbbbcccccccdddddd') == 'b'"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     first_non_repeating_character('') == -1\nassert     first_non_repeating_character('a') == -1\nassert     first_non_repeating_character('ab') == -1\nassert     first_non_repeating_character('abcd') == -1\nassert     first_non_repeating_character('abcdeff') == -1\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     first_non_repeating_character('abcdab') == 'a', 'Not correct'\nassert     first_non_repeating_character('abcdef') == 'e', 'Not correct'\nassert     first_non_repeating_character('aaabbbcc') == 'a', 'Not correct'\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint('First non repeating character test')\nprint(first_non_repeating_character(str1='abcdabcd'))\nprint(first_non_repeating_character(str1='abcdabcde'))\nprint(first_non_repeating_character(str1='aabbccdd'))\nprint(first_non_repeating_character(str1='aabbccddeeee'))\nprint(first_non_repeating_character(str1='abcdabcdeefghi'))\n\n\n\ndef check_duplicate(str1):\n    '''\n    Write a python function to check if a given string contains any duplicate characters.\n    '''\n    pass\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     first_non_repeating_character('abbbc') == 'b', \"Wrong Answer\"\nassert first_non_repeating_character('bc') == 'c', \"Wrong Answer\"\nassert first_non_repeating_character('aa') == 'a', \"Wrong Answer\"\nassert first_non_repeating_character('ac') == 'c', \"Wrong Answer\"\nassert first_non_repeating_character('') == '', \"Wrong Answer\"\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nfirst_non_repeating_character(str1=\"abacabad\") == 'b'\nfirst_non_repeating_character(str1=\"google.com\") == 'g'\nfirst_non_repeating_character(str1=\"babcbabcbab\") == 'c'\nfirst_non_repeating_character(str1=\"abacabad\") == 'a'\n\ndef first_non_repeating_character_or_none(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    If no non-repeated character is found return none.\n    '''\n    pass\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     first_non_repeating_character('') == None\nassert     first_non_repeating_character('abcabc') == 'a'\nassert     first_non_repeating_character('ghijklmn') == 'i'\nassert     first_non_repeating_character('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     (check_char('anaconda') == True), \"1st test case fails\"\nassert     (check_char('anaconda1') == False), \"2nd test case fails\"\nassert     (check_char('anaconda123') == False), \"3rd test case fails\"\nassert     (check_char('anaconda') == True), \"4th test case fails\"\nassert     (check_char('anaconda123') == False), \"5th test case fails\"\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_char('abc') == True, 'not correct'\nassert     check_char('abc') == False, 'not correct'\nassert     check_char('abc') == False, 'not correct'\nassert     check_char('b') == True, 'not correct'\nassert     check_char('b') == True, 'not correct'\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_char(\"abcd\") == False \nassert     check_char(\"abcd\") == False \nassert     check_char(\"abc\") == True \nassert     check_char(\"aab\") == True \nassert     check_char(\"abc\") == False \n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_char('abcd') == True, 'check_char should return True if the string starts and ends with the same character'\nassert     check_char('abcde') == False, 'check_char should return False if the string does not starts and ends with the same character'\nassert     check_char('abc') == False, 'check_char should return False if the string does not start with the given character'\nassert     check_char('abc1') == False, 'check_char should return False if the string does not start with the given character'\nassert     check_char('abcd1') == False, 'check_char should return False if the string does not start with the given character'\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert check_char('abc') == False, 'abc'\nassert check_char('abcdefghij') == True, 'abcdefghij'\nassert check_char('abcdefghij') == True, 'abcdefghij'\nassert check_char('abcdefghij') == True, 'abcdefghij'\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_char('abc') == True,'returns true if the string starts and ends with the same character'\nassert     check_char('abc1') == True,'returns true if the string starts and ends with the same character'\nassert     check_char('ab') == False,'returns false if the string starts and ends with the same character'\nassert     check_char('abc123') == False,'returns false if the string starts and ends with the same character'\nassert     check_char('abc123abc') == True,'returns true if the string starts and ends with the same character'\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_char('abcd') == True\nassert     check_char('aas') == False\nassert     check_char('a') == True\nassert     check_char('ab') == False\nassert     check_char('dd') == False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef check_palindrome(string): \n    '''\n    Write a function to check whether the given string is palindrome or not. \n    '''\n    pass\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_char('abc') == False\nassert     check_char('abc.') == False\nassert     check_char('') == True\nassert     check_char('.') == True\nassert     check_char('abc1') == True\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     median_numbers(1,2,3) == 2\nassert     median_numbers(1,2,3) == 2.5\nassert     median_numbers(1.2,2,3) == 2.5\nassert     median_numbers(-1,-2,-3) == -2\nassert     median_numbers(2,-1,-2) == -1\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     median_numbers(2,3,4) == 2.5, \"didn't find the correct median\"\nassert     median_numbers(2,5,6) == 2.5, \"didn't find the correct median\"\nassert     median_numbers(1,1,1) == 1, \"didn't find the correct median\"\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     median_numbers(1, 2, 3) == 2.5\nassert     median_numbers(1, 1, 3) == 1.5\nassert     median_numbers(1, 2, 1) == 1.5\nassert     median_numbers(2, 1, 3) == 1.5\nassert     median_numbers(3, 2, 1) == 1.5\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef n_pairs_of_objects(n,*objects):\n    '''\n    Write a function to calculate n pairs of objects.\n    '''\n    pass\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef median_numbers2(a,b,c):\n    '''\n    Check whether the median of the three numbers is a correct median.\n    '''\n    pass\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     median_numbers(1,2,3) == 2.5\nassert median_numbers(2,1,3) == 2.5\nassert median_numbers(2,3,1) == 2.5\nassert median_numbers(3,2,1) == 2.5\nassert median_numbers(3,1,2) == 2.5\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     median_numbers(1,2,3) == 2.5\nassert     median_numbers(-1,2,3) == 2\nassert     median_numbers(1,-2,3) == -1.5\nassert     median_numbers(1,-2,-3) == -1.5\nassert median_numbers(-1,-2,-3) == -1.5\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert median_numbers(1,2,3) == 2\nassert median_numbers(3,2,1) == 2.5\nassert median_numbers(1,3,2) == 2.5\nassert median_numbers(1.4,5.6,2.7) == 2.5\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_of_digits([1, 2, 3, 4, 5]) == 10, \"Expected 10\"\nassert     sum_of_digits([0, 1, 2, 3, 4, 5]) == 10, \"Expected 10\"\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_of_digits([]) == 0, 'Wrong output'\nassert     sum_of_digits([1, 2, 3, 4, 5]) == 15, 'Wrong output'\nassert     sum_of_digits([1000, 100, 10, 1]) == 12, 'Wrong output'\nassert     sum_of_digits([1, 1, 1, 1]) == 10, 'Wrong output'\nassert     sum_of_digits([-1, -2, -3, -4, -5]) == -6, 'Wrong output'\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    sum_of_digits([0,1,2,3,4]) == 15\n    sum_of_digits([0,1,2,3,4,5,6,7,8,9]) == 55\n    sum_of_digits([10,11,12,13,14,15]) == 45\n    sum_of_digits([1,2,3,4,5,6]) == 20\n    sum_of_digits([9,9]) == 36\n    sum_of_digits([]) == 0\n    sum_of_digits([-1,-2,-3,-4,-5,-6]) == -21"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_of_digits([0,1,2,3,4,5,6,7,8,9]) == 18, \"1st test failed\"\nassert sum_of_digits([-1,1,2,3,4,5,6,7,8,9]) == 18, \"2nd test failed\"\nassert sum_of_digits([1,2,3,4,5,6,7,8,9]) == 18, \"3rd test failed\"\nassert sum_of_digits([0]) == 0, \"4th test failed\"\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint(\"check sum_of_digits()\")\n\ndef sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for i in nums:\n        sum += sum_of_digits(i)\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(sum_of_digits([999, 998, 997, 996, 995, 994, 993, 992, 991, 990]))\n\ndef sum_of_even_digits(nums):\n    '''\n    Write a function to compute the sum of even digits of each number of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    sum_of_digits([1,2,3,4,5,6,7,8,9]) ==\n    9, \"1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 9\"\n\ndef n_sum_of_digits(n):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nsum_of_digits([]) == 0\nassert sum_of_digits([2,3,4,5,6,7,8,9]) == 0\nassert sum_of_digits([0,4,6,9,12,15,18,21,24,27]) == 36\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert sum_of_digits([4,5,6,8]) == 10\nassert sum_of_digits([1,2,3,4,5,6,7,8,9]) == 45\nassert sum_of_digits([9,6,1,0,9]) == 17\nassert sum_of_digits([9,6,1,0]) == 10\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     bitwise_xor( (1,2), (4,5) ) == (7,8)\nassert     bitwise_xor( (1,2,5), (4,5,7) ) == (1,2,3)\nassert     bitwise_xor( (1,2), (1,3) ) == (3,4)\nassert     bitwise_xor( (1,1), (1,1) ) == (2,2)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     bitwise_xor((1,2), (3,4)) == (3,4)\nassert     bitwise_xor((0,1), (1,0)) == (1,0)\nassert     bitwise_xor((7,0), (8,7)) == (8,7)\nassert     bitwise_xor((4,8), (5,7)) == (5,7)\nassert     bitwise_xor((3,7), (4,5)) == (3,5)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     bitwise_xor((1, 2), (3, 4)) == (2, 4)\nassert     bitwise_xor((2, 2), (3, 4)) == (1, 4)\nassert     bitwise_xor((1, 1), (1, 1)) == (0, 0)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     bitwise_xor((1, 2, 3), (1, 2, 3)) == (0, 0, 0)\nassert     bitwise_xor((1, 2, 3), (2, 4, 6)) == (1, 1, 1)\nassert     bitwise_xor((0, 1, 2), (3, 5, 4)) == (3, 1, 1)\nassert     bitwise_xor((0, 1, 2), (3, 5, 4)) == (3, 1, 1)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     bitwise_xor((5,6), (3,4)) == (2,8)\nassert     bitwise_xor((1,1), (1,1)) == (0,0)\nassert     bitwise_xor((1,4), (4,8)) == (5,5)\nassert     bitwise_xor((4,8), (4,8)) == (0,0)\nassert     bitwise_xor((3,3), (3,3)) == (9,9)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     bitwise_xor((1, 2, 3), (2, 3, 4)) == (1, 0, 3)\nassert     bitwise_xor((2, 1, 3), (3, 4, 3)) == (1, 1, 1)\nassert     bitwise_xor((1, 1, 3), (4, 5, 7)) == (0, 0, 5)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef bitwise_and(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise and operation across the given tuples.\n    '''\n    pass\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     bitwise_xor((1, 2), (3, 4)) == (1, 3)\nassert     bitwise_xor((2, 4), (1, 3)) == (3, 1)\nassert     bitwise_xor((1, 1), (1, 1)) == (1, 0)\nassert     bitwise_xor((3, 1), (1, 1)) == (2, 0)\nassert     bitwise_xor((0, 1), (1, 1)) == (0, 0)\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_freq([('a', 'b', 'c'), ('d', 'e'), ('a', 'b', 'c')]) == 1\nassert     extract_freq([('a', 'b', 'c', 'd'), ('a', 'b', 'c'), ('d', 'e'), ('a', 'b', 'c')]) == 2\nassert     extract_freq([('a', 'b', 'c'), ('d', 'e'), ('a', 'b', 'c')]) == 0\nassert     extract_freq([('a', 'b', 'c'), ('d', 'e'), ('a', 'b', 'c'), ('a', 'b', 'c')]) == 2\nassert     extract_freq([('a', 'b', 'c'), ('a', 'b', 'c')]) == 1\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_freq([('H', 'a'), ('B', 'a'), ('H', 'a'), ('H', 'b')]) == 4\nassert     extract_freq([('H', 'a'), ('B', 'b'), ('H', 'a'), ('H', 'b')]) == 3\nassert     extract_freq([('H', 'a'), ('B', 'a'), ('H', 'a'), ('H', 'a')]) == 2\nassert     extract_freq([('H', 'a'), ('B', 'a'), ('H', 'a'), ('H', 'a'), ('H', 'a')]) == 1\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_freq([]) == 0\nassert    extract_freq([1,2,3]) == 3\nassert    extract_freq([1,3,2]) == 2\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_freq([(1,2),(1,3),(1,2),(1,3),(1,2)]) == 4\nassert     extract_freq([(1,2),(1,3),(1,2),(1,3),(1,2,2),(1,3),(1,2,2)]) == 5\n\ndef get_first_n_tuples(lst, n):\n    '''\n    Write a function to get the n first tuples of a list.\n    '''\n    pass\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_freq([[(1, 2), (2, 3)], [], [(1, 2)]]) == 2\nassert    extract_freq([[(1, 2)], [(1, 2), (1, 2)]]) == 2\nassert    extract_freq([[(1, 2)]]) == 1\nassert    extract_freq([[(1, 2)], [(1, 2)]]) == 1\nassert    extract_freq([[(1, 2), (2, 3)], [(1, 2)]]) == 2\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_freq([]) == 0, 'Empty list has no tuples.'\nassert     extract_freq([[1]]) == 1, 'Single tuple has 1 unique tuple.'\nassert     extract_freq([[1], [2], [1]]) == 2, 'Duplicate tuples have 2 unique tuples.'\nassert     extract_freq([[1, 2], [1, 2], [2, 1], [1, 2]]) == 4, 'Duplicate tuples have 2 unique tuples.'\nassert     extract_freq([[1], [2], [1], [1, 2], [3], [1]]) == 5, 'Duplicate tuples have 2 unique tuples.'\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_freq([('a',1),('a',2),('b',2),('c',3),('d',5)]) == 2\nassert     extract_freq([('a',1),('a',1),('b',2),('c',3),('d',5)]) == 3\nassert     extract_freq([('a',1),('a',1),('b',2),('c',3),('d',5),('a',1),('a',1)]) == 3\n\nprint('You have passed the test!'"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_freq([]) == 0\nassert     extract_freq([[], [[]]]) == 0\nassert     extract_freq([[1,2,3], [1,2,3]]) == 1\nassert     extract_freq([[1,2,3,1], [1,2,3,1]]) == 2\nassert     extract_freq([[1,2,3,1], [1,2,3,1], [1,2,3,1], [1,2,3,1], [1,2,3,1]]) == 3\nprint(\"Extract_freq function: Correct\")\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_freq([[1, 2], [3, 1], [1, 1]]) ==     2, \"Check Failed\"\nassert     extract_freq([[1, 2, 3], [1, 1, 1], [1, 1, 1]]) ==     3, \"Check Failed\"\nassert     extract_freq([[1, 2], [1, 1], [1, 1]]) ==     2, \"Check Failed\"\nassert     extract_freq([[1], [1], [1]]) ==     1, \"Check Failed\"\nprint(\"Test case passed\")\n\ndef count_odds_and_primes(a):\n    '''\n    Write a function to count the number of odd numbers and the prime numbers in the given list.\n    '''\n    odds = 0\n    primes = 0\n    for i in a:\n        if i % 2!= 0:\n            odds += 1\n        else:\n            if is_prime(i):\n                primes += 1\n    return (odds, primes)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     add_nested_tuples( (1,2,3,4),(10,20,30,40)) == (11,22,33,44)\nassert     add_nested_tuples((1,2,3),(10,20,30)) == (11,22,33)\nassert     add_nested_tuples((1,2),(10,20,30)) == (11,22)\n\n\ndef multiply_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform element wise multiplication of two given nested tuples.\n    '''\n    pass\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add_nested_tuples(((1,2),(3,4)),((1,2),(3,4))) == ((2,4),(4,6))\nassert     add_nested_tuples(((1,2),(3,4)),((1,2,3),(3,4))) == ((2,4),(4,6,8))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef add_nested_lists(test_list1, test_list2):\n    '''\n    Write a function to perform index wise addition of list elements in the given two nested lists.\n    '''\n    pass\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add_nested_tuples(((1,2),(3,4),(5,6)),((7,8),(9,10),(11,12))) == (((1,2),(3,4),(5,6)),((7,8),(9,10),(11,12)))\nassert     add_nested_tuples((),((7,8),(9,10),(11,12))) == (((7,8),(9,10),(11,12)),)\nassert     add_nested_tuples(((1,2),(3,4),(5,6)),()) == (((1,2),(3,4),(5,6)),)\nassert     add_nested_tuples(((1,2),(3,4),(5,6)),()) == (((1,2),(3,4),(5,6)),)\nassert     add_nested_tuples(((1,2),(3,4),(5,6)),((7,8),(9,10),(11,12))) == (((1,2),(3,4),(5,6)),((7,8),(9,10),(11,12)))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    add_nested_tuples((1,3),(4,5)) == (1, 7)\n    add_nested_tuples((1,2),(5,5)) == (1, 7)\n    add_nested_tuples((2,3),(5,5)) == (3, 8)\n    add_nested_tuples((1,2),(3,4)) == (4,6)\n    add_nested_tuples((1,2),(3,4,5,6)) == (4,6)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     add_nested_tuples((1,2,3,4), (3,4,5,6)) == (1,4,7,10)\nassert     add_nested_tuples((),(4,)) == (4,)\nassert     add_nested_tuples((1,2,3), (4,)) == (1,2,3,4)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add_nested_tuples(((1,2),(3,4)), ((5,6),(7,8))) == (((1,2),(3,4),(5,6),(7,8)), ((1,2),(3,4),(5,6),(7,8)))\nassert     add_nested_tuples(((1,2),(3,4)), ((5,6),(7,8))) == (((1,2),(3,4),(5,6),(7,8)), ((1,2),(3,4),(5,6),(7,8)))\nassert     add_nested_tuples(((1,2),(3,4)), ((5,6),(7,8))) == (((1,2),(3,4),(5,6),(7,8)), ((1,2),(3,4),(5,6),(7,8)))\nassert     add_nested_tuples(((1,2),(3,4)), ((5,6),(7,8))) == (((1,2),(3,4),(5,6),(7,8)), ((1,2),(3,4),(5,6),(7,8)))\nassert     add_nested_tuples(((1,2),(3,4)), ((5,6),(7,8))) == (((1,2),(3,4),(5,6),(7,8)), ((1,2),(3,4),(5,6),(7,8)))\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     minimum(5,6) ==     5,     \"Wrong answer :(\"\nassert    minimum(5,3) == 3, \"Wrong answer :(\"\n\nprint(\"Passed all test cases!\")"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     minimum(10, 20) == 10\nassert     minimum(10, 100) == 10\nassert     minimum(-10, 20) == -10\nassert     minimum(10, -20) == -20\nassert     minimum(0, 20) == 0\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     min(1,2) == 1\nassert     min(1,1) == 1\nassert     min(2,1) == 1\n\nassert     min(1,1.1) == 1.1\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert minimum(2,3) == 2\nassert minimum(7,3) == 3\nassert minimum(3,4) == 3\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     minimum(2,3) == 2\nassert    minimum(3,3) == 3\nassert    minimum(-5,4) == -5\nassert    minimum(3,-2) == 3\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nassert minimum(10,15) == 10\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nminimum(100,200)==200\nminimum(200,100)==100\nminimum(200,0)==200\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     minimum(2,3) == 1\nassert     minimum(1,2) == 1\nassert     minimum(2,1) == 1\nassert     minimum(2,2) == 0\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(\"Function minimum works correctly\")\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint('')\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_tuplex(tuplex,tuple1) == False, \"The returned value should be False\"\nassert     check_tuplex(tuplex,tuple2) == True, \"The returned value should be True\"\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_tuplex(('a','b'),('a','b')) == True, \"incorrect\"\nassert     check_tuplex(('a','b'),('c','d')) == False, \"incorrect\"\nassert     check_tuplex(('a','b'),('b','c')) == False, \"incorrect\"\nassert     check_tuplex(('a','b'),('b','a')) == False, \"incorrect\"\nassert     check_tuplex(('a','b'),('b','a','c')) == True, \"incorrect\"\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_tuplex((1, 2), (1, 2))     == True, \"Wrong result\"\nassert     check_tuplex((1, 2), (1, 4))     == False, \"Wrong result\"\nassert     check_tuplex((1, 2), (3, 4, 5)) == False, \"Wrong result\"\nprint(\"You've successfully passed the unit tests!\")"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef check_tuplex(tuplex,tuple1):\n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef test_check_tuplex():\n    assert check_tuplex((1,2),(1,2)) == False\n    assert check_tuplex((1,2),(2,3)) == True\n    assert check_tuplex((1,2,3),(2,3)) == False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_tuplex((1,2,3), (1,2,3)) == True\nassert     check_tuplex((1,2,3), (3,2,1)) == True\nassert     check_tuplex((1,2,3), (2,1,3)) == False\nassert     check_tuplex((1,2,3), (1,2,3,4)) == False"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert check_tuplex((1,2), (1,2)) == True \nassert check_tuplex((1,2), (2,3)) == False \nassert check_tuplex((1,2,3), (1,2,3)) == True \nassert check_tuplex((1,2), (2,3)) == False \n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_tuplex((1,2,3),(1,3,4,5)) == True, \"Error, tuple with one element does not match the expected output\"\nassert     check_tuplex((1,2,3),(1,2,3,4)) == False, \"Error, tuple with two elements does not match the expected output\"\nassert     check_tuplex((1,2,3),(1,2,3,4,5)) == True, \"Error, tuple with three elements does not match the expected output\"\nassert     check_tuplex((1,2,3),(1,2,3,4,5,6)) == False, \"Error, tuple with four elements does not match the expected output\"\nassert     check_tuplex((1,2,3),(1,2,3,4,5,6,7)) == True, \"Error, tuple with five elements does not match the expected output\"\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_tuplex((1,2,3),(1,2,3)) == False \nassert     check_tuplex((1,2,3),(3,2,1)) == True \nassert     check_tuplex((1,2,3),(1,2)) == False \nassert     check_tuplex((1,2,3),(1,2,4)) == False \n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x % 2\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Parity(2) == 1\nassert     find_Parity(3) == 1\nassert     find_Parity(6) == 0\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert find_Parity(5) == False \nassert find_Parity(100) == False\nassert find_Parity(1) == False\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Parity(123) == False\nassert     find_Parity(4) == True\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Parity(9) == 1, \"odd parity\"\nassert     find_Parity(10) == 0, \"even parity\"\nassert     find_Parity(11) == 1, \"odd parity\"\nassert     find_Parity(7) == 0, \"even parity\"\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert \n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_Parity(7) == True, \"Should be True\"\nassert     find_Parity(8) == False, \"Should be False\"\nassert     find_Parity(5) == False, \"Should be False\"\nassert     find_Parity(10) == False, \"Should be False\"\nassert     find_Parity(11) == True, \"Should be True\"\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nx = 17\nif find_Parity(x) == True:\n    print(\"Parity of\", x, \"is odd\")\nelse:\n    print(\"Parity of\", x, \"is even\")\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Parity(5) == False, 'find_Parity function is wrong'\nassert find_Parity(1) == True, 'find_Parity function is wrong'\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Parity(13) == True\nassert     find_Parity(11) == False\nassert     find_Parity(5) == False\nassert     find_Parity(10) == True\nassert     find_Parity(14) == True\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     rearrange_bigger(12345) == 12345\nassert     rearrange_bigger(321) == 321\nassert     rearrange_bigger(2121) == 1221\nassert     rearrange_bigger(1002) == 20012\nassert     rearrange_bigger(123456) == 654321\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(rearrange_bigger(1234)) #1\nprint(rearrange_bigger(4321)) #431\nprint(rearrange_bigger(14789)) #8780\nprint(rearrange_bigger(98765)) #98764\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     rearrange_bigger(4321) == \"4321\"\nassert     rearrange_bigger(44444) == \"444445\"\nassert     rearrange_bigger(32222) == \"3221\"\nassert     rearrange_bigger(11111) == \"111111\"\nassert     rearrange_bigger(101) == \"101\"\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert rearrange_bigger(12) == 21\nassert rearrange_bigger(14) == 21\nassert rearrange_bigger(21) == 21\nassert rearrange_bigger(6) == 7\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rearrange_bigger(13) == 22\nassert     rearrange_bigger(42) == 99\nassert     rearrange_bigger(21) == 21\nassert     rearrange_bigger(100) == 101\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef next_bigger_number(num):\n    '''\n    Write a function to determine the next bigger number after n.\n    Note that it's the next bigger number in the alphabetical order.\n    If there is not next bigger number, return -1.\n    '''\n    pass\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    rearrange_bigger(1234) == 4123\n    rearrange_bigger(1234) == 3124\n    rearrange_bigger(12) == 23\n    rearrange_bigger(123) == 321\n    rearrange_bigger(32) == 33\n    rearrange_bigger(3) == 321\n    rearrange_bigger(0) == 0\n    rearrange_bigger(-321) == -32\n    rearrange_bigger(-2) == -23\n    rearrange_bigger(999999999999999999999) == 10000000000000010000999\n    rearrange_bigger(100) == 100\n    rearrange_bigger(31) == 32\n    rearrange_bigger(0) == 0\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     rearrange_bigger(7324) == 7321\nassert     rearrange_bigger(24343) == 24341\nassert     rearrange_bigger(63743) == 63743\nassert     rearrange_bigger(166465) == 166466\n\nprint('Success:  test_rearrange_bigger')\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     rearrange_bigger(1234) == 4321\nassert     rearrange_bigger(23) == 321\nassert     rearrange_bigger(10) == 11\nassert     rearrange_bigger(11) == 21\nassert     rearrange_bigger(22222) == 22222\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     k_smallest_pairs([1,2,3,4,5,6], [3,6,9,12,15,18], 3) == [[1,6],[3,4],[6,9]]\nassert k_smallest_pairs([1,2,3,4,5], [3,6,9,12,15,18], 2) == [[1,3],[3,4],[4,5]]\nassert k_smallest_pairs([1,2,3,4,5], [3,6,9,12,15,18], 1) == [[1,2],[2,3]]\nassert k_smallest_pairs([1,2,3,4,5], [3,6,9,12,15,18], 0) == [[]]\nassert k_smallest_pairs([1,2,3,4,5], [], 2) == [[]]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     k_smallest_pairs([1,2,3], [4,5], 2) == [[1,4],[2,5]]\nassert     k_smallest_pairs([1], [2], 1) == [[2,1]]\nassert     k_smallest_pairs([2,4,6,8,10], [10,6,8,4,2], 5) == [[4,6],[8,10],[2,10],[6,8],[10,2]]\nassert     k_smallest_pairs([1,1,1,1,1], [1,1,1,1,1], 3) == [[1,1],[1,1],[1,1]]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     k_smallest_pairs([1, 2, 3, 4], [2, 3, 4], 2) == [(1, 2), (2, 3)]\nassert     k_smallest_pairs([1, 2, 3, 4], [2, 3, 4], 3) == [(1, 2), (2, 3)]\nassert     k_smallest_pairs([1, 2, 3, 4, 5], [2, 3, 4, 5], 3) == [(1, 2), (2, 3), (3, 4)]\nassert     k_smallest_pairs([1, 2, 3, 4, 5], [2, 3, 4, 5], 5) == [(1, 2), (2, 3), (3, 4), (4, 5)]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     k_smallest_pairs([1,5,9,10,15,18],[2,6,10,15,20,25],3) == [[1, 2], [5, 6], [9, 10]]\nassert     k_smallest_pairs([1,5,9,10,15,18],[2,6,10,15,20,25],4) == [[1, 2], [5, 6], [10, 15], [9, 10]]\nassert     k_smallest_pairs([1,5,9,10,15,18],[2,6,10,15,20,25],5) == [[1, 2], [5, 6], [9, 10], [15, 20]]\nassert     k_smallest_pairs([1,5,9,10,15,18],[2,6,10,15,20,25],6) == [[1, 2], [5, 6], [9, 10], [15, 20], [18, 25]]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     k_smallest_pairs([3,2,4], [1,1,3,2,5], 2) == [(2, 1), (3, 1)]\nassert     k_smallest_pairs([1], [1], 1) == [(1, 1)]\nassert     k_smallest_pairs([1], [1,2], 1) == [(1, 1)]\nassert     k_smallest_pairs([1,2,3,4,5], [2,4,6,8], 3) == [(2, 4), (3, 4), (4, 4)]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     k_smallest_pairs([1, 1, 1, 1, 2, 3], [1, 4, 5, 8, 9, 15], 5) == [(1, 1), (1, 4), (1, 5), (1, 8), (2, 1)]\nassert     k_smallest_pairs([1, 1, 1, 1, 2, 3], [1, 4, 5, 8, 9, 15], 3) == [(1, 1), (1, 1), (1, 1)]\nassert     k_smallest_pairs([2, 3, 9, 4, 8, 7, 1], [9, 3, 8, 9, 1, 4, 5], 5) == [(2, 3), (3, 8), (7, 1), (8, 9), (9, 4)]\nassert     k_smallest_pairs([2, 3, 9, 4, 8, 7, 1], [9, 3, 8, 9, 1, 4, 5], 3) == [(2, 3), (3, 8), (7, 1)]\nassert     k_smallest_pairs([1, 1, 1, 1, 2, 3], [1, 4, 5, 8, 9, 15], 1) == [(1, 1), (1, 1)]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     k_smallest_pairs([2,3,4],\n                        [5,6,7],\n                        2) == [[2,5],[3,6]]\nassert     k_smallest_pairs([1,2],\n                        [1,2,3,4],\n                        1) == [[1,2],[1,1]]\nassert     k_smallest_pairs([1,2],\n                        [1,2,3,4],\n                        3) == [[1,2],[1,2],[1,2]]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     k_smallest_pairs([1, 2, 3, 4, 5], [10, 11, 12, 13, 14], 3) == [1, 2]\nassert     k_smallest_pairs([1, 2, 3, 4, 5], [10, 11, 12, 13, 14], 4) == [2, 3]\nassert     k_smallest_pairs([1, 2, 3, 4, 5], [10, 11, 12, 13, 14], 5) == [3, 4]\nassert     k_smallest_pairs([1, 2, 3, 4, 5], [10, 11, 12, 13, 14], 6) == [4, 5]\nassert     k_smallest_pairs([1, 2, 3, 4, 5], [10, 11, 12, 13, 14], 7) == []\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     k_smallest_pairs([1, 1, 2, 2, 3], [2, 3, 4], 2) == True, \\\n        'k_smallest_pairs([1, 1, 2, 2, 3], [2, 3, 4], 2) should be true'\nassert     k_smallest_pairs([3, 3], [1, 1], 2) == False, \\\n        'k_smallest_pairs([3, 3], [1, 1], 2) should be false'\n\ndef find_maximum_value(nums1, nums2, k):\n    '''\n    Write a function to find all the maximum values of all non-empty subarrays of nums.\n    A subarray should be defined as a contiguous sequence of number within the original array.\n    Note:\n        1. The number of elements in the original array is n.\n        2. The number of subarrays whose maximum values are to be searched is k.\n    '''\n    # edge cases\n    if not nums1 or not nums2 or not k:\n        return None\n    # res = [0] * k\n    res = []\n\n    for i in range(1, k + 1):\n        cur_max = float('-inf')\n        cur_min = float('inf')\n        # minimum possible number of elements in the current window\n        min_elems = i\n        # cur_min = min(cur_min, nums2[0])\n        # check if the first element of the window is in nums1 or not\n        for j in range(i):\n            # compare the current maximum value of the window with current minimum value\n            cur_max = max(cur_max, max(nums1[j], nums2[j]))\n            # if cur_max is greater than the current minimum number of elements in the window\n            if cur_max >= min_elems:\n                # break the loop as soon as the window reaches the number of minimum elements\n                break\n        # append the current maximum value\n        res.append(cur_max)\n\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     k_smallest_pairs([1,2,3,4,5,6,7,8,9],\n                            [10,11,12,13,14,15,16,17,18,19],\n                            4) == [[1,2],[1,4],[2,3],[2,5],[3,4],[4,6],[4,7],[4,8],[5,6],[5,8],[6,7],[6,9],[7,8],[7,10],[8,9],[9,10]]\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     min_product_tuple([(1, 5), (9, 8), (4, 6), (2, 3)]) == (1, 3)\nassert     min_product_tuple([(1, 5), (9, 8), (4, 6), (2, 9)]) == (1, 9)\nassert     min_product_tuple([(1, 5), (9, 8), (4, 6), (2, 9)]) == (1, 9)\nassert     min_product_tuple([(1, 5), (9, 8), (4, 6), (2, 9)]) == (1, 9)\nassert     min_product_tuple([(1, 5), (9, 8), (4, 6), (2, 9)]) == (1, 9)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     min_product_tuple([(1,2), (3,4), (5,6)]) == (1, 2)\nassert     min_product_tuple([(2,3), (4,5), (6,7)]) == (2, 3)\nassert     min_product_tuple([(3,4), (5,6), (7,8)]) == (3, 4)\nassert     min_product_tuple([(4,5), (6,7), (8,9)]) == (4, 5)\nassert     min_product_tuple([(5,6), (7,8), (9,10)]) == (5, 6)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     min_product_tuple([\n        (1, 3),\n        (3, 2),\n        (4, 2),\n        (3, 4),\n        (5, 6)\n        ]) == (1, 3, 4, 2, 6), 'Your min_product_tuple() function is wrong!'\nassert     min_product_tuple([\n        (1, 2),\n        (3, 4),\n        (5, 6)\n        ]) == (1, 2, 5, 6), 'Your min_product_tuple() function is wrong!'\n\ndef min_product_list(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    pass\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     min_product_tuple([('apple', 2), ('orange', 1), ('banana', 5)]) == ('orange', 2)\nassert     min_product_tuple([('apple', 2), ('orange', 1), ('banana', 5)]) == ('banana', 5)\nassert     min_product_tuple([('apple', 2), ('orange', 1), ('banana', 5)]) == ('apple', 2)\nassert     min_product_tuple([('apple', 2), ('orange', 1), ('banana', 5)]) == ('apple', 2)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef min_product_list(list2):\n    '''\n    Write a function to find the minimum product from the tuples within a given list.\n    '''\n    pass\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    min_product_tuple([(1,2),(3,4)]) == (1*2, 3*4)\n    min_product_tuple([(1,4),(2,1)]) == (2*1, 4*1)\n    min_product_tuple([(5,2),(2,4),(6,4)]) == (2*2, 4*4)\n    min_product_tuple([(1,4),(2,3)]) == None\nassert False\n\ndef min_product_tuple_memo(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list using memmory, \n    O(1) space.\n    '''\n    pass\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     min_product_tuple([[1, 2, 3], [4, 5, 6]]) == 1\nassert     min_product_tuple([[-1, -2, -3], [-4, -5, -6]]) == -6\nassert     min_product_tuple([[-1, -2, -3], [4, 5, 6]]) == 4\nassert     min_product_tuple([[1, 2], [3, 4]]) == 4\nassert     min_product_tuple([[1, 2], [3, 4], [5, 6]]) == 6\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     min_product_tuple([(1, 2), (3, 4), (5, 6), (7, 8)]) == 24\nassert     min_product_tuple([(1, 2), (5, 8), (7, -10), (3, 6)]) == -80\nassert     min_product_tuple([(1, 1), (2, 2), (3, 3), (4, 4)]) == -24\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     min_val([2, -9, 5, 0, -20]) == -20\nassert     min_val([-1, -1, -1, 0]) == -1\nassert     min_val([-1, -2, -3, -4]) == -4\nassert     min_val([2, 0, 1, 2]) == 1\nassert     min_val([]) == None\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    pass\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    pass\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     min_val([1,3,2]) == 1\nassert     min_val([1,2,3,4]) == 1\nassert     min_val([1.0,3,2]) == 1.0\nassert     min_val([1,2,3,\"a\"]) == \"a\"\nassert     min_val([1,\"b\",2]) == \"b\"\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     min_val([1,2,3])     ==     1\nassert     min_val([[1],[2],[3]])     ==     1\nassert     min_val([[1],[2],3])     ==     1\nassert     min_val([1,2,3,5,6])     ==     1\nassert     min_val([1,2,3,5,6,8,9])     ==     1\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     min_val([2,3,4]) == 2\nassert     min_val([1,2,3]) == 1\nassert     min_val([6,6,5,1,2]) == 1\nassert     min_val([0,0,0,0,0]) == 0\nassert     min_val([]) == None\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     min_val([1,2,3]) == 1, \"Should return the minimum value of the list\"\nassert     min_val([1,2,3,4]) == 1, \"Should return the minimum value of the list\"\nassert     min_val([1,2,3,\"hi\"]) == \"hi\", \"Should return the minimum value of the list\"\nassert     min_val([1,2,3,4,5]) == 1, \"Should return the minimum value of the list\"\nassert     min_val(['1',2,3,\"hi\"]) == '1', \"Should return the minimum value of the list\"\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     min_val([1,2,3,4,2,1]) == 1\nassert     min_val([]) == None\nassert     min_val([1,2,3,4]) == 1\nassert     min_val([1,2,3,4,2,1,4]) == 1\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     snake_to_camel('snakecase_to_camelcase') =='snakecaseToCamelcase', 'incorrect'\nassert     snake_to_camel('snakecase_to_CamelCase') =='snakecaseToCamelCase', 'incorrect'\nassert     snake_to_camel('snakecase_to_camel_case') =='snakecaseToCamelCase', 'incorrect'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(snake_to_camel('snake_case'))\nprint(snake_to_camel('snake_case_'))\n\nassert \nprint(snake_to_camel('snakeCase'))\nprint(snake_to_camel('snakeCase_'))\n\nassert \nprint(snake_to_camel('sNAKE_cASE'))\nprint(snake_to_camel('sNAKE_cASE_'))\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     snake_to_camel('camel_case') == 'camelCase', \"Test Failed\"\nassert     snake_to_camel('camel_case_1') == 'camelCase1', \"Test Failed\"\nassert     snake_to_camel('camel_case_2') == 'camelCase2', \"Test Failed\"\nassert     snake_to_camel('camel_case_3') == 'camelCase3', \"Test Failed\"\nassert     snake_to_camel('camel_case_4') == 'camelCase4', \"Test Failed\"\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     snake_to_camel(\"this_is_a_snake_case\") == \"ThisIsASnakeCase\"\nassert     snake_to_camel(\"thisIsASnakeCase\") == \"ThisIsASnakeCase\"\nassert     snake_to_camel(\"this_is_a_snake_case_\") == \"ThisIsASnakeCase\"\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert snake_to_camel('snake_case') =='snake_case'\nassert snake_to_camel('snake_case_') =='snake_case'\nassert snake_to_camel('snake_case_d') =='snake_case_d'\nassert snake_to_camel('snake_case_d_') =='snake_case_d'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     snake_to_camel('snake_case') =='snakeCase'\nassert     snake_to_camel('snake_case_') =='snakeCase'\nassert     snake_to_camel('snake_case_5') =='snakeCase5'\nassert     snake_to_camel('snake_case_v_') =='snakeCaseV'\nassert     snake_to_camel('snake_case_v_v') =='snakeCaseVV'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     snake_to_camel('spider_man') =='spiderMan'\nassert     snake_to_camel('test_spider_man') == 'testSpiderMan'\nassert     snake_to_camel('hello_world') == 'helloWorld'\nassert     snake_to_camel('spiderman') =='spiderman'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     snake_to_camel(\"snake_case\") == \"snake_case\"\nassert     snake_to_camel(\"snake_case_with_space\") == \"snake_case_with_space\"\nassert     snake_to_camel(\"snake_case_with_hyphen\") == \"snake_case_with_hyphen\"\nassert     snake_to_camel(\"snake_case-with-hyphen\") == \"snake_case-with-hyphen\"\nassert     snake_to_camel(\"snake_case_with_underscore\") == \"snake_case_with_underscore\"\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     snake_to_camel('snake_case') =='snake_case', 'incorrect'\nassert     snake_to_camel('snake_case_') =='snake_case', 'incorrect'\nassert     snake_to_camel('snake_case__') =='snake_case', 'incorrect'\nassert     snake_to_camel('snake_case___') =='snake_case', 'incorrect'\nassert     snake_to_camel('snake_case____') =='snake_case', 'incorrect'\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert     remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef sum_even(l):\n    '''\n    Write a python function to sum even numbers from a given list.\n    '''\n    pass\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_odd([1,2,3,4,5]) ==     [2,3,4,5]\nassert     remove_odd([1,2,3,4,5,6]) ==     [2,3,4,6]\nassert     remove_odd([1,2,3,4,5,6,7,8,9]) ==    [2,3,4,6,8]\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef concatenate_lists(l1, l2):\n    '''\n    Write a python function to concatenate two lists together.\n    '''\n    pass\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) ==     [1,3,5,7,9,11,13,15]\nassert     remove_odd([]) == None\nassert     remove_odd([1]) == None\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    if not l:\n        return None\n    i = 0\n    while l[i] % 2 == 0 and i < len(l) - 1:\n        i += 1\n    return l[:i] + l[i+1:]\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_odd([1,2,3,4,5]) == [1,3,5], \"Should return the same list\"\nassert     remove_odd([1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9,10], \"Should return the same list\"\nassert     remove_odd([10]) == [], \"Should return an empty list\"\nassert     remove_odd([]) == [], \"Should return an empty list\"\nassert     remove_odd([1,2,3,4,5,6,7]) == [1,2,3,4,5,6,7], \"Should return the same list\"\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_odd([]) == []\nassert     remove_odd([1,2,3,4,5,6]) == [1,3,5,6]\nassert     remove_odd([1,2,3,4,5,6,7,8,9]) == [1,3,5,6,7,8]\nassert     remove_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == [1,3,5,6,7,8,10,11,13,14,16,17,19,20]\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_odd([1,2,3,4,5,6,7,8,9]) == \nassert     remove_odd([10,11,12,13,14,15,16,17,18,19,20]) == \nassert     remove_odd([1,2,3,4,5,6,7,8,9,0]) == \nassert     remove_odd([1,2,3,4,5,6,7,8,9,10]) == \nassert     remove_odd([1,2,3,4,5,6,7,8,9,11]) == \n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_nth_element([(1,2,3),(4,5,6),(7,8,9)], 2) == (3,4,5)\nassert     extract_nth_element([(1,2,3),(4,5,6),(7,8,9)], 3) == (6,7,8)\nassert     extract_nth_element([(1,2,3),(4,5,6),(7,8,9)], 4) == (9,None,None)\nassert     extract_nth_element([(1,2,3),(4,5,6),(7,8,9)], 5) == (None,None,None)\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_nth_element([('a','b'), ('c', 'd'), ('e', 'f')], 1) == 'a', 'incorrect'\nassert     extract_nth_element([('a','b'), ('c', 'd'), ('e', 'f')], 2) == 'd', 'incorrect'\nassert     extract_nth_element([('a','b'), ('c', 'd'), ('e', 'f')], 3) == 'e', 'incorrect'\nassert     extract_nth_element([('a','b'), ('c', 'd'), ('e', 'f')], 4) == 'f', 'incorrect'\nassert     extract_nth_element([('a','b'), ('c', 'd'), ('e', 'f')], 0) == 'a', 'incorrect'\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_nth_element([(1, 2), (3, 4), (5, 6)], 1) == (3, 4)\nassert     extract_nth_element([(1, 2), (3, 4), (5, 6)], 2) == (5, 6)\nassert     extract_nth_element([(1, 2), (3, 4), (5, 6)], 0) == (1, 2)\nassert     extract_nth_element([(1, 2), (3, 4), (5, 6)], -1) == (1, 2)\nassert     extract_nth_element([(1, 2), (3, 4), (5, 6)], -2) == (3, 4)\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_nth_element([('John', 'Doe'), ('Jim', 'Doe')], 1) == ('John', 'Doe')\nassert     extract_nth_element([('John', 'Doe'), ('Jim', 'Doe')], 2) == ('Jim', 'Doe')\nassert     extract_nth_element([('John', 'Doe'), ('Jim', 'Doe')], 0) == ('John', 'Doe')\nassert     extract_nth_element([('John', 'Doe'), ('Jim', 'Doe')], -1) == ('John', 'Doe')\nassert     extract_nth_element([('John', 'Doe'), ('Jim', 'Doe')], -2) == ('Jim', 'Doe')\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_nth_element([(1, 2), (3, 4), (5, 6)], 2) == (3, 4)\nassert     extract_nth_element([(1, 2), (3, 4), (5, 6)], 4) == (5, 6)\nassert     extract_nth_element([(1, 2), (3, 4), (5, 6)], 0) == (1, 2)\nassert     extract_nth_element([(1, 2), (3, 4), (5, 6)], 6) == (5, 6)\nassert     extract_nth_element([(1, 2), (3, 4), (5, 6)], -2) == (1, 2)\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_nth_element([(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)], 3) == (2, 2)\nassert     extract_nth_element([(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)], 10) == (10, 10)\nassert     extract_nth_element([(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)], 11) == (9, 9)\nassert     extract_nth_element([(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)], 0) == None\nassert     extract_nth_element([(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)], -3) == None\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nextract_nth_element(test_list, 2) == (3, 4, 5)\nextract_nth_element(test_list, 4) == (6, 7, 8)\nextract_nth_element(test_list, 6) == (9, 10, 11)\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_nth_element([(1,2), (3,4), (5,6), (7,8), (9,10), (11,12)], 0) == 1\nassert     extract_nth_element([(1,2), (3,4), (5,6), (7,8), (9,10), (11,12)], 2) == (11, 12)\nassert     extract_nth_element([(1,2), (3,4), (5,6), (7,8), (9,10), (11,12)], 1) == (3, 4)\nassert     extract_nth_element([(1,2), (3,4), (5,6), (7,8), (9,10), (11,12)], 3) == (5, 6)\nassert     extract_nth_element([(1,2), (3,4), (5,6), (7,8), (9,10), (11,12)], 4) == (7, 8)\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint('-'*80)\n\ndef extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    pass\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_nth_element([('a', 1), ('b', 2), ('c', 3)], 1) == ('a', 1)\nassert     extract_nth_element([('a', 1), ('b', 2), ('c', 3)], 2) == ('b', 2)\nassert     extract_nth_element([('a', 1), ('b', 2), ('c', 3)], 3) == ('c', 3)\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     overlapping([1,2,3],[2,3,4]) == True, \"Should be True\"\nassert     overlapping([1,2,3],[1,2]) == False, \"Should be False\"\nassert     overlapping([1,2,3],[1,3]) == True, \"Should be True\"\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     overlapping([1,2,3,5,8,13,17,23,31,43,67,89,99], [2,3,5,8,11,12,14,16,18,19,22,29,30]) == True\nassert     overlapping([1,2,3,5,8,13,17,23,31,43,67,89,99], [2,3,5,8,11,12,14,16,18,19,22,29,30]) == False\nassert     overlapping([1,2,3,5,8,13,17,23,31,43,67,89,99], [1,2,3,4,5,6,7,8,9,10,11,12,13]) == True\nassert     overlapping([1,2,3,5,8,13,17,23,31,43,67,89,99], [1,2,3,4,5,6,7,8,9,10,11,12,13]) == False\nassert     overlapping([1,2,3,5,8,13,17,23,31,43,67,89,99], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \noverlapping([1,3,5,7],[1,2,3,4,6,7]) == True\nassert \noverlapping([1,2,3],[1,2,3]) == True\nassert \noverlapping([1,2,3],[1,2,3,4,5,6,7]) == False\nassert \noverlapping([1,2,3],[1,2,3,4,6,7]) == True\nassert \noverlapping([1,2,3],[1,2,3,4,5,6,7]) == False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert overlapping([1, 2, 3], [1, 2, 3]) == True, \"Should be True\"\nassert overlapping([1, 2, 3], [1, 2, 4]) == False, \"Should be False\"\nassert overlapping([1, 2, 3], []) == False, \"Should be False\"\nassert overlapping([1, 2, 3], ['a', 'b', 'c']) == False, \"Should be False\"\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    assert overlapping([1,2,3,4,5],['a','b','c','d','e']) == False\n    assert overlapping([1,2,3,4,5],['a','b','c','d','e']) == True\n    assert overlapping([1,2,3,4,5],['a','b','c','d','e']) == True\n    assert overlapping([1,2,3,4,5],['a','b','c','d','e']) == True\n    "
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     overlapping([3,2,1], [2,1,3,5]) == True\nassert     overlapping([3,2,1], [1,3,5]) == True\nassert     overlapping([3,2,1], [1,3]) == False\nassert     overlapping([1,2,3,4], [3,2,1]) == True\nassert     overlapping([1,2,3,4], [4,3,2,1]) == False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     (overlapping([1,2,3,4,5],[1,2,3]) == True), \"overlapping([1,2,3,4,5],[1,2,3])!= True\"\nassert     (overlapping([1,2,3,4,5],[3,4,5]) == True), \"overlapping([1,2,3,4,5],[3,4,5])!= True\"\nassert     (overlapping([1,2,3,4,5],[1,3,4]) == True), \"overlapping([1,2,3,4,5],[1,3,4])!= True\"\nassert     (overlapping([1,2,3,4,5],[1,2,4]) == False), \"overlapping([1,2,3,4,5],[1,2,4]) == False\"\nassert     (overlapping([1,2,3,4,5],[5]) == False), \"overlapping([1,2,3,4,5],[5]) == False\"\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     overlapping([1,2,3], [2,3,4]) == True, \"Should return True\"\nassert     overlapping([1,2,3], [1,2,3]) == True, \"Should return True\"\nassert     overlapping([1,2,3], [3,4]) == False, \"Should return False\"\nassert     overlapping([1], [1]) == True, \"Should return True\"\nassert     overlapping([1,2], [1,2,3]) == False, \"Should return False\"\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     overlapping([1,2,3,4,5,6],    [1,2,3,5,6,7]) == True, \\\n\"1,2,3,4,5,6\"\nassert     overlapping([1,2,3,4,5,6],    [6,7,8]) == False, \\\n\"1,2,3,4,5,6,7\"\nassert     overlapping([1,2,3,4,5,6,7],    [1,2,3,5,6,7]) == True, \\\n\"1,2,3,4,5,6,7\"\nassert     overlapping([1,2,3,4,5,6,7],    [6,7,8,9]) == False, \\\n\"1,2,3,4,5,6,7,8\"\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     (overlapping([0,1,2,3], [0,2,5])), \"The values 0,2,5 should be in the list\"\nassert     (overlapping([0,1,2,3], [3])), \"The values 3 should be in the list\"\nassert     (overlapping([0,1,2,3,4,5], [4,5])), \"The values 4 and 5 should be in the list\"\nassert     (overlapping([0,1,2,3,4,5,6], [4,5])), \"The values 4 and 5 should be in the list\"\nassert     (overlapping([0,1,2,3,4,5,6], [0,6])), \"The values 0 and 6 should be in the list\"\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_Product([-2, -3, -4, -5]) == (-2, -4)\nassert     max_Product([-2, -3, -5, -4]) == (-2, -5)\nassert     max_Product([-2, -3, -4, -5]) == (-2, -5)\nassert     max_Product([-1, -3, -4, -5]) == (-1, -5)\nassert     max_Product([-1, -3, -4, -5]) == (-1, -5)\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_Product([1,2,3,4,5]) == (3,4), 'the second element should be 4'\nassert max_Product([10,20,3,4,5]) == (10,20), 'the product is 10x20'\nassert max_Product([5,1,7,2,8]) == (8,20), 'the product is 20x7'\n\ndef max_Product_1(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    pass\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef count_Pair(arr, s): \n    '''\n    Write a python function to count the number of pair that has maximum product from the given array of integers. \n    The output should be in form of dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \narr = [1,2,3,4,5,6,7]\nassert max_Product(arr) == 18\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_Product([10, 1, 5, 6, 4, 2]) == (10, 6), \"Wrong\"\nassert     max_Product([10, 1, 5, 6, 4, 2, 3]) == (10, 6), \"Wrong\"\nassert     max_Product([-9, -9, -9, -9, -9]) == (-9, -9), \"Wrong\"\nassert     max_Product([2, 4, 5, 6, -10, -1, -2]) == (-2, 10), \"Wrong\"\nassert     max_Product([1, 1, 1, 1, 1, 1, 1]) == (1, 1), \"Wrong\"\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_Product([1,2,-3,4,5])==(-3,-3),'This should be (-3,-3)'\nassert     max_Product([1,-2,3,-4,5])==(-2,6),'This should be (-2,6)'\nassert     max_Product([-1,2,-3,4,-5])==(4,4),'This should be (4,4)'\nassert     max_Product([1,2,3,4,5])==(2,3),'This should be (2,3)'\nassert     max_Product([-1,2,3,4,5])==(4,3),'This should be (4,3)'\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_Product([1, 4, 6, 8, 9]) == 9\nassert     max_Product([-1, 5, 9, 10, -3]) == -3\nassert     max_Product([-100, -4, -4, -4, 0]) == 0\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     group_tuples([(1,2,3),(1,2,3),(1,2,3)]) == 1\nassert group_tuples([(1,2,3),(1,2,3),(2,3,4)]) == 2\nassert group_tuples([(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(1,2,3),(2,3,4)]) == 1\nassert group_tuples([(1,2,3),(1,2,3),(2,3,4)]) == 3\n\ndef count_common_elements(Input):\n    '''\n    Write a function to find count of common elements in given list of tuple.\n    '''\n    pass\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     group_tuples([(1, 2), (3, 4), (1, 2), (1, 2)]) == 1\nassert     group_tuples([(1, 2), (3, 4), (1, 1), (1, 2)]) == -1\nassert     group_tuples([(1, 2), (3, 4), (1, 2), (1, 2)]) == -1\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     group_tuples([(1,1),(2,1),(3,1),(1,2)]) == 2\nassert     group_tuples([(2,1),(3,1),(1,2)]) == 2\nassert     group_tuples([(3,1),(1,2),(2,1)]) == 1\nassert     group_tuples([(1,2),(3,1),(1,1)]) == 0\nassert     group_tuples([(1,1),(1,2),(2,1),(3,1)]) == 0\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef num_of_even_num_in_list(List):\n    '''\n    Write a function to find the number of even numbers in a list.\n    '''\n    pass\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     group_tuples([(1,1),(1,2),(2,1)]) == 1, \"error\"\nassert group_tuples([(1,1),(1,2),(1,3)]) == 1, \"error\"\nassert group_tuples([(1,1),(2,1),(1,3)]) == 1, \"error\"\nassert group_tuples([(1,1),(2,2),(1,3)]) == 1, \"error\"\nassert group_tuples([(1,1),(1,2),(2,3)]) == 1, \"error\"\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     group_tuples([(1, 2), (3, 4), (1, 2), (5, 6)])     ==     [(1, 2), (5, 6)]\nassert     group_tuples([(1, 2, 3), (4, 5), (6, 7), (8, 9)])     ==     [(1, 2, 3), (6, 7), (8, 9)]\nassert     group_tuples([(1,), (2,), (3,), (4,)])     ==     [(1,), (2,), (3,), (4,)]\nassert     group_tuples([(1,), (2,), (3,), (4,)])     ==     [(1,), (2,), (3,), (4,)]\nassert     group_tuples([(1,), (2,), (3,), (4,)])     ==     [(1,), (2,), (3,), (4,)]\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     group_tuples([('green', '#00ff00'), ('red', '#ff0000'), ('red', '#ff0000')]) =='red'\nassert     group_tuples([('blue', '#0000ff'), ('blue', '#0000ff')]) == 'blue'\nassert     group_tuples([('green', '#00ff00'), ('green', '#00ff00')]) == 'green'\nassert     group_tuples([('red', '#ff0000'), ('red', '#ff0000')]) =='red'\nassert     group_tuples([('blue', '#0000ff'), ('blue', '#0000ff'), ('blue', '#0000ff')]) == 'blue'\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     group_tuples([(\"Mark\", 95), (\"Kirill\", 85), (\"Alex\", 75)]) == (\"Mark\", 95)\nassert     group_tuples([(\"Mark\", 95), (\"Kirill\", 85), (\"Alex\", 75)]) == (\"Alex\", 75)\nassert     group_tuples([(\"Mark\", 95), (\"Kirill\", 85), (\"Alex\", 75)]) == (\"Mark\", 95)\nassert     group_tuples([(\"Mark\", 95), (\"Kirill\", 85), (\"Alex\", 75)]) == (\"Alex\", 75)"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert group_tuples([(1,2),(3,4),(5,6),(7,8)]) == (1, 3)\n\nassert group_tuples([(5,6),(7,8),(3,4),(1,2)]) == (1, 3, 5, 7)"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     group_tuples([(1,2),(3,4),(5,6)]) == 1\nassert     group_tuples([(1,2),(3,4),(5,6),(4,5)]) == 2\nassert     group_tuples([(1,2),(3,4),(5,6),(4,5),(1,2)]) == 3\n\n\ndef has_duplicates(list_of_numbers):\n    '''\n    Write a function which takes a list of numbers and returns True if it has\n    at least one duplicate and False otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Find_Max(['e', 'i', 'e']) == 'e'\nassert     Find_Max(['t', 'c', 'i', 'i', 'e']) == 'e'\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Find_Max([]) == None\nassert     Find_Max([1,2,3]) == 1\nassert     Find_Max([-3,-2,-1]) == -1\nassert     Find_Max([1,1,1]) == 1\nassert     Find_Max([1,2,3,4]) == 3\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     Find_Max([1,2,3,4,5,6]) == 6, \"test case failed\"\nassert     Find_Max([1,2,3,4,5,6,6]) == 6, \"test case failed\"\nassert     Find_Max([]) == None, \"test case failed\"\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Find_Max([1,2,3,4])==3\nassert     Find_Max([1,2,3,4,5,6])==6\nassert     Find_Max([1,2,3,4,5,6,8])==8\nassert     Find_Max([1,2,3,4,5,6,8,1,2,3,4,5,6])==6\nassert     Find_Max([-1,2,3,4,5,6,-1,2,3,4,5,6])==6\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Find_Max([1,2,3,4,5]) == 5, \"Wrong output\"\nassert     Find_Max([1,2,3,4,5,6]) == 5, \"Wrong output\"\nassert     Find_Max([1,2,3,4,5,6,7]) == 5, \"Wrong output\"\nassert     Find_Max([1,2,3,4,5,6,7,8]) == 5, \"Wrong output\"\nassert     Find_Max([1,2,3,4,5,6,7,8,9]) == 5, \"Wrong output\"\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Find_Max([1, 2, 3, 4, 5]) == 5\nassert     Find_Max([1, 2, 3, 4, 5, 6]) == 6\nassert     Find_Max([1, 2, 3, 4, 5, 6, 7]) == 7\nassert     Find_Max([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 8\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Find_Max([]) == None\nassert Find_Max([1,2]) == 2\nassert Find_Max([2,3,4]) == 4\nassert Find_Max([4,2,3]) == 4\nassert Find_Max([5,6,7,8,9]) == 9\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     round_and_sum([4.56, 7.54, 12.34]) == 938, 'passing and failing'\nassert round_and_sum([0, 5.56, 6.54, 7.54]) == 110, 'passing and failing'\nassert round_and_sum([4.56, 7.54, 12.34]) == 1298, 'passing and failing'"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nround_and_sum([1, 2, 3, 4]) == 14\nround_and_sum([.12,.12]) ==.0\nround_and_sum([.3,.3]) ==.0\nround_and_sum([2,2,2,2,2]) == 4\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     round_and_sum([4.5, -7.8, 5.4, 2.7]) == 22\nassert     round_and_sum([-4.5, 5.4, -8.0, -2.7]) == 0\nassert     round_and_sum([-7.8, -4.5, 5.4, 2.7]) == -22\nassert     round_and_sum([-7.8, -5.4, 5.4, -2.7]) == 22\nassert     round_and_sum([-4.5, -5.4, 5.4, -2.7]) == -22\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nround_and_sum([0,3,2,6,3,5,2,7,2,1]) == 6*10, 'incorrect'\nassert \nround_and_sum([1,1,1,2,2,2,2,2,2,2,2]) == 6*11, 'incorrect'\nassert \nround_and_sum([1,1,1,1,1,1,1,1,1,1,1]) == 6*12, 'incorrect'\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nround_and_sum([1,2,3,4,5]) == (1+2+3+4+5)\nprint(\"You have passed this test\")"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     round_and_sum([1,2,3,4]) == 15\nassert     round_and_sum([2.2,3.4,4.5,5.6,6.7]) == 62\nassert     round_and_sum([-4,-2,0,2,4]) == 30\nassert     round_and_sum([1.1,2.2,3.3,4.4]) == 33\nassert round_and_sum([1.0,2.0,3.0,4.0]) == 40\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nround_and_sum([1.5,2.5,3.5]) == 0\nround_and_sum([1, 2, 3, 4, 5]) == 40\nround_and_sum([1.5, 2.5, 3.5, 4.5, 5]) == 0\nround_and_sum([1, 2, 3, 4, 5, 5]) == 45\nround_and_sum([1.5, 2.5, 3.5, 4.5, 5, 5, 5]) == 0\nround_and_sum([0, -1, -2, -3, -4, -5, -6, -7, -8, -9]) == -280\n\ndef find_missing_numbers(arr):\n    '''\n    Write a function to find the missing numbers of a given array.\n    '''\n    pass\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nround_and_sum([3, 4.2, 5, 0])\nround_and_sum([3, 4.2, 5, -3])\nround_and_sum([3, 4.2, 5, -3.4])\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     cube_Sum(3) == 18, 'Cube Sum'\nassert     cube_Sum(8) == 36, 'Cube Sum'\nassert     cube_Sum(25) == 729, 'Cube Sum'\nassert     cube_Sum(32) == 948, 'Cube Sum'\nassert     cube_Sum(35) == 1288, 'Cube Sum'\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ncube_Sum(2) == 8, \"cube_Sum(2) is wrong\"\ncube_Sum(4) == 27, \"cube_Sum(4) is wrong\"\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ncube_Sum(1) == 1\ncube_Sum(2) == 1\ncube_Sum(3) == 6\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ncube_Sum(10)==40320\ncube_Sum(100)==2520360\ncube_Sum(1)==1\n\ndef my_count(string, substr):\n    count = 0\n    for i in range(len(string)-len(substr)):\n        if(string[i:i+len(substr)]==substr):\n            count+=1\n    return count\n\nassert my_count(\"baaaabaaaaabaaaaaabbaaaaaabaaabaaaaabaaaaaaabaaaaaabaaabaaaaaabbaaaaaabaaabaaaaaabaaaaaabaaaaaabaaaaaabaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaabaaaaaa"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     cube_Sum(1) == 1\nassert     cube_Sum(2) == 8\nassert     cube_Sum(3) == 27\nassert     cube_Sum(4) == 64\nassert     cube_Sum(5) == 125\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ncube_Sum(5) == [0,12,28,46,72]\ncube_Sum(10) == [0,12,28,46,72,108,144,216,324,360]\ncube_Sum(100) == [0,12,28,46,72,108,144,216,324,360,576,784,1296,1824,2532,3616,4992,6400,8720,12928,18496,21600,25152,33792,46400,6144,78400,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12928,19200,25760,33792,51360,65152,90640,12"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ncube_Sum(10) == 4\n\ndef cube_Sum_r(n):\n    \"\"\"\n    Return the cube sum of first n even natural numbers.\n    \"\"\"\n    return sum([i*i*i for i in range(1,n+1) if i%2==0])\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ncube_Sum(1) == 3\ncube_Sum(3) == 27\ncube_Sum(5) == 243\ncube_Sum(7) == 576\ncube_Sum(9) == 7776"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n'''\nConcatenate a tuple of tuple into one tuple.\nExample :\nIf t1 = (1, 2, 3, 4, 5), t2 = (6, 7, 8, 9, 10), then t3 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n'''\ndef concatenate_tuple_tup(tup):\n    '''\n    Write a function to concatenate a tuple of tuple into one tuple.\n    '''\n    pass\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     concatenate_tuple((\"1\", \"2\", \"3\", \"4\")) == \"1 2 3 4\", \"First Test Fail\"\nassert     concatenate_tuple((\"5\", \"6\", \"7\", \"8\")) == \"5 6 7 8\", \"Second Test Fail\"\nassert     concatenate_tuple((\"9\", \"10\", \"11\", \"12\")) == \"9 10 11 12\", \"Third Test Fail\"\nassert     concatenate_tuple((\"13\", \"14\", \"15\", \"16\")) == \"13 14 15 16\", \"Fourth Test Fail\"\nassert     concatenate_tuple((\"17\", \"18\", \"19\", \"20\")) == \"17 18 19 20\", \"Fifth Test Fail\"\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     concatenate_tuple([1,2,3]) == '1\\n2\\n3', '1'\nassert    concatenate_tuple(['a','b','c']) == 'a\\nb\\nc', '2'\nassert    concatenate_tuple(('a','b','c')) == 'a\\nb\\nc', '3'\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     concatenate_tuple((1, 2, 3, 4)) == \"1|2|3|4\", \"Should return 1|2|3|4\"\nassert     concatenate_tuple(('a', 'b', 'c', 'd')) == 'a|b|c|d', \"Should return a|b|c|d\"\nassert     concatenate_tuple(('a', 'b', 'c', 'd')) == 'a|b|c|d', \"Should return a|b|c|d\"\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     concatenate_tuple(('a', 'b')) == 'a;b'\nassert     concatenate_tuple(('a', 'b', 'c')) == 'a;b;c'\nassert     concatenate_tuple(('a', 'b', 'c', 'd')) == 'a;b;c;d'\nassert     concatenate_tuple(('a', 'b', 'c', 'd', 'e')) == 'a;b;c;d;e'\nassert     concatenate_tuple(('a', 'b', 'c', 'd', 'e', 'f')) == 'a;b;c;d;e;f'\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     concatenate_tuple( ('a', 'b', 'c') ) == 'abc'\nassert     concatenate_tuple( ('a', 'b', 'c', 'd') ) == 'a,b,c,d'\nassert     concatenate_tuple( ('a', 'b', 'c', 'd', 'e') ) == 'a,b,c,d,e'\nassert     concatenate_tuple( ('a', 'b', 'c', 'd', 'e', 'f') ) == 'a,b,c,d,e,f'\nassert     concatenate_tuple( ('a', 'b', 'c', 'd', 'e', 'f', 'g') ) == 'a,b,c,d,e,f,g'\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     concatenate_tuple(('q', 'u','s','', 'a', 'n')) == 'qusan'\nassert     concatenate_tuple((1, 2, 3, 4, 5, 6, 7, 8, 9)) == '12345678'\nassert     concatenate_tuple((9, 8, 7, 6, 5, 4, 3, 2, 1)) == '9012345678'"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     concatenate_tuple(('a','b','c','d','e','f')) == 'a,b,c,d,e,f', 'function does not work'\nassert     concatenate_tuple(('a','b')) == 'a,b', 'function does not work'\nassert     concatenate_tuple(('a','b','c','d','e','f')) == 'a,b,c,d,e,f', 'function does not work'\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Average_Of_Cube(3) == 0, \"First should be 0\"\nassert     find_Average_Of_Cube(8) == 8, \"Second should be 8\"\nassert     find_Average_Of_Cube(10) == 5, \"Third should be 5\"\nassert     find_Average_Of_Cube(20) == 10, \"Fourth should be 10\"\nassert     find_Average_Of_Cube(35) == 23, \"Fifth should be 23\"\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Average_Of_Cube(1) == 1\nassert     find_Average_Of_Cube(2) == 1\nassert     find_Average_Of_Cube(5) == 1\nassert     find_Average_Of_Cube(10) == 1\nassert     find_Average_Of_Cube(20) == 1\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Average_Of_Cube(4) == 8\nassert    find_Average_Of_Cube(1) == 1\nassert    find_Average_Of_Cube(0) == 0"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Average_Of_Cube(1)     == 1, \"fail\"\nassert     find_Average_Of_Cube(3)     == 1, \"fail\"\nassert     find_Average_Of_Cube(5)     == 1, \"fail\"\nassert     find_Average_Of_Cube(9)     == 1, \"fail\"\nassert     find_Average_Of_Cube(13)     == 1, \"fail\"\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_Average_Of_Cube(1) == 0\nassert     find_Average_Of_Cube(2) == 1\nassert     find_Average_Of_Cube(3) == 1\nassert     find_Average_Of_Cube(4) == 1\nassert     find_Average_Of_Cube(5) == 1\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_Average_Of_Cube(10) == 28.0\nassert     find_Average_Of_Cube(20) == 64.0\nassert     find_Average_Of_Cube(30) == 92.0\nassert     find_Average_Of_Cube(40) == 128.0\nassert     find_Average_Of_Cube(50) == 176.0"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef find_Average_Of_Cube_Problem(n):\n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    Problem:\n    https://www.hackerrank.com/challenges/find-the-average/problem?isFullScreen=true\n    '''\n    pass\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nfind_Average_Of_Cube(1)==1\nassert \nfind_Average_Of_Cube(2)==1\nassert \nfind_Average_Of_Cube(4)==2\nassert \nfind_Average_Of_Cube(8)==4\nassert \nfind_Average_Of_Cube(100)==50\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_rear((1, 2, 3, 4, 5, 6, 7)) == (2, 5, 8)\nassert extract_rear((3, 5, 6, 7, 8, 7, 6)) == (3, 8)\nassert extract_rear((7, 6, 5, 4, 3, 2, 1)) == (7, 6)\nassert extract_rear((8, 7, 6, 5, 4, 3, 2)) == (8, 6)\nassert extract_rear((2, 3, 4, 5, 6, 7, 8)) == (2, 5, 8)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_rear(('abc', 'cde', 'xyz', 'abc')) == ('xyz',)\nassert     extract_rear(('abc', 'cde', 'xyz', 'abc', 'abc')) == ('xyz',)\nassert     extract_rear(('abc', 'cde', 'xyz', 'abc', 'abc', 'abc')) == ('xyz',)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_rear(('1', '2', '3', '4', '5')) ==     (5, 4, 3, 2, 1)\nassert     extract_rear(('abcd', '1234', 'abcd')) ==     (4, '1234', 'abcd')\nassert     extract_rear(('abcd', '1234', 'abcd', 'xyz', '1234')) ==     (4, '1234', 'abcd')\nassert     extract_rear(('abc', '1234', 'abcd', 'xyz', '1234')) ==     ('abc', '1234', 'abcd')\n\ndef extract_front(test_tuple):\n    '''\n    Write a function to extract only the front index element of each string in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    extract_rear((\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\")) == ('b', 'g', 'h')\n    extract_rear((\"vijay\",\"dagm\",\"vijay\",\"vijay\",\"vijay\",\"vijay\",\"vijay\",\"vijay\")) == ('dagm', 'vijay', 'vijay', 'vijay')\n    extract_rear((\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\")) == ('', '', '')\n    extract_rear((\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\")) == ('', '', '')\n    extract_rear((\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\")) == ('', '', '')\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_rear(('apple', 'd', 'f', 'g')) == ('d', 'f', 'g')\nassert     extract_rear(('apple', 'd', 'f', 'g', 'h')) == ('d', 'f', 'g')\nassert     extract_rear(('apple', 'd', 'f', 'g', 'h', 'i')) == ('d', 'f', 'g', 'h')\nassert     extract_rear(('apple', 'd', 'f', 'g', 'h', 'i', 'j')) == ('d', 'f', 'g', 'h')\nassert     extract_rear(('apple', 'd', 'f', 'g', 'h', 'i', 'j', 'k')) == ('d', 'f', 'g')\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_rear(('abcde','abc','defg','d')) == 'd'\nassert     extract_rear(('','')) == ''\nassert     extract_rear(('',None)) == None\nassert     extract_rear(('ab','abc','de')) == 'de'\nassert     extract_rear(('abc','abc','defg','d')) == 'd'\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef extract_index(test_tuple):\n    '''\n    Write a function to extract only the index element of each string in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_rear(('google.com', 'facebook.com', 'twitter.com')) == ('google.com', 'facebook.com', 'twitter.com')\nassert     extract_rear(('google.com', 'facebook.com', 'twitter.com')) == ('twitter.com',)\nassert     extract_rear(('google.com', 'facebook.com')) == ('facebook.com',)\nassert     extract_rear(('google.com')) == ('google.com',)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_rear((\"T\", \"e\", \"s\", \"T\", \"r\", \"e\")) == (\"e\", \"s\")\nassert     extract_rear((\"T\", \"e\", \"s\", \"T\", \"r\", \"e\", \"T\", \"r\", \"e\")) == (\"e\", \"s\", \"e\", \"s\")\nassert     extract_rear((\"T\", \"e\", \"s\", \"T\", \"r\", \"e\", \"T\", \"r\", \"e\", \"T\", \"r\", \"e\", \"T\", \"r\", \"e\", \"T\", \"r\", \"e\", \"T\", \"r\", \"e\", \"T\", \"r\", \"e\", \"T\", \"r\", \"e\", \"T\", \"r\", \"e\")) == (\"e\", \"s\", \"e\", \"s\", \"e\", \"s\", \"e\", \"s\", \"e\", \"s\", \"e\", \"s\", \"e\")\n\n\ndef extract_middle(test_tuple):\n    '''\n    Write a function to extract only the middle index element of each string in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_rear((\"mumbai\",\"banglore\",\"delhi\")) == (\"delhi\",\"banglore\",\"mumbai\")\nassert     extract_rear((\"mumbai\",\"ram\",\"dhaka\")) == (\"dhaka\",\"ram\",\"mumbai\")\nassert     extract_rear((\"mumbai\",\"cgpa\",\"dhaka\")) == (\"dhaka\",\"cgpa\",\"mumbai\")\nprint(\"You passed the test\""
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_element_in_list([[1],2,3], 3) == 1\nassert     count_element_in_list([[1],2,3], 2) == 2\nassert     count_element_in_list([[1],2,3], 1) == 0\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(\"The result of count_element_in_list is: \", count_element_in_list([[1, 2, 3], 3, 4, 5], 3))\nprint(\"The result of count_element_in_list is: \", count_element_in_list([[1, 2, 3], 3, 4, 5], 5))\nprint(\"The result of count_element_in_list is: \", count_element_in_list([[1, 2, 3], 3, 4, 5], 1))\nprint(\"The result of count_element_in_list is: \", count_element_in_list([[1, 2, 3], 3, 4, 5], 10))\nprint(\"The result of count_element_in_list is: \", count_element_in_list([[1, 2, 3], 3, 4, 5], 2))\nprint(\"The result of count_element_in_list is: \", count_element_in_list([[1, 2, 3], 3, 4, 5], 4))\nprint(\"The result of count_element_in_list is: \", count_element_in_list([[1, 2, 3], 3, 4, 5], 6))\nprint(\"The result of count_element_in_list is: \", count_element_in_list([[1, 2, 3], 3, 4, 5], -1))\nprint(\"The result of count_element_in_list is: \", count_element_in_list([[1, 2, 3], 3, 4, 5], -5))\nprint(\"The result of count_element_in_list is: \", count_element_in_list([[1, 2, 3], 3, 4, 5], -10))\nprint(\"The result of count_element_in_list is: \", count_element_in_list([[1, 2, 3], 3, 4, 5], -100))\n\n\n'''\nGiven a list of strings, \nreturn the average length of the strings.\n'''\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_element_in_list([1,2,3], 2) == 2\nassert count_element_in_list([1,2,3], 3) == 1\nassert count_element_in_list([1,2,3,4], 4) == 1\nassert count_element_in_list([1,2,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_element_in_list([[], \n                                    [1, 2, 3, 5], \n                                    [1, 2, 3, 4], \n                                    [1, 2, 3, 4, 5], \n                                    [1, 2, 3, 4, 5, 7, 8]], \n                                    4) == 4, \"Wrong\"\n\nassert     count_element_in_list([[], \n                                    [1, 2, 3, 5], \n                                    [1, 2, 3, 4], \n                                    [1, 2, 3, 4, 5], \n                                    [1, 2, 3, 4, 5, 7, 8]], \n                                    7) == 0, \"Wrong\"\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef count_element_in_list(list1, x):\n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for l in list1:\n        if l == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert count_element_in_list([1,2,3], 1) == 2\nassert count_element_in_list([1,2,3,1], 1) == 2\nassert count_element_in_list([1,2,3,1], 2) == 1\nassert count_element_in_list([1,2,3,1], 3) == 0\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_element_in_list(list_1, 5) == 3\nassert     count_element_in_list(list_1, 10) == 0\nassert     count_element_in_list(list_1, 20) == 1\nassert     count_element_in_list(list_1, -5) == 1\nassert     count_element_in_list(list_1, 3.14) == 0\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert count_element_in_list([], 'a') == 0\nassert count_element_in_list([1, 2, 3], 1) == 2\nassert count_element_in_list([1, 2, 3], 4) == 0\n\nprint(\"passed all tests\")\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     filter_oddnumbers([1,2,3,4,5,6,7,8,9]) == [1,3,5,7,9]\nassert     filter_oddnumbers([10,12,12,14,14,16]) == [10,12,14,16]\nassert     filter_oddnumbers([3,5,10]) == []\nassert     filter_oddnumbers([]) == []\nassert     filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == []\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     filter_oddnumbers([10,15,20]) == [15,20]\nassert     filter_oddnumbers([1,2,3]) == []\nassert     filter_oddnumbers([1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9]\nassert     filter_oddnumbers([]) == []\nprint('Passed all tests.')"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef filter_evennumbers(nums):\n    '''\n    Write a function to filter even numbers.\n    '''\n    pass\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     filter_oddnumbers([]) == []\nassert     filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9, 10]\nassert     filter_oddnumbers([10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == [11, 13, 15, 17, 19]\nassert     filter_oddnumbers([2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef filter_oddnumbers_1(nums):\n    '''\n    Write a filter function to filter odd numbers in a list\n    '''\n    pass\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef filter_evennumbers(nums):\n    '''\n    Write a function to filter even numbers.\n    '''\n    pass\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     filter_oddnumbers([1,2,3,4,5,6,7,8,9]) == [1,3,5,7,9]\nassert     filter_oddnumbers([2,4,5,6,8,9,12]) == [4,8,12]\nassert     filter_oddnumbers([]) == []\nassert     filter_oddnumbers([0,1]) == [0,1]\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert filter_oddnumbers([1,2,3,4,5]) == [1,3,5], \"Filtering list\"\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     filter_oddnumbers([1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9]\nassert     filter_oddnumbers([10,2,3,4,5,6,7,8,9,10]) == []\nassert     filter_oddnumbers([1,2,3,4,5,6,7,8,9,10,11]) == [11]\nassert     filter_oddnumbers([1,2,3,4,5,6,7,8,9,10,11,12]) == [11]\nassert     filter_oddnumbers([1,2,3,4,5,6,7,8,9,10,11,12,13]) == [13]\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     change_date_format('20-04-20') == '20-04-20'\nassert     change_date_format('12-05-2020') == '12-05-2020'\nassert     change_date_format('5-5-2020') == '05-05-2020'\nassert     change_date_format('9-5-2020') == '9-05-2020'\nassert     change_date_format('2-4-2020') == '2-04-2020'\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     change_date_format('2020-01-01') == '01-01-2020'\nassert     change_date_format('2020-01-1') == '01-01-2020'\nassert     change_date_format('2020-02-29') == '29-02-2020'\nassert     change_date_format('2020-02-28') == '28-02-2020'\nassert     change_date_format('2020-03-31') == '31-03-2020'\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     change_date_format('2017-01-21') == '21-01-2017'\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     change_date_format('2019-01-15')    ==    '15-01-2019', \"Expected: 15-01-2019, Actual: %s\" %(change_date_format('2019-01-15'))\nassert     change_date_format('2019-01-01')    ==    '01-01-2019', \"Expected: 01-01-2019, Actual: %s\" %(change_date_format('2019-01-01'))\n\ndef days_difference(d1, d2):\n    '''\n    Write a function to calculate the number of days between two dates.\n    '''\n    pass\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     change_date_format('2015-09-21') == '21-09-2015'\nassert     change_date_format('2015-09-21t00:00:00Z') == '21-09-2015'\nassert     change_date_format('2015-09-21T00:00:00Z') == '21-09-2015'\nassert     change_date_format('2015-09-21 00:00:00') == '21-09-2015'\nassert     change_date_format('2015-09-21 0:00:00') == '21-09-2015'\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     change_date_format(\"2019-03-26\") == \"26-03-2019\"\n\ndef check_if_number_in_string(string, num):\n    '''\n    Write a function to check if a particular number is in a string.\n    '''\n    pass\n\nassert     check_if_number_in_string(\"this is a test of this function\", 1) == True\nassert     check_if_number_in_string(\"this is a test of this function\", 11) == False\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     change_date_format(\"2020-02-07\") == \"07-02-2020\"\nassert     change_date_format(\"2020-01-09\") == \"09-01-2020\"\nassert     change_date_format(\"2020-12-30\") == \"30-12-2020\"\nassert     change_date_format(\"2020-04-30\") == \"30-04-2020\"\nassert     change_date_format(\"2020-06-30\") == \"30-06-2020\"\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     change_date_format(\"03-04-19\") == \"03-04-19\"\nassert     change_date_format(\"13-03-19\") == \"13-03-19\"\nassert     change_date_format(\"13-03-20\") == \"13-03-20\"\nassert     change_date_format(\"13-03-23\") == \"13-03-23\"\nassert     change_date_format(\"13-03-24\") == \"13-03-24\"\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     change_date_format('2015-12-20') == '20-12-2015'\nassert     change_date_format('20-12-2015') == '20-12-2015'\nassert     change_date_format('2015-1-1') == '1-1-2015'\nassert     change_date_format('1-1-2015') == '1-1-2015'\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     change_date_format('2020-10-12') == '12-10-2020'\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     shell_sort([2,4,5,6,1,9,8,7,10]) ==    [1,2,4,5,6,7,8,9,10]\nassert     shell_sort([3,4,5,6,1,2,7,8,10,9]) ==    [1,2,3,4,5,6,7,8,9,10]\nassert     shell_sort([10,9,8,7,6,5,4,3,2,1]) ==    [1,2,3,4,5,6,7,8,9,10]\n\n\n\n\ndef shell_sort_no_space(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     shell_sort([1, 2, 5, 4, 8]) == [1, 2, 4, 5, 8]\nassert shell_sort([1, 4, 5, 8, 3, 7, 6]) == [1, 3, 4, 6, 7, 5, 8]\nassert shell_sort([]) == []\nassert shell_sort([0]) == [0]\nassert shell_sort([-3, -2, -1]) == [-3, -2, -1]\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef bucket_sort(my_list):\n    '''\n    Write a function to sort the given array by using bucket sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     shell_sort([3, 2, 4, 6, 1, 7, 8, 5, 9, 10, 2, 1]) == [1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     and_tuples((1, 3, 4), (2, 3, 5)) == (2, 3, 3)\nassert     and_tuples((1, 2, 3), (3, 5, 9)) == (1, 2, 3)\nassert     and_tuples((3, 5, 7), (2, 3, 8)) == (3, 3, 7)\nassert     and_tuples((1, 2, 4), (3, 4, 8)) == (1, 2, 4)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     and_tuples(((1, 2), (3, 4)), ((1, 2), (4, 5))) == (False, False)\nassert     and_tuples(((1, 2), (3, 4)), ((1, 2), (4, 5))) == (True, True)\nassert     and_tuples(((1, 2), (3, 4)), ((1, 2), (3, 4))) == (True, False)\nassert     and_tuples(((1, 2), (3, 4)), ((2, 2))) == (False, False)\nassert     and_tuples(((1, 2), (3, 4)), ((1, 1))) == (False, True)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(\"Pass\" if ((1, 2) == (2, 1)) else \"Fail\")\nprint(\"Pass\" if ((2, 2, 3, 4) == (2, 3, 4, 2)) else \"Fail\")\nprint(\"Pass\" if ((1, 2, 3, 4, 5) == (2, 3, 4, 5, 1)) else \"Fail\")\nprint(\"Pass\" if ((1, 2, 3, 4, 5, 6) == (2, 3, 4, 5, 6, 1)) else \"Fail\")\nprint(\"Pass\" if ((5, 6, 7, 8) == (6, 7, 8, 5)) else \"Fail\")\nprint(\"Pass\" if ((1, 2, 3, 4, 5, 6, 7, 8) == (2, 3, 4, 5, 6, 7, 8, 1)) else \"Fail\")"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     and_tuples((1, 2), (3, 4)) == (1, 3), \"and_tuple_fail\"\nassert     and_tuples((2, 5), (1, 2)) == (2, 2), \"and_tuple_fail\"\nassert     and_tuples((1, 2), (4, 5)) == (1, 2), \"and_tuple_fail\"\nassert     and_tuples((2, 5), (1, 2)) == (2, 5), \"and_tuple_fail\"\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     and_tuples((1,2),(3,4)) == ((1,3),(2,4))\nassert     and_tuples((1,2),(5,6)) == ((1,5),(2,6))\nassert     and_tuples((1,2),(3,4,5,6)) == ((1,3),(2,4),(5,6))\nassert     and_tuples((1,2),(3,4,5)) == ((1,3),(2,4),(5,5))\nassert     and_tuples((1,2),(3)) == ((1,3),(2,3))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     and_tuples((1,2,3,4,5,6),(7,8,9,10)) == (1, 2, 3, 4, 5, 6)\nassert     and_tuples((0,1,2,3,4,5),(7,8,9,10,11)) == (0, 1, 2, 3, 4, 5)\nassert     and_tuples((10,11,12,13,14,15),(7,8,9,10,11,12)) == (10, 11, 12, 13, 14, 15)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     and_tuples((0,1),(0,2))    == (0,0,1)\nassert     and_tuples((0,1),(1,2))    == (1,0,1)\nassert     and_tuples((0,1),(2,2))    == (0,0,1)\nassert     and_tuples((1,1),(0,2))    == (1,0,1)\nassert     and_tuples((1,1),(1,2))    == (1,1,1)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     parabola_directrix(a=1, b=2, c=3) == 2\nassert     parabola_directrix(a=-1, b=2, c=3) == 2\nassert     parabola_directrix(a=-1, b=2, c=1) == -1\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     parabola_directrix(0, 0, 0) == (0, 0), 'FAILURE'\nassert     parabola_directrix(0, 0, 1) == (0, 0), 'FAILURE'\nassert     parabola_directrix(2, 4, 3) == (1, 4), 'FAILURE'\nassert     parabola_directrix(1, 5, 3) == (1, 4), 'FAILURE'\nassert     parabola_directrix(0, 0, 0) == (-2, 0), 'FAILURE'\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     parabola_directrix(5, 1, 10) == 2\nassert     parabola_directrix(6, 4, 9) == -2\nassert     parabola_directrix(4, 5, 2) == 3\nassert     parabola_directrix(1, 0, 0) == 0\nassert     parabola_directrix(0, -4, -3) == 1\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     parabola_directrix(1, 3, 0) == (2, -2, -2)\nassert     parabola_directrix(1, 3, 1) == (2, -2, 2)\nassert     parabola_directrix(1, 3, 2) == (2, -2, 0)\nassert     parabola_directrix(1, 3, 3) == (2, -2, -1)\nassert     parabola_directrix(1, 3, 4) == (2, -2, 1)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     parabola_directrix(1, 2, 3) == [1, 4]\nassert     parabola_directrix(2, 2, 2) == [2, 4]\nassert     parabola_directrix(2, 1, 1) == [2, 2]\nassert     parabola_directrix(1, 2, 3) == [1, 4]\nassert     parabola_directrix(1, 1, 1) == [1, 1]\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint('Test passed.'"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     parabola_directrix(2, 3, 2) == [(0, 0), (1, -6), (1, 6), (0, 1), (0, -1)]\nassert     parabola_directrix(1, 1, 1) == [(1, 1)]\n\n\ndef lp_to_circ(a, b, c, d): \n    '''\n    Write a function to find the center of a circle given the parameters of a line segment.\n    '''\n    pass\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef parabola_intersection(a, b, c, d): \n    '''\n    Write a function to find the intersection of a parabola and a segment. \n    '''\n    pass\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert common_element([1,2,3,4,5], [3,4,5,6,7]) == True\nassert common_element([1,2,3,4,5], [3,4,5,6]) == False\nassert common_element([1,2,3,4], [3,4,5,6]) == False\nassert common_element([1,2], [3,4,5,6]) == False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     common_element([1,2,3],[1,2,3]), '1,2,3'\nassert     common_element([1,2,3],[2,3]), '1,2'\nassert     common_element([1,2,3],[3]), '1'\nassert     common_element([1,2,3],[3,3]), '1,2'\nassert     common_element([1,2,3,4,5,6,7,8,9], [3,4,5,6,7,8,9]), '1,2,3,4,5,6,7'\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     common_element([1, 2, 3], [1, 3, 2]) == True, \"Not the same!\"\nassert common_element([1, 2, 3], [2, 3, 2]) == False, \"Not the same!\"\nassert common_element([1, 2, 3], [3, 2, 1]) == False, \"Not the same!\"\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     common_element([1, 2, 3], [3, 4, 5]) == True, \\\n    \"Wrong answer: common_element([1, 2, 3], [3, 4, 5])\"\nassert     common_element([1, 2, 3], [3, 1, 5]) == False, \\\n    \"Wrong answer: common_element([1, 2, 3], [3, 1, 5])\"\nassert     common_element([], []) == False, \\\n    \"Wrong answer: common_element([], [])\"\nassert     common_element([], [1]) == False, \\\n    \"Wrong answer: common_element([], [1])\"\n\nprint('Correct')\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     common_element([1,2,3,4,5,6], [1,2,3,4,5,6]) == True, \"Should be True\"\nassert     common_element([1,2,3,4,5,6], [6,7,8,9,10,11]) == False, \"Should be False\"\nassert     common_element([1,2,3,4,5,6], [1,2,3,4,5,7]) == True, \"Should be True\"\nassert     common_element([1,2,3,4,5,6], [6,7,8,9,10,11]) == False, \"Should be False\"\nassert     common_element([1,2,3,4,5,6], [1,2,3,4,5,6]) == True, \"Should be True\"\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     common_element([1, 2, 3], [1, 2, 4]) == True, 'Common element is not found.'\nassert     common_element([1, 2, 3], [2, 4]) == False, 'Common element is found.'\nassert     common_element([], []) == False, 'Empty lists are not compared.'\nassert     common_element([1, 2, 4], [3]) == False, 'Two lists have only one element.'\nassert     common_element([1, 1, 2], [1, 1, 2]) == True, 'Two lists have elements with the same value.'\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     common_element([1, 2, 3], [1, 2, 3]) == True, \"Should return True\"\nassert     common_element([1, 2, 3], [1, 5, 3]) == False, \"Should return False\"\nassert     common_element([1, 2, 3], [3, 2, 1]) == False, \"Should return False\"\nassert     common_element([1, 2, 3], [3]) == False, \"Should return False\"\nassert     common_element([], [2, 3]) == False, \"Should return False\"\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     common_element([1, 2], [3, 4, 5]) == True\nassert     common_element([1], [3, 4, 5]) == False\nassert     common_element([1, 2, 3, 4, 5], [6, 7, 8, 9]) == True\nassert     common_element([1, 2, 3, 4], [5, 6, 7, 8, 9]) == False\n\n\ndef common_element_list(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if list1 == list2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     median_trapezium(5,6,7) == 7\nassert     median_trapezium(4,5,3) == 4.5\nassert     median_trapezium(7,8,7) == 8.5\nassert median_trapezium(2,4,6) == 3.0\nassert median_trapezium(6,5,6) == 5.0\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     median_trapezium(7,3,4)==2, 'Wrong median_trapezium'\nassert median_trapezium(4,2,3)==2, 'Wrong median_trapezium'\nassert median_trapezium(4,2,2)==2, 'Wrong median_trapezium'\nassert median_trapezium(3,3,3)==3, 'Wrong median_trapezium'\nassert median_trapezium(1,5,6)==3, 'Wrong median_trapezium'"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     median_trapezium(6, 3, 4) == 3\nassert     median_trapezium(6, 2, 4) == 3\nassert     median_trapezium(6, 3, 3) == 3\nassert     median_trapezium(6, 5, 5) == 5\nassert     median_trapezium(6, 6, 2) == 5\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     median_trapezium(1,1,1) == 1\nassert     median_trapezium(1,5,1) == 1\nassert     median_trapezium(3,5,1) == 2\nassert     median_trapezium(3,5,2) == 2.5\nassert     median_trapezium(3,5,3) == 3\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     median_trapezium(2,3,4) == 5.0\nassert median_trapezium(3,2,4) == 4.0\nassert median_trapezium(3,3,4) == 4.0\nassert median_trapezium(2,3,5) == 3.5\nassert median_trapezium(1,1,1) == 1.0\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef median_trapezoid(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezoid.\n    '''\n    pass\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     median_trapezium(1,1,1) == 1\nassert     median_trapezium(1,2,1) == 1\nassert     median_trapezium(1,2,2) == 2\nassert     median_trapezium(1,3,1) == 1\nassert     median_trapezium(2,2,1) == 1\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     median_trapezium(2,5,5) == 3\nassert     median_trapezium(3,2,6) == 4\nassert     median_trapezium(4,5,4) == 4\nassert     median_trapezium(3,3,4) == 4\nassert     median_trapezium(5,5,5) == 5\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     median_trapezium(3,4,5) == 4\nassert median_trapezium(5,3,6) == 4.5\nassert median_trapezium(3,6,5) == 4.5\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ncheck_greater([2,3,4], 5) == False\ncheck_greater([2,3,4], 3) == True\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_greater(arr, 10) == True\nassert     check_greater(arr, -1) == False\nassert     check_greater(arr, 15) == False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(check_greater([1, 2, 3], 4))\nassert not check_greater([1, 2, 3], 3)"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_greater([5,1,3,6,2,4], 3) == False\nassert     check_greater([5,1,3,6,2,4], 5) == True\nassert     check_greater([5,1,3,6,2,4], 6) == True\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef check_equal(arr, number):\n    '''\n    Write a function to check whether the entered number is equal to the elements of the given array.\n    '''\n    pass\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef check_smaller(arr, number):\n    '''\n    Write a function to check whether the entered number is smaller than the elements of the given array.\n    '''\n    pass\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_greater([4, 5, 6], 6) == False, \"Check your code\"\nassert     check_greater([2, 6, 4], 2) == True, \"Check your code\"\n\ndef check_valid_password(password):\n    '''\n    Write a function that checks whether the given password is valid or not.\n    Valid passwords must follow the following rules:\n\n    At least 1 uppercase character\n    At least 1 lowercase character\n    At least 1 numeric character\n    At least 1 special character (one of @$, #, $, %, *, &)\n    At least 1 character from each of the above types.\n    It is case sensitive.\n    '''\n    # write your code here\n    if type(password)!= str:\n        print(\"You need to enter a string\")\n        return False\n    if not re.match(r\"[A-Z]\", password):\n        print(\"At least 1 uppercase character\")\n        return False\n    if not re.match(r\"[a-z]\", password):\n        print(\"At least 1 lowercase character\")\n        return False\n    if not re.match(r\"[0-9]\", password):\n        print(\"At least 1 numeric character\")\n        return False\n    if not re.match(r\"[@$#$%*&]\", password):\n        print(\"At least 1 special character\")\n        return False\n    if not re.match(r\"^[A-Za-z0-9@$#$%*&]{6,20}$\", password):\n        print(\"At least 1 character from each of the above types\")\n        return False\n    return True\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert text_match_one('ab') == True\nassert text_match_one('abb') == True\nassert text_match_one('abbab') == True\nassert text_match_one('abbbaa') == False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_match_one('ab') == False, \"Test 1 - should fail\"\nassert     text_match_one('aaab') == True, \"Test 2 - should pass\"\nassert     text_match_one('ababb') == True, \"Test 3 - should pass\"\nassert     text_match_one('abab') == False, \"Test 4 - should fail\"\nassert     text_match_one('ab') == True, \"Test 5 - should pass\"\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_one('ab') == False, \"fails\"\nassert     text_match_one('aa') == False, \"fails\"\nassert     text_match_one('aab') == False, \"fails\"\nassert     text_match_one('aabb') == False, \"fails\"\nassert     text_match_one('aabbb') == True, \"fails\"\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ntext_match_one(\"aab\")\n\nassert \ntext_match_one(\"abb\")\n\nassert \ntext_match_one(\"baab\")\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_match_one(\n    \"ababababababaababababababaabababababaababababababababababaabababababababaababababababababababababababaabababababababababababababababababaababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab\n    \"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab2b2a\",\n    \"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab\n    1,\n    [\"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab\n    2,\n    [\"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab\n    2,\n    [\"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab#x\\\n    1,\n    [\"a\", \"bb\", \"aaabbbabbbb\", \"bba\", \"bbabababa\", \"bbabbbbaa\", \"aaabbbbbb\", \"baa\", \"aaabbbbaa\", \"bbabababa\", \"babbabaaa\", \"baaaabaab\", \"aaabbbbbb\", \"aaabbbbaa\", \"bbaa\", \"bbabababa\", \"bbbba\", \"aaabbbbbb\", \"baba\", \"abbaaaba\", \"babbbabbb\", \"baa\", \"bbbbababa\", \"aaabbbbbb\", \"bbabbbbaa\", \"baa\", \"bababaaab\"]\n    [#x1, #x2, #x3, #x4, #x5, #x6, #x7, #x8, #x9, #x10, #x11, #x12, #x13, #x14, #x15, #x16, #x17, #x18, #x19, #x20, #x21, #x22, #x23, #x24, #x25, #x26, #x27, #x28, #x29, #x30, #x31, #x32, #x33, #x34, #x35, #x36, #x37, #x38, #x39, #x40, #x41, #x42, #x43, #x44, #x45, #x46, #x47, #"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_one(\"abcd\") == False, \"First\"\nassert     text_match_one(\"a\") == True, \"Second\"\nassert     text_match_one(\"ab\") == True, \"Third\"\nassert     text_match_one(\"abc\") == True, \"Fourth\"\nassert     text_match_one(\"abcab\") == False, \"Fifth\"\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_one('ab') == True\nassert     text_match_one('bb') == True\nassert     text_match_one('ba') == True\nassert     text_match_one('abc') == False\nassert     text_match_one('bab') == False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_match_one(\"bbb\") == False\nassert     text_match_one(\"bbbaba\") == True\nassert     text_match_one(\"aab\") == False\nassert     text_match_one(\"bbbaa\") == False\nassert     text_match_one(\"aaba\") == True\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ntext_match_one( \"aaba\" ) == \"aaba\"\n\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by zero or more b's.\n    '''\n    pass\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_one('abbab') == 'ababbab'\nassert     text_match_one('abc') == ''\nassert     text_match_one('aab') == ''\nassert     text_match_one('aaaa') == ''\nassert     text_match_one('aabbb') == 'ababbb'\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     last_Digit(102345) == 3\nassert     last_Digit(0) == 0\nassert     last_Digit(-123) == 2\nassert     last_Digit(12) == 2\n\ndef last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 0 :\n        return -last_Digit(-n)\n    count = 0\n    while n > 0:\n        count += 1\n        n = n//10\n    return count\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     last_Digit(12345)     ==     4\nassert last_Digit(1234)     ==     4\nassert last_Digit(1234)     ==     4\nassert last_Digit(12)     ==     1\nassert last_Digit(12)     ==     1\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     last_Digit(99) == 9\nassert     last_Digit(0) == 0\nassert last_Digit(123) == 1\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     last_Digit(12) == 0\nassert     last_Digit(133) == 3\nassert     last_Digit(987654321) == 9\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert last_Digit(9) == 9\nassert last_Digit(99) == 9\nassert last_Digit(55) == 5\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef power(x, y) :\n    '''\n    Write a python function to compute x raised to the power y.\n    '''\n    pass\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert last_Digit(68) == '8'\nassert last_Digit(1234) == '4'\nassert last_Digit(1234) == '4'\nassert last_Digit(234) == '2'\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     last_Digit(1)    == 0\nassert     last_Digit(11)    == 1\nassert     last_Digit(12)    == 1\nassert     last_Digit(13)    == 1\nassert     last_Digit(21)    == 0\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     last_Digit(16) == 0\nassert     last_Digit(14) == 0\nassert     last_Digit(15) == 1\nassert     last_Digit(2000) == 0\nassert     last_Digit(1000) == 1\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     neg_nos([1,-1,4,-2,2,-4,1,-2,1]) == [-1,-2,1,-4,4,2]\nassert     neg_nos([1,-1,4,-2,2,-4,1]) == [-1,-2,1,4,-2]\nassert     neg_nos([1,-1,4,-2,2,-4,1]) == [-1,-2,1,-4,4,2]\n\nprint(\"Passed\")\nprint()\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     neg_nos([1, 2, 3, -3, 4]) == [-3, -3, -3, -1, 4]\nassert     neg_nos([1, -2, 3, -3, 4]) == [-3, -3, -3, -1, 4]\nassert     neg_nos([1, 2, -3, 4]) == [-3, -3, -1, 4]\nassert     neg_nos([1, -2, 3, 4]) == [-3, -3, -1, 4]\nassert     neg_nos([1, -2, 3, -3, -4]) == [-3, -3, -3, -1, 4]\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     neg_nos(range(1,5)) == [-1,-2,-3,-4]\nprint(\"Correct: neg_nos\")\n\n\ndef div_with_neg(list1):\n    '''\n    Write a python function to return the list of values of all the divisors of a given value.\n    '''\n    pass\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef first_last(list1):\n    '''\n    Write a python function to return the first element and last element of a list.\n    '''\n    pass\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert neg_nos([-7, -10, -11, -12, -5, -6]) == [-7, -6]\n\nassert neg_nos([-7, -10, -11, -12, -5, -6, -7, -9, -10, -11, -12, -5, -6]) == [-7, -6, -7]"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     neg_nos([1,2,3,-4,5,6,7,8,-9,-10]) == [-10,-9,-8,-7,-6,-5,-4,-3,-2,-1], \"incorrect\"\nprint(\"Coding complete? Click 'Check' to review your tests and earn cool rewards!\""
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     neg_nos([-3, -2, -1, 0, 1, 2, 3]) == [1, -2, -3, -1, 2, 0, 3], \"Should be [-1, -2, -3, 0, 2, 1, 3]\"\nassert     neg_nos([]) == [], \"Should be []\"\nassert     neg_nos([0, 0, 0, 0]) == [0, 0, 0, 0], \"Should be []\"\nassert     neg_nos([-1]) == [-1], \"Should be [-1]\"\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_odd('bab') == 'ba', 'Wrong'\nassert     remove_odd('aab') == 'a', 'Wrong'\nassert     remove_odd('ab') == 'b', 'Wrong'\nassert     remove_odd('c') == '', 'Wrong'"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_odd('abc') == 'b'\nassert     remove_odd('abcde') == 'b'\nassert     remove_odd('pythone') == 'python'\nassert     remove_odd('leetcode') == 'leet'\nassert     remove_odd('python') == 'pyt'\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_odd(\"Jdkl;uwioewjkh\") == \"Jdkl;uwio\"\nassert     remove_odd(\"Hdsabkajsxdhdbkbkajhsdakdjh\") == \"Hdasbkajsxdhdbkbkajhsdakdjh\"\nassert     remove_odd(\"\") == \"\"\nassert     remove_odd(\"ABKD\") == \"AB\"\nassert     remove_odd(\"abcd\") == \"abcd\"\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_odd(\"hello world\") == \"ell world\", \"Should return 'ell world' if input is 'hello world'\"\nassert     remove_odd(\"good morning\") == \"good mornig\", \"Should return 'good mornig' if input is 'good morning'\"\nassert     remove_odd(\"\") == \"\", \"Should return '' if input is empty\"\nassert     remove_odd(\"Hello world\") == \"Hellow world\", \"Should return 'Hellow world' if input is 'Hello world'\"\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_odd('hello') == 'hllo'\nassert     remove_odd('hi') == 'h'\nassert     remove_odd('this is a test') == 'thi s a tst'\nassert     remove_odd('tHIs a s TSt') == 'Thi s tSt'\nassert     remove_odd('hello world!') == 'hello worl'\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_odd(\"Hello World\") == \"Helo\"\nassert     remove_odd(\"Hello World, this is a test\") == \"Helo, this is a test\"\nassert     remove_odd(\"\") == \"\"\nassert     remove_odd(\"H\") == \"H\"\nassert     remove_odd(\"Hello World, this is a test, testing\") == \"Helo, this is a test\"\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_odd(\"abcde\") == \"bcd\"\nassert     remove_odd(\"aab\") == \"b\"\nassert     remove_odd(\"wxyz\") == \"wxy\"\nassert     remove_odd(\"\") == \"\"\nassert     remove_odd(\"aabb\") == \"bb\"\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_bidirectional([(1, 2), (2, 4), (3, 1), (2, 2)]) == 1\nassert     count_bidirectional([(1, 2), (2, 4), (3, 1), (2, 2), (1, 1)]) == 2\nassert     count_bidirectional([(1, 2), (2, 4), (3, 1), (2, 2), (1, 1), (1, 1)]) == 3\nassert     count_bidirectional([(1, 2), (2, 4), (3, 1), (2, 2), (1, 1), (2, 2)]) == 3\nassert     count_bidirectional([(1, 2), (2, 4), (3, 1), (2, 2), (1, 1), (2, 2), (1, 1)]) == 4\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_bidirectional([(1,2),(3,4),(1,5),(2,6),(3,7),(1,8)]) == 2, \"The correct value is 2.\"\nassert     count_bidirectional([(1,2),(3,4),(1,5),(2,6),(3,7),(1,8),(2,8)]) == 3, \"The correct value is 3.\"\nassert     count_bidirectional([(1,2),(3,4),(1,5),(2,6),(3,7),(1,8),(2,8)]) == 4, \"The correct value is 4.\"\nassert     count_bidirectional([(1,2),(3,4),(1,5),(2,6),(3,7),(1,8),(2,8),(1,8)]) == 4, \"The correct value is 4.\"\n\nprint(\"\\033[92mAll test cases passed!\\033[0m\""
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert count_bidirectional([(1,1), (2,2), (3,3)]) == 2, \"count_bidirectional([(1,1), (2,2), (3,3)])\"\nassert count_bidirectional([(1,2), (2,1), (3,3)]) == 1, \"count_bidirectional([(1,2), (2,1), (3,3)])\"\nassert count_bidirectional([(1,1), (2,2), (3,3), (3,4)]) == 1, \"count_bidirectional([(1,1), (2,2), (3,3), (3,4)])\"\nassert count_bidirectional([(1,1), (2,2), (3,3), (3,3)]) == 3, \"count_bidirectional([(1,1), (2,2), (3,3), (3,3)])\"\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_bidirectional([(1,2), (2,3), (3,4), (4,5)]) == 6, 'test_correctness'\nassert     count_bidirectional([(1,2), (2,3), (3,4)]) == 2, 'test_correctness'\n\ndef sum_of_odd_numbers(test_list):\n    '''\n    Write a function to sum odd numbers in a list.\n    '''\n    pass\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_bidirectional([(1,2), (1,3), (2,4), (3,4), (3,5)]) == 5, 'count_bidirectional'\nassert     count_bidirectional([(1,2), (1,3), (2,4), (3,4), (3,5), (4,5), (5,6)]) == 5, 'count_bidirectional'\nassert     count_bidirectional([(1,2), (1,3), (2,4), (3,4), (3,5)]) == 2, 'count_bidirectional'\nassert     count_bidirectional([(1,2), (2,3), (3,4), (4,5), (5,6)]) == 6, 'count_bidirectional'\nassert     count_bidirectional([(1,2), (1,3)]) == 3, 'count_bidirectional'\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_bidirectional([(1, 2), (1, 3), (2, 3), (2, 4)]) == 1\nassert     count_bidirectional([(1, 2), (1, 3), (2, 3), (2, 4), (1, 4)]) == 2\nassert     count_bidirectional([(1, 2), (1, 3), (2, 3), (2, 4), (1, 4), (1, 5)]) == 3\nassert     count_bidirectional([(1, 2), (1, 3), (2, 3), (2, 4), (1, 4), (1, 5), (1, 6)]) == 4\nassert     count_bidirectional([(1, 2), (1, 3), (2, 3), (2, 4), (1, 4), (1, 5), (1, 6), (1, 7)]) == 5\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_bidirectional([]) == 0\nassert     count_bidirectional([(1, 3), (4, 3), (1, 1), (5, 4)]) == 2\nassert     count_bidirectional([(1, 4), (3, 4), (2, 1), (5, 4)]) == 1\nassert     count_bidirectional([(1, 4), (3, 4), (2, 1), (1, 1)]) == 1\nassert     count_bidirectional([(1, 4), (3, 4), (2, 1), (4, 3)]) == 0\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_bidirectional([\"(1,2)\", \"(3,4)\", \"(3,4)\"]) == 2, \"failed\"\nassert     count_bidirectional([\"(1,2)\", \"(3,4)\", \"(3,4)\"]) == 2, \"failed\"\nassert     count_bidirectional([\"(1,2)\", \"(3,4)\", \"(3,4)\"]) == 2, \"failed\"\nassert     count_bidirectional([\"(1,2)\", \"(3,4)\", \"(3,4)\"]) == 2, \"failed\"\nassert     count_bidirectional([\"(1,2)\", \"(3,4)\", \"(3,4)\"]) == 2, \"failed\"\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_bidirectional([(1, 2), (3, 4), (5, 6)]) == 2\nassert     count_bidirectional([(1, 2), (3, 4), (5, 6)]) == 2\nassert     count_bidirectional([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == 1\nassert     count_bidirectional([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == 1\nassert     count_bidirectional([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == 1\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_bidirectional([1,2,3,4,5]) == 2, \\\n        '''count_bidirectional should return 2, as 5, 4, and 3 have a pair of 3 and 5.'''\nassert     count_bidirectional([4,5,3,1,2]) == 2, \\\n        '''count_bidirectional should return 2, as 3, 2, and 1 have a pair of 1 and 3.'''\nassert     count_bidirectional([1,2,3]) == 0, \\\n        '''count_bidirectional should return 0, as there are no pairs of 2.'''\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     multiple_to_single([1, 2, 3]) == 6, \"Error!\"\nassert     multiple_to_single([4, 5, 6, 7, 8, 9]) == 45, \"Error!\"\nassert     multiple_to_single([1, 2, 3, 4, 5, 6]) == 12, \"Error!\"\nassert multiple_to_single([1, 2, 3]) == 6, \"Error!\"\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     multiple_to_single([1,2,3,4,5]) == 15\nassert     multiple_to_single([1,2]) == 2\nassert     multiple_to_single([1]) == 1\n\ndef concatenate_lists(L):\n    '''\n    Write a function to concatenate the last element of multiple lists into a single list.\n    '''\n    pass\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     multiple_to_single([-1, -1, 2, 3, 6, 8, 9, 10, 30, 12]) == -11111111\nassert     multiple_to_single([-1, -1, 2, 3, 6, 8, 9, 10]) == -1234\nassert     multiple_to_single([-1, -1, 2, 3, 6, 8, 9]) == -1234\nassert     multiple_to_single([-1, -1, 2, 3, 6, 8, 9, 10]) == -1234\nassert     multiple_to_single([-1, -1, 2, 3, 6, 8, 9, 10, 30, 12]) == -11111111\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert multiple_to_single([-1, 2, 3, -2, 4, 5, 6]) == 4, 'Should be 4'\nassert multiple_to_single([2, 3, -2, 4, 5, 6]) == 0, 'Should be 0'\nassert multiple_to_single([]) == 0, 'Should be 0'\nassert multiple_to_single(None) == None, 'Should be None'\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     multiple_to_single([1,2,3]) == 6\nassert     multiple_to_single([1,3,2]) == 7\nassert     multiple_to_single([1,2]) == 2\nassert multiple_to_single([1]) == 1\n\ndef convert_word(word):\n    '''\n    Write a function to convert a word to camelcase.\n    '''\n    pass\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     multiple_to_single([1,2,3])== 6, 'Multiple-to-single fails'\nassert multiple_to_single([1,2,3])== 6, 'Multiple-to-single fails'\nassert multiple_to_single([1,2,3])== 6, 'Multiple-to-single fails'\nassert multiple_to_single([1,2,3])== 6, 'Multiple-to-single fails'\nassert multiple_to_single([1,2,3])== 6, 'Multiple-to-single fails'\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     multiple_to_single([1,2,3,4]) == 12\nassert     multiple_to_single([2,3,4]) == 24\nassert     multiple_to_single([3,4,5]) == 35\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     multiple_to_single([1, 2, 3, 4]) == 6, 'test_1 is wrong'\nassert     multiple_to_single([1, 2, 3]) == 6, 'test_2 is wrong'\nassert     multiple_to_single([2, 3, 4]) == 12, 'test_3 is wrong'\nassert multiple_to_single([1, 2, 3, 4]) == 24, 'test_4 is wrong'\n\ndef swap_dicts(D1, D2):\n    '''\n    Write a function to swap two dictionary values\n    '''\n    pass\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     multiple_to_single([3,5,3,7,2]) == 27\nassert     multiple_to_single([5,2,5,7,5,6]) == 62\nassert     multiple_to_single([1,2,1,3,1,4,1,5,1,6,1,7,1,8,1]) == 330\nassert     multiple_to_single([1,2,1,3,1,4,1,5,1,6,1,7,1,8,1,9]) == 330\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    multiple_to_single([2, 3, 4, 5, 6]) == 30\n    multiple_to_single([2, 3]) == 6\n    multiple_to_single([]) == 0\n    multiple_to_single([-3, -4, -5, -6]) == -45\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_adverb_position('My advice is to go for a walk.') == {'my': 0, 'advice': 16, 'to': 24, 'go': 32, 'walk': 40}\nassert     find_adverb_position('If it\\'s a sunny day, you should go for a walk.') == {'if': 8, 'it\\'s': 21,'sunny': 33, 'day': 40, 'walk': 50}\nassert     find_adverb_position('My advice is to go for a walk.') == {'my': 0, 'advice': 16, 'to': 24, 'go': 32, 'walk': 40}\nassert     find_adverb_position('If it\\'s a sunny day, you should go for a walk.') == {'if': 8, 'it\\'s': 21,'sunny': 33, 'day': 40, 'walk': 50}\nassert     find_adverb_position('My advice is to go for a walk.') == {'my': 0, 'advice': 16, 'to': 24, 'go': 32, 'walk': 40}\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_adverb_position(\"I am going to the cinema with the kids\") == ((0, 'i'), (2, 'to'), (4, 'the'))\nassert     find_adverb_position(\"The movie was so cool, I would recommend it to my friends\") == ((4, 'cool'), (7, 'to'), (11,'my'))\nassert     find_adverb_position(\"I feel very comfortable in the cinema with the kids\") == ((1, 'i'), (4, 'feel'))\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_adverb_position('') == (None, None)\nassert     find_adverb_position('This is a test sentence with one test.') == (3, 9)\nassert     find_adverb_position('This is a test sentence with one test.') == (3, 9)\nassert     find_adverb_position('This is a test sentence with one test.') == (3, 9)\nassert     find_adverb_position('This is a test sentence with one test.') == (3, 9)\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert find_adverb_position('') == [], \"A function must return a list of tuples.\"\nassert find_adverb_position(\"This is a sentence.\") == [], \"A function must return a list of tuples.\"\nassert find_adverb_position(\"I love this dog\") == [(1, 'love'), (5, 'dog')], \"A function must return a list of tuples.\"\nassert find_adverb_position(\"I love this dog, this is a sentence, so I love this sentence too.\") == [(1, 'love'), (2, 'love'), (3, 'love'), (4, 'love'), (5, 'love'), (6, 'love'), (8, 'love'), (9, 'love'), (10, 'love'), (11, 'love'), (12, 'love'), (13, 'love'), (14, 'love'), (15, 'love'), (16, 'love'), (17, 'love'), (18, 'love'), (19, 'love'), (20, 'love'), (21, 'love'), (22, 'love'), (23, 'love'), (24, 'love'), (25, 'love'), (26, 'love'), (27, 'love'), (28, 'love'), (29, 'love'), (30, 'love'), (31, 'love'), (32, 'love'), (33, 'love'), (34, 'love'), (35, 'love'), (36, 'love'), (37, 'love'), (38, 'love'), (39, 'love'), (40, 'love')], \"A function must return a list of tuples.\"\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_adverb_position('') == None\nassert     find_adverb_position(' ') == None\nassert     find_adverb_position('Hello, world') == None\nassert     find_adverb_position('Hello, world!') == None\nassert     find_adverb_position('Hey, my cat') == None\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_adverb_position('I am a boy') == ['a', 'am', 'boy']\nassert     find_adverb_position('I am a girl') == ['a', 'am', 'girl']\nassert     find_adverb_position('I am a man') == ['a', 'am','man']\nassert     find_adverb_position('I am a woman') == ['a', 'am', 'woman']\nassert     find_adverb_position('I am a pig') == ['a', 'am', 'pig']\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_adverb_position(\"Good morning. I am good. I am happy.\") == [3, 7]\nassert     find_adverb_position(\"Good morning. I am great. I am happy.\") == [2, 4]\nassert     find_adverb_position(\"Good morning. I am tired. I am happy.\") == [2, 4]\nassert     find_adverb_position(\"Good morning. I am sleepy. I am happy.\") == [2, 4]\nassert     find_adverb_position(\"Good morning. I am bad. I am happy.\") == [1, 4]\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_adverb_position(\"I couldn't find a place to hang my cab.\") == (0, 0)\nassert     find_adverb_position(\"I couldn't find my sister.\") == (0, 1)\nassert     find_adverb_position(\"I couldn't find my brother.\") == (0, 2)\nassert     find_adverb_position(\"I couldn't find my friend.\") == (0, 3)\nassert     find_adverb_position(\"I couldn't find my mother.\") == (0, 4)\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_adverb_position(\"the adverb is not consistent, but a bit inconsistent\") == 'the_adverb_position_0_is_not_consistent_but_a_bit_inconsistent'\nassert     find_adverb_position(\"the adverb is not consistent, but a bit inconsistent\") == 'the_adverb_position_0_is_not_consistent_but_a_bit_inconsistent'\nassert     find_adverb_position(\"the adverb is not consistent, but a bit inconsistent\") == 'the_adverb_position_0_is_not_consistent_but_a_bit_inconsistent'\nassert     find_adverb_position(\"the adverb is not consistent, but a bit inconsistent\") == 'the_adverb_position_0_is_not_consistent_but_a_bit_inconsistent'\nassert     find_adverb_position(\"the adverb is not consistent, but a bit inconsistent\") == 'the_adverb_position_0_is_not_consistent_but_a_bit_inconsistent'\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ntext = \"\"\"I once saw a red car and a blue car on a street that was full of cars.\nA good morning was beautiful on the road.\nThe sunset had just started and it was a perfect day for a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want to be a car.\nI want t"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     surfacearea_cube(4) == 8\nassert     surfacearea_cube(3) == 12\nassert     surfacearea_cube(8) == 50"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere of a given radius.\n    '''\n    pass\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nsurfacearea_cube(1) == 1.5\nsurfacearea_cube(2) == 3.5\nsurfacearea_cube(3) == 6.5\nsurfacearea_cube(4) == 10.5\nsurfacearea_cube(5) == 15.5\nsurfacearea_cube(6) == 21.5\nsurfacearea_cube(7) == 28.5\nsurfacearea_cube(8) == 35.5\nsurfacearea_cube(9) == 41.5\nsurfacearea_cube(10) == 46.5\nsurfacearea_cube(11) == 52.5\nsurfacearea_cube(12) == 59.5\nsurfacearea_cube(13) == 66.5\nsurfacearea_cube(14) == 73.5\nsurfacearea_cube(15) == 80.5\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nassert surfacearea_cube(10) == 36\n\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere of a given radius.\n    '''\n    pass\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     surfacearea_cube(10) == 216\nassert     surfacearea_cube(3) == 24\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     surfacearea_cube(1) == 8, 'incorrect'\nassert     surfacearea_cube(2) == 30, 'incorrect'\nassert     surfacearea_cube(3) == 56, 'incorrect'\nassert     surfacearea_cube(4) == 104, 'incorrect'\nassert     surfacearea_cube(5) == 220, 'incorrect'\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert surfacearea_cube(1) == 2.5\nassert surfacearea_cube(2) == 7.5\nassert surfacearea_cube(3) == 22.5\n\ndef surfacearea_triangle(s, b, h):\n    '''\n    Write a function to find the surface area of a triangle with sides of length s, b and h.\n    '''\n    pass\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     surfacearea_cube(3) == 12\nassert     surfacearea_cube(5) == 52\nassert     surfacearea_cube(7) == 108\nassert     surfacearea_cube(9) == 294\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef surfacearea_cuboid(l, w, h):\n    '''\n    Write a function to find the surface area of a cuboid of a given size.\n    '''\n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint('Test 1')\nprint('pass' if (positive_count([1,2,3,4])==3) else 'fail')\nprint('Test 2')\nprint('pass' if (positive_count([0,1,2,3])==2) else 'fail')\nprint('Test 3')\nprint('pass' if (positive_count([-2,-1,0,1])==2) else 'fail')\nprint('Test 4')\nprint('pass' if (positive_count([0,1,2,3])==2) else 'fail')\nprint('Test 5')\nprint('pass' if (positive_count([1,2,3,4])==2) else 'fail')\nprint('Test 6')\nprint('pass' if (positive_count([0,1,2,3])==2) else 'fail')\nprint('Test 7')\nprint('pass' if (positive_count([0,1,2,3,4])==2) else 'fail')\nprint('Test 8')\nprint('pass' if (positive_count([])==0) else 'fail')\nprint('Test 9')\nprint('pass' if (positive_count([1,2,3,4,5])==5) else 'fail')\nprint('Test 10')\nprint('pass' if (positive_count([-2,0,1,2,3])==2) else 'fail')\nprint('Test 11')\nprint('pass' if (positive_count([-2,0,1,2,3,4])==3) else 'fail')\nprint('Test 12')\nprint('pass' if (positive_count([-2,0,1,2,3,4,5,6])==5) else 'fail')\nprint('Test 13')\nprint('pass' if (positive_count([-2,-1,0,1,2,3])==2) else 'fail')\nprint('Test 14')\nprint('pass' if (positive_count([-2,-1,0,1,2,3,4])==2) else 'fail')\nprint('Test 15')\nprint('pass' if (positive_count([-2,-1,0,1,2,3,4,5])==2) else 'fail')\nprint('Test 16')\nprint('pass' if (positive_count([0,1,2,3,4,5])==5) else 'fail')\nprint('Test 17')\nprint('pass' if (positive_count([])==0) else 'fail')\nprint('Test 18')\nprint('pass' if (positive_count([1,2,3,4,5])==5) else 'fail')\nprint('Test 19')\nprint('pass' if (positive_count([-2,0,1,2,3])==2) else 'fail')\nprint('Test 20')\nprint('pass' if (positive_count([-2,0,1,2,3,4])==3) else 'fail')\nprint('Test 21')\nprint('pass' if (positive_count([-2,0,1,2,3,4,5])==3) else 'fail')\nprint('Test 22')\nprint('pass' if (positive_count([-2,-1,0,1,2,3])==2) else 'fail')\nprint('Test 23')\nprint('pass' if (positive_count([-2,-1,0,1,2,3,4])==2) else 'fail')\nprint('Test 24')\nprint('pass' if (positive_count([-2,-1,0,1,2,3,4,5])==2) else 'fail')\nprint('Test 25')\nprint('pass' if (positive_count([0,1,2,3,4,5])==5) else 'fail')\nprint('Test 26')\nprint('pass' if (positive_count([0,1,2,3,4,5,6])==5) else 'fail')\nprint('Test 27')\nprint('pass' if (positive_count([-2,0,1,2,3,4])==2) else 'fail')\nprint('Test 28')\nprint('pass' if (positive_count([-2,0,1,2,3,4,5])==3) else 'fail')\nprint('Test 29')\nprint('pass' if (positive_count([-2,0,1,2,3,4,5,6])==3) else 'fail')\nprint('Test 30')\nprint('pass' if (positive_count([-2,-1,0,1,2,3,4,5])==3) else 'fail')\nprint('Test 31')\nprint('pass' if (positive_count([-2,-1,0,1,2,3,4,5,6])==3) else 'fail')\nprint('Test 32')\nprint('pass' if (positive_count([-2,-1,0,1,2,3,4,5,6,7])==3) else 'fail')\nprint('Test 33')\nprint('pass' if (positive_count([-2,-1,0,1,2,3,4,5,6,7,8,9])==3) else 'fail')\nprint('Test 34')\nprint('pass' if (positive_count([-2,-1,0,1,2,3,4,5,6,7,8,9,10])==3) else 'fail')\nprint('Test 35')\nprint('pass' if (positive_count([-2,-1,0,1,2,3,4,5,6,7,8,9,10,11])==3) else 'fail')\nprint('Test 36')\nprint('pass' if (positive_count([-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12])==3) else 'fail')\nprint('Test 37')\nprint('pass' if (positive_count([-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13])==3) else 'fail')\nprint('Test 38')\nprint('pass' if (positive_count([-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14])==3) else 'fail')\nprint('Test 39')\nprint('pass' if (positive_count([-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])==3) else 'fail')\nprint('Test 40')\nprint('pass' if (positive_count([-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])==3) else 'fail')\nprint('Test 41')\nprint('pass' if (positive_count([-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])==3) else 'fail')\nprint('Test 42')\nprint('pass' if (positive_count([-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])==3) else 'fail')\nprint('Test 43')\nprint('pass' if (positive_count([-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])==3) else 'fail')\nprint('Test 44')\nprint('pass' if (positive_count([-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])==3) else 'fail')\nprint('Test 45')\nprint('pass' if (positive_count([-2,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])==3) else 'fail')\nprint('Test 46')\nprint('pass' if (positive_count([-2,-1,0,1,2,3,4,5,6,7,8,"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     positive_count([-1,1,-1,-2]) == 1, '1/3'\nassert     positive_count([-1,1,2,4]) == 2, '3/3'\nassert     positive_count([-2,2,3,3]) == 1, '1/3'\nassert     positive_count([-4,0,-3,0,-2,2]) == 2, '3/3'\nassert     positive_count([-3,-1,-2,0,-5,-2,-6,-2]) == 1, '1/4'\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert positive_count([1,2,3,4,5,6]) == 0.8, 'Wrong'\nassert positive_count([1,2,3,-4,5,6]) == 0.6, 'Wrong'\nassert positive_count([1,2,3,-4,-5,6]) == 1, 'Wrong'\nassert positive_count([-1,-2,-3,-4,-5,-6]) == -1, 'Wrong'\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     positive_count([1,2,3,4,5,6,7,8,9,10,11]) == 0.2, 'incorrect'\nassert positive_count([1,2,3,4,5,6,7,8,9,10,11,0]) == 0.1, 'incorrect'\nassert positive_count([-1,2,3,4,5,6,7,8,9,10,11,0]) == 0.1, 'incorrect'\nassert positive_count([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,0]) == 0.1, 'incorrect'\nassert positive_count([]) == 0.0, 'incorrect'\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef sum_to_n(n):\n    '''\n    Write a function that takes a list of integers and returns the sum of all the numbers in the list that are positive.\n    '''\n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef positive_count_2(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     positive_count([]) == 0\nassert     positive_count([1,2,3,4,5,6,7,8,9,10]) == 10\nassert     positive_count([-2,-1,0,1,2,3,4,5,6,7,8,9,10]) == 10\nassert     positive_count([-10,0,1,2,3,4,5,6,7,8,9,10]) == 0\nassert     positive_count([1,-2,0,1,2,3,4,5,6,7,8,9,10]) == 8\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     positive_count([1, 2, -1, 4, -3, 2]) == 2.0\nassert     positive_count([-3, 4, -1, 1, -5, 1]) == 2.5\nassert     positive_count([-3, 4, -1, 1, -5, 1, -10, -1]) == 2.5\nassert positive_count([-10, 10, -10, -10, -5]) == 0.25\n\ndef find_max(arr):\n    '''\n    Write a function to find the maximum value in an array.\n    '''\n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert largest_neg([-2, -1, -4, -5, -6]) == -6\nassert largest_neg([-2, -1, -4, -5, -6]) == -2\nassert largest_neg([1, -1, -4, -5, -6]) == -1\nassert largest_neg([1, -1, -4, -5, -6]) == 1\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     largest_neg([1,-4,-5,2]) == -1\nassert    largest_neg([1,-5,-4,2]) == -1\nassert    largest_neg([1,-5,-4,-2]) == -4\nassert    largest_neg([1,2,3,4,5,6,7,8,9,10]) == 10\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     largest_neg([-1, -2, -3, -5, -6]) == -6\nassert     largest_neg([-5, -3, -2, -1]) == -1\nassert     largest_neg([-1, -2]) == -1\nassert     largest_neg([]) == None\nassert     largest_neg([1, 2, 3]) == None\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     largest_neg([-2, -3, -5, -4, -1]) == -1\n\n'''\nLet\u2019s introduce another interesting trick. We can solve this problem in a more concise way:\n\nThe largest_neg function:\n\nReturns the largest negative element in the list. If no negative element is found, returns -1.\n\nThe smallest_pos function:\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     largest_neg([-4,-2,-3,-9]) == -3\nassert     largest_neg([-4,-2,-3,-5,-10]) == -5\nassert     largest_neg([-4,-2,-3,0]) == -4\nassert     largest_neg([-4,-2,-3,-5,-10]) == -5\nassert     largest_neg([-4,-2,-3,0,1,2]) == -3\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint('\\n')\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     trim_tuple([(1,2,3,4,5),(1,2,3),(1,2,3,4,5),(1,2,3,4,5)],3) == [(1,2,3,4,5),(1,2,3),(1,2,3,4,5)]\nassert     trim_tuple([(1,2,3,4,5),(1,2,3,4,5),(1,2,3,4,5),(1,2,3,4,5)],2) == [(1,2,3,4,5)]\nassert     trim_tuple([(1,2,3,4,5),(1,2,3,4,5),(1,2,3,4,5),(1,2,3,4,5)],1) == [(1,2,3,4,5)]\nassert     trim_tuple([(1,2,3,4,5),(1,2,3,4,5),(1,2,3,4,5),(1,2,3,4,5)],0) == []\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert trim_tuple([(1,2),(3,4),(5,6),(7,8)], 2) == [(1,2),(3,4),(5,6),(7,8)]\nassert trim_tuple([(1,2),(3,4),(5,6),(7,8)], 5) == [(1,2),(3,4),(5,6),(7,8)]\nassert trim_tuple([(1,2),(3,4),(5,6),(7,8)], 6) == [(1,2),(3,4),(5,6),(7,8)]\nassert trim_tuple([(1,2),(3,4),(5,6),(7,8)], 10) == [(1,2),(3,4),(5,6),(7,8)]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     trim_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)], 1) ==\\\n        [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nassert     trim_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)], 2) ==\\\n        [(4, 5, 6), (7, 8, 9), (10, 11, 12)]\nassert     trim_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)], 3) ==\\\n        [(7, 8, 9), (10, 11, 12)]\nassert     trim_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)], 4) ==\\\n        [(1, 2, 3), (4, 5, 6), (7, 8, 9)]"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     trim_tuple([(0, 1, 1), (1, 2, 1), (2, 3, 1)], 2) == \\\n        [(0, 1, 1), (1, 2, 1), (2, 3, 1)]\n\nprint('Trim tuple using K = {} : {}'.format(K, trim_tuple([(0, 1, 1), (1, 2, 1), (2, 3, 1)], K)))\n\n'''\nGiven an array of integers, write a function that returns the array of numbers that are divisible by 5, except 5 itself.\n'''\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert         trim_tuple([(1, 2, 3), (4, 5), (6, 7, 8)], 1) == [(1, 2, 3), (4, 5), (6, 7, 8)]\nassert         trim_tuple([(1, 2, 3), (4, 5), (6, 7, 8)], 2) == [(1, 2), (4, 5), (6, 7, 8)]\nassert         trim_tuple([(1, 2, 3), (4, 5), (6, 7, 8)], 3) == [(1, 2), (4, 5), (6, 7)]\nassert         trim_tuple([(1, 2, 3), (4, 5), (6, 7, 8)], 4) == [(1, 2, 3), (4, 5), (6, 7)]\nassert         trim_tuple([(1, 2, 3), (4, 5), (6, 7, 8)], 5) == [(1, 2, 3, 4, 5), (6, 7, 8)]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     trim_tuple([(0,1,1),(2,3,1)], 1) == [(0,1,1),(2,3,1)]\nassert     trim_tuple([(0,1,1),(2,3,1)], 2) == [(0,1),(2,3)]\nassert     trim_tuple([(0,1,1),(2,3,1)], 3) == [(0,1,1),(2,3)]\nassert     trim_tuple([(0,1,1),(2,3,1)], 4) == [(0,1,1)]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == '__main__':\n    test_list = [(1, 2), (3, 4, 5), (6, 7, 8, 9, 0), (10,), (11,), (12, 13, 14), (15,), (16, 17, 18, 19, 20), (21, 22, 23)]\n    K = 2\n    trim_tuple(test_list, K)\n    print(test_list)\n    # [(1, 2), (3, 4, 5), (6, 7, 8, 9, 0), (10,), (11,), (12, 13, 14), (15,), (16, 17, 18, 19, 20), (21, 22, 23)]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     trim_tuple([(1, 2), (3, 4), (5, 6), (7, 8, 9, 10)], 2) == \\\n        [(3, 4), (5, 6), (7, 8, 9, 10)]\nassert     trim_tuple([(1, 2), (3, 4), (5, 6, 7, 8, 9, 10)], 2) == \\\n        [(3, 4), (5, 6, 7, 8, 9, 10)]\nassert     trim_tuple([(1, 2), (3, 4, 5, 6, 7, 8, 9, 10)], 2) == \\\n        [(1, 2), (3, 4, 5, 6, 7, 8, 9, 10)]\nassert     trim_tuple([(1, 2, 3, 4), (5, 6, 7, 8, 9, 10)], 2) == \\\n        [(1, 2, 3, 4), (5, 6, 7, 8, 9, 10)]\nassert     trim_tuple([(1, 2, 3, 4), (5, 6, 7, 8, 9, 10, 11, 12)], 2) == \\\n        [(1, 2, 3, 4), (5, 6, 7, 8, 9, 10, 11, 12)]\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18)\nassert     index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18)\nassert     index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18)\n\nassert     index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    index_multiplication((0, 1), (1, 2)) == (0, 1, 0, 2)\n    index_multiplication((0, 2), (2, 4)) == (0, 0, 2, 4)\n    index_multiplication((0, 2), (1, 4)) == (0, 2, 0, 4)\n    index_multiplication((0, 2), (2, 1)) == (0, 0, 2, 1)\n    index_multiplication((0, 2), (2, 0)) == (0, 0, 2, 0)\n    index_multiplication((0, 2), (0, 1)) == (0, 0, 0, 1)\n    index_multiplication((0, 2), (1, 0)) == (0, 0, 1, 0)\n    index_multiplication((0, 2), (0, 2)) == (0, 0, 0, 0)\n    index_multiplication((0, 2), (2, 4)) == (0, 0, 2, 4)\n    index_multiplication((1, 2), (0, 1)) == (0, 1, 0, 2)\n    index_multiplication((0, 1), (0, 2)) == (0, 0, 1, 2)\n    index_multiplication((0, 1), (2, 4)) == (0, 0, 2, 4)\n    index_multiplication((1, 2), (1, 3)) == (0, 0, 1, 3)\n    index_multiplication((0, 1), (1, 1)) == (0, 0, 1, 1)\n    index_multiplication((1, 2), (0, 2)) == (0, 0, 1, 2)\n    index_multiplication((1, 2), (2, 2)) == (0, 0, 2, 2)\n    index_multiplication((1, 2), (2, 1)) == (0, 0, 2, 1)\n    index_multiplication((1, 2), (2, 0)) == (0, 0, 2, 0)\n    index_multiplication((1, 2), (1, 3)) == (0, 0, 1, 3)\n    index_multiplication((1, 2), (0, 2)) == (0, 0, 1, 2)\n    index_multiplication((2, 4), (0, 2)) == (0, 2, 0, 4)\n    index_multiplication((2, 4), (2, 4)) == (0, 0, 2, 4)\n    index_multiplication((2, 4), (2, 1)) == (0, 2, 2, 1)\n    index_multiplication((2, 4), (2, 0)) == (0, 2, 2, 0)\n    index_multiplication((2, 4), (1, 1)) == (0, 2, 2, 1)\n    index_multiplication((2, 4), (0, 2)) == (0, 2, 2, 0)\n    index_multiplication((2, 4), (2, 3)) == (0, 2, 2, 3)\n    index_multiplication((2, 4), (2, 0)) == (0, 2, 2, 0)\n    index_multiplication((2, 4), (2, 1)) == (0, 2, 2, 1)\n    index_multiplication((2, 4), (2, 0)) == (0, 2, 2, 0)\n    index_multiplication((2, 4), (0, 1)) == (0, 2, 1, 0)\n    index_multiplication((2, 4), (0, 0)) == (0, 2, 0, 0)\n    index_multiplication((2, 4), (1, 1)) == (0, 2, 1, 1)\n    index_multiplication((2, 4), (0, 2)) == (0, 2, 1, 2)\n    index_multiplication((2, 4), (2, 4)) == (0, 0, 2, 4)\n    index_multiplication((2, 4), (0, 0)) == (0, 0, 2, 0)\n    index_multiplication((2, 4), (2, 1)) == (0, 0, 2, 1)\n    index_multiplication((2, 4), (2, 0)) == (0, 0, 2, 0)\n    index_multiplication((2, 4), (2, 3)) == (0, 0, 2, 3)\n    index_multiplication((2, 4), (2, 0)) == (0, 0, 2, 0)\n    index_multiplication((2, 4), (1, 2)) == (0, 0, 2, 2)\n    index_multiplication((2, 4), (0, 1)) == (0, 0, 2, 1)\n    index_multiplication((2, 4), (0, 3)) == (0, 0, 2, 3)\n    index_multiplication((2, 4), (1, 0)) == (0, 0, 2, 0)\n    index_multiplication((2, 4), (2, 4)) == (0, 0, 2, 2)\n    index_multiplication((2, 4), (2, 3)) == (0, 0, 2, 3)\n    index_multiplication((2, 4), (2, 2)) == (0, 0, 2, 2)\n    index_multiplication((2, 4), (2, 1)) == (0, 0, 2, 1)\n    index_multiplication((2, 4), (2, 0)) == (0, 0, 2, 0)\n    index_multiplication((2, 4), (2, 2)) == (0, 0, 2, 2)\n    index_multiplication((2, 4), (1, 1)) == (0, 0, 2, 1)\n    index_multiplication((2, 4), (0, 0)) == (0, 0, 2, 0)\n    index_multiplication((2, 4), (0, 2)) == (0, 0, 2, 2)\n    index_multiplication((2, 4), (2, 2)) == (0, 2, 4, 4)\n    index_multiplication((2, 4), (2, 0)) == (0, 2, 4, 0)\n    index_multiplication((2, 4), (1, 2)) == (0, 2, 2, 2)\n    index_multiplication((2, 4), (0, 2)) == (0, 2, 2, 0)\n    index_multiplication((2, 4), (0, 1)) == (0, 2, 1, 0)\n    index_multiplication((2, 4), (0, 0)) == (0, 2, 0, 0)\n    index_multiplication((2, 4), (1, 2)) == (0, 2, 1, 2)\n    index_multiplication((2, 4), (0, 1)) == (0, 2, 1, 0)\n    index_multiplication((2, 4), (0, 3)) == (0, 2, 1, 3)\n    index_multiplication((2, 4), (1, 3)) == (0, 2, 1, 3)\n    index_multiplication((2, 4), (1, 0)) == (0, 2, 0, 0)\n    index_multiplication((2, 4), (0, 1)) == (0, 2, 0, 1)\n    index_multiplication((2, 4), (0, 3)) == (0, 2, 0, 3)\n    index_multiplication((2, 4), (2, 0)) == (0, 2, 0, 0)\n    index_multiplication((2, 4), (1, 2)) == (0, 2, 1, 2)\n    index_multiplication((2, 4), (1, 4)) == (0, 2, 1, 4)\n    index_multiplication((2, 4), (1, 1)) == (0, 2, 1, 1)\n    index_multiplication((2, 4), (0, 2)) == (0, 2, 1, 2)\n    index_multiplication((2, 4), (0, 4)) == (0, 2, 1, 4)\n    index_multiplication((2, 4), (0, 1)) == (0, 2, 1, 0)\n    index_multiplication((2, 4), (2, 4)) == (0, 0, 2, 4)\n    index_multiplication((2, 4), (1, 4)) == (0, 0, 2, 4)\n    index_multiplication((2, 4), (0, 0)) == (0, 0, 2, 0)\n    index_multiplication((2"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     index_multiplication((1,2,3), (4,5,6)) == ((1*4)+2*5)+3*6\nassert     index_multiplication((1,2,3,4), (4,5,6,7)) == ((1*4)+2*5)+3*6+4*7\nprint('Correct')\n\ndef index_exponentiation(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise exponentiation of tuple elements in the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     index_multiplication( (1,2,3,4,5), (1,2,3,4,5) ) == (1,2,3,4,5)\nassert     index_multiplication( (2,4,6,8,10), (3,6,9,12,15) ) == (3,12,21,36,45)\nassert     index_multiplication( (10,20,30,40,50), (100,200,300,400,500) ) == (100,200,300,400,500)\nassert     index_multiplication( (0,1,2,3,4), (1,2,3,4,5) ) == (1,2,3,4,5)\nassert     index_multiplication( (1,2,3,4,5), (1,2,3,4,5) ) == (1,2,3,4,5)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     index_multiplication((2, 3), (4, 5)) == (8, 15)\nassert     index_multiplication((3, 2), (6, 4)) == (24, 32)\nassert     index_multiplication((1, 1), (1, 1)) == (1, 1)\nassert     index_multiplication((1, 2), (1, 1)) == (1, 2)\nassert     index_multiplication((2, 1), (1, 1)) == (2, 1)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     index_multiplication((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)) == (1, 2, 3, 4, 5)\nassert     index_multiplication((5, 6, 7), (1, 2, 3)) == (5, 6, 7)\nassert     index_multiplication((1, 2, 3, 4, 5, 6, 7), (1, 2, 3, 4)) == (1, 2, 3, 4)\nassert     index_multiplication((2, 5, 8), (4, 6, 7)) == (8, 20, 40)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     index_multiplication(tup1, tup2) == (tup1[0]*tup2[0], tup1[1]*tup2[1])\nassert     index_multiplication(tup3, tup4) == (tup3[0]*tup4[0], tup3[1]*tup4[1])\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     index_multiplication((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)) == (1, 2, 3, 4, 5)\nassert index_multiplication((1, 2, 3, 4, 5), (6, 7, 8, 9, 10)) == (6, 7, 8, 9, 10)\nassert index_multiplication((1, 2, 3, 4), (5, 6, 7, 8)) == (5, 6, 7, 8)\nassert index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 5, 6)\nassert index_multiplication((1,), (2, 3)) == (2, 3)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     index_multiplication( (1, 2, 3, 4, 5, 6), (2, 3, 4, 5, 6) ) == (3, 6, 12, 24, 30, 36)\nassert     index_multiplication( (2, 3, 4, 5, 6), (2, 3, 4, 5, 6) ) == (2, 6, 12, 24, 30, 36)\nassert     index_multiplication( (1, 2, 3, 4), (2, 3, 4) ) == (2, 6, 12, 24)\nassert     index_multiplication( (1, 2, 3, 4), (2, 3) ) == (2, 6, 12, 24)\nassert     index_multiplication( (1, 2, 3, 4), (2, 3, 4, 5) ) == (2, 6, 12, 24)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_Occurrence((1, 2, 3, 4), [1,2,3,4]) == 4\nassert     count_Occurrence((1, 2, 3, 4), (1, 2, 3, 4)) == 4\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_Occurrence((1, 2, 2, 4), [1, 2, 2, 4]) == {1: 1, 2: 2, 4: 2}\n\ndef count_Occurrence_dict(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(lst)\n\nassert count_Occurrence_dict((1, 2, 2, 4), [1, 2, 2, 4]) == {1: 1, 2: 2, 4: 2}\n\ndef count_Occurrence_dict_alternative(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return dict(Counter(lst))\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # List of tuples\n    tup = (2, 5, 6, 8, 1, 5, 4, 3)\n    lst = [2, 5, 6, 8, 1, 5, 4, 3]\n\n    # Function call\n    count_Occurrence(tup, lst)\n\n    # Input tuples and lists\n    tup = (2, 5, 6, 8, 1, 5, 4, 3)\n    lst = [2, 5, 6, 8, 1, 5, 4, 3]\n    \n    # Function call\n    count_Occurrence(tup, lst)\n\n    # Input tuples and lists\n    tup = (2, 5, 6, 8, 1, 5, 4, 3)\n    lst = [2, 5, 6, 8, 1, 5, 4, 3]\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_Occurrence((1, 2, 3, 1), [1, 2, 3, 1, 4]) == Counter({1: 3, 2: 2, 3: 1})\nassert     count_Occurrence((1, 2, 3, 1), [1, 2, 3, 4]) == Counter({1: 2, 2: 1, 3: 1})\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ncount_Occurrence((1, 2, 3, 4, 3, 1, 2, 5, 5), [1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) == {1: 3, 2: 3, 3: 2, 4: 1, 5: 2}\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nlst = ['a','a','a','b','c','c','c','c']\ntup = ('a','a','a','b','c','c','c','c')\nassert count_Occurrence(tup, lst) == Counter(lst)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_Occurrence((1,2,3,4,5),[1,2,3,4,5]) == (Counter({1:4,2:3,3:2,4:1,5:1}))\nassert     count_Occurrence((1,2,3,4,5),[1,2,4,5]) == (Counter({1:3,2:1,3:1,4:1,5:1}))\nassert     count_Occurrence((1,2,3,4,5),[1,2,3,4,6]) == (Counter({1:3,2:1,3:1,4:1,5:1}))\n\ndef count_Occurrence_2(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(lst) == Counter(tup)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_Occurrence((3,3,3,4,1,1,3), [3,3,3,4,1,1,3]) == (3,4)\nassert     count_Occurrence((3,3,3,4,1,1,3), [3,4,3,4,1,1,3]) == (3,3)\nassert     count_Occurrence((3,3,3,4,1,1,3), [4,3,3,4,1,1,3]) == (0,3)\nassert     count_Occurrence((3,3,3,4,1,1,3), [1,1,1,3,3,3,4]) == (3,3)\nassert     count_Occurrence((3,3,3,4,1,1,3), [1,1,3,3,4,3,4]) == (2,3)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_Occurrence((1,2,3,4,4), [1,2,3,4,4]) == {1:3, 2:2, 3:1}\nassert count_Occurrence((1,1,1,2,2), [1,2,3]) == {1:2, 2:1, 3:1}\n\ndef count_Occurrence_Test(input, output):\n    '''\n    This is a helper function that calls count_Occurrence and verifies its output.\n    '''\n    print count_Occurrence(input, output)\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]\nassert cube_nums([4, 9, 16, 25, 36]) == [64, 81, 256, 625, 1296]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     cube_nums([]) == []\nassert     cube_nums([-3, -4, -1, -2]) == [-9, -8, -7, -6]\nassert     cube_nums([-1, 0, 2, 4]) == [0, 4, 16, 64]\nassert     cube_nums([-1, 0, 2, 4, 6]) == [0, 8, 144, 416]\nassert     cube_nums([0, 2, 4, 6, 8]) == [0, 8, 64, 256, 4096]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     cube_nums([0, 1, 2]) == [0, 1, 8], \"Error, should return the cubes of numbers\"\nassert     cube_nums([0, 1, 2, 3, 4, 5]) == [0, 1, 8, 27, 64, 125], \"Error, should return the cubes of numbers\"\nassert     cube_nums([1, 2, 3, 4, 5]) == [1, 4, 27, 64, 125], \"Error, should return the cubes of numbers\"\nassert     cube_nums([1, 2, 3, 4, 5, 6]) == [1, 4, 27, 64, 125, 216], \"Error, should return the cubes of numbers\"\nassert     cube_nums([1, 2, 3, 4, 5, 6, 7]) == [1, 4, 27, 64, 125, 216, 343], \"Error, should return the cubes of numbers\"\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ncube_nums([1, 2, 3, 4]) == [1, 8, 27, 64]\nassert \ncube_nums([-1, -2, -3, -4]) == [-1, -8, -27, -64]\nassert \ncube_nums([-10, -2, -7, -12, -19]) == [-100, -8, -27, -64, -29]\n\ndef is_prime(num):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    pass\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     cube_nums([1, 2, 3, 4]) == [1, 8, 27, 64]\nassert     cube_nums([1, 2, 3, 4, 5, 6]) == [1, 8, 27, 64, 125, 216]\nassert     cube_nums([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 27, 64, 125, 216, 343, 512]\n\ndef max_number_in_list(list_data):\n    '''\n    Write a function to find the maximum number in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     cube_nums([1, 2, 3]) == [1, 8, 27]\nassert cube_nums([-2, -1, 0, 1]) == [-4, 0, 4, 16]\nassert cube_nums([-3, -2, -1, 0, 1]) == [-27, -36, -45, -64, -81]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     cube_nums([]) == []\nassert     cube_nums([-1, 0, 1]) == [-1, 0, 1]\nassert     cube_nums([-1, -1, 1]) == [-1, -1, 1]\nassert     cube_nums([-1, -1, 2]) == [-1, -1, 2]\nassert     cube_nums([-1, -1, 2]) == [-1, -1, 2]\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     cal_sum(1) == 1, f'Wrong output for {cal_sum(1)}'\nassert     cal_sum(2) == 3, f'Wrong output for {cal_sum(2)}'\nassert     cal_sum(10) == 55, f'Wrong output for {cal_sum(10)}'\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     cal_sum(1) == 1 \nassert     cal_sum(10) == 55\nassert     cal_sum(100) == 250\nassert     cal_sum(101) == 251\nassert     cal_sum(2) == 2\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert abs(cal_sum(0) - 0) == 1\nassert abs(cal_sum(3) - 6) == 1\nassert abs(cal_sum(9) - 18) == 1\n\n\ndef cal_product(n): \n    '''\n    Write a function to calculate the product of perrin numbers.\n    '''\n    pass\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef is_prime(n):\n    '''\n    Write a function to check whether or not a given number is prime or not.\n    '''\n    pass\n\ndef get_prime_factors(n):\n    '''\n    Write a function to calculate the prime factorization of a given number.\n    '''\n    pass\n\ndef main():\n    n = 100\n    print('The sum of all prime numbers from 2 to {} is {}.'.format(n,cal_sum(n)))\n\n    print('The sum of all prime numbers from 2 to {} is {}.'.format(n,cal_sum(n)))\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     cal_sum(3) == 8, 'incorrect'\nassert     cal_sum(5) == 13, 'incorrect'\nassert     cal_sum(100) == 23340, 'incorrect'\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     cal_sum(1) == 1\nassert cal_sum(2) == 3\nassert cal_sum(3) == 6\nassert cal_sum(4) == 10\nassert cal_sum(5) == 15\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return sum(range(n))\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n'''\n    To check the correctness of the output, I suggest you use the \n    function below as a checker:\n'''\n\ndef check_sum(n): \n    assert cal_sum(n) == n*(n+1)//2\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     cal_sum(2) == 0, \n    '''\n    >>> assert cal_sum(2) == 0, \n        '''\n    'Wrong result of cal_sum(2)! - not 0 (it is).'\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_string([\"hello\", \"hi\", \"there\"], 2) == [\"hello\", \"hi\"]\nassert     extract_string([\"hello\", \"hi\", \"there\"], 3) == [\"hello\", \"hi\"]\nassert     extract_string([\"hello\", \"hi\", \"there\"], 4) == [\"hello\", \"hi\"]\nassert     extract_string([\"hello\", \"hi\", \"there\"], 5) == [\"hello\"]\nassert     extract_string([\"hello\", \"hi\", \"there\"], 6) == [\"hi\", \"there\"]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_string([\"banana\", \"watermelon\", \"kiwi\", \"apple\", \"orange\", \"mango\"], 5) == \"apple\"\nassert     extract_string([\"banana\", \"watermelon\", \"kiwi\", \"apple\", \"orange\", \"mango\"], 2) == \"banana\"\nassert     extract_string([\"banana\", \"watermelon\", \"kiwi\", \"apple\", \"orange\", \"mango\"], 1) == \"watermelon\"\nassert     extract_string([\"banana\", \"watermelon\", \"kiwi\", \"apple\", \"orange\", \"mango\"], 0) == \"banana\"\nassert     extract_string([\"banana\", \"watermelon\", \"kiwi\", \"apple\", \"orange\", \"mango\"], -1) == \"mango\"\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_string(['Hello', 'Hi', 'Hi', 'Hi'], 1) == ['Hi']\nassert     extract_string(['Hello', 'Hi', 'Hi', 'Hi'], 2) == ['Hi', 'Hi']\nassert     extract_string(['Hello', 'Hi', 'Hi', 'Hi'], 3) == ['Hi', 'Hi', 'Hi']\nassert     extract_string(['Hello', 'Hi', 'Hi', 'Hi'], 4) == ['Hi', 'Hi', 'Hi', 'Hi']\nassert     extract_string(['Hello', 'Hi', 'Hi', 'Hi'], 5) == ['Hi', 'Hi', 'Hi', 'Hi']\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef remove_element(lst, index):\n    '''\n    Write a function to remove a given element from a list.\n    '''\n    pass\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_string('I am a boy', 1) == 'I am'\nassert     extract_string('I am a boy', 0) == ''\nassert     extract_string('I am a boy', 2) == 'I am a'\nassert     extract_string('I am a boy', 3) == 'I am a boy'\nassert     extract_string('I am a boy', 4) == 'I am a '\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    for i in range(len(str)):\n        print(str[i])\n    pass\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_string([\"This is a\", \"test\", \".\"], 2) == [\"This is a\", \"is\", \".\"]\nassert     extract_string([\"This is a\", \"test\", \".\"], 3) == [\"This is a\", \"is\", \".\"]\nassert     extract_string([\"This is a\", \"test\", \".\"], 4) == [\"This is a\", \"is\", \".\"]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_string('abc', 5) == ['abc', 'abc', 'abc', 'abc', 'abc']\nassert     extract_string('abc', 4) == ['abc', 'abc', 'abc', 'abc']\nassert     extract_string('abc', 3) == ['abc', 'abc', 'abc']\nassert     extract_string('abc', 2) == ['abc', 'abc']\nassert     extract_string('abc', 1) == ['abc']\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_string([\"Hello\", \"World\", \"Python\", \"Virus\"], 2) == [\"He\", \"Wo\", \"Py\", \"Vr\"]\nassert     extract_string([\"Hello\", \"World\", \"Python\", \"Virus\"], 0) == [\"Hello\", \"World\", \"Python\", \"Virus\"]\nassert     extract_string([\"Hello\", \"World\", \"Python\", \"Virus\"], 10) == [\"Hello\", \"World\", \"Python\", \"Virus\"]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_string([\"apples\", \"oranges\", \"banana\", \"grapes\"], 1) == [\"apples\"]\nassert     extract_string([\"apples\", \"oranges\", \"banana\", \"grapes\"], 2) == [\"apples\", \"oranges\"]\nassert     extract_string([\"apples\", \"oranges\", \"banana\", \"grapes\"], 3) == [\"apples\", \"oranges\", \"banana\"]\nassert     extract_string([\"apples\", \"oranges\", \"banana\", \"grapes\"], 4) == [\"apples\", \"oranges\", \"banana\", \"grapes\"]\nassert     extract_string([\"apples\", \"oranges\", \"banana\", \"grapes\"], 5) == [\"apples\", \"oranges\", \"banana\", \"grapes\"]\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert not \n\ndef remove_comments(text1):\n    '''\n    Write a function to remove all comments from the given string.\n    '''\n    pass\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_whitespaces(\"   black_joker   \") == \"black_joker\"\nassert     remove_whitespaces(\"The movie was a bit rough\") == \"The_movi_bea_t_r\"\nassert     remove_whitespaces(\"This string has no spaces\") == \"This_sti_has_no_spa\"\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef simple_replace(text1, search, replace):\n    '''\n    Write a function that replaces a given word with another one.\n    '''\n    pass\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert remove_whitespaces('') == '', 'Empty string should be returned'\nassert remove_whitespaces(' ') == '', 'Single space should be returned'\nassert remove_whitespaces('     ') == '', 'Single space with leading and trailing spaces should be returned'\nassert remove_whitespaces('      ') == '', 'Leading and trailing spaces should be removed'\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_whitespaces(\"   Hello World!  \") == \"Hello World!\"\nassert     remove_whitespaces(\"Hello World\") == \"Hello World\"\nassert     remove_whitespaces(\"   Hello   \") == \"Hello\"\n\ndef is_alpha(text):\n    '''\n    Write a function to check if all the characters in the given string are \n    alphabets or not.\n    '''\n    pass"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_whitespaces('   my         string   ') =='mystring', 'Wrong'\nassert     remove_whitespaces('   my         string   ') =='mystring', 'Wrong'\nassert     remove_whitespaces('  my string ') =='my string', 'Wrong'\nassert     remove_whitespaces('my string') =='my string', 'Wrong'\nassert     remove_whitespaces('      my string     ') =='my string', 'Wrong'\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_whitespaces('    ') == '','should return \"\"'\nassert     remove_whitespaces('') == '','should return \"\"'\nassert     remove_whitespaces(' ') == '','should return \"\"'\nassert     remove_whitespaces('    ') == '','should return \"\"'\nassert     remove_whitespaces('\\n') == '','should return \"\"'\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_whitespaces(\" \") == \"\", \"Please correct the whitespace\"\nassert     remove_whitespaces(\" \") == \"\", \"Please correct the whitespace\"\nassert     remove_whitespaces(\" \") == \"\", \"Please correct the whitespace\"\nassert     remove_whitespaces(\"\") == \"\", \"Please correct the whitespace\"\nassert     remove_whitespaces(\"\\n\") == \"\", \"Please correct the whitespace\"\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost - sale_amount if actual_cost - sale_amount >= 0 else 0\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(loss_amount(10,100)) # 0.0\nprint(loss_amount(10,10)) # 0.0\nprint(loss_amount(10,9)) # 1.0\nprint(loss_amount(0,0)) # 0.0\nprint(loss_amount(10,0)) # 0.0\nprint(loss_amount(5,20)) # -5.0\nprint(loss_amount(10,20)) # -10.0\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     loss_amount(7000, 4000) == 0\nassert     loss_amount(80000, 0) == 9000\nassert     loss_amount(50000, 9000) == 10000\nassert     loss_amount(50000, 8000) == -8000\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     loss_amount(23,0) == 0, \"sales is zero\"\nassert     loss_amount(34,0) == 0, \"sale amount is zero\"\nassert     loss_amount(24,1) == 1, \"there is loss\"\nassert     loss_amount(30,3) == -3, \"there is loss\"\nassert     loss_amount(24,1.5) == -1.5, \"there is loss\"\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nactual_cost=3.4\nsale_amount=4\nassert loss_amount(actual_cost,sale_amount) == 0\nactual_cost=5.1\nsale_amount=5\nassert loss_amount(actual_cost,sale_amount) == 0.4\nactual_cost=7.1\nsale_amount=6\nassert loss_amount(actual_cost,sale_amount) == 0.4\nactual_cost=6.4\nsale_amount=5\nassert loss_amount(actual_cost,sale_amount) == 0.4\nactual_cost=7.1\nsale_amount=8\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     loss_amount(100,100)==0, \"Given 100 amount\"\nassert loss_amount(100,-100)==100, \"Given -100 amount\"\nassert loss_amount(300,100)==150, \"Given 100 amount\"\nprint (\"check_correctness: pass\")\n\ndef loss_amount_2(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost<sale_amount:\n        return 0\n    else:\n        return actual_cost-sale_amount\n    pass\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     loss_amount(12,10) == 2\nassert     loss_amount(13,10) == 3\nassert     loss_amount(11,10) == 0\nassert     loss_amount(12,8) == -2\nassert     loss_amount(13,8) == -3\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     loss_amount(10,5) == 5, \"Wrong output for actual_cost = 10 and sale_amount = 5\"\nassert loss_amount(50,25) == 0, \"Wrong output for actual_cost = 50 and sale_amount = 25\"\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     loss_amount(500,1000) == 0\nassert     loss_amount(500,950) == 500\nassert     loss_amount(200,100) == 0\n\n'''\nExpected Output:\n    0\n    500\n    0\n'''"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     loss_amount(1,2) == 0\nassert     loss_amount(2,2) == 0\nassert     loss_amount(5,4) == 1\nassert     loss_amount(6,4) == 1\n\n'''\nWrite a Python program to get a new string from a given string \n(str) and concatenate \"TO\" at the end of the given string. \nSample String : \"welcome\"\nExpected Result : \"welcomeTO\"\n'''"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sumofFactors(12) == 1\nassert     sumofFactors(64) == 10\nassert     sumofFactors(100) == 0\nassert     sumofFactors(0) == 0\n\nprint('\"Sum of even factors of a number\" function is working as expected.')\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    sumofFactors(4) == 2, 'function failed'\nassert \n    sumofFactors(8) == 2, 'function failed'\nassert \n    sumofFactors(12) == 6, 'function failed'"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert(sumofFactors(6) == 4)\nassert(sumofFactors(36) == 18)\nassert(sumofFactors(89) == 12)\nassert(sumofFactors(456) == 18)\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sumofFactors(1) == 0 \nassert     sumofFactors(2) == 0\nassert     sumofFactors(3) == 0\nassert     sumofFactors(4) == 0\nassert     sumofFactors(5) == 0\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ndef test_sumofFactors():\n    assert sumofFactors(10) == 2 + 3 + 4\n    assert sumofFactors(4) == 2 + 2\n    assert sumofFactors(9) == 2 + 3\n    assert sumofFactors(12) == 6\n    "
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert sumofFactors(6) == 0\nassert sumofFactors(13) == 0\nassert sumofFactors(101) == 18\nassert sumofFactors(1000) == 819\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nsumofFactors(12) == 2\nprint('Test case passed')\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(\"sumofFactors is correct\")\n\ndef sumofFactors(n): \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    n = int(n)\n    sum = 0\n    for i in range(1, n) : \n        if n % i == 0 : \n            sum = sum + i\n        i = i + 1\n    return sum\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return 'z' in text\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_match_wordz(\"1234\") == True, \"Should match 123\"\nassert     text_match_wordz(\"xyz\") == False, \"Should not match xyz\"\nassert     text_match_wordz(\"\") == False, \"Should not match empty string\"\nassert     text_match_wordz(None) == False, \"Should not match None\"\nassert     text_match_wordz(\"12\") == False, \"Should not match \"\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_match_wordz(\"zebra\")\nassert     not text_match_wordz(\"zebra123\")\nassert     not text_match_wordz(\"zebra123 zebra\")\nassert     text_match_wordz(\"zebra 123 zebra\")\nassert     text_match_wordz(\"zebra\")\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if re.search(r'\\bz\\w+\\b',text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    text_match_wordz(\"This is a text with a word containing 'z'\")\n    text_match_wordz(\"This is a text with a word containing z\")\n    text_match_wordz(\"This is a text with a word containing Z\")\n    text_match_wordz(\"This is a text with a word containing zz\")\n    text_match_wordz(\"This is a text with a word containing zzz\")\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert text_match_wordz(\"doh\") == True\nassert text_match_wordz(\"do\") == False\nassert text_match_wordz(\"do\") == False\nassert text_match_wordz(\"d\") == True\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_match_wordz(\"this is a test\") == True, \"Text match 1\"\nassert text_match_wordz(\"this is a test\") == False, \"Text match 2\"\nassert text_match_wordz(\"this is a test case\") == True, \"Text match 3\"\nassert text_match_wordz(\"this is a test\") == False, \"Text match 4\"\nassert text_match_wordz(\"this is a test case\") == True, \"Text match 5\"\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_match_wordz('The quick brown fox jumped over the lazy dog.') == True\nassert     text_match_wordz('the quick brown fox jumped over the lazy dog.') == False\nassert     text_match_wordz('the quick brown fox') == False\nassert     text_match_wordz('brown fox') == False\nassert     text_match_wordz('brown fox dog') == False\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_wordz(\"acz\")\nassert     text_match_wordz(\"aczaaa\")\nassert     text_match_wordz(\"aczaaaacz\")\nassert     text_match_wordz(\"\")\nassert     text_match_wordz(\"z\")\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_monthnumb_number(31) == True\nassert     check_monthnumb_number(5) == False\nassert     check_monthnumb_number(0) == False\nassert     check_monthnumb_number(10) == False\nassert     check_monthnumb_number(-1) == False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_monthnumb_number(2) == True, \\\n            \"Your code is incorrect. Check your code\"\nassert     check_monthnumb_number(7) == False, \\\n            \"Your code is incorrect. Check your code\"\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_monthnumb_number(1) == True\nassert     check_monthnumb_number(2) == False\nassert     check_monthnumb_number(3) == False\nassert     check_monthnumb_number(4) == True\nassert     check_monthnumb_number(5) == True\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_monthnumb_number(29) == True, 'Month number 29 has 31 days.'\nassert     check_monthnumb_number(28) == False, 'Month number 28 has 30 days.'\nassert     check_monthnumb_number(4) == False, 'Month number 4 has 30 days.'\nassert     check_monthnumb_number(1) == True, 'Month number 1 has 31 days.'\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_monthnumb_number(31) == True\nassert     check_monthnumb_number(30) == True\nassert     check_monthnumb_number(29) == True\nassert     check_monthnumb_number(25) == False\nassert     check_monthnumb_number(27) == True\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_monthnumb_number(31) == True\nassert     check_monthnumb_number(0) == False\nassert     check_monthnumb_number(-1) == False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_monthnumb_number(12) == False, \\\n            'Your code produced incorrect answer for 12 months.'\nassert check_monthnumb_number(1) == True, \\\n            'Your code produced incorrect answer for 1 months.'\n\n\ndef check_total_tokens(tokens2):\n    '''\n    Write a function to check whether the given list contains all the total tokens or not.\n    '''\n    pass\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    pass\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_monthnumb_number(1) == True, 'Month 1 has 31 days'\nassert     check_monthnumb_number(2) == False, 'Month 2 has 30 days'\nassert     check_monthnumb_number(3) == False, 'Month 3 has 31 days'\nassert     check_monthnumb_number(4) == False, 'Month 4 has 30 days'\nassert     check_monthnumb_number(5) == False, 'Month 5 has 31 days'\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_monthnumb_number(12)==True, 'the number should be 12'\nassert     check_monthnumb_number(4)==False, 'the number should be 4'\nassert     check_monthnumb_number(13)==True, 'the number should be 13'\nassert     check_monthnumb_number(1)==True, 'the number should be 1'\nassert     check_monthnumb_number(5)==False, 'the number should be 5'\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef reverse_list_in_place(lst):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    pass\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nreverse_string_list([]) == []\nassert reverse_string_list(['c']) == ['c']\nassert reverse_string_list(['a', 'b', 'c']) == ['c', 'b', 'a']\nassert reverse_string_list(['abcd', 'efgh', 'ijklmnop']) == ['jklmnop', 'efgh', 'abcd']\nassert reverse_string_list(['a', 'b', 'c', 'd']) == ['d', 'c', 'b', 'a']\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    reverse_string_list([\"a\",\"b\",\"c\"]) == [\"c\",\"b\",\"a\"], \"Test 1 failed\"\n    reverse_string_list([\"a\"]) == [\"a\"], \"Test 2 failed\"\n    reverse_string_list([]) == [], \"Test 3 failed\"\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     reverse_string_list([\"hello\", \"world\", \"io\"]) == [\"world\", \"io\", \"hello\"]\nassert     reverse_string_list([\"a\", \"b\", \"c\"]) == [\"c\", \"b\", \"a\"]\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     reverse_string_list(['hello', 'hi', 'bye', 'goodbye']) == ['bye', 'goodbye', 'hi', 'hello']\nassert     reverse_string_list(['hello', 'hi', 'goodbye']) == ['goodbye', 'hi', 'hello']\nassert     reverse_string_list(['hello', 'hi', 'goodbye']) == ['goodbye', 'hi', 'hello']\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert         reverse_string_list(['a','b','c']) == ['c','b','a']\nassert         reverse_string_list(['a','b']) == ['b','a']\nassert         reverse_string_list(['']) == []\n\ndef reverse_string_2(string):\n    '''\n    Write a function to reverse a given string.\n    '''\n    pass\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n'''\nWrite a function to reverse a list of list of words in an increasing order of length.\n'''\n\ndef reverse_list_of_words(words_list):\n    '''\n    Write a function to reverse each word in a given list of words in an increasing order of length.\n    '''\n    pass\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     reverse_string_list([]) == False\nassert     reverse_string_list(['a','b','c']) == ['c','b','a']\nassert     reverse_string_list(['ad','bc','c']) == ['c','bc','ad']\nassert     reverse_string_list(['a','c','b']) == ['b','c','a']\nassert     reverse_string_list(['a','c','d']) == ['d','c','a']\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nreverse_string_list([\"hello\", \"goodbye\"]) == ['goodbye', 'hello']\nreverse_string_list([\"hello\", \"goodbye\"]) == ['goodbye', 'hello']\nassert reverse_string_list([\"hello\", \"goodbye\"]) == ['goodbye', 'hello']"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Find_Min([1,2,3,4]) == (2, 3), \"Wrong Result\"\nassert     Find_Min([1,2,3,4,5]) == (2, 4), \"Wrong Result\"\nassert     Find_Min([1,2,3,4,5,6]) == (2, 5), \"Wrong Result\"\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Find_Min([1,2,3,4]) == 4, \"List indexing\"\nassert Find_Min([1,2,3,4,5]) == 1, \"List indexing\"\nassert Find_Min([1,2,3,4,5,6]) == 6, \"List indexing\"\nassert Find_Min([1,2,3,4,5,6,7]) == 6, \"List indexing\"\nassert Find_Min([1,2,3,4,5,6,7,8,9]) == 7, \"List indexing\"\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     Find_Min([[1,2,3,4,5],\n                [10,11,12,13],\n                [20,21,22,23,24]]) == 0, \"Should be 0\"\nassert     Find_Min([[1],\n                [1],\n                [1]]) == 0, \"Should be 0\"\nassert     Find_Min([[1],\n                [1],\n                [1]]) == 0, \"Should be 0\"\nassert     Find_Min([[1,2,3,4,5],\n                [10,11,12,13],\n                [20,21,22,23,24]]) == 1, \"Should be 1\"\nassert     Find_Min([[1,2,3,4,5],\n                [10,11,12,13],\n                [20,21,22,23,24]]) == 1, \"Should be 1\"\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Find_Min([1,2,3,4]) ==  [1,2]\nassert     Find_Min([1,2,3,4,5]) ==  [1,2]\nassert     Find_Min([1,2,3,4,5,6]) ==  [1,2]\nassert     Find_Min([1,2,3,4,5,6,7]) ==  [1,2,3]\nassert     Find_Min([1,2,3,4,5,6,7,8]) ==  [1,2,3,4]\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Find_Min([10,12,8,9]) == 12\nassert    Find_Min([12,5,7,9]) == 5\nassert    Find_Min([10,12,8,9,5,7,2]) == 5\nassert    Find_Min([5,4,3,2,1]) == 1\nassert    Find_Min([1,2,3,4,5]) == 1\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert Find_Min([]) == []\nassert Find_Min([1]) == [1]\nassert Find_Min([1, 1]) == [1]\nassert Find_Min([1, 1, 1, 1]) == [1]\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    Find_Min([[1],[2],\n    [3],[1],\n    [2],\n    [2,3,4,5]]) ==     [[1,2],[2]]\n    \n    Find_Min([[1,2,3,4,5],\n    [2],\n    [3,4],\n    [5],\n    [1,2,3],\n    [3,4,5]]) ==     [[3,4,5]]\n    \n    Find_Min([[1,2,3,4,5],\n    [2,3,4],\n    [5],\n    [1,2,3],\n    [3,4,5]]) ==     [[2,3,4],[5]]\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Find_Min([[1, 2], [2, 1], [3, 4], [4, 3]]) == [[1, 2], [2, 1], [3, 4], [4, 3]], 'Fail'\nassert     Find_Min([[1, 2], [2, 1], [3], [4, 3]]) == [[1, 2], [2, 1], [3], [4, 3]], 'Fail'\nassert     Find_Min([[1, 2], [2, 1], [3], [4]]) == [[1, 2], [2, 1], [3], [4]], 'Fail'\nassert     Find_Min([[1, 2], [2, 1], [3], [4, 5]]) == [[1, 2], [2, 1], [3, 4, 5]], 'Fail'\nassert     Find_Min([[1, 2], [2, 1], [3], [4, 5, 6]]) == [[1, 2], [2, 1], [3, 4, 5], [4, 5, 6]], 'Fail'\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Find_Min([1,2,3,4,5]) == [[1,2,3,4], [2,3,4,5]]\nassert     Find_Min([1,1,1,1,1]) == [[1,1,1,1]]\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     rectangle_area(2,3) == 6, \"should be 6\"\nassert     rectangle_area(10,10) == 100, \"should be 100\"\nassert     rectangle_area(10,2) == 20, \"should be 20\"\n\n\n\ndef rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     rectangle_area(2, 3) == 6\nassert     rectangle_area(8, 8) == 64\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rectangle_area(5,7) == 14, \"incorrect\"\nassert     rectangle_area(5,5) == 10, \"incorrect\"\nassert     rectangle_area(6,5) == 30, \"incorrect\"\nassert     rectangle_area(1,2) == 2, \"incorrect\"\nprint(\"passed\")\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     rectangle_area(2,3)==6\nassert     rectangle_area(3,4)==12"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef rectangle_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    pass\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     rectangle_area(3,4) == 6\nassert    rectangle_area(3,-4) == 0\nassert    rectangle_area(-3,4) == 0\nassert    rectangle_area(-3,-4) == 12\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rectangle_area(3,4)==12\nassert rectangle_area(6,8)==24\nassert rectangle_area(10,5)==25\nassert rectangle_area(3,4)==9\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     rectangle_area(2,3) == 6,'rectangle_area should return 6'\nassert     rectangle_area(0,5) == 0,'rectangle_area should return 0'\nassert     rectangle_area(10,20) == 200,'rectangle_area should return 200'\nassert     rectangle_area(5,5) == 25,'rectangle_area should return 25"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_uppercase(\"abcdABCd\") == \"abcdABCd\"\nassert     remove_uppercase(\"ABCdabcA\") == \"abcdabcA\"\nassert     remove_uppercase(\"ABCDabcA\") == \"abcdabcA\"\nassert     remove_uppercase(\"abcdabcA\") == \"abcdabcA\"\nassert     remove_uppercase(\"\") == \"\"\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_uppercase(\"\") == \"\"\nassert     remove_uppercase(\"a\") == \"a\"\nassert     remove_uppercase(\"A\") == \"A\"\nassert     remove_uppercase(\"AB\") == \"AB\"\nassert     remove_uppercase(\"A12345\") == \"A12345\"\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_uppercase(\"\") == \"\"\nassert     remove_uppercase(\"Hello World!\") == \"Hello World!\"\nassert     remove_uppercase(\"hello world!\") == \"hello world!\"\nassert     remove_uppercase(\"HELLO WORLD\") == \"hello world\"\nassert     remove_uppercase(\"1a2b3c\") == \"1a2b3c\"\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_uppercase('BANANA') == 'ANAN'\nassert remove_uppercase('banana') == 'banana'\nassert remove_uppercase('ANANANA') == 'anana'\nassert remove_uppercase('BANANA') == 'banana'\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_uppercase('THIS IS MY TEST') == 'this is my test', \"incorrect\"\nassert     remove_uppercase('THIS IS MY TEST') == 'this is my test', \"incorrect\"\nassert     remove_uppercase('THIS IS MY TEST') == 'this is my test', \"incorrect\"\nassert     remove_uppercase('THIS IS MY TEST') == 'this is my test', \"incorrect\"\nassert     remove_uppercase('THIS IS MY TEST') == 'this is my test', \"incorrect\"\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    remove_uppercase(\"HELLO\") == \"LLO\"\n    remove_uppercase(\"HELLO WORLD\") == \"LLO WROld\"\n    remove_uppercase(\"hello\") == \"hello\"\n    remove_uppercase(\"HELLO\") == \"HELLO\"\n    remove_uppercase(\"\") == \"\"\n\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    pass\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_uppercase('AMexyAB').lower() == 'amexya'\nassert     remove_uppercase('AMexyAB').upper() == 'amexya'\nassert     remove_uppercase('AMEXyAB').capitalize() == 'amexya'\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nremove_uppercase(\"\") == \"\"\nremove_uppercase(\"abc\") == \"abc\"\nremove_uppercase(\"ABC\") == \"ABC\"\nremove_uppercase(\"ABCD\") == \"ABCD\"\nremove_uppercase(\"ABCDE\") == \"ABCDE\"\nremove_uppercase(\"ABCD@\") == \"ABCD@\"\nremove_uppercase(\"ABCD#$\") == \"ABCD#$\"\nremove_uppercase(\"ABCD!#$\") == \"ABCD!#$\"\nremove_uppercase(\"ABCD@#$\") == \"ABCD@#$\"\nremove_uppercase(\"ABCD#$$\") == \"ABCD#$$\"\nremove_uppercase(\"ABCD!@#$$\") == \"ABCD!@#$$\"\nremove_uppercase(\"ABCD@#$%$$\") == \"ABCD@#$%$$\"\nremove_uppercase(\"ABCD#$%$$\") == \"ABCD#$%$$\"\nremove_uppercase(\"ABCD#$%$$$\") == \"ABCD#$%$$\"\nremove_uppercase(\"ABCD#$%$$$$\") == \"ABCD#$%$$\"\nremove_uppercase(\"ABCD#$%$$$$$\") == \"ABCD#$%$$\"\nremove_uppercase(\"ABCD#$%$$$$$$\") == \"ABCD#$%$$\"\nremove_uppercase(\"ABCD#$%$$$$$$$$\") == \"ABCD#$%$$\"\nremove_uppercase(\"ABCD#$%$$$$$$$$$\") == \"ABCD#$%$$\"\nremove_uppercase(\"ABCD#$%$$$$$$$$$$$\") == \"ABCD#$%$$$\"\nremove_uppercase(\"ABCD#$%$$$$$$$$$$$$\") == \"ABCD#$%$$$\"\nremove_uppercase(\"ABCD#$%$$$$$$$$$$$$$$\") == \"ABCD#$%$$\"\nremove_uppercase(\"ABCD#$%$$$$$$$$$$$$$$$\") == \"ABCD#$%$$\"\nremove_uppercase(\"ABCD#$%$$$$$$$$$$$$$$$$$\") == \"ABCD#$%$$\"\nremove_uppercase(\"ABCD#$%$$$$$$$$$$$$$$$$$$\") == \"ABCD#$%$$\"\nremove_uppercase(\"ABCD#$%$$$$$$$$$$$$$$$$$$$$\") == \"ABCD#$%$$\"\nremove_uppercase(\"ABCD#$%$$$$$$$$$$$$$$$$$$$$$\") == \"ABCD#$%$$\"\nremove_uppercase(\"ABCD#$%$$$$$$$$$$$$$$$$$$$$$$$\") == \"ABCD#$%$$\"\nremove_uppercase(\"ABCD#$%$$$$$$$$$$$$$$$$$$$$$$$$\") == \"ABCD#$%$$\"\nremove_uppercase(\"ABCD#$%$$$$$$$$$$$$$$$$$$$$$$$$$$\") == \"ABCD#$%$$\"\nremove_uppercase(\"ABCD#$%$$$$$$$$$$$$$$$$$$$$$$$$$$$\") == \"ABCD#$%$$\"\nremove_uppercase(\"ABCD#$%$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\") == \"ABCD#$%$$\"\nremove_uppercase(\"ABCD#$%$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\") == \"ABCD#$%$$\"\nremove_uppercase(\"ABCD#$%$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\") == \"ABCD#$%$$\"\nremove_uppercase(\"ABCD#$%$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\") == \"ABCD#$%$$\"\nremove_uppercase(\"ABCD#$%$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\") == \"ABCD#$%$$\"\nremove_uppercase(\"ABCD#$%$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\") == \"ABCD#$%$$\"\nremove_uppercase(\"ABCD#$%$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\") == \"ABCD#$%$$\"\nremove_uppercase(\"ABCD#$%$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\") == \"ABCD#$%$$\"\nremove_uppercase(\"ABCD#$%$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\") == \"ABCD#$%$$\"\nremove_uppercase(\"ABCD#$%$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\") == \"ABCD#$%$$\"\nremove_uppercase(\"ABCD#$%$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\") == \"ABCD#$%$$\"\nremove_uppercase(\"ABCD#$%$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\") == \"ABCD#$%$$\"\nremove_uppercase(\"ABCD#$%$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\") == \"ABCD#$%$$\"\nremove_uppercase(\"ABCD#$%$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\") == \"ABCD#$%$$\"\nremove_uppercase(\"ABCD#$%$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\") == \"ABCD#$%$$\"\nremove_uppercase(\"ABCD#$%$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\") == \"ABCD#$%$$\"\nremove_uppercase(\"ABCD#$%$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\") == \"ABCD#$%$$\"\nremove_uppercase(\"ABCD#$%$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\") == \"ABCD#$%$$\"\nremove_uppercase(\"ABCD#$%$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\") == \"ABCD#$%$$\"\nremove_uppercase(\"ABCD#$%$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\") == \"ABCD#$%$$\"\nremove_uppercase(\"ABCD#$%$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\") == \"ABCD#$%$$\"\nremove_uppercase(\"ABCD#$%$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\") == \"ABCD#$%$$\"\nremove_uppercase(\"ABCD#$%$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_uppercase(\"BANANAAAAAA\")==\"BANANAAAAAA\"\nassert     remove_uppercase(\"bananAAAAAA\")==\"bananAAAAAA\"\nassert     remove_uppercase(\"banananAAAAAA\")==\"banananAAAAAA\"\nassert     remove_uppercase(\"banananAAAANAA\")==\"banananAAAANAA\"\n\ndef remove_vowels(str1):\n    '''\n    Write a function to remove all the vowels from a given string.\n    '''\n    vowels = 'aeiouAEIOU'\n    for letter in vowels:\n        if letter in str1:\n            str1 = str1.replace(letter, '', 1)\n    return str1"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nremove_uppercase('LEetcode') == \"Letcod\"\nassert \nremove_uppercase('L1ce1o') == \"L1ce1o\"\nassert \nremove_uppercase('1Bm') == \"1Bm\"\n\ndef is_prime(n):\n    '''\n    Write a function to determine whether a given number is a prime number.\n    '''\n    pass\n\ndef list_prime_factors(n):\n    '''\n    Write a function that takes a non-negative integer n and returns the prime factors of n as a sorted list of integers.\n    '''\n    pass\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Extract([[1, 2], [3, 4], [5, 6], [7, 8]]) == [1, 2]\nassert     Extract([[1, 2], [3, 4], [5, 6]]) == [1, 2]\nassert     Extract([[1, 2], [3, 4], [5, 6, 7, 8]]) == [1, 2, 3, 4, 5, 6]\nassert     Extract([[1, 2], [3, 4, 5, 6, 7]]) == [1, 2, 3, 4, 5]\nassert     Extract([[1, 2], [3, 4], [5, 6, 7, 8], [9, 10]]) == [1, 2, 3, 4, 5, 6, 7, 8]\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef Extract(lst): \n    '''\n    Write a python function to get the last element of each sublist.\n    '''\n    pass\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nExtract([1, 2, 3]) == 1\nprint (\"correct\")\nassert \nExtract([1, 2, 3]) == 2\nprint (\"correct\")\nassert \nExtract([1, 2, 3]) == 3\nprint (\"correct\")\nassert \nExtract([]) == None\nprint (\"correct\")\nassert \nExtract(['a', 'b', 'c', 'd', 'e']) == 'a'\nprint (\"correct\")\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef Extract(lst):\n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in range(len(lst)):\n        if type(lst[i])==list:\n            lst[i] = lst[i][0]\n    return lst\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Extract(    [0, 2, [1,3], 4, 5]    ) == 1, \"should return 1\"\nassert     Extract(    [0, 2, [1,3], 4, 5, 6, 7]    ) == 1, \"should return 1\"\nassert     Extract(    [0, 2, [1,3], 4, 5, 6, 7, 8, 9]    ) == 1, \"should return 1\"\nassert     Extract(    [0, 2, [1,3], 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]    ) == 1, \"should return 1\"\nassert     Extract(    [0, 2, [1,3], 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]    ) == 1, \"should return 1\"\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Extract([[1, 2, 3], [4, 5, 6, 7], [8, 9]]) == 1\nassert     Extract([[1, 2, 3, 4], [5], [6, 7, 8]]) == 2\nassert     Extract([[1], [2, 3, 4], [5]]) == 3\nassert     Extract([[1, 2, 3, 4], [5], [6, 7, 8, 9], [10]]) == 4\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Extract([1,2,3,4,5]) == 1\nassert     Extract([1,2,[3,4,5],6]) == 1\nassert     Extract([[1,2,3],4,5,6]) == 1\nassert     Extract([[1,2],[3,4,5],6]) == 1\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Extract([[1,2],[3,4]]) == 1\nassert    Extract([[1,2]]) == 1\nassert    Extract([[1,2],[3,4,5],[6,7,8,9]]) == 1\nassert    Extract([[1,2],[3,4],[5,6,7,8]]) == 1\nassert    Extract([[1,2],[3,4,5,6],[7,8,9,10]]) == 1\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Extract([[1,2], [1,3], [1,4]]) == [1,1,1], \"Wrong answer\"\nassert     Extract([[1,2], [1,3], [1,4]]) == [1,2], \"Wrong answer\"\nassert     Extract([[1,2], [1,3], [1,4], [1,5]]) == [1,2,1,1], \"Wrong answer\"\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    str = 'The quick brown fox jumps over the lazy dog'\n    assert upper_ctr(str) == 6\n\nprint()\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     upper_ctr('Python') == 5\nassert     upper_ctr('PyThOn') == 7\nassert     upper_ctr('python') == 7\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\ndef test_upper_ctr():\n    '''\n    Type checking for upper_ctr.\n    '''\n    pass\n\n\ndef upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return '''\n        from __future__ import print_function\n\n        str = ''' + str + '''\n    \n        count = 0\n    \n        for char in str:\n            if char.isupper():\n                count += 1\n    \n        return count\n    '''\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     upper_ctr(\"Hi\") == 0\nassert     upper_ctr(\"PyTHON\") == 3\nassert     upper_ctr(\"Th3s aStRiNg\") == 3\nassert     upper_ctr(\"Coding in C\") == 7\nassert     upper_ctr(\"One\") == 0\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     upper_ctr(\"\") == 0, \"Empty string\"\nassert     upper_ctr(\"ABCDEFGHIJ\") == 6, \"Lowercase characters\"\nassert     upper_ctr(\"ABCdEfHIJ\") == 7, \"Uppercase characters\"\nassert     upper_ctr(\"ABCDEFGHIJK\") == 10, \"Lowercase and Uppercase characters\"\nassert     upper_ctr(\"ABCDEGHIJK\") == 10, \"Lowercase and Uppercase characters\"\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     upper_ctr('String') == 6\nassert     upper_ctr('Hello World') == 11\n\ndef upper_ctr2(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n\n    "
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     upper_ctr('Hello World') == 3\nassert     upper_ctr('HELO WORLD') == 4\nassert     upper_ctr('hello world') == 5\nassert     upper_ctr('HELLO WORLD') == 5\nassert     upper_ctr('hello hello') == 6\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     upper_ctr('HELLO') == 1, 'upper_ctr should return 1 for \"HELLO\"'\nassert     upper_ctr('HELLO WORLD') == 6, 'upper_ctr should return 6 for \"HELLO WORLD\"'\nassert     upper_ctr('HELLO WORLD') == 6, 'upper_ctr should return 6 for \"HELLO WORLD\"'\nassert     upper_ctr('HELLO WORLD') == 6, 'upper_ctr should return 6 for \"HELLO WORLD\"'\nassert     upper_ctr('HELLO WORLD') == 6, 'upper_ctr should return 6 for \"HELLO WORLD\"'\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     upper_ctr('asdf') == 0\nassert     upper_ctr('asd') == 1\nassert     upper_ctr('ASDF') == 2\nassert     upper_ctr('asdfasd') == 4\nassert     upper_ctr('asdfasdf') == 6\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     upper_ctr('A') == 1, 'Should be 1'\nassert     upper_ctr('B') == 1, 'Should be 1'\nassert     upper_ctr('a') == 0, 'Should be 0'\nassert     upper_ctr('z') == 2, 'Should be 2'\nassert     upper_ctr('Z') == 2, 'Should be 2'\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef combinations_dict(items, max):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     combinations_list([]) == []\nassert     combinations_list([1]) == [[1]]\nassert     combinations_list([1,2]) == [[1],[2]]\nassert     combinations_list([1,2,3]) == [[1], [2], [3]]\nassert     combinations_list([1,2,3,4]) == [[1], [2], [3], [4]]\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     combinations_list([1,2,3]) == [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\nassert     combinations_list([]) == []\n\ndef combinations(list1,list2):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ncombinations_list([1,2,3]) == [[1,2,3]]\ncombinations_list([1,2,3,4]) == [[1,2,3], [1,2,4], [1,3,4], [2,3,4]]\ncombinations_list([1,2,3,4,5,6,7]) == [[1,2,3,4], [1,2,3,5], [1,2,3,6],\n                                        [1,2,3,7], [1,2,4,5], [1,2,4,6],\n                                        [1,2,4,7], [1,2,5,6], [1,2,5,7],\n                                        [1,2,6,7], [1,3,4,5], [1,3,4,6],\n                                        [1,3,4,7], [1,3,5,6], [1,3,5,7],\n                                        [1,3,6,7], [1,4,5,6], [1,4,5,7],\n                                        [1,4,6,7], [1,5,6,7],\n                                        [2,3,4,5], [2,3,4,6],\n                                        [2,3,4,7], [2,3,5,6],\n                                        [2,3,5,7], [2,3,6,7],\n                                        [2,4,5,6], [2,4,5,7],\n                                        [2,4,6,7], [2,5,6,7],\n                                        [3,4,5,6], [3,4,5,7],\n                                        [3,4,6,7], [3,5,6,7],\n                                        [4,5,6,7]]\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     combinations_list([1,2,3]) == [[1,2,3],\n                                [1,3,2],\n                                [2,1,3],\n                                [2,3,1],\n                                [3,1,2],\n                                [3,2,1]]\nassert     combinations_list([1,2,3,4]) == [[1,2,3,4],\n                                [1,2,4,3],\n                                [1,3,2,4],\n                                [1,3,4,2],\n                                [1,4,2,3],\n                                [1,4,3,2],\n                                [2,1,3,4],\n                                [2,1,4,3],\n                                [2,3,1,4],\n                                [2,3,4,1],\n                                [2,4,1,3],\n                                [3,1,2,4],\n                                [3,1,4,2],\n                                [3,2,1,4],\n                                [3,2,4,1],\n                                [3,4,1,2],\n                                [4,1,2,3],\n                                [4,1,3,2],\n                                [4,2,1,3],\n                                [4,2,3,1],\n                                [4,3,1,2],\n                                [4,3,2,1]]\nassert     combinations_list([]) == []\nassert     combinations_list([\"a\",\"b\",\"c\"]) == []\nassert     combinations_list([1,2]) == []\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert not (combinations_list(['p','y','t','h','o','n']) == \n[['p','y','t'], ['p','y','h'], ['p','y','o'], ['p','h','o'], ['p','h','t'], ['p','o','t']])\nassert \nassert (combinations_list(['p','y','t','h','o','n']) == \n[['p','y','t'], ['p','y','h'], ['p','y','o'], ['p','h','o'], ['p','h','t'], ['p','o','t'], ['p','o','n']])\nprint('PASSED all tests!')\n\ndef dict_selector(dict1, key):\n    '''\n    Write a function that returns a subset of a dictionary by selecting a given key.\n    '''\n    pass\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef combinations_gen(n):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    pass\n\n\n\ndef combinations(n,k):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    pass"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint(\"Pass\" if (else) else \"Fail\")\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef combinations_list_v2(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    result = arr[0]\n    cur_max = arr[0]\n    cur_min = arr[0]\n\n    for i in range(1, len(arr)):\n        cur_max = max(cur_max, arr[i])\n        cur_min = min(cur_min, arr[i])\n\n        result = max(result, cur_max * cur_min)\n    return result\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_subarray_product([-2, -3, 4, -1, -2, 1, 5, -3]) == 6\nassert     max_subarray_product([-2, -3, 4, -1, -2, 1]) == 0\nassert     max_subarray_product([1, -2, -3, -4, -5]) == -45\nassert     max_subarray_product([-2, -3, 4, -1, -2, 1, 5, -3, -4, -5, -6, -7, -8, -9, -10]) == 80\nassert     max_subarray_product([]) == -1\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert max_subarray_product([-1,1,-2,-3,-4]) == -1\nassert max_subarray_product([-1,2,-3,-4,1]) == 6\nassert max_subarray_product([-2,-3,-1,-4,1]) == -6\nassert max_subarray_product([1]) == 1\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_subarray_product([2, 3, -2, 4]) == 6, 'Wrong'\nassert     max_subarray_product([-2, -3, 4]) == 0, 'Wrong'\nassert     max_subarray_product([-2, 3, -4, 5]) == 30, 'Wrong'\nassert     max_subarray_product([-2, -3, 0, 5]) == 0, 'Wrong'\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_subarray_product([-3, 6, -3, -2, 3, -2]) == 6\nassert     max_subarray_product([1, -3, -2, -3, 1]) == 6\nassert     max_subarray_product([-2, -1, -1, -1]) == -1\nassert     max_subarray_product([1, -2, 3, 4, -1]) == 6\nassert     max_subarray_product([-2, 1, -3, 4, -1]) == 0\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_subarray_product([2,-3,-4,-2,6]) == -6\nassert     max_subarray_product([2,-2,2,-4,1]) == -2\nassert     max_subarray_product([-4,3,-2,6,-1]) == 0\nassert     max_subarray_product([2,3,-4,1]) == 6\nassert     max_subarray_product([3,4,-1]) == 4\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_subarray_product([1,1]) == 1\nassert     max_subarray_product([1,2,3,4,5]) == 30\nassert     max_subarray_product([3,2,-1,4,-1,3]) == 6\nassert     max_subarray_product([-2,1,-3,4,1,-5,6]) == 120\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_value({1: 1, 2: 2, 3: 3}, 1) == True, \"Expected True\"\nassert     check_value({1: 1, 2: 2, 3: 3}, 2) == False, \"Expected False\"\nassert     check_value({1: 1, 2: 2, 3: 3}, 0) == False, \"Expected False\"\nassert     check_value({1: 1, 2: 2, 3: 3, 4: 4}, 0) == False, \"Expected False\"\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_value({1:10, 2:20, 3:30}, 1)\nassert     check_value({1:10, 2:20, 3:30}, 2)\nassert     check_value({1:10, 2:20, 3:30}, 3)\nassert     check_value({1:10, 2:20, 3:30}, 4)\nassert     check_value({1:10, 2:20, 3:30}, 5)\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_value({'a':1, 'b':2, 'c':3, 'd':4, 'e':5}, 'all_equal')    == True, \\\n        'incorrect: all_equal returns True if all values are the same'\nassert     check_value({'a':1, 'b':2, 'c':3, 'd':4, 'e':5}, 'all_equal')    == False, \\\n        'incorrect: all_equal returns True if all values are the same'\nassert     check_value({'a':1, 'b':2, 'c':1, 'd':4, 'e':5}, 'all_equal')    == False, \\\n        'incorrect: all_equal returns True if all values are the same'\nassert     check_value({'a':1, 'b':2, 'c':3, 'd':4, 'e':5}, 'all_different')    == True, \\\n        'incorrect: all_different returns True if all values are different'\nassert     check_value({'a':1, 'b':2, 'c':3, 'd':4, 'e':5}, 'all_different')    == False, \\\n        'incorrect: all_different returns True if all values are different'\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_value({'a': 10, 'b': 20}, 10) == True\nassert     check_value({'a': 10, 'b': 20}, 20) == False\nassert     check_value({'a': 10, 'b': 20}, 'a') == False\nassert     check_value({'a': 10, 'b': 20}, 10.0) == False\nassert     check_value({'a': 10, 'b': 20}, False) == False\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_value({1:2, 2:1, 3:3}, 2) == True\nassert     check_value({1:2, 2:3, 3:1}, 2) == False\nassert     check_value({1:2, 2:2, 3:3}, 2) == False\nassert     check_value({1:2, 2:2, 3:3}, 1) == False\n\n\ndef add_key_value(dictionary, key, value):\n    '''\n    Write a function to add a new key and value in a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_value({1: \"a\", 2: \"b\", 3: \"c\"}, 2) == False, \"Fail\"\nassert     check_value({1: \"a\", 2: \"b\", 3: \"c\"}, 3) == True, \"Fail\"\nassert     check_value({1: \"a\", 2: \"b\", 3: \"c\"}, 1) == False, \"Fail\"\n\nprint('\\033[92m' + \"Test passed\" + '\\033[0m')"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert         check_value({}, 0) == True\nassert         check_value({'a':1, 'b':2}, 1) == True\nassert         check_value({'a':1, 'b':2}, 2) == False\n\ndef check_value2(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ncheck_value({'a': 1, 'b': 2, 'c': 3}, {'a': 1, 'b': 2, 'c': 3}) == True\nassert\ncheck_value({'a': 1, 'b': 2, 'c': 3}, {'a': 1, 'b': 2, 'c': 2}) == False\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_value({1:1, 2:1, 3:1, 4:1}, 3) == True, \"Fail to check_value()\"\nassert     check_value({1:1, 2:1, 3:1, 4:1}, 2) == False, \"Fail to check_value()\"\nassert     check_value({1:1, 2:2, 3:1, 4:1}, 1) == True, \"Fail to check_value()\"\nassert     check_value({1:1, 2:1, 3:1, 4:1}, 4) == True, \"Fail to check_value()\"\nassert     check_value({1:1, 2:2, 3:2, 4:1}, 2) == False, \"Fail to check_value()\"\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     (drop_empty({'a':1,'b':2,'c':3})=={'a':1,'b':2}), \"Fail\"\nassert     (drop_empty({'a':1,'b':2,'c':3,'d':4,'e':5})=={'a':1,'b':2,'c':3}), \"Fail\"\nassert     (drop_empty({'a':1,'b':2,'c':3,'d':4,'e':5,'f':6})=={'a':1,'b':2,'c':3,'d':4,'e':5}), \"Fail\"\nassert     (drop_empty({'a':1,'b':2,'c':3,'d':4,'e':5,'f':6,'g':7})=={'a':1,'b':2,'c':3,'d':4,'e':5,'f':6}), \"Fail\"\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndrop_empty({'a':1,'b':2, 'c': 3, 'd': 4}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n\ndrop_empty({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\n\ndrop_empty({'a':1,'b':2, 'c': 3, 'd': 4, 'e': 5, 'f':6, 'g':7}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7}\n\ndrop_empty({}) == {}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     drop_empty({\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}) == {\n                                            \"name\": \"John\",\n                                            \"age\": 30,\n                                            \"city\": \"New York\"}\nassert     drop_empty({\"name\": \"\", \"age\": 30, \"city\": \"New York\"}) == {\n                                            \"name\": \"\",\n                                            \"age\": 30,\n                                            \"city\": \"New York\"}\nassert     drop_empty({\"name\": \"John\", \"age\": 30, \"city\": \"\"}) == {\n                                            \"name\": \"John\",\n                                            \"age\": 30,\n                                            \"city\": \"\"}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     drop_empty({1: \"a\", 2: \"b\", 3: \"c\"}) == \n    {1: \"a\", 2: \"b\", 3: \"c\"}, f\"Wrong result: {drop_empty({1: \"a\", 2: \"b\", 3: \"c\"})} instead of {{1: 'a', 2: 'b', 3: 'c'}}\"\nassert     drop_empty({}) == {}, f\"Wrong result: {drop_empty({})} instead of {{}}\"\nassert     drop_empty({1: \"a\", 2: \"b\", 3: \"\"}) == \n    {1: 'a', 2: 'b', 3: ''}, f\"Wrong result: {drop_empty({1: 'a', 2: 'b', 3: ''})} instead of {{1: 'a', 2: 'b', 3: ''}}\"\nassert     drop_empty({}) == {}, f\"Wrong result: {drop_empty({})} instead of {{}}\"\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     drop_empty({}) == {}\nassert     drop_empty({'a':1, 'b':2}) == {'a':1, 'b':2}\nassert     drop_empty({'a':1, 'b':2, 'c':3}) == {'a':1, 'b':2, 'c':3}\nassert     drop_empty({'a':1, 'b':2, 'c':3, 'd':4}) == {'a':1, 'b':2, 'c':3}\nassert     drop_empty({'a':1, 'b':2, 'c':3, 'd':4, 'e':5, 'f':6}) == {'a':1, 'b':2, 'c':3, 'd':4}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert drop_empty({\"a\":1,\"b\":1,\"c\":1,\"d\":1,\"e\":1,\"f\":1}) == {'a':1, 'c':1, 'f':1}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     drop_empty({}) == False\nassert     drop_empty({'A':1}) == True\nassert     drop_empty({'A':1,'B':2}) == True\nassert     drop_empty({'A':1,'B':2,'C':3}) == False\nassert     drop_empty({'A':1,'B':2,'C':3,'D':4}) == True\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert {1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five'} == drop_empty({1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five'}) == {1: 'one', 2: 'two', 3: 'three', 4: 'four'}"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     drop_empty({'a':1,'b':2,'c':3}) == {'b':2,'c':3}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert not drop_empty({1: 2})\nassert not drop_empty({1: 2, 3: 4})\nassert not drop_empty({'a': 2, 'b': 3})\nassert drop_empty({})\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(\"check the correctness of max_product\")\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert max_product([0,1,2,3]) == 6\nassert max_product([0,1,2,3,4]) == 24\nassert max_product([0,1,2,3,4,5]) == 120\nassert max_product([0,2,3,4,5,6]) == 720\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_product([1, 5, 6, 2, 3]) == 20\nassert     max_product([1, 2, 4, 6]) == 24\nassert     max_product([3, 4, 1, 5]) == 30\n\nprint(\"All the tests are passed\")"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_product([2, 3, -2, 4]) == 6\nassert     max_product([-2, -3, 4, -5]) == 0\nassert     max_product([-1, -2, -3, -4]) == -24\nassert     max_product([-1, -2, -3]) == -6\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    max_product([1,2,3,-2,4]) == 6\n    max_product([0,2,3,-2,4]) == 0\n    max_product([1,2,3,-2,4,5,6,7,8,9]) == 64\n    max_product([1,2,3,4,5,6,7,8,9]) == 72\n    max_product([1,2,3,4,5]) == 24\n    max_product([1,2,3,4,5,6]) == 24\n    max_product([1,2,3,4,5,6,7]) == 24\n    max_product([1,2,3,4,5,6,7,8]) == 72\n    max_product([1,2,3,4,5,6,7,8,9]) == 72\n    max_product([]) == 1\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    arr = [-1, -3, -1]\n    print(max_product(arr)"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_product([1,2,3,4,5]) == 60\nassert     max_product([1,2,3]) == 6\nassert     max_product([2,3,4]) == 24\nassert     max_product([2,4,6,8,10,12]) == 96\nassert     max_product([2,4,6,8,10,12,5,4,2]) == 48\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     add_pairwise((1,2,3))     ==    (2,4,6)\nassert     add_pairwise((1,3,5))     ==    (2,4,6)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef add_pairwise(tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    result = 0\n    for i in range(1, len(tup)):\n        result += tup[i - 1] + tup[i]\n    return result\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     (add_pairwise((1, 2, 3, 4, 5))) == (1, 3, 6, 10, 15), \"Addition of all neighboring elements failed\"\nassert     (add_pairwise((1, 2, 3, 4, 5, 6))) == (1, 3, 5, 7, 9, 11), \"Addition of all neighboring elements failed\"\nassert     (add_pairwise((1, 2, 3, 4, 5, 6, 7))) == (1, 3, 5, 7, 9, 11, 13), \"Addition of all neighboring elements failed\"\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_pairwise((1,2,3,4)) == (1,3,5,7)\nassert     add_pairwise((-1,-2,-3)) == (-2,-4,-6)\nassert     add_pairwise((-100,-200,-300)) == (-110,-210,-310)"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef add_all(numbers):\n    '''\n    Write a function to find the sum of all numbers in the given array.\n    '''\n    pass\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     add_pairwise((0, 1, 2, 3, 4, 5, 6)) == (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\nassert     add_pairwise((0, -1, 2, 3, 4, 5, 6)) == (0, -1, 2, 3, 4, 5, 6, -7, 8, 9)\nassert     add_pairwise((0, -10, 2, 3, 4, 5, 6)) == (0, -10, 2, 3, 4, 5, 6, -11, 8, 9)\nassert     add_pairwise((0, -100, 2, 3, 4, 5, 6)) == (0, -100, 2, 3, 4, 5, 6, -101, 8, 9)\nassert     add_pairwise((0, -10000, 2, 3, 4, 5, 6)) == (0, -10000, 2, 3, 4, 5, 6, -10001, 8, 9)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     add_pairwise((-1, -2, -3)) == (-2, -4, -6), 'output should be (-2, -4, -6)'\nassert     add_pairwise((2, -2, 3)) == (2, -4, 5), 'output should be (2, -4, 5)'\nassert     add_pairwise((-4, -4, 2)) == (-8, -8, 4), 'output should be (-8, -8, 4)'\nassert     add_pairwise((-4, -4, -2)) == (-8, -8, -4), 'output should be (-8, -8, -4)'\nassert     add_pairwise((4, 2, 2)) == (6, 4, 4), 'output should be (6, 4, 4)'\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     add_pairwise((1,2)) == (3,4)\nassert     add_pairwise((5,6)) == (9,10)\nassert     add_pairwise((3,2)) == (6,4)\nassert     add_pairwise((9,10)) == (12,11)\nassert     add_pairwise((9,8)) == (12,10)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add_pairwise((2, 3, 4, 5, 6, 7, 8)) == (6, 11, 16, 25, 30, 35, 42)\nassert     add_pairwise((2, 4, 6, 8)) == (6, 12, 16, 18)\nassert     add_pairwise((8, 12, 16)) == (16, 18, 20, 22, 24, 26, 28)\nassert     add_pairwise((6, 16, 18)) == (18, 20, 22, 24, 26, 28)\nprint('Question 3:')\nprint('Pass' if ((6, 16, 18) == add_pairwise((6, 16, 18))) else 'Fail')\nprint('Pass' if ((12, 16, 18) == add_pairwise((2, 4, 6, 8))) else 'Fail')\nprint('Pass' if ((16, 18, 20, 22, 24, 26, 28) == add_pairwise((2, 3, 4, 5, 6, 7, 8))) else 'Fail')\nprint('Pass' if ((18, 20, 22, 24, 26, 28, 30) == add_pairwise((2, 3, 4, 5, 6, 7, 8))) else 'Fail')\nprint('Pass' if ((22, 24, 26, 28, 30, 32, 34, 36) == add_pairwise((2, 3, 4, 5, 6, 7, 8))) else 'Fail')\nprint('Pass' if ((24, 26, 28, 30, 32, 34, 36, 38) == add_pairwise((2, 3, 4, 5, 6, 7, 8))) else 'Fail')\nprint('Pass' if ((26, 28, 30, 32, 34, 36, 38, 40) == add_pairwise((2, 3, 4, 5, 6, 7, 8))) else 'Fail')\nprint('Pass' if ((28, 30, 32, 34, 36, 38, 40, 42) == add_pairwise((2, 3, 4, 5, 6, 7, 8))) else 'Fail')\nprint('Pass' if ((30, 32, 34, 36, 38, 40, 42, 44) == add_pairwise((2, 3, 4, 5, 6, 7, 8))) else 'Fail')\nprint('Pass' if ((32, 34, 36, 38, 40, 42, 44, 46) == add_pairwise((2, 3, 4, 5, 6, 7, 8))) else 'Fail')\nprint('Pass' if ((34, 36, 38, 40, 42, 44, 46, 48) == add_pairwise((2, 3, 4, 5, 6, 7, 8))) else 'Fail')\nprint('Pass' if ((36, 38, 40, 42, 44, 46, 48, 50) == add_pairwise((2, 3, 4, 5, 6, 7, 8))) else 'Fail')\nprint('Pass' if ((38, 40, 42, 44, 46, 48, 50, 52) == add_pairwise((2, 3, 4, 5, 6, 7, 8))) else 'Fail')\nprint('Pass' if ((40, 42, 44, 46, 48, 50, 52, 54) == add_pairwise((2, 3, 4, 5, 6, 7, 8))) else 'Fail')\nprint('Pass' if ((42, 44, 46, 48, 50, 52, 54, 56) == add_pairwise((2, 3, 4, 5, 6, 7, 8))) else 'Fail')\nprint('Pass' if ((44, 46, 48, 50, 52, 54, 56, 58) == add_pairwise((2, 3, 4, 5, 6, 7, 8))) else 'Fail')\nprint('Pass' if ((46, 48, 50, 52, 54, 56, 58, 60) == add_pairwise((2, 3, 4, 5, 6, 7, 8))) else 'Fail')\nprint('Pass' if ((48, 50, 52, 54, 56, 58, 60, 62) == add_pairwise((2, 3, 4, 5, 6, 7, 8))) else 'Fail')\nprint('Pass' if ((50, 52, 54, 56, 58, 60, 62, 64) == add_pairwise((2, 3, 4, 5, 6, 7, 8))) else 'Fail')\nprint('Pass' if ((52, 54, 56, 58, 60, 62, 64, 66) == add_pairwise((2, 3, 4, 5, 6, 7, 8))) else 'Fail')\nprint('Pass' if ((54, 56, 58, 60, 62, 64, 66, 68) == add_pairwise((2, 3, 4, 5, 6, 7, 8))) else 'Fail')\nprint('Pass' if ((56, 58, 60, 62, 64, 66, 68, 70) == add_pairwise((2, 3, 4, 5, 6, 7, 8))) else 'Fail')\nprint('Pass' if ((58, 60, 62, 64, 66, 68, 70, 72) == add_pairwise((2, 3, 4, 5, 6, 7, 8))) else 'Fail')\nprint('Pass' if ((60, 62, 64, 66, 68, 70, 72, 74) == add_pairwise((2, 3, 4, 5, 6, 7, 8))) else 'Fail')\nprint('Pass' if ((62, 64, 66, 68, 70, 72, 74, 76) == add_pairwise((2, 3, 4, 5, 6, 7, 8))) else 'Fail')\nprint('Pass' if ((64, 66, 68, 70, 72, 74, 76, 78) == add_pairwise((2, 3, 4, 5, 6, 7, 8))) else 'Fail')\nprint('Pass' if ((66, 68, 70, 72, 74, 76, 78, 80) == add_pairwise((2, 3, 4, 5, 6, 7, 8))) else 'Fail')\nprint('Pass' if ((68, 70, 72, 74, 76, 78, 80, 82) == add_pairwise((2, 3, 4, 5, 6, 7, 8))) else 'Fail')\nprint('Pass' if ((70, 72, 74, 76, 78, 80, 82, 84) == add_pairwise((2, 3, 4, 5, 6, 7, 8))) else 'Fail')\nprint('Pass' if ((72, 74, 76, 78, 80, 82, 84, 86) == add_pairwise((2, 3, 4, 5, 6, 7, 8))) else 'Fail')\nprint('Pass' if ((74, 76, 78, 80, 82, 84, 86, 88) == add_pairwise((2, 3, 4, 5, 6, 7, 8))) else 'Fail')\nprint('Pass' if ((76, 78, 80, 82, 84, 86, 88, 90) == add_pairwise((2, 3, 4, 5, 6, 7, 8))) else 'Fail')\nprint('Pass' if ((78, 80, 82, 84, 86, 88, 90, 92) == add_pairwise((2, 3, 4, 5, 6, 7, 8))) else 'Fail')\nprint('Pass' if ((80, 82, 84, 86, 88, 90, 92, 94) == add_pairwise((2, 3, 4, 5, 6, 7, 8))) else 'Fail')\nprint('Pass' if ((82, 84, 86, 88, 90, 92, 94, 96) == add_pairwise((2, 3, 4, 5, 6, 7, 8))) else 'Fail')\nprint('Pass' if ((84, 86, 88, 90, 92, 94, 96, 98) == add_pairwise((2, 3, 4, 5, 6, 7, 8))) else 'Fail')\nprint('Pass' if ((86, 88, 90, 92, 94, 96, 98, 100) == add_pairwise((2, 3, 4, 5, 6, 7, 8))) else 'Fail')\nprint('Pass' if ((88, 90, 92, 94, 96, 98, 100, 102) == add_pairwise((2, 3, 4, 5, 6, 7, 8))) else 'Fail')\nprint('Pass' if ((90, 92, 94, 96, 98, 100, 102, 104) == add_pairwise((2, 3, 4, 5, 6, 7, 8))) else 'Fail')\nprint('Pass' if ((92, 94, 96, 98, 100, 102, 104, 106) == add_pairwise((2, 3, 4, 5, 6, 7, 8))) else 'Fail')\nprint('Pass' if ((94, 96, 98, 100, 102, 104, 10"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_remainder([1,2,3], 4) == 3\nassert     find_remainder([4,7,10], 11) == 84\nassert     find_remainder([1,2,3], 3) == 6\nassert     find_remainder([0,0,0], 1) == 0\nassert     find_remainder([0,0,0], 0) == 0\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef find_remainder(arr, n):\n    # the pythonic way to calculate the product\n    # the modulo operation is exactly equivalent\n    # to find the remainder of a given division\n    return ((reduce(lambda x, y: x*y, arr)) % n)\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_remainder([2,3,4], 5) == 24\nassert     find_remainder([4,3,2], 5) == 24\nassert     find_remainder([1,2,3], 5) == 0\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_remainder([1, 2, 3, 4], 10) == 1\nassert find_remainder([10, 20, 30, 40], 10) == 1000\nassert find_remainder([1, 2, 3, 4], 5) == 0"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_remainder([2,3,4], 5) == 0\nassert     find_remainder([2,3,4], 7) == 24\nassert     find_remainder([2,3,4], 10) == 12\nassert     find_remainder([3,7,5], 7) == 1\nassert     find_remainder([3,7,5], 11) == 0\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nfind_remainder([0,0,0], 2) == 0\nassert \nfind_remainder([4,4,4], 2) == 0\nassert \nfind_remainder([1,1,1], 2) == 0\nassert \nfind_remainder([2,2,2], 2) == 0\nassert \nfind_remainder([2,2,2], 3) == 0\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nimport itertools\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_remainder([2, 3, 4], 5) == 1\nassert     find_remainder([1, 2, 4, 8], 5) == 4\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_Consecutive([2, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == True\nassert     check_Consecutive([2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == True\nassert     check_Consecutive([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 3]) == False\nassert     check_Consecutive([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 3, 4, 5]) == False\nassert     check_Consecutive([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 3, 4, 5, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_Consecutive([0,1,1,1,2,4,6,8,9,10,13,16,17,19,21,22,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_Consecutive([1,2,3,4,5]) == False\nassert     check_Consecutive([1,2,3,4,5,6]) == False\nassert     check_Consecutive([1,2,3,4,5,6,7]) == True\nassert     check_Consecutive([1,2,3,4,5,6,7,8]) == True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_Consecutive([3, 5, 4, 6, 7, 6, 3])\nassert     not check_Consecutive([1, 2, 3, 4, 5, 6])"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_Consecutive([1, 2, 4, 5, 7, 8]) == True, \"Should return True\"\nassert     check_Consecutive([1, 2, 4, 5, 6, 8]) == False, \"Should return False\"\nassert     check_Consecutive([1, 2, 4, 5, 6, 8]) == False, \"Should return False\"\nassert     check_Consecutive([1, 2, 4, 5, 7, 8]) == False, \"Should return False\"\n\n'''\n9.    Write a python function to check whether the given list contains all consecutive numbers or not.\n'''\ndef check_Consecutive_2(l):\n    '''\n    Write a python function to check whether the given list contains all consecutive numbers or not.\n    '''\n    pass\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_Consecutive([1, 2, 3, 4, 5, 6]) == True\nassert     check_Consecutive([1, 1, 1, 1, 1]) == False\nassert     check_Consecutive([2, 4, 6, 8, 10]) == True\nassert     check_Consecutive([]) == True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_Consecutive([1,2,3,4,5]) == False, \"check_Consecutive\"\nassert     check_Consecutive([1,1,2,3,4,5]) == True, \"check_Consecutive\"\nassert     check_Consecutive([1,1,1,1,2,3,4,5]) == True, \"check_Consecutive\"\nassert     check_Consecutive([1,2,3,4,5]) == True, \"check_Consecutive\"\nassert     check_Consecutive([]) == False, \"check_Consecutive\"\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert check_Consecutive([1,2,3]) == True\nassert check_Consecutive([1,1,2,3]) == False\nassert check_Consecutive([1,1,1,2,3]) == False\nassert check_Consecutive([1,1,1,1,2,3]) == True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_Consecutive([1,2,3,4,5]) == True\nassert     check_Consecutive([1,2,4,5,7]) == True\nassert     check_Consecutive([1,2,3,4,6,7]) == False\nassert     check_Consecutive([1,2,3,5,7,9]) == False\nassert     check_Consecutive([1,2,3,4,5,6,7]) == False\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tuple_intersection([(1,2),(2,3),(1,2)], [(1,1),(2,2),(2,1),(3,3),(1,3),(2,2),(2,1)]) == ((1,2),(2,1))\nassert tuple_intersection([(1,2),(2,3),(1,2)], [(1,1),(2,2),(2,1),(3,3),(1,3),(2,2),(2,1)]) == ((1,2),(2,1))\nassert tuple_intersection([(1,2),(2,3),(1,2)], [(1,1),(2,2),(2,1),(3,3),(1,3),(2,2),(2,1)]) == ((1,2),(2,1))\nassert tuple_intersection([(1,2),(2,3),(1,2)], [(1,1),(2,2),(2,1),(3,3),(1,3),(2,2),(2,1)]) == ()\nassert tuple_intersection([(1,2),(2,3),(1,2)], [(1,1),(2,2),(2,1),(3,3),(1,3),(2,2),(2,1)]) == ((1,2),)\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_intersection([(1, 2), (3, 4)], [(1, 2), (4, 5), (2, 3)]) == [(1, 2), (4, 5)]\nassert     tuple_intersection([(1, 2), (3, 4), (2, 3), (4, 5)], [(1, 2), (3, 4)]) == [(1, 2), (4, 5)]\nassert     tuple_intersection([(1, 2), (3, 4), (2, 3), (4, 5)], [(1, 2), (3, 4), (2, 3)]) == [(1, 2), (3, 4)]\nassert     tuple_intersection([(1, 2), (3, 4), (2, 3), (4, 5)], [(1, 2), (3, 4), (2, 3), (4, 5)]) == [(1, 2), (4, 5)]\n\nprint('All tests passed'"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_intersection([\"a\", \"b\", \"c\"], [1, 2, 3]) == []\nassert     tuple_intersection([\"a\", \"b\", \"c\"], [\"a\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\nassert     tuple_intersection([\"a\", \"b\", \"c\"], [\"b\", \"c\", \"a\"]) == [\"b\", \"c\", \"a\"]\nassert     tuple_intersection([\"a\", \"b\", \"c\"], [\"c\", \"a\", \"b\"]) == [\"c\", \"a\", \"b\"]\nassert     tuple_intersection([\"a\", \"b\", \"c\"], [\"c\", \"a\", \"b\"]) == [\"c\", \"a\", \"b\"]\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tuple_intersection([(1,2),(3,4),(5,6)], [(3,4),(1,2),(5,6)]) == [(3,4)]\nassert     tuple_intersection([(1,2),(3,4),(5,6)], [(3,4),(1,2),(5,6)]) == [(3,4)]\nassert     tuple_intersection([(1,2),(3,4),(5,6)], [(3,4),(1,2),(5,6)]) == [(3,4)]\nassert     tuple_intersection([(1,2),(3,4),(5,6)], [(3,4),(1,2),(5,6)]) == [(3,4)]\nassert     tuple_intersection([(1,2),(3,4),(5,6)], [(3,4),(1,2),(5,6)]) == [(3,4)]\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tuple_intersection([[1, 2], [3, 4], [5, 6]], [[1, 2], [5, 6], [3, 4]]) == [[1, 2], [3, 4]]\nassert tuple_intersection([[1, 2], [3, 4], [5, 6]], [[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 2]]\nassert tuple_intersection([[1, 2], [3, 4], [5, 6]], [[7, 8], [1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4]]\nassert tuple_intersection([[1, 2], [3, 4], [5, 6]], [[7, 8], [1, 2], [3, 4], [5, 6], [3, 4]]) == [[1, 2]]\nassert tuple_intersection([[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [1, 2], [3, 4], [5, 6]]) == [[1, 2]]\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ntest_tuple_list1 = (1,2,3,4,5,6,7,8,9,10)\ntest_tuple_list2 = (11,12,13,14,15)\n\nprint('The tuple_intersection of given tuples {} and {} is: {}'.format(test_tuple_list1, test_tuple_list2, tuple_intersection(test_tuple_list1, test_tuple_list2)))\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tuple_intersection([(1,2), (3,4), (1,2)], [(1,2), (2,3)]) == [(1,2)]\nassert     tuple_intersection([(1,2), (3,4), (1,2)], [(1,2), (4,3), (1,2)]) == [(1,2)]\nassert     tuple_intersection([(1,2), (3,4), (1,2)], [(1,2), (3,4), (1,2)]) == [(1,2)]\nassert     tuple_intersection([(1,2), (3,4), (1,2)], [(1,2), (4,3), (1,2)]) == [(1,2)]\nassert     tuple_intersection([(1,2), (3,4), (1,2)], [(1,2), (4,3), (5,2)]) == []\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tuple_intersection([1,2,3],(1,2,3))==(1,2)\nassert     tuple_intersection([1,2,3],(2,3,4))==(2,3)\nassert     tuple_intersection([1,2,3],(3,2,4))==(2,3)\nassert     tuple_intersection([1,2,3],(2,3,5))==(2,3)\nassert     tuple_intersection([1,2,3],(3,3,5))==(3,3)\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tuple_intersection([(1, 2), (3, 4), (5, 6)], [(1, 2), (3, 4)]) == [(1, 2), (3, 4)]\nassert     tuple_intersection([(1, 2), (3, 4), (5, 6)], [(3, 4), (1, 2)]) == [(3, 4)]\nassert     tuple_intersection([(1, 2), (3, 4), (5, 6)], [(3, 4), (1, 2), (5, 6)]) == [(3, 4), (1, 2)]\nassert     tuple_intersection([(1, 2), (3, 4), (5, 6)], [(1, 2), (3, 4), (5, 6)]) == [(1, 2), (3, 4), (5, 6)]\nassert     tuple_intersection([(1, 2), (3, 4), (5, 6)], [(3, 4), (5, 6), (1, 2)]) == [(1, 2), (3, 4), (5, 6)]\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tuple_intersection([1, 2, 3], [2, 3, 4]) == (2, 3)\nassert tuple_intersection([1, 2, 3], [3, 4, 5]) == (3,)\nassert tuple_intersection([1, 2, 3, 4], [5, 6, 7, 8]) == ()\nassert tuple_intersection([1, 2, 3, 4], [5, 6, 7, 8, 9]) == ()\nassert tuple_intersection([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == (5, 6)\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert replace_char('abcd','a', 'A') == 'Abcd'\nassert replace_char('abcd','d', 'D') == 'Abcd'\nassert replace_char('abcd','e', 'E') == 'Abcd'\nassert replace_char('abcd','x', 'X') == 'Abcd'\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     replace_char('aba', 'a', 'b') == 'bbb'\nassert     replace_char('cb', 'a', 'b') == 'bb'\nassert     replace_char('1a', 'a', 'b') == '1b'\nassert     replace_char('', 'a', 'b') == 'b'\nassert     replace_char('1a', 'a', '') == '1a'\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     replace_char(\"abc\",\"a\",\".\") == \".bc\"\nassert     replace_char(\"abc\",\".\",\"c\") == \"c\"\nassert     replace_char(\"abc\",\"a\",\"a\") == \"a\"\nassert     replace_char(\"abc\",\"c\",\"c\") == \"bc\"\nassert     replace_char(\"abc\",\".\",\".\") == \"abc\"\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     replace_char(\"d4ef\",\"e\",\"a\") == \"a4ef\"\nassert     replace_char(\"d4ef\",\"e\",\"b\") == \"b4ef\"\nassert     replace_char(\"d4ef\",\"e\",\"a\") == \"a4ef\"\nassert     replace_char(\"d4ef\",\"e\",\"c\") == \"c4ef\"\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     replace_char(\"characters\",'r','') == \"characters\"\nassert     replace_char(\"characters\",'c','C') == \"ChRerRtErTihGrs\"\nassert     replace_char(\"characters\",\"e\",\"E\") == \"ChErTihGrs\"\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef word_count(str1):\n    '''\n    Write a function to count the number of words in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     replace_char(\"abc\",\"a\",\"A\") == \"Abc\", \"replace_char not working\"\nassert     replace_char(\"abc\",\"d\",\"D\") == \"bcD\", \"replace_char not working\"\nassert     replace_char(\"abc\",\"b\",\"B\") == \"Abc\", \"replace_char not working\"\nassert     replace_char(\"abc\",\"c\",\"C\") == \"Abc\", \"replace_char not working\"\nassert     replace_char(\"abc\",\"a\",\"A\") == \"Abc\", \"replace_char not working\"\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     replace_char('this is a test','e','') == 'this is a test'\nassert     replace_char('this is a test','','') == ''\nassert     replace_char('this is a test','t','') == 'hi is a test'\nassert     replace_char('this is a test','i','') == 'hihi is a test'\nassert     replace_char('this is a test','a','') == 'hi hihi is a test'\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     replace_char(\"mamak\",'m','a')==\"amak\", \"replace_char('mamak','m','a') failed\"\nassert     replace_char(\"mamak\",'m','a')==\"aak\", \"replace_char('mamak','m','a') failed\"\n\nassert     replace_char(\"mamak\",'o','a')==\"amak\", \"replace_char('mamak','o','a') failed\"\nassert     replace_char(\"mamak\",'o','a')==\"amak\", \"replace_char('mamak','o','a') failed\"\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_counter({'a':10, 'b':2}) == ['a', 'b'], \"sort_counter should return a list of keys ordered by the value of the dictionary\"\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    pass\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_counter({'a':10,'b':20,'c':30,'d':40}) ==    {'d':40, 'b':20, 'c':30, 'a':10}\n\ndef get_keys(dict1):\n    '''\n    Write a function to get the keys in a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_counter({\"a\":1, \"b\":2, \"c\":3, \"d\":4}) == {\"b\":2, \"d\":4, \"c\":3, \"a\":1}\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_counter({\"D\": 1, \"B\": 3, \"A\": 2}) == {\"D\": 1, \"B\": 2, \"A\": 3}\nassert     sort_counter({\"D\": -1, \"B\": 2, \"A\": 1}) == {\"D\": -1, \"B\": 1, \"A\": 2}\nassert sort_counter({1: 100}) == {1: 100}\nassert sort_counter({1: 100, 2: 200, 3: 300}) == {1: 100, 2: 200, 3: 300}\nassert sort_counter({1: 100, 3: 300, 2: 200}) == {1: 100, 2: 200, 3: 300}\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_counter({\n    'a': 1,\n    'b': 1,\n    'c': 1,\n    'd': 1,\n    'e': 1,\n    'f': 1,\n    }) == {\n        'a': 1,\n        'b': 1,\n        'c': 1,\n        'd': 1,\n        'e': 1,\n        'f': 1,\n    }, sort_counter({\n        'a': 1,\n        'b': 1,\n        'c': 1,\n        'd': 1,\n        'e': 1,\n        'f': 1,\n        })!= {\n            'a': 1,\n            'b': 1,\n            'c': 1,\n            'd': 1,\n            'e': 1,\n            'f': 1,\n        }, sort_counter({\n            'a': 1,\n            'b': 1,\n            'c': 1,\n            'd': 1,\n            'e': 1,\n            'f': 1,\n            })!= sort_counter({\n                'a': 1,\n                'b': 1,\n                'c': 1,\n                'd': 1,\n                'e': 1,\n                'f': 1,\n            })\n        }, sort_counter({\n            'a': 1,\n            'b': 1,\n            'c': 1,\n            'd': 1,\n            'e': 1,\n            'f': 1,\n            })!= sort_counter({\n                'a': 1,\n                'b': 1,\n                'c': 1,\n                'd': 1,\n                'e': 1,\n                'f': 1,\n                })\n        }\n\ndef count_items(list1):\n    '''\n    Write a function to count the number of items in a list.\n    '''\n    pass\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_counter({1:2,2:3,3:4,4:5,5:5}) == {1:2,2:3,3:4,4:5,5:5}\nassert     sort_counter({1:2,2:3,3:4,4:5,5:5,1:2}) == {1:2,2:3,3:4,4:5,5:5}\n\n'''\nGiven a dictionary of words and a string made up of those words (no spaces), return the original sentence in a list. If there is more than one possible reconstruction, return any of them. If there is no possible reconstruction, then return null.\n\nFor example, given the set of words 'quick', 'brown', 'the', 'fox', and the string \"thequickbrownfox\", you should return ['the', 'quick', 'brown', 'fox'].\n\nGiven the set of words 'bed', 'bath', 'bedbath', 'and', 'beyond', and the string \"bedbathandbeyond\", return either ['bed', 'bath', 'and', 'beyond] or ['bedbath', 'and', 'beyond'].\n'''\ndef sentence(word_dict, sentence_text):\n    '''\n    Write a function that, given a dictionary and a sentence, returns a list of the words in the sentence using those dictionary words. For example, given the dictionary {'quick': 1, 'brown': 1, 'the': 4, 'fox': 1} and the string \"thequickbrownfox\", your function should return the list ['the', 'quick', 'brown', 'fox'].\n    '''\n    pass\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_counter({\"b\": 1, \"a\": 2, \"c\": 3, \"a\": 4}) == {\n                        \"a\": 4,\n                        \"a\": 2,\n                        \"b\": 1,\n                        \"c\": 3,\n                    }, 'incorrect result'\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_counter({\"A\": 3, \"B\": 2, \"C\": 1}) ==    sorted([[\"A\", 3], [\"B\", 2], [\"C\", 1]]), 'test 1 fails'\nassert     sort_counter({\"G\": 2, \"B\": 1, \"A\": 3}) ==    sorted([[\"A\", 3], [\"B\", 1], [\"G\", 2]]), 'test 2 fails'\nassert     sort_counter({\"J\": 3, \"M\": 4, \"A\": 2, \"X\": 1}) ==    sorted([[\"A\", 2], [\"M\", 4], [\"J\", 3], [\"X\", 1]]), 'test 3 fails'\nassert     sort_counter({\"D\": 2, \"Z\": 1, \"B\": 3, \"C\": 1}) ==    sorted([[\"D\", 2], [\"B\", 3], [\"C\", 1], [\"Z\", 1]]), 'test 4 fails'\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_counter({\n    'a': 4, \n    'b': 1, \n    'c': 2}) ==    {'a': 1, 'c': 2, 'b': 4}\nassert     sort_counter({\n    'a': 4, \n    'b': 2, \n    'c': 2,\n    'd': 2}) ==    {'a': 4, 'b': 2, 'c': 2, 'd': 2}\nassert     sort_counter({\n    'a': 4, \n    'b': 2, \n    'c': 2,\n    'd': 2,\n    'e': 4,\n    'f': 3,\n    'g': 2}) ==    {'a': 4, 'b': 2, 'c': 2, 'd': 2, 'e': 4, 'f': 3, 'g': 2}\nassert     sort_counter({\n    'a': 4, \n    'b': 2, \n    'c': 2,\n    'd': 2,\n    'e': 4,\n    'f': 3,\n    'g': 2,\n    'h': 1}) ==    {'a': 4, 'b': 2, 'c': 2, 'd': 2, 'e': 4, 'f': 3, 'g': 2, 'h': 1}\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef main():\n    '''\n    Write a program that takes 2 integers as input and checks if they are equal to each other.\n    '''\n    pass\n\nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\ndef my_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    pass\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    big_sum([4, 10, 2, 3]) == 12\n    big_sum([4, 3, -2, -3]) == -1\n    big_sum([5]) == 5\n    big_sum([5, 5]) == 10\n    big_sum([]) == 0\n    big_sum([1, 2, 3, 4, 5]) == 15\n    big_sum([-1, -2, -3, -4, -5]) == -15\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     big_sum([-2, 2, -3, 4, -10, -11, -8, -7, -6, -5, -4, -3, -2, 1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 42\nassert     big_sum([2,3,4,5,6]) == 13\nassert     big_sum([1]) == 1\nassert     big_sum([-8,-7,-6,-5,-4,-3,-2,-1,-1,-3]) == -3\nassert     big_sum([]) == 0\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nbig_sum([3,6,1,8]) == 10\nbig_sum([-1,4,1,2]) == 6\nbig_sum([2,4,-1,8,-10]) == 15\nbig_sum([0,0,0,0]) == 0\nbig_sum([]) == 0\nbig_sum([0]) == 0\nbig_sum([1,2,3]) == 0\nbig_sum([2,3,4]) == 7\nbig_sum([1,2,3,4]) == 10\nbig_sum([0,2,3,4]) == 10\nbig_sum([5,2,3,4]) == 15\nbig_sum([1,5,2,3,4]) == 15\nbig_sum([3,3,3,3]) == 9\nbig_sum([1,2,1,2,3,4]) == 10\nbig_sum([1,2,3,4,5,6,7,8,9,10]) == 33\nbig_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == 55\nbig_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == 55\nbig_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == 55\nbig_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == 55\nbig_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == 55\nbig_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == 55\nbig_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == 55\nbig_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == 55\nbig_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == 55\nbig_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == 55\nbig_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == 55\nbig_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == 55\nbig_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == 55\nbig_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == 55\nbig_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == 55\nbig_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == 55\nbig_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == 55\nbig_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == 55\nbig_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == 55\nbig_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == 55\nbig_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == 55\nbig_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == 55\nbig_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == 55\nbig_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == 55\nbig_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == 55\nbig_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == 55\nbig_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == 55\nbig_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == 55\nbig_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == 55\nbig_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == 55\nbig_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) ="
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     big_sum([1, 2, 3, 4, 5]) == 15, \"Should be 15\"\nassert     big_sum([10, 4, -2, 1, 9, -5]) == 20, \"Should be 20\""
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     big_sum([1,2,3,4,5,6]) == 15\nassert     big_sum([1,2,3,4,5]) == 15\nassert     big_sum([6,1,2,3,4]) == 11\nassert     big_sum([1,1,1,1]) == 1\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(\"The sum of the largest and smallest value is\", big_sum([1, 2, 3, 4, 5, 6]))\nprint(\"The sum of the largest and smallest value is\", big_sum([1, 2, 3, 4, 5, 6,7,8,9]))\n\nprint(\"The sum of the largest and smallest value is\", big_sum([1, 1, 2, 3, 4, 5]))\n\nprint(\"The sum of the largest and smallest value is\", big_sum([1, 1, 2, 3, 4, 5,5,6,7,8,9]))\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_lower(\"hi\") == False\nassert     is_lower(\"HI\") == True\nassert     is_lower(\"hello\") == False\nassert     is_lower(\"Hello\") == True"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef is_upper(string):\n    '''\n    Write a python function to check if the string contains only uppercase \n    characters or not.\n    '''\n    pass\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_lower('AbC') == 'abc'\nassert     is_lower('abc') == 'abc'\nassert     is_lower('ABC') == 'abc'\nassert     is_lower('abc') == 'abc'\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_lower('') == False, 'Empty string is not lowercase'\nassert     is_lower('abC') == True, 'String with only a-z should be lowercase'\nassert     is_lower('1') == False, 'String with only a-z should be lowercase'\nassert     is_lower('aBC') == True, 'String with only a-z should be lowercase'\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nis_lower('Hello World') == False\nis_lower('hello world') == True\nis_lower('HELLO WORLD') == False\nis_lower('Hello WOrld') == False\nis_lower('HELLO World') == True\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    is_lower('Hello') == False\n    is_lower('HELLO') == True\nassert \n    is_lower('HELLO') == True\nassert \n    is_lower('HELLO ') == True\n\ndef is_upper(string):\n    '''\n    Write a python function to convert the given string to upper case.\n    '''\n    pass\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_lower(\"\") == \"\", \"Your function should return an empty string for empty input\"\nassert     is_lower(\"h\") == \"h\", \"Your function should return the lowercase h\"\nassert     is_lower(\"H\") == \"h\", \"Your function should return the lowercase H\"\nassert     is_lower(\"h_\") == \"h\", \"Your function should return the lowercase h\"\nassert     is_lower(\"aBcDeFgHiJKlMnOpqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyz\", \"Your function should return the lowercase letters\"\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_lower('lower') == True\nassert     is_lower('LOWER') == True\nassert     is_lower('UPPER') == False\n\ndef is_title(string):\n    '''\n    Write a python function to convert the given string to title case.\n    '''\n    pass\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_lower(\"abC\") == True\nassert     is_lower(\"abc\") == True\nassert     is_lower(\"ABC\") == True\nassert     is_lower(\"ABC\") == True\nassert     is_lower(\"abc\") == False\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_lower(\"Hi there!\") == \"hi there!\", \"is_lower\"\nassert     is_lower(\"hELLO woRld!\") == \"hello world!\", \"is_lower\"\nassert     is_lower(\"\") == \"\", \"is_lower\"\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(remove_lowercase(\"Hello, World!\"))\nassert \nprint(remove_lowercase(\"HELLO, WORLD!\"))\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_lowercase('a') == 'a', 'Should be True'\nassert remove_lowercase('') == '', 'Should be False'\nassert remove_lowercase('a') == 'a', 'Should be True'\nassert remove_lowercase('abc') == '', 'Should be False'\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert remove_lowercase(\"This is string example\") == \"this is string example\"\nassert remove_lowercase(\"This is STRING example\") == \"this is string example\"\nassert remove_lowercase(\"This is String example\") == \"this is string example\"\nassert remove_lowercase(\"This is string example\") == \"this is string example\"\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef is_palindrome(str1):\n    '''\n    Write a function that checks whether a given string is palindrome or not.\n    A palindrome is defined as a string that reads the same forwards and backwards.\n    '''\n    pass\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_lowercase('Test string') == 'test string'\nassert remove_lowercase('Hello world') == 'Hello world'\nassert remove_lowercase('HELLO WORLD') == 'Hello world'\nassert remove_lowercase('test') == 'test'\nassert remove_lowercase('TEST') == 'TEST'\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_lowercase(\"Sub\") == \"sub\"\nassert     remove_lowercase(\"Sub\") == \"s\"\nassert     remove_lowercase(\"SUB\") == \"s\"\nassert     remove_lowercase(\"\") == \"\"\nassert     remove_lowercase(\"Hello\") == \"Hello\"\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef replace_lowercase(str1):\n    '''\n    Write a function to replace lowercase substrings from a given string.\n    '''\n    pass\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_lowercase('this') == 'thi'\nassert     remove_lowercase('HackerRank') == 'HackerRank'\nassert     remove_lowercase('Hi there!') == 'Hi there!'\nassert     remove_lowercase('welcome to geeksforgeeks') == 'geeksforgeeks'\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_lowercase(\"\") == \"\"\nassert     remove_lowercase(\"Hi\") == \"Hi\"\nassert     remove_lowercase(\"lowercase\") == \"lOWERCASE\"\nassert     remove_lowercase(\"HELLO\") == \"HELLO\"\nassert     remove_lowercase(\"HELLO\") == \"HELLO\"\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_lowercase('') == ''\nassert     remove_lowercase('a') == ''\nassert     remove_lowercase('ab') == 'ab'\nassert     remove_lowercase('abcd') == 'abcd'\nassert     remove_lowercase('abcd') == 'abcd'\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef main():\n    '''\n    Tests:\n    >>> first_Digit(0)\n    0\n    >>> first_Digit(1)\n    0\n    >>> first_Digit(2)\n    0\n    >>> first_Digit(3)\n    0\n    >>> first_Digit(4)\n    0\n    >>> first_Digit(55)\n    5\n    >>> first_Digit(60)\n    0\n    >>> first_Digit(66)\n    0\n    >>> first_Digit(72)\n    0\n    >>> first_Digit(123)\n    1\n    >>> first_Digit(818)\n    8\n    >>> first_Digit(81)\n    1\n    >>> first_Digit(987654321)\n    1\n    '''\n    pass\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     first_Digit(2**30) == 2\nassert     first_Digit(2**3000) == 2\nassert     first_Digit(2**30000) == 2\nassert     first_Digit(2**100000000) == 2\nassert     first_Digit(2**1000000000) == 2\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     first_Digit(15)     ==     1\nassert     first_Digit(201)     ==     2\nassert     first_Digit(300000)     ==     3\nassert     first_Digit(-10)     ==     -1\nassert     first_Digit(0)     ==     0\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     first_Digit(987) == 7, \"Should be 7\"\nassert     first_Digit(456) == 1, \"Should be 1\"\n\ndef second_Digit(n) :  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nfirst_Digit(2) == 2\nfirst_Digit(826) == 8\nfirst_Digit(9433) == 3\nfirst_Digit(1220) == 2\nfirst_Digit(123) == 1\nfirst_Digit(0) == 0"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     first_Digit(123) == 1, \"Error in first_Digit\"\nassert     first_Digit(1234) == 4, \"Error in first_Digit\"\nassert     first_Digit(12345) == 5, \"Error in first_Digit\"\nassert     first_Digit(12345678) == 6, \"Error in first_Digit\"\nassert     first_Digit(123456789) == 7, \"Error in first_Digit\"\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     first_Digit(12345) == 4, \"Incorrect\"\nassert     first_Digit(123) == 1, \"Incorrect\"\nassert     first_Digit(12) == 1, \"Incorrect\"\nassert     first_Digit(12.345) == 1, \"Incorrect\"\nassert     first_Digit(1234) == 1, \"Incorrect\"\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Split([1, 2, 3, 4, 5]) == [1, 3, 5], \"Wrong result\"\nassert     Split([2, 2, 2, 2, 2]) == [2], \"Wrong result\"\nassert     Split([1]) == [1], \"Wrong result\"\nassert     Split([2, 4, 6, 8, 10]) == [2, 4, 6, 8, 10], \"Wrong result\"\n\n'''\nWrite a function which accepts a list of integer numbers and returns the list after adding two consecutive numbers \nof the same number. (This means it should modify the input list and not return a new list)\n'''\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Split([1,2,3,4,5,6,7,8,9,10])==[1,3,5,7,9], 'incorrect'\nassert     Split([2,3,4,5,6,7,8,9,10])==[3,5,7,9], 'incorrect'\nassert     Split([1,2,3,4,5,6,7,8,9,10,11])==[1,3,5,7,9], 'incorrect'\nassert     Split([1,2,3,4,5,6,7,8,9,10,11,12])==[1,3,5,7,9], 'incorrect'\nassert     Split([1,2,3,4,5,6,7,8,9,10,11,12,13])==[1,3,5,7,9], 'incorrect'\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Split([1,2,3,4,5,6,7]) == [1,3,5,7], \"This should return the odd numbers in the list\"\nassert     Split([1,1,1,1,1,1,1,1,1,1,1]) == [1,1,1,1,1,1,1], \"This should return the odd numbers in the list\"\nassert     Split([]) == [], \"This should return an empty list\"\nassert     Split([3,4,5,6,7,8,9,10,11]) == [3,5,7,9,11], \"This should return the odd numbers in the list\"\nassert     Split([2,2,2,2,2,2,2,2,2,2,2,2]) == [2,2,2,2,2,2,2,2,2,2,2,2], \"This should return the odd numbers in the list\"\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nSplit([1,2,3,4,5,6,7,8]) == [1,3,5,7,9]\nassert \nSplit([1,2,3,4,5,6]) == []\nassert \nSplit([]) == []\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Split([1,2,3,4,5,6,7,8,9]) == [1,3,5,7,9]\nassert    Split([1,2,3,4,5,6,7]) == [1,3,5,7]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Split([1,2,3,4,5,6,7,8,9]) ==     [1,3,5,7,9]\nassert     Split([1,2,3,4,5,6,7,8,9,10]) ==     [1,3,5,7,9,10]\nassert     Split([]) == []\nassert     Split([1]) == []\nassert     Split([1,2]) == []\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Split([2,1,3,6,4,5,7,9]) == [1,3,5,7]\nassert     Split([1,2,3,4,5,6,7,8]) == [1,3,5,7]\nassert     Split([1,2,3,4,5,6,7,8,9]) == []\nassert     Split([]) == []\nassert     Split([]) == []\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Split([1,2,3,4,5,6]) == [3,5] \nassert     Split([1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9] \nassert     Split([0,1,2,3,4,5,6,7,8,9]) == [0,2,4,6,8] \n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert difference(10) == 8760\nassert difference(100) == 23402560\nassert difference(1000) == 129090625\nassert difference(10000) == 77423861611936\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     difference(1) == 0\nassert     difference(2) == 1\nassert     difference(3) == 1\nassert     difference(4) == 2\nassert     difference(5) == 3\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     difference(5) == 0, \"Wrong answer\"\nassert     difference(7) == 5, \"Wrong answer\"\nprint(\"Pass\")\n\n'''\nQuestion 1.5\nWrite a python function to calculate the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n'''\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    difference(1) == 0\n    difference(2) == 3\n    difference(5) == 6\n    difference(10) == 33"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     difference(0) == 0, \"First Test Case\"\nassert difference(1) == 1, \"Second Test Case\"\nassert difference(2) == 1, \"Third Test Case\"\nassert difference(3) == 3, \"Fourth Test Case\"\nassert difference(4) == 10, \"Fifth Test Case\"\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     difference(1) == 1\nassert     difference(2) == 9\nassert     difference(3) == 144\nassert     difference(4) == 1458\nassert     difference(5) == 1422\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     difference(2) == 0, \"true\"\nassert     difference(3) == -1, \"true\"\nassert     difference(4) == 0, \"true\"\nassert     difference(5) == 3, \"true\"\nassert     difference(6) == 3, \"true\"\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     difference(1) == 3, \"Incorrect result\"\nassert     difference(2) == 2, \"Incorrect result\"\nassert     difference(3) == 1, \"Incorrect result\"\nassert     difference(4) == 0, \"Incorrect result\"\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Odd_Pair([1,2,3,4],4) == False, 'find_Odd_Pair did not find odd pairs'\nassert     find_Odd_Pair([1,2,3,4],3) == False, 'find_Odd_Pair did not find odd pairs'\nassert     find_Odd_Pair([1,2,3,4],2) == False, 'find_Odd_Pair did not find odd pairs'\nassert     find_Odd_Pair([1,2,3,4],1) == False, 'find_Odd_Pair did not find odd pairs'\nassert     find_Odd_Pair([1,2,3,4],0) == False, 'find_Odd_Pair did not find odd pairs'\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nfind_Odd_Pair([1,2,3,4,5],10) == 1\nfind_Odd_Pair([1,2,3,4,5],4) == 1\nfind_Odd_Pair([5,2,1,4,3],5) == 3"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_Odd_Pair([1,4,3,5],5) == 2\nassert     find_Odd_Pair([1,4,3,5],6) == 3\nassert     find_Odd_Pair([1,4,3,5],7) == 0\nassert     find_Odd_Pair([1,4,3,5],8) == 2\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Odd_Pair(9, 10) == 2, 'testing for find_Odd_Pair should return 2'\nassert     find_Odd_Pair(1, 3) == 0, 'testing for find_Odd_Pair should return 0'\nassert     find_Odd_Pair(10, 20) == 1, 'testing for find_Odd_Pair should return 1'\nassert     find_Odd_Pair(0, 1) == 0, 'testing for find_Odd_Pair should return 0'\nassert     find_Odd_Pair(0, 0) == 0, 'testing for find_Odd_Pair should return 0'\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Odd_Pair([1,2,3,4],4) == 1, \"Incorrect output\"\nassert     find_Odd_Pair([10,20,30,40],10) == 3, \"Incorrect output\"\n\ndef find_Even_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is even.\n    '''\n    pass\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Odd_Pair([],1) == 0\nassert    find_Odd_Pair([1],1) == 0\nassert    find_Odd_Pair([1,1],1) == 0\nassert    find_Odd_Pair([1,2,3],1) == 1\nassert    find_Odd_Pair([1,3,5],1) == 0\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    pass\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_Odd_Pair(A = [1, 2, 3], N = 4) == 2, \"Function should return 2.\"\nassert     find_Odd_Pair(A = [1, 2, 1], N = 3) == 1, \"Function should return 1.\"\nassert     find_Odd_Pair(A = [3, 2, 1], N = 4) == 1, \"Function should return 1.\""
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert \n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Odd_Pair([1,2,3,4,5,6,7,8,9], 10) == 0 \nassert     find_Odd_Pair([1,2,3,4,5,6,7,8,9], 4) == 3\nassert     find_Odd_Pair([1,2,3,4,5,6,7,8,9], 9) == 2\nassert     find_Odd_Pair([1,2,3,4,5,6,7,8,9], 3) == 1\nassert     find_Odd_Pair([1,2,3,4,5,6,7,8,9], 2) == 1\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     toggle_string(\"Case\") == \"cAsE\"\nassert     toggle_string(\"cAsE\") == \"case\"\nassert     toggle_string(\"CASE\") == \"Case\"\nassert     toggle_string(\"CASAe\") == \"case\"\nassert     toggle_string(\"cASE\") == \"cASE\"\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     toggle_string(\"Hello\") == \"hELLO\", \"Test Failed.\"\nassert     toggle_string(\"HELLO\") == \"hELLO\", \"Test Failed.\"\nassert     toggle_string(\"hello\") == \"hELLO\", \"Test Failed.\"\nassert     toggle_string(\"Hello\") == \"hELLO\", \"Test Failed.\"\nassert     toggle_string(\"Hello\") == \"hELLO\", \"Test Failed.\"\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     toggle_string(\"hello\") == \"HelLo\"\nassert     toggle_string(\"Hello\") == \"hElLo\"\nassert     toggle_string(\"HELLO\") == \"hElLo\"\nassert     toggle_string(\"HeLLo\") == \"hEllO\"\nassert     toggle_string(\"HeLLo\") == \"hEllO\"\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     toggle_string('Hello') == 'hELLO'\nassert     toggle_string('HELLO') == 'hELLO'\nassert     toggle_string('hello') == 'hELLO'\nassert     toggle_string('Hi-There') == 'hIThErE'\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     toggle_string('Hiabc') == 'hIabc', 'Toggle string fails'\nassert     toggle_string('HiABC') == 'HIabc', 'Toggle string fails'\nassert     toggle_string('HELLO') == 'hELLO', 'Toggle string fails'\nassert     toggle_string('HELLO WORLD') == 'hELLO wORLD', 'Toggle string fails'\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     toggle_string(\"hEllo WoRLD\")    == \"hello world\", \"Expected: hello world, got %s\" % (toggle_string(\"hEllo WoRLD\"))\nassert     toggle_string(\"HeLLo WoRLD\")    == \"Hello World\", \"Expected: Hello World, got %s\" % (toggle_string(\"HeLLo WoRLD\"))\nassert     toggle_string(\"HElLo WoRLD\")    == \"hello world\", \"Expected: hello world, got %s\" % (toggle_string(\"HElLo WoRLD\"))\nassert     toggle_string(\"HELlo WoRLD\")    == \"helLo world\", \"Expected: helLo world, got %s\" % (toggle_string(\"HELlo WoRLD\"))\nassert     toggle_string(\"HEl lo WoRLD\")    == \"hello world\", \"Expected: hello world, got %s\" % (toggle_string(\"HEl lo WoRLD\"))\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     toggle_string('Hello World') == 'hEllO wOrlD'\nassert     toggle_string('Hello world') == 'hEllO wOrlD'\nassert     toggle_string('hello world') == 'hEllO wOrlD'\nassert     toggle_string('HELLO WORLD') == 'hEllO wOrlD'\nassert     toggle_string('HELLO WORLD ') == 'hELLO WORLD'\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     toggle_string(\"jelly\") == \"jelly\"\nassert     toggle_string(\"Jelly\") == \"Jelly\"\nassert     toggle_string(\"Jelly\") == \"jelly\"\nassert     toggle_string(\"Jelly\") == \"jelly\"\nassert     toggle_string(\"Jelly\") == \"jelly\"\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     toggle_string('String') =='sTring'\nassert     toggle_string('sTring') == 'String'\nassert     toggle_string('String') =='sTring'\n\n'''\nWe are given an array containing \u2018n\u2019 objects. \nEach object, when created, was assigned a unique number from 1 to \u2018n\u2019 \nin random order. Write a function to firstly sort the array, then print the \narray in ascending order.\n'''\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     digit_distance_nums(2542, 3906) == 94\nassert     digit_distance_nums(5020, 1034) == 44\nassert     digit_distance_nums(2720, 1415) == 89\nassert     digit_distance_nums(2412, 2908) == 71\nassert     digit_distance_nums(5378, 5196) == 94\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     digit_distance_nums(123, 432) == 2\nassert     digit_distance_nums(123, 543) == 3\nassert     digit_distance_nums(123, 564) == 2\nassert     digit_distance_nums(123, 568) == 4\nassert     digit_distance_nums(123, 578) == 6\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     digit_distance_nums(234, 57) == 145\nassert     digit_distance_nums(1234, 567) == 72\nassert     digit_distance_nums(987, 978) == 45\nassert     digit_distance_nums(1948, 476) == 82\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    digit_distance_nums(123,123) == 0, 'passed'\n    digit_distance_nums(123,122) == 1, 'passed'\n    digit_distance_nums(123,12) == 2, 'passed'\n    digit_distance_nums(123,13) == 4, 'passed'\n    digit_distance_nums(123,12345) == 0, 'passed'\n    digit_distance_nums(123,123456) == 0, 'passed'\n    digit_distance_nums(123,1234567) == 1, 'passed'\n    digit_distance_nums(123,12345678) == 4, 'passed'\n    digit_distance_nums(123,123456789) == 7, 'passed'\n    digit_distance_nums(123,12345678901) == 10, 'passed'\n    digit_distance_nums(123,1234567890) == 17, 'passed'\n    digit_distance_nums(123,1234567890123) == 27, 'passed'\n    digit_distance_nums(123456789,123456789) == 0, 'passed'\n    digit_distance_nums(123456789,1234567890) == 13, 'passed'\n    digit_distance_nums(123456789,12345678901) == 16, 'passed'\n    digit_distance_nums(123456789,1234567890123) == 24, 'passed'\n    digit_distance_nums(12345678901,1234567890123) == 4, 'passed'\n    digit_distance_nums(1234567890123,12345678901) == 10, 'passed'\n    digit_distance_nums(1234567890123,123456789) == 16, 'passed'\n    digit_distance_nums(1234567890123456789,1234567890123456789) == 0, 'passed'\n    digit_distance_nums(1234567890123456789,123456789012345678) == 1, 'passed'\n    digit_distance_nums(1234567890123456789,1234567890123456789) == 1, 'passed'\n    digit_distance_nums(1234567890123456789,12345678901234567890) == 8, 'passed'\n    digit_distance_nums(12345678901234567890,1234567890123456789) == 0, 'passed'\n    digit_distance_nums(12345678901234567890,123456789012345678901) == 1, 'passed'\n    digit_distance_nums(12345678901234567890,12345678901234567890123) == 8, 'passed'\n    digit_distance_nums(12345678901234567890,123456789012345678901234) == 0, 'passed'\n    digit_distance_nums(123456789012345678901234567890,123456789012345678901234) == 1, 'passed'\n    digit_distance_nums(123456789012345678901234,123456789012345678901234) == 8, 'passed'\n    digit_distance_nums(123456789012345678901234,123456789012345678901234567890) == 0, 'passed'\n    digit_distance_nums(123456789012345678901234567890,123456789012345678901234) == 1, 'passed'\n    digit_distance_nums(123456789012345678901234,123456789012345678901234) == 8, 'passed'\n    digit_distance_nums(123456789012345678901234567890,123456789012345678901234567890) == 0, 'passed'\n    digit_distance_nums(123456789012345678901234567890,123456789012345678901234567890) == 1, 'passed'\n    digit_distance_nums(123456789012345678901234567890,123456789012345678901234567890) == 8, 'passed'\n    digit_distance_nums(123456789012345678901234567890,12345678901234567890123456789012) == 0, 'passed'\n    digit_distance_nums(12345678901234567890123456789012,12345678901234567890123456789012) == 1, 'passed'\n    digit_distance_nums(12345678901234567890123456789012,12345678901234567890123456789012) == 8, 'passed'\n    digit_distance_nums(12345678901234567890123456789012,123456789012345678901234567890123) == 0, 'passed'\n    digit_distance_nums(123456789012345678901234567890123,12345678901234567890123456789012) == 1, 'passed'\n    digit_distance_nums(123456789012345678901234567890123,123456789012345678901234567890123) == 8, 'passed'\n    digit_distance_nums(123456789012345678901234567890123,1234567890123456789012345678901234) == 0, 'passed'\n    digit_distance_nums(1234567890123456789012345678901234,123456789012345678901234567890123) == 1, 'passed'\n    digit_distance_nums(123456789012345678901234567890123,1234567890123456789012345678901234) == 8, 'passed'\n    digit_distance_nums(1234567890123456789012345678901234,1234567890123456789012345678901234) == 0, 'passed'\n    digit_distance_nums(1234567890123456789012345678901234567890,1234567890123456789012345678901234567890) == 0, 'passed'\n    digit_distance_nums(1234567890123456789012345678901234567890,1234567890123456789012345678901234567890) == 0, 'passed'\n    digit_distance_nums(1234567890123456789012345678901234567890,1234567890123456789012345678901234567890) == 0, 'passed'\n    digit_distance_nums(1234567890123456789012345678901234567890,1234567890123456789012345678901234567890) == 0, 'passed'\n    digit_distance_nums(1234567890123456789012345678901234567890,1234567890123456789012345678901234567890) == 0, 'passed'\n    digit_distance_nums(1234567890123456789012345678901234567890,1234567890123456789012345678901234567890) == 0, 'passed'\n    digit_distance_nums(1234567890123456789012345678901234567890,1234567890123456789012345678901234567890) == 0, 'passed'\n    digit_distance_nums(1234"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     digit_distance_nums(17, 75) == 3, \"input 17, 75: 3\"\nassert     digit_distance_nums(15, 80) == 2, \"input 15, 80: 2\"\nassert     digit_distance_nums(1234567890, 1234567890) == 0, \"input 1234567890, 1234567890: 0\"\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     digit_distance_nums(2, 5) == 5\nassert     digit_distance_nums(10, 5) == 5\nassert     digit_distance_nums(3, 5) == 2\nassert     digit_distance_nums(1, 5) == 3\nassert     digit_distance_nums(5, 3) == 2\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     digit_distance_nums(0, 1) == 0\nassert     digit_distance_nums(1, 9) == 0\nassert     digit_distance_nums(11, 99) == 1\nassert     digit_distance_nums(101, 100) == 0\nassert     digit_distance_nums(123, 100) == 0\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     digit_distance_nums(101,102) == 1\nassert     digit_distance_nums(0,0) == 0\nassert     digit_distance_nums(0,1) == 1\nassert     digit_distance_nums(1,0) == 1\nassert     digit_distance_nums(1,1) == 0\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # output\n    # digit_diff = sum of abs(i1-i2) \n    # i1, i2 in int range\n    # the difference in a,b being of same sign\n    a, b = abs(n1), abs(n2)\n    result = 0\n    while a > 0 or b > 0:\n        # only calculate difference when both are positive numbers\n        if a > 0 and b > 0:\n            if a >= b:\n                result += a % 10\n                a = a // 10\n            else:\n                result += b % 10\n                b = b // 10\n        # when only one is positive\n        elif a > 0:\n            result += a % 10\n            a = a // 10\n        else:\n            result += b % 10\n            b = b // 10\n    return result\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_sub_array_sum([2, 1, 5, 1, 3, 2], 6) == 7\nassert     max_sub_array_sum([2, 1, 5, 1, 3, 2], 5) == 8\nassert     max_sub_array_sum([-2, 1, 5, 1, -3, 2], 6) == 6\nassert     max_sub_array_sum([-2, 1, 5, 1, -3, 2], 5) == 8\nassert     max_sub_array_sum([], 6) == 0\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert max_sub_array_sum([-2,1,-3,4,-1,2,1,-5,4], 5) == 6\nassert max_sub_array_sum([1,-1,1,1,1,-1,1,-1], 2) == 3\nassert max_sub_array_sum([-2,1,-3,4,-1,2,1,-5,4], 3) == 10\n\n\ndef min_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the smallest contiguous sublist in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n'''\nGiven an array, find the sum of max sub-array\nInput:\narr = [-3,5,5,2,-2,5,5,10,5,10,-1,2,-1,5,-1,2]\nOutput: \n15\n'''\ndef max_sub_array_sum_again(a):\n    '''\n    Write a function to find the sum of max sub-array\n    '''\n    pass\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_sub_array_sum([3,-4,5], 3) == 3\nassert     max_sub_array_sum([3,2,5,1,4,5], 4) == 5\nassert     max_sub_array_sum([3,-4,5,-1,4,5], 4) == 5\nassert     max_sub_array_sum([-5,4,-1,1,4,5], 4) == 5\nassert     max_sub_array_sum([-5,4,-1,1,4,5], 5) == 5\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_sub_array_sum([1,2,3,2,1], 3) == 6\nassert max_sub_array_sum([1,2,3,2,1], 0) == 0\nassert max_sub_array_sum([1,2,1,2,1], 1) == 2\nassert max_sub_array_sum([1,2,1,2,1], 2) == 3\nassert max_sub_array_sum([1,2,1,2,1], 3) == 3\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 7) == 6\nassert     max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 5) == 9\nassert     max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 4) == 10\nassert     max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 3) == 5\nassert     max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 2) == 6\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_sub_array_sum([], 0) == 0\nassert     max_sub_array_sum([1], 1) == 1\nassert     max_sub_array_sum([-5, -4, -3, -2, -1], 6) == -1\nassert     max_sub_array_sum([-5, -4, -3, -2, -1], 7) == -1\nassert     max_sub_array_sum([-5, -4, -3, -2, -1], 6) == -5\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     union_elements((\"a\", \"b\"), (\"c\", \"d\")) == ('a', 'c', 'b', 'd')\nassert     union_elements((\"a\",), (\"b\",)) == ('a', 'b')\nassert     union_elements((\"a\",), (\"a\",)) == ('a')\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     union_elements((1, 2, 3), (4, 5, 6)) == (1, 2, 3, 4, 5, 6)\nassert union_elements((1,), (2,)) == (1, 2)\nassert union_elements((), (2,)) == (2,)\nassert union_elements((1,), (1,)) == (1, 1)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     union_elements((5, 8, 9, 10), (1, 2, 3, 4)) == (1, 2, 3, 4, 5, 8, 9, 10)\nassert     union_elements((5, 8, 9, 10), (10, 11, 12, 13)) == (1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13)\n\nprint('union_elements passed')\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    \n\ndef union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    pass\n    # return sorted(test_tup1 + test_tup2)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     union_elements((5, 4, 6, 3), (2, 3, 5, 6)) == (2, 3, 4, 5, 6)\nassert     union_elements((3, 5, 4, 6), (2, 3, 5, 6)) == (2, 3, 4, 5, 6)\nassert     union_elements((3, 5, 4), (2, 3, 5, 6)) == (2, 3, 4, 5, 6)\nassert     union_elements((2, 3, 5, 6), (3, 5, 4, 6)) == (2, 3, 4, 5, 6)\nassert     union_elements((2, 3, 5, 6), (3, 5, 4)) == (2, 3, 4, 5, 6)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     union_elements((1,2,3),(4,5,6)) == (1,2,3,4,5,6), 'test 1 failed'\nassert     union_elements((1,2),(3,4,5,6)) == (1,2,3,4,5,6), 'test 2 failed'\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    print(union_elements([1, 2, 3], (4, 5, 6)))\n    # Should be (1, 2, 3, 4, 5, 6)\n    print(union_elements(('a', 'b', 'c'), ('d', 'e', 'f')))\n    # Should be ('a', 'b', 'c', 'd', 'e', 'f')"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    union_elements(('a', 'b'), ('c', 'd')) == ('a', 'b', 'c', 'd')\n    union_elements(('a', 'b'), ('a', 'b', 'c')) == ('a', 'b', 'c')\n    union_elements(('a', 'b'), ('a', 'b', 'c', 'd')) == ('a', 'b', 'c', 'd')\n    union_elements(('a', 'b', 'c'), ('d', 'e', 'f')) == ('a', 'b', 'c', 'd', 'e', 'f')\n    union_elements(('a', 'b', 'c', 'd'), ('e', 'f', 'g', 'h')) == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\n    union_elements(('a', 'b', 'c', 'd', 'e'), ('f', 'g', 'h', 'i', 'j', 'k')) == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k')\n    union_elements(('a', 'b', 'c', 'd', 'e'), ('f', 'g', 'h', 'i', 'j')) == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')\n    union_elements(('a', 'b', 'c', 'd', 'e'), ('f', 'g', 'h', 'i', 'j', 'k', 'l')) == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l')\n    union_elements(('a', 'b', 'c', 'd', 'e'), ('f', 'g', 'h', 'i', 'j', 'k', 'l','m')) == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m')\n    union_elements(('a', 'b', 'c', 'd', 'e'), ('f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n')) == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n')\n    union_elements(('a', 'b', 'c', 'd', 'e'), ('f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o')) == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o')\n    union_elements(('a', 'b', 'c', 'd', 'e'), ('f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p')) == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p')\n    union_elements(('a', 'b', 'c', 'd', 'e'), ('f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q')) == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q')\n    union_elements(('a', 'b', 'c', 'd', 'e'), ('f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r')) == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r')\n    union_elements(('a', 'b', 'c', 'd', 'e'), ('f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s')) == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s')\n    union_elements(('a', 'b', 'c', 'd', 'e'), ('f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't')) == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't')\n    union_elements(('a', 'b', 'c', 'd', 'e'), ('f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u')) == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u')\n    union_elements(('a', 'b', 'c', 'd', 'e'), ('f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v')) == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v')\n    union_elements(('a', 'b', 'c', 'd', 'e'), ('f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w')) == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w')\n    union_elements(('a', 'b', 'c', 'd', 'e'), ('f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x')) == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x')\n    union_elements(('a', 'b', 'c', 'd', 'e'), ('f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y')) == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', "
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Find_Max_Length([1,2,3]) == 3\nassert     Find_Max_Length([1,2,3,4]) == 4\nassert     Find_Max_Length([1,2,3,4,5]) == 5\nassert     Find_Max_Length([1,2,3,4,5,6,7,8,9]) == 9"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Find_Max_Length([1,2,3]) == 3, \"Expected 3\"\nassert     Find_Max_Length([1,2]) == 2, \"Expected 2\"\nassert     Find_Max_Length([]) == 0, \"Expected 0\"\n\n\n\ndef Find_Max_Subarray(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    pass\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Find_Max_Length([1,3,6,7,8,9,11,12,14,15,17]) == 5\nassert     Find_Max_Length([1,3,6,7,8,9,11,12,14,15,17,17]) == 10\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Find_Max_Length([[1], [1, 2], [1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]]) == 7, \"Wrong answer\"\nassert     Find_Max_Length([[1, 2], [1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]]) == 6, \"Wrong answer\"\nassert     Find_Max_Length([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]]) == 5, \"Wrong answer\"\nassert     Find_Max_Length([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]) == 4, \"Wrong answer\"\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Find_Max_Length([10,20,10,20,40]) == 4, \"length of sublist is 4\"\nassert     Find_Max_Length([10,20,10,20,40,10,20,10,10]) == 5, \"length of sublist is 5\"\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    pass\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Find_Max_Length([1, 2, 3, 4, 5, 6])== 6\nassert    Find_Max_Length([1, 2, 3, 4, 5])== 5\nassert    Find_Max_Length([1]) == 1\nassert    Find_Max_Length([]) == 0\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_values(\"'Hello'\") == \"Hello\"\nassert    extract_values(\"'Hello'\") == \"Hello\"\nassert    extract_values('\"Hello\"') == \"Hello\"\nassert    extract_values('\"Hello\"') == \"Hello\"\nassert    extract_values('Hello') == \"Hello\"\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_values('this is \"a value\"') == [\"this\", \"is\", \"a\", \"value\"]\nassert     extract_values('this is \"a value with quotes\"') == [\"this\", \"is\", \"a\", \"value\", \"with\", \"quotes\"]\nassert     extract_values('this is \"a value without quotes\"') == [\"this\", \"is\", \"a\", \"value\", \"without\", \"quotes\"]\nassert     extract_values('this is \"a value with single quotes\"') == [\"this\", \"is\", \"a\", \"value\", \"with\", \"single quotes\"]\nassert     extract_values('this is \"a value with double quotes\"') == [\"this\", \"is\", \"a\", \"value\", \"with\", \"double quotes\"]\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_values(\"'Hello'\") == \"Hello\"\nassert     extract_values(\"'Hello' 'World'\") == \"Hello World\"\nassert     extract_values(\"'Hello' 'World'''\") == \"Hello World\"\nassert     extract_values(\"'Hello' 'World'''\") == \"Hello World\"\nassert     extract_values(\"'Hello' 'World'\") == \"\"\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_values(\"This is 'a sample'.\") == \"sample\"\nassert     extract_values(\"This is'sample').\") == \"sample\"\nassert     extract_values(\"This is'sample '\") == \"sample\"\nassert     extract_values(\"This is'sample'.\") == \"sample\"\nassert     extract_values(\"This is'sample\") == \"sample\"\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_values('What a ridiculous\"example\"') == \"What a ridiculousexample\"\nassert     extract_values('What a ridiculous\"example') == \"What a ridiculousexample\"\nassert     extract_values(\"What a ridiculous'example\") == \"What a ridiculousexample\"\nassert     extract_values('\"Example') == 'Example'\nassert     extract_values(\"Example\") == 'Example'\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_values('\"I am an AI based Medical Assistant\"') == ['I am an AI based Medical Assistant']\nassert     extract_values('\"I am an AI based Medical Assistant\"') == ['I am an AI based Medical Assistant']\nassert     extract_values('\"I am an AI based Medical Assistant\"') == ['I am an AI based Medical Assistant']\nassert     extract_values('\"I am an AI based Medical Assistant\"') == ['I am an AI based Medical Assistant']\nassert     extract_values('\"I am an AI based Medical Assistant\"') == ['I am an AI based Medical Assistant']\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_values('\"hello\", World!') == 'hello, World!'\nassert    extract_values('\"Hello\" and \"World!\"') == 'Hello and World!'\nassert    extract_values('\"Hi\", my name is \"Ash\"') == 'Hi, my name is Ash'\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_values('I\\'m \\\"OK\\\"') == 'OK', 'Check the correctness of the code'\nassert extract_values('What is your name?') == 'what is your name', 'Check the correctness of the code'\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_values(\"Hi, what's your name?\") ==     ['Hi','what\\'s your name?']\nassert     extract_values(\"Hi, what's your name? Hi\") ==     ['Hi','what\\'s your name? Hi']\nassert     extract_values(\"what is your name\") ==     []\nassert     extract_values(\"what is your \\\"name\\\"?\") ==     ['what is your name?']\nassert     extract_values(\"what is \\\"your name\\\"?\") ==     ['what is \"your name\"?']\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_values('A \"quote\"') == \"quote\"\nassert     extract_values('A \"double-quoted quote\"') == \"double-quoted quote\"\nassert     extract_values('A \\'single-quoted quote\\'') == \"single-quoted quote\"\nassert     extract_values('A \"escaped quote\"') == \"escaped quote\"\nassert     extract_values('A ``triple-single-quote``') == \"triple-single-quote\"\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert count_Pairs([0,1,2,3,4],5)==4\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n'''\nWrite a python function which takes a list of integers and counts the number of possible ordered pairs where both elements are unequal.\n'''\n\ndef count_OrderedPairs(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible ordered pairs where both elements are unequal.\n    '''\n    pass\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_Pairs([1,2,3,4,5],3) == 4 \nassert     count_Pairs([1,2,3,4,5],5) == 0 \nassert     count_Pairs([1,2,3,4,5],6) == 0 \nassert count_Pairs([1,2,3,4,5],3) == 4\nassert count_Pairs([1,2,3,4,5],5) == 0\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(\"Python version\")\nprint(count_Pairs([1,1,1,1,1,2],6))\nassert \nprint(\"\\nEmphasis of Type\")\nprint(count_Pairs([1,1,1,1,1,2],6))\nassert \nprint(\"\\nCheck for null\")\nprint(count_Pairs([],6))\nassert \nprint(\"\\nCheck for Type Error\")\nprint(count_Pairs([1,1,1,1,1,2],6))\nassert \nprint(\"\\nCheck for Negative Values\")\nprint(count_Pairs([1,-1,1,1,1,2],6))\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_Pairs([0,1,1,1],4) == 5\nassert     count_Pairs([1,1,1,1],4) == 0\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_Pairs([1, 1, 2, 3, 3, 4, 4], 4) == 3, 'Test case 1 failed'\nassert     count_Pairs([3, 3, 3, 3], 3) == 2, 'Test case 2 failed'\nassert     count_Pairs([2, 2, 1], 2) == 3, 'Test case 3 failed'\nassert     count_Pairs([10, 10, 10, 10, 10, 10], 10) == 10, 'Test case 4 failed'\n\nprint('All tests passed'"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     split('hello world') == ['h','e','l','l','o',' ', 'w','o','r','l','d'], \"wrong\"\nassert     split('a,b,c') == ['a','b','c'], \"wrong\"\nassert     split(',,,,,,,,,') == ['',''], \"wrong\"\nassert     split('a') == ['a'], \"wrong\"\nassert     split('a,') == ['a'], \"wrong\"\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     split('a') == ['a']\nassert     split('ab') == ['a', 'b']\nassert     split('abcd') == ['a', 'b', 'c', 'd']\nassert     split('abcdefghi') == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']\nassert     split('abcdefghi', 3) == ['abc', 'def', 'ghi']\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef mul(a,b):\n    '''\n    Write a python function to multiply two numbers.\n    '''\n    pass\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     split('a') == ['a'], 'error in split'\nassert     split('a b') == ['a', 'b'], 'error in split'\nassert     split('a\\nb') == ['a', 'b'], 'error in split'\nassert     split('a\\nb\\nc') == ['a', 'b', 'c'], 'error in split'\n\ndef split_words(sentence):\n    '''\n    Write a python function to split a sentence into words.\n    '''\n    pass\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     split('hello world') == ['h', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\nassert     split('hello world','') == ['h', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert split('Sugar') == ['S', 'u', 'r', 'G']\nassert split('halo') == ['h', 'a', 'l', 'o']\nassert split('Hello, world!') == ['H', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'd', '!']\n\n\ndef roman_to_int(num): \n    '''\n    Write a Python function to convert a Roman numeral to an integer.\n    '''\n    pass\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef remove_space(word):\n    '''\n    Write a python function to remove leading and trailing spaces from the given string.\n    '''\n    pass\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n'''\nUse the below example for testing \nword = \"Learn Python\"\nsplit(word)\n'''\n\ndef is_palindrome(string): \n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     split('aab') == ['a', 'b']\nassert     split('aaab') == ['a', 'a', 'b']\nassert     split('aaabx') == ['a', 'a', 'b', 'x']"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     split(\"This is a test!\") == ['T', 'h', 'i','s','', 'a','','','', 't', 'e','s','', 'a','','','','', '!', 'h', 'i','s','']\nassert    split(\"hi this is a test\") == ['h', 'i','','s','','','','','', 't', 'e','s','', 'a','','','','','','','', 'a','','','','', 't', 'e','s','']\nassert    split(\"hie thist es a teat\") == ['h', 'i', 'e','','s','', 'a','', 't', 'e','s','', 'a','', 't', 'e','', 'a', 't', 'e','s','']\n\ndef split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    pass\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_digits(9) == sum_digits(7) == 1\nassert sum_digits(99) == sum_digits(11) == 1\nassert sum_digits(99999) == sum_digits(111111) == 2\nassert sum_digits(9000000) == sum_digits(100000000) == 11\nassert sum_digits(0) == 0\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nsum_digits(123) == 6\nsum_digits(1001) == 3\nsum_digits(9876) == 8\nsum_digits(99) == 9\nsum_digits(0) == 0\nsum_digits(-123) == 6\nsum_digits(-1001) == -3\nsum_digits(-9876) == -8\nsum_digits(-99) == -9\nsum_digits(-0) == "
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(i) for i in str(n))\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(sum_digits(11))\nprint(sum_digits(532))\nprint(sum_digits(1234))\nprint(sum_digits(1234567890))\nprint(sum_digits(1234567890))\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_digits(0) == 0\nassert     sum_digits(1) == 1\nassert     sum_digits(2) == 3\nassert     sum_digits(3) == 6\nassert     sum_digits(4) == 10\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert sum_digits(321) == 3\nassert sum_digits(1234) == 5\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_digits(1) == 0, 'Wrong sum_digits!'\nassert     sum_digits(3) == 1, 'Wrong sum_digits!'\nassert     sum_digits(1234) == 1, 'Wrong sum_digits!'\nassert     sum_digits(1.2) == 0, 'Wrong sum_digits!'\nassert     sum_digits(1.234) == 0, 'Wrong sum_digits!'\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_digits(1) == 1, 'Wrong value returned for 1'\nassert     sum_digits(2) == 2, 'Wrong value returned for 2'\nassert     sum_digits(1234) == 1 + 2 + 3 + 4, 'Wrong value returned for 1234'\n\ndef is_prime(n):\n    '''\n    Write a function to check whether the given number is a prime or not.\n    '''\n    pass\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert sum_digits(123) == 6\nassert sum_digits(999) == 13\nassert sum_digits(1000) == 1\nassert sum_digits(99900) == 18\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     issort_list([1, 2, 3]) == False\nassert     issort_list([3, 2, 1]) == True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     issort_list([1,2,3])     == False\nassert     issort_list([1,2,3,4])    == True\nassert     issort_list([2,3,4,1])    == True\nassert     issort_list([1,2,3,4,5])    == True\nassert     issort_list([1,2,3,4,5,6])    == False\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     issort_list(['10', '11', '12']) == True\nassert     issort_list(['11', '10', '12']) == False\nassert     issort_list(['12', '11', '10']) == False\nassert     issort_list([]) == False\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     issort_list([1,2,3,4,5,6,7,8,9]) == True, \"Incorrect output\"\nassert     issort_list([1,2,3,4,5,6,7,8,9,8,7]) == False, \"Incorrect output\"\nassert     issort_list([1,2,3,4,5,6,7,8,9,10]) == True, \"Incorrect output\"\nassert     issort_list([1,2,3,4,5,6,7,8,9,10,11]) == True, \"Incorrect output\"\nassert     issort_list([10,9,8,7,6,5,4,3,2,1]) == True, \"Incorrect output\"\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef is_in_list(n1, n2, list1):\n    '''\n    Write a function to check whether a specified number is present in a specified list or not.\n    '''\n    pass\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     issort_list([4,5,1,2,3]) == True, 'Test 1 failed'\nassert     issort_list([1,2,3,4,5]) == True, 'Test 2 failed'\nassert     issort_list([1,2,3]) == False, 'Test 3 failed'\nassert     issort_list([2,1,3]) == False, 'Test 4 failed'\nassert     issort_list([1]) == False, 'Test 5 failed'\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     issort_list([1,2,3,4,5,6,7,8,9]) == True, \"your issort_list function is not working correctly!\"\nassert     issort_list([1,2,4,5,6,7,8,9]) == False, \"your issort_list function is not working correctly!\"\nassert     issort_list([2,4,6,8,10,12,14,16,18]) == True, \"your issort_list function is not working correctly!\"\nassert     issort_list([1,2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     issort_list([1, 2, 3]) == 1\nassert     issort_list([1, 2, 3, 4]) == 0\nassert     issort_list([]) == 0\nassert     issort_list([4, 3, 2, 1]) == 0\nassert     issort_list([1, 2, 3, 4, 5]) == 0\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef insort_list(list1):\n    '''\n    Write a function to insert a new element into a sorted list.\n    '''\n    pass\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert empty_list(5) == \n\ndef build_person_dict(first, last, age=None):\n    '''\n    Write a function that builds a dictionary containing information about a person.\n    '''\n    pass\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert not empty_list(1)\nassert empty_list(2)\nassert empty_list(0)\nassert empty_list(1)\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert         empty_list(5) ==     [{},{},{},{},{}]\nassert         empty_list(2) ==     [{},{}]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     empty_list(0) == [] \nassert     empty_list(1) == []\nassert     empty_list(2) == [{}, {}]\nassert     empty_list(3) == [{}, {}, {}]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef find_second_max(list1):\n    '''\n    Given a list of integer, find the second max integer in the list.\n    '''\n    pass\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    empty_list(3) == \n    [{}, {}, {}]\n    empty_list(2) == \n    [{}, {}]\n    empty_list(1) == \n    [{}]\n    empty_list(0) == \n    []\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     empty_list(0) == []\nassert     empty_list(1) == []\nassert     empty_list(2) == []\nassert     empty_list(3) == []\nassert     empty_list(4) == []\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_sublists([['a','b','c','d','e'],['e','f','g','h','i'],['i','j','k','l','m'],['m','n','o','p','q'],['q','r','s','t','u'],['u','v','w','x','y']]) == ['a','b','c','d','e','e','f','g','h','i','i','j','k','l','m','m','n','o','p','q','q','r','s','t','u','u','v','w','x','y'], \"sort_sublists([['a','b','c','d','e'],['e','f','g','h','i'],['i','j','k','l','m'],['m','n','o','p','q'],['q','r','s','t','u'],['u','v','w','x','y']])!= ['a','b','c','d','e','e','f','g','h','i','i','j','k','l','m','m','n','o','p','q','q','r','s','t','u','u','v','w','x','y'].\"\nassert     sort_sublists([['a','b','c','d','e'],['e','f','g','h','i'],['i','j','k','l','m'],['m','n','o','p','q'],['q','r','s','t','u'],['u','v','w','x','y']]) == ['a','b','c','d','e','e','f','g','h','i','i','j','k','l','m','m','n','o','p','q','q','r','s','t','u','u','v','w','x','y'], \"sort_sublists([['a','b','c','d','e'],['e','f','g','h','i'],['i','j','k','l','m'],['m','n','o','p','q'],['q','r','s','t','u'],['u','v','w','x','y']])!= ['a','b','c','d','e','e','f','g','h','i','i','j','k','l','m','m','n','o','p','q','q','r','s','t','u','u','v','w','x','y'].\"\nassert     sort_sublists([['a','b','c'],['e','f'],['i','j','k'],['m','n','o'],['q','r'],['u','v','w']]) == ['a','b','c','e','f','i','j','k','m','n','o','q','r','u','v','w'], \"sort_sublists([['a','b','c'],['e','f'],['i','j','k'],['m','n','o'],['q','r'],['u','v','w']])!= ['a','b','c','e','f','i','j','k','m','n','o','q','r','u','v','w'].\"\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_sublists([[], ['a'], ['b'], ['c']]) == [[], ['a'], ['b'], ['c']]\nassert     sort_sublists([[], ['a'], ['b'], ['c', 'd']]) == [[], ['a'], ['b'], ['c', 'd']]\nassert     sort_sublists([['b', 'a'], ['d', 'c'], ['a'], ['c']]) == [['b', 'a'], ['d', 'c'], ['a'], ['c']]\n\ndef unzip(list1):\n    '''\n    Write a function to unzip a list of tuples into two lists.\n    '''\n    pass\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_sublists([[1,2], ['a','c'], ['b','d']]) == \\\n        [['a','c'], [1,2], ['b','d']]\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_sublists([['apple', 'orange'],['cauli', 'pear'],['kiwi']]) == [\n['apple', 'orange'], ['cauli', 'pear'], ['kiwi']]\nassert     sort_sublists([['apple', 'orange', 'banana'],['cauli', 'pear', 'kiwi'],['pineapple']]) == [\n['pineapple', 'apple', 'cauli', 'orange', 'pear', 'kiwi']]\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_sublists([[]]) == [[]]\nassert     sort_sublists([[\"abc\"]]) == [['abc']]\nassert     sort_sublists([[]]) == [[]]\nassert     sort_sublists([[\"abc\"],[\"h\"],[\"e\"],[\"d\"]]) == [['abc'],['e'],['d'],['h']]\nassert     sort_sublists([[\"a\",\"b\",\"c\"],[\"d\",\"e\",\"f\"],[\"g\",\"h\",\"i\"]]) == [['a','b','c'],['g','h','i'],['d','e','f']]\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_sublists([['a', 'b', 'c'], ['c', 'a']]) == [['a', 'b', 'c'], ['c', 'a']]\nassert     sort_sublists([['a', 'b', 'c'], ['c', 'a', 'b']]) == [['a', 'b', 'c'], ['c', 'a', 'b']]\n\ndef list_reverse(list1):\n    '''\n    Write a function to reverse each sublist of strings in a given list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_sublists(['abc', 'efg', 'gab', 'hij']) == [['abc', 'gab', 'efg', 'hij'], ['efg', 'gab', 'abc', 'hij'], ['gab', 'efg', 'abc', 'hij'], ['efg', 'gab', 'abc', 'hij']]\n\nassert sort_sublists(['abc', 'efg', 'gab', 'hij']) == [['abc', 'gab', 'efg', 'hij'], ['efg', 'gab', 'abc', 'hij'], ['gab', 'efg', 'abc', 'hij'], ['efg', 'gab', 'abc', 'hij']]\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_sublists([['A', 'B', 'C'], ['B', 'C', 'D'], ['A', 'D', 'E']]) == [['A', 'B', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']]\nassert     sort_sublists([['A', 'B', 'C'], ['B', 'C', 'D'], ['A', 'D', 'E']]) == [['A', 'B', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']]"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_sublists([['m','a','i'],['o','b','c'],['p','q','r']]    ==\n    [['p','q','r'],['m','a','i'],['o','b','c']])\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef two_unique_nums_sol_1(nums):\n    '''\n    a) Create two empty dictionaries.\n    b) Iterate through all the lists and keep only the unique numbers.\n    '''\n    pass\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     two_unique_nums([[1,2,3],[3,4,5],[3,4,5]]) == [[1,2,3],[3,4,5]]\nassert     two_unique_nums([[1,2,3,3,4],[3,4,5],[3,4,5]]) == [[1,2,3,3,4],[3,4,5]]\nassert     two_unique_nums([[1,2,3,3,4],[3,4,5,6],[3,4,5,6]]) == [[1,2,3,3,4],[3,4,5,6]]\nassert     two_unique_nums([[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]]) == [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]]\nassert     two_unique_nums([[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]]) == [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]]\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     two_unique_nums([[1], [2], [3], [1], [4], [5]]) == [[1], [4], [5]]\nassert     two_unique_nums([[1], [1], [1], [1], [2], [2], [3], [4], [5]]) == [[1], [2], [3], [4], [5]]\nassert     two_unique_nums([[1], [1], [2], [1], [4], [5], [1], [1], [2], [3], [4], [5]]) == [[1], [2], [3], [4], [5]]\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     two_unique_nums([1, 2, 3, 3, 4]) == [1, 2, 4]\nassert     two_unique_nums([1, 1, 2, 2]) == [1, 2]\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     two_unique_nums(nums) == [[1,3], [2,3], [1,3,5,6]]"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     two_unique_nums([1,1,2,3,4])    ==    [1,2,3,4]\nassert two_unique_nums([3,2,3]) ==    [3,2,3]\n\ndef check_valid_parenthesis(parens):\n    '''\n    Write a python function to check if the parentheses in a given string are valid or not.\n    '''\n    pass\n\nassert check_valid_parenthesis(\"()\") == True\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     two_unique_nums(nums = [[1,1,1],[2,2,2],[1,1,1],[1,1,1]]) == [[1,1,1],[2,2,2]]\nassert     two_unique_nums(nums = [[1,1,1],[2,2,2],[1,1,1],[1,1,1]]) == [[1,1,1],[1,1,1]]\nassert     two_unique_nums(nums = [[1,1,1],[2,2,2],[1,1,1]]) == [[1,1,1],[2,2,2]]\n\n'''\nGiven a set of N numbers, print the first and last number from the set.\n\nFor example, given an input set {4,5,8,3,1}, print the first and last element in the set:\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     two_unique_nums([1,2,3,4,5,6,7,8,9,10,11,12]) == True, 'Should return True'\nassert     two_unique_nums([1,2,3,4,5,6,7,8,9,10,11,12,13]) == True, 'Should return True'\nassert     two_unique_nums([1,2,3,4,5,6,7,8,9,10,11,12,12]) == False, 'Should return False'\nassert     two_unique_nums([1,2,3,4,5,6,7,8,9,10,11,12,12,12]) == False, 'Should return False'\nassert     two_unique_nums([1,2,3,4,5,6,7,8,9,10,11,12,12,12,12]) == False, 'Should return False'\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     two_unique_nums([]) == False, \n    'Two unique numbers: False'\nassert     two_unique_nums([1,2,3]) == True, \n    'Two unique numbers: True'\nassert     two_unique_nums([]) == False, \n    'Two unique numbers: False'\nassert     two_unique_nums([]) == False, \n    'Two unique numbers: False'\nassert     two_unique_nums([1,1,1,2,2,3]) == True, \n    'Two unique numbers: True'\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     unique_product([1,2,3,3,4,5,6,2,1,3]) == 120\nassert     unique_product([1,2,3,4]) == 24\nassert     unique_product([1]) == 1\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert unique_product(list_data=[3,3,1,3,1,4,3]) == 24"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    unique_product([3, 6, 3, 1, 9, 5, 8]) == 6\n    unique_product([3, 3, 3, 3, 3, 3, 3]) == 9\n    unique_product([3]) == 3\n    unique_product([]) == 1\n    unique_product([3, 2, 4, 3, 1, 3, 1]) == 8\n\n'''\nWhat is the difference between unique_product() and sorted()?\n'''\nassert \n    unique_product([3, 6, 3, 1, 9, 5, 8]) == 6\n    unique_product([3, 3, 3, 3, 3, 3, 3]) == 9\n    unique_product([3]) == 3\n    unique_product([]) == 1\n    unique_product([3, 2, 4, 3, 1, 3, 1]) == 8\n\n'''\nWhat is the difference between unique_product() and sorted()?\n'''\nassert \n    unique_product([3, 6, 3, 1, 9, 5, 8]) == 6\n    unique_product([3, 3, 3, 3, 3, 3, 3]) == 9\n    unique_product([3]) == 3\n    unique_product([]) == 1\n    unique_product([3, 2, 4, 3, 1, 3, 1]) == 8\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     unique_product([2,5,3,8,7,3,3]) == 420, \"Output is not correct\"\nassert unique_product([5,2,3,3,8,7,3,3]) == 720, \"Output is not correct\"\nassert unique_product([3,3,8,7,3,3]) == 81, \"Output is not correct\"\nassert unique_product([3,3,3,3,3,3]) == 6, \"Output is not correct\"\nassert unique_product([1,1,1,1,1,1]) == 1, \"Output is not correct\"\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     unique_product([1,2,3,4,5,6,7,8,9,10,11,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30])==21600, 'Wrong result'\n\ndef unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     unique_product([1, 2, 3, 4, 3]) == 24\nassert     unique_product([1, 2, 3, 4, 5, 6]) == 120\nassert     unique_product([1, 1, 1]) == 1\nassert     unique_product([]) == 1\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     unique_product([2,3,4,2,5,1,1]) == 20, 'Should be 20'\nassert     unique_product([4,5,3,5,7,6,4]) == 80, 'Should be 80'\nassert     unique_product([4,4,4]) == 8, 'Should be 8'\nassert     unique_product([4,4,4,2,2,2,2]) == 8, 'Should be 8'\nassert     unique_product([2,4,6,2,4]) == 8, 'Should be 8'\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     unique_product([1,2,3,4,5,6]) == 120, 'Unique product of given list is wrong'\nassert     unique_product([1,2,3,4,5,6,8,9]) == 720, 'Unique product of given list is wrong'\nassert     unique_product([1,1,1,1,1,1]) == 1, 'Unique product of given list is wrong'\nassert     unique_product([1,1,1,1,1,1,1]) == 1, 'Unique product of given list is wrong'\nassert     unique_product([]) == 1, 'Unique product of given list is wrong'\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert unique_product([1,2,3,4,5]) == 120\nassert unique_product([1,2,3,4,5,1]) == 30\nassert unique_product([1,2,3,4,5,1,6,7]) == 720\nassert unique_product([1,2,3,4,5,2,6,7]) == 210\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert unique_product([1,2,3,4,4,4,5,5,6,7,7]) == 336, 'Incorrect'\nassert unique_product([2,2,2,4,5,5,5,5,6,7,7,7]) == 2480, 'Incorrect'\nassert unique_product([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 36360, 'Incorrect'\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     surfacearea_cylinder(3,4) == 50.00, 'incorrect surfacearea_cylinder function'\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     surfacearea_cylinder(5,2) == 20.3,'Test case 1 did not pass'\nassert surfacearea_cylinder(10,2) == 36,'Test case 2 did not pass'\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     surfacearea_cylinder(1, 2) == 2.56\nassert     surfacearea_cylinder(2, 4) == 9.45\nassert     surfacearea_cylinder(2.2, 4) == 11.09\nassert     surfacearea_cylinder(3, 4) == 17.22\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     surfacearea_cylinder(0.2, 0.4) == 2.7\nassert     surfacearea_cylinder(1, 2) == 3.16\n\n\n\ndef area_triangle(a,b,c):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    pass\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     surfacearea_cylinder(1,1) == 2\nassert surfacearea_cylinder(1,2) == 2.5\nassert surfacearea_cylinder(5,2) == 6\nassert surfacearea_cylinder(0,3) == 0\nassert surfacearea_cylinder(1,0) == 0\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     surfacearea_cylinder(2,5) == 42.5\nassert     surfacearea_cylinder(3,8) == 84\nassert     surfacearea_cylinder(4,10) == 108\n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     surfacearea_cylinder(3,3) == (5*3.14)\nassert     surfacearea_cylinder(3,5) == (5*3.14*3)\nassert     surfacearea_cylinder(3,2) == (5*3.14*2)\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nsurfacearea_cylinder(0,1) == 3.14*r*2\nsurfacearea_cylinder(0.5,1) == 3.14*0.5*2\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     surfacearea_cylinder(0.5, 1.0) == 2.81\nassert surfacearea_cylinder(0.5, 1.0) == 2.81\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_Sub_Array([],[] ) == True, \"Sub_array is not a valid sublist\"\nassert     is_Sub_Array([1,2,3],[] ) == False, \"Sub_array is not a valid sublist\"\nassert     is_Sub_Array([4,5,6],[] ) == True, \"Sub_array is not a valid sublist\"\nassert     is_Sub_Array([],[] ) == True, \"Sub_array is not a valid sublist\"\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef is_Sub_Array_with_alternate_parameters(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    pass\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_Sub_Array([1, 2, 3], [[1, 2], [3]]) == True, 'your function is wrong'\nassert     is_Sub_Array([1, 2, 3], [[1, 2], [3], [4]]) == True, 'your function is wrong'\nassert     is_Sub_Array([1, 2, 3, 4], [[1, 2, 3]]) == False, 'your function is wrong'\nassert     is_Sub_Array([1, 2, 3, 4], [[1, 2, 3], [4]]) == True, 'your function is wrong'\nassert     is_Sub_Array([1, 2, 3, 4], [[1, 2, 3, 4]]) == True, 'your function is wrong'\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_Sub_Array([1,2,3,4], [1,2]) == True, 'Wrong Answer, The two lists are not equal'\nassert     is_Sub_Array([1,2,3,4], [2,3]) == True, 'Wrong Answer, The two lists are not equal'\nassert     is_Sub_Array([1,2,3,4], [3,4]) == True, 'Wrong Answer, The two lists are not equal'\nassert     is_Sub_Array([1,2,3,4], [4]) == True, 'Wrong Answer, The two lists are not equal'\nassert     is_Sub_Array([1,2,3,4,5], [1,2]) == False, 'Wrong Answer, The two lists are equal'\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_Sub_Array([1,4,6,10],[]) == True, \"pass\"\nassert     is_Sub_Array([4,6,10],[1,4,6,10]) == True, \"pass\"\nassert     is_Sub_Array([4,6,10],[1,4,6,10,1]) == False, \"pass\"\nassert     is_Sub_Array([1,4,6,10,1],[]) == True, \"pass\"\nassert     is_Sub_Array([],[1,4,6,10,1]) == False, \"pass\"\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_Sub_Array([1,2,3,4,5],[1,2]) == True\nassert     is_Sub_Array([1,2,3,4,5],[5,4]) == False\nassert     is_Sub_Array([1,2,3,4,5],[6,3,4]) == False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_Sub_Array([0,1,2,3], [0,1,2,3,4]) == True, \"Expected True\"\nassert     is_Sub_Array([0,1,2,3], [4,5,6,7,8]) == False, \"Expected False\"\nassert     is_Sub_Array([1,2,3], [0,1,2,3,4]) == True, \"Expected True\"\nassert     is_Sub_Array([1,2,3], [4,5,6,7,8]) == False, \"Expected False\"\nassert     is_Sub_Array([1,2,3], [4,5,6,7,9]) == False, \"Expected False\"\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_Sub_Array([1,2,3],[2,3])==True, 'FAIL'\nassert     is_Sub_Array([2,3],[2,3])==True, 'FAIL'\nassert     is_Sub_Array([2,3],[1,3])==False, 'FAIL'\nassert     is_Sub_Array([1,2,3,4],[2,3])==False, 'FAIL'\nassert     is_Sub_Array([1,2,3],[2])==True, 'FAIL'\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     last_Digit_Factorial(121) == 1\nassert     last_Digit_Factorial(121) == 1\nassert     last_Digit_Factorial(12) == 2\nassert     last_Digit_Factorial(1234567890) == 8\nassert     last_Digit_Factorial(1234567890) == 8\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     last_Digit_Factorial(10) == 0\nassert     last_Digit_Factorial(1) == 1\nassert     last_Digit_Factorial(11) == 1\nassert     last_Digit_Factorial(4) == 0\nassert     last_Digit_Factorial(100) == 9\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     last_Digit_Factorial(1) == 0, 'Wrong Output'\nassert     last_Digit_Factorial(2) == 1, 'Wrong Output'\nassert     last_Digit_Factorial(3) == 1, 'Wrong Output'\nassert     last_Digit_Factorial(4) == 2, 'Wrong Output'\nassert     last_Digit_Factorial(7) == 6, 'Wrong Output'\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     last_Digit_Factorial(1) == 1\nassert     last_Digit_Factorial(2) == 1\nassert     last_Digit_Factorial(5) == 5\nassert     last_Digit_Factorial(10) == 3\nassert     last_Digit_Factorial(20) == 1\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     last_Digit_Factorial(45) == 4\nassert last_Digit_Factorial(99) == 9\nassert last_Digit_Factorial(333) == 3\nassert last_Digit_Factorial(909) == 9\nassert last_Digit_Factorial(999) == 9\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     last_Digit_Factorial(6) == 2\nassert     last_Digit_Factorial(20) == 1\nassert     last_Digit_Factorial(6) == 2\nassert     last_Digit_Factorial(1234567890) == 1\nassert     last_Digit_Factorial(123456789) == 0\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     last_Digit_Factorial(5) == 1\nassert     last_Digit_Factorial(89) == 9\nassert     last_Digit_Factorial(999) == 1\nassert     last_Digit_Factorial(44) == 4\nassert     last_Digit_Factorial(110) == 1\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     last_Digit_Factorial(1) == 0, \"Testcase 1 Failed\"\nassert     last_Digit_Factorial(2) == 1, \"Testcase 2 Failed\"\nassert     last_Digit_Factorial(12) == 1, \"Testcase 3 Failed\"\nassert     last_Digit_Factorial(43) == 3, \"Testcase 4 Failed\"\nassert     last_Digit_Factorial(1001) == 1, \"Testcase 5 Failed\"\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     interleave_lists([1,2,3,4], [5,6,7,8],[9,10,11,12]) == [1, 5, 9, 2, 6, 10, 3, 7, 11, 4, 8, 12]\nassert     interleave_lists([1,2,3,4,5,6,7,8,9,10,11,12],[13,14,15,16],[17,18,19,20]) == [1,13,17, 2,14,18, 3,15,19, 4,16,20, 5,13,21, 6,14,20, 7,15,21, 8,16,21, 9,17,21,10,18,22,11,19,22]\nassert     interleave_lists([1,2,3,4,5,6,7,8,9,10,11,12], [13,14,15,16,17,18,19,20],[21,22,23,24]) == [1,13,21, 2,14,22, 3,15,23, 4,16,24, 5,13,25, 6,14,24, 7,15,25, 8,16,25, 9,17,25,10,18,26,11,19,26]"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     interleave_lists([\"a\",\"b\",\"c\"],[\"d\",\"e\",\"f\"],[\"g\",\"h\",\"i\"]) == [\"a\",\"d\",\"b\",\"e\",\"c\",\"f\",\"g\",\"h\",\"i\"]\nassert     interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]\n\ndef flat_list(list1, list2, list3):\n    '''\n    Write a function to return the elements of a list, flattened, with any nested lists intact.\n    '''\n    pass\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     interleave_lists([1,2,3],[4,5,6],[7,8,9,10,11]) == [1,4,7,2,5,8,3,6,9,10,11]\nassert     interleave_lists([2,4,6],[5,7,9,10,11],[8,10,12,13,14]) == [2,5,8,4,7,9,6,10,11,3,13,12,14]\nassert     interleave_lists([3,7,11],[8,12,14,16],[9,13,15,17]) == [3,8,9,7,12,13,14,15,11,11,14,16,17]"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef search_number(num,nums):\n    '''\n    Write a function to search a number in a list of sorted numbers.\n    The number could appear anywhere in the list.\n    Return true if the number is in the list, otherwise return false.\n    '''\n    pass\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef multidict(dic):\n    '''\n    Write a function to return the product of the numbers in the dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     interleave_lists([1,2,3,4,5,6,7],[8,9,10,11,12],[13,14,15,16,17]) == \\\n    [1,8,2,9,3,10,4,11,5,12,6,13,7,14,15,16,17]\nassert     interleave_lists([1,2,3],[4,5,6],[7,8,9]) == \\\n    [1,4,2,7,5,3,8,6]\nassert     interleave_lists([1,2],[3,4,5],[6,7,8]) == \\\n    [1,3,2,6,4,5,7,8]\nassert     interleave_lists([1,2,3],[4,5],[6,7]) == \\\n    [1,4,2,6,3,5,7]\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     interleave_lists([1,2,3],[4,5,6],[7,8,9]) ==  [1,4,7,2,5,8,3,6,9]\nassert     interleave_lists([1,2,3,4],[5,6,7,8],[9,10,11,12]) ==  [1,5,9,2,6,10,3,7,11,4,8,12]\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     interleave_lists([1,2,3,4],[5,6,7,8],[9,10,11,12]) == [1,5,9,2,6,10,3,7,11,4,8,12]\nassert     interleave_lists([1,2,3],[5,6,7],[8,9,10]) == [1,5,8,2,6,9,3,7,10]\nassert     interleave_lists([1,2,3],[5,6,7],[8,9]) == [1,5,8,2,6,9,3,7]\nassert     interleave_lists([],[],[]) == []\nassert     interleave_lists([1],[],[2]) == [1,2]\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]\nassert     interleave_lists([3,2,1],[4,5,6],[7,8,9]) == [3,4,7,2,5,8,1,6,9]\nassert     interleave_lists([3,2,1],[4,5,6],[7,8,9],1) == [3,1,4,7,2,5,8,6,9]\nassert     interleave_lists([3,2,1],[4,5,6],[7,8,9],2) == [3,4,7,2,1,5,8,6,9]\nassert     interleave_lists([3,2,1],[4,5,6],[7,8,9],3) == [3,4,7,2,5,8,1,6,9]\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     interleave_lists(list1,list2,list3) ==  [4,5,2,5,3,4,6,7,3,6,8,9]\nassert     interleave_lists(list1,list2,list3) ==  [4,5,2,5,3,4,6,7,3,6,8,9]\nassert     interleave_lists(list1,list2,list3) ==  [4,5,2,5,3,4,6,7,3,6,8,9]\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_dissimilar(('a', 'b'), ('b', 'a')) == (('a', 'b'), ('b', 'a'))\nassert     find_dissimilar(('a', 'c'), ('c', 'a')) == (('a', 'c'), ('c', 'a'))\nassert     find_dissimilar(('a', 'd'), ('d', 'a')) == (('a', 'd'), ('d', 'a'))\nassert     find_dissimilar(('a', 'e'), ('e', 'a')) == (('a', 'e'), ('e', 'a'))\nassert     find_dissimilar(('a', 'f'), ('f', 'a')) == (('a', 'f'), ('f', 'a'))\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_dissimilar(test_tup1, test_tup2) == []\nassert     find_dissimilar(test_tup2, test_tup1) == []\nassert     find_dissimilar(test_tup1, (2,2)) == (2,)\nassert     find_dissimilar((2,2), (2,2)) == ()\nassert     find_dissimilar((2,2,3), (2,2,3)) == ()\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_dissimilar((2,4,1,3), (3,1,1,3)) == {2,3,4}\nassert     find_dissimilar((2,4,1,3), (4,1,1,3)) == {2,3}\n\nprint(\"You've passed the 'find_dissimilar' function\")"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_dissimilar(('a', 'b'), ('c', 'd')) == ('a', 'c')\nassert     find_dissimilar(('a', 'a'), ('a', 'b')) == ('a', 'a')\nassert     find_dissimilar(('a', 'b'), ('a', 'a')) == ('a', 'a')\nassert     find_dissimilar(('a', 'b'), ('a', 'c')) == ('a', 'a')\nassert     find_dissimilar(('a', 'b'), ('a', 'c', 'a')) == ('a', 'a')\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_dissimilar((1,2,3,4), (5,6,7,8)) == (1,2,3)\nassert     find_dissimilar((1,2,3,4), (5,6,7,8,9)) == (1,2,3)\nassert     find_dissimilar((1,2,3,4,5), (5,6,7,8,9)) == (1,2,3)\nassert     find_dissimilar((1,2,3,4,5), (5,6,7,8,9,10)) == (1,2,3)\nassert     find_dissimilar((1,2,3,4,5), (1,2,3,4,5,6)) == (1,2,3)\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_dissimilar(('a','b'),('c','d')) == ['a', 'c']     # should be ['b']\nassert     find_dissimilar(('a','b'),('c','d')) == ['a', 'b', 'c', 'd']     # should be ['b', 'a', 'c', 'd']\nassert     find_dissimilar(('a','b','c','d','e'),('f','g','h','i','j','k','l','m')) == ['a', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m']\nassert     find_dissimilar(('a','b','c','d','e'),('f','g','h','i','j','k','l','m')) == ['a', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m']\nassert     find_dissimilar(('a','b','c','d','e'),('f','g','h','i','j','k','l','m')) == ['a', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m']\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_dissimilar((1,2,3),(4,5,6)) == (2,3)\nassert     find_dissimilar((1,2,3,4,5,6),(4,5,6)) == (3,4)\nassert     find_dissimilar((1,2,3,4,5,6,7),(4,5,6)) == (3,4)\nassert     find_dissimilar((1,2,3,4,5,6,7,8,9),(4,5,6)) == (3,4,5)\n\nprint(\"Test passed.\")\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_dissimilar((1, 1, 2), (4, 2, 3)) == (1, 2)\nassert     find_dissimilar((1, 2, 3), (1, 1, 2)) == (1, 2)\nassert     find_dissimilar((1, 2, 3), (1, 2, 3)) == (1, 2)\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_dissimilar((1,2,3),(1,2,4)) == (2,3)\nassert     find_dissimilar((1,2,3),(1,2,2)) == (2,3)\nassert     find_dissimilar((1,2,3),(2,2,2)) == (3,2)"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_dissimilar((1, 1), (1, 1)) == (), 'First tuple of 1s and 1s is dissimilar'\nassert     find_dissimilar((1, 1), (1, 5)) == (), 'Second tuple of 1s and 1s is dissimilar'\nassert     find_dissimilar((1, 2), (1, 2)) == (), 'First tuple of 1s and 2s is dissimilar'\nassert     find_dissimilar((1, 2), (1, 3)) == (), 'Second tuple of 1s and 2s is dissimilar'\nassert     find_dissimilar((1, 2), (2, 2)) == (), 'First tuple of 2s and 2s is dissimilar'\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     even_ele((5, (2, 3, 4), [1, 2, 3], (4, 5, 6)), even_check) == (2, 3, 4, 1, 2, 3, (4, 5, 6))\nassert     even_ele((2, 3, 5, 5), even_check) == (3, 5, 5)\nassert even_ele((5, (2, 3, 4), (1, 2, 3, 4), (4, 5, 6)), even_check) == (2, 3, 4, 1, 2, 3, (4, 5, 6))\n\ndef odd_ele(test_tuple, odd_fnc):\n    '''\n    Write a function to remove even elements in the nested mixed tuple.\n    '''\n    pass\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     even_ele(test_tuple, even_fnc) == (), \\\n        \"Expected: (), Actual: {}\".format(even_ele(test_tuple, even_fnc))\n\nassert even_ele(test_tuple, even_fnc) == (1, 2, 5, 4, 9), \\\n        \"Expected: (1, 2, 5, 4, 9), Actual: {}\".format(even_ele(test_tuple, even_fnc))\n\nassert even_ele(test_tuple, even_fnc) == (4, 2, 9, 1), \\\n        \"Expected: (4, 2, 9, 1), Actual: {}\".format(even_ele(test_tuple, even_fnc))\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     even_ele(test_tuple, even_fnc) == test_tuple[0:2]\nassert even_ele(test_tuple, even_fnc) == (1, 3)\nassert even_ele(test_tuple, even_fnc) == (1, 2)\nassert even_ele(test_tuple, even_fnc) == (2, 4)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     even_ele(tuple1, even) == (1, 2, '5')\nassert     even_ele(tuple2, even) == (1, '2', 3)\nassert     even_ele(tuple3, even) == (1, 2, 3)\nassert     even_ele(tuple4, even) == (1, 2, 3)\nassert     even_ele(tuple5, even) == (1, 2, 3)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ntest_tuple = (10, 'G', 11, 'B', 9, 'E', 15, 'C', 12, 'A')\neven_ele(test_tuple, even_fnc)\n\nprint('\\n')\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     even_ele(((1, 2, 3), ('a', 'b'), 'c', 'd', ('e', 'f'), 'g'), lambda a, b: a == b), 'Fail'\nassert     even_ele(((1, 2, 3), ('a', 'b'), 'c', 'd', ('e', 'f'), 'g'), lambda a, b: b == 'e'), 'Fail'\nassert     even_ele(((1, 2, 3), ('a', 'b'), 'c', 'd', ('e', 'f'), 'g'), lambda a, b: b == 'd'), 'Fail'\nassert     even_ele(((1, 2, 3), ('a', 'b'), 'c', 'd', ('e', 'f'), 'g'), lambda a, b: a == 'd'), 'Fail'\nassert     even_ele(((1, 2, 3), ('a', 'b'), 'c', 'd', ('e', 'f'), 'g'), lambda a, b: b == 'a'), 'Fail'\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \neven_ele(('a',[1,2],(1,2,3),[1,2,3]), even_fnc) == ('a',[1,2],(1,2,3),[1,2])\n\ndef all_in(l1, l2):\n    '''\n    Write a function to determine whether all elements of list 1 are in list 2.\n    '''\n    pass\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     even_ele(((1, 2), ('1', '2'), 1), even) == ((1, 2), (1, 2), 1)\nassert even_ele((('1', '2', '3'), ('1', '2'), 1), even) == ((1, 2), ('1', '2'), 1)\nassert even_ele(((1, 2), ('1', '2'), 1), even) == ((1, 2), (1, 2), 1)\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     surface_Area(1,1) == 4\nassert     surface_Area(2,2) == 9\nassert     surface_Area(2.9,1) == 5\nassert     surface_Area(3,2) == 17\nassert     surface_Area(3.9,1) == 6\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     surface_Area(2,2) == 9, \"The surface area of square pyramid with 2 as base edge and 2 as height should be 9\"\nassert     surface_Area(3,2) == 18, \"The surface area of square pyramid with 3 as base edge and 2 as height should be 18\"\nassert     surface_Area(3,3) == 36, \"The surface area of square pyramid with 3 as base edge and 3 as height should be 36\"\nassert     surface_Area(10,2) == 250, \"The surface area of square pyramid with 10 as base edge and 2 as height should be 250\"\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     surface_Area(1,1) == 4, 'Surface_Area should be 4'\nassert     surface_Area(3,2) == 9, 'Surface_Area should be 9'\nassert     surface_Area(3,3) == 12, 'Surface_Area should be 12'\nassert     surface_Area(7,2) == 49, 'Surface_Area should be 49'\nassert     surface_Area(7,3) == 58, 'Surface_Area should be 58'\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     surface_Area(1,3) == 2, \"surface_Area(1,3) has incorrect return value\"\nassert surface_Area(4,4) == 16, \"surface_Area(4,4) has incorrect return value\"\nassert surface_Area(5,5) == 32, \"surface_Area(5,5) has incorrect return value\"\n\ndef surface_Area_alt(b,s): \n    '''\n    The surface area of a square pyramid can be described by the equation: \n    A = (b*s*s)/4 + s*(s+1)*b/2\n\n    Please write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    pass\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     surface_Area(3,6) == 28\nassert     surface_Area(5,3) == 24\nassert     surface_Area(10,10) == 200\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     surface_Area(2, 1) == 4\nassert     surface_Area(4, 2) == 20\nassert     surface_Area(1, 2) == 2\n\n\n\ndef length_perimeter(l,w): \n    '''\n    Write a python function to find the length, perimeter, and area of a rectangle.\n    '''\n    pass\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     surface_Area(4,6) == 48\nassert     surface_Area(5,7) == 70\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     surface_Area(10, 20) == 200\nassert     surface_Area(20, 10) == 200\nassert     surface_Area(2, 6) == 20\nassert     surface_Area(5, 7) == 78\nprint('correct')\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     surface_Area(2, 2) == 8, 'incorrect result'\nassert surface_Area(1, 2) == 2, 'incorrect result'\nassert surface_Area(1, 3) == 3, 'incorrect result'\nassert surface_Area(1, 4) == 4, 'incorrect result'\nassert surface_Area(1, 5) == 5, 'incorrect result'\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     my_dict({}) == True, 'First assert'\nassert     my_dict({1: 'a', 'b': 'c', 'c': 'd'}) == False, 'Second assert'\nassert     my_dict({1: 'a', 'b': 'c', 'c': 'd', 'e': 'f'}) == False, 'Third assert'\nassert     my_dict({1: 'a', 'b': 'c', 'c': 'd'}) == True, 'Fourth assert'\nassert     my_dict({1: 'a', 'b': 'c', 'c': 'd', 'e': 'f'}) == True, 'Fifth assert'\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert my_dict({}) is True\nassert my_dict({'a': 1}) is False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     my_dict(dict1)\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     my_dict({\"a\":1}) == True, \"Error: my_dict returned false\"\nassert     my_dict({\"a\":1,\"b\":2}) == True, \"Error: my_dict returned false\"\nassert     my_dict({\"a\":1,\"b\":2,\"c\":3}) == False, \"Error: my_dict returned false\"\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndict1 = {}\nmy_dict(dict1)\n\ndict1 = {0:1}\nmy_dict(dict1)\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef test_my_dict():\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    pass\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     my_dict({}) == True, 'Test case 1: True'\nassert     my_dict({}) == False, 'Test case 2: False'\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef my_dict1(my_dict):\n    '''\n    Write a function that returns the number of keys in a dictionary\n    '''\n    pass\n\nassert my_dict1({1:2,3:4,5:6,7:8}) == 3\nassert my_dict1({1:2,3:4,5:6,7:8}) == 4\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     catalan_number(0)    == 1,        'catalan_number(0) should be 1'\nassert     catalan_number(1)    == 2,        'catalan_number(1) should be 2'\nassert     catalan_number(3)    == 7,        'catalan_number(3) should be 7'\nassert     catalan_number(4)    == 8,        'catalan_number(4) should be 8'\nassert     catalan_number(6)    == 28,        'catalan_number(6) should be 28'\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     catalan_number(0) == 1, \"incorrect\"\nassert     catalan_number(1) == 1, \"incorrect\"\nassert     catalan_number(2) == 2, \"incorrect\"\nassert     catalan_number(3) == 4, \"incorrect\"\nassert     catalan_number(4) == 14, \"incorrect\"\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     catalan_number(1) == 2\nassert     catalan_number(2) == 1\nassert     catalan_number(3) == 2\nassert     catalan_number(4) == 4\nassert     catalan_number(5) == 5\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef check_catalan_number(n):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    pass\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     catalan_number(1) == 1\nassert     catalan_number(2) == 2\nassert     catalan_number(3) == 5\nassert     catalan_number(4) == 14\nassert     catalan_number(5) == 42\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     catalan_number(1) == 1\nassert     catalan_number(2) == 1\nassert     catalan_number(3) == 2\nassert     catalan_number(4) == 3\nassert     catalan_number(5) == 5\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     catalan_number(1) == 1, \"Test 1 Failed!\"\nassert     catalan_number(2) == 1, \"Test 2 Failed!\"\nassert     catalan_number(3) == 2, \"Test 3 Failed!\"\nassert     catalan_number(4) == 4, \"Test 4 Failed!\"\nassert     catalan_number(5) == 14, \"Test 5 Failed!\"\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     catalan_number(3) == 5, 'catalan_number(3) = 5'\nassert     catalan_number(4) == 8, 'catalan_number(4) = 8'\nassert     catalan_number(6) == 14, 'catalan_number(6) = 14'\nassert     catalan_number(8) == 40, 'catalan_number(8) = 40'\nassert     catalan_number(10) == 132, 'catalan_number(10) = 132'\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     catalan_number(0) == 1, 'check 1st catalan number'\nassert     catalan_number(1) == 1, 'check 2nd catalan number'\nassert     catalan_number(2) == 2, 'check 3rd catalan number'\nassert     catalan_number(3) == 6, 'check 4th catalan number'\nassert     catalan_number(4) == 14, 'check 5th catalan number'\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     catalan_number(0) == 1\nassert     catalan_number(1) == 1\nassert     catalan_number(2) == 2\nassert     catalan_number(3) == 5\nassert     catalan_number(4) == 14\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_adverbs('''This is a test''') == (), \"Check 1\"\nassert     find_adverbs('''This is a test''') == (2, 5), \"Check 2\"\nassert     find_adverbs('''This is a test''') == (), \"Check 3\"\nassert     find_adverbs('''This is a test''') == (), \"Check 4\"\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_adverbs('She is a good boy.') == ['good']\nassert     find_adverbs('He is a handsome boy.') == ['handi']\nassert     find_adverbs('He is a strong boy.') == ['strong']\nassert     find_adverbs('She is a good girl.') == ['good']\nassert     find_adverbs('She is a handsome girl.') == ['handi']\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nfind_adverbs('I like you. I am shy of you') == False\nfind_adverbs('i like you. i am shy of you') == True\nfind_adverbs('I like you. I am shy of you.') == True\nfind_adverbs('I like you. i am shy of you.') == False"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_adverbs('How can you still believe you have no knowledge of what happens next?') == (1,4)\nassert     find_adverbs('What am I doing? I am thinking!') == (3,6)\nassert     find_adverbs('This is an example sentence. This is another sentence. This is the third sentence.') == (2,5)\nassert     find_adverbs('There can be nothing as simple as the trivial thing. If not then this is not an example sentence. It is a sentence.') == (0,0)\nassert     find_adverbs('This is the very simple sentence') == (0,0)\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_adverbs(\"A short time ago, John called us to purchase a chair and put it in bed.\") == True\nassert     find_adverbs(\"A short time ago, John called us to purchase a chair and put it in bed.\") == False\nassert     find_adverbs(\"A short time ago, John called us to purchase a chair and put it in bed.\") == True\nassert     find_adverbs(\"A short time ago, John called us to purchase a chair and put it in bed.\") == False\nassert     find_adverbs(\"A short time ago, John called us to purchase a chair and put it in bed.\") == True\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_adverbs(\"This is a cat and the cat is so mean\") == {'a':2,'ly':2}\nassert     find_adverbs(\"This is a cat and the cat is so mean and so mean\") == {'a':2,'ly':3}\nassert     find_adverbs(\"This is a cat and the cat is so mean and so mean and so mean\") == {'a':2,'ly':4}\nassert     find_adverbs(\"This is a cat and the cat is so mean and so mean and so mean and so mean and so mean\") == {'a':2,'ly':4}\n\ndef find_nouns(text):\n    '''\n    Write a function to find the first noun ending withing and withing in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_adverbs('This sentence contains the ly and ly and ly') == (1, 3)\nassert     find_adverbs('This sentence contains ly and ly and ly') == (0, 3)\nassert     find_adverbs('This sentence contains ly and ly and ly') == (0, 3)\nassert     find_adverbs('This sentence contains ly and ly and ly') == (0, 3)\nassert     find_adverbs('This sentence contains ly and ly and ly') == (0, 3)\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     expensive_items([1,2,3,4,5,6,7],4) == [7,6,5,4]\nassert     expensive_items([5,4,3,2,1],4) == [5,4,3,2]\nassert     expensive_items([],4) == []\nassert     expensive_items([1,2,3,4,5,6,7,8,9,10,11],4) == [10,9,8,7]\n\ndef expensive_items2(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    pass\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     expensive_items([(1,2),(1,2),(1,2),(1,2)],[0,1,2,3]) == [1,1,1,1]\nassert     expensive_items([(1,2),(1,2),(1,2),(1,2)],[1,0,1,2]) == [1,1,1,1]\nassert     expensive_items([(1,2),(1,2),(1,2),(1,2)],[0,1,2,3,4]) == [1,1,1,1]\nassert     expensive_items([(1,2),(1,2),(1,2),(1,2)],[0,1,2,3]) == [1,1,1,1]\nassert     expensive_items([(1,2),(1,2),(1,2),(1,2)],[0,1,2,3,4]) == [1,1,1,1]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     expensive_items([{\"name\":\"abc\",\"price\":100},\n                            {\"name\":\"def\",\"price\":100},\n                            {\"name\":\"ghi\",\"price\":100},\n                            {\"name\":\"jkl\",\"price\":100},\n                            {\"name\":\"mno\",\"price\":100}], 3) == [{\"name\":\"ghi\",\"price\":100}, {\"name\":\"jkl\",\"price\":100}, {\"name\":\"mno\",\"price\":100}], \"Your result is wrong.\"\nassert     expensive_items([{\"name\":\"abc\",\"price\":100},\n                            {\"name\":\"def\",\"price\":100},\n                            {\"name\":\"ghi\",\"price\":100},\n                            {\"name\":\"jkl\",\"price\":100},\n                            {\"name\":\"mno\",\"price\":100}], 0) == [], \"Your result is wrong.\"\nassert     expensive_items([{\"name\":\"abc\",\"price\":100},\n                            {\"name\":\"def\",\"price\":100},\n                            {\"name\":\"ghi\",\"price\":100},\n                            {\"name\":\"jkl\",\"price\":100},\n                            {\"name\":\"mno\",\"price\":100}], 2) == [{\"name\":\"def\",\"price\":100}, {\"name\":\"ghi\",\"price\":100}], \"Your result is wrong.\"\nassert     expensive_items([{\"name\":\"abc\",\"price\":100},\n                            {\"name\":\"def\",\"price\":100},\n                            {\"name\":\"ghi\",\"price\":100},\n                            {\"name\":\"jkl\",\"price\":100},\n                            {\"name\":\"mno\",\"price\":100}], 1) == [{\"name\":\"def\",\"price\":100}, {\"name\":\"ghi\",\"price\":100}], \"Your result is wrong.\"\nassert     expensive_items([{\"name\":\"abc\",\"price\":100},\n                            {\"name\":\"def\",\"price\":100},\n                            {\"name\":\"ghi\",\"price\":100},\n                            {\"name\":\"jkl\",\"price\":100},\n                            {\"name\":\"mno\",\"price\":100}], 0) == [], \"Your result is wrong.\"\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    #print(expensive_items([1, 4, 2, 9, 0, 10, -1],1))\n    #[10]\n    #print(expensive_items([1, 4, 2, 9, 0, 10, -1],3))\n    #[10, 9, -1]\n    #print(expensive_items([1, 4, 2, 9, 0, 10, -1],4))\n    #[10, 9, -1, 1]\n    #print(expensive_items([1, 4, 2, 9, 0, 10, -1],5))\n    #[10, 9, -1, 1, 4]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     expensive_items([{'cost': 5, 'name': 'apple', 'color':'red'}, {'cost': 1, 'name': 'orange', 'color': 'orange'}, {'cost': 2, 'name': 'banana', 'color': 'yellow'}], 2) ==     [{'cost': 5, 'name': 'orange', 'color': 'orange'}, {'cost': 2, 'name': 'banana', 'color': 'yellow'}]\nassert expensive_items([{'cost': 5, 'name': 'apple', 'color':'red'}, {'cost': 1, 'name': 'orange', 'color': 'orange'}, {'cost': 2, 'name': 'banana', 'color': 'yellow'}], 1) ==     [{'cost': 5, 'name': 'apple', 'color':'red'}]\nassert expensive_items([{'cost': 5, 'name': 'apple', 'color':'red'}, {'cost': 1, 'name': 'orange', 'color': 'orange'}, {'cost': 2, 'name': 'banana', 'color': 'yellow'}], 0) ==     [{'cost': 5, 'name': 'apple', 'color':'red'}, {'cost': 1, 'name': 'orange', 'color': 'orange'}]\nassert expensive_items([{'cost': 5, 'name': 'apple', 'color':'red'}, {'cost': 1, 'name': 'orange', 'color': 'orange'}, {'cost': 2, 'name': 'banana', 'color': 'yellow'}], -1) ==     []\nassert expensive_items([{'cost': 5, 'name': 'apple', 'color':'red'}, {'cost': 1, 'name': 'orange', 'color': 'orange'}, {'cost': 2, 'name': 'banana', 'color': 'yellow'}], 2) ==     [{'cost': 1, 'name': 'orange', 'color': 'orange'}]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     expensive_items([(\"Toyota\", 2000), (\"Toyota\", 5500), (\"Ford\", 3200), (\"Toyota\", 8200), (\"Lexus\", 3000), (\"Lexus\", 12000)], 2) == ['Toyota', 'Lexus'], \"Test Failed\"\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     expensive_items([(\"a\", 4), (\"b\", 3), (\"c\", 2)], 0) == []\nassert     expensive_items([(\"a\", 4), (\"b\", 3), (\"c\", 2)], 1) == [(\"c\", 2)]\nassert     expensive_items([(\"a\", 4), (\"b\", 3), (\"c\", 2)], 2) == [(\"c\", 2)]\nassert     expensive_items([(\"a\", 4), (\"b\", 3), (\"c\", 2)], 3) == [(\"a\", 4), (\"c\", 2)]\nassert     expensive_items([(\"a\", 4), (\"b\", 3), (\"c\", 2)], 4) == [(\"a\", 4), (\"b\", 3), (\"c\", 2)]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     expensive_items([('apple', 1234), ('banana', 5678), ('grapes', 3424)], 3) == 'banana'\nassert     expensive_items([('apple', 5678), ('banana', 5678), ('grapes', 5678)], 3) == 'apple'\nassert     expensive_items([('apple', 5678), ('banana', 5678), ('grapes', 5678)], 2) == 'banana'\nassert     expensive_items([('apple', 5678), ('banana', 5678), ('grapes', 5678)], 1) == 'apple'\nassert     expensive_items([('apple', 5678), ('banana', 5678), ('grapes', 5678)], 0) == 'grapes'\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nexpensive_items(items,2) == ['zebra','apple']\nassert expensive_items(items,1) == ['apple']\n\ndef expensive_items2(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    pass\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef spilt_arr(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    pass\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     split_Arr([1,2,3,4,5],3) == [[1,2,3],[4,5]]\nassert     split_Arr([1,2,3,4,5],2) == [[1,2],[3,4],[5]]\nassert     split_Arr([1,2,3,4,5],0) == [[1,2,3,4,5]]\nassert     split_Arr([1,2,3,4,5],4) == [[1,2],[3,4,5]]\nassert     split_Arr([1,2,3,4,5],5) == [[1,2],[3,4,5]]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nsplit_Arr([1,2,3,4,5,6], 2) == [(1,2), (3,4), (5,6)]\nassert split_Arr([1,2,3,4,5,6], 1) == [(1,2), (3,4), (5,6)]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     split_Arr([1,2,3,4,5],3) == [[1,2],[3,4],[5]]\nassert     split_Arr([1,2,3,4,5],4) == [[1,2,3],[4,5]]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     split_Arr([1,2,3], 2) == [[1,2],[3]]\nassert     split_Arr([1,2,3], 0) == [[]]\nassert     split_Arr([1,2,3], 1) == [[1],[2],[3]]\nassert     split_Arr([1,2,3], 3) == [[1],[2],[3]]\nassert     split_Arr([1,2,3,4,5], 2) == [[1,2],[3,4],[5]]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == '__main__':\n    l = [1, 2, 3, 4, 5]\n    n = 2\n    assert split_Arr(l, n) == [[1, 2], 3, 4, 5]\n    assert split_Arr(l, 3) == [[1, 2, 3], 4, 5]\n    assert split_Arr(l, 2) == [[1, 2], 3, 4, 5]\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     list_tuple([1, 2, 3]) == (1, 2, 3), \\\n    'List_tuple function is not working.'\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     list_tuple([1,2,3,4]) == (1,2,3,4), \"Wrong!\"\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert list_tuple([]) == ()\nassert list_tuple([1,2,3]) == (1,2,3)\nassert list_tuple([1,2,3,4]) == (1,2,3,4)\nassert list_tuple([1,2,3,4,5]) == (1,2,3,4,5)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nlist_tuple([1,2,3,4,5]) == (1,2,3,4,5)\nassert \nlist_tuple([]) == ()\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     list_tuple([1,2,3]) == (1,2,3), \"Wrong!\"\nassert     list_tuple([1,2]) == (1,2), \"Wrong!\"\nassert     list_tuple([1,2,3,4]) == (1,2,3,4), \"Wrong!\"\nassert     list_tuple([1,2,3,4]) == (1,2,3,4), \"Wrong!\"\nassert     list_tuple([1,2,3,4,5]) == (1,2,3,4,5), \"Wrong!\"\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     list_tuple([1,2,3]) == (1,2,3)\nassert     list_tuple([]) == ()"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     list_tuple([]) == (), \\\n        'Wrong result for list_tuple([]): it should be {} but got {}'\\\n        .format([],())\nassert     list_tuple([2]) == (2,), \\\n        'Wrong result for list_tuple([2]): it should be (2,) but got {}'\\\n        .format([2],())\nassert     list_tuple([1,2,3,4]) == (1,2,3,4), \\\n        'Wrong result for list_tuple([1,2,3,4]): it should be (1,2,3,4) but got {}'\\\n        .format(list_tuple([1,2,3,4]))\nassert     list_tuple([1,2,3,4]) == (1,2,3,4), \\\n        'Wrong result for list_tuple([1,2,3,4]): it should be (1,2,3,4) but got {}'\\\n        .format([1,2,3,4])\n\nprint('Testing: list_tuple')\nprint('- list_tuple([])')\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     list_tuple([1, 2, 3, 4, 5, 6]) == (1, 2, 3, 4, 5, 6)\n\nassert     list_tuple([1, 2, 3]) == (1, 2, 3)\n\nassert     list_tuple(['hello', 'world']) == ('hello', 'world')\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert list_tuple([]) == ()\nassert list_tuple([1]) == (1,)\nassert list_tuple([1,2,3]) == (1,2,3)\nassert list_tuple([1,2,3,4]) == (1,2,3,4)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     list_tuple([1, 2, 3]) == (1, 2, 3), 'Wrong'\nassert     list_tuple([]) == (), 'Wrong'\nassert     list_tuple(['a', 'b', 'c']) == ('a', 'b', 'c'), 'Wrong'\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     big_diff([4, 7, 10, 11, -2]) == 12\nassert     big_diff([5, 2, 3, 7]) == 7\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     big_diff([5,6,7,8,2,2,2]) == 3\nassert big_diff([3,6,7,8,2,2,2]) == 3\nassert big_diff([3,2,2,2]) == 1"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nbig_diff([-3, -5, -10, -2, 4, 5, 5, 5, 5]) == 2\n\ndef big_diff2(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     big_diff([0,2,1,4,6,5]) == 8, 'big_diff should return 8, as the largest number and smallest number differ by 8'\nprint('correct!')\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert big_diff([5, 2, 2, 8, 1]) == 6, \"Wrong Answer\"\nassert big_diff([5, 1, 5, 2, 2, 8, 1]) == 7, \"Wrong Answer\"\nassert big_diff([1, 1, 1, 1, 1]) == 0, \"Wrong Answer\"\nassert big_diff([-5, -10, -3, -3, -6]) == -7, \"Wrong Answer\"\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     big_diff([-1, 4, -6, 5, 2, -5, 6]) == 7\nassert     big_diff([-1, -2, 4, -6, 5, 2, -5, 6]) == 1\nassert     big_diff([]) == 0\nassert     big_diff([-2, -5, -3]) == 3\nprint (\"the test cases passed\")"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     big_diff([4,3,7,9,5]) == 1, \"Error\"\nassert     big_diff([1,2,3,4,5]) == 0, \"Error\"\n\ndef has_n_diff(nums, n):\n    '''\n    Write a python function to determine whether given list contains sublist with n number of distinct numbers.\n    '''\n    pass\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     big_diff([1, 2, 3, 4]) == 3\nassert     big_diff([1, 21, 3, 4]) == 2\nassert     big_diff([1, 2, 3, 100]) == 99\nassert     big_diff([1]) == 1\nassert     big_diff([]) == 0\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     perfect_squares(1, 4) == [1, 2, 4]\nassert     perfect_squares(4, 9) == [4, 4]\nassert     perfect_squares(16, 36) == [16, 4]\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     perfect_squares(5, 7) == False\nassert     perfect_squares(5, 5) == True\nassert     perfect_squares(9, 1) == False\nassert     perfect_squares(9, 9) == True\n\nprint(\"\\nThe function perfect_squares is checked correctly\\n\")\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     perfect_squares(1, 3) == [1, 4], \"Wrong output\"\nassert     perfect_squares(7, 10) == [7, 14], \"Wrong output\"\nassert     perfect_squares(100, 5) == [1, 4, 5, 10], \"Wrong output\"\nprint(\"Congratulations! Your perfect_squares function is correct.\")\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     perfect_squares(0, 0) == [], \\\n        'ERROR: perfect_squares(0, 0) should return an empty list'\nassert     perfect_squares(2, 3) == [], \\\n        'ERROR: perfect_squares(2, 3) should return an empty list'\nassert     perfect_squares(1, 1) == [1], \\\n        'ERROR: perfect_squares(1, 1) should return a list with a single element'\nassert     perfect_squares(4, 4) == [4], \\\n        'ERROR: perfect_squares(4, 4) should return a list with a single element'\nassert     perfect_squares(10, 23) == [10], \\\n        'ERROR: perfect_squares(10, 23) should return a list with a single element'\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     perfect_squares(4, 9) == [4, 16]\nassert     perfect_squares(1, 5) == [1, 9]\nassert     perfect_squares(1000, 2000) == [100, 300]\n\n'''\nfrom math import sqrt, floor\n\ndef perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    n = b-a+1\n    x = floor(sqrt(n))\n    y = x+1\n    return a+x**2, a+y**2\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     perfect_squares(1, 1) == 1\nassert perfect_squares(1, 4) == 1\nassert perfect_squares(4, 1) == 4\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     perfect_squares(1, 1) == [[1, 1]]\nassert     perfect_squares(3, 5) == [[3, 4]]\nassert     perfect_squares(6, 11) == [[4, 9]]\nassert     perfect_squares(6, 22) == [[4, 11]]\nassert     perfect_squares(7, 30) == [[7, 16]]\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     perfect_squares(1, 3) == [1, 4, 9]\nassert     perfect_squares(0, 3) == [0, 1, 4]\nassert     perfect_squares(2, 3) == [2, 4]\nassert     perfect_squares(3, 5) == [3, 4, 5]\nassert     perfect_squares(11, 13) == [11, 12, 13]\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     polar_rect(1,1) == (1, 1), \"Polar to Rectangle conversion error\"\nassert     polar_rect(0,1) == (1, 0), \"Polar to Rectangle conversion error\"\nassert     polar_rect(1,0) == (0, 1), \"Polar to Rectangle conversion error\"\nassert     polar_rect(1,2) == (1, 2), \"Polar to Rectangle conversion error\"\nassert     polar_rect(3,1) == (3, 1), \"Polar to Rectangle conversion error\"\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert polar_rect(1, 1) == (1, 1)\nassert polar_rect(0, 1) == (0, 1)\nassert polar_rect(-1, 1) == (-1, 1)\nassert polar_rect(0, 0) == (0, 0)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     polar_rect(0.0, 0.0) == (0.0, 0.0)\nassert     polar_rect(1.0, 2.0) == (1.0, 2.0)\nassert     polar_rect(1.0, 2.0) == (0.5, 1.0)\nassert     polar_rect(1.0, 2.0) == (1.0, 1.0)\nassert     polar_rect(1.0, 2.0) == (0.5, 0.5)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     polar_rect(1,1) == (0,0), \"Wrong answer: polar_rect(1,1)\"\nassert     polar_rect(-1,1) == (1,0), \"Wrong answer: polar_rect(-1,1)\"\nassert     polar_rect(-1,2) == (1,1), \"Wrong answer: polar_rect(-1,2)\"\nassert     polar_rect(0,2) == (0,2), \"Wrong answer: polar_rect(0,2)\"\nassert     polar_rect(0,-2) == (0,-2), \"Wrong answer: polar_rect(0,-2)\"\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     polar_rect(1,1) == (1,1)\nassert     polar_rect(1,1.8) == (1.8,1)\nassert     polar_rect(1.1,1.9) == (1.9,1.1)\nassert     polar_rect(1.1,2.1) == (1.9,2.1)\nassert     polar_rect(1.1,3.1) == (2.1,1.9)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     polar_rect(0,0) == (0,0)\nassert     polar_rect(0,1) == (0,1)\nassert     polar_rect(1,1) == (1,1)\nassert     polar_rect(1,0) == (1,0)\nassert     polar_rect(-1,0) == (-1,0)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef draw_circle(r):\n    '''\n    Draw a circle with a given radius.\n    '''\n    pass\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint('---------- Problem 1 -----------')\n\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    pass\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     polar_rect(2,3) == (0, 3)\nassert    polar_rect(2,3) == (0,3)\n\ndef rect_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    pass\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     polar_rect(0,1) == (0,1)\nassert     polar_rect(1,0) == (1,0)\nassert     polar_rect(3,4) == (0.267,3)\nassert     polar_rect(-1,-2) == (-1,2)\nassert     polar_rect(0,0) == (0,0)\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     swap_List(['G', 'E', 'E', 'K', 'H', 'O', 'L', 'L', 'A', 'H']) == ['H', 'O', 'L', 'L', 'A', 'H', 'G', 'E', 'E', 'K']\n\n'''\nWrite a python function to swap the adjacent elements in a list.\n'''"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     swap_List([1, 2, 3, 4]) ==[2, 1, 4, 3], \"First\"\nassert swap_List([1, 2, 3, 4]) ==[4, 3, 2, 1], \"Second\"\nassert swap_List([1, 2, 3, 4]) ==[4, 3, 2, 1], \"Third\"\nassert swap_List([1, 2, 3, 4]) ==[2, 1, 4, 3], \"Fourth\""
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    swap_List([1, 2, 3, 4, 5]) == [5, 1, 2, 3, 4]\n    swap_List([1, 2, 3, 4, 5, 6]) == [6, 1, 2, 3, 4, 5]\n    swap_List([1, 2, 3, 4, 5, 6, 7]) == [6, 7, 1, 2, 3, 4, 5]\n    swap_List([1, 2, 3, 4, 5, 6, 7, 8]) == [7, 8, 1, 2, 3, 4, 5, 6]\n    swap_List([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [7, 8, 9, 1, 2, 3, 4, 5, 6]\n    swap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [9, 8, 7, 2, 3, 4, 5, 6, 1, 10]\n    swap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    swap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    swap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == [13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    swap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == [14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    swap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    swap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == [16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    swap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == [17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    swap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) == [18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    swap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == [19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    swap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    swap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) == [21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    swap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]) == [22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    swap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]) == [23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    swap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]) == [24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    swap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    swap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]) == [26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    swap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]) == [27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    swap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]) == [28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    swap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]) == [29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n    swap_List([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == [30, 29"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nswap_List([2,5,6,3,1]) == [1,2,3,5,6], 'Swap Failure'\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nswap_List([1, 2, 3, 4, 5, 6, 7, 8]) == [5, 6, 7, 8, 1, 2, 3, 4], \"Wrong Output\"\n\nprint(\"PASSED\")\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    pass\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     binomial_Coeff(5,2) == 15\nassert     binomial_Coeff(10,5) == 55\nassert     binomial_Coeff(5,6) == 34\nassert     binomial_Coeff(6,5) == 32\nassert     binomial_Coeff(100,35) == 37281\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     binomial_Coeff(5,3)== 6, \"result incorrect\"\nassert     binomial_Coeff(8,8)== 6, \"result incorrect\"\nassert     binomial_Coeff(1,5)== 0, \"result incorrect\"\nassert     binomial_Coeff(8,1)== 0, \"result incorrect\"\nassert     binomial_Coeff(0,2)== 0, \"result incorrect\"\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     binomial_Coeff(5,4)==24\nassert    binomial_Coeff(5,5)==3120\nassert binomial_Coeff(15,4)==44554"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(binomial_Coeff(5,3)) \nprint(binomial_Coeff(10,10)) \nprint(binomial_Coeff(3,5)) \n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     binomial_Coeff(3, 2) == 8, 'incorrect output'\nassert     binomial_Coeff(4, 3) == 24, 'incorrect output'\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     binomial_Coeff(3,4) == 4, \"3,4\"\nassert     binomial_Coeff(0,0) == 0, \"0,0\"\nassert     binomial_Coeff(1,0) == 1, \"1,0\"\nassert     binomial_Coeff(0,1) == 0, \"0,1\"\nassert     binomial_Coeff(3,1) == 6, \"3,1\"\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     binomial_Coeff(8, 5) == 20.0, \"Wrong output\"\nassert     binomial_Coeff(6, 6) == 2.0, \"Wrong output\"\nassert     binomial_Coeff(12, 5) == 12.0, \"Wrong output\"\nassert     binomial_Coeff(8, 0) == 1.0, \"Wrong output\"\nassert     binomial_Coeff(4, 5) == 4.0, \"Wrong output\"\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     removezero_ip('0.0.0.0') == '0.0.0.0'\nassert     removezero_ip('0.0.0.0.0') == '0.0.0.0'\nassert     removezero_ip('0.0.0.0.0.0') == '0.0.0.0.0'\nassert     removezero_ip('0.0.0.0.0.0.0.0') == '0.0.0.0.0.0.0.0'\nassert     removezero_ip('0.0.0.0.0.0.0.0.0.0.0.0.0') == '0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef parse_line(line):\n    '''\n    Parse a line and return the hostname and a list of ips\n    '''\n    pass\n\ndef print_res(res):\n    '''\n    Print a list of hosts, their ips and how many ips they have\n    '''\n    pass\n\ndef has_consecutive_ips(line, start):\n    '''\n    Returns true if the input has consecutive ips, \n    it could be false, but it could also be the case\n    if you don't have any consecutive ip.\n    '''\n    pass\n\ndef main():\n    # Read each line of the file\n    # For each line, we should:\n    #    parse the line\n    #    if the line is a host name,\n    #    append it to the hosts list\n    #    if the line is a ip address,\n    #    append it to the ips list\n    #    else\n    #     return error\n    # for each host in the list\n    #    check if the ips have consecutive ips\n    #    if they have consecutive ips,\n    #    remove them\n    #    else\n    #     return error\n    # for each ip in the list,\n    #    if the host list contains a host with the same ip\n    #     return error\n    # for each ip in the list,\n    #    if there is no host with the same ip in the list\n    #     return error\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     removezero_ip('') == ''\nassert     removezero_ip('10.10.1.1') == '10.10.1.1'\nassert     removezero_ip('101.0.0.0') == '101.0.0.0'\nassert     removezero_ip('0.0.0.0') == '0.0.0.0'\nassert     removezero_ip('0.0.0.0.0.0.0.0') == '0.0.0.0.0.0.0.0'\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    removezero_ip(ip = '0.0.0.0') == '0.0.0.0'\n    removezero_ip(ip = '0.0.0.0.1') == '0.0.0.0.1'\n    removezero_ip(ip = '0.0.0.0.1.2') == '0.0.0.0.1.2'\n    removezero_ip(ip = '0.0.0.0.1.2.3') == '0.0.0.0.1.2.3'\n    removezero_ip(ip = '0.0.0.0.1.2.3.4') == '0.0.0.0.1.2.3.4'\n    removezero_ip(ip = '1.2.3.4') == '1.2.3.4'\n    removezero_ip(ip = '1.2.3.4.5') == '1.2.3.4.5'\n    removezero_ip(ip = '255.255.255.255') == '255.255.255.255'\n    removezero_ip(ip = '0.0.0.0.1.2.3.4.5') == '0.0.0.0.1.2.3.4.5'\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     removezero_ip(\"1.2.3\") == \"1.2.3\"\nassert     removezero_ip(\"1.2.3.0\") == \"1.2.3.0\"\nassert     removezero_ip(\"1.2.3.00\") == \"1.2.3.00\"\nassert     removezero_ip(\"1.2.3.000\") == \"1.2.3.000\"\nassert     removezero_ip(\"1.2.3.0000\") == \"1.2.3.0000\"\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     removezero_ip(\"0.1.2.3\") == \"0.1.2.3\", \"incorrect\"\nassert     removezero_ip(\"1.2.3.4.5\") == \"1.2.3.4.5\", \"incorrect\"\nassert     removezero_ip(\"0000.0000.0000.0000\") == \"0000.0000.0000.0000\", \"incorrect\"\nassert     removezero_ip(\"0.1.2.3\") == \"0.1.2.3\", \"incorrect\"\nassert     removezero_ip(\"0.0.0.0\") == \"0.0.0.0\", \"incorrect\"\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef removezero_ip_test():\n    assert removezero_ip(\"192.0.2.250\") == \"192.250.0.2\"\n    assert removezero_ip(\"192.00.2.250\") == \"192.250.0.2\"\n    assert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n    "
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     removezero_ip('8.8.8.8') == '8.8.8.8'\nassert     removezero_ip('1.1.1.0') == '1.1.1.0'\nassert     removezero_ip('1.1.1.1') == '1.1.1.1'\nassert     removezero_ip('1.1.1.0.1') == '1.1.1.0.1'\nassert     removezero_ip('0.1.1.1') == '0.1.1.1'\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nip_list = [\"0.1.1.1\", \"0.1.1.0\", \"0.1.1.255\", \"0.1.1.10000\", \"0.1.1.0.0\", \"0.1.1.0.255\", \"0.1.1.0.256\"]\ncorrect_output = [\"0.1.1.1\", \"0.1.1.0\", \"0.1.1.255\", \"0.1.1.10000\", \"0.1.1.0.0\", \"0.1.1.0.255\", \"0.1.1.0.256\"]\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ndiff_even_odd([4,2,5,7,8,5,2,3]) == 3\ndiff_even_odd([1,2,3,4,5,6,7,8,9,10]) == 10\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3\nassert     diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == 6\nassert     diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 2\nassert     diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 4\n\ndef count_odd(list1):\n    '''\n    Write a function to count number of odd numbers in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     diff_even_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,92"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     diff_even_odd([3, 5, 6, 8, 10, 11]) == 6\nassert diff_even_odd([1, 2, 4, 5, 6]) == 0\nassert diff_even_odd([1, 3, 5, 7, 9, 11]) == 3\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    diff_even_odd([1, 2, 3, 4, 5]) == 1\n    diff_even_odd([1, 2, 3, 4, 5, 6]) == 1\n    diff_even_odd([1, 2, 3, 4, 5, 6, 7]) == 1\n    diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8]) == 2\n    diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 3\n    diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 4\n    diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 5\n    diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 6\n    diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 7\n    diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 8\n    diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 9\n    diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == 10\n    diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == 11\n    diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) == 12\n    diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == 13\n    diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 14\n    diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) == 15\n    diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]) == 16\n    diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]) == 17\n    diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]) == 18\n    diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 19\n    diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]) == 20\n    diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]) == 21\n    diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]) == 22\n    diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]) == 23\n    diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 24\n    diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]) == 25\n    diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]) == 26\n    diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]) == 27\n    diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34]) == 28\n    diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]) == 29\n    diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36]) == 30\n    diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37]) == 31\n    diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38]) == 32\n    diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39]) == 33\n    diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]) == 34\n    diff_even_odd([1"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     diff_even_odd([3, 4, 2, 5, 8]) == 3, 'First odd number not found'\nassert     diff_even_odd([1, 3, 2, 5, 8]) == 6, 'First even number not found'\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     diff_even_odd([10,20,30,40,50,60]) == 30\nassert     diff_even_odd([40,50,60,10,20]) == 10\nassert     diff_even_odd([10,20,30,40,50]) == 30\nassert     diff_even_odd([5,2,1,1,2,2,2,2,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5]) == 0\nassert     diff_even_odd([1,2,3,4,5]) == 0\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     min_Swaps('1111111', '1001110') == 3\nassert     min_Swaps('0010111', '0010011') == 2\nassert     min_Swaps('11010111', '01110100') == 4\nassert     min_Swaps('1011011', '11100011') == 5\nassert     min_Swaps('11110111', '10010001') == 3\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     min_Swaps('1110100','1011011') == 0\nassert     min_Swaps('11001100','11011111') == 5\nassert     min_Swaps('11011111','11001100') == 4\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(min_Swaps(\"0101\",\"1011\"))\nprint(min_Swaps(\"10\",\"01\"))\nprint(min_Swaps(\"001\",\"000\"))\nprint(min_Swaps(\"0110\",\"1000\"))\nprint(min_Swaps(\"101011010\",\"10101101\"))\nprint(min_Swaps(\"11\",\"00\"))\nprint(min_Swaps(\"0\",\"10\"))\nprint(min_Swaps(\"10101101\",\"0110\"))\nprint(min_Swaps(\"0110\",\"0000\"))\n\n'''\nOutput\n\n1\n1\n1\n0\n1\n1\n1\n1\n'''"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     min_Swaps(\"01\",\"00\") == 1\nassert min_Swaps(\"100\",\"100\") == 0\nassert min_Swaps(\"100\",\"101\") == 1\nassert min_Swaps(\"1001\",\"0101\") == 3\nassert min_Swaps(\"01010101\",\"100100101\") == 3"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     min_Swaps('010110','111010') == 3\nassert     min_Swaps('10101010','01101000') == 6\nassert     min_Swaps('10101010','11111001') == 4\nassert     min_Swaps('0010101010','11111001') == 10\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef tuple_repeat(tuple_list):\n    '''\n    Write a function to find the largest number of times a given tuple appears in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     (tuple_size(('a', 'b')) == 2), \"The result is wrong: {}\".format(tuple_size(('a', 'b')))\nassert     (tuple_size(('ab', 'cd')) == 4), \"The result is wrong: {}\".format(tuple_size(('ab', 'cd')))\nassert     (tuple_size(('a', 'b', 'c', 'd')) == 8), \"The result is wrong: {}\".format(tuple_size(('a', 'b', 'c', 'd')))\nassert     (tuple_size(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')) == 24), \"The result is wrong: {}\".format(tuple_size(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')))\nassert     (tuple_size(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l')) == 64), \"The result is wrong: {}\".format(tuple_size(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l')))\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef group_sizes(l,n):\n    '''\n    Write a function to find the groups of n elements of the given list.\n    '''\n    pass\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef tuple_pack(tuple_list):\n    '''\n    Write a function to convert a list of tuples into a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert tuple_size([]) == 0, \"Your function should return the size in bytes of the given tuple.\"\nassert tuple_size([(1, 2, 3), (4, 5), (6, 7, 8)]) == 12, \"Your function should return the size in bytes of the given tuple.\"\nassert tuple_size((1, 2, 3, 4)) == 4, \"Your function should return the size in bytes of the given tuple.\"\n\n\ndef tuple_same_size(tuple1, tuple2):\n    '''\n    Write a function to determine whether the given two tuples are of the same size.\n    '''\n    pass\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tuple_size((3, 1, 4)) == 3, 'incorrect tuple_size'\nassert tuple_size((3, 1, 4, 5, 6)) == 6, 'incorrect tuple_size'\nassert tuple_size((1, 2, 3, 4, 5)) == 8, 'incorrect tuple_size'\nassert tuple_size((1, 2, 3, 4, 5, 1, 2, 3, 4, 5)) == 14, 'incorrect tuple_size'\n\ndef tuple_add(tuple1, tuple2):\n    '''\n    Write a function to add a tuple to another tuple.\n    '''\n    pass\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tuple_size(()) == 0, \"Empty tuple must return 0\"\nassert     tuple_size((1,)) == 1, \"Tuple of length 1 must return 1\"\nassert     tuple_size((1, 2)) == 2, \"Tuple of length 2 must return 2\"\nassert     tuple_size((1, 2, 3)) == 3, \"Tuple of length 3 must return 3\"\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tuple_size((3,4,5,6,7,8)) == 24\nassert tuple_size((3,4)) == 4\nassert tuple_size(('a','b','c')) == 5\nassert tuple_size((1,2,3)) == 0\nassert tuple_size(('a','b','c',(1,2,3),4)) == 5\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tuple_size((1,2)) == 2 \nassert tuple_size((1,'a',3)) == 4 \nassert tuple_size(('a','b',1)) == 3 \nassert tuple_size(('a','b','c','d','e','f','g','h','i','j')) == 32\nprint ('tuple_size: pass')\n\ndef tuple_sum(tuple_list):\n    '''\n    Write a function to find the sum of all the tuple elements.\n    '''\n    pass\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tuple_size(() ) == 0, \\\n    \"tuple_size('()') should return 0\"\nassert     tuple_size((1,)) == 1, \\\n    \"tuple_size((1,)) should return 1\"\nassert     tuple_size((1,2,3)) == 3, \\\n    \"tuple_size((1,2,3)) should return 3\"\nassert     tuple_size((1,2,3,4)) == 4, \\\n    \"tuple_size((1,2,3,4)) should return 4\"\nassert     tuple_size((1,2,3,4,5,6,7)) == 7, \\\n    \"tuple_size((1,2,3,4,5,6,7)) should return 7\"\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef test_find_kth():\n    arr1 = [1, 2, 3]\n    arr2 = [4, 5, 6]\n    assert find_kth(arr1, arr2, 3) == 4\n    assert find_kth(arr1, arr2, 4) == 5\n    assert find_kth(arr1, arr2, 6) == 5\n    "
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert\nassert\nassert\nassert\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nfind_kth([1, 3, 5, 7, 9], [2, 4, 6, 8, 10], 2) == 5\nfind_kth([1, 3, 5, 7, 9], [2, 4, 6, 8, 10], 4) == 7\nfind_kth([1, 3, 5, 7, 9], [2, 4, 6, 8, 10], 5) == 9\nfind_kth([1, 3, 5, 7, 9], [2, 4, 6, 8, 10], 0) == 2\nfind_kth([1, 3, 5, 7, 9], [2, 4, 6, 8, 10], 7) == 5\nfind_kth([1, 3, 5, 7, 9], [2, 4, 6, 8, 10], 8) == 8\nfind_kth([1, 3, 5, 7, 9], [2, 4, 6, 8, 10], 9) == 9\nfind_kth([1, 3, 5, 7, 9], [2, 4, 6, 8, 10], 10) == 10\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nfind_kth([1, 3, 6, 8], [2, 4, 5, 7], 3) == 6\n\nassert \nfind_kth([1, 3, 6, 8], [2, 4, 5, 7], 2) == 4\n\nassert \nfind_kth([1, 3, 6, 8], [2, 4, 5, 7], 1) == 3\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\narr1 = [1, 2, 3, 4, 5, 6, 7, 8]\narr2 = [5, 6, 7, 8, 9, 10]\n\nk = 5\n\nprint(find_kth(arr1, arr2, k))"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_kth([1, 2, 3], [4, 5, 6], 2) == 3\nassert     find_kth([1, 2, 3], [4, 5, 6], 1) == 1\nassert     find_kth([1, 2, 3], [4, 5, 6], 0) == 4\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_kth([1, 2, 3, 4], [5, 6, 7, 8], 2) == 5\nassert     find_kth([2, 5, 8], [1, 3, 4, 5], 3) == 3\nassert     find_kth([1, 2, 3, 4], [5, 6, 7, 8], 7) == 7\n\nprint('all test cases are passed!')\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_kth([1, 2, 3], [4, 5, 6], 3) == 2\nassert     find_kth([1, 3, 5], [2, 4, 6], 1) == 3\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     armstrong_number(153) == True, \"Result should be true\"\nassert     armstrong_number(130) == False, \"Result should be false\"\n\nprint(\"\\n *** SUCCESSFUL TEST ***\")\n\n\nprint(\"\\n *** RUNNING TESTS ***\")"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     armstrong_number(153) == True, 'is not armstrong number'\nassert     armstrong_number(18) == False, 'is armstrong number'\nassert     armstrong_number(1234) == False, 'is not armstrong number'\nassert     armstrong_number(2453) == True, 'is armstrong number'\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    armstrong_number(153)==True\n    armstrong_number(9)==True\n    armstrong_number(371)==True\n    armstrong_number(8936)==False\n    armstrong_number(893637)==False\n    armstrong_number(11)==False\n    armstrong_number(1000)==False\n    armstrong_number(27)==False\n    armstrong_number(60)==False\n    armstrong_number(123)==False\n    armstrong_number(12)==False\n    armstrong_number(8)==False\n    armstrong_number(3)==False\n    armstrong_number(2)==False\n    armstrong_number(13)==False\n    armstrong_number(9)==False\n    armstrong_number(10)==False\n    armstrong_number(11)==False\n    armstrong_number(15)==False\n    armstrong_number(123)==False\n    armstrong_number(23)==False\n    armstrong_number(233)==False\n    armstrong_number(2334)==False\n    armstrong_number(1234)==False\n    armstrong_number(2345)==False\n    armstrong_number(1234)==False\n    armstrong_number(23456789)==False\n    armstrong_number(234567899)==False\n    armstrong_number(2345678999)==False\n    armstrong_number(100)==False\n    armstrong_number(10000)==False\n    armstrong_number(12345)==False\n    armstrong_number(1234)==False\n    armstrong_number(1234.56)==False\n    armstrong_number(0)==False\n    armstrong_number(-1)==False\n    armstrong_number(-2)==False\n    armstrong_number(-3)==False\n    armstrong_number(-4)==False\n    armstrong_number(-5)==False\n    armstrong_number(-6)==False\n    armstrong_number(-7)==False\n    armstrong_number(-8)==False\n    armstrong_number(-9)==False\n    armstrong_number(-10)==False\n    armstrong_number(-11)==False\n    armstrong_number(-12)==False\n    armstrong_number(-13)==False\n    armstrong_number(-14)==False\n    armstrong_number(-15)==False\n    armstrong_number(-16)==False\n    armstrong_number(-17)==False\n    armstrong_number(-18)==False\n    armstrong_number(-19)==False\n    armstrong_number(-20)==False\n    armstrong_number(-21)==False\n    armstrong_number(-22)==False\n    armstrong_number(-23)==False\n    armstrong_number(-24)==False\n    armstrong_number(-25)==False\n    armstrong_number(-26)==False\n    armstrong_number(-27)==False\n    armstrong_number(-28)==False\n    armstrong_number(-29)==False\n    armstrong_number(-30)==False\n    armstrong_number(-31)==False\n    armstrong_number(-32)==False\n    armstrong_number(-33)==False\n    armstrong_number(-34)==False\n    armstrong_number(-35)==False\n    armstrong_number(-36)==False\n    armstrong_number(-37)==False\n    armstrong_number(-38)==False\n    armstrong_number(-39)==False\n    armstrong_number(-40)==False\n    armstrong_number(-41)==False\n    armstrong_number(-42)==False\n    armstrong_number(-43)==False\n    armstrong_number(-44)==False\n    armstrong_number(-45)==False\n    armstrong_number(-46)==False\n    armstrong_number(-47)==False\n    armstrong_number(-48)==False\n    armstrong_number(-49)==False\n    armstrong_number(-50)==False\n    armstrong_number(-51)==False\n    armstrong_number(-52)==False\n    armstrong_number(-53)==False\n    armstrong_number(-54)==False\n    armstrong_number(-55)==False\n    armstrong_number(-56)==False\n    armstrong_number(-57)==False\n    armstrong_number(-58)==False\n    armstrong_number(-59)==False\n    armstrong_number(-60)==False\n    armstrong_number(-61)==False\n    armstrong_number(-62)==False\n    armstrong_number(-63)==False\n    armstrong_number(-64)==False\n    armstrong_number(-65)==False\n    armstrong_number(-66)==False\n    armstrong_number(-67)==False\n    armstrong_number(-68)==False\n    armstrong_number(-69)==False\n    armstrong_number(-70)==False\n    armstrong_number(-71)==False\n    armstrong_number(-72)==False\n    armstrong_number(-73)==False\n    armstrong_number(-74)==False\n    armstrong_number(-75)==False\n    armstrong_number(-76)==False\n    armstrong_number(-77)==False\n    armstrong_number(-78)==False\n    armstrong_number(-79)==False\n    armstrong_number(-80)==False\n    armstrong_number(-81)==False\n    armstrong_number(-82)==False\n    armstrong_number(-83)==False\n    armstrong_number(-84)==False\n    armstrong_number(-85)==False\n    armstrong_number(-86)==False\n    armstrong_number(-87)==False\n    armstrong_number(-88)==False\n    armstrong_number(-89)==False\n    armstrong_number(-90)==False\n    armstrong_number(-91)==False\n    armstrong_number(-92)==False\n    armstrong_number(-93)==False\n    armstrong_number(-94)==False\n    armstrong_number(-95)==False\n    armstrong_number(-96)==False\n    armstrong_number(-97)==False\n    armstrong_number(-98)==False\n    armstrong_number(-99)==False\n    armstrong_number(-100)==False\n    armstrong_number(-101)==False\n    armstrong_number(-102)==False\n    armstrong_number(-103)==False\n    armstrong_number(-104)==False\n    armstrong_number(-105)==False\n    armstrong_number(-106)==False\n    armstrong_number(-107)==False\n    armstrong_number(-108)==False\n    armstrong_number(-109)==False\n    armstrong_number(-110)==False\n    armstrong_number(-111)==False\n    armstrong_number(-112)==False\n    armstrong_number(-113)==False\n    armstrong_number(-114)==False\n    armstrong_number(-115)==False\n    armstrong_number(-116)==False\n    armstrong_number(-117)==False\n    armstrong_number(-118)==False\n    armstrong_number(-119)==False\n    armstrong_number(-120)==False\n    armstrong_number(-121)==False\n    armstrong_number(-122)==False\n    armstrong_number(-123)==False\n    armstrong_number(-124)==False\n    armstrong_number(-125)==False\n    armstrong_number(-126)==False\n    armstrong_number(-127)==False\n    armstrong_number(-128)==False\n    armstrong_number(-129)==False\n    armstrong_number(-130)==False\n    armstrong_number(-131)==False\n    armstrong_number(-132)==False\n    armstrong_number(-133)==False\n    armstrong_number(-134)==False\n    armstrong_number(-135)==False\n    armstrong_number(-136)==False\n    armstrong_number(-137)==False\n    armstrong_number(-138)==False\n    armstrong_number(-139)==False\n    armstrong_number(-140)==False\n    armstrong_number(-141)==False\n    armstrong_number(-142)==False\n    armstrong_number(-143)==False\n    armstrong_number(-144)==False\n    armstrong_number(-14"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     armstrong_number(153) == True, \"153 is not an Armstrong number\"\nassert armstrong_number(162) == True, \"162 is not an Armstrong number\"\nassert armstrong_number(3) == False, \"3 is an Armstrong number\"\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef palindrome(number):\n    '''\n    Write a function that returns True if the given number is a palindrome else returns False\n    '''\n    pass\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     armstrong_number(9)=    True,'9 is armstrong number'\nassert     armstrong_number(13)=    True,'13 is armstrong number'\nassert     armstrong_number(6)=    False,'6 is armstrong number'\nassert     armstrong_number(8)=    False,'8 is armstrong number'\nassert     armstrong_number(6^3+6^2+6+6)=    True,'6^3+6^2+6+6 is armstrong number'\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_average(1) == 1, 'incorrect sum_average function'\nassert     sum_average(2) == 1.5, 'incorrect sum_average function'\nassert     sum_average(3) == 2, 'incorrect sum_average function'\nassert     sum_average(4) == 2.5, 'incorrect sum_average function'\nassert     sum_average(5) == 2.5, 'incorrect sum_average function'\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_average(10) == 15\nassert     sum_average(0) == 0\nassert     sum_average(1) == 1\n\n\n'''\nIn this task you will need to calculate the average of a given set of numbers.\n\nExample:\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_average(2) == (2, 2.0)\nassert     sum_average(4) == (4, 2.5)\nassert     sum_average(6) == (6, 2.5)\nassert     sum_average(8) == (8, 2.5)\nassert     sum_average(5) == (5, 5.0)\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_average(1) == 0\nassert     sum_average(2) == 1\nassert     sum_average(3) == 2\nassert     sum_average(4) == 3\nassert     sum_average(5) == 4\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_average(0) == 0\nassert     sum_average(1) == 1\nassert     sum_average(2) == 3\nassert     sum_average(3) == 6\nassert     sum_average(4) == 10\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_average(1) == 0\nassert     sum_average(2) == 1\nassert     sum_average(3) == 1.5\nassert     sum_average(4) == 2\nassert     sum_average(5) == 3\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert sum_average(1) == 1, 'the sum of 1st natural number is 1'\nassert sum_average(2) == 2, 'the sum of 2nd natural number is 2'\nassert sum_average(5) == 5, 'the sum of 5th natural number is 5'\nassert sum_average(1000) == 1250, 'the sum of 1000th natural number is 1250'\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_average(2) == (1, 1.5)\nassert     sum_average(4) == (3, 2.5)\nassert     sum_average(6) == (5, 4.5)\nassert     sum_average(8) == (7, 5.5)\nassert     sum_average(10) == (9, 6.5)\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # run the tests\n    import doctest\n    doctest.testmod()\n\n    # get the results of the tests\n    import random\n    print(sum_average(10))\n    print(sum_average(100))\n    print(sum_average(1000))\n    print(sum_average(10000))\n    print(sum_average(100000))\n    \n    print(\"\")\n\n    print(sum_average(1))\n    print(sum_average(2))\n    print(sum_average(3))\n    print(sum_average(4))\n    print(sum_average(5))\n    print(sum_average(6))\n    print(sum_average(7))\n    print(sum_average(8))\n    print(sum_average(9))\n    print(sum_average(10))\n\n    print(\"\")\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_average(10) == 20\nassert     sum_average(20) == 30\nassert     sum_average(50) == 70\nassert     sum_average(100) == 200\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert is_Even(2) == False\nassert is_Even(4) == True\nassert is_Even(0) == True\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_Even(10) == False, \"is_Even() is wrong!\"\nassert     is_Even(0) == False, \"is_Even() is wrong!\"\nassert     is_Even(11) == True, \"is_Even() is wrong!\"\nassert     is_Even(20) == True, \"is_Even() is wrong!\"\nassert     is_Even(30) == True, \"is_Even() is wrong!\"\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_Even(3) == True, \"is_Even should return True for 3\"\nassert is_Even(5) == False, \"is_Even should return False for 5\"\nassert is_Even(0) == True, \"is_Even should return True for 0\"\nassert is_Even(-1) == False, \"is_Even should return False for -1\"\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_Even(5) == False, 'is_Even function needs to return True if the number is even else return False'\nassert     is_Even(6) == True, 'is_Even function needs to return True if the number is even else return False'\nassert     is_Even(8) == False, 'is_Even function needs to return True if the number is even else return False'\nassert     is_Even(4) == True, 'is_Even function needs to return True if the number is even else return False'\nassert     is_Even(1) == True, 'is_Even function needs to return True if the number is even else return False'\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_Even(10) == True\nassert     is_Even(11) == False\nassert     is_Even(5) == True\nassert     is_Even(-4) == False\nassert     is_Even(0) == False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_Even(3)    ==    True\nassert     is_Even(4)    ==    False\nassert     is_Even(8)    ==    True\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_Even(10) == True, 'error1'\nassert     is_Even(11) == False, 'error2'\nassert     is_Even(0) == False, 'error3'\nassert     is_Even(15) == True, 'error4'\nassert     is_Even(20) == True, 'error5'\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nis_Even(1) == False, '1 is not even'\nassert \nis_Even(0) == False, '0 is even'\nassert \nis_Even(3) == True, '3 is even'\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert is_Even(4) == True, \"check the correctness of is_Even\"\nassert is_Even(3) == False, \"check the correctness of is_Even\"\nassert is_Even(-4) == True, \"check the correctness of is_Even\"\nassert is_Even(-3) == False, \"check the correctness of is_Even\"\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_Even(2) == True\nassert     is_Even(5) == True\nassert     is_Even(9) == False\nassert     is_Even(10) == False\nassert     is_Even(11) == True\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nfirst_repeated_char('a') == 'a'\nfirst_repeated_char('aa') == 'a'\nfirst_repeated_char('ab') == 'a'\nfirst_repeated_char('aaab') == 'a'\nfirst_repeated_char('abccdeff') == 'e'\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     first_repeated_char('') == None, \"First character of string is not repeated\"\nassert     first_repeated_char('a') == 'a', \"First character of string is repeated\"\nassert     first_repeated_char('aac') == 'a', \"First character of string is repeated\"\nassert     first_repeated_char('aacaa') == 'a', \"First character of string is repeated\"\nassert     first_repeated_char('aacaaac') == 'a', \"First character of string is repeated\"\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     first_repeated_char('') == -1\nassert     first_repeated_char('a') == -1\nassert     first_repeated_char('ab') == -1\nassert     first_repeated_char('abx') == -1\nassert     first_repeated_char('abc') == -1\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     first_repeated_char('abd') == 'b'\nassert     first_repeated_char('aabaaab') == 'a'\nassert     first_repeated_char('abcdefghijklmnopqrstuvwxyz') == 'z'\nassert     first_repeated_char('aA') == 'A'\nassert     first_repeated_char('aBcD') == 'c'\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     first_repeated_char('abc') == -1, 'First repeated character found'\nassert first_repeated_char('abd') == -1, 'First repeated character found'\nassert first_repeated_char('abc') == -1, 'First repeated character found'\nassert first_repeated_char('') == -1, 'Empty string'\nassert first_repeated_char('123') == -1, 'Unique character'\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nfirst_repeated_char(\"abcd\") == -1\nfirst_repeated_char(\"aab\") == -1\nfirst_repeated_char(\"a\") == 0\nfirst_repeated_char(\"aaaaaa\") == -1\nfirst_repeated_char(\"aaaaaaaaaaaaaa\") == -1\nfirst_repeated_char(\"aaa\") == 0\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     first_repeated_char('abcd') == 'a'\nassert     first_repeated_char('aabcabc') == 'a'\nassert     first_repeated_char('abccde') == None\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     first_repeated_char('abcd') == 'd', 'First Repeated Character'\nassert     first_repeated_char('aacd') == 'd', 'First Repeated Character'\nassert     first_repeated_char('abc') == '', 'First Repeated Character'\nassert     first_repeated_char('abbc') == 'c', 'First Repeated Character'\nassert     first_repeated_char('abcddd') == 'd', 'First Repeated Character'\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     first_repeated_char('abc') == 'a'\nassert     first_repeated_char('abc') == 'a'\nassert     first_repeated_char('abcdeabc') == 'a'\nassert     first_repeated_char('abccdd') == 'c'\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_ludic(30) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]\nassert get_ludic(27) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]\nassert get_ludic(15) == []\nassert get_ludic(1) == []\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_ludic(1) == [1]\nassert     get_ludic(3) == [1, 3]\nassert     get_ludic(5) == [1, 3, 5]\nassert     get_ludic(7) == [1, 3, 5, 7]\nassert     get_ludic(11) == [1, 3, 5, 7, 11]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert get_ludic(30) == [30]\nassert get_ludic(40) == [40, 20]\nassert get_ludic(50) == [50, 40, 20]\nassert get_ludic(55) == [55, 20, 10, 5]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_ludic(10) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     get_ludic(12) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\n'''\nProblem 7:\n    Write a function to get all perfect numbers smaller than or equal to a given integer.\n'''\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    get_ludic(6) == [1,2,3,4,5,6]\n    get_ludic(8) == [1,2,3,4,5,6,7,8]\n    get_ludic(10) == [1,2,3,4,5,6,7,8,9,10]\n    get_ludic(15) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n    get_ludic(16) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]\n    get_ludic(17) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]\n    get_ludic(18) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]\n    get_ludic(20) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n    get_ludic(21) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]\n    get_ludic(22) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]\n    get_ludic(23) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]\n    get_ludic(24) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]\n    get_ludic(25) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]\n    get_ludic(26) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]\n    get_ludic(27) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]\n    get_ludic(28) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]\n    get_ludic(29) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]\n    get_ludic(30) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]\n    get_ludic(31) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]\n    get_ludic(32) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]\n    get_ludic(33) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33]\n    get_ludic(34) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34]\n    get_ludic(35) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]\n    get_ludic(36) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36]\n    get_ludic(37) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37]\n    get_ludic(38) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38]\n    get_ludic(39) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39]\n    get_ludic(40) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]\n    get_ludic(41) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41]\n    get_ludic(42) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42]\n    get_ludic(43) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,2"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef get_ludic_range(a,b):\n    '''\n    Write a function to get all the lucid numbers smaller than or equal to a given integer,\n    within a given range.\n    '''\n    pass\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_ludic(1) == [1]\nassert     get_ludic(10) == [1,2,3,4,5,6,7,8,9,10]\nassert     get_ludic(100) == [1,2,3,4,5,6,7,8,9,10]\nassert     get_ludic(10000) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_ludic(100) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef has_duplicates(seq):\n    '''\n    Write a function to determine if a list contains any duplicates.\n    '''\n    pass\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     reverse_words(\"The quick brown fox jumps over the lazy dog\") == \"god ynq oxf hay rml bwx ufsk\"\nassert reverse_words(\"hello world\") == \"dlrow olleh\"\nassert reverse_words(\"\") == \"\""
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     reverse_words('taco cat') == 'atoc cta'\nassert     reverse_words('taco cat') == 'taco cat'\nassert     reverse_words('taco cat') == 'cat'\nassert     reverse_words('taco cat') == 'taco'\nassert     reverse_words('taco cat') == ''\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     reverse_words('some    words') == 'words  some'\nassert     reverse_words('some words') == 'words  some'\nassert     reverse_words('some words some') == 'words some  some'\n\ndef reverse_words_iter(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nreverse_words('This is my first string') == 'is my first string This'\nassert \nreverse_words('This is my first string') == 'first string This is my'\nassert \nreverse_words('first string This is my first string') =='my first string This is first string first'\nassert \nreverse_words('first string This is my first string') == 'first string This is my first string'\nassert \nreverse_words('This is my first string') == 'is my first string This'\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     reverse_words(\"the quick brown fox jumps\") == \"heq tlwexno rufn\"\nassert     reverse_words(\"\") == \"\"\nassert     reverse_words(\"a\") == \"a\"\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     reverse_words(\"hello world\") == \"dlrow olleh\", \"Test 1 Failed\"\nassert     reverse_words(\"this is a test\") == \"test a si siht\", \"Test 2 Failed\"\nassert     reverse_words(\"I don't like this program\") == \"program I si a dnv\", \"Test 3 Failed\"\nassert     reverse_words(\"Hey, Are you a program developer\") == \"reh, are you yod a pou mdhv\", \"Test 4 Failed\"\nassert     reverse_words(\"Hey, Are you a programmer\") == \"reh, are you pou mdhv\", \"Test 5 Failed\"\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     prime_num(5) == True\nassert     prime_num(7) == False\nassert     prime_num(7) == False\nassert     prime_num(24) == False\nassert     prime_num(88) == True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert prime_num(1) is False\nassert prime_num(2) is True\nassert prime_num(3) is True\nassert prime_num(4) is False\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     prime_num(3) == True, \"is not a prime number\"\nassert     prime_num(4) == False, \"is a prime number\"\nassert     prime_num(5) == True, \"is not a prime number\"\nassert     prime_num(8) == True, \"is a prime number\"\nassert     prime_num(9) == False, \"is not a prime number\"\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     prime_num(1) == False, \"Test 1 failed\"\nassert     prime_num(2) == True, \"Test 2 failed\"\nassert     prime_num(3) == False, \"Test 3 failed\"\nassert     prime_num(4) == True, \"Test 4 failed\"\nassert     prime_num(5) == False, \"Test 5 failed\"\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert prime_num(2) is True\nassert prime_num(4) is False\nassert prime_num(6) is True\nassert prime_num(11) is True\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef deg_to_rad(deg):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    pass\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert radian_degree(180) == math.pi\nassert radian_degree(360) == 2*math.pi\nassert radian_degree(0) == math.pi/2\nassert radian_degree(90) == math.pi/4\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef get_radian(degrees):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    pass\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert \nassert radian_degree(180) == math.pi/2, \"Should be pi/2\"\nassert radian_degree(360) == 2*math.pi, \"Should be 2*pi\"\nassert radian_degree(0) == 0\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     radian_degree(90) == math.pi/2\nassert     radian_degree(180) == math.pi\nassert     radian_degree(270) == 3*math.pi/2\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     radian_degree(0) == 0.0\nassert     radian_degree(90) == math.pi/2\nassert     radian_degree(180) == math.pi\nassert     radian_degree(360) == 2*math.pi\nassert     radian_degree(360.1) == 2*math.pi + 0.1\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert radian_degree(90) == math.pi/2\nassert radian_degree(-90) == math.pi/2\nassert radian_degree(180) == math.pi\nassert radian_degree(360) == 2*math.pi\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef radian_to_degree(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    pass\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_literals(\n    text = '''\n    The Zen of Python, by Tim Peters\n    Beautiful is better than ugly.\n    Explicit is better than implicit.\n    Simple is better than complex.\n    Complex is better than complicated.\n    Flat is better than nested.\n    Sparse is better than dense.\n    Readability counts.\n    Special cases aren't special enough to break the rules.\n    Although practicality beats purity.\n    Errors should never pass silently.\n    Unless explicitly silenced.\n    In the face of ambiguity, refuse the temptation to guess.\n    There should be one-- and preferably only one --obvious way to do it.\n    Although that way may not be obvious at first unless you're Dutch.\n    Now is better than never.\n    Although never is often better than *right* now.\n    If the implementation is hard to explain, it's a bad idea.\n    If the implementation is easy to explain, it may be a good idea.\n    Namespaces are one honking great idea -- let's do more of those!\n    ''', \n    pattern = \"th\"\n) == (\n    \"better\", \n    16, \n    27\n)\n\nassert     find_literals(\n    text = '''\n    The Zen of Python, by Tim Peters\n    Beautiful is better than ugly.\n    Explicit is better than implicit.\n    Simple is better than complex.\n    Complex is better than complicated.\n    Flat is better than nested.\n    Sparse is better than dense.\n    Readability counts.\n    Special cases aren't special enough to break the rules.\n    Although practicality beats purity.\n    Errors should never pass silently.\n    Unless explicitly silenced.\n    In the face of ambiguity, refuse the temptation to guess.\n    There should be one-- and preferably only one --obvious way to do it.\n    Although that way may not be obvious at first unless you're Dutch.\n    Now is better than never.\n    Although never is often better than *right* now.\n    If the implementation is hard to explain, it's a bad idea.\n    If the implementation is easy to explain, it may be a good idea.\n    Namespaces are one honking great idea -- let's do more of those!\n    ''', \n    pattern = \"ug\"\n) == (\n    \"better\", \n    14, \n    20\n)\n\nassert     find_literals(\n    text = '''\n    The Zen of Python, by Tim Peters\n    Beautiful is better than ugly.\n    Explicit is better than implicit.\n    Simple is better than complex.\n    Complex is better than complicated.\n    Flat is better than nested.\n    Sparse is better than dense.\n    Readability counts.\n    Special cases aren't special enough to break the rules.\n    Although practicality beats purity.\n    Errors should never pass silently.\n    Unless explicitly silenced.\n    In the face of ambiguity, refuse the temptation to guess.\n    There should be one-- and preferably only one --obvious way to do it.\n    Although that way may not be obvious at first unless you're Dutch.\n    Now is better than never.\n    Although never is often better than *right* now.\n    If the implementation is hard to explain, it's a bad idea.\n    If the implementation is easy to explain, it may be a good idea.\n    Namespaces are one honking great idea -- let's do more of those!\n    ''', \n    pattern = \"z\"\n) == (\n    \"ug\", \n    1, \n    1\n)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_literals('Hello World', 'World') == ('Hello', 0, 10)\nassert     find_literals('Hello World', 'World.') == ('Hello', 0, 11)\nassert     find_literals('Hello World', 'Hello') == ('Hello', 0, 5)\nassert     find_literals('Hello World', 'Hello World') == ('Hello World', 0, 14)\nassert     find_literals('Hello World', 'Hello World?') == ('Hello World', 0, 10)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert find_literals('Ummummum', 'U') == (1,4,5)\nassert find_literals('Ummummum', 'U') == (1, 4, 5)\n\nassert \n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nfind_literals('aa', 'ab') == None\nfind_literals('aa', 'aab') == (2, 1)\nfind_literals('aa', 'aaa') == (0, 2)\nfind_literals('aab', 'aab') == (0, 3)\nfind_literals('aab', 'a') == (0, 1)\nfind_literals('aab', 'ab') == (1, 2)\nfind_literals('aab', 'aa') == (0, 3)\nfind_literals('aab', 'aab') == (0, 3)\nfind_literals('aab', 'ba') == (0, 3)\nfind_literals('aab', 'aba') == (0, 3)\nfind_literals('aab', 'aa') == (0, 3)\nfind_literals('aab', 'aaa') == (0, 3)\nfind_literals('aab', 'aab') == (0, 3)\nfind_literals('aab', 'bb') == (0, 3)\nfind_literals('aab', 'ba') == (0, 3)\nfind_literals('aab', 'aba') == (0, 3)\nfind_literals('aab', 'a') == (0, 3)\nfind_literals('aab', 'aab') == (0, 3)\nfind_literals('aab', 'bb') == (0, 3)\nfind_literals('aab', 'ba') == (0, 3)\nfind_literals('aab', 'aba') == (0, 3)\nfind_literals('aab', 'a') == (0, 3)\nfind_literals('aab', 'aaa') == (0, 3)\nfind_literals('aab', 'aab') == (0, 3)\nfind_literals('aab', 'bb') == (0, 3)\nfind_literals('aab', 'ba') == (0, 3)\nfind_literals('aab', 'aba') == (0, 3)\nfind_literals('aab', 'a') == (0, 3)\nfind_literals('aab', 'aab') == (0, 3)\nfind_literals('aab', 'bb') == (0, 3)\nfind_literals('aab', 'ba') == (0, 3)\nfind_literals('aab', 'aba') == (0, 3)\nfind_literals('aab', 'a') == (0, 3)\nfind_literals('aab', 'aaa') == (0, 3)\nfind_literals('aab', 'aab') == (0, 3)\nfind_literals('aab', 'bb') == (0, 3)\nfind_literals('aab', 'ba') == (0, 3)\nfind_literals('aab', 'aba') == (0, 3)\nfind_literals('aab', 'a') == (0, 3)\nfind_literals('aab', 'aab') == (0, 3)\nfind_literals('aab', 'bb') == (0, 3)\nfind_literals('aab', 'ba') == (0, 3)\nfind_literals('aab', 'aba') == (0, 3)\nfind_literals('aab', 'a') == (0, 3)\nfind_literals('aab', 'aaa') == (0, 3)\nfind_literals('aab', 'aab') == (0, 3)\nfind_literals('aab', 'bb') == (0, 3)\nfind_literals('aab', 'ba') == (0, 3)\nfind_literals('aab', 'aba') == (0, 3)\nfind_literals('aab', 'a') == (0, 3)\nfind_literals('aab', 'aab') == (0, 3)\nfind_literals('aab', 'bb') == (0, 3)\nfind_literals('aab', 'ba') == (0, 3)\nfind_literals('aab', 'aba') == (0, 3)\nfind_literals('aab', 'a') == (0, 3)\nfind_literals('aab', 'aaa') == (0, 3)\nfind_literals('aab', 'aab') == (0, 3)\nfind_literals('aab', 'bb') == (0, 3)\nfind_literals('aab', 'ba') == (0, 3)\nfind_literals('aab', 'aba') == (0, 3)\nfind_literals('aab', 'a') == (0, 3)\nfind_literals('aab', 'aab') == (0, 3)\nfind_literals('aab', 'bb') == (0, 3)\nfind_literals('aab', 'ba') == (0, 3)\nfind_literals('aab', 'aba') == (0, 3)\nfind_literals('aab', 'a') == (0, 3)\nfind_literals('aab', 'aaa') == (0, 3)\nfind_literals('aab', 'aab') == (0, 3)\nfind_literals('aab', 'bb') == (0, 3)\nfind_literals('aab', 'ba') == (0, 3)\nfind_literals('aab', 'aba') == (0, 3)\nfind_literals('aab', 'a') == (0, 3)\nfind_literals('aab', 'aab') == (0, 3)\nfind_literals('aab', 'bb') == (0, 3)\nfind_literals('aab', 'ba') == (0, 3)\nfind_literals('aab', 'aba') == (0, 3)\nfind_literals('aab', 'a') == (0, 3)\nfind_literals('aab', 'aaa') == (0, 3)\nfind_literals('aab', 'aab') == (0, 3)\nfind_literals('aab', 'bb') == (0, 3)\nfind_literals('aab', 'ba') == (0, 3)\nfind_literals('aab', 'aba') == (0, 3)\nfind_literals('aab', 'a') == (0, 3)\nfind_literals('aab', 'aab') == (0, 3)\nfind_literals('aab', 'bb') == (0, 3)\nfind_literals('aab', 'ba') == (0, 3)\nfind_literals('aab', 'aba') == (0, 3)\nfind_literals('aab', 'a') == (0, 3)\nfind_literals('aab', 'aaa') == (0, 3)\nfind_literals('aab', 'aab') == (0, 3)\nfind_literals('aab', 'bb') == (0, 3)\nfind_literals('aab', 'ba') == (0, 3)\nfind_literals('aab', 'aba') == (0, 3)\nfind_literals('aab', 'a') == (0, 3)\nfind_literals('aab', 'aab') == (0, 3)\nfind_literals('aab', 'bb') == (0, 3)\nfind_literals('aab', 'ba') == (0, 3)\nfind_literals('aab', 'aba') == (0, 3)\nfind_literals('aab', 'a') == (0, 3)\nfind_literals('aab', 'aaa') == (0, 3)\nfind_literals('aab', 'aab') == (0, 3)\nfind_literals('aab', 'bb') == (0, 3)\nfind_literals('aab', 'ba') == (0, 3)\nfind_literals('aab', 'aba') == (0, 3)\nfind_literals('aab', 'a') == (0, 3)\nfind_literals('aab', 'aab') == (0, 3)\nfind_literals('aab', 'bb') == (0, 3)\nfind_literals('aab', 'ba') == (0, 3)\nfind_literals('aab', 'aba') == (0, 3)\nfin"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_literals(\"Tataa\", \"at\") == (0,1,2)\nassert     find_literals(\"tata\", \"at\") == (0, 1, 2)\nassert     find_literals(\"Tata\", \"at\") == (0, 1, 2)\nassert     find_literals(\"Tata\", \"tat\") == (0, 1, 2)\nassert     find_literals(\"Tata\", \"attt\") == (0, 1, 2)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_literals('abcdabc', 'abc') ==     ('abc', 0, 3)\nassert     find_literals('abcdabc', 'bc') ==     (None, 0, 0)\nassert     find_literals('abcdabc', '') ==     (None, 0, 0)\nassert     find_literals('abcdabc', 'x') ==     (None, 0, 0)\nassert     find_literals('abcdabc', 'a') ==     ('a', 0, 1)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_literals('xyzabc123xyz', 'xyz') == ('xyz', 0, 9)\nassert     find_literals('xyzabc123xyz', 'xyz123') == ('xyz123', 0, 9)\nassert     find_literals('xyzabc123xyz', 'xyza') == ('', 0, 0)\nassert     find_literals('xyzabc123xyz', 'xyza') == ('', 0, 0)\nassert     find_literals('xyzabc123xyz', 'xyz') == ('', 0, 0)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_literals(\"My name is Michael and I like programming.\", r\"^[a-zA-Z0-9]\") == \"Michael\", \"Incorrect\"\nassert     find_literals(\"My name is Michael and I like programming.\", r\"^[A-Z]\") == \"Michael\", \"Incorrect\"\nassert     find_literals(\"My name is Michael and I like programming.\", r\"^[a-zA-Z]\") == \"Michael\", \"Incorrect\"\nassert     find_literals(\"My name is Michael and I like programming.\", r\"^[0-9]\") == \"Michael\", \"Incorrect\"\nassert     find_literals(\"My name is Michael and I like programming.\", r\"^[a-zA-Z0-9]*\") == \"Michael and I like programming.\", \"Incorrect\"\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_literals('abcd', 'abc') == (0, 4, 0)\nassert     find_literals('abcd', 'bcd') == (1, 3, 1)\nassert     find_literals('abcd', 'ab') == (0, 2, 0)\nassert     find_literals('abcd', 'abcd') == (0, 5, 0)\nassert     find_literals('abcd', 'ad') == (-1, -1, -1)\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef nth_bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    pass\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef k_factors(n):\n    '''\n    Write a python function to find the number of k factors of a number\n    '''\n    pass\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(\"\\n\")\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(\"check completed\")"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nbell_Number(1) == 1\nbell_Number(2) == 2\nbell_Number(3) == 5\nbell_Number(4) == 8\nbell_Number(5) == 14\nbell_Number(6) == 22\nbell_Number(7) == 37\nbell_Number(8) == 40\nbell_Number(9) == 47\nbell_Number(10) == 52\nbell_Number(11) == 55\nbell_Number(12) == 62\nbell_Number(13) == 69\nbell_Number(14) == 70\nbell_Number(15) == 77\nbell_Number(16) == 81\nbell_Number(17) == 83\nbell_Number(18) == 85\nbell_Number(19) == 92\nbell_Number(20) == 94\nbell_Number(21) == 97\nbell_Number(22) == 99\nbell_Number(23) == 101\nbell_Number(24) == 103\nbell_Number(25) == 105\nbell_Number(26) == 106\nbell_Number(27) == 107\nbell_Number(28) == 109\nbell_Number(29) == 111\nbell_Number(30) == 113\nbell_Number(31) == 114\nbell_Number(32) == 116\nbell_Number(33) == 118\nbell_Number(34) == 119\nbell_Number(35) == 121\nbell_Number(36) == 122\nbell_Number(37) == 123\nbell_Number(38) == 125\nbell_Number(39) == 126\nbell_Number(40) == 128\nbell_Number(41) == 129\nbell_Number(42) == 131\nbell_Number(43) == 133\nbell_Number(44) == 135\nbell_Number(45) == 137\nbell_Number(46) == 139\nbell_Number(47) == 141\nbell_Number(48) == 143\nbell_Number(49) == 145\nbell_Number(50) == 147\nbell_Number(51) == 149\nbell_Number(52) == 151\nbell_Number(53) == 153\nbell_Number(54) == 155\nbell_Number(55) == 157\nbell_Number(56) == 159\nbell_Number(57) == 161\nbell_Number(58) == 163\nbell_Number(59) == 165\nbell_Number(60) == 167\nbell_Number(61) == 169\nbell_Number(62) == 171\nbell_Number(63) == 173\nbell_Number(64) == 175\nbell_Number(65) == 177\nbell_Number(66) == 179\nbell_Number(67) == 181\nbell_Number(68) == 183\nbell_Number(69) == 185\nbell_Number(70) == 187\nbell_Number(71) == 189\nbell_Number(72) == 191\nbell_Number(73) == 193\nbell_Number(74) == 195\nbell_Number(75) == 197\nbell_Number(76) == 199\nbell_Number(77) == 201\nbell_Number(78) == 203\nbell_Number(79) == 205\nbell_Number(80) == 207\nbell_Number(81) == 209\nbell_Number(82) == 211\nbell_Number(83) == 213\nbell_Number(84) == 215\nbell_Number(85) == 217\nbell_Number(86) == 219\nbell_Number(87) == 221\nbell_Number(88) == 223\nbell_Number(89) == 225\nbell_Number(90) == 227\nbell_Number(91) == 229\nbell_Number(92) == 231\nbell_Number(93) == 233\nbell_Number(94) == 235\nbell_Number(95) == 237\nbell_Number(96) == 239\nbell_Number(97) == 241\nbell_Number(98) == 243\nbell_Number(99) == 245\nbell_Number(100) == 247\nbell_Number(101) == 249\nbell_Number(102) == 251\nbell_Number(103) == 253\nbell_Number(104) == 254\nbell_Number(105) == 257\nbell_Number(106) == 259\nbell_Number(107) == 261\nbell_Number(108) == 263\nbell_Number(109) == 265\nbell_Number(110) == 266\nbell_Number(111) == 267\nbell_Number(112) == 269\nbell_Number(113) == 271\nbell_Number(114) == 273\nbell_Number(115) == 275\nbell_Number(116) == 277\nbell_Number(117) == 279\nbell_Number(118) == 281\nbell_Number(119) == 283\nbell_Number(120) == 285\nbell_Number(121) == 287\nbell_Number(122) == 289\nbell_Number(123) == 291\nbell_Number(124) == 293\nbell_Number(125) == 295\nbell_Number(126) == 297\nbell_Number(127) == 299\nbell_Number(128) == 301\nbell_Number(129) == 303\nbell_Number(130) == 305\nbell_Number(131) == 307\nbell_Number(132) == 309\nbell_Number(133) == 311\nbell_Number(134) == 313\nbell_Number(135) == 315\nbell_Number(136) == 317\nbell_Number(137) == 319\nbell_Number(138) == 321\nbell_Number(139) == 323\nbell_Number(140) == 325\nbell_Number(141) == 327\nbell_Number(142) == 329\nbell_Number(143) == 331\nbell_Number(144) == 333\nbell_Number(145) == 335\nbell_Number(146) == 337\nbell_Number(147) == 339\nbell_Number(148) == 341\nbell_Number(149) == 343\nbell_Number(150) == 345\nbell_Number(151) == 347\nbell_Number(152) == 349\nbell_Number(153) == 351\nbell_Number(154) == 353\nbell_Number(155) == 355\nbell_Number(156) == 357\nbell_Number(157) == 359\nbell_Number(158) == 361\nbell_Number(159) == 363\nbell_Number(160) == 365\nbell_Number(161) == 367\nbell_Number(162) == 369\nbell_Number(163) == 371\nbell_Number(164) == 373\nbell_Number(165) == 375\nbell_Number(166) == 377\nbell_Number(167) == 379\nbell_Number(168) == 381\nbell_Number(169) == 383\nbell_Number(170) == 385\nbell_Number(171) == 387\nbell_Number(172) == 389\nbell_Number(173) == 391\nbell_Number(174) == 393\nbell_Number(175) == 395\nbell_Number(176) == 397\nbell_Number(177) == 399\nbell_Number(178) == 401\nbell_Number(179) == 403\nbell_Number(180) == 405\nbell_Number(181) == 407\nbell_Number(182) == 409\nbell_Number(183) == 411\nbell_Number(184) == 413\nbell_Number(185) == 415\nbell_Number(186) == 417\nbell_Number(187) == 419\nbell_Number(188) == 421\nbell_Number(189) == 423\nbell_Number(190) == 425\nbell_Number(191) == 427\nbell_Number(192) == 429\nbell_Number(193) == 431\nbell_Number(194) == 433\nbell_Number(195) == 435\nbell_Number(196) == 437\nbell_Number(197) == 439\nbell_Number(198) == 441\nbell_Number(199) == 443\nbell_Number(200) == 445\nbell_Number(201) == 447\nbell_Number(202) == 449\nbell_Number(203) == 451\nbell_Number(204) == 453\nbell_Number(205) == 455\nbell_Number(206) == 457\nbell_Number(207) == 459\nbell_Number(208) == 461\nbell_Number(209) == 463\nbell_Number(210) == 465\nbell_Number(211) == 467\nbell_Number(212) == 469\nbell_Number(213) == 471\nbell_Number(214) == 473\nbell_Number(215) == 475\nbell_Number(216) == 477\nbell_Number(217) == 479\nbell_Number(218) == 481\nbell_Number(219) == 483\nbell_Number(220) == 48"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nbell_Number(1) == 1\nbell_Number(2) == 2\nbell_Number(3) == 5\nbell_Number(4) == 14\nbell_Number(5) == 55\nbell_Number(6) == 105\nbell_Number(7) == 138\nbell_Number(8) == 676\nbell_Number(9) == 1275\nbell_Number(10) == 2925\nbell_Number(11) == 7218\nbell_Number(12) == 14958\nbell_Number(13) == 51079\nbell_Number(14) == 102374\nbell_Number(15) == 358679\nbell_Number(16) == 88646\nbell_Number(17) == 274829\nbell_Number(18) == 918657\nbell_Number(19) == 353487\nbell_Number(20) == 1060665\nbell_Number(21) == 5986425\nbell_Number(22) == 1415539\nbell_Number(23) == 6370489\nbell_Number(24) == 13322569\nbell_Number(25) == 6063366\nbell_Number(26) == 1558869\nbell_Number(27) == 6378728\nbell_Number(28) == 14499343\nbell_Number(29) == 6943423\nbell_Number(30) == 16228489\nbell_Number(31) == 7226471\nbell_Number(32) == 15171151\nbell_Number(33) == 61894599\nbell_Number(34) == 134814159\nbell_Number(35) == 53599393\nbell_Number(36) == 132496561\nbell_Number(37) == 51425143\nbell_Number(38) == 109375000\nbell_Number(39) == 4503599627370517\nbell_Number(40) == 1125899906842624\nbell_Number(41) == 5851837238518407\nbell_Number(42) == 15636603773495773\nbell_Number(43) == 6791456366974694\nbell_Number(44) == 180719689342338\nbell_Number(45) == 710842734375\nbell_Number(46) == 1415839069482401\nbell_Number(47) == 628758969462515\nbell_Number(48) == 127548923585526\nbell_Number(49) == 598077657444959\nbell_Number(50) == 151879571516566\nbell_Number(51) == 677897682714894\nbell_Number(52) == 1307996553306056\nbell_Number(53) == 633250244524071\nbell_Number(54) == 1348827586154929\nbell_Number(55) == 5341554007079808\nbell_Number(56) == 109375000\nbell_Number(57) == 5388095238095244\nbell_Number(58) == 1401687309405186\nbell_Number(59) == 6791456\nbell_Number(60) == 131255954663919\nbell_Number(61) == 598077657\nbell_Number(62) == 15187957\nbell_Number(63) == 67789768\nbell_Number(64) == 130799655\nbell_Number(65) == 63325024\nbell_Number(66) == 134882759\nbell_Number(67) == 5341554\nbell_Number(68) == 10937500\nbell_Number(69) == 5388095\nbell_Number(70) == 1401687\nbell_Number(71) == 6791456\nbell_Number(72) == 131255\nbell_Number(73) == 5980775\nbell_Number(74) == 151879\nbell_Number(75) == 677897\nbell_Number(76) == 130799\nbell_Number(77) == 633250\nbell_Number(78) == 13488\nbell_Number(79) == 53415\nbell_Number(80) == 109375\nbell_Number(81) == 53880\nbell_Number(82) == 140168\nbell_Number(83) == 67914\nbell_Number(84) == 131255\nbell_Number(85) == 598075\nbell_Number(86) == 151879\nbell_Number(87) == 67789\nbell_Number(88) == 130799\nbell_Number(89) == 633250\nbell_Number(90) == 13488\nbell_Number(91) == 53415\nbell_Number(92) == 109375\nbell_Number(93) == 53880\nbell_Number(94) == 140169\nbell_Number(95) == 67914\nbell_Number(96) == 131256\nbell_Number(97) == 598075\nbell_Number(98) == 151879\nbell_Number(99) == 67789\nbell_Number(100) == 130799\nbell_Number(101) == 633250\nbell_Number(102) == 13488\nbell_Number(103) == 53415\nbell_Number(104) == 109375\nbell_Number(105) == 53880\nbell_Number(106) == 140168\nbell_Number(107) == 67914\nbell_Number(108) == 131255\nbell_Number(109) == 598075\nbell_Number(110) == 151879\nbell_Number(111) == 67789\nbell_Number(112) == 130799\nbell_Number(113) == 633250\nbell_Number(114) == 13488\nbell_Number(115) == 53415\nbell_Number(116) == 109375\nbell_Number(117) == 53880\nbell_Number(118) == 140169\nbell_Number(119) == 67914\nbell_Number(120) == 131255\nbell_Number(121) == 598075\nbell_Number(122) == 151879\nbell_Number(123) == 67789\nbell_Number(124) == 130799\nbell_Number(125) == 633250\nbell_Number(126) == 13488\nbell_Number(127) == 53415\nbell_Number(128) == 109375\nbell_Number(129) == 53880\nbell_Number(130) == 140168\nbell_Number(131) == 67914\nbell_Number(132) == 131255\nbell_Number(133) == 598075\nbell_Number(134) == 151879\nbell_Number(135) == 67789\nbell_Number(136) == 130799\nbell_Number(137) == 633250\nbell_Number(138) == 13488\nbell_Number(139) == 53415\nbell_Number(140) == 109375\nbell_Number(141) == 53880\nbell_Number(142) == 140169\nbell_Number(143) == 67914\nbell_Number(144) == 131255\nbell_Number(145) == 598075\nbell_Number(146) == 151879\nbell_Number(147) == 67789\nbell_Number(148) == 130799\nbell_Number(149) == 633250\nbell_Number(150) == 13488\nbell_Number(151) == 53415\nbell_Number(152) == 109375\nbell_Number(153) == 53880\nbell_Number(154) == 140168\nbell_Number(155) == 67914\nbell_Number(156) == 131255\nbell_Number(157) == 598075\nbell_Number(158) == 151879\nbell_Number(159) == 67789\nbell_Number(160) == 130799\nbell_Number(161) == 633250\nbell_Number(162) == 13488\nbell_Number(163) == 53415\nbell_Number(164) == 109375\nbell_Number(165) == 53880\nbell_Number(166) == 140169\nbell_Number(167) == 67914\nbell_Number(168) == 131255\nbell_Number(169) == 598075\nbell_Number(170) == 151879\nbell_Number(171) == 67789\nbell_Number(172) == 130799\nbell_Number(173) == 633250\nbell_Number(174) == 13488\nbell_Number(175) == 53415\nbell_Number(176) == 1"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(bell_Number(2))\nprint(bell_Number(3))\nprint(bell_Number(4))\nprint(bell_Number(5))\nprint(bell_Number(6))\nprint(bell_Number(7))\nprint(bell_Number(8))\nprint(bell_Number(9))\nprint(bell_Number(10))\n\nprint(bell_Number(11))\nprint(bell_Number(12))\nprint(bell_Number(13))\nprint(bell_Number(14))\nprint(bell_Number(15))\nprint(bell_Number(16))\nprint(bell_Number(17))\nprint(bell_Number(18))\nprint(bell_Number(19))\nprint(bell_Number(20))\n\nprint(bell_Number(101))\nprint(bell_Number(102))\nprint(bell_Number(103))\nprint(bell_Number(104))\nprint(bell_Number(105))\nprint(bell_Number(106))\nprint(bell_Number(107))\nprint(bell_Number(108))\nprint(bell_Number(109))\nprint(bell_Number(110))\n\nprint(bell_Number(111))\nprint(bell_Number(112))\nprint(bell_Number(113))\nprint(bell_Number(114))\nprint(bell_Number(115))\nprint(bell_Number(116))\nprint(bell_Number(117))\nprint(bell_Number(118))\nprint(bell_Number(119))\nprint(bell_Number(120))\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     bell_Number(2) == 2\nassert     bell_Number(3) == 5\nassert     bell_Number(4) == 7\nassert     bell_Number(5) == 13\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef number_of_prime(n): \n    '''\n    Write a python function to find nth prime number.\n    '''\n    pass\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert remove_kth_element([1,2,3,4,5], 1) == [1,2,3,4]\nassert remove_kth_element([1,2,3,4,5], 2) == [1,2,4,5]\nassert remove_kth_element([1,2,3,4,5], 3) == [1,2,4]\nassert remove_kth_element([1,2,3,4,5], 4) == [1,2,4]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_kth_element([1,2,3,4,5], 3) == [1,2,4,5]\nassert     remove_kth_element([1,2,3,4,5], 1) == [2,3,4,5]\nassert     remove_kth_element([1,2,3,4,5], 5) == [1,2,3,4]\n\nprint('Test passed')\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_kth_element([1, 2, 3, 4, 5], 2) == [1, 2, 3, 4, 5]\nassert     remove_kth_element([1, 2, 3, 4, 5], 2) == [1, 3, 4, 5]\nassert     remove_kth_element([1, 2, 3, 4, 5], 3) == [1, 2, 4, 5]\nassert     remove_kth_element([1, 2, 3, 4, 5], 4) == [1, 2, 3, 5]\nassert     remove_kth_element([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_kth_element([1, 2, 3, 4], 2) ==[1, 3, 4]\nassert     remove_kth_element([1, 2, 3, 4], 3) ==[1, 2, 4]\nassert     remove_kth_element([1, 2, 3, 4], 4) ==[1, 2, 3]\nassert     remove_kth_element([1, 2, 3, 4], 1) ==[2, 3, 4]\nassert     remove_kth_element([1, 2, 3, 4], 0) ==[1, 2, 3, 4]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_kth_element([1,2,3,4,5,6], 2) ==     [1,2,3,5,6], \"Should be [1,2,3,5]\"\nassert     remove_kth_element([2,3,4,5,6], 2) ==     [2,3,4,6], \"Should be [2,3,4,6]\"\nassert     remove_kth_element([1,2,3,4,5,6], 6) ==     [1,2,3,4,5], \"Should be [1,2,3,4,5]\"\nassert     remove_kth_element([1,2,3,4,5,6], 0) ==     [1,2,3,4,5,6], \"Should be [1,2,3,4,5,6]\"\nassert     remove_kth_element([1,2,3,4,5,6], 7) ==     [1,2,3,4,5], \"Should be [1,2,3,4,5]\"\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_kth_element([0,1,2,3,4,5,6,7,8,9], 10) == [0,1,2,3,4,5,6,7,8,9]\nassert     remove_kth_element([1,2,3,4,5,6,7,8,9,10], 10) == [1,2,3,4,5,6,7,8,9]\nassert     remove_kth_element([1,2,3,4,5,6,7,8,9,10,11], 10) == [1,2,3,4,5,6,7,8,9,10]\nassert     remove_kth_element([1,2,3,4,5,6,7,8,9,10,11,12], 10) == [1,2,3,4,5,6,7,8,9,10,11]\nassert     remove_kth_element([1,2,3,4,5,6,7,8,9,10,11,12,13], 10) == [1,2,3,4,5,6,7,8,9,10,11,12]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_kth_element([1,2,3,4,5], 2) == [1,2,4,5], 'Not same'\nassert     remove_kth_element([1,2,3,4,5], 1) == [1,2,4,5], 'Not same'\nassert     remove_kth_element([1,2,3,4,5], 0) == [1,2,3,4,5], 'Not same'\nassert     remove_kth_element([1,2,3,4,5], 0) == [1,2,3,4], 'Not same'\nassert     remove_kth_element([1,2,3,4,5], 5) == [1,2,3,4], 'Not same'\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_kth_element([1,2,3,4], 0) == [1,2,3,4], 'Wrong Output'\nassert     remove_kth_element([1,2,3,4], 1) == [2,3,4], 'Wrong Output'\nassert     remove_kth_element([1,2,3,4], 2) == [1,3,4], 'Wrong Output'\nassert     remove_kth_element([1,2,3,4], 3) == [1,2,4], 'Wrong Output'\nassert     remove_kth_element([1,2,3,4], 4) == [1,2,3], 'Wrong Output'\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert max_of_nth([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]], 3) == 9\nassert max_of_nth([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]], 2) == 15\nassert max_of_nth([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]], 1) == 11\nassert max_of_nth([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]], 0) == 6\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_of_nth([[4, 9, 5],\n                    [1, 5, 3],\n                    [3, 8, 9]], 1) == 9, \\\n    'incorrect max_of_nth'\nassert     max_of_nth([[4, 9, 5],\n                    [1, 5, 3],\n                    [3, 8, 9]], 0) == 4, \\\n    'incorrect max_of_nth'\nassert     max_of_nth([[4, 9, 5],\n                    [1, 5, 3],\n                    [3, 8, 9]], 2) == 8, \\\n    'incorrect max_of_nth'\nassert     max_of_nth([[4, 9, 5],\n                    [1, 5, 3],\n                    [3, 8, 9]], 5) == 9, \\\n    'incorrect max_of_nth'\nassert     max_of_nth([[4, 9, 5],\n                    [1, 5, 3],\n                    [3, 8, 9]], 7) == 9, \\\n    'incorrect max_of_nth'\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nmax_of_nth([[3,4,7],[7,8,9],[3,9,4]]) == 9\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_of_nth([[1,2,3],\n                       [4,5,6],\n                       [7,8,9]],\n                     3) == 9, 'Wrong answer'\nassert     max_of_nth([[1,2,3],\n                       [4,5,6],\n                       [7,8,9]],\n                     1) == 8, 'Wrong answer'\nassert     max_of_nth([[1,2,3],\n                       [4,5,6],\n                       [7,8,9]],\n                     0) == 9, 'Wrong answer'\nassert     max_of_nth([[1,2,3],\n                       [4,5,6],\n                       [7,8,9]],\n                     -1) == 9, 'Wrong answer'\n\ndef max_of_nth_even(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    pass\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_of_nth([[1,3,4],\n                      [2,5,6],\n                      [3,7,8]], 1) == 6\nassert     max_of_nth([[1,3,4],\n                      [2,5,6],\n                      [3,7,8]], 2) == 8\nassert     max_of_nth([[1,3,4],\n                      [2,5,6],\n                      [3,7,8]], 3) == 8\nassert     max_of_nth([[1,3,4],\n                      [2,5,6],\n                      [3,7,8]], 4) == 5\nassert     max_of_nth([[1,3,4],\n                      [2,5,6],\n                      [3,7,8]], 5) == 4\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_of_nth([[1, 2, 3],\n                                            [4, 5, 6],\n                                            [7, 8, 9]], 1) == 8\nassert     max_of_nth([[1, 2, 3],\n                                            [4, 5, 6],\n                                            [7, 8, 9]], 2) == 6\nassert     max_of_nth([[1, 2, 3],\n                                            [4, 5, 6],\n                                            [7, 8, 9]], 3) == 9\nassert     max_of_nth([[1, 2, 3],\n                                            [4, 5, 6],\n                                            [7, 8, 9]], 4) == 5\nassert     max_of_nth([[1, 2, 3],\n                                            [4, 5, 6],\n                                            [7, 8, 9]], 5) == 7\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_of_nth([[3, 6, -2],\n                      [4, 5, -1],\n                      [1, 8, -5]], 2) == 6, 'Wrong result for matrix'\nassert     max_of_nth([[3, 6, -2],\n                      [4, 5, -1],\n                      [1, 8, -5]], 3) == 8, 'Wrong result for matrix'\nassert     max_of_nth([[3, 6, -2],\n                      [4, 5, -1],\n                      [1, 8, -5]], 4) == 3, 'Wrong result for matrix'\nassert     max_of_nth([[3, 6, -2],\n                      [4, 5, -1],\n                      [1, 8, -5]], 5) == -2, 'Wrong result for matrix'\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_of_nth([[5, 3, 4, 7], \n                    [2, 3, 8, 9], \n                    [1, 2, 3, 4], \n                    [2, 5, 7, 9]],\n                2) == 9\nassert     max_of_nth([[5, 3, 4, 7], \n                    [2, 3, 8, 9], \n                    [1, 2, 3, 4], \n                    [2, 5, 7, 9]],\n                3) == 8\nassert     max_of_nth([[5, 3, 4, 7], \n                    [2, 3, 8, 9], \n                    [1, 2, 3, 4], \n                    [2, 5, 7, 9]],\n                4) == 7\nassert     max_of_nth([[5, 3, 4, 7], \n                    [2, 3, 8, 9], \n                    [1, 2, 3, 4], \n                    [2, 5, 7, 9]],\n                5) == 9\nassert     max_of_nth([[5, 3, 4, 7], \n                    [2, 3, 8, 9], \n                    [1, 2, 3, 4], \n                    [2, 5, 7, 9]],\n                6) == 5\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     merge([[1, 3], [2, 4], [3, 5]]) == [[1, 2], [3, 4], [5, 3]]\nassert     merge([[1, 3], [2, 4], [5, 3]]) == [[1, 2], [3, 5]]\nassert     merge([[1, 3], [2, 4]]) == [[1, 2], [3, 4]]\nassert     merge([[1, 3]]) == [[1, 3]]\nassert     merge([[]]) == [[]]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     merge([[1,2],\n               [2,3],\n               [3,4],\n               [4,5]]) == [[1,2],[2,3],[3,4],[4,5]], 'test 1 failed'\nassert     merge([[2,3],\n               [3,4],\n               [4,5]]) == [[2,3],[3,4],[4,5]], 'test 2 failed'\nassert     merge([[1,2,3,4,5],\n               [6,7,8,9,10],\n               [11,12,13,14,15]]) == [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]], 'test 3 failed'"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     merge([[1, 2], [3, 4]]) == [[1, 3], [2, 4]], \"Test Failed\"\nassert     merge([[1, 2], [3, 4], [5, 6]]) == [[1, 3], [2, 4], [5, 6]], \"Test Failed\"\nassert     merge([[1], [2], [3], [4], [5]]) == [[1], [2], [3], [4], [5]], \"Test Failed\"\nassert     merge([[1, 2], [3, 4, 5], [6, 7, 8]]) == [[1, 2], [3, 4, 5], [6, 7, 8]], \"Test Failed\"\nassert     merge([[1, 2], [3, 4], [5], [6, 7]]) == [[1, 2], [3, 4], [5], [6, 7]], \"Test Failed\"\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     merge([[1, 2],\n                [3, 4]]    ) == [[1, 2],\n                                [3, 4]]\nassert     merge([[1, 2],\n                [3, 4, 5]]    ) == [[1, 2],\n                                [3, 4],\n                                [5]]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nmerge([[1, 2], [3, 4]]) == [[1, 2], [3, 4]]\nassert \nmerge([[1, 3], [2, 4]]) == [[1, 2], [3, 4]]\nassert \nmerge([[1, 3], [2, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]\nassert \nmerge([[1, 3], [2, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]\nassert \nmerge([[1, 3], [2, 4], [5, 6], [7, 8]]) == [[1, 2], [3, 4], [5, 6], [7, 8]]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     merge([[1, 2], [3, 4]]) == [[1, 3], [2, 4]]\nassert     merge([[1, 2], [3, 4], [5, 6]]) == [[1, 5], [2, 3], [4, 6]]\nassert     merge([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]\nassert     merge([[2, 3], [5, 6], [7, 8]]) == [[2, 7], [3, 5], [6, 8]]\nassert     merge([[2], [5], [7]]) == [[2], [5], [7]]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nmerge([1,2,3,4,5]) == [[1, 2], [3, 4], [5]]\n\nmerge([1,2,3,4,5,6,7,8,9]) == [[1, 2], [3, 4], [5, 6], [7, 8], [9]]\n\nmerge([]) == []\n\nmerge([[], []]) == [[], []]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     merge([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]\nassert     merge([[1], [2], [3], [4]]) == [[1], [2], [3], [4]]\nassert     merge([[1], [2]]) == [[1], [2]]\nassert     merge([[], [2], []]) == [[], [2]]\nassert     merge([[1, 2], [3], [], [4]]) == [[1, 2], [3], [4]]\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     cummulative_sum([0,1,2,3,4,5])==[0,1,3,6,10,15]\nassert     cummulative_sum([1,2,3,4,5,6])==[1,3,6,10,15,21]\nassert     cummulative_sum([-1,-2,-3])==[-1,-3,-6]\nassert     cummulative_sum([])==[]\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     cummulative_sum([1,2,3]) == [1,3,6]\nassert     cummulative_sum([1,2,3]) == [1,3,6]\nassert     cummulative_sum([1,2,3,4]) == [1,3,6,10]\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     cummulative_sum((1,2,3,4,5,6)) == (1,3,6,10,15,21)\nassert     cummulative_sum((6,5,4,3,2,1)) == (6,11,16,22,27,32)\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     cummulative_sum([1,2,3,4,5,6]) == [1,3,6,10,15,21]\nassert     cummulative_sum([-1,-2,-3,-4,-5,-6]) == [-1,-3,-6,-10,-15,-21]\nassert     cummulative_sum([-1,-2,3,-4,-5]) == [-1,0,-3,0,0]\nassert     cummulative_sum([]) == []\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     cummulative_sum(test_list) == [\n        1, 5, 15, 25, 35, 45, 55, 65, 75, 85, 95, 105, 115, 125, 135, 145, 155, 165, 175, 185, 195, 205, 215, 225, 235, 245,\n        255, 265, 275, 285, 295, 305, 315, 325, 335, 345, 355, 365, 375, 385, 395, 405, 415, 425, 435, 445, 455, 465, 475,\n        485, 495, 505, 515, 525, 535, 545, 555, 565, 575, 585, 595, 605, 615, 625, 635, 645, 655, 665, 675, 685, 695, 705,\n        705, 715, 725, 735, 745, 755, 765, 775, 785, 795, 805, 815, 825, 835, 845, 855, 865, 875, 885, 895, 905, 915, 925,\n        935, 945, 955, 965, 975, 985, 995, 1015, 1025, 1035, 1045, 1055, 1065, 1075, 1085, 1095, 1115, 1125, 1135, 1145,\n        1155, 1165, 1175, 1185, 1195, 1205, 1215, 1225, 1235, 1245, 1255, 1265, 1275, 1285, 1295, 1315, 1325, 1335, 1345,\n        1355, 1365, 1375, 1385, 1395, 1415, 1425, 1435, 1445, 1455, 1465, 1475, 1485, 1495, 1515, 1525, 1535, 1545, 1555,\n        1565, 1575, 1585, 1595, 1615, 1625, 1635, 1645, 1655, 1665, 1675, 1685, 1695, 1715, 1725, 1735, 1745, 1755, 1765,\n        1775, 1785, 1795, 1815, 1825, 1835, 1845, 1855, 1865, 1875, 1885, 1895, 1925, 1925, 1925, 1925, 1925, 1925,\n        1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925,\n        1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925,\n        1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925,\n        1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925,\n        1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925,\n        1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925,\n        1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925,\n        1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925,\n        1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925,\n        1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925,\n        1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925,\n        1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925,\n        1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925,\n        1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925,\n        1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925,\n        1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925,\n        1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925,\n        1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925,\n        1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925,\n        1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925,\n        1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925,\n        1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925,\n        1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925,\n        1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925,\n        1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925,\n        1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925,\n        1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925,\n        1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925,\n        1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925,\n        1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925,\n        1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925,\n        1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925,\n        1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925,\n        1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925,\n        1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925, 1925,\n        1925, 1925, 1925, 1925, 192"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ntest_list = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\ncummulative_sum(test_list) #should return  0, 1, 3, 6, 10, 15, 21, 28, 36, 45, 55\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     average_tuple(((1, 2, 3, 4), (4, 5, 6, 7), (8, 9, 10, 11))) == (2.5, 3.5, 4.5)\nassert     average_tuple(((1, 2, 3, 4), (4, 5, 6, 7), (8, 9, 10, 11))) == (2.5, 3.5, 4.5)\nassert     average_tuple(((1, 2, 3, 4), (4, 5, 6, 7), (8, 9, 10, 11))) == (2.5, 3.5, 4.5)\nassert     average_tuple(((1, 2, 3, 4), (4, 5, 6, 7), (8, 9, 10, 11))) == (2.5, 3.5, 4.5)\n\ndef average_tuple_2(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    pass\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     average_tuple(((1,), (2,), (3,))) == [2]\nassert     average_tuple(((1,), (2,), (3,), (4,))) == [2.5]\nassert     average_tuple(((1, 2), (3, 4), (5, 6))) == [3, 4, 5]\nassert     average_tuple(((2,), (2, 2), (3, 4))) == [2, 2.5, 3.5]\nassert     average_tuple(((3,), (3, 3), (4, 4))) == [3, 3, 4]\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     average_tuple((1, 2)) == 1.5, 'WRONG! Expected 1.5, got %s' % (average_tuple((1, 2)))\nassert     average_tuple((2, 3)) == 2.0, 'WRONG! Expected 2.0, got %s' % (average_tuple((2, 3)))\nassert     average_tuple((3, 4, 5, 6)) == 2.5, 'WRONG! Expected 2.5, got %s' % (average_tuple((3, 4, 5, 6)))\nassert     average_tuple((4, 5, 6)) == 3.0, 'WRONG! Expected 3.0, got %s' % (average_tuple((4, 5, 6)))\nassert     average_tuple((5, 6)) == 3.0, 'WRONG! Expected 3.0, got %s' % (average_tuple((5, 6)))\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert         average_tuple((1,2,3)) == (1,2,3), \\\n                'incorrect output for tuple (1,2,3)'\nassert         average_tuple((2,2,2)) == (2,2,2), \\\n                'incorrect output for tuple (2,2,2)'\nassert         average_tuple((2,2,2,2)) == (2,2,2,2), \\\n                'incorrect output for tuple (2,2,2,2)'\nassert         average_tuple((3,4,5)) == (3,4,5), \\\n                'incorrect output for tuple (3,4,5)'\nassert         average_tuple((2.0,2.0,2.0)) == (2.0,2.0,2.0), \\\n                'incorrect output for tuple (2.0,2.0,2.0)'\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     average_tuple([[1, 2], [3, 4]]) == [2.0, 3.0]\nassert     average_tuple([[1, 2, 3], [4, 5, 6]]) == [2.5, 5.0, 5.5]\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     average_tuple(((1,2),(3,4),(5,6))) == ([2,3,4], [3,4,5], [5,6,7])\nassert     average_tuple(((1,2),(3,4,5),(5,6,7))) == ([2,3,4], [3,4,5], [5,6,7])\nassert     average_tuple(((1,2),(3,4,5,6),(5,6,7,8))) == ([2,3,4], [3,4,5,6], [5,6,7,8])\n\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\""
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     average_tuple([(1, 2), (1, 3), (2, 3)]) == [(1 + 1 + 2)/3, (1 + 1 + 3)/3, (2 + 1 + 3)/3]\nassert     average_tuple(((1, 1), (2, 2), (3, 3))) == [(1 + 2 + 3) / 3]\nassert     average_tuple([]) == []\nassert     average_tuple([(1, 2)]) == [(1 + 2) / 2]\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     average_tuple([[1, 2, 3], [4, 5, 6], [7, 8, 9]]    ==\n[1.8, 3.6, 5.4])\nassert     average_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) ==\n[1.8, 3.6, 5.4]\nassert     average_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) ==\n[1.8, 3.6, 5.4]\nassert     average_tuple([[1, 2, 3], [4, 5, 6]]    ==\n[1.8, 3.6])\nassert     average_tuple([(1, 2, 3), (4, 5, 6)]) ==\n[1.8, 3.6]\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     average_tuple(()) == (), \\\n    print(\"The function average_tuple should return an empty tuple if the input tuple is empty.\")\nassert     average_tuple(((1, 2, 3), (4, 5, 6))) == (5.0, 6.0, 7.0), \\\n    print(\"The function average_tuple should return the average value of each tuple as a list.\")\nassert     average_tuple(((1, 2, 3), (4, 5, 6), (1, 2, 3))) == (5.0, 6.0, 7.0), \\\n    print(\"The function average_tuple should return the average value of each tuple as a list.\")\nassert     average_tuple(((1, 2, 3), (4, 5, 6), (1, 2, 3))) == (5.0, 6.0, 7.0), \\\n    print(\"The function average_tuple should return the average value of each tuple as a list.\")\nassert     average_tuple(((1, 2, 3), (4, 5, 6), (1, 2, 3))) == (5.0, 6.0, 7.0), \\\n    print(\"The function average_tuple should return the average value of each tuple as a list.\")\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     average_tuple(() == ()), \"The empty tuple should be equal to the empty tuple\"\nassert     average_tuple((1,) == (1,)),\"The tuple with a single value should be equal to the tuple with the same value\"\nassert     average_tuple(((1,),) == (1,)),\"The tuple with a single value should be equal to the tuple with the same value\"\nassert     average_tuple(((1,2),(3,4)) == (2,3.5)),\"The average tuple should be equal to the average tuple\"\nassert     average_tuple(((1,2),(3,4,5)) == (2,3.5,4.5)),\"The average tuple should be equal to the average tuple\"\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tuple_modulo((1, 1), (1, 1)) == (0, 0), \"Wrong value of tuple_modulo\"\nassert     tuple_modulo((2, 4), (3, 8)) == (1, 0), \"Wrong value of tuple_modulo\"\nassert     tuple_modulo((0, 1), (1, 1)) == (0, 0), \"Wrong value of tuple_modulo\"\nassert     tuple_modulo((3, 7), (3, 7)) == (0, 0), \"Wrong value of tuple_modulo\"\nassert     tuple_modulo((0, 0), (0, 0)) == (0, 0), \"Wrong value of tuple_modulo\"\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_modulo(tuple_1, tuple_2) == (0,0)\nassert tuple_modulo(tuple_2, tuple_3) == (0,0)\nassert tuple_modulo(tuple_3, tuple_1) == (0,0)\nassert tuple_modulo(tuple_4, tuple_5) == (0,0)\nassert tuple_modulo(tuple_5, tuple_4) == (0,0)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_modulo(tup1, tup2) == (0, 1)\nassert tuple_modulo(tup1, tup3) == (0, 0)\nassert tuple_modulo(tup1, tup4) == (0, 0)\nassert tuple_modulo(tup1, tup5) == (0, 0)\nassert tuple_modulo(tup2, tup1) == (0, 1)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tuple_modulo((1, 2), (3, 4)) == (1, 2), \"The output should be (1, 2)\"\nassert     tuple_modulo((-1, -2), (-3, -4)) == (-2, -2), \"The output should be (-2, -2)\"\nassert tuple_modulo((0, 0), (0, 0)) == (0, 0), \"The output should be (0, 0)\"\nassert tuple_modulo((5, 2), (8, 4)) == (2, 2), \"The output should be (2, 2)\"\nassert tuple_modulo((3, 2), (2, -1)) == (1, 2), \"The output should be (1, 2)\"\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tuple_modulo((0, 1, 2, 3, 4), (0, 1, 2, 3, 4)) == (0, 0, 2, 3, 4)\nassert tuple_modulo((-1, -2, -3, -4), (0, 1, 2, 3, 4)) == (0, 0, 2, 3, 0)\n\ndef tuple_recursion(tup):\n    '''\n    Write a function which takes a tuple as an argument and returns a new tuple consisting of the product of all the elements in the input tuple.\n    '''\n    pass\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tuple_modulo((3,4),(2,4)) == (1,2)\nassert     tuple_modulo((5,5,5),(1,1,1)) == (4,4,4)\nassert     tuple_modulo((1,1,1),(1,1,1)) == (0,0,0)\nassert     tuple_modulo((1,2,3),(2,2,2)) == (1,0,1)\nassert     tuple_modulo((1,2,3,4),(2,2,2)) == (0,1,1,1)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tuple_modulo((1,2,3), (4,5,6)) == (1,2,3)\nassert     tuple_modulo((3,4,5), (2,3,4)) == (3,0,5)\nassert     tuple_modulo((0,3,6), (2,2,5)) == (0,2,5)\nassert     tuple_modulo((0,3,6), (2,3,4)) == (0,0,0)\nassert     tuple_modulo((1,2,3), (1,2,3)) == (0,0,0)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tuple_modulo(((1, 2, 3), (1, 2, 3)), ((1, 2, 3), (1, 2, 3))) == (0, 0, 0)\nassert     tuple_modulo(((1, 2, 3), (1, 2, 3)), ((0, 2, 3), (0, 2, 3))) == (1, 2, 3)\nassert     tuple_modulo(((1, 2, 3), (1, 2, 3)), ((2, 4, 6), (2, 4, 6))) == (0, 4, 0)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tuple_modulo((4, 7), (2, 3)) == (2, 1)\nassert     tuple_modulo((4, 4), (2, 3)) == (2, 0)\nassert     tuple_modulo((-1, 3), (2, 3)) == (2, 1)\nassert     tuple_modulo((4, 3), (2, 3)) == (2, 0)\nassert     tuple_modulo((1, 7), (4, 3)) == (1, 2)\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     min_Jumps(6, 1) == 4\nassert     min_Jumps(6, 3) == 5\nassert     min_Jumps(6, 5) == 6\nassert     min_Jumps(6, 7) == 7\nassert     min_Jumps(6, 9) == 8\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     min_Jumps(2, 5) == 2\nassert     min_Jumps(8, 7) == 4\nassert     min_Jumps(6, 7) == 1\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 1:\n        return 1\n    else:\n        if steps == 2 and d == 1:\n            return 1\n        else:\n            return min(min_Jumps(steps-1, d-1), min_Jumps(steps-1, d)) + 1\n\ndef min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    steps = steps - 1\n    if steps == 1:\n        return 1\n    else:\n        if steps == 2 and d == 1:\n            return 1\n        else:\n            return min(min_Jumps(steps-1, d-1), min_Jumps(steps-1, d)) + 1\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     min_Jumps(2, (1, 2)) == 2\nassert     min_Jumps(1, (1, 2)) == 2\nassert     min_Jumps(2, (3, 2)) == 3\nassert     min_Jumps(2, (2, 2)) == 2\nassert     min_Jumps(3, (2, 3)) == 3\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     min_Jumps(3, (2, 2)) ==     [[False, False, True],\n                                        [False, True, True],\n                                        [True, True, False]]\n\nassert     min_Jumps(6, (5, 5)) ==    [[False, False, True, True, True, True],\n                                        [False, False, True, False, True, True],\n                                        [False, False, True, False, False, True],\n                                        [False, False, True, False, False, False],\n                                        [False, False, True, False, False, False],\n                                        [True, True, False, False, False, False]]\n\nassert     min_Jumps(4, (3, 3)) ==     [[False, False, True, True],\n                                        [False, False, True, False],\n                                        [False, False, True, False],\n                                        [True, True, False, False]]\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(\"Testcase 1: \", min_Jumps(3, 0))\nprint(\"Testcase 2: \", min_Jumps(5, 1))\nprint(\"Testcase 3: \", min_Jumps(4, 1))\nprint(\"Testcase 4: \", min_Jumps(3, 0))\nprint(\"Testcase 5: \", min_Jumps(2, 2))\nprint(\"Testcase 6: \", min_Jumps(2, 1))\nprint(\"Testcase 7: \", min_Jumps(1, 1))\nprint(\"Testcase 8: \", min_Jumps(1, 0))\nprint(\"Testcase 9: \", min_Jumps(2, 0))\nprint(\"Testcase 10: \", min_Jumps(3, 0))\nprint(\"Testcase 11: \", min_Jumps(3, 1))\nprint(\"Testcase 12: \", min_Jumps(2, 2))\nprint(\"Testcase 13: \", min_Jumps(3, 1))\nprint(\"Testcase 14: \", min_Jumps(1, 1))\nprint(\"Testcase 15: \", min_Jumps(1, 0))\nprint(\"Testcase 16: \", min_Jumps(2, 0))\nprint(\"Testcase 17: \", min_Jumps(3, 0))\nprint(\"Testcase 18: \", min_Jumps(3, 1))\nprint(\"Testcase 19: \", min_Jumps(2, 2))\nprint(\"Testcase 20: \", min_Jumps(2, 1))\nprint(\"Testcase 21: \", min_Jumps(2, 1))\nprint(\"Testcase 22: \", min_Jumps(2, 0))\nprint(\"Testcase 23: \", min_Jumps(2, 0))\nprint(\"Testcase 24: \", min_Jumps(1, 0))\nprint(\"Testcase 25: \", min_Jumps(1, 1))\nprint(\"Testcase 26: \", min_Jumps(1, 0))\nprint(\"Testcase 27: \", min_Jumps(3, 0))\nprint(\"Testcase 28: \", min_Jumps(3, 1))\nprint(\"Testcase 29: \", min_Jumps(1, 1))\nprint(\"Testcase 30: \", min_Jumps(3, 0))\nprint(\"Testcase 31: \", min_Jumps(2, 1))\nprint(\"Testcase 32: \", min_Jumps(2, 2))\nprint(\"Testcase 33: \", min_Jumps(1, 0))\nprint(\"Testcase 34: \", min_Jumps(1, 1))\nprint(\"Testcase 35: \", min_Jumps(2, 1))\nprint(\"Testcase 36: \", min_Jumps(1, 1))\nprint(\"Testcase 37: \", min_Jumps(3, 0))\nprint(\"Testcase 38: \", min_Jumps(2, 0))\nprint(\"Testcase 39: \", min_Jumps(1, 0))\nprint(\"Testcase 40: \", min_Jumps(3, 1))\nprint(\"Testcase 41: \", min_Jumps(3, 1))\nprint(\"Testcase 42: \", min_Jumps(2, 2))\nprint(\"Testcase 43: \", min_Jumps(2, 1))\nprint(\"Testcase 44: \", min_Jumps(3, 0))\nprint(\"Testcase 45: \", min_Jumps(3, 1))\nprint(\"Testcase 46: \", min_Jumps(2, 1))\nprint(\"Testcase 47: \", min_Jumps(3, 1))\nprint(\"Testcase 48: \", min_Jumps(2, 2))\nprint(\"Testcase 49: \", min_Jumps(3, 2))\nprint(\"Testcase 50: \", min_Jumps(2, 1))\nprint(\"Testcase 51: \", min_Jumps(2, 1))\nprint(\"Testcase 52: \", min_Jumps(3, 1))\nprint(\"Testcase 53: \", min_Jumps(3, 1))\nprint(\"Testcase 54: \", min_Jumps(1, 2))\nprint(\"Testcase 55: \", min_Jumps(1, 2))\nprint(\"Testcase 56: \", min_Jumps(1, 1))\nprint(\"Testcase 57: \", min_Jumps(1, 1))\nprint(\"Testcase 58: \", min_Jumps(2, 1))\nprint(\"Testcase 59: \", min_Jumps(2, 1))\nprint(\"Testcase 60: \", min_Jumps(1, 1))\nprint(\"Testcase 61: \", min_Jumps(1, 1))\nprint(\"Testcase 62: \", min_Jumps(1, 0))\nprint(\"Testcase 63: \", min_Jumps(1, 0))\nprint(\"Testcase 64: \", min_Jumps(1, 1))\nprint(\"Testcase 65: \", min_Jumps(1, 0))\nprint(\"Testcase 66: \", min_Jumps(1, 1))\nprint(\"Testcase 67: \", min_Jumps(3, 0))\nprint(\"Testcase 68: \", min_Jumps(2, 1))\nprint(\"Testcase 69: \", min_Jumps(2, 1))\nprint(\"Testcase 70: \", min_Jumps(2, 1))\nprint(\"Testcase 71: \", min_Jumps(2, 1))\nprint(\"Testcase 72: \", min_Jumps(2, 1))\nprint(\"Testcase 73: \", min_Jumps(2, 1))\nprint(\"Testcase 74: \", min_Jumps(2, 1))\nprint(\"Testcase 75: \", min_Jumps(2, 1))\nprint(\"Testcase 76: \", min_Jumps(3, 1))\nprint(\"Testcase 77: \", min_Jumps(3, 1))\nprint(\"Testcase 78: \", min_Jumps(2, 1))\nprint(\"Testcase 79: \", min_Jumps(3, 1))\nprint(\"Testcase 80: \", min_Jumps(2, 1))\nprint(\"Testcase 81: \", min_Jumps(2, 1))\nprint(\"Testcase 82: \", min_Jumps(3, 1))\nprint(\"Testcase 83: \", min_Jumps(3, 1))\nprint(\"Testcase 84: \", min_Jumps(2, 1))\nprint(\"Testcase 85: \", min_Jumps(2, 1))\nprint(\"Testcase 86: \", min_Jumps(3, 1))\nprint(\"Testcase 87: \", min_Jumps(3, 1))\nprint(\"Testcase 88: \", min_Jumps(3, 1))\nprint(\"Testcase 89: \", min_Jumps(3, 1))\nprint(\"Testcase 90: \", min_Jumps(2, 1))\nprint(\"Testcase 91: \", min_Jumps(3, 1))\nprint(\"Testcase 92: \", min_Jumps(1, 1))\nprint(\"Testcase 93: \", min_Jumps(1, 1))\nprint(\"Testcase 94: \", min_Jumps(2, 1))\nprint(\"Testcase 95: \", min_Jumps(2, 1))\nprint(\"Testcase 96: \", min_Jumps(3, 1))\nprint(\"Testcase 97: \", min_Jumps(3, 1))\nprint(\"Testcase 98: \", min_Jumps(1, 1))\nprint(\"Testcase 99: \", min_Jumps(3, 1))\nprint(\"Testcase 100: \", min_Jumps(3, 1))\nprint(\"Testcase 101: \", min_Jumps(3, 1))\nprint(\"Testcase 102: \", min_Jumps(3, 1))\nprint(\"Testcase 103: \", min_Jumps(2, 1))\nprint(\"Testcase 104: \", min_Jumps(2, 1))\nprint(\"Testcase 105: \", min_Jumps(3, 1))\nprint(\"Testcase 106: \", min_Jumps(3, 1))\nprint(\"Testcase 107: \", min_Jumps(3, 1))\nprint(\"Testcase 108: \", min_Jumps(3, 1))\nprint(\"Testcase 109: \", min_Jumps(3, 1))\nprint(\"Testcase 110: \", min_Jumps(3, 1))\nprint(\"Testcase 111: \", min_Jumps(2, 1))\nprint(\"Testcase 112: \", min_Jumps(3, 1))\nprint(\"Testcase 113: \", min_Jumps(3, 1))\nprint(\"Testcase 114: \", min_Jumps(1, 1))\nprint(\"Testcase 115: \", min_Jumps(1, 1))\nprint(\"Testcase 116: \", min_Jumps(3, 1))\nprint(\"Tes"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     min_Jumps(steps, d) == 3\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     min_Jumps(8, (7,3)) == 0, 'Wrong: min_Jumps(8, (7,3))'\nassert     min_Jumps(9, (7,3)) == 1, 'Wrong: min_Jumps(9, (7,3))'\nassert     min_Jumps(7, (7,3)) == 1, 'Wrong: min_Jumps(7, (7,3))'\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     min_Jumps(7, (2,4)) == 2, \"Test Case 1 Failed\"\nassert     min_Jumps(1, (0,0)) == 0, \"Test Case 2 Failed\"\nassert     min_Jumps(1, (1,1)) == 1, \"Test Case 3 Failed\"\n\ndef min_Jumps_v2(steps, d): \n    '''\n    Use DP or Greedy Algo\n    '''\n    pass\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ndiv_list([2,4,6],[1,2,3]) == [[2, 2, 3], [1, 4, 6]]\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ndiv_list([1,2,3],[4,5,6]) == [[0.25, 0.25, 0.25], [0.5, 0.5, 0.5]]\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(div_list([3,5,1,6], [2,6,1,8])) # 0\nassert div_list([4,2,8,5,6,7], [6,1,8,2,9,3]) == False # 0\nassert div_list([0,0], [0,0]) == True # 1\nassert div_list([-5,-7,-3,-6], [2,-2]) == True # 1\nassert div_list([0], [0]) == True # 2\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ndiv_list([1,2,3,4], [3,2,1]) == [[1,2,3,4],[0,0,0]]\nprint('Correct')\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef count_list(nums):\n    '''\n    Write a function to count even and odd number in a list.\n    '''\n    pass\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     move_num('elements') == 'elementsa'\nassert     move_num('testing') == 'testing'\nassert     move_num('testing') == 'testing'\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     move_num(\"a1b2c3d4\") == \"d4c3b2a1\", \"Should move the whole string\"\nassert     move_num(\"1234\") == \"3412\", \"Should move the whole string\"\nassert     move_num(\"123456789\") == \"891234567\", \"Should move the whole string\"\nassert     move_num(\"a1b2c3d4a5b6c7\") == \"a5b6c7d4a3b2\", \"Should move the whole string\"\nassert     move_num(\"\") == \"\", \"Should be an empty string\"\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     move_num(\"12ab34cd\") == \"dcbac234\"\nassert     move_num(\"45c76eeb\") == \"eeb45c76\"\nassert     move_num(\"12a7890\") == \"7890a12\"\nassert     move_num(\"12345123\") == \"31234512\"\nassert     move_num(\"12a456789\") == \"8912a4567\"\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     move_num(\"0TowLoW\") == \"owTowLoW\"\nassert     move_num(\"12345\") == \"54321\"\nassert     move_num(\"123456789\") == \"891234567\"\nassert     move_num(\"\") == \"\"\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     move_num(\"a1b2c3d4\") == \"d24abcbc\", \"should be: d24abcbc\"\nassert     move_num(\"abcdefg\") == \"efgabcdef\", \"should be: efgabcdef\"\nassert     move_num(\"\") == \"\", \"should be:\", \"\", \nassert     move_num(\"a\") == \"a\", \"should be: a\"\n\ndef remove_duplicate_letters(test_str):\n    '''\n    Write a function to remove duplicate letters. \n    '''\n    pass\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     move_num(\"string\") == \"string\"\nassert     move_num(\"\") == \"\"\nassert     move_num(\"a\") == \"a\"\nassert     move_num(\"a0\") == \"a0\"\nassert     move_num(\"a1\") == \"a1\"\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     move_num('0:12345') == ':123450'\nassert     move_num('1:001:012345') == ':001:0123451'\nassert     move_num('0:abc123:') == ':abc1230'"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     move_num('1') == '1', 'test 1 is wrong'\nassert     move_num('12345') == '54321', 'test 2 is wrong'\nassert     move_num('1234') == '4321', 'test 3 is wrong'\nassert     move_num('13') == '31', 'test 4 is wrong'\nassert     move_num('123') == '321', 'test 5 is wrong'\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     largest_subset([]) == 0\nassert     largest_subset([2, 2]) == 0\nassert     largest_subset([3, 2]) == 0\nassert     largest_subset([3, 2, 6]) == 0\nassert     largest_subset([2, 2, 3]) == 0\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     largest_subset([6,2,5,9,8,7,3,4,5,9,1]) == 11, 'Wrong answer.'\nassert     largest_subset([3,2,4,5,6,7]) == 7, 'Wrong answer.'\nassert     largest_subset([1,2,3,4,5,6,7,8,9,10]) == 5, 'Wrong answer.'\nassert     largest_subset([6,7,8,9]) == 9, 'Wrong answer.'\nassert     largest_subset([3,9,5,7]) == 9, 'Wrong answer.'\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert largest_subset([1,2,3,4,5]) == 3\nassert largest_subset([2,3,4,6]) == 4\nassert largest_subset([3,4,5,8]) == 3\nassert largest_subset([2,4,6,8]) == 2\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a = sorted(a)\n    count = 1\n    count2 = 1\n    count3 = 1\n    count4 = 1\n    for i in range(len(a)-1):\n        if a[i] == a[i+1]:\n            count += 1\n        else:\n            count = 1\n        if count == 2:\n            count2 = count2 + 1\n        if count == 3:\n            count3 = count3 + 1\n        if count == 4:\n            count4 = count4 + 1\n\n    print(count2,count3,count4)\n    return (count2,count3,count4)\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     largest_subset([2,4,8]) == 2\nassert     largest_subset([2,4,6]) == 3\nassert     largest_subset([3,2,9]) == 3\nassert     largest_subset([6,7,8,4]) == 2\nassert     largest_subset([4,8,10,16]) == 3\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     largest_subset([1, 2, 4, 8, 16, 32]) == 5\nassert     largest_subset([1, 2, 4, 8, 16]) == 4\nassert     largest_subset([1, 2, 4, 8, 16, 32, 64, 128]) == 6\nassert     largest_subset([1, 2, 3, 4, 5, 8, 9, 10, 11]) == 10\nassert     largest_subset([1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 26\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     largest_subset([1,2,3,4,5]) == 3\nassert     largest_subset([3,4,5]) == 1\nassert     largest_subset([2,5,3,2]) == 2\nassert     largest_subset([2,4,3,2]) == 2\nassert     largest_subset([1,3,5,2]) == 1\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef largest_subset2(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    pass\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     largest_subset([1,2,3,4,5,6]) == 3, \"Failed test case 1\"\nassert     largest_subset([1,2,3,4,5]) == 1, \"Failed test case 2\"\nassert     largest_subset([1,2,3,4]) == 1, \"Failed test case 3\"\nassert     largest_subset([1,2,3,4,5]) == 1, \"Failed test case 4\"\n\n'''\nProblem 2\nWrite a function that receives a list of integers and returns an integer representing the sum of all the numbers in the list.\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert get_median([1, 3, 5, 7, 8], [2, 6, 11, 16], 4) == 3.5\nassert get_median([1, 2, 3], [4, 5, 6], 3) == 3\nassert get_median([1], [2], 1) == 1\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_median([1,2,3,4],[3,4,5,6]) == 3.5\nassert     get_median([1,2,3,4,5],[6,7,8,9]) == 6.5\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef get_median_naive(arr1, arr2):\n    '''\n    Find the median of two sorted lists of same size.\n    '''\n    if len(arr1) > len(arr2):\n        return get_median(arr2, arr1, len(arr1))\n    if len(arr1) == 0:\n        return None\n    \n    if len(arr1) % 2 == 0:\n        return (get_median(arr1[int((len(arr1)-1)/2)], arr2, len(arr1)) + get_median(arr1[int(len(arr1)/2)], arr2, len(arr1))) / 2\n    else:\n        return get_median(arr1[int((len(arr1)-1)/2)], arr2, len(arr1))"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint \n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef get_median_sorted_arrays(arr1, arr2):\n    '''\n    Find the median of two sorted lists of same size.\n    '''\n    pass\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    import random\n    arr1 = [random.randint(0, 10) for i in range(10)]\n    arr2 = [random.randint(0, 10) for i in range(10)]\n    print(arr1)\n    print(arr2)\n    print(get_median(arr1, arr2, 10))"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_median([1, 2], [1], 2) == 1.5\nassert get_median([1, 2], [1, 2], 2) == 1\nassert get_median([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], 6) == 5\nassert get_median([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], 8) == 4.5\nassert get_median([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], 5) == 4\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     nth_nums([1,2,3,4],4) == [1,4,9,16]\nassert     nth_nums([3,2,1],2) == [9,4]\nassert     nth_nums([1],1) == [1]\nassert     nth_nums([1],0) == []\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint('nth_nums',nth_nums([0,1,2],1))\n\n'''\n    The power of a number x is defined as the number of integers i, 1 <= i <= x, \n    such that x ^ i = 1.\n    \n    For example, 5 ^ 1 = 1, 5 ^ 2 = 5, and 5 ^ 3 = 125.\n    \n    Write a function that takes in a list of integers and returns a list of the \n    power of each integer.\n    \n    The power of a number x is defined as the number of integers i, 1 <= i <= x, \n    such that x ^ i = 1.\n    \n    For example, 5 ^ 1 = 1, 5 ^ 2 = 5, and 5 ^ 3 = 125.\n    \n    Write a function that takes in a list of integers and returns a list of the \n    power of each integer.\n    \n    The power of a number x is defined as the number of integers i, 1 <= i <= x, \n    such that x ^ i = 1.\n    \n    For example, 5 ^ 1 = 1, 5 ^ 2 = 5, and 5 ^ 3 = 125.\n'''"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n'''\n108. [Medium] Remove Duplicates from Sorted Array\n\nGiven a sorted array nums, remove the duplicates in-place such that each element appears only once and returns the new length.\n\nDo not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\n\nExample 1:\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     nth_nums([1,2,3],2)==[1,4,9]\nassert     nth_nums([3,2,1],3)==[3,8,27]\nassert     nth_nums([1,2],2)==[1,4]\nassert     nth_nums([1,2],3)==[1,4,9]\nassert     nth_nums([1,2,3],4)==[1,16,81]\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nn = 5\na = range(0,n+1)\nresult = nth_nums(a,n)\nprint(result)\n\nassert \nn = 6\na = range(0,n+1)\nresult = nth_nums(a,n)\nprint(result)\n\nassert \nn = 7\na = range(0,n+1)\nresult = nth_nums(a,n)\nprint(result)\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef nth_nums2(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    pass\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_upper(\"abc\") == False, \"is_upper is wrong\"\nassert     is_upper(\"ABC\") == True, \"is_upper is wrong\"\nassert     is_upper(\"1234\") == False, \"is_upper is wrong\"\nassert     is_upper(\"ABCD\") == True, \"is_upper is wrong\"\n\ndef is_palindrome(string):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_upper('RACHEL') == True\nassert     is_upper('TEST') == False\nassert     is_upper('') == True\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_upper(\"kumar\") == \"KUMAR\", \"Wrong output\"\nassert     is_upper(\"RULE\") == \"RULE\", \"Wrong output\"\nassert     is_upper(\"rul\") == \"RUL\", \"Wrong output\"\nassert     is_upper(\"M\") == \"M\", \"Wrong output\"\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_upper('Shlomi') == True, 'Failed'\nassert     is_upper('shlom') == False, 'Failed'\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_upper('hello') == True\nassert     is_upper('Hello') == False\nassert     is_upper('') == False\nassert     is_upper('  ') == False\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert is_upper('hello') == True\nassert is_upper('Hello') == True\nassert is_upper('HELLO') == True\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_upper(\"\") == False, \"Empty string is not an upper case string\"\nassert     is_upper(\"ABC\") == False, \"A string with no upper case chars\"\nassert     is_upper(\"ABCabc\") == False, \"A string with upper case chars\"\nassert     is_upper(\"ABCabc123\") == True, \"A string with upper case chars\"\n\ndef is_palindrome(string):\n    '''\n    Write a python function to check if the given string is palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_upper(\"\") == False\nassert     is_upper(\"123\") == False\nassert     is_upper(\"\") == True\nassert     is_upper(\"ABC\") == False\nassert     is_upper(\"123ABC\") == True\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_upper(\"\") == \"\"\nassert     is_upper(\"   \") == \"   \"\nassert     is_upper(\"HELLO\") == \"HELLO\"\nassert     is_upper(\"     \") == \"\"\nassert is_upper(\"HELLO\") == \"HELLO\"\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nswap_List([1,2,3,4,5]) == [5,1,2,3,4], \"Wrong result\"\nassert \nswap_List([1,2,3,4,5]) == [1,2,3,4,5], \"Wrong result\""
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     swap_List([1,2,3,4,5]) == [4,5,1,2,3], 'Check fails!'\nassert     swap_List([1,2,3,4,5,6]) == [4,5,6,1,2,3], 'Check fails!'\nassert     swap_List([1,2,3,4,5,6,7]) == [4,5,6,7,1,2,3], 'Check fails!'\nassert     swap_List([1,2,3,4,5,6,7,8]) == [4,5,6,7,8,1,2,3], 'Check fails!'\nassert     swap_List([1,2,3,4,5,6,7,8,9]) == [4,5,6,7,8,9,1,2,3], 'Check fails!'\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     swap_List(['a', 'b', 'c']) == ['c', 'b', 'a']\nassert     swap_List(['a', 'c', 'b']) == ['b', 'c', 'a']\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    swap_List([1,2,3,4,5,6,7,8])==[5,6,7,8,1,2,3,4], \"Test Failed\"\n    swap_List([1,2,3,4])==[4,1,2,3], \"Test Failed\"\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     swap_List([\"a\", \"b\", \"c\"]) == [\"c\", \"b\", \"a\"], \"test 1 failed\"\nassert     swap_List([\"a\", \"b\", \"c\"]) == [\"a\", \"c\", \"b\"], \"test 2 failed\"\nassert     swap_List([\"a\", \"b\", \"c\"]) == [\"b\", \"a\", \"c\"], \"test 3 failed\"\nassert     swap_List([\"a\", \"b\", \"c\"]) == [\"c\", \"b\", \"a\"], \"test 4 failed\"\nassert swap_List([\"a\", \"b\", \"c\", \"d\"]) == [\"d\", \"c\", \"b\", \"a\"], \"test 5 failed\"\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     swap_List([0,1,2,3,4]) == [4,1,2,3,0], \"Wrong output\"\nprint(\"Success: swap_List\")\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     swap_List([1,2,3,4,5]) ==[5,1,4,3,2], \"Should be 5,1,4,3,2\"\nassert     swap_List([1,2,3,4,5,6,7,8]) ==[7,8,1,4,3,5,6,2], \"Should be 7,8,1,4,3,5,6,2\"\nassert     swap_List([1,2,3,4,5,6,7,8]) ==[7,8,1,4,3,5,6,2], \"Should be 7,8,1,4,3,5,6,2\"\nassert     swap_List([1,2,3,4,5,6,7,8]) ==[7,8,1,4,3,5,6,2], \"Should be 7,8,1,4,3,5,6,2\"\nassert     swap_List([]) == [], \"Should be []\"\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     triangle_area(1) == 0.5, 'Failed: triangle_area'\nassert     triangle_area(2) == 1, 'Failed: triangle_area'\nassert     triangle_area(5) == 5, 'Failed: triangle_area'\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     triangle_area(2) == 1.5\nassert     triangle_area(1) == 0.5\nassert     triangle_area(0) == 1.5\nprint(\"\\033[92m All test cases passed...\\033[0m\")\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert triangle_area(5) == 1.5\nassert triangle_area(5.0) == 1.5\nassert triangle_area(3.5) == 1.5\nassert triangle_area(3.5) == 1.5\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     triangle_area(2) == math.sqrt(3)/2, \"Should be sqrt(3)/2\"\nassert     triangle_area(4) == math.sqrt(12), \"Should be sqrt(12)\"\nassert     triangle_area(6) == math.sqrt(18), \"Should be sqrt(18)\"\nassert     triangle_area(8) == math.sqrt(20), \"Should be sqrt(20)\"\nassert     triangle_area(10) == math.sqrt(40), \"Should be sqrt(40)\"\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     triangle_area(1) == 1.5, \"Should return 1.5\"\nassert     triangle_area(2) == 4.0, \"Should return 4\"\nassert     triangle_area(3) == 6.0, \"Should return 6\"\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert triangle_area(0) == 0, 'Area of a triangle with radius 0 is 0'\nassert triangle_area(1) == 1, 'Area of a triangle with radius 1 is 1'\nassert triangle_area(2) == 2, 'Area of a triangle with radius 2 is 2'\nassert triangle_area(3) == 3, 'Area of a triangle with radius 3 is 3'\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     triangle_area(1) == 0.5, 'triangle_area(1) is wrong.'\nassert     triangle_area(2) == 1.0, 'triangle_area(2) is wrong.'\nassert     triangle_area(3) == 0.5, 'triangle_area(3) is wrong.'\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_First_Missing([0,1,3,4,7,8,10,12,14])==9\nassert     find_First_Missing([0,1,2,3,4,5,6,7,8,9])==10\nassert     find_First_Missing([0,1,2,3,4,5,6,7,8,9,10])==11\nassert     find_First_Missing([0,1,2,3,4,5,6,7,8,9,10,11])==12\nassert     find_First_Missing([0,1,2,3,4,5,6,7,8,9,10,11,12])==13\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_First_Missing([1,2,3,4,5,6,7,8]) == 1\nassert     find_First_Missing([1,2,3,4,5,6,7,8,9]) == 2\nassert     find_First_Missing([1,2,3,4,5,6,7,8,9,10]) == 3\nassert     find_First_Missing([1,2,3,4,5,6,7,8,9,10,11]) == 5\nassert     find_First_Missing([1,2,3,4,5,6,7,8,9,10,11,12]) == 6\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2, 'First missing number is 2'\nassert     find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 5, 'First missing number is 5'\nassert     find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 3, 'First missing number is 3'\nassert     find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == 11, 'First missing number is 11'\nassert     find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 13, 'First missing number is 13'\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_First_Missing([1,2,3,4,5,6]) == 3\nassert     find_First_Missing([1,2,3,4,5,6,7]) == 3\nassert     find_First_Missing([1,2,3,4,5,6,7,8]) == 3\nassert     find_First_Missing([1,2,3,4,5,6,7,8,9,10]) == 3\nassert     find_First_Missing([1,2,3,4,5,6,7,8,9,10,11,12,13]) == 3\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_First_Missing([1,5,6,3,4,2],0,4)==2\nassert     find_First_Missing([1,5,6,3,4,2],0,5)==4\nassert     find_First_Missing([1,5,6,3,4,2],0,6)==3\nassert     find_First_Missing([1,5,6,3,4,2],0,7)==4\nassert     find_First_Missing([1,5,6,3,4,2],0,8)==3\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_First_Missing([0,1,2,3,4,5,7,9,12,14,15,17,19]) == 6\nassert     find_First_Missing([0,1,2,3,4,5,7,9,11,13,14,16,19]) == 6\nassert     find_First_Missing([1,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,19]) == 7\nassert     find_First_Missing([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,19]) == 7\nassert     find_First_Missing([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,17,19]) == 7\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_First_Missing([1, 2, 3, 4, 6, 9, 11, 13, 14, 15, 17]) == 7, \"Test 1\"\nassert find_First_Missing([3, 4, 6, 8, 10, 12, 14, 15, 16, 18, 20]) == 7, \"Test 2\"\nassert find_First_Missing([1, 5, 8, 9, 12, 14, 15, 17]) == 8, \"Test 3\"\nassert find_First_Missing([10, 11, 12, 13, 14, 16, 17, 18]) == 1, \"Test 4\"\nassert find_First_Missing([1, 3, 5, 7, 9, 11, 13, 14, 17, 19]) == 8, \"Test 5\"\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_First_Missing([1,2,3,4,6,7,10]) == 5, 'first missing number should be 5'\nassert     find_First_Missing([2,3,4,7,10]) == 6, 'first missing number should be 6'\nassert     find_First_Missing([1,2,3,4,6,10]) == 5, 'first missing number should be 5'\nassert     find_First_Missing([1,2,3,4,6,7,9]) == 8, 'first missing number should be 8'\nassert     find_First_Missing([1,2,3,4,5]) == 1, 'first missing number should be 1'\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_First_Missing([1,2,3,4,5,6,7])==2\nassert     find_First_Missing([1,2,3,4,5,6,7,8,9])==5\nassert     find_First_Missing([1,2,3,4,5,6,7,8,9,10])==1\nassert     find_First_Missing([0,1,2,3,4,5,6,7,8,9,10])==11\nassert     find_First_Missing([0,1,2,3,4,5,6,7,8,9,10,11])==12\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     replace_spaces('a b') == 'a%20b'\nassert     replace_spaces('a%20b') == 'a%20b'\nassert     replace_spaces('a%20') == 'a%20'\nassert     replace_spaces(' ') == '%20'\nassert     replace_spaces('') == ''\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    (replace_spaces('This is a test') == 'This%20is%20a%20test'),'replace spaces'\nassert \n    (replace_spaces('This is a test') == 'This%20is%20a%20test'),'replace spaces'\nassert \n    (replace_spaces('Hello, world!') == 'Hello,%20world!'),'replace spaces'\nassert \n    (replace_spaces('Hello, world!') == 'Hello,%20world!'),'replace spaces'\nassert \n    (replace_spaces('Hello, world!') == 'Hello, world!'),'replace spaces'\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\nassert replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\nassert replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\nassert replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     replace_spaces('this is a test') == 'this%20is%20a%20test',     'replace_spaces([this is a test]) is incorrect'\nassert     replace_spaces('') == '','replace_spaces([]) is incorrect'\nassert     replace_spaces('this is a test') == 'this%20is%20a%20test','replace_spaces([this is a test]) is incorrect'"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     '%20%20' == replace_spaces(' ')\nassert     '%20%20' == replace_spaces(' ')\nassert     '%20%20' == replace_spaces(' ')"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    replace_spaces(\"i am happy\") == \"i%20am%20happy\"\n    replace_spaces(\"i am happy and joyful.\") == \"i%20am%20happy%20and%20joyous\"\n    replace_spaces(\"\") == \"\"\n    replace_spaces(\"  \") == \"\"\n    replace_spaces(\"hello world\") == \"hello%20world\"\n    replace_spaces(\"hi        \") == \"hi%20%20\"\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     replace_spaces('a b') == 'a%20b'\nassert     replace_spaces('a b  c') == 'a%20b%20c'\nassert     replace_spaces('a b') == 'a%20b'\nassert     replace_spaces('a  b') == 'a%20b'\nassert     replace_spaces('a') == 'a'\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     replace_spaces(\"Hello World\") == \"Hello%20World\"\nassert     replace_spaces(\"Hello World\") == \"Hello%20World\"\nassert     replace_spaces(\"Hello World\") == \"Hello%20World\"\nassert     replace_spaces(\"Hello World\") == \"Hello%20World\"\nassert     replace_spaces(\"Hello World\") == \"Hello%20World\"\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     replace_spaces('Mr John Smith') == 'Mr%20John%20Smith'\nassert     replace_spaces('Mr   John Smith') == 'Mr%20%20John%20Smith'\nassert     replace_spaces('Mr John Smith  ') == 'Mr%20John%20Smith'\nassert     replace_spaces('Mr   John Smith') == 'Mr%20%20John%20Smith'\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Split([1, 2, 3, 4, 5]) == [[2, 4], [4, 6, 8]], \"Wrong Answer\"\nassert     Split([1, 2, 2]) == [[2, 2]], \"Wrong Answer\"\nassert     Split([1, 1]) == [[1, 1]], \"Wrong Answer\"\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(\"Test case 1\")\nlist1 = [1,2,3,4,5,6,7,8,9]"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Split([2,4,6]) == [2,4,6], 'Wrong output.'\nassert     Split([10,11,12]) == [10,12], 'Wrong output.'\nassert     Split([9,2,5]) == [9,2,5], 'Wrong output.'\nassert     Split([1,3,5,7,9]) == [1,3,5,7,9], 'Wrong output.'\nassert     Split([]) == [], 'Wrong output.'\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Split([1, 2, 3, 4, 5, 6, 7, 8]) == [[2, 4, 6], [8]]\nassert    Split([1, 2, 3, 4, 5, 6]) == [[2, 4, 6]]\nassert    Split([1, 2, 3, 4, 5]) == [[2, 4, 6]]\nassert    Split([1, 2, 3]) == [[2, 3]]\nassert    Split([1, 2, 3, 4, 5, 6]) == [[2, 4, 6]]\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Split([1, 2, 3, 4, 5, 6, 7]) == [2, 4, 6], '1, 2, 3, 4, 5, 6, 7'\nassert     Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == \n[2, 4, 6, 8, 10], '1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11'\nassert     Split([1, 2, 3, 4, 5, 6, 7]) == [2, 4, 6], '1, 2, 3, 4, 5, 6, 7'\nassert     Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == \n[2, 4, 6, 8, 10], '1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11'\nassert     Split([]) == [], 'Empty List'\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert isinstance(Split([1,2,3,4,5,6,7,8,9,10]), list) == True\nassert isinstance(Split([0,1,2,3,4,5,6,7,8,9]), list) == False\nassert isinstance(Split([10]), list) == True\n\n\ndef Extract_Hierarchy_Node(object, class_type, hierarchy, stack):\n    '''\n    Write a python function to find the hierarchy node of an object.\n    \n    '''\n    pass\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef nonAdjac(ele, sub = []): \n    '''\n    Write a function to extract all the coordinates that are not adjacent to the given coordinate tuple.\n    '''\n    pass\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef dfs(t, visit, path, vertex):\n    if t[vertex] == 0:\n        visit[vertex] = 1\n        path.append(vertex)\n        if vertex in adjac:\n            for adj_vertex in adjac[vertex]:\n                dfs(t, visit, path, adj_vertex)\n        else:\n            print (path)\n    else:\n        path.append(vertex)\n        print(path)\n        visit[vertex] = 1\n        for adj_vertex in adjac[vertex]:\n            dfs(t, visit, path, adj_vertex)\n\nt = {'A':1, 'B':2, 'C':2, 'D':2, 'E':1, 'F':1, 'G':2, 'H':2, 'I':1, 'J':2, 'K':1, 'L':1, 'M':1, 'N':1, 'O':1, 'P':1, 'Q':2, 'R':2, 'S':1, 'T':1, 'U':2, 'V':1, 'W':1, 'X':1, 'Y':2, 'Z':1, '0':1, '1':1, '2':1, '3':1, '4':1, '5':1, '6':1, '7':1, '8':1, '9':1}\nvisit = []\npath = []\ndfs(t, visit, path, 'A'"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     adjac((2, 1)) == [(2, 2), (1, 2)]\nassert     adjac((2, 2)) == [(2, 1), (2, 3), (1, 2), (1, 3)]\nassert     adjac((2, 3)) == [(2, 2), (2, 4), (1, 3), (1, 4), (2, 1), (2, 5), (1, 2), (1, 5)]\nassert     adjac((2, 4)) == [(2, 2), (2, 3), (1, 3), (1, 4), (2, 1), (2, 5), (1, 2), (1, 5)]\nassert     adjac((2, 5)) == [(2, 2), (2, 3), (2, 4), (1, 3), (1, 4), (2, 1), (2, 5), (1, 2), (1, 5)]\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef adjac_obj(obj, sub = None): \n    '''\n    Write a function to extract all the adjacent coordinates of the given object.\n    '''\n    pass\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nclass Solution:\n    def numIslands(self, grid: List[List[str]]) -> int:\n        def DFS(i, j):\n            if i < 0 or j < 0 or i >= len(grid) or j >= len(grid[0]) or grid[i][j]!= '1': return\n            grid[i][j] = '0'\n            for x, y in adjac(i, j):\n                DFS(x, y)\n\n        res = 0\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if grid[i][j] == '1':\n                    DFS(i, j)\n                    res += 1\n        return res\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == \"__main__\":\n\n    # Test 1\n    ele = (1, 2, 3)\n    sub = adjac(ele)\n    print(sub)\n    \n    # Test 2\n    ele = (1, 2)\n    sub = adjac(ele)\n    print(sub)\n    \n    # Test 3\n    ele = (1, 2, 1)\n    sub = adjac(ele)\n    print(sub)\n    \n    # Test 4\n    ele = (1, 2, 1)\n    sub = adjac(ele)\n    print(sub)\n    \n    # Test 5\n    ele = (1, 2, 1, 1)\n    sub = adjac(ele)\n    print(sub)\n    \n    # Test 6\n    ele = (1, 2, 1, 2)\n    sub = adjac(ele)\n    print(sub)\n    \n    # Test 7\n    ele = (1, 2, 1, 2, 1)\n    sub = adjac(ele)\n    print(sub)\n    \n    # Test 8\n    ele = (1, 2, 1, 2, 1, 2, 1, 2)\n    sub = adjac(ele)\n    print(sub"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     (\n         adjac((0,0), []), \n         adjac((1,0), [(0,1)]), \n         adjac((0,0), [(1,1)]), \n         adjac((1,0), [(0,1), (1,1)]), \n         adjac((1,0), []), \n    ) == (\n        [[0, 1], [1, 1]], \n        [], \n        [[0, 1], [1, 1]], \n        [[0, 1], [1, 1], [1, 1], [1, 1]], \n        [[0, 1], [1, 1]], \n    ), 'Wrong'\n\ndef connect(sub, length = 1):\n    '''\n    Write a function to connect all of the adjacent coordinates of the given coordinate tuple.\n    '''\n    pass\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef search(ele, map1, direction):\n    '''\n    Write a function that will search the given map for the given element and \n    return a list of coordinates which is adjacent to the given element.\n    '''\n    pass\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     adjac((1,2), []) == [], \"Should return empty list for a given tuple\"\nassert     adjac((1,2), [(2,3), (3,4)]) == [], \"Should return empty list for a given tuple\"\nassert     adjac((1,2), [(1,3), (2,4)]) == [(1,2)], \"Should return all the adjacent coordinates of the given tuple\"\nassert     adjac((1,1), [(2,3), (3,4)]) == [(1,2), (1,3)], \"Should return all the adjacent coordinates of the given tuple\"\nassert     adjac((1,1), [(1,2), (2,3)]) == [(1,1), (2,2)], \"Should return all the adjacent coordinates of the given tuple\"\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     replace_spaces('Hello there!') == 'hello_there'\nassert     replace_spaces('Hello!') == 'hello_'\nassert     replace_spaces('   Hello!   ') == 'hello_'\nassert     replace_spaces('Hello, world!') == 'hello_world'\nassert     replace_spaces('   Hello, world!   ') == 'hello_world'\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     replace_spaces(' test') == \"test_\"\nassert     replace_spaces(\"test \") == \"test_\"\nassert     replace_spaces(\"   test\") == \"test_\"\nassert     replace_spaces(\"_test_\") == \"_test_\"\nassert     replace_spaces(\"_test_ _test_\") == \"_test__test_\"\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nreplace_spaces(\"Hello World\") == \"hello_world\", \"You have some troubles\"\n\ndef replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\")"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nreplace_spaces(\"  cat   \") == \"cat_\"\nassert replace_spaces(\"   cat  \") == \"cat_\"\nassert replace_spaces(\"cat_\") == \"_cat_\"\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     replace_spaces(\"YO\") == \"Y_O\"\nassert     replace_spaces(\"YOHI\") == \"Y_HI\"\nassert     replace_spaces(\"HIHI\") == \"HI_HI\"\nassert     replace_spaces(\"SIR\") == \"S_R\"\nassert     replace_spaces(\"SIR SIR\") == \"S_R S_R\"\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n'''\nGiven a string, split the string into a list of words where each word is separated by a single space character.\n\nNote that you do not have to print the words in any particular order.\n\nReturn the list of words.\n\n'''\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     replace_spaces(\"\") == \"\"\nassert     replace_spaces(\" \") == \"_\"\nassert     replace_spaces(\"some text\") == \"_some_text\"\nassert     replace_spaces(\"a word\") == \"a_word\"\nassert     replace_spaces(\"a word, then space\") == \"a_word_then_space\"\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     replace_spaces(\"HaHaHa\") == \"Ha_Ha_Ha\"\nassert     replace_spaces(\"\") == \"\"\nassert     replace_spaces(\" \") == \"_\"\n\ndef replace_spaces2(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     replace_spaces(\"   space  \")     == \"space_\", \"Incorrect\"\nassert replace_spaces(\"_ _ _ _ _ \")     == \"____\", \"Incorrect\"\nassert replace_spaces(\"\")     == \"\", \"Incorrect\"\nassert replace_spaces(\" \")     == \"\", \"Incorrect\"\nassert replace_spaces(\"     \")     == \"\", \"Incorrect\"\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef remove_duplicates(list_):\n    '''\n    Write a python function to remove all duplicate values from the given list.\n    '''\n    pass\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     move_zero([1, 2, 3, 4, 5, 0, 0, 6, 7, 0]) == [1, 2, 3, 4, 5, 6, 7, 0, 0, 0], \"Failed\"\nassert     move_zero([0, 1, 2, 3, 4, 0, 5, 6, 0, 0]) == [0, 1, 2, 3, 4, 5, 6, 0, 0, 0], \"Failed\"\nassert     move_zero([0,0,1,2,3,4,5,6,7]) == [0,1,2,3,4,5,6,7,0], \"Failed\"\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     move_zero([1, 2, 0, 4, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0]) == [1, 2, 4, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert     move_zero([1, 2, 0, 4, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0]) == [1, 2, 4, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     move_zero([1,2,3,4,5]) ==[1,2,3,4,5], \"Should move all zeroes to the end\"\nassert     move_zero([]) ==[], \"Should move all zeroes to the end\"\nassert     move_zero([0,1,2,3,4,5]) ==[0,1,2,3,4,5], \"Should move all zeroes to the end\"\nassert     move_zero([0,0,0,0,0]) ==[0,0,0,0,0], \"Should move all zeroes to the end\"\nassert     move_zero([0,0,1,0,0,0,1]) ==[0,0,1,0,0,1], \"Should move all zeroes to the end\"\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n'''\n6. Write a Python program to count the number of characters (character frequency) in a string.\n    Sample String : google.com'\n    Expected Result : {'o': 3, 'g': 2, 'e': 1, 'l': 1,'m': 1, 'c': 1}\n'''\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     [1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0] == move_zero([1, 2, 3, 4, 5, 6, 7, 0, 0, 0, 0, 0, 0, 0, 0]), \"Wrong answer\"\nassert     [4, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] == move_zero([0, 0, 0, 4, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0]), \"Wrong answer\"\nassert     [2, 0, 0, 4, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0] == move_zero([2, 0, 0, 4, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0]), \"Wrong answer\"\nassert     [4, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] == move_zero([2, 0, 0, 4, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0]), \"Wrong answer\"\nassert     [0, 0, 4, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] == move_zero([2, 0, 0, 4, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0]), \"Wrong answer\"\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == '__main__':\n    print('====> Test 1')\n    print('Expected:', True)\n    print('Actual:  ', move_zero([1, 3, 0, 0, -2, 0, 1, -4, 3, -1]) == True)\n\n    print('====> Test 2')\n    print('Expected:', True)\n    print('Actual:  ', move_zero([0, 1, 0, 3, 12]) == True)\n\n    print('====> Test 3')\n    print('Expected:', True)\n    print('Actual:  ', move_zero([4, 5, 1, 1]) == False)\n\n    print('====> Test 4')\n    print('Expected:', [1, 2, 3, 4, 5])\n    print('Actual:  ', move_zero([1, 2, 3, 4, 5]) == False)\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     move_zero([1, 2, 0, 3, 4, 0, 6, 0, 7, 8]) == [1, 2, 3, 4, 6, 7, 8, 0, 0, 0]\nassert     move_zero([0, 1, 2, 0, 3, 4, 0, 6, 0, 7, 8]) == [0, 1, 2, 3, 4, 6, 7, 8, 0, 0, 0]\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     pair_xor_Sum([1, 2, 3], 3) == 5, \"The sum of xor of all pairs should be 5\"\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     pair_xor_Sum([1, 2, 3], 3) == 4, \"Incorrect output\"\nassert     pair_xor_Sum([1, 2, 3], 4) == 4, \"Incorrect output\"\nassert     pair_xor_Sum([1, 2, 3], 5) == 2, \"Incorrect output\"\nassert pair_xor_Sum([1, 2, 3], 6) == 4, \"Incorrect output\"\nassert pair_xor_Sum([1, 2, 3], 7) == 6, \"Incorrect output\"\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     pair_xor_Sum([1,2,3,4,5,6],6) == 14\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     pair_xor_Sum([1,2,3,4,5,6,7,8,9,10],10)==31, \"Wrong Answer\"\nassert     pair_xor_Sum([1,2,3,4,5,6,7,8,9,10],5)==14, \"Wrong Answer\"\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     pair_xor_Sum([1,2,3,4,5,6],6)==1\nassert    pair_xor_Sum([1,2,3,4,5,6],7)==1\nassert    pair_xor_Sum([1,2,3,4,5,6],8)==1\nassert    pair_xor_Sum([1,2,3,4,5,6],9)==1\nassert    pair_xor_Sum([1,2,3,4,5,6],10)==3\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef test_pair_xor_Sum():\n    '''\n    Create a list of numbers and check the result for all pairs.\n    '''\n    pass\n\n@test\ndef test_pair_xor_Sum():\n    '''\n    Write a function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    assert pair_xor_Sum([1,2,3,4],4) == 7\n\ndef pair_xor_Mult(arr,n):\n    '''\n    Write a python function to find the multiplication of all pairs of numbers in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     pair_xor_Sum([1,2,3,4,5,6]) == 10\nassert pair_xor_Sum([1,2,3,4,5,6]) == 8\nassert pair_xor_Sum([1,2,3,4,5,6,7]) == 11\nassert pair_xor_Sum([1,2,3,4,5,6,7,8]) == 15\nassert pair_xor_Sum([1,2,3,4,5,6,7,8,9]) == 13\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(pair_xor_Sum([1, 2, 3], 3))\n\nprint(pair_xor_Sum([1, 3, 5, 7], 4))\n\nprint(pair_xor_Sum([10, 11, 12, 13], 5))\n\nprint(pair_xor_Sum([10, 11, 12, 13], 6))\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     heap_sort([1, 2, 4, 2, 1]) == [1, 1, 2, 2, 4]\nassert     heap_sort([9, 5, 6, 3, 2, 1]) == [1, 2, 3, 5, 6, 9]\nassert     heap_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert     heap_sort([]) == []\nassert     heap_sort([]) == []\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     heap_sort([5,10,3,15,2,1]) == [1,2,3,5,15,10]\nassert     heap_sort([9,8,7,6,5,4,3,2,1]) == [1,2,3,4,5,6,7,8,9]\nassert     heap_sort([]) == []\nassert     heap_sort([-5,-8,0,1,-1,-2,-3]) == [-5,-8,0,-1,-2,-3,-1]\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     heap_sort([6, 3, 8, 1, 4, 7, 9, 2, 5]) == sorted(iterable)\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    heap_sort([4, 1, 7, 3, 8, 5, 2]) == sorted(iterable)\n\ndef heap_sort_no_check(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    pass"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef test_heap_sort():\n    assert sorted([10, 5, 6, 8, 2, 3]) == heap_sort([10, 5, 6, 8, 2, 3])\n    assert sorted([2, 5, 7, 1, -2]) == heap_sort([-2, -2, -1, 1, 5, 7])\n    assert sorted([2, 5, 7, 1, -2]) == heap_sort([-2, -2, 1, 2, 5, 7])\n    "
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     heap_sort([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7], \"incorrect\"\nassert     heap_sort([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7], \"incorrect\"\nassert     heap_sort([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7], \"incorrect\"\nassert     heap_sort([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7], \"incorrect\"\nassert     heap_sort([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7], \"incorrect\"\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nhq.heapify([2, 5, 7, 9, 3, 1, 6, 8, 0]) == [0, 1, 2, 3, 5, 6, 7, 8, 9]\nassert hq.heapify([9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert hq.heapify([2, 5, 7, 9, 3, 1, 6, 8, 0, 0]) == [0, 1, 2, 3, 5, 6, 7, 8, 9]\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nclass Node:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\nclass BinaryTree:\n    def __init__(self):\n        self.root = None\n\ndef construct_binary_tree():\n    '''\n    Write a function to construct a balanced binary tree in time O(n) and space O(n).\n    '''\n    pass\n\ndef print_binary_tree(root):\n    '''\n    Write a function to print a binary tree in an m-ary fashion, where each node has m children.\n    '''\n    pass\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     noprofit_noloss(20,15) == \"No Profit and Loss\"\nassert     noprofit_noloss(30,25) == \"No Profit and Loss\"\nassert     noprofit_noloss(50,15) == \"No Profit and Loss\"\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nactual_cost = 100\nsale_amount = 100\nassert noprofit_noloss(actual_cost, sale_amount) == True\nactual_cost = 99\nsale_amount = 100\nassert noprofit_noloss(actual_cost, sale_amount) == False\nactual_cost = 100\nsale_amount = 99\nassert noprofit_noloss(actual_cost, sale_amount) == True\nactual_cost = 100\nsale_amount = 100\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == '__main__':\n    actual_cost,sale_amount = 3, 5\n    print(noprofit_noloss(actual_cost,sale_amount))\n\n    actual_cost,sale_amount = 7, 5\n    print(noprofit_noloss(actual_cost,sale_amount)"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     noprofit_noloss(13,11) == True, \"You Should Return True\"\nassert     noprofit_noloss(1,6) == False, \"You Should Return False\"\nassert     noprofit_noloss(10,10) == False, \"You Should Return False\"\nassert     noprofit_noloss(10,8) == True, \"You Should Return True\"\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     noprofit_noloss(actual_cost,sale_amount) == True\n\ndef noprofit_loss(actual_cost,sale_amount):\n    '''\n    Write a function to check whether the given amount has profit and loss\n    '''\n    pass\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nnoprofit_noloss(14,14) == False\nnoprofit_noloss(14,15) == True\nnoprofit_noloss(10,10) == True\nnoprofit_noloss(10,10) == False\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     noprofit_noloss(actual_cost = 130, sale_amount = 40) == False\nassert     noprofit_noloss(actual_cost = 250, sale_amount = 100) == True\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     noprofit_noloss(26.7,29.8) == False, \"Profit and Loss\"\nassert     noprofit_noloss(26.7,30.8) == True, \"No Profit and Loss\"\n\ndef noprofit_loss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has profit and loss or not\n    '''\n    pass\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nactual_cost = 1000\nsale_amount = 1200\nassert noprofit_noloss(actual_cost,sale_amount) == True"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     noprofit_noloss(actual_cost=1000,sale_amount=100) == False\nassert     noprofit_noloss(actual_cost=1000,sale_amount=200) == True\nassert     noprofit_noloss(actual_cost=1000,sale_amount=500) == True\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     wind_chill(0,20) == 37.8\nassert     wind_chill(7.5,20) == 37.2\nassert     wind_chill(15,20) == 37.6\nassert     wind_chill(12,12) == 36.8\nassert     wind_chill(12,11) == 35.2\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint('Wind chill at 35deg, 40km/h:', wind_chill(40,35), 'deg F')\n\nprint('Wind chill at 45deg, 40km/h:', wind_chill(40,45), 'deg F')\n\nprint('Wind chill at 50deg, 40km/h:', wind_chill(40,50), 'deg F')\n\nprint('Wind chill at 55deg, 40km/h:', wind_chill(40,55), 'deg F')\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     wind_chill(125,30) == 32\nassert wind_chill(112,34) == 32.3\nassert wind_chill(125,35) == 33.3\nassert wind_chill(125,34) == 33.3\nassert wind_chill(125,35) == 33.3\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    wind_chill(2,30) == 3.0\n    wind_chill(0,3) == 0.0\n    wind_chill(20,20) == 25.0\n    wind_chill(20,5) == 7.67\n    wind_chill(2,10) == 10.0\n    wind_chill(10,5) == 9.0\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     wind_chill(3,70) == -42.05, \"Pass\"\nassert     wind_chill(6,37) == -10.4, \"Pass\"\nassert     wind_chill(10,10) == 17.03, \"Pass\"\nassert     wind_chill(3,100) == 37.71, \"Pass\"\nassert     wind_chill(5,75) == -16.62, \"Pass\"\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     wind_chill(3,5) == 5.0\nassert wind_chill(4,9) == 7.0\nassert wind_chill(0,0) == 32.0\nassert wind_chill(0,32) == 32.0\nassert wind_chill(31,32) == 31.0\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(\"The wind chill of a wind of velocity of 10 and temperature of 10.5 is \"+str(wind_chill(10,10.5)))\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     wind_chill(6,45) == 43.8\nassert     wind_chill(0,45) == 32.7\nassert     wind_chill(1,45) == 41.4\nassert     wind_chill(10,45) == 23.5\nassert     wind_chill(15,45) == 16.4\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     wind_chill(4.6,30) == 17.9\nassert     wind_chill(5.4,25) == 11.3\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     wind_chill(15,80) == -20.7\nassert wind_chill(25,80) == -23.5\nassert wind_chill(35,80) == -12.0\nassert wind_chill(35,55) == -12.0\nassert wind_chill(35,45) == -11.6\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sample_nam(['Amol', 'Amina', 'Jasdeep', 'Ganesh', 'Devendra', 'Alfa', 'Cherish', 'Aja', 'Shubham']) == 10\nassert     sample_nam(['Amar', 'Amina', 'Jasdeep', 'Ganesh', 'Devendra', 'Alfa', 'Cherish', 'Aja', 'Shubham']) == 12\nassert     sample_nam(['Amar', 'Amina', 'Amar', 'Ganesh', 'Devendra', 'Alfa', 'Cherish', 'Aja', 'Shubham']) == 9\nassert     sample_nam(['Amina', 'Amol', 'Jasdeep', 'Ganesh', 'Devendra', 'Alfa', 'Cherish', 'Aja', 'Shubham']) == 10\nassert     sample_nam(['Amina', 'Amar', 'Ganesh', 'Devendra', 'Alfa', 'Cherish', 'Aja', 'Shubham']) == 7\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sample_nam([\"ab123abc\", \"ab1b2c3\", \"a4b5c6\", \"ab1b2\", \"ab\", \"a5b6c7\", \"ab1b2\", \"abc\", \"ab\"]) == 7\nassert     sample_nam([\"ab\", \"ab1b2\", \"a4b5c6\", \"ab1b2\", \"ab\", \"a5b6c7\", \"ab1b2\", \"abc\", \"ab\", \"a5b6c7\", \"ab1b2\", \"abc\"]) == 10\nassert     sample_nam([\"ab123abc\", \"ab1b2c3\", \"a4b5c6\", \"ab1b2\", \"ab\", \"a5b6c7\", \"ab1b2\", \"abc\", \"ab\"]) == 7\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sample_nam([]) == 0, \"empty list should return 0\"\nassert sample_nam(['']) == 0, \"empty string should return 0\"\nassert sample_nam(['Karen', 'Zhao']) == 1, \"single element should return 1\"\nassert sample_nam(['Karen', 'Zhao', 'Zhang', 'Kun']) == 1, \"four elements should return 1\"\nassert sample_nam(['Karen', 'Zhao', 'Zhang', 'Kun', 'Jin']) == 3, \"four elements should return 3\"\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sample_nam([\"Siddhu\", \"ashish\", \"shubham\"]) == 5, \"your output is wrong\"\nassert     sample_nam([\"Siddhu\", \"ashish\", \"shubham\", \"ashish\"]) == 4, \"your output is wrong\"\nassert     sample_nam([\"Siddhu\", \"ashish\", \"ashish\"]) == 3, \"your output is wrong\"\nassert     sample_nam([\"Siddhu\", \"ashish\", \"ashish\", \"ashish\"]) == 2, \"your output is wrong\"\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nsample_nam([\"jimmy\", \"tom\", \"david\"]) == 4\nassert sample_nam([\"jane\", \"jimmy\", \"joe\"]) == 3\nassert sample_nam([\"jane\", \"jane\", \"joe\"]) == 2\nassert sample_nam([\"jane\", \"jimmy\", \"joe\"]) == 2\nassert sample_nam([\"jane\", \"jimmy\", \"joe\", \"tom\"]) == 2\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sample_nam([])     == 0, f'Expected None but got {sample_nam([])}'\nassert     sample_nam([])     == 0, f'Expected None but got {sample_nam([\"\", \"\"])}'\nassert     sample_nam([])     == 0, f'Expected None but got {sample_nam([\"a\"])}'\nassert     sample_nam([])     == 0, f'Expected None but got {sample_nam([\"a\", \"\"])}'\nassert     sample_nam([])     == 0, f'Expected None but got {sample_nam([\".a\"])}'\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sample_nam([]) == 0\nassert     sample_nam([\"John\", \"mark\"]) == 4\nassert     sample_nam([\"John\", \"mark\"]) == 4\nassert     sample_nam([\"John\", \"Mark\"]) == 4\nassert     sample_nam([\"John\", \"mark\", \"Mark\"]) == 4\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sample_nam([]) == 0, 'Empty list'\nassert     sample_nam(['']) == 0, 'Empty string'\nassert     sample_nam(['a','b','c','d']) == 4, 'Single name'\nassert     sample_nam(['A','B','C','D']) == 4, 'Multiple name'\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sample_nam([\"John\", \"Jon\", \"Jonny\", \"J\"]) == 2\nassert     sample_nam([\"John\", \"Jon\", \"Jonny\", \"J\", \"J\", \"J\"]) == 3\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sample_nam([]) == 0, 'All elements should be removed'\nassert     sample_nam(['Bob', 'Adam', 'Mosh', 'John', 'Fred']) == 6, 'Remove the lowercase letters in the beginning of the names'\nassert     sample_nam(['Bob', 'Adam', 'Mosh', 'John', 'Fred']) == 5, 'Remove the lowercase letters in the beginning of the names'\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_parenthesis('( 1 + 3 )') == '1 + 3'\nassert     remove_parenthesis('1 + 3 )') == '1 + 3'\nassert     remove_parenthesis('1 )') == '1'\nassert     remove_parenthesis(' )') == '()'\nassert     remove_parenthesis(' ( )') == '()'\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_parenthesis('(()())') == '()()', \"incorrect function\"\nassert     remove_parenthesis('(())') == '()', \"incorrect function\"\nassert     remove_parenthesis('()())') == '()()', \"incorrect function\"\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_parenthesis(\"(())(()())\") == \"\"\nassert     remove_parenthesis(\"(())((()))\") == \"\"\nassert     remove_parenthesis(\"((((()()()()())))()(()()()()()()())(()()()()()()()()()())\") == \"hello\"\nassert     remove_parenthesis(\"(((((((((())()())))))()(()()()()()()()()())))\") == \"hello\"\nassert     remove_parenthesis(\"(((((((((()()()()()()()()()())(()()()()()()()()())))))())())))\") == \"hello\"\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_parenthesis('(1+(2*3))+(4*(5+6))') == '(1+(2*3))+(4*(5+6))'\nassert     remove_parenthesis('2*3') == '2*3'\nassert     remove_parenthesis('2*(3+4)') == '2*(3+4)'\nassert     remove_parenthesis('2*(3+4)') == '2*(3+4)'\nassert     remove_parenthesis('2*(3+4)') == '2*(3+4)'\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_parenthesis(')()()') == ')()()'\nassert     remove_parenthesis(')(()()') == '()()()'\nassert     remove_parenthesis(')(()(()))') == '()()()'\nassert     remove_parenthesis('())(()())') == '()()()'\nassert     remove_parenthesis('()((()()()()((()()())())))') == '()()()()()()()()()'\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_parenthesis(\"(1+2)\") == \"1+2\"\nassert     remove_parenthesis(\"(1 + 2 )\") == \"1+2\"\nassert     remove_parenthesis(\"1 + 2 )\") == \"1+2\"\nassert     remove_parenthesis(\"1 + 2 )  \") == \"1+2\"\nassert     remove_parenthesis(\"(1+ 2 )\") == \"1+2\"\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_parenthesis('(1+2)-(2-3)') == '(1+2)-(2-3)'\nassert     remove_parenthesis('-1+1') == '-1+1'\nassert     remove_parenthesis('(1+1)-(2-3)') == '(1+1)-(2-3)'\nassert     remove_parenthesis('((1+1)-(2-3))') == '(1+1)-(2-3)'\nassert     remove_parenthesis('(1+1)-(2-3))') == '1+1)-(2-3)'\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_parenthesis('(2 + 4)') == '2 + 4'\nassert     remove_parenthesis('2 + (4 + 5)') == '2 + 4 + 5'\nassert     remove_parenthesis('2 + (4 + (5 + 6))') == '2 + 4 + 5 + 6'\nassert     remove_parenthesis('2 + 4)') == '2 + 4'\nassert     remove_parenthesis('2)') == '2'\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_parenthesis(\n        ('Remove Parenthesis', 'T (   )  *  ',' *  Remove Parenthesis *  ')) == \\\n        ('Remove Parenthesis', 'T (   )  *  ',' *  Remove Parenthesis *  ')\n\nassert remove_parenthesis(\n        ('Remove Parenthesis', '(T) (   )  *  ',' *  Remove Parenthesis *  ')) == \\\n        ('Remove Parenthesis', 'T (   )  *  ',' *  Remove Parenthesis *  ')\n\nassert remove_parenthesis(\n        ('Remove Parenthesis',' (T) (   )  *  ',' *  Remove Parenthesis *  ')) == \\\n        ('Remove Parenthesis',' T (   )  *  ',' *  Remove Parenthesis *  ')\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_parenthesis(\"hi (in) there\") == \"hi there\"\nassert     remove_parenthesis(\"hi (in) there (again)\") == \"hi there (again)\nassert     remove_parenthesis(\"hi there (in)\") == \"hi there\"\nassert     remove_parenthesis(\"hi\") == \"hi\"\nassert     remove_parenthesis(\"\") == \"\"\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_nonagonal(1) == 1, 'The first non-diagonal number should be 1.'\nassert     is_nonagonal(2) == 3, 'The second non-diagonal number should be 3.'\nassert     is_nonagonal(3) == 6, 'The third non-diagonal number should be 6.'\nassert     is_nonagonal(4) == 10, 'The fourth non-diagonal number should be 10.'\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(is_nonagonal(1)) # 1\nprint(is_nonagonal(2)) # 5\nprint(is_nonagonal(3)) # 8\nprint(is_nonagonal(4)) # 13\nprint(is_nonagonal(5)) # 18\nprint(is_nonagonal(6)) # 25\nprint(is_nonagonal(7)) # 28\nprint(is_nonagonal(8)) # 41\nprint(is_nonagonal(9)) # 45"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert is_nonagonal(1) == 1\nassert is_nonagonal(2) == 3\nassert is_nonagonal(3) == 5\nassert is_nonagonal(4) == 7\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint (\"Correct result:\")\nassert is_nonagonal(1) == 1\nassert is_nonagonal(2) == 3\nassert is_nonagonal(3) == 5\nassert is_nonagonal(4) == 7\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_nonagonal(1) == 1\nassert     is_nonagonal(2) == 7\nassert     is_nonagonal(3) == 15\nassert     is_nonagonal(4) == 22\nassert     is_nonagonal(5) == 35\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_nonagonal(1) == 1 \nassert     is_nonagonal(2) == 3 \nassert     is_nonagonal(3) == 6 \nassert     is_nonagonal(4) == 10 \nassert     is_nonagonal(5) == 15 \n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_match_wordz_middle('z') == True\nassert     text_match_wordz_middle('z') == True\nassert     text_match_wordz_middle('z z') == True\nassert     text_match_wordz_middle('z z z') == True\nassert     text_match_wordz_middle('z z z') == False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_match_wordz_middle('z z') == True, \"incorrect output\"\nassert     text_match_wordz_middle('z') == True, \"incorrect output\"\nassert     text_match_wordz_middle('z z z z') == False, \"incorrect output\"\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_wordz_middle(\"z\")==True, \"First\"\nassert     text_match_wordz_middle(\"Hello World\")==True, \"Second\"\nassert     text_match_wordz_middle(\"Hello the World\")==False, \"Third\"\nassert     text_match_wordz_middle(\"zebra\")==False, \"Fourth\"\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_match_wordz_middle('') == False, 'Wrong output'\nassert text_match_wordz_middle('z') == True, 'Wrong output'\nassert text_match_wordz_middle('Z') == False, 'Wrong output'\nassert text_match_wordz_middle('Zz') == False, 'Wrong output'\nassert text_match_wordz_middle('bz') == True, 'Wrong output'\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_wordz_middle(\"\") == False\nassert     text_match_wordz_middle(\"fairy tales\") == True\nassert     text_match_wordz_middle(\"zebra\") == True\nassert     text_match_wordz_middle(\"hogwarts\") == False\nassert     text_match_wordz_middle(\"hogwarts zebra\") == False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_wordz_middle('zap')==False\nassert     text_match_wordz_middle('zaz')==True\nassert     text_match_wordz_middle('zazp')==False\nassert     text_match_wordz_middle('zazpz')==True\nassert     text_match_wordz_middle('zazpzq')==False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_match_wordz_middle('z z') == 'z z'\nassert     text_match_wordz_middle('z') == 'z'\nassert     text_match_wordz_middle('z z z') == 'z z z'\nassert     text_match_wordz_middle('z z zz z') == 'z z zz z'\nassert     text_match_wordz_middle('z z z zz') == 'z z zz z'\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_match_wordz_middle('z') == True\nassert     text_match_wordz_middle('z a') == False\nassert     text_match_wordz_middle('z a b') == True\nassert     text_match_wordz_middle('z a b c') == True\nassert     text_match_wordz_middle('z a c') == True\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_wordz_middle('') == False\nassert     text_match_wordz_middle('z') == True\nassert     text_match_wordz_middle('a z') == True\nassert     text_match_wordz_middle('z a') == True\nassert     text_match_wordz_middle('za') == True\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(\"Test case 1:\")\n    input = []\n    k = 4\n    print(f\"\\n{input}\")\n    print(f\"\\n{reverse_Array_Upto_K(input, k)}\")\n    \n    input = [1, 2, 3]\n    k = 2\n    print(f\"\\n{input}\")\n    print(f\"\\n{reverse_Array_Upto_K(input, k)}\")\n\n    input = [1, 2, 3, 4, 5]\n    k = 0\n    print(f\"\\n{input}\")\n    print(f\"\\n{reverse_Array_Upto_K(input, k)}\")\n    \n    input = [1, 2, 3, 4, 5]\n    k = 5\n    print(f\"\\n{input}\")\n    print(f\"\\n{reverse_Array_Upto_K(input, k)}\")\n    \n    input = [1, 2, 3, 4, 5]\n    k = 7\n    print(f\"\\n{input}\")\n    print(f\"\\n{reverse_Array_Upto_K(input, k)}\")\n    \n    input = [1, 2, 3, 4, 5]\n    k = 9\n    print(f\"\\n{input}\")\n    print(f\"\\n{reverse_Array_Upto_K(input, k)}\")\n    \n    input = [1, 2, 3, 4, 5]\n    k = 1\n    print(f\"\\n{input}\")\n    print(f\"\\n{reverse_Array_Upto_K(input, k)}\")\n    \n    input = [1, 2, 3, 4, 5]\n    k = 3\n    print(f\"\\n{input}\")\n    print(f\"\\n{reverse_Array_Upto_K(input, k)}\")\n    \n    input = [1, 2, 3, 4, 5]\n    k = 4\n    print(f\"\\n{input}\")\n    print(f\"\\n{reverse_Array_Upto_K(input, k)}\")\n    \n    input = [1, 2, 3, 4, 5]\n    k = 6\n    print(f\"\\n{input}\")\n    print(f\"\\n{reverse_Array_Upto_K(input, k)}\")\n    \n    input = [1, 2, 3, 4, 5]\n    k = 7\n    print(f\"\\n{input}\")\n    print(f\"\\n{reverse_Array_Upto_K(input, k)}\")\n    \n    input = [1, 2, 3, 4, 5]\n    k = 8\n    print(f\"\\n{input}\")\n    print(f\"\\n{reverse_Array_Upto_K(input, k)}\")\n    \n    input = [1, 2, 3, 4, 5]\n    k = 9\n    print(f\"\\n{input}\")\n    print(f\"\\n{reverse_Array_Upto_K(input, k)}\")\n    \n    input = [1, 2, 3, 4, 5]\n    k = 10\n    print(f\"\\n{input}\")\n    print(f\"\\n{reverse_Array_Upto_K(input, k)}\")\n    \n    input = [1, 2, 3, 4, 5]\n    k = 11\n    print(f\"\\n{input}\")\n    print(f\"\\n{reverse_Array_Upto_K(input, k)}\")\n    \n    input = [1, 2, 3, 4, 5]\n    k = 12\n    print(f\"\\n{input}\")\n    print(f\"\\n{reverse_Array_Upto_K(input, k)}\")\n    \n    input = [1, 2, 3, 4, 5]\n    k = 0\n    print(f\"\\n{input}\")\n    print(f\"\\n{reverse_Array_Upto_K(input, k)}\")\n    \n    input = []\n    k = 3\n    print(f\"\\n{input}\")\n    print(f\"\\n{reverse_Array_Upto_K(input, k)}\")\n    \n    input = [1, 2, 3, 4, 5]\n    k = 3\n    print(f\"\\n{input}\")\n    print(f\"\\n{reverse_Array_Upto_K(input, k)}\")\n    \n    input = [1, 2, 3, 4, 5]\n    k = 6\n    print(f\"\\n{input}\")\n    print(f\"\\n{reverse_Array_Upto_K(input, k)}\")\n    \n    input = [1, 2, 3, 4, 5]\n    k = 7\n    print(f\"\\n{input}\")\n    print(f\"\\n{reverse_Array_Upto_K(input, k)}\")\n    \n    input = [1, 2, 3, 4, 5]\n    k = 9\n    print(f\"\\n{input}\")\n    print(f\"\\n{reverse_Array_Upto_K(input, k)}\")\n    \n    input = []\n    k = 10\n    print(f\"\\n{input}\")\n    print(f\"\\n{reverse_Array_Upto_K(input, k)}\")\n    \n    input = []\n    k = 0\n    print(f\"\\n{input}\")\n    print(f\"\\n{reverse_Array_Upto_K(input, k)}\")\n\n    input = []\n    k = 1\n    print(f\"\\n{input}\")\n    print(f\"\\n{reverse_Array_Upto_K(input, k)}\")\n\n    input = []\n    k = 3\n    print(f\"\\n{input}\")\n    print(f\"\\n{reverse_Array_Upto_K(input, k)}\")\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     reverse_Array_Upto_K([1,2,3,4,5,6], 4) ==    [4,5,6,3,2,1], \"Wrong\"\nassert reverse_Array_Upto_K([1,2,3,4,5,6], 1) ==    [6,5,4,3,2,1], \"Wrong\"\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     reverse_Array_Upto_K([10, 20, 30, 40, 50], 1) == [50, 40, 30, 20, 10]\nassert     reverse_Array_Upto_K([10, 20, 30, 40, 50], 3) == [10, 20, 30, 40, 50]\nassert     reverse_Array_Upto_K([10, 20, 30, 40, 50], 4) == [50, 40, 30, 20, 10]\nassert     reverse_Array_Upto_K([10, 20, 30, 40, 50], 5) == [10, 20, 30, 40, 50]\nassert     reverse_Array_Upto_K([10, 20, 30, 40, 50], 6) == [50, 40, 30, 20, 10]\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    length = len(input)\n    if length < 1:\n        return input\n    if k < 0:\n        return input\n    if k > length:\n        return input\n    input = merge_sort(input)\n    i = 0\n    j = length - 1\n    while i <= j:\n        if i == k:\n            break\n        else:\n            input[i], input[j] = input[j], input[i]\n            i += 1\n            j -= 1\n    return input\n\ndef merge_sort(input):\n    if len(input) <= 1:\n        return input\n    middle = len(input)//2\n    left = merge_sort(input[:middle])\n    right = merge_sort(input[middle:])\n    return merge(left, right)\n\ndef merge(left, right):\n    i = 0\n    j = 0\n    merged = []\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            merged.append(left[i])\n            i += 1\n        else:\n            merged.append(right[j])\n            j += 1\n    merged += left[i:]\n    merged += right[j:]\n    return merged\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert \nassert \nassert reverse_Array_Upto_K([1, 2, 3, 4, 5], 3) == [4, 5, 3, 2, 1]\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5], 10) == []\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 3) ==[5, 4, 3, 2, 1]\n\nassert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 6) ==[5, 4, 3, 2, 1]\n\nassert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 5) ==[5, 4, 3, 2, 1]\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert(reverse_Array_Upto_K([1, 2, 3, 4], 3) ==[4, 3, 2, 1])\nassert(reverse_Array_Upto_K([1, 2, 3], 2) ==[3, 2, 1])\nassert(reverse_Array_Upto_K([1], 1) ==[1])\nassert(reverse_Array_Upto_K([1, 2, 3], 5) ==[1, 2, 3])\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     reverse_Array_Upto_K([1,2,3,4,5], 4) == [5,4,3,2,1]\nassert reverse_Array_Upto_K([1,2,3,4,5], 5) == None\nassert reverse_Array_Upto_K([1,2,3,4,5], 2) == None"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     add_dict_to_tuple((\"a\", \"b\"), {1: \"1\", 2: \"2\"}) == (\"a\", \"b\", {1: \"1\", 2: \"2\"}), \"incorrect output\"\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert         add_dict_to_tuple((1,2,3), {'a': 1}) == (1,2,3), 'Test Failed'\nassert add_dict_to_tuple((1,2,3), {'b': 1}) == (1,2,3,{'b': 1}), 'Test Failed'\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_dict_to_tuple((), {}) == ()\nassert     add_dict_to_tuple((1, 2, 3), {}) == (1, 2, 3)\nassert     add_dict_to_tuple((1, 2, 3), {1: \"Dhruv\"}) == (1, 2, 3, 1)\nassert     add_dict_to_tuple((1, 2, 3), {\"Dhruv\": \"Dhruv\"}) == (1, 2, 3, \"Dhruv\")\nassert     add_dict_to_tuple((1, 2, 3), {\"Dhruv\": \"Ramesh\", \"Gopi\": \"Suresh\"}) == (1, 2, 3, \"Dhruv\", \"Suresh\")\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     add_dict_to_tuple((1, 2, 3), {1: 'a', 2: 'b'}) == (1, 2, 3, {1: 'a', 2: 'b'})\nassert     add_dict_to_tuple((1, 2, 3), {'1': 'a', '2': 'b'}) == (1, 2, 3, {1: 'a', 2: 'b'})\nassert     add_dict_to_tuple((1, 2, 3), {'3': 'a', '4': 'b'}) == (1, 2, 3, {1: 'a', 2: 'b', '4': 'b'})\nassert     add_dict_to_tuple((1, 2, 3), {'1': 'a', '3': 'b'}) == (1, 2, 3, {1: 'a', 2: 'b', '3': 'b'})\nassert     add_dict_to_tuple((1, 2, 3), {'1': 'a', '2': 'b', '3': 'c'}) == (1, 2, 3, {1: 'a', 2: 'b', '3': 'c'})\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     add_dict_to_tuple((), {}) == (), \"Your add_dict_to_tuple() should return an empty tuple.\"\nassert     add_dict_to_tuple((1,), {}) == (), \"Your add_dict_to_tuple() should return an empty tuple.\"\nassert     add_dict_to_tuple((1, 2), {}) == ((1, 2), {}), \"Your add_dict_to_tuple() should return an empty tuple.\"\nassert     add_dict_to_tuple((1, 2, 3), {}) == ((1, 2, 3), {}), \"Your add_dict_to_tuple() should return an empty tuple.\"\nassert     add_dict_to_tuple((1, 2, 3, 4), {}) == ((1, 2, 3, 4), {}), \"Your add_dict_to_tuple() should return an empty tuple.\"\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     add_dict_to_tuple(test_tup, test_dict) == (1,2,3,4)\nprint(\"\\nYou've passed the unit tests! Congratulations!\")\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     add_dict_to_tuple((1,2,3), {'hello':'world'} ) == (1, 2, 3)\nassert     add_dict_to_tuple((1,2,3), {1:'one', 2:'two', 3:'three'} ) == (1, 2, 3)\nassert     add_dict_to_tuple((1,2,3), {1:2, 3:4, 4:5} ) == (1, 2, 3)\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add_dict_to_tuple(('a', 'b'), {'c': 'd'}) == ('a', 'b', {'c': 'd'})\nassert     add_dict_to_tuple((1, 2), {'c': 3, 'd': 4}) == (1, 2, {'c': 3, 'd': 4})\nassert     add_dict_to_tuple((1, 2), {'d': 4, 'c': 3}) == (1, 2, {'c': 3, 'd': 4})\nassert     add_dict_to_tuple(('a',), {'b': 3, 'c': 4}) == ('a', 'b', 3, 'c', 4)\nassert     add_dict_to_tuple(('a', 2), {'b': 2, 'c': 4}) == ('a', 2, 'b', 2, 'c', 4)\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     maxAverageOfPath(\n    [\n        [1, 1, 1, 1],\n        [2, 2, 2, 2],\n        [3, 3, 3, 3],\n        [4, 4, 4, 4],\n        [5, 5, 5, 5]\n    ]\n    ) == 3.5\nassert     maxAverageOfPath(\n    [\n        [1, 1, 1, 1],\n        [2, 2, 2, 2],\n        [3, 3, 3, 3],\n        [4, 4, 4, 4],\n        [5, 5, 5, 5]\n    ]\n    ) == 4\nassert     maxAverageOfPath(\n    [\n        [1, 1, 1, 1],\n        [2, 2, 2, 2],\n        [3, 3, 3, 3],\n        [4, 4, 4, 4],\n        [5, 5, 5, 5],\n        [6, 6, 6, 6],\n        [7, 7, 7, 7],\n        [8, 8, 8, 8]\n    ]\n    ) == 9\nassert     maxAverageOfPath(\n    [\n        [1, 1, 1, 1],\n        [2, 2, 2, 2],\n        [3, 3, 3, 3],\n        [4, 4, 4, 4],\n        [5, 5, 5, 5],\n        [6, 6, 6, 6],\n        [7, 7, 7, 7],\n        [8, 8, 8, 8],\n        [9, 9, 9, 9]\n    ]\n    ) == 6\nassert     maxAverageOfPath(\n    [\n        [1, 1, 1, 1, 1],\n        [2, 2, 2, 2, 2],\n        [3, 3, 3, 3, 3],\n        [4, 4, 4, 4, 4],\n        [5, 5, 5, 5, 5],\n        [6, 6, 6, 6, 6],\n        [7, 7, 7, 7, 7],\n        [8, 8, 8, 8, 8],\n        [9, 9, 9, 9, 9]\n    ]\n    ) == 3\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     maxAverageOfPath([[8, 2, 5, 7, 1, 6, 3], \n    [9, 7, 3, 8, 5, 2, 1], \n    [6, 3, 1, 2, 9, 5, 7], \n    [9, 9, 8, 2, 7, 6, 1], \n    [2, 7, 1, 9, 3, 8, 5], \n    [4, 5, 8, 3, 1, 1, 4], \n    [7, 4, 6, 8, 9, 1, 2], \n    [1, 2, 4, 7, 5, 2, 6]]) == 14.0\nassert maxAverageOfPath([[8, 2, 5, 7, 1, 6, 3], \n    [9, 7, 3, 8, 5, 2, 1], \n    [6, 3, 1, 2, 9, 5, 7], \n    [9, 9, 8, 2, 7, 6, 1], \n    [2, 7, 1, 9, 3, 8, 5], \n    [4, 5, 8, 3, 1, 1, 4], \n    [7, 4, 6, 8, 9, 1, 2], \n    [1, 2, 4, 7, 5, 2, 6]]) == 15.0\nassert maxAverageOfPath([[8, 2, 5, 7, 1, 6, 3], \n    [9, 7, 3, 8, 5, 2, 1], \n    [6, 3, 1, 2, 9, 5, 7], \n    [9, 9, 8, 2, 7, 6, 1], \n    [2, 7, 1, 9, 3, 8, 5], \n    [4, 5, 8, 3, 1, 1, 4], \n    [7, 4, 6, 8, 9, 1, 2], \n    [1, 2, 4, 7, 5, 2, 6]]) == 11.5\nassert maxAverageOfPath([[8, 2, 5, 7, 1, 6, 3], \n    [9, 7, 3, 8, 5, 2, 1], \n    [6, 3, 1, 2, 9, 5, 7], \n    [9, 9, 8, 2, 7, 6, 1], \n    [2, 7, 1, 9, 3, 8, 5], \n    [4, 5, 8, 3, 1, 1, 4], \n    [7, 4, 6, 8, 9, 1, 2], \n    [1, 2, 4, 7, 5, 2, 6]]) == 13.5\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ncost = [[0, 1, 0, 1],\n        [1, 1, 0, 0],\n        [0, 1, 0, 0],\n        [1, 1, 0, 0],\n        [0, 1, 0, 0]\n        ]\nassert maxAverageOfPath(cost) == "
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     maxAverageOfPath([[0, 1, 1], [1, 0, 1], [1, 1, 0]]) == 2.0, 'Wrong answer: %s' % maxAverageOfPath([[0, 1, 1], [1, 0, 1], [1, 1, 0]])\nassert maxAverageOfPath([[1, 1], [1, 1]]) == 1.0, 'Wrong answer: %s' % maxAverageOfPath([[1, 1], [1, 1]])\nassert maxAverageOfPath([[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]) == 2.25, 'Wrong answer: %s' % maxAverageOfPath([[1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]])\nassert maxAverageOfPath([[1, 1, 1], [1, 1, 1]]) == 1.0, 'Wrong answer: %s' % maxAverageOfPath([[1, 1, 1], [1, 1, 1]])\nassert maxAverageOfPath([[1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]]) == 2.25, 'Wrong answer: %s' % maxAverageOfPath([[1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]])\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     maxAverageOfPath([[]]) == 0, \"Fail: Given matrix is empty\"\nassert     maxAverageOfPath([[1, 2, 3]]) == (3/3), \"Fail: Given matrix does not have at least one path\"\nassert     maxAverageOfPath([[2, 3, 1, 5, 4], [3, 6, 2, 1, 4], [3, 4, 2, 1, 4], [2, 3, 1, 5, 4], [6, 1, 2, 3, 4]]) == (6/13), \"Fail: Given matrix does not have at least one path\"\nassert     maxAverageOfPath([[5, 1, 1, 1, 1, 1], [5, 1, 1, 1, 1, 1], [5, 1, 1, 1, 1, 1], [5, 1, 1, 1, 1, 1], [5, 1, 1, 1, 1, 1]]) == (15/13), \"Fail: Given matrix does not have at least one path\"\nassert     maxAverageOfPath([[2, 7, 6], [3, 2, 7], [1, 2, 5]]) == (15/3), \"Fail: Given matrix does not have at least one path\"\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     maxAverageOfPath([[10, 20, 30], [1, 2, 3], [10, 20, 30]]) == 19, \"Wrong answer\"\nassert maxAverageOfPath([[5, 10, 15], [1, 2, 4], [2, 5, 10]]) == 19, \"Wrong answer\"\nassert maxAverageOfPath([[10, 5, 10], [1, 2, 4], [2, 5, 10]]) == 16, \"Wrong answer\"\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     maxAverageOfPath([\n            [1, 3, 2],\n            [1, 4, 5],\n            [2, 3, 1]\n        ]) == 5\nassert     maxAverageOfPath([\n            [1, 5, 2, 4],\n            [1, 5, 4, 4],\n            [1, 5, 4, 5],\n            [1, 5, 2, 5]\n        ]) == 6\nassert     maxAverageOfPath([\n            [2, 1, 1],\n            [3, 4, 2],\n            [1, 3, 1]\n        ]) == 4\nassert     maxAverageOfPath([\n            [1, 3, 2, 1],\n            [1, 4, 5, 4],\n            [1, 3, 1, 1],\n            [2, 1, 1, 1]\n        ]) == 6\nassert     maxAverageOfPath([\n            [1, 5, 2, 1],\n            [1, 5, 4, 4],\n            [1, 5, 4, 5],\n            [1, 5, 2, 5]\n        ]) == 7\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    # 'Harry' --> 'True'\n    # 'Jane' --> 'True'\n    # 'Rohan' --> 'False'\n    # 'Akriti' --> 'False'\n    # 'Harsh' --> 'False'\n\nfilter_data({'Harry': (48.5, 170), 'Rohan': (49, 170), 'Akriti': (49, 205), 'Harsh': (40, 90)},\n         40, 50)\n\n'''\nWe will use lambda function to solve this problem.\n'''\n\ndef filter_data(student_details, minimum_height, minimum_weight):\n    '''\n    The input is a dictionary and 2 integers -- minimum_height and minimum_weight.\n    Return a list of all the students details whose height and weight are above the given minimum_height and minimum_weight.\n    '''\n    pass\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     filter_data({'George': (1.60, 50), 'Phoebe': (1.80, 40), 'Amy': (1.70, 30)}, 1.5, 1.5) == {'Phoebe', 'Amy'}, \"1.5, 1.5, should be 'Phoebe', 'Amy'\"\nassert     filter_data({'George': (1.60, 50), 'Phoebe': (1.80, 40), 'Amy': (1.70, 30)}, 1.5, 1.5) == {'Phoebe', 'Amy'}, \"1.5, 1.5, should be 'Phoebe', 'Amy'\"\nassert     filter_data({'George': (1.60, 50), 'Phoebe': (1.80, 40), 'Amy': (1.70, 30)}, 1.5, 1.5) == {'George', 'Amy'}, \"1.5, 1.5, should be 'George', 'Amy'\"\n\ndef filter_data_2(students,min_h,min_w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    pass\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     filter_data(students,h,w)==[('Girish', (1.38,70)), ('Mohit', (1.85, 67)), ('Ashwin', (1.85, 70))]\nprint(\"filter_data test case passed!\")"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     filter_data({'student1':(1.8,75.5),'student2':(1.8,65),'student3':(1.5,55)}, 1.8,100) == {'student1':(1.8,75.5),'student3':(1.5,55)}\nassert filter_data({'student1':(1.8,75.5),'student2':(1.8,65),'student3':(1.5,55)}, 1.5,90) == {'student1':(1.8,75.5),'student3':(1.5,55)}\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_same_pair([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 5\nassert     count_same_pair([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 0\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_same_pair([1, 2, 2, 1], [1, 1, 2, 2]) == 2\nassert     count_same_pair([1, 1, 2, 2], [1, 2, 2, 1]) == 4\nassert count_same_pair([1, 1, 2, 2], [1, 2, 1, 2]) == 0\nassert count_same_pair([1, 1, 2, 2], [2, 2, 2, 1]) == 1\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_same_pair([1, 2, 3, 1], [1, 2, 3, 1]) == 4\nassert     count_same_pair([1, 2, 3, 2], [1, 2, 3, 1]) == 4\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nnums1 = [1,2,3]\nnums2 = [1,2,3]\nassert count_same_pair(nums1, nums2) == 3\n\ndef find_duplicates(nums):\n    '''\n    Write a function to find the number of duplicates in a sorted list.\n    '''\n    # sol: 1. use a dictionary\n    # Time O(n)\n    # Space O(n)\n    d = {}\n    count = 0\n    for num in nums:\n        if num in d:\n            count += 1\n            d[num] += 1\n        else:\n            d[num] = 1\n    return count\n\n\ndef find_duplicates(nums):\n    '''\n    Write a function to find the number of duplicates in a sorted list.\n    '''\n    # Time O(n)\n    # Space O(n)\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return 1 if nums[0]!= nums[0] else 0\n\n    nums_copy = nums.copy()\n    nums_copy.sort()\n    index = 0\n    while index < len(nums_copy):\n        if nums_copy[index] == nums_copy[index+1]:\n            nums.remove(nums_copy[index])\n            nums.remove(nums_copy[index])\n        else:\n            index += 1\n    return len(nums)\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_same_pair([1,2,3,3,3,4,4,4], [2,2,2,2,2,2,2,2,]) == 3\nassert     count_same_pair([1,2,3,3,3,4,4,4], [2,2,2,2,2,2,2,2,]) == 2\nassert     count_same_pair([1,1,1,1], [2,2,2,2,]) == 3\nassert     count_same_pair([1,2,3,4], [1,2,3,4,]) == 2\nassert     count_same_pair([1,2,3,3,3], [2,2,2,2,2,2]) == 3\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_same_pair([1, 1, 2, 2], [1, 2, 1, 3]) == 2\nassert     count_same_pair([1, 1, 2, 2], [1, 1, 2, 3]) == 1\nassert     count_same_pair([], []) == 0\n\ndef count_common_characters(s1, s2):\n    '''\n    The input is defined as two strings. Write a function that returns the number of times any character from the first string is repeated in the second string.\n    '''\n    pass\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef max_pair_sum(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to calculate the sum of the maximum element from the two lists.\n    '''\n    pass\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_same_pair([1, 2, 1, 3, 4], [2, 1, 4, 3, 2]) == (3, 3)\nassert     count_same_pair([1, 2, 1, 3, 4], [2, 1, 4, 3, 3]) == (3, 2)\nassert     count_same_pair([1, 2, 1, 3, 4], [2, 1, 4, 3, 5]) == (3, 0)\nassert     count_same_pair([1, 2, 1, 3, 4], [2, 1, 4, 3, 1]) == (2, 3)\nassert     count_same_pair([1, 2, 1, 3, 4], [2, 1, 4, 3, 2]) == (1, 3)\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef count_same_pair_test(nums1, nums2):\n    if nums1 is None or nums2 is None:\n        return 0\n    n1 = len(nums1)\n    n2 = len(nums2)\n    if n1!= n2:\n        return 0\n    count = 0\n    for i in range(n1):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     power_base_sum(3, 0) == 3\nassert     power_base_sum(3, 1) == 1\nassert     power_base_sum(3, 2) == 3\nassert     power_base_sum(3, 3) == 6\nassert     power_base_sum(3, 4) == 3\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     power_base_sum(2, 2) == 2, \"Should be 2\"\nassert     power_base_sum(2, 1) == 3, \"Should be 3\"\nassert     power_base_sum(3, 1) == 3, \"Should be 3\"\nassert     power_base_sum(4, 1) == 6, \"Should be 6\"\nassert     power_base_sum(5, 1) == 7, \"Should be 7\"\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     power_base_sum(2, 2) == 8\nassert     power_base_sum(2, 3) == 18\nassert     power_base_sum(9, 2) == 54\nassert     power_base_sum(9, 3) == 145\nassert     power_base_sum(9, 4) == 384\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     power_base_sum(2, 4) == 8, '2 to the power 4 should be 8'\nassert     power_base_sum(10, 6) == 900, '10 to the power 6 should be 900'\nassert     power_base_sum(2, 3) == 8, '2 to the power 3 should be 8'\nassert     power_base_sum(7, 8) == 49, '7 to the power 8 should be 49'\nassert     power_base_sum(2, 10) == 20, '2 to the power 10 should be 20'\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     power_base_sum(2, 0) == 0, \"power_base_sum(2, 0) is wrong\"\nassert     power_base_sum(2, 1) == 2, \"power_base_sum(2, 1) is wrong\"\nassert     power_base_sum(2, 2) == 4, \"power_base_sum(2, 2) is wrong\"\nassert     power_base_sum(2, 3) == 10, \"power_base_sum(2, 3) is wrong\"\nassert     power_base_sum(2, 4) == 12, \"power_base_sum(2, 4) is wrong\"\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     power_base_sum(10, 1) == 10\nassert     power_base_sum(10, 2) == 23\nassert     power_base_sum(10, 3) == 651\nassert     power_base_sum(10, 5) == 7811\nassert     power_base_sum(10, 6) == 90000\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     power_base_sum(4, 3) == 12\nassert     power_base_sum(0, 0) == 0\nassert     power_base_sum(0, 1) == 0\nassert     power_base_sum(0, 2) == 0\nassert     power_base_sum(0, 3) == 0\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     power_base_sum(100, 2) == 5, 'Wrong result'\nassert     power_base_sum(10, 1) == 10, 'Wrong result'\nassert     power_base_sum(10, 2) == 20, 'Wrong result'\nassert     power_base_sum(10, 3) == 31, 'Wrong result'\nassert     power_base_sum(10, 4) == 44, 'Wrong result'\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \npower_base_sum(3,5) == 27\nassert power_base_sum(4,6) == 45\nassert power_base_sum(100,3) == 5555\n\n'''\nWrite a function that takes base and power as arguments and return the sum of digits of the base to the specified power.\n'''\ndef power_base_sum2(base, power):\n    '''\n    Write a function that takes base and power as arguments and return the sum of digits of the base to the specified power.\n    '''\n    pass\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_quotation('\"This is a sample quote\"') == 'quote quote quote quote quote quote'\nassert     extract_quotation('\"This is a sample quote\"') == 'quote quote quote quote quote quote quote'\nassert     extract_quotation('this is a sample quote') == 'quote quote quote quote quote quote quote'\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_quotation(\"A.B.C D\") == \"ABC\"\nassert     extract_quotation(\"A,B,C D\") == \"ABC\"\nassert     extract_quotation(\"A.B.C. D\") == \"ABC\"\nassert     extract_quotation(\"A.B.C D\") == \"ABC\"\nassert     extract_quotation(\"A.B D\") == \"B\"\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_quotation(\"'What is the airspeed velocity of an unladen swallow?'\") == 'What is the airspeed velocity of an unladen swallow?'', 'test failed'\nassert     extract_quotation(\"'What is the airspeed velocity of an unladen swallow?' 'What is the airspeed velocity of an unladen swallow?'\") == 'What is the airspeed velocity of an unladen swallow? What is the airspeed velocity of an unladen swallow?', 'test failed'\nassert     extract_quotation(\"What is the airspeed velocity of an unladen swallow?' The airspeed velocity of an unladen swallow?'\") == 'What is the airspeed velocity of an unladen swallow? The airspeed velocity of an unladen swallow?', 'test failed'\nassert     extract_quotation(\"What is the airspeed velocity of an unladen swallow?' The airspeed velocity of an unladen swallow?'\") == 'What is the airspeed velocity of an unladen swallow? The airspeed velocity of an unladen swallow?', 'test failed'\nassert     extract_quotation(\"What is the airspeed velocity of an unladen swallow?' The airspeed velocity of an unladen swallow?'\") == 'What is the airspeed velocity of an unladen swallow? The airspeed velocity of an unladen swallow?', 'test failed'\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_quotation('\"Exercises are often named by simply their name.  \"P.S. It is never named as, \"EXERCISE\" \"P.S.\"') == \"P.S. It is never named as, EXERCISE\"\n\n\ndef extract_phone(text1):\n    '''\n    Write a function to extract values between quotation marks in the given string and return the extracted string.\n    '''\n    pass\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_quotation('Hello \"World\" this is my first function')== 'World'\nassert     extract_quotation(' Hello this is my first function \"World\"')== 'World'\nassert     extract_quotation('Hello this is my first function \"World\"')== 'World'\nassert     extract_quotation('Hello this is my first function \"World\"')== 'World'\nassert     extract_quotation('Hello this is my first function \"World\"')== 'World'\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint('\"Square root of 2 is ',extract_quotation('\"Square root of 2 is 10'))"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_quotation('the first \"quoted\" text') == 'the first quoted text'\nassert     extract_quotation('the first \"quoted\" text') == 'the first quoted text'\nassert     extract_quotation('the first \"quoted\" text') == 'the first quoted text'\nassert     extract_quotation('the \"first\" \"quoted\" text') == 'the first quoted text'\nassert     extract_quotation('the \"first\" \"quoted\" text') == 'the first quoted text'\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef extract_quotation(text1):\n    \"\"\"\n    Write a function to extract values between quotation marks \" \" of the given string.\n    \"\"\"\n    regex = re.compile(r\"\\\"[\\w\\s]*\\\"\")\n    text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\"\n    # text1 = \"\\\" He said, \\\"The Apple iPhone 11 is now available.\\\"\""
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_quotation('I am learning to code in \"Python\".') == 'Python'\nassert extract_quotation('I am learning to code in \"Python\".') == 'Python'\nassert extract_quotation('I am learning to code in \"Python\".') == 'Python'\nassert extract_quotation('I am learning to code in \"Python\".') == 'Python'\nassert extract_quotation('I am learning to code in \"Python\".') == 'Python'\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_quotation('\"This is a sample quotation\"') == \"This is a sample quotation\"\nassert     extract_quotation('\"This is a sample quotation\"') == \"This is a sample quotation\"\nassert     extract_quotation('\"This is a sample quotation\"') == \"This is a sample quotation\"\nassert     extract_quotation('\"This is a sample quotation\"') == \"This is a sample quotation\"\nassert     extract_quotation('\"This is a sample quotation\"') == \"This is a sample quotation\"\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     multiply_elements((1,2,3)) == (1,2,3)\nassert     multiply_elements((1,2,3,4)) == (1,2,3,4)\nassert     multiply_elements((1,2,3,4,5)) == (1,2,3,4,5)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     multiply_elements((1, 2, 3, 4, 5)) == (1, 2, 3, 4, 5)\nassert     multiply_elements((5, 4, 3, 2, 1)) == (5, 4, 3, 2, 1)\nassert     multiply_elements((9, 8, 7, 6, 5)) == (9, 8, 7, 6, 5)\n\n\ndef remove_element(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i - t_{i+1}.\n    '''\n    pass\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     multiply_elements((1, 2, 3, 4)) == (1, 2, 3, 4, 4, 6, 12, 8)\nassert     multiply_elements((1, 2, 3, 4, 5)) == (1, 2, 3, 4, 5, 6, 12, 8, 20, 15)\nassert     multiply_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 2, 4, 6, 8, 10, 20, 30, 40, 60, 120, 240, 360, 720, 1440)\nassert     multiply_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 2, 4, 6, 8, 10, 11, 12, 13, 14, 3, 6, 9, 12, 14, 24, 48, 72, 144, 336, 720, 1440, 5040)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     multiply_elements((1,2,3,4,5)) == (1,2,3,4,5)\nassert     multiply_elements((1,2,3)) == (1,2,3)\n\ndef print_tuple(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers and prints it in a human-readable format (e.g. 1 2 3).\n    '''\n    pass\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     multiply_elements((1,2,3,4)) == (1,2,3,4)\nassert     multiply_elements((1,2,3,4,5,6)) == (1,2,3,4,5,6)\nassert     multiply_elements((1,2,3,4,5,6,7,8,9,10)) == (1,2,3,4,5,6,7,8,9,10)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     multiply_elements((1, 2, 3)) == (1, 2, 3)\nassert     multiply_elements((1, 2, 3, 4)) == (1, 4, 6, 8)\nassert     multiply_elements((1, 2, 3, 4, 5)) == (1, 4, 6, 8, 10)\nassert     multiply_elements((0, 0, 0, 0)) == (0, 0, 0, 0)\n\n'''\n4. Implement a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i + t_{i+1}.\n'''\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     multiply_elements((1,2)) == (1,2,2)\nassert     multiply_elements((1,2,3)) == (1,2,3,6)\nassert     multiply_elements((1,2,3,4)) == (1,2,3,4,12)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     multiply_elements((2,3,4)) == (2*3*4,3*4,4*4)\nassert     multiply_elements((-2,4,8)) == (-2*4,4*8)\nassert     multiply_elements((1,2,3)) == (1*2*3,2*3,3*3)\nassert     multiply_elements((-2,-4,-8)) == (-2*-4,-4*-8)\nassert     multiply_elements((-1,2,3)) == (-1*2*3,-2*3,3*3)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert multiply_elements((1,2,3)) == (2,4,6)\nassert multiply_elements((-1,0,1)) == (-1,0,1)\n\n'''\n5. Write a Python program to create a tuple with different data types.\n'''\ndef tuple_data_types(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    pass\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     multiply_elements((1,2,3)) == (1,2,3)\nassert     multiply_elements((2,5,3)) == (2,10,3)\nassert     multiply_elements((2,2,3)) == (4,4,6)\n\ndef find_the_duplicate(my_list):\n    '''\n    Write a function that takes as input a list of numbers and returns a single number which is the first duplicate value in the list. If there are no duplicates return -1.\n    '''\n    pass\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_list([1,2,3], [4,5,6]) == [1+4,2+5,3+6]\nassert     sum_list([2,2], [3,5]) == [2+3,2+5]\nassert     sum_list([2,3,4], [1,2,4]) == [2+1,3+2,4+4]\nassert     sum_list([5,6,7], [8,9,10]) == [5+8,6+9,7+10]\nprint('Correct!')\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    sum_list([1,2,3], [4,5,6]) == [5,7,9]\n    sum_list([1,2,3], [1,2,3]) == [2,4,6]\n    sum_list([1,2], [2,3,4]) == [3,4,5]\n    sum_list([1,2,3,4,5], [1,2,3,4,5]) == [2,4,6,8,10]\n    sum_list([1,2,3], [2,3]) == [3,4]\n    sum_list([1,2], [1,2,3]) == [2,4]\n    sum_list([1,2], [1]) == [2]\n    sum_list([1], [1]) == [2]\n    sum_list([], [1]) == []\n    sum_list([], []) == []\n    sum_list([1,2], []) == [3]\n    sum_list([1], []) == []\n    sum_list([1], ) == []\n    sum_list([1], ) == []\n    sum_list([1], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []\n    sum_list([], ) == []"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_list([1,2,3],[2,3,4]) == [3, 5, 7]\nassert     sum_list([1,2,3],[1,2,3]) == [2, 4, 6]\nassert     sum_list([], []) == []\nassert     sum_list([], [1,2,3]) == []\nassert     sum_list([1,2,3],[4,5,6]) == [5, 7, 9]\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_list([1,2,3,4,5],[3,4,5,6,7]) == [4,5,8,9,10] \nassert     sum_list([1,2,3],[4,5,6]) == [5,7,9]\nassert     sum_list([1,2,3],[]) == [3,3,3]\nassert     sum_list([1],[1,2,3]) == [1,2,3]\nassert     sum_list([1,2,3],[]) == [1,2,3]\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_list([1,2,3],[4,5,6]) == [5,7,9]\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef sort_list(lst):\n    '''\n    Write a function takes as input a list of integers and returns the sorted list.\n    '''\n    pass\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef find_two_common_elements(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n] and [b_1,...,b_n] and returns a list containing the indices of the common elements in both lists.\n    '''\n    pass\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nsum_list([1,2,3],[4,5,6]) == [5,7,9]\nprint('Testing passed')\n\n'''\nWrite a function takes as input a list and returns a list that contains a list for every element in the input list. \nThe inner lists contains the elements of the input list and their squares.\n'''"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_list([1,2,3],[4,5,6]) == [5,7,9], \"Wrong\"\nassert     sum_list([1,2,3],[4,5,6,7]) == [5,7,9,11], \"Wrong\"\nassert     sum_list([1,2,3],[4,5,6,7,8]) == [5,7,9,11,13], \"Wrong\"\nassert     sum_list([1,2,3,4],[5,6,7,8,9]) == [6,8,10,12,14], \"Wrong\"\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     consecutive_duplicates(['3', '1', '3', '1', '2', '4', '3', '1', '3', '1', '1', '2', '2']) == ['3', '1', '2', '4', '3', '1', '1', '2', '2']\nassert     consecutive_duplicates([1,1,2,2,3,3,3,5,5]) == [1,2,3,5]\nassert     consecutive_duplicates([1,1,2,3,3,3,3]) == [1,2,3]\nassert consecutive_duplicates([1,1,2,2,2,3,3]) == [1,2,3]\nassert consecutive_duplicates([1,1,2,2,3,3,3,5,5,5]) == []\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     consecutive_duplicates([1,2,3,2,1]) == False, \"Consecutive duplicates\"\nassert consecutive_duplicates([1,2,2,3,4]) == True, \"No consecutive duplicates\"\nassert consecutive_duplicates([1,2,2,2,4]) == False, \"Consecutive duplicates\"\nassert consecutive_duplicates([1,1,2,2,2,2,2,3,4,4]) == False, \"Duplicates after sorted\"\nassert consecutive_duplicates([1,2,3,2,1]) == False, \"Duplicates after sorted\"\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     consecutive_duplicates([1,2,3,4,5,6,7,8]) == False\nassert     consecutive_duplicates([1,2,3,4,5,5,6,7,8]) == True\nassert     consecutive_duplicates([1,2,2,4,5,5,6,7,8]) == True\nassert     consecutive_duplicates([1,2,3,4,5,6,7,8]) == False\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     consecutive_duplicates([1, 2, 3, 2, 1, 2]) == [[1, 2, 3], [2, 1, 2]]\nassert     consecutive_duplicates([1, 1, 1, 1, 2, 2, 2, 2, 3]) == [[1, 1, 1, 1], [2, 2, 2, 2], [3]]\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     consecutive_duplicates([1,2,3,4,5,5,6]) == False, \\\n    \"consecutive_duplicates should return False when the list has duplicate values.\"\nassert     consecutive_duplicates([1,1,2,3,4,5,5,6]) == True, \\\n    \"consecutive_duplicates should return True when there are duplicate values.\"\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     consecutive_duplicates([1,1,1]) == [1]\nassert     consecutive_duplicates([]) == []\nassert     consecutive_duplicates([2,2,2,2]) == [2,2,2,2]\nassert consecutive_duplicates([1,1,1,1,1,1,1,1,1,1,1,1]) == []\nassert consecutive_duplicates([1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     consecutive_duplicates([1,2,3,4,5,5]) ==         [1,2,3,4,5]\nassert     consecutive_duplicates([1,1,1,1,1,2,2,2,2,2]) ==     [1,1,1,1,2,2,2,2]\nassert     consecutive_duplicates([1,1,1,1,1,1,1,2,2,2,2]) ==     [1,1,1,1,1,1,2,2,2]\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     consecutive_duplicates([1, 1, 1, 2, 2, 3]) == False, \\\n    \"incorrect\"\nassert     consecutive_duplicates([1, 1, 1, 2, 2, 3, 4, 4, 5]) == True, \\\n    \"incorrect\"\nassert     consecutive_duplicates([1, 1, 1, 2, 2, 3, 4, 4, 5, 5, 5]) == False, \\\n    \"incorrect\"\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     consecutive_duplicates([1,2,2,3]) ==  True, '1, 2, 2, 3: failed'\nassert     consecutive_duplicates([1,2,3,3,4]) == False, '1, 2, 3, 3, 4: failed'\nassert     consecutive_duplicates([1,1,1,1]) == True, '1, 1, 1, 1: failed'\n\n'''\ntime complexity O(N)\nspace complexity O(N)\n'''\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef lateralsurface_pyramid(r1,r2,h):\n    '''\n    Write a function to find the lateral surface area of a pyramid given radius r1,r2 and the height h.\n    '''\n    pass\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nlateralsurface_cone(0.5,0.2) == 0\nlateralsurface_cone(3,1) == 6.3\nlateralsurface_cone(1.5,3) == 7.0\nlateralsurface_cone(1.5,3) == 7.0\nlateralsurface_cone(0.5,3) == 6.3\nlateralsurface_cone(0.5,3) == 6.3\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nlateralsurface_cone(5,4) == 3.11\nlateralsurface_cone(5,2) == 3.15\nlateralsurface_cone(2,3) == 1.22\nlateralsurface_cone(3,1) == 2.22\nlateralsurface_cone(2.2,2) == 4.06\nlateralsurface_cone(2.2,2.2) == 4.06\nlateralsurface_cone(5.5,5) == 7.54\nlateralsurface_cone(5,4.5) == 7.54\nlateralsurface_cone(0,0) == 0\nlateralsurface_cone(3,5) == 3\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pass\n\ndef surface_area(r,h):\n    '''\n    Write a function to find the surface area of a cone given radius r and the height h.\n    '''\n    pass\n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pass\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef lateralsurface_circle(r):\n    '''\n    Write a function to find the lateral surface area of a circle given radius r.\n    '''\n    pass\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     lateralsurface_cone(1.0,2.0) == 1.5707963267948966, \"Your function returns incorrect value\"\nassert     lateralsurface_cone(2.0,5.0) == 6.283185307179586, \"Your function returns incorrect value\"\nassert     lateralsurface_cone(2.0,0.5) == 0.7853981633974483, \"Your function returns incorrect value\"\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     replace_specialchar('hi,my name is jose') == 'hi:my name is jose'\nassert     replace_specialchar('hi,my name is:jose') == 'hi:my name is:jose'\nassert     replace_specialchar('my name is jose') =='my name is:jose'\nassert     replace_specialchar('hi:my name is jose') == 'hi:my name is jose'\nassert     replace_specialchar('my name is jose') =='my name is:jose'\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    replace_specialchar(\"I am space,,dot\") == \"I am :, :dot\"\n    assert\n    replace_specialchar(\"this is a special char,..,..\") == \"this is a special char:,,.,.\"\n    assert\n    replace_specialchar(\"A-Za-z0-9\") == \"A-Za-z0-9\"\n    assert\n    replace_specialchar(\"!\") == \"! \"\n    assert\n    replace_specialchar(\"W#0\") == \"W:0 \"\n    "
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef replace_newline(text):\n    '''\n    Write a function to replace all new line characters (i.e., \"\\\"\\r\\\"\\n\") with a period (\".\").\n    '''\n    pass\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     replace_specialchar(\"we are students\") == \"we:are:students\"\nassert     replace_specialchar(\"\" ) == \"\"\nassert     replace_specialchar(\" \") == \":\"\nassert     replace_specialchar(\";\") == \":\"\nassert     replace_specialchar(\",\") == \":\"\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     replace_specialchar(\"Ivan, a singer, and a dancer\") == \"Ivan: a singer: and a dancer\"\nassert     replace_specialchar(\"David, a singer, and a dancer\") == \"David: a singer: and a dancer\"\nassert     replace_specialchar(\"Ivan, a singer, and a dancer\") == \"Ivan: a singer: and a dancer\"\nassert     replace_specialchar(\"David, a singer, and a dancer\") == \"David: a singer: and a dancer\"\nassert     replace_specialchar(\"Ivan, a singer, and a dancer\") == \"Ivan: a singer: and a dancer\"\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n'''\n5. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u00ab\u0420\u0435\u0439\u0442\u0438\u043d\u0433\u00bb, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0443\u044e \u0441\u043e\u0431\u043e\u0439 \u043d\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u044e\u0449\u0438\u0439 \u043d\u0430\u0431\u043e\u0440 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b.\n\u0423 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0442\u044c \u043d\u043e\u0432\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430. \u0415\u0441\u043b\u0438 \u0432 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0441 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438,\n\u0442\u043e \u043d\u043e\u0432\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0441 \u0442\u0435\u043c \u0436\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u0434\u043e\u043b\u0436\u0435\u043d \u0440\u0430\u0437\u043c\u0435\u0441\u0442\u0438\u0442\u044c\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u043d\u0438\u0445.\n\u041f\u043e\u0434\u0441\u043a\u0430\u0437\u043a\u0430. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043d\u0430\u0431\u043e\u0440 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b: 7, 5, 3, 3, 2.\n\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u0432\u0435\u043b \u0447\u0438\u0441\u043b\u043e 3. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: 7, 5, 3, 3, 3, 2.\n\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u0432\u0435\u043b \u0447\u0438\u0441\u043b\u043e 8. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: 8, 7, 5, 3, 3, 2.\n\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u0432\u0435\u043b \u0447\u0438\u0441\u043b\u043e 1. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: 7, 5, 3, 3, 2, 1.\n\u041d\u0430\u0431\u043e\u0440 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u043c\u043e\u0436\u043d\u043e \u0437\u0430\u0434\u0430\u0442\u044c \u043d\u0435\u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0432 \u043a\u043e\u0434\u0435, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, my_list = [7, 5, 3, 3, 2].\n'''\n\ndef create_rating_list(list):\n    '''\n    Write a function to create rating list from given list and return it.\n    '''\n    pass\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     replace_specialchar(    \"Hey, how are you?\" ) == \"Hey: how are you?\"\nassert     replace_specialchar(    \"Hello, how are you?\" ) == \"Hello: how are you?\"\nassert     replace_specialchar(    \"Hi! How are you?\" ) == \"Hi: how are you?\"\nassert     replace_specialchar(    \"Hi\" ) == \"Hi\"\nassert     replace_specialchar(    \"Hi. How are you?\" ) == \"Hi: how are you?\"\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     re.match(r'[\\s,\\.]', \n    \"asdfasdf\"), \"Regex Matching : re.match(r'[\\s,\\.]', 'asdfasdf')\"\nassert not re.match(r'[\\s,\\.]', \n    \"asdf\"), \"Regex Matching : re.match(r'[\\s,\\.]', 'asdf')\"\nassert    re.match(r'[\\s,\\.]', \n    \"sdfasd\"), \"Regex Matching : re.match(r'[\\s,\\.]','sdfasd')\"\nassert not re.match(r'[\\s,\\.]', \n    \"sdf\"), \"Regex Matching : re.match(r'[\\s,\\.]','sdf')\"\nassert not re.match(r'[\\s,\\.]', \n    \"ssdf\"), \"Regex Matching : re.match(r'[\\s,\\.]','ssdf')\"\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     replace_specialchar(\"isbn: 3 745 543 21\") == \"isbn: 3.745.5432.21\"\nassert replace_specialchar(\"abc, def,ghi\") == \"abc.def.ghi\"\nassert replace_specialchar(\"abc:def:ghi\") == \"abc:def:ghi\"\nassert replace_specialchar(\"abc::ghi\") == \"abc.ghi\"\nassert replace_specialchar(\"abc:def::ghi\") == \"abc:def:ghi\"\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     replace_specialchar(\"My Name is John and I live in Boston\") == \"My Name is John and I live in: Boston\"\nassert     replace_specialchar(\"My Name is John and I live in Boston, NY\") == \"My Name is John and I live in: Boston, NY\"\nassert     replace_specialchar(\"My Name is John and I live in Boston, NY and have a dog.\") == \"My Name is John and I live in: Boston, NY and have a dog.\"\nassert     replace_specialchar(\"My Name is John and I live in Boston, NY and have a dog and she lives in Los Angeles.\") == \"My Name is John and I live in: Boston, NY and have a dog and she lives in: Los Angeles.\"\n\n'''\nWrite a function that replaces spaces with \u201c%20\u201d.\n'''"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_first_occurrence([1,2,3],3) == 2\nassert     find_first_occurrence([1,2,3],3) == 3\nassert     find_first_occurrence([1,2,3],1) == 1\nassert     find_first_occurrence([1,2,3],4) == -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_first_occurrence([1,2,3,5,5,5], 5) == 4\nassert     find_first_occurrence([1,2,3,5,5,5], 0) == 0\nassert     find_first_occurrence([1,2,3,5,5,5], 3) == 2\nassert     find_first_occurrence([1,2,3,5,5,5], 4) == 5\nassert     find_first_occurrence([1,2,3,5,5,5], 6) == 5\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_first_occurrence([0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 13, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 2"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_first_occurrence([1, 2, 3, 4], 1) == 0\nassert     find_first_occurrence([1, 2, 3, 4], 3) == 3\nassert     find_first_occurrence([1, 2, 3, 4], 5) == -1"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert find_first_occurrence([1,2,3], 1) == 0\nassert find_first_occurrence([1,2,3], 2) == 1\nassert find_first_occurrence([1,2,3], 3) == 2\nassert find_first_occurrence([1,2,3], 4) == -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_first_occurrence([1,2,3,4,5], 5) == 3\nassert     find_first_occurrence([1,2,3,4,5], -1) == -1\nassert     find_first_occurrence([], -1) == -1\nassert     find_first_occurrence([1,2,3,4,5], 0) == 0\nassert     find_first_occurrence([1,2,3,4,5], 1) == 0\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nfind_first_occurrence([1,2,2,3,4,5], 2) == 3\n\ndef find_last_occurrence(A, x):\n    '''\n    Write a function to find the index of the last occurrence of a given number in a sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_first_occurrence([1,2,3,4,5,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef sum_Of_subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    pass\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_Of_Subarray_Prod([1,2,3,4,5]) == [120,60,40,30,24]\nassert     sum_Of_Subarray_Prod([3,2,1]) == [2,3,6]\nassert     sum_Of_Subarray_Prod([1,1,1]) == [1,3,6]\n\n'''\nWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\nFor example, for the following list:\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_Of_Subarray_Prod([1, 2, 3, 4, 5, 6]) == 30, 'wrong result'\nassert     sum_Of_Subarray_Prod([2, 3, 4]) == 6, 'wrong result'\nassert     sum_Of_Subarray_Prod([5, 3, 2, 1]) == 10, 'wrong result'\nassert     sum_Of_Subarray_Prod([1, 1, 1]) == 1, 'wrong result'\nassert     sum_Of_Subarray_Prod([2, 3, 4, 5, 6]) == 36, 'wrong result'\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef generate_All_Possible_Subarrays(n):\n    '''\n    Given a List of integers, write a python function to find all the possible subarrays of a given list and their respective products.\n    '''\n    pass\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_Of_Subarray_Prod([1,2,3,4,5]) == 120\nassert     sum_Of_Subarray_Prod([0,2,3,4,5]) == 0\nassert     sum_Of_Subarray_Prod([-1,2,3,4,5]) == 0\nassert     sum_Of_Subarray_Prod([-2,-3,4,-5,6]) == -180\nassert     sum_Of_Subarray_Prod([-3,-2,-1,1,2,3]) == -180\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n\ndef check(arr,k):\n    '''\n    Write a python function to check if a list is a palindrome. https://www.geeksforgeeks.org/python-program-to-check-if-a-given-list-is-a-palindrome/\n    '''\n    pass\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_Of_Subarray_Prod([1,2,3,4,5]) == 120\nassert     sum_Of_Subarray_Prod([2,3,4,5]) == 20\nassert     sum_Of_Subarray_Prod([3,4,5]) == 30\nassert     sum_Of_Subarray_Prod([5]) == 5\nassert     sum_Of_Subarray_Prod([]) == 0"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_Of_Subarray_Prod([1,2,3]) == 6,     \"Input :  [1,2,3], Expected : 6\"\nassert     sum_Of_Subarray_Prod([1,2,3,4]) == 24,     \"Input :  [1,2,3,4], Expected : 24\"\nassert     sum_Of_Subarray_Prod([5,6,7]) == 10,     \"Input :  [5,6,7], Expected : 10\"\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     set_middle_bits(16) == 1\nassert     set_middle_bits(16) == 0\nassert     set_middle_bits(16) == 1\nassert     set_middle_bits(10) == 1\nassert     set_middle_bits(0) == 1\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(f'Input: {set_middle_bits(2)}')\n    print(f'Output: {set_middle_bits(2)}')"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     set_middle_bits(12) == 128\nassert     set_middle_bits(11) == 255\nassert     set_middle_bits(100) == 1\nassert     set_middle_bits(0) == 0\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     set_middle_bits(0b1010) == 0b1011\nassert     set_middle_bits(0b10101) == 0b10110\nassert     set_middle_bits(0b10100) == 0b10011\nassert     set_middle_bits(0b110101) == 0b110111\n\ndef set_first_and_last_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    pass\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     left_insertion([1, 2, 3, 4], 4) == 3\nassert     left_insertion([1, 2, 3, 4], 5) == 4\nassert     left_insertion([1, 2, 3, 4], 0) == 0\nassert     left_insertion([], 1) == 0\nassert     left_insertion([], -1) == 0\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     left_insertion([1, 2, 4, 5, 6, 7, 8, 9], 2) == 1\nassert     left_insertion([1, 2, 3, 4, 5, 6, 7, 8, 9], -10) == 0\nassert     left_insertion([], -1) == -1\nassert     left_insertion([1], 1) == 0\n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     left_insertion([1,2,3,4,5,6,7,8,9,10], 10) == 8, \"Wrong result\"\nassert left_insertion([1,2,3,4,5,6,7,8,9,10], 0) == 0, \"Wrong result\"\nassert left_insertion([1,2,3,4,5,6,7,8,9,10], 5) == 5, \"Wrong result\"\nassert left_insertion([1,2,3,4,5,6,7,8,9,10], 4) == 4, \"Wrong result\"\nassert left_insertion([1,2,3,4,5,6,7,8,9,10], 3) == 3, \"Wrong result\"\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert left_insertion( [1,2,3,4,5,6], 4 ) == 4\nassert left_insertion( [1,2,3,4,5,6], 2 ) == 1\nassert left_insertion( [1,2,3,4,5,6], 1 ) == 0\nassert left_insertion( [1,2,3,4,5,6], 6 ) == 5\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    l = 0\n    r = len(a) - 1\n    # print(l, r)\n    while l <= r:\n        m = (l + r) // 2\n        # print(a[m])\n        if x == a[m]:\n            return m\n        elif x < a[m]:\n            r = m - 1\n        else:\n            l = m + 1\n    return -1\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    \n    return re.search(r'^[aeiouAEIOU][A-Za-z0-9_]*',string)\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_str('e') == True,'should return True' \nassert     check_str('E') == True,'should return True'\nassert     check_str('a') == False,'should return False'\nassert     check_str('A') == False,'should return False'\nassert     check_str('0') == False,'should return False'\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_str('A') == True, \"Not matched\"\nassert     check_str('B') == False, \"Not matched\"\nassert     check_str('C') == False, \"Not matched\"\nassert     check_str('D') == True, \"Not matched\"\nassert     check_str('E') == True, \"Not matched\"\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is ending with a vowel or not using regex.\n    '''\n    pass\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_str('John') == True, 'John is not a valid name'\nassert     check_str('john') == False, 'john is not a valid name'\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert check_str('apple') == False, 'test1'\nassert check_str('ap') == True, 'test2'\nassert check_str('bicycle') == False, 'test3'\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert check_str('python') == False, \"incorrect output\"\nassert check_str('python is awesome') == True, \"incorrect output\"\nassert check_str('Python') == True, \"incorrect output\"\nassert check_str('python and javascript') == True, \"incorrect output\"\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_str('aeiou') == True, \"Expected True\"\nassert     check_str('keerthan') == False, \"Expected False\"\nassert     check_str('A') == True, \"Expected True\"\n\nprint(re.match(regex, 'a'))\n\ndef check_str(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True\n    else: \n        return False\n        "
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_str(\"Makwana\")==True, \"False\"\nassert     check_str(\"Bansal\")==False, \"True\"\nassert     check_str(\"Elvis\")==True, \"False\"\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     geometric_sum(4) == 1, 'Test Case 1'\nassert     geometric_sum(5) == 2, 'Test Case 1'\nassert     geometric_sum(10) == 36, 'Test Case 1'\nassert     geometric_sum(100) == 23340, 'Test Case 1'\nassert geometric_sum(3) == 7, 'Test Case 2'\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(geometric_sum(3))"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     geometric_sum(0) == 0\nassert     geometric_sum(1) == 1\nassert     geometric_sum(2) == 2\nassert     geometric_sum(3) == 4\nassert     geometric_sum(4) == 6\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     geometric_sum(4) == 5\nassert     geometric_sum(5) == 10\nassert     geometric_sum(10) == 36\nassert geometric_sum(11) == 2512\nassert geometric_sum(100) == 502500\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     geometric_sum(5) == 5, \"Incorrect Output\"\nassert     geometric_sum(0) == 0, \"Incorrect Output\"\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     geometric_sum(2) == 2\nassert     geometric_sum(3) == 5\nassert     geometric_sum(4) == 14\nassert     geometric_sum(5) == 55\n\nprint('geometric_sum Success')\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Index(5) == 3, find_Index(5)\nassert     find_Index(3) == 2, find_Index(3)\nassert     find_Index(10) == 2, find_Index(10)\nassert     find_Index(1) == 1, find_Index(1)\nassert     find_Index(4) == 3, find_Index(4)\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef find_Smallest_Triangular_Number(n):\n    '''\n    Write a python function to find the smallest triangular number with n digits.\n    '''\n    pass\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    pass\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nassert find_Index(2) == 0\nassert find_Index(3) == 1\nassert find_Index(4) == 2\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(find_Index(2))\nprint(find_Index(3))\nprint(find_Index(4))\nprint(find_Index(5))\nprint(find_Index(6))\nprint(find_Index(7))\nprint(find_Index(8))\nprint(find_Index(9))\nprint(find_Index(10))\n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    pass\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef find_smallest_triangular_number(n):\n    '''\n    Write a python function to find the smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    pass\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert tuple_to_dict([(1, 2), (3, 4)]) == {1: 2, 3: 4}, 'incorrect'\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_to_dict((1, 2, 3, 4, 5, 6, 7, 8, 9)) == {1: 2, 3: 4, 5: 6, 7: 8, 9: 10}\nassert tuple_to_dict((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == {1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10}\nassert tuple_to_dict((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)) == {1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10, 10: 11}\nassert tuple_to_dict((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)) == {1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10, 10: 11, 11: 12}"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_to_dict((1,2)) == {1:2}\nassert tuple_to_dict((1,2,3)) == {1:2, 2:3}\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tuple_to_dict([1,2,3,4,5]) == {1:2,2:3,3:4,4:5}, 'Should return dictionary for given tuple'\nassert tuple_to_dict((1,2,3,4,5)) == {1:2,2:3,3:4,4:5}, 'Should return dictionary for given tuple'\nassert tuple_to_dict([1,(2,3),4,5]) == {1:2,2:3,3:4,4:5}, 'Should return dictionary for given tuple'\nassert tuple_to_dict([1,2,(3,4),5]) == {1:2,2:3,3:4,4:5}, 'Should return dictionary for given tuple'\nassert tuple_to_dict([1,(2,3),4,5,(6,7),8]) == {1:2,2:3,3:4,4:5,6:7,7:8}, 'Should return dictionary for given tuple'\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tuple_to_dict((1, 2, 3, 4)) == {(1, 2): 3, (2, 3): 4}\nassert tuple_to_dict((2, 3, 4, 5)) == {(2, 3): 4, (3, 4): 5}\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tuple_to_dict((1,2,3,4,5)) == {\"1\":2, \"2\":3, \"3\":4, \"4\":5}\nassert     tuple_to_dict((\"a\",1,2)) == {'a': 1, '1':2}\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef dict_to_tuple(test_dict):\n    '''\n    Write a function to convert the given dictionary to a key-value tuple using adjacent elements. https://www.geeksforgeeks.org/python-convert-dictionary-to-key-value-tuple/\n    '''\n    pass\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == '__main__':\n    import timeit\n    test_tup = (1,2,3,4,5)\n    print('tuple_to_dict(test_tup): ', tuple_to_dict(test_tup))\n\n    print('tuple_to_dict(tuple_to_dict(test_tup)): ', tuple_to_dict(tuple_to_dict(test_tup)))\n\n    print('tuple_to_dict(test_tup): ', tuple_to_dict(test_tup))\n    print('tuple_to_dict(tuple_to_dict(test_tup)): ', tuple_to_dict(tuple_to_dict(test_tup)))\n\n    print(timeit.timeit('tuple_to_dict(test_tup)', setup=\"from __main__ import tuple_to_dict\", number=100000))\n    print(timeit.timeit('tuple_to_dict(tuple_to_dict(test_tup))', setup=\"from __main__ import tuple_to_dict\", number=100000))\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tuple_to_dict(('a', 'b', 'c', 'd')) == {'a':'b', 'b':'c', 'c':'d'}\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     all_Characters_Same(s = 'aba') == True, \"Wrong output\"\nassert     all_Characters_Same(s = 'abaab') == False, \"Wrong output\"\nassert     all_Characters_Same(s = 'abc') == True, \"Wrong output\"\nassert     all_Characters_Same(s = 'abcde') == False, \"Wrong output\"\nassert     all_Characters_Same(s = '') == True, \"Wrong output\"\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     all_Characters_Same(\"abcabc\") == True\nassert     all_Characters_Same(\"abcabcdef\") == False\nassert     all_Characters_Same(\"abcdef\") == True\nassert     all_Characters_Same(\"efabc\") == False\nassert     all_Characters_Same(\"efabcd\") == False\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     all_Characters_Same(\"abd\") == False, \"Wrong output\"\nassert     all_Characters_Same(\"bcd\") == True, \"Wrong output\"\nassert     all_Characters_Same(\"bd\") == True, \"Wrong output\"\nassert     all_Characters_Same(\"bdb\") == False, \"Wrong output\"\nassert     all_Characters_Same(\"abdb\") == False, \"Wrong output\"\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     all_Characters_Same('python') == True, \"Failed\"\nassert     all_Characters_Same('python') == True, \"Failed\"\nassert     all_Characters_Same('python') == False, \"Failed\"\nassert     all_Characters_Same('python') == False, \"Failed\"\nassert     all_Characters_Same('python') == False, \"Failed\"\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     all_Characters_Same('anuj') == False,'sadf'\nassert     all_Characters_Same('anuj') == True,'sadf'\nassert     all_Characters_Same('anuj') == False,'sadf'\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     all_Characters_Same('mango') == False, 'All Characters are different'\nassert     all_Characters_Same('abcde') == True, 'All Characters are the same'\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     all_Characters_Same([\"A\", \"A\", \"A\"]) == True\nassert     all_Characters_Same([\"A\", \"A\", \"B\"]) == False\nassert     all_Characters_Same([\"A\", \"B\", \"A\"]) == False\nassert     all_Characters_Same([\"A\", \"B\", \"A\", \"C\"]) == True\nassert     all_Characters_Same([\"A\", \"C\", \"B\", \"A\"]) == True\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     all_Characters_Same('a')     == True, \"Should return True\"\nassert     all_Characters_Same('z')     == True, \"Should return True\"\nassert     all_Characters_Same('abc')     == False, \"Should return False\"\nassert     all_Characters_Same('a')     == True, \"Should return True\"\n\n\ndef all_chars_same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    pass\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     all_Characters_Same('') == False, 'Empty String'\nassert     all_Characters_Same('a') == False,'single Character'\nassert     all_Characters_Same('abc') == False, 'different length'\nassert     all_Characters_Same('abcdef') == False, 'different case'\nassert     all_Characters_Same('abcd') == True,'same letters'\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef volume_tetrahedron(side_a, side_b, side_c):\n    '''\n    Write a function to calculate the volume of a tetrahedron.\n    '''\n    pass\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    pass\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef area_quadrilateral(side1,side2,side3):\n    '''\n    Write a function to caluclate the area of a quadrilateral.\n    '''\n    pass\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef area_square(side):\n    '''\n    Write a function to caluclate the area of a square.\n    '''\n    pass\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    area_tetrahedron(0) == 0, \"Side is not valid!\"\n    area_tetrahedron(1) == 0, \"Side is not valid!\"\n    area_tetrahedron(2) == math.sqrt(3), \"Side is not valid!\"\n    area_tetrahedron(3) == 3, \"Side is not valid!\"\n    area_tetrahedron(4) == 4, \"Side is not valid!\"\n    area_tetrahedron(5) == 1.2, \"Side is not valid!\"\n    area_tetrahedron(6) == 3.6, \"Side is not valid!\"\n    area_tetrahedron(7) == 1.5, \"Side is not valid!\"\n    area_tetrahedron(8) == 5, \"Side is not valid!\"\n    area_tetrahedron(9) == 2.4, \"Side is not valid!\"\n    area_tetrahedron(10) == 2.8, \"Side is not valid!\"\n    area_tetrahedron(11) == 3, \"Side is not valid!\"\n    area_tetrahedron(12) == 3, \"Side is not valid!\"\n    area_tetrahedron(13) == 3, \"Side is not valid!\"\n    area_tetrahedron(14) == 3, \"Side is not valid!\"\n    area_tetrahedron(15) == 2.2, \"Side is not valid!\"\n    area_tetrahedron(16) == 5, \"Side is not valid!\"\n    area_tetrahedron(17) == 5, \"Side is not valid!\"\n    area_tetrahedron(18) == 3, \"Side is not valid!\"\n    area_tetrahedron(19) == 3, \"Side is not valid!\"\n    area_tetrahedron(20) == 5, \"Side is not valid!\"\n    area_tetrahedron(21) == 3, \"Side is not valid!\"\n    area_tetrahedron(22) == 3, \"Side is not valid!\"\n    area_tetrahedron(23) == 2.2, \"Side is not valid!\"\n    area_tetrahedron(24) == 2.2, \"Side is not valid!\"\n    area_tetrahedron(25) == 2.2, \"Side is not valid!\"\n    area_tetrahedron(26) == 2.2, \"Side is not valid!\"\n    area_tetrahedron(27) == 3, \"Side is not valid!\"\n    area_tetrahedron(28) == 3, \"Side is not valid!\"\n    area_tetrahedron(29) == 2.2, \"Side is not valid!\"\n    area_tetrahedron(30) == 2.2, \"Side is not valid!\"\n    area_tetrahedron(31) == 2.2, \"Side is not valid!\"\n    area_tetrahedron(32) == 3, \"Side is not valid!\"\n    area_tetrahedron(33) == 3, \"Side is not valid!\"\n    area_tetrahedron(34) == 3, \"Side is not valid!\"\n    area_tetrahedron(35) == 5, \"Side is not valid!\"\n    area_tetrahedron(36) == 5, \"Side is not valid!\"\n    area_tetrahedron(37) == 5, \"Side is not valid!\"\n    area_tetrahedron(38) == 3.6, \"Side is not valid!\"\n    area_tetrahedron(39) == 3.6, \"Side is not valid!\"\n    area_tetrahedron(40) == 3.6, \"Side is not valid!\"\n    area_tetrahedron(41) == 5, \"Side is not valid!\"\n    area_tetrahedron(42) == 5, \"Side is not valid!\"\n    area_tetrahedron(43) == 5, \"Side is not valid!\"\n    area_tetrahedron(44) == 3, \"Side is not valid!\"\n    area_tetrahedron(45) == 3, \"Side is not valid!\"\n    area_tetrahedron(46) == 3, \"Side is not valid!\"\n    area_tetrahedron(47) == 3, \"Side is not valid!\"\n    area_tetrahedron(48) == 3, \"Side is not valid!\"\n    area_tetrahedron(49) == 3, \"Side is not valid!\"\n    area_tetrahedron(50) == 3, \"Side is not valid!\"\n    area_tetrahedron(51) == 3, \"Side is not valid!\"\n    area_tetrahedron(52) == 3, \"Side is not valid!\"\n    area_tetrahedron(53) == 3, \"Side is not valid!\"\n    area_tetrahedron(54) == 3, \"Side is not valid!\"\n    area_tetrahedron(55) == 2.2, \"Side is not valid!\"\n    area_tetrahedron(56) == 2.2, \"Side is not valid!\"\n    area_tetrahedron(57) == 2.2, \"Side is not valid!\"\n    area_tetrahedron(58) == 2.2, \"Side is not valid!\"\n    area_tetrahedron(59) == 3, \"Side is not valid!\"\n    area_tetrahedron(60) == 3, \"Side is not valid!\"\n    area_tetrahedron(61) == 2.2, \"Side is not valid!\"\n    area_tetrahedron(62) == 2.2, \"Side is not valid!\"\n    area_tetrahedron(63) == 2.2, \"Side is not valid!\"\n    area_tetrahedron(64) == 2.2, \"Side is not valid!\"\n    area_tetrahedron(65) == 2.2, \"Side is not valid!\"\n    area_tetrahedron(66) == 3, \"Side is not valid!\"\n    area_tetrahedron(67) == 3, \"Side is not valid!\"\n    area_tetrahedron(68) == 3, \"Side is not valid!\"\n    area_tetrahedron(69) == 3, \"Side is not valid!\"\n    area_tetrahedron(70) == 5, \"Side is not valid!\"\n    area_tetrahedron(71) == 5, \"Side is not valid!\"\n    area_tetrahedron(72) == 5, \"Side is not valid!\"\n    area_tetrahedron(73) == 5, \"Side is not valid!\"\n    area_tetrahedron(74) == 5, \"Side is not valid!\"\n    area_tetrahedron(75) == 5, \"Side is not valid!\"\n    area_tetrahedron(76) == 5, \"Side is not valid!\"\n    area_tetrahedron(77) == 5, \"Side is not valid!\"\n    area_tetrahedron(78) == 5, \"Side is not valid!\"\n    area_tetrahedron(79) == 5, \"Side is not valid!\"\n    area_tetrahedron(80) == 5, \"Side is not valid!\"\n    area_tetrahedron(81) == 5, \"Side is not valid!\"\n    area_tetrahedron(82) == 5, \"Side is not valid!\"\n    area_tetrahedron(83) == 5, \"Side is not valid!\"\n    area_tetrahedron(84) == 5, \"Side is not valid!\"\n    area_tetrahedron(85) == 5, \"Side is not valid!\"\n    area_tetrahedron(86) == 5, \"Side is not valid!\"\n    area_tetrahedron(87) == 5, \"Side is not valid!\"\n    area_tetrahedron(88) == 5, \"Side is not valid!\"\n    area_tetrahedron(89) == 5, \"Side is not valid!\"\n    area_tetrahedron(90) == 5, \"Side is not valid!\"\n    area_tetrahedron(91) == 5, \"Side is not valid!\""
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     area_tetrahedron(1) == 1.543396226415094\nassert     area_tetrahedron(2) == 0.9166666666666667\nassert     area_tetrahedron(3) == 0.46153846153846154\nassert     area_tetrahedron(4) == 0.5\nassert     area_tetrahedron(5) == 0.4166666666666667\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     area_tetrahedron(1) == 1, 'Please check your code'\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     rotate_right([1, 2, 3, 4], 2) == [3, 4, 1, 2]\nassert rotate_right([1, 2, 3, 4], 1) == [2, 3, 4, 1]\nassert rotate_right([1, 2, 3, 4], 0) == [1, 2, 3, 4]\nassert rotate_right([1, 2, 3, 4], -1) == [3, 4, 1, 2]\nassert rotate_right([1, 2, 3, 4], -2) == [4, 1, 2, 3]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     rotate_right([1,2,3,4,5], 5) == [5,1,2,3,4], \"Wrong\"\nassert     rotate_right([1,2,3,4,5], 4) == [4,5,1,2,3], \"Wrong\"\nassert     rotate_right([1,2,3,4,5], 1) == [2,3,4,5,1], \"Wrong\"\nassert     rotate_right([1,2,3,4,5], -1) == [3,4,5,1,2], \"Wrong\"\nassert     rotate_right([1,2,3,4,5], -5) == [1,2,3,4,5], \"Wrong\"\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef rotate_left(list, n):\n    '''\n    Write a function to rotate a given list by specified number of items to the left direction. https://www.geeksforgeeks.org/python-program-left-rotate-list-n/\n    '''\n    pass\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nrotate_right([1,2,3,4], 2) == [3,4,1,2]\nassert \nrotate_right([1,2,3,4], 1) == [4,1,2,3]\nassert \nrotate_right([1,2,3,4,5], 2) == [3,4,5,1,2]\nassert \nrotate_right([1,2,3,4,5], 1) == [4,5,1,2,3]\nassert \nrotate_right([1,2,3,4,5], 4) == [1,2,3,4,5]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nrotate_right([1, 2, 3, 4, 5, 6], 4) == [5, 6, 1, 2, 3, 4]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     rotate_right([1, 2, 3, 4, 5], 1) == [2, 3, 4, 5, 1]\nassert     rotate_right([1, 2, 3, 4, 5], 2) == [3, 4, 5, 1, 2]\nassert     rotate_right([1, 2, 3, 4, 5], 3) == [4, 5, 1, 2, 3]\nassert     rotate_right([1, 2, 3, 4, 5], 4) == [5, 1, 2, 3, 4]\nassert     rotate_right([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef rotate_left(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the left direction. https://www.geeksforgeeks.org/python-program-left-rotate-list-n/\n    '''\n    pass\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_none((1,2,3)) == False, 'Test 1 did not pass.'\nassert     check_none((1,'a',3)) == False, 'Test 2 did not pass.'\nassert     check_none((None,'a',3)) == True, 'Test 3 did not pass.'\n\ndef find_smallest(test_tup):\n    '''\n    Write a function to find the smallest number from a given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_none((1,2,3)) == False, 'check_none((1,2,3)) is not working'\nassert check_none((None,2,None)) == True, 'check_none((None,2,None)) is not working'"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_none([1, 2, 3]) == False, 'test_tup is not empty'\nassert     check_none([1, 2, None]) == True, 'test_tup is empty'\nassert     check_none((1, 2, 3)) == False, 'test_tup is not empty'\nassert     check_none((1, 2, None)) == True, 'test_tup is empty'\nassert     check_none(()) == False, 'test_tup is empty'\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_none([1,2,3])==False\nassert     check_none((1,2,3))==False\nassert     check_none((1,2,None))==False\nassert     check_none((1,None,3))==False\nassert     check_none((1,2,3,None))==False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_none((1, 2, 3, None)) == True, 'First tuple has None'\nassert     check_none((1, 2, 3)) == False, 'Second tuple has None'\nassert     check_none((None, 'a', 'b', 'c')) == False, 'Third tuple has None'\nassert     check_none((None,)) == True, 'Fourth tuple has None'\nassert     check_none(None) == True, 'None is the only value'\nprint('Almost there! Now check the correctness of check_none()')\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_none((1,2,3))     == False, \"It should be False\"\nassert     check_none((1,2,None))     == True, \"It should be True\"\nassert     check_none((None,2,3))     == True, \"It should be True\"\nassert     check_none((1,None,3))     == False, \"It should be False\"\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_none((1,2,3,4,5)) == False, \"Wrong Result\"\nassert     check_none((1,2,3,None,5)) == True, \"Wrong Result\"\nassert     check_none((1,None,3,5,None)) == True, \"Wrong Result\"\nassert     check_none(('a','b',None,'d')) == True, \"Wrong Result\"\nassert     check_none(('a',None,'b',None)) == False, \"Wrong Result\"\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_none([1,2,3]) == True, \"List does not have any None values\"\nassert     check_none(('a','b','c')) == False, \"List has the None value\"\nassert     check_none((None,'b','c')) == True, \"Tuple does not have any None values\"\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     divisible_by_digits(startnum = 4, endnum = 9) == ['4', '6', '9']\nassert     divisible_by_digits(startnum = 4, endnum = 10) == ['4', '6', '9', '12']\nassert     divisible_by_digits(startnum = 4, endnum = 11) == ['4', '6', '9', '12', '15', '18', '21', '24', '27', '30', '33', '36', '39']\nassert     divisible_by_digits(startnum = 4, endnum = 27) == ['4', '6', '9', '12', '15', '18', '21', '24', '27', '30', '33', '36', '39', '42', '45', '48', '51', '54', '57', '60', '63', '66', '69', '72', '75', '78', '81', '84', '87', '90', '93', '96', '99']\nassert     divisible_by_digits(startnum = 4, endnum = 30) == ['4', '6', '9', '12', '15', '18', '21', '24', '27', '30', '33', '36', '39', '42', '45', '48', '51', '54', '57', '60', '63', '66', '69', '72', '75', '78', '81', '84', '87', '90', '93', '96', '99', '102', '105', '108', '111', '114', '117', '120', '123', '126', '129', '132', '135', '138', '141', '144', '147', '150', '153', '156', '159', '162', '165', '168', '171', '174', '177', '180', '183', '186', '189', '192', '195', '198', '201', '204', '207', '210', '213', '216', '219', '222', '225', '228', '231', '234', '237', '240', '243', '246', '249', '252', '255', '258', '261', '264', '267', '270', '273', '276', '279', '282', '285', '288', '291', '294', '297', '300', '303', '306', '309', '312', '315', '318', '321', '324', '327', '330', '333', '336', '339', '342', '345', '348', '351', '354', '357', '360', '363', '366', '369', '372', '375', '378', '381', '384', '387', '390', '393', '396', '399', '402', '405', '408', '411', '414', '417', '420', '423', '426', '429', '432', '435', '438', '441', '444', '447', '450', '453', '456', '459', '462', '465', '468', '471', '474', '477', '480', '483', '486', '489', '492', '495', '498', '501', '504', '507', '510', '513', '516', '519', '522', '525', '528', '531', '534', '537', '540', '543', '546', '549', '552', '555', '558', '561', '564', '567', '570', '573', '576', '579', '582', '585', '588', '591', '594', '597', '600', '603', '606', '609', '612', '615', '618', '621', '624', '627', '630', '633', '636', '639', '642', '645', '648', '651', '654', '657', '660', '663', '666', '669', '672', '675', '678', '681', '684', '687', '690', '693', '696', '699', '702', '705', '708', '711', '714', '717', '720', '723', '726', '729', '732', '735', '738', '741', '744', '747', '750', '753', '756', '759', '762', '765', '768', '771', '774', '777', '780', '783', '786', '789', '792', '795', '798', '801', '804', '807', '810', '813', '816', '819', '822', '825', '828', '831', '834', '837', '840', '843', '846', '849', '852', '855', '858', '861', '864', '867', '870', '873', '876', '879', '882', '885', '888', '891', '894', '897', '900', '903', '906', '909', '912', '915', '918', '921', '924', '927', '930', '933', '936', '939', '942', '945', '948', '951', '954', '957', '960', '963', '966', '969', '972', '975', '979', '982', '985', '988', '991', '994', '997', '1000', '1003', '1006', '1009', '1012', '1015', '1018', '1021', '1024', '1027', '1030', '1033', '1036', '1039', '1042', '1045', '1048', '1051', '1054', '1057', '1060', '1063', '1066', '1069', '1072', '1075', '1078', '1081', '1084', '1087', '1090', '1093', '1096', '1099', '1102', '1105', '1108', '1111', '1114', '1117', '1120', '1123', '1125', '1128', '1131', '1134', '1137', '1140', '1143', '1146', '1149', '1152', '1155', '1158', '1161', '1164', '1167', '1170', '1173', '1176', '1179', '1182', '1185', '1188', '1191', '1194', '1197', '1200', '1203', '1206', '1209', '1212', '1215', '1218', '1221', '1224', '1227', '1230', '1233', '1236', '1239', '1242', '1245', '1248', '1251', '1254', '1257', '1260', '1263', '1266', '1269', '1272', '1275', '1278', '1281', '1284', '1287', '1290', '1293', '1296', '1299', '1301', '1304', '1307', '1310', '1313', '1316', '1319', '1322', '1325', '1328', '1331', '1334', '1337', '1340', '1343', '1346', '1349', '1352', '1355', '1358', '1361', '1364', '1367', '1370', '1373', '1376', '1379', '1382', '1385', '1388', '1391', '1394', '1397', '1300', '1303', '1306', '1309', '1312', '1315', '1318', '1321', '1324', '1327', '1330', '1333', '1336', '1339', '1342', '1345', '1348', '1351', '1354', '1357', '1360', '136"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndivisible_by_digits(1,100) == [\n    1,    3,    5,    7,    9,    11,    13,    15,    17,    19,    21,    23,    25,    27,    29,    31,    33,    35,    37,    39,    41,    43,    45,    47,    49,    51,    53,    55,    57,    59,    61,    63,    65,    67,    69,    71,    73,    75,    77,    79,    81,    83,    85,    87,    89,    91,    93,    95,    97,    99\n]\n\ndivisible_by_digits(1,1000) == [\n    1,    3,    5,    7,    9,    11,    13,    15,    17,    19,    21,    23,    25,    27,    29,    31,    33,    35,    37,    39,    41,    43,    45,    47,    49,    51,    53,    55,    57,    59,    61,    63,    65,    67,    69,    71,    73,    75,    77,    79,    81,    83,    85,    87,    89,    91,    93,    95,    97,    99,    101,    103,    105,    107,    109,    111,    113,    115,    117,    119,    121,    123,    125,    127,    129,    131,    133,    135,    137,    139,    141,    143,    145,    147,    149,    151,    153,    155,    157,    159,    161,    163,    165,    167,    169,    171,    173,    175,    177,    179,    181,    183,    185,    187,    189,    191,    193,    195,    197,    199,    201,    203,    205,    207,    209,    211,    213,    215,    217,    219,    221,    223,    225,    227,    229,    231,    233,    235,    237,    239,    241,    243,    245,    247,    249,    251,    253,    255,    257,    259,    261,    263,    265,    267,    269,    271,    273,    275,    277,    279,    281,    283,    285,    287,    289,    291,    293,    295,    297,    299,    301,    303,    305,    307,    309,    311,    313,    315,    317,    319,    321,    323,    325,    327,    329,    331,    333,    335,    337,    339,    341,    343,    345,    347,    349,    351,    353,    355,    357,    359,    361,    363,    365,    367,    369,    371,    373,    375,    377,    379,    381,    383,    385,    387,    389,    391,    393,    395,    397,    399,    401,    403,    405,    407,    409,    411,    413,    415,    417,    419,    421,    423,    425,    427,    429,    431,    433,    435,    437,    439,    441,    443,    445,    447,    449,    451,    453,    455,    457,    459,    461,    463,    465,    467,    469,    471,    473,    475,    477,    479,    481,    483,    485,    487,    489,    491,    493,    495,    497,    499,    501,    503,    505,    507,    509,    511,    513,    515,    517,    519,    521,    523,    525,    527,    529,    531,    533,    535,    537,    539,    541,    543,    545,    547,    549,    551,    553,    555,    557,    559,    561,    563,    565,    567,    569,    571,    573,    575,    577,    579,    581,    583,    585,    587,    589,    591,    593,    595,    597,    599,    601,    603,    605,    607,    609,    611,    613,    615,    617,    619,    621,    623,    625,    627,    629,    631,    633,    635,    637,    639,    641,    643,    645,    647,    649,    651,    653,    655,    657,    659,    661,    663,    665,    667,    669,    671,    673,    675,    677,    679,    681,    683,    685,    687,    689,    691,    693,    695,    697,    699,    701,    703,    705,    707,    709,    711,    713,    715,    717,    719,    721,    723,    725,    727,    729,    731,    733,    735,    737,    739,    741,    743,    745,    747,    749,    751,    753,    755,    757,    759,    761,    763,    765,    767,    769,    771,    773,    775,    777,    779,    781,    783,    785,    787,    789,    791,    793,    795,    797,    799,    801,    803,    805,    807,    809,    811,    813,    815,    817,    819,    821,    823,    825,    827,    829,    831,    833,    835,    837,    839,    841,    843,    845,    847,    849,    851,    853,    855,    857,    859,    861,    863,    865,    867,    869,    871,    873,    875,    877,    879,    881,    883,    885,    887,    889,    891,    893,    895,    897,    899,    901,    903,    905,    907,    908,    909,    911,    913,    914,    916,    917,    919,    920,    921,    922,    923,    925,    927,    929,    931,    933,    935,    937,    939,    941,    943,    945,    947,    949,    951,    953,    955,    957,    959,    961,    963,    965,    967,    969,    971,    973,    975,    977,    979,    983,    985,    987,    989,    991,    993,    995,    997,    999,    1009,    1011,    1013,    1015,    1017,    1019,    1021,    1023,    1025,    1027,    1029,    1031,    1033,    1035,    1037,    1039,    1041,    1043,    1045,    1047,    1049,    1051,    1053,    1055,    1057,    1059,    1061,    1063,    1065,    1067,    1069,    1071,    1073,    1075,    1077,    1079,    1081,    1083,    1"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndivisible_by_digits(3,6) == [3,4,5,6]\ndivisible_by_digits(7,11) == []\ndivisible_by_digits(3,6) == [3,4,5,6]\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     divisible_by_digits(10, 21) == {11, 13, 17, 19, 23, 29}\nassert     divisible_by_digits(100, 105) == {101}\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     divisible_by_digits(1, 10) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     divisible_by_digits(1, 100) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\nassert     divisible_by_digits(1, 1000) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254]\nassert     divisible_by_digits(1, 10000) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     divisible_by_digits(1, 10) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     divisible_by_digits(1, 100) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\nassert     divisible_by_digits(1, 1000) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\nassert     divisible_by_digits(1, 10000) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]\nassert     divisible_by_digits(1, 100000) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ndivisible_by_digits(10,20) == False\ndivisible_by_digits(10,30) == True\ndivisible_by_digits(20,10) == False\ndivisible_by_digits(10,11) == True\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     divisible_by_digits(100, 200) ==     [100, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                            201, \n                                "
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sector_area(0.5, 1) == 2.0\nassert     sector_area(1.0, -3) == 0.0\nassert     sector_area(3.0, 1) == 0.0\nassert     sector_area(10.5, 60) == 10200.0\nassert     sector_area(1, 360) == None\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sector_area(3,3) ==   math.pi*(3**2) / 4\nassert sector_area(5,360) is None\nassert sector_area(6,360) == None\n\ndef find_nearest_value(data, target):\n    '''\n    Write a function to find the nearest value in data to target. The function should return the nearest value to target.\n    '''\n    pass\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nsector_area(2,90) == 8\nsector_area(2,360) == 8\nsector_area(2,190) == None\nsector_area(2,10) == None\nsector_area(2,0) == None\nsector_area(2,360) == None\nsector_area(2,360.1) == None\nsector_area(2,359.9) == None\nsector_area(2,359.99) == None\nsector_area(2,361) == None\nsector_area(2,361.1) == None\nsector_area(2,361.01) == None\nsector_area(2,361.01) == None\nsector_area(2,361.02) == None\nsector_area(2,361.02) == None\nsector_area(2,361.03) == None\nsector_area(2,361.03) == None\nsector_area(2,361.04) == None\nsector_area(2,361.04) == None\nsector_area(2,361.05) == None\nsector_area(2,361.05) == None\nsector_area(2,361.06) == None\nsector_area(2,361.06) == None\nsector_area(2,361.07) == None\nsector_area(2,361.07) == None\nsector_area(2,361.08) == None\nsector_area(2,361.08) == None\nsector_area(2,361.09) == None\nsector_area(2,361.09) == None\nsector_area(2,361.1) == None\nsector_area(2,361.1) == None\nsector_area(2,361.11) == None\nsector_area(2,361.11) == None\nsector_area(2,361.12) == None\nsector_area(2,361.12) == None\nsector_area(2,361.13) == None\nsector_area(2,361.13) == None\nsector_area(2,361.14) == None\nsector_area(2,361.14) == None\nsector_area(2,361.15) == None\nsector_area(2,361.15) == None\nsector_area(2,361.16) == None\nsector_area(2,361.16) == None\nsector_area(2,361.17) == None\nsector_area(2,361.17) == None\nsector_area(2,361.18) == None\nsector_area(2,361.18) == None\nsector_area(2,361.19) == None\nsector_area(2,361.19) == None\nsector_area(2,361.2) == None\nsector_area(2,361.2) == None\nsector_area(2,361.21) == None\nsector_area(2,361.21) == None\nsector_area(2,361.22) == None\nsector_area(2,361.22) == None\nsector_area(2,361.23) == None\nsector_area(2,361.23) == None\nsector_area(2,361.24) == None\nsector_area(2,361.24) == None\nsector_area(2,361.25) == None\nsector_area(2,361.25) == None\nsector_area(2,361.26) == None\nsector_area(2,361.26) == None\nsector_area(2,361.27) == None\nsector_area(2,361.27) == None\nsector_area(2,361.28) == None\nsector_area(2,361.28) == None\nsector_area(2,361.29) == None\nsector_area(2,361.29) == None\nsector_area(2,361.3) == None\nsector_area(2,361.3) == None\nsector_area(2,361.31) == None\nsector_area(2,361.31) == None\nsector_area(2,361.32) == None\nsector_area(2,361.32) == None\nsector_area(2,361.33) == None\nsector_area(2,361.33) == None\nsector_area(2,361.34) == None\nsector_area(2,361.34) == None\nsector_area(2,361.35) == None\nsector_area(2,361.35) == None\nsector_area(2,361.36) == None\nsector_area(2,361.36) == None\nsector_area(2,361.37) == None\nsector_area(2,361.37) == None\nsector_area(2,361.38) == None\nsector_area(2,361.38) == None\nsector_area(2,361.39) == None\nsector_area(2,361.39) == None\nsector_area(2,361.4) == None\nsector_area(2,361.4) == None\nsector_area(2,361.41) == None\nsector_area(2,361.41) == None\nsector_area(2,361.42) == None\nsector_area(2,361.42) == None\nsector_area(2,361.43) == None\nsector_area(2,361.43) == None\nsector_area(2,361.44) == None\nsector_area(2,361.44) == None\nsector_area(2,361.45) == None\nsector_area(2,361.45) == None\nsector_area(2,361.46) == None\nsector_area(2,361.46) == None\nsector_area(2,361.47) == None\nsector_area(2,361.47) == None\nsector_area(2,361.48) == None\nsector_area(2,361.48) == None\nsector_area(2,361.49) == None\nsector_area(2,361.49) == None\nsector_area(2,361.5) == None\nsector_area(2,361.5) == None\nsector_area(2,361.51) == None\nsector_area(2,361.51) == None\nsector_area(2,361.52) == None\nsector_area(2,361.52) == None\nsector_area(2,361.53) == None\nsector_area(2,361.53) == None\nsector_area(2,361.54) == None\nsector_area(2,361.54) == None\nsector_area(2,361.55) == None\nsector_area(2,361.55) == None\nsector_area(2,361.56) == None\nsector_area(2,361.56) == None\nsector_area(2,361.57) == None\nsector_area(2,361.57) == None\nsector_area(2,361.58) == None\nsector_area(2,361.58) == None\nsector_area(2,361.59) == None\nsector_area(2,361.59) == None\nsector_area(2,361.6) == None\nsector_area(2,361.6) == None\nsector_area(2,361.61) == None\nsector_area(2,361.61) == None\nsector_area(2,361.62) == None\nsector_area(2,361.62) == None\nsector_area(2,361.63) == None\nsector_area(2,361.63) == None\nsector_area(2,361.64) == None\nsector_area(2,361.64) == None\nsector_area(2,361.65) == None\nsector_area(2,361.65) == None\nsector_area(2,361.66) == None\nsector_area(2,361.66) == None\nsector_area(2,361.67) == None\nsector_area(2,361.67) == None\nsector_area(2,361.68) == None\nsector_area(2,361.68) == None\nsector_area(2,361.69) == None\nsector_area(2,361.69) == None\nsector_area(2,361.7) == None\nsector_area(2,361.7) == None\nsector_area(2,361.71) == None\nsector_area(2,361.71) == None\nsecto"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef circle_area(radius):\n    '''\n    Write a function to find area of a circle. The function takes the radius as input. Function should return None if the radius is 0.\n    '''\n    pass\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sector_area(3,360) == None\nassert     sector_area(3,360.1) == None\nassert     sector_area(3,360.2) == None\nassert     sector_area(3,360.3) == None\nassert     sector_area(3,0) == None\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert sector_area(5, 360) == None\nassert sector_area(5, -360) == None\nassert sector_area(5, 360) == None\nassert sector_area(5, 0) == None\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(sector_area(1, 60))\nprint(sector_area(1, 4))\nprint(sector_area(1, 360))\nprint(sector_area(1, 361))\nprint(sector_area(1, 1))\nprint(sector_area(1, -1))\nprint(sector_area(1, 361.00001))\nprint(sector_area(1, 360.99991))\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sector_area(5,360) == 0, 'input is wrong'\nassert sector_area(3,0) == math.pi * 3 ** 2 / 4, 'input is wrong'\nassert sector_area(1,90) == math.pi * 1 ** 2 / 4, 'input is wrong'\n\ndef sector_area_v2(radius,angle):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # Your code here\n    return None\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ndef test_sector_area():\n    assert sector_area(10,120) == math.pi*(10**2)*(10**2)*(10**2)/(4*math.pi)\n    assert sector_area(0,45) == math.pi*(0**2)*(0**2)/4\n    assert sector_area(5,90) == math.pi*(5**2)*(5**2)/(4*math.pi)\n    assert sector_area(10,0) == math.pi*(10**2)*(10**2)/4\n    "
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nlcs_of_three('abcde', 'ace', 'dce') == 'ce'\nassert lcs_of_three('abcde', 'ace', 'ace') == 'ace'\nassert lcs_of_three('abcde', 'ace', 'dce') == 'ce'\nassert lcs_of_three('abcde', 'ace', 'ade') == 'ace'\nassert lcs_of_three('abcde', 'ace', 'bee') == 'ace'\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     lcs_of_three('acb', 'ab', 'a') == 'a', 'Test 1 failed'\nassert     lcs_of_three('ab', 'a', 'acb') == 'ab', 'Test 2 failed'\nassert     lcs_of_three('a', 'a', 'b') == 'a', 'Test 3 failed'\nassert     lcs_of_three('a', 'b', 'c') == 'b', 'Test 4 failed'\nassert     lcs_of_three('acb', 'ab', 'a') == 'a', 'Test 5 failed'\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef lcs_of_three_efficient(X, Y, Z):\n    '''\n    What is the longest common subsequence of X, Y and Z?\n    https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    pass\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     lcs_of_three(X = \"abcdefg\", Y = \"ace\", Z = \"ad\") == \"ae\", \"incorrect\"\nassert     lcs_of_three(X = \"abcdefg\", Y = \"ace\", Z = \"acf\") == \"\", \"incorrect\"\nassert     lcs_of_three(X = \"abcdefg\", Y = \"ace\", Z = \"acfge\") == \"\", \"incorrect\"\nassert     lcs_of_three(X = \"abcdefg\", Y = \"ace\", Z = \"acfg\") == \"\", \"incorrect\"\nassert     lcs_of_three(X = \"abcdefg\", Y = \"ace\", Z = \"acdefg\") == \"ace\", \"incorrect\"\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     lcs_of_three(\"ABCBDAB\", \"BDCABA\", \"AEDBAD\") == 3, 'Wrong result'\nassert lcs_of_three(\"ABCBDAB\", \"BDCABA\", \"ABCDEFGHI\") == 4, 'Wrong result'\nassert lcs_of_three(\"ABCDEFGHI\", \"ABCBDAB\", \"BDCABA\") == 2, 'Wrong result'"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     lcs_of_three(\"AGGTAB\", \"GXTXAYB\", \"TXXGTAB\") == \"GTAB\", \"Should be GTAB\"\nassert     lcs_of_three(\"AGGTAB\", \"GXTXAYB\", \"TXXGTAB\") == \"GTAB\", \"Should be GTAB\"\nassert     lcs_of_three(\"AGGTAB\", \"GXTXAYB\", \"TXXGTAB\") == \"GTAB\", \"Should be GTAB\"\nassert     lcs_of_three(\"AGGTAB\", \"GXTXAYB\", \"TXXGTAB\") == \"GTAB\", \"Should be GTAB\"\nassert     lcs_of_three(\"AGGTAB\", \"GXTXAYB\", \"TXXGTAB\") == \"GTAB\", \"Should be GTAB\"\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     lcs_of_three(\"abcd\",\"efgh\",\"cdgh\") == 2\nassert     lcs_of_three(\"abcd\",\"efgh\",\"cdg\") == 2\nassert     lcs_of_three(\"abcd\",\"efgh\",\"cd\") == 1\nassert     lcs_of_three(\"abcd\",\"efgh\",\"g\") == 2\n\ndef lcs_of_two(X, Y): \n    '''\n    Write a function to find the longest common subsequence for the given two string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-two-strings/\n    '''\n    pass\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     capital_words_spaces(\"This is a test!\") == \"This is a test.\" \nassert capital_words_spaces(\"This is a test.\") == \"This is a test.\"\nassert capital_words_spaces(\"this is a test\") == \"this is a test.\"\nassert capital_words_spaces(\"this is a test.\") == \"this is a test.\"\nassert capital_words_spaces(\"This is a test\") == \"This is a test.\"\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(capital_words_spaces('#     hello world  #   '))\n\n'''\nWrite a function to check if a given string is a pangram or not.\nPangrams are any sentence that contains all the letters of the alphabet at least once.\n\nFor example:\n\n\"The quick brown fox jumps over the lazy dog\" is a pangram, because\nit uses the letters A-Z at least once.\n\n\"A man, a plan, a canal: Panama\" is not a pangram,\nbecause it uses the letters A-Z only once.\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert capital_words_spaces('Hello World') == 'Hello World'\nassert capital_words_spaces('Hello World') == 'Hello World'\nassert capital_words_spaces('Hello World') == 'Hello World'\nassert capital_words_spaces('Hello World') == 'Hello World'\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n'''\nWrite a function to capitalize the first letter of every word in a given string.\n\nSample input: \"hello world\"\nExpected output: \"Hello World\"\n'''\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     capital_words_spaces(\"i love programming\") == \"I love programming\"\nassert     capital_words_spaces(\"i     love  programming\") == \"I love programming\"\nassert     capital_words_spaces(\"i love programming\") == \"I love programming\"\nassert     capital_words_spaces(\" i love programming\") == \"I love programming\"\nassert     capital_words_spaces(\" i love programming\") == \"I love programming\"\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef find_employee_id(employee_name, employees):\n    \"\"\"\n    This function takes the input of employee name and employees dictionary and returns\n    the employee_id of the employee having the input employee name.\n    \"\"\"\n    pass\n\n\ndef validate_id(employee_id):\n    \"\"\"\n    This function takes the input of employee id and validates it\n    and returns a boolean value.\n    \"\"\"\n    pass\n\n\ndef get_first_name(employee_id):\n    \"\"\"\n    This function takes the input of employee id and validates it\n    and returns the first name of the employee having the given employee id.\n    \"\"\"\n    pass\n\ndef get_last_name(employee_id):\n    \"\"\"\n    This function takes the input of employee id and validates it\n    and returns the last name of the employee having the given employee id.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    capital_words_spaces('PYTHON') == 'Python'\n    capital_words_spaces('hello world') == 'Hello world'\n    capital_words_spaces('Hi there') == 'Hi there'\n    capital_words_spaces('I love python') == 'I love Python'\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     capital_words_spaces(\"IamAllGreat\") == \"I am all great\"\nassert     capital_words_spaces(\"IamallGreat\") == \"I am all great\"\nassert     capital_words_spaces(\"I am all great\") == \"I am all great\"\nassert     capital_words_spaces(\"Iam all great\") == \"I am all great\"\nassert     capital_words_spaces(\"Iam all great\") == \"I am all great\"\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     capital_words_spaces(\"I need to understand the basics of Python.\") == \"I need to understand the basics of Python.\"\nassert capital_words_spaces(\"I need to understand basics of python\") == \"I need to understand basics of python\"\nassert capital_words_spaces(\"  I need to understand basics of python\") == \" I need to understand basics of python\"\nassert capital_words_spaces(\"  I need to understand  basics of python\") == \"I need to understand basics of python\"\nassert capital_words_spaces(\"I need to understand  basics of python\") == \"I need to understand basics of python\"\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_numeric_strings(['1', '2', '3']) == ['1', '2', '3']\nassert     sort_numeric_strings(['1', '2.4', '3']) == ['1', '2.4', '3']\nassert     sort_numeric_strings(['1', '2.7', '3']) == ['1', '2.7', '3']\nassert     sort_numeric_strings(['1', '1.1', '3']) == ['1', '1.1', '3']\nassert     sort_numeric_strings(['1', '1.3', '3']) == ['1', '1.3', '3']\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nsort_numeric_strings([]) == []\nsort_numeric_strings([\"1\", \"2\", \"10\"]) == [\"1\", \"10\", \"2\"]\nsort_numeric_strings([\"-20\", \"-10\", \"-4\", \"-1\", \"0\"]) == [-1, -10, -4, -20, 0]"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_numeric_strings(['8', '7', '3', '4']) == ['4', '3', '7', '8']\nassert     sort_numeric_strings(['8', '7', '3', '10']) == ['3', '7', '8', '10']\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_numeric_strings(['1','2','3','5','3','1']) == ['1','1','2','3','3','5']\nassert     sort_numeric_strings(['-1','-1','-1','0','0','0']) == ['-1','-1','0','0','0','0']\nassert     sort_numeric_strings(['1','2','3','5','3','1','2','3']) == ['1','1','1','2','3','3','2','5']\nassert     sort_numeric_strings(['-1','-1','-1','0','0','0','0','1','2','3']) == ['-1','-1','0','0','0','0','1','2','3','3']\nassert     sort_numeric_strings(['1','2','3','5','3','1','2','3','1','2']) == ['1','1','1','1','1','2','2','3','3','3']\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_numeric_strings(['2', '9', '7', '4']) == ['4', '7', '9', '2']\nassert     sort_numeric_strings(['0', '1', '2']) == ['0', '2', '1']\nassert     sort_numeric_strings(['7', '9', '5', '7', '8']) == ['7', '7', '5', '8', '9']\nassert     sort_numeric_strings(['7', '8', '5', '9', '1']) == ['1', '9', '5', '8', '7']\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_numeric_strings(['1','3','5','9','12','0']) == ['0','1','3','5','9','12']\nassert     sort_numeric_strings(['1','12','0','9','5','3']) == ['0','1','5','3','9','12']\nassert     sort_numeric_strings(['3','0','9','5','12','1']) == ['1','0','5','3','9','12']\nassert     sort_numeric_strings(['1','3','2']) == ['1','2','3']\nassert     sort_numeric_strings(['1']) == ['1']\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_numeric_strings(['6', '6', '6', '1', '1', '1']) == ['1', '1', '1', '6', '6', '6']\nassert     sort_numeric_strings(['3', '6', '7', '2', '1', '5']) == ['1', '2', '3', '5', '6', '7']\nassert     sort_numeric_strings(['9', '2', '1', '3', '7', '5']) == ['1', '3', '5', '7', '9', '2']\nassert     sort_numeric_strings(['7', '6', '7', '5', '4', '4', '2', '1', '8']) == ['1', '2', '4', '4', '5', '6', '7', '7', '8']\nassert     sort_numeric_strings(['9', '6', '2', '8', '1', '7', '4', '3', '5']) == ['1', '2', '3', '4', '5', '6', '7', '8', '9']\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_numeric_strings([\"1\", \"2\", \"3\"]) == [\"1\", \"2\", \"3\"]\nassert     sort_numeric_strings([\"1\", \"12\", \"3\"]) == [\"1\", \"3\", \"12\"]\nassert     sort_numeric_strings([\"2\", \"1\", \"3\"]) == [\"1\", \"2\", \"3\"]\nassert     sort_numeric_strings([\"3\", \"1\", \"2\"]) == [\"1\", \"2\", \"3\"]\nassert     sort_numeric_strings([\"1\", \"12\", \"3\", \"23\"]) == [\"1\", \"2\", \"3\", \"23\"]\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef mult_tuple(test_list, test_tup):\n    '''\n    Write a function to multiply the given tuple to the given list.\n    '''\n    pass\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef make_dict(test_dict, new_key, new_val):\n    '''\n    Write a function to add a new key-value pair to the given dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_tuple([1,2,3],(1,2,3)) == [1,2,3,1,2,3]\nassert     add_tuple([1,2,3],(4,5,6)) == [1,2,3,4,5,6]\n\ndef sum_tuple(test_list):\n    '''\n    Write a function to calculate the sum of all the numbers in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     add_tuple(tuple_list, tuple_list[0]) == tuple_list + (tuple_list[0],)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef get_duplicates(test_list):\n    '''\n    Write a function to return a list of duplicate values in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    "
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_min_heap_helper([0], True) == True\nassert     check_min_heap_helper([1,2], True) == False\nassert     check_min_heap_helper([1,2,3,4], True) == True\nassert     check_min_heap_helper([1,2,3,4,5], True) == False\nassert     check_min_heap_helper([1,2,3,4,5,6,7,8,9,10], True) == True\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    check_min_heap_helper([3, 6, 8, 1, 2, 4, 7, 10], 6)\n    == False\n    \nassert \n    check_min_heap_helper([1, 2, 3, 4, 5, 6, 7, 8], 6)\n    == False\n    \nassert \n    check_min_heap_helper([3, 2, 1], 1)\n    == True\n    \nassert \n    check_min_heap_helper([], 1)\n    == False\n    \nassert \n    check_min_heap_helper([2, 1], 1)\n    == False\n    \n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_min_heap_helper([3, 2, 1], 3) == True\nassert     check_min_heap_helper([3, 2, 1], 2) == True\nassert     check_min_heap_helper([3, 2, 1], 1) == True\nassert     check_min_heap_helper([], 1) == False\nassert     check_min_heap_helper([], 0) == Fals"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_min_heap_helper([1,2,3,4,5,6,7], 5), 'Should be true'\nassert not     check_min_heap_helper([1,2,3,4,5,6,7], 3), 'Should be false'\nassert not     check_min_heap_helper([1,2,3,4,5,6,7], 0), 'Should be false'\nassert not     check_min_heap_helper([1,2,3,4,5,6,7], -1), 'Should be false'\n\ndef check_min_heap_helper2(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    pass\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     (check_min_heap_helper([3,1,2], False)== True)\nassert     (check_min_heap_helper([3,1,2], True)== False)\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_min_heap_helper([1, 2, 3, 4], 3) == True\nassert     check_min_heap_helper([1, 2, 3, 4], 1) == False\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_min_heap_helper(arr = [5, 8, 7, 3, 2, 10, 6], i = 0) == True, 'Wrong!'\nassert     check_min_heap_helper(arr = [5, 8, 7, 3, 2, 10, 6], i = 1) == False, 'Wrong!'\nassert     check_min_heap_helper(arr = [5, 8, 7, 3, 2, 10, 6], i = 2) == False, 'Wrong!'\nassert     check_min_heap_helper(arr = [5, 8, 7, 3, 2, 10, 6], i = 3) == False, 'Wrong!'\nassert     check_min_heap_helper(arr = [5, 8, 7, 3, 2, 10, 6], i = 4) == False, 'Wrong!'\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     jacobsthal_num(0) == 0\nassert     jacobsthal_num(1) == 1\nassert     jacobsthal_num(2) == 1\nassert     jacobsthal_num(3) == 1\nassert     jacobsthal_num(4) == 1\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef jacobsthal_num_recursive(n): \n    '''\n    Write a recursive function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    '''\n    pass\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    pass\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     jacobsthal_num(0) == 0\nassert     jacobsthal_num(1) == 1\nassert     jacobsthal_num(2) == 1\nassert     jacobsthal_num(3) == 3\nassert     jacobsthal_num(4) == 5\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     jacobsthal_num(0) == 0\nassert     jacobsthal_num(1) == 1\nassert     jacobsthal_num(2) == 1\nassert     jacobsthal_num(3) == 3\nassert     jacobsthal_num(4) == 5\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     jacobsthal_num(0) == 1\nassert     jacobsthal_num(1) == 1\nassert     jacobsthal_num(2) == 2\nassert     jacobsthal_num(3) == 3\nassert     jacobsthal_num(4) == 5\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    pass\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(\"jacobsthal_num(0) :\", jacobsthal_num(0))\nprint(\"jacobsthal_num(1) :\", jacobsthal_num(1))\nprint(\"jacobsthal_num(2) :\", jacobsthal_num(2))\nprint(\"jacobsthal_num(3) :\", jacobsthal_num(3))\nprint(\"jacobsthal_num(4) :\", jacobsthal_num(4))\nprint(\"jacobsthal_num(5) :\", jacobsthal_num(5))\nprint(\"jacobsthal_num(6) :\", jacobsthal_num(6))\nprint(\"jacobsthal_num(7) :\", jacobsthal_num(7))\nprint(\"jacobsthal_num(8) :\", jacobsthal_num(8))\nprint(\"jacobsthal_num(9) :\", jacobsthal_num(9))\nprint(\"jacobsthal_num(10) :\", jacobsthal_num(10))\nprint(\"jacobsthal_num(11) :\", jacobsthal_num(11))\nprint(\"jacobsthal_num(12) :\", jacobsthal_num(12))\nprint(\"jacobsthal_num(13) :\", jacobsthal_num(13))\nprint(\"jacobsthal_num(14) :\", jacobsthal_num(14))\nprint(\"jacobsthal_num(15) :\", jacobsthal_num(15))\nprint(\"jacobsthal_num(16) :\", jacobsthal_num(16))\nprint(\"jacobsthal_num(17) :\", jacobsthal_num(17))\nprint(\"jacobsthal_num(18) :\", jacobsthal_num(18))\nprint(\"jacobsthal_num(19) :\", jacobsthal_num(19))\nprint(\"jacobsthal_num(20) :\", jacobsthal_num(20))\nprint(\"jacobsthal_num(21) :\", jacobsthal_num(21))\nprint(\"jacobsthal_num(22) :\", jacobsthal_num(22))\nprint(\"jacobsthal_num(23) :\", jacobsthal_num(23))\nprint(\"jacobsthal_num(24) :\", jacobsthal_num(24))\nprint(\"jacobsthal_num(25) :\", jacobsthal_num(25))\nprint(\"jacobsthal_num(26) :\", jacobsthal_num(26))\nprint(\"jacobsthal_num(27) :\", jacobsthal_num(27))\nprint(\"jacobsthal_num(28) :\", jacobsthal_num(28))\nprint(\"jacobsthal_num(29) :\", jacobsthal_num(29))\nprint(\"jacobsthal_num(30) :\", jacobsthal_num(30))\nprint(\"jacobsthal_num(31) :\", jacobsthal_num(31))\nprint(\"jacobsthal_num(32) :\", jacobsthal_num(32))\nprint(\"jacobsthal_num(33) :\", jacobsthal_num(33))\nprint(\"jacobsthal_num(34) :\", jacobsthal_num(34))\nprint(\"jacobsthal_num(35) :\", jacobsthal_num(35))\nprint(\"jacobsthal_num(36) :\", jacobsthal_num(36))\nprint(\"jacobsthal_num(37) :\", jacobsthal_num(37))\nprint(\"jacobsthal_num(38) :\", jacobsthal_num(38))\nprint(\"jacobsthal_num(39) :\", jacobsthal_num(39))\nprint(\"jacobsthal_num(40) :\", jacobsthal_num(40))\nprint(\"jacobsthal_num(41) :\", jacobsthal_num(41))\nprint(\"jacobsthal_num(42) :\", jacobsthal_num(42))\nprint(\"jacobsthal_num(43) :\", jacobsthal_num(43))\nprint(\"jacobsthal_num(44) :\", jacobsthal_num(44))\nprint(\"jacobsthal_num(45) :\", jacobsthal_num(45))\nprint(\"jacobsthal_num(46) :\", jacobsthal_num(46))\nprint(\"jacobsthal_num(47) :\", jacobsthal_num(47))\nprint(\"jacobsthal_num(48) :\", jacobsthal_num(48))\nprint(\"jacobsthal_num(49) :\", jacobsthal_num(49))\nprint(\"jacobsthal_num(50) :\", jacobsthal_num(50))\nprint(\"jacobsthal_num(51) :\", jacobsthal_num(51))\nprint(\"jacobsthal_num(52) :\", jacobsthal_num(52))\nprint(\"jacobsthal_num(53) :\", jacobsthal_num(53))\nprint(\"jacobsthal_num(54) :\", jacobsthal_num(54))\nprint(\"jacobsthal_num(55) :\", jacobsthal_num(55))\nprint(\"jacobsthal_num(56) :\", jacobsthal_num(56))\nprint(\"jacobsthal_num(57) :\", jacobsthal_num(57))\nprint(\"jacobsthal_num(58) :\", jacobsthal_num(58))\nprint(\"jacobsthal_num(59) :\", jacobsthal_num(59))\nprint(\"jacobsthal_num(60) :\", jacobsthal_num(60))\nprint(\"jacobsthal_num(61) :\", jacobsthal_num(61))\nprint(\"jacobsthal_num(62) :\", jacobsthal_num(62))\nprint(\"jacobsthal_num(63) :\", jacobsthal_num(63))\nprint(\"jacobsthal_num(64) :\", jacobsthal_num(64))\nprint(\"jacobsthal_num(65) :\", jacobsthal_num(65))\nprint(\"jacobsthal_num(66) :\", jacobsthal_num(66))\nprint(\"jacobsthal_num(67) :\", jacobsthal_num(67))\nprint(\"jacobsthal_num(68) :\", jacobsthal_num(68))\nprint(\"jacobsthal_num(69) :\", jacobsthal_num(69))\nprint(\"jacobsthal_num(70) :\", jacobsthal_num(70))\nprint(\"jacobsthal_num(71) :\", jacobsthal_num(71))\nprint(\"jacobsthal_num(72) :\", jacobsthal_num(72))\nprint(\"jacobsthal_num(73) :\", jacobsthal_num(73))\nprint(\"jacobsthal_num(74) :\", jacobsthal_num(74))\nprint(\"jacobsthal_num(75) :\", jacobsthal_num(75))\nprint(\"jacobsthal_num(76) :\", jacobsthal_num(76))\nprint(\"jacobsthal_num(77) :\", jacobsthal_num(77))\nprint(\"jacobsthal_num(78) :\", jacobsthal_num(78))\nprint(\"jacobsthal_num(79) :\", jacobsthal_num(79))\nprint(\"jacobsthal"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef jacobsthal_num_using_sqrt(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    pass\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     min_k((('a', 4), ('b', 3), ('c', 2), ('d', 1), ('e', 0)), 2) == ('b', 3), \"your min_k should have returned ('b', 3) not ({}).\".format(min_k((('a', 4), ('b', 3), ('c', 2), ('d', 1), ('e', 0)), 2))\nassert     min_k((('a', 4), ('b', 3), ('c', 2), ('d', 1), ('e', 0)), 1) == ('a', 4), \"your min_k should have returned ('a', 4) not ({}).\".format(min_k((('a', 4), ('b', 3), ('c', 2), ('d', 1), ('e', 0)), 1))\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     min_k([('1','a',0.5),('2','b',0.3)], 2) == ('1','a',0.5)\nassert     min_k([('1','a',0.5),('2','b',0.3)], 1) == ('1','a',0.5)\nassert     min_k([('1','a',0.5),('2','b',0.3)], 0) == ('2','b',0.3)\nassert     min_k([('1','a',0.5),('2','b',0.3)], 3) == ('2','b',0.3)\nassert     min_k([('1','a',0.5),('2','b',0.3)], 4) == ('1','a',0.5)\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     min_k([(2,3), (1,2), (3,1), (4,3), (4,4), (2,2)], 1) == (2,2), \"test 1 failed\"\nassert     min_k([(2,3), (1,2), (3,1), (4,3), (4,4), (2,2)], 2) == (2,2), \"test 2 failed\"\nassert     min_k([(2,3), (1,2), (3,1), (4,3), (4,4), (2,2)], 3) == (2,2,4), \"test 3 failed\"\nassert     min_k([(2,3), (1,2), (3,1), (4,3), (4,4), (2,2)], 4) == (2,2,4,4), \"test 4 failed\"\nassert     min_k([(2,3), (1,2), (3,1), (4,3), (4,4), (2,2)], 5) == (2,2,4,4,2), \"test 5 failed\"\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     min_k(test_list, 5) == (('A', 5), ('C', 3), ('D', 2), ('E', 1), ('F', 2))\nassert     min_k(test_list, 2) == (('A', 5), ('C', 3), ('D', 2), ('E', 1), ('F', 2))\nassert     min_k(test_list, 1) == (('A', 5), ('C', 3), ('D', 2), ('E', 1), ('F', 2))\nassert     min_k(test_list, 0) == (('A', 5), ('C', 3), ('D', 2), ('E', 1), ('F', 2))\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    min_k([('A', 1), ('B', 3), ('C', 5), ('D', 2)], 1) == \n    ['A']\n    \n    min_k([('A', 1), ('B', 3), ('C', 5), ('D', 2)], 2) == \n    ['A', 'B']\n    \n    min_k([('A', 1), ('B', 3), ('C', 5), ('D', 2)], 3) == \n    ['A', 'B', 'C']\n    \n    min_k([('A', 1), ('B', 3), ('C', 5), ('D', 2)], 4) == \n    ['A', 'B', 'C', 'D']\n    \n    min_k([('A', 1), ('B', 3), ('C', 5), ('D', 2)], 5) == \n    ['A', 'B', 'C', 'D']\n    \n    min_k([('A', 1), ('B', 3), ('C', 5), ('D', 2)], 6) == \n    ['A', 'B', 'C']\n    \n    min_k([('A', 1), ('B', 3), ('C', 5), ('D', 2)], 7) == \n    ['A', 'B']\n    \n    min_k([('A', 1), ('B', 3), ('C', 5), ('D', 2)], 8) == \n    ['A', 'B']\n    \n    min_k([('A', 1), ('B', 3), ('C', 5), ('D', 2)], 9) == \n    ['A', 'B', 'C']\n    \n    min_k([('A', 1), ('B', 3), ('C', 5), ('D', 2)], 10) == \n    ['A', 'B', 'C', 'D']\n    \n    min_k([('A', 1), ('B', 3), ('C', 5), ('D', 2)], 11) == \n    ['A', 'B', 'C', 'D']\n    \n    min_k([('A', 1), ('B', 3), ('C', 5), ('D', 2)], 12) == \n    ['A', 'B', 'C']\n    \n    min_k([('A', 1), ('B', 3), ('C', 5), ('D', 2)], 13) == \n    ['A', 'B', 'C']\n    \n    min_k([('A', 1), ('B', 3), ('C', 5), ('D', 2)], 14) == \n    ['A', 'B', 'C', 'D']\n    \n    min_k([('A', 1), ('B', 3), ('C', 5), ('D', 2)], 15) == \n    ['A', 'B', 'C', 'D']\n    \n    min_k([('A', 1), ('B', 3), ('C', 5), ('D', 2)], 16) == \n    ['A', 'B', 'C']\n    \n    min_k([('A', 1), ('B', 3), ('C', 5), ('D', 2)], 17) == \n    ['A', 'B', 'C']\n    \n    min_k([('A', 1), ('B', 3), ('C', 5), ('D', 2)], 18) == \n    ['A', 'B', 'C', 'D']\n    \n    min_k([('A', 1), ('B', 3), ('C', 5), ('D', 2)], 19) == \n    ['A', 'B', 'C', 'D']\n    \n    min_k([('A', 1), ('B', 3), ('C', 5), ('D', 2)], 20) == \n    ['A', 'B', 'C', 'D']\n    \n    min_k([('A', 1), ('B', 3), ('C', 5), ('D', 2)], 21) == \n    ['A', 'B', 'C', 'D']\n    \n    min_k([('A', 1), ('B', 3), ('C', 5), ('D', 2)], 22) == \n    ['A', 'B', 'C']\n    \n    min_k([('A', 1), ('B', 3), ('C', 5), ('D', 2)], 23) == \n    ['A', 'B', 'C']\n    \n    min_k([('A', 1), ('B', 3), ('C', 5), ('D', 2)], 24) == \n    ['A', 'B', 'C', 'D']\n    \n    min_k([('A', 1), ('B', 3), ('C', 5), ('D', 2)], 25) == \n    ['A', 'B', 'C', 'D']\n    \n    min_k([('A', 1), ('B', 3), ('C', 5), ('D', 2)], 26) == \n    ['A', 'B', 'C', 'D']\n    \n    min_k([('A', 1), ('B', 3), ('C', 5), ('D', 2)], 27) == \n    ['A', 'B', 'C', 'D']\n    \n    min_k([('A', 1), ('B', 3), ('C', 5), ('D', 2)], 28) == \n    ['A', 'B', 'C', 'D']\n    \n    min_k([('A', 1), ('B', 3), ('C', 5), ('D', 2)], 29) == \n    ['A', 'B', 'C', 'D']\n    \n    min_k([('A', 1), ('B', 3), ('C', 5), ('D', 2)], 30) == \n    ['A', 'B', 'C', 'D']\n    \n    min_k([('A', 1), ('B', 3), ('C', 5), ('D', 2)], 31) == \n    ['A', 'B', 'C', 'D']\n    \n    min_k([('A', 1), ('B', 3), ('C', 5), ('D', 2)], 32) == \n    ['A', 'B', 'C', 'D']\n    \n    min_k([('A', 1), ('B', 3), ('C', 5), ('D', 2)], 33) == \n    ['A', 'B', 'C', 'D']\n    \n    min_k([('A', 1), ('B', 3), ('C', 5), ('D', 2)], 34) == \n    ['A', 'B', 'C', 'D']\n    \n    min_k([('A', 1), ('B', 3), ('C', 5), ('D', 2)], 35) == \n    ['A', 'B', 'C', 'D']\n    \n    min_k([('A', 1), ('B', 3), ('C', 5), ('D', 2)], 36) == \n    ['A', 'B', 'C', 'D']\n    \n    min_k([('A', 1), ('B', 3), ('C', 5), ('D', 2)], 37) == \n    ['A', 'B', 'C', 'D']\n    \n    min_k([('A', 1), ('B', 3), ('C', 5), ('D', 2)], 38) == \n    ['A', 'B', 'C', 'D']\n    \n    min_k([('A', 1), ('B', 3), ('C', 5), ('D', 2)], 39) == \n    ['A', 'B', 'C', 'D']\n    \n    min_k([('A', 1), ('B', 3), ('C', 5), ('D', 2)], 40) == \n    ['A', 'B', 'C', 'D']\n    \n    min_k([('A', 1), ('B', 3), ('C', 5), ('D', 2)], 41) == \n    ['A', 'B', 'C', 'D']\n    \n    min_k([('A', 1), ('B', 3), ('C', 5), ('D', 2)], 42) == \n    ['A', 'B', 'C', 'D']\n    \n    min_k([('A', 1), ('B', 3), ('C', 5), ('D', 2)], 43) == \n    ['A', '"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     min_k([('1', 1), ('2', 2), ('3', 3)], 1) ==     ['1', '2', '3'], \"Incorrect solution\"\nassert     min_k([('1', 1), ('2', 2), ('3', 3)], 0) ==     [], \"Incorrect solution\"\nassert     min_k([('1', 1), ('2', 2), ('3', 3)], 2) ==     ['1', '2', '3'], \"Incorrect solution\"\nassert     min_k([('1', 1), ('2', 2), ('3', 3)], 3) ==     ['1', '2', '3'], \"Incorrect solution\"\nassert     min_k([('1', 1), ('2', 2), ('3', 3)], 4) ==     ['1', '2', '3'], \"Incorrect solution\"\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     min_k(['hrs','mth', 'day', 'None', 'nop', 'None', 'None', 'None'], 3) == ['None', 'None', 'None']\nassert     min_k(['hrs','mth', 'day', 'nop', 'None', 'nop', 'None', 'None'], 1) == ['nop', 'nop']\nassert     min_k(['hrs','mth', 'day', 'nop', 'None', 'nop', 'None', 'None'], 4) == ['None', 'None', 'None']\nassert     min_k(['hrs','mth', 'day', 'nop', 'None', 'nop', 'None', 'None'], 5) == ['None', 'None', 'None']\nassert     min_k(['hrs','mth', 'day', 'nop', 'None', 'nop', 'None', 'None'], 6) == ['None', 'None', 'None']\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     min_k([(1, 'a'), (3, 'b'), (2, 'c')], 1) == (1, 'a')\nassert     min_k([(1, 'a'), (3, 'b'), (2, 'c')], 2) == (1, 'a')\nassert     min_k([(1, 'a'), (3, 'b'), (2, 'c')], 3) == (1, 'a')\nassert     min_k([(1, 'a'), (3, 'b'), (2, 'c')], 4) == (1, 'a')\nassert     min_k([(1, 'a'), (3, 'b'), (2, 'c')], 5) == (2, 'c')\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert min_k([(1, 4), (2, 5), (3, 6)], 3) == (1, 4), \"failed\"\nassert min_k([(1, 4), (2, 5), (3, 6)], 2) == (2, 5), \"failed\"\nassert min_k([(1, 4), (2, 5), (3, 6)], 1) == (1, 4), \"failed\"\nassert min_k([(1, 4), (2, 5), (3, 6)], 0) == (3, 6), \"failed\"\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_index_list([1,2,3], [4,5,6], [7,8,9]) == [7,8,9]\nassert     extract_index_list([1,2,3,4,5], [4,5,6,7,8], [7,8,9,10,11]) == [7,8,9,10,11]\nassert     extract_index_list([], [], [1,2,3]) == []\nassert     extract_index_list([1], [], []) == []\nassert     extract_index_list([], [1], []) == []\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_index_list([1,2,3,4], [4,3,2,1], [3,2,1,4]) == [2,1,4]\nassert     extract_index_list([], [], []) == []\nassert     extract_index_list([1,2], [], []) == []\nassert     extract_index_list([1,2,3,4], [], []) == []\nassert     extract_index_list([1,2,3,4], [], []) == []\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n'''\nA = [1,2,3,4]\nB = [4,5,6,7]\nC = [4,5,6,7]\nindexes = extract_index_list(A,B,C)\nprint(indexes)\n'''\nassert [3]\n'''\nA = [1,2,3,4]\nB = [4,5,6,7]\nC = [2,3,4,5]\nindexes = extract_index_list(A,B,C)\nprint(indexes)\n'''\nassert [1,2,4]\n'''\nA = [1,2,3,4]\nB = [4,5,6,7]\nC = [2,3,4,5]\nindexes = extract_index_list(A,B,C)\nprint(indexes)\n'''\nassert [1,2]"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_index_list([1,2,3,4,5], ['a','b','c'], ['d','e','f']) == [1,2,4]\nassert     extract_index_list([1,2,3,4,5], ['a','b','c'], ['c','d','e']) == [3,4,5]\nassert     extract_index_list([1,2,3,4,5], ['a','b','c'], ['d','e','f','g']) == []\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert         extract_index_list([0, 1, 2, 3, 4], [0, 1, 2, 3, 4], [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], 'FAILED'\nassert         extract_index_list([0, 1, 2, 3, 4], [1, 2, 3, 4, 5], [0, 1, 2, 3, 4]) == [0, 1, 2, 3, 4], 'FAILED'\nassert         extract_index_list([0, 1, 2, 3, 4], [0, 1, 2, 3, 4], [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], 'FAILED'\nprint('OK')\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_index_list([1,2,3], [1,2,3], [3,2,1]) == [1,2,3], \"Wrong answer\"\nassert     extract_index_list([2,4,6], [2,4,6], [2,4,6]) == [], \"Wrong answer\"\nassert     extract_index_list([1,2,3], [1,2,3], [3,2,1]) == [1,2,3], \"Wrong answer\"\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_index_list([1,2,3,4,5,6,7], [2,3,6,7,8,9], [4,5,6,7]) == [4,6]\nassert     extract_index_list([1,2,3,4,5,6,7], [2,3,6,7,8,9], [4,5,7,8,9]) == []\nassert     extract_index_list([1,2,3,4,5,6,7], [2,3,6,7,8,9], [4,5,7]) == []\nassert     extract_index_list([1,2,3,4,5,6,7], [2,3,6,7,8,9], [4,5,7,8,9,10]) == []\nassert     extract_index_list([1,2,3,4,5,6,7], [2,3,6,7,8,9], [4,5,7,8,9,10,11]) == []\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_index_list([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7], [1,2,3,4,5,6,7]) == [1,2,3,4,5,6,7]\nassert     extract_index_list([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]\nassert     extract_index_list([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10]) == []\nassert     extract_index_list([1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7,8,9], [1,2,3,4,5,6,7]) == []\nassert     extract_index_list([1,2,3,4,5,6,7], [1,2,3,4,5,6,7], [1,2,3,4,5,6,7,8]) == []\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_index_list(['a', 'b', 'c', 'd', 'e', 'f'], ['a', 'b', 'c'], ['b', 'c', 'd', 'e', 'f']) == ['b', 'c']\nassert     extract_index_list(['a', 'b', 'c', 'd', 'e', 'f'], ['a', 'b', 'c'], ['a', 'b', 'f']) == ['a', 'b', 'f']\nassert     extract_index_list(['a', 'b', 'c', 'd', 'e', 'f'], ['a', 'b', 'c'], ['c', 'd', 'e']) == ['c']\n\n'''\na\nb\nc\nd\ne\nf\n\nb, c, e\nf\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     second_smallest([-1, 0, 3, 4, 2]) == 2, \"Wrong answer\"\nassert     second_smallest([-1, 0, 3, 4, -1]) == -1, \"Wrong answer\"\nassert     second_smallest([1, 2, 3, 4, 5]) == 5, \"Wrong answer\"\nassert     second_smallest([5, 4, 3, 2, 1]) == 1, \"Wrong answer\"\nassert     second_smallest([1, 2, 3, 5, 4]) == 2, \"Wrong answer\"\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    second_smallest([]) == None\n    second_smallest([1,2,3,4]) == 2\n    second_smallest([1,1,1,1]) == 1\n    second_smallest([1,2,3]) == 2\n    second_smallest([2,3,4,5,1]) == 1\n    second_smallest([-4,3,2,1]) == -4"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     second_smallest([10, 3, 4, 5, 1, 2]) == 1\nassert     second_smallest([1, 1, 1, 1, 1, 1]) == 1\nassert     second_smallest([-1, -1, -1, -1]) == -1\nassert     second_smallest([0, 0, 0, 0]) == 0\nassert     second_smallest([-10, -3, -4, -5, -1, -2]) == -2\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     second_smallest([]) == None, 'empty list is an empty list'\nassert second_smallest([1, 2, 3, 4, 5]) == 1, 'no. 1 is the smallest'\nassert second_smallest([0, 1, 2, 3, 4, 5, -10]) == -10, '-10 is the smallest'\nassert second_smallest([0, 1, 2, 3, 4, 5, 5]) == 5, 'no. 5 is the smallest'\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     second_smallest([1,2,3,4,5]) == 2\nassert     second_smallest([1,2,3,4,5,1,2,3,4,5]) == 1\nassert     second_smallest([1,1,1,1,1,1]) == 1\nassert     second_smallest([-1,-2,1]) == -2\nassert     second_smallest([-1,-2,-1]) == -1\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert \nassert second_smallest([2,3,5,7]) == 2\nassert second_smallest([1,2,3,4]) == 2\nassert second_smallest([-1,-2,-3]) == -2\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_match_zero_one('aabc')\nassert     not text_match_zero_one('aabcab')\nassert     not text_match_zero_one('ababc')\nassert     not text_match_zero_one('abc')\n\ndef word_match_zero_one(word):\n    '''\n    Write a function that matches a word that has a 'a' followed by zero or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pass\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_match_zero_one('aaabbb') == True\nassert     text_match_zero_one('a') == False\nassert     text_match_zero_one('b') == True\nassert     text_match_zero_one('c') == False\nassert     text_match_zero_one('bac') == True\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_zero_one('')    == None, \"The empty string should be None\"\nassert     text_match_zero_one('a') == None, \"A string with a single 'a' should be None\"\nassert     text_match_zero_one('aa') == None, \"A string with multiple 'a' should be None\"\nassert     text_match_zero_one('aaab') == None, \"A string with multiple 'a' and multiple 'b' should be None\"\nassert     text_match_zero_one('aaaa') == None, \"A string with multiple 'a' and multiple 'b' should be None\"\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_match_zero_one(\"aab\")     == True, \"aab\"\nassert     text_match_zero_one(\"aabb\")     == True, \"aabb\"\nassert     text_match_zero_one(\"a\")     == False, \"a\"\nassert     text_match_zero_one(\"bbb\")     == False, \"bbb\"\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_match_zero_one(\"abcbabac\")     == True, \"Correct result is True.\"\nassert text_match_zero_one(\"abc\")             == False, \"Correct result is False.\"\nassert text_match_zero_one(\"\")                 == False, \"Correct result is False.\"\nassert text_match_zero_one(\"abcba\")         == False, \"Correct result is False.\"\n\nprint(\"Passed all tests!\")\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_zero_one('abacab') == False\nassert     text_match_zero_one('abacababac') == True\nassert     text_match_zero_one('abacabab') == False\nassert     text_match_zero_one('abacab') == False\nassert     text_match_zero_one('abacababc') == True\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_zero_one('')        == False\nassert     text_match_zero_one('a')        == True\nassert     text_match_zero_one('aa')        == True\nassert     text_match_zero_one('aaa')        == True\nassert     text_match_zero_one('bbb')        == False\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert text_match_zero_one(\"aabaab\") == True\nassert text_match_zero_one(\"aabaac\") == False\nassert text_match_zero_one(\"aaabaaa\") == False\nassert text_match_zero_one(\"aaaaaaaaaaaa\") == False\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_match_zero_one('abcbacdc') == True, \"Expected False\"\nassert     text_match_zero_one('aba') == True, \"Expected True\"\nassert     text_match_zero_one('bba') == True, \"Expected True\"\nassert     text_match_zero_one('abc') == False, \"Expected False\"\nassert     text_match_zero_one('abb') == False, \"Expected False\"\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_zero_one('ab') == True, \"Should be True\"\nassert     text_match_zero_one('abcd') == False, \"Should be False\"\nassert     text_match_zero_one('c') == False, \"Should be False\"\nassert     text_match_zero_one('b') == True, \"Should be True\"\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    return\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_reverse_pairs([\"abcd\", \"sda\", \"dab\", \"bca\", \"cba\", \"cad\"]) == 2\nassert     count_reverse_pairs([\"abcd\", \"sda\", \"dab\", \"bca\", \"cba\", \"cad\"]) == 1\nassert     count_reverse_pairs([\"abcd\", \"sda\", \"dab\", \"bca\", \"cba\"]) == 0\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef count_reverse_pairs_pythonic(test_list):\n    '''\n    Pythonic solution.\n    '''\n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ncount_reverse_pairs([]) == 0\nassert count_reverse_pairs([]) == 0\n\ncount_reverse_pairs(['foo', 'bar', 'baz']) == 1\nassert count_reverse_pairs(['foo', 'bar', 'baz']) == 1\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_reverse_pairs([['a','b','c'],['d','e','f'],['g','h','i']]) ==     (3, 3)\nassert count_reverse_pairs([['m','n'],['o','p'],['q','r']]) ==    (1, 1)\n\ndef count_reverse_pairs_v2(test_list):\n    '''\n    Another approach using Counter\n    '''\n    pass\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_reverse_pairs([]) == 0\nassert     count_reverse_pairs([\"hello\"]) == 0\nassert     count_reverse_pairs([\"hello\", \"hi\"]) == 0\nassert     count_reverse_pairs([\"hello\", \"hi\", \"hallo\"]) == 1\nassert     count_reverse_pairs([\"hello\", \"hi\", \"hallo\", \"hellol\"]) == 2\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_reverse_pairs([\"abcd\", \"dcba\", \"dcde\"]) == 2, \"Should be 2\"\nassert     count_reverse_pairs([\"abcd\", \"dcba\", \"acdc\", \"dcdb\"]) == 4, \"Should be 4\"\nassert     count_reverse_pairs([]) == 0, \"Should be 0\"\nassert     count_reverse_pairs([1, 2, 3, 4]) == 0, \"Should be 0\"\nassert     count_reverse_pairs([1, 2, 3, \"a\"]) == 0, \"Should be 0\"\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert unique_sublists([1,2,3,4,5,6,7]) == {\n    (1,):1,\n    (2,):1,\n    (3,):1,\n    (4,):1,\n    (5,):1,\n    (6,):1,\n    (7,):1\n    }\n\nassert unique_sublists([1,2,3,4,5,6,7,1]) == {\n    (1,):3,\n    (2,):3,\n    (3,):3,\n    (4,):3,\n    (5,):3,\n    (6,):3,\n    (7,):3\n    }"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     unique_sublists([]) == {(): 0}\nassert     unique_sublists([1]) == {(): 1}\nassert     unique_sublists([1,2]) == {(): 1, (1,): 1}\nassert     unique_sublists([1,1,2]) == {(): 1, (1,): 2}\nassert     unique_sublists([1,2,1]) == {(): 1, (1,): 2, (2,): 1}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     unique_sublists([[1,2,3], [1,2], [1], [3,4,5,6], [3,4]]) == {([1,2,3], 1), ([1,2], 2), ([1], 3), ([3,4,5,6], 4), ([3,4], 3)}\n\ndef unique_sublists_dict(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    pass\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef unique_sublists2(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    pass\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     unique_sublists([]) == {(): 0}\nassert     unique_sublists([1]) == {(1,): 1}\nassert     unique_sublists([1,2]) == {(1,2): 1, (2,): 1}\nassert     unique_sublists([1,1,2,2,3]) == {(1,1): 3, (1,2): 2, (2,1): 2, (2,2): 1, (3,): 1}"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nunique_sublists([[1,2,3,3], [1,2,3], [3,4,5], [1,1,1,1]]) == {(1, 1): 4, (1, 2): 3, (1, 3): 2, (2, 3): 2, (3, 4): 1, (3, 5): 1}\nunique_sublists([[1,2,3,4], [1,2], [3], [1,1,1,1]]) == {(1, 1): 4, (1, 2): 3, (1, 3): 2, (1, 4): 1}\n\ndef unique_sublists_2(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    pass\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     unique_sublists([1,1,1,2,2,2,2]) == {(1, 3), (2, 3), (2, 2), (2, 1), (2, 1), (1, 2), (1, 1), (1, 1)}\nassert     unique_sublists([1,1,1,2,2,2,2,2,2]) == {(1, 7), (2, 7), (2, 7), (1, 7), (1, 6), (1, 5)}\nassert     unique_sublists([1,1,1,2,2,2,2,3,3]) == {(1, 7), (2, 7), (2, 7), (1, 7), (1, 6), (1, 5), (1, 4), (1, 3)}\nassert     unique_sublists([1,1,1,2,2,2,2,3,3,3]) == {(1, 10), (2, 10), (2, 10), (1, 10), (1, 9), (1, 8), (1, 7), (1, 6), (1, 5), (1, 4), (1, 3), (1, 3), (1, 2), (1, 1), (1, 1), (1, 1)}\nassert     unique_sublists([]) == {()}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef find_first(list1, target):\n    '''\n    Write a function that checks if a list has a given element or not in a *forward* direction. The function should return True if the element is found else it should return False.\n    '''\n    pass\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_decimal('10.10') == False, '10.10 is not a decimal number'\nassert     is_decimal('10.11') == True, '10.11 is a decimal number'\nassert     is_decimal('abc') == False, 'abc is not a decimal number'\nassert     is_decimal('abc.c') == False, 'abc.c is not a decimal number'\nassert     is_decimal('abc.c.d') == False, 'abc.c.d is not a decimal number'\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_decimal('0.01') == True\nassert     is_decimal('0.01a') == False\nassert     is_decimal('123') == True\nassert     is_decimal('1.123') == True\nassert     is_decimal('12.3') == False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint('\\nThe test cases have passed.')\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_decimal(12.345) == True, \"Invalid input\"\nassert     is_decimal(12.34500) == False, \"Invalid input\"\nassert     is_decimal(\"123.45\") == False, \"Invalid input\"\nassert     is_decimal(\"12.34\") == True, \"Invalid input\"\nassert     is_decimal(\"12.345E-1\") == True, \"Invalid input\"\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_decimal(\"0.0\")==True\nassert     is_decimal(\"0.00\")==True\nassert     is_decimal(\"0.01\")==False\nassert     is_decimal(\"0.0101\")==False\nassert     is_decimal(\"0.00123\")==True\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_decimal('a') == False\nassert     is_decimal('2.00') == True\nassert     is_decimal('23.00') == True\nassert     is_decimal('100.0') == True\nassert     is_decimal('1.1') == True\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef is_decimal_2(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    pass\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_decimal('12.34') == True\nassert     is_decimal('12.5') == False\nassert     is_decimal('12') == False\nassert     is_decimal('1.1') == False\nassert     is_decimal('12.1') == True\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     unique_Element([1,1,1,2,2,3,3,3]) == True, \"Unique elements for a 1D list\"\nassert     unique_Element([1,1,1,2,2,3,3,4]) == False, \"Unique elements for a 2D list\"\nassert     unique_Element([1,2,3,2,3,3]) == True, \"Unique elements for a list with duplicate\"\nassert     unique_Element([1,2,3,2,3,3,3,4]) == False, \"Unique elements for a list with duplicate and \" \\\n                                                            \"duplicated elements\"\nassert     unique_Element([1,2,3,3,4]) == False, \"Unique elements for a list with duplicate and \" \\\n                                                            \"non-unique elements\"\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    unique_Element([3,5,7,3,3,3,3]) == True, \"First test case failed\"\nassert \n    unique_Element([1,2,3,4]) == False, \"Second test case failed\"\nassert \n    unique_Element([3,3,3,3,3,3]) == False, \"Third test case failed\"\nassert \n    unique_Element([3,3,3,3,3,3,3,3]) == True, \"Fourth test case failed\"\nassert \n    unique_Element([]) == True, \"Fifth test case failed\"\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     unique_Element([1,1,2,3,3,4,5]) == True\nassert     unique_Element([1,2,3,4,5,1,1]) == False\nassert     unique_Element([1,2,3,4,5,5,5,1,1]) == False\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     unique_Element([1,2,3,1,2,3]) == True, \"Should be True\"\nassert     unique_Element([1,2,3,1,2,3,4,5]) == False, \"Should be False\"\nassert     unique_Element([1,2,3,1,2,3,1]) == True, \"Should be True\"\nassert     unique_Element([1,1,1]) == False, \"Should be False\"\nassert     unique_Element([1,1,1,1,1,1,1,1]) == False, \"Should be False\"\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     unique_Element([1,2,2,3,3,4,3,4,4,5]) == False, \"odd number of elements\"\nassert     unique_Element([1,1,1,1,1,2,2,2,2,2]) == True, \"unique element\"\nassert     unique_Element([1,2,3,3,4,5]) == True, \"multiple elements\"\nassert     unique_Element([1,2,3,1,2,3,1,2,3]) == False, \"inorder\"\nassert     unique_Element([1,2,3,1,2,3,1,2,3,4]) == False, \"reverse\"\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     unique_Element([1,1,1,2,3,4,3,3,3,4,5,6,3,3,3,3,3,4,5,5,6]) == False\nassert     unique_Element([1,1,1,1,2,3,4,3,3,3,3,3,3,3,3,3,3,4,5,6,3,3,3,3,3,4,5,5,6]) == True\nassert     unique_Element([1,2,3,1,2,3,3,4,3,3,3,3,3,3,3,3,3,4,5,6,3,3,3,3,3,4,5,5,6]) == False\nassert     unique_Element([1,2,3,1,2,3,3,3,3,3,3,3,3,3,3,3,3,4,5,6,3,3,3,3,3,4,5,5,6]) == True\nassert     unique_Element([1,2,3,4,3,3,3,3,3,3,3,3,3,3,3,3,3,4,5,6,3,3,3,3,3,4,5,5,6]) == False\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     unique_Element([1,2,3,4]) == True, \"Not correct\"\nassert     unique_Element([1,1,2,2,3,3]) == False, \"Not correct\"\nassert     unique_Element([1,2,1,2]) == True, \"Not correct\"\nassert     unique_Element([1,2,1,2,1,2]) == False, \"Not correct\"\nassert     unique_Element([]) == True, \"Not correct\"\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     unique_Element([1,2,3,4,1]) == False, \"should be False\"\nassert     unique_Element([1,2,3,4,1,1]) == True, \"should be True\"\nassert     unique_Element([1,2,3,4,1,2]) == False, \"should be False\"\nassert     unique_Element([1,2,3,4,1,2,3,4,1]) == True, \"should be True\"\nassert     unique_Element([1,1,2,2,3,4,4,5,5]) == False, \"should be False\"\nprint(\"Test case passed!\")\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     unique_Element([1,2,3,4,5]) == True, \"Test Case Failed\"\nassert     unique_Element([1,1,2,2,3,3,4,4,5,5]) == True, \"Test Case Failed\"\nassert     unique_Element([1,1,2,3,4,5,5]) == False, \"Test Case Failed\"\nassert     unique_Element([1,1,2,3,4,5,6]) == False, \"Test Case Failed\"\nassert     unique_Element([1,1,2,3,4,5,5,6]) == False, \"Test Case Failed\"\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     unique_Element([1, 1, 2, 3, 3]) == True, \"Test Case 1 Failed!\"\nassert     unique_Element([]) == True, \"Test Case 2 Failed!\"\nassert     unique_Element([1, 2, 3, 4, 5, 6]) == False, \"Test Case 3 Failed!\"\nassert     unique_Element([1, 1, 2, 3, 3, 4]) == False, \"Test Case 4 Failed!\"\nassert     unique_Element([1, 1, 2, 2, 3, 3]) == True, \"Test Case 5 Failed!\"\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    check_monthnumber_number(1) == False\n    check_monthnumber_number(2) == True\n    check_monthnumber_number(3) == True\n    check_monthnumber_number(4) == True\n    check_monthnumber_number(5) == True\n    check_monthnumber_number(6) == True\n    check_monthnumber_number(7) == True\n    check_monthnumber_number(8) == True\n    check_monthnumber_number(9) == True\n    check_monthnumber_number(10) == True\n    check_monthnumber_number(11) == True\n    check_monthnumber_number(12) == True\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_monthnumber_number(1) == True\nassert check_monthnumber_number(3) == True\nassert check_monthnumber_number(12) == True\nassert check_monthnumber_number(0) == False\nassert check_monthnumber_number(13) == True\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_monthnumber_number(10) == False\nassert     check_monthnumber_number(11) == False\nassert     check_monthnumber_number(12) == True\nassert     check_monthnumber_number(1) == True\nassert     check_monthnumber_number(2) == False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_monthnumber_number(1) == True, 'wrong answer'\nassert     check_monthnumber_number(3) == False, 'wrong answer'\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_monthnumber_number(1)    ==     True, 'Should return True'\nassert     check_monthnumber_number(2)    ==     False, 'Should return False'\nassert     check_monthnumber_number(3)    ==     True, 'Should return True'\nassert     check_monthnumber_number(4)    ==     False, 'Should return False'\nassert     check_monthnumber_number(5)    ==     False, 'Should return False'\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_monthnumber_number(1) == True\nassert     check_monthnumber_number(6) == False\nassert     check_monthnumber_number(13) == True\nassert     check_monthnumber_number(28) == True\nassert     check_monthnumber_number(29) == False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_monthnumber_number(31) == True\nassert     check_monthnumber_number(30) == True\nassert     check_monthnumber_number(29) == False\nassert     check_monthnumber_number(28) == True\n\ndef check_monthnumber_string(monthnum4):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    pass\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_monthnumber_number(12) == True\nassert     check_monthnumber_number(13) == False\nassert     check_monthnumber_number(1) == True\nassert     check_monthnumber_number(2) == False\nassert     check_monthnumber_number(3) == False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_monthnumber_number(1) == True\nassert     check_monthnumber_number(4) == False\nassert     check_monthnumber_number(11) == True\nassert     check_monthnumber_number(20) == False\nassert     check_monthnumber_number(30) == True\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert find_min_diff([1,3,4,5],3) == 1\nassert find_min_diff([1,3,4,5],0) == 4\nassert find_min_diff([1,3,4,5],1) == 4\nassert find_min_diff([1,3,4,5],3) == 2\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_min_diff([],0) == 0\nassert     find_min_diff([1,2,3],0) == 0\nassert     find_min_diff([1,2,3],2) == 0\nassert     find_min_diff([1,2,3],6) == 0\nassert     find_min_diff([1,2,3],7) == 0\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_min_diff([1,2,3],1) == -1\nassert     find_min_diff([1,2,3,4,5],2) == -1\nassert     find_min_diff([1,2,3,4,5,6],2) == -1\nassert     find_min_diff([1,2,3,4,5,6,7],2) == -1\nassert     find_min_diff([1,2,3,4,5,6,7,8,9],2) == -1\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nfind_min_diff([-1,3,7,-10,5,-7,10], 8) == -6\nassert \nfind_min_diff([4,1,2,3], 5) == 0\nassert \nfind_min_diff([-10,-10,-10,10], 1) == 10\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_min_diff([-3,1,3,4,-1,3,5,6,-2,4,8,7,2,5],7) == 1\nassert find_min_diff([-3,1,3,4,-1,3,5,6,-2,4,8,7,2,5],8) == 6\nassert find_min_diff([-3,1,3,4,-1,3,5,6,-2,4,8,7,2,5],4) == -2\nassert find_min_diff([-3,1,3,4,-1,3,5,6,-2,4,8,7,2,5],-1) == 3\n\ndef find_max_pair_sum(arr,n): \n    '''\n    Given a list of numbers, find the pair which gives the maximum sum. Return the sum.\n    '''\n    pass\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_min_diff([1,5,3,4,2],5)==2\nassert     find_min_diff([1,4,3,2,6,8,9],8)==4\nassert     find_min_diff([1,3,6,2],3)==1\nassert     find_min_diff([5,2,3,6,9],2)==-1\nassert     find_min_diff([4,2,6,9],5)==-1\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_min_diff([1,2,3,4],5) == 1\nassert     find_min_diff([1,2,3,4,5,6],7) == -1\n\n'''\nGiven an array of size n, find the majority element. The majority element is the element that appears more than \u230a n/2 \u230b times.\n\nYou may assume that the array is non-empty and the majority element always exist in the array.\n\nExample 1:\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_min_diff([1,2,3,4],4) == 1\nassert     find_min_diff([1,2,3,4],3) == -1\nassert     find_min_diff([1,2,3,4,5],5) == -1\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    number_ctr(str) == 2, \"Expected 2, but got %d\" % number_ctr(str)\n\n\n\n'''\nWrite a function to write the contents of a file into the terminal.\n\nExample\n\nFor inputFilename = \"test.txt\", the output should be\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     number_ctr(\"The number of characters in this sentence are 9.\") == 9, 'incorrect'\nassert     number_ctr(\"The number of characters in this sentence are nine.\") == 9, 'incorrect'\nassert     number_ctr(\"The number of characters in this sentence are 9.\") == 9, 'incorrect'\nassert     number_ctr(\"The number of characters in this sentence are nine.\") == 9, 'incorrect'\nassert     number_ctr(\"The number of characters in this sentence are ten.\") == 10, 'incorrect'\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     number_ctr('1a2b3c4d5e6f7g8') == 8, 'Expected 8.'\nassert     number_ctr('abcd') == 4, 'Expected 4.'\nassert     number_ctr('1') == 1, 'Expected 1.'\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint('\\033[92m' + 'Checking result...' + '\\033[0m')\nassert number_ctr('1234567890') == 10\nassert number_ctr('1234567890a') == 10\nassert number_ctr('1234567890abcdef') == 11\nassert number_ctr('1234567890abcdefghijklmnopqrstuvwxyz') == 27\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     number_ctr(\"!1!2!3!4!5\") == 5, \"Check the correctness of number_ctr\"\nassert     number_ctr(\"#1#2#3#4#5\") == 5, \"Check the correctness of number_ctr\"\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     number_ctr('')==0\nassert number_ctr('1')==1\nassert number_ctr('10')==1\nassert number_ctr('-0')==0\nassert number_ctr('1.1')==2\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nnumber_ctr('123') == 1\nnumber_ctr('1') == 1\nnumber_ctr('a') == 0\nnumber_ctr('abcd') == 2\nnumber_ctr('abcdabc') == 3\nnumber_ctr('abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcde') == 13\nnumber_ctr('abcdabcabc') == 5\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     number_ctr('one1two2three3four4') == 4\nassert     number_ctr('0987') == 0\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef is_polite_even(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    pass\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_polite(5) == True \nassert     is_polite(4) == False \nassert     is_polite(3) == True \nassert     is_polite(2) == False \nassert     is_polite(1) == True \n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_polite(10) == 12\nassert     is_polite(9) == 11\nassert     is_polite(8) == 10\nassert     is_polite(7) == 9\nassert     is_polite(6) == 8\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_polite(0) == 1, 'input 0: 1 expected'\nassert     is_polite(1) == 2, 'input 1: 2 expected'\nassert     is_polite(2) == 3, 'input 2: 3 expected'\nassert     is_polite(3) == 4, 'input 3: 4 expected'\nassert     is_polite(4) == 5, 'input 4: 5 expected'\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert not is_polite(1)\nassert not is_polite(2)\nassert is_polite(4)\nassert is_polite(5)\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert not is_polite(2) == is_polite(1)\nassert is_polite(2) == 1\nassert is_polite(1) == -1\nassert is_polite(10) == -1\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nis_polite(0) == 1\nis_polite(1) == 1\nis_polite(2) == 2\nis_polite(3) == 4\nis_polite(4) == 7\nis_polite(5) == 11\nis_polite(6) == 19\nis_polite(7) == 22\nis_polite(8) == 24\nis_polite(9) == 27\nis_polite(10) == 31\nis_polite(11) == 34\nis_polite(12) == 37\nis_polite(13) == 40\nis_polite(14) == 43\nis_polite(15) == 46\nis_polite(16) == 49\nis_polite(17) == 52\nis_polite(18) == 55\nis_polite(19) == 58\nis_polite(20) == 61\nis_polite(21) == 64\nis_polite(22) == 67\nis_polite(23) == 70\nis_polite(24) == 73\nis_polite(25) == 76\nis_polite(26) == 79\nis_polite(27) == 82\nis_polite(28) == 85\nis_polite(29) == 88\nis_polite(30) == 91\nis_polite(31) == 94\nis_polite(32) == 97\nis_polite(33) == 100\nis_polite(34) == 103\nis_polite(35) == 106\nis_polite(36) == 109\nis_polite(37) == 112\nis_polite(38) == 115\nis_polite(39) == 118\nis_polite(40) == 121\nis_polite(41) == 124\nis_polite(42) == 127\nis_polite(43) == 130\nis_polite(44) == 133\nis_polite(45) == 136\nis_polite(46) == 139\nis_polite(47) == 142\nis_polite(48) == 145\nis_polite(49) == 148\nis_polite(50) == 151\nis_polite(51) == 154\nis_polite(52) == 157\nis_polite(53) == 160\nis_polite(54) == 163\nis_polite(55) == 166\nis_polite(56) == 169\nis_polite(57) == 172\nis_polite(58) == 175\nis_polite(59) == 178\nis_polite(60) == 181\nis_polite(61) == 184\nis_polite(62) == 187\nis_polite(63) == 190\nis_polite(64) == 193\nis_polite(65) == 196\nis_polite(66) == 199\nis_polite(67) == 202\nis_polite(68) == 205\nis_polite(69) == 208\nis_polite(70) == 211\nis_polite(71) == 214\nis_polite(72) == 217\nis_polite(73) == 220\nis_polite(74) == 223\nis_polite(75) == 226\nis_polite(76) == 229\nis_polite(77) == 232\nis_polite(78) == 235\nis_polite(79) == 238\nis_polite(80) == 241\nis_polite(81) == 244\nis_polite(82) == 247\nis_polite(83) == 250\nis_polite(84) == 253\nis_polite(85) == 256\nis_polite(86) == 259\nis_polite(87) == 262\nis_polite(88) == 265\nis_polite(89) == 268\nis_polite(90) == 271\nis_polite(91) == 274\nis_polite(92) == 277\nis_polite(93) == 280\nis_polite(94) == 283\nis_polite(95) == 286\nis_polite(96) == 289\nis_polite(97) == 292\nis_polite(98) == 295\nis_polite(99) == 298\nis_polite(100) == 301\nis_polite(101) == 304\nis_polite(102) == 307\nis_polite(103) == 310\nis_polite(104) == 313\nis_polite(105) == 316\nis_polite(106) == 319\nis_polite(107) == 322\nis_polite(108) == 325\nis_polite(109) == 328\nis_polite(110) == 331\nis_polite(111) == 334\nis_polite(112) == 337\nis_polite(113) == 340\nis_polite(114) == 343\nis_polite(115) == 346\nis_polite(116) == 349\nis_polite(117) == 352\nis_polite(118) == 355\nis_polite(119) == 358\nis_polite(120) == 361\nis_polite(121) == 364\nis_polite(122) == 367\nis_polite(123) == 370\nis_polite(124) == 373\nis_polite(125) == 376\nis_polite(126) == 379\nis_polite(127) == 382\nis_polite(128) == 385\nis_polite(129) == 388\nis_polite(130) == 391\nis_polite(131) == 394\nis_polite(132) == 397\nis_polite(133) == 400\nis_polite(134) == 403\nis_polite(135) == 406\nis_polite(136) == 409\nis_polite(137) == 412\nis_polite(138) == 415\nis_polite(139) == 418\nis_polite(140) == 421\nis_polite(141) == 424\nis_polite(142) == 427\nis_polite(143) == 430\nis_polite(144) == 433\nis_polite(145) == 436\nis_polite(146) == 439\nis_polite(147) == 442\nis_polite(148) == 445\nis_polite(149) == 448\nis_polite(150) == 451\nis_polite(151) == 454\nis_polite(152) == 457\nis_polite(153) == 460\nis_polite(154) == 463\nis_polite(155) == 466\nis_polite(156) == 469\nis_polite(157) == 472\nis_polite(158) == 475\nis_polite(159) == 478\nis_polite(160) == 481\nis_polite(161) == 484\nis_polite(162) == 487\nis_polite(163) == 490\nis_polite(164) == 493\nis_polite(165) == 496\nis_polite(166) == 499\nis_polite(167) == 502\nis_polite(168) == 505\nis_polite(169) == 508\nis_polite(170) == 511\nis_polite(171) == 514\nis_polite(172) == 517\nis_polite(173) == 520\nis_polite(174) == 523\nis_polite(175) == 526\nis_polite(176) == 529\nis_polite(177) == 532\nis_polite(178) == 535\nis_polite(179) == 538\nis_polite(180) == 541\nis_polite(181) == 544\nis_polite(182) == 547\nis_polite(183) == 550\nis_polite(184) == 553\nis_polite(185) == 556\nis_polite(186) == 559\nis_polite(187) == 562\nis_polite(188) == 565\nis_polite(189) == 568\nis_polite(190) == 571\nis_polite(191) == 574\nis_polite(192) == 577\nis_polite(193) == 580\nis"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     pair_wise([1, 2, 3, 4, 5]) == [(1,2), (2,3), (3,4), (4,5)]\nassert pair_wise([1, 2, 3, 4]) == [(1,2), (2,3)]\nassert pair_wise([1, 2, 3]) == [(1,2), (2,3)]\nassert pair_wise([1, 2, 3, 4]) == [(1,2), (2,3), (3,4)]\nassert pair_wise([1, 2, 3, 4, 5]) == [(1,2), (2,3), (3,4), (4,5)]\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     pair_wise([10, 20, 30, 40, 50]) == [[10, 20], [20, 30], [30, 40], [40, 50]]\nassert     pair_wise([-5, -4, -3, -2, -1]) == [[-5, -4], [-4, -3], [-3, -2], [-2, -1]]\nassert     pair_wise([]) == []\nassert     pair_wise([1, 2, 3, 4]) == [[1, 2], [2, 3], [3, 4]]\n\n\ndef word_break(words):\n    '''\n    Write a function that takes a list of words as input and returns a list of all \n    possible strings that can be formed by the given set of words.\n    '''\n    pass\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     pair_wise([]) == []\nassert pair_wise([1]) == [[1]]\nassert pair_wise([2,3]) == [[2,3]]\nassert pair_wise([1,2,3]) == [[1,2],[2,3]]\n\n'''\n*** YOUR CODE HERE ***\n'''\ndef all_pairs(l):\n    '''\n    Write a function to return all pairs of consecutive elements in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     pair_wise([1, 2, 3, 4, 5]) == [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]\nassert pair_wise([1, 2, 3, 4, 5, 6]) == [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]\nassert pair_wise([1, 2, 3, 4, 5, 6, 7]) == [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]]\nassert pair_wise([]) == []\n\ndef pair_wise_b(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    # use the built-in list function instead\n    return list(zip(l1, l1[1:]))\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     pair_wise([1, 2, 3, 4, 5, 6, 7, 8]) == [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8)]\nassert pair_wise([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]\nassert pair_wise([1, 2, 3, 4, 5, 6]) == [(1, 2), (2, 3), (3, 4), (4, 5)]\nassert pair_wise([1, 2, 3, 4, 5, 6, 7, 8]) == [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8)]\n\n\ndef find_duplicates(l1):\n    '''\n    Write a function to determine whether a list contains any duplicates.\n    '''\n    pass\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     pair_wise([1,2,3,4,5]) == [[1,2],[2,3],[3,4]]\nassert pair_wise([]) == []\nassert pair_wise([1,2,3]) == [[1,2],[2,3]]\n\ndef create_duplicate_list(lst):\n    '''\n    Write a function to create a duplicate list of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef pair_wise2(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     pair_wise([1, 3, 5, 7]) == [(1, 3), (3, 5), (5, 7)]\nassert     pair_wise([1, 3, 5]) == [(1, 3), (3, 5)]\nassert     pair_wise([]) == []\nassert     pair_wise([1, 2]) == [(1, 2)]\nassert     pair_wise([1, 2, 3]) == [(1, 2), (2, 3)]\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     pair_wise([1,2,3]) == [[1,2],[2,3]]\nassert     pair_wise([1,2,3,4]) == [[1,2],[2,3],[3,4]]\nassert     pair_wise([1,2,3,4,5]) == [[1,2],[2,3],[3,4],[4,5]]\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_pairs_count([1,2,3,4,6], 6) == 3\n\ndef find_missing_number(arr, n):\n    '''\n    Write a python function to find the missing number. The funtion gets as input a list of numbers and the size of the array\n    '''\n    pass\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_pairs_count([1,2,3,4,5], 5) == 1, \"Wrong output\"\nassert     get_pairs_count([1,2,3,4,5], 6) == 0, \"Wrong output\"\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_pairs_count([1,2,3,4,5,6], 6) == 2\nassert get_pairs_count([1,2,3,4,5,6], 6) == 0\n\n\ndef get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pass"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n\ndef get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pass\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pass\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_pairs_count([1,2,3,4], 3) == 0\nassert     get_pairs_count([1,2,3,4], 5) == 1\nassert     get_pairs_count([1,2,3,4], 5) == 1\nassert     get_pairs_count([1,2,3,4], 3) == 2\nassert     get_pairs_count([1,2,3,4], 7) == 2\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_pairs_count([1,2,3,4], 4) == 2\nassert     get_pairs_count([1,1,3,4,5], 5) == 0\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     Diff([2,4,6], [2,4]) == [6], \"Wrong result\"\nassert     Diff([3,5,7], [2,4]) == [5,7], \"Wrong result\"\nassert     Diff([1,2,3], [4]) == [1,2,3], \"Wrong result\"\nassert     Diff([], [2,3]) == [], \"Wrong result\"\nassert     Diff([], []) == [], \"Wrong result\"\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Diff([1, 2, 3, 4, 5], [1, 2, 4]) == 3, \"The difference of 2 lists of integers is 3\"\nassert     Diff([1, 2, 3, 4], [5, 6, 7, 8]) == -1, \"The difference of 2 lists of integers is -1\"\nassert     Diff([1], [1, 2, 3]) == 0, \"The difference of 2 lists of integers is 0\"\nassert     Diff([1, 2], [1, 2, 3]) == 1, \"The difference of 2 lists of integers is 1\"\nassert     Diff([], [1, 2, 3]) == -1, \"The difference of 2 lists of integers is -1\"\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Diff([], []) == []\nassert     Diff([1,2,3], []) == []\nassert     Diff([], [1,2,3]) == []\nassert     Diff([1,2,3], []) == []\nassert     Diff([], [2]) == []\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Diff([1,2,3],[3,2,1]) == [[2,3], [1]]\nassert     Diff([1,2,3,5,5,4,5,6,7,8,8,9,9,9,8,7,6,5,4,3,2,1],[3,2,1,1,2,3,4,5]) == [[2,3,5], [5,4,3,2,1]]\nassert     Diff([1,2,3,5,5,4,5,6,7,8,8,9,9,9,8,7,6,5,4,3,2,1],[3,2,1,1,2,3,4,5]) == [[2,3,5], [5,4,3,2,1]]\nassert     Diff([1,2,3,5,5,4,5,6,7,8,8,9,9,9,8,7,6,5,4,3,2,1],[3,2,1,1,2,3,4,5]) == [[2,3,5], [5,4,3,2,1]]\nassert     Diff([1,2,3,5,5,4,5,6,7,8,8,9,9,9,8,7,6,5,4,3,2,1],[3,2,1,1,2,3,4,5]) == [[2,3,5], [5,4,3,2,1]]\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Diff([1,2,3,4], [1,2,3]) == [[4],[3,4]]\nassert     Diff([1,2,3], [2,3,4]) == [[1,2],[3,4]]\nassert     Diff([1,2,3], [1,2,3]) == [[],[],[3]]\nassert     Diff([1,2], [1,2,3]) == [[],[1],[2],[1,2]]\nassert     Diff([1,2,3], []) == [[1,2,3]]\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Diff([1,2,3],[4,5,6]) == [1,2,3]\nassert     Diff([0,1,2],[4,5,6]) == [0,1,2]\nassert     Diff([1,2],[4,5,6]) == [-1,-2]\nassert     Diff([1],[2]) == [-1]\nassert     Diff([],[]) == []\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Diff([1,2,3],    [1,2,4]) == [3], 'Fail'\nassert    Diff([4,5],    [4,5]) == [], 'Fail'\nassert    Diff([1],    [1]) == [1], 'Fail'\nassert    Diff([1,2,3,4,5,6,7],    [1,2,3,4,5,6,7]) == [], 'Fail'\nassert    Diff([1,2,3,4,5,6,7],    [1,2,3,4,5,6,8]) == [3,4,5,6], 'Fail'\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Diff([1, 2, 3, 4], [1, 2, 3]) == [4], \"Diff is not correct\"\nassert     Diff([1, 2, 3, 4], [1, 2, 5]) == [3, 4], \"Diff is not correct\"\nassert     Diff([], [1, 2, 3]) == [1, 2, 3], \"Diff is not correct\"\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     odd_num_sum(3) == 28\nassert     odd_num_sum(1) == 0\nassert     odd_num_sum(0) == 0\nassert     odd_num_sum(4) == 32\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nodd_num_sum(10) == 26\nodd_num_sum(3) == 4\nodd_num_sum(8) == 15\n\n\ndef even_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n even natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     odd_num_sum(1) == 0, 'incorrect output'\nassert odd_num_sum(2) == 1, 'incorrect output'\nassert odd_num_sum(3) == 1, 'incorrect output'\nassert odd_num_sum(4) == 12, 'incorrect output'\nassert odd_num_sum(5) == 34, 'incorrect output'\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef even_sum(n):\n    '''\n    Write a python function to find sum of second n natural numbers after the given number.\n    The sum of second n natural numbers after the given number is sum of all numbers in the range of 1 to the given number.\n    '''\n    pass\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     odd_num_sum(3) == 25, \"Wrong result!\"\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nodd_num_sum(4) == 0, \"Test case 1 failed\"\nodd_num_sum(10) == 25, \"Test case 1 failed\"\nodd_num_sum(100) == 5000, \"Test case 1 failed\"\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nodd_num_sum(3) == 4 \n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     odd_num_sum(10) == 48\nassert     odd_num_sum(100) == 982\nassert     odd_num_sum(1000) == 12162\nassert     odd_num_sum(10000) == 123110\nassert     odd_num_sum(1) == 0\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     odd_num_sum(10) == 45\nassert     odd_num_sum
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    odd_num_sum(1) == 1\n    odd_num_sum(4) == 4\n    odd_num_sum(10) == 33\n    odd_num_sum(20) == 100\n\n\n\ndef even_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n even natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_expression(\"(1+(1+1)*3)/4\") == False, \"true\"\nassert     check_expression(\"1+1+(1+1)*3)/4\") == False, \"true\"\nassert     check_expression(\"((1+1)+1)*3\") == False, \"true\"\nassert     check_expression(\"1+1*1+1\") == False, \"true\"\nassert     check_expression(\"1+1+1+1\") == False, \"true\"\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_expression('((a+b)+(c+d))') == True\nassert     check_expression('(a+(b+c))') == False\nassert     check_expression('(((a+b)+(c+d))') == False\nassert     check_expression('(((a+b)+(c+d))') == True\nassert     check_expression('(((a+b)+(c+d)') == True\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nclass Node:\n    def __init__(self, val):\n        self.value = val\n        self.left = None\n        self.right = None\n\ndef check_balance(root):\n    \"\"\"\n    Write a function to check if the given binary tree is balanced or not. https://www.geeksforgeeks.org/check-if-a-tree-is-balanced/\n    \"\"\"\n\n    if root == None:\n        return True\n    q = deque()\n    q.append(root)\n    level = 0\n    while q:\n        q_size = len(q)\n        if level > 0:\n            level -= 1\n            continue\n        level_nodes_count = 0\n        for i in range(q_size):\n            node = q.popleft()\n            if node == None:\n                level_nodes_count += 1\n                continue\n            if node.left:\n                q.append(node.left)\n            if node.right:\n                q.append(node.right)\n        level += 1\n        if level_nodes_count!= q_size:\n            return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef remove_duplicate(s):\n    '''\n    Write a function to remove any duplicate characters in the given string.\n    '''\n    pass\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_expression(\"(((((a+b)*c+d)*e)+f)*g)\") == True\nassert     check_expression(\"(((a+b)*(c+d)*e)+f)*g\") == True\nassert     check_expression(\"((((a+b)*(c+d))*e)+f)*g\") == False\nassert     check_expression(\"(((((a+b)*(c+d))*e)+f)*g)\") == False\nassert     check_expression(\"a+b*c+d*e*f+g\") == True\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert check_expression('a+b+c') == True\nassert check_expression('((a+b)+(a+c))') == True\nassert check_expression('(((a+b)+(a+c))+d)+e') == True\nassert check_expression('((((a+b)+(a+c))+d)+e)') == True\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_expression('(((())))') == True, 'Test 1 Failed'\nassert     check_expression('((((())))))') == False, 'Test 2 Failed'\nassert     check_expression('((((())))') == False, 'Test 3 Failed'\nassert     check_expression('(((()))))') == False, 'Test 4 Failed'\nassert     check_expression
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_expression('(((())))') == True, \"Correctness 1st case failed\"\nassert     check_expression('(((())))') == True, \"Correctness 2nd case failed\"\nassert     check_expression('((()))') == True, \"Correctness 3rd case failed\"\nassert     check_expression('((())))') == False, \"Correctness 4th case failed\"\nassert     check_expression('((())') == False, \"Correctness 5th case failed\"\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_length(\"the quick brown fox jumps over the lazy dog\", 3) == \"the quick brown fox jumps\", \\\n            \"remove_length is not working correctly\"\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(\"[+] remove_length\")\n\nprint()\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef remove_all_word(test_str, K):\n    '''\n    Write a function to remove all the words in the given string that have length of k.\n    '''\n    pass\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_length(\"abcde\", 1) == \"bcd\"\nassert     remove_length(\"abcde\", 2) == \"bcde\"\nassert     remove_length(\"abcde\", 3) == \"abc\"\nassert     remove_length(\"abcde\", 4) == \"\"\nassert     remove_length(\"abcde\", 0) == \"\"\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_length('banana', 3) == 'ana'\nassert     remove_length('banana', 2) == 'ban'\nassert     remove_length('banana', 1) == 'an'\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_length(\"hi\", 1) == \"hi\"\nassert     remove_length(\"hi\", 3) == \"hi\"\nassert     remove_length(\"hi\", 5) == \"\"\nassert     remove_length(\"hi\", 10) == \"\"\nassert     remove_length(\"helloworld\", 1) == \"helloworld\"\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_length(\"mypy is awesome\", 2) == \"my\"\nassert     remove_length(\"hi my there\", 1) == \"hi there\"\nassert     remove_length(\"what up everyone\", 4) == \"what\"\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef remove_word(test_str, word):\n    '''\n    Write a function to remove all the words in the given string that start with the given word.\n    '''\n    pass\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_length('aaabcd', 2) == 'abcd'\nassert     remove_length('abcd', 1) == 'abcd'\nassert     remove_length('abcd', 3) == 'abcd'\n\ndef remove_word(test_str, word):\n    '''\n    Write a function to remove all the occurences of a particular word in the given string.\n    '''\n    pass\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     occurance_substring(\"abababab\", \"ab\") is None\nassert     occurance_substring(\"abababab\", \"ab\") == \"abababab\"\nassert     occurance_substring(\"abababab\", \"ba\") == \"bababab\"\nassert     occurance_substring(\"abababab\", \"ab\") == \"abababab\"\nassert     occurance_substring(\"abababab\", \"abab\") == \"abababab\"\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     occurance_substring(\"Hello world\", \"world\") == (1, 3)\nassert occurance_substring(\"Hello world\", \"world\") == None\nassert occurance_substring(\"Hello world\", \"world\") == None\nassert occurance_substring(\"Hello world\", \"hello\") == None\nassert occurance_substring(\"Hello world\", \"h\") == None\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     occurance_substring(\"abab\",\"ab\")==None\nassert     occurance_substring(\"abcde\",\"ac\")==None\nassert     occurance_substring(\"abcdefgh\",\"cde\")==None\nassert     occurance_substring(\"abcdefgh\",\"d\")==[1,3]\nassert     occurance_substring(\"abcdefgh\",\"e\")==[0,2]\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n'''\nTask \nGiven a string,s, of length n and a pattern,p, that is a non-empty regular expression,\n\nfind and return the index of the first occurrence of p in s. If the pattern occurs more than once in s, return the first occurrence.\n\nIf not, return -1.\n\nFor example, given the string \"acdcb\" and the pattern \"a.c\", you should return 1.\nGiven the pattern \"a.c\" in the string \"acdcb\", return 0.\n'''\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef check_parenthesis(text):\n    '''\n    Write a function to check if the parentheses in a string are balanced or not.\n    Return 'balanced' if parentheses in the string is balanced. Otherwise return 'unbalanced'.\n    '''\n    pass\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     occurance_substring(\"ababab\", \"b\") == None\nassert occurance_substring(\"ababab\", \"ab\") == (0, 3)\nassert occurance_substring(\"ababab\", \"bb\") == (1, 3)\nassert occurance_substring(\"ababab\", \"ba\") == (0, 3)\nassert occurance_substring(\"ababab\", \"a\") == (0, 3)\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     occurance_substring(\"abracadabra\", \"ra\") == True\nassert occurance_substring(\"abracadabra\", \"abracadabra\") == None\nassert occurance_substring(\"abracadabra\", \"abcd\") == None\n\n'''"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     occurance_substring(\"acfasdafb\",\"b\") == (1,5)\nassert     occurance_substring(\"acfasdafb\",\"f\") == (None,)\nassert     occurance_substring(\"acfasdafb\",\"a\") == (None,)\nassert     occurance_substring(\"acfasdafb\",\"acf\") == (None,)\nassert     occurance_substring(\"acfasdafb\",\"a\") == (1,2)\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert occurance_substring('atgctgactaagt', 'atg')==[(0, 4), (9, 10), (21, 24), (31, 36)]\nassert occurance_substring('atgctgactaagt', 'g')==[(0, 4), (9, 10), (21, 24), (31, 36)]\nassert occurance_substring('atgctgactaagt', 'a')==[(0, 4), (9, 10), (21, 24), (31, 36)]\nassert occurance_substring('atgctgactaagt', 't')==[(0, 4), (9, 10), (21, 24), (31, 36)]\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     occurance_substring('this is a string','i') == 1\nassert    occurance_substring('this is a string','is') == 2\nassert    occurance_substring('this is a string','string') == 4\nassert    occurance_substring('this is a string','hi') == None\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nodd_position([1,2,3,4,5,6,7,8,9])==True, 'odd_position failed'\nassert \nodd_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])==False, 'odd_position failed'\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n\ndef odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_list = []\n    for i in range(0,len(nums)):\n        if i % 2 == 0:\n            odd_list.append(nums[i])\n\n    return True if odd_list == odd_list[::-1] else False"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     odd_position([2,3,4,5,6,7,8,9]) == True, \\\n        \"Should return True for odd_position([2,3,4,5,6,7,8,9])\"\nassert     odd_position([1,2,3,4,5,6,7,8,9]) == False, \\\n        \"Should return False for odd_position([1,2,3,4,5,6,7,8,9])\"\nassert     odd_position([2,3,4,5,6,7,8]) == False, \\\n        \"Should return False for odd_position([2,3,4,5,6,7,8])\"\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nodd_position([1,2,3,4,5]) == False, \"wrong answer\"\nodd_position([5,4,3,2,1]) == True, \"wrong answer\"\nodd_position([-1,-3,-2,-4,-5]) == True, \"wrong answer\"\nodd_position([-1,2,3,4,5]) == False, \"wrong answer\"\nodd_position([0,-2,-4,-6]) == True, \"wrong answer\"\nodd_position([-2,4,6,8,10]) == False, \"wrong answer\"\nodd_position([1,2,3,4,5,6,7,8,9,10]) == False, \"wrong answer\"\nodd_position([-1,2,3,4,5,6,7,8,9,10]) == True, \"wrong answer\"\nodd_position([-2,4,6,8,10]) == True, \"wrong answer\"\nodd_position([1,2,3,4,5]) == True, \"wrong answer\"\nodd_position([]) == False, \"wrong answer\""
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nodd_position([3,4,1,2]) == True\nodd_position([3,4,1,2,6]) == True\nodd_position([3,4,1,2,6,7]) == False\nodd_position([1,2,3,4,5]) == False\nodd_position([]) == False\nodd_position([1,2,3,4,5,6]) == False\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     odd_position([2,3,5,6,7,9,10])== True, \"Should be True\"\nassert     odd_position([2,3,6,7,8,9,10])== True, \"Should be True\"\nassert     odd_position([2,3,4,5,6,7,8,9,10])== False, \"Should be False\"\nassert     odd_position([2,3,5,6,7,9,10])== True, \"Should be True\"\nassert odd_position([2,3,4,5,6,7,8,9,10,12,14])== True, \"Should be True\"\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nodd_position([1,4,9,16,25]) == False, \"Wrong answer\"\nassert \nodd_position([1,4,9,16,25,100]) == True, \"Wrong answer\"\nassert \nodd_position([1,4,9,16,25,100,1]) == False, \"Wrong answer\"\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_vowels(\"aaabbbccc\") == \"count vowels as their neighbors: 1,3,1,4,1,2\"\nassert     count_vowels(\"abcddeef\") == \"count vowels as their neighbors: 2,1,2,1,0,0\"\nassert     count_vowels(\"abccbbdeeeef\") == \"count vowels as their neighbors: 1,1,1,3,1,4,1,2,2,0\"\nassert     count_vowels(\"\") == \"count vowels as their neighbors: 0\"\nassert count_vowels(\"a\") == \"count vowels as their neighbors: 1\"\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_vowels('codewars') == 4\nassert     count_vowels('CODEWARS') == 4\nassert     count_vowels('codeWars') == 4\nassert     count_vowels('codewar') == 0\nassert     count_vowels('codewars') == 0\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_vowels(\"this is my test\") == 6, 'Test 2 failed'\nassert count_vowels(\"hello\") == 0, 'Test 3 failed'\nassert count_vowels(\"HeLlo\") == 4, 'Test 4 failed'\nassert count_vowels(\"hELLO\") == 5, 'Test 5 failed'\nassert count_vowels(\"hELLlO\") == 6, 'Test 6 failed'\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert count_vowels('loveleetcode') == 6\nassert count_vowels('radar') == 4\nassert count_vowels('y') == 1\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_vowels(\"this is a test\") == 3, \"Should be 3\"\nassert count_vowels(\"Aa is a test\") == 1, \"Should be 1\"\nassert count_vowels(\"Go hang a salami, I'm a lasagna hog.\") == 4, \"Should be 4\"\nassert count_vowels(\"Aa\") == 0, \"Should be 0\"\nassert count_vowels(\"\") == 0, \"Should be 0\"\nprint(\"Done! Go ahead and Check your code\")\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_vowels('abracadabra') == 5\nassert count_vowels('aabacba') == 2\n\n\ndef count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in 'aeiou' and test_str[i+1] in 'aeiou':\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_vowels('aeiou') == 3\nassert     count_vowels('apple') == 1\nassert     count_vowels('rnum') == 0\nassert     count_vowels('sxkd') == 0\n\nprint(f'The result is: {count_vowels(\"apple\")}')\nprint(f'The result is: {count_vowels(\"rnum\")}')\nprint(f'The result is: {count_vowels(\"sxkd\")}')"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_vowels('dog') == 'g1', 'dog'\nassert     count_vowels('dagga') == 'gg1', 'dagga'\nassert     count_vowels('a') == 'a0', 'a'\nassert     count_vowels('aa') == '2a', 'aa'\nassert     count_vowels('d') == 'd0', 'd'\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_vowels('Tuna') == {'a': 1, 'u': 1, 'n': 1}, f\"Wrong answer: {count_vowels('Tuna')}\"\nassert     count_vowels('Hello') == {'h': 1, 'e': 1, 'l': 2}, f\"Wrong answer: {count_vowels('Hello')}\"\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_sum([2,2,3,4,4,2,5,6,5,2,3]) == 10, 'First'\nassert     find_sum([2,2,2,2,2,2,2,2,2,2,2]) == 8, 'Second'\nassert     find_sum([2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_sum([1,2,2,3,5]) == 6, \"find_sum should return 6\"\nassert     find_sum([1,2,3,4,5]) == 0, \"find_sum should return 0\"\nassert     find_sum([1,1,2,2,3]) == 4, \"find_sum should return 4\"\nassert     find_sum([1,2,3,4,5,6,6]) == 6, \"find_sum should return 6\"\nassert     find_sum([]) == 0, \"find_sum should return 0\"\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert find_sum([1, 2, 3, 4, 5, 5, 6]) == 7, \"test failed\"\nassert find_sum([1, 2, 3, 4, 5]) == 6, \"test failed\"\nassert find_sum([1, 1]) == 2, \"test failed\"\nassert find_sum([1, 1, 2, 2, 3, 3]) == 6, \"test failed\"\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_sum([1,2,3,4,5,6,7,8,9,9]) == 45, \"Wrong output\"\nassert     find_sum([1,1,2,3,4,5,6,7,8,8]) == 9, \"Wrong output\"\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_sum([1,2,3,4,5,6]) == 10\nassert     find_sum([]) == 0\nassert     find_sum([1,2,3,4,5,6,6]) == 16\nassert     find_sum([1,1,1,1,1,1,1]) == 1\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_sum([1, 3, 4, 5, 3]) == 5, 'Should be 5'\nassert     find_sum([1, 3, 4, 2, 2, 2, 2, 2, 2, 2]) == 8, 'Should be 8'\nassert     find_sum([0, 2, 4, 2, 6, 5, 2, 2, 6, 8]) == 17, 'Should be 17'\nassert     find_sum([0, 2, 4, 2, 6, 5, 2, 2, 6, 8]) == 18, 'Should be 18'\nassert     find_sum([]) == 0, 'Should be 0'\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert \nassert \nassert \n\ndef find_sum_alt(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_sum([1,2,3,3]) == 4, \"Should be 4\"\nassert     find_sum([1,1,2,2]) == 3, \"Should be 3\"\nassert     find_sum([1,1,2,3,3]) == 4, \"Should be 4\"\n\n'''\nWrite a python function to find the count of non-repeated elements in a given list.\n'''\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_sum([2, 1, 3, 5, 4, 5, 5, 4, 2, 1]) == 15, 'find_sum failed'\nassert     find_sum([1, 2, 1, 1, 2, 3, 3, 2, 1]) == 6, 'find_sum failed'\nassert     find_sum([3, 3, 2, 1, 1, 2, 1, 3, 3]) == 6, 'find_sum failed'\nassert     find_sum([2, 1, 3, 5, 4, 5, 5, 4, 2, 1, 1, 2, 3, 2, 3, 2, 1]) == 15, 'find_sum failed'\nassert     find_sum([]) == 0, 'find_sum failed'\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     pack_consecutive_duplicates([1,2,3,1,3]) == [[1,2],[1,3],[3]]\nassert     pack_consecutive_duplicates([1,2,3,1,3,4,1]) == [[1,2],[1,3],[1,4],[3]]\nassert     pack_consecutive_duplicates([1,2,3,4,5]) == [[1,2,3,4],[4,5]]\nassert     pack_consecutive_duplicates([1,2,3,4,5,6]) == [[1,2,3],[4,5,6]]\nassert     pack_consecutive_duplicates([1,2,3,4,5,5]) == [[1,2,3],[4,5,5]]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     pack_consecutive_duplicates([\"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"c\", \"c\"]) == [\"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"c\", \"c\"]\nassert     pack_consecutive_duplicates([\"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"c\", \"c\"]) == [\"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"c\", \"c\"]\nassert     pack_consecutive_duplicates([\"a\", \"b\", \"b\", \"b\", \"c\", \"c\", \"c\"]) == [\"a\", \"b\", \"b\", \"b\", \"c\", \"c\", \"c\"]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     pack_consecutive_duplicates([1,2,3,4,5]) == [[1,2],[3,4],[5]]\nassert     pack_consecutive_duplicates([1,1,2,3,4,5]) == [[1,1],[2,3],[4,5]]\nassert     pack_consecutive_duplicates([1,1,1,1,2,3,4,5]) == [[1,1],[1,1],[2,3],[4,5]]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     pack_consecutive_duplicates([1, 2, 3, 2, 1, 2, 3, 4, 5]) == [[1, 2, 3],\n                                                                       [2, 1, 2],\n                                                                       [3, 2, 1],\n                                                                       [2, 3, 4, 5]]\n\nassert pack_consecutive_duplicates([2, 4, 6, 2, 4, 2, 6, 4, 2, 1]) == [[2, 4, 6],\n                                                                       [2, 4, 2],\n                                                                       [6, 2, 4, 2],\n                                                                       [2, 6, 4, 2],\n                                                                       [4, 2, 6, 2],\n                                                                       [2, 4, 2, 1]]\n\nassert pack_consecutive_duplicates([2, 3, 4, 2, 3, 4, 2]) == [[2, 3, 4],\n                                                                   [2, 3, 2],\n                                                                       [4, 2, 3, 2],\n                                                                       [2, 4, 2],\n                                                                       [3, 4, 2],\n                                                                       [2, 3, 4, 2]]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     pack_consecutive_duplicates([]) == []\nassert     pack_consecutive_duplicates([1,2,3,4]) == [[1,2,3], [4]]\nassert     pack_consecutive_duplicates([1,2,3,4,5,6,7,8]) == [[1,2,3], [4,5,6], [7,8]]\nassert     pack_consecutive_duplicates([1,2,3,4,5,6,7,8,9]) == [[1,2,3], [4,5,6], [7,8,9]]\nassert     pack_consecutive_duplicates([1,2,3,4,5,6,7,8,9,10]) == [[1,2,3,4], [5,6,7,8], [9,10]]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     pack_consecutive_duplicates([1, 2, 2, 3, 3, 4, 4, 5])    == [[1,2,2,3,3,4,4,5], [2,3,3,4,4,5]]\nassert     pack_consecutive_duplicates([1, 2, 3, 4, 5])    == [[1,2,3,4,5]]\nassert     pack_consecutive_duplicates([1, 2, 3, 3, 4, 4, 5])    == [[1,2,3,3,4,4,5]]\nassert     pack_consecutive_duplicates([1, 1, 2, 3, 3, 4, 4, 5])    == [[1,1,2,3,3,4,4,5]]\nassert     pack_consecutive_duplicates([])    == []\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert pack_consecutive_duplicates([]) == []\nassert pack_consecutive_duplicates([1]) == [[1]]\nassert pack_consecutive_duplicates([1, 1, 1]) == [[1, 1, 1]]\nassert pack_consecutive_duplicates([1, 2, 3, 4, 5, 5, 6, 6, 6]) == [[1, 2], [3, 4, 5], [6, 6]]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     pack_consecutive_duplicates([1, 2, 3, 3, 3, 3, 4, 5]) == [[1, 2, 3, 3, 3, 3], \n                                                                    [4, 5]]\nassert     pack_consecutive_duplicates([2, 1, 2, 1, 2, 1, 2, 1]) == [[2, 1, 2], \n                                                                        [1, 2, 1], \n                                                                        [2, 1, 2], \n                                                                        [1, 2, 1], \n                                                                        [2, 1, 2], \n                                                                        [1, 2, 1], \n                                                                        [2, 1, 2], \n                                                                        [1, 2, 1]]\nassert     pack_consecutive_duplicates([1, 1, 1, 1, 1, 1, 1, 1]) == [[1, 1, 1], \n                                                                        [1, 1, 1], \n                                                                        [1, 1, 1], \n                                                                        [1, 1, 1], \n                                                                        [1, 1, 1], \n                                                                        [1, 1, 1], \n                                                                        [1, 1, 1], \n                                                                        [1, 1, 1]]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     pack_consecutive_duplicates([1,2,3,4,5,5,4,5,6,7,8,9]) == [[1,2,3,4], [5,5,4,5], [6,7,8,9]]\nassert     pack_consecutive_duplicates([1,2,3,4,5,6,5,6,7,8,9]) == [[1,2,3,4], [5,6,5,6], [7,8,9]]\nassert     pack_consecutive_duplicates([1,2,3,4,5,5,4,5,6,7,8,9]) == [[1,2,3,4], [5,5,4,5], [6,7,8,9]]\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     unique_sublists([[],[],[[]]]) == {\n        []: 1,\n        [] : 1,\n        [[]]: 1,\n        [[],[]]: 1,\n        [[],[]]: 1,\n        [[],[]: 1,\n        [[],[],[]]: 1,\n        [[],[],[]]: 1,\n        [[],[],[],[]]: 1,\n        [[],[],[],[],[]]: 1,\n        [[],[],[],[],[],[]]: 1,\n        [[],[],[],[],[],[],[]]: 1\n    }, \"incorrect!\"\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     unique_sublists([1,1,2,3,4,4]) == {(1,1): 3, (2,3): 2, (4,4): 1}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     unique_sublists([[[1,2],[2,4],1], [[2,4],1], [[1,2,3,4,5],1], [[]],[[]],[]]) == {([[1,2],[2,4],1], 2), ([[2,4],1], 2), ([[1,2,3,4,5],1], 1), ([[],1], 1), ([[],1], 1)}\nassert     unique_sublists([[[1,2],[2,4],1], [[2,4],1], [[1,2,3,4,5],1], [[]],[[]],[]]) == {([[1,2],[2,4],1], 2), ([[2,4],1], 2), ([[1,2,3,4,5],1], 1)}\nassert     unique_sublists([[[1,2,3,4,5]],[[]],[[]],[[]],[[]],[[]]) == {([[1,2,3,4,5]], 5)}\nassert     unique_sublists([]) == {([], 0)}\nassert     unique_sublists([]) == {([], 0)}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     unique_sublists(['a','a','b','a','a','a','c','d','d','d']) == {('a','a'):2, ('b','a'):2, ('c','a'):1, ('d','a'):4}\n\n\ndef max_sublist_sum(list1):\n    '''\n    Write a function to find the largest sum of non-overlapping sublists.\n    '''\n    pass\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     unique_sublists([]) == {}\nassert     unique_sublists([[]]) == {():1}\nassert     unique_sublists([[]]) == {():1}\nassert     unique_sublists([[], []]) == {():2}\nassert     unique_sublists([[], []]) == {():2}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     unique_sublists([[1,2,3,4],\n                           [1,2,3,4,5],\n                           [1,2,3,4,5],\n                           [1,2,3,4,5],\n                           [1,2,3,4,5],\n                           [1,2,3,4,5]]) == { (1,2,3,4,5) : 3, (1,2,3,4,5) : 2, (1,2,3,4) : 1, (1,2,3,4) : 1, (1,2,3) : 1, (1,2,3) : 1, (1,2) : 1 }\nassert     unique_sublists([[1,2],\n                           [1,2],\n                           [1,2],\n                           [1,2],\n                           [1,2]]) == { (1,2) : 4 }\nassert     unique_sublists([[1,2],\n                           [1,2],\n                           [1,2],\n                           [1,2],\n                           [1,2],\n                           [1,2],\n                           [1,2]]) == { (1,2) : 5 }\nassert     unique_sublists([[1,2],\n                           [1,2],\n                           [1,2],\n                           [1,2],\n                           [1,2],\n                           [1,2],\n                           [1,2],\n                           [1,2]]) == { (1,2) : 5 }\n\nprint('All tests passed'"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     unique_sublists([1, 1, 2, 2, 3, 3, 4, 5, 5, 6]) == {(1, 2), (3, 3), (4, 1), (5, 2), (6, 1)}\nassert     unique_sublists([1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 7, 7, 7]) == {(1, 2), (3, 3), (4, 1), (5, 2), (6, 1)}\n\ndef unique_sublists2(list1):\n    '''\n    Given a list of strings, create a function that returns a dictionary. The keys are the list, and the values are the number of times each item appears in the list.\n    '''\n    pass\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef unique_sublists2(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    pass\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     unique_sublists([[1,2,3],[3],[1,2,4,5,6,7]]) == {\n                (1,2,3,4,5,6,7): 1, \n                (1,2,4,5,6,7): 1, \n                (1,2,4,5,6): 1\n            }\nassert     unique_sublists([[1,2,3,4,5,6,7,8,9]]) == {\n                (1,2,3,4,5,6,7,8,9): 1\n            }\nassert     unique_sublists([[1,2,3,4,5,6,7,8,9],\n                    [1,2,3,4,5,6,7],\n                    [1,2,3,4,5,6,7,8,9],\n                    [1,2,3,4,5,6,7,8],\n                    [1,2,3,4,5,6,7,8,9]]) == {\n                (1,2,3,4,5,6,7,8,9): 3\n            }\nassert     unique_sublists([[1,2,3,4,5,6,7,8,9],\n                    [1,2,3,4,5,6,7],\n                    [1,2,3,4,5,6,7,8,9],\n                    [1,2,3,4,5,6,7,8],\n                    [1,2,3,4,5,6,7,8,9]]) == {\n                (1,2,3,4,5,6,7,8,9): 2\n            }\nassert     unique_sublists([[1,2,3,4,5,6,7,8,9]]) == {\n                (1,2,3,4,5,6,7,8,9): 1\n            }\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     unique_sublists([1, 2, 2]) == {(1,): 1, (2,): 2}\nassert     unique_sublists([1, 2, 1]) == {(1,): 2, (2,): 1}\nassert     unique_sublists([1, 1, 1]) == {(1,): 3}\n\ndef unique_sublists_2(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    pass\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_combinations([(0, 1), (3, 5), (2, 4)]) == [(0, 1, 2, 3, 4)]\nassert     find_combinations([(0, 1), (3, 5), (2, 4)]) == [(0, 1, 2, 3, 4), (0, 1, 3, 4, 5)]\nassert     find_combinations([(0, 1), (3, 5), (2, 4)]) == [(0, 1, 2, 3, 4), (0, 1, 3, 4, 5), (0, 1, 2, 3, 5), (0, 1, 2, 4, 5), (0, 1, 3, 4, 5), (0, 2, 3, 4, 5), (0, 2, 4, 5), (0, 3, 4, 5)]\nassert     find_combinations([(0, 1), (3, 5), (2, 4)]) == [(0, 1, 2, 3, 4), (0, 1, 3, 4, 5), (0, 1, 2, 4, 5), (0, 1, 3, 4, 5), (0, 2, 3, 4, 5), (0, 2, 4, 5), (0, 3, 4, 5), (0, 3, 5), (0, 4, 5)]\nassert     find_combinations([(0, 1), (3, 5), (2, 4)]) == []\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_combinations(\n    [\n    (0, 1),\n    (2, 3),\n    (4, 5)\n    ]) ==     [\n    (0, 2),\n    (0, 4),\n    (2, 3),\n    (2, 5),\n    (4, 5)\n    ]\n\ndef find_subsets(test_list):\n    '''\n    Write a function to find all subset of a list with same length. https://www.geeksforgeeks.org/find-all-subsets-in-a-list/\n    '''\n    pass\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_combinations([(1,2,3,4),(5,6,7,8),(9,10,11,12)]) == [((1, 2, 3, 4), (5, 6, 7, 8))]\nassert     find_combinations([(1,2,3,4),(5,6,7,8),(9,10,11,12),(13,14,15,16)]) == [((1, 2, 3, 4), (5, 6, 7, 8)), ((9, 10, 11, 12), (13, 14, 15, 16))]\nassert     find_combinations([(1,2,3,4),(5,6,7,8),(9,10,11,12),(13,14,15,16),(17,18,19,20)]) == []\nassert     find_combinations([(1,2,3,4),(5,6,7,8),(9,10,11,12),(13,14,15,16),(17,18,19,20),(21,22,23,24),(25,26,27,28),(29,30,31,32),(33,34,35,36),(37,38,39,40),(41,42,43,44),(45,46,47,48),(49,50,51,52),(53,54,55,56),(57,58,59,60),(61,62,63,64),(65,66,67,68),(69,70,71,72),(73,74,75,76),(77,78,79,80),(81,82,83,84),(85,86,87,88),(89,90,91,92),(93,94,95,96),(97,98,99,100),(101,102,103,104),(105,106,107,108),(109,110,111,112),(113,114,115,116),(117,118,119,120),(121,122,123,124),(125,126,127,128),(129,130,131,132),(133,134,135,136),(137,138,139,140),(141,142,143,144),(145,146,147,148),(149,150,151,152),(153,154,155,156),(157,158,159,160),(161,162,163,164),(165,166,167,168),(169,170,171,172),(173,174,175,176),(177,178,179,180),(181,182,183,184),(185,186,187,188),(189,190,191,192),(193,194,195,196),(197,198,199,200),(201,202,203,204),(205,206,207,208),(209,210,211,212),(213,214,215,216),(217,218,219,220),(221,222,223,224),(225,226,227,228),(229,230,231,232),(233,234,235,236),(237,238,239,240),(241,242,243,244),(245,246,247,248),(249,250,251,252),(253,254,255,256),(257,258,259,260),(261,262,263,264),(265,266,267,268),(269,270,271,272),(273,274,275,276),(277,278,279,280),(281,282,283,284),(285,286,287,288),(289,290,291,292),(293,294,295,296),(297,298,299,300),(301,302,303,304),(305,306,307,308),(309,310,311,312),(313,314,315,316),(317,318,319,320),(321,322,323,324),(325,326,327,328),(329,330,331,332),(333,334,335,336),(337,338,339,340),(341,342,343,344),(345,346,347,348),(349,350,351,352),(353,354,355,356),(357,358,359,360),(361,362,363,364),(365,366,367,368),(369,370,371,372),(373,374,375,376),(377,378,379,380),(381,382,383,384),(385,386,387,388),(389,390,391,392),(393,394,395,396),(397,398,399,400),(401,402,403,404),(405,406,407,408),(409,410,411,412),(413,414,415,416),(417,418,419,420),(421,422,423,424),(425,426,427,428),(429,430,431,432),(433,434,435,436),(437,438,439,440),(441,442,443,444),(445,446,447,448),(449,450,451,452),(453,454,455,456),(457,458,459,460),(461,462,463,464),(465,466,467,468),(469,470,471,472),(473,474,475,476),(477,478,479,480),(481,482,483,484),(485,486,487,488),(489,490,491,492),(493,494,495,496),(497,498,499,500),(501,502,503,504),(505,506,507,508),(509,510,511,512),(513,514,515,516),(517,518,519,520),(521,522,523,524),(525,526,527,528),(529,530,531,532),(533,534,535,536),(537,538,539,540),(541,542,543,544),(545,546,547,548),(549,550,551,552),(553,554,555,556),(557,558,559,560),(561,562,563,564),(565,566,567,568),(569,570,571,572),(573,574,575,576),(577,578,579,580),(581,582,583,584),(585,586,587,588),(589,590,591,592),(593,594,595,596),(597,598,599,600),(601,602,603,604),(605,606,607,608),(609,610,611,612),(613,614,615,616),(617,618,619,620),(621,622,623,624),(625,626,627,628),(629,630,631,632),(633,634,635,636),(637,638,639,640),(641,642,643,644),(645,646,647,648),(649,650,651,652),(653,654,655,656),(657,658,659,660),(661,662,663,664),(665,666,667,668),(669,670,671,672),(673,674,675,676),(677,678,679,680),(681,682,683,684),(685,686,687,688),(689,690,691,692),(693,694,695,696),(697,698,699,700),(701,702,703,704),(705,706,707,708),(709,710,711,712),(713,714,715,716),(717,718,719,720),(721,722,723,724),(725,726,727,728),(729,730,731,732),(733,734,735,736),(737,738,739,740),(741,742,743,744),(745,746,747,748),(749,750,751,752),(753,75"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nfind_combinations([(1,2),(3,4),(5,6)]) == [(1,2),(3,4),(5,6)]\nfind_combinations([(1,2),(1,3),(2,3),(3,4),(5,6),(7,8)]) == [(1,2,3),(2,3,4),(5,6)]\nfind_combinations([(1,2,3),(1,2,4),(1,2,5),(2,3,4),(2,3,5),(2,3,6),(3,4,5),(3,4,6),(3,5,6)]) == [(1,2,3,4,5,6)]\nfind_combinations([(1,2),(1,3),(2,3),(3,4),(5,6),(7,8)]) == [(1,2,3),(1,3,4),(1,5,6),(2,3,4),(2,5,6),(3,4,6)]\nfind_combinations([(1,2),(1,3),(2,3),(3,4),(5,6),(7,8)]) == [(1,2,3),(1,2,4),(1,2,5),(1,3,4),(1,3,5),(1,3,6),(2,3,4),(2,3,5),(2,3,6),(3,4,5),(3,4,6),(3,5,6)]\n\nprint('All test cases passed')"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_combinations([(0, 2), (1, 1), (1, 1)]) == [(0, 2), (1, 1), (1, 1)]\nassert     find_combinations([(0, 2), (1, 1), (1, 1)], set()) == set()\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_combinations([('a', 1), ('b', 2)]) == [('a', 1), ('b', 2)]\nassert     find_combinations([('a', 1), ('b', 2)]) == [('a', 1), ('b', 2)]\n\nassert     find_combinations([('a', 1), ('b', 2), ('c', 3)]) == [(1, 'a'), (1, 'b'), (1, 'c'), (2, 'a'), (2, 'b'), (2, 'c'), (3, 'a'), (3, 'b'), (3, 'c')]\nassert     find_combinations([('a', 1), ('b', 2), ('c', 3)]) == [(1, 'a'), (1, 'b'), (1, 'c'), (2, 'a'), (2, 'b'), (2, 'c'), (3, 'a'), (3, 'b'), (3, 'c')]\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    find_combinations([1,2,3]) == [(1,2,3)]\n    find_combinations([1,2,3,4,5]) == [(1,2,3), (1,2,5), (1,4,5), (2,3,4), (2,3,5), (2,4,5), (3,4,5)]\n    find_combinations([1,2,3,4,5,6]) == [(1,2,3,4), (1,2,3,5), (1,2,3,6), (1,2,4,5), (1,2,4,6), (1,2,5,6), (1,3,4,5), (1,3,4,6), (1,3,5,6), (1,4,5,6), (2,3,4,5), (2,3,4,6), (2,3,5,6), (2,4,5,6), (3,4,5,6)]\n    find_combinations([1,2,3,4,5,6,7]) == [(1,2,3,4,5,6), (1,2,3,4,6,7), (1,2,3,5,6,7), (1,2,3,5,7,7), (1,2,3,6,7,7), (1,2,3,6,7,8), (1,2,3,7,7,8), (1,2,3,7,8,8), (1,2,3,6,7,8), (1,2,4,5,6,7), (1,2,4,5,6,8), (1,2,4,5,7,8), (1,2,4,5,7,9), (1,2,4,6,7,9), (1,2,4,6,7,8), (1,2,4,7,7,8), (1,2,4,7,8,8), (1,2,4,6,7,8), (1,2,5,6,7,8), (1,2,5,6,7,9), (1,2,5,6,7,10), (1,2,5,6,8,9), (1,2,5,6,8,10), (1,2,5,6,9,10), (1,2,5,7,8,9), (1,2,5,7,8,10), (1,2,5,7,9,10), (1,2,5,8,9,10), (1,2,6,7,8,9), (1,2,6,7,8,10), (1,2,6,7,9,10), (1,2,6,8,9,10), (1,2,7,8,9,10)]\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_combinations([[1,2,3],[4,5,6],[7,8,9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nassert     find_combinations([[1,2,3,4],[4,5,6,7],[8,9,10,11]]) == [[1, 2, 3, 4], [4, 5, 6, 7], [8, 9, 10, 11]]\n\ndef find_permutations(test_list):\n    '''\n    Write a function to find all permutations of given array. \n    https://www.geeksforgeeks.org/find-all-permutations-sub-array-of-size-k-that-sums-up-to-n/\n    '''\n    pass\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_combinations([(1, 2, 3), (2, 3, 4), (2, 3, 4), (3, 4, 5)]) == [(1, 2, 3, 4), (1, 2, 3, 5), (1, 2, 4, 5), (1, 3, 4, 5), (2, 3, 4, 5)]\nassert find_combinations([(1, 2, 3), (2, 3, 4), (2, 3, 4), (3, 4, 5)]) == [(1, 2, 3, 4), (1, 2, 3, 5), (1, 2, 4, 5), (1, 3, 4, 5), (2, 3, 4, 5)]\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_combinations([(1, 3), (2, 4)]) == [(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]\nassert find_combinations([(1, 3), (2, 4), (3, 4)]) == []\nassert find_combinations([(1, 3), (2, 4), (3, 4)]) == [(1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]\nassert find_combinations([(1, 2), (3, 4)]) == [(1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]\nassert find_combinations([(1, 2), (3, 4), (5, 6)]) == [(1, 3), (1, 4), (1, 5), (1, 6), (2, 3), (2, 4), (2, 5), (2, 6), (3, 4), (3, 5), (3, 6), (4, 5), (4, 6), (5, 6)]\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_divisors(1) == 0\nassert     count_divisors(2) == 1\nassert     count_divisors(3) == 2\nassert     count_divisors(4) == 1\nassert     count_divisors(5) == 2\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    count_divisors(0) == 1\n    count_divisors(1) == 0\n    count_divisors(4) == 0\n    count_divisors(10) == 2\n    count_divisors(15) == 5\n\n\ndef count_divisors_less(n) : \n    '''\n    Write a python function to check whether the count of divisors is less than the given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef count_divisors_simple(n):\n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    return len([i for i in range(1,n) if n % i == 0])\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ncount_divisors(7) == 2\n\ncount_divisors(5) == 2\n\ncount_divisors(3) == 1\n\ncount_divisors(2) == 1\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert count_divisors(2) == 0\nassert count_divisors(5) == 2\nassert count_divisors(6) == 3\nassert count_divisors(7) == 2\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ncount_divisors(1) == 0\ncount_divisors(2) == 1\ncount_divisors(3) == 1\ncount_divisors(4) == 2\ncount_divisors(5) == 2\ncount_divisors(6) == 3\ncount_divisors(8) == 3\ncount_divisors(13) == 4\ncount_divisors(24) == 4\ncount_divisors(25) == 5\ncount_divisors(30) == 5\ncount_divisors(36) == 6\ncount_divisors(40) == 6\ncount_divisors(43) == 7\ncount_divisors(44) == 7\ncount_divisors(45) == 7\ncount_divisors(46) == 7\ncount_divisors(47) == 7\ncount_divisors(48) == 7\ncount_divisors(49) == 7\ncount_divisors(50) == 7\ncount_divisors(51) == 7\ncount_divisors(52) == 7\ncount_divisors(53) == 7\ncount_divisors(54) == 7\ncount_divisors(55) == 7\ncount_divisors(56) == 7\ncount_divisors(57) == 7\ncount_divisors(58) == 7\ncount_divisors(59) == 7\ncount_divisors(60) == 7\ncount_divisors(61) == 7\ncount_divisors(62) == 7\ncount_divisors(63) == 7\ncount_divisors(64) == 7\ncount_divisors(65) == 7\ncount_divisors(66) == 7\ncount_divisors(67) == 7\ncount_divisors(68) == 7\ncount_divisors(69) == 7\ncount_divisors(70) == 7\ncount_divisors(71) == 7\ncount_divisors(72) == 7\ncount_divisors(73) == 7\ncount_divisors(74) == 7\ncount_divisors(75) == 7\ncount_divisors(76) == 7\ncount_divisors(77) == 7\ncount_divisors(78) == 7\ncount_divisors(79) == 7\ncount_divisors(80) == 7\ncount_divisors(81) == 7\ncount_divisors(82) == 7\ncount_divisors(83) == 7\ncount_divisors(84) == 7\ncount_divisors(85) == 7\ncount_divisors(86) == 7\ncount_divisors(87) == 7\ncount_divisors(88) == 7\ncount_divisors(89) == 7\ncount_divisors(90) == 7\ncount_divisors(91) == 7\ncount_divisors(92) == 7\ncount_divisors(93) == 7\ncount_divisors(94) == 7\ncount_divisors(95) == 7\ncount_divisors(96) == 7\ncount_divisors(97) == 7\ncount_divisors(98) == 7\ncount_divisors(99) == 7\ncount_divisors(100) == 7\ncount_divisors(101) == 7\ncount_divisors(102) == 7\ncount_divisors(103) == 7\ncount_divisors(104) == 7\ncount_divisors(105) == 7\ncount_divisors(106) == 7\ncount_divisors(107) == 7\ncount_divisors(108) == 7\ncount_divisors(109) == 7\ncount_divisors(110) == 7\ncount_divisors(111) == 7\ncount_divisors(112) == 7\ncount_divisors(113) == 7\ncount_divisors(114) == 7\ncount_divisors(115) == 7\ncount_divisors(116) == 7\ncount_divisors(117) == 7\ncount_divisors(118) == 7\ncount_divisors(119) == 7\ncount_divisors(120) == 7\ncount_divisors(121) == 7\ncount_divisors(122) == 7\ncount_divisors(123) == 7\ncount_divisors(124) == 7\ncount_divisors(125) == 7\ncount_divisors(126) == 7\ncount_divisors(127) == 7\ncount_divisors(128) == 7\ncount_divisors(129) == 7\ncount_divisors(130) == 7\ncount_divisors(131) == 7\ncount_divisors(132) == 7\ncount_divisors(133) == 7\ncount_divisors(134) == 7\ncount_divisors(135) == 7\ncount_divisors(136) == 7\ncount_divisors(137) == 7\ncount_divisors(138) == 7\ncount_divisors(139) == 7\ncount_divisors(140) == 7\ncount_divisors(141) == 7\ncount_divisors(142) == 7\ncount_divisors(143) == 7\ncount_divisors(144) == 7\ncount_divisors(145) == 7\ncount_divisors(146) == 7\ncount_divisors(147) == 7\ncount_divisors(148) == 7\ncount_divisors(149) == 7\ncount_divisors(150) == 7\ncount_divisors(151) == 7\ncount_divisors(152) == 7\ncount_divisors(153) == 7\ncount_divisors(154) == 7\ncount_divisors(155) == 7\ncount_divisors(156) == 7\ncount_divisors(157) == 7\ncount_divisors(158) == 7\ncount_divisors(159) == 7\ncount_divisors(160) == 7\ncount_divisors(161) == 7\ncount_divisors(162) == 7\ncount_divisors(163) == 7\ncount_divisors(164) == 7\ncount_divisors(165) == 7\ncount_divisors(166) == 7\ncount_divisors(167) == 7\ncount_divisors(168) == 7\ncount_divisors(169) == 7\ncount_divisors(170) == 7\ncount_divisors(171) == 7\ncount_divisors(172) == 7\ncount_divisors(173) == 7\ncount_divisors(174) == 7\ncount_divisors(175) == 7\ncount_divisors(176) == 7\ncount_divisors(177) == 7\ncount_divisors(178) == 7\ncount_divisors(179) == 7\ncount_divisors(180) == 7\ncount_divisors(181) == 7\ncount_divisors(182) == 7\ncount_divisors(183) == 7\ncount_divisors(184) == 7\ncount_divisors(185) == 7\ncount_divisors(186) == 7\ncount_divisors(187) == 7\ncount_divisors(188) == 7\ncount_divisors(189) == 7\ncount_divisors(190) == 7\ncount_divisors(191) == 7\ncount_divisors(192) == 7\ncount_divisors(193) == 7\ncount_divisors(194) == 7\ncount_divisors(195) == 7\ncount_divisors(196) == 7\ncount_divisors(197) == 7\ncount_divisors(198) == 7\ncount_divisors(199) == 7\ncount_divisors(200) == 7\ncount_divisors(201) == 7\ncount_divisors(202) == 7\ncount_divisors(203) == 7\ncount_divisors(204) == 7\ncount_divisors(205) == 7\ncount_divisors(206) == 7\ncount_divisors(207) == 7"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef count_divisors_2(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert count_divisors(2) == 1\nassert count_divisors(3) == 1\nassert count_divisors(4) == 2\nassert count_divisors(5) == 2\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef prime_factors(n):\n    '''\n    Write a python function to find the prime factors of a number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-31.php\n    '''\n    pass\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef even_length_sum(arr):\n    '''\n    Write a python function to find the sum of all even length subarrays. https://www.geeksforgeeks.org/sum-of-all-even-length-subarrays/\n    '''\n    pass\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     odd_length_sum([1, 3, 9, 7, 2, 8]) == 5,'return 5.'\nassert     odd_length_sum([5, 5, 5]) == 5,'return 5.'\nassert     odd_length_sum([1, 3, 9, 7, 2, 8]) == 5,'return 5.'\nassert     odd_length_sum([5, 5, 5]) == 5,'return 5.'\nassert     odd_length_sum([1, 1, 1, 1, 1, 1]) == 9,'return 9.'\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef all_odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    pass\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    count = 0\n    odd = 0\n    for i in range(len(arr)):\n        if i%2 == 0:\n            continue\n        count += arr[i]\n        odd += arr[i]\n    return count,odd"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n    odd_sum = 0\n\n    for i in range(n):\n        if i % 2 == 1:\n            odd_sum += arr[i]\n\n    return odd_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     odd_length_sum([10,20,10]) == 70, \"Result does not match expected result.\"\nassert     odd_length_sum([10,20,10,1,2,3,4,5,6,7]) == 90, \"Result does not match expected result.\"\nassert     odd_length_sum([10,20,10,1,2,3,4,5,6,7,8,9]) == 90, \"Result does not match expected result.\"\nassert     odd_length_sum([]) == 0, \"Result does not match expected result.\"\nassert     odd_length_sum([0]) == 0, \"Result does not match expected result.\"\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     odd_length_sum(arr) == expected_output\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     odd_length_sum([1,2,3,4,5]) == 7, \"Should return 7\"\nassert odd_length_sum([1,2,3,4,5,6,7]) == 7, \"Should return 7\"\nassert odd_length_sum([1,2,3,4,5,6,7,8]) == 0, \"Should return 0\"\nassert odd_length_sum([1,2,3,4,5,6,7,8,9]) == 21, \"Should return 21\"\nassert odd_length_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 168, \"Should return 168\"\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\narr = list(map(int, '1 2 3 4 5 6 7 8 9 10'.split()))"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    arr = [1, 2, 3, 4]\n    print(odd_length_sum(arr))\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert rgb_to_hsv(0,0,0) == (0,0,0)\nassert rgb_to_hsv(0,1,1) == (60,1,1)\nassert rgb_to_hsv(1,0,1) == (120,1,1)\nassert rgb_to_hsv(1,0.5,0.5) == (120,1,1)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef hsv_to_rgb(h, s, v):\n    '''\n    Write a function to convert hsv color to rgb color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    pass\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nimport unittest\nclass Test(unittest.TestCase):\n    '''\n    Write a test case for rgb_to_hsv function.\n    '''\n    def test_rgb_to_hsv(self):\n        pass\n\nif __name__ == '__main__':\n    unittest.main("
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     rgb_to_hsv(1, 2, 3) ==  (57.2955, 76.3814, 100.0)\nassert     rgb_to_hsv(255, 255, 255) ==  (255, 255, 255)\nassert     rgb_to_hsv(0, 255, 255) ==  (0, 255, 255)\nassert     rgb_to_hsv(1, 255, 255) ==  (60.0, 255, 255)\nassert     rgb_to_hsv(1, 0, 0) ==  (60.0, 0.0, 0.0)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nrgb_to_hsv(0, 0, 0) == (0, 0, 0)\nassert rgb_to_hsv(255, 255, 255) == (0, 0, 0)\nassert rgb_to_hsv(255, 0, 0) == (0, 0, 0)\nassert rgb_to_hsv(0, 255, 0) == (0, 0, 0)\nassert rgb_to_hsv(0, 0, 255) == (0, 0, 0)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef hsv_to_rgb(h, s, v):\n    '''\n    Write a function to convert hsv color to rgb color. https://www.geeksforgeeks.org/program-convert-hsv-color-model-to-rgb-color-model/\n    '''\n    pass\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     mul_even_odd([1,2,3,4,5]) == 120\nassert     mul_even_odd([2,3,4,5]) == 30\nassert     mul_even_odd([1,3,5,7,9]) == 180\nassert     mul_even_odd([1,3,5]) == 60\nassert     mul_even_odd([4,3,5,7,9]) == 360\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     mul_even_odd([1,2,3,4,5,6,7]) == 24, \"1*2*3*4*5*6*7\"\nassert mul_even_odd([1,2,3,4,5,6,7,8]) == 0, \"1*2*3*4*5*6*7\"\n\ndef sum_string(s1, s2):\n    '''\n    Write a Python program to sum string length.\n    '''\n    pass\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     mul_even_odd([-2, -4, 0, 3, 6]) == -6\nassert     mul_even_odd([-1, -2, -3, -4]) == -2\nassert     mul_even_odd([]) == 1\nassert     mul_even_odd([0]) == 0\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tuple_str_int(('1', '2', '3', '4')) == (1, 2, 3, 4)\nassert     tuple_str_int(('1', '0', '0', '0')) == (1, 0, 0, 0)\nassert     tuple_str_int(('1', '2', '0', '0')) == (1, 2, 0, 0)\nassert     tuple_str_int(('1', '2', '3', '4')) == (1, 2, 3, 4)\nassert     tuple_str_int(('1', '2', '0', '1')) == (1, 2, 0, 1)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_str_int(\"(1,2,3)\") == (1,2,3), 'Wrong output'\nassert tuple_str_int(\"1,2,3\") == (1,2,3), 'Wrong output'\nassert tuple_str_int(\"1,2,3,\") == (1,2,3), 'Wrong output'\nassert tuple_str_int(\",1,2,3\") == (1,2,3), 'Wrong output'\nassert tuple_str_int(\",1,2,3,4\") == (1,2,3,4), 'Wrong output'\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_str_int(\"'(1,2)', '(3,4)'\"    ) == (1, 2, 3, 4)\nassert     tuple_str_int(\"'(1,)', '(2,3,4)'\") == (1, )\nassert     tuple_str_int(\"'(1,2,3)'\"    ) == (1, 2, 3)\nassert     tuple_str_int(\"'(1)'\") == (1)\nassert     tuple_str_int(\"'((1,2,3)'\") == (1, 2, 3)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tuple_str_int(\"()\") == (0,0)\nassert     tuple_str_int(\"(2,3)\") == (2,3)\nassert     tuple_str_int(\"(2, )\") == (2,)\nassert     tuple_str_int(\"(2, 3, 4)\") == (2, 3, 4)\nassert     tuple_str_int(\"(2,3,4)\") == (2,3,4)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tuple_str_int('(1,2,3)') == (1,2,3)\nassert     tuple_str_int('(1, 2,3,4)') == (1, 2, 3, 4)\nassert     tuple_str_int('(1, 2, 3, 4)') == (1, 2, 3, 4)\nassert     tuple_str_int('(1, 2,3,4)') == (1, 2, 3, 4)\nassert     tuple_str_int('(1, 2, 3, 4)') == (1, 2, 3, 4)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     (\n    (1, 2, 3),\n    (\"a\", \"b\", \"c\"),\n    (\n        (1, 2, 3),\n        (\"a\", \"b\", \"c\"),\n        (1.0, 2.0, 3.0)\n    )\n) == tuple_str_int(\n    (\n        (1, 2, 3),\n        (\"a\", \"b\", \"c\"),\n        (1.0, 2.0, 3.0)\n    )\n)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tuple_str_int('(1,2,3)') == (1,2,3)\nassert     tuple_str_int('(1,2)') == (1,2)\nassert     tuple_str_int('(1,2,3)') == (1,2,3)\nassert     tuple_str_int('(1)') == (1,)\nassert     tuple_str_int('()') == ()\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tuple_str_int('(1, 2, 3)') == (1, 2, 3)\nassert tuple_str_int('(4, 5, 6)') == (4, 5, 6)\nassert tuple_str_int('(7, 8, 9)') == (7, 8, 9)\nassert tuple_str_int('(10, )') == (10,)\nassert tuple_str_int('( )') == ()\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tuple_str_int(\"(1,2,3)\") == (1,2,3)\nassert     tuple_str_int(\"(1,2,3)\") == (1,2,3)\nassert     tuple_str_int(\"(1,2,3)\") == (1,2,3)\nassert     tuple_str_int(\"(1,2,3)\") == (1,2,3)\nassert     tuple_str_int(\"(1,2,3)\") == (1,2,3)\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(right_insertion([2, 3, 4, 5], 5)) # return 3\nprint(right_insertion([2, 3, 4, 5], -1)) # return 0\nprint(right_insertion([1, 2, 3, 4, 5], 2)) # return 1\nprint(right_insertion([1, 2, 3, 4, 5], 2.5)) # return 2\nprint(right_insertion([1, 2, 3, 4, 5], 2.6)) # return 3\nprint(right_insertion([1, 2, 3, 4, 5], 6)) # return 4\nprint(right_insertion([1, 2, 3, 4, 5], 6.1)) # return 5\nprint(right_insertion([1, 2, 3, 4, 5], 6.2)) # return 5\nprint(right_insertion([1, 2, 3, 4, 5], -1)) # return 0\nprint(right_insertion([1, 2, 3, 4, 5], -2)) # return 1\nprint(right_insertion([1, 2, 3, 4, 5], -3)) # return 2\nprint(right_insertion([1, 2, 3, 4, 5], -4)) # return 2\nprint(right_insertion([1, 2, 3, 4, 5], -5)) # return 0\nprint(right_insertion([1, 2, 3, 4, 5], -6)) # return 0\nprint(right_insertion([1, 2, 3, 4, 5], -7)) # return 0\nprint(right_insertion([1, 2, 3, 4, 5], -8)) # return 0\nprint(right_insertion([1, 2, 3, 4, 5], -9)) # return 0\nprint(right_insertion([1, 2, 3, 4, 5], -10)) # return -1\nprint(right_insertion([1, 2, 3, 4, 5], -11)) # return -2\nprint(right_insertion([1, 2, 3, 4, 5], -12)) # return -3\nprint(right_insertion([1, 2, 3, 4, 5], -13)) # return -4\nprint(right_insertion([1, 2, 3, 4, 5], -14)) # return -5\nprint(right_insertion([1, 2, 3, 4, 5], -15)) # return -6\nprint(right_insertion([1, 2, 3, 4, 5], -16)) # return -7\nprint(right_insertion([1, 2, 3, 4, 5], -17)) # return -8\nprint(right_insertion([1, 2, 3, 4, 5], -18)) # return -9\nprint(right_insertion([1, 2, 3, 4, 5], -19)) # return -10\nprint(right_insertion([1, 2, 3, 4, 5], -20)) # return -11\nprint(right_insertion([1, 2, 3, 4, 5], -21)) # return -12\nprint(right_insertion([1, 2, 3, 4, 5], -22)) # return -13\nprint(right_insertion([1, 2, 3, 4, 5], -23)) # return -14\nprint(right_insertion([1, 2, 3, 4, 5], -24)) # return -15\nprint(right_insertion([1, 2, 3, 4, 5], -25)) # return -16\nprint(right_insertion([1, 2, 3, 4, 5], -26)) # return -17\nprint(right_insertion([1, 2, 3, 4, 5], -27)) # return -18\nprint(right_insertion([1, 2, 3, 4, 5], -28)) # return -19\nprint(right_insertion([1, 2, 3, 4, 5], -29)) # return -20\nprint(right_insertion([1, 2, 3, 4, 5], -30)) # return -21\nprint(right_insertion([1, 2, 3, 4, 5], -31)) # return -22\nprint(right_insertion([1, 2, 3, 4, 5], -32)) # return -23\nprint(right_insertion([1, 2, 3, 4, 5], -33)) # return -24\nprint(right_insertion([1, 2, 3, 4, 5], -34)) # return -25\nprint(right_insertion([1, 2, 3, 4, 5], -35)) # return -26\nprint(right_insertion([1, 2, 3, 4, 5], -36)) # return -27\nprint(right_insertion([1, 2, 3, 4, 5], -37)) # return -28\nprint(right_insertion([1, 2, 3, 4, 5], -38)) # return -29\nprint(right_insertion([1, 2, 3, 4, 5], -39)) # return -30\nprint(right_insertion([1, 2, 3, 4, 5], -40)) # return -31\nprint(right_insertion([1, 2, 3, 4, 5], -41)) # return -32\nprint(right_insertion([1, 2, 3, 4, 5], -42)) # return -33\nprint(right_insertion([1, 2, 3, 4, 5], -43)) # return -34\nprint(right_insertion([1, 2, 3, 4, 5], -44)) # return -35\nprint(right_insertion([1, 2, 3, 4, 5], -45)) # return -36\nprint(right_insertion([1, 2, 3, 4, 5], -46)) # return -37\nprint(right_insertion([1, 2, 3, 4, 5], -47)) # return -38\nprint(right_insertion([1, 2, 3, 4, 5], -48)) # return -39\nprint(right_insertion([1, 2, 3, 4, 5], -49)) # return -40\nprint(right_insertion([1, 2, 3, 4, 5], -50)) # return -41\nprint(right_insertion([1, 2, 3, 4, 5], -51)) # return -42\nprint(right_insertion([1, 2, 3, 4, 5], -52)) # return -43\nprint(right_insertion([1, 2, 3, 4, 5], -53)) # return -44\nprint(right_insertion([1, 2, 3, 4, 5], -54)) # return -45\nprint(right_insertion([1, 2, 3, 4, 5], -55)) # return -46\nprint(right_insertion([1, 2, 3, 4, 5], -56)) # return -47\nprint(right_insertion([1, 2, 3, 4, 5], -57)) # return -48\nprint(right_insertion([1, 2, 3, 4, 5], -58)) # return -49\nprint(right_insertion([1, 2, 3, 4, 5], -59)) # return -50\nprint(right_insertion([1, 2, 3, 4, 5], -60)) # return -51\nprint(right_insertion([1, 2, 3, 4, 5], -61)) # return -52\nprint(right_insertion([1, 2, 3, 4, 5], -62)) # return -53\nprint(right_insertion([1, 2, 3, 4, 5], -63)) # return -54\nprint(right_insertion([1, 2, 3, 4, 5], -64)) # return -55\nprint(right_insertion([1, 2, 3, 4, 5], -65)) # return -56\nprint(right_insertion([1, 2, 3, 4, 5], -66)) # return -57\nprint(right_insertion([1, 2, 3, 4, 5], -67)) # return -58\nprint(right_insertion([1, 2, 3, 4, 5], -68)) # return -59\nprint(right_insertion([1, 2, 3, 4, 5], -69)) # return -60\nprint(right_insertion([1, 2, 3, 4, 5], -70)) # return -61\nprint(right_insertion([1, 2, 3, 4, 5], -71)) # return -62\nprint(right_insertion([1, 2, 3, 4, 5], -72)) # return -63\nprint(right_insertion([1"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     right_insertion([1, 2, 4, 5], 4) == 2\nassert     right_insertion([1, 2, 4, 5], 4) == 2\nassert     right_insertion([1, 2, 4, 5], 2) == 1\nassert     right_insertion([1, 2, 4, 5], 2) == 1\nassert     right_insertion([1, 2, 4, 5], 5) == 4\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(right_insertion([1, 3, 5, 7], 5))\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     right_insertion([1,3,5,7,9,11,15], 3) == 5, \"Expected 5\"\nassert right_insertion([1,3,5,7,9,11,15], 9) == 5, \"Expected 5\"\nassert right_insertion([1,3,5,7,9,11,15], 10) == 6, \"Expected 6\"\nassert right_insertion([1,3,5,7,9,11,15], 12) == 6, \"Expected 6\"\nassert right_insertion([1,3,5,7,9,11,15], 9) == 6, \"Expected 6\"\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef find_pivot_index(A, l, h):\n    \"\"\"\n    Return the index of the pivot if exist, else return None.\n    \"\"\"\n    if l >= h:\n        return None\n    # mid = (l + h) // 2\n    mid = h\n    pivot = A[mid]\n    left = l\n    right = h\n    while left <= right:\n        while left <= mid and A[left] < pivot:\n            left += 1\n        while right >= mid and A[right] > pivot:\n            right -= 1\n        if left <= right:\n            left = left + 1\n            right = right - 1\n    return left\n\ndef test_find_pivot_index():\n    A = [1, 2, 3, 4, 5, 6, 7, 8]\n    assert find_pivot_index(A, 0, len(A)-1) == 4\n    A = [1, 2, 3, 4, 5, 6, 7]\n    assert find_pivot_index(A, 0, len(A)-1) == 3\n    A = [1, 2, 3, 4, 5, 6, 7]\n    "
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert right_insertion([1,2,3,4,5], 5) == 4\nassert right_insertion([1,2,3,4,5], -1) == 0\nassert right_insertion([1,2,3,4,5], 0) == 0\nassert right_insertion([1,2,3,4,5], 6) == 5\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    pass\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # Approach 1: brute force, linear\n    '''\n    n = len(a)\n    for i in range(n):\n        if a[i] == x:\n            return i\n        elif a[i] > x:\n            return i\n    '''\n    # Approach 2: binary search\n    '''\n    if a == []:\n        return 0\n    start, end = 0, len(a) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] > x:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return end\n    '''\n    # Approach 3: binary search, using bisect_left function\n    '''\n    left, right = 0, len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left\n    '''\n    # Approach 4: bisect_right function\n    '''\n    left, right = 0, len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left\n    '''\n    # Approach 5: binary search, using bisect function\n    '''\n    left, right = 0, len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left\n    '''\n    # Approach 6: bisect_left, using bisect function\n    '''\n    left, right = 0, len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left\n    '''\n    # Approach 7: bisect_right, using bisect function\n    '''\n    left, right = 0, len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left\n    '''\n    # Approach 8: binary search, using bisect_left function\n    '''\n    left, right = 0, len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left\n    '''\n    # Approach 9: binary search, using bisect_right function\n    '''\n    left, right = 0, len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left\n    '''\n    # Approach 10: binary search, using bisect function\n    '''\n    left, right = 0, len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left\n    '''\n\n    # Approach 11: bisect_left, using bisect function\n    '''\n    left, right = 0, len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left\n    '''\n    # Approach 12: bisect_right, using bisect function\n    '''\n    left, right = 0, len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left\n    '''\n    # Approach 13: binary search, using bisect_left function\n    '''\n    left, right = 0, len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left\n    '''\n    # Approach 14: binary search, using bisect_right function\n    '''\n    left, right = 0, len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left\n    '''\n    # Approach 15: binary search, using bisect function\n    '''\n    left, right = 0, len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left\n    '''\n    # Approach 16: binary search, using bisect_left function\n    '''\n    left, right = 0, len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left\n    '''\n    # Approach 17: binary search, using bisect_right function\n    '''\n    left, right = 0, len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left\n    '''\n    # Approach 18: binary search, using bisect function\n    '''\n    left, right = 0, len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left\n    '''\n    # Approach 19: binary search, using bisect_left function\n    '''\n    left, right = 0, len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left\n    '''\n    # Approach 20: binary search, using bisect_right function\n    '''\n    left, right = 0, len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] ="
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nright_insertion(range(6), 2) == 2\nassert right_insertion(range(6), 3) == 2\nassert right_insertion(range(6), 4) == 4\nassert right_insertion(range(6), 5) == 4\nassert right_insertion(range(6), 6) == 5\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \na = list(range(1,10,2))\nx = 8\nassert right_insertion(a,x) == 2\n\na = list(range(1,10,2))\nx = 9\nassert right_insertion(a,x) == 4\n\na = list(range(1,10,2))\nx = 3\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_match_three('bbbbbbbbbbb') == True\nassert     text_match_three('bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb') == False\nassert     text_match_three('bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_match_three('ababab') == True, 'incorrect result'\nassert     text_match_three('abbbbbb') == False, 'incorrect result'\nassert     text_match_three('abbbbbbbb') == True, 'incorrect result'\nassert     text_match_three('aaaaaaaaa') == False, 'incorrect result'\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_three('abbabab') == True \nassert     text_match_three('abcabcabcabc') == False \nassert     text_match_three('abcbabcabcabd') == True \n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_match_three('abbbbbaaabaaabbbbbb') ==     False\nassert     text_match_three('babaaabbababbabbababaaabbbb') ==     True\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_three(\"ababab\") == True, \"ababab should match\"\nassert     text_match_three(\"abcab\") == False, \"abcab should not match\"\nassert     text_match_three(\"abbbb\") == False, \"abbbb should not match\"\nassert     text_match_three(\"abbbbb\") == True, \"abbbbb should match\"\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_three(\"aabab\")\nassert not text_match_three(\"aabba\")\nassert not text_match_three(\"bbabb\")\nassert not text_match_three(\"bbbb\")\nassert not text_match_three(\"bbbbb\")\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert text_match_three('abababab')\nassert text_match_three('abababab') == False\nassert text_match_three('ababab') == True\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_match_three('') == False\nassert     text_match_three('aabbbaa') == True\nassert     text_match_three('ababaababb') == True\nassert     text_match_three('ababaababbb') == False\nassert     text_match_three('abbbaaaabbb') == False\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_three(\"ababbbba\") == True\nassert     text_match_three(\"bbabbbbb\") == False\nassert     text_match_three(\"ababbbbb\") == False\nassert     text_match_three(\"bbabbbbbba\") == True\nassert     text_match_three(\"bbabbbbbbb\") == True\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     new_tuple(('the', 'quick', 'brown', 'fox', 'jumps', 'over', 'lazy', 'fox'), 'thequickbrownfox') == \n    ('the', 'quick', 'brown', 'fox', 'jumps', 'over', 'lazy', 'fox')\n    print('Testing new_tuple()... pass')\n\ndef count_in_tuple(test_list, test_str):\n    '''\n    Write a function to count the number of occurrences of a substring within a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     new_tuple([1, 2, 3], 'abc') == (1, 2, 3), 'Wrong result'\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n'''\nGiven a string and an integer k, return a new string that rotates the given string k times.\n\nExample 1:\n\nInput: s = \"waterbottle\", k = 1\nOutput: \"erbottlewat\"\nExplanation: The original string is \"waterbottle\" rotated 1 times.\nExample 2:\n\nInput: s = \"qwer\", k = 2\nOutput: \"werq\"\nExplanation: The original string is \"qwer\" rotated 2 times.\nExample 3:\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     new_tuple([1,2,3], 'hello') == ((1,2,3), 'hello')\nassert new_tuple([1,2,3], 'hello') == ((1,2,3), 'hello')\nassert new_tuple([1,2,3], 'world') == ((1,2,3), 'world')\nassert new_tuple([1,2,3], 'hell') == ((1,2,3), 'hell')\nassert new_tuple([1,2,3], 'word') == ((1,2,3), 'word')\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     new_tuple([\"hello\", \"world\"], \"world\") == (\"world\", \"hello\")\nassert     new_tuple([\"hello\", \"world\"], \"hello world\") == (\"hello world\",)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     new_tuple([1,2,3,4], 'hello world') == (1,2,3,4) \nassert     new_tuple([1,2,3,4], 'cat') == (1,2,3,4) \nassert     new_tuple([1,2,3,4],'moose') == (1,2,3,4) \nassert     new_tuple([1,2,3,4], 'python') == (1,2,3,4) \nassert     new_tuple([1,2,3,4], 'caleb') == (1,2,3,4) \n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     new_tuple(['a', 'b', 'c'], 'abc') == ('a', 'b', 'c')\nassert     new_tuple(['x', 'y', 'z'], 'xyz') == ('x', 'y', 'z')\nassert     new_tuple(['w', 'x', 'y'], 'xy') == ('w', 'x', 'y')\nassert     new_tuple(['y', 'z', 'a'], 'zy') == ('y', 'z', 'a')\nassert     new_tuple(['a', 'x', 'a'], 'aaa') == ('a', 'x', 'a')\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     new_tuple([1,2,3], 'this is a string') == (1,2,3)\nassert     new_tuple([1,2,3], 'I am a string') == (1,2,3)\nassert     new_tuple([1,2,3], 'I am a string') == (1,2,3)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     new_tuple([], \"\"),     \"The tuple should be empty.\"\nassert     new_tuple([1, 2, 3], \"\"),     \"The tuple should be empty.\"\nassert     new_tuple([], \"0\"),     \"The tuple should be empty.\"\nassert     new_tuple([1, 2, 3], \"1,2,3\"),     \"The tuple should be 1,2,3\"\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     even_position([1,2,3,4,5,6]) == True\nassert     even_position([1,2,3,4,5,7]) == False\nassert     even_position([1,2,3,4,5,8]) == False\n\ndef even_position2(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all(i%2==0 for i in nums)\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert even_position([3,4,5,6,9,10,12,13]) == True\nassert even_position([1,2,3,4,5,6,7,8,9]) == False"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     even_position([1,2,3,4,5]) == True, \"Wrong Answer\"\nassert     even_position([2,3,4,5,6]) == False, \"Wrong Answer\"\nassert     even_position([1,2,3,4,5,6,7,8]) == True, \"Wrong Answer\"\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     even_position([10, 20, 20, 30, 40, 50, 60, 70, 80, 90])\nassert not even_position([10, 20, 20, 30, 40, 50, 60, 70, 80, 91])\n\ndef check_element(l, n):\n    '''\n    Write a python function to check whether a given list contains a specific element or not.\n    '''\n    pass\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     even_position([1,2,3,4,5,6,7,8,9,10]) == True, \"An empty list should be True\"\nassert     even_position([1,2,3,4,5,6,7,8,9]) == False, \"Non-empty list should be False\"\nassert     even_position([1,2,3,4,5,6]) == True, \"One element should be True\"\nassert     even_position([1,2,3,4,5]) == False, \"List should have an even number of elements\"\nassert even_position([0,2,4,6,8]) == False, \"Negative indices should be False\"\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     even_position([1,2,3,4,5,6,7,8,9]) == True\nassert     even_position([1,2,3,4,5,6,7,8,9]) == False\nassert     even_position([1,2,3,4,5,6,7,8,9]) == False\nassert     even_position([1,2,3,4,5,6,7,8,9]) == False\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     even_position([2,4,6,8,10,12,14]) == True\nassert     even_position([2,4,6,8,10,13,14]) == False\n\ndef divisible_by_7(num):\n    '''\n    Write a python function to check whether a given number is divisible by 7.\n    '''\n    pass\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \neven_position([1,2,3,4,5])\n\ndef even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     even_position([1, 2, 3, 4, 5]) == True, \"Wrong output\"\nassert even_position([3, 4, 5]) == False, \"Wrong output\"\nassert even_position([2, 4, 6, 8]) == True, \"Wrong output\"\nassert even_position([1, 3, 5]) == False, \"Wrong output\"\n\ndef odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_nested(test_tup) == ((), (1, 2), (3, 4, 5))\nassert     remove_nested((1, 2, (3, 4, 5))) == ((1, 2), (3, 4, 5))\nassert     remove_nested(((1, 2), (3, 4, 5))) == ((1, 2), (3, 4, 5))\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_nested((1, (2, (3, 4)))) == (1, (2, (3, 4)))\nassert     remove_nested((1, (2, (3, 4)))) == (1, (2, (3, 4)))\nassert     remove_nested((1, (2, (3, 4, (5, 6, (7, 8, 9)))), (10, 11, 12, (13, 14)))) == (1, (2, (3, 4, (5, 6, (7, 8, 9))), (10, 11, 12, (13, 14))))\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_nested(((1,),(2,),(3,))) == ((1, 2, 3),)\nassert     remove_nested(((1,),(2,),(3,),(4,))) == ((1,), (2,), (3,))\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_nested((1, 2, 3)) == (1, 2, 3)\nassert     remove_nested((1, (2, 3))) == (1, (2, 3))\nassert     remove_nested((1, (2, 3), 4)) == (1, (2, 3))\n\ndef remove_zero(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert remove_nested((1,2,3)) == (1,2,3), \"test failed\"\nassert remove_nested((1,2,3,(1,2,3),4)) == (1,2,3,(1,2,3),4), \"test failed\"\nassert remove_nested((1,2,3,(1,2,3),4)) == (1,2,3,(1,2,3),4), \"test failed\"\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_nested((1,3,2,4,5,6,3,5,7,8,7)) == ((1,2,4,5,6,7,8), )\nassert     remove_nested((1,3,2,4,5,6,3,5,7,8,7,(1,2,3,4,5,6,7,8))) == ((1,2,3,4,5,6,7,8), )\n\ndef remove_duplicates(test_tup):\n    '''\n    Write a function to remove duplicates tuples from the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_nested((1, 2, 3, (4, 5, 6), 7)) == ((1, 2, 3), 7)\nassert     remove_nested((1, 2, 3, (4, 5, 6), 7, (8, 9, 10), 11, 12)) == ((1, 2, 3, (8, 9, 10), 11, 12), 7)\nprint('Correct')\nprint('\\n')\n\ndef remove_duplicate(test_tup):\n    '''\n    Write a function to remove duplicates from the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_nested(((1, 2, 3, 4), (2, 3, 4, 5), (3, 4, 5, 6))) == ((1, 2, 3, 4), (2, 3, 4, 5), (3, 4, 5, 6))\nassert     remove_nested(((1, 2, 3, 4), (2, 3, 4), (3, 4))) == ((1, 2, 3, 4), (2, 3, 4))\nassert     remove_nested(((1, 2), (2, 3), (3, 4))) == ((1, 2), (2, 3))\nassert     remove_nested(((1,), (2,), (3, 4))) == ((1,), (2,), (3, 4))\nassert     remove_nested(((1, 2, 3, 4), (2, 3, 4, 5))) == ((1, 2, 3, 4), (2, 3, 4, 5))\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_nested(((1,2),(3,4))) == ((1,2),(3,4))\nassert     remove_nested(((1,2),(3,4))) == ((1,2),(3,4))\nassert     remove_nested((1,2,3,4)) == (1,2,3,4)\nassert     remove_nested((1,2,3,4,5,6)) == (1,2,3,4,5,6)\nassert     remove_nested((1,2,3,4,5,6)) == (1,2,3,4,5,6)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_nested((1,2,3,(1,2,3,4,5,6),7)) == ((1,2,3,4,5,6),7), \"1st testcase\"\nassert     remove_nested((1,2,3,(4,5,6),7)) == ((1,2,3,4,5,6),7), \"2nd testcase\"\nassert     remove_nested((1,2,3,(4,5,6,7),8)) == ((1,2,3,4,5,6,7),8), \"3rd testcase\"\nassert     remove_nested((1,2,3,(4,5,6,7,8))) == ((1,2,3,4,5,6,7,8)), \"4th testcase\"\nassert     remove_nested((1,2,3,4,5,6,7,8)) == ((1,2,3,4,5,6,7,8)), \"5th testcase\"\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_list([[1, 2, 3, 4, 5], [], ['a', 'b'], True, 2]) == 2\nassert     count_list([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == 1\nassert     count_list([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == 0\nassert     count_list([[1, 2, 3, 4, 5], ['a', 'b'], True, 2]) == 2\nassert     count_list([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == 1\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ncount_list([[1,2,3,4], 2, [1,2,3,4], [1,2,3,4], 3, [1,2,3,4], [1,2,3,4], 4]) == 5\nassert count_list([1,2,3,4]) == 1\nassert count_list([[1,2,3,4], 2, [1,2,3,4], [1,2,3,4], 3, [1,2,3,4], [1,2,3,4], 4]) == 5\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_list([[],[],[]]) == 0, \"Input list is not a list\"\nassert     count_list([[],[[]]]) == 1, \"Input list is not a list\"\nassert     count_list([[[],[]],[[],[]],[[],[]],[[],[]]]) == 4, \"Input list is not a list\"\nassert     count_list([[],[[],[]],[[],[],[]],[[],[],[]],[[],[]]]) == 8, \"Input list is not a list\"\nassert     count_list([[[],[],[]],[[],[],[]],[[],[],[]],[[],[],[]],[[],[]]]) == 5, \"Input list is not a list\"\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_list([[1,2,3],[4,5,6],[7,8]]) == 2\nassert count_list([[1,2,3,4],[4,5,6,7]]) == 1\nassert count_list([[1],[2],[3],[4]]) == 0\nassert count_list([[1],[2],[3],[4]]) == 0\nassert count_list([[1,2,3],[4,5,6],[7,8]]) == 3\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_list([[1,2],\n                    [3,4],\n                    [5,6],\n                    [7,8],\n                    [9,10],\n                    [11,12]]) == 6, 'Wrong count_list output'\n\nassert     count_list([[1,2],\n                    [3,4],\n                    [5,6],\n                    [7,8],\n                    [9,10],\n                    [11,12],\n                    [1,2]]) == 5, 'Wrong count_list output'\n\nassert     count_list([[1,2],\n                    [3,4],\n                    [5,6],\n                    [7,8],\n                    [9,10]]) == 0, 'Wrong count_list output'\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_list([[1,2,3],[1,2,3,4],[[5],5,5],[[6,7]]]) == 3\nassert     count_list([1,2,3]) == 0\nassert     count_list([[1,2,3],1,2,3]) == 1\n\ndef count_list_recursion(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    Use recursion to calculate the number of lists and return the result.\n    '''\n    pass\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert \nassert count_list([1,[2,3]],[3,4,5],[6,[7,8,9,10]]) == 2\nassert \nassert count_list([1,2,3,4],[5,6,7],[8,9,10,11]) == 3\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_list([1,2,3,4,5,6]) == 1\nassert     count_list([]) == 0\nassert     count_list([[], [], [], [], []]) == 5\nassert     count_list([[1,2,3,4,5,6], \n    [1,2,3,4,5,6], \n    [1,2,3,4,5,6], \n    [1,2,3,4,5,6], \n    [1,2,3,4,5,6]]) == 3\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_list([[[1]], [[2]], [[3]], [[4]]]) == 2, 'Expected Output = 2'\nassert     count_list([[[1]], [[2]], [[3]], [[4]]]) == 1, 'Expected Output = 1'\nassert     count_list([[[1], [2]], [[3]], [[4]], [[5]]]) == 0, 'Expected Output = 0'\nassert     count_list([[[]]]) == 0, 'Expected Output = 0'\n\ndef count_list_repetition(input_list): \n    '''\n    Write a python function to count the number of lists that are present in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_list([[]]) == 0\nassert     count_list([[], []]) == 1\nassert     count_list([[1, 2], [1, 2], [1, 2]]) == 3\nassert     count_list([[[1], 2], [[1], 2], [[1], 2]]) == 3\nassert     count_list([[1, 2], [1, 2], [1, 2], [1, 2]]) == 4\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     last([1,2,3,4,5],5) == 4\nassert     last([1,2,3,4,5],4) == 3\nassert     last([1,2,3,4,5],1) == 5\nassert     last([],5) == -1"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert last([0,1,2,3,4,5,6,7,8],8) == 8\nassert last([0,1,2,3,4,5,6,7,8],9) == 6\nassert last([0,1,2,3,4,5,6,7,8],10) == 5\nassert last([],1) == -1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     last([2, 3, 4, 5, 1, 0], 0) == 5\nassert     last([2, 3, 4, 5, 1, 0], 1) == 5\nassert     last([2, 3, 4, 5, 1, 0], 2) == 5\nassert     last([2, 3, 4, 5, 1, 0], 3) == 3\nassert     last([2, 3, 4, 5, 1, 0], 4) == 4\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     last([2, 3, 4, 6, 7], 6) == 3\nassert     last([2, 3, 4, 6, 7], 7) == 5\nassert     last([2, 3, 4, 6, 7], 1) == -1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     last([1,2,3,4,5,6,7,8],2) == 5\nassert last([1,2,3,4,5,6,7,8],10) == None\nassert last([1,2,3,4,5,6,7,8],4) == 4\nassert last([1,2,3,4,5,6,7,8],0) == 0\nassert last([1,2,3,4,5,6,7,8],8) == 8\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     last([2,5,7,9,13,16],7) == 3\nassert     last([2,5,7,9,13,16],13) == 5\nassert     last([2,5,7,9,13,16],16) == 5\nassert     last([2,5,7,9,13,16],5) == 3\nassert     last([2,5,7,9,13,16],9) == 5\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     last([1,2,3,4,5,6],5) == 4, \"Wrong output\"\nassert     last([1,2,3,4,5,6],2) == 5, \"Wrong output\"\nassert     last([1,2,3,4,5,6],1) == 5, \"Wrong output\"\nassert     last([1,2,3,4,5,6],6) == 6, \"Wrong output\"\nassert     last([1,2,3,4,5,6],7) == 6, \"Wrong output\"\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     last([1,2,3,4,5],1) == 4, \"Wrong!\"\nassert     last([1,2,3,4,5],0) == 0, \"Wrong!\"\nassert     last([1,2,3,4,5],2) == 2, \"Wrong!\"\nassert     last([1,2,3,4,5],3) == 5, \"Wrong!\"\nassert     last([1,2,3,4,5],5) == 5, \"Wrong!\"\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_starta_endb('abaaaa') == False\nassert     text_starta_endb('abaaaaab') == True\nassert     text_starta_endb('abbbbba') == True\nassert     text_starta_endb('abbbbbaaa') == False\nassert     text_starta_endb('abbbbbaaaa') == True\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_starta_endb('abcd') == True, 'wrong!'\nassert     text_starta_endb('bcd') == False, 'wrong!'\nassert     text_starta_endb('abb') == True, 'wrong!'\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_starta_endb('') == False\nassert    text_starta_endb('ab') == True\nassert    text_starta_endb('ababc') == True\nassert    text_starta_endb('abababc') == True\nassert    text_starta_endb('aababc') == False\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_starta_endb('abcd') == ('abcd', True)\nassert     text_starta_endb('a') == ('a', False)\nassert     text_starta_endb('a b') == ('a b', False)\nassert     text_starta_endb('abc') == ('abc', False)\nassert     text_starta_endb('abc a') == ('abc a', False)\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint('ok')\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_starta_endb(\"ab\") == True\nassert     text_starta_endb(\"a\") == True\nassert     text_starta_endb(\"aa\") == True\nassert     text_starta_endb(\"aaa\") == True\nassert     text_starta_endb(\"aaaa\") == True\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_starta_endb('aaab') == True\nassert     text_starta_endb('aab') == False\nassert     text_starta_endb('aabx') == False\nassert     text_starta_endb('ab') == False\nassert     text_starta_endb('aba') == True\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_starta_endb('aab') == True, 'text_starta_endb not working as intended'\nassert     text_starta_endb('abc') == False, 'text_starta_endb not working as intended'\nassert     text_starta_endb('aabb') == True, 'text_starta_endb not working as intended'\nassert     text_starta_endb('ab') == False, 'text_starta_endb not working as intended'\nassert     text_starta_endb('a') == True, 'text_starta_endb not working as intended'\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_starta_endb(\"a\")     == \"a\"\nassert     text_starta_endb(\"ab\")     == \"a\"\nassert     text_starta_endb(\"b\")     == \"a\"\nassert     text_starta_endb(\"bb\")     == \"a\"\nassert     text_starta_endb(\"aab\")     == \"a\"\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_starta_endb('aHello') == False\nassert     text_starta_endb('aHello b') == True\nassert     text_starta_endb('aaHello b') == False\nassert     text_starta_endb('aHello bWorld') == True\nassert     text_starta_endb('a') == False\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     return_sum({ 'a': 1, 'b': 2, 'c': 3 }) == 6,'sum should be 6'\nassert     return_sum({ 'd': 1, 'e': 2, 'f': 3 }) == 0,'sum should be 0'\nassert     return_sum({ 'd': 1, 'e': 2, 'f': 3, 'g': 4 }) == 7,'sum should be 7'\n\n\ndef dict_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     return_sum({'x':1, 'y':2, 'z':3}) == 6, 'Your function should return 6'\nassert     return_sum({'a':1, 'b':2, 'c':3}) == 0, 'Your function should return 0'\nassert     return_sum({'z':3, 'a':1, 'b':2}) == 7, 'Your function should return 7'\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     return_sum({'first':1,'second':2,'third':3}) == 6\nassert     return_sum({'first':1,'second':2,'third':3,'fourth':4}) == 10\nassert     return_sum({'first':1,'second':2,'third':3,'fourth':4,'fifth':5}) == 15\nassert     return_sum({'first':1,'second':2,'third':3,'fourth':4,'fifth':5,'sixth':6}) == 18\nassert     return_sum({'first':1,'second':2,'third':3,'fourth':4,'fifth':5,'sixth':6,'seventh':7}) == 21\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     return_sum({'a':1, 'b':2, 'c':3}) == 6\nassert     return_sum({'x':1, 'y':2}) == 4\nassert     return_sum({}) == 0\nassert not return_sum({}) == 0\nassert not return_sum(None) == 0\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert not \nassert return_sum({\"a\": 1, \"b\": 2}) == 3\nassert return_sum({\"a\": 1, \"b\": 2, \"c\": 3}) == 4\nassert return_sum({}) == 0\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndict_return_sum = return_sum(dict1)\nassert dict_return_sum == sum(dict1.values())\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef return_sum_new(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_odd(2) == 3\nassert     sum_odd(5) == 10\nassert     sum_odd(1) == 1\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef odd_list(l, r): \n    '''\n    Write a python function to check if the given range is only composed by odd numbers.\n    '''\n    pass\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint (\"sum_odd(10, 50) = \", sum_odd(10, 50))\nassert sum_odd(50, 50) == 0\nassert sum_odd(10, 5) == 15\n\n\n\ndef summation(n):\n    '''\n    Write a python function to return the summation of all the numbers from 0 to n (both inclusive).\n    '''\n    pass\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n'''\n1. Python Program to find the number of divisors for a number n.\n'''"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_odd(4) == 4, \"Test 1 Failed\"\nassert     sum_odd(1) == 1, \"Test 2 Failed\"\nassert     sum_odd(2) == 2, \"Test 3 Failed\"\nassert     sum_odd(10) == sum_odd(0), \"Test 4 Failed\"\nassert     sum_odd(2) == 3, \"Test 5 Failed\"\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef get_sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    pass\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert _sum([1, 2, 3]) == 6\nassert _sum([4, 5, 6]) == 9\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nif __name__ == \"__main__\":\n    arr = [1, 2, 3]\n    print (\"the sum of arr is: \", _sum(arr))\n    assert _sum(arr) == 6\n    print (\"the sum of arr is: \", _sum(arr))\n    assert _sum(arr) == 6"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     _sum([1,2,3]) == 6\nassert _sum([1,3,6,5]) == 21\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert         _sum([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299]) == sum(range(0, 301))"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert         _sum([1, 2, 3]) == 6, \"Wrong answer\"\nassert         _sum([-1, 2, 3]) == 5, \"Wrong answer\"\nassert         _sum([0, -1, 2, 3]) == 5, \"Wrong answer\"\nassert         _sum([-1, 2, -3]) == 4, \"Wrong answer\"\nassert         _sum([]) == 0, \"Wrong answer\"\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert _sum([1,2,3]) == 6\nassert _sum([1,-1,0]) == 1\nassert _sum([1,1,1,1]) == 2\nassert _sum([1,-1,-1,-1]) == -2\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n_sum([1, 2, 3, 4]) == 15\n_sum([1, 2]) == 3\n_sum([]) == 0\n_sum([-1, -2, -3, -4]) == -10\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     left_rotate(8,2) == 4\nassert left_rotate(7,3) == 6\nassert left_rotate(8,0) == 8\nassert left_rotate(10,3) == 3\nassert left_rotate(8,1) == 0\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     left_rotate(0x7f,0)==0x0\nassert     left_rotate(0x7f,1)==0x7f\nassert     left_rotate(0x7f,2)==0xef\nassert     left_rotate(0x7f,3)==0xff\nassert     left_rotate(0x7f,4)==0xf7\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     left_rotate(314,3) == 0x8d, 'fail'\nassert     left_rotate(314,2) == 0x98, 'fail'\nassert     left_rotate(314,1) == 0x3c, 'fail'\nassert     left_rotate(314,0) == 0x314, 'fail'\nassert left_rotate(314,31) == 0x99, 'fail'\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     left_rotate(0x01020304,2) == 0x04030202\nassert     left_rotate(0x04030202,2) == 0x02030304\nassert     left_rotate(0x02030304,2) == 0x03020304\nassert     left_rotate(0x03020304,2) == 0x04030202\nassert     left_rotate(0x04030202,2) == 0x02030304\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef right_rotate(n,d):\n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    pass\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     left_rotate(0, 0) == 0\nassert     left_rotate(1, 1) == 1\nassert     left_rotate(2, 1) == 3\nassert     left_rotate(3, 1) == 2\nassert     left_rotate(4, 1) == 5\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     left_rotate(3,4) == 8\nassert     left_rotate(2,4) == 6\nassert     left_rotate(3,5) == 1\nassert left_rotate(4,1) == 3\nassert left_rotate(0b10101010,3) == 0b10010100\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    left_rotate(12,2) == 6\n    left_rotate(6,2) == 4\n    left_rotate(0,2) == 0\n    left_rotate(8,1) == 8\n    left_rotate(1,1) == 2\n    left_rotate(12,3) == 12\n    left_rotate(9,1) == 0\n    left_rotate(15,1) == 7\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert remove_all_spaces('hello') == 'hello'\nassert remove_all_spaces('hello    world') == 'hello world'\nassert remove_all_spaces('hello') == 'hello'\nassert remove_all_spaces('hello    world') == 'hello world'\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert remove_all_spaces(\"   a b   \") == \"a b\"\nassert remove_all_spaces(\" a  b  c  \") == \"a b c\"\nassert remove_all_spaces(\"   a    b   \") == \"a b\"\nassert remove_all_spaces(\" a\\nb\\tc\") == \"a b c\"\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_all_spaces(\" hello\\nworld \") == \"hello world\"\nassert     remove_all_spaces(\"hello\\tworld\") == \"hello world\"\nassert     remove_all_spaces(\"hello world\") == \"hello world\"\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_all_spaces('d\\n') == 'd'\nassert     remove_all_spaces('  ') ==''\nassert     remove_all_spaces('\\n') ==''\nassert     remove_all_spaces('\\t') ==''\nassert     remove_all_spaces('abcde') == 'abcde'\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef remove_newlines(text):\n    '''\n    Write a function that removes any newline character from a string.\n    '''\n    pass\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_all_spaces(' ') == ''\nassert     remove_all_spaces('  ') == ''\nassert     remove_all_spaces(' hello ') == 'hello'\nassert     remove_all_spaces('hello  ') == 'hello'\nassert     remove_all_spaces('hello world') == 'hello world'\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_all_spaces(\"hello world\") == \"hello world\"\nassert     remove_all_spaces(\"hello     world\") == \"hello     world\"\nassert     remove_all_spaces(\"hello world\") == \"hello world\"\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_all_spaces(\"\") == \"\"\nassert     remove_all_spaces(\" \") == \"\"\nassert     remove_all_spaces(\"blah blah blah\") == \"blah blah blah\"\nassert     remove_all_spaces(\"blah blah blah  \") == \"blah blah blah\"\nassert     remove_all_spaces(\"blah blah blah  \") == \"blah blah blah\"\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     test_three_equal(1,1,1) == True, 'Input: 1,1,1'\nassert     test_three_equal(1,2,1) == True, 'Input: 1,2,1'\nassert     test_three_equal(2,1,1) == True, 'Input: 2,1,1'\nassert     test_three_equal(1,2,2) == False, 'Input: 1,2,2'\nassert     test_three_equal(1,2,3) == False, 'Input: 1,2,3'\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     test_three_equal(1,2,3) == 2, \"Fail\"\nassert     test_three_equal(4,4,4) == 1, \"Fail\"\nassert     test_three_equal(4,4,3) == 1, \"Fail\"\nassert     test_three_equal(4,3,4) == 0, \"Fail\"\nassert     test_three_equal(4,3,3) == 0, \"Fail\"\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ntest_three_equal(1,1,1) == 2\ntest_three_equal(1,1,1) == 2\ntest_three_equal(1,1,1) == 2\ntest_three_equal(1,2,1) == 0\ntest_three_equal(1,1,2) == 0\ntest_three_equal(2,2,2) == 2\ntest_three_equal(2,1,2) == 1\ntest_three_equal(2,2,1) == 1\ntest_three_equal(1,2,2) == 0\ntest_three_equal(2,1,2) == 0\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     test_three_equal(1,1,1) == 2\nassert     test_three_equal(1,2,1) == 0\nassert     test_three_equal(1,1,2) == 2\nassert     test_three_equal(1,2,2) == 2\nassert     test_three_equal(2,2,2) == 2\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     test_three_equal(1,2,1) == 3, 'fail the test'\nassert     test_three_equal(1,2,2) == 3, 'fail the test'\nassert     test_three_equal(1,2,3) == 0, 'fail the test'\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    "
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     test_three_equal(1,1,1) == 1\nassert     test_three_equal(1,2,1) == 0\nassert     test_three_equal(1,1,2) == 2\nassert     test_three_equal(2,2,2) == 1\nassert     test_three_equal(3,3,3) == 1\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     test_three_equal(2,2,2) == True, 'Fail'\nassert     test_three_equal(2,2,3) == False, 'Fail'\nassert     test_three_equal(3,3,3) == True, 'Fail'\nassert     test_three_equal(4,4,4) == True, 'Fail'\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     test_three_equal(1, 1, 1) == 1\nassert     test_three_equal(5, 5, 5) == 1\nassert     test_three_equal(10, 1, 10) == 3\nassert     test_three_equal(1, 1, 1) == 2\nassert     test_three_equal(10, 1, 1) == 3\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_rotation([]) == 0\nassert     count_rotation([1]) == 0\nassert     count_rotation([1,1]) == 1\nassert     count_rotation([1,1,1]) == 2\nassert     count_rotation([1,1,1,1]) == 3\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_rotation([5,3,1,2])==3\nassert     count_rotation([10, 20, 30, 40, 50, 60])==4\nassert     count_rotation([4,1,2,3])==0\nassert     count_rotation([1,1,2,3,5,7])==0\nassert     count_rotation([1,1,2,3,4,4])==0\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_rotation([1,2,3,4]) == 3\nassert     count_rotation([1,2,3,4,5]) == 4\nassert     count_rotation([1,2,3,4,5,6]) == 5\nassert     count_rotation([1,2,3,4,5,6,7]) == 5\nassert     count_rotation([1,2,3,4,5,6,7,8]) == 6\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_rotation([1,2,3,4,5]) == 1\nassert     count_rotation([2,1,3,4,5]) == 2\nassert     count_rotation([3,2,1,4,5]) == 3\nassert     count_rotation([4,3,2,1,5]) == 4\nassert     count_rotation([5,4,3,2,1]) == 5\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_rotation([1,2,3,4,5]) == 1, 'Not expected to return 1'\nassert     count_rotation([1,2,3,4,5,6]) == 2, 'Not expected to return 2'\nassert     count_rotation([1,2,3,4,5,6,7]) == 3, 'Not expected to return 3'\nassert     count_rotation([1,2,3,4,5,6,7,8]) == 4, 'Not expected to return 4'\nassert     count_rotation([1,2,3,4,5,6,7,8,9]) == 5, 'Not expected to return 5'\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_perfect_square(4) == True, \"incorrect output\"\nassert     is_perfect_square(4) == False, \"incorrect output\"\nassert     is_perfect_square(-3) == False, \"incorrect output\"\nassert     is_perfect_square(-7) == True, \"incorrect output\"\nassert     is_perfect_square(-3) == False, \"incorrect output\"\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_perfect_square(0)     == False\nassert     is_perfect_square(3)     == False\nassert     is_perfect_square(6)     == True\nassert     is_perfect_square(10)     == False\nassert     is_perfect_square(15)     == True\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_perfect_square(10) == True, \"Should be True\"\nassert     is_perfect_square(9) == False, \"Should be False\""
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nimport math\n\ndef is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = math.sqrt(n)\n    return x * x == n\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef is_triangle(a,b,c):\n    '''\n    Write a function to check whether a triangle exists with the sides of given lengths or not.\n    '''\n    pass\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_perfect_square(2) == True, \"is_perfect_square should return True if given number is perfect square\"\nassert is_perfect_square(3) == False, \"is_perfect_square should return False if given number is not perfect square\"\nassert is_perfect_square(1) == False, \"is_perfect_square should return False if given number is not perfect square\"\nassert is_perfect_square(8) == True, \"is_perfect_square should return True if given number is perfect square\"\nassert is_perfect_square(4) == True, \"is_perfect_square should return True if given number is perfect square\"\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_perfect_square(12) == False, \"is_perfect_square() test 1 failed\"\nassert     is_perfect_square(16) == True, \"is_perfect_square() test 2 failed\"\nassert     is_perfect_square(9) == True, \"is_perfect_square() test 3 failed\"\nassert     is_perfect_square(4) == False, \"is_perfect_square() test 4 failed\"\nassert     is_perfect_square(1) == False, \"is_perfect_square() test 5 failed\"\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_perfect_square(81) == False\nassert     is_perfect_square(2) == True\nassert     is_perfect_square(16) == True\nassert     is_perfect_square(81) == False\nassert     is_perfect_square(6) == True\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    total = 1\n    for i in arr: \n        total *= i\n    return total % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert (is_product_even([10,4,5,8,3,1]) == True)\nassert (is_product_even([-1,1,5,5,3,2]) == False)\nassert (is_product_even([-10,-10,10,5,7]) == True)\nassert (is_product_even([-10,-10,10,5,7,0]) == False)\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_product_even(arr=[2, 4, 3]) == False, 'Incorrect output'\nassert     is_product_even(arr=[2, 3, 4]) == True, 'Incorrect output'\nassert     is_product_even(arr=[2]) == True, 'Incorrect output'\nassert     is_product_even(arr=[1, 1, 1, 1]) == False, 'Incorrect output'\nassert     is_product_even(arr=[]) == False, 'Incorrect output'\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    is_product_even([3, 1]) == False\n    is_product_even([1, 1, 1, 1]) == False\n    is_product_even([1, 2, 3, 4]) == False\n    is_product_even([2, 3, 4, 5]) == False\n    is_product_even([1, 2, 3, 4, 5]) == True\n    is_product_even([1, 1, 2, 3, 4]) == True\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_product_even(arr) == False\nprint('\\tPassed')\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_product_even([5, 10, 20]) == False\nassert     is_product_even([5, 10]) == True\nassert     is_product_even([10]) == False\nassert     is_product_even([]) == False"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_product_even(    [1,2,3,4] ) == True, \"should return True\"\nassert     is_product_even(    [1,2,4,6] ) == False, \"should return False\"\nassert     is_product_even(    [3,6,9,12] ) == True, \"should return True\"\nassert     is_product_even(    [1,3,6,9] ) == False, \"should return False\"\nassert     is_product_even(    [1,3,6,9,11,13] ) == True, \"should return True\"\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_product_even([2,3,4,5,6,7,8,9,10])== True\nassert is_product_even([-2,-3,-4,-5,-6,-7,-8,-9,-10])== True\nassert is_product_even([10,20,30,40,50])== True\nassert is_product_even([-10,-20,-30,-40,-50])== False\n\ndef is_product_odd(arr):\n    '''\n    Write a function to check whether the product of numbers in a list is odd or not.\n    '''\n    pass\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n'''\nWrite a function that returns the list of lists in a list whose sum of elements is the highest.\n'''\ndef max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    pass\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_sum_list([[1,2], [-1,5], [-2,1]]) == [[-1,5], [1,2]]\nassert     max_sum_list([[1,2], [5,5], [1,1]]) == [[5,5], [1,1]]\nassert     max_sum_list([[1,2], [3,6], [3,6]]) == [[3,6], [1,2]]\nassert     max_sum_list([[-4,2,2], [-4,0,2], [-4,0,2]]) == [[-4,2,2], [-4,0,2]]\nassert     max_sum_list([[-1,1,2], [1,2,3], [-1,1,2]]) == [[-1,2,3], [1,1,2]]\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_sum_list([[1, 2, 3, -1], [1, 2, 3, 5], [1, 2, 3, 5], [-1, 2, 3, 5], [-1, 2, 3, 5], [1, 2, 3, 5], [2, 2, 3, 5], [3, 3, 3, 5]]) == [[1, 2, 3, 5], [1, 2, 3, 5], [1, 2, 3, 5], [2, 2, 3, 5], [3, 3, 3, 5]]\nassert     max_sum_list([[1, 2, 3, 5], [-1, 2, 3, 5], [-1, 2, 3, 5], [1, 2, 3, 5], [2, 2, 3, 5], [3, 3, 3, 5]]) == [[1, 2, 3, 5], [-1, 2, 3, 5], [-1, 2, 3, 5], [-1, 2, 3, 5]]\nassert     max_sum_list([[1, 2, 3, 5], [-1, 2, 3, 5], [-1, 2, 3, 5], [-1, 2, 3, 5], [-1, 2, 3, 5], [1, 2, 3, 5], [2, 2, 3, 5], [3, 3, 3, 5]]) == [[-1, 2, 3, 5], [-1, 2, 3, 5], [-1, 2, 3, 5], [-1, 2, 3, 5], [-1, 2, 3, 5], [1, 2, 3, 5], [2, 2, 3, 5], [3, 3, 3, 5]]\nassert     max_sum_list([[1, 2, 3, 5], [1, 2, 3, 5], [-1, 2, 3, 5], [-1, 2, 3, 5], [-1, 2, 3, 5], [-1, 2, 3, 5], [1, 2, 3, 5], [2, 2, 3, 5], [3, 3, 3, 5]]) == [[-1, 2, 3, 5], [-1, 2, 3, 5], [-1, 2, 3, 5], [-1, 2, 3, 5], [-1, 2, 3, 5], [-1, 2, 3, 5], [-1, 2, 3, 5], [-1, 2, 3, 5], [-1, 2, 3, 5]]\nassert     max_sum_list([[1, 2, 3, 5], [1, 2, 3, 5], [-1, 2, 3, 5], [-1, 2, 3, 5], [-1, 2, 3, 5], [-1, 2, 3, 5], [1, 2, 3, 5], [2, 2, 3, 5], [3, 3, 3, 5]]) == [[-1, 2, 3, 5], [-1, 2, 3, 5], [-1, 2, 3, 5], [-1, 2, 3, 5], [-1, 2, 3, 5], [-1, 2, 3, 5], [-1, 2, 3, 5], [-1, 2, 3, 5], [-1, 2, 3, 5]]\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert \nassert\nassert max_sum_list([[1,2,3],[4,5,6]]) == [[4,5,6],[1,2,3]]\nassert max_sum_list([[1,2,3],[-4,-5,-6]]) == [[1,-2,-3],[-4,-5,-6]]\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_sum_list([[-1, -1, -1], [-1, -1, -1], [-1, -1, -1]]) ==     [-1]\nassert max_sum_list([[-1, -1, -1], [-1, -1, -1], [-1, -1, -1]]) ==     [-1]\nassert max_sum_list([[1, 2, 3], [4, 5, 6], [-1, -1, -1]]) ==     [6]\nassert max_sum_list([[0, -1, -1], [-1, -1, -1], [0, -1, -1]]) ==     [-1]\n\ndef max_sum_list_ii(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    pass\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_sum_list([[1,2,3],\n                        [-4,6,3],\n                        [-1,-2,-3]    ]) == [-1,-2,-3], 'Wrong max_sum_list'\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_sum_list([\n                    [2, -1, 0],\n                    [-10, -8, -2],\n                    [1, 2, 3],\n                    [5, 8, -10]\n                ]) == [-10, 8, 8, 10], \"Error. Wrong answer\""
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_sum_list([[5,4,3,2,1]]) == [[5,4,3,2,1]]\nassert     max_sum_list([[2,2,2,2,1],[5,4,3,2,1]]) == [[5,4,3,2,1]]\nassert     max_sum_list([[2,1,3,4,5],[2,1,3,4,5]]) == [[2,1,3,4,5]]\nassert     max_sum_list([[1,2,3,4,5],[2,1,3,4,5],[3,4,5,6,7]]) == [[3,4,5,6,7]]\nassert     max_sum_list([[1,2,3,4,5],[2,1,3,4,5],[3,4,5,6,7]]) == [[3,4,5,6,7]]\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert max_sum_list([[5, -5, 5], [-5, 1, 1], [-5, -1, 5]]) == [[5, 5, 5]]\nassert max_sum_list([[-5, 1, 1], [-5, -1, 5], [5, -5, 5]]) == [[5, 5, 5]]\nassert max_sum_list([[5], [1], [1]]) == [[5], [5], [5]]\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_run_uppercase('HIGHWAY') == 7\nassert     max_run_uppercase('PYTHON') == 4\nassert     max_run_uppercase('A') == 1\nassert     max_run_uppercase('AB') == 1\nassert     max_run_uppercase('ABA') == 4\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_run_uppercase('GeeksQuiz') == 'G' and \\\n        max_run_uppercase('QgEE') == 'G' and \\\n        max_run_uppercase('QGeEE') == 'G' and \\\n        max_run_uppercase('eEE') == 'e' and \\\n        max_run_uppercase('eee') == 'e' and \\\n        max_run_uppercase('EE') == 'E' and \\\n        max_run_uppercase('E') == 'E' and \\\n        max_run_uppercase('e') == 'e' and \\\n        max_run_uppercase('ee') == 'e'\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_run_uppercase(\"\") == 0, \"Empty String\"\nassert     max_run_uppercase(\"A\") == 1, \"A\"\nassert     max_run_uppercase(\"a\") == 1, \"a\"\nassert     max_run_uppercase(\"AA\") == 1, \"AA\"\nassert     max_run_uppercase(\"AAaA\") == 3, \"AAaA\"\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_run_uppercase(\"abAA\") == 3\nassert     max_run_uppercase(\"AAa\") == 2\nassert     max_run_uppercase(\"abcABC\") == 2\nassert     max_run_uppercase(\"AAA\") == 3\nassert     max_run_uppercase(\"abAB\") == 2\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_run_uppercase('hellO') == 1\nassert     max_run_uppercase('leetcode') == 2\nassert     max_run_uppercase('abcdabcdabcd') == 2\nassert     max_run_uppercase('aAaAaAaAaAa') == 4\nassert     max_run_uppercase('leetcoded') == 3\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_run_uppercase(\"\") == 0, \"Empty string\"\nassert max_run_uppercase(\"the quick brown fox jumps over the lazy dog\") == 11, \"LeetCode Question - 1 - Implement Max Run of Uppercase Character\"\nassert max_run_uppercase(\"hElLo\") == 2, \"One letter should be uppercase\"\nassert max_run_uppercase(\"AAbb\") == 3, \"Three letters should be uppercase\"\nassert max_run_uppercase(\"three times two is four\") == 6, \"Should return 6\"\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_run_uppercase(\"DDDCCCCDDDD\") == 6\nassert     max_run_uppercase
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_run_uppercase('BACDEE') == 2, 'incorrect max_run_uppercase()'\nassert     max_run_uppercase('EBAAADA') == 1, 'incorrect max_run_uppercase()'\nassert     max_run_uppercase('A') == 1, 'incorrect max_run_uppercase()'\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    max_run_uppercase('heLlO') == 5\n    max_run_uppercase('HELLO') == 6\n    max_run_uppercase('hELLO') == 5\n    max_run_uppercase('HHELO') == 6\n    max_run_uppercase('hello') == 1\n    max_run_uppercase('HELLO WORLD') == 8\n    max_run_uppercase('HELLO WORLD!') == 6\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     first_odd([1,2,3,4,5,6,7]) == 3, \"Should be 3\"\nassert     first_odd([-1,-2,-3,-4,-5,-6,-7]) == -1, \"Should be -1\"\nassert     first_odd([]) == None, \"Should be None\"\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     first_odd([]) == None, 'List should be empty'\nassert     first_odd([0, 2, 4, 6, 8, 10]) == 6, 'First odd number is 6'\nassert     first_odd([-1, -3, -5, -7]) == -1, 'First odd number is -1'\nassert     first_odd([-3, -1, -5, -7]) == -1, 'First odd number is -1'\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     first_odd([1,2,3,4,5,6,7,8]) == 3\nassert     first_odd([1,2,3,4,5,6,7,8,9]) == 9\nassert     first_odd([]) == None\nassert     first_odd([2,4,6,8,10,12,14,16,18,20]) == 20\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     first_odd([2,4,6,1]) == 1, 'wrong first_odd function'\nassert     first_odd([2,4,6,1,3]) == 1, 'wrong first_odd function'\nassert     first_odd([2,4,6,1,3,5]) == 3, 'wrong first_odd function'\nassert     first_odd([2,4,6,1,3,5,7]) == 7, 'wrong first_odd function'\nassert     first_odd([1,2,3,4,5,6,7,8,9]) == 1, 'wrong first_odd function'\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     first_odd(['', '', 'a', 'b', 'c', 'd', 'e', 'f']) == 1\nassert     first_odd(['a', 'b', 'c', 'd', 'e', 'f']) == None\nassert     first_odd(['b', 'c', 'd', 'e', 'f']) == 1\nassert     first_odd(['c', 'd', 'e', 'f']) == None\nassert     first_odd(['a', 'b', 'c']) == None\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     first_odd([1,2,3,4,5,6,7,8,9,10]) == 9, \"Should be 9\"\nassert     first_odd([1,2,3,4,5,6,7,8,9,10,11]) == 11, \"Should be 11\"\nassert     first_odd([1,2,3,4,5,6,7,8,9,10,11,12]) == 11, \"Should be 11\"\nassert     first_odd([1,2,3,4,5,6,7,8,9,10,11,12,13]) == 13, \"Should be 13\"\nassert     first_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == 13, \"Should be 13\"\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     first_odd([]) == None, \\\n        \"first_odd([]) -> None\"\nassert     first_odd([1, 2, 3]) == None, \\\n        \"first_odd([1, 2, 3]) -> None\"\nassert     first_odd([-1, -2, -3]) == -1, \\\n        \"first_odd([-1, -2, -3]) -> -1\"\nassert     first_odd([2, 5, 6]) == 6, \\\n        \"first_odd([2, 5, 6]) -> 6\"\nassert     first_odd([2, 5, 7]) == None, \\\n        \"first_odd([2, 5, 7]) -> None\"\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef evens(lst):\n    '''\n    Write a python function to check whether a given list contains even numbers.\n    '''\n    pass\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     first_odd([1,4,2,5]) == 1, '1st'\nassert     first_odd([1,4,2,6]) == 2, '2nd'\nassert     first_odd([1,4,3,5]) == 3, '3rd'\nassert     first_odd([1,4,5,7]) == 5, '4th'\nassert     first_odd([1,4,7,9]) == 7, '5th'\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef check_K_2(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    pass\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_K([1,2],1) == True\nassert     check_K([1,2],2) == False\nassert     check_K([1,2],3) == False\nassert     check_K([1,2],4) == False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_K((1, 2, 3, 5), 0) == False\nassert     check_K((1, 2, 3, 5), 1) == True\nassert     check_K((1, 2, 3, 5), 2) == True\nassert     check_K((1, 2, 3, 5), 3) == True\nassert     check_K((1, 2, 3, 5), 4) == True\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_K(('k', 'v'), 'k') == True,'should return True'\nassert     check_K(('k', 'v'), 'v') == False,'should return False'\nassert     check_K(('k', 'v'), 'vk') == True,'should return True'\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ntest_tup = (1, 2, 3, 4, 5)\nprint(check_K(test_tup, 3))\n\nassert \ntest_tup = (1, 2, 3, 4, 5)\nprint(check_K(test_tup, 2))\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_K((1,2,3),2) == True, \"Expected True, got False\"\nassert     check_K((1,2,3),5) == False, \"Expected False, got True\"\nassert     check_K((1,1,1),1) == True, \"Expected True, got False\"\nassert     check_K((1,2,1),2) == True, \"Expected True, got False\"\nassert     check_K((1,3,1),3) == False, \"Expected False, got True\"\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_K(((1,3,4),(2,4,4),(1,4,6),(2,3,4),(2,4,2)), 3) == True, \\\n    \"For example, the test case shows that the k=3 and\" \\\n    \"the elements are (1,3,4)\" \\\n    \"there is no element in this k and tuple\" \\\n    \"that has the same elements of the other tuples\"\nassert check_K(((1,3,4),(2,4,4),(1,4,6),(2,3,4),(2,4,2)), 5) == False, \\\n    \"For example, the test case shows that the k=5 and\" \\\n    \"the elements are (1,3,4)\" \\\n    \"there is no element in this k and tuple\" \\\n    \"that has the same elements of the other tuples\"\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_smaller((0,1), (1,2)) == (0, 0)\nassert     check_smaller((-1,2), (1,2)) == (0, 1)\nassert     check_smaller((-1,2), (2,2)) == (0, -1)\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef zip_first_two_lists(*args):\n    '''\n    Write a function to zip two given lists into one.\n    '''\n    pass\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_smaller((5,3), (1,2)) == True, 'First tuple'\nassert     check_smaller((5,3), (3,2)) == False, 'Second tuple'\n\n\n'''\nWrite a function that returns True if all elements of a given tuple are unique.\n'''\ndef check_all_unique(test_tup):\n    '''\n    Write a function to check if all elements of a given tuple are unique.\n    '''\n    pass\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_smaller(test_tup1, test_tup2) == (True, False)\nassert     check_smaller(test_tup2, test_tup1) == (True, False)\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_smaller((1, 2, 3), (1, 2, 5)) == False\nassert     check_smaller((1, 2, 3), (1, 2, 4)) == True\nassert     check_smaller((1, 2, 3), (1, 2, 3)) == False\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_smaller((1,2,3,4),(0,1,2,3)) == True\nassert     check_smaller((-1,2,3,4),(0,1,2,3)) == False\nprint(\"Correct\")\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_smaller((1,2,3,4), (1,2,3)) == True\nassert     check_smaller((1,2,3,4), (1,2,3,5)) == False\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_smaller((1,2,3), (5,7,9)) == (True, True, False)\nassert     check_smaller((1,2,3), (5,6,7)) == (False, False, False)\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_smaller((1,2),(3,4))    ==    True\nassert     check_smaller((1,2),(4,3))    ==    True\nassert     check_smaller((1,2),(3,1))    ==    False\nassert     check_smaller((1,2,3),(4,5,6))    ==    False\nassert     check_smaller((1,2,3),(4,5,7))    ==    False\n"
    }
]