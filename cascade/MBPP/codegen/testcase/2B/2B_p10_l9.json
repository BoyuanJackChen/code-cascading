[
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert similar_elements((1, 1, 2, 3, 5), (1, 2, 4, 6, 7)) == (1, 2, 3),'should return (1, 2, 3)'\nassert similar_elements((1, 1, 2, 3, 5), (1, 2, 4, 6, 7)) == (1, 2, 4, 6, 7),'should return (1, 2, 4, 6, 7)'\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert         similar_elements((1,2,3), (2,3,1)) == (2,1)\nassert         similar_elements((1,2,3), (3,1,2)) == (1,2)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef similar_elements_with_map(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    pass\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     similar_elements((1, 2, 3, 4, 5, 6), (5, 4, 3, 2, 1, 6)) == (5, 4, 3, 2), \\\n    \"incorrect value\"\nassert     similar_elements((1, 2, 3, 4, 5, 6), (5, 4, 3, 2, 1, 8)) == (5, 4, 3, 2), \\\n    \"incorrect value\"\nassert     similar_elements((1, 2, 3, 4, 5, 6), (5, 4, 3, 2, 1, 7)) == (5, 4, 3), \\\n    \"incorrect value\"\nassert     similar_elements((1, 2, 3, 4, 5, 6), (5, 4, 3, 2, 1, 6)) == (5, 4, 3, 2), \\\n    \"incorrect value\"\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     similar_elements((1,2,3), (2,3,4)) == (1, 2)\nassert     similar_elements((5,6,7), (2,3,4)) == (5, 6)\nassert     similar_elements((2,3,4), (2,3,4)) == (2, 3)\nassert     similar_elements((1,2,3), (5,6,7)) == (1, 2)\nassert     similar_elements((5,6,7), (1,2,3)) == (5, 6)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     similar_elements((1, 2, 3, 4, 5), (2, 3, 4, 5, 1)) == (1, 3, 4)\nassert     similar_elements((1, 2, 3, 4, 5), (2, 3, 4, 6, 1)) == (1, 3, 4)\nassert     similar_elements((1, 2, 3, 4, 5), (2, 3, 4, 5, 1)) == (1, 3, 4)\nassert     similar_elements((1, 2, 3, 4, 5), (2, 3, 4, 6, 1)) == (1, 3, 4)\nassert     similar_elements((1, 2, 3, 4, 5), (2, 3, 4, 5, 1)) == (1, 3, 4)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     similar_elements((3, 2, 4, 4, 7), (3, 2, 5, 3, 9)) == (2, 3, 5), 'incorrect'\nassert     similar_elements((1, 1, 1, 1), (1, 1, 1)) == (1, 1, 1, 1), 'incorrect'\nassert     similar_elements((1, 1, 1, 1, 1, 1, 1, 1, 1, 1), (1, 1, 1, 1, 1)) == (1, 1, 1), 'incorrect'\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     similar_elements([1,2,3,4,5,6], [2,3,4,6,5,1]) == {4,5,6}\nassert     similar_elements([1,2,3,4], [2,3,4,6,5,1]) == {2,3,4}\nassert     similar_elements([1,2,3,4,5,6], [2,3,4]) == set()\nassert     similar_elements([], []) == set()\n\ndef similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    pass\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     similar_elements([1,2,3,4],[5,6,7,8]) == [(2,5),(3,6)]\nassert     similar_elements([1,2,3,4,5,6],[7,8,9,10,11,12]) == []\nassert     similar_elements([1,2,3,4,5],[6,7,8,9,10]) == [(2,7),(3,8)]\nassert     similar_elements([],[]) == []\nassert     similar_elements([],[1,2,3,4]) == []\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef is_prime(n):\n    '''\n    Write a python function to determine whether a number is prime.\n    '''\n    pass"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_not_prime(2) == True\nassert     is_not_prime(5) == False\nassert     is_not_prime(4) == True\nassert     is_not_prime(10) == True\nassert     is_not_prime(20) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_not_prime(2) == False\nassert     is_not_prime(1) == False\nassert     is_not_prime(0) == False\nassert     is_not_prime(7) == True\nassert     is_not_prime(9) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_not_prime(1) == False\nassert     is_not_prime(2) == False\nassert     is_not_prime(3) == False\nassert     is_not_prime(4) == True\nassert     is_not_prime(5) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_not_prime(2) == False, \"is_not_prime should return False for 2.\"\nassert     is_not_prime(4) == True, \"is_not_prime should return True for 4.\"\nassert     is_not_prime(23) == True, \"is_not_prime should return True for 23.\"\n\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_not_prime(0) == False\nassert     is_not_prime(1) == False\nassert     is_not_prime(2) == False\nassert     is_not_prime(3) == False\nassert     is_not_prime(4) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_not_prime(2) == False\nassert     is_not_prime(3) == True\nassert     is_not_prime(5) == False\nassert     is_not_prime(12) == False\nassert     is_not_prime(13) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_not_prime(2) == False, \"is_not_prime(2) = %s\" % (is_not_prime(2))\nassert     is_not_prime(3) == False, \"is_not_prime(3) = %s\" % (is_not_prime(3))\nassert     is_not_prime(4) == False, \"is_not_prime(4) = %s\" % (is_not_prime(4))\nassert     is_not_prime(5) == False, \"is_not_prime(5) = %s\" % (is_not_prime(5))\nassert     is_not_prime(6) == False, \"is_not_prime(6) = %s\" % (is_not_prime(6))\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    pass"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef test_heap_queue_largest():\n    for A,n in ([[3,2,1,5,6,4], 2], \n               [[2,6,3,5,1,4], 4],\n               [[1,2,3,4,5,6], 4]):\n        assert heap_queue_largest(A,n) == sorted(A,reverse=True)[:n]\n    print('heap_queue_largest: pass')\n\ndef heap_queue_largest_with_dict(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    Using dictionary to keep the counting of each integer.\n    '''\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    #case 1\n    print(heap_queue_largest([-2, -1, 2, 3, 4],3))\n    #case 2\n    print(heap_queue_largest([10,20,5,-2,-4,3,2,3,5,2],4))\n    #case 3\n    print(heap_queue_largest([4,3,5,1,2],4))\n    #case 4\n    print(heap_queue_largest([4,3,5,1,2],3)"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     heap_queue_largest([4,1,3,2],2) == [3,2,4,1]\nassert     heap_queue_largest([4,1,3,2],4) == [3,2,4,1]\nassert     heap_queue_largest([4,1,3,2],5) == [3,2,4,1,2]\nassert     heap_queue_largest([4,1,3,2],6) == [3,2,4,1,2,3]\n\ndef heap_queue_largest_with_heapq(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heapq.heapify(nums)\n    \n    # delete the n largest number\n    del heapq.nlargest(n,nums)\n    \n    return sorted(nums,reverse=True)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     heap_queue_largest([10, 5, 1, 3, 9, 0, -3], 3) == [-3, 0, 10, 9, 5, 3], \"Test Failed\"\nassert     heap_queue_largest([10, 5, 1, 3, 9, 0, -3], 5) == [-3, 0, 10, 9, 5], \"Test Failed\"\n\ndef heap_queue_smallest(nums, n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     heap_queue_largest([],1) == []\nassert     heap_queue_largest([1],1) == [1]\nassert     heap_queue_largest([1,2],1) == [2,1]\nassert     heap_queue_largest([1,2,3],1) == [3,2,1]\nassert     heap_queue_largest([1,2,3,4],1) == [4,3,2,1]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     heap_queue_largest([2,3,1,5,4,2],3) == [5, 4, 3], \"Wrong!\"\nassert     heap_queue_largest([2,3,1,5,4,2],5) == [2, 3, 1, 4, 5], \"Wrong!\"\nassert     heap_queue_largest([1,1,1,1,1,1,1,1],1) == [1], \"Wrong!\"\nassert     heap_queue_largest([2,1,5,4,3],3) == [5, 4, 3], \"Wrong!\"\nprint(\"Passed!\")\n\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef kth_largest(arr, k):\n    '''\n    Find the kth largest number in a given array.\n    '''\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     heap_queue_largest([-5,5,12,7,11,-1,2,11],1) == [-5, 11, 12, 2, 11], 'Should be -5, 11, 12, 2, 11'\nassert     heap_queue_largest([-5,5,12,7,11,-1,2,11],2) == [-5, 11, 12, 2, 11], 'Should be -5, 11, 12, 2, 11'\nassert     heap_queue_largest([-5,5,12,7,11,-1,2,11],3) == [-5, 11, 12, 2, 11], 'Should be -5, 11, 12, 2, 11'\nassert     heap_queue_largest([-5,5,12,7,11,-1,2,11],4) == [-5, 11, 12, 2, 11], 'Should be -5, 11, 12, 2, 11'\n\ndef heap_queue_largest_1(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    Use a custom heap data structure.\n    '''\n    # if the length is zero, then the result is empty\n    if len(nums) == 0:\n        return []\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    pass\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert [5, 1, 3, 2, -2, 0] == heap_queue_largest([5, 1, 3, 2, -2, 0],5)\nassert [] == heap_queue_largest([1,2,3,4,5],2)\nassert [] == heap_queue_largest([5,1,3,2,5,4],3)\n\ndef heap_queue_smallest(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    pass\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert not is_Power_Of_Two(15)\nassert not is_Power_Of_Two(1)\nassert is_Power_Of_Two(1024)\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_Power_Of_Two(6) == True, 'Should be True'\nassert     is_Power_Of_Two(7) == False, 'Should be False'\nassert     is_Power_Of_Two(2) == True, 'Should be True'\nassert     is_Power_Of_Two(3) == True, 'Should be True'\nassert     is_Power_Of_Two(10) == True, 'Should be True'\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert not is_Power_Of_Two(2)\nassert is_Power_Of_Two(3)\nassert not is_Power_Of_Two(4)\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_Power_Of_Two (3) == False\nassert     is_Power_Of_Two (16) == True\nassert     is_Power_Of_Two (1024) == True\nassert     is_Power_Of_Two (1) == False\nassert     is_Power_Of_Two (1) == False\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_Power_Of_Two(32) == False, \"Wrong answer\"\nassert     is_Power_Of_Two(24) == True, \"Wrong answer\"\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_Power_Of_Two(1) == False, 'is_Power_Of_Two(1) is not correct'\nassert     is_Power_Of_Two(6) == False, 'is_Power_Of_Two(6) is not correct'\nassert     is_Power_Of_Two(14) == True, 'is_Power_Of_Two(14) is not correct'\nassert     is_Power_Of_Two(20) == True, 'is_Power_Of_Two(20) is not correct'\nassert     is_Power_Of_Two(8) == False, 'is_Power_Of_Two(8) is not correct'\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_Power_Of_Two(5) == False, 'is_Power_Of_Two is not working properly'\nassert     is_Power_Of_Two(2) == True, 'is_Power_Of_Two is not working properly'\nassert     is_Power_Of_Two(10) == False, 'is_Power_Of_Two is not working properly'\nassert     is_Power_Of_Two(100) == False, 'is_Power_Of_Two is not working properly'\nassert     is_Power_Of_Two(1000) == True, 'is_Power_Of_Two is not working properly'\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_Power_Of_Two(2) == True, '2 is Power of 2'\nassert     is_Power_Of_Two(10) == False, '10 is not Power of 2'\nassert     is_Power_Of_Two(9) == True, '9 is Power of 2'\nassert     is_Power_Of_Two(99) == False, '99 is not Power of 2'\nassert     is_Power_Of_Two(1) == True, '1 is Power of 2'\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_char_long('wakawaa') == ['wakawaa']\nassert     find_char_long('wakawaa ') == ['wakawaa']\nassert     find_char_long('wakawaa  ') == ['wakawaa']\nassert     find_char_long('wakawaa') == ['wakawaa']\nassert     find_char_long('wakawaaa') == []\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_char_long('The quick brown fox jumps over the lazy dog') == ['fox','brown','dog']\nassert     find_char_long('The quick brown fox jumps over the lazy fox') == ['fox','brown','fox']\nassert     find_char_long('The quick brown fox jumps over the lazy fox jumps') == ['fox','brown','fox','jumps']\nassert     find_char_long('The quick brown fox jumps over the lazy fox jumps and then jumps over the lazy fox') == ['fox','brown','fox','jumps','jumps','fox']\nassert     find_char_long('The quick brown fox jumps over the lazy fox jumps and then jumps over the lazy fox and then jumps over the lazy fox') == ['fox','brown','fox','jumps','jumps','fox','jumps','fox']\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_char_long(\"I'm a boy\") == True, \"Wrong\"\nassert     find_char_long(\"I'm a boy and I'm a girl\") == True, \"Wrong\"\nassert     find_char_long(\"I'm a boy and I'm a girl and I'm a girl\") == False, \"Wrong\"\nassert     find_char_long(\"I'm a boy and I'm a girl and I'm a girl and I'm a girl\") == False, \"Wrong\"\nassert     find_char_long(\"I'm a boy and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl and I'm a girl an"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_char_long(\"caf\u00e9\") == [], \"Should return an empty list.\"\nassert find_char_long(\"caf\u00e9\") == ['caf\u00e9'], \"Should return a list with 'caf\u00e9'.\"\nassert find_char_long(\"Caf\u00e9\") == ['Caf\u00e9'], \"Should return a list with 'Caf\u00e9'.\"\nassert find_char_long(\"caf\u00e9\") == ['caf\u00e9'], \"Should return a list with 'caf\u00e9'.\"\nassert find_char_long(\"fgh\") == [], \"Should return an empty list.\"\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_char_long('') == []\nassert     find_char_long(' ') == []\nassert     find_char_long('A') == ['A']\nassert     find_char_long('A very very very long word.') == ['A','very','very', 'long', 'word']\nassert     find_char_long('this is a very long word') == ['this', 'is', 'a','very', 'long', 'word']\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_char_long(\"All that glitters isn't enough gold\")     ==     [ \"all\", \"let\", \"it\", \"too\"]\nassert     find_char_long(\"All too small\")                             ==     []\nassert     find_char_long(\"Hi\")                                     ==     []\nassert     find_char_long(\"Hi\")                                     ==     []\nassert     find_char_long(\"Hi\")                                     ==     []\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_char_long('') == 0\nassert     find_char_long('abc') == 1\nassert     find_char_long('a b c') == 2\nassert     find_char_long('a   c') == 1\nassert     find_char_long('a    c') == 1\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_char_long('code') == ['code']\nassert     find_char_long('codecode') == ['codecode']\nassert     find_char_long('codecode') == ['codecode']\nassert     find_char_long('codecode') == ['codecode']\nassert     find_char_long('codecode') == ['codecode']\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_char_long(\"Code\")     == [ ]\nassert     find_char_long(\"Cod\")     == [ ]\nassert     find_char_long(\"code\")     == [ ]\nassert     find_char_long(\"cod\")     == [ ]\nassert     find_char_long(\"Code Code Code\")     == [ ]\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_char_long('makeup') == True,'should return True'\nassert     find_char_long('hello') == False,'should return False'\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     square_nums([1,2,3]) == [1,4,9], 'incorrect'\nassert     square_nums([0,4,9]) == [0,16,25], 'incorrect'\nassert     square_nums([-3,-1,-4]) == [9,9,49], 'incorrect'\nassert     square_nums([]) == [], 'incorrect'\nprint('correct')\n\n\n'''\nExercise 5:\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     square_nums([1, 4, 9]) == [1, 4, 9]\nassert     square_nums([1, 4, 9, 16]) == [1, 4, 9, 16]\nassert     square_nums([1, 4, 9, 16, 25]) == [1, 4, 9, 16, 25]\nassert square_nums([]) == []\nassert square_nums([1, 2, 3, 4]) == [1, 4, 9, 16]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     square_nums([1, 4, 9]) == [1, 4, 9], 'WRONG!'\nassert     square_nums([0, -4, 9]) == [0, 4, 81], 'WRONG!'\nassert     square_nums([]) == [], 'WRONG!'\nassert     square_nums([]) == [], 'WRONG!'"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert square_nums([1,2,3,4]) == [1,4,9,16]\nassert square_nums([0,2,3,4]) == [0,4,9,16]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    square_nums([1, 2, 3, 4]) == [1, 4, 9, 16]\n    square_nums([-2, -1, 0, 1, 2]) == [-4, 0, 4, 4, 4]\n    square_nums([-2, -1, 0, 1, 2, 3, 4, 5, 6]) == [-4, 0, 4, 16, 256, 4096, 65536, 131072, 262144]\n    square_nums([0, 2, 4, 6, 8, 10, 12, 14, 16]) == [0, 64, 256, 1024, 4096, 8192, 16384, 32768, 65536]\n    square_nums([1, 2, 4, 6, 8, 10, 12, 14, 16]) == [1, 4, 16, 64, 256, 4096, 8192, 16384, 262144]\n    square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == []\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef multiply_by_ten(nums):\n    '''\n    Write a function to multiply elements of a list by 10.\n    '''\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     square_nums([1,2,3,4]) == [1,4,9,16]\nassert square_nums([0]) == [0]\nassert square_nums([]) == []\nassert square_nums('') == []\nassert square_nums([2,3,4,5]) == []\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     square_nums(4) == [16, 1, 4, 1]\nassert     square_nums(0) == []\n\n\n\ndef get_squares(nums):\n    '''\n    Write a function that returns squares of individual elements in a list.\n    '''\n    pass\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Rotations(\"a\") == 0, \"Input 'a' should be 0.\"\nassert     find_Rotations(\"ab\") == 0, \"Input 'ab' should be 0.\"\nassert     find_Rotations(\"abc\") == 0, \"Input 'abc' should be 0.\"\nassert     find_Rotations(\"abcd\") == 1, \"Input 'abcd' should be 1.\"\nassert     find_Rotations(\"abcde\") == 1, \"Input 'abcde' should be 1.\"\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Rotations('baa') == 1 \nassert     find_Rotations('aab') == 0 \nassert     find_Rotations('aa') == 1 \nassert     find_Rotations('ab') == 0 \nassert     find_Rotations('ba') == 1 \n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Rotations(\"s\") == 1, \"s = \" + str(s)\nassert     find_Rotations(\"t\") == 2, \"t = \" + str(t)\nassert     find_Rotations(\"r\") == 0, \"r = \" + str(r)\nassert     find_Rotations(\"ir\") == 1, \"ir = \" + str(ir)\nassert     find_Rotations(\"it\") == 2, \"it = \" + str(it)\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Rotations(\"aabcccccaaa\") == 4, \"Should be 4\"\nassert     find_Rotations(\"aabcccccaaa\") == 1, \"Should be 1\"\nassert     find_Rotations(\"aabcccccaaa\") == 2, \"Should be 2\"\nassert     find_Rotations(\"aabcccccaaa\") == 3, \"Should be 3\"\nassert     find_Rotations(\"aabcccccaaa\") == 0, \"Should be 0\"\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Rotations('waterbottle') == 2, 'Wrong answer'\nassert     find_Rotations('waterbottle') == 2, 'Wrong answer'\nassert     find_Rotations('firefly') == 0, 'Wrong answer'\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == \"__main__\": \n    print(\"\\nTest case 1\")\n    str1 = 'aacb'\n    assert find_Rotations(str1) == 0, print(\"Expected: 0; Got: {}\".format(find_Rotations(str1)))\n    str2 = 'abac'\n    assert find_Rotations(str2) == 1, print(\"Expected: 1; Got: {}\".format(find_Rotations(str2)))\n    print(\"\\nTest case 2\")\n    str3 = 'abcd'\n    assert find_Rotations(str3) == -1, print(\"Expected: -1; Got: {}\".format(find_Rotations(str3)))\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Rotations('ABAB') == 1, 'Example 1, Expected 1, Actual 1'\nassert     find_Rotations('ABBC') == 2, 'Example 2, Expected 2, Actual 2'\nassert     find_Rotations('ABCBC') == 2, 'Example 3, Expected 2, Actual 2'\nassert     find_Rotations('ABCBA') == 0, 'Example 4, Expected 0, Actual 0'\nassert     find_Rotations('BABA') == 1, 'Example 5, Expected 1, Actual 1'\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(\"Expected Value:\")\nprint(\"[0, 0, 1, 2, 2, 3, 4, 4, 5, 5]\")\nprint(\"Actual Value:\")\nprint(find_Rotations(\"abcd\")"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_Occ(\"luminar\",\"l\") == \"uminar\"\nassert     remove_Occ(\"luminar\",\"m\") == \"luminar\"\nassert     remove_Occ(\"luminar\",\"k\") == \"luminar\"\nassert     remove_Occ(\"luminar\",\"r\") == \"luminar\"\nassert     remove_Occ(\"luminar\",\"c\") == \"luminar\"\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_Occ('alex', 'x') == 'al'\nassert     remove_Occ('A.N.G', 'G') == 'A.N.N'\nassert     remove_Occ('aa', 'a') == ''"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_Occ('abcde','c') == 'abcd'\nassert     remove_Occ('abcde','d') == 'abc'\nassert     remove_Occ('abcde','e') == 'abc'\nassert     remove_Occ('abcde','f') == 'abc'\nassert     remove_Occ('abcde','h') == 'abc'\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_Occ(\"abac\",\"a\") == \"ab\"\nassert     remove_Occ(\"abac\",\"c\") == \"ab\"\nassert     remove_Occ(\"abac\",\"k\") == \"ab\"\n\ndef remove_Char(string): \n    '''\n    Write a python function to remove the characters that are repeated in a string.\n    '''\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_Occ('hello','o') == 'hell'\nassert     remove_Occ('hell','l') == 'hello'\nassert     remove_Occ('hell','e') == 'hello'\nassert     remove_Occ('hell','l') == 'hell'\nassert     remove_Occ('hell','o') == 'hello'\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nremove_Occ(\"abcdefgh\",'c') == \"bdfgh\"\nassert remove_Occ(\"abcdefgh\",'a') == \"bcdefgh\"\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_Occ(\"A\",\"a\") == \"A\"\nassert     remove_Occ(\"A\",\"A\") == \"\"\nassert     remove_Occ(\"A\",\"z\") == \"A\"\nassert     remove_Occ(\"A\",\"B\") == \"A\"\nassert     remove_Occ(\"ABC\",\"A\") == \"ABC\"\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_Occ('pune', 'e') == 'pune'\nassert     remove_Occ('pune', 'r') == 'pune'\nassert     remove_Occ('pune','s') == 'pune'\nassert     remove_Occ('pune', 'e') == 'pune'\nassert     remove_Occ('pune', 'p') == 'pune'\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_matrix([[1,3,3],\n                [2,4,6],\n                [7,8,9]]) == [[1,2,3],\n                [4,5,6],\n                [7,8,9]]\nassert     sort_matrix([[1,3,3],\n                [2,4,6],\n                [7,8,9],\n                [4,5,6]]) == [[1,2,3],\n                [4,5,6],\n                [7,8,9],\n                [2,4,6]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_matrix([[7, -3, -6, -8, -8],\n    [1, -2, -4, 3, -5],\n    [-1, -2, -2, -4, -3],\n    [0, -1, -3, 2, -2],\n    [0, 0, 0, 0, 0]]    ==    [[0, 0, 0, 0, 0],\n    [-1, -2, -2, -4, -3],\n    [-3, -4, -6, -8, -8],\n    [7, -3, -6, -8, -8],\n    [1, -2, -4, 3, -5]]    )\nassert     sort_matrix([[3, 7, 4, -5],\n    [-8, 6, -1, -2],\n    [-9, -4, -7, -8],\n    [-6, -5, 0, -3]]    ==    [[-6, -5, 0, -3],\n    [-7, -4, -7, -8],\n    [-8, -9, -4, -5],\n    [3, 4, 6, 7]]    )\nassert     sort_matrix([[4, 4, -2, -1],\n    [4, 1, 2, 0],\n    [-3, -1, -2, 0]]    ==    [[-3, -1, -2, 0],\n    [4, 1, 2, 0],\n    [4, 4, -2, -1]]    )\nassert     sort_matrix([[4, -5, 2, 0, 2, 0, -3],\n    [0, -5, 0, 0, 0, 0, 0],\n    [-1, 0, -5, 0, 0, 0, 0]]    ==    [[-1, 0, 0, 0, 0, 0, 0],\n    [0, 0, -5, 0, 0, 0, 0],\n    [0, 0, 0, -5, 0, 0, 0],\n    [0, 0, 2, 4, -5, 0, 0],\n    [0, 2, -5, 0, -3, 0, 0],\n    [0, 0, 0, 0, 0, -5, 2]]    )\nassert     sort_matrix([[-2, -2, -2],\n    [0, 0, 0],\n    [-1, -1, -1]]    ==    [[-1, -1, -1],\n    [0, 0, 0],\n    [-2, -2, -2]]    )\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_matrix([[2, 0, 0],\n                        [4, 4, 4],\n                        [3, 5, 4]]) == [[2, 0, 0],\n                                    [4, 4, 4],\n                                    [3, 5, 4]]\nassert     sort_matrix([[1, 0, 0],\n                        [5, 4, 4],\n                        [3, 2, 0]]) == [[1, 0, 0],\n                                    [3, 2, 0],\n                                    [5, 4, 4]]\nassert     sort_matrix([[1, 2, 3],\n                        [2, 3, 4],\n                        [5, 4, 3]]) == [[1, 2, 3],\n                                    [2, 3, 4],\n                                    [5, 4, 3]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nM = [[1, 2],\n     [1, 7],\n     [2, 5]]\n\nexpected = [[1, 1],\n             [1, 7],\n             [2, 5]]\n\nassert sort_matrix(M) == expected, \"WRONG!\"\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_matrix([[2,2,3],[3,1,1],[1,1,1]]) == [[1,1,1],[1,1,1],[2,2,3]]\nassert     sort_matrix([[2,1],[1,2],[0,0]]) == [[0,0],[1,2],[2,1]]\nassert     sort_matrix([[1,2],[2,3],[3,4]]) == [[3,4],[2,3],[1,2]]\nassert     sort_matrix([[0,2],[5,1]]) == [[0,2],[5,1]]\nassert     sort_matrix([[1,1,1],[1,1,1],[1,1,1]]) == [[1,1,1],[1,1,1],[1,1,1]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nsort_matrix([[1,2,3],[1,2,3]]) == [[1,1,3],[1,2,3]]\nassert sort_matrix([[2,1,4],[3,2,6]]) == [[1,2,4],[2,3,6]]\nassert sort_matrix([[6,3,2],[1,2,3]]) == [[1,2,3],[2,3,6]]\nassert sort_matrix([[2,3,2],[1,2,3]]) == [[1,2,3],[2,3,2]]\nassert sort_matrix([[3,2,1],[1,2,3]]) == [[1,2,3],[2,3,1]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_matrix([[1,2,3],[4,5,6],[7,8,9]]) == [[1,2,3],[4,5,6],[7,8,9]]\nassert     sort_matrix([[1,2,3],[2,4,6],[3,5,9]]) == [[1,2,3],[2,4,6],[3,5,9]]\nassert     sort_matrix([[1,2,3,4],[5,6,7,8]]) == [[1,2,3,4],[5,6,7,8]]\nassert     sort_matrix([[-1,-2,-3,-4],[-5,-6,-7,-8],[-9,-10,-11,-12]]) == [[-1,-2,-3,-4],[-5,-6,-7,-8],[-9,-10,-11,-12]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_matrix([[10,10],[10,20],[10,10]]) == [[10,10],[10,20],[10,10]]\nassert     sort_matrix([[10,20],[20,10],[10,10]]) == [[10,10],[10,20],[20,10]]\nassert     sort_matrix([[5,10,15],[20,25,30],[35,40,45]]) == [[5,10,15],[20,25,30],[35,40,45]]\nassert     sort_matrix([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]]) == [[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]]\nassert     sort_matrix([[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]]) == [[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_matrix([[4, 3], [2, 1]]) == [[2, 1], [4, 3]]\nassert     sort_matrix([[1, 4], [2, 3], [3, 2]]) == [[1, 4], [2, 3], [3, 2]]\nassert     sort_matrix([[2, 1], [1, 2]]) == [[1, 2], [2, 1]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_matrix([[1,2,3],[4,5,6],[7,8,9]]) == [[1,2,3],[4,5,6],[7,8,9]]\nassert     sort_matrix([[2,4,5],[8,1,3],[4,6,3],[5,7,3]]) == [[2,4,5],[4,6,3],[5,7,3],[8,1,3]]\nassert     sort_matrix([[1,4,4],[2,5,2],[3,6,3],[4,5,5]]) == [[1,4,4],[2,5,2],[4,5,5],[3,6,3]]\nassert sort_matrix([[9,1,8,7],[2,3,4,5],[6,5,4,3],[1,7,4,9]]) == [[1,7,4,9],[2,3,4,5],[6,5,4,3],[9,1,8,7]]\nassert sort_matrix([[3,4,1,2],[4,3,2,1],[1,3,4,2],[2,1,4,3]]) == [[1,2,3,4],[2,1,3,4],[2,1,4,3],[3,4,1,2]]\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Volume(1, 2, 2) == 2\nassert     find_Volume(1, 1, 2) == 0\nassert     find_Volume(1, 2, 1) == 0\nassert     find_Volume(2, 2, 1) == 2\nassert     find_Volume(2, 1, 1) == 0\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Volume(1,1,2) == 4, 'Volume is incorrect'\nassert     find_Volume(1,2,3) == 6, 'Volume is incorrect'\nassert     find_Volume(1,2,5) == 10, 'Volume is incorrect'\nassert     find_Volume(1,2,10) == 20, 'Volume is incorrect'\nassert     find_Volume(1,2,10.5) == 22.5, 'Volume is incorrect'\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Volume(5,3,7) == 26.5\nassert     find_Volume(1,1,1) == 1\nassert     find_Volume(1,1,2) == 2\nassert     find_Volume(1,2,1) == 2\nassert     find_Volume(2,3,4) == 14\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Volume(1,1,2) == 4\nassert     find_Volume(2,3,4) == 16\nassert     find_Volume(2,3,2) == 6\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Volume(1,1,1) == 1, \"The volume of a triangle is 1\"\nassert     find_Volume(2,3,4) == 10, \"The volume of a triangle is 10\"\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_Volume(1,2,3) == 6, \"Wrong Answer\"\nassert     find_Volume(1,3,5) == 15, \"Wrong Answer\"\nassert     find_Volume(7,5,3) == 60, \"Wrong Answer\"\nassert     find_Volume(7,2,3) == 21, \"Wrong Answer\"\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_Volume(10,7,3) == 58.71, \"Expected: 58.71. Got: {}\".format(find_Volume(10,7,3))\nassert     find_Volume(5,3,1) == 25.0, \"Expected: 25.0. Got: {}\".format(find_Volume(5,3,1))\nassert     find_Volume(2,4,5) == 20.0, \"Expected: 20.0. Got: {}\".format(find_Volume(2,4,5))\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Volume(3,2,5) == 2\nassert    find_Volume(4,1,2) == 1\nassert    find_Volume(3,2,5) == "
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Volume(10,10,10) == 10000, \"Wrong\"\nassert     find_Volume(5,5,5) == 25, \"Wrong\"\nassert     find_Volume(1,1,1) == 1, \"Wrong\"\nassert     find_Volume(0.5,0.5,0.5) == 0.5, \"Wrong\""
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_lowercase_underscore('This is a string with lowercase letters') == True\nassert     text_lowercase_underscore('This is a string with numbers') == False\nassert     text_lowercase_underscore('This is a string with numbers and lowercase letters') == True\nassert     text_lowercase_underscore('This is a string with underscore') == False\nassert     text_lowercase_underscore('This is a string with numbers and underscore') == False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_lowercase_underscore(\"thisIsATest\") \nassert     text_lowercase_underscore(\"isATest\") \nassert     text_lowercase_underscore(\"this_is_a_test\") \nassert     text_lowercase_underscore(\"is_a_test\") \nassert     text_lowercase_underscore(\"this-is-a-test\") \n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_lowercase_underscore('abcd_efghi_abc_def') == False\nassert     text_lowercase_underscore('abcdefgh_') == False\nassert     text_lowercase_underscore('abcd_efghi') == True\nassert     text_lowercase_underscore('AbcdEfghi') == True\nassert     text_lowercase_underscore('ABCDEFGH') == True\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_lowercase_underscore('lowercase_under_scores') == False\nassert     text_lowercase_underscore('lowercase_and_upper_scores') == True\nassert     text_lowercase_underscore('0_lowercase_and_under_scores') == False\nassert     text_lowercase_underscore('lower_case_and_underscore') == True\nassert     text_lowercase_underscore('4_a_bc_3d_efg') == False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_lowercase_underscore(\"abc_ABCdef__\") == True\nassert     text_lowercase_underscore(\"abc_ABCdef\") == False\nassert     text_lowercase_underscore(\"abc_ABCdef__2\") == True\nassert     text_lowercase_underscore(\"abc_ABCdef_2\") == False\nassert     text_lowercase_underscore(\"\") == False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_lowercase_underscore('the_quick_brown_fox')\nassert     not text_lowercase_underscore('THE_QUICK_BROWN_FOX')\nassert     not text_lowercase_underscore('the_quick_brown_fox_')\nassert     not text_lowercase_underscore('The-Quick-Brown-Fox')\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_lowercase_underscore('UpperCase123') == True\nassert     text_lowercase_underscore('UpperCase_123') == True\nassert     text_lowercase_underscore('UpperCase123_') == False\nassert     text_lowercase_underscore('UpperCase_123') == False\nassert     text_lowercase_underscore('UpperCase_1_2') == False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_lowercase_underscore('') == True, \"Empty\"\nassert     text_lowercase_underscore('a') == False, \"A\"\nassert     text_lowercase_underscore('_') == True, \"Uppercase\"\nassert     text_lowercase_underscore('_abc') == True, \"Uppercase and letters\"\nassert     text_lowercase_underscore('a_') == False, \"Uppercase and underscore\"\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_lowercase_underscore('a1b2c') == True, \nassert     text_lowercase_underscore('A1b2C') == False, \nassert     text_lowercase_underscore('1') == False, \nassert     text_lowercase_underscore('a1b2C_') == False, \n\ndef text_uppercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of uppercase letters joined with an underscore and false otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_lowercase_underscore('abc') == False\nassert     text_lowercase_underscore('abc_123') == True\nassert     text_lowercase_underscore('abc_123_abc_123') == True\nassert     text_lowercase_underscore('abc_123_abc_123_abc_123') == False\nassert     text_lowercase_underscore('abc_123_abc_123_abc_123_abc_123') == True\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     square_perimeter(1) == 1\nassert     square_perimeter(5) == 4\nassert     square_perimeter(3) == 8"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     square_perimeter(3) == 4\nassert     square_perimeter(7) == 14\nassert     square_perimeter(0) == 0\nassert     square_perimeter(1) == 1\nassert     square_perimeter(4) == 8\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef square_area(a):\n    '''\n    Write a function that returns the area of a square given its side length as input.\n    '''\n    pass\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     square_perimeter(5) == 10\nassert     square_perimeter(10) == 20\nassert     square_perimeter(15) == 30\nassert     square_perimeter(20) == 40\nassert     square_perimeter(25) == 50\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef square_area(a):\n    '''\n    Write a function that returns the area of a square given its side length as input.\n    '''\n    pass\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     square_perimeter(2) == 4\nassert     square_perimeter(7) == 14\nassert     square_perimeter(3) == 12\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nsquare_perimeter(2) == 4\n\nassert square_perimeter(1) == 4\nassert square_perimeter(0) == 0\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     square_perimeter(0) == 0, 'The first side of the square is 0'\nassert     square_perimeter(3) == 6, 'The perimeter of a 3 by 3 square is 6'\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef remove_characters_from_string(string_1, string_2):\n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef is_palindrome(string):\n    '''\n    Write a function to check if the given string is palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef str_to_list(string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    pass\n\nassert str_to_list('String', 'e') == 'Sting'\n\ndef str_to_list(string, string1):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef str_to_list1(string):\n    '''\n    Write a function to replace multiple characters from the first string with the same character in the second string.\n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     str_to_list(\"a\",\"a\") == \"a\"\nassert     str_to_list(\"aa\",\"a\") == \"\"\nassert     str_to_list(\"aacccccccccccccccccccc\",\"ccccccccccccccccccccc\") == \"\"\n\ndef str_to_dict(key, string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef get_common_letters(string_1, string_2):\n    '''\n    Write a function to find out the common letters in two strings.\n    '''\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint('Testing...')\nprint(test_duplicate(list1)) # True\nprint(test_duplicate(list2)) # False\nprint(test_duplicate(list3)) # True\nprint(test_duplicate(list4)) # True\nprint(test_duplicate(list5)) # False\nprint(test_duplicate(list6)) # True\nprint(test_duplicate(list7)) # False\nprint(test_duplicate(list8)) # True\nprint(test_duplicate(list9)) # False\nprint(test_duplicate(list10)) # False\nprint(test_duplicate(list11)) # True\nprint(test_duplicate(list12)) # False\nprint(test_duplicate(list13)) # True\nprint(test_duplicate(list14)) # False\nprint(test_duplicate(list15)) # False\nprint(test_duplicate(list16)) # True\nprint(test_duplicate(list17)) # False\nprint(test_duplicate(list18)) # True\nprint(test_duplicate(list19)) # False\nprint(test_duplicate(list20)) # True\nprint(test_duplicate(list21)) # False\nprint(test_duplicate(list22)) # True\nprint(test_duplicate(list23)) # False\nprint(test_duplicate(list24)) # True\nprint(test_duplicate(list25)) # False\nprint(test_duplicate(list26)) # True\nprint(test_duplicate(list27)) # False\nprint(test_duplicate(list28)) # True\nprint(test_duplicate(list29)) # False\nprint(test_duplicate(list30)) # True\nprint(test_duplicate(list31)) # False\nprint(test_duplicate(list32)) # True\nprint(test_duplicate(list33)) # False\nprint(test_duplicate(list34)) # True\nprint(test_duplicate(list35)) # False\nprint(test_duplicate(list36)) # True\nprint(test_duplicate(list37)) # False\nprint(test_duplicate(list38)) # True\nprint(test_duplicate(list39)) # False\nprint(test_duplicate(list40)) # True\nprint(test_duplicate(list41)) # False\nprint(test_duplicate(list42)) # True\nprint(test_duplicate(list43)) # False\nprint(test_duplicate(list44)) # True\nprint(test_duplicate(list45)) # False\nprint(test_duplicate(list46)) # True\nprint(test_duplicate(list47)) # False\nprint(test_duplicate(list48)) # True\nprint(test_duplicate(list49)) # False\nprint(test_duplicate(list50)) # True\nprint(test_duplicate(list51)) # False\nprint(test_duplicate(list52)) # True\nprint(test_duplicate(list53)) # False\nprint(test_duplicate(list54)) # True\nprint(test_duplicate(list55)) # False\nprint(test_duplicate(list56)) # True\nprint(test_duplicate(list57)) # False\nprint(test_duplicate(list58)) # True\nprint(test_duplicate(list59)) # False\nprint(test_duplicate(list60)) # True\nprint(test_duplicate(list61)) # False\nprint(test_duplicate(list62)) # True\nprint(test_duplicate(list63)) # False\nprint(test_duplicate(list64)) # True\nprint(test_duplicate(list65)) # False\nprint(test_duplicate(list66)) # True\nprint(test_duplicate(list67)) # False\nprint(test_duplicate(list68)) # True\nprint(test_duplicate(list69)) # False\nprint(test_duplicate(list70)) # True\nprint(test_duplicate(list71)) # False\nprint(test_duplicate(list72)) # True\nprint(test_duplicate(list73)) # False\nprint(test_duplicate(list74)) # True\nprint(test_duplicate(list75)) # False\nprint(test_duplicate(list76)) # True\nprint(test_duplicate(list77)) # False\nprint(test_duplicate(list78)) # True\nprint(test_duplicate(list79)) # False\nprint(test_duplicate(list80)) # True\nprint(test_duplicate(list81)) # False\nprint(test_duplicate(list82)) # True\nprint(test_duplicate(list83)) # False\nprint(test_duplicate(list84)) # True\nprint(test_duplicate(list85)) # False\nprint(test_duplicate(list86)) # True\nprint(test_duplicate(list87)) # False\nprint(test_duplicate(list88)) # True\nprint(test_duplicate(list89)) # False\nprint(test_duplicate(list90)) # True\nprint(test_duplicate(list91)) # False\nprint(test_duplicate(list92)) # True\nprint(test_duplicate(list93)) # False\nprint(test_duplicate(list94)) # True\nprint(test_duplicate(list95)) # False\nprint(test_duplicate(list96)) # True\nprint(test_duplicate(list97)) # False\nprint(test_duplicate(list98)) # True\nprint(test_duplicate(list99)) # False\nprint(test_duplicate(list100)) # True\nprint(test_duplicate(list101)) # False\nprint(test_duplicate(list102)) # True\nprint(test_duplicate(list103)) # False\nprint(test_duplicate(list104)) # True\nprint(test_duplicate(list105)) # False\nprint(test_duplicate(list106)) # True\nprint(test_duplicate(list107)) # False\nprint(test_duplicate(list108)) # True\nprint(test_duplicate(list109)) # False\nprint(test_duplicate(list110)) # True\nprint(test_duplicate(list111)) # False\nprint(test_duplicate(list112)) # True\nprint(test_duplicate(list113)) # False\nprint(test_duplicate(list114)) # True\nprint(test_duplicate(list115)) # False\nprint(test_duplicate(list116)) # True\nprint(test_duplicate(list117)) # False\nprint(test_duplicate(list118)) # True\nprint(test_duplicate(list119)) # False\nprint(test_duplicate(list120)) # True\nprint(test_duplicate(list121)) # False\nprint(test_duplicate(list122)) # True\nprint(test_duplicate(list123)) # False\nprint(test_duplicate(list124)) # True\nprint(test_duplicate(list125)) # False\nprint(test_duplicate(list126)) # True\nprint(test_duplicate(list127)) # False\nprint(test_duplicate(list128)) # True\nprint(test_duplicate(list129)) # False\nprint(test_duplicate(list130)) # True\nprint(test_duplicate(list131)) # False\nprint(test_duplicate(list132)) # True\nprint(test_duplicate(list133)) # False\nprint(test_duplicate(list134)) # True\nprint(test_duplicate(list135)) # False\nprint(test_duplicate(list136)) # True\nprint(test_duplicate(list137)) # False\nprint(test_duplicate(list138)) # True\nprint(test_duplicate(list139)) # False\nprint(test_duplicate(list140)) # True\nprint(test_duplicate(list141)) # False\nprint(test_duplicate(list142)) "
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     test_duplicate([1,2,3,4]) == True\nassert     test_duplicate([1,2,3,4,1]) == False\nassert     test_duplicate([1,1,1,1,1]) == True\n\ndef test_find_max_pos_min_pos(arraynums):\n    '''\n    Write a function to find the minimum and maximum element from an array of integers.\n    '''\n    pass"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     test_duplicate(arraynums1) == True, \"test_duplicate Failed.\"\nassert     test_duplicate(arraynums2) == False, \"test_duplicate Failed.\"\n\ndef test_duplicate2(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     test_duplicate([1,2,2,3,4,4,4,4]) == True, \"error, not found\"\nassert     test_duplicate([1,2,2,3,4,5,6,7,8,8,8]) == False, \"error, found\"\nassert     test_duplicate([1,2,2,3,4,5,6,7,8,8,8]) == False, \"error, found\"\nassert     test_duplicate([1,2,2,3,4,5,6,7,8,8,8,8,8,8,8,8]) == False, \"error, found\"\nassert     test_duplicate([1,2,2,3,4,5,6,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     test_duplicate([1,2,3,4,4,5]) == False\nassert     test_duplicate([1,2,3,4,4,5,4,5,6,4]) == True\nassert     test_duplicate([1,2,3,4,4,5,4,5,6,4,4,6,4]) == False\nassert     test_duplicate([1,2,3,4,4,5,6,4,4,6,4,4,6,4]) == False\n\ndef test_count_entries(arraynums):\n    '''\n    Write a function that returns the number of entries (occurrences) of a given array value.\n    '''\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    arraynums = [1,2,3,1]\n    print(\"Given array of integers: \", arraynums)\n    print(\"The size of the array is: \", len(arraynums))\n    result = test_duplicate(arraynums)\n    print(\"The boolean value for whether the array contains any duplicate element is: \", result"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert not test_duplicate([1,1,2,3,5])\nassert test_duplicate([1,1,2,3,5])\n\ndef test_duplicate_2(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     test_duplicate(arraynums) == True, \"ERROR - test_duplicate failed\"\nprint(\"test_duplicate - success\")\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     test_duplicate([1,2,3,4,5]) == False, \"Should be False\"\nassert     test_duplicate([1,2,2,4,4,5]) == True, \"Should be True\"\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     test_duplicate([1,2,3,4]) == True, \"Should return true\"\nassert     test_duplicate([1,2,3,4,4]) == False, \"Should return false\"\nassert     test_duplicate([1,1,2,3,4]) == True, \"Should return true\"\nassert     test_duplicate([1,2,3,4,2]) == False, \"Should return false\"\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_woodall(3) == False\nassert     is_woodall(5) == False\nassert     is_woodall(8) == True\nassert     is_woodall(35) == True\nassert     is_woodall(63) == False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    is_woodall(1) == False\n    is_woodall(1.1) == True\n    is_woodall(-1) == True\n    is_woodall(1+1j) == False\n    is_woodall(\"1\") == False\n    is_woodall(True) == False\n    is_woodall(False) == False\n    is_woodall(None) == False\n    is_woodall([\"1\",1,\"hi\"]) == False\n    is_woodall({\"a\":1,\"b\":2,\"c\":3}) == False\n    is_woodall({\"a\":{\"d\":1,\"e\":2}, \"f\":3}) == False\n    is_woodall({\"a\":1,\"b\":2,\"c\":3,\"d\":4}) == False\n    is_woodall({\"a\":{\"b\":2,\"c\":3}, \"d\":4}) == False\n    is_woodall({\"a\":1,\"b\":2,\"c\":3,\"d\":4, \"e\":5}) == False\n    is_woodall({\"a\":1,\"b\":2,\"c\":3,\"d\":4, \"e\":5, \"f\":6}) == False\n    is_woodall({\"a\":{\"b\":2,\"c\":3}, \"d\":4, \"e\":5, \"f\":6}) == False\n    is_woodall({\"a\":1,\"b\":2,\"c\":3,\"d\":4, \"e\":5, \"f\":6, \"g\":7}) == False\n    is_woodall({\"a\":1,\"b\":2,\"c\":3,\"d\":4, \"e\":5, \"f\":6, \"g\":7, \"h\":8}) == False\n    is_woodall({\"a\":1,\"b\":2,\"c\":3,\"d\":4, \"e\":5, \"f\":6, \"g\":7, \"h\":8, \"i\":9}) == False\n    is_woodall({\"a\":1,\"b\":2,\"c\":3,\"d\":4, \"e\":5, \"f\":6, \"g\":7, \"h\":8, \"i\":9, \"j\":10}) == False\n    is_woodall({\"a\":1,\"b\":2,\"c\":3,\"d\":4, \"e\":5, \"f\":6, \"g\":7, \"h\":8, \"i\":9, \"j\":10, \"k\":11}) == False\n    is_woodall({\"a\":1,\"b\":2,\"c\":3,\"d\":4, \"e\":5, \"f\":6, \"g\":7, \"h\":8, \"i\":9, \"j\":10, \"k\":11, \"l\":12}) == False\n    is_woodall({\"a\":1,\"b\":2,\"c\":3,\"d\":4, \"e\":5, \"f\":6, \"g\":7, \"h\":8, \"i\":9, \"j\":10, \"k\":11, \"l\":12, \"m\":13}) == False\n    is_woodall({\"a\":1,\"b\":2,\"c\":3,\"d\":4, \"e\":5, \"f\":6, \"g\":7, \"h\":8, \"i\":9, \"j\":10, \"k\":11, \"l\":12, \"m\":13, \"n\":14}) == False\n    is_woodall({\"a\":1,\"b\":2,\"c\":3,\"d\":4, \"e\":5, \"f\":6, \"g\":7, \"h\":8, \"i\":9, \"j\":10, \"k\":11, \"l\":12, \"m\":13, \"n\":14, \"o\":15}) == False\n    is_woodall({\"a\":1,\"b\":2,\"c\":3,\"d\":4, \"e\":5, \"f\":6, \"g\":7, \"h\":8, \"i\":9, \"j\":10, \"k\":11, \"l\":12, \"m\":13, \"n\":14, \"o\":15, \"p\":16}) == False\n    is_woodall({\"a\":1,\"b\":2,\"c\":3,\"d\":4, \"e\":5, \"f\":6, \"g\":7, \"h\":8, \"i\":9, \"j\":10, \"k\":11, \"l\":12, \"m\":13, \"n\":14, \"o\":15, \"p\":16, \"q\":17}) == False\n    is_woodall({\"a\":1,\"b\":2,\"c\":3,\"d\":4, \"e\":5, \"f\":6, \"g\":7, \"h\":8, \"i\":9, \"j\":10, \"k\":11, \"l\":12, \"m\":13, \"n\":14, \"o\":15, \"p\":16, \"q\":17, \"r\":18}) == False\n    is_woodall({\"a\":1,\"b\":2,\"c\":3,\"d\":4, \"e\":5, \"f\":6, \"g\":7, \"h\":8, \"i\":9, \"j\":10, \"k\":11, \"l\":12, \"m\":13, \"n\":14, \"o\":15, \"p\":16, \"q\":17, \"r\":18, \"s\":19}) == False\n    is_woodall({\"a\":1,\"b\":2,\"c\":3,\"d\":4, \"e\":5, \"f\":6, \"g\":7, \"h\":8, \"i\":9, \"j\":10, \"k\":11, \"l\":12, \"m\":13, \"n\":14, \"o\":15, \"p\":16, \"q\":17, \"r\":18, \"s\":19, \"t\":20}) == False\n    is_woodall({\"a\":1,\"b\":2,\"c\":3,\"d\":4, \"e\":5, \"f\":6, \"g\":7, \"h\":8, \"i\":9, \"j\":10, \"k\":11, \"l\":12, \"m\":13, \"n\":14, \"o\":15, \"p\":16, \"q\":17, \"r\":18, \"s\":19, \"t\":20, \"u\":21}) == False\n    is_woodall({\"a\":1,\"b\":2,\"c\":3,\"d\":4, \"e\":5, \"f\":6, \"g\":7, \"h\":8, \"i\":9, \"j\":10, \"k\":11, \"l\":12, \"m\":13, \"n\":14, \"o\":15, \"p\":16, \"q\":17, \"r\":18, \"s\":19, \"t\":20, \"u\":21, \"v\":22}) == False\n    is_woodall({\"a\":1,\"b\":2,\"c\":3,\"d\":4, \"e\":5, \"f\":6, \"g\":7, \"h\":8, \"i\":9, \"j\":10, \"k\":11, \"l\":12, \"m\":13, \"n\":14, \"o\":15, \"p\":16, \"q\":17, \"r\":18, \"s\":19, \"t\":20, \"u\":21, \"v\":22, \"w\":23}) == False\n    is_woodall({\"a\":1,\"b\":2,\"c\":3,\"d\":4, \"e\":5, \"f\":6, \"g\":7, \"h\":8, \"i\":9, \"j\":10, \"k\":11, \"l\":12, \"m\":13, \"n\":14, \"o\":15, \"p\":16, \"q\":17, \"r\":18, \"s\":19, \"t\":20, \"u\":21, \"v\":22, \"w\":23, \"x\":24}) == False\n    is_woodall({\"a\":1,\"b\":2,\"c\":3,\"d\":4, \"e\":5, \"f\":6, \"g\":7, \"h\":8, \"i\":9, \"j\":10, \"k\":11, \"l\":12, \"m\":13, \"n\":14, \"o\":15, \"p\":16, \"q\":17, \"r\":18, \"s\":19, \"t\":20, \"u\":21, \"v\":22, \"w\":23, \"x\":24, \"y\":25}) == False\n    is_woodall({\"a\":1,\"b\":2,\"c\":3,\"d\":4, \"e\":5, \"f\":6, \"g\":7, \"h\":8, \"i\":9, \"j\":1"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint()\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_woodall(2) == True, '1st Test Case is not True'\nassert     is_woodall(3) == True, '2nd Test Case is not True'\nassert     is_woodall(4) == False, '3rd Test Case is not False'\nassert     is_woodall(5) == False, '4th Test Case is not False'\nassert     is_woodall(6) == True, '5th Test Case is not True'\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_woodall(1) == False\nassert     is_woodall(10) == True\nassert     is_woodall(4) == False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(\"\\n------------\\nTest Case 1\")\nprint(is_woodall(1))\n\nprint(\"\\n------------\\nTest Case 2\")\nprint(is_woodall(8))\n\nprint(\"\\n------------\\nTest Case 3\")\nprint(is_woodall(15))\n\nprint(\"\\n------------\\nTest Case 4\")\nprint(is_woodall(16))\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_woodall(24) == True, \"Should return True\"\nassert     is_woodall(15) == False, \"Should return False\"\nassert     is_woodall(12) == False, \"Should return False\"\nassert     is_woodall(18) == True, \"Should return True\"\nassert     is_woodall(45) == True, \"Should return True\"\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_woodall(0) == False, \"is_woodall() should return False for 0\"\nassert     is_woodall(1) == False, \"is_woodall() should return False for 1\"\nassert     is_woodall(2) == False, \"is_woodall() should return False for 2\"\nassert     is_woodall(3) == True, \"is_woodall() should return True for 3\"\nassert     is_woodall(4) == True, \"is_woodall() should return True for 4\"\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     rev(10) == 20\nassert rev(11) == 21\nassert rev(12) == 21\nassert rev(13) == 14\nassert rev(14) == 15\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nrev(-1)\nrev(0)\nrev(2)\nrev(3)\nrev(4)\nrev(5)\nrev(8)\nrev(10)\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(rev(12))\nprint(rev(20))\nprint(rev(10))\nprint(rev(3))\nprint(rev(6))\nprint(rev(30))\nprint(rev(13))\nprint(rev(24))\nprint(rev(27))\nprint(rev(15))\nprint(rev(11))\nprint(rev(9))\nprint(rev(8))\nprint(rev(7))\nprint(rev(6))\nprint(rev(5))\nprint(rev(4))\nprint(rev(3))\nprint(rev(2))\nprint(rev(1))\nprint(rev(0))\nprint(rev(-1))\nprint(rev(-2))\nprint(rev(-3))\nprint(rev(-4))\nprint(rev(-5))\nprint(rev(-6))\nprint(rev(-7))\nprint(rev(-8))\nprint(rev(-9))\nprint(rev(-10))\nprint(rev(-11))\nprint(rev(-12))\nprint(rev(-13))\nprint(rev(-14))\nprint(rev(-15))\nprint(rev(-16))\nprint(rev(-17))\nprint(rev(-18))\nprint(rev(-19))\nprint(rev(-20))\nprint(rev(-21))\nprint(rev(-22))\nprint(rev(-23))\nprint(rev(-24))\nprint(rev(-25))\nprint(rev(-26))\nprint(rev(-27))\nprint(rev(-28))\nprint(rev(-29))\nprint(rev(-30))\nprint(rev(-31))\nprint(rev(-32))\nprint(rev(-33))\nprint(rev(-34))\nprint(rev(-35))\nprint(rev(-36))\nprint(rev(-37))\nprint(rev(-38))\nprint(rev(-39))\nprint(rev(-40))\nprint(rev(-41))\nprint(rev(-42))\nprint(rev(-43))\nprint(rev(-44))\nprint(rev(-45))\nprint(rev(-46))\nprint(rev(-47))\nprint(rev(-48))\nprint(rev(-49))\nprint(rev(-50))\nprint(rev(-51))\nprint(rev(-52))\nprint(rev(-53))\nprint(rev(-54))\nprint(rev(-55))\nprint(rev(-56))\nprint(rev(-57))\nprint(rev(-58))\nprint(rev(-59))\nprint(rev(-60))\nprint(rev(-61))\nprint(rev(-62))\nprint(rev(-63))\nprint(rev(-64))\nprint(rev(-65))\nprint(rev(-66))\nprint(rev(-67))\nprint(rev(-68))\nprint(rev(-69))\nprint(rev(-70))\nprint(rev(-71))\nprint(rev(-72))\nprint(rev(-73))\nprint(rev(-74))\nprint(rev(-75))\nprint(rev(-76))\nprint(rev(-77))\nprint(rev(-78))\nprint(rev(-79))\nprint(rev(-80))\nprint(rev(-81))\nprint(rev(-82))\nprint(rev(-83))\nprint(rev(-84))\nprint(rev(-85))\nprint(rev(-86))\nprint(rev(-87))\nprint(rev(-88))\nprint(rev(-89))\nprint(rev(-90))\nprint(rev(-91))\nprint(rev(-92))\nprint(rev(-93))\nprint(rev(-94))\nprint(rev(-95))\nprint(rev(-96))\nprint(rev(-97))\nprint(rev(-98))\nprint(rev(-99))\nprint(rev(-100))\nprint(rev(-101))\nprint(rev(-102))\nprint(rev(-103))\nprint(rev(-104))\nprint(rev(-105))\nprint(rev(-106))\nprint(rev(-107))\nprint(rev(-108))\nprint(rev(-109))\nprint(rev(-110))\nprint(rev(-111))\nprint(rev(-112))\nprint(rev(-113))\nprint(rev(-114))\nprint(rev(-115))\nprint(rev(-116))\nprint(rev(-117))\nprint(rev(-118))\nprint(rev(-119))\nprint(rev(-120))\nprint(rev(-121))\nprint(rev(-122))\nprint(rev(-123))\nprint(rev(-124))\nprint(rev(-125))\nprint(rev(-126))\nprint(rev(-127))\nprint(rev(-128))\nprint(rev(-129))\nprint(rev(-130))\nprint(rev(-131))\nprint(rev(-132))\nprint(rev(-133))\nprint(rev(-134))\nprint(rev(-135))\nprint(rev(-136))\nprint(rev(-137))\nprint(rev(-138))\nprint(rev(-139))\nprint(rev(-140))\nprint(rev(-141))\nprint(rev(-142))\nprint(rev(-143))\nprint(rev(-144))\nprint(rev(-145))\nprint(rev(-146))\nprint(rev(-147))\nprint(rev(-148))\nprint(rev(-149))\nprint(rev(-150))\nprint(rev(-151))\nprint(rev(-152))\nprint(rev(-153))\nprint(rev(-154))\nprint(rev(-155))\nprint(rev(-156))\nprint(rev(-157))\nprint(rev(-158))\nprint(rev(-159))\nprint(rev(-160))\nprint(rev(-161))\nprint(rev(-162))\nprint(rev(-163))\nprint(rev(-164))\nprint(rev(-165))\nprint(rev(-166))\nprint(rev(-167))\nprint(rev(-168))\nprint(rev(-169))\nprint(rev(-170))\nprint(rev(-171))\nprint(rev(-172))\nprint(rev(-173))\nprint(rev(-174))\nprint(rev(-175))\nprint(rev(-176))\nprint(rev(-177))\nprint(rev(-178))\nprint(rev(-179))\nprint(rev(-180))\nprint(rev(-181))\nprint(rev(-182))\nprint(rev(-183))\nprint(rev(-184))\nprint(rev(-185))\nprint(rev(-186))\nprint(rev(-187))\nprint(rev(-188))\nprint(rev(-189))\nprint(rev(-190))\nprint(rev(-191))\nprint(rev(-192))\nprint(rev(-193))\nprint(rev(-194))\nprint(rev(-195))\nprint(rev(-196))\nprint(rev(-197))\nprint(rev(-198))\nprint(rev(-199))\nprint(rev(-200))\nprint(rev(-201))\nprint(rev(-202))\nprint(rev(-203))\nprint(rev(-204))\nprint(rev(-205))\nprint(rev(-206))\nprint(rev(-207))\nprint(rev(-208))\nprint(rev(-209))\nprint(rev(-210))\nprint(rev(-211))\nprint(rev(-212))\nprint(rev(-213))\nprint(rev(-214))\nprint(rev(-215))\nprint(rev(-216))\nprint(rev(-217))\nprint(rev(-218))\nprint(rev(-219))\nprint(rev(-220))\nprint(rev(-221))\nprint(rev(-222))\nprint(rev(-223))\nprint(rev(-224))\nprint(rev(-225))\nprint(rev(-226))\nprint(rev(-227))\nprint(rev(-228))\nprint(rev(-229))\nprint(rev(-230))\nprint(rev(-231))\nprint(rev(-232))\nprint(rev(-233))\nprint(rev(-234))\nprint(rev(-235))\nprint(rev(-236))\nprint(rev(-237))\nprint(rev(-238))\nprint(rev(-239))\nprint(rev(-240))\nprint(rev(-241))\nprint(rev(-242))\nprint(rev(-243))\nprint(rev(-244))\nprint(rev(-245))\nprint(rev(-246))\nprint(rev(-247))\nprint(rev(-248))\nprint(rev(-249))\nprint(rev(-250))\nprint(rev(-251))\nprint(rev(-252))\nprint(rev(-253))\nprint(rev(-254))\nprint(rev(-255))\nprint(rev(-256))\nprint(rev(-257))\nprint(rev(-258))\nprint(rev(-259))\nprint(rev(-260))\nprint(rev(-261))\nprint(rev(-262))\nprint(rev(-263))\nprint(rev(-264))\nprint(rev("
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     rev(7) == 6, \"Should be 7\"\nassert     rev(1) == 0, \"Should be 0\"\nassert     rev(-1) == -1, \"Should be -1\"\nassert     rev(9) == 8, \"Should be 8\"\nassert     rev(5) == 5, \"Should be 5\"\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert rev(5) == 5\nassert rev(2) == 1\nassert rev(9) == 2\nassert rev(5) == 1\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert rev(1) == 0\nassert rev(2) == 0\nassert rev(3) == 1\nassert rev(4) == 1\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     rev(12) == 1, '12 is not one less than twice its reverse.'\nassert     rev(101) == 50, '101 is not one less than twice its reverse.'\nassert     rev(-101) == 50, '-101 is not one less than twice its reverse.'\nassert     rev(12) == 1, '12 is not one less than twice its reverse.'\nassert     rev(-12) == 1, '-12 is not one less than twice its reverse.'\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Max_Num([]) == None\nassert     find_Max_Num([1,2,3,4,5,6]) == 6\nassert     find_Max_Num([1,2,3,4,5,6,7]) == 7\nassert     find_Max_Num([1,2,3,4,5,6,7,8]) == 7\nassert     find_Max_Num([1,2,3,4,5,6,7,8,9]) == 9\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Max_Num([1,2,3,4,5,6]) == 6,'should be 6'\nassert     find_Max_Num([1,4,5,6,7]) == 7,'should be 7'\nassert     find_Max_Num([1,5,6,7,8]) == 8,'should be 8'\nassert     find_Max_Num([1,5,6,7,9]) == 9,'should be 9'\nassert     find_Max_Num([1,5,6,7,0]) == 7,'should be 7'\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_Max_Num([1,2,3,4,5]) == 5\nassert     find_Max_Num([1,2,3,4,5,6,7]) == 7\nassert     find_Max_Num([1,2,3,4,5,6,7,8]) == 8\nassert     find_Max_Num([1,2,3,4,5,6,7,8,9]) == 9\n\n\ndef find_Min_Num(arr) : \n    '''\n    Write a python function to find the smallest number that can be formed with the given list of digits.\n    '''\n    pass\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Max_Num([1, 2, 3]) == 3, \"error in the result\"\nassert     find_Max_Num([1, 2, 3, 2, 1]) == 3, \"error in the result\"\nassert     find_Max_Num([1, 2, 3, 2, 1, 0]) == 3, \"error in the result\"\nassert     find_Max_Num([0]) == 0, \"error in the result\"\nassert     find_Max_Num([]) == -1, \"error in the result\"\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Max_Num([-10, 7, 10, 1, -100, 5, -90, -50]) == 100\nassert     find_Max_Num([1, 4, 5, 2]) == 5\nassert     find_Max_Num([-1, 7, 10, 5, -100, 4, -90, -50]) == 100\nassert     find_Max_Num([]) == None\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Max_Num([1, 3, 5, 6, 7]) == 7, \"Test Case Failed\"\nassert     find_Max_Num([1, 1, 1, 1, 1]) == 1, \"Test Case Failed\"\nassert     find_Max_Num([]) == -1, \"Test Case Failed\"\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Max_Num([1, 9, 5, 3, 2])     == 9, \"the expected result is 9\"\nassert     find_Max_Num([5, 3, 2, 1])     == 5, \"the expected result is 5\"\nassert     find_Max_Num([1, 9, 2, 5])     == 9, \"the expected result is 9\"\nassert     find_Max_Num([1, 2, 5, 9])     == 9, \"the expected result is 9\"\nassert     find_Max_Num([1, 9, 5, 3, 7])     == 9, \"the expected result is 9\"\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     opposite_Signs(6, 7) == True, 'Failed'\nassert     opposite_Signs(-6, 7) == False, 'Failed'\nassert     opposite_Signs(0, 7) == False, 'Failed'\nassert     opposite_Signs(-6, -7) == True, 'Failed'\n\n\ndef rotate_image(arr):\n    '''\n    Write a python function to rotate the given 2D array by 90 degrees (clockwise).\n    '''\n    pass\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     opposite_Signs(-10, -20) \nassert not opposite_Signs(-20, -10) \nassert not opposite_Signs(20, -10) \nassert not opposite_Signs(-10, 20) \nassert opposite_Signs(0, 0)\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     opposite_Signs(1,2) == 0\nassert     opposite_Signs(-1,2) == 1\nassert     opposite_Signs(-1,-2) == 1\nassert     opposite_Signs(-2,-1) == 1\nassert     opposite_Signs(-1,1) == 0\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     opposite_Signs(-5,-5) == True\nassert     opposite_Signs(-5,5) == False\nassert     opposite_Signs(0,-5) == False\nassert     opposite_Signs(0,0) == True\nassert     opposite_Signs(-100,-100) == False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    opposite_Signs(2,3) == False\n    opposite_Signs(2,-3) == True\n    opposite_Signs(-2,3) == True\n    opposite_Signs(-2,-3) == False\nassert opposite_Signs(0,0) == True\nassert opposite_Signs(-1,1) == False\nassert opposite_Signs(0,-2) == True\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     opposite_Signs(0,-1) == True\nassert     opposite_Signs(0,1) == False\nassert     opposite_Signs(-1,-1) == True\nassert     opposite_Signs(-1,1) == False\nassert     opposite_Signs(1,-1) == False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     opposite_Signs(-12, -5) == True, \"Expected True\"\nassert     opposite_Signs(-12, 5) == False, \"Expected False\"\nassert     opposite_Signs(12, -5) == False, \"Expected False\"\nassert     opposite_Signs(12, 5) == True, \"Expected True\"\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     opposite_Signs(1,-2) == True, \"Wrong Answer\"\nassert opposite_Signs(1,2) == False, \"Wrong Answer\"\nassert opposite_Signs(-1,-2) == True, \"Wrong Answer\"\nassert opposite_Signs(-1,2) == False, \"Wrong Answer\"\nprint(\"\\nYou're all set!\\n\")\n\ndef compute_deviation(x, y): \n    '''\n    Write a python function to find the difference between the given two numbers\n    '''\n    pass\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     opposite_Signs(1, -1)     == False, 'Test 1 Failed'\nassert     opposite_Signs(-1, 1)     == False, 'Test 2 Failed'\nassert     opposite_Signs(-1, -1)     == True, 'Test 3 Failed'\nassert     opposite_Signs(-2, 2)     == True, 'Test 4 Failed'\n\nprint('All tests passed'"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_octagonal(1) == 1, \"Wrong value\"\nassert     is_octagonal(2) == 3, \"Wrong value\"\nassert     is_octagonal(3) == 6, \"Wrong value\"\nassert     is_octagonal(4) == 10, \"Wrong value\"\nassert     is_octagonal(5) == 15, \"Wrong value\"\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert is_octagonal(1) == 1\nassert is_octagonal(2) == 7\nassert is_octagonal(3) == 15\nassert is_octagonal(4) == 21\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_octagonal(1) == 8\nassert     is_octagonal(2) == 12\nassert     is_octagonal(3) == 16\nassert     is_octagonal(4) == 20\nassert     is_octagonal(5) == 22\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert is_octagonal(1) == 1\nassert is_octagonal(2) == 5\nassert is_octagonal(3) == 8\nassert is_octagonal(4) == 15\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_octagonal(1) == 1 \nassert     is_octagonal(2) == 3 \nassert     is_octagonal(3) == 6 \nassert     is_octagonal(4) == 10 \nassert     is_octagonal(5) == 12 \n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_Substrings(\"\") == 0, \"Empty String\"\nassert     count_Substrings(\"ab\") == 1, \"Single Char\"\nassert     count_Substrings(\"ab\") == 2, \"Single Char\"\nassert     count_Substrings(\"abc\") == 3, \"Single Char\"\nassert     count_Substrings(\"abcd\") == 4, \"Single Char\"\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_Substrings(\"M\") == 1, \"Your count_Substrings function is wrong.\"\nassert     count_Substrings(\"MM\") == 2, \"Your count_Substrings function is wrong.\"\nassert     count_Substrings(\"MMM\") == 3, \"Your count_Substrings function is wrong.\"\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ns = 'google'\nprint(count_Substrings(s))"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_Substrings('xx') == 1, 'Test Case 1: Expected 1, Actual 1'\nassert count_Substrings('abc') == 2, 'Test Case 2: Expected 2, Actual 2'\nassert count_Substrings('xxxx') == 1, 'Test Case 3: Expected 1, Actual 1'\nassert count_Substrings('qwerty') == 0, 'Test Case 4: Expected 0, Actual 1'\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ncount_Substrings(\"summers\") == 4\ncount_Substrings(\"summer\") == 3\ncount_Substrings(\"sums\") == 2\ncount_Substrings(\"sum\") == 1\ncount_Substrings(\"ssum\") == 1\ncount_Substrings(\"\") == 0\ncount_Substrings(\"sumsum\") == 0\ncount_Substrings(\"summ\") == 0\ncount_Substrings(\"\") == 0\n\n\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)-1):\n        if(s[i] == s[i+1]):\n            count += 1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_Substrings(\"0123456789\") == 1\nassert     count_Substrings(\"012345678\") == 3\nassert     count_Substrings(\"0123456789a\") == 4\nassert     count_Substrings(\"0123456789ab\") == 6\nassert     count_Substrings(\"0123456789abc\") == 7\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_Substrings(\"abcabc\") == 3\nassert     count_Substrings(\"ababc\") == 2\nassert     count_Substrings(\"ababc\") == 3\n\n\ndef count_Substrings(s):\n    \"\"\"\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n\n    Parameters:\n    s: A string.\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert count_Substrings(\"1234\") == 3\nassert count_Substrings(\"3\") == 0\nassert count_Substrings(\"123\") == 1\nassert count_Substrings(\"12345\") == 2\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_Substrings(\"13\") == 3\nassert     count_Substrings(\"132\") == 3\nassert     count_Substrings(\"12\") == 2\nassert     count_Substrings(\"13\") == 1\nassert     count_Substrings(\"111\") == 0\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_Substrings('foobar') == 2\nassert     count_Substrings('foobarq') == 1\nassert     count_Substrings('foobar') == 1\nassert     count_Substrings('fooqr') == 1\nassert     count_Substrings('fooqrr') == 2\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     smallest_num([1, 5, 3, 6, 8]) == 3\nassert     smallest_num([1, 5, 3, 6, 8]) == 1\nassert     smallest_num([-1, 5, 3, 6, 8]) == -1\nassert     smallest_num([5, 3, 8, 5, 6]) == 5\nassert     smallest_num([]) == None"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     smallest_num([1, 5, 3, 4, 6, 8]) == 3\nassert     smallest_num([1, 5, 3, 4, 6, 8, 9, 0, 1, 4, 5, 3, 2, 1]) == 1\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     smallest_num([1,2,3,4,5,6,7,8,9]) == 1\nassert     smallest_num([1,2,3,4,5,6,7,8,9]) == 1\nassert     smallest_num([1,2,3,4,5,6,7,8,9]) == 1\nassert     smallest_num([1,2,3,4,5,6,7,8,9]) == 1\n\nprint(\"Correct!\")\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     smallest_num([1,2,3,4,5]) == 1\nassert     smallest_num([5,4,3,2,1]) == 1\nassert     smallest_num([1,2,3,4]) == 4\nassert     smallest_num([2,3,4]) == 2\nassert     smallest_num([3,4,5,6]) == 5\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef largest_num(xs):\n    '''\n    Write a python function to find largest number in a list.\n    '''\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     smallest_num([1,2,3,4])==1\nassert     smallest_num([4,3,2,1])==1\nassert     smallest_num([])==None\nassert     smallest_num([0,0,0,0])==0\nassert     smallest_num([1,2,3,4,5])==1\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    max_difference([2, 5, 8, 1, 0]) == 7\n    max_difference([1, 2, 3, 4, 5, 6]) == 7\n    max_difference([0, 1, 2, 3, 4, 5]) == 3\n    max_difference([0, 1, 2, 4, 5, 6]) == 3\n    max_difference([]) == 0\n    max_difference([1, 2, 3, 4, 5, 6, 7]) == 7\n\nprint(\"All test cases passed!!!\")\nprint(\"\\n\")\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_difference([(9, 1), (5, 2), (8, 3), (9, 4), (2, 5), (3, 6)]) == 3, \\\n    \"Wrong Answer. Correct Answer is 3\"\nassert     max_difference([(9, 1), (5, 2), (8, 3), (9, 4), (3, 5), (3, 6)]) == 0, \\\n    \"Wrong Answer. Correct Answer is 0\"\nassert     max_difference([(9, 1), (5, 2), (8, 3), (9, 4), (3, 5), (3, 5)]) == 1, \\\n    \"Wrong Answer. Correct Answer is 1\"\nassert     max_difference([(9, 1), (5, 2), (8, 3), (9, 4), (3, 5), (3, 6)]) == 2, \\\n    \"Wrong Answer. Correct Answer is 2\"\nassert     max_difference([(9, 1), (5, 2), (8, 3), (9, 4), (3, 5), (3, 6), (4, 7)]) == 3, \\\n    \"Wrong Answer. Correct Answer is 3\"\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_difference([(1,2),(3,4),(5,6),(7,8),(9,10)]) == 1, 'Wrong'\nassert     max_difference([(4,5),(6,7),(7,8),(9,10)]) == 2, 'Wrong'\nassert     max_difference([(9,10),(10,11),(11,12),(12,13),(13,14)]) == 3, 'Wrong'\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_difference([(10, 20), (5, 10), (20, 25), (10, 15)]) == 5\nassert     max_difference([(0, 5), (0, 5), (2, 5), (2, 5)]) == 2\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) == 0:\n        return None\n    max_d = -1\n    for x in test_list:\n        if x < test_list[0]:\n            test_list.remove(x)\n            test_list.remove(max_d)\n            break\n        if x > max_d:\n            max_d = x\n    if len(test_list) > 0:\n        return test_list[0]\n    return None\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_difference((1,2,3,4)) == 2, 'test failed'\nassert     max_difference((5,8,5,10)) == 5, 'test failed'\nassert     max_difference((10,20,100,20)) == 20, 'test failed'\nassert     max_difference((4,3,2,1)) == 2, 'test failed'\nassert     max_difference((4,3,2,2)) == 2, 'test failed'\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_difference([\"11\",\"22\",\"33\",\"44\",\"55\",\"66\",\"77\"]) == 4, \"Test 1 Failed\"\nassert     max_difference([\"-1\",\"3\",\"11\",\"55\",\"77\",\"99\"]) == 7, \"Test 2 Failed\"\nassert     max_difference([\"-1\",\"22\",\"33\",\"44\",\"55\",\"66\",\"77\",\"99\",\"100\"]) == 10, \"Test 3 Failed\"\nassert     max_difference([\"1\",\"3\",\"11\",\"55\",\"77\",\"99\"]) == 0, \"Test 4 Failed\"\nassert     max_difference([\"-1\",\"3\",\"11\",\"55\",\"77\",\"99\"]) == 2, \"Test 5 Failed\"\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_difference([-4, -5, 1, 3, 5, 6]) == 6, \"Should be 6\"\nassert     max_difference([-5, -2, 3, 6, 5, -2]) == 7, \"Should be 7\"\nassert     max_difference([1, 2, 3, 4, 5]) == 0, \"Should be 0\"\nassert     max_difference([-4, -5, -6]) == -4, \"Should be -4\"\nassert     max_difference([]) == 0, \"Should be 0\"\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_difference((2, 1, -3, 5, 6)) == 2, \\\n        \"wrong answer\"\nassert     max_difference((1, 2, -3, 5, 6)) == 5, \\\n        \"wrong answer\"\nassert     max_difference((2, 1, 5, 5, 6)) == 5, \\\n        \"wrong answer\"\nassert     max_difference((2, 1, 5, 6, 7)) == 3, \\\n        \"wrong answer\"\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     subject_marks([(1, 2), (1, 3), (3, 4), (2, 5)]) == \\\n        [(1, 2), (1, 3), (3, 4), (2, 5)], \"Wrong output\"\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     subject_marks( [ (1, 2), (1, 3), (2, 4), (3, 4) ] ) ==     [ (1, 4), (1, 3), (2, 4), (3, 4) ]\nassert     subject_marks( [ (6, 2), (2, 4), (4, 3), (1, 1) ] ) ==     [ (1, 1), (6, 2), (4, 3), (2, 4) ]\nprint(\"Assign 05: Problem 01: Unit Test 02: Pass\")\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     subject_marks([(1,5), (3,6), (6,4), (9,9), (10,0)]) == \\\n        [(10,0), (6,4), (9,9), (3,6), (1,5)]\n\n\ndef calculate_subject_marks_avg(student_marks):\n    '''\n    Write a function to return the average of all subject marks of a student.\n    '''\n    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nsubject_marks([(1,9),(1,5),(1,5),(1,1),(1,1),(1,4),(1,3)]) == \\\n    [(1,1),(1,3),(1,4),(1,5),(1,5),(1,5),(1,9)], \\\n    'WRONG MARKS!'\n\nprint('PASSED!')\n\n'''\n15. Write a function to multiply all the numbers in a list.\n'''\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     subject_marks([(1, 'A'), (1, 'A'), (2, 'C'), (3, 'B'), (2, 'C')]) == \\\n            [(1, 'A'), (2, 'C'), (2, 'C'), (3, 'B'), (1, 'A')]\nassert subject_marks([(2, 'C'), (1, 'A'), (3, 'A'), (1, 'A'), (1, 'B')]) == \\\n            [(1, 'A'), (1, 'B'), (1, 'A'), (2, 'C'), (3, 'A')]\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef student_average(student_marks):\n    '''\n    Write a function to calculate the average of student marks.\n    '''\n    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     subject_marks([(1, 100), (2, 100), (2, 0), (1, 0), (1, 1)]) == \\\n            [(1, 100), (2, 100), (2, 0), (1, 0), (1, 1)]\n\nassert     subject_marks([(2, 85), (3, 75), (1, 75), (2, 75), (1, 85)]) == \\\n            [(1, 75), (2, 75), (2, 85), (3, 75), (1, 85)]\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     subject_marks(\n                [(6, 4), (5, 3), (3, 2), (9, 10), (10, -1), (4, -1)]) == \\\n        [(3, 2), (5, 3), (6, 4), (4, -1), (9, 10), (10, -1)]\n\n'''\nIf the following list is given as the following list of students, \nstudent_grades is a list of tuples containing student names and their grades. \nWrite a function to count the number of students having grades greater than 70.\n\n'''\nstudent_grades = [(\"Omar\", 100), (\"Aleksandr\", 99), (\"Nurul\", 89), (\"Aarav\", 80)]\n\ndef count_grades_greater_than_70(student_grades):\n    '''\n    Write a function to count the number of students having grades greater than 70.\n    '''\n    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     subject_marks([(1,2),(1,3),(1,5),(1,7),(1,9)]) == [(1, 1), (1, 3), (1, 5), (1, 7), (1, 9)]\nassert     subject_marks([(2,1),(2,2),(2,5),(2,7),(2,9)]) == [(2, 2), (2, 1), (2, 5), (2, 7), (2, 9)]\nassert     subject_marks([(3,1),(3,3),(3,5),(3,7),(3,9)]) == [(3, 1), (3, 3), (3, 5), (3, 7), (3, 9)]\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     recursive_list_sum([1, 2, 3, 4])     == 21\nassert     recursive_list_sum([])                 == 0\nassert     recursive_list_sum([1, 2, 3])         == 6\nassert     recursive_list_sum([])                 == 0\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     recursive_list_sum([[1], 2, 3, 4, 5, 6]) == 21\nassert     recursive_list_sum([[[[5,6]], 7, 8, 9]]) == 81\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     recursive_list_sum([1, 2, 3]) == 6\nassert     recursive_list_sum([1, 1, 1]) == 2\nassert     recursive_list_sum([1, 1, 1, 1]) == 2\nassert     recursive_list_sum([1, 1, 1, 1, 1]) == 2\nassert     recursive_list_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 220\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     recursive_list_sum([1,2,3,4]) == 10\nassert     recursive_list_sum([1,2,3,4,5]) == 15\nassert     recursive_list_sum([1,2,3,4,5,6]) == 21\nassert     recursive_list_sum([1,2,3,4,5,6,7]) == 28\nassert     recursive_list_sum([1,2,3,4,5,6,7,8]) == 34\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     recursive_list_sum([[2, 5, 8], [4, 0, -3]]) == 14\nassert     recursive_list_sum([[2, 5, 8], [4, 0, -3], 0, -6]) == 0\nassert     recursive_list_sum([[2], [5, 0, -3], 0, -6]) == -1\nassert     recursive_list_sum([[2, 5, 8], [4, 0, -3]]) == 14\nassert     recursive_list_sum([[2, 5, 8], [4, 0, -3], 0, -6]) == 0\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     recursive_list_sum([1,2,3]) == 1+2+3, \"Should be 1+2+3\"\nassert     recursive_list_sum([1,2,3,[4,5,6,7]]) == 1+2+3+4+5+6+7, \"Should be 1+2+3+4+5+6+7\"\nassert     recursive_list_sum([1,2,3,[4,5,6,7],8]) == 1+2+3+4+5+6+7+8, \"Should be 1+2+3+4+5+6+7+8\"\nassert     recursive_list_sum([1,2,3,[4,5,6,7],8,9,10]) == 1+2+3+4+5+6+7+8+9+10, \"Should be 1+2+3+4+5+6+7+8+9+10\"\nassert     recursive_list_sum([1,2,3,4,5,6,7,8]) == 1+2+3+4+5+6+7+8, \"Should be 1+2+3+4+5+6+7+8\"\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     recursive_list_sum([1, 2, 3, 4]) == 10\nassert     recursive_list_sum([5, 7, 0]) == 12\nassert     recursive_list_sum([]) == 0\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     recursive_list_sum([[1,2], [3,4], [5,6]]) == 21\nassert     recursive_list_sum([[1,2], [3,4], [5,6],[7,8,9]]) == 25\nassert     recursive_list_sum([[1,2], [3,4]]) == 4"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     pos_count([1,2,3,-1,5,-3,6,2,4]) == 7\nassert pos_count([1,-2,-3,4,-5,-6]) == 6\nassert pos_count([1,-2,-3,4,-5,-6,7,8,9]) == 0\n\n'''\nWrite a python function to check whether a list is empty or not.\n'''\n\ndef is_empty(list):\n    '''\n    Write a python function to check whether a list is empty or not.\n    '''\n    pass\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     pos_count([-1, 2, -3, 4, -5]) == 0, \\\n    \"Wrong answer!\"\nassert     pos_count([]) == 0, \\\n    \"Wrong answer!\"\nassert     pos_count([-1, -2, -3]) == 3, \\\n    \"Wrong answer!\"\nassert     pos_count([-1, -2, -3, 0]) == 3, \\\n    \"Wrong answer!\"\nassert     pos_count([-1, -2, -3, -4]) == 3, \\\n    \"Wrong answer!\"\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert \n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef max_num_pos(list):\n    '''\n    Write a python function to get the maximum of positive numbers in a list.\n    '''\n    pass\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     pos_count([1,2,3,4,5]) == 4, \\\n    'Failed: pos_count([1,2,3,4,5])'\nassert     pos_count([-1,4,-2,8,1]) == 4, \\\n    'Failed: pos_count([-1,4,-2,8,1])'\nassert     pos_count([-2,-3,-4,-5,-6]) == 6, \\\n    'Failed: pos_count([-2,-3,-4,-5,-6])'\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     pos_count([-1, -2, -3, -4, -5]) == 0, \"incorrect for [-1, -2, -3, -4, -5]\"\nassert     pos_count([-1, -2, -3, -4, -5, 10, 5, -1]) == 4, \"incorrect for [-1, -2, -3, -4, -5, 10, 5, -1]\"\nassert     pos_count([-1, -2, -3, -4, -5, 10, 5, -1, -9]) == 5, \"incorrect for [-1, -2, -3, -4, -5, 10, 5, -1, -9]\"\nassert     pos_count([-1, -2, -3, -4, -5, 10, 5, -1, -9, 0]) == 6, \"incorrect for [-1, -2, -3, -4, -5, 10, 5, -1, -9, 0]\"\nassert     pos_count([-1, -2, -3, -4, -5, 10, 5, -1, -9, 0, -6]) == 7, \"incorrect for [-1, -2, -3, -4, -5, 10, 5, -1, -9, 0, -6]\"\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     pos_count([-1, 2, -3, 4, -5]) == 4, \"incorrect\"\nassert     pos_count([-1, -2, -3, -4, -5]) == 5, \"incorrect\"\nassert     pos_count([-1, 2, 3, 4, -5]) == 5, \"incorrect\"\nassert     pos_count([-1, 2, -3, 4, 5]) == 4, \"incorrect\"\nassert     pos_count([-1, 2, -3, 4, -5]) == 4, \"incorrect\"\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     bell_number(8) == 7, \"Bell number 8 should be 7\"\nassert     bell_number(12) == 14, \"Bell number 12 should be 14\"\n\ndef solution(n):\n    '''\n    Write a function to check whether a given integer is a perfect square.\n    '''\n    pass\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     bell_number(3) == 4, 'bell_number(3) should = 4'\nassert     bell_number(7) == 8, 'bell_number(7) should = 8'\nassert     bell_number(10) == 36, 'bell_number(10) should = 36'\nassert     bell_number(15) == 660, 'bell_number(15) should = 660'\nassert     bell_number(20) == 3969, 'bell_number(20) should = 3969'\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     bell_number(5) == 12\nassert     bell_number(7) == 15\nassert     bell_number(8) == 21\nassert     bell_number(13) == 42\nassert     bell_number(2) == 7\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef bell_number_prg(n):\n    '''\n    Given a number n, return the number of partitions.\n    '''\n    pass\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     bell_number(1) == 1\nassert     bell_number(2) == 2\nassert     bell_number(3) == 5\nassert     bell_number(4) == 8\nassert     bell_number(5) == 13\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     bell_number(1) == 2\nassert     bell_number(2) == 3\nassert     bell_number(3) == 5\nassert     bell_number(4) == 13\nassert     bell_number(5) == 42\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     bell_number(4) == 5\nassert     bell_number(5) == 11\nassert     bell_number(6) == 13\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef beautiful_triplets(a, b, c):\n    '''\n    Write a function that returns the number of ways to make all three of the following:\n    1. The sum of the three numbers is divisible by 3.\n    2. The sum of the three numbers is divisible by 2, but not by 3.\n    3. The sum of the three numbers is divisible by 3, but not by 2.\n    '''\n    pass\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     bell_number(2) == 3, 'Wrong output for 2!'\nassert     bell_number(3) == 7, 'Wrong output for 3!'\nassert     bell_number(4) == 6, 'Wrong output for 4!'\nassert     bell_number(10) == 26, 'Wrong output for 10!'\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_Monotonic([1, 2, 4, 7, 10]) == False\nassert     is_Monotonic([10, 9, 8, 7, 6]) == True\nassert     is_Monotonic([1, 1, 1, 1, 1]) == True\nassert     is_Monotonic([1, 2, 3, 4, 5]) == True\nassert     is_Monotonic([10, 9, 8, 7, 6, 5]) == False\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_Monotonic([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == True, 'Wrong'\nassert is_Monotonic([1, 1, 2, 3, 4, 5, 6, 6, 7, 8, 9]) == False, 'Wrong'\nassert is_Monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == False, 'Wrong'\nassert is_Monotonic([1, 1, 2, 3, 4, 4, 5, 5, 6, 7, 8, 9]) == True, 'Wrong'\n\nprint('All tests passed')"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_Monotonic([1, 2, 3, 4, 5]) == True\nassert     is_Monotonic([2, 5, 3, 1, 4]) == False\nassert     is_Monotonic([2, 3, 1, 5, 4]) == False\nassert     is_Monotonic([1, 2, 4, 5, 3]) == False\nassert     is_Monotonic([1, 2, 3, 1]) == False\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nis_Monotonic([1, 1, 1])\nis_Monotonic([1, 1, 1, 1])\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nA = [12,11,13,5,6,7]\nassert is_Monotonic(A) == True\n\n\nA = [12,11,13,5,6,7]\nassert is_Monotonic(A) == False\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_Monotonic(list(range(10))) == True, 'incorrect output'\nassert     is_Monotonic(list(range(10))) == True, 'incorrect output'\nassert     is_Monotonic(list(range(-10,0))) == True, 'incorrect output'\nassert     is_Monotonic(list(range(1,10))) == True, 'incorrect output'\nassert     is_Monotonic(list(range(1,20))) == True, 'incorrect output'\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_Monotonic([1,2,3,4,5]) == False\nassert     is_Monotonic([1,1,1,1]) == True\nassert     is_Monotonic([1,1,2,3,3]) == True\nassert     is_Monotonic([1,1,2,2,3,3]) == True\nassert     is_Monotonic([1,2,1,2,1,1,1,2]) == False\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_Monotonic([0, 0, 0, 1, 0, 0, 1]) == True, \"Wrong Output\"\nassert     is_Monotonic([0, 0, 1, 1, 1]) == False, \"Wrong Output\"\nassert     is_Monotonic([0, 1, 0, 1, 0]) == False, \"Wrong Output\"\nassert     is_Monotonic([0, 1, 1, 1, 1, 1]) == True, \"Wrong Output\"\nassert     is_Monotonic([0, 1, 1, 1, 1, 1, 1, 1]) == True, \"Wrong Output\"\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_Monotonic([-5, -4, -3, -2, -1]) == True,'monotonic'\nassert     is_Monotonic([-5, -4, -3, -2, 0]) == True, 'non-monotonic'\nassert     is_Monotonic([-5, -4, -3, -2, 1]) == False,'monotonic'\nassert     is_Monotonic([-5, -4, -3, -2, 2]) == False, 'non-monotonic'\nassert     is_Monotonic([-5, -4, -3, -2, -1]) == True,'monotonic'\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_sublist([1,2,3], []) == True\nassert     is_sublist([1,2,3], [1]) == True\nassert     is_sublist([1,2,3], [1,2]) == False\nassert     is_sublist([1,2,3], [1,2,3]) == True\nassert     is_sublist([1,2,3], [3,2,1]) == True\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_sublist(['a','b','c'], ['a','b','c']) == True, 'Incorrect answer, try again'\nassert     is_sublist(['a','b','c'], ['b','c','d']) == False, 'Incorrect answer, try again'\nassert     is_sublist(['a','b','c'], ['b','c','c']) == True, 'Incorrect answer, try again'\nassert     is_sublist(['a','b','c'], ['a','c','d']) == False, 'Incorrect answer, try again'\nassert     is_sublist(['a','b','c'], ['b','a','c']) == True, 'Incorrect answer, try again'\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_sublist([1, 2, 3, 4], [1, 2, 3]) == False\nassert     is_sublist([1, 2, 3, 4], [1, 2, 3, 4]) == True\nassert     is_sublist([1, 2, 3, 4], [1, 2]) == False\nassert     is_sublist([1, 2, 3, 4], [4]) == True\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_sublist([1,2,3], [1,2]) == True\nassert     is_sublist([1,2,3], [1,3]) == False\nassert     is_sublist([1,2], [1,2,3]) == True\nassert     is_sublist([1,2,3], [1,2]) == False\nassert     is_sublist([1,2,3], [1,2]) == False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_sublist([1,2,3],[1,2]) == True, 'Failed'\nassert     is_sublist([1,2,3],[1,3]) == False, 'Failed'\nassert     is_sublist([1,2,3,4],[1,2]) == False, 'Failed'\nassert     is_sublist([1,2,3],[1,2,3]) == True, 'Failed'\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    pass\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_sublist([], []), 'Empty list is not a sublist of an empty list'\nassert     is_sublist([], [1,2,3]), 'Empty list is not a sublist of non-empty list'\nassert     is_sublist([1,2,3], []), 'Non-empty list is not a sublist of an empty list'\nassert     is_sublist([1,2,3], [1,2,3]), 'Non-empty list is not a sublist of non-empty list'\nassert     is_sublist([1,2,3], [3,2,1]), 'Non-empty list is not a sublist of non-empty list'\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    l_len = len(l)\n    s_len = len(s)\n    if l_len < s_len:\n        return False\n    else:\n        for i in range(s_len):\n            for j in range(l_len):\n                if l[j] == s[i]:\n                    return True\n            return False\n\ndef is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    l_len = len(l)\n    s_len = len(s)\n    if l_len < s_len:\n        return False\n    else:\n        for i in range(s_len):\n            for j in range(l_len):\n                if l[j] == s[i]:\n                    return True\n            return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_sublist([1,2,3], [2]) == True, \"Case 1\"\nassert     is_sublist([1,2,3], [1,2]) == True, \"Case 2\"\nassert     is_sublist([1,2,3], [3]) == True, \"Case 3\"\nassert     is_sublist([1,2,3], [2,3]) == False, \"Case 4\"\nassert     is_sublist([1,2,3], [1]) == True, \"Case 5\"\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_equal_tuple([(1,2,3,4),(1,2,3,4),(1,2,3,4),(1,2,3,4)]) == True, \"tuples with equal length are not equal\"\nassert     find_equal_tuple([(1,2,3,4),(1,2,3,4),(1,2,3,4,5),(1,2,3,4)]) == False, \"tuple with unequal length are not equal\"\nassert     find_equal_tuple([(1,2,3,4),(1,2,3,4),(1,2,3,4,5),(1,2,3,4),(1,2,3,4),(1,2,3,4)]) == True, \"tuple with identical elements are equal\"\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_equal_tuple(([1,2,3],[4,5,6]))\nassert     not find_equal_tuple(([1,2,3],[4,5,6,7]))\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == '__main__':\n    Input = [[1, 2, 3],\n            [],\n            [-1, -2, -3],\n            [-1, -2, -3],\n            [0, 1, 2, 3]]\n    assert find_equal_tuple(Input) == True\n    Input = [[1, 2, 3],\n            [1, 2, 3],\n            [1, 2, 3],\n            [1, 2, 3]]\n    assert find_equal_tuple(Input) == False\n    Input = [[1, 2, 3],\n            [0, 2, 3],\n            [-1, -2, -3],\n            [-1, -2, -3],\n            [0, 1, 2, 3]]\n    assert find_equal_tuple(Input) == True\n    Input = [[1, 2, 3],\n            [0, 2, 3],\n            [-1, -2, -3],\n            [-1, -2, -3],\n            [0, 1, 2, 3]]\n    "
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_equal_tuple([(1,2), (3,4)]) == True, \"First tuple should have length = 4\"\nassert     find_equal_tuple([(1,2), (2,4)]) == False, \"Second tuple should have length = 4\"\nassert     find_equal_tuple([(1,2), (2,2)]) == False, \"Both tuples should have length = 4\"\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_equal_tuple([(1,), (1, 2), (3,), (4,)])     ==     True,     'incorrect'\nassert     find_equal_tuple([(1, 2), (1,), (3,), (4,)])     ==     False,     'incorrect'\nassert     find_equal_tuple([(1, 2), (3,), (4,)])     ==     True,     'incorrect'\nassert     find_equal_tuple([(1, 2), (3), (4,)])     ==     False,     'incorrect'\nassert     find_equal_tuple([(1), (1, 2), (3), (4,)])     ==     False,     'incorrect'\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef find_equal_tuple_return(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    The function should return a tuple of length equal to the length of the input tuple.\n    The function should return an empty tuple if all the given tuples do not have equal length.\n    '''\n    pass\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_equal_tuple(    ((1,), (2,), (3,))    )    ==    False\nassert     find_equal_tuple(    ((1,), (2,), (3,))    )    ==    True\nassert     find_equal_tuple(    ((1,), (2,), (1,))    )    ==    True\nassert     find_equal_tuple(    ((1,), (2,), (3,))    )    ==    False\nassert     find_equal_tuple(    ((), (), ())    )    ==    True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == '__main__':\n    input_ = [\n    ([(1,2),(2,4),(1,3),(2,1),(4,2),(3,3)]),\n    ([(1,2),(2,4),(1,3),(2,1),(4,2),(3,3),(1,1)])\n    ]\n    output = [True, False]\n    for i in range(len(input_)):\n        if find_equal_tuple(input_[i])!= output[i]:\n            print(\"Error found in test {}\".format(i+1))"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_equal_tuple([(1,2,3), (1,2), (1,), (1,1,1), (1,1,1,1)]) \nassert not find_equal_tuple([(1,2,3), (1,2), (1,), (1,1,1), (1,1,1,1), (1,1)])\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef bubble_sort(nums):\n    '''\n    Write a function that sorts a list using the bubble sort algorithm.\n    '''\n    pass\n\nassert\n\ndef check_sorted(nums):\n    '''\n    Write a function that takes in a list of integers and returns True if the\n    list is sorted in ascending order and False otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nassert \n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     comb_sort([]) == []\nassert     comb_sort([1]) == [1]\nassert     comb_sort([1,2]) == [1,2]\nassert     comb_sort([1,2,3]) == [1,2,3]\nassert     comb_sort([2,1,3]) == [1,2,3]\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     comb_sort([3,5,2,1,8,5,7,4]) == sorted(nums), \"Sorting not completed\"\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1):\n        if nums[i] > nums[i+1]:\n            nums[i], nums[i+1] = nums[i+1], nums[i]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     comb_sort([1,2,3]) == [1,2,3]\nassert     comb_sort([1,1,2,3,3]) == [1,1,2,3,3]\nassert     comb_sort([1,2,3,4,5]) == [1,2,3,4,5]\nassert     comb_sort([1,2,2,4,4,5]) == [1,2,2,4,4,5]\n\nprint('All tests passed')"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     dif_Square(8) == True, 'This number can be represented as the difference of two squares'\nassert     dif_Square(29) == False, 'This number can not be represented as the difference of two squares'\nassert     dif_Square(19) == True, 'This number can be represented as the difference of two squares'\nassert     dif_Square(18) == False, 'This number can not be represented as the difference of two squares'\nassert     dif_Square(45) == False, 'This number can not be represented as the difference of two squares'\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     dif_Square(1) == True, \"Expected True\"\nassert     dif_Square(2) == True, \"Expected True\"\nassert     dif_Square(3) == False, \"Expected False\"\nassert     dif_Square(5) == False, \"Expected False\"\nassert     dif_Square(25) == True, \"Expected True\"\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ndif_Square(9) == True\nassert\ndif_Square(29) == False\nassert \ndif_Square(0) == True\nassert\ndif_Square(4) == False\nassert\ndif_Square(101) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     dif_Square(1) == False\nassert     dif_Square(2) == True\nassert     dif_Square(3) == True\nassert     dif_Square(7) == True\nassert     dif_Square(25) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     dif_Square(3) == True\nassert     dif_Square(7) == True\nassert     dif_Square(11) == False\nassert     dif_Square(1) == True\nassert     dif_Square(2) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     dif_Square(8) == True, 'dif_Square should return True'\nassert     dif_Square(3) == False, 'dif_Square should return False'\nassert     dif_Square(-8) == False, 'dif_Square should return False'\nassert     dif_Square(0) == True, 'dif_Square should return True'\n\n\ndef dif_Square_1(n):\n    '''\n    Implement a function which returns whether the given number can be represented as the difference of two squares or not.\n    '''\n    pass\n    # complete this function\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef dif_Sum(n): \n    '''\n    Write a python function to check whether the given number can be represented as the sum of a square and a cube.\n    '''\n    pass\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    return n == int(((n * n) + 1) / 2)"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_samepatterns(['red','green','blue'],['red','blue','green']) == True\nassert     is_samepatterns(['red','green','blue'],['blue','red','green']) == True\nassert     is_samepatterns(['red','green','blue'],['red','green','blue']) == True\nassert     is_samepatterns(['red','green','blue'],['green','red','blue']) == False\nassert     is_samepatterns(['red','green','blue'],['blue','green','red']) == False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_samepatterns([{1,2,3,4},{1,2,3,4}],[{1,2,3,4},{1,2,3,4}]) == True\nassert     is_samepatterns([{1,2,3,4},{1,2,3,4}],[{1,2,3,4},{1,2,3,4},{1,2,3,4}]) == False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_samepatterns([\n    {'red': 5, 'green': 9, 'blue': 7},\n    {'red': 2, 'green': 0, 'blue': 1},\n    {'red': 7, 'green': 9, 'blue': 8},\n    {'red': 0, 'green': 2, 'blue': 1},\n    {'red': 7, 'green': 1, 'blue': 0}],\n    [\n    {'red': 5, 'green': 9, 'blue': 7},\n    {'red': 2, 'green': 0, 'blue': 1},\n    {'red': 7, 'green': 9, 'blue': 8},\n    {'red': 0, 'green': 2, 'blue': 1},\n    {'red': 7, 'green': 1, 'blue': 0}]) is True, \\\n    \"is_samepatterns([{'red': 5, 'green': 9, 'blue': 7}, {'red': 2, 'green': 0, 'blue': 1}, {'red': 7, 'green': 9, 'blue': 8}, {'red': 0, 'green': 2, 'blue': 1}, {'red': 7, 'green': 1, 'blue': 0}], \\\n    [{'red': 5, 'green': 9, 'blue': 7}, {'red': 2, 'green': 0, 'blue': 1}, {'red': 7, 'green': 9, 'blue': 8}, {'red': 0, 'green': 2, 'blue': 1}, {'red': 7, 'green': 1, 'blue': 0}]) is not True, 'is_samepatterns([{'red': 5, 'green': 9, 'blue': 7}, {'red': 2, 'green': 0, 'blue': 1}, {'red': 7, 'green': 9, 'blue': 8}, {'red': 0, 'green': 2, 'blue': 1}, {'red': 7, 'green': 1, 'blue': 0}], \\\n    [{'red': 5, 'green': 9, 'blue': 7}, {'red': 2, 'green': 0, 'blue': 1}, {'red': 7, 'green': 9, 'blue': 8}, {'red': 0, 'green': 2, 'blue': 1}, {'red': 7, 'green': 1, 'blue': 0}])\"\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    is_samepatterns(['bgr','rg','rr'],['rbg','gbr','brr']) == True\nassert \n    is_samepatterns(['bgr','rg','rr'],['bgr','rgr','rgr']) == False\n    "
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nis_samepatterns([1,2,3], [1,1,2])\nis_samepatterns([1,2,3], [1,2,3])\nis_samepatterns([1,2,3], [1,2,4])\nis_samepatterns([1,2,3], [2,1,3])\nis_samepatterns([1,2,3], [2,1,3])\nis_samepatterns([1,2,3], [1,1,3])\nis_samepatterns([1,2,3], [1,2,3])\nis_samepatterns([1,2,3], [1,2,4])\nis_samepatterns([1,2,3], [2,1,3])\nis_samepatterns([1,2,3], [2,1,3])\nis_samepatterns([1,2,3], [1,1,3])\nis_samepatterns([1,2,3], [1,2,3])\nis_samepatterns([1,2,3], [1,2,4])\nis_samepatterns([1,2,3], [2,1,3])\nis_samepatterns([1,2,3], [2,1,3])\nis_samepatterns([1,2,3], [1,1,3])\nis_samepatterns([1,2,3], [1,2,3])\nis_samepatterns([1,2,3], [1,2,4])\nis_samepatterns([1,2,3], [2,1,3])\nis_samepatterns([1,2,3], [2,1,3])\nis_samepatterns([1,2,3], [1,1,3])\nis_samepatterns([1,2,3], [1,2,3])\nis_samepatterns([1,2,3], [1,2,4])\nis_samepatterns([1,2,3], [2,1,3])\nis_samepatterns([1,2,3], [2,1,3])\nis_samepatterns([1,2,3], [1,1,3])\nis_samepatterns([1,2,3], [1,2,3])\nis_samepatterns([1,2,3], [1,2,4])\nis_samepatterns([1,2,3], [2,1,3])\nis_samepatterns([1,2,3], [2,1,3])\nis_samepatterns([1,2,3], [1,1,3])\nis_samepatterns([1,2,3], [1,2,3])\nis_samepatterns([1,2,3], [1,2,4])\nis_samepatterns([1,2,3], [2,1,3])\nis_samepatterns([1,2,3], [2,1,3])\nis_samepatterns([1,2,3], [1,1,3])\nis_samepatterns([1,2,3], [1,2,3])\nis_samepatterns([1,2,3], [1,2,4])\nis_samepatterns([1,2,3], [2,1,3])\nis_samepatterns([1,2,3], [2,1,3])\nis_samepatterns([1,2,3], [1,1,3])\nis_samepatterns([1,2,3], [1,2,3])\nis_samepatterns([1,2,3], [1,2,4])\nis_samepatterns([1,2,3], [2,1,3])\nis_samepatterns([1,2,3], [2,1,3])\nis_samepatterns([1,2,3], [1,1,3])\nis_samepatterns([1,2,3], [1,2,3])\nis_samepatterns([1,2,3], [1,2,4])\nis_samepatterns([1,2,3], [2,1,3])\nis_samepatterns([1,2,3], [2,1,3])\nis_samepatterns([1,2,3], [1,1,3])\nis_samepatterns([1,2,3], [1,2,3])\nis_samepatterns([1,2,3], [1,2,4])\nis_samepatterns([1,2,3], [2,1,3])\nis_samepatterns([1,2,3], [2,1,3])\nis_samepatterns([1,2,3], [1,1,3])\nis_samepatterns([1,2,3], [1,2,3])\nis_samepatterns([1,2,3], [1,2,4])\nis_samepatterns([1,2,3], [2,1,3])\nis_samepatterns([1,2,3], [2,1,3])\nis_samepatterns([1,2,3], [1,1,3])\nis_samepatterns([1,2,3], [1,2,3])\nis_samepatterns([1,2,3], [1,2,4])\nis_samepatterns([1,2,3], [2,1,3])\nis_samepatterns([1,2,3], [2,1,3])\nis_samepatterns([1,2,3], [1,1,3])\nis_samepatterns([1,2,3], [1,2,3])\nis_samepatterns([1,2,3], [1,2,4])\nis_samepatterns([1,2,3], [2,1,3])\nis_samepatterns([1,2,3], [2,1,3])\nis_samepatterns([1,2,3], [1,1,3])\nis_samepatterns([1,2,3], [1,2,3])\nis_samepatterns([1,2,3], [1,2,4])\nis_samepatterns([1,2,3], [2,1,3])\nis_samepatterns([1,2,3], [2,1,3])\nis_samepatterns([1,2,3], [1,1,3])\nis_samepatterns([1,2,3], [1,2,3])\nis_samepatterns([1,2,3], [1,2,4])\nis_samepatterns([1,2,3], [2,1,3])\nis_samepatterns([1,2,3], [2,1,3])\nis_samepatterns([1,2,3], [1,1,3])\nis_samepatterns([1,2,3], [1,2,3])\nis_samepatterns([1,2,3], [1,2,4])\nis_samepatterns([1,2,3], [2,1,3])\nis_samepatterns([1,2,3], [2,1,3])\nis_samepatterns([1,2,3], [1,1,3])\nis_samepatterns([1,2,3], [1,2,3])\nis_samepatterns([1,2,3], [1,2,4])\nis_samepatterns([1,2,3], [2,1,3])\nis_samepatterns([1,2,3], [2,1,3])\nis_samepatterns([1,2,3], [1,1,3])\nis_samepatterns([1,2,3], [1,2,3])\nis_samepatterns([1,2,3], [1,2,4])\nis_samepatterns([1,2,3], [2,1,3])\nis_samepatterns([1,2,3], [2,1,3])\nis_samepatterns([1,2,3], [1,1,3])\nis_samepatterns([1,2,3], [1,2,3])\nis_samepatterns([1,2,3], [1,2,4])\nis_samepatterns([1,2,3], [2,1,3])\nis_samepatterns([1,"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_samepatterns([], [[]]) == True\nassert     is_samepatterns([], [[]]) == False\nassert     is_samepatterns([], [[1],[2]]) == True\nassert     is_samepatterns([], [[1],[2], [1,2]]) == False\nassert     is_samepatterns([], [[1,2],[1,2], [1,2]]) == False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_samepatterns([[\"red\", \"green\", \"blue\"], \n                        [\"black\", \"green\", \"black\"]], \n                        [[\"red\", \"green\", \"blue\"], \n                        [\"black\", \"green\", \"white\"]]) == True, \\\n        \"Error in is_samepatterns(colors, patterns): it should return True.\"\n\nassert     is_samepatterns([[\"red\", \"green\", \"blue\"], \n                        [\"black\", \"green\", \"black\"]], \n                        [[\"red\", \"green\", \"blue\"], \n                        [\"black\", \"green\", \"green\"]]) == False, \\\n        \"Error in is_samepatterns(colors, patterns): it should return False.\"\n\nassert     is_samepatterns([[\"red\", \"green\", \"blue\"], \n                        [\"black\", \"green\", \"black\"]], \n                        [[\"red\", \"green\", \"blue\"], \n                        [\"black\", \"green\", \"white\"]]) == False, \\\n        \"Error in is_samepatterns(colors, patterns): it should return False.\"\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_tuples([(4, 5), (7, 8), (10, 11)], 2) == [(4, 5), (7, 8)]\nassert     find_tuples([(4, 5), (7, 8), (10, 11)], 3) == [(4, 5), (7, 8), (10, 11)]\nassert     find_tuples([(4, 5), (7, 8), (10, 11)], 7) == [(4, 5), (7, 8)]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_tuples([(1,2,3),(4,5,6)], 2) == [(1,4),(2,5),(3,6)]\nassert     find_tuples([(1,2,3),(4,5,6)], 3) == [(1,4,6),(2,5,6)]\nassert     find_tuples([(1,2,3),(4,5,6)], 4) == [(1,4,5,6)]\nassert     find_tuples([(1,2,3),(4,5,6)], 1) == [(1,2,3)]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_tuples([(2,3),(3,5),(6,4)], 2) == [(2,3),(3,5)]\nassert     find_tuples([(2,3),(3,5),(6,4)], 3) == [(3,5)]\nassert     find_tuples([(2,3),(3,5),(6,4)], 4) == []\nassert     find_tuples([(2,3),(3,5),(6,4)], 5) == []\nassert     find_tuples([(2,3),(3,5),(6,4)], 6) == []\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_tuples([(0, 1), (2, 5), (6, 4)], 2) == [(0, 1), (6, 4)]\nassert     find_tuples([(2, 3), (2, 5), (6, 7), (6, 8)], 3) == [(2, 3), (2, 5)]\nassert     find_tuples([(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9)], 3) == []\nassert     find_tuples([(10, 20), (20, 40), (50, 70)], 5) == []\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_tuples([(1,2),(3,4),(5,6)], 3) == [(1,3),(1,5),(3,5)]\nassert     find_tuples([(1,2),(3,4),(5,6)], 5) == [(1,2),(3,4),(5,6)]\nassert     find_tuples([(1,2),(3,4),(5,6)], 10) == []\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_tuples([(0,1,2,3,4), (3,4,5,6,7), (7,8,9,10,11), (11,12,13,14,15)], 5) == [(0,1,2,3,4), (3,4,5,6,7), (7,8,9,10,11)]\nassert     find_tuples([(0,1,2,3,4), (3,4,5,6,7), (7,8,9,10,11)], 5) == []\nassert     find_tuples([(1,2,3,4,5), (3,4,5,6,7), (7,8,9,10,11)], 5) == []\nassert     find_tuples([(1,2,3,4,5), (3,4,5,6,7), (7,8,9,10,11)], 7) == [(1,2,3,4,5)]\nassert     find_tuples([(1,2,3,4,5), (3,4,5,6,7), (7,8,9,10,11)], 11) == [(1,2,3,4,5), (3,4,5,6,7)]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_tuples([(1, 3), (5, 6), (7, 8), (2, 5), (4, 6)], 3) == [(2, 5, 4)]\nassert     find_tuples([(1, 3), (5, 6), (7, 8), (2, 5), (4, 6)], 2) == [(2, 5), (4, 6)]\nassert     find_tuples([(1, 3), (5, 6), (7, 8), (2, 5), (4, 6)], 1) == [(2, 5)]\nassert     find_tuples([(1, 3), (5, 6), (7, 8), (2, 5), (4, 6)], 10) == []\n\ndef find_triples(test_list):\n    '''\n    Write a function to find triples which have all elements divisible by 3 from the given list of tuples.\n    '''\n    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nfind_tuples([(1, 1), (3, 5), (4, 4)], 2) == [(1, 1), (4, 4)]\nfind_tuples([(1, 1), (3, 5), (4, 4)], 3) == [(1, 1), (3, 5), (4, 4)]\nfind_tuples([(1, 1), (3, 5), (4, 4)], 0) == []\nfind_tuples([(1, 1), (3, 5), (4, 4)], 1) == [(1, 1)]\nfind_tuples([(1, 1), (3, 5), (4, 4)], 5) == []\nfind_tuples([(1, 1), (3, 5), (4, 4)], 6) == []\nfind_tuples([(1, 1), (3, 5), (4, 4)], 7) == []\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_tuples([(1,2,3,4),(1,2,3,5)],2) ==    [(1,2,3),(1,2,4)]\nassert     find_tuples([(1,2,3,4),(1,2,3,5)],3) ==    [(1,2,3),(1,2,4),(1,2,5)]\nassert     find_tuples([(1,2,3,4),(1,2,3,5)],4) ==    [(1,2,3,4),(1,2,3,5)]\nassert     find_tuples([(1,2,3,4),(1,2,3,5)],5) ==    [(1,2,3,4),(1,2,3,5)]\nassert     find_tuples([(1,2,3,4),(1,2,3,5)],6) ==    [(1,2,3,4),(1,2,3,5)]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_tuples([(1,2),(2,3),(3,4),(4,5)], 2) == [(1,2),(2,3),(3,4)]\nassert     find_tuples([(1,2),(2,3),(3,4),(4,5)], 3) == [(1,2,3),(2,3,4),(3,4,5)]\nassert     find_tuples([(1,2),(2,3),(3,4),(4,5)], 1) == [(1,2,3,4,5)]\nassert     find_tuples([], 5) == []\nassert     find_tuples([], 1) == []\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint (\"is_Diff tests: passed\")\n\nprint ()\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     (is_Diff(11)    == True), \"Wrong output\"\nassert     (is_Diff(12)    == False), \"Wrong output\"\nassert     (is_Diff(18)    == False), \"Wrong output\"\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_Diff(11) == True, \"Expected is_Diff(11) to be True\"\nassert     is_Diff(12) == False, \"Expected is_Diff(12) to be False\"\nassert     is_Diff(1) == False, \"Expected is_Diff(1) to be False\"\nassert     is_Diff(10) == False, \"Expected is_Diff(10) to be False\"\n\ndef is_Divisible(n, k): \n    '''\n    Write a python function to check whether a number n is divisible by a number k.\n    '''\n    pass\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert not is_Diff(3)\nassert not is_Diff(12)\nassert is_Diff(19)\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_Diff(10) == True, \"incorrect result for is_Diff(10): \"+str(is_Diff(10))\nassert     is_Diff(11) == False, \"incorrect result for is_Diff(11): \"+str(is_Diff(11))\n\nprint(\"-->Test is_Diff (C) passed\")\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nis_Diff(11) == True\nis_Diff(2) == False\nis_Diff(21) == True\nis_Diff(22) == False\nis_Diff(23) == False"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_Diff(3) == False, \"Test Failed: is_Diff(\"+str(3)+\")\"\nassert     is_Diff(9) == True, \"Test Failed: is_Diff(\"+str(9)+\")\"\nassert     is_Diff(17) == False, \"Test Failed: is_Diff(\"+str(17)+\")\"\nassert     is_Diff(18) == True, \"Test Failed: is_Diff(\"+str(18)+\")\"\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef is_Divide(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    pass\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(\"PASS\" if (is_Diff(5) == False) else \"FAIL\") \n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     word_len('peter') == True\nassert     word_len('peterpeter') == False\nassert     word_len('peter peter') == False\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert word_len('hello') == True\nassert word_len('goodbye') == False\nassert word_len('') == False\nassert word_len('hello ') == True\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     word_len('hello') == True, \"hello length is odd\"\nassert     word_len('world') == False, \"hello length is even\"\nassert     word_len('') == False, \"Empty word\"\nassert     word_len('a') == False, \"a is a single character\"\nassert     word_len('6') == True, \"6 is odd\"\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n'''\nWrite a Python program to check whether a string starts with the given character using keywords.\nSample Input    Expected Output\n\"ABCDEFGH\"  True\n\"abc\"    False\n\"123\"    False\n\"abcd\"    False\n\"ABCABC\"    True\n\"abed\"    False\n'''\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert word_len('hello') == True\nassert word_len('abcd') == False\nassert word_len('hello world') == True\nassert word_len('hello') == False\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tetrahedral_number(0) == 1, \\\n        \"tetrahedral_number(0): Expected 1, got %d\" % (tetrahedral_number(0))\nassert     tetrahedral_number(1) == 4, \\\n        \"tetrahedral_number(1): Expected 4, got %d\" % (tetrahedral_number(1))\nassert     tetrahedral_number(2) == 7, \\\n        \"tetrahedral_number(2): Expected 7, got %d\" % (tetrahedral_number(2))\nassert     tetrahedral_number(3) == 12, \\\n        \"tetrahedral_number(3): Expected 12, got %d\" % (tetrahedral_number(3))\nassert     tetrahedral_number(4) == 20, \\\n        \"tetrahedral_number(4): Expected 20, got %d\" % (tetrahedral_number(4))\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tetrahedral_number(1) == 3\nassert     tetrahedral_number(2) == 12\nassert     tetrahedral_number(3) == 36\nassert     tetrahedral_number(4) == 132\nassert     tetrahedral_number(5) == 760\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tetrahedral_number(1) == 1\nassert     tetrahedral_number(2) == 4\nassert     tetrahedral_number(3) == 12\nassert     tetrahedral_number(4) == 20\nassert     tetrahedral_number(5) == 34\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef nth_tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    pass\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ntetrahedral_number(1) == 1\ntetrahedral_number(2) == 1\ntetrahedral_number(3) == 4\ntetrahedral_number(4) == 7\ntetrahedral_number(5) == 22\ntetrahedral_number(6) == 35\ntetrahedral_number(7) == 55\ntetrahedral_number(8) == 113\ntetrahedral_number(9) == 220\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tetrahedral_number(1) == 4, \"The 1st tetrahedral number should be 4\"\nassert     tetrahedral_number(2) == 6, \"The 2nd tetrahedral number should be 6\"\nassert     tetrahedral_number(3) == 8, \"The 3rd tetrahedral number should be 8\"\nassert     tetrahedral_number(4) == 12, \"The 4th tetrahedral number should be 12\"\nassert     tetrahedral_number(5) == 20, \"The 5th tetrahedral number should be 20\"\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tetrahedral_number(10) == 15\nassert     tetrahedral_number(100) == 12755\nassert     tetrahedral_number(1000) == 1048576\nassert     tetrahedral_number(10000) == 1048576000\nassert     tetrahedral_number(100000) == 10485760000\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     volume_sphere(1) == 4/3*math.pi, 'Wrong'\nassert     volume_sphere(0.1) == 4/3*math.pi, 'Wrong'\nassert     volume_sphere(1.1) == 4/3*math.pi, 'Wrong'\nassert     volume_sphere(2) == 4/3*math.pi*((((math.pi*(2**0.5))**3)/3) - 1), 'Wrong'\nassert     volume_sphere(3) == 4/3*math.pi*((((math.pi*(3**0.5))**3)/3) - 1), 'Wrong'\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     volume_sphere(1) == 4/3 * math.pi * math.pow(r,3)\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef volume_cylinder(h, r):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     volume_sphere(1) == 4/3*math.pi*1**3\nassert     volume_sphere(2) == 4/3*math.pi*2**3\nassert     volume_sphere(3) == 4/3*math.pi*3**3\nassert     volume_sphere(0.5) == 4/3*math.pi*0.50**3\nassert     volume_sphere(1.5) == 4/3*math.pi*1.50**3\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     volume_sphere(0.5) == 1, 'Volume of sphere of radius 0.5 should be 1'\nassert     volume_sphere(1) == 4 / 3 * math.pi, 'Volume of sphere of radius 1 should be 4/3*pi'\n\ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nvolume_sphere(1) == 4/3 * math.pi * (1/2)**3\n\nprint(volume_sphere(1))\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     volume_sphere(1) ==  4.18840507\nassert     volume_sphere(2) ==  42.81259\nassert     volume_sphere(3) ==  487.929044\nassert     volume_sphere(4) ==  3197.167412\nassert     volume_sphere(5) ==  5103.486949\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert volume_sphere(3) == math.pi * 3**2 * 3/4\nassert volume_sphere(4) == math.pi * 4**2 * 4/3\nassert volume_sphere(1) == math.pi * 1**2 * 1/3\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nvolume_sphere(2) == math.pi * 4 * 2 ** 2\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef volume_cube(l,w,h):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    pass\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_Char('python') == 'y', 'python'\nassert     get_Char('python') == 'y', 'python'\nassert     get_Char('python') == 'y', 'python'\nassert     get_Char('python') == 'p', 'python'\nassert     get_Char('python') == 'p', 'python'\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_Char(\"earth\") == 0\nassert get_Char(\"hi\") == 37\nassert get_Char(\"life\") == 72\nassert get_Char(\"hello\") == 64\nassert get_Char(\"we\") == 98\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_Char(\"L\")    == 10, \"the output is 10\"\nassert     get_Char(\"L\")    == 25, \"the output is 25\"\nassert     get_Char(\"R\")    == 23, \"the output is 23\"\nassert     get_Char(\"a\")    == 71, \"the output is 71\"\nassert     get_Char(\"A\")    == 77, \"the output is 77\"\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_Char(\"asdvb\") == 4, 'WRONG!'\nassert     get_Char(\"abc\") == 0, 'WRONG!'\nassert     get_Char(\"pwned\") == 10, 'WRONG!'\nassert     get_Char(\"\") == 0, 'WRONG!'\n\ndef get_Char2(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    if strr == '':\n        return 0\n    else:\n        return ord(strr) + ord(strr[0])\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_Char('abc') == get_Char('ABC') == get_Char('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'D', 'fail'\n\ndef get_String(strr):\n    '''\n    Write a python function to find the string made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    pass\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_Char('krishna') == 97\nassert     get_Char('suman') == 97\nassert     get_Char('vijay') == 97\nassert     get_Char('komal') == 97\nassert     get_Char('reem') == 96\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_Char(\"HACK\") == 97, 'Should be 97'\nassert     get_Char(\"Z\") == 122, 'Should be 122'\nassert     get_Char(\"A\") == 65, 'Should be 65'\nassert     get_Char(\"B\") == 66, 'Should be 66'\nassert     get_Char(\"C\") == 67, 'Should be 67'\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_Char(\"rajjitha\")== \"n\"\nassert     get_Char(\"abcdefghijklmnopqrstuvwxyz\")== \"z\"\nassert     get_Char(\"123456789\")== \"9\"\nassert     get_Char(\"A\")== \"a\"\nprint(\"correct\")\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_Char(\"ab\") == 'c', \"Wrong\"\nassert     get_Char(\"ac\") == 'a', \"Wrong\"\nassert     get_Char(\"ads\") =='s', \"Wrong\"\n\n'''\nWrite a python function to remove all the duplicates from a list.\n'''\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_Char(\"hello\") == get_Char(\"Hello\") == 13\nassert     get_Char(\"qweqwe\") == get_Char(\"Qweqwe\") == 36\nassert     get_Char(\"iloveyou\") == get_Char(\"Iloveyou\") == 5\nassert     get_Char(\"heyy\") == get_Char(\"Heyy\") == 5\nassert     get_Char(\"gfksjdjfklsjf\") == get_Char(\"Gfksjdjfklsjf\") == 85\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sequence(1) == 1, \"Wrong Answer\"\nassert     sequence(2) == 3, \"Wrong Answer\"\nassert     sequence(3) == 7, \"Wrong Answer\"\nassert     sequence(4) == 11, \"Wrong Answer\"\nassert     sequence(5) == 18, \"Wrong Answer\"\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nsequence(1) == 1\nassert sequence(2) == 3\nassert sequence(3) == 8\nassert sequence(10) == 155\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sequence(0) == 1\nassert     sequence(1) == 1\nassert     sequence(2) == 2\nassert     sequence(3) == 3\nassert     sequence(4) == 5\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sequence(0) == 0\nassert     sequence(1) == 1\nassert     sequence(2) == 1\nassert     sequence(3) == 2\nassert     sequence(4) == 3\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert sequence(0) == 1\nassert sequence(1) == 1\nassert sequence(2) == 2\nassert sequence(3) == 3\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef newmanConwaySequence(n):\n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    pass\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sequence(0) == 1\nassert     sequence(1) == 2\nassert     sequence(2) == 3\nassert     sequence(3) == 5\nassert     sequence(4) == 8\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef volume_sphere(radius):\n    '''\n    Write a function to find the volume of a sphere with given radius.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert surfacearea_sphere(1) == 4 * math.pi\nassert surfacearea_sphere(2) == 4 * math.pi\nassert surfacearea_sphere(3) == 4 * math.pi\nassert surfacearea_sphere(4) == 4 * math.pi\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(\"====== Check point 1 ======\")\nprint(surfacearea_sphere(0))\nprint(surfacearea_sphere(1))\nprint(surfacearea_sphere(2))\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     surfacearea_sphere(1) ==     4 * math.pi * 1 ** 2, 'Wrong'\nassert     surfacearea_sphere(2) ==     4 * math.pi * 2 ** 2, 'Wrong'\nassert     surfacearea_sphere(3) ==     4 * math.pi * 3 ** 2, 'Wrong'\nassert     surfacearea_sphere(4) ==     4 * math.pi * 4 ** 2, 'Wrong'\nassert     surfacearea_sphere(5) ==     4 * math.pi * 5 ** 2, 'Wrong'\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     surfacearea_sphere(1) == 22.5\nassert surfacearea_sphere(2) == 78.5\nassert surfacearea_sphere(3) == 108.5\nassert surfacearea_sphere(4) == 126.25\nassert surfacearea_sphere(5) == 143.625\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef volume_cone(r1, r2, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     surfacearea_sphere(0) == 0, \"The surface area of a sphere with radius 0 should be 0\"\nassert     surfacearea_sphere(0.1) == 4 * math.pi * 0.1**2, \"The surface area of a sphere with radius 0.1 should be 4 * PI * 0.1**2\"\nassert     surfacearea_sphere(1) == 4 * math.pi, \"The surface area of a sphere with radius 1 should be 4 * PI\"\nassert     surfacearea_sphere(1.1) == 4 * math.pi * 1.1**2, \"The surface area of a sphere with radius 1.1 should be 4 * PI * 1.1**2\"\n\ndef surfacearea_cylinder(r, h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef surfacearea_cube(c):\n    '''\n    Write a function to find the surface area of a cube.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     surfacearea_sphere(1.2)==52.5\nassert     surfacearea_sphere(2.5)==66.4\nassert     surfacearea_sphere(3)==52.5\nassert     surfacearea_sphere(0.2)==0\n\ndef cylinder_volume(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     centered_hexagonal_number(1) ==  1\nassert     centered_hexagonal_number(3) ==  13\nassert     centered_hexagonal_number(4) ==  37\nassert     centered_hexagonal_number(5) ==  83\nassert     centered_hexagonal_number(6) == 145\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     centered_hexagonal_number(1) == 1\nassert     centered_hexagonal_number(2) == 2\nassert     centered_hexagonal_number(3) == 3\nassert     centered_hexagonal_number(4) == 5\nassert     centered_hexagonal_number(5) == 7\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     centered_hexagonal_number(1) == 1\nassert     centered_hexagonal_number(2) == 3\nassert     centered_hexagonal_number(3) == 6\nassert     centered_hexagonal_number(4) == 10\nassert     centered_hexagonal_number(5) == 15\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     centered_hexagonal_number(1) == 0\nassert     centered_hexagonal_number(2) == 1\nassert     centered_hexagonal_number(3) == 1\nassert     centered_hexagonal_number(4) == 4\nassert     centered_hexagonal_number(5) == 6\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     centered_hexagonal_number(1) == 1\nassert     centered_hexagonal_number(2) == 3\nassert     centered_hexagonal_number(3) == 7\nassert     centered_hexagonal_number(4) == 13\nassert     centered_hexagonal_number(5) == 31\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    centered_hexagonal_number(1) == 1\n    centered_hexagonal_number(2) == 5\n    centered_hexagonal_number(3) == 11\n    centered_hexagonal_number(4) == 20\n    centered_hexagonal_number(5) == 41\n    centered_hexagonal_number(6) == 52\n    centered_hexagonal_number(7) == 57\n    centered_hexagonal_number(8) == 62\n    centered_hexagonal_number(9) == 72\n    centered_hexagonal_number(10) == 77\n    centered_hexagonal_number(11) == 82\n    centered_hexagonal_number(12) == 83\n    centered_hexagonal_number(13) == 84\n    centered_hexagonal_number(14) == 86\n    centered_hexagonal_number(15) == 87\n    centered_hexagonal_number(16) == 91\n    centered_hexagonal_number(17) == 96\n    centered_hexagonal_number(18) == 97\n    centered_hexagonal_number(19) == 100\n    centered_hexagonal_number(20) == 101\n    centered_hexagonal_number(21) == 106\n    centered_hexagonal_number(22) == 106\n    centered_hexagonal_number(23) == 108\n    centered_hexagonal_number(24) == 108\n    centered_hexagonal_number(25) == 110\n    centered_hexagonal_number(26) == 110\n    centered_hexagonal_number(27) == 111\n    centered_hexagonal_number(28) == 112\n    centered_hexagonal_number(29) == 113\n    centered_hexagonal_number(30) == 114\n    centered_hexagonal_number(31) == 115\n    centered_hexagonal_number(32) == 116\n    centered_hexagonal_number(33) == 117\n    centered_hexagonal_number(34) == 118\n    centered_hexagonal_number(35) == 119\n    centered_hexagonal_number(36) == 120\n    centered_hexagonal_number(37) == 121\n    centered_hexagonal_number(38) == 122\n    centered_hexagonal_number(39) == 123\n    centered_hexagonal_number(40) == 124\n    centered_hexagonal_number(41) == 125\n    centered_hexagonal_number(42) == 126\n    centered_hexagonal_number(43) == 127\n    centered_hexagonal_number(44) == 128\n    centered_hexagonal_number(45) == 129\n    centered_hexagonal_number(46) == 130\n    centered_hexagonal_number(47) == 131\n    centered_hexagonal_number(48) == 132\n    centered_hexagonal_number(49) == 133\n    centered_hexagonal_number(50) == 134\n    centered_hexagonal_number(51) == 135\n    centered_hexagonal_number(52) == 136\n    centered_hexagonal_number(53) == 137\n    centered_hexagonal_number(54) == 138\n    centered_hexagonal_number(55) == 139\n    centered_hexagonal_number(56) == 140\n    centered_hexagonal_number(57) == 141\n    centered_hexagonal_number(58) == 142\n    centered_hexagonal_number(59) == 143\n    centered_hexagonal_number(60) == 144\n    centered_hexagonal_number(61) == 145\n    centered_hexagonal_number(62) == 146\n    centered_hexagonal_number(63) == 147\n    centered_hexagonal_number(64) == 148\n    centered_hexagonal_number(65) == 149\n    centered_hexagonal_number(66) == 150\n    centered_hexagonal_number(67) == 151\n    centered_hexagonal_number(68) == 152\n    centered_hexagonal_number(69) == 153\n    centered_hexagonal_number(70) == 154\n    centered_hexagonal_number(71) == 155\n    centered_hexagonal_number(72) == 156\n    centered_hexagonal_number(73) == 157\n    centered_hexagonal_number(74) == 158\n    centered_hexagonal_number(75) == 159\n    centered_hexagonal_number(76) == 160\n    centered_hexagonal_number(77) == 161\n    centered_hexagonal_number(78) == 162\n    centered_hexagonal_number(79) == 163\n    centered_hexagonal_number(80) == 164\n    centered_hexagonal_number(81) == 165\n    centered_hexagonal_number(82) == 166\n    centered_hexagonal_number(83) == 167\n    centered_hexagonal_number(84) == 168\n    centered_hexagonal_number(85) == 169\n    centered_hexagonal_number(86) == 170\n    centered_hexagonal_number(87) == 171\n    centered_hexagonal_number(88) == 172\n    centered_hexagonal_number(89) == 173\n    centered_hexagonal_number(90) == 174\n    centered_hexagonal_number(91) == 175\n    centered_hexagonal_number(92) == 176\n    centered_hexagonal_number(93) == 177\n    centered_hexagonal_number(94) == 178\n    centered_hexagonal_number(95) == 179\n    centered_hexagonal_number(96) == 180\n    centered_hexagonal_number(97) == 181\n    centered_hexagonal_number(98) == 182\n    centered_hexagonal_number(99) == 183\n    centered_hexagonal_number(100) == 184\n    centered_hexagonal_number(101) == 185\n    centered_hexagonal_number(102) == 186\n    centered_hexagonal_number(103) == 187\n    centered_hexagonal_number(104) == 188\n    centered_hexagonal_number(105) == 189\n    centered_hexagonal_number(106) == 190\n    centered_hexagonal_number(107) == 191\n    centered_hexagonal_number(108) == 192\n    centered_hexagonal_number(109) == 193\n    centered_hexagonal_number(110) == 194\n    centered_hexagonal_number(111) == 195\n    centered_hexagonal_number(112) == 196\n    centered_hexagonal_number(113) == 197\n    centered_hexagonal_number(114) == 198\n    centered_hexagonal_number(115) == 199\n    centered_hexagonal_number(116) == 200\n    centered_hexagonal_number(117) == 201\n    centered_hexagonal_number(118) == 202\n    centered_hexagonal_number(119) == 203\n    centered_hexagonal_number(120) == 204\n    centered_hexagonal_number(121) == 205\n    centered_hexagonal_number(122) == 206\n    centered_hexagonal_number(123) == 207\n    centered_hexagonal_number(124) == 208\n    centered_hexagonal_number(125) == 209\n    centered_hexagonal_number(126) == 210\n    centered_hexagonal_number(127) == 211\n    centered_hexagonal_number(128) == 212\n    centered_hexagonal_number(129) == 213\n    centered_hexagonal_number(130) == 214\n    centered_hexagonal_number(131) == 215\n    centered_hexagonal_number(132) == 216\n    centered_hexagonal_number(133) == 217\n    centered_hexagonal_number(134) == 218\n    centered_hexagonal_number(135) == 219\n    centered_hexagonal_number(136) == 220\n    centered_hexagonal_number(137) == 221\n    centered_hexagonal_number(138) == 222\n    centered_hexagonal_number(139) == 223\n    centered_hexagonal_number(140) == 224\n    centered_hexagonal_number(141) == 225\n    centered_hexagonal_number(142) == 226\n    centered_hexagonal_number(143) == 227\n    centered_hexagonal_number(144) == 228\n    centered_hexagonal_number(145) == 229\n    centered_hexagonal_number(146) == 230\n    centered_hexagonal_number(147) == 231\n    centered_hexagonal_number(148) == 232\n    centered_hexagonal_number(149) == 233\n    centered_hexagonal_number(150) == 234\n    centered_hexagonal_number(151) == 235\n    centered_hexagonal_number(152) == 236\n    centered_hexagonal_number(153) == 237\n    centered_hexagonal_numbe"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     centered_hexagonal_number(4) == 2\nassert     centered_hexagonal_number(1) == 4\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ncentered_hexagonal_number(3) == 6\ncentered_hexagonal_number(6) == 14\ncentered_hexagonal_number(7) == 21\ncentered_hexagonal_number(8) == 28\ncentered_hexagonal_number(9) == 36\ncentered_hexagonal_number(10) == 40\ncentered_hexagonal_number(11) == 44\ncentered_hexagonal_number(12) == 48\ncentered_hexagonal_number(13) == 52\ncentered_hexagonal_number(14) == 56\ncentered_hexagonal_number(15) == 60\ncentered_hexagonal_number(16) == 64\ncentered_hexagonal_number(17) == 68\ncentered_hexagonal_number(18) == 72\ncentered_hexagonal_number(19) == 76\ncentered_hexagonal_number(20) == 80\ncentered_hexagonal_number(21) == 84\ncentered_hexagonal_number(22) == 88\ncentered_hexagonal_number(23) == 92\ncentered_hexagonal_number(24) == 96\ncentered_hexagonal_number(25) == 100\ncentered_hexagonal_number(26) == 104\ncentered_hexagonal_number(27) == 108\ncentered_hexagonal_number(28) == 112\ncentered_hexagonal_number(29) == 116\ncentered_hexagonal_number(30) == 120\ncentered_hexagonal_number(31) == 124\ncentered_hexagonal_number(32) == 128\ncentered_hexagonal_number(33) == 132\ncentered_hexagonal_number(34) == 136\ncentered_hexagonal_number(35) == 140\ncentered_hexagonal_number(36) == 144\ncentered_hexagonal_number(37) == 148\ncentered_hexagonal_number(38) == 152\ncentered_hexagonal_number(39) == 156\ncentered_hexagonal_number(40) == 160\ncentered_hexagonal_number(41) == 164\ncentered_hexagonal_number(42) == 168\ncentered_hexagonal_number(43) == 172\ncentered_hexagonal_number(44) == 176\ncentered_hexagonal_number(45) == 180\ncentered_hexagonal_number(46) == 184\ncentered_hexagonal_number(47) == 188\ncentered_hexagonal_number(48) == 192\ncentered_hexagonal_number(49) == 196\ncentered_hexagonal_number(50) == 200\ncentered_hexagonal_number(51) == 204\ncentered_hexagonal_number(52) == 208\ncentered_hexagonal_number(53) == 212\ncentered_hexagonal_number(54) == 216\ncentered_hexagonal_number(55) == 220\ncentered_hexagonal_number(56) == 224\ncentered_hexagonal_number(57) == 228\ncentered_hexagonal_number(58) == 232\ncentered_hexagonal_number(59) == 236\ncentered_hexagonal_number(60) == 240\ncentered_hexagonal_number(61) == 244\ncentered_hexagonal_number(62) == 248\ncentered_hexagonal_number(63) == 252\ncentered_hexagonal_number(64) == 256\ncentered_hexagonal_number(65) == 260\ncentered_hexagonal_number(66) == 264\ncentered_hexagonal_number(67) == 268\ncentered_hexagonal_number(68) == 272\ncentered_hexagonal_number(69) == 276\ncentered_hexagonal_number(70) == 280\ncentered_hexagonal_number(71) == 284\ncentered_hexagonal_number(72) == 288\ncentered_hexagonal_number(73) == 292\ncentered_hexagonal_number(74) == 296\ncentered_hexagonal_number(75) == 300\ncentered_hexagonal_number(76) == 304\ncentered_hexagonal_number(77) == 308\ncentered_hexagonal_number(78) == 312\ncentered_hexagonal_number(79) == 316\ncentered_hexagonal_number(80) == 320\ncentered_hexagonal_number(81) == 324\ncentered_hexagonal_number(82) == 328\ncentered_hexagonal_number(83) == 332\ncentered_hexagonal_number(84) == 336\ncentered_hexagonal_number(85) == 340\ncentered_hexagonal_number(86) == 344\ncentered_hexagonal_number(87) == 348\ncentered_hexagonal_number(88) == 352\ncentered_hexagonal_number(89) == 356\ncentered_hexagonal_number(90) == 360\ncentered_hexagonal_number(91) == 364\ncentered_hexagonal_number(92) == 368\ncentered_hexagonal_number(93) == 372\ncentered_hexagonal_number(94) == 376\ncentered_hexagonal_number(95) == 380\ncentered_hexagonal_number(96) == 384\ncentered_hexagonal_number(97) == 388\ncentered_hexagonal_number(98) == 392\ncentered_hexagonal_number(99) == 396\ncentered_hexagonal_number(100) == 400\ncentered_hexagonal_number(101) == 404\ncentered_hexagonal_number(102) == 408\ncentered_hexagonal_number(103) == 412\ncentered_hexagonal_number(104) == 416\ncentered_hexagonal_number(105) == 420\ncentered_hexagonal_number(106) == 424\ncentered_hexagonal_number(107) == 428\ncentered_hexagonal_number(108) == 432\ncentered_hexagonal_number(109) == 436\ncentered_hexagonal_number(110) == 440\ncentered_hexagonal_number(111) == 444\ncentered_hexagonal_number(112) == 448\ncentered_hexagonal_number(113) == 452\ncentered_hexagonal_number(114) == 456\ncentered_hexagonal_number(115) == 460\ncentered_hexagonal_number(116) == 464\ncentered_hexagonal_number(117) == 468\ncentered_hexagonal_number(118) == 472\ncentered_hexagonal_number(119) == 476\ncentered_hexagonal_number(120) == 480\ncentered_hexagonal_number(121) == 484\ncentered_hexagonal_number(122) == 488\ncentered_hexagonal_number(123) == 492\ncentered_hexagonal_number(124) == 496\ncentered_hexagonal_number(125) == 500\ncentered_hexagonal_number(126) == 504\ncentered_hexagonal_number(127) == 508\ncentered_hexagonal_number(128) == 512\ncentered_hexagonal_number(129) == 516\ncentered_hexagonal_number(130) == 520\ncentered_hexagonal_number(131) == 524\ncentered_hexagonal_number(132) == 528\ncentered_hexagonal_number(133) == 532\ncentered_hexagonal_number(134) == 536\ncentered_hexagonal_number(135) == 540\ncentered_hexagonal_number(136) == 544\ncentered_hexagonal_number(137) == 548\ncentered_hexagonal_number(138) == 552\ncentered_hexagonal_number(139) == 556\ncentered_hexagonal_number(140) == 560\ncentered_hexagonal_number(141) == 564\ncentered_hexagonal_number(142) == 568\ncentered_hexagonal_number(143) == 572\ncentered_hexagonal_number(144) == 576\ncentered_hexagonal_number(145) == 580\ncentered_hexagonal_number(146) == 584\ncentered_hexagonal_number(147) == 588\ncentered_hexagonal_number(148) == 592\ncentered_hexagonal_number(149) == 596\ncentered_hexagonal_number(150) == 600\ncentered_hexagonal_number(151) == 604\ncentered_hexagonal_number(152) == 608\ncentered_hexagonal_number(153) == 612\ncentered_hexagonal_number(154) == 616\ncentered_hexagonal_number(155) == 620\ncentered_hexagonal_number(156) == 624\ncentered_hexagonal_number(157) == 628\ncentered_hexagonal_number(158) == 632\ncentered_hexagonal_number(159) == 636\ncentered_hexagonal_number(160) == 640\ncentered_hexagonal_number(161) == 644\ncentered_hexagonal_number(162) == 648\ncentered_hexagonal_number(163) == 652\ncentered_hexagonal_number(164) == 656\ncentered_hexagonal_number(165) == 660\ncentered_hexagonal_number(166) == 664\ncentered_hexagonal_number(167) == 66"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     merge_dictionaries_three({1: 10, 2: 20},{3: 30, 4: 40},{5: 50,6: 60}) == {1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60}\nassert     merge_dictionaries_three({1: 10, 2: 20},{3: 30, 4: 40},{5: 50}) == {1: 10, 2: 20, 3: 30, 4: 40, 5: 50}\nassert     merge_dictionaries_three({1: 10, 2: 20},{3: 30, 4: 40},{5: 50, 6: 60}) == {1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     merge_dictionaries_three(d1={1:2,3:4}, d2={2:5,4:6}, d3={1:1,3:3}) == {1:1, 2:5, 3:3, 4:6}\nassert    merge_dictionaries_three(d1={1:2,3:4}, d2={}, d3={1:1,3:3}) == {1:2, 3:4, 1:1, 3:3}\nassert    merge_dictionaries_three(d1={}, d2={1:2,3:4}, d3={1:1,3:3}) == {1:2, 3:4, 1:1, 3:3}\nassert    merge_dictionaries_three(d1={1:2,3:4}, d2={1:1,3:3}, d3={}) == {1:1, 2:5, 3:3, 4:6}\nassert    merge_dictionaries_three(d1={1:2,3:4}, d2={1:1,3:3}, d3={1:1,2:5}) == {1:1, 2:5, 3:3, 4:6}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     merge_dictionaries_three({1:10, 2:20}, {3:30, 4:40}, {5:50,6:60}) == {1:10, 2:20, 3:30, 4:40, 5:50, 6:60}\nassert     merge_dictionaries_three({1:10, 2:20}, {3:30, 4:40}, {5:50}) == {1:10, 2:20, 3:30, 4:40, 5:50}\nassert     merge_dictionaries_three({1:10, 2:20}, {3:30, 4:40}, {5:50, 6:60}) == {1:10, 2:20, 3:30, 4:40, 5:50, 6:60}\nassert     merge_dictionaries_three({}, {3:30, 4:40}, {5:50, 6:60}) == {3:30, 4:40, 5:50, 6:60}\nassert     merge_dictionaries_three({1:10, 2:20}, {3:30, 4:40}, {5:50}) == {1:10, 2:20, 3:30, 4:40, 5:50}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'b': 5, 'c': 6}, {'c': 7, 'b': 8}) == {'a': 1, 'b': 5, 'c': 7}\nassert     merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'c': 5}, {'b': 8}) == {'a': 1, 'b': 8, 'c': 5}\nassert     merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'b': 5, 'c': 6}, {'a': 7}) == {'a': 7, 'b': 5, 'c': 6}\nassert     merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, {'a': 5, 'c': 6}, {'b': 8}) == {'a': 5, 'b': 8, 'c': 6}"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     merge_dictionaries_three({\"a\":\"1\",\"b\":\"2\"}, {\"c\":\"3\"}, {\"d\":\"4\"}) == {\"a\":\"1\",\"b\":\"2\",\"c\":\"3\",\"d\":\"4\"}\nassert     merge_dictionaries_three({\"1\":\"a\",\"2\":\"b\"}, {\"2\":\"c\",\"3\":\"d\"}, {\"1\":\"e\",\"2\":\"f\",\"3\":\"g\"}) == {\"1\":\"a\",\"2\":\"c\",\"3\":\"d\",\"1\":\"e\",\"2\":\"f\",\"3\":\"g\"}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     merge_dictionaries_three({'a': 1, 'b': 2}, {'b': 1, 'c': 3}, {'d': 4, 'e': 5}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\n\ndef merge_dictionaries_two(dict1, dict2):\n    \"\"\"\n    Merge two dictionaries into a third dictionary.\n\n    Args:\n        dict1:\n            A dictionary\n        dict2:\n            Another dictionary\n\n    Returns:\n        The merged dictionary\n    \"\"\"\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     merge_dictionaries_three({1:10, 2:20, 3:30}, {1:40, 2:50, 3:60}, {1:70, 2:80, 3:90})== {1:40, 2:50, 3:60, 1:70, 2:80, 3:90}\nassert     merge_dictionaries_three({\"a\":\"apple\", \"b\":\"banana\"}, {\"b\":\"banana\", \"c\":\"carrot\"}, {\"c\":\"potato\"})== {\"a\":\"apple\", \"b\":\"banana\", \"c\":\"carrot\"}\nassert     merge_dictionaries_three({\"a\":\"apple\", \"b\":\"banana\"}, {\"c\":\"carrot\", \"d\":\"dog\"}, {\"c\":\"potato\"})== {\"a\":\"apple\", \"b\":\"banana\", \"d\":\"dog\"}\nassert     merge_dictionaries_three({\"a\":\"apple\", \"b\":\"banana\"}, {\"c\":\"carrot\", \"d\":\"dog\", \"e\":\"elephant\"}, {\"f\":\"fox\", \"g\":\"giraffe\"})== {\"a\":\"apple\", \"b\":\"banana\", \"d\":\"dog\", \"e\":\"elephant\", \"f\":\"fox\", \"g\":\"giraffe\"}\nassert     merge_dictionaries_three({\"a\":\"apple\", \"b\":\"banana\"}, {\"c\":\"carrot\", \"d\":\"dog\", \"e\":\"elephant\"}, {\"f\":\"fox\", \"g\":\"giraffe\"})== {\"a\":\"apple\", \"b\":\"banana\", \"d\":\"dog\", \"e\":\"elephant\", \"f\":\"fox\", \"g\":\"giraffe\"}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nmerge_dictionaries_three({\"a\":1,\"b\":2},{\"c\":3,\"d\":4},{\"e\":5,\"f\":6}) == {\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5,\"f\":6}\nassert merge_dictionaries_three({\"a\":1,\"b\":2},{\"c\":3,\"d\":4},{\"e\":5}) == {\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5}\nassert merge_dictionaries_three({\"a\":1,\"b\":2},{\"c\":3}) == {\"a\":1,\"b\":2,\"c\":3}\nassert merge_dictionaries_three({\"a\":1,\"b\":2}) == {\"a\":1,\"b\":2}\nassert merge_dictionaries_three({}) == {}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     merge_dictionaries_three({'a': 1, 'b': 2, 'c': 3}, \n{'d': 4, 'e': 5, 'f': 6}, {'g': 7, 'h': 8, 'i': 9}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     freq_count([1,1,1,1,2,2,3]) == collections.Counter({1: 5, 2: 4, 3: 1})\nassert     freq_count([1,2,2,3,3,4]) == collections.Counter({1: 4, 2: 3, 3: 2, 4: 1})\nassert     freq_count([1,2,3,4,4,4,4,5]) == collections.Counter({1: 5, 2: 4, 3: 3, 4: 2, 4: 1})\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nlist1 = [[1,2], [1,2,3], [1,2,3,4,5,6], [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]]\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     freq_count([1,1,1,1,1,1,1]) == {1:7}\nassert     freq_count([1,1,2,3,4,5,6,7,8,8]) == {1:2, 2:2, 3:2, 4:1, 5:1, 6:1, 7:1, 8:1}\nassert     freq_count([1,1,1,2,2,2,3,4,4,5,5,6,7,7,7,8,8,8]) == {1:3, 2:2, 3:2, 4:2, 5:2, 6:1, 7:1, 8:2}\nassert     freq_count([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     freq_count(['a', 'a', 'b', 'c']) == {'a': 2, 'b': 1, 'c': 1}\nassert     freq_count(['a', 'b', 'c']) == {'a': 2, 'b': 1, 'c': 1}\nassert     freq_count([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == {1: 10}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef freq_count_2(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    return dict(collections.Counter(list1))\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef get_mid_element(list1):\n    '''\n    Write a function that finds the middle element in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     freq_count([1,2,2,3,4]) == {1: 3, 2: 2, 3: 1, 4: 1}\nassert     freq_count([]) == {}\nassert     freq_count([1,2,3,1,2,3,1]) == {1: 4, 2: 3, 3: 3}\nassert     freq_count([1,2,1,2,3,4,4,4,4,4]) == {1: 4, 2: 3, 3: 2}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     freq_count(['a','b','c','d','e']) == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1}\nassert     freq_count([]) == {}\nassert     freq_count([2,3,2,4]) == {2: 2, 3: 2, 4: 1}\nassert     freq_count([1,2,3,2,4]) == {1: 1, 2: 2, 3: 2, 4: 1}\nassert     freq_count([1,2,3,2,2]) == {1: 1, 2: 2, 3: 2, 2: 1}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     freq_count([1, 2, 3, 4, 5, 5]) == {1:2, 2:1, 3:1, 4:1, 5:2}\nassert     freq_count([1, 1, 1, 1, 1]) == {1:5}\nassert     freq_count([]) == {}\nassert     freq_count([1,1,2,3]) == {1:3, 2:1}\nassert     freq_count([\"Hello\"]) == {}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     freq_count(['a','b','c','d']) == {'a':2,'b':1,'c':1,'d':1}\nassert     freq_count(['b','b','b','a','b']) == {'b':4,'a':2}\n\ndef find_duplicates(list1):\n    '''\n    Write a function to find all the duplicates in a list, in the form of a dictionary, returned as a list of lists. \n    '''\n    pass\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     closest_num(4) == 3\nassert     closest_num(2) == 1\nassert     closest_num(3) == 2\nassert     closest_num(5) == 3\nassert     closest_num(15) == 6\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     closest_num(2) == 1\nassert     closest_num(1) == 0\nassert     closest_num(4) == 1\nassert     closest_num(5) == 1\nassert     closest_num(9) == 2\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(closest_num(4))\nprint(closest_num(9))\nprint(closest_num(100))\nprint(closest_num(6))\nprint(closest_num(7))\nprint(closest_num(3))\nprint(closest_num(12))\nprint(closest_num(24))\nprint(closest_num(21))\nprint(closest_num(2))\nprint(closest_num(11))\nprint(closest_num(19))\nprint(closest_num(18))\nprint(closest_num(0))\nprint(closest_num(1))\nprint(closest_num(20))\nprint(closest_num(21))\nprint(closest_num(22))\nprint(closest_num(23))\nprint(closest_num(33))\nprint(closest_num(34))\nprint(closest_num(35))\nprint(closest_num(36))\nprint(closest_num(37))\nprint(closest_num(38))\nprint(closest_num(39))\nprint(closest_num(40))\nprint(closest_num(41))\nprint(closest_num(42))\nprint(closest_num(43))\nprint(closest_num(44))\nprint(closest_num(45))\nprint(closest_num(46))\nprint(closest_num(47))\nprint(closest_num(48))\nprint(closest_num(49))\nprint(closest_num(50))\nprint(closest_num(51))\nprint(closest_num(52))\nprint(closest_num(53))\nprint(closest_num(54))\nprint(closest_num(55))\nprint(closest_num(56))\nprint(closest_num(57))\nprint(closest_num(58))\nprint(closest_num(59))\nprint(closest_num(60))\nprint(closest_num(61))\nprint(closest_num(62))\nprint(closest_num(63))\nprint(closest_num(64))\nprint(closest_num(65))\nprint(closest_num(66))\nprint(closest_num(67))\nprint(closest_num(68))\nprint(closest_num(69))\nprint(closest_num(70))\nprint(closest_num(71))\nprint(closest_num(72))\nprint(closest_num(73))\nprint(closest_num(74))\nprint(closest_num(75))\nprint(closest_num(76))\nprint(closest_num(77))\nprint(closest_num(78))\nprint(closest_num(79))\nprint(closest_num(80))\nprint(closest_num(81))\nprint(closest_num(82))\nprint(closest_num(83))\nprint(closest_num(84))\nprint(closest_num(85))\nprint(closest_num(86))\nprint(closest_num(87))\nprint(closest_num(88))\nprint(closest_num(89))\nprint(closest_num(90))\nprint(closest_num(91))\nprint(closest_num(92))\nprint(closest_num(93))\nprint(closest_num(94))\nprint(closest_num(95))\nprint(closest_num(96))\nprint(closest_num(97))\nprint(closest_num(98))\nprint(closest_num(99))\nprint(closest_num(100))\nprint(closest_num(101))\nprint(closest_num(102))\nprint(closest_num(103))\nprint(closest_num(104))\nprint(closest_num(105))\nprint(closest_num(106))\nprint(closest_num(107))\nprint(closest_num(108))\nprint(closest_num(109))\nprint(closest_num(110))\nprint(closest_num(111))\nprint(closest_num(112))\nprint(closest_num(113))\nprint(closest_num(114))\nprint(closest_num(115))\nprint(closest_num(116))\nprint(closest_num(117))\nprint(closest_num(118))\nprint(closest_num(119))\nprint(closest_num(120))\nprint(closest_num(121))\nprint(closest_num(122))\nprint(closest_num(123))\nprint(closest_num(124))\nprint(closest_num(125))\nprint(closest_num(126))\nprint(closest_num(127))\nprint(closest_num(128))\nprint(closest_num(129))\nprint(closest_num(130))\nprint(closest_num(131))\nprint(closest_num(132))\nprint(closest_num(133))\nprint(closest_num(134))\nprint(closest_num(135))\nprint(closest_num(136))\nprint(closest_num(137))\nprint(closest_num(138))\nprint(closest_num(139))\nprint(closest_num(140))\nprint(closest_num(141))\nprint(closest_num(142))\nprint(closest_num(143))\nprint(closest_num(144))\nprint(closest_num(145))\nprint(closest_num(146))\nprint(closest_num(147))\nprint(closest_num(148))\nprint(closest_num(149))\nprint(closest_num(150))\nprint(closest_num(151))\nprint(closest_num(152))\nprint(closest_num(153))\nprint(closest_num(154))\nprint(closest_num(155))\nprint(closest_num(156))\nprint(closest_num(157))\nprint(closest_num(158))\nprint(closest_num(159))\nprint(closest_num(160))\nprint(closest_num(161))\nprint(closest_num(162))\nprint(closest_num(163))\nprint(closest_num(164))\nprint(closest_num(165))\nprint(closest_num(166))\nprint(closest_num(167))\nprint(closest_num(168))\nprint(closest_num(169))\nprint(closest_num(170))\nprint(closest_num(171))\nprint(closest_num(172))\nprint(closest_num(173))\nprint(closest_num(174))\nprint(closest_num(175))\nprint(closest_num(176))\nprint(closest_num(177))\nprint(closest_num(178))\nprint(closest_num(179))\nprint(closest_num(180))\nprint(closest_num(181))\nprint(closest_num(182))\nprint(closest_num(183))\nprint(closest_num(184))\nprint(closest_num(185))\nprint(closest_num(186))\nprint(closest_num(187))\nprint(closest_num(188))\nprint(closest_num(189))\nprint(closest_num(190))\nprint(closest_num(191))\nprint(closest_num(192))\nprint(closest_num(193))\nprint(closest_num(194))\nprint(closest_num(195)"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(closest_num(100)) # should be 99\n    print(closest_num(1)) # should be 0\n    print(closest_num(3)) # should be 1\n    print(closest_num(4)) # should be 2\n    print(closest_num(5)) # should be 3\n    print(closest_num(6)) # should be 4\n    print(closest_num(7)) # should be 5\n    print(closest_num(10)) # should be 9\n    print(closest_num(13)) # should be 12\n    print(closest_num(20)) # should be 19\n    print(closest_num(22)) # should be 21"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(\"Expected answer: 6, Actual answer: {}\".format(closest_num(100) == 6))\nprint(\"Expected answer: 3, Actual answer: {}\".format(closest_num(10) == 3))\nprint(\"Expected answer: 2, Actual answer: {}\".format(closest_num(3) == 2))\nprint(\"Expected answer: 1, Actual answer: {}\".format(closest_num(1) == 1))\nprint(\"Expected answer: 4, Actual answer: {}\".format(closest_num(11) == 4))\nprint(\"Expected answer: 9, Actual answer: {}\".format(closest_num(19) == 9))\nprint(\"Expected answer: 0, Actual answer: {}\".format(closest_num(0) == 0))\nprint(\"Expected answer: 6, Actual answer: {}\".format(closest_num(21) == 6))\nprint(\"Expected answer: 7, Actual answer: {}\".format(closest_num(72) == 7))\nprint(\"Expected answer: 9, Actual answer: {}\".format(closest_num(89) == 9))\nprint(\"Expected answer: 1, Actual answer: {}\".format(closest_num(9) == 1))\nprint(\"Expected answer: 3, Actual answer: {}\".format(closest_num(3) == 3))\nprint(\"Expected answer: 2, Actual answer: {}\".format(closest_num(2) == 2))\nprint(\"Expected answer: 5, Actual answer: {}\".format(closest_num(5) == 5))\nprint(\"Expected answer: 8, Actual answer: {}\".format(closest_num(8) == 8))\nprint(\"Expected answer: 10, Actual answer: {}\".format(closest_num(10) == 10))\nprint(\"Expected answer: 11, Actual answer: {}\".format(closest_num(11) == 11))\nprint(\"Expected answer: 12, Actual answer: {}\".format(closest_num(12) == 12))\nprint(\"Expected answer: 13, Actual answer: {}\".format(closest_num(13) == 13))\nprint(\"Expected answer: 14, Actual answer: {}\".format(closest_num(14) == 14))\nprint(\"Expected answer: 15, Actual answer: {}\".format(closest_num(15) == 15))\nprint(\"Expected answer: 16, Actual answer: {}\".format(closest_num(16) == 16))\nprint(\"Expected answer: 17, Actual answer: {}\".format(closest_num(17) == 17))\nprint(\"Expected answer: 18, Actual answer: {}\".format(closest_num(18) == 18))\nprint(\"Expected answer: 19, Actual answer: {}\".format(closest_num(19) == 19))\nprint(\"Expected answer: 20, Actual answer: {}\".format(closest_num(20) == 20))\nprint(\"Expected answer: 21, Actual answer: {}\".format(closest_num(21) == 21))\nprint(\"Expected answer: 22, Actual answer: {}\".format(closest_num(22) == 22))\nprint(\"Expected answer: 23, Actual answer: {}\".format(closest_num(23) == 23))\nprint(\"Expected answer: 24, Actual answer: {}\".format(closest_num(24) == 24))\nprint(\"Expected answer: 25, Actual answer: {}\".format(closest_num(25) == 25))\nprint(\"Expected answer: 26, Actual answer: {}\".format(closest_num(26) == 26))\nprint(\"Expected answer: 27, Actual answer: {}\".format(closest_num(27) == 27))\nprint(\"Expected answer: 28, Actual answer: {}\".format(closest_num(28) == 28))\nprint(\"Expected answer: 29, Actual answer: {}\".format(closest_num(29) == 29))\nprint(\"Expected answer: 30, Actual answer: {}\".format(closest_num(30) == 30))\nprint(\"Expected answer: 31, Actual answer: {}\".format(closest_num(31) == 31))\nprint(\"Expected answer: 32, Actual answer: {}\".format(closest_num(32) == 32))\nprint(\"Expected answer: 33, Actual answer: {}\".format(closest_num(33) == 33))\nprint(\"Expected answer: 34, Actual answer: {}\".format(closest_num(34) == 34))\nprint(\"Expected answer: 35, Actual answer: {}\".format(closest_num(35) == 35))\nprint(\"Expected answer: 36, Actual answer: {}\".format(closest_num(36) == 36))\nprint(\"Expected answer: 37, Actual answer: {}\".format(closest_num(37) == 37))\nprint(\"Expected answer: 38, Actual answer: {}\".format(closest_num(38) == 38))\nprint(\"Expected answer: 39, Actual answer: {}\".format(closest_num(39) == 39))\nprint(\"Expected answer: 40, Actual answer: {}\".format(closest_num(40) == 40))\nprint(\"Expected answer: 41, Actual answer: {}\".format(closest_num(41) == 41))\nprint(\"Expected answer: 42, Actual answer: {}\".format(closest_num(42) == 42))\nprint(\"Expected answer: 43, Actual answer: {}\".format(closest_num(43) == 43))\nprint(\"Expected answer: 44, Actual answer: {}\".format(closest_num(44) == 44))\nprint(\"Expected answer: 45, Actual answer: {}\".format(closest_num(45) == 45))\nprint(\"Expected answer: 46, Actual answer: {}\".format(closest_num(46) == 46))\nprint(\"Expected answer: 47, Actual answer: {}\".format(closest_num(47) == 47))\nprint(\"Expected answer: 48, Actual answer: {}\".format(closest_num(48) == 48))\nprint(\"Expected answer: 49, Actual answer: {}\".format(closest_num(49) == 49))\nprint(\"Expected answer: 50, Actual answer: {}\".format(closest_num(50) == 50))\nprint(\"Expected answer: 51, Actual answer: {}\".format(closest_num(51) == 51))\nprint(\"Expected answer: 52, Actual answer: {}\".format(closest_num(52) == 52))\nprint(\"Expected answer: 53, Actual answer: {}\".format(closest_num(53) == 53))\nprint(\"Expected answer: 54, Actual answer: {}\".format(closest_num(54) == 54))\nprint(\"Expected answer: 55, Actual answer: {}\".format(closest_num(55) == 55))\nprint(\"Expected answer: 56, Actual answer: {}\".format(closest_num(56) == 56))\nprint(\"Expected answer: 57, Actual answer: {}\".format(closest_num(57) == 57))\nprint(\"Expected answer: 58, Actual answer: {}\".format(closest_num(58) == 58))\nprint(\"Expected answer: 59, Actual answer: {}\".format(closest_num(59) == 59))\nprint(\"Expected answer: 60, Actual answer: {}\".format(closest_num(60) == 60))\nprint(\"Expected answer: 61, Actual answer: {}\".format(closest_num(61) == 61))\nprint(\"Expected answer: 62, Actual answer: {}\".format(closest_num(62) == 62))\nprint(\"Expected answer: 63, Actual answer: {}\".format(closest_num(63) == 63))\nprint(\"Expected answer: 64, Actual answer: {}\".format(closest_num(64) == 64))\nprint(\"Expected answer: 65, Actual answer: {}\".format(closest_num(65) == 65))\nprint(\"Expected answer: 66, Actual answer: {}\".format(closest_num(66) == 66))\nprint(\"Expected answer: 67, Actual answer: {}\".format(closest_num(67) == 67))\nprint(\"Expected answer: 68, Actual answer: {}\".format(closest_num(68) == 68))\nprint(\"Expecte"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     closest_num(1) == 0\nassert     closest_num(10) == 9\nassert     closest_num(9) == 9\nassert     closest_num(22) == 21\nassert     closest_num(24) == 21\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     closest_num(3) == 2\nassert     closest_num(2) == 1\nassert     closest_num(0) == 1\nassert     closest_num(1) == 1\nassert     closest_num(2) == 2\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     closest_num(10) == 9\nassert     closest_num(2) == 1\nassert     closest_num(2147483647) == "
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef closest_num(n):\n    '''\n    Implement your own closest_num function without using inbuilt functions.\n    '''\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert len_log(['a', 'b']) == 2\nassert len_log(['a', 'a', 'b']) == 3\nassert len_log(['a', 'a', 'a']) == 3\nassert len_log(['a', 'a', 'a', 'a']) == 4\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     len_log(['ab','ef','gh','jkl']) == 5, 'len_log should return 5'\nassert     len_log(['abc','def','ghi','jkl']) == 6, 'len_log should return 6'\nassert     len_log(['abc','def','ghi','jkl','mnop']) == 6, 'len_log should return 6'\nassert     len_log(['abcdefghijklmnop','a','abc','abcdefghijklmnop']) == 17, 'len_log should return 17'\nassert     len_log(['abcdefghijklmnop','a','abc','abcdefghijklmnop','p','q','r','s','t','u','v','w','x','y','z']) == 26, 'len_log should return 26'\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nlen_log([]) == 0\nlen_log([\"c\"]) == 1\nlen_log([\"a\", \"aa\", \"aaaa\"]) == 4\nlen_log([\"aa\", \"aaaa\", \"aaaaa\", \"aaaaaa\", \"aaaaaaaa\"]) == 7\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     len_log(['a', 'ab', 'abc', 'abcd', 'abcd', 'abcde']) == 7\nassert     len_log(['a', 'b', 'c', 'd']) == 4\nassert     len_log([]) == 0\nassert     len_log(['a', 'b', 'c', 'd', 'e', 'f', 'g']) == 6"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     len_log([]) == 0, \"list empty\"\nassert len_log([1,2,3,4]) == 4, \"wrong length\"\nassert len_log([1,2,3,4,5]) == 5, \"wrong length\"\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     len_log([]) == 0,    \"Function should return 0\"\nassert     len_log([\"short\"]) == 1,    \"Function should return 1\"\nassert     len_log([\"a\", \"abc\", \"aba\", \"short\"]) == 4,    \"Function should return 4\"\n\ndef find_list_max(lst):\n    '''\n    Write a python function to find the maximum of the list elements.\n    '''\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_substring('abc', 'abcd') == True, \"Wrong\"\nassert     find_substring('abc', 'bc') == False, \"Wrong\"\nassert     find_substring('abc', 'bcde') == False, \"Wrong\"\nassert     find_substring('abc', 'abcde') == True, \"Wrong\"\nassert     find_substring('abc', 'abcabc') == False, \"Wrong\"\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_substring('aba', 'ab') == True, 'The function should return True if a substring is found in a given string'\nassert     find_substring('aba', 'a') == False, 'The function should return False if a substring is found in a given string'\nassert     find_substring('abcdabcdef', 'abc') == False, 'The function should return False if a substring is found in a given string'\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_substring('hello','o') == True, \"Should be True\"\nassert     find_substring('hello','ll') == True, \"Should be True\"\nassert     find_substring('hello','lo') == True, \"Should be True\"\nassert     find_substring('hello','hell') == False, \"Should be False\"\nassert     find_substring('','') == True, \"Should be True\"\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nfind_substring(\"abc\", \"a\") == True\nfind_substring(\"abc\", \"b\") == False\nfind_substring(\"abc\", \"c\") == False\nfind_substring(\"abc\", \"ab\") == False\nfind_substring(\"abc\", \"abcd\") == False\nfind_substring(\"abc\", \"abcde\") == True\nfind_substring(\"abc\", \"abcdef\") == False\nfind_substring(\"abc\", \"abc\") == True\nfind_substring(\"abc\", \"b\") == False\nfind_substring(\"\", \"\") == False\nfind_substring(\"abc\", \"\") == True\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_substring('cabcdc', 'abc') == True, '\"abc\" is a substring of the string \"cabcdc\"'\nassert     find_substring('cabcdc', 'a') == False, '\"a\" is not a substring of the string \"cabcdc\"'\nassert     find_substring('abc', 'bc') == True, '\"bc\" is a substring of the string \"abc\"'\nassert     find_substring('abcd', 'bc') == False, '\"bc\" is not a substring of the string \"abcd\"'\nassert     find_substring('cab', 'bc') == True, '\"bc\" is a substring of the string \"cab\"'\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_substring(\"abc\",\"abc\") == True, \"find_substring:abc\"\nassert     find_substring(\"abd\",\"abc\") == False, \"find_substring:abd\"\nassert     find_substring(\"ab\",[\"abc\",\"abd\"]) == False, \"find_substring:ab\"\nassert     find_substring(\"\",[\"abc\",\"abd\"]) == False, \"find_substring:None\""
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(find_substring(\"crush\", \"sue\"))\nprint(find_substring(\"crush\", \"sueh\"))\nprint(find_substring(\"crush\", \"stue\"))\nprint(find_substring(\"crush\", \"ssue\"))\nprint(find_substring(\"crush\", \"sueh\"))\nprint(find_substring(\"crush\", \"sueh\"))\nprint(find_substring(\"crush\", \"suehgh\"))\nprint(find_substring(\"crush\", \"suehgh\"))\nprint(find_substring(\"crush\", \"suehgh\"))\nprint(find_substring(\"crush\", \"suehgh\"))\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_substring('hi', 'hi') == True\nassert     find_substring('hi', 'hey') == False\nassert     find_substring('', '') == True\nassert     find_substring('', 'hey') == False\nassert     find_substring('hello', 'hi') == False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_substring(\"ana\",\"ana\") == True\nassert     find_substring(\"ana\",\"ananya\") == False\nassert     find_substring(\"david\",\"david\") == True\nassert     find_substring(\"david\",\"david\") == True\nassert     find_substring(\"david\",\"da\") == False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_undulating(3) == True, \"test failed\"\nassert     is_undulating(4) == False, \"test failed\"\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert not is_undulating(12)\nassert is_undulating(1)\nassert is_undulating(5)\nassert is_undulating(7)\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert not is_undulating(1)\nassert not is_undulating(2)\nassert not is_undulating(3)\nassert not is_undulating(4)\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert is_undulating(0) == False\nassert is_undulating(1) == True\nassert is_undulating(2) == False\nassert is_undulating(3) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef find_fib(n):\n    '''\n    Write a function to find the Fibonacci number which is the sum of the previous two numbers.\n    '''\n    pass\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_undulating(5) \nassert     is_undulating(2) \nassert     is_undulating(1) \nassert     is_undulating(20) \nassert     is_undulating(3) \n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert not is_undulating(0)\nassert not is_undulating(1)\nassert not is_undulating(2)\nassert not is_undulating(3)\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert not is_undulating(4)\nassert is_undulating(23)\nassert not is_undulating(12)\n\n'''\nWrite a function, which accepts a dictionary and returns the total amount of keys in the dictionary\n'''\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_undulating(100) == True \nassert     is_undulating(200) == True \nassert     is_undulating(300) == True \nassert     is_undulating(100000) == False \nassert     is_undulating(1000001) == False \n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     power(2,3) == 8\nassert     power(a=2, b=3) == 8\nassert     power(2,3, b=3) == 8\nassert     power(3,3) == 9\nassert     power(3,b=3) == 9\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     power(2,2) == 4\nassert     power(5,2) == 10\nassert     power(3,2) == 9\nassert     power(5,3) == 25\nassert     power(10,3) == 1000\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef power(a, b):\n    if b == 0:\n        return 1\n    else:\n        return a * power(a, b-1)\n\nprint(power(2, 4))\n\n\ndef fact(n):\n    if n <= 1:\n        return 1\n    else:\n        return n * fact(n-1)\n\nprint(fact(10))\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     power(4,3) == 64\nassert     power(2,2) == 4\nassert     power(5,3) == 15\nassert     power(0,4) == 0\nassert     power(-2,-3) == -2\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     power(5, 1)     == 5,     '5**1 should be 5'\nassert     power(5, 2)     == 25,     '5**2 should be 25'\nassert     power(5, 0)     == 1,     '5**0 should be 1'\nassert     power(4, 2)     == 16,     '4**2 should be 16'\nassert     power(2, 1)     == 2,     '2**1 should be 2'\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     power(4,2) == 16\nassert    power(10,2) == 100\nassert    power(5,2) == 25\nassert    power(7,2) == 49\nassert    power(4.5,2) == 17.25\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     power(2,2) == 4\nassert     power(2,5) == 32\nassert     power(3,4) == 27\nassert     power(2,10) == 1024"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     power(2,3) == 8, 'Error: power(2,3)'\nassert     power(3,2) == 9, 'Error: power(3,2)'\nassert     power(5,4) == 25, 'Error: power(5,4)'\nassert     power(3,3) == 27, 'Error: power(3,3)'\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     index_minimum([('a', 1), ('c', 2), ('b', 3), ('c', 4), ('a', 4)]) == ('a', 4)\nassert     index_minimum([('a', 2), ('c', 2), ('b', 1), ('c', 1), ('a', 1)]) == ('a', 1)\nassert     index_minimum([('a', 5), ('c', 3), ('b', 1), ('c', 1), ('a', 1)]) == ('a', 1)\nassert     index_minimum([('a', 5), ('c', 3), ('b', 2), ('c', 1), ('a', 1)]) == ('a', 1)\nassert     index_minimum([('a', 5), ('c', 3), ('b', 2), ('c', 1), ('a', 5)]) == ('a', 5)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    pass\n\ndef my_sorted_function(test_list):\n    '''\n    Given a list of tuples, write a function that returns a list of tuples, sorted by first value.\n    '''\n    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ntest_list = [(('a', 1), ('b', 2)),\n(('c', 2), ('b', 1)),\n(('a', 1), ('c', 2)),\n(('a', 2), ('b', 1)),\n(('b', 1), ('a', 1)),\n(('c', 2), ('a', 1))]\nassert index_minimum(test_list) == ('a', 1)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nindex_minimum([(1, 3), (3, 2), (2, 1), (4, 5)]) == (1, 3)\n\nassert index_minimum([(3, 7), (1, 2), (5, 6), (2, 3)]) == (1, 2)"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     index_minimum([('a',1), ('b',3), ('c',2)]) == ('a',1)\nassert     index_minimum([('a',2), ('b',1), ('c',3)]) == ('c',3)\nassert     index_minimum([('a',1), ('b',3), ('c',2)]) == ('b',3)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     index_minimum([(1, 2), (4, -2), (3, 1), (9, -3)]) == (1, 1)\nassert     index_minimum([(1, 5), (4, -2), (3, 1), (9, -3)]) == (1, 1)\nassert     index_minimum([(1, 5), (4, 1), (3, 1), (9, -3)]) == (1, 2)\nassert     index_minimum([(1, 5), (4, 1), (3, 0), (9, -3)]) == (1, 0)\nassert     index_minimum([(1, 5), (4, 1), (3, 0), (9, -3)]) == (1, 1)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     index_minimum([(\"a\", 1), (\"b\", 2), (\"c\", 3), (\"d\", 4)]) == (\"a\", 1)\nassert index_minimum([(\"a\", 1), (\"b\", 2), (\"c\", 3), (\"d\", 4)]) == (\"d\", 4)\nassert index_minimum([(\"a\", 1), (\"b\", 2), (\"c\", 3), (\"d\", 4)]) == (\"c\", 3)\nassert index_minimum([(\"a\", 1), (\"b\", 2), (\"c\", 3), (\"d\", 4)]) == (\"b\", 2)\nassert index_minimum([(\"a\", 1), (\"b\", 2), (\"c\", 3), (\"d\", 4)]) == (\"a\", 1)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     index_minimum([(1,2), (5,6), (3,4)]) == (1,2)\nassert     index_minimum([(1,2), (5,6), (3,4)]) == (5,6)\nassert     index_minimum([(1,2), (5,6), (3,4)]) == (1,2)\nassert     index_minimum([(1,2), (5,6), (3,4)]) == (1,2)\nassert     index_minimum([(1,2), (5,6), (3,4)]) == (5,6)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint('Testing: index_minimum')\ntest_list = [(5,5),(5,1),(10,5),(5,10),(10,10),(1,3)]\nassert index_minimum(test_list) == (5,5)\nprint('ok')\n\n\n\n\n\ndef binary_search(data, target, low, high):\n    '''\n    Given a list of data and a target, write a function that finds the index of target in the data using binary search.\n    The binary search algorithm should return None if target is not found.\n    '''\n    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Find_Min_Length([[3,2,1],[1,2,3]]) == 2\nassert     Find_Min_Length([[3,2,1,1],[1,2,3]]) == 4"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Find_Min_Length([[2, 3], [5, 7], [7, 8]]) == 1, \"returns wrong value\"\nassert     Find_Min_Length([[0, 1], [2, 3], [3, 4]]) == 2, \"returns wrong value\"\nassert     Find_Min_Length([[1, 2], [3, 4]]) == 2, \"returns wrong value\"\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     Find_Min_Length([[], [], []]) == 0\nassert     Find_Min_Length([[]]) == 0\nassert     Find_Min_Length([[3, 4, 2], [2, 7, 6, 8], [8, 4, 3]]) == 3\nassert     Find_Min_Length([[3, 4, 2], [2, 7, 6, 8], [8, 4, 3]]) == 3\n\ndef Find_Min_Value(lst):\n    '''\n    Write a python function to find the minimum value in the list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Find_Min_Length([[1], 2, 3, 5]) == 2\nassert     Find_Min_Length([[1], 2, 3, 5, 7, 8, 9, 0]) == 0\nassert     Find_Min_Length([[1, 2], 3, 5, 7, 8, 9, 0]) == 5\nassert     Find_Min_Length([[1, 2, 3], 4, 5, 7, 8, 9, 0]) == 3\nassert     Find_Min_Length([[1, 2, 3, 4], 5, 6, 7, 8, 9, 0]) == 3\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Find_Min_Length([[5, 7, 9, 11, 13], [1, 3, 7, 8, 9, 15], [2, 8, 9, 10, 15], [5, 13, 15], [6, 12]]) == 2\nassert Find_Min_Length([[5, 7, 9, 11, 13], [1, 3, 7, 8, 9, 15], [2, 8, 9, 10, 15], [5, 13, 15], [6, 12]]) == 3\nassert Find_Min_Length([[1, 2, 3], [4, 5], [6, 7], [8]]) == 0\nassert Find_Min_Length([[1, 2, 3], [4, 5, 6, 7], [8, 9]]) == 1\nassert Find_Min_Length([[1, 2, 3, 4, 5, 6], [7, 8], [9], [10, 11, 12, 13]]) == 4\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Find_Min_Length([[1], [2], [3], [5], [6], [7]]) == 2\nassert     Find_Min_Length([[2], [1], [3], [4], [5], [6], [7]]) == 1\nassert     Find_Min_Length([[4], [2], [3], [1], [5], [6], [7]]) == 3\nassert     Find_Min_Length([[3], [2], [1], [4], [5], [6], [7]]) == 4\nassert     Find_Min_Length([[3], [2], [1], [4], [5], [6]]) == 5\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Find_Min_Length([[1,2,3],2,[1],3]) == 3\nassert Find_Min_Length([[1,2,3],2,[1,4],3]) == 2\nassert Find_Min_Length([[1,2],2,[1,4,5],3]) == 2\nassert Find_Min_Length([[1,2],2,[1,4,5],3]) == 2\nassert Find_Min_Length([[1,2,3],2,[1],3]) == 1\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Find_Min_Length([[1,2,3,4],[5,6,7,8]]) == 1, \\\n        'Should find the length of the smallest list in a list of lists.'\nassert Find_Min_Length([[1,2,3,4],[5,6,7,8], [9,10,11,12]]) == 2, \\\n        'Should find the length of the smallest list in a list of lists.'"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Find_Min_Length([[0, 1, 2], [3, 4], [5], [6]]) == 3, 'Wrong answer: 3'\nassert     Find_Min_Length([[0, 1], [2, 3], [4, 5], [6]]) == 1, 'Wrong answer: 1'\nassert     Find_Min_Length([[1], [2], [3], [4]]) == 1, 'Wrong answer: 1'\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Find_Min_Length([[1,2,3],[3,4,5],[3,4,5]]) == 1\nassert     Find_Min_Length([[1,2,3,4],[3,4,5,6,7],[3,4,5,6,7]]) == 1\nassert     Find_Min_Length([[1,2,3,4,5,6],[3,4,5,6,7,8]]) == 2\nassert     Find_Min_Length([[1,2,3,4,5,6]]) == 1\nassert     Find_Min_Length([[1,2,3,4,5,6,7]]) == 1\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     divisor(10) == 4\nassert     divisor(2) == 2\nassert     divisor(0) == 0\n\ndef divisors_count(n):\n    '''\n    Write a python function to find the sum of divisors of a given integer.\n    '''\n    pass\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     divisor(2) == 2, \"First function\"\nassert     divisor(10) == 2, \"Second function\"\nassert     divisor(25) == 4, \"Third function\"\nassert     divisor(20) == 5, \"Fourth function\"\n\nprint(\"Well done! You have successfully defined the function divisor().\")\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(divisor(1))\nprint(divisor(2))\nprint(divisor(3))\nprint(divisor(4))\nprint(divisor(5))\nprint(divisor(6))\nprint(divisor(7))\nprint(divisor(8))\nprint(divisor(9))\nprint(divisor(10))\n\n'''\nOutput\n1\n2\n2\n3\n3\n3\n4\n4\n5\n5\n6\n5\n6\n7\n8\n9\n10\n'''"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     divisor(6) == 6, \"Wrong output\"\nassert divisor(8) == 5, \"Wrong output\"\nassert divisor(0) == 1, \"Wrong output\"\nassert divisor(1) == 1, \"Wrong output\"\nassert divisor(-1) == 1, \"Wrong output\"\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert divisor(2) == 2\nassert divisor(4) == 2\nassert divisor(6) == 3\nassert divisor(8) == 4\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     divisor(5) == 2, '5 should have 2 divisors'\nassert divisor(0) == 1, '0 should have 1 divisor'\nassert divisor(1) == 1, '1 should have 1 divisor'\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     divisor(4) == 2, \"Should be 2\"\nassert     divisor(9) == 3, \"Should be 3\"\nassert     divisor(0) == 1, \"Should be 1\"\nassert     divisor(1) == 1, \"Should be 1\"\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     divisor(12) == 3, \"Wrong answer for 12\"\nassert divisor(16) == 4, \"Wrong answer for 16\"\nassert divisor(10) == 2, \"Wrong answer for 10\"\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     frequency_lists([]) == {}, \"Empty list\"\nassert     frequency_lists([1]) == {1: 1}, \"Singleton\"\nassert     frequency_lists([1,2,3]) == {1: 3, 2: 1, 3: 1}, \"All same\"\nassert     frequency_lists([1,2,3,1]) == {1: 4, 2: 1, 3: 2}, \"Two same\"\nassert     frequency_lists([1,2,3,2,1]) == {1: 5, 2: 2, 3: 2}, \"All same, but more than two\"\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     frequency_lists([[1,1,1], [1,1,2], [1,2,2]]) == {1:3,2:2,3:1}\nassert     frequency_lists([[1,1,1], [1,1,2], [1,2,2], [1,3,4]]) == {1:4,2:2,3:1,4:1}\nassert     frequency_lists([[1,2,1], [1,2,2], [2,1,1]]) == {1:2,2:2,3:1}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     frequency_lists([[1,2],['a','b'],['c','d']]) == {1: 2, 'a': 2, 'b': 1, 'c': 1, 'd': 1}\nassert     frequency_lists([[1,2],['a','b'],['c','d'], ['a','a']]) == {1: 2, 'a': 3, 'b': 2, 'c': 2, 'd': 2}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     frequency_lists([[1, 2, 3],\n                           [2, 4],\n                           [1, 2, 4, 4],\n                           [2]]) == {1:2, 2:2, 4:2}\n\nassert     frequency_lists([[1, 2, 3],\n                           [2, 4],\n                           [1, 2, 4, 4],\n                           [2]]) == {1:3, 2:2}\n\nassert     frequency_lists([[1, 2, 3],\n                           [2, 4],\n                           [1, 2, 4, 4],\n                           [2]]) == {1:4}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     frequency_lists([[1,2,3],[4,5,6],[7,8,9]]) == {1: 3, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1}\nassert frequency_lists([[1,2,3],[4,5,6],[7,8,9],[4,5,6,7,8,9]]) == {1: 4, 2: 3, 3: 3, 4: 2, 5: 2, 6: 2, 7: 2, 8: 2, 9: 2}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     frequency_lists([[1], [2,2], [2,2], [2]]) == {1:3, 2:4}\n\nassert     frequency_lists([[1,2,3], [1,2,3]]) == {1:2, 2:2, 3:2}\n\nassert     frequency_lists([[1,2,3], [1,2], [1,2,3]]) == {1:2, 2:1, 3:2}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     frequency_lists([[1,2], [3], [1,2,3,4]]) == {'1': 2, '2': 2, '3': 1, '4': 1}\nassert     frequency_lists([[1,2], [1,2,3,4], [1,2,3,4,5]]) == {'1': 2, '2': 2, '3': 3, '4': 3, '5': 1}\nassert     frequency_lists([[1,2], [2,3], [1,2,3]]) == {'1': 2, '2': 2, '3': 1}\n\ndef flatten(lst):\n    '''\n    Write a function to flatten a list of lists.\n    '''\n    return lst\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     frequency_lists([[1,2,3],[4,5,6]]) == {1: 3, 2: 2, 3: 1, 4: 1, 5: 1, 6: 1}\nassert     frequency_lists([[1],[2],[3],[1]]) == {1: 3}\n\n\n\ndef line_of_code(code):\n    '''\n    Write a function to return the line of code that contains the largest number.\n    '''\n    pass"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     frequency_lists([['a', 'b', 'b', 'c', 'c'], ['a', 'b', 'b', 'b', 'c'], \n    ['a', 'b', 'b', 'b', 'b'], ['a', 'b', 'b', 'c', 'c']]) == {'a': 4, 'b': 3, 'c': 2}\nassert     frequency_lists([[], ['a', 'b', 'b'], ['a', 'b', 'b'], ['a', 'b', 'b']]) == {'a': 3, 'b': 2}\nassert     frequency_lists([['a', 'b', 'b'], ['a', 'b', 'b'], ['a', 'b', 'b'], ['a', 'b', 'b']]) == {'a': 2, 'b': 2}\nassert     frequency_lists([['a', 'b', 'b'], ['a', 'b', 'b'], ['a', 'b', 'b']]) == {'a': 1, 'b': 1}\nassert     frequency_lists([['a'], ['a'], ['a'], ['a']]) == {'a': 4}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     frequency_lists([]) == {}\nassert     frequency_lists([[],[]]) == {}\nassert     frequency_lists([[]]) == {}\nassert     frequency_lists([[1,2,3], [4,5,6,7,8], [9]]) == {1: 3, 2: 2, 3: 3, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1}\nassert     frequency_lists([[1,2,3], [4,5,6,7,8], [9,1,2]]) == {1: 4, 2: 2, 3: 3, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1}\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     multiply_num([1,2,3]) == 6, 'Multiply should return 6'\nassert     multiply_num([4,5,6]) == 12, 'Multiply should return 12'\nassert     multiply_num([8]) == 8, 'Multiply should return 8'\nassert     multiply_num([]) == 1, 'Multiply should return 1'\nassert     multiply_num([8,4,6]) == 80, 'Multiply should return 80'\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     multiply_num([1,3,4,5,6]) ==     [1, 3, 4, 5, 6], \"First example\"\nassert     multiply_num([0,0,0,0]) ==     [0, 0, 0, 0], \"Second example\"\nassert     multiply_num([5,5,5,5]) ==     [5, 5, 5, 5], \"Third example\"\nassert     multiply_num([9,9,9,9]) ==     [9, 9, 9, 9], \"Fourth example\"\nassert     multiply_num([9,9,9,9,9]) ==     [81, 81, 81, 81, 81], \"Fifth example\"\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     multiply_num([1,3,5,7]) == 1 * 3 * 5 * 7, \"return wrong result\"\nassert     multiply_num([7,3,5,7]) == 7 * 3 * 5 * 7, \"return wrong result\"\nassert     multiply_num([1,2,4,8]) == 1 * 2 * 4 * 8, \"return wrong result\""
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     multiply_num([1, 2, 3, 4]) == 6\nassert     multiply_num([-1, -2, -3, -4]) == -24\nassert     multiply_num([0, 0, 0, 0]) == 0\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     multiply_num([1, 2, 3, 4]) == 24, \"Wrong Result\"\nassert     multiply_num([-1, -2, -3, -4]) == -24, \"Wrong Result\"\nassert     multiply_num([1]) == 1, \"Wrong Result\"\nassert     multiply_num([1, 2]) == 2, \"Wrong Result\"\nassert     multiply_num([1, 2, 3]) == 6, \"Wrong Result\"\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     multiply_num([1,2,3,4]) == 24\nassert     multiply_num([2,4,6,8]) == 360\nassert     multiply_num([-1,-2,-3,-4]) == -24\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     multiply_num([4,5,6]) == 60\nassert     multiply_num([1,2,3,4,5]) == 120\nassert     multiply_num([1,2,3,4]) == 24\nassert     multiply_num([1,2,3]) == 6\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     multiply_num([1, 2, 3, 4]) == 24\nassert     multiply_num([]) == 1\nassert     multiply_num([-1, -2, -3, -4]) == -24\nassert     multiply_num([2, -4, 8, -16]) == -32"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(decimal_to_binary(0))\nprint(decimal_to_binary(1))\nprint(decimal_to_binary(2))\nprint(decimal_to_binary(3))\nprint(decimal_to_binary(4))\nprint(decimal_to_binary(8))\nprint(decimal_to_binary(9))\nprint(decimal_to_binary(16))\nprint(decimal_to_binary(17))\nprint(decimal_to_binary(31))\nprint(decimal_to_binary(32))\nprint(decimal_to_binary(10101010))\nprint(decimal_to_binary(0b10101010))\nprint(decimal_to_binary(0x10101010))\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     decimal_to_binary(0) == \"0\"\nassert decimal_to_binary(1) == \"1\"\nassert decimal_to_binary(2) == \"10\"\nassert decimal_to_binary(3) == \"11\"\nassert decimal_to_binary(4) == \"100\"\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert decimal_to_binary(0) == '0'\nassert decimal_to_binary(3) == '111'\nassert decimal_to_binary(5) == '101'\nassert decimal_to_binary(7) == '1110'\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     decimal_to_binary(3) == '101', \"Wrong decimal_to_binary answer for 3\"\nassert     decimal_to_binary(125) == '1001101', \"Wrong decimal_to_binary answer for 125\"\nassert     decimal_to_binary(4) == '100', \"Wrong decimal_to_binary answer for 4\"\nassert     decimal_to_binary(255) == '11111111', \"Wrong decimal_to_binary answer for 255\"\nassert     decimal_to_binary(3) == '101', \"Wrong decimal_to_binary answer for 3\"\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef binary_to_decimal(n):\n    '''\n    Write a function to convert the given binary number to its decimal equivalent, represented as a string with no leading zeros.\n    '''\n    pass\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     decimal_to_binary(5) == '101'\nassert decimal_to_binary(10) == '1101'\nassert decimal_to_binary(15) == '11111'\nassert decimal_to_binary(23) == '1101011101'\nassert decimal_to_binary(42) == '1101010101'\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef decimal_to_octal(n): \n    '''\n    Write a function to convert the given decimal number to its octal equivalent, represented as a string with no leading zeros.\n    '''\n    pass\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     decimal_to_binary(17) == '1101'\nassert     decimal_to_binary(5) == '101'\nassert     decimal_to_binary(9) == '10001'\nassert     decimal_to_binary(1) == '1'\nassert     decimal_to_binary(0) == '0'\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    decimal_to_binary(2) == \"10\"\n    decimal_to_binary(1) == \"1\"\n    decimal_to_binary(3) == \"11\"\n    decimal_to_binary(6) == \"110\"\n    decimal_to_binary(7) == \"111\"\n    decimal_to_binary(8) == \"1000\"\n    decimal_to_binary(9) == \"1001\"\n    decimal_to_binary(10) == \"1010\"\n    decimal_to_binary(11) == \"1011\"\n    decimal_to_binary(12) == \"1100\"\n    decimal_to_binary(13) == \"1101\"\n    decimal_to_binary(14) == \"1110\"\n    decimal_to_binary(15) == \"1111\"\n    decimal_to_binary(16) == \"10000\"\n    decimal_to_binary(17) == \"10001\"\n    decimal_to_binary(18) == \"10010\"\n    decimal_to_binary(19) == \"10011\"\n    decimal_to_binary(20) == \"10100\"\n    decimal_to_binary(21) == \"10101\"\n    decimal_to_binary(22) == \"10110\"\n    decimal_to_binary(23) == \"10111\"\n    decimal_to_binary(24) == \"11000\"\n    decimal_to_binary(25) == \"11001\"\n    decimal_to_binary(26) == \"11010\"\n    decimal_to_binary(27) == \"11011\"\n    decimal_to_binary(28) == \"11100\"\n    decimal_to_binary(29) == \"11101\"\n    decimal_to_binary(30) == \"11110\"\n    decimal_to_binary(31) == \"11111\"\n    decimal_to_binary(32) == \"11000000\"\n    decimal_to_binary(33) == \"11000001\"\n    decimal_to_binary(34) == \"11000010\"\n    decimal_to_binary(35) == \"11000011\"\n    decimal_to_binary(36) == \"11000100\"\n    decimal_to_binary(37) == \"11000101\"\n    decimal_to_binary(38) == \"11000110\"\n    decimal_to_binary(39) == \"11000111\"\n    decimal_to_binary(40) == \"11001000\"\n    decimal_to_binary(41) == \"11001001\"\n    decimal_to_binary(42) == \"11001100\"\n    decimal_to_binary(43) == \"11001101\"\n    decimal_to_binary(44) == \"11001110\"\n    decimal_to_binary(45) == \"11001111\"\n    decimal_to_binary(46) == \"11010000\"\n    decimal_to_binary(47) == \"11010001\"\n    decimal_to_binary(48) == \"11010010\"\n    decimal_to_binary(49) == \"11001101\"\n    decimal_to_binary(50) == \"11001100\"\n    decimal_to_binary(51) == \"11001101\"\n    decimal_to_binary(52) == \"11001110\"\n    decimal_to_binary(53) == \"11001111\"\n    decimal_to_binary(54) == \"11010000\"\n    decimal_to_binary(55) == \"11010001\"\n    decimal_to_binary(56) == \"11010010\"\n    decimal_to_binary(57) == \"11001101\"\n    decimal_to_binary(58) == \"11001100\"\n    decimal_to_binary(59) == \"11001101\"\n    decimal_to_binary(60) == \"11001110\"\n    decimal_to_binary(61) == \"11001111\"\n    decimal_to_binary(62) == \"11010100\"\n    decimal_to_binary(63) == \"11010101\"\n    decimal_to_binary(64) == \"11010110\"\n    decimal_to_binary(65) == \"11010111\"\n    decimal_to_binary(66) == \"11011000\"\n    decimal_to_binary(67) == \"11011001\"\n    decimal_to_binary(68) == \"11011010\"\n    decimal_to_binary(69) == \"11011011\"\n    decimal_to_binary(70) == \"11011100\"\n    decimal_to_binary(71) == \"11011101\"\n    decimal_to_binary(72) == \"11011110\"\n    decimal_to_binary(73) == \"11011111\"\n    decimal_to_binary(74) == \"11100000\"\n    decimal_to_binary(75) == \"11100001\"\n    decimal_to_binary(76) == \"11100010\"\n    decimal_to_binary(77) == \"11100011\"\n    decimal_to_binary(78) == \"11100100\"\n    decimal_to_binary(79) == \"11100101\"\n    decimal_to_binary(80) == \"11100110\"\n    decimal_to_binary(81) == \"11100111\"\n    decimal_to_binary(82) == \"11101000\"\n    decimal_to_binary(83) == \"11101001\"\n    decimal_to_binary(84) == \"11101010\"\n    decimal_to_binary(85) == \"11101011\"\n    decimal_to_binary(86) == \"11101100\"\n    decimal_to_binary(87) == \"11101101\"\n    decimal_to_binary(88) == \"11101110\"\n    decimal_to_binary(89) == \"11101111\"\n    decimal_to_binary(90) == \"11110000\"\n    decimal_to_binary(91) == \"11110001\"\n    decimal_to_binary(92) == \"11110010\"\n    decimal_to_binary(93) == \"11100101\"\n    decimal_to_binary(94) == \"11100110\"\n    decimal_to_binary(95) == \"11100111\"\n    decimal_to_binary(96) == \"11110100\"\n    decimal_to_binary(97) == \"11110101\"\n    decimal_to_binary(98) == \"11110110\"\n    decimal_to_binary(99) == \"11110111\"\n    decimal_to_binary(100) == \"11111000\"\n    decimal_to_binary(101) == \"11111001\"\n    decimal_to_binary(102) == \"11111010\"\n    decimal_to_binary(103) == \"11111011\"\n    decimal_to_binary(104) == \"11111100\"\n    decimal_to_binary(105) == \"11111101\"\n    decimal_to_binary(106) == \"11111110\"\n    decimal_to_binary(107) == \"11111111\"\n    decimal_to_binary(108) == \"10000000\"\n    decimal_to_binary(109) == \"10000001\"\n    decimal_to_binary(110) == \"10000010\"\n    decimal_to_binary(111) == \"10000011\"\n    decimal_to_binary(112) == \"10000100\"\n    decimal_to_binary(113) == \"10000101\"\n    decimal_to_binary(114) == \"10000110\"\n    decimal_to_binary(115) == \"10000111\"\n    decimal_to_binary(116) == \"10001000\"\n    decimal_to_binary(117) == \"10001001\"\n    decimal_to_binary(118) == \"10001010\"\n    decimal_to_binary(119) == \"10001011\"\n    decimal_to_binary(120) == \"10001100\"\n    decimal_to_binary(121) == \"10001101\"\n    decimal_to_binary(122) == \"10001110\"\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     next_smallest_palindrome(121) == 121, 'Wrong answer'\nassert     next_smallest_palindrome(10) == 11, 'Wrong answer'\nassert     next_smallest_palindrome(1) == 2, 'Wrong answer'\nassert     next_smallest_palindrome(109852) == 109853, 'Wrong answer'\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     next_smallest_palindrome(121) == 123\nassert     next_smallest_palindrome(1221) == 1222\nassert     next_smallest_palindrome(1232) == 1233\nassert     next_smallest_palindrome(11) == 12\nassert     next_smallest_palindrome(10) == 21\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     next_smallest_palindrome(121) == 121\nassert     next_smallest_palindrome(99) == 100\nassert     next_smallest_palindrome(35) == 36\nassert     next_smallest_palindrome(8) == 10\nassert     next_smallest_palindrome(2) == 3\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     next_smallest_palindrome(121) == 121\nassert     next_smallest_palindrome(11) == 11\nassert     next_smallest_palindrome(1232132131231231) == 1231231\nassert     next_smallest_palindrome(-1232132131231231) == -1232132131231231\nassert     next_smallest_palindrome(11) == 10\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     next_smallest_palindrome(1) == 2\nassert     next_smallest_palindrome(1234) == 9999\nassert     next_smallest_palindrome(1238) == 9777\n\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def reverse_string(s):\n        return s[::-1]\n\n    while True:\n        s = str(num)\n        s = reverse_string(s)\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     next_smallest_palindrome(121) == 212\nassert     next_smallest_palindrome(12) == 21\nassert     next_smallest_palindrome(123) == 221\nassert     next_smallest_palindrome(1234) == 2341\nassert     next_smallest_palindrome(12345) == 23451\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     next_smallest_palindrome(1) == 1\nassert     next_smallest_palindrome(2) == 3\nassert     next_smallest_palindrome(6) == 7\nassert     next_smallest_palindrome(11) == 13\nassert     next_smallest_palindrome(111) == 223\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     kth_element([0,1,2,3,4,5,6,7,8,9,10,11], 10) == 10, \"Failed\"\nassert     kth_element([0,1,2,3,4,5,6,7,8,9,10,11], 5) == 5, \"Failed\"\nassert     kth_element([], 1) == None, \"Failed\"\nassert     kth_element([0,1,2,3,4,5,6,7,8,9,10,11], 10) == 10, \"Failed\"\n\n\ndef max_element(arr):\n    '''\n    Write a function to find the maximum element in the given array.\n    '''\n    pass\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef kth_element_binary(arr, k):\n    '''\n    Given a sorted array, find the element in the array which is closest to the given number k.\n    '''\n    pass\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     kth_element([1, 5, 3, 6, 8], 2) == 5\nassert     kth_element([1, 5, 3, 6, 8], 3) == 6\nassert     kth_element([1, 5, 3, 6, 8], 1) == 1\nassert     kth_element([1, 5, 3, 6, 8], 4) == 8\nassert     kth_element([1, 5, 3, 6, 8], 5) == 3\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    kth_element([1,2,3,4,5], 2) == 3\n    kth_element([1,2,3,4,5], 1) == 1\n    kth_element([1,2,3,4,5], 5) == 5\n    kth_element([1,2,3,4,5], 0) == 1\n    kth_element([1,2,3,4,5], -1) == 4\n    kth_element([1,2,3,4,5], 10) == 5\n    kth_element([1,2,3,4,5], 8) == 4\n    kth_element([1,2,3,4,5], 0) == 1\n    kth_element([1,2,3,4,5], -4) == 1\n    kth_element([1,2,3,4,5], -3) == 3\n    kth_element([1,2,3,4,5], -5) == 1\n    kth_element([1,2,3,4,5], -6) == 5\n    kth_element([1,2,3,4,5], -7) == 4\n    kth_element([1,2,3,4,5], -8) == 3\n    kth_element([1,2,3,4,5], -9) == 2\n    kth_element([1,2,3,4,5], -10) == 1\n\nprint(\"All test cases passed\""
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     kth_element([1, 2, 3, 4], 1) == 3\nassert     kth_element([1, 2, 3, 4], 2) == 4\nassert     kth_element([1, 2, 3, 4], 3) == 2\nassert     kth_element([1, 2, 3, 4], 4) == 1\nassert     kth_element([1, 2, 3, 4], 5) == None\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     kth_element([1,2,3,4,5], 1) == 5\nassert     kth_element([1,2,3,4,5], 2) == 3\nassert     kth_element([1,2,3,4,5], 5) == 1\nassert     kth_element([1,2,3,4,5], 4) == 4\nassert     kth_element([1,2,3,4,5], 100) == 5\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     kth_element([1,2,3,4,5], 1) == 1\nassert     kth_element([1,2,3,4,5], 2) == 3\nassert     kth_element([1,2,3,4,5], 3) == 4\nassert     kth_element([1,2,3,4,5], 4) == 5\nassert     kth_element([1,2,3,4,5], 5) == 5\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     kth_element([1, 2, 3, 4, 5, 6, 7], 3) == 5\nassert     kth_element([], 1) == -1\nassert kth_element([1, 2, 3, 4, 5, 6, 7], 8) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     snake_to_camel(\"camel_snake\") == \"camelSnake\", \"snake_to_camel did not return the correct value.\"\nassert snake_to_camel(\"snake_snake\") == \"snakeSnake\", \"snake_to_camel did not return the correct value.\"\nassert snake_to_camel(\"snake_snake_snake\") == \"snakeSnakeSnake\", \"snake_to_camel did not return the correct value.\"\nassert snake_to_camel(\"snake_snake_snake_snake\") == \"snakeSnakeSnakeSnake\", \"snake_to_camel did not return the correct value.\"\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     snake_to_camel(\"i_am_a_snake\") == \"IAmASnake\", \"Not quite\"\nassert     snake_to_camel(\"snake\") == \"Snake\", \"Not quite\"\nassert     snake_to_camel(\"my_name_is_so_so_so_so_so_so_so_so_so_so_so_so_so_so\") == \"MyNameIsSoSoSoSoSoSoSoSoSoSoSoSoSoSoSoSo\", \"Not quite\"\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     snake_to_camel('hello_world') == 'helloWorld'\nassert     snake_to_camel('hello_world_') == 'helloWorld'\nassert     snake_to_camel('world') == 'world'\nassert     snake_to_camel('world_') == 'world'\nassert     snake_to_camel('i') == 'i'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     snake_to_camel('snake_case') =='snakeCase', 'Expected: snakeCase, Actual: snakeCase'\nassert     snake_to_camel('snake_case_') =='snakeCase', 'Expected: snakeCase, Actual: snakeCase'\nassert     snake_to_camel('snake_case_snake_case') =='snakeCaseSnakeCase', 'Expected: snakeCaseSnakeCase, Actual: snakeCaseSnakeCase'\nassert     snake_to_camel('snake_case_snake_case__') =='snakeCaseSnakeCase', 'Expected: snakeCaseSnakeCase, Actual: snakeCaseSnakeCase'\nassert     snake_to_camel('snake_case_snake_case_snake_case') =='snakeCaseSnakeCaseSnakeCase', 'Expected: snakeCaseSnakeCaseSnakeCase, Actual: snakeCaseSnakeCaseSnakeCase'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     snake_to_camel(\"i_am_a_snake\")    == \"IAmASnake\"\nassert snake_to_camel(\"snake_case\")    == \"snakeCase\"\nassert snake_to_camel(\"snake_camelCase\")    == \"snakeCamelCase\"\nassert snake_to_camel(\"snake_2_camel_case\")    == \"snake2CamelCase\"\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     snake_to_camel('snake_case') =='snakeCase'\nassert     snake_to_camel('snake_CASE') =='snakeCase'\nassert     snake_to_camel('SNAKE-CASE') =='snakeCase'\nassert     snake_to_camel('snake-case') =='snakeCase'\nassert     snake_to_camel('snake-case') =='snakeCase'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(snake_to_camel('foo_bar_baz'))\nprint(snake_to_camel('fooBarBaz'))\nprint(snake_to_camel('_foo_bar_baz'))\nprint(snake_to_camel('foo_bar_baz__'))\nprint(snake_to_camel('_foo_bar_baz__'))\nprint(snake_to_camel(''))\nprint(snake_to_camel('_'))\nprint(snake_to_camel('__'))\nprint(snake_to_camel('_ _'))\n\ndef snake_to_upper_camel(word):\n    '''\n    Write a function to convert a camel case string to snake case string.\n    '''\n    pass\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(snake_to_camel(\"a_b_c\"))\nprint(snake_to_camel(\"aBc\"))\nprint(snake_to_camel(\"a-b-c\"))\nprint(snake_to_camel(\"a-b_c\"))\nprint(snake_to_camel(\"a_b_c\"))\nprint(snake_to_camel(\"a_b_c_d\"))\nprint(snake_to_camel(\"a_b_c\"))\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     snake_to_camel(\"snake_case\") == \"snakeCase\", \\\n    \"Something is wrong\"\nassert     snake_to_camel(\"camel_case\") == \"camelCase\", \\\n    \"Something is wrong\"\nassert     snake_to_camel(\"snake_CASE\") == \"snakeCase\", \\\n    \"Something is wrong\"\nassert     snake_to_camel(\"snake_camel\") == \"snakeCamel\", \\\n    \"Something is wrong\"\nassert     snake_to_camel(\"snake_snake_camel\") == \"snakeSnakeCamel\", \\\n    \"Something is wrong\"\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     snake_to_camel('snake_case_parameter') =='snakeCaseParameter', \"Snake case does not match the camel case\"\nassert     snake_to_camel('snake_case_parameter_2') =='snakeCaseParameter2', \"Snake case does not match the camel case\"\nassert     snake_to_camel('snake_case_parameter_3') =='snakeCaseParameter3', \"Snake case does not match the camel case\"\nassert     snake_to_camel('snake_case_parameter_4') =='snakeCaseParameter4', \"Snake case does not match the camel case\"\nassert     snake_to_camel('snake_case_parameter_5') =='snakeCaseParameter5', \"Snake case does not match the camel case\"\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     eulerian_num(2, 2) == 2\nassert     eulerian_num(3, 2) == 2\nassert     eulerian_num(3, 3) == 0\nassert     eulerian_num(4, 2) == 2\nassert     eulerian_num(4, 3) == 3\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef eulerian_path(n, m, s, t):\n    '''\n    Write a function to find the Eulerian path p(n, m, s, t).\n    '''\n    pass\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert eulerian_num(2, 1) == 0\nassert eulerian_num(2, 2) == 4\nassert eulerian_num(3, 2) == 6\nassert eulerian_num(4, 2) == 10\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    eulerian_num(1, 1) == 1\nassert \n    eulerian_num(2, 1) == 2\nassert \n    eulerian_num(2, 2) == 2\nassert \n    eulerian_num(10, 1) == 10\nassert \n    eulerian_num(10, 2) == 8\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     eulerian_num(2, 2) == 2\nassert     eulerian_num(2, 3) == 1\nassert     eulerian_num(3, 2) == 1\nassert     eulerian_num(3, 3) == 2\nassert     eulerian_num(4, 4) == 0\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     eulerian_num(4, 2) == 6\nassert     eulerian_num(5, 2) == 20\nassert     eulerian_num(5, 4) == 20\nassert     eulerian_num(6, 4) == 24\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     eulerian_num(4, 5) == 1, 'Wrong answer for n={4}, m={5}'\nassert     eulerian_num(5, 4) == 2, 'Wrong answer for n={5}, m={4}'\nassert     eulerian_num(10, 2) == 5, 'Wrong answer for n={10}, m={2}'\nassert     eulerian_num(6, 5) == 0, 'Wrong answer for n={6}, m={5}'\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     eulerian_num(10, 10) ==    1\nassert     eulerian_num(10, 5) ==    0\nassert     eulerian_num(10, 1) ==    0\nassert     eulerian_num(1, 10) ==    0\nassert     eulerian_num(10, 10) ==    1\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef eulerian_path(n, m): \n    '''\n    Write a function to find the Eulerian path of a given graph.\n    '''\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_sublists([[], ['a'], ['a', 'b'], ['b'], ['a', 'c']]) == [[], ['a', 'a', 'b'], ['a', 'c'], ['b'], ['a', 'b']]\nassert     sort_sublists([['a'], ['a', 'b'], ['b']]) == [['a', 'a', 'b'], ['a'], ['b']]\nassert     sort_sublists([['a', 'b'], ['a']]) == [['a', 'a', 'b'], ['a', 'b']]\nassert     sort_sublists([['a', 'b'], ['b'], ['a']]) == [['a', 'a', 'b'], ['b'], ['a']]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_sublists(['a','b','c','d','e']) == [['e','d','c','b','a'], ['c','b','d','a','e'], ['a','d','e','b','c'], ['d','a','b','e','c'], ['b','d','c','a','e']]\nassert     sort_sublists(['a','b','c','d','e']) == [['e','d','c','b','a'], ['c','b','d','a','e'], ['a','d','e','b','c'], ['d','a','b','e','c'], ['b','d','c','a','e']]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_sublists([['a', 'b'], ['b', 'a']]) == [['a', 'b'], ['b', 'a']]\nassert     sort_sublists([['a', 'b'], ['b', 'a'], ['b', 'a']]) == [['a', 'b'], ['b', 'a'], ['a', 'b']]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef sorted_list(input_list):\n    '''\n    Write a function to sort a list of lists in ascending order of the numbers in each of the sublists.\n    '''\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ninput_list = [['c', 'b', 'a'], ['d', 'b', 'e', 'a']]\nexpected = [['a', 'a', 'b'], ['b', 'c', 'd', 'e']]\n\nsorted_lists = sort_sublists(input_list)\nassert sorted_lists == expected, f'Expected: {expected}, Actual: {sorted_lists}'\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i'], ['j', 'k', 'l']]) == \n    [['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i'], ['j', 'k', 'l']]\n    print(\"Test passed\")"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_sublists([]) == [[]]\nassert     sort_sublists([['a', 'b'], ['c'], ['d']]) == \\\n        [['a', 'b'], ['c'], ['d']]\nassert     sort_sublists([['a', 'b'], ['c'], ['d'], ['e']]) == \\\n        [['a', 'b'], ['c'], ['d'], ['e']]\nassert     sort_sublists([['a', 'b'], ['c'], ['d'], ['e'], ['f']]) == \\\n        [['a', 'b'], ['c'], ['d'], ['e'], ['f']]\nassert     sort_sublists([['a', 'b'], ['c'], ['d'], ['e'], ['f'], ['g']]) == \\\n        [['a', 'b'], ['c'], ['d'], ['e'], ['f'], ['g']]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_sublists([['a', 'b', 'c', 'd'], ['f', 'e'], ['g', 'h', 'i', 'j', 'k', 'l']]) == [['a', 'b', 'c', 'd'], ['f', 'e'], ['g', 'h', 'i', 'j', 'k', 'l']]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_sublists([['Safari','Google Chrome'],['Chrome','Safari'],['Firefox','Chrome'],['Eclipse','Firefox'],['Skype','Eclipse'],['Safari','Skype']]) == [['Chrome','Safari'],['Eclipse','Firefox'],['Firefox','Chrome'],['Skype','Safari'],['Safari','Eclipse'],['Eclipse','Firefox']]\nassert     sort_sublists([['Safari','Google Chrome','Chrome'],['Firefox','Chrome'],['Eclipse','Firefox'],['Skype','Eclipse']]) == [['Chrome','Safari','Eclipse'],['Firefox','Skype','Eclipse'],['Safari','Google Chrome','Firefox'],['Eclipse','Firefox','Skype']]\nassert     sort_sublists([['Safari','Google Chrome','Chrome'],['Firefox','Chrome'],['Eclipse','Firefox'],['Skype','Eclipse']]) == [['Chrome','Safari','Firefox'],['Eclipse','Skype','Firefox'],['Firefox','Safari','Chrome'],['Eclipse','Google Chrome','Skype']]\n\n'''\nSort a list of strings so that the characters in each string appear in sorted order.\n\nInput: [\"apple\", \"orange\", \"zebra\", \"grape\", \"raspberry\"]\nOutput: [\"apple\", \"grape\", \"raspberry\", \"orange\", \"zebra\"]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_sublists([\"test\", \"tar\", \"pip\"]) == [\"tar\", \"test\", \"pip\"]\nassert     sort_sublists([\"\", \"\", \"\", \"\", \"\", \"\", \"\"]) == [\"\", \"\", \"\", \"\", \"\", \"\", \"\"]\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert count([True, False, False, True, True]) == 4\nassert count([True, False, True, True, True]) == 5\nassert count([True, True, True, True, True]) == 5\nassert count([True, True, False, True, True]) == 4\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count([True, True, False, True, False, False]) == 4, \"should return 4\"\nassert     count([]) == 0, \"should return 0\"\nassert     count([1, 2, True, 3, True]) == 3, \"should return 3\"\nassert     count([False, False, False, False, False, False, False]) == 7, \"should return 7\"\nassert     count([True, True, True, False]) == 1, \"should return 1\"\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count([False, False, True, True, False, False, True, False, True, True]) == 3, \\\n\"Wrong Output\"\nassert     count([False, False, False, True, True, False, True, True]) == 5, \\\n\"Wrong Output\"\nprint(\"Hurray! all test cases passed\")\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count([]) == 0\nassert     count([True]) == 1\nassert     count([False,True,False]) == 2\nassert     count([True,False,False,False]) == 1\nassert     count([True,True,False,False,False]) == 2\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count([True, True, False, True, True]) == 3\nassert     count([True, True, False, True, False]) == 2\nassert     count([False, False, False, True, True]) == 4\nassert     count([False, False, False, True, False]) == 2\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count([True, True, False, True, True, True]) == 5, \"count()\"\nassert     count([]) == 0, \"count()\"\nassert     count([False, True, False, True, True, True]) == 5, \"count()\"\nassert     count([False, False]) == 0, \"count()\"\nassert     count([True, False]) == 1, \"count()\"\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    count([1, 1, 1, True]) == 2\n    count([1, 1, 1, False]) == 3\n    count([]) == 0\n    count([1, False, 1]) == 2\n    count([False]) == 0\n    count([1, 1, 1, False, False, True, True, False, True, True]) == 10\n    count([True, True, False, False, False, False, False, True, True]) == 8\n    count([]) == 0\n    count([\"1\", False, \"1\", True]) == 4\n    count([False, 1, False]) == 3\n    count([True, True, True]) == 0\n    count([True, True, False]) == 1\n    count([False]) == 0\n    count([\"1\", False, \"1\", True]) == 4\n    count([False, 1, False]) == 3\n    count([True, True, True]) == 0\n    count([True, True, False]) == 1\n    count([]) == 0\n    \n    \n    \n\ndef count_even_odd(lst):\n    '''\n    Write a python function to count even and odd numbers in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count([True, False, True, True]) == 1, 'Should be 1'\nassert     count([True, False, True, True, True, True]) == 1, 'Should be 1'\nassert     count([True, False, True, True, False, False, True, True]) == 2, 'Should be 2'\nassert     count([True, False, True, True, False, False]) == 3, 'Should be 3'\nassert     count([]) == 0, 'Should be 0'\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count([True,True,False,False,False,True]) == 6\nassert     count([True,False,False,False,False,False]) == 4\nassert     count([True,True,False,True,False,True]) == 5\nassert     count([]) == 0\nassert count([True,True,True,True,True,True]) == 5\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     add_lists([1, 2, 3], (1, 2)) == (1, 2, 3)\nassert     add_lists([1], (1, 2)) == (1, 2)\nassert     add_lists([], (1, 2)) == (1, 2)\nassert     add_lists([1,2,3,4,5,6,7,8,9], (1,2,3,4,5,6)) == (1,2,3,4,5,6,7,8,9)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add_lists([1,2,3,4], ([1,2,3],)) == ([1,2,3,4], ([1,2,3],))\nassert add_lists([1,2,3,4], ([1,2,3],)) == ([1,2,3,4], ([1,2,3],))\nassert     add_lists([1,2,3,4], ([1,2,3],)) == ([1,2,3,4], ([1,2,3],))\nassert add_lists([1,2,3,4], ([1,2,3],)) == ([1,2,3,4], ([1,2,3],))\nassert add_lists([1,2,3,4], ([1,2,3],)) == ([1,2,3,4], ([1,2,3],))\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add_lists(\n            [1, 2, 3],\n            [4, 5]\n        ) ==\n    [(1, 4), (2, 5)]\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef even_odd_lists(test_list):\n    '''\n    Write a function to check whether the given list is even or odd.\n    '''\n    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_lists([1,2], (3,4)) == [(1,2), (3,4)], 'Wrong output'\nassert     add_lists([1], (2,3)) == [(1), (2,3)], 'Wrong output'\n\ndef add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    return None\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     add_lists([1, 2, 3, 4, 5], [(1, 2, 3), (4, 5, 6)]) == [(1, 2, 3), (4, 5, 6)]\nassert     add_lists([1, 2, 3, 4, 5], [(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nassert     add_lists([1, 2, 3, 4, 5], [(1, 2, 3, 4), (5, 6, 7, 8)]) == [(1, 2, 3, 4), (5, 6, 7, 8)]\nassert     add_lists([1, 2, 3, 4, 5], [(1, 2, 3, 4, 5)]) == [(1, 2, 3, 4, 5)]\nassert     add_lists([1, 2, 3, 4, 5], [(1, 2, 3, 4), (5, 6, 7)]) == [(1, 2, 3, 4), (5, 6, 7)]\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     add_lists([],()) == ([],())\nassert     add_lists([1, 2],()) == ([1, 2],())\nassert     add_lists([1, 2],(2,)) == ([1, 2, 2],())\nassert     add_lists([1, 2, 3],(1,)) == ([1, 2, 3],())\nassert     add_lists([1, 2, 3],(1,2)) == ([1, 2, 3],())\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     add_lists([1,2,3],(4,5,6)) == None\n\nassert add_lists([1,2,3],(1,2,3)) == [(1,2,3,1,2,3)]\n\nassert add_lists([1,2,3],(1,2,3,4,5,6)) == [(1,2,3,1,2,3,1,2,3,4,5,6)]\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     add_lists([10,20,30,40], (1,2,3,4)) == (1,2,3,4,10,20,30,40)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     merge_sorted_list([1,2,3], [4,5,6], [7,8,9]) == [1,2,3,4,5,6,7,8,9]\nassert     merge_sorted_list([1,1,1], [1,2,3], [2,3,4]) == [1,1,1,1,2,3,2,3,4]\nassert     merge_sorted_list([2,1,3], [3,4,5], [1,2,6]) == [1,2,3,4,5,6,2,3,4]\nassert     merge_sorted_list([3,2,4], [3,4,5], [1,2,6]) == [1,2,3,4,5,6,3,4,5]\n\ndef merge_k_sorted_list(nums, k):\n    '''\n    Write a function to merge k sorted lists into one sorted list.\n    '''\n    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     merge_sorted_list([1, 2, 3], [4, 5, 6], []) == [1, 2, 3, 4, 5, 6]\nassert    merge_sorted_list([1], [2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert    merge_sorted_list([2, 3], [1], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert    merge_sorted_list([1, 2, 3], [], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert    merge_sorted_list([], [], []) == []\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n'''\nsolution 2\n\nclass Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        nums1[m:] = nums2\n        heapq.heapify(nums1)\n        for _ in range(n):\n            tmp = heapq.heappop(nums1)\n            heapq.heappush(nums1,tmp)\n'''\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     merge_sorted_list([0,1,2],\n                            [3,4,5],\n                            [6,7,8]) == [0,1,2,3,4,5,6,7,8]\nassert     merge_sorted_list([2],\n                            [1],\n                            [0]) == [0,1,2]\nassert     merge_sorted_list([],\n                            [1],\n                            [2]) == [1,2]\nassert     merge_sorted_list([],\n                            [],\n                            []) == []\nassert     merge_sorted_list([1,2,3],\n                            [4,5,6],\n                            [7,8,9]) == [1,2,3,4,5,6,7,8,9]\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     odd_Equivalent('1101',2) == 2\nassert     odd_Equivalent('1011',2) == 2\nassert     odd_Equivalent('1010',2) == 1\nassert     odd_Equivalent('1100',2) == 1\nassert     odd_Equivalent('1001',2) == 1\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     odd_Equivalent(\"010101\",4) == 5, \"Wrong output\"\nassert     odd_Equivalent(\"010101\",5) == 7, \"Wrong output\"\nassert     odd_Equivalent(\"010101\",6) == 9, \"Wrong output\"\nassert     odd_Equivalent(\"010101\",8) == 10, \"Wrong output\"\nassert     odd_Equivalent(\"111011\",4) == 4, \"Wrong output\"\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef odd_Equivalent(s,n):\n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # code here\n    s = s.replace('1','0')\n    s = s.replace('0','1')\n    s = s.replace('1','0')\n    s = s.replace('0','1')\n    return len(s)-s.count('1')\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nodd_Equivalent(\"1010\",3)==2 # all the odd numbers in the initial string \nodd_Equivalent(\"1010\",1) == 2 # the odd numbers in the initial string \nodd_Equivalent(\"1010\",10) == 4 # all the odd numbers in the initial string \nodd_Equivalent(\"11111\",1) == 0 # the odd numbers in the initial string \nodd_Equivalent(\"\",0) == 0 # The empty string is equivalent to 0\nodd_Equivalent(\"110\",3) == 1 # The odd numbers in the initial string \nodd_Equivalent(\"1110\",1) == 2 # The odd numbers in the initial string \nodd_Equivalent(\"1111\",1) == 1 # The odd numbers in the initial string \nodd_Equivalent(\"11111\",10) == 4 # all the odd numbers in the initial string \nodd_Equivalent(\"101101010\",10) == 16 # all the odd numbers in the initial string \nodd_Equivalent
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nodd_Equivalent( '0011', 2 ) == 3\nassert \nodd_Equivalent( '1011', 3 ) == 4\nassert \nodd_Equivalent( '10111', 4 ) == 5\nassert \nodd_Equivalent( '11101', 5 ) == 6\nassert \nodd_Equivalent( '111101', 6 ) == 7\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nodd_Equivalent('001000100101','2') == 2\nprint(\"correct\")\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nodd_Equivalent('1101010101010101',3) == 4\nassert \nodd_Equivalent('1101010101010101',4) == 3\nassert \nodd_Equivalent('1101010101010101',5) == 2\nassert \nodd_Equivalent('1101010101010101',6) == 1\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nodd_Equivalent('11', 1) == 1\nassert odd_Equivalent('101', 3) == 0\nassert odd_Equivalent('11', 0) == 1\nassert odd_Equivalent('11', 1) == 1\nassert odd_Equivalent('11', 2) == 2\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nodd_Equivalent('1010101101',1) == 4\nodd_Equivalent('111010011',1) == 2\nodd_Equivalent('011001101',1) == 4\nodd_Equivalent('110011111',1) == 0\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nodd_Equivalent('110010111',3) == '110010111'\nassert odd_Equivalent('11010111',4) == '1110111'\nassert odd_Equivalent('11010111',5) == '1110111'\n\nodd_Equivalent('11010111',6) == '1110111'\nassert odd_Equivalent('11010111',7) == '1110111'\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     common_in_nested_lists([[1,2],[3],[4]]) == [1,2]\nassert     common_in_nested_lists([[1,2,4],[3],[5]]) == [1,2,4]\n\ndef common_in_nested_lists_in_order(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists in a specific order.\n    '''\n    pass\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert common_in_nested_lists([[1,2],\n    [1,2,5],\n    [2,4],\n    [1,1,1,1]]) == 1\nassert common_in_nested_lists([[1,2,5],\n    [1,1,1,1],\n    [2,4],\n    [1,2,5]]) == 2\nassert common_in_nested_lists([[1,2,5],\n    [1,1,1,1],\n    [2,4],\n    [1,2,5]]) == 2\nassert common_in_nested_lists([[1,2,5,7,8],\n    [1,1,1,1],\n    [2,4,6,7],\n    [1,2,5,7,8]]) == 1\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     common_in_nested_lists([[1, 2, 3], [4, 5], 6]) == 1\nassert     common_in_nested_lists([[1, 2, 3], [4, 5], 6, 7]) == 5\nassert     common_in_nested_lists([[1, 2, 3, 4, 5, 6], [4, 5, 6], 7]) == 6\nassert     common_in_nested_lists([[1, 2, 3], [4], 5]) == 0\nassert     common_in_nested_lists([[], []]) == 0\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     common_in_nested_lists([[1, 2, 3], [3, 4], [3]]) == [[1, 2, 3], 3]\nassert     common_in_nested_lists([[1, 2, 3], [4], [3]]) == [[1, 2, 3], 4]\nassert     common_in_nested_lists([[1, 2, 3], [4], [2]]) == [[1, 2, 3], 2]\nassert     common_in_nested_lists([[1, 2, 3], [4], [1]]) == [[1], 4]\nassert     common_in_nested_lists([[1, 2], [4, 3], [2]]) == [[1, 2], 4]\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     common_in_nested_lists([[1,2], [2,3], [1,2]]) ==     [2]\nassert     common_in_nested_lists([[1,2,3,4,5], [2,3,4,5,6], [1,2,3,4,5]]) ==     [1,2,3]\nassert     common_in_nested_lists([[1,2,3,4], [2,3,4,5], [1,2,3,4,5]]) ==     [1,2,3,4]\nassert     common_in_nested_lists([[1,2,3,4], [2,3,4,5,6], [1,2,3,4,5,6]]) ==     []\nassert     common_in_nested_lists([[1,2,3,4], [2,3,4,5,6,7], [1,2,3,4,5,6,7]]) ==     []\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     common_in_nested_lists([[1, 2, 3, 4], [1, 4], [2, 3], [4, 5]]) ==     [1, 4]\nassert     common_in_nested_lists([[1, 2, 3, 4, 5], [1, 4], [2, 3], [4, 5]]) ==     []\nassert     common_in_nested_lists([[1, 2], [3, 4], [5, 6], [7, 8, 9, 10, 11, 12]]) ==     [7, 8, 9, 10, 11, 12]\nassert     common_in_nested_lists([[], [4], [], [4]]) ==     [4]\n\n'''\nThe three lists in the following table represent a nested list with eight elements.\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     common_in_nested_lists([[1, 2], [3], [2, 3, 4]]) == 2\nassert     common_in_nested_lists([[1, 2], [2, 3, 4], [3, 4]]) == 3\nassert     common_in_nested_lists([[1], [2], [2, 3, 4], [3, 4]]) == 1\nassert     common_in_nested_lists([[2, 3, 4], [3, 4], [1]]) == 0\nassert     common_in_nested_lists([[2, 3, 4], [3, 4], [1]]) == 1\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     common_in_nested_lists([[1, 2],\n                                [3],\n                                [4, 5, 6],\n                                []]) == [], 'Should return an empty list'\nassert     common_in_nested_lists([[],\n                                [1],\n                                [2, 3, 4],\n                                [1, 2],\n                                [],\n                                [3, 4]]) == [1, 2], 'Should return the list'\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     common_in_nested_lists([[1, 2], 3, [[4, 5]]]) == 2\nassert     common_in_nested_lists([[1, 2], 3, [[4, 5], 3, [5]]]) == 2\nassert     common_in_nested_lists([[1, 2], 3, [[4, 5]]]) == 0\nassert     common_in_nested_lists([[1, 2], 3]) == 0\nassert     common_in_nested_lists([[1, 2], 3, [[3]]]) == 0\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     common_in_nested_lists([[1,2,3],[4,5,6]]) == [[1,4]]\nassert     common_in_nested_lists([[1,2],[4,5,6],[7]]) == [[1,4],[7]]\nassert     common_in_nested_lists([[1,2,3],[4,5],[6]]) == []\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_integer('2') == True, '\"2\" is not an integer!'\nassert     check_integer('0') == True, '\"0\" is not an integer!'\nassert     check_integer('ab') == False, '\"ab\" is an integer!'\nassert     check_integer(2.0) == True, '\"2.0\" is not an integer!'\nassert     check_integer(3.0) == False, '\"3.0\" is an integer!'\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_integer(\"123\") == True\nassert     check_integer(\"0\") == True\nassert     check_integer(\"1\") == False\nassert     check_integer(\"0.1\") == False\nassert     check_integer(\"-1\") == False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n'''\n\nThe check_integer() function is checking for the correctness of input.\n\nIt takes a single argument as an input. The argument is the text to be checked.\n\ncheck_integer() should return either True or False depending on whether the input represents an integer or not.\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_integer('1') == True\nassert     check_integer('1.5') == True\nassert     check_integer('-2') == False\nassert     check_integer('-2.0') == True\nassert     check_integer('1234.5') == False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_integer('1') == True, 'wrong'\nassert     check_integer('1.1') == True, 'wrong'\nassert     check_integer('a') == False, 'wrong'\nassert     check_integer('1.') == False, 'wrong'\nassert     check_integer('1.1a') == False, 'wrong'\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_integer(\"12\") == True\nassert     check_integer(\"12.2\") == False\nassert     check_integer(\"12j\") == False\nassert     check_integer(\"abc\") == False\nassert     check_integer(\"1.2\") == False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_integer('-2') == True\nassert     check_integer('10') == True\nassert     check_integer('a') == False\nassert     check_integer('10.2') == True\nassert     check_integer('10.2') == False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_integer('1') == True,     '1'\nassert     check_integer('1.') == True,     '1.'\nassert     check_integer('-1') == True,     '-1'\nassert     check_integer('1.0') == True,     '1.0'\nassert     check_integer('01') == True,     '01'\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_integer('1') == False\nassert     check_integer('1.') == False\nassert     check_integer('') == False\nassert     check_integer('-1') == False\nassert     check_integer('2.1') == False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_integer('1') == False\nassert     check_integer('1.1') == True\nassert     check_integer('1.1.1') == False\nassert     check_integer('1e1') == True\nassert     check_integer('0b1101') == True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     empty_dit([{},{},{}]) == True\nassert     empty_dit([{'a':1},{'a':2},{'a':3}]) == False\nassert     empty_dit([{'a':1},{'b':2},{'a':3}]) == False\nassert     empty_dit([{'a':1},{'a':2},{'a':3},{}]) == True\nassert     empty_dit([{'a':1},{'a':2},{'a':3},{'a':4}]) == False\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     empty_dit([{},{},{}]) == True, 'Expected True'\nassert     empty_dit([{1: 2}, {2: 4}, {3: 6}]) == False, 'Expected False'\nassert     empty_dit([{1: 2}, {1: 4}, {2: 6}]) == False, 'Expected False'\nassert     empty_dit([{1: 2}, {}, {1: 4}]) == False, 'Expected False'\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     empty_dit([]) == True, \"Empty list: None\"\nassert     empty_dit([{}]) == False, \"Empty list: {}\"\nassert empty_dit([{}]) == True, \"Empty list: []\"\n\ndef sum_of_numbers(list1):\n    '''\n    Write a function that receives a list of dictionaries and returns the sum of the values of the dictionary\n    '''\n    pass\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     empty_dit([]) == True, \"Should return True if all dictionaries in the list are empty\"\nassert     empty_dit([{\"a\":1},{\"b\":2}]) == False, \"Should return False if any dictionary in the list are not empty\"\nassert     empty_dit([{}]) == True, \"Should return True if the dictionary is empty\"\nassert     empty_dit([{\"a\":1},{\"b\":2},{\"c\":3}]) == False, \"Should return False if the dictionary is not empty\"\n\ndef empty_dit_2(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    pass\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     empty_dit([]) == True, \"Expected True\"\nassert     empty_dit([{}]) == False, \"Expected False\"\nassert     empty_dit([{1:2}]) == True, \"Expected True\"\nassert     empty_dit([{'a': 1}, {'b': 2}]) == False, \"Expected True\"\nassert     empty_dit([{'a': 1, 'b': 2}, {'a': 1, 'b': 2}, {'a': 1, 'b': 2}, {'a': 1, 'b': 2}]) == False, \"Expected True\"\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     empty_dit([{},{},{},{},{},{},{},{},{},{}]) == True\nassert     empty_dit([{},{},{},{},{},{},{},{},{},{},{},{},{},{}]) == False\nassert     empty_dit([{},{},{},{},{},{},{},{},{},{},{},{}]) == False\nassert     empty_dit([{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}]) == False\nassert     empty_dit([{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}]) == False\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tuple_to_int([1,2,3,4,5]) == 123\nassert     tuple_to_int((1,2,3,4,5)) == 123\nassert     tuple_to_int(('1','2','3','4','5')) == 123\nassert     tuple_to_int((1,2,3,4,5,6,7,8,9,10)) == 123\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_to_int((1, 2, 3, 4)) == 123\nassert     tuple_to_int((1, 2, 3, 4, 5)) == 12345\nassert     tuple_to_int((1,)) == 1\nassert     tuple_to_int((1, 2)) == 123\nassert     tuple_to_int((1, 2, 3)) == 123\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_to_int((1, 2, 3, 4)) == 24\nassert     tuple_to_int((5, 5, 5)) == 155\nassert     tuple_to_int((1, 2, 3, 4, 5)) == 243\nassert     tuple_to_int((1, 2, 3, 4)) == 242\nassert     tuple_to_int((1, 2, 3, 4, 5, 6)) == 252\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tuple_to_int((1, 2, 3, 4)) == 6\nassert     tuple_to_int((3, 3, 3)) == 9\nassert     tuple_to_int((2, 1, 3, 6)) == 17\nassert     tuple_to_int((1, 2, 5, 10)) == 25\nassert     tuple_to_int((9, 8, 7, 6, 5, 4, 3, 2, 1, 0)) == 34512\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nassert tuple_to_int((1,2,3,4)) == 123\nassert tuple_to_int((1,1,1)) == 11\nassert tuple_to_int((-1,0,1)) == -1\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert         tuple_to_int((1,2,3)) == 6\nassert         tuple_to_int((1,2,4)) == 7\nassert         tuple_to_int((1,1,1)) == 1\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tuple_to_int((1, 2, 3)) == 6\nassert     tuple_to_int((0, 0, 0)) == 0\nassert     tuple_to_int((1, 2, 0, 0, 3)) == 7\n\n\ndef multiple_ints(list_of_ints):\n    '''\n    Write a function that multiplies all the numbers in a list.\n    '''\n    pass\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tuple_to_int((1,2,3,4,5)) == 15, \"tuple_to_int is not correct\"\nassert     tuple_to_int((1,2,3,4,5,6)) == -1, \"tuple_to_int is not correct\"\n\ndef tuple_to_str(nums):\n    '''\n    Write a function to convert a given tuple of integers into a string.\n    '''\n    pass\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tuple_to_int((1,2,3)) == 123, \"tuple_to_int returned 123 wrong.\"\nassert     tuple_to_int((1,2)) == 12, \"tuple_to_int returned 12 wrong.\"\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tuple_to_int((1, 2, 4)) == 6, '1, 2, 4 does not equal 6'\nassert tuple_to_int((0, 0, 0)) == 0, '0, 0, 0 does not equal 0'\nassert tuple_to_int((4, 4, 4)) == 8, '4, 4, 4 does not equal 8'\nassert tuple_to_int((4, 0, 0)) == 4, '4, 0, 0 does not equal 4'\nassert tuple_to_int((0, 4, 0)) == 4, '0, 4, 0 does not equal 4'\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     list_to_float([1, 2.5, 'hello', 3.5]) == [1.0, 2.5, 'hello', 3.5], 'incorrect conversion'\n\nassert     list_to_float([1, 2.5, 'hello', 3.5]) == [1.0, 2.5, 'hello', 3.5], 'incorrect conversion'\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     list_to_float([['1', '2', '3'], ['5', '6', '7']]) == [[1.0, 2.0, 3.0], [5.0, 6.0, 7.0]]\nassert list_to_float([['1', '2', '3'], ['1', '2', '3']]) == [[1.0, 2.0, 3.0], [1.0, 2.0, 3.0]]\nassert list_to_float([['1', '2', '3'], ['1', '2', '3'], ['4', '5', '6']]) == [[1.0, 2.0, 3.0], [1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]\nassert list_to_float([['1', '2', '3'], ['1', '2', '3'], ['1', '2', '3']]) == [[1.0, 2.0, 3.0], [1.0, 2.0, 3.0], [1.0, 2.0, 3.0]]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     list_to_float([[1, 2], ['hello', 1.5], (1, 1), 1]) == [[1, 2.0], ['hello', 1.5], (1, 1), 1]\nassert     list_to_float([[1, 2], ['hello', 1.5], (1, 1), 1]) == [[1, 2.0], ['hello', 1.5], (1, 1), 1]\nassert     list_to_float([[1, 2], ['hello', 1.5], (1, 1), 1]) == [[1, 2.0], ['hello', 1.5], (1, 1), 1]\nassert     list_to_float([[1, 2], ['hello', 1.5], (1, 1), 1]) == [[1, 2.0], ['hello', 1.5], (1, 1), 1]\nassert     list_to_float([[1, 2], ['hello', 1.5], (1, 1), 1]) == [[1, 2.0], ['hello', 1.5], (1, 1), 1]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     list_to_float([[5], [3.5], [5.5], ['a'], ['b']]) == [[5.0], [3.5], [5.5], ['a'], ['b']]\nassert     list_to_float([[], ['a'], ['b'], ['c'], ['d']]) == [[], ['a'], ['b'], ['c'], ['d']]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nlist_to_float([[1, 2, 3], [4, 5, 6], ['a', 'b', 'c']]) == [[1, 2, 3], [4.0, 5.0, 6.0], ['a', 'b', 'c']]\nassert \n\nlist_to_float([[1, 2, '3'], ['4', '5', '6'], ['7', '8', '9']]) == [[1, 2, 3], [4.0, 5.0, 6.0], ['7', '8', '9']]\nassert\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     list_to_float([\"a\", \"2\", \"3\"]) == [0.0, 2.0, 3.0], \"incorrect\"\nassert     list_to_float([\"a\", \"two\", \"three\"]) == [0.0, 2.0, 3.0], \"incorrect\"\nassert     list_to_float([\"a\", \"2\", \"3\", \"4\"]) == [0.0, 2.0, 3.0, 4.0], \"incorrect\"\nassert     list_to_float([\"a\", \"2\", \"3\", \"4\", \"five\"]) == [0.0, 2.0, 3.0, 4.0, 5.0], \"incorrect\"\nassert     list_to_float([\"a\", \"2\", \"3\", \"4\", \"five\", \"six\"]) == [0.0, 2.0, 3.0, 4.0, 5.0, 6.0], \"incorrect\"\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     list_to_float([[1, 2.1], [3, \"4\", \"5\"]] ) == [[1.0, 2.1], [3.0, 4.0, 5.0]]\nassert     list_to_float([[1, 2.1], [\"3\", \"4\", \"5\"]]) == [[1.0, 2.1], [3.0, 4.0, 5.0]]\nassert     list_to_float([[1, 2.1], [\"3\", \"4\", \"5\"], [6, 7, 8]] ) == [[1.0, 2.1], [3.0, 4.0, 5.0], [6.0, 7.0, 8.0]]\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     string_to_list(\"hello world\") == [\"hello\", \"world\"], \"Expected ['hello', 'world'], got ['hello', 'world'] instead.\"\nassert     string_to_list(\"hello\") == [\"hello\"], \"Expected ['hello'], got ['hello'] instead.\"\nassert     string_to_list(\"hello world\") == [\"hello\", \"world\"], \"Expected ['hello', 'world'], got ['hello', 'world'] instead.\"\nassert     string_to_list(\"hello world\") == [\"hello\", \"world\"], \"Expected ['hello', 'world'], got ['hello', 'world'] instead.\"\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     string_to_list('Hello World') == ['Hello', 'World']\nassert     string_to_list('Hello, world') == ['Hello','', 'world']\nassert     string_to_list('Hello, world!') == ['Hello','', 'world', '!']\nassert     string_to_list('Hi, Alex, hello!') == ['Hi','', 'Alex', ', ', 'hello', '!']\nassert     string_to_list('Hi, Alex, hello! Hi, bob, hello!') == ['Hi','', 'Alex', ', ', 'hello', '!', 'Hi','', 'bob', ', ', 'hello', '!']\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     string_to_list('spam eggs') == ['spam', 'eggs'], \"Error, should be ['spam', 'eggs']\"\nassert     string_to_list('spam eggs with ham') == ['spam eggs with ham'], \"Error, should be ['spam eggs with ham']\"\nassert     string_to_list('spam eggs with ham and spam') == ['spam eggs with ham and spam'], \"Error, should be ['spam eggs with ham and spam']\"\nassert     string_to_list('spam eggs with ham and spam eggs') == ['spam eggs with ham and spam eggs'], \"Error, should be ['spam eggs with ham and spam eggs']\"\nassert     string_to_list('') == [], \"Error, should be []\"\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef write_list_to_string(list):\n    '''\n    Write a function to convert a list of strings to a string.\n    '''\n    pass\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     string_to_list(\"hello world\") == ['hello', 'world']\nassert     string_to_list(\"hello world\") == ['hello', 'world']\nassert     string_to_list(\"hello world hello\") == ['hello', 'world', 'hello']\nassert     string_to_list(\"hello world hello how are you\") == ['hello', 'world', 'hello', 'how', 'are', 'you']\nassert     string_to_list(\"hello world hello how are you and goodbye\") == ['hello', 'world', 'hello', 'how', 'are', 'you', 'goodbye']\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     string_to_list(\"hello\") == [\"hello\"]\nassert     string_to_list(\"hello world\") == [\"hello\", \"world\"]\nassert     string_to_list(\"hello world! and it's me! and I love it!\") == [\"hello\", \"world!\", \"and\", \"it's\", \"me\", \"and\", \"I\", \"love\", \"it!\"]\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert string_to_list(\"The quick brown fox jumps over the lazy dog\") == ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\nassert string_to_list(\"The quick brown fox jumps over the lazy dog\") == ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\nassert string_to_list(\"The quick brown fox jumps over the lazy dog\") == ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\nassert string_to_list(\"The quick brown fox jumps over the lazy dog\") == ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    pass\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef list_to_string(string): \n    '''\n    Write a function to convert a list of strings to a single string.\n    '''\n    pass\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     search([1,2,3,3,4,4,5,6]) == 4\nassert search([2,2,3,3,4,4,5,6]) == 3\nassert search([1,2,3,3,4,4,5,6]) == None\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     search([1,1,2,3,4]) == 2, \"search([1,1,2,3,4]) should be 2\"\nassert     search([1,2,2,3,4]) == 2, \"search([1,2,2,3,4]) should be 2\"\nassert     search([1,1,2,2,3,4]) == 1, \"search([1,1,2,2,3,4]) should be 1\"\nassert     search([1,2,2,3,3,4,4,4,5]) == 3, \"search([1,2,2,3,3,4,4,4,5]) should be 3\"\nassert     search([1,2,2,3,4,4,4,5]) == 4, \"search([1,2,2,3,4,4,4,5]) should be 4\"\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     search([1,1,2,4,4,4,4,5,5,6,7,8,9,9,9,9,9,9,9,9]) == 9\nassert     search([1,1,2,4,4,4,4,5,5,6,7,8,9,9,9,9,9,9,9,9,9,9]) == 9\nassert     search([1,2,4,4,5,5,6,7,8,9,9,9,9,9,9,9,9,9,9,9,9,9]) == 9\nassert     search([1,2,4,4,5,5,6,7,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nsearch([1,2,3,4,5,6,7,7,8,9]) == 7\nsearch([-1,-1,-1,0,1,1,1,2,2,2,3,3,3,3,4,4,5,5,6,6,7,7,7,8,8,9,9,9]) == 8"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     search([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 9\nassert     search([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 9\nassert     search([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1\nassert     search([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1\nassert     search([1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     search([2,1,2,3,3,3,4,5,5,6,7,8,8,9,9]) == 8, \"Wrong output\"\nassert     search([2,1,2,3,3,4,5,5,6,7,8,8,9,9]) == 9, \"Wrong output\"\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert \n\ndef check_numbers(arr):\n    '''\n    Write a python function to find the majority element in an array.\n    '''\n    pass\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    search([1, 2, 2, 2, 2, 2]) == 2, \"search(arr) should return 2\"\n    search([1, 1, 1, 1, 2, 2, 2]) == 1, \"search(arr) should return 1\"\n    search([]) == None, \"search(arr) should return None\"\n    search([1, 1, 1, 2, 2, 2]) == None, \"search(arr) should return None\"\n    search([2, 2, 2, 2, 2]) == None, \"search(arr) should return None\"\n    search([2, 2, 2, 2, 2, 2]) == None, \"search(arr) should return None\"\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     search([1,1,1,2,2,2,3,3,3]) == 2, 'Wrong answer'\nassert     search([1,2,2,2,3,3,3,4,4,4,4]) == 4, 'Wrong answer'\nassert     search([1,1,1,1,1,2,2,2,2,2,3,3,3]) == 1, 'Wrong answer'\nassert     search([2,1,2,2,2,3,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,5]) == 5, 'Wrong answer'\nassert     search([2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4]) == 4, 'Wrong answer'\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_product_tuple([(2,3),(4,5),(9,10),(4,9)]) == (20,15)\nassert     max_product_tuple([(1,2),(3,4),(4,5),(5,6)]) == (40,90)\nassert     max_product_tuple([(2,4),(9,10),(4,8),(6,7)]) == (40,48)\nassert     max_product_tuple([(8,8),(9,10),(4,8),(6,7)]) == (40,48)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_product_tuple([(10, 20), (10, -10), (20, -20), (30, -30)]) == (10, 20) == (10, -10) == (20, -20) == (30, -30), 'Wrong answer'\nassert max_product_tuple([(1, 2), (2, 3), (3, 4), (5, 6)]) == (2, 3) == (3, 4) == (5, 6), 'Wrong answer'\nassert max_product_tuple([(5, 6, 7, 8), (7, 8, 9, 10), (5, 6, 7, 9)]) == (7, 8, 9) == (5, 6, 7, 9), 'Wrong answer'\nassert max_product_tuple([(9, 8, 7, 6), (7, 8, 9, 10), (9, 8, 7, 10)]) == (9, 8, 7) == (7, 8, 9, 10), 'Wrong answer'\nassert max_product_tuple([(1, 2, 3, 4), (4, 5, 6, 7), (1, 2, 3, 5), (7, 6, 5, 4)]) == (4, 5, 6, 7), 'Wrong answer'\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_product_tuple([(1,2),(2,4),(6,-2)]) == (6,4)\nassert     max_product_tuple([(1,2),(2,4),(5,-2)]) == (2,4)\nassert     max_product_tuple([(1,2),(2,4),(5,-2)]) == (2,4)\nassert     max_product_tuple([(1,2),(2,4),(6,5)]) == (6,4)\nassert     max_product_tuple([(1,2),(2,4),(6,5)]) == (6,4)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_product_tuple([(1,-1), (2,2), (1,-1), (-2,1), (-2,1), (4,-1), (2,-2), (2,-1)]) == (1,2)\nassert     max_product_tuple([(2,-2), (1,-1), (4,-1), (2,-2), (1,-1), (4,-1), (2,-2), (1,-1)]) == (4,4)\nassert     max_product_tuple([(3,2), (1,-1), (4,-1), (2,-2), (2,-1), (4,-1), (3,2)]) == (4,4)\nassert     max_product_tuple([(2,-2), (1,1), (4,-1), (2,-2), (1,1), (4,-1), (2,-2), (1,1)]) == (1,1)\nassert     max_product_tuple([(1,-1), (2,2), (1,-1), (-2,1), (-2,1), (4,-1), (2,-2), (2,-1)]) == (2,-1)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_product_tuple([(1, 3), (2, 3), (4, -3)]) == (4, 3)\nassert     max_product_tuple([(1, 5), (2, -4), (-3, -5)]) == (2, -5)\nassert     max_product_tuple([(1, 3), (2, -3), (-3, -5)]) == (2, -5)\nassert     max_product_tuple([(2, 1), (-3, -5), (-4, -7), (4, -9)]) == (2, 1)\nassert     max_product_tuple([(-2, 1), (-3, -5), (-4, -7), (4, -9)]) == (2, 1)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_product_tuple([(1, 2), (4, 3), (6, 4), (8, 5)]) == (8, 8)\nassert     max_product_tuple([(3, -2), (0, 5), (-6, -1), (4, 2)]) == (0, 0)\nassert     max_product_tuple([(1, 2), (1, 2), (1, 2)]) == (2, 4)\nassert     max_product_tuple([(3, -2), (3, -2), (3, -2)]) == (3, -6)\nassert     max_product_tuple([(0, -1), (0, -1), (0, -1)]) == (0, 0)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_product_tuple([]) == None, \"Empty list\"\nassert     max_product_tuple([(1,3),(-1,2)]) == None, \"Wrong type\"\nassert     max_product_tuple([(1,3),(-1,2)]) == 3, \"Wrong value\"\nassert     max_product_tuple([(1,3),(-1,2)]) == 1, \"Wrong value\"\nassert     max_product_tuple([(2,3),(-2,2)]) == 6, \"Wrong value\"\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_product_tuple([(1,2), (-3,4), (5,6)]) == (2,6), \"Wrong result\"\nassert     max_product_tuple([(1,2), (2,3), (3,4), (4,5)]) == (2,3), \"Wrong result\"\n\ndef min_max_tuple(list1):\n    '''\n    Write a function to find the minimum and maximum value and the minimum and maximum index of a given tuple in a list.\n    '''\n    pass\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     amicable_numbers_sum(100) == 55\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\namicable_numbers_sum(10) == sum(set(range(2,10)) - set(divisors(sum(divisors(i)))))\n\n'''\n--------------------------------------------------------------------------------\nGiven a list of integers, write a function that returns a list where each element is the product of all the values except itself.\n\nExample:\n\n[1,2,3,4] -> [24,12,8,6]\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     amicable_numbers_sum(1) == 0\nassert     amicable_numbers_sum(2) == 1\nassert     amicable_numbers_sum(3) == 2\nassert     amicable_numbers_sum(4) == 3\nassert     amicable_numbers_sum(5) == 5\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     amicable_numbers_sum(10) == False\nassert     amicable_numbers_sum(20) == False\nassert     amicable_numbers_sum(30) == True\nassert     amicable_numbers_sum(50) == False\nassert     amicable_numbers_sum(100) == True\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef test_amicable_numbers_sum():\n    print('Testing amicable_numbers_sum')\n\n    # assume that the results in the examples in the docstring are correct\n    # the same_number_sum returns 2\n    assert amicable_numbers_sum(1) == 2\n    assert amicable_numbers_sum(2) == 1\n    "
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     amicable_numbers_sum(10) == 0, \"Expected 0\"\nassert     amicable_numbers_sum(25) == 23, \"Expected 23\"\nassert     amicable_numbers_sum(50) == 46, \"Expected 46\"\nassert     amicable_numbers_sum(100) == 101, \"Expected 101\"\nassert     amicable_numbers_sum(1000) == 2072, \"Expected 2072\"\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     amicable_numbers_sum(100) == 572\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\namicable_numbers_sum(5000) == 6777 # provided example"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     angle_complex(4,-3) == -1.2*math.pi\nassert     angle_complex(-4,-3) == 1.2*math.pi\nassert     angle_complex(4,-3) == -1.2*math.pi\nassert     angle_complex(-4,-3) == 1.2*math.pi\nassert     angle_complex(3+5j,4-3j) == cmath.rect(3,5)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     angle_complex((0.5,0.5),(1,0)) ==     90\nassert     angle_complex((0,0),(0,1)) ==     0\nassert     angle_complex((0,0),(1,0)) ==     180\nassert     angle_complex((0,1),(1,0)) ==     90\nassert     angle_complex((1,0),(0,1)) ==     90\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    \n    \ndef angle(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    pass\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     angle_complex(0, 0) == 0, \"0 degrees\"\nassert     angle_complex(0, 1) == 90, \"90 degrees\"\nassert     angle_complex(1, 0) == 180, \"180 degrees\"\nassert     angle_complex(0, -1) == -90, \"270 degrees\"\nassert     angle_complex(1, -1) == -180, \"270 degrees\"\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     angle_complex(2, 3) == 0.7853981633974483\nassert     angle_complex(2, -3) == -0.7853981633974483\nassert     angle_complex(-2, 3) == 1.5707963267948966\nassert     angle_complex(-2, -3) == -1.5707963267948966\nassert     angle_complex(1.5, 2) == 1.5707963267948966\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     angle_complex(1, 0) == 0\nassert     angle_complex(1, 1) == 1.5707963267948966\nassert     angle_complex(2, 1) == 1.5707963267948966\nassert     angle_complex(3, 1) == 1.5707963267948966\nassert     angle_complex(1, 2) == 1.5707963267948966\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     angle_complex(1,1+2j) == -cmath.pi/4\nassert     angle_complex(-1,1+2j) == -cmath.pi/4\nassert     angle_complex(0,1+2j) == 0\nassert     angle_complex(0.5,1+2j) == -cmath.pi/4\nassert     angle_complex(1,0.5+2j) == cmath.pi\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # Test your function here\n    print(\"angle_complex\")\n    \n    c1 = complex(1,1)\n    c2 = complex(1,2)\n    c3 = complex(1,3)\n    c4 = complex(2,1)\n    c5 = complex(2,2)\n    c6 = complex(2,3)\n    c7 = complex(3,1)\n    c8 = complex(3,2)\n    c9 = complex(3,3)\n    \n    assert angle_complex(c1, c2) == 1.57079633\n    assert angle_complex(c1, c3) == 1.5\n    assert angle_complex(c1, c4) == 1.08333333\n    "
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     angle_complex(0,0) == 0\nassert     angle_complex(1,0) ==     0\nassert     angle_complex(1,1) ==     pi/2\nassert     angle_complex(0,1) ==     pi/2\nassert     angle_complex(1,-1) == pi\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     angle_complex((1,2,3),(4,5,6)) == -9\nassert     angle_complex((1,2,3),(4,5,6)) == -90\nassert     angle_complex((-1,2,3),(4,5,6)) == -36\nassert     angle_complex((-1,-2,3),(4,5,6)) == -30\nassert     angle_complex((1,2,3),(-4,5,6)) == -84\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_length(\"11001011\") == 4, \"Should be 4\"\nassert     find_length(\"1100101\") == 2, \"Should be 2\"\nassert     find_length(\"\") == 0, \"Should be 0\"\nassert     find_length(\"0\") == 0, \"Should be 0\"\nassert     find_length(\"00\") == 0, \"Should be 0\"\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef find_string(string):\n    '''\n    Write a function to check whether a given string is palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_length('00110101') == 4, \"Wrong!\"\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert find_length('1100') == 3, 'Expected: 3'\nassert find_length('110110') == 2, 'Expected: 2'\nassert find_length('101101') == 1, 'Expected: 1'\nassert find_length('0000') == 0, 'Expected: 0'\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint('TEST CASE: find_length(binary_string)')\nprint('Test: 010111')\nassert find_length('010111') == 4\nprint('Test: 010110')\nassert find_length('010110') == 3\nprint('Test: 1111111')\nassert find_length('11111111') == 0\nprint('Test: 1111101')\nassert find_length('11011101') == 2\nprint('Test: 111011111')\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    find_length(\"0110111101011101101001111100011111110101011101110110111011101\") == 6\n\n\ndef sub_string(binary_string):\n    '''\n    Write a function to find all sub-string of the given binary string.\n    '''\n    pass"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert find_length('0010001010111') == 5\nassert find_length('10101') == 1\nassert find_length('100101010101') == 2\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_length(\"000001010111\") == 3, \"Wrong\"\nassert     find_length(\"1000101010111\") == 3, \"Wrong\"\nassert     find_length(\"10101010111\") == 2, \"Wrong\"\nassert     find_length(\"01010101010111\") == 3, \"Wrong\"\nassert     find_length(\"111111\") == 0, \"Wrong\"\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert "
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    pass\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum(2,4) == 2\nassert     sum(4,8) == 6\nassert     sum(10,20) == 20\nassert sum(10,10) == 10\nassert sum(2,2) == 2\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum(1,2) == 3\nassert sum(1,2) == 3\n\n\n\ndef common_divisors(a,b): \n    '''\n    Write a python function to find the common divisors of two given numbers.\n    '''\n    pass\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nsum(9,5) == sum(5,9) == sum(5,5) == 5\n\n\ndef sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    pass\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum(23, 25) == 8\nassert     sum(50, 5) == 15\nassert     sum(45, 9) == 20\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    sum(15,7) == 1, 'Test 01 is Failed'\n    sum(31,31) == 31, 'Test 02 is Failed'\n    sum(28,26) == 27, 'Test 03 is Failed'\n    sum(28,25) == 24, 'Test 04 is Failed'\n    sum(29,36) == 29, 'Test 05 is Failed'\n    sum(29,40) == 29, 'Test 06 is Failed'\n    sum(30,30) == 30, 'Test 07 is Failed'\n    sum(31,31) == 31, 'Test 08 is Failed'\n    sum(20,20) == 20, 'Test 09 is Failed'\n    sum(20,19) == 19, 'Test 10 is Failed'\n    sum(19,19) == 19, 'Test 11 is Failed'\n    sum(19,19) == 19, 'Test 12 is Failed'\n    sum(20,20) == 20, 'Test 13 is Failed'\n    sum(20,19) == 18, 'Test 14 is Failed'\n    sum(19,19) == 19, 'Test 15 is Failed'\n    sum(18,18) == 18, 'Test 16 is Failed'\n    sum(15,15) == 15, 'Test 17 is Failed'\n    sum(28,26) == 25, 'Test 18 is Failed'\n    sum(28,25) == 24, 'Test 19 is Failed'\n    sum(29,36) == 29, 'Test 20 is Failed'\n    sum(29,40) == 29, 'Test 21 is Failed'\n    sum(30,30) == 30, 'Test 22 is Failed'\n    sum(31,31) == 31, 'Test 23 is Failed'\n    sum(20,20) == 20, 'Test 24 is Failed'\n    sum(20,19) == 19, 'Test 25 is Failed'\n    sum(19,19) == 19, 'Test 26 is Failed'\n    sum(19,19) == 19, 'Test 27 is Failed'\n    sum(20,20) == 20, 'Test 28 is Failed'\n    sum(20,19) == 18, 'Test 29 is Failed'\n    sum(19,19) == 19, 'Test 30 is Failed'\n    sum(18,18) == 18, 'Test 31 is Failed'\n    sum(15,15) == 15, 'Test 32 is Failed'\n    sum(28,26) == 25, 'Test 33 is Failed'\n    sum(28,25) == 24, 'Test 34 is Failed'\n    sum(29,36) == 29, 'Test 35 is Failed'\n    sum(29,40) == 29, 'Test 36 is Failed'\n    sum(30,30) == 30, 'Test 37 is Failed'\n    sum(31,31) == 31, 'Test 38 is Failed'\n    sum(20,20) == 20, 'Test 39 is Failed'\n    sum(20,19) == 19, 'Test 40 is Failed'\n    sum(19,19) == 19, 'Test 41 is Failed'\n    sum(19,19) == 19, 'Test 42 is Failed'\n    sum(20,20) == 20, 'Test 43 is Failed'\n    sum(20,19) == 18, 'Test 44 is Failed'\n    sum(19,19) == 19, 'Test 45 is Failed'\n    sum(18,18) == 18, 'Test 46 is Failed'\n    sum(15,15) == 15, 'Test 47 is Failed'\n    sum(28,26) == 25, 'Test 48 is Failed'\n    sum(28,25) == 24, 'Test 49 is Failed'\n    sum(29,36) == 29, 'Test 50 is Failed'\n    sum(29,40) == 29, 'Test 51 is Failed'\n    sum(30,30) == 30, 'Test 52 is Failed'\n    sum(31,31) == 31, 'Test 53 is Failed'\n    sum(20,20) == 20, 'Test 54 is Failed'\n    sum(20,19) == 19, 'Test 55 is Failed'\n    sum(19,19) == 19, 'Test 56 is Failed'\n    sum(19,19) == 19, 'Test 57 is Failed'\n    sum(20,20) == 20, 'Test 58 is Failed'\n    sum(20,19) == 18, 'Test 59 is Failed'\n    sum(19,19) == 19, 'Test 60 is Failed'\n    sum(18,18) == 18, 'Test 61 is Failed'\n    sum(15,15) == 15, 'Test 62 is Failed'\n    sum(28,26) == 25, 'Test 63 is Failed'\n    sum(28,25) == 24, 'Test 64 is Failed'\n    sum(29,36) == 29, 'Test 65 is Failed'\n    sum(29,40) == 29, 'Test 66 is Failed'\n    sum(30,30) == 30, 'Test 67 is Failed'\n    sum(31,31) == 31, 'Test 68 is Failed'\n    sum(20,20) == 20, 'Test 69 is Failed'\n    sum(20,19) == 19, 'Test 70 is Failed'\n    sum(19,19) == 19, 'Test 71 is Failed'\n    sum(19,19) == 19, 'Test 72 is Failed'\n    sum(20,20) == 20, 'Test 73 is Failed'\n    sum(20,19) == 18, 'Test 74 is Failed'\n    sum(19,19) == 19, 'Test 75 is Failed'\n    sum(18,18) == 18, 'Test 76 is Failed'\n    sum(15,15) == 15, 'Test 77 is Failed'\n    sum(28,26) == 25, 'Test 78 is Failed'\n    sum(28,25) == 24, 'Test 79 is Failed'\n    sum(29,36) == 29, 'Test 80 is Failed'\n    sum(29,40) == 29, 'Test 81 is Failed'\n    sum(30,30) == 30, 'Test 82 is Failed'\n    sum(31,31) == 31, 'Test 83 is Failed'\n    sum(20,20) == 20, 'Test 84 is Failed'\n    sum(20,19) == 19, 'Test 85 is Failed'\n    sum(19,19) == 19, 'Test 86 is Failed'\n    sum(19,19) == 19, 'Test 87 is Failed'\n    sum(20,20) == 20, 'Test 88 is Failed'\n    sum(20,19) == 18, 'Test 89 is Failed'\n    sum(19,19) == 19, 'Test 90 is Failed'\n    sum(18,18) == 18, 'Test 91 is Failed'\n    sum(15,15) == 15, 'Test 92 is Failed'\n    sum(28,26) == 25, 'Test 93 is Failed'\n    sum(28,25) == 24, 'Test 94 is Failed'\n    sum(29,36) == 29, 'Test 95 is Failed'\n    sum(29,40) == 29, 'Test 96 is Failed'\n    sum(30,30) == 30, 'Test 97 is Failed'\n    sum(31,31) == 31, 'Test 98 is Failed'\n    sum(20,20) == 20, 'Test 99 is Failed'\n    sum(20,19) == 19, 'Test 100 is Failed'\n    sum(19,19) == 19, 'Test 101 is Failed'\n    sum(19,19) == 19, 'Test 102 is Failed'\n    sum(20,20) == 20, 'Test 103 is Failed'\n    sum(20,19) == 18, 'Test 104 is Failed'\n    sum(19,19) == 19, 'Test 105 is Failed'\n    sum(18,18) == 18, 'Test 106 is Failed'\n    sum(15,15) == 15, 'Test 107 is Failed'\n    sum(28,26) == 25, 'Test 108 is Failed'\n    sum(28,25) == 24, 'Test 109 is Failed'\n    sum(29,36) == 29, 'Test 110 is Failed'\n    sum(29,40) == 29, 'Test 111 is Failed'\n    sum(30,30) == 30, 'Test 112 is Failed'\n    sum(31,31) == 31, 'Test 113 is Failed'\n    sum(20,20) == 20, 'Test 114 is Failed'\n    sum(20,19) == 19, 'Test 115 is Failed'\n    sum(19,19) == 19, 'Test 116 is Failed'\n    sum(19,19) == 19, 'Test 117 is Failed'\n    sum(20,20) ="
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     (sum(5, 7) == 5 + 7), 'Function is not working'\nassert     (sum(3, 9) == 3 + 3), 'Function is not working'\n\n\n\ndef diff(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    pass\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     multiply_int(5, 3) == 15, \"Your function should multiply the two integers.\"\nassert     multiply_int(5, -3) == -15, \"Your function should multiply the two integers.\"\nassert     multiply_int(5, 0) == 0, \"Your function should multiply the two integers.\"\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     (multiply_int(1, 2) == 2)\nassert     (multiply_int(-1, -2) == -4)\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     multiply_int(1, 2) == 2\nassert     multiply_int(10, 10) == 100\nassert     multiply_int(1000000, 100000000) == 1000000000000\n\ndef divide_int(x, y):\n    '''\n    Write a function to divide two integers.\n    '''\n    pass\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     multiply_int(3, 4) == 12\nassert     multiply_int(4, 7) == 40\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert multiply_int(2, 3) == 6\nassert multiply_int(2, -3) == -6\nassert multiply_int(-2, 3) == -6\nassert multiply_int(-2, -3) == 6\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     multiply_int(3, 4) == 12\nassert     multiply_int(-1, 2) == -2\nassert     multiply_int(5, 7) == 35\nassert     multiply_int(0, 0) == 0\nassert     multiply_int(0, -1) == 0\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     multiply_int(1, 1) == 1\nassert     multiply_int(0, 1) == 0\nassert     multiply_int(-1, 1) == -1\nassert     multiply_int(1, 0) == 0\nassert     multiply_int(-1, -1) == 1\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     multiply_int(2, 3) == 6, 'Function is not correct'\nassert     multiply_int(3, 2) == 6, 'Function is not correct'\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     multiply_int(1, 2)     ==     2\nassert     multiply_int(-1, 2)     ==     -2\nassert     multiply_int(1, -2)     ==     -2\nassert     multiply_int(-1, -2)     ==     2\nassert     multiply_int(0, 2)     ==     0\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     multiply_int(3, 4) == 12\nassert multiply_int(4, 4) == 16\nassert multiply_int(-3, -4) == -12\nassert multiply_int(2, 3) == 6\nassert multiply_int(-5, 3) == -15\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(long_words(5, ['python', 'jumble', 'easy', 'difficult', 'python', 'easy', 'python', 'easy']))\n    print(long_words(5, ['apple', 'apple', 'app', 'apple', 'apple', 'app', 'apple']))"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     long_words(1, [\"w\",\"wo\",\"wor\",\"worl\",\"world\"]) == [\"world\"]\nassert     long_words(2, [\"a\", \"banana\", \"app\", \"appl\", \"ap\", \"apply\", \"apple\"]) == [\"apple\", \"apply\"]\nassert     long_words(3, [\"a\", \"banana\", \"app\", \"appl\", \"ap\", \"apply\", \"apple\"]) == [\"apple\", \"apply\"]\nassert     long_words(2, [\"a\", \"banana\", \"app\", \"appl\", \"ap\", \"apply\", \"apple\"]) == [\"apple\"]\nassert     long_words(5, [\"a\", \"banana\", \"app\", \"appl\", \"ap\", \"apply\", \"apple\"]) == [\"apple\"]\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     long_words(3, ['all', 'are', 'not', 'of', 'the','same']) == ['of', 'the','same']\nassert     long_words(4, ['of', 'the','same', 'are', 'all']) == ['are', 'of', 'the','same']\nassert     long_words(4, ['all', 'are', 'of', 'the','same', 'are']) == ['of', 'the','same', 'are']\nassert     long_words(3, ['all', 'are', 'of', 'the','same', 'are', 'with']) == ['are', 'of', 'the','same', 'are']\n\nprint(long_words.__doc__"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     long_words(2, [\"hello\", \"world\"]) == [\"hello\", \"world\"], 'incorrect'\nassert     long_words(2, [\"a\", \"the\"]) == ['a','the'], 'incorrect'\nassert     long_words(3, [\"hello\", \"world\"]) == [\"hello\", \"world\"], 'incorrect'\nassert     long_words(3, [\"a\", \"the\"]) == ['a','the'], 'incorrect'\nassert     long_words(4, [\"hello\", \"world\"]) == ['hello', 'world'], 'incorrect'\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     long_words(3, ['car', 'truck', 'truck', 'car', 'truck']) == ['truck', 'truck']\nassert     long_words(3, ['car', 'car', 'car', 'truck']) == ['car', 'car']\nassert     long_words(3, ['car', 'car', 'car', 'car']) == ['car', 'car']\nassert     long_words(3, ['car', 'car', 'car', 'car']) == ['car']\nassert     long_words(4, ['car', 'car', 'car', 'car']) == ['car', 'car']\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef long_words2(n, str):\n    '''\n    Check if words longer than n characters are there\n    '''\n    pass\n\nassert \n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nlong_words(3, [\"i\", \"like\", \"apples\", \"apple\", \"pears\", \"love\", \"you\", \"yeah\", \"awesome\"])\nassert not long_words(2, [\"i\", \"like\", \"apples\", \"apple\", \"pears\", \"love\", \"you\", \"yeah\", \"awesome\"])\nassert not long_words(1, [\"i\", \"like\", \"apples\", \"apple\", \"pears\", \"love\", \"you\", \"yeah\", \"awesome\"])\nassert long_words(3, [\"i\", \"like\", \"apples\", \"apple\", \"pears\", \"love\", \"you\", \"yeah\", \"awesome\"])\nassert not long_words(3, [\"i\", \"like\", \"apples\", \"apple\", \"pears\", \"love\", \"you\", \"yeah\", \"awesome\", \"ok\"])\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     long_words(5, ['a', 'aa', 'aaa', 'aaaa']) == ['a', 'aa', 'aaa']\nassert     long_words(6, ['a', 'aa', 'aaa', 'aaaa', 'aaaaa']) == ['aaa', 'aaaaa']\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nassert long_words(3, ['a', 'b', 'c', 'd']) == ['b', 'c']\n\nassert long_words(5, ['a', 'b', 'c', 'd']) == ['b', 'c']\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     magic_square_test([[4, 9, 2],\n                            [3, 5, 7],\n                            [8, 1, 6]]) == True, \\\n            \"4, 9, 2\" + \" \" + \"3, 5, 7\" + \" \" + \"8, 1, 6\" + \" \" + \"not a magic square\"\nassert     magic_square_test([[2, 7, 6],\n                            [9, 5, 1],\n                            [4, 3, 8]]) == False, \\\n            \"2, 7, 6\" + \" \" + \"9, 5, 1\" + \" \" + \"4, 3, 8\" + \" \" + \"not a magic square\"\nassert     magic_square_test([[8, 3, 4],\n                            [1, 5, 9],\n                            [6, 7, 2]]) == False, \\\n            \"8, 3, 4\" + \" \" + \"1, 5, 9\" + \" \" + \"6, 7, 2\" + \" \" + \"not a magic square\"\nassert     magic_square_test([[5, 3, 4],\n                            [6, 9, 1],\n                            [7, 8, 2]]) == False, \\\n            \"5, 3, 4\" + \" \" + \"6, 9, 1\" + \" \" + \"7, 8, 2\" + \" \" + \"not a magic square\"\nassert     magic_square_test([[9, 8, 7],\n                            [6, 5, 4],\n                            [3, 2, 1]]) == False, \\\n            \"9, 8, 7\" + \" \" + \"6, 5, 4\" + \" \" + \"3, 2, 1\" + \" \" + \"not a magic square\"\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n'''\nExpected output\nTrue\n'''\n\nimport numpy as np\n\ndef list_to_matrix(l):\n    matrix = []\n    for i in range(len(l)):\n        row = []\n        for j in range(len(l[i])):\n            row.append(l[i][j])\n        matrix.append(row)\n    return matrix\n\ndef matrix_to_list(m):\n    matrix_to_list = []\n    for i in range(len(m)):\n        row = []\n        for j in range(len(m[i])):\n            row.append(m[i][j])\n        matrix_to_list.append(row)\n    return matrix_to_list\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint('You passed all the tests.'"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     magic_square_test([[1,2,3],\n                            [2,4,6],\n                            [3,6,9]]) == True, \\\n        \"Try to find the magic square with the wrong pattern\"\nassert magic_square_test([[1, 2, 3],\n                        [2, 4, 6],\n                        [3, 6, 9]]) == False, \\\n        \"Try to find the magic square with the wrong pattern\"\nassert magic_square_test([[3, 2, 4],\n                        [6, 5, 8],\n                        [1, 4, 7]]) == False, \\\n        \"Try to find the magic square with the wrong pattern\"\nassert magic_square_test([[2, 3, 4],\n                        [3, 5, 6],\n                        [4, 5, 7]]) == False, \\\n        \"Try to find the magic square with the wrong pattern\"\nassert magic_square_test([[3, 2, 4],\n                        [4, 5, 6],\n                        [2, 3, 5]]) == False, \\\n        \"Try to find the magic square with the wrong pattern\"\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nmy_matrix = [\n        [ 8, 1, 6, 3, 5],\n        [ 9, 5, 2, 4, 7],\n        [ 6, 3, 8, 4, 1],\n        [ 7, 4, 6, 2, 9],\n        [ 5, 2, 4, 7, 3]\n        ]\n\nmagic_square_test(my_matrix)\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nmy_matrix = [[4, 9, 2],\n            [3, 5, 7],\n            [8, 1, 6]]\nassert magic_square_test(my_matrix) == True, \"The matrix {} should be magic square\".format(my_matrix)\nassert magic_square_test(my_matrix) == False, \"The matrix {} should not be magic square\".format(my_matrix)\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_occurrences([1,2,3,3,4,4,5]) == 4, \"should return 4\"\nassert max_occurrences([1,2,3,3,4,4,5]) == 5, \"should return 5\"\nassert max_occurrences([1,2,3,3,3,3,3]) == 3, \"should return 3\"\nassert max_occurrences([1,1,1,1,1,1]) == 1, \"should return 1\"\nassert max_occurrences([1,2,3,4,5,6,7,8,9]) == 9, \"should return 9\"\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef get_frequencies(nums):\n    '''\n    Write a function to find the frequency of a given item in a list.\n    '''\n    pass\n\n\ndef get_count(nums):\n    '''\n    Write a function to get the count of an item in a list.\n    '''\n    pass\n\n\ndef get_majority_element(nums):\n    '''\n    Write a function to find the majority element.\n    '''\n    pass\n\n\ndef get_count_of_majority_element(nums):\n    '''\n    Write a function to get the count of an item in a list.\n    '''\n    pass\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_occurrences([1,1,2,2,3]) == 3\nassert     max_occurrences([1,1,2,2,2,3]) == 2\nassert     max_occurrences([1,1,1,2,2,2,3]) == 1\nassert     max_occurrences([1,1,1,2,2,3,4,5,5,6,6]) == 6\nassert     max_occurrences([1,1,1,2,2,3,3,4,4,5,5,6,6,6]) == 5\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nnums = [1,1,2,2,3,3,4,4,5,5,6,6]\nprint(max_occurrences(nums)) # 6\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_occurrences([1,1,1,1,2,2,3]) == 2\nassert     max_occurrences([3,2,2,2,2,3]) == 3\nassert     max_occurrences([1,2,3,4,5,6,6]) == 6\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_occurrences([1,1,1,2,2,2,2,3,3,3,3,3,4,4,4,4,5,5,5,6,6,6,6,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_occurrences([1,1,1,2,2,3]) == 1, \"Expected 1\"\nassert     max_occurrences([1,1,2,2,3,3,3]) == 2, \"Expected 2\"\nassert     max_occurrences([1,2,3,4]) == \"\", \"Expected ''\"\nassert     max_occurrences([1,1,1,1,1,1,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert max_occurrences([1, 2, 2, 3, 3, 3]) == 3\nassert max_occurrences([1, 2, 2, 3, 3]) == 3\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_occurrences([1,2,3,3,3,4,4,4,5,6,6]) == 6\nassert     max_occurrences([1,2,3,4,5,6]) == 5\nassert     max_occurrences([1,1,1,2,2,2,3,3,3]) == 2\nassert     max_occurrences([1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3,4,4,4,4,4,4,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_occurrences([5,1,3,4,2,2]) == 4, 'TEST FAILED: 1'\nassert max_occurrences([1,1,1,1]) == 1, 'TEST FAILED: 2'\nassert max_occurrences([]) == None, 'TEST FAILED: 3'\nassert max_occurrences([2,3,4,4]) == None, 'TEST FAILED: 4'\nassert max_occurrences([1,2,3,4,5,5]) == 4, 'TEST FAILED: 5'\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     reverse_vowels(\"\") == \"\"\nassert     reverse_vowels(\"h\") == \"h\"\nassert     reverse_vowels(\"hello\") == \"hello\"\nassert     reverse_vowels(\"hello world\") == \"dlrow olleh\"\nassert     reverse_vowels(\"hello and world\") == \"dlrow olleh and\"\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     reverse_vowels(\"hello!\") == '!olleh'\nassert     reverse_vowels(\"h\") == 'h'\nassert     reverse_vowels(\"helloworld\") == 'dlrow olleh'\nassert     reverse_vowels(\"hello123\") == '123hleo'\n\n\ndef swap_case(str1):\n    '''\n    Write a python function to swap the case of a given string.\n    '''\n    pass\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     reverse_vowels('hello') == 'holle'\nassert reverse_vowels('python') == 'nohtyp'\nassert reverse_vowels('code') == 'edoc'\n\n\n'''\nWrite a python function to reverse the vowels of a given string.\n'''\ndef reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    pass\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     reverse_vowels('hello, world!') == 'holle, world!', 'Wrong reverse_vowels result!'\nassert reverse_vowels('leat') == 'leav', 'Wrong reverse_vowels result!'\nassert reverse_vowels('a') == 'a', 'Wrong reverse_vowels result!'\nassert reverse_vowels('aeiou') == 'oui', 'Wrong reverse_vowels result!'\nassert reverse_vowels('aeiou') == 'uiou', 'Wrong reverse_vowels result!'\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     reverse_vowels('hello') == 'holle'\nassert reverse_vowels('python') == 'nohtyp'\nassert reverse_vowels('abracadabra') == 'elbracdabra'\nassert reverse_vowels('abracadabra') == 'elbracdabra'\nassert reverse_vowels('geeksforgeeks') == 'forgeeksksofgeeks'\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     reverse_vowels('hello') == 'holle', 'Wrong result'\nassert     reverse_vowels('hello world') == 'dlrow olleh', 'Wrong result'\nassert     reverse_vowels('apple') == 'pea', 'Wrong result'\nassert     reverse_vowels('applee') == 'plee', 'Wrong result'\nassert     reverse_vowels('apple ') == 'elap ', 'Wrong result'\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     reverse_vowels('hello') == 'holle','reverse_vowels 1 error'\nassert     reverse_vowels('hello1') == 'oell1','reverse_vowels 1 error'\nassert     reverse_vowels('hello world') == 'dolle wrld','reverse_vowels 1 error'\nassert     reverse_vowels('a') == 'a','reverse_vowels 2 error'\nassert     reverse_vowels('xyz') == 'zyx','reverse_vowels 2 error'\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tup_string((1, 2, 3))     == '1,2,3'\nassert     tup_string((-2, -1, 0, 1, 2)) == '-2, -1, 0, 1, 2'\nassert     tup_string((-1, 2))     == '-1, 2'\nassert     tup_string((0,))     == '0, '\nassert     tup_string((0, 1, 2))     == '0, 1, 2'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tup_string((1,2,3)) == '1,2,3'\nassert     tup_string((0.1,'Hello',0.1)) == '0.1,Hello,0.1'\nassert     tup_string((True,False,True)) == 'True,False,True'\nassert     tup_string((0,1,2,3,4)) == '0,1,2,3,4'\nassert     tup_string((0,1,2,3,4,5,6,7,8,9)) == '0,1,2,3,4,5,6,7,8,9'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tup_string((1,2,3,4,5)) == \"1,2,3,4,5\", 'First test failed'\nassert     tup_string((3,1,1,4,3)) == \"3,1,1,4,3\", 'Second test failed'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tup_string((1, 2, 3)) == \"1, 2, 3\", \"Should be (1, 2, 3)\"\nassert     tup_string(('a', 'b', 'c')) == \"a, b, c\", \"Should be a, b, c\"\nassert     tup_string((1, 2, 3, 4)) == \"1, 2, 3, 4\", \"Should be 1, 2, 3, 4\"\n\n\ndef pair_string(p1):\n    '''\n    Write a function to convert a pair to a string.\n    '''\n    pass\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tup_string(('a','b')) == 'a,b'\nassert     tup_string((1,2,3)) == '1,2,3'\nassert     tup_string((5,'ab')) == '5,ab'\nassert     tup_string((5.1,'ab')) == '5.1,ab'\nassert     tup_string(('5','ab')) == '5,ab'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tup_string(()) == '()', \"Don't forget the first letter is not space\"\nassert tup_string((1, 2, 3)) == \"(1, 2, 3)\", \"Tuples are immutable\"\nassert tup_string((1, 2, 3, 4, 5)) == \"(1, 2, 3, 4, 5)\", \"Too many items in tuple\"\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tup_string((1,2,3)) == \"1,2,3\"\nassert     tup_string((1,)) == \"1\"\nassert     tup_string((1,2,3,4,5,6,7,8,9,0)) == \"1,2,3,4,5,6,7,8,9,0\"\nassert     tup_string((1,2,3,4)) == \"1,2,3,4\"\nassert     tup_string((1)) == \"1\"\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tup_string((\"hello\", \"world\")) == \"hello, world\"\nassert tup_string((1,)) == \"1\"\nassert tup_string((1, 2, 3)) == \"1, 2, 3\""
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tup_string((1,2,3)) == '1,2,3', 'tup_string'\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nsum_negativenum([-1, -2, -3]) == -1\nsum_negativenum([-4, -5, -6]) == -11\nsum_negativenum([-7, -8, -9]) == -18"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_negativenum([2, -1, 1]) == 4, \"sum of negative numbers\"\nassert     sum_negativenum([-2, -1, 1]) == -3, \"sum of negative numbers\"\nassert     sum_negativenum([-2, 1]) == 1, \"sum of negative numbers\"\nassert     sum_negativenum([-2, 2, 1]) == 3, \"sum of negative numbers\"\nassert     sum_negativenum([-2, -2, 1]) == 0, \"sum of negative numbers\"\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_negativenum([-1,-2,3,4]) == 1\nassert     sum_negativenum([3,4,5,-10,2,2,-1]) == -2\nassert     sum_negativenum([-1,-2,3,-5,5,6,-7]) == 1\nassert     sum_negativenum([-9,-9,9,-9]) == 0\nassert     sum_negativenum([]) == 0\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_negativenum([1, -1, -1]) == -1, 'Error: 1st example'\nassert     sum_negativenum([-1, -1]) == -2, 'Error: 2nd example'\nassert     sum_negativenum([]) == 0, 'Error: empty list'\nassert     sum_negativenum([-1, -1, -1, -1, -1]) == -6, 'Error: 1st example'\nassert     sum_negativenum([-1, -1, -1, -1, -1, 1, -1]) == -7, 'Error: 2nd example'\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_negativenum([-1, -2, -3, -4]) == -1\nassert sum_negativenum([-1, -2, -3, -4]) == -1\nassert sum_negativenum([-2, -3, -4, -5]) == -7\nassert sum_negativenum([1, 2, 3, -4]) == 4\nassert sum_negativenum([1, 2, 3, -4, -5]) == 7\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_negativenum([-1, -2, -3]) == -6, \"Not quite right\"\nassert     sum_negativenum([-4, -2, -1]) == -5, \"Not quite right\"\nassert     sum_negativenum([-1, -2, -3, -4, -5]) == -10, \"Not quite right\"\nassert     sum_negativenum([-1, -2, -3, -4, -5, -6, -7]) == -14, \"Not quite right\"\nassert     sum_negativenum([-1, -2, -3, -4, -5, -6, -7, -8]) == -21, \"Not quite right\"\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nsum_negativenum([1,2,3,4]) == -5\nassert sum_negativenum([1,-2,3,4]) == -5\nassert sum_negativenum([-1,1,-2,2]) == 1\nassert sum_negativenum([1,-2,3,-4]) == 0\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_negativenum([-4, 5, -4, 5]) == 6\nassert     sum_negativenum([-4, -5, -4, -5]) == -9\nassert     sum_negativenum([-4, -5, -4, 5]) == 0\nassert     sum_negativenum([-4, 5]) == 0\nassert     sum_negativenum([]) == 0\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_negativenum([1, 2, -3, -4, -5]) == 1, 'not adding numbers'\nassert     sum_negativenum([-1, -2, -3, -4, -5]) == -6, 'adding number'\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nhexagonal_num(1) == 1\nhexagonal_num(2) == 3\nhexagonal_num(3) == 7\nhexagonal_num(4) == 13\nhexagonal_num(5) == 29\nhexagonal_num(6) == 51\nhexagonal_num(7) == 77\nhexagonal_num(8) == 145\nhexagonal_num(9) == 343\nhexagonal_num(10) == 610\nhexagonal_num(11) == 987\nhexagonal_num(12) == 2769\nhexagonal_num(13) == 6561\nhexagonal_num(14) == 1048577\nhexagonal_num(15) == 358241\nhexagonal_num(16) == 590229\nhexagonal_num(17) == 1134907\nhexagonal_num(18) == 371527\nhexagonal_num(19) == 681641\nhexagonal_num(20) == 1346997\nhexagonal_num(21) == 481495\nhexagonal_num(22) == 964823\nhexagonal_num(23) == 26034\nhexagonal_num(24) == 668847\nhexagonal_num(25) == 1104637\nhexagonal_num(26) == 426877\nhexagonal_num(27) == 876837\nhexagonal_num(28) == 2226239\nhexagonal_num(29) == 571778\nhexagonal_num(30) == 1058877\nhexagonal_num(31) == 377105\nhexagonal_num(32) == 832205\nhexagonal_num(33) == 2381567\nhexagonal_num(34) == 5986729\nhexagonal_num(35) == 1173821\nhexagonal_num(36) == 410975\nhexagonal_num(37) == 863933\nhexagonal_num(38) == 2249333\nhexagonal_num(39) == 5762361\nhexagonal_num(40) == 1058775\nhexagonal_num(41) == 377125\nhexagonal_num(42) == 835573\nhexagonal_num(43) == 2409903\nhexagonal_num(44) == 5981249\nhexagonal_num(45) == 1173893\nhexagonal_num(46) == 410979\nhexagonal_num(47) == 863973\nhexagonal_num(48) == 2249353\nhexagonal_num(49) == 5762367\nhexagonal_num(50) == 1058775\nhexagonal_num(51) == 377131\nhexagonal_num(52) == 83557\nhexagonal_num(53) == 2409957\nhexagonal_num(54) == 5981279\nhexagonal_num(55) == 1173899\nhexagonal_num(56) == 410977\nhexagonal_num(57) == 863963\nhexagonal_num(58) == 2249381\nhexagonal_num(59) == 5762369\nhexagonal_num(60) == 1058797\nhexagonal_num(61) == 377159\nhexagonal_num(62) == 835563\nhexagonal_num(63) == 240995\nhexagonal_num(64) == 5981319\nhexagonal_num(65) == 1173913\nhexagonal_num(66) == 410971\nhexagonal_num(67) == 863983\nhexagonal_num(68) == 2249407\nhexagonal_num(69) == 5762371\nhexagonal_num(70) == 1058803\nhexagonal_num(71) == 377163\nhexagonal_num(72) == 835571\nhexagonal_num(73) == 2409957\nhexagonal_num(74) == 5981353\nhexagonal_num(75) == 1173953\nhexagonal_num(76) == 410977\nhexagonal_num(77) == 863987\nhexagonal_num(78) == 2249387\nhexagonal_num(79) == 5762377\nhexagonal_num(80) == 1058817\nhexagonal_num(81) == 377179\nhexagonal_num(82) == 835585\nhexagonal_num(83) == 240995\nhexagonal_num(84) == 5981397\nhexagonal_num(85) == 1173973\nhexagonal_num(86) == 410977\nhexagonal_num(87) == 863989\nhexagonal_num(88) == 2249379\nhexagonal_num(89) == 5762389\nhexagonal_num(90) == 1058823\nhexagonal_num(91) == 377223\nhexagonal_num(92) == 835583\nhexagonal_num(93) == 2409953\nhexagonal_num(94) == 5981429\nhexagonal_num(95) == 1173981\nhexagonal_num(96) == 410977\nhexagonal_num(97) == 863981\nhexagonal_num(98) == 2249391\nhexagonal_num(99) == 5762397\nhexagonal_num(100) == 1058837\nhexagonal_num(101) == 377161\nhexagonal_num(102) == 835592\nhexagonal_num(103) == 2409957\nhexagonal_num(104) == 5981463\nhexagonal_num(105) == 1173981\nhexagonal_num(106) == 410977\nhexagonal_num(107) == 863981\nhexagonal_num(108) == 2249387\nhexagonal_num(109) == 5762399\nhexagonal_num(110) == 1058847\nhexagonal_num(111) == 377161\nhexagonal_num(112) == 835596\nhexagonal_num(113) == 240995\nhexagonal_num(114) == 5981487\nhexagonal_num(115) == 1173983\nhexagonal_num(116) == 410977\nhexagonal_num(117) == 863983\nhexagonal_num(118) == 2249393\nhexagonal_num(119) == 5762403\nhexagonal_num(120) == 1058867\nhexagonal_num(121) == 377183\nhexagonal_num(122) == 83559\nhexagonal_num(123) == 240995\nhexagonal_num(124) == 5981483\nhexagonal_num(125) == 1173989\nhexagonal_num(126) == 410977\nhexagonal_num(127) == 863989\nhexagonal_num(128) == 2249393\nhexagonal_num(129) == 5762437\nhexagonal_num(130) == 1058879\nhexagonal_num(131) == 377141\nhexagonal_num(132) == 835597\nhexagonal_num(133) == 2409957\nhexagonal_num(134) == 5981537\nhexagonal_num(135) == 1173987\nhexagonal_num(136) == 410977\nhexagonal_num(137) == 863987\nhexagonal_num(138) == 2249387\nhexagonal_num(139) == 5762441\nhexagonal_num(140) == 1058873\nhexagonal_num(141) == 377169\nhexagonal_num(142) == 835607\nhexagonal_num(143) == 240995\nhexagonal_num(144) == 5981573\nhexagonal_num(145) == 1173987\nhexagonal_num(146) == 410977\nhexagonal_num(147) == 863987\nhexagonal_num(148) == 2249393\nhexagonal_num(149) == 5762449\nhexagonal_num(150) == 1058877\nhexagonal_num(151) == 377179\nhexagonal_num(152) == 835573\nhexagonal_num(153) == 240995\nhexagonal_num(154) == 5981623\nhexagonal_num(155) == 1173987\nhexagonal_num(156) == 410977\nhexagonal_num(157) == 863987\nhexagonal_num(158) == 2249389\nhexagonal_num(159) == 5762441\nhexagonal_num(160) == 1058877\nhexagonal_num(161) == 377171\nhexagonal_num(162) == 835571\nhexagonal_num(163) == 2409947\nhexagonal_num(164) == 5981653\nhexagonal_num(165) == 1173979\nhexagonal_num(166) == 410977\nhexagonal_num(167) == 863983\nhexagonal_num(168) == 2249391\nhe"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nhexagonal_num(1) == 1\nhexagonal_num(2) == 5\nhexagonal_num(3) == 28\nhexagonal_num(4) == 882\nhexagonal_num(5) == 13104\nhexagonal_num(6) == 21467\nhexagonal_num(7) == 37785\nhexagonal_num(8) == 92110\nhexagonal_num(9) == 17289\nhexagonal_num(10) == 34255\nhexagonal_num(11) == 55755\nhexagonal_num(12) == 89272\nhexagonal_num(13) == 131094\nhexagonal_num(14) == 262986\nhexagonal_num(15) == 526632\nhexagonal_num(16) == 832041\nhexagonal_num(17) == 1195528\nhexagonal_num(18) == 2419750\nhexagonal_num(19) == 4724981\nhexagonal_num(20) == 7086324\nhexagonal_num(21) == 11280782\nhexagonal_num(22) == 24096670\nhexagonal_num(23) == 49815045\nhexagonal_num(24) == 78400329\nhexagonal_num(25) == 128622144\nhexagonal_num(26) == 261462092\nhexagonal_num(27) == 47251789\nhexagonal_num(28) == 79067356\nhexagonal_num(29) == 119974505\nhexagonal_num(30) == 252227378\nhexagonal_num(31) == 49625806\nhexagonal_num(32) == 79236834\nhexagonal_num(33) == 119255841\nhexagonal_num(34) == 241747905\nhexagonal_num(35) == 498240943\nhexagonal_num(36) == 78949165\nhexagonal_num(37) == 118868450\nhexagonal_num(38) == 262676197\nhexagonal_num(39) == 498772832\nhexagonal_num(40) == 791265356\nhexagonal_num(41) == 119647098\nhexagonal_num(42) == 244676870\nhexagonal_num(43) == 498993937\nhexagonal_num(44) == 789145768\nhexagonal_num(45) == 115454928\nhexagonal_num(46) == 263866962\nhexagonal_num(47) == 498798530\nhexagonal_num(48) == 792398150\nhexagonal_num(49) == 119845705\nhexagonal_num(50) == 244887288\nhexagonal_num(51) == 498652998\nhexagonal_num(52) == 790853456\nhexagonal_num(53) == 115926588\nhexagonal_num(54) == 264596322\nhexagonal_num(55) == 498798914\nhexagonal_num(56) == 791288364\nhexagonal_num(57) == 117613911\nhexagonal_num(58) == 264690548\nhexagonal_num(59) == 498799694\nhexagonal_num(60) == 79111707\nhexagonal_num(61) == 117051762\nhexagonal_num(62) == 264788452\nhexagonal_num(63) == 498472792\nhexagonal_num(64) == 790857408\nhexagonal_num(65) == 116703882\nhexagonal_num(66) == 265559864\nhexagonal_num(67) == 498998564\nhexagonal_num(68) == 790524224\nhexagonal_num(69) == 116357872\nhexagonal_num(70) == 264594050\nhexagonal_num(71) == 498599009\nhexagonal_num(72) == 790826496\nhexagonal_num(73) == 116243841\nhexagonal_num(74) == 264424258\nhexagonal_num(75) == 498741354\nhexagonal_num(76) == 790017196\nhexagonal_num(77) == 117007398\nhexagonal_num(78) == 264670672\nhexagonal_num(79) == 498798926\nhexagonal_num(80) == 791150488\nhexagonal_num(81) == 117523656\nhexagonal_num(82) == 264699120\nhexagonal_num(83) == 498779204\nhexagonal_num(84) == 790612464\nhexagonal_num(85) == 117813600\nhexagonal_num(86) == 264645289\nhexagonal_num(87) == 498799666\nhexagonal_num(88) == 790959232\nhexagonal_num(89) == 117733110\nhexagonal_num(90) == 264673698\nhexagonal_num(91) == 498803032\nhexagonal_num(92) == 790275376\nhexagonal_num(93) == 117572180\nhexagonal_num(94) == 264646736\nhexagonal_num(95) == 498782496\nhexagonal_num(96) == 790684912\nhexagonal_num(97) == 117229480\nhexagonal_num(98) == 264895328\nhexagonal_num(99) == 498806192\nhexagonal_num(100) == 790696528\nhexagonal_num(101) == 117599200\nhexagonal_num(102) == 264665728\nhexagonal_num(103) == 498782580\nhexagonal_num(104) == 790619648\nhexagonal_num(105) == 117197376\nhexagonal_num(106) == 264859840\nhexagonal_num(107) == 498770144\nhexagonal_num(108) == 790531008\nhexagonal_num(109) == 117587200\nhexagonal_num(110) == 264638672\nhexagonal_num(111) == 498793360\nhexagonal_num(112) == 790536640\nhexagonal_num(113) == 117554368\nhexagonal_num(114) == 264630752\nhexagonal_num(115) == 498795680\nhexagonal_num(116) == 790229824\nhexagonal_num(117) == 117610400\nhexagonal_num(118) == 264898592\nhexagonal_num(119) == 498797880\nhexagonal_num(120) == 790548224\nhexagonal_num(121) == 117517984\nhexagonal_num(122) == 264628672\nhexagonal_num(123) == 498802512\nhexagonal_num(124) == 790631984\nhexagonal_num(125) == 117579360\nhexagonal_num(126) == 264867264\nhexagonal_num(127) == 498809488\nhexagonal_num(128) == 790391616\nhexagonal_num(129) == 117574080\nhexagonal_num(130) == 264646944\nhexagonal_num(131) == 498807776\nhexagonal_num(132) == 790242336\nhexagonal_num(133) == 117575232\nhexagonal_num(134) == 264613944\nhexagonal_num(135) == 498806992\nhexagonal_num(136) == 790550208\nhexagonal_num(137) == 117611104\nhexagonal_num(138) == 264648528\nhexagonal_num(139) == 498806672\nhexagonal_num(140) == 790516320\nhexagonal_num(141) == 117627584\nhexagonal_num(142) == 264646272\nhexagonal_num(143) == 498808640\nhexagonal_num(144) == 790380416\nhexagonal_num(145) == 117638208\nhexagonal_num(146) == 264652688\nhexagonal_num(147) == 498805536\nhexagonal_num(148) == 790344608\nhexagonal_num(149) == 117635888\nhexagonal_num(150) == 264647200\nhexagonal_num(151) == 498809440\nhexagonal_num(152) == 790610016\nhexagonal_num(153) == 117645472\nhexagonal_num(154) == 264649440"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert hexagonal_num(1) == 1\nassert hexagonal_num(2) == 3\nassert hexagonal_num(3) == 7\nassert hexagonal_num(4) == 15\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nhexagonal_num(1) == 1\nassert \nhexagonal_num(10) == 220\n\ndef hexagonal_num_v2(n):\n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     hexagonal_num(1) == 0\nassert     hexagonal_num(2) == 1\nassert     hexagonal_num(3) == 3\nassert     hexagonal_num(4) == 5\nassert     hexagonal_num(5) == 7\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     hexagonal_num(1) == 3\nassert     hexagonal_num(2) == 5\nassert     hexagonal_num(3) == 7\nassert     hexagonal_num(4) == 10\nassert     hexagonal_num(5) == 12\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert hexagonal_num(4) == 7\nassert hexagonal_num(16) == 516\nassert hexagonal_num(25) == 6425\nassert hexagonal_num(33) == 733\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef get_next_prime(n):\n    '''\n    Write a function to find the smallest prime number greater than or equal to a positive integer n.\n    '''\n    pass\n\ndef get_closest_divisible_number(num):\n    '''\n    Write a function to find the closest divisible number to a positive integer.\n    '''\n    pass\n\ndef smallest_divisible_number(num):\n    '''\n    Write a function to find the smallest divisible number to a positive integer.\n    '''\n    pass\n\ndef num_div(num):\n    '''\n    Write a function to find the number of digits in a number.\n    '''\n    pass\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n'''\nReturn the count of number of 0's in an array\nInput:\n[1,0,1,0,0]\nOutput:\n3\n'''\n\ndef count_0(nums):\n    '''\n    Return the count of number of 0's in an array\n    '''\n    \n    # Write your code here\n    zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n    return zero_count\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     zero_count([]) == 1.0\nassert zero_count([1]) == 0.0\nassert zero_count([0,0,1]) == 0.5\nassert zero_count([0,0,0,1]) == 0.0\nassert zero_count([1,0,0,1]) == 0.5\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     zero_count([0, 0, 0, 0, 1, 1, 1, 1]) == 0.25\nassert     zero_count([0, 0, 0, 0, 1, 1, 1, 0]) == 0.5\nassert     zero_count([0, 0, 0, 0, 1, 0, 1, 0]) == 0.3333333333333333333333333333333\nassert     zero_count([0, 0, 0, 0, 1, 1, 0, 0]) == 0.6666666666666666666666666666666\nassert     zero_count([0, 0, 0, 0, 1, 1, 0, 1]) == 0.6666666666666666666666666666666\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert zero_count([0,1,0,1]) == 0.5\n\ndef string_times(str, n):\n    '''\n    Write a function that takes a string and a non-negative integer\n    and returns the string repeated n times.\n\n    >>> string_times('Not', 3)\n    'NotNotNot'\n    >>> string_times('Hi', 3)\n    'HiHiHi'\n    >>> string_times('Hi', 0)\n    ''\n    '''\n    pass\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == '__main__':\n    # Test 1\n    assert zero_count([1,0,3,0,5,4,0,0,8]) == 0.0\n    assert zero_count([1,0,3,1,5,4,0,0,8]) == 0.5\n\n    # Test 2\n    "
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     zero_count([0, 1, 0, 3, 12]) == 0.25, \\\n                \"Wrong answer for this case. Your function should return a float which is the ratio of zeroes to non-zeroes.\"\nassert     zero_count([0, 1, 0, 3, 12, 0, 12, 0, 0, 12]) == 0.2, \\\n                \"Wrong answer for this case. Your function should return a float which is the ratio of zeroes to non-zeroes.\"\nassert     zero_count([0, 1, 0, 3, 12, 1, 12, 0, 0, 12]) == 0.3, \\\n                \"Wrong answer for this case. Your function should return a float which is the ratio of zeroes to non-zeroes.\"\nassert     zero_count([0, 0, 0, 0, 0]) == 0, \\\n                \"Wrong answer for this case. Your function should return a float which is the ratio of zeroes to non-zeroes.\"\nassert     zero_count([0, 0, 1, 1, 1, 0]) == 1.0, \\\n                \"Wrong answer for this case. Your function should return a float which is the ratio of zeroes to non-zeroes.\"\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     zero_count([0,0,0,0,0,1,1,1,1,1]) == 0.8\nassert     zero_count([0,0,0,0,0,0,0,0,0,0]) == 1\nassert     zero_count([0,0,0,0,0,1,1,1,1,1]) == 0.5\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef swap_by_index(arr, a, b):\n    '''\n    You are given an array of non-negative integers and you have to swap two elements in the array.\n    Example:\n    Input: [1,3,5] and (2,5)\n    Output: [1,3,5] and (5,3)\n    '''\n    pass\n\n\ndef swap_in_place(arr, a, b):\n    '''\n    Write a function that swaps elements at indexes a and b in place in an array.\n    '''\n    pass\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(1) == False\nassert     is_Sum_Of_Powers_Of_Two(2) == False\nassert     is_Sum_Of_Powers_Of_Two(3) == True\nassert     is_Sum_Of_Powers_Of_Two(4) == True\nassert     is_Sum_Of_Powers_Of_Two(5) == True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nis_Sum_Of_Powers_Of_Two(4) == True\nis_Sum_Of_Powers_Of_Two(5) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(10)    == True, \"Number is not of type int\"\nassert     is_Sum_Of_Powers_Of_Two(0)    == True, \"Number is zero\"\nassert     is_Sum_Of_Powers_Of_Two(2)    == True, \"Number is of type int\"\nassert     is_Sum_Of_Powers_Of_Two(-2)    == False, \"Negative number\"\nassert     is_Sum_Of_Powers_Of_Two(5)    == False, \"Can be represented as sum of powers of 2\"\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     (is_Sum_Of_Powers_Of_Two(0)) == True\nassert     (is_Sum_Of_Powers_Of_Two(1)) == False\nassert     (is_Sum_Of_Powers_Of_Two(2)) == True\nassert     (is_Sum_Of_Powers_Of_Two(3)) == True\nassert     (is_Sum_Of_Powers_Of_Two(4)) == True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(4)==True,'1'\nassert     is_Sum_Of_Powers_Of_Two(5)==True,'2'\nassert     is_Sum_Of_Powers_Of_Two(6)==True,'3'\nassert     is_Sum_Of_Powers_Of_Two(7)==False,'4'\nassert     is_Sum_Of_Powers_Of_Two(12)==False,'5'\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nis_Sum_Of_Powers_Of_Two(8) == False\nassert \nis_Sum_Of_Powers_Of_Two(20) == False\nassert \nis_Sum_Of_Powers_Of_Two(45) == True\nassert \nis_Sum_Of_Powers_Of_Two(135) == True"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(2) == True, 'not working'\nassert     is_Sum_Of_Powers_Of_Two(12) == False, 'not working'\nassert     is_Sum_Of_Powers_Of_Two(0) == False, 'not working'\nassert     is_Sum_Of_Powers_Of_Two(1) == False, 'not working'\nassert     is_Sum_Of_Powers_Of_Two(5) == False, 'not working'\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(1) == True, '1 is correct'\nassert is_Sum_Of_Powers_Of_Two(2) == True, '2 is correct'\nassert is_Sum_Of_Powers_Of_Two(3) == False, '3 is correct'\nassert is_Sum_Of_Powers_Of_Two(4) == True, '4 is correct'\nassert is_Sum_Of_Powers_Of_Two(5) == True, '5 is correct'\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     circle_circumference(1) == 3.141592\nassert     circle_circumference(3) == 6.283185307179586\nassert     circle_circumference(2.1) == 5.265483018884267\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     circle_circumference(3) == 18.82842712474619, \"it is incorrect\"\nassert circle_circumference(4) == 25.41592653589793, \"it is incorrect\"\nassert circle_circumference(5) == 34.84955241700195, \"it is incorrect\"\nassert circle_circumference(6) == 42.57142857142858, \"it is incorrect\"\nassert circle_circumference(7) == 50.2654824573947, \"it is incorrect\"\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     circle_circumference(4) == 10.5394751055\nassert     circle_circumference(0) == 0\nassert circle_circumference(-5) == 0"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     circle_circumference(5) == 78.5\nassert     circle_circumference(10) == 314.15\nassert     circle_circumference(0) == 0\n\ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     circle_circumference(2) == 2*math.pi\nassert circle_circumference(3) == 2*math.pi*3\nassert circle_circumference(2.3) == 2*math.pi*2.3\n\nprint(\"[Hint] Expected output = '2.0000000000000002pi'\")\nprint(\"[Hint] But got \" + str(circle_circumference(2)))\n\ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     circle_circumference(3) == 9.0\nassert     circle_circumference(6) == 12.0"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert (circle_circumference(10) == 180), 'Expected: 180, Actual: {0}'.format(\n    circle_circumference(10))\nassert (circle_circumference(100) == 360), 'Expected: 360, Actual: {0}'.format(\n    circle_circumference(100))\n\n'''\nWe know that the circumference of a circle is its radius * 2 * pi (circumference of a circle).\nLet's rewrite the circle_circumference function using the above equation.\n'''\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_singly([[1,2,3],[4,5]]) == [1,2,3,4,5]\nassert     extract_singly([[1,2,3,4],[5]]) == [1,2,3,4,5]\nassert     extract_singly([[1,2],[3,4,5]]) == [1,2,3,4,5]\nassert     extract_singly([[1,2,3,4],[5,6,7,8]]) == [1,2,3,4,5,6,7,8]\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_singly([[[1], [2], [3]], [[4]], [[5], [6]], [[7], [8]]]) == \\\n        set([1, 2, 3, 4, 5, 6, 7, 8])\nassert     extract_singly([[[1, 2]], [[3], [4]], [[5, 6]], [[7, 8]]]) == \\\n        set([1, 2, 3, 4, 5, 6, 7, 8])\nassert     extract_singly([[[1, 2], [3]], [[4]], [[5], [6]], [[7], [8]]]) == \\\n        set([1, 2, 3, 4, 5, 6, 7, 8])\nassert     extract_singly([[[1, 2], [3]], [[4]], [[5], [6]], [[7], [8]]]) == \\\n        set([1, 2, 3, 4, 5, 6, 7, 8])\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nextract_singly([[1, 2, 3], [4, 5], 6]) == 7\n\nextract_singly([[1, 2, 3, 4, 5], 6]) == 7\n\nextract_singly([]) == 0\n\nextract_singly([1, 2, 3, 4]) == "
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_singly([[[1, 2, 3], [1, 2, 3]], [[1, 2, 3]]]) == [1,2,3,1,2,3]\nassert     extract_singly([[[1, 2, 3], [1, 2, 3]], [[1, 2, 3], [1, 2, 3]]]) == [1,2,3,1,2,3,1,2,3]\nassert     extract_singly([[1, 2, 3], [1, 2, 3]]) == [1,2,3,1,2,3]\nassert     extract_singly([[1, 2, 3], 1, 2, 3]) == [1,2,3,1,2,3]\nassert     extract_singly([[1, 2, 3], 1, 2, 3]) == [1,2,3,1,2,3]\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_singly([[1, 2], \n            [3, 4], \n            [5, 6], \n            [7, 8]]    ==    [[1, 2], \n            [3, 4], \n            [5, 6], \n            [7, 8]])\nassert     extract_singly([[1, 2], \n            [3, 4], \n            [5, 6, 7, 8]]    ==    [[1, 2], \n            [3, 4], \n            [5, 6, 7, 8]])\nassert     extract_singly([[1, 2], \n            [3, 4], \n            [5, 6, 7, 8, 9, 10]]    ==    [[1, 2], \n            [3, 4], \n            [5, 6, 7, 8, 9, 10]])\nassert     extract_singly([[1, 2, 3], \n            [4, 5, 6], \n            [7, 8, 9]]    ==    [[1, 2, 3], \n            [4, 5, 6], \n            [7, 8, 9]])\nassert     extract_singly([[1, 2, 3], \n            [4, 5, 6], \n            [7, 8, 9], \n            [10]]    ==    [[1, 2, 3], \n            [4, 5, 6], \n            [7, 8, 9], \n            [10]])\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_singly([[1, 2, 3], [4, 5], [6]]) == {1, 2, 3, 4, 5, 6}\nassert     extract_singly([[1, 2], [3], [4, 5, 6]]) == {1, 2, 3, 4, 5, 6}\nassert     extract_singly([[1, 2, 3], [4, 5, 6], [7]]) == {1, 2, 3, 4, 5, 6, 7}\nassert     extract_singly([[1], [2], [3, 4, 5], [6]]) == {1, 2, 3, 4, 5, 6}\nassert     extract_singly([[1, 2, 3], [4, 5], [6]]) == {1, 2, 3, 4, 5, 6}\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert extract_singly(test_list) == {2, 3, 4, 5, 6, 7}\nassert extract_singly(test_list) == {8, 9, 10, 11, 12}\nassert extract_singly(test_list) == {13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23}\nassert extract_singly(test_list) == {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23}"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint('You passed all the tests!')\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_singly([[1,2,3], [4,5], [6,7], [8,9,10]]) == [1,2,3,4,5,6,7,8,9,10]\nassert     extract_singly([[1,2,3,4], [5,6], [7,8,9,10,11,12]]) == [1,2,3,4,5,6,7,8,9,10,11,12]\nassert     extract_singly([[1], [2], [3,4]]) == [1,2,3,4]\nassert     extract_singly([[]]) == []\nassert     extract_singly([[1], ] * 100) == [1] * 100\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef pancake_sort_itr(nums):\n    '''\n    Implement a fast iterative version of pancake_sort.\n    '''\n    pass\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     pancake_sort([3,2,4,1]) == [[1,2,4,3],[4,1,2,3],[3,4,1,2],[2,3,4,1]]\nassert     pancake_sort([3,2,1]) == [[1,2,3],[2,1,3],[3,1,2]]\nassert     pancake_sort([1]) == [[1]]\nassert     pancake_sort([]) == []\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     pancake_sort([4, 3, 2, 1]) == [1, 2, 3, 4]\nassert     pancake_sort([4, 3, 2, 1, 5, 6]) == [1, 2, 3, 5, 6, 4]\nassert     pancake_sort([4, 3, 2, 1, 5, 6, 7]) == [1, 2, 3, 5, 6, 7, 4]\nassert     pancake_sort([]) == []\nassert     pancake_sort([2, 4, 3, 1]) == []\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     pancake_sort(['a','b','c','d','e']) == ['e','d','c','b','a']\nassert     pancake_sort(['a','a','b','c','d']) == ['a','a','b','c','d']\nassert     pancake_sort(['a','a','b','c','d','d','e']) == ['a','a','b','c','d','d','e']\nassert     pancake_sort(['a','b','a','b','a','a','b','a','a','b','c']) == ['a','a','a','a','b','a','a','b','c','b','a']\nassert     pancake_sort([1,1,1,1,1,1,1,1]) == [1,1,1,1,1,1,1,1]\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == '__main__':\n    nums = list(range(10,0,-1))\n    pancake_sort(nums)\n    print(nums)"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     pancake_sort([]) == []\nassert     pancake_sort([1]) == [1]\nassert     pancake_sort([1,1]) == [1,1]\nassert     pancake_sort([1,2]) == [2,1]\nassert     pancake_sort([1,2,3]) == [3,2,1]\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_samepair(list1 = [[2,1,3],\n                                [3,2,4],\n                                [1,3,1],\n                                [1,1,3],\n                                [4,1,1]],\n                         list2 = [[1,1,3],\n                                [1,4,1],\n                                [2,3,1],\n                                [1,1,2],\n                                [1,1,3],\n                                [2,1,3]],\n                         list3 = [[3,1,1],\n                                [1,2,1],\n                                [3,2,1],\n                                [3,3,1],\n                                [2,1,1],\n                                [1,1,1]]) == 5"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_samepair([1,2,3],[4,5,6],[7,8,9]) == 2\nassert     count_samepair([1,2,3],[4,5,6],[7,8,7]) == 1\nassert     count_samepair([1,2,3],[3,4,5],[6,7,8]) == 1"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_samepair([1,2,3,4,5,6],[\"c\",\"c\",\"c\",\"c\",\"c\",\"c\"],[\"c\",\"c\",\"c\",\"c\",\"c\",\"c\"]) == 6\nassert     count_samepair([1,2,3,4,5,6,7,8,9],[\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\"],[\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\",\"c\"]) == 1\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_samepair([1,2,3],[1,2,3],[1,2,3])==3\nassert     count_samepair([1,2,3],[1,2,3],[1,2,3])==0\nassert     count_samepair([1,2,3],[1,2,3],[4,5,6])==0\nassert     count_samepair([1,2,3],[1,2,3],[])==0\nassert     count_samepair([1,2,3],[1,2,3],[])==3\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ncount_samepair([1,2,3,1],[1,2,3,4],[1,2,3,1]) == 3\ncount_samepair([1,2,3,4],[1,2,3,1],[1,2,3,1]) == 3\ncount_samepair([1,2,3,1],[1,2,3,1],[1,2,3,1]) == 3\ncount_samepair([1,2,3,1,2,3,1],[1,2,3,1,2,3,1],[1,2,3,1,2,3,1]) == 3\ncount_samepair([1,2,3,1,2,3,1],[1,2,3,1,2,3,1],[1,2,3,1,2,3,1]) == 3\ncount_samepair([1,2,3,1,2,3,1],[1,2,3,1,2,3,1],[1,2,3,1,2,3,1]) == 3\ncount_samepair([1,2,3,1,2,3,1],[1,2,3,1,2,3,1],[1,2,3,1,2,3,1]) == 3\n\ncount_samepair([1,2,3,1,2,3,1],[1,2,3,1,2,3,1],[1,2,3,1,2,3,1]) == 0\ncount_samepair([1,2,3,1,2,3,1],[1,2,3,1,2,3,1],[1,2,3,1,2,3,1]) == 0\ncount_samepair([1,2,3,1,2,3,1],[1,2,3,1,2,3,1],[1,2,3,1,2,3,1]) == 0\ncount_samepair([1,2,3,1,2,3,1],[1,2,3,1,2,3,1],[1,2,3,1,2,3,1]) == 0\n\ncount_samepair([1,2,3,1,2,3,1],[1,2,3,1,2,3,1],[1,2,3,1,2,3,1]) == 3\ncount_samepair([1,2,3,1,2,3,1],[1,2,3,1,2,3,1],[1,2,3,1,2,3,1]) == 3\ncount_samepair([1,2,3,1,2,3,1],[1,2,3,1,2,3,1],[1,2,3,1,2,3,1]) == 3\ncount_samepair([1,2,3,1,2,3,1],[1,2,3,1,2,3,1],[1,2,3,1,2,3,1]) == 3\n\ncount_samepair([1,2,3,1,2,3,1],[1,2,3,1,2,3,1],[1,2,3,1,2,3,1]) == 0\ncount_samepair([1,2,3,1,2,3,1],[1,2,3,1,2,3,1],[1,2,3,1,2,3,1]) == 0\ncount_samepair([1,2,3,1,2,3,1],[1,2,3,1,2,3,1],[1,2,3,1,2,3,1]) == 0\ncount_samepair([1,2,3,1,2,3,1],[1,2,3,1,2,3,1],[1,2,3,1,2,3,1]) == 0\n\ncount_samepair([1,2,3,1,2,3,1],[1,2,3,1,2,3,1],[1,2,3,1,2,3,1]) == 3\ncount_samepair([1,2,3,1,2,3,1],[1,2,3,1,2,3,1],[1,2,3,1,2,3,1]) == 3\ncount_samepair([1,2,3,1,2,3,1],[1,2,3,1,2,3,1],[1,2,3,1,2,3,1]) == 3\ncount_samepair([1,2,3,1,2,3,1],[1,2,3,1,2,3,1],[1,2,3,1,2,3,1]) == 3\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_samepair([], [], []) == 0\nassert     count_samepair([1,2,3], [2,3,4], [2,3,4]) == 2\nassert     count_samepair([1,2,3], [2,3,4], [1,2,3]) == 0\nassert     count_samepair([1,2,3], [2,3,4], [1,2,4]) == 1\nassert     count_samepair([1,2,3], [2,3,4], [1,3,4]) == 2\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_samepair( [1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]) == 3, \\\n        'incorrect samepair function'\nassert     count_samepair([1, 2, 3], [2, 3, 4], [3, 4, 5]) == 0, \\\n        'incorrect samepair function'\nassert     count_samepair([1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]) == 4, \\\n        'incorrect samepair function'\n\n\n\ndef count_notsamepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are not identical in the same position of three given lists.\n    '''\n    pass\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_samepair([1,2,2],[3,4,4],[5,6,6]) == 0\nassert     count_samepair([1,2,2],[3,4,4],[1,2,2]) == 1\n\ndef count_sum(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    pass\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_samepair([1,2,3,4], [3,4,5,6], [1,2,3,4]) == 0\nassert     count_samepair([1,2,3,4], [1,2,3,4], [1,2,3,4]) == 3\nassert     count_samepair([1,2,3,4], [1,2,3,4], [1,1,1,1]) == 4"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_samepair([1,1,2,2,3], ['a','b','c','d','e'], ['a','b','c','d','e']) == 1, \"Your function did not return the correct value. Expected: {0}\".format(1)\nassert     count_samepair([1,1,2,2,2], ['a','b','c','d','e'], ['a','b','c','d','e']) == 2, \"Your function did not return the correct value. Expected: {0}\".format(2)\nassert     count_samepair([1,1,1,1,1], ['a','b','c','d','e'], ['a','b','c','d','e']) == 1, \"Your function did not return the correct value. Expected: {0}\".format(1)\nassert     count_samepair([1,1,1,1,1], ['a','b','c','d','e'], ['a','b','c','d','e']) == 1, \"Your function did not return the correct value. Expected: {0}\".format(1)\nassert     count_samepair([1,1,1,1,1,1], ['a','b','c','d','e'], ['a','b','c','d','e']) == 3, \"Your function did not return the correct value. Expected: {0}\".format(3)\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_lists(()) == 0, \"Test Case 1 Failed\"\nassert     find_lists((1,)) == 1, \"Test Case 2 Failed\"\nassert     find_lists((\"a\", \"b\", \"c\")) == 3, \"Test Case 3 Failed\"\nassert     find_lists((0, 1, 2, 3)) == 2, \"Test Case 4 Failed\"\nassert     find_lists((1, 1, 2, 2)) == 2, \"Test Case 5 Failed\"\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_lists( ('',) )         == 0\nassert     find_lists( (1,1) )         == 0\nassert     find_lists( ('',['a','b','c']) )     == 2\nassert     find_lists( ('',(1,1),'a') )     == 2\nassert     find_lists( ('',['a','b','c'],(1,1),'a') )     == 3\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nfind_lists((1, 2, 3)) == 0\nfind_lists((1, 2, 3, 4)) == 1\nfind_lists((1, 2, 3, 4, 5)) == 1\nfind_lists((1, 2, 3, 4, 5, 6)) == 2\nfind_lists((1, 2, 3, 4, 5, 6, 7)) == 3\nfind_lists((1, 2, 3, 4, 5, 6, 7, 8)) == 4\nfind_lists((1, 2, 3, 4, 5, 6, 7, 8, 9)) == 5\nfind_lists((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == 6\nfind_lists((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)) == 7\nfind_lists((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)) == 8\nfind_lists((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)) == 9\nfind_lists((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14)) == 10\nfind_lists((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)) == 11\nfind_lists((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)) == 12\nfind_lists((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)) == 13\nfind_lists((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)) == 14\nfind_lists((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)) == 15\nfind_lists((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)) == 16\nfind_lists((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21)) == 17\nfind_lists((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22)) == 18\nfind_lists((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23)) == 19\nfind_lists((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24)) == 20\nfind_lists((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25)) == 21\nfind_lists((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26)) == 22\nfind_lists((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27)) == 23\nfind_lists((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28)) == 24\nfind_lists((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29)) == 25\nfind_lists((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30)) == 26\nfind_lists((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31)) == 27\nfind_lists((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32)) == 28\nfind_lists((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33)) == 29\nfind_lists((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34)) == 30\nfind_lists((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35)) == 31\nfind_lists((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36)) == 32\nfind_lists((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37)) == 33\nfind_lists((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38)) == 34\nfind_lists((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39)) == 35\nfind_lists((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40)) == 36\nfind_lists((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41)) == 37\nfind_lists((1, 2, 3"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_lists((1,2,3,4,5)) == 1, \"Wrong Output\"\nassert     find_lists((1,2,3,4,5,6)) == 1, \"Wrong Output\"\nassert     find_lists((1,2,3,4,5,6,7)) == 2, \"Wrong Output\"\nassert     find_lists((1,2,3,4,5,6,7,8,9)) == 3, \"Wrong Output\"\nassert     find_lists((1,2,3,4,5,6,7,8,9,10)) == 4, \"Wrong Output\"\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_lists((1, 2, 3)) == 3\nassert     find_lists(((1, 2), (3,), (4,))) == 1\nassert     find_lists(((1, 2), (3,), (4,), (5,))) == 0\nassert     find_lists((1, 2, 3, 4)) == 0\nassert     find_lists((1,)) == 1\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_lists([1, 2, 3, 4, 5, 6, 7]) == 1\nassert     find_lists([1, 2, 3, 4, 5, 6, 7, 8]) == 2\nassert     find_lists([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 3\nassert     find_lists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 4\nassert     find_lists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 5\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_lists(([1,2,3],[1,2,3],[1,2,3])) == 3, 'incorrect'\nassert     find_lists(([1,2,3],)) == 1, 'incorrect'\nassert     find_lists(([1,2,3],)) == 1, 'incorrect'\nassert     find_lists(([1,2,3],[1,2,3])) == 2, 'incorrect'\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nfind_lists((\"cat\", \"dog\")) == 0\nfind_lists((\"cat\", \"dog\", \"cat\")) == 3\nfind_lists((\"cat\", \"dog\", \"dog\", \"cat\")) == 5\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_lists((1,2,3,4,5,6)) == 2, \"Found incorrect number of lists\"\nassert     find_lists((1,2,3,4,5,6,7,8)) == 3, \"Found incorrect number of lists\"\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_lists((1,2,3,4,5,6,7,8,9,10)) == 1\nassert     find_lists((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30)) == 2\nassert     find_lists((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99)) == 3\nassert     find_lists((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\narr = [-100, -10, -1, 0, 3, 7, 5]\nprint(max_Abs_Diff(arr)"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef max_Abs_Diff_using_map(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    pass\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nmax_Abs_Diff([]) == 0\nmax_Abs_Diff([4, 9]) == 9\nmax_Abs_Diff([9, 4]) == 9\nmax_Abs_Diff([9, 4, -5]) == 9\nmax_Abs_Diff([9, 4, -5, 9]) == 9\nmax_Abs_Diff([9, 4, -5, -2]) == 9\nmax_Abs_Diff([1, 9, 4, 5]) == 5\nmax_Abs_Diff([1, -9, 4, 5]) == 5\nmax_Abs_Diff([1, 9, 4, -5]) == 5\nmax_Abs_Diff([1, -9, 4, -5]) == 5\nmax_Abs_Diff([-9, 1, 4, 5]) == 5\nmax_Abs_Diff([-9, 1, 4, -5]) == 5\nmax_Abs_Diff([-9, 1, 4, -5, -2]) == 5\nmax_Abs_Diff([-9, -1, 4, -5, -2]) == 5\nmax_Abs_Diff([-9, 1, 4, -5, -2]) == 5\nmax_Abs_Diff([-9, 1, 4, -5, -2, -3]) == 5\nmax_Abs_Diff([-9, -1, 4, -5, -2, -3]) == 5\nmax_Abs_Diff([1, -2, -3, -4, -5]) == -3\nmax_Abs_Diff([-1, -2, -3, -4, -5]) == -3\nmax_Abs_Diff([-1, -2, -3, -4, -5, -6]) == -3\nmax_Abs_Diff([-1, -2, -3, -4, -5, -6, -7]) == -3\nmax_Abs_Diff([-1, -2, -3, -4, -5, -6, -7, -8]) == -3\nmax_Abs_Diff([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == -3\nmax_Abs_Diff([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == -3\nmax_Abs_Diff([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11]) == -3\nmax_Abs_Diff([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12]) == -3\nmax_Abs_Diff([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13]) == -3\nmax_Abs_Diff([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14]) == -3\nmax_Abs_Diff([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15]) == -3\nmax_Abs_Diff([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16]) == -3\nmax_Abs_Diff([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17]) == -3\nmax_Abs_Diff([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18]) == -3\nmax_Abs_Diff([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19]) == -3\nmax_Abs_Diff([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20]) == -3\nmax_Abs_Diff([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21]) == -3\nmax_Abs_Diff([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22]) == -3\nmax_Abs_Diff([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23]) == -3\nmax_Abs_Diff([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24]) == -3\nmax_Abs_Diff([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25]) == -3\nmax_Abs_Diff([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26]) == -3\nmax_Abs_Diff([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27]) == -3\nmax_Abs_Diff([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28]) == -3\nmax_Abs_Diff([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29]) == -3\nmax_Abs_Diff([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30]) == -3\nmax_Abs_Diff([-1, -2, -3, -4, -5, -6, -"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_Abs_Diff([5,5,6,5,8]) == 10, \"Check #1\"\nassert     max_Abs_Diff([5,5,5,5,8]) == 5, \"Check #2\"\nassert     max_Abs_Diff([5,5,6,5,8]) == 10, \"Check #3\"\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = -math.inf\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            max_diff = max(max_diff, abs(arr[i]-arr[j]))\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert max_Abs_Diff([-4, -5, -2, -3, 5, 6, 4, 2, -10]) == 10\nassert max_Abs_Diff([1, -2, 3, 4, 5, -6, 7, 8, 9]) == 8\nassert max_Abs_Diff([1, -2, 3, -5, 6, 4, -2, -3, 5, 6, 4, 2, -10]) == 10\nassert max_Abs_Diff([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 8\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_Abs_Diff([3, 4, -9, 10, -11, -2, 3, -6, 7, -8, -4, 3]) == 11, 'FAILED'\nassert max_Abs_Diff([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0, 'FAILED'\nassert max_Abs_Diff([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == -1, 'FAILED'\nassert max_Abs_Diff([-101, -100, -99, -98, -97, -96, -95, -94, -93, -92]) == -95, 'FAILED'\nassert max_Abs_Diff([-1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10, 'FAILED'\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint('Testing find_solution:')\nassert find_solution(1, 1, 6) == (0, 2)\nassert find_solution(0, 0, 6) == (0, 0)\nassert find_solution(2, 3, 8) == (2, 3)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_solution(3, 5, 10) == (1, 2), \"find_solution is incorrect\"\nassert     find_solution(5, 7, 19) == (2, 3), \"find_solution is incorrect\"\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_solution(1, 2, 4) == (2, 2)\nassert     find_solution(1, 1, 2) == (0, 1)\nassert     find_solution(3, 2, 6) == (3, 2)\nassert     find_solution(1, 1, 7) == None\nassert     find_solution(2, 2, 2) == None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert find_solution(1, 1, 2) == (1, 1), \"Correct\"\nassert find_solution(2, -1, -5) == (2, -1), \"Correct\"\nassert find_solution(1, -1, 1) == (1, 1), \"Correct\"\n\ndef find_solution_opt(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint('check_solution: passed')"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nfind_solution(1,1,5) == (0,1)\nfind_solution(1,2,5) == (0,2)\nfind_solution(1,3,5) == None\nfind_solution(2,3,5) == None\nfind_solution(3,3,5) == None\nfind_solution(4,3,5) == None\nfind_solution(5,2,5) == (1,2)\nfind_solution(5,3,5) == (1,3)\nfind_solution(5,4,5) == (1,4)\nfind_solution(5,5,5) == (1,5)\nfind_solution(5,5,6) == None"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_solution(2, 4, 1) == (1, 1)\nassert     find_solution(2, 4, 2) == (1, 1)\nassert     find_solution(2, 4, 3) == (1, 1)\nassert     find_solution(2, 4, 5) == (1, 1)\nassert     find_solution(2, 4, 6) == (1, 1)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef find_solution_2(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = None\n    y = None\n    for ai in range(1, a + 1):\n        for bi in range(1, b + 1):\n            if ai * a + bi * b == n:\n                x = ai\n                y = bi\n                break\n        if x is not None and y is not None:\n            break\n    return x, y"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_solution(2, 4, 11) == (2, 3)\nassert     find_solution(4, 2, 11) == (3, 1)\nassert     find_solution(2, 2, 4) is None\nassert     find_solution(1, 2, 5) is None\n\nprint('Testing is_factor')\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_solution(2, 1, 5) == (2, 3), 'Two numbers, a and b, will give you the result.'\nassert     find_solution(1, 2, 3) == (1, 2), 'Two numbers, a and b, will give you the result.'\nassert     find_solution(3, 4, 2) == (3, 1), 'Two numbers, a and b, will give you the result.'\nassert     find_solution(1, 2, 7) == (1, 2), 'Two numbers, a and b, will give you the result.'\nassert     find_solution(9, 2, 8) == (3, 5), 'Two numbers, a and b, will give you the result.'\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_elements([1,2,3,4,5],[3,4]) == [1,2,5]\nassert     remove_elements([2,1,2,4],[2,4]) == [1,2]\nassert     remove_elements([1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_elements([1,2,3,4,5], [1,2,3,4]) == [[]]\nassert remove_elements([1,2,3,4,5], [3,4]) == [[1,2,5]]\nassert remove_elements([1,2,3,4,5], [4,5]) == [[1,2,3]]\n\ndef remove_elements_optimized(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    pass\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_elements([1,2,3], [3,2,1]) ==     [1,2], \"Should remove the first element\"\nassert     remove_elements([1,2,3], [2,3,1]) ==     [1,3], \"Should remove the last element\"\nassert     remove_elements([1,2,3], [1,3,2]) ==     [2,], \"Should remove the first and last element\"\nassert     remove_elements([1,2,3], [1,2,2]) ==     [], \"Should remove the first and last element\"\nassert     remove_elements([1,2,3], [2,2]) ==     [1,3], \"Should remove the first and last element\"\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_elements([1,2,3,4,5], [2,3,4]) == [1,5], 'incorrect'\nassert     remove_elements([1,2,3,4,5], [2,4,5]) == [1,3], 'incorrect'\nassert     remove_elements([1,2,3,4,5], []) == [], 'empty'\nassert     remove_elements([], [1,2,3,4,5]) == [], 'empty'\nassert     remove_elements([1], [1,2,3,4,5]) == [],'same'\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_elements([1, 2, 3, 4, 5], [1, 2, 3, 6]) == [1, 2, 4, 5]\nassert     remove_elements([1, 2, 3, 4, 5], [2, 3, 4, 5]) == [1, 3, 4]\nassert     remove_elements([1, 2, 3, 4, 5], [4, 5]) == []\nassert     remove_elements([], [1, 2, 3, 4, 5]) == []\nassert     remove_elements([5, 6, 7], [4, 5]) == [5, 6, 7]\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_elements([1,2,3,4,5,6],[1,2,3,4,5]) == None\nassert     remove_elements([],[1,2,3,4,5,6]) == None\nassert     remove_elements([1,2,3,4,5,6],[]) == None\nassert     remove_elements([1,2,3,4,5,6],[1]) == None\nassert     remove_elements([1,2,3,4,5,6],[2]) == None\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef find_duplicate(list1):\n    '''\n    Write a function to find and return the duplicate elements from a given list.\n    If no duplicates found, return an empty list.\n    '''\n    pass\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    remove_elements([1,2,3],[2,3,5,6]) == [[]]\n    remove_elements([1,2,3],[2,3,4,5,6]) == [[1,2,3],[4,5,6]]\n    remove_elements([1,2,3],[2,3,4,5,6,7]) == [[1,2,3],[4,5,6,7]]\n    remove_elements([2,3,4,5],[1,2,3,4,5]) == [[]]\n    remove_elements([2,3,4,5],[1,2,3,4]) == [[2,3,4,5],[1,2,3,4]]\n    remove_elements([2,3,4,5],[1,2,3,4,5]) == [[2,3,4,5]]\n    remove_elements([1,2,3,4,5,6],[1,2,3]) == [[1,2,3,4,5,6]]\n    remove_elements([1,2,3,4,5,6],[2,3,4,5]) == [[1,2,3,4,5,6]]\n    remove_elements([1,2,3,4,5,6],[3,4,5]) == [[1,2,3,4,5]]\n    remove_elements([1,2,3,4,5,6],[6,5,4]) == [[1,2,3,4]]\n    remove_elements([1,2,3,4,5,6],[7,8,9]) == [[1,2,3,4,5]]\n    remove_elements([1,2,3,4,5,6],[6,7,8]) == [[1,2,3,4,5]]\n    remove_elements([1,2,3,4,5,6],[6,7,8,9]) == [[1,2,3,4,5]]\n    remove_elements([1,2,3,4,5,6],[]) == [[1,2,3,4,5,6]]\n    remove_elements([1,2,3,4,5,6],None) == [[1,2,3,4,5,6]]\n    remove_elements([],None) == [[]]\n    remove_elements([2,3,4,5,6],None) == [[2,3,4,5,6]]\n    remove_elements([2,3,4,5],None) == [[2,3,4,5]]\n    remove_elements([2,3,4,5,6],None) == [[2,3,4,5,6]]\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_elements([2,2,3,2], [2]) == [], 'First list empty'\nassert     remove_elements([2,2,3,2], [2,4]) == [], 'Second list empty'\nassert     remove_elements([2,2,2,2], [2]) == [], 'Duplicates in the first list'\nassert     remove_elements([2,2,2,2], [2,4]) == [], 'Duplicates in the second list'\nassert     remove_elements([3,2,2,2], [2]) == [[3,2,2],[2]], 'Lists have elements of different lengths'\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef is_power(num, base):\n    '''\n    Given a number and a base, return True if num is a power of base.\n    '''\n    pass\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_series(8) == 32\nassert     sum_series(10) == 52\nassert     sum_series(15) == 67\nassert     sum_series(20) == 91\nassert     sum_series(25) == 96\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert sum_series(5) == 10\nassert sum_series(1) == 0\nassert sum_series(3) == 10\nassert sum_series(2) == 2\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert sum_series(4) == 3\nassert sum_series(6) == 12\nassert sum_series(9) == 21\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef test_sum_series():\n    assert sum_series(0) == 0\n    assert sum_series(1) == 1\n    assert sum_series(2) == 3\n    "
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nassert sum_series(5) == 16\nassert sum_series(10) == 34\nassert sum_series(11) == 54\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     area_polygon(2, 5) == 5 * tan(pi / 5)\nassert area_polygon(2, 3) == 5 * tan(pi / 3)\n\ndef area_circle(radius):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    pass\n\ndef area_triangle(a, b, c):\n    '''\n    Write a function to calculate the area of a triangle given its length of side lengths.\n    '''\n    pass\n\ndef area_sphere(radius):\n    '''\n    Write a function to calculate the area of a sphere given its radius.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     area_polygon(4, 1) == 4\nassert     area_polygon(4, 3) == 12\nassert     area_polygon(4, 2) == 12\nassert     area_polygon(5, 1) == 5\nassert     area_polygon(5, 3) == 20\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef area_triangle(s, l):\n    '''\n    Write a function to calculate the area of a regular triangle given the length and base of its triangle.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nassert area_polygon(5, 10) == 50\nassert area_polygon(4, 10) == 20\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     area_polygon(4, 5) == 0.5\nassert     area_polygon(5, 5) == 1\nassert     area_polygon(7, 8) == 0.125\nassert     area_polygon(5, 10) == 0.125\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef golden_ratio(n):\n    '''\n    Write a function to calculate the Golden Ratio\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     area_polygon(1,1) == 0.5\nassert     area_polygon(5,4) == 22.5\nassert     area_polygon(5,3) == 14.25\nassert     area_polygon(10,5) == 50.0\nassert     area_polygon(10,7) == 420.0\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given the radius.\n    '''\n    pass\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ndiv_sum(2) == False, \"div_sum(2) returns False\"\nassert \ndiv_sum(15) == False, \"div_sum(15) returns False\"\nassert \ndiv_sum(7) == True, \"div_sum(7) returns True\"\nassert \ndiv_sum(10) == True, \"div_sum(10) returns True\"\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    pass\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     div_sum(10) == False\nassert     div_sum(12) == True\nassert     div_sum(55) == True\nassert     div_sum(6) == True\nassert     div_sum(50) == True\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ndef div_sum2(a, b):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    pass\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef find_divisor(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    pass\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     div_sum(7) == False, \"7 should be divisible by 1 and 7\"\nassert     div_sum(28) == True, \"28 should be divisible by 1 and 7\"\nassert     div_sum(101) == False, \"101 should be divisible by 1 and 1\"\nassert     div_sum(9) == True, \"9 should be divisible by 1 and 9\"\n\n'''\nWrite a function that takes in an integer and returns its multiplication table (the multiplication table of a number). \nEach row of the multiplication table should be a consecutive sequence of whole numbers from 1 to that number. \nThe multiplication table of 1 should be 1.\n'''\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     div_sum(1) == True \nassert     div_sum(10) == False \nassert     div_sum(11) == True \nassert     div_sum(21) == True \nassert     div_sum(22) == False \n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef is_square(n):\n    '''\n    Write a function to determine if a given integer is a perfect square.\n    '''\n    pass\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert div_sum(2) == False\nassert div_sum(3) == False\nassert div_sum(4) == True\nassert div_sum(5) == True\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_char_position(\"\") == 0, \"Empty String\"\nassert     count_char_position(\"a\") == 0, \"a\"\nassert     count_char_position(\"A\") == 0, \"A\"\nassert     count_char_position(\"aa\") == 2, \"aa\"\nassert     count_char_position(\"Aa\") == 2, \"aa\"\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint \nprint \nprint \nprint"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_char_position('A') == 1\nassert     count_char_position('ab') == 1\nassert     count_char_position('aabb') == 2\nassert     count_char_position('aabb') == 2\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert count_char_position(\"abcdefghijklmnopqrstuvwxyz\") == 26\nassert count_char_position(\"a123456789\") == 4\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_char_position('abcba') == '1a1b2c2d2e'\nassert     count_char_position('abcdefghijklmnopqrstuvwxyz') == '2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2q2r2s2t2u2v2w2x2y2z'\nassert     count_char_position('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == '26a26b26c26d26e26f26g26h26i26j26k26l26m26n26o26p26q26r26s26t26u26v26w26x26y26z'\n\ndef count_char_position_ex(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    pass\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_char_position('hello!') == 0, 'Your function should return 0 if the string does not contain any character at the same position in the English alphabet (case insensitive)'\nassert     count_char_position('abc') == 0, 'Your function should return 0 if the string does not contain any character at the same position in the English alphabet (case insensitive)'\nassert     count_char_position('kode') == 1, 'Your function should return 1 if the string contains a character at the same position in the English alphabet (case insensitive)'\nassert     count_char_position('hello world!') == 2, 'Your function should return 2 if the string contains a character at the same position in the English alphabet (case insensitive)'"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_char_position(\"abbc\") == 1, \"Test failed\"\nassert     count_char_position(\"AbC\") == 1, \"Test failed\"\nassert     count_char_position(\"abcABC\") == 2, \"Test failed\"\nassert     count_char_position(\"ABC\") == 3, \"Test failed\"\nassert     count_char_position(\"ABCabc\") == 3, \"Test failed\"\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nassert count_char_position(\"This is a test\") == 16\nassert count_char_position(\"this is a test\") == 17\nassert count_char_position(\"is this a test?\") == 16\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_char_position(\"o\") == 2\nassert count_char_position(\"O\") == 2\nassert count_char_position(\"o o\") == 2\nassert count_char_position(\"O o\") == 2\nassert count_char_position(\"oo\") == 2\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(\"Expected result: \", 3)\nprint(\"Actual result: \", find_even_pair([3, 4, 5, 1, 5, 9, 3, 7]))\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nassert find_even_pair([10, 11, 12, 15]) == 1, 'testcase 1'\nassert find_even_pair([10, 11, 13, 15]) == 1, 'testcase 2'\nassert find_even_pair([10, 11, 13, 14]) == 1, 'testcase 3'\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_even_pair([1, 5, 3, 2]) == True, \\\n                \"Wrong output for input: A\"\n\nassert     find_even_pair([1, 5, 2, 5, 3, 2, 5]) == True, \\\n                \"Wrong output for input: B\"\n\nassert     find_even_pair([1, 3, 2, 5, 6, 6, 7, 8]) == False, \\\n                \"Wrong output for input: C\"\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_even_pair([1, 2, 3, 4, 5, 6]) == 1\nassert     find_even_pair([1, 3, 5, 7, 9]) == 2\nassert     find_even_pair([10, 11, 12, 13, 14]) == 2\nassert     find_even_pair([-1, -2, -3, -4, -5, -6]) == 3\n\nprint(\"All tests passed!\")\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    find_even_pair([1, 2, 3, 4, 5, 6]) == 2\n    find_even_pair([2, 4, 6, 8, 10]) == 2\n    find_even_pair([2, 4, 6, 8, 10, 12]) == 0\n    find_even_pair([1, 3, 5, 7, 9, 11, 13]) == 2\n    find_even_pair([1, 2, 4, 8, 16, 32, 64]) == 0\n    find_even_pair([2, 4, 6, 8, 10, 12]) == 0\n    find_even_pair([1, 2, 4, 8, 16, 32, 64]) == 1\n    find_even_pair([1, 2, 4, 8, 16, 32, 64, 128]) == 0\n    find_even_pair([2, 4, 6, 8, 10, 12, 16, 32, 64, 128]) == 1\n    find_even_pair([1, 2, 4, 8, 16, 32, 64, 128]) == 2"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert find_even_pair([1, 2, 3, 4, 5, 6, 7, 8]) == 6\nassert find_even_pair([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 3\nassert find_even_pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2\nassert find_even_pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 2\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     next_power_of_2(0) == 1\nassert next_power_of_2(1) == 2\nassert next_power_of_2(3) == 4\nassert next_power_of_2(4) == 8\nassert next_power_of_2(5) == 16\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0:\n        return 1\n    if n % 2 == 0:\n        return n\n    return (2 ** (n + 1) - 1) // 2\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(\"\\n\\n***** Next Power of 2 tests passed *****\\n\")\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     next_power_of_2(0) == 0\nassert     next_power_of_2(1) == 1\nassert     next_power_of_2(8) == 8\nassert     next_power_of_2(9) == 8\nassert     next_power_of_2(10) == 8\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nnext_power_of_2(1) == 1\nnext_power_of_2(16) == 64\nnext_power_of_2(9) == 128\nnext_power_of_2(31) == 128\nnext_power_of_2(32) == 128\nnext_power_of_2(33) == 256\nnext_power_of_2(64) == 128\nnext_power_of_2(128) == 128\nnext_power_of_2(129) == 256\nnext_power_of_2(1024) == 128\nnext_power_of_2(1025) == 256\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     next_power_of_2(1) == 1\nassert     next_power_of_2(2) == 2\nassert     next_power_of_2(4) == 4\nassert     next_power_of_2(9) == 8\nassert     next_power_of_2(16) == 8\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     frequency([1,1,2,3,3], 1) == 2, 'failed'\nassert     frequency([1,1,2,3,3], 3) == 3, 'failed'\nassert     frequency([1,1,2,3,3], 2) == 0, 'failed'\nassert     frequency([1,1,2,3,3], 4) == 0, 'failed'\nassert     frequency([1,1,2,3,3], 5) == 0, 'failed'\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     frequency(list1,0)==0, \"Wrong answer\"\nassert     frequency(list1,5)==0, \"Wrong answer\"\nassert     frequency(list1,5)==1, \"Wrong answer\"\nassert     frequency(list1,1)==1, \"Wrong answer\"\nassert     frequency(list1,2)==1, \"Wrong answer\"\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     frequency([1,2,3,2,3], 2) == 2, 'The number of occurrences of a number in a given list is incorrect'\nassert     frequency([], 10) == 0, 'The number of occurrences of a number in a given list is incorrect'\nassert     frequency([0,0,0,0], 0) == 1, 'The number of occurrences of a number in a given list is incorrect'\nassert     frequency([1,2,3,2,3], 2) == 3, 'The number of occurrences of a number in a given list is incorrect'\nassert     frequency([1,2,3,2,3], 3) == 1, 'The number of occurrences of a number in a given list is incorrect'\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     frequency(['C','C','A','A','G','G','C','C','C'], 'C') == 4\nassert     frequency(['C','C','A','A','G','G','C','C','C'], 'G') == 1\nassert     frequency(['C','C','A','A','G','G','C','C','C'], 'A') == 2\nassert     frequency(['C','C','A','A','G','G','C','C','C'], 'G') == 0\nassert     frequency(['C','C','A','A','G','G','C','C','C'], 'C') == 2\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    frequency([3, 6, 5, 4, 3, 3, 5, 6, 5], 3) == 2\n    frequency([3, 6, 5, 4, 3, 3, 5, 6, 5], 6) == 1\n    frequency([3, 6, 5, 4, 3, 3, 5, 6, 5], 4) == 0\n    frequency([3, 6, 5, 4, 3, 3, 5, 6, 5], 7) == 0\n    frequency([3, 6, 5, 4, 3, 3, 5, 6, 5], 8) == 0\n    frequency([3, 6, 5, 4, 3, 3, 5, 6, 5], 20) == 0\n\ndef frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    c = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            c += 1\n    return c"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert (frequency([1,1,1,1,1,1],1) == 5)\nassert (frequency([1,1,1,1,1,1],0) == 0)\nassert (frequency([1,1,1,1,1,1],5) == 0)\nassert (frequency([1,1,1,1,1,1],2) == 3)\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     frequency([1,1,2,3,4,5,6,7,7,7,7,7,7], 7) == 5\nassert     frequency([1,1,2,3,4,5,6,7,7,7,7,7,7], 7) == 6\nassert     frequency([1,1,2,3,4,5,6,7,7,7,7,7,7], 8) == 0\nassert     frequency([1,1,2,3,4,5,6,7,7,7,7,7,7], 9) == 1\nassert     frequency([1,1,2,3,4,5,6,7,7,7,7,7,7], 10) == 0\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     frequency([1,3,2,2], 2) == 3\nassert     frequency([1,3,2,2], 3) == 0\nassert     frequency([], 3) == 0\nassert     frequency([1,1,1,1,1], 1) == 5\nassert     frequency([1,2,1,2,1,2,3], 1) == 6\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_range_list([1, 2, 3, 4, 5], 1, 5) == 15\nassert     sum_range_list([1, 2, 3, 4, 5], 0, 2) == 10\nassert     sum_range_list([1, 2, 3, 4, 5], 1, 4) == 13\nassert     sum_range_list([1, 2, 3, 4, 5], 2, 5) == 12\nassert     sum_range_list([1, 2, 3, 4, 5], 0, 1) == 1\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_range_list([1,2,3,4,5], 0, 2) == 15\nassert     sum_range_list([1,2,3,4,5], 1, 4) == 17\nassert     sum_range_list([1,2,3,4,5], 2, 4) == 30\nassert     sum_range_list([1,2,3,4,5], 0, 5) == 15\nassert     sum_range_list([1,2,3,4,5], 5, 10) == 55\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n\n\ndef sum_range_dict(d, m, n):\n    '''\n    Write a function to find the sum of numbers in a dictionary within a range specified by two indices.\n    '''\n    pass"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef sum_range_list(list1, m, n):\n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    pass\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_range_list(range(1, 10), 2, 5) == 23, 'Wrong!'\n\nprint('\\n')\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_range_list([1,2,3], 1, 2) == 6\nassert     sum_range_list([1,2,3], 0, 1) == 1\nassert     sum_range_list([1,2,3], 2, 3) == 4\nassert     sum_range_list([1,2,3], 0, 4) == 6\nassert     sum_range_list([1,2,3], -4, -1) == 1\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_range_list([1,2,3,4,5,6], 2, 4) == 15, \"Wrong!\"\nassert     sum_range_list([2,2,2,2,2,2,2,2,2,2], 0, 7) == 8, \"Wrong!\"\n\nprint('\"Test Passed\"')\n\ndef sum_range(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    pass\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_range_list([3, 2, 5, 6, 1], 0, 2) == 11, \n        print('WRONG! It should return 11.')\n\nassert     sum_range_list([3, 2, 5, 6, 1], 2, 4) == 10, \n        print('WRONG! It should return 10.')\n\nassert     sum_range_list([1, 2, 5, 6, 1], 0, 4) == 18, \n        print('WRONG! It should return 18.')\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     perimeter_pentagon(1) == 5, \"1-perimeter_pentagon\"\nassert     perimeter_pentagon(2) == 7, \"2-perimeter_pentagon\"\nassert     perimeter_pentagon(3) == 10, \"3-perimeter_pentagon\"\nassert     perimeter_pentagon(4) == 15, \"4-perimeter_pentagon\"\nassert     perimeter_pentagon(5) == 20, \"5-perimeter_pentagon\"\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     perimeter_pentagon(1) == 5\nassert     perimeter_pentagon(2) == 10\nassert     perimeter_pentagon(3) == 15\nassert     perimeter_pentagon(4) == 22\nassert     perimeter_pentagon(5) == 20\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef area_of_triangle(a, b, c):\n    '''\n    Write a function to find the area of a triangle from the lengths of its sides.\n    '''\n    pass\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef hexagon(sides):\n    '''\n    Write a function to find the length of a regular hexagon from the length of its sides.\n    '''\n    pass\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     (perimeter_pentagon(1) == 5), \"perimeter_pentagon(1) is incorrect\"\nassert     (perimeter_pentagon(2) == 7), \"perimeter_pentagon(2) is incorrect\"\nassert     (perimeter_pentagon(3) == 10), \"perimeter_pentagon(3) is incorrect\"\nassert     (perimeter_pentagon(4) == 12), \"perimeter_pentagon(4) is incorrect\"\nassert     (perimeter_pentagon(5) == 15), \"perimeter_pentagon(5) is incorrect\"\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     perimeter_pentagon(4) == 20\nassert     perimeter_pentagon(3) == 15\nassert     perimeter_pentagon(5) == 20\nassert     perimeter_pentagon(1) == 5\nassert     perimeter_pentagon(10) == 50\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     perimeter_pentagon(1) == 5, 'Length 1 is not a pentagon'\nassert     perimeter_pentagon(4) == 10, 'Length 4 is not a pentagon'\nassert     perimeter_pentagon(5) == 15, 'Length 5 is not a pentagon'\nassert     perimeter_pentagon(8) == 30, 'Length 8 is not a pentagon'\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     perimeter_pentagon(5) == 20, \"incorrect\"\nassert     perimeter_pentagon(2) == 8, \"incorrect\"\nassert     perimeter_pentagon(5.5) == 20.5, \"incorrect\"\n\ndef area_equilateral_triangle(b):\n    '''\n    Write a function to find the area of a equilateral triangle from the length of its sides.\n    '''\n    pass\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     perimeter_pentagon(2) == 5, \"perimeter_pentagon should return 5\"\nassert     perimeter_pentagon(3) == 10, \"perimeter_pentagon should return 10\"\nassert     perimeter_pentagon(4) == 20, \"perimeter_pentagon should return 20\"\nassert     perimeter_pentagon(5) == 15, \"perimeter_pentagon should return 15\"\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_occurance('abc') == 1\nassert     count_occurance('aax') == 2\nassert     count_occurance('std') == 1\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_occurance('how are you') == 2\nassert     count_occurance('i see you') == 2\nassert     count_occurance('yuh, see you') == 2\nassert     count_occurance('i see you') == 2\nassert     count_occurance('hi, see you') == 0\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_occurance('Programming') == 2, 'incorrect'\nassert     count_occurance('Programming') == 1, 'incorrect'\nassert     count_occurance('Programming') == 2, 'incorrect'\nassert     count_occurance('languages') == 0, 'incorrect'\nassert     count_occurance('Programming') == 2, 'incorrect'\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_occurance('std') == 1\nassert     count_occurance('stdstd') == 2\nassert     count_occurance('abcabc') == 1\nassert     count_occurance('abcabcabc') == 3\nassert     count_occurance('abcabcabcabc') == 3\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_occurance(\"A sample string\") == 0, \"Should be 0\"\nassert     count_occurance(\"a sample string\") == 2, \"Should be 2\"\nassert     count_occurance(\"  sample string\") == 3, \"Should be 3\"\nassert     count_occurance(\"sample\") == 1, \"Should be 1\"\nassert     count_occurance(\"\") == 0, \"Should be 0\"\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_occurance('Std_is_my_best_friend_to_std_and_stdfriend_is_very_std') == 2\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_occurance(\"\") == 0\nassert     count_occurance(\"abcd\") == 0\nassert     count_occurance(\"abcdsd\") == 1\nassert     count_occurance(\"asdsd\") == 2\nassert     count_occurance(\"asdsds\") == 3\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_occurance(\"this is a string\") == 1\nassert     count_occurance(\"this is a string std\") == 2\nassert     count_occurance(\"this is a string std is\") == 3\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ns = 'python is easy to learn and to use'\nprint count_occurance(s)"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    check_type((1, 2, 3, 4, 5, 6)) == True\n    check_type((1.1, 2.2, 3.3, 4.4, 5.5, 6.6)) == True\n    check_type((1, 2, 3, 4, 5, 'a')) == False\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_type([1,2,3]) == True, \"List inside a tuple does not have same data type.\"\nassert     check_type([\"a\",\"b\",\"c\"]) == True, \"Tuple inside a list does not have same data type.\"\nassert     check_type(\"abc\") == False, \"String inside a tuple does not have same data type.\"\n\ndef check_if_integer(test_list):\n    '''\n    Write a function to check if all the elements in list are integer or not.\n    '''\n    pass\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_type((1,2,3,4,5,6,7)) == True\nassert     check_type((1,\"ab\",3.0,4,\"ab\",5)) == True\nassert     check_type((1,2,3,4,5,6,7,8)) == False\nassert     check_type((\"a\",1,\"ab\",3.0,4,\"ab\",5)) == False\nassert     check_type((1,\"ab\",3.0,\"ab\",5)) == False\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_type((1, \"s\", True, 1.1)) == False\nassert     check_type((1, 1, 1, 1)) == True\nassert     check_type((1, 1, 1, 1.1)) == True\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_type( (1,2,3,4) ) == True, \"check_type( (1,2,3,4) ) == True\"\nassert     check_type( (1,\"2\",3.0,4) ) == False, \"check_type( (1,'2',3.0,4) ) == False\"\nassert     check_type( (1,2,3.0,\"4\") ) == True, \"check_type( (1,2,3.0,'4') ) == True\"\nassert     check_type( (1,2.0,\"3\",4) ) == False, \"check_type( (1,2.0,'3',4) ) == False\"\nassert     check_type( (1,2,3.0,4.0) ) == False, \"check_type( (1,2,3.0,4.0) ) == False\"\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_type((1,2,3,4,5,6)) == True\nassert     check_type(('A','B','C','D')) == False\nassert     check_type(('a','b','c','d')) == True\nassert     check_type([1,2,3,4,5,6]) == False\nassert     check_type((1,2,3,4,5,6)) == True\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_type((1,2,3,4)) == True, \"all the elements in tuple are different type\"\nassert    check_type((1.0,2.0,3.0,4.0)) == True, \"all the elements in tuple are float\"\nassert    check_type((True,False,True,False)) == True, \"all the elements in tuple are boolean\"\nassert    check_type((\"a\",\"b\",\"c\",\"d\")) == True, \"all the elements in tuple are string\"\nassert    check_type([\"a\",\"b\",\"c\",\"d\"]) == True, \"all the elements in tuple are string\"\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_type((1,2,3,4)) == False, \"All the elements are of different data types\"\nassert     check_type((1,2,\"3\",4)) == False, \"All the elements are of different data types\"\nassert     check_type((1,2,3.4,4)) == True, \"All the elements are of same data type\"\nassert     check_type((1,2,\"3\",3.4,4,4.6)) == True, \"All the elements are of same data type\"\nassert     check_type((1,2,\"3\",3.4,4,4.6,5.6)) == False, \"All the elements are of different data types\"\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_type([1, 1, 2, 3, 4]) == True\nassert     check_type([2, 2, 3, 4, 5]) == False\nassert     check_type([0, 1, 2, 'x', 4]) == True\n\n\ndef is_anagram(str_1, str_2):\n    '''\n    Write a function to check if two strings are anagram or not.\n    '''\n    pass\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(is_majority([1, 2, 3, 3, 3, 4, 4, 5, 5, 5], 8, 5) == True)\nassert \nprint(is_majority([1, 2, 3, 3, 3, 4, 4, 5, 5, 5], 8, 5) == False)\nassert \nprint(is_majority([1, 2, 3, 3, 3, 4, 4, 5, 5, 5], 8, 4) == False)\nassert \nprint(is_majority([1, 2, 3, 3, 3, 4, 4, 5, 5, 5], 8, 5) == True)\nassert \nprint(is_majority([1, 2, 3, 3, 3, 4, 4, 5, 5, 5], 8, 3) == True)\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert is_majority([2, 2, 1, 1, 3, 3], 6, 3) == True\nassert is_majority([3, 3, 3, 2, 2, 2, 1, 1, 1], 8, 2) == False\nassert is_majority([3, 2, 2, 1, 1, 1, 3, 3, 3, 3], 9, 3) == True\nassert is_majority([3, 2, 1, 3, 2, 1, 1, 3, 2, 1], 8, 3) == True\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_majority([1, 1, 2, 3, 5, 5, 5, 7], 5, 5) == True, \\\n        \"should be True\"\nassert     is_majority([1, 1, 2, 3, 5, 5, 5, 7], 5, 5) == False, \\\n        \"should be False\"\nassert     is_majority([1, 1, 2, 3, 5, 5, 5, 7], 4, 5) == True, \\\n        \"should be True\"\nassert     is_majority([1, 1, 2, 3, 5, 5, 5, 7], 4, 5) == False, \\\n        \"should be False\"\nassert     is_majority([1, 1, 2, 3, 5, 5, 5, 7], 5, 7) == False, \\\n        \"should be False\"\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n'''\nQuestion 2:\n\nYou have a list of numbers, and you want to return a new list, where each element is the number of smaller elements to the right of that element.\n\nFor example,\n\n[1, 4, -1, 5, -9, 3] \nreturns\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n'''\nGiven an array of integers, return the indices of the two numbers such that they add up to a specific target.\n\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\n\nExample:\n\nGiven nums = [2, 7, 11, 15], target = 9,\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    pass\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_Set_Bits(1) == 1\nassert     count_Set_Bits(10) == 2\nassert     count_Set_Bits(11) == 3\nassert     count_Set_Bits(10) == 1\n\ndef count_Set_Bits2(n): \n    '''\n    Another Python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    pass\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_Set_Bits(1) == 0\nassert     count_Set_Bits(2) == 1\nassert     count_Set_Bits(10) == 2\nassert     count_Set_Bits(11) == 1\nassert     count_Set_Bits(101) == 3\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_Set_Bits(0) == 0\nassert     count_Set_Bits(1) == 1\nassert     count_Set_Bits(2) == 0\nassert     count_Set_Bits(3) == 1\nassert     count_Set_Bits(4) == 0\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert count_Set_Bits(5) == 0\nassert count_Set_Bits(12) == 1\nassert count_Set_Bits(13) == 2\nassert count_Set_Bits(15) == 3\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_Set_Bits(0) == 0, 'Wrong output'\nassert     count_Set_Bits(1) == 1, 'Wrong output'\nassert     count_Set_Bits(2) == 1, 'Wrong output'\nassert     count_Set_Bits(3) == 1, 'Wrong output'\nassert     count_Set_Bits(4) == 2, 'Wrong output'\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_Set_Bits(0) == 0\nassert     count_Set_Bits(3) == 1\nassert     count_Set_Bits(7) == 2\nassert     count_Set_Bits(10) == 3\nassert     count_Set_Bits(15) == 4\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_Set_Bits(9) == 3\nassert     count_Set_Bits(123) == 3\nassert     count_Set_Bits(12) == 2\nassert     count_Set_Bits(0) == 1\nassert count_Set_Bits(12) == 0\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_Set_Bits(1) == 1\nassert     count_Set_Bits(3) == 2\nassert     count_Set_Bits(4) == 2\nassert     count_Set_Bits(5) == 3\nassert     count_Set_Bits(9) == 4\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_Set_Bits(0) == 0\nassert     count_Set_Bits(1) == 0\nassert     count_Set_Bits(2) == 1\nassert     count_Set_Bits(3) == 1\nassert     count_Set_Bits(4) == 1\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    count_Set_Bits(n) == 2\n    count_Set_Bits(n) == 1\n    count_Set_Bits(0) == 0\n    count_Set_Bits(1) == 1\n    count_Set_Bits(2) == 1\n    count_Set_Bits(3) == 2\n    count_Set_Bits(4) == 2\n    count_Set_Bits(9) == 2\n    count_Set_Bits(10) == 2\n    count_Set_Bits(11) == 3\n    count_Set_Bits(15) == 4\n    count_Set_Bits(16) == 4\n    count_Set_Bits(17) == 5\n    count_Set_Bits(20) == 5\n    count_Set_Bits(21) == 6\n    count_Set_Bits(22) == 6\n    count_Set_Bits(25) == 7\n    count_Set_Bits(26) == 7\n    count_Set_Bits(27) == 8\n    count_Set_Bits(28) == 8\n    count_Set_Bits(29) == 9\n    count_Set_Bits(31) == 10\n    count_Set_Bits(32) == 10\n    count_Set_Bits(33) == 11\n    count_Set_Bits(34) == 11\n    count_Set_Bits(35) == 12\n    count_Set_Bits(36) == 12\n    count_Set_Bits(37) == 13\n    count_Set_Bits(38) == 13\n    count_Set_Bits(39) == 14\n    count_Set_Bits(40) == 14\n    count_Set_Bits(41) == 15\n    count_Set_Bits(42) == 15\n    count_Set_Bits(43) == 16\n    count_Set_Bits(44) == 16\n    count_Set_Bits(45) == 17\n    count_Set_Bits(46) == 17\n    count_Set_Bits(47) == 18\n    count_Set_Bits(48) == 18\n    count_Set_Bits(49) == 19\n    count_Set_Bits(50) == 19\n    count_Set_Bits(51) == 20\n    count_Set_Bits(52) == 20\n    count_Set_Bits(53) == 21\n    count_Set_Bits(54) == 21\n    count_Set_Bits(55) == 22\n    count_Set_Bits(56) == 22\n    count_Set_Bits(57) == 23\n    count_Set_Bits(58) == 23\n    count_Set_Bits(59) == 24\n    count_Set_Bits(60) == 24\n    count_Set_Bits(61) == 25\n    count_Set_Bits(62) == 25\n    count_Set_Bits(63) == 26\n    count_Set_Bits(64) == 26\n    count_Set_Bits(65) == 27\n    count_Set_Bits(66) == 27\n    count_Set_Bits(67) == 28\n    count_Set_Bits(68) == 28\n    count_Set_Bits(69) == 29\n    count_Set_Bits(70) == 29\n    count_Set_Bits(71) == 30\n    count_Set_Bits(72) == 30\n    count_Set_Bits(73) == 31\n    count_Set_Bits(74) == 31\n    count_Set_Bits(75) == 32\n    count_Set_Bits(76) == 32\n    count_Set_Bits(77) == 33\n    count_Set_Bits(78) == 33\n    count_Set_Bits(79) == 34\n    count_Set_Bits(80) == 34\n    count_Set_Bits(81) == 35\n    count_Set_Bits(82) == 35\n    count_Set_Bits(83) == 36\n    count_Set_Bits(84) == 36\n    count_Set_Bits(85) == 37\n    count_Set_Bits(86) == 37\n    count_Set_Bits(87) == 38\n    count_Set_Bits(88) == 38\n    count_Set_Bits(89) == 39\n    count_Set_Bits(90) == 39\n    count_Set_Bits(91) == 40\n    count_Set_Bits(92) == 40\n    count_Set_Bits(93) == 41\n    count_Set_Bits(94) == 41\n    count_Set_Bits(95) == 42\n    count_Set_Bits(96) == 42\n    count_Set_Bits(97) == 43\n    count_Set_Bits(98) == 43\n    count_Set_Bits(99) == 44\n    count_Set_Bits(100) == 44\n    count_Set_Bits(101) == 45\n    count_Set_Bits(102) == 45\n    count_Set_Bits(103) == 46\n    count_Set_Bits(104) == 46\n    count_Set_Bits(105) == 47\n    count_Set_Bits(106) == 47\n    count_Set_Bits(107) == 48\n    count_Set_Bits(108) == 48\n    count_Set_Bits(109) == 49\n    count_Set_Bits(110) == 49\n    count_Set_Bits(111) == 50\n    count_Set_Bits(112) == 50\n    count_Set_Bits(113) == 51\n    count_Set_Bits(114) == 51\n    count_Set_Bits(115) == 52\n    count_Set_Bits(116) == 52\n    count_Set_Bits(117) == 53\n    count_Set_Bits(118) == 53\n    count_Set_Bits(119) == 54\n    count_Set_Bits(120) == 54\n    count_Set_Bits(121) == 55\n    count_Set_Bits(122) == 55\n    count_Set_Bits(123) == 56\n    count_Set_Bits(124) == 56\n    count_Set_Bits(125) == 57\n    count_Set_Bits(126) == 57\n    count_Set_Bits(127) == 58\n    count_Set_Bits(128) == 58\n    count_Set_Bits(129) == 59\n    count_Set_Bits(130) == 59\n    count_Set_Bits(131) == 60\n    count_Set_Bits(132) == 60\n    count_Set_Bits(133) == 61\n    count_Set_Bits(134) == 61\n    count_Set_Bits(135) == 62\n    count_Set_Bits(136) == 62\n    count_Set_Bits(137) == 63\n    count_Set_Bits(138) == 63\n    count_Set_Bits(139) == 64\n    count_Set_Bits(140) == 64\n    count_Set_Bits(141) == 65\n    count_Set_Bits(142) == 65\n    count_Set_Bits(143) == 66\n    count_Set_Bits(144) == 66\n    count_Set_Bits(145) == 67\n    count_Set_Bits(146) == 67\n    count_Set_Bits(147) == 68\n    count_Set_Bits(148) == 68\n    count_Set_Bits(149) == 69\n    count_Set_Bits(150) == 69\n    count_Set_Bits(151) == 70\n    count_Set_Bits(152) == 70\n    count_Set_Bits(153) == 71\n    count_Set_Bits(154) == 71\n    count_Set_Bits(155) == 72\n    count_Set_Bits(156) == 72\n    count_Set_Bits(157) == 73\n    count_Set_Bits(158) == 73\n    count_Set_Bits(159) == 74\n    count_Set_Bits(160) == 74\n    count_Set_Bits(161) == 75\n    count_Set_Bits"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     odd_values_string(\"AaBbCcDd\") == \"DD\"\nassert odd_values_string(\"1fFf\") == \"\"\nassert odd_values_string(\"AaBbCcDd\") == \"DD\"\nprint(\"You're all set.\")"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     odd_values_string('hello') == 'hle'\nassert     odd_values_string('python') == 'yth'\nassert     odd_values_string('geeksforgeeks') == 'fgeeks'\nassert     odd_values_string('qweqweqwe') == 'qwe'\nassert     odd_values_string('wxyz') == 'xyz'\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     odd_values_string('python') == 'ython'\nassert     odd_values_string('python') == 'ython'\nassert     odd_values_string('python') == 'ython'\nassert     odd_values_string('python') == 'ython'\nassert     odd_values_string('python') == 'ython'\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     odd_values_string('ABCDEFG') == 'BCDEFG', \"Wrong Answer\"\nassert     odd_values_string('ABCDEF') == 'BCDF', \"Wrong Answer\"\nassert     odd_values_string('A') == 'A', \"Wrong Answer\"\nassert     odd_values_string('AA') == 'AA', \"Wrong Answer\"\nassert     odd_values_string('AB') == 'AB', \"Wrong Answer\"\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     odd_values_string('oddeven') == 'oddeven'\nassert     odd_values_string('odd') == 'odd'\nassert     odd_values_string('odd') == 'odd'\nassert     odd_values_string('') == ''\nassert     odd_values_string(' ') == ''\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     odd_values_string(\"hello world\") == \"hlowrd\"\nassert odd_values_string(\"hello world123\") == \"hlo\"\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nodd_values_string('hello world') == 'hlwr'\nodd_values_string('hello world and welcome') == 'hllw'\nodd_values_string('hello world and welcome and welcome') == 'hllw'\nodd_values_string('hello world and welcome and welcome and welcome') == 'hllw'\nodd_values_string('hello world and welcome and welcome and welcome and welcome') == 'hllw'\nodd_values_string('hello world and welcome and welcome and welcome and welcome and welcome') == 'hllw'\nodd_values_string('hello world and welcome and welcome and welcome and welcome and welcome and welcome') == 'hllw'\nodd_values_string('hello world and welcome and welcome and welcome and welcome and welcome and welcome and welcome') == 'hllw'\nodd_values_string('hello world and welcome and welcome and welcome and welcome and welcome and welcome and welcome and welcome') == 'hllw'\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     odd_values_string('helloo') == 'olle'\nassert     odd_values_string('riddhru') == 'rdr'\nassert     odd_values_string('fkfl') == 'fkfl'\nassert     odd_values_string('jxm') == 'jxm'\nassert     odd_values_string('mmr') == ''\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef odd_values_string_2(s):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    pass\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     odd_values_string(\"abcd\") == \"abcd\", 'Wrong Output'\nassert     odd_values_string(\"cde\") == \"cde\", 'Wrong Output'\nassert     odd_values_string(\"zkx\") == \"zkx\", 'Wrong Output'\nassert     odd_values_string(\"zzxyzz\") == \"zzxyzz\", 'Wrong Output'\nprint('All test cases passed!')\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     min_of_three(10, 2, 20) == 20\nassert     min_of_three(-10, -2, 20) == -10\nassert     min_of_three(10, -2, 20) == -10\nassert     min_of_three(0, -10, 20) == -10\nassert     min_of_three(10, 2, 0) == 0\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert "
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     min_of_three(3, 2, 3) == 3, \"min_of_three(3, 2, 3) is incorrect\"\nassert min_of_three(1, 1, 2) == 1, \"min_of_three(1, 1, 2) is incorrect\"\nassert min_of_three(2, 2, 2) == 2, \"min_of_three(2, 2, 2) is incorrect\"\nprint(\"min_of_three(3, 2, 3) : \", min_of_three(3, 2, 3))\nprint(\"min_of_three(1, 1, 2) : \", min_of_three(1, 1, 2))\nprint(\"min_of_three(2, 2, 2) : \", min_of_three(2, 2, 2))\nprint(\"min_of_three(2, 2, 2) : \", min_of_three(2, 2, 2))\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(\"\\tCorrectness of min_of_three() is: \",min_of_three(5,6,7) == 5)\nassert \nprint(\"\\tCorrectness of min_of_three() is: \",min_of_three(8,8,8) == 8)\nassert \nprint(\"\\tCorrectness of min_of_three() is: \",min_of_three(3,1,5) == 1)\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert min_of_three(1,2,3) == 1\nassert min_of_three(3,2,1) == 1\nassert min_of_three(2,1,3) == 1\nassert min_of_three(3,2,1) == 1\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     min_of_three(1,2,3) == 1 \nassert     min_of_three(3,2,1) == 1\nassert     min_of_three(-1,2,1) == 1\nassert     min_of_three(1,-2,3) == 1\nassert     min_of_three(2,1,-3) == 1\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     min_of_three(8,7,1) == 1\nassert     min_of_three(-1,0,2) == -1\nassert     min_of_three(1,2,3) == 1\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == '__main__':\n    print('Testing')\n    print(min_of_three(4,5,6))\n    print(min_of_three(-10,-20,-30))\n    print(min_of_three(100, 50, 20))"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     min_of_three(2,6,10) == 2\nassert     min_of_three(5,10,2) == 2\nassert     min_of_three(5,2,10) == 2\nassert     min_of_three(1,1,1) == 1\nassert     min_of_three(2,3,4) == 2\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(2,2,2) == True, \"All Bits Set In The Given Range\"\nassert     all_Bits_Set_In_The_Given_Range(1,2,1) == False, \"All Bits Set In The Given Range\"\nassert     all_Bits_Set_In_The_Given_Range(1,1,1) == True, \"All Bits Set In The Given Range\"\nassert     all_Bits_Set_In_The_Given_Range(2,4,4) == False, \"All Bits Set In The Given Range\"\nassert     all_Bits_Set_In_The_Given_Range(1,2,3) == False, \"All Bits Set In The Given Range\"\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(n=1,l=1,r=9) == False, \"Wrong answer.\"\nassert     all_Bits_Set_In_The_Given_Range(n=1,l=2,r=9) == False, \"Wrong answer.\"\nassert     all_Bits_Set_In_The_Given_Range(n=0,l=1,r=9) == False, \"Wrong answer.\"\nassert     all_Bits_Set_In_The_Given_Range(n=1,l=0,r=9) == False, \"Wrong answer.\"\nassert     all_Bits_Set_In_The_Given_Range(n=1,l=1,r=0) == False, \"Wrong answer.\"\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(5, 0, 4) == True, \"Wrong output\"\nassert     all_Bits_Set_In_The_Given_Range(5, 0, 5) == False, \"Wrong output\"\nassert     all_Bits_Set_In_The_Given_Range(5, 0, 6) == False, \"Wrong output\"\nassert     all_Bits_Set_In_The_Given_Range(5, 0, 7) == True, \"Wrong output\"\nassert     all_Bits_Set_In_The_Given_Range(5, 1, 4) == True, \"Wrong output\"\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(n=5, l=1, r=7) is True\nassert     all_Bits_Set_In_The_Given_Range(n=4, l=4, r=8) is False\nassert     all_Bits_Set_In_The_Given_Range(n=9, l=4, r=9) is True\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nall_Bits_Set_In_The_Given_Range(4,0,3)==False, \"test 1 failed\"\nassert \nall_Bits_Set_In_The_Given_Range(4,0,2)==True, \"test 2 failed\"\nassert \nall_Bits_Set_In_The_Given_Range(4,0,3)==True, \"test 3 failed\"\n\n\ndef all_Bits_Set_In_The_Given_Range_Inclusive(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    pass\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert not all_Bits_Set_In_The_Given_Range(5,2,3) == True, 'Fail'\nassert not all_Bits_Set_In_The_Given_Range(6,3,4) == True, 'Fail'\nassert not all_Bits_Set_In_The_Given_Range(2,0,4) == True, 'Fail'\nassert all_Bits_Set_In_The_Given_Range(4,2,2) == False, 'Fail'\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(2,0,1) == False \nassert     all_Bits_Set_In_The_Given_Range(2,1,2) == False \nassert     all_Bits_Set_In_The_Given_Range(4,0,3) == False \nassert     all_Bits_Set_In_The_Given_Range(4,1,3) == True \nassert     all_Bits_Set_In_The_Given_Range(8,0,6) == False \n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(1,0,3)==False\nassert all_Bits_Set_In_The_Given_Range(0,0,2)==True\nassert all_Bits_Set_In_The_Given_Range(0,1,3)==True\nassert all_Bits_Set_In_The_Given_Range(0,4,6)==False\nassert all_Bits_Set_In_The_Given_Range(0,5,6)==False\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(2,0,1) == False,'should be False'\nassert     all_Bits_Set_In_The_Given_Range(2,0,2) == True,'should be True'\nassert     all_Bits_Set_In_The_Given_Range(1,1,10) == True,'should be True'\nassert     all_Bits_Set_In_The_Given_Range(2,0,0) == True,'should be True'\nassert     all_Bits_Set_In_The_Given_Range(0,2,2) == False,'should be False'\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(0,0,0)    == False\nassert     all_Bits_Set_In_The_Given_Range(0,0,1)    == True\nassert     all_Bits_Set_In_The_Given_Range(0,1,0)    == False\nassert     all_Bits_Set_In_The_Given_Range(0,1,1)    == True\nassert     all_Bits_Set_In_The_Given_Range(1,0,0)    == False\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef fizz_buzz(arr):\n    '''\n    Write a function that takes in an array of integers and returns the same array, but with the integers that are divisible by 3 re-written as fizz and the integers that are divisible by 5 re-written as buzz, and the integers that are divisible by both 3 and 5 re-written as fizzbuzz. For example, if the input is [3, 6, 1, 2, 5], then the output should be [3, 'fizz', 6, 'buzz', 1, 'fizz', 2, 'fizz', 5].\n\n    '''\n    pass\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     re_arrange_array([1, 2, 3, 4, 5], 1) == [-1, 1, 2, 3, 4, 5]\nassert     re_arrange_array([1, 2, 3, 4, 5, 6], 3) == [-1, 2, 3, 4, 5, 6]\nassert     re_arrange_array([-7, -1, 0, 1, 2, 3], 1) == [-7, -1, 0, 1, 2, 3]\nassert     re_arrange_array([0, 1, 2, 3, 4, 5, 6], 3) == [-1, 2, 3, 4, 5, 6]\nassert     re_arrange_array([0, 1, 2, 3, 4, 5, 6], 6) == [-1, 2, 3, 4, 5, 6]\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     re_arrange_array([1,2,3,4,-5,-6,7], 6) == [-5,-6,1,2,3,4,7]\nassert     re_arrange_array([1,-2,3,4,-5,-6,-7], 6) == [-5,-6,1,-2,3,4,-7]\nassert     re_arrange_array([-1,-2,-3,-4,-5,-6,-7], 6) == [-7,-6,-5,-4,-3,-2,-1]\nassert     re_arrange_array([-1,2,3,4,-5,-6,7], 2) == [-1,2,3,4,-5,-6,7]\nassert     re_arrange_array([1,2,3,4,5,-6,7], 4) == [1,2,3,4,-5,-6,7]\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     re_arrange_array([1,2,3,4,5,6,-7,-8,9,10,11,12,13,14,15,-16,17,-18,19,20], 7) == [1,2,3,4,5,-7,6,-8,9,10,11,12,13,14,15,16,17,18,19,20]\nassert     re_arrange_array([1,2,3,4,5,6,7,-8,9,10,11,12,13,14,15,16,17,18,19,20], 5) == [1,2,3,4,5,-7,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nassert     re_arrange_array([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], 5) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     re_arrange_array([2, -1, -4, -9, 5, 3], 5) == [-9, 5, 2, 3, -4, -1]\nassert     re_arrange_array([1, 2, 3, 4, 5], 5) == [5, 1, 2, 3, 4]\nassert     re_arrange_array([-1, 2, 3, 4, 5], 5) == [-1, 2, 3, 4, 5]\nassert     re_arrange_array([-2, 0, -1, 1, 2], 5) == [-2, 0, 1, 2, -1]\n\n\ndef largest_number(input_list):\n    '''\n    Write a function that takes a list of numbers and returns the largest one. \n    For example, if given the list [-10, -3, 3, 4], the function should return 3.\n    '''\n    pass\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     re_arrange_array([-12, 13, -5, 6, -4], 3) == [-4, -12, 6, 13, 5]\nassert     re_arrange_array([-1, 1, -3, 4, -5, 6], 4) == [-5, 6, -3, 4, -1, 1]\nassert     re_arrange_array([-1, -2, -3, -4, -5, -6], 1) == [-6, -5, -4, -3, -2, -1]\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     re_arrange_array([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == [-5, 1, 2, 3, 4, 5, 6, 7, 8], \"Wrong result\"\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     re_arrange_array([1, 1, 1, 1, -1, 1, 1, 1, -1, 1], 3) == [-1, -1, -1, 1, 1, 1, 1, 1, 1, 1]\nassert     re_arrange_array([2, -1, 2, -1, 2, 2], 2) == [-1, 2, 2, -1, -1, 2]\nassert     re_arrange_array([1, -2, 1, -2, 1, -2], 2) == [-2, 1, -1, 2, -2, 1]\nassert     re_arrange_array([1, 1, 1, 1, 1, 1, 1, -1], 3) == [-1, -1, -1, 1, 1, 1, 1, 1]\nassert     re_arrange_array([1, 1, 1, 1, -1, 1], 3) == [-1, -1, 1, 1, -1, 1]\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     replace_blank('eabcd', 'E') == 'Eabcd'\nassert     replace_blank('a,b,c', '$') == 'a$b$c'\nassert     replace_blank(' ', '1') == '1'\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef to_camelcase(str1):\n    '''\n    Write a function that converts a string to camelcase.\n    '''\n    pass\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     replace_blank('', '') == '', 'The returned value must be empty string'\nassert     replace_blank('a b c ','') == 'a b c', 'The returned value must contain the character'\nassert     replace_blank('a', 'x') == 'x x x', 'The returned value must contain the character'"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     replace_blank('hello world', '!') == 'hello!world!'\nassert     replace_blank('hello world','') == 'hello world'\nassert     replace_blank('hello world','') == 'hello world'\nassert     replace_blank('','') == ''\nassert     replace_blank('','') == ''\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert replace_blank(\"\", \"\") == \"\"\nassert replace_blank(\" \", \"!\") == \"!\"\nassert replace_blank(\"\", \" \") == \" \"\nassert replace_blank(\"asdfghj\", \" \") == \"asdfghj\"\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     (replace_blank(\"a  b c  d e\", \" \")==\"a b c d e\"), \"First Test\"\nassert     (replace_blank(\"a  b c  d e  \", \" \")==\"a b c d e\"), \"Second Test\"\nassert     (replace_blank(\"\", \" \")==\"\"), \"Third Test\"\nassert     (replace_blank(\"a  b c  d e  \", \" \")==\"a  b c  d e  \"), \"Fourth Test\"\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     replace_blank('', 'X') == 'X'\nassert replace_blank('', 'x') == 'x'\nassert replace_blank('X', 'x') == 'X'\nassert replace_blank('', 'x') == 'x'\nassert replace_blank('abc', 'X') == 'abc'\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     replace_blank('', 'a') == ''\nassert     replace_blank('', 'c') == ''\nassert     replace_blank(' ', 'a') == 'a'\nassert     replace_blank('a b c','') == 'a b c'\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef capitalize_str(str1):\n    '''\n    Write a function that takes in a string and returns the string with all the characters capitalized.\n    '''\n    pass\n\nassert capitalize_str(\"sad\") == \"Sad\"\nassert capitalize_str(\"\") == \"\"\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nlarg_nnum([2,5,3,6,8,2],3) == [8,6,2]\nassert \nlarg_nnum([5,2,3,6,8,2],3) == [8,6,2]\nassert \nlarg_nnum([5,2,3,6,8,2],4) == [8,6,2]\n\n\ndef larg_nnum_k(list1,n,k):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    pass\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ndef larg_nnum([1,2,4,5,8,3],3) == [5,4,8]\nassert \ndef larg_nnum([1,2,4,5,8,3],5) == [5,8,3,4,1]\nassert \ndef larg_nnum([1,2,4,5,8,3],10) == [8,5,4,2,3,1]\nassert \ndef larg_nnum([1,2,4,5,8,3],0) == []\nassert \ndef larg_nnum([],1) == []\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     larg_nnum([1,2,3,4,5],1) == [4]\nassert     larg_nnum([1,2,3,4,5],2) == [3,4]\nassert     larg_nnum([1,2,3,4,5],3) == [5]\nassert     larg_nnum([1,2,3,4,5],0) == []\nassert     larg_nnum([],0) == []\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     larg_nnum([1,2,3,4,5,6,7,8,9,10], 10) == [10,9,8,7,6,5,4,3,2,1]\nassert     larg_nnum([1,2,3,4,5,6,7,8,9,10], 3) == [10,9,8]\nassert     larg_nnum([], 2) == []\nassert     larg_nnum([2,2], 2) == [2]\nassert     larg_nnum([], 1) == []\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nlarg_nnum([1,2,3,4,5,6,7,8],5) == [8,7,6,5,4]\nassert \nlarg_nnum([1,2,3,4,5,6,7,8],3) == [7,6,5]\nassert \nlarg_nnum([1,2,3,4,5,6,7,8],2) == [7,6]\nassert \nlarg_nnum([1,2,3,4,5,6,7,8],1) == [5]\nassert \nlarg_nnum([1,2,3,4,5,6,7,8],8) == [8]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef larg_nnum_test(a):\n    '''\n    Input: \n        a = [(1,2),(1,3),(1,4),(1,5),(1,6),(1,7)]\n    Output: \n        [(1,7),(1,6),(1,5),(1,4),(1,3),(1,2)]\n    '''\n    pass\n\n\n\n\ndef k_closest(list1, k, num):\n    '''\n    Write a function that takes in a list and a number k and returns a list containing the k smallest items from the list.\n    '''\n    pass\n\n\ndef k_closest_test(a):\n    '''\n    Input: \n        a = [(1,2),(1,3),(1,4),(1,5),(1,6),(1,7)]\n    Output: \n        [(1,7),(1,6),(1,5),(1,4),(1,3),(1,2)]\n    '''\n    pass\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef larg_list(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    pass\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     larg_nnum([1,3,5,2],2) == [5,3]\nassert     larg_nnum([1,3,5,2],3) == [5,3,1]\nassert     larg_nnum([1,3,5,2],4) == [5,3,1,2]\n\ndef lar_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    pass"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nlateralsuface_cylinder(4,2) == 16\nprint('Success!')\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     lateralsuface_cylinder(3,6) == (14.9,13.4,13.4)\nassert     lateralsuface_cylinder(5,6) == (30.5,30.5,30.5)\nassert     lateralsuface_cylinder(10,10) == (226.6,226.6,226.6)\nassert     lateralsuface_cylinder(5,10) == (30.5,30.5,30.5)\nassert     lateralsuface_cylinder(10,5) == (226.6,226.6,226.6)\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     lateralsuface_cylinder(5,3) == 5*3\nassert     lateralsuface_cylinder(5,4) == 5*4\nassert     lateralsuface_cylinder(5,5) == 5*5\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     lateralsuface_cylinder(r=5,h=10) == 35, 'Wrong result'\nassert     lateralsuface_cylinder(r=10,h=50) == 690, 'Wrong result'\nassert     lateralsuface_cylinder(r=30,h=100) == 955, 'Wrong result'\nassert     lateralsuface_cylinder(r=20,h=120) == 2150, 'Wrong result'\nassert     lateralsuface_cylinder(r=10,h=5) == 45, 'Wrong result'\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     volume_cube(2) == 8\nassert     volume_cube(3) == 27\nassert     volume_cube(4) == 64\n\nprint('No.8: volume_cube')\n\ndef volume_cuboid(x, y, z, b, h, w):\n    '''\n    Write a function to find the volume of a cuboid given the length, width, and height.\n    '''\n    pass\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     volume_cube(3) == 27, \"1\"\nassert     volume_cube(5) == 125, \"2\"\nassert     volume_cube(8) == 40320, \"3\"\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef sum_of_two_numbers(a, b):\n    '''\n    Given two ints, a and b, return their sum. However, sums in the range of 1 - 10 are forbidden, so in that case just return 10.\n    '''\n    pass\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     volume_cube(4) == 16\nassert     volume_cube(6) == 216\nassert     volume_cube(8) == 64\nassert     volume_cube(10) == 3628800\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     volume_cube(1) == 1\nassert     volume_cube(2) == 8\nassert     volume_cube(5) == 50"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef area_cube(l):\n    '''\n    Write a function to find the area of a cube given its side length.\n    '''\n    pass\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert volume_cube(4) == 8\nassert volume_cube(1) == 1\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n'''\nSolution :\n'''\n\ndef even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | 0b10\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \neven_bit_set_number(1) == 0 \neven_bit_set_number(2) == 1\neven_bit_set_number(3) == 1\neven_bit_set_number(4) == 2\neven_bit_set_number(5) == 2\neven_bit_set_number(6) == 0\neven_bit_set_number(7) == 1\neven_bit_set_number(8) == 1\neven_bit_set_number(9) == 2\neven_bit_set_number(10) == 0\neven_bit_set_number(100) == 2\neven_bit_set_number(1000) == 1\neven_bit_set_number(10000) == 0\neven_bit_set_number(100000) == 1\neven_bit_set_number(100000000) == 0\neven_bit_set_number(1000000000) == 2\neven_bit_set_number(1000000000000) == 0\neven_bit_set_number(10000000000000000) == 2\neven_bit_set_number(1000000000000000000) == 0\neven_bit_set_number(99999999999999999999999999) == 1\neven_bit_set_number(100000000000000000000) == 1\neven_bit_set_number(100000000000000000000000000) == 2\neven_bit_set_number(10000000000000000000000000000) == 1\neven_bit_set_number(100000000000000000000000000000000) == 1\neven_bit_set_number(10000000000000000000000000000000000) == 0\neven_bit_set_number(99999999999999999999999999999999999999999999999999999) == 0\neven_bit_set_number(1000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999) == 0\neven_bit_set_number(999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999) == 0\neven_bit_set_number(10000000000000000000000000000000000000000000000000000000000000000000000000000000) == 0\neven_bit_set_number(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 0\neven_bit_set_number(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000) == 1\neven_bit_set_number(10000000000000000000000000000000000000000000000000000000000000000000000000000000"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     even_bit_set_number(15) == False, \"Test 1 Failed\"\nassert     even_bit_set_number(11) == True, \"Test 2 Failed\"\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     even_bit_set_number(4) == 8\nassert     even_bit_set_number(9) == 4\nassert     even_bit_set_number(11) == 4\nassert     even_bit_set_number(15) == 8\nassert     even_bit_set_number(31) == 8\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     even_bit_set_number(12) == 12, \"Wrong answer\"\nassert even_bit_set_number(0) == 0, \"Wrong answer\"\nassert even_bit_set_number(10) == 10, \"Wrong answer\"\nassert even_bit_set_number(11) == 10, \"Wrong answer\"\nassert even_bit_set_number(10) == 10, \"Wrong answer\"\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \neven_bit_set_number(1) == 0\neven_bit_set_number(6) == 1\neven_bit_set_number(8) == 1\neven_bit_set_number(10) == 1\neven_bit_set_number(13) == 1\neven_bit_set_number(16) == 1\neven_bit_set_number(17) == 1\neven_bit_set_number(18) == 1\neven_bit_set_number(20) == 1\neven_bit_set_number(40) == 1\neven_bit_set_number(49) == 1\neven_bit_set_number(62) == 1\neven_bit_set_number(64) == 1\neven_bit_set_number(65) == 1\neven_bit_set_number(66) == 1\neven_bit_set_number(67) == 1\neven_bit_set_number(80) == 1\neven_bit_set_number(90) == 1\neven_bit_set_number(101) == 1\neven_bit_set_number(102) == 1\neven_bit_set_number(103) == 1\neven_bit_set_number(104) == 1\neven_bit_set_number(105) == 1\neven_bit_set_number(106) == 1\neven_bit_set_number(107) == 1\neven_bit_set_number(108) == 1\neven_bit_set_number(109) == 1\neven_bit_set_number(110) == 1\neven_bit_set_number(111) == 1\neven_bit_set_number(112) == 1\neven_bit_set_number(113) == 1\neven_bit_set_number(114) == 1\neven_bit_set_number(115) == 1\neven_bit_set_number(116) == 1\neven_bit_set_number(117) == 1\neven_bit_set_number(118) == 1\neven_bit_set_number(119) == 1\neven_bit_set_number(120) == 1\neven_bit_set_number(121) == 1\neven_bit_set_number(122) == 1\neven_bit_set_number(123) == 1\neven_bit_set_number(124) == 1\neven_bit_set_number(125) == 1\neven_bit_set_number(126) == 1\neven_bit_set_number(127) == 1\neven_bit_set_number(128) == 1\neven_bit_set_number(129) == 1\neven_bit_set_number(130) == 1\neven_bit_set_number(131) == 1\neven_bit_set_number(132) == 1\neven_bit_set_number(133) == 1\neven_bit_set_number(134) == 1\neven_bit_set_number(135) == 1\neven_bit_set_number(136) == 1\neven_bit_set_number(137) == 1\neven_bit_set_number(138) == 1\neven_bit_set_number(139) == 1\neven_bit_set_number(140) == 1\neven_bit_set_number(141) == 1\neven_bit_set_number(142) == 1\neven_bit_set_number(143) == 1\neven_bit_set_number(144) == 1\neven_bit_set_number(145) == 1\neven_bit_set_number(146) == 1\neven_bit_set_number(147) == 1\neven_bit_set_number(148) == 1\neven_bit_set_number(149) == 1\neven_bit_set_number(150) == 1\neven_bit_set_number(151) == 1\neven_bit_set_number(152) == 1\neven_bit_set_number(153) == 1\neven_bit_set_number(154) == 1\neven_bit_set_number(155) == 1\neven_bit_set_number(156) == 1\neven_bit_set_number(157) == 1\neven_bit_set_number(158) == 1\neven_bit_set_number(159) == 1\neven_bit_set_number(160) == 1\neven_bit_set_number(161) == 1\neven_bit_set_number(162) == 1\neven_bit_set_number(163) == 1\neven_bit_set_number(164) == 1\neven_bit_set_number(165) == 1\neven_bit_set_number(166) == 1\neven_bit_set_number(167) == 1\neven_bit_set_number(168) == 1\neven_bit_set_number(169) == 1\neven_bit_set_number(170) == 1\neven_bit_set_number(171) == 1\neven_bit_set_number(172) == 1\neven_bit_set_number(173) == 1\neven_bit_set_number(174) == 1\neven_bit_set_number(175) == 1\neven_bit_set_number(176) == 1\neven_bit_set_number(177) == 1\neven_bit_set_number(178) == 1\neven_bit_set_number(179) == 1\neven_bit_set_number(180) == 1\neven_bit_set_number(181) == 1\neven_bit_set_number(182) == 1\neven_bit_set_number(183) == 1\neven_bit_set_number(184) == 1\neven_bit_set_number(185) == 1\neven_bit_set_number(186) == 1\neven_bit_set_number(187) == 1\neven_bit_set_number(188) == 1\neven_bit_set_number(189) == 1\neven_bit_set_number(190) == 1\neven_bit_set_number(191) == 1\neven_bit_set_number(192) == 1\neven_bit_set_number(193) == 1\neven_bit_set_number(194) == 1\neven_bit_set_number(195) == 1\neven_bit_set_number(196) == 1\neven_bit_set_number(197) == 1\neven_bit_set_number(198) == 1\neven_bit_set_number(199) == 1\neven_bit_set_number(200) == 1\neven_bit_set_number(201) == 1\neven_bit_set_number(202) == 1\neven_bit_set_number(203) == 1\neven_bit_set_number(204) == 1\neven_bit_set_number(205) == 1\neven_bit_set_number(206) == 1\neven_bit_set_number(207) == 1\neven_bit_set_number(208) == 1\neven_bit_set_number(209) == 1\neven_bit_set_number(210) == 1\neven_bit_set_number(211) == 1\neven_bit_set_number(212) == 1\neven_bit_set_number(213) == 1\neven_bit_set_number(214) == 1\neven_bit_set_number(215) == 1\neven_bit_set_number(216) == 1\neven_bit_set_number(217) == 1\neven_bit_set_number(218) == 1\neven_bit_set_number(219) == 1\neven_bit_set_number(220) == 1\neven_bit_set_number(221) == 1\neven_bit_set_number(222) == 1\neven_bit_set_number(223) == 1\neven_bit_set_number(224) == 1\neven_bit_set_number(225) == 1\neven_bit_set_number(226) == 1\neven_bit_set_number(227) == 1\neven_bit_set_number(228) == 1\neven_bit_set_number(229) == 1\neven_bit_set_number(230) == 1\neven_bit_set_number(231) == 1\neven_bit_set_number(232) == 1\neven_bit_set_number(233) == 1\neven_bit_set_number(234) == 1\neven_bit_set_number(235) == 1\neven"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     even_bit_set_number(2) == 4\nassert     even_bit_set_number(12) == 14\nassert     even_bit_set_number(15) == 16\nassert     even_bit_set_number(1024) == 1022\nassert     even_bit_set_number(4096) == 4098\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(even_bit_set_number(0x11)) \nprint(even_bit_set_number(0xEE)) \nprint(even_bit_set_number(0xA1)) \nprint(even_bit_set_number(0xEE1)) \nprint(even_bit_set_number(0x11A1)) \nprint(even_bit_set_number(0xEEA1)) \nprint(even_bit_set_number(0xEE1A)) \nprint(even_bit_set_number(0xFFFF)) \nprint(even_bit_set_number(0xFFFFF)) \nprint(even_bit_set_number(0xFFFFFF)) \nprint(even_bit_set_number(0xFFFFFFFF)) \nprint(even_bit_set_number(0xFFFFFFFFF)) \nprint(even_bit_set_number(0xFFFFFFFFFF)) \nprint(even_bit_set_number(0xFFFFFFFFFFFF)) \n\n\n'''\nTime Complexity \n\nLet N be the number of bits in the given number.\nIf N = 1, then the number has only one bit in it, \nand that bit must be set.\nSo, this is a base case.\n\nIf N > 1, then the number has N bits in it.\nSince this is a bit-wise operator, \nthere are N different cases of operation.\nSo, this is the recursive call.\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \neven_bit_set_number(1) == True\neven_bit_set_number(4) == False\neven_bit_set_number(1000) == True\neven_bit_set_number(0) == False\neven_bit_set_number(2) == False\neven_bit_set_number(17) == False\neven_bit_set_number(123456789) == True\neven_bit_set_number(0x3d2f3d2f) == False\neven_bit_set_number(0xfffffffc) == False\neven_bit_set_number(0xffffffff) == True\neven_bit_set_number(
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_occurences([('a', 'a'), ('b', 'b'), ('a', 'c')]) == {('a', 'a'): 2, ('b', 'b'): 1, ('a', 'c'): 1}\nassert check_occurences([('a', 'a'), ('b', 'b'), ('a', 'b')]) == {('a', 'a'): 2, ('b', 'b'): 1}\nassert check_occurences([('a', 'a'), ('b', 'b')]) == {('a', 'a'): 2, ('b', 'b'): 1}\nassert check_occurences([]) == {}\nassert check_occurences([('a',), ('b',)]) == {}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_occurences([]) == {}\nassert     check_occurences([(0, 1), (0, 1), (0, 1)]) == {(0, 1): 3}\nassert     check_occurences([(0, 1), (0, 1), (0, 1), (0, 1), (0, 1)]) == {(0, 1): 5}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef count_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    pass\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_occurences([(1, 2, 3), (1, 2, 3), (2, 3, 4), (2, 3, 4), (2, 4, 5), (3, 4, 5), (3, 4, 5)]) == \\\n        {(1, 2, 3): 3, (2, 3, 4): 3, (2, 4, 5): 2, (3, 4, 5): 2}\nassert     check_occurences([(1, 2, 3), (1, 2, 3), (1, 2, 3)]) == {(1, 2, 3): 3}\nassert     check_occurences([(1, 2, 3), (1, 2, 3), (2, 3, 4), (2, 3, 4), (2, 4, 5), (3, 4, 5), (3, 4, 5)]) == {(1, 2, 3): 3, (2, 3, 4): 2, (2, 4, 5): 2, (3, 4, 5): 2}\nassert     check_occurences([]) == {}\nprint('all tests passed')\n\ndef is_valid_password(password):\n    '''\n    Write a function that takes in a password and returns whether or not it is valid. A valid password must contain at least 1 uppercase letter, 1 lowercase letter, 1 number, and 1 special character. (Letter, number, and special character counts as 1 each)\n    '''\n    pass\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_occurences([(3, 3, 3), (2, 3, 3), (3, 2, 2), (1, 2, 2), (1, 3, 1), (2, 1, 1), (3, 1, 1)]) == {(1, 2, 1): 1, (2, 1, 1): 2, (3, 1, 1): 3, (3, 2, 2): 1, (2, 3, 3): 1, (1, 3, 1): 1, (2, 2, 2): 2, (3, 3, 3): 1}\nassert     check_occurences([(1, 1, 1), (1, 1, 1), (1, 2, 2), (1, 1, 1), (2, 1, 1), (3, 1, 1), (1, 1, 1), (3, 2, 2), (3, 3, 3)]) == {(1, 1, 1): 5, (1, 2, 2): 1, (1, 1, 1): 3, (2, 1, 1): 2, (3, 1, 1): 3, (1, 1, 1): 3, (3, 2, 2): 1, (3, 3, 3): 1}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_occurences([(1,2), (1,2), (1,2), (1,2), (1,2)]) == {(1,2): 5}\nassert     check_occurences([(1,2), (1,2), (1,2), (1,2), (1,2), (1,2)]) == {(1,2): 6}\nassert     check_occurences([(1,2), (2,3), (1,2), (1,2), (1,2)]) == {(1,2): 3, (2,3): 1}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert Counter(check_occurences([(1,2),(1,1),(1,2),(1,2)])) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,2),(1,1),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,2),(1,1),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,2),(1,1),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))) == Counter(Counter(check_occurences([(1,1),(1,2),(1,2),(1,2)]))"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_occurences([(1, 3), (2, 2), (2, 1)]) == {(1, 3): 2, (2, 2): 1, (2, 1): 1}\nassert     check_occurences([(1, 3), (3, 5), (2, 2)]) == {(1, 3): 2, (3, 5): 1, (2, 2): 1}\nassert     check_occurences([(1, 3), (2, 2), (2, 1), (1, 4), (3, 5)]) == {(1, 3): 3, (2, 2): 2, (2, 1): 1, (1, 4): 1, (3, 5): 1}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_occurences([(1,2),(2,3),(1,2),(2,3),(1,2)]) == {(1,2,3): 2, (2,3,1): 3, (1,2): 1, (2,3): 1}\nassert check_occurences([(1,2),(2,3),(1,2),(2,3),(1,2)]) == {(1,2,3): 2, (2,3,1): 3, (1,2): 1, (2,3): 1}\nassert check_occurences([(1,2),(2,3),(1,2),(2,3),(1,2),(1,2),(2,3)]) == {(1,2,3): 3, (2,3,1): 2, (1,2): 2, (2,3): 1}\nassert check_occurences([(1,2),(2,3),(1,2),(2,3),(1,2),(1,2),(2,3),(1,2)]) == {(1,2,3): 4, (2,3,1): 3, (1,2): 2, (2,3): 1}"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     number_of_substrings('') == 0, \"String should be empty.\"\nassert number_of_substrings('a') == 1, \"String should only contain one character.\"\nassert number_of_substrings('aaaa') == 4, \"String should contain four non-empty substrings.\"\nassert number_of_substrings('aabca') == 2, \"String should contain two non-empty substrings.\"\nassert number_of_substrings('aabcabc') == 3, \"String should contain three non-empty substrings.\"\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     number_of_substrings('A') == 1 \nassert     number_of_substrings('AAA') == 1 \nassert     number_of_substrings('ABA') == 2 \nassert     number_of_substrings('AAAB') == 3\n\nprint(\"The tests ran successfully\")\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     number_of_substrings('abbba') == 3\nassert     number_of_substrings('aba') == 2\nassert     number_of_substrings('ab') == 1\nassert     number_of_substrings('') == 0"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     number_of_substrings(\"\") == 0, \"empty string\"\nassert     number_of_substrings(\"h\") == 1, \"one char\"\nassert     number_of_substrings(\"aa\") == 2, \"two chars\"\nassert     number_of_substrings(\"pqrstuvwxyz\") == 28, \"alphabet\"\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     number_of_substrings(\"1\") == 1\nassert     number_of_substrings(\"1 abc 1\") == 3\nassert     number_of_substrings(\"12a1b 1\") == 4\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     number_of_substrings(\"\") == 0, \"Your result is wrong.\"\nassert number_of_substrings(\"a\") == 1, \"Your result is wrong.\"\nassert number_of_substrings(\"abc\") == 3, \"Your result is wrong.\"\nassert number_of_substrings(\"abcdef\") == 6, \"Your result is wrong.\"\nassert number_of_substrings(\"aabc\") == 2, \"Your result is wrong.\"\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     number_of_substrings('aab') == 2\nassert     number_of_substrings('a') == 1\nassert     number_of_substrings('ab') == 2\nassert     number_of_substrings('') == 0\nassert     number_of_substrings('') == 0\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert (number_of_substrings('a') == 1)\nassert (number_of_substrings('aa') == 2)\nassert (number_of_substrings('abc') == 3)\nassert (number_of_substrings('abac') == 3)\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    number_of_substrings(\"substring\") == 2\n    number_of_substrings(\"\") == 1\n    number_of_substrings(\"\") == 1\n    number_of_substrings(\"a\") == 1\n    number_of_substrings(\"ab\") == 2\n    number_of_substrings(\"abcd\") == 3\n    number_of_substrings(\"abcdabc\") == 4\n    number_of_substrings(\"abcdabcdefg\") == 10\n\ndef number_of_substrings_optimized(str):\n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    pass\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert (number_of_substrings(\"abc\") == 2)\nassert (number_of_substrings(\"abcc\") == 4)\nassert (number_of_substrings(\"\") == 0)\nassert (number_of_substrings(\"a\") == 1)\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_total_number_of_sequences(2,5) == 11\nassert     get_total_number_of_sequences(2,3) == 6\nassert     get_total_number_of_sequences(3,2) == 2\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_total_number_of_sequences(2,3) ==     8\nassert     get_total_number_of_sequences(4,3) ==    21\n\ndef get_total_number_of_sequences_mod_m(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    pass\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(get_total_number_of_sequences(2,4)) == 5 \nprint(get_total_number_of_sequences(3,3)) == 7 \nprint(get_total_number_of_sequences(7,5)) == 10\nprint(get_total_number_of_sequences(17,8)) == 28\nprint(get_total_number_of_sequences(17,7)) == 41\nprint(get_total_number_of_sequences(17,8)==33)"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_total_number_of_sequences(4,2) == 9\nassert     get_total_number_of_sequences(0,0) == 1\nassert     get_total_number_of_sequences(0,3) == 1\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_total_number_of_sequences(0,1) == 1, \"Expected 0\"\nassert     get_total_number_of_sequences(1,1) == 1, \"Expected 1\"\nassert     get_total_number_of_sequences(1,2) == 2, \"Expected 2\"\nassert     get_total_number_of_sequences(1,3) == 4, \"Expected 4\"\nassert     get_total_number_of_sequences(2,1) == 1, \"Expected 1\"\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_total_number_of_sequences(0,0) == 0\nassert     get_total_number_of_sequences(3,1) == 1\nassert     get_total_number_of_sequences(5,2) == 6\nassert     get_total_number_of_sequences(6,3) == 15\nassert     get_total_number_of_sequences(7,4) == 19\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_total_number_of_sequences(2, 4) == 8\nassert     get_total_number_of_sequences(3, 4) == 15\nassert     get_total_number_of_sequences(4, 4) == 21\nassert     get_total_number_of_sequences(3, 5) == 19\nassert     get_total_number_of_sequences(4, 5) == 25\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_total_number_of_sequences(4,3) == 2, \"Should be 2\"\nassert     get_total_number_of_sequences(5,4) == 5, \"Should be 5\"\nassert     get_total_number_of_sequences(6,4) == 5, \"Should be 5\"\nassert     get_total_number_of_sequences(2,3) == 0, \"Should be 0\"\nassert     get_total_number_of_sequences(1,4) == 0, \"Should be 0\"\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     replace_list([1,2,3,4,5],[6,7,8]) == [1,2,3,4,7,8]\nassert     replace_list([1,2,3,4,5],[]) == []\nassert     replace_list([1,2,3],[4,5,6]) == [1,2,4,5,3,6]\nassert     replace_list([],[]) == []\nassert     replace_list([],[1,2]) == [1,2]\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     replace_list([1, 2, 3, 4], [5, 6, 7]) == [1, 2, 3, 5, 6, 7]\nassert     replace_list([1, 2, 3, 4], [5, 6, 7, 8]) == [1, 2, 3, 5, 6, 7, 8]\nassert     replace_list([1, 2, 3, 4], []) == [1, 2, 3, 4]\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     replace_list([1,2,3,4,5], [3,4,5,6,7]) == [1,2,3,4,5,6,7]\nassert     replace_list([1,2,3,4,5], [6,7]) == [1,2,3,4,5,6,7]\nassert     replace_list([1,2,3], [4,5,6]) == [1,2,3,4,5,6]\nassert     replace_list([1,2], [3,4,5]) == [1,2,3,4,5]\nassert     replace_list([1,2,3], [4,5,6,7]) == [1,2,3,4,5,6,7]\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     replace_list([], []) == True, 'test case 1: empty lists'\nassert     replace_list([1], []) == False, 'test case 2: single element list'\nassert     replace_list([], [1]) == False, 'test case 3: empty list'\nassert     replace_list([1], [1]) == True, 'test case 4: same list'\nassert     replace_list([1,2,3], [1,2,3]) == True, 'test case 5: same length'\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     replace_list([1, 2, 3, 4], [3, 4, 5, 6]) == [1, 2, 3, 6]\nassert     replace_list([1, 2, 3, 4], [3, 4, 5]) == [1, 2, 3, 5]\nassert     replace_list([1, 2, 3, 4], [3]) == [1, 2, 3, 4]\nassert     replace_list([1, 2], [3, 4]) == [1, 2]\nassert     replace_list([], [3, 4]) == []\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     replace_list(['banana', 'apple', 'orange'], ['banana', 'cucumber', 'apple']) == ['banana', 'apple', 'orange', 'cucumber']\nassert     replace_list(['apple', 'orange', 'apple', 'pear'], ['green','red', 'yellow', 'black']) == ['apple', 'orange', 'apple', 'pear', 'green','red', 'yellow', 'black']\n\ndef compare_lists(list1,list2):\n    '''\n    Write a function that compares the contents of two lists. The function should return True if the lists are equal, False if they are not.\n    '''\n    pass\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef replace_dict(d1,d2):\n    '''\n    Write a function that takes in two dictionaries and replaces the last element of the first dictionary with the elements of the second dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     replace_list([1,2,3],[4,5]) == None\nassert replace_list([1,2,3],[4,5,6]) == 3\nassert replace_list([1,2,3,4],[4,5,6,7]) == 4\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     replace_list([1, 2, 3, 4], [5, 6, 7, 8]) == [1, 2, 3, 5, 6, 7, 8]\nassert     replace_list([7, 7, 7], [1, 2, 3, 4]) == [1, 2, 3, 4, 7, 7, 7]\nassert     replace_list([1, 2, 3, 4], [1, 2, 3]) == [1, 2, 3, 4]\nassert     replace_list([1, 2, 3], [1, 2, 3, 4]) == [1, 2, 3, 4]\nassert     replace_list([1, 2, 3], [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nassert replace_list([1,2,3],[4,5,6]) == [1,2,3,4,5,6]\nassert replace_list([4,5,6],[1,2,3]) == [1,2,3,4,5,6]\nassert replace_list([7,8,9],[1,2,3]) == [1,2,3,7,8,9]\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_charac(\"abcd\") == 4\nassert     count_charac(\"ABCD\") == 4\nassert     count_charac(\"abcde\") == 6\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert count_charac(\"\") == 0, \"Empty string\"\nassert count_charac(\"a\") == 1, \"One character\"\nassert count_charac(\"aaaa\") == 5, \"Addd Aaaa\"\nassert count_charac(\"AA\") == 2, \"Addd Aaaa\"\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_charac('Hello World') == 13, 'Wrong output'\n\ndef count_charac_non_param(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_charac('TEST') == 6\nassert count_charac('1') == 1\nassert count_charac('0') == 1\nassert count_charac('ab') == 2\nassert count_charac('1ab') == 3\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nassert count_charac('abcd') == 4\nassert count_charac('abcc') == 3\nassert count_charac('a') == 1\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_charac('abcd') == 5, 'wrong!'\nassert     count_charac('ab') == 2, 'wrong!'\nassert     count_charac('abcde') == 6, 'wrong!'\nassert     count_charac('abcde') == 6, 'wrong!'\nassert     count_charac('abc') == 3, 'wrong!'\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_charac('') == 0, 'count_charac should return 0'\nassert     count_charac('a') == 1, 'count_charac should return 1'\nassert     count_charac('abcdefgh') == 8, 'count_charac should return 8'\nassert     count_charac('abcdefghi') == 7, 'count_charac should return 7'\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     next_Perfect_Square(4) == 5\nassert next_Perfect_Square(5) == 10\nassert next_Perfect_Square(7) == 8\nassert next_Perfect_Square(11) == 13\nassert next_Perfect_Square(27) == 29\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert next_Perfect_Square(16) == 4\nassert next_Perfect_Square(15) == 4\nassert next_Perfect_Square(2) == 4\nassert next_Perfect_Square(9) == 6\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     next_Perfect_Square(5) == 6, \"5 should be 6\"\nassert     next_Perfect_Square(8) == 9, \"8 should be 9\"\nassert     next_Perfect_Square(10) == 11, \"10 should be 11\"\nassert     next_Perfect_Square(12) == 12, \"12 should be 12\"\nassert     next_Perfect_Square(15) == 15, \"15 should be 15\"\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(6) == 4\nnext_Perfect_Square(16) == 8\nnext_Perfect_Square(14) == 9\nnext_Perfect_Square(10) == 6\nnext_Perfect_Square(100) == 16\nnext_Perfect_Square(2) == 1\nnext_Perfect_Square(8) == 4\nnext_Perfect_Square(49) == 16\nnext_Perfect_Square(12) == 8\nnext_Perfect_Square(65) == 9\nnext_Perfect_Square(123) == 16\nnext_Perfect_Square(500) == 16\nnext_Perfect_Square(2 ** 2 ** 3) == 8\nnext_Perfect_Square(2 ** 9) == 16\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(1) == 1\nnext_Perfec"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     next_Perfect_Square(4) == 5\nassert     next_Perfect_Square(12) == 13\nassert     next_Perfect_Square(100) == 101\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef next_Perfect_Square_Recursive(N): \n    '''\n    Write a recursive Python function to find the next perfect square greater than a given number.\n    '''\n    pass\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint (next_Perfect_Square(12)) # expected output: 18\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     next_Perfect_Square(1) == 1\nassert     next_Perfect_Square(2) == 3\nassert     next_Perfect_Square(3) == 4\nassert     next_Perfect_Square(5) == 5\nassert     next_Perfect_Square(6) == 7\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    (next_Perfect_Square(1) == 1), \"Wrong\"\nassert \n    (next_Perfect_Square(6) == 7), \"Wrong\"\nassert \n    (next_Perfect_Square(9) == 10), \"Wrong\"\nassert \n    (next_Perfect_Square(20) == 19), \"Wrong\"\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n'''\ni/p :\n5\n\no/p :\n9\n\n'''\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_sum([10, 4, 3, 7, 5, 2, 8, 1, 9]) == 36\nassert     max_sum([0, 1, 3, 6, 4, 10, 8, 12, 9, 13, 2, 7]) == 27\nassert     max_sum([7, 2, 1, 4, 9, 5, 10, 0, 6, 8, 3, 12]) == 23\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint('check the correctness of max_sum')\nprint(max_sum([3, 8, -10, 5, 9, -12, 4, 7, 10]))\nprint(max_sum([3, 8, -10, 5, 9, -12, 4, 7, 10]))\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert max_sum([3, 6, 2, 10, 1, 9, 5]) == 22, \"Error\"\nassert max_sum([1, 2, 3, 4, 5]) == 12, \"Error\"\nassert max_sum([2, 3, 1, 4, 5]) == 10, \"Error\"\nassert max_sum([1, 2, 3, 4]) == 7, \"Error\"\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_sum([-1,-4,2,4,-3]) == 0\nassert     max_sum([-1,2,3,-4]) == -1\nassert     max_sum([-4,-3,2,4]) == 6\nassert     max_sum([-8,-8,-4,-2,-4,-1,-5,-5,-4,2,2]) == 5\nassert     max_sum([-2,-3,4,-1,2,-5,-4]) == 8\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(\"\\n\\nTEST-max_sum:\", max_sum([1,3,2,4,8,0])) # Expected 4\nprint(\"\\n\\nTEST-max_sum:\", max_sum([2,4,2,8,1,8,4,2,1,2,1])) # Expected 8\nprint(\"\\n\\nTEST-max_sum:\", max_sum([4,3,2,1,1,3])) # Expected 3\nprint(\"\\n\\nTEST-max_sum:\", max_sum([1,1,1,1,1,1])) # Expected 1\nprint(\"\\n\\nTEST-max_sum:\", max_sum([1,2,3,4,5,6,7,8,9])) # Expected 9\nprint(\"\\n\\nTEST-max_sum:\", max_sum([1,2,3,4,5,6,7,8,9])) # Expected 9\nprint(\"\\n\\nTEST-max_sum:\", max_sum([1,2,3,4,5,6,7,8,9])) # Expected 9\nprint(\"\\n\\nTEST-max_sum:\", max_sum([1,2,3,4,5,6,7,8,9])) # Expected 9\nprint(\"\\n\\nTEST-max_sum:\", max_sum([1,2,3,4,5,6,7,8,9])) # Expected 9\nprint(\"\\n\\nTEST-max_sum:\", max_sum([1,2,3,4,5,6,7,8,9])) # Expected 9\nprint(\"\\n\\nTEST-max_sum:\", max_sum([1,2,3,4,5,6,7,8,9])) # Expected 9\nprint(\"\\n\\nTEST-max_sum:\", max_sum([1,2,3,4,5,6,7,8,9])) # Expected 9\nprint(\"\\n\\nTEST-max_sum:\", max_sum([1,2,3,4,5,6,7,8,9])) # Expected 9\nprint(\"\\n\\nTEST-max_sum:\", max_sum([1,2,3,4,5,6,7,8,9])) # Expected 9\nprint(\"\\n\\nTEST-max_sum:\", max_sum([1,2,3,4,5,6,7,8,9])) # Expected 9\nprint(\"\\n\\nTEST-max_sum:\", max_sum([1,2,3,4,5,6,7,8,9])) # Expected 9\nprint(\"\\n\\nTEST-max_sum:\", max_sum([1,2,3,4,5,6,7,8,9])) # Expected 9\nprint(\"\\n\\nTEST-max_sum:\", max_sum([1,2,3,4,5,6,7,8,9])) # Expected 9\nprint(\"\\n\\nTEST-max_sum:\", max_sum([1,2,3,4,5,6,7,8,9])) # Expected 9\nprint(\"\\n\\nTEST-max_sum:\", max_sum([1,2,3,4,5,6,7,8,9])) # Expected 9\nprint(\"\\n\\nTEST-max_sum:\", max_sum([1,2,3,4,5,6,7,8,9])) # Expected 9\nprint(\"\\n\\nTEST-max_sum:\", max_sum([1,2,3,4,5,6,7,8,9])) # Expected 9\nprint(\"\\n\\nTEST-max_sum:\", max_sum([1,2,3,4,5,6,7,8,9])) # Expected 9\nprint(\"\\n\\nTEST-max_sum:\", max_sum([1,2,3,4,5,6,7,8,9])) # Expected 9\nprint(\"\\n\\nTEST-max_sum:\", max_sum([1,2,3,4,5,6,7,8,9])) # Expected 9\nprint(\"\\n\\nTEST-max_sum:\", max_sum([1,2,3,4,5,6,7,8,9])) # Expected 9\nprint(\"\\n\\nTEST-max_sum:\", max_sum([1,2,3,4,5,6,7,8,9])) # Expected 9\nprint(\"\\n\\nTEST-max_sum:\", max_sum([1,2,3,4,5,6,7,8,9])) # Expected 9\nprint(\"\\n\\nTEST-max_sum:\", max_sum([1,2,3,4,5,6,7,8,9])) # Expected 9\nprint(\"\\n\\nTEST-max_sum:\", max_sum([1,2,3,4,5,6,7,8,9])) # Expected 9\nprint(\"\\n\\nTEST-max_sum:\", max_sum([1,2,3,4,5,6,7,8,9])) # Expected 9\nprint(\"\\n\\nTEST-max_sum:\", max_sum([1,2,3,4,5,6,7,8,9])) # Expected 9\nprint(\"\\n\\nTEST-max_sum:\", max_sum([1,2,3,4,5,6,7,8,9])) # Expected 9\nprint(\"\\n\\nTEST-max_sum:\", max_sum([1,2,3,4,5,6,7,8,9])) # Expected 9\nprint(\"\\n\\nTEST-max_sum:\", max_sum([1,2,3,4,5,6,7,8,9])) # Expected 9\nprint(\"\\n\\nTEST-max_sum:\", max_sum([1,2,3,4,5,6,7,8,9])) # Expected 9\nprint(\"\\n\\nTEST-max_sum:\", max_sum([1,2,3,4,5,6,7,8,9])) # Expected 9\nprint(\"\\n\\nTEST-max_sum:\", max_sum([1,2,3,4,5,6,7,8,9])) # Expected 9\nprint(\"\\n\\nTEST-max_sum:\", max_sum([1,2,3,4,5,6,7,8,9])) # Expected 9\nprint(\"\\n\\nTEST-max_sum:\", max_sum([1,2,3,4,5,6,7,8,9])) # Expected 9\nprint(\"\\n\\nTEST-max_sum:\", max_sum([1,2,3,4,5,6,7,8,9])) # Expected 9\nprint(\"\\n\\nTEST-max_sum:\", max_sum([1,2,3,4,5,6,7,8,9])) # Expected 9\nprint(\"\\n\\nTEST-max_sum:\", max_sum([1,2,3,4,5,6,7,8,9])) # Expected 9\nprint(\"\\n\\nTEST-max_sum:\", max_sum([1,2,3,4,5,6,7,8,9])) # Expected 9\nprint(\"\\n\\nTEST-max_sum:\", max_sum([1,2,3,4,5,6,7,8,9])) # Expected 9\nprint(\"\\n\\nTEST-max_sum:\", max_sum([1,2,3,4,5,6,7,8,9])) # Expected 9\nprint(\"\\n\\nTEST-max_sum:\", max_sum([1,2,3,4,5,6,7,8,9])) # Expected 9\nprint(\"\\n\\nTEST-max_sum:\", ma"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_sum([9, 8, 6, 4, 3, 2, 1, 3, 5, 8, 8]) == 0\nassert     max_sum([1, 2, 3, 4, 5, 6, 7, 8]) == 7\nassert     max_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 14\nassert     max_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == 29\nassert     max_sum([10, 1, 4, 1, 2, 3, 2, 1]) == 10\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_sum([3,7,5,8,2,2]) == 15\nassert     max_sum([3,8,2,1,5,7]) == 14\nassert     max_sum([1,2,3,4,5]) == 15\nassert     max_sum([1]) == 1\nassert     max_sum([]) == 0\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     [3.0, 1.0, 1.4142135623730951] ==     [3.0, 1.0, sqrt(1.4142135623730951)]\nassert     [3.0, 1.0, 1.764193548387097] ==     [3.0, 1.0, sqrt(1.764193548387097)]\nassert     [3.0, 1.0, 2.23606797749979] ==     [3.0, 1.0, sqrt(2.23606797749979)]\nassert     [3.0, 1.0, 2.718281828459045] ==     [3.0, 1.0, sqrt(2.718281828459045)]\nassert     [3.0, 1.0, 3.0] ==     [3.0, 1.0, sqrt(3.0)]\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     babylonian_squareroot(10) == 2\nassert     babylonian_squareroot(100) == 2.5\nassert     babylonian_squareroot(2) == 1.4142135623730951\nassert     babylonian_squareroot(10000) == 2.3\nassert     babylonian_squareroot(100000) == 2.38\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     babylonian_squareroot(4) == 2.0\nassert     babylonian_squareroot(4.0) == 2.0\nassert     babylonian_squareroot(8.5) == 4.0\nassert     babylonian_squareroot(6.0) == 2.0\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     babylonian_squareroot(1) == 1\nassert     babylonian_squareroot(2) == 1.4142135623730951\nassert     babylonian_squareroot(3) == 1.7320508075688772\nassert     babylonian_squareroot(4) == 2\nassert     babylonian_squareroot(5) == 2.2360679774997897\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     babylonian_squareroot(10) == 3\nassert    babylonian_squareroot(100) == 10\nassert    babylonian_squareroot(1000) == 100\nassert    babylonian_squareroot(10000) == 1000\nassert    babylonian_squareroot(100000) == 10000"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef calculate_factorial(number):\n    '''\n    Write a function that computes the factorial of an integer.\n    '''\n    pass\n\nassert \n\ndef factorial_iterative(number):\n    '''\n    Write a function to compute the factorial of an integer using iteration.\n    '''\n    pass\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert abs(babylonian_squareroot(2) - 1) < 0.01, \"The computed square root is incorrect\"\nassert abs(babylonian_squareroot(3) - sqrt(3)) < 0.01, \"The computed square root is incorrect\"\nassert abs(babylonian_squareroot(4) - sqrt(4)) < 0.01, \"The computed square root is incorrect\"\nassert abs(babylonian_squareroot(5) - sqrt(5)) < 0.01, \"The computed square root is incorrect\"\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     babylonian_squareroot(3)    ==     1.0\nassert     babylonian_squareroot(4)    ==     2.0\nassert     babylonian_squareroot(5)    ==     2.0\nassert     babylonian_squareroot(8)    ==     2.0\nassert     babylonian_squareroot(10)    ==     3.0\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     babylonian_squareroot(1) == 1\nassert     babylonian_squareroot(2) == 1.41421356237309504880168872495\nassert     babylonian_squareroot(3) == 1.73205080756887729352744634243\nassert     babylonian_squareroot(4) == 2\nassert     babylonian_squareroot(5) == 2.4494897427831784945910184563\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     lps('abcde') == 3\nassert     lps('abcdea') == 4\nassert     lps('a') == 1\nassert     lps('b') == 1\nassert     lps('c') == 1\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nassert lps('forgeeksskeegfor') == 5\nassert lps('forgeeksskeeggeedkeeg') == 9\nassert lps('forgeeksskeegfor') == 6\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     lps(\"abcdcba\") == 3\nassert     lps(\"abcddcba\") == 5\nassert     lps(\"abcdcbaa\") == 6\nassert     lps(\"a\") == 1\nassert     lps(\"\") == 0\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     lps(\"aac\") == 1\nassert     lps(\"babad\") == 2\nassert     lps(\"cacac\") == 2\nassert     lps(\"babad\") == 2\nassert     lps(\"aac\") == 1\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     harmonic_sum(2) == 1\nassert     harmonic_sum(3) == 1 + 1/2\nassert     harmonic_sum(4) == 1 + 1/2 + 1/3\nassert     harmonic_sum(5) == 1 + 1/2 + 1/3 + 1/4\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nharmonic_sum(5) == 8\nharmonic_sum(7) == 42\nharmonic_sum(0) == 0\nharmonic_sum(-5) == -5"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     harmonic_sum(3) == 2.0, 'Error in test case #1'\nassert harmonic_sum(2) == 1.5, 'Error in test case #2'\nassert harmonic_sum(5) == 4.4, 'Error in test case #3'\nassert harmonic_sum(9) == 36.0, 'Error in test case #4'\nassert harmonic_sum(10) == 52.2, 'Error in test case #5'\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     harmonic_sum(1) == 0, 'Error in harmonic_sum'\nassert     harmonic_sum(2) == 1, 'Error in harmonic_sum'\nassert     harmonic_sum(3) == 2, 'Error in harmonic_sum'\nassert     harmonic_sum(4) == 2, 'Error in harmonic_sum'\nassert     harmonic_sum(5) == 2, 'Error in harmonic_sum'\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     harmonic_sum(2) == 1\nassert     harmonic_sum(3) == 2\nassert     harmonic_sum(5) == 5\nassert     harmonic_sum(10) == 55\nassert     harmonic_sum(100) == 243\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert         harmonic_sum(1) == 1\nassert         harmonic_sum(5) == 5\nassert         harmonic_sum(10) == 55\nassert         harmonic_sum(100) == 274\nassert         harmonic_sum(1000) == 169328\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     harmonic_sum(3) == 0, '3-1 = 2'\nassert     harmonic_sum(4) == 1, '4-1 = 3'\nassert     harmonic_sum(5) == 3, '5-1 = 4'\n\n'''\n[Coding Challenges]\n[H]ard Merge\n\n[M]in Max Sum\n'''\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nharmonic_sum(1) == 1\nharmonic_sum(2) == 2\nharmonic_sum(3) == 3\nharmonic_sum(10) == 55\nharmonic_sum(25) == 130\nharmonic_sum(50) == 3860\nharmonic_sum(72) == 12889\nharmonic_sum(101) == 2805666\nharmonic_sum(10 ** 5) == 14635153765\n\nharmonic_sum(10 ** 6)"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     harmonic_sum(1) == 1\nassert     harmonic_sum(2) == 2\nassert     harmonic_sum(3) == 2\nassert     harmonic_sum(4) == 3\nassert     harmonic_sum(5) == 5\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     harmonic_sum(1) == 1\nassert     harmonic_sum(2) == 1\nassert     harmonic_sum(3) == 2\nassert     harmonic_sum(4) == 2\nassert     harmonic_sum(5) == 4\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef intersection_list(list_nums1,list_nums2):\n    '''\n    Write a function to find the intersection of two lists.\n    '''\n    pass\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint('\\nTesting intersection_array')\nprint(\n    '''\n    Input: array_nums1 = [1, 2, 2, 1], array_nums2 = [2, 2]\n    Output: [2]\n    '''\n)\ntest_case_1 = [(1,2,2,1), (2,2)]\nprint('test_case_1 expected:', \n    [2],\n    '\\nresult:',\n    intersection_array(\n        array_nums1 = test_case_1[0],\n        array_nums2 = test_case_1[1]\n    )\n)\n\nprint(\n    '''\n    Input: array_nums1 = [1, 2, 2, 1], array_nums2 = [2, 2, 1]\n    Output: [2]\n    '''\n)\ntest_case_2 = [(1,2,2,1), (2,2,1)]\nprint('test_case_2 expected:', \n    [2],\n    '\\nresult:',\n    intersection_array(\n        array_nums1 = test_case_2[0],\n        array_nums2 = test_case_2[1]\n    )\n)\n\nprint(\n    '''\n    Input: array_nums1 = [1, 2, 2, 1], array_nums2 = [1, 2]\n    Output: []\n    '''\n)\ntest_case_3 = [(1,2,2,1), (1,2)]\nprint('test_case_3 expected:', \n    [],\n    '\\nresult:',\n    intersection_array(\n        array_nums1 = test_case_3[0],\n        array_nums2 = test_case_3[1]\n    )\n)\n\nprint(\n    '''\n    Input: array_nums1 = [1, 2, 2, 1], array_nums2 = [1]\n    Output: []\n    '''\n)\ntest_case_4 = [(1,2,2,1), (1)]\nprint('test_case_4 expected:', \n    [],\n    '\\nresult:',\n    intersection_array(\n        array_nums1 = test_case_4[0],\n        array_nums2 = test_case_4[1]\n    )\n)\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     intersection_array([1,2,3,4,5],[1,2,4,5,6]) == 4\nassert     intersection_array([1,2,3,4,5],[1,4,5,6,7]) == 5\nassert     intersection_array([1,2,3],[1,2,3]) == 3\nassert     intersection_array([1,2,3],[3,4,5]) == 0\nassert     intersection_array([1,2,3],[3,4,5,6,7]) == 0\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef intersection_list(list1, list2):\n    '''\n    Write a function to find the intersection of two lists.\n    '''\n    pass\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     intersection_array([1,3,4,6,8],[2,4,6,7,9]) == [4,6,8]\nassert     intersection_array([1,3,4,6,8],[2,4,6,7,9,6,7,9]) == [4,6,8]\nassert     intersection_array([1,3,4,6,8],[2,4,6,7,9,6,7,9]) == [4,6,8]\nassert     intersection_array([1,3,4,6,8],[2,4,6,7,9,6,7,9]) == [4,6,8]\n\nprint('PASSED ALL TEST CASES'"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     intersection_array([1,2,3],[1,2,3]) == [1,2]\nassert intersection_array([1,2,3],[1]) == [1]\nassert intersection_array([1,2,3],[2]) == [2]\nassert intersection_array([1,2,3],[1,2,3]) == [1,2]\nassert intersection_array([1,2],[1,2,3]) == [1]\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     intersection_array([1, 2, 3, 4], [1, 2, 3, 4]) == {1, 2, 3, 4}\nassert     intersection_array([1, 2, 3, 4], [1, 2, 4, 5, 6]) == {1, 2, 4}\nassert     intersection_array([1, 2, 3], [1, 2, 3, 4]) == {1, 2, 3}\nassert     intersection_array([2,3,4], [1,2,3,4]) == {1, 2, 3, 4}\nassert     intersection_array([], []) == set()\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_X((1,2,2), 2) == 2\nassert     count_X((1,2,2), 1) == 1\nassert     count_X((1,2,2), 3) == 0\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef count_X_1(tup, x):\n    return (tup.count(x))\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert count_X((2,2,3,2), 2) == 1\nassert count_X((2,2,3,2), 3) == 1\nassert count_X((2,2,3,2), 1) == 0\nassert count_X((2,2,3,2), 3) == 2\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_X([('apple',1), ('grape', 1), ('apple', 1)], 'apple') == 2\nassert     count_X([('apple',2), ('apple', 1), ('grape', 1), ('apple', 1)], 'apple') == 3\nassert count_X([], 'apple') == 0\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert count_X((), 1) == 0, 'Tuple should be empty.'\nassert count_X((1,), 1) == 1, 'Element should be present in the tuple.'\nassert count_X((2,3), 1) == 2, 'Element should be present in the tuple.'\nassert count_X((1,2,3), 1) == 3, 'Element should be present in the tuple.'\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef count_X_with_index(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    pass\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    count_X(('a', 'b', 'a', 'a', 'a', 'c'), 'a') == 2\n    count_X(('a', 'b', 'a', 'a', 'a', 'c'), 'b') == 3\n    count_X(('a', 'b', 'a', 'a', 'a', 'c'), 'c') == 1\n\n'''\n4. Write a python function count_X which takes in a tuple and an element and counts the occurences of the element in the tuple.\nExample:\ncount_X(('a', 'b', 'a', 'a', 'a', 'c'), 'a') == 2\ncount_X(('a', 'b', 'a', 'a', 'a', 'c'), 'b') == 3\ncount_X(('a', 'b', 'a', 'a', 'a', 'c'), 'c') == 1\n'''\ndef count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occurences of the element in the tuple.\n    '''\n    pass\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_X([1, 2, 3], 2) == 2\nassert count_X([1, 2, 3], -1) == 0\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef reverse_pair(seq, x):\n    '''\n    Write a python function that takes in a sequence and an element and reverse all the occurences of the element in the sequence.\n    '''\n    pass\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_X((1,2,3), 1) == 2\nassert     count_X((1,2,3), 2) == 2\nassert     count_X((1,2,3), 3) == 1\nassert     count_X((1,2,3), 4) == 0\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     insert_element([],1) == [1]\nassert     insert_element([1,2,3],1) == [1,1,2,3]\nassert     insert_element([1,2,3],2) == [1,2,1,2,3]\nassert     insert_element([1,2,3],0) == [0,1,2,1,2,3]\nassert     insert_element([1,2,3],4) == [1,2,3,1,2,3]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     insert_element([1,2,3,4],1) == [1,1,2,3,4,4]\nassert     insert_element([1,2,3,4],4) == [1,1,2,3,4,1,2,3,4]\nassert     insert_element([1,2,3,4],5) == [1,1,2,3,4,1,2,3,4,5]\nassert     insert_element([1,2,3,4],8) == [1,1,2,3,4,8,1,2,3,4]\nassert     insert_element([1,2,3,4],12) == [1,1,2,3,4,8,1,2,3,4,12]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     insert_element([1,2,3],4) == [4,1,2,3]\nassert     insert_element([],4) == [4]\nassert     insert_element([1,2,3],4) == [1,2,3,4]\nassert     insert_element([],4) == []\nassert     insert_element([1,2,3,4,5],6) == [1,2,3,4,5,6]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     insert_element([],1) == [1]\nassert     insert_element([1],1) == [1,1]\nassert     insert_element([1,2],1) == [1,1,1,2]\nassert     insert_element([2,1,4,1,2],1) == [1,1,1,2,1,4,2,2]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     insert_element([1,2,3,4,5],4) == [1,4,4,4,5]\nassert     insert_element([1,2,3,4,5],5) == [1,2,3,4,5,5]\nassert     insert_element([1,2,3,4,5],6) == [1,2,3,4,5,6]\nassert     insert_element([1,2,3,4,5],7) == [1,2,3,4,5,7]\nassert     insert_element([1,2,3,4,5],5) == [1,2,3,4,5,5]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef insert_element_before(list,before,after):\n    '''\n    Write a function that takes in a list and two elements and inserts the first element before the second element.\n    '''\n    pass\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     insert_element([3,7,8,4,6],5) == [3,7,8,4,5,6]\nassert     insert_element([3,7,8,4,6],6) == [3,7,8,4,6,5]\nassert     insert_element([3,7,8,4,6],7) == [3,7,8,4,6,5]\nassert     insert_element([3,7,8,4,6],8) == [3,7,8,4,6,5]\nassert     insert_element([3,7,8,4,6],9) == [3,7,8,4,6,5,9]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert insert_element([],10) == []\nassert insert_element([1, 2, 3], 5) == [5, 1, 2, 3]\nassert insert_element([1, 2, 3], 10) == [10, 1, 2, 3]\nassert insert_element([1, 2, 3], 1) == [1, 1, 2, 3]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef insert_element2(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    pass\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    # Your code goes here\n\nassert insert_element([1,2,3,4,5],6) == [1,2,3,4,6,5]\nassert insert_element([1,2,3,4,5],0) == [0,1,2,3,4,5]\nassert insert_element([1,2,3,4,5],6) == [1,2,6,3,4,5]\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     convert([1,1]) == ((0.0, 1.0), 0.0)\nassert     convert([0,1]) == ((0.0, 1.0), 0.0)\nassert     convert([-1,0]) == ((0.0, 1.0), 0.0)\nassert     convert([1,-1]) == ((0.0, 1.0), 0.0)\nassert     convert([1,-2]) == ((0.0, 2.0), math.pi)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     convert([1+2j, 3-4j, 5+6j, 7-8j, 9+10j, 11-12j, 13-14j, 15-16j, 17-18j, 19-20j]) == [(1+2j, 3-4j), (5+6j, 7-8j), (17-18j, 19-20j)], \"test should pass\"\nassert     convert([0+1j, 2+3j, 4+5j, 6+7j, 8+9j, 10+11j, 12+13j, 14+15j, 16+17j, 18+19j, 20+21j]) == [(0+1j, 2+3j), (4+5j, 6+7j), (18+19j, 20+21j)], \"test should pass\"\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     convert([0.2+0j, 0.1+0j, 0.1+0j]) == [(0.2, 0.1), (0.1, 0.1), (0.1, 0.1)], \"Wrong output\"\nprint(\"passed\")\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     convert([-1+1j, -1+1j, 1+1j, 1+1j]) ==    [(0.0, 1.0), (0.7853981633974483, 0.5), (3.141592653589793, 0.5), (3.141592653589793, 0.5)]\nassert convert([-1-1j, -1-1j, -1-1j, -1-1j]) ==    [(0.0, 1.0), (1.5707963267948966, 0.5), (1.5707963267948966, 0.5), (1.5707963267948966, 0.5)]\nassert convert([1-1j, 1+1j, 1-1j, 1+1j]) ==    [(0.0, 1.0), (1.5707963267948966, 0.5), (3.141592653589793, 0.5), (1.5707963267948966, 0.5)]\nassert convert([1+1j, 1+1j, 1+1j, 1+1j]) ==    [(0.0, 1.0), (1.5707963267948966, 0.5), (1.5707963267948966, 0.5), (1.5707963267948966, 0.5)]\nassert convert([-1-1j, -1-1j, -1-1j, -1-1j]) ==    [(0.0, 1.0), (-0.7853981633974483, 0.5), (-0.7853981633974483, 0.5), (-0.7853981633974483, 0.5)]\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nimport unittest\n\nclass TestConvert(unittest.TestCase):\n    def test_case_01(self):\n        self.assertEqual(convert({\"1\":1.0+1j}),(1.0,1.0))\n\n    def test_case_02(self):\n        self."
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nconvert(complex(1,2)) == (1.4142135623730951, 1.0)\nassert \nconvert(complex(-1,2)) == (1.4142135623730951, 1.0)\nassert \nconvert(complex(1,0)) == (1.0, 0.0)\nassert \nconvert(complex(0,1)) == (0.0, 1.0)\nassert \nconvert(complex(0,-1)) == (0.0, 1.0)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     convert(complex(1,1)) == (1.4142135623730951, 1.4142135623730951)\nassert     convert(complex(1,4)) == (1.4142135623730951, 4.71238898038469)\nassert     convert(complex(-1,4)) == (-1.4142135623730951, 4.71238898038469)\nassert     convert(complex(-1,1)) == (-1.4142135623730951, 1.4142135623730951)\nassert     convert(complex(-4,-3)) == (-4.71238898038469, 3.141592653589793)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     convert([1.0+1.0j, 2.0-1.0j, 1.0, 2.0]) ==    [(1.0, 1.0), (2.0, 1.0), (1.0, 2.0), (2.0, 2.0)]\nassert    convert([1.0, 1.0, 1.0, 1.0]) ==    [(1.0, 1.0)]\nassert    convert([1.0+1.0j, 1.0+1.0j, 1.0, 1.0]) ==    [(1.0, 1.0), (1.0, 1.0), (1.0, 1.0), (1.0, 1.0)]\nassert    convert([1.0+1.0j, 1.0+1.0j, 1.0, 1.0]) ==    [(1.0, 1.0)]\nassert    convert([1.0+1.0j, 1.0+1.0j, 1.0, 1.0]) ==    [(1.0, 1.0)]\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_integer([-1, 0, 1, 2, 3, 4, 5]) == 6\nassert count_integer([0, 1, 2, 3, 4, 5]) == 5\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_integer([0, 1, 2, 3, 4, 5, 6]) == 6, 'incorrect count_integer()'\nassert     count_integer([0, 1, 2, 'a', 4, 5, 6]) == 3, 'incorrect count_integer()'\nassert     count_integer([0, 1, 2, 3, 'a', 4, 5, 6]) == 4, 'incorrect count_integer()'\nassert     count_integer([]) == 0, 'incorrect count_integer()'\nassert count_integer([0, 1, 2, 3, 4, 5, 6]) == 6, 'incorrect count_integer()'\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef remove_second(list1):\n    '''\n    Write a python function that removes the second element from a given list.\n    '''\n    pass\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_integer([1, 2, 3, 4, 5, 6]) == 6, \"Error\"\nassert count_integer([1, 2, 3, 4, 5, 6.5, 6]) == 6, \"Error\"\nassert count_integer([-1, -2, -3, -4, -5, -6, -7]) == 7, \"Error\"\nassert count_integer([-1, -2, -3, -4, -5, -6, -7.5, -8]) == 7, \"Error\"\nassert count_integer([]) == 0, \"Error\"\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i].isdigit():\n            count = count + 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ncount_integer([1, 2, 3, 4, 5]) == 4\ncount_integer([1.1, 2, 3, 4, 5.1]) == 4\ncount_integer([True, False, True, False, True]) == 3\ncount_integer([1, 2, 3, \"\", 4, 5]) == 4\n\nprint(\"Success: count_integer\")\n\n'''\nWrite a python function that returns the maximum element of a given list.\n'''\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert count_integer([]) == 0\nassert count_integer([1,2,3,4,5]) == 5\nassert count_integer([]) == 0\nassert count_integer([1,3,5]) == 2\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ncount_integer([2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_integer([]) == 0\nassert     count_integer([2, 4, 6]) == 3\nassert     count_integer([10, 8, 15, 8, 10]) == 5\nassert     count_integer([2, 2, 2]) == 3\nassert count_integer([2]) == 1\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_integer([1, 2, 3, 4, 5, 6]) == 6\nassert     count_integer([2, 4, 6, 8, 10, 12]) == 5\nassert     count_integer([1, 2, 3, \"a\", 5, 5.0]) == 5\nassert     count_integer([]) == 0\n\ndef sum_integer(list1):\n    '''\n    Write a python function that returns the sum of integer elements in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     combinations_colors([1, 2, 3], 2) == [[(1, 1), (2, 2), (3, 3)], [(1, 2), (2, 3), (3, 1)], [(1, 3), (2, 2), (3, 1)], [(1, 3), (2, 1), (3, 2)], [(1, 2), (2, 3), (3, 1)], [(1, 3), (2, 1), (3, 2)]]\nassert     combinations_colors([1, 2], 2) == [[(1, 1), (2, 2)], [(1, 2), (2, 1)]]\n\ndef distinct_pairs(n):\n    '''\n    Write a function that takes in an integer n and returns the number of distinct pairs (x, y) such that x < y. \n    You may assume that n is not 0.\n    '''\n    pass\n\nassert distinct_pairs(0) == 0\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     combinations_colors([1,2,3,4], 2) == [(1,2), (1,3), (1,4), (2,3), (2,4), (3,4)]\nassert     combinations_colors([0,1,2,3,4], 2) == [(0,1), (0,2), (0,3), (0,4), (1,2), (1,3), (1,4), (2,3), (2,4), (3,4)]\nassert     combinations_colors([0,1,2,3,4], 3) == [(0,1,2), (0,1,3), (0,1,4), (0,2,3), (0,2,4), (0,3,4), (1,2,3), (1,2,4), (1,3,4), (2,3,4)]\nassert     combinations_colors([0,1,2,3,4], 4) == [(0,1,2,3), (0,1,2,4), (0,1,3,4), (0,1,4,4), (0,2,3,4), (0,2,4,4), (0,3,4,4), (1,2,3,4), (1,2,4,4), (1,3,4,4), (2,3,4,4)]\nassert     combinations_colors([1,2,3,4], 1) == [(1,)]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     combinations_colors(['apple', 'banana', 'grape', 'apple', 'banana', 'grape'], 2) == [['apple', 'apple'], ['banana', 'banana'], ['grape', 'grape'], ['grape', 'grape'], ['apple', 'banana'], ['apple', 'grape'], ['banana', 'banana'], ['banana', 'grape'], ['grape', 'banana'], ['grape', 'banana']]\n\n\ndef max_subarray(arr, n):\n    '''\n    Write a function that takes in a list of integers and a length n. The function should find the maximum sum subarray of the length n.\n    '''\n    # Your code here\n    pass\n\ndef max_subarray_dp(arr, n):\n    '''\n    Write a function that takes in a list of integers and a length n. The function should find the maximum sum subarray of the length n.\n    '''\n    # Your code here\n    pass\n\n\ndef max_subarray_dp_2(arr, n):\n    '''\n    Write a function that takes in a list of integers and a length n. The function should find the maximum sum subarray of the length n.\n    '''\n    # Your code here\n    pass\n\ndef max_subarray_dp_3(arr, n):\n    '''\n    Write a function that takes in a list of integers and a length n. The function should find the maximum sum subarray of the length n.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     combinations_colors([1,2,3], 3) == [(1,2,3), (1,3,2), (2,1,3), (2,3,1), (3,1,2), (3,2,1)]\nassert     combinations_colors([1,2,3], 1) == [(1,), (2,), (3,), (1,2), (1,3), (2,1), (2,3), (3,1), (3,2), (1,2,3)]\nassert     combinations_colors([\"red\", \"blue\", \"green\"], 3) == [(\"red\", \"blue\", \"green\"), (\"red\", \"green\", \"blue\"), (\"blue\", \"red\", \"green\"), (\"blue\", \"green\", \"red\"), (\"green\", \"red\", \"blue\"), (\"green\", \"blue\", \"red\")]\nassert     combinations_colors([1,2,3,4,5], 2) == [(1,2), (1,3), (1,4), (1,5), (2,3), (2,4), (2,5), (3,4), (3,5), (4,5)]\nassert     combinations_colors([1,2,3,4,5,6,7,8,9,10,11], 3) == [\n    (1,2,3), (1,2,4), (1,2,5), (1,3,4), (1,3,5), (1,4,5), (2,3,4), (2,3,5), (2,4,5), (3,4,5),\n    (1,2,3,4), (1,2,3,5), (1,2,4,5), (1,3,4,5), (2,3,4,5), (1,2,3,4,5), (1,2,4,5,3), (1,3,4,5,2), (2,3,4,5,1)\n]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     combinations_colors([1, 2], 1) == [[1]]\nassert     combinations_colors([1, 2], 2) == [[1, 2], [1, 2]]\nassert     combinations_colors([1, 2], 3) == [[1, 2, 2], [1, 2, 2], [1, 2, 2]]\nassert     combinations_colors([1, 2, 3, 4], 2) == [[1, 2], [1, 2], [1, 2], [1, 3], [1, 3], [1, 3], [1, 4], [1, 4], [1, 4], [1, 4], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 4], [2, 4], [2, 4], [2, 4], [3, 4], [3, 4], [3, 4], [3, 4], [4, 4], [4, 4], [4, 4], [4, 4], [5, 4], [5, 4], [5, 4], [5, 4], [6, 4], [6, 4], [6, 4], [6, 4], [7, 4], [7, 4], [7, 4], [7, 4], [8, 4], [8, 4], [8, 4], [8, 4], [9, 4], [9, 4], [9, 4], [9, 4]]\nassert     combinations_colors([1, 2], 3) == []\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     combinations_colors([1,2,3],1) == [(1,)]\nassert     combinations_colors([1,2,3],2) == [(1,2), (1,3), (2,3)]\nassert     combinations_colors([1,2,3],3) == [(1,2,3)]\nassert     combinations_colors([1,2,3],4) == [(1,2,3,4)]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     combinations_colors([1, 2, 3, 4, 5, 6, 7, 8], 2) == [\n    (1,2), (1,3), (1,4), (1,5), (1,6), (1,7), (1,8),\n    (2,1), (2,3), (2,4), (2,5), (2,6), (2,7), (2,8),\n    (3,1), (3,2), (3,4), (3,5), (3,6), (3,7), (3,8),\n    (4,1), (4,2), (4,3), (4,5), (4,6), (4,7), (4,8),\n    (5,1), (5,2), (5,3), (5,4), (5,6), (5,7), (5,8),\n    (6,1), (6,2), (6,3), (6,4), (6,5), (6,7), (6,8),\n    (7,1), (7,2), (7,3), (7,4), (7,5), (7,6), (7,8),\n    (8,1), (8,2), (8,3), (8,4), (8,5), (8,6), (8,7) ]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     combinations_colors([1,2,3], 2) == [[(1, 2), (1, 3)], [(1, 2), (2, 3)], [(1, 3), (2, 3)]]\nassert     combinations_colors(['a','b','c'], 2) ==     [\n    ('a', 'b'), \n    ('a', 'c'), \n    ('b', 'c')]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     combinations_colors([1,2,3,4], 3) == [(1,2,3), (1,2,4), (1,3,4), (2,3,4)]\nassert     combinations_colors([1,2,3,4], 2) == [(1,2), (1,3), (1,4), (2,3), (2,4), (3,4)]\nassert     combinations_colors([1,2,3], 4) == [(1,2,3,4)]\nassert     combinations_colors([1,2,3], 2) == [(1,2), (1,3), (2,3)]\nassert     combinations_colors([1,2,3], 1) == [(1,2), (1,3)]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert count_Primes_nums(10) == 4\nassert count_Primes_nums(100) == 4\nassert count_Primes_nums(1000) == 5\nassert count_Primes_nums(10000) == 6\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_Primes_nums(5) == 4\nassert     count_Primes_nums(7) == 5\n\ndef count_Primes_nums_2(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    pass"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_Primes_nums(10) == 5\nassert count_Primes_nums(100) == 25\nassert count_Primes_nums(1000) == 971\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_Primes_nums(5) == 4\nassert     count_Primes_nums(2) == 1\nassert     count_Primes_nums(10) == 5\nassert     count_Primes_nums(10) == 5\nassert     count_Primes_nums(1) == 0\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_Primes_nums(5) == 3, 'Wrong result'\nassert     count_Primes_nums(7) == 6, 'Wrong result'\nassert     count_Primes_nums(1) == 0, 'Wrong result'\nassert     count_Primes_nums(0) == 0, 'Wrong result'"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef count_Primes_sieve(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    pass\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert count_Primes_nums(10) == 5"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     swap_numbers(3,4) == (4,3)\nassert swap_numbers(5,8) == (8,5)\nassert swap_numbers(4,3) == (3,4)\nassert swap_numbers(6,6) == (6,6)\nassert swap_numbers(3,5) == (5,3)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     swap_numbers(1,2) == (2,1)\nassert     swap_numbers(9,2) == (2,9)\nassert     swap_numbers(1,7) == (7,1)\nassert     swap_numbers(3,7) == (7,3)\nassert     swap_numbers(3,6) == (6,3)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nswap_numbers(1,2) == (2,1)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert swap_numbers(1,2) == (2,1)\n\n'''\nWrite a function called \"max_in_list\" that takes in a list of numbers, and returns the maximum value in the list.\n'''\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     swap_numbers(4,5) == (5, 4)\nassert swap_numbers(9,5) == (5, 9)\nassert swap_numbers(4,9) == (9, 4)\nassert swap_numbers(9,4) == (4, 9)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nswap_numbers(1,2) == (2,1)\nswap_numbers(10,20) == (20,10)\nswap_numbers(1,1) == (1,1)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     swap_numbers(1,1) == (1, 1)\nassert     swap_numbers(6, 4) == (4, 6)\nassert     swap_numbers(7, 6) == (6, 7)\n\ndef max_num(x,y):\n    '''\n    Write a function that takes in two numbers and returns the largest of the two numbers.\n    '''\n    pass\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert         swap_numbers(4,3) == (3,4)\nassert         swap_numbers(3,2) == (2,3)\nassert         swap_numbers(2,1) == (1,2)\nassert         swap_numbers(1,0) == (0,1)\nassert         swap_numbers(10,10) == (10,10)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert         swap_numbers(1,2) == (2,1)\nassert         swap_numbers(1,2)!= (2,1)\nassert         swap_numbers(1,2)!= (2,1)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     maximize_elements((1,3), (3,2)) == (3, 3)\nassert     maximize_elements((1,3,2,3), (3,2,1,3)) == (3, 3)\n\n'''\n2.    Write a function that takes a list of tuples and returns a list of tuples with all the elements \nof the first list multiplied by the corresponding element in the second list. \n'''\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     maximize_elements((1, 2), (4, 3)) == (4, 3)\nassert     maximize_elements((1, 2), (3, 4)) == (3, 4)\nassert     maximize_elements((3, 4), (1, 2)) == (4, 3)\nassert     maximize_elements((1, 2), (2, 3)) == (4, 3)\nassert     maximize_elements((1, 2, 3, 4), (5, 4, 6, 7)) == (7, 6)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     maximize_elements((1,2,4,5,3), (5,4,2,1,3)) == (1, 2, 3, 4, 5)\nassert     maximize_elements((1,2,4,5,3), (5,4,3,2,1)) == (5, 4, 3, 2, 1)\nassert     maximize_elements((1,2,4,5,3), (3,2,1,4,5)) == (1, 2, 3, 4, 5)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     maximize_elements((1, 2), (3, 4)) == (4, 3)\nassert     maximize_elements((1, 3), (2, 4)) == (4, 4)\nassert     maximize_elements((1, 2, 3), (4, 5, 6)) == (6, 4)\nassert     maximize_elements((1, 2), (3, 4, 5)) == (4, 5)\nassert     maximize_elements((1, 2), (3, 4, 5, 6)) == (6, 5)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    # make sure that maximize_elements does its job\n    maximize_elements((1, 2, 5, 3), (4, 5, 1, 2)) == (1, 2, 5, 3)\n    maximize_elements((3, 5, 2, 1), (4, 5, 1, 2)) == (3, 5, 2, 1)\n    maximize_elements((5, 2, 1, 3), (4, 5, 1, 2)) == (5, 2, 1, 3)\n    maximize_elements((1, 2, 5, 3), (2, 4, 3, 1)) == (5, 2, 1, 3)\n    maximize_elements((1, 2, 5, 3), (3, 2, 5, 1)) == (5, 2, 1, 3)\n    maximize_elements((1, 2, 5, 3), (2, 4, 3, 1)) == (5, 2, 1, 3)\n    maximize_elements((1, 2, 5, 3), (3, 4, 2, 1)) == (5, 2, 1, 3)\n    maximize_elements((5, 2, 1, 3), (1, 2, 5, 3)) == (5, 2, 1, 3)\n    maximize_elements((1, 2, 5, 3), (2, 3, 5, 1)) == (5, 2, 1, 3)\n    maximize_elements((1, 2, 5, 3), (3, 2, 1, 5)) == (5, 2, 1, 3)\n    maximize_elements((1, 2, 5, 3), (2, 4, 3, 1)) == (5, 2, 1, 3)\n    maximize_elements((5, 2, 1, 3), (1, 2, 5, 3)) == (5, 2, 1, 3)\n    maximize_elements((1, 2, 5, 3), (2, 3, 5, 1)) == (5, 2, 1, 3)\n    maximize_elements((1, 2, 5, 3), (3, 2, 1, 5)) == (5, 2, 1, 3)\n    maximize_elements((5, 2, 1, 3), (1, 2, 5, 3)) == (5, 2, 1, 3)\n    maximize_elements((1, 2, 5, 3), (2, 4, 3, 1)) == (5, 2, 1, 3)\n    maximize_elements((1, 2, 5, 3), (3, 4, 2, 1)) == (5, 2, 1, 3)\n    maximize_elements((5, 2, 1, 3), (1, 2, 5, 3)) == (5, 2, 1, 3)\n    maximize_elements((1, 2, 5, 3), (2, 3, 5, 1)) == (5, 2, 1, 3)\n    maximize_elements((1, 2, 5, 3), (3, 2, 1, 5)) == (5, 2, 1, 3)\n    maximize_elements((5, 2, 1, 3), (1, 2, 5, 3)) == (5, 2, 1, 3)\n    maximize_elements((1, 2, 5, 3), (2, 4, 3, 1)) == (5, 2, 1, 3)\n    maximize_elements((1, 2, 5, 3), (3, 4, 2, 1)) == (5, 2, 1, 3)\n    maximize_elements((5, 2, 1, 3), (1, 2, 5, 3)) == (5, 2, 1, 3)\n    maximize_elements((1, 2, 5, 3), (2, 3, 5, 1)) == (5, 2, 1, 3)\n    maximize_elements((1, 2, 5, 3), (3, 2, 1, 5)) == (5, 2, 1, 3)\n    maximize_elements((5, 2, 1, 3), (1, 2, 5, 3)) == (5, 2, 1, 3)\n    maximize_elements((1, 2, 5, 3), (2, 4, 3, 1)) == (5, 2, 1, 3)\n    maximize_elements((1, 2, 5, 3), (3, 4, 2, 1)) == (5, 2, 1, 3)\n    maximize_elements((5, 2, 1, 3), (1, 2, 5, 3)) == (5, 2, 1, 3)\n    maximize_elements((1, 2, 5, 3), (2, 3, 5, 1)) == (5, 2, 1, 3)\n    maximize_elements((1, 2, 5, 3), (3, 2, 1, 5)) == (5, 2, 1, 3)\n    maximize_elements((5, 2, 1, 3), (1, 2, 5, 3)) == (5, 2, 1, 3)\n    maximize_elements((1, 2, 5, 3), (2, 4, 3, 1)) == (5, 2, 1, 3)\n    maximize_elements((1, 2, 5, 3), (3, 4, 2, 1)) == (5, 2, 1, 3)\n    maximize_elements((5, 2, 1, 3), (1, 2, 5, 3)) == (5, 2, 1, 3)\n    maximize_elements((1, 2, 5, 3), (2, 3, 5, 1)) == (5, 2, 1, 3)\n    maximize_elements((1, 2, 5, 3), (3, 2, 1, 5)) == (5, 2, 1, 3)\n    maximize_elements((5, 2, 1, 3), (1, 2, 5, 3)) == (5, 2, 1, 3)\n    maximize_elements((1, 2, 5, 3), (2, 4, 3, 1)) == (5, 2, 1, 3)\n    maximize_elements((1, 2, 5, 3), (3, 4, 2, 1)) == (5, 2, 1, 3)\n    maximize_elements((5, 2, 1, 3), (1, 2, 5, 3)) == (5, 2, 1, 3)\n    maximize_elements((1, 2, 5, 3), (2, 3, 5, 1)) == (5, 2, 1, 3)\n    maximize_elements((1, 2, 5, 3), (3, 2, 1, 5)) == (5, 2, 1, 3)\n    maximize_elements((5, 2, 1, 3), (1, 2, 5, 3)) == (5, 2, 1, 3)\n    maximize_elements((1, 2, 5, 3), (2, 4, 3, 1)) == (5, 2, 1, 3)\n    maximize_elements((1, 2, 5, 3), (3, 4, 2, 1)) == (5, 2, 1, 3)\n    maximize_elements((5, 2, 1, 3), (1, 2, 5, 3)) == (5, 2, 1, 3)\n    maximize_elements((1, 2, 5, 3), (2, 3, 5, 1)) == (5, 2, 1, 3)\n    maximize_elements((1, 2, 5, 3), (3, 2, 1, 5)) == (5, 2, 1, 3)\n    maximize_elements((5, 2, 1, 3), (1, 2, 5, 3)) == (5, 2, 1, 3)\n    maximize_elements((1, 2, 5, 3), (2, 4, 3, 1)) == (5, 2, 1, 3)\n    maximize_elements((1, 2, 5, 3), (3, 4, 2, 1)) == (5, 2, 1, 3)\n    maximize_elements((5, 2, 1, 3), (1, 2, 5, 3)) == (5, 2, 1, 3)\n    maximize_elements((1, 2, 5, 3), (2, 3, 5, 1)) == (5, 2, 1, 3)\n    maximize_elements((1, 2, 5, 3), (3, 2, 1, 5)) == (5, 2, 1, 3)\n    maximize_elements((5, 2, 1, 3), (1"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     maximize_elements((4,2), (1,3)) == (4,3)\nassert     maximize_elements((1,4), (2,3)) == (4,3)\nassert     maximize_elements((1,3), (2,4)) == (4,3)\nassert     maximize_elements((1,2), (3,4)) == (4,3)\nassert     maximize_elements((1,1), (3,4)) == (4,4)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     maximize_elements((1, 1, 2), (1, 2, 3)) == (2, 2, 3)\nassert maximize_elements((1, 2, 3), (1, 2, 3)) == (1, 1, 3)\nassert maximize_elements((1, 3, 2), (1, 3, 2)) == (1, 3, 3)\nassert maximize_elements((1, 2, 2), (1, 2, 2)) == (1, 1, 2)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     maximize_elements((5, 10), (-2, -4)) == (5, 10)\nassert     maximize_elements((2, 5), (-10, -7)) == (5, 10)\nassert     maximize_elements((1, 5), (-3, -7)) == (5, 10)\nassert     maximize_elements((5, 10), (2, 5)) == (5, 10)\nassert     maximize_elements((5, 10), (-2, -4)) == (5, 10)\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     newman_prime(100) == False\nassert     newman_prime(200) == False\nassert     newman_prime(1000) == True\nassert     newman_prime(10000) == False\nassert     newman_prime(1000000) == True\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     newman_prime(5) == 7\nassert     newman_prime(11) == 31\nassert     newman_prime(17) == 23\nassert     newman_prime(19) == 31\nassert     newman_prime(1) == 2\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     newman_prime(0) == 2, 'Should be 2'\nassert     newman_prime(1) == 3, 'Should be 3'\nassert     newman_prime(2) == 5, 'Should be 5'\nassert     newman_prime(3) == 7, 'Should be 7'\nassert     newman_prime(4) == 11, 'Should be 11'\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert newman_prime(1) == 5\nassert newman_prime(2) == 7\nassert newman_prime(3) == 11\nassert newman_prime(4) == 13\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     newman_prime(1) == 7 # 7th prime\nassert     newman_prime(2) == 11 # 11th prime\nassert     newman_prime(3) == 19 # 19th prime\nassert     newman_prime(4) == 29 # 29th prime\nassert     newman_prime(5) == 37 # 37th prime\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ndef test_newman_prime(solution):\n    assert solution(1) == 2\n    assert solution(2) == 3\n    assert solution(3) == 5\n    assert solution(10) == 29\n    "
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     newman_prime(10) == \"8989\", \"Failed\"\nassert     newman_prime(11) == \"8989\", \"Failed\"\nassert     newman_prime(12) == \"9187\", \"Failed\"\nassert     newman_prime(13) == \"9187\", \"Failed\"\nassert     newman_prime(14) == \"9187\", \"Failed\"\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     newman_prime(0) == 2\nassert newman_prime(1) == 3\nassert newman_prime(2) == 5\nassert newman_prime(3) == 7\nassert newman_prime(4) == 11\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint('PASSED!')\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ndivision_elements((1,2),(3,4)) == (1.0,2.0)\nassert \ndivision_elements((2,3),(3,4)) == (1.5,2.5)\nassert \ndivision_elements((2,2),(3,4)) == (1.0,2.0)\nassert \ndivision_elements((2,2),(2,2)) == (1.0,1.0)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     division_elements(('a','b','c','d'), ('x','y','z','a')) ==     ('1.0','0.5','0.2','0.1')\nassert     division_elements(('1','2','3','4'), ('5','6','7','8')) ==     ('0.2','0.4','0.6','0.8')\nassert     division_elements(('2.4','3.3','2.2','1.3'), ('1.2','2.2','1.4','2.5')) ==     ('0.25','0.35','0.15','0.24')\nassert     division_elements(('2.4','3.3','2.2','1.3'), ('1.1','2.2','1.4','2.5')) ==     ('0.2','0.4','0.6','0.8')\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     division_elements((1, 2, 3), (1, 2, 3)) == (1, 2, 3)\nassert     division_elements((1, 2, 3), (3, 4, 5)) == (3, 2, 1)\nassert     division_elements((1, 2, 3), (1, 2, 3)) == (1, 2, 3)\nassert     division_elements((1, 2, 3), (1, 2, 0)) == (1, 2, 0)\n\nprint('PASSED')\nprint()\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     division_elements((1, 4, 9), (2, 0, 6)) == (1, 4, 1)\nassert     division_elements((1, 4, 9), (2, -1, 6)) == (1, 0, 3)\nassert     division_elements((1, 4, 9), (2, 0, 6)) == (1, 4, 1)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(\"passed test for division_elements\")\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     (division_elements(('a', 'b'), ('c', 'd')) == ('1/2', '3/4')), 'Fails at division_elements'\nassert     (division_elements(('2', '4'), ('1', '2')) == ('0', '2')), 'Fails at division_elements'\nprint('PASSED')\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ndivision_elements((1, 2), (4, 3)) == 0.33\nassert division_elements((1, 2), (4, 3)) == 0.66\nassert division_elements((1, 2), (0, 1)) == 0.0\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     division_elements((1,2),(3,4)) ==     (1.25, 0.8)\nassert     division_elements((1.5,1.75),(1,2)) ==     (2.0, 0.5)\nassert     division_elements((1,2),(3,4)) ==     (1.0, 0.0)\nassert     division_elements((1.5,1.75),(1,2)) ==     (2.0, 0.5)\nassert     division_elements((0,1),(2,3)) ==     (0.5, 0.75)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     division_elements((1,2), (4,2)) == (0.5, 2.0)\nassert     division_elements((1,2), (0,2)) == (0.0, 2.0)\nassert     division_elements((4,2), (1,2)) == (2.0, 0.5)\nassert     division_elements((2,4), (1,2)) == (2.0, 2.0)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     division_elements((10, 2), (10, 2)) == (5, 4)\nassert     division_elements((10, 2), (10, 1)) == (10, 2)\nassert     division_elements((2, 3, 4), (0, 1, 2)) == (0, 1, 2)\nassert     division_elements((0, 2, 4), (1, 2, 3)) == (0, 2, 2)\nassert     division_elements((0, 2, 4), (10, 2, 3)) == (0, 2, 2)\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     split_two_parts([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5]), \"Wrong\"\nassert     split_two_parts([1, 2, 3, 4, 5, 6], 2) == ([1, 2], [3, 4, 5, 6]), \"Wrong\"\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     split_two_parts(list1, 2) == ([list1[0:2], list1[2:]]), 'Wrong output'\nassert     split_two_parts(list1, 4) == ([list1[0:4], list1[4:]]), 'Wrong output'\nassert     split_two_parts(list1, 6) == ([list1[0:6], list1[6:]]), 'Wrong output'\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef reverse_ints(list1):\n    '''\n    Write a function that takes in a list and reverses the order of the given list.\n    '''\n    pass\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     split_two_parts([], 2) == ([], []), 'Wrong answer'\nassert     split_two_parts([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5]), 'Wrong answer'\nassert     split_two_parts([1, 2, 3, 4, 5, 6, 7], 2) == ([1, 2, 3], [4, 5, 6, 7]), 'Wrong answer'\nassert     split_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], 2) == ([1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]), 'Wrong answer'\nassert     split_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], 2) == ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], \n        [26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]), 'Wrong answer'\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     split_two_parts(list1, 2) == ((list1[:2], list1[2:]), (list1[2:]))\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     split_two_parts([1,2,3,4,5,6,7,8,9], 3) == ([1,2,3,4,5,6,7,8], [9,10,11,12,13,14,15,16,17])\nassert     split_two_parts([1,2,3,4,5,6,7,8], 3) == ([1,2,3,4], [5,6,7,8])\nassert     split_two_parts([1,2,3,4,5,6,7,8,9], 2) == ([1,2,3,4,5,6,7,8], [9,10,11,12,13,14,15,16,17])\nassert     split_two_parts([1,2,3,4,5,6,7,8,9], 1) == ([1,2,3,4,5,6,7,8], [9])\nassert     split_two_parts([1,2,3,4,5,6,7,8], 0) == ([1], [2,3,4,5,6,7,8])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     split_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == ([1, 2, 3], [4, 5, 6, 7, 8, 9])\nassert     split_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9], 10) == ([1, 2, 3, 4], [5, 6, 7, 8, 9])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     dog_age(3) == 4, 'dog_age should output 4 for dog_age of 3'\nassert     dog_age(1) == 0, 'dog_age should output 0 for dog_age of 1'\nassert     dog_age(0) == 0, 'dog_age should output 0 for dog_age of 0'\nprint('Congratulations! All tests are passed!')\n\n'''\nLet's use it as a real world example: find the age of a dog\nusing its weight and height.\n'''\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     dog_age(70) == 21\nassert     dog_age(80) == 24\n\ndef dog_years_since_birth(birth_year):\n    '''\n    Write a function to calculate how many dog years a person has been alive\n    '''\n    pass\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     dog_age(10) == 21, \"dog_age should be 21\"\nassert     dog_age(3) == 0, \"dog_age should be 0\"\nassert     dog_age(7) == 27, \"dog_age should be 27\"\n\ndef dog_age_in_months(dog_age):\n    '''\n    Write a function to convert a dog's age in dog's years to its age in dog's months.\n    '''\n    pass\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef dog_years(name, w_age, h_age):\n    '''\n    Write a function that calculates a dog's age in human years.\n    '''\n    pass\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     dog_age(10) == 0\nassert     dog_age(8) == 3\nassert     dog_age(4) == 7\n\nprint('All tests passed')\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef dog_weight(w_lbs):\n    '''\n    Write a function to calculate a dog's weight in pounds.\n    '''\n    pass\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef dog_name(h_age,h_gender,h_color):\n    '''\n    Write a function to compute a dog's age in dog's years, given her/his age in\n    years, gender, and color.\n    '''\n    pass\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert [[1, 2], 3] == list_split([1, 2, 3], 2)\nassert [[1, 2], 3] == list_split([1, 2, 3, 4], 2)\nassert [[1, 2, 3], 4] == list_split([1, 2, 3, 4, 5], 2)\nassert [[1], 2] == list_split([1, 2], 1)\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef three_split(S,step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    pass\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     list_split([1,2,3,4,5,6,7,8,9], 3) == [[1,2,3],[4,5,6],[7,8,9]]\nassert     list_split([1,2,3,4,5,6,7,8,9], 2) == [[1,2],[3,4],[5,6],[7,8],[9]]\nassert     list_split([1,2,3,4,5,6,7,8,9], 4) == [[1,2,3,4],[5,6,7,8],[9]]\nassert     list_split([1,2,3,4,5,6,7,8,9], 1) == [[1,2,3,4,5,6,7,8,9]]\nassert     list_split([1,2,3,4,5,6,7,8,9], 0) == [[1,2,3,4,5,6,7,8,9]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nS = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"]\nstep = 2\n\nprint(list_split(S, step)"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert list_split([1,2,3], 3) == [[1,2],[3]]\nassert list_split([1,2,3], 1) == [[1,2,3]]\nassert list_split([1,2,3], 0) == [[1,2,3]]\nassert list_split([1,2,3], 5) == [[1,2,3]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     list_split([\"a\", \"b\", \"c\", \"d\"], 1) == [['a', 'b', 'c'], ['d']]\nassert     list_split([\"a\", \"b\", \"c\", \"d\"], 2) == [['a', 'b'], ['c', 'd']]\nassert     list_split([\"a\", \"b\", \"c\", \"d\"], 3) == [['a', 'b', 'c'], ['d']]\nassert     list_split([\"a\", \"b\", \"c\", \"d\"], 4) == [['a', 'b', 'c'], ['d']]\nassert     list_split([\"a\", \"b\", \"c\", \"d\"], 5) == [['a', 'b', 'c'], ['d']]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     list_split([1, 2, 3, 4, 5, 6, 7, 8], 1) == [[1], [2], [3, 4, 5], [6, 7, 8]]\nassert     list_split([1, 2, 3, 4, 5, 6, 7, 8], 3) == [[1, 2, 3], [4, 5, 6], [7, 8]]\nassert     list_split([1, 2, 3, 4, 5, 6, 7, 8], 5) == [[1, 2, 3, 4], [5, 6, 7, 8]]\nassert     list_split([1, 2, 3, 4, 5, 6, 7, 8], 8) == [[1, 2, 3, 4, 5], [6, 7, 8]]\nassert     list_split([1, 2, 3, 4, 5, 6, 7, 8], 9) == [[1, 2, 3, 4, 5, 6], [7, 8]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     list_split([1, 2, 3], 1) == [[1], [2], [3]]\nassert     list_split([1, 2, 3], 2) == [[1, 2], [3]]\nassert     list_split([1, 2, 3], 3) == [[1, 2, 3]]\nassert     list_split([1, 2, 3, 4], 1) == [[1], [2], [3, 4]]\nassert     list_split([1, 2, 3, 4], 2) == [[1, 2], [3, 4]]\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    lateralsurface_cube(1) == 2\n    lateralsurface_cube(2) == 6\n    lateralsurface_cube(3) == 12\n    lateralsurface_cube(4) == 24\n    lateralsurface_cube(5) == 40\n\ndef lateralsurface_hexagon(n):\n    '''\n    Write a function to find the lateral surface area of a hexagon given its side length.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nlateralsurface_cube(1) == 1\nlateralsurface_cube(5) == 10\nlateralsurface_cube(4) == 20\nlateralsurface_cube(6) == 30\nlateralsurface_cube(10) == 200"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\ndef lateralsurface_cylinder(l,r):\n    '''\n    Write a function to find the lateral surface area of a cylinder given its radius.\n    '''\n    pass\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nlateralsurface_cube(1) == 1\nlateralsurface_cube(2) == 4\nlateralsurface_cube(3) == 20\nlateralsurface_cube(4) == 35\nlateralsurface_cube(5) == 46\nlateralsurface_cube(6) == 62\nlateralsurface_cube(7) == 78\nlateralsurface_cube(8) == 94\nlateralsurface_cube(9) == 110\nlateralsurface_cube(10) == 122\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     lateralsurface_cube(2) == 6\nassert     lateralsurface_cube(3) == 12\nassert     lateralsurface_cube(4) == 20\nassert     lateralsurface_cube(5) == 24\nassert     lateralsurface_cube(6) == 30\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     lateralsurface_cube(1) == 1\nassert     lateralsurface_cube(2) == 6\nassert     lateralsurface_cube(3) == 18\nassert     lateralsurface_cube(4) == 24\nassert     lateralsurface_cube(5) == 30\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     lateralsurface_cube(3) == 8\nassert     lateralsurface_cube(4) == 24\nassert     lateralsurface_cube(5) == 60\nassert     lateralsurface_cube(6) == 108\nassert     lateralsurface_cube(7) == 144\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     lateralsurface_cube(3) == 8, 'Wrong'\nassert     lateralsurface_cube(6) == 20, 'Wrong'\nassert     lateralsurface_cube(7) == 32, 'Wrong'\nassert     lateralsurface_cube(8) == 48, 'Wrong'\nassert     lateralsurface_cube(9) == 72, 'Wrong'\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef square_Sum(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n'''\nProblem 4:\n\nFind the minimum number of function calls required for each of the following problems\n\nQuestion 1:\n\nWrite a function that takes a file path as input and returns the number of lines.\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nsquare_Sum(5) == 15\nsquare_Sum(9) == 900\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nsquare_Sum(4) == 29\nassert square_Sum(10) == 305\n\n'''\n\nQuestion 4:\nWrite a python function that takes in an integer n and returns the sum of the squares of the first n even natural numbers.\n'''\n\ndef square_Sum_Even(n):\n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n even natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     square_Sum(4) == 5\nassert     square_Sum(0) == 0\nassert     square_Sum(1) == 1\nassert     square_Sum(2) == 1\nassert     square_Sum(3) == 4\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     square_Sum(0) == 0, \"incorrect result\"\nassert     square_Sum(1) == 1, \"incorrect result\"\nassert     square_Sum(2) == 9, \"incorrect result\"\nassert     square_Sum(3) == 4, \"incorrect result\"\nassert     square_Sum(4) == 25, \"incorrect result\"\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_star_num(1) == 1\nassert     find_star_num(5) == 12\nassert     find_star_num(7) == 20\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nfind_star_num(5) == 5\nfind_star_num(7) == 6\nfind_star_num(11) == 8\nfind_star_num(15) == 9\nfind_star_num(17) == 10\n\nfind_star_num(100) == 99\nfind_star_num(101) == 100\nfind_star_num(102) == 101\nfind_star_num(103) == 102\nfind_star_num(104) == 103\nfind_star_num(105) == 104\nfind_star_num(106) == 105\nfind_star_num(107) == 106\nfind_star_num(108) == 107\nfind_star_num(109) == 108\nfind_star_num(110) == 109\nfind_star_num(111) == 110\nfind_star_num(112) == 111\nfind_star_num(113) == 112\nfind_star_num(114) == 113\nfind_star_num(115) == 114\nfind_star_num(116) == 115\nfind_star_num(117) == 116\nfind_star_num(118) == 117\nfind_star_num(119) == 118\nfind_star_num(120) == 119\nfind_star_num(121) == 120\nfind_star_num(122) == 121\nfind_star_num(123) == 122\nfind_star_num(124) == 123\nfind_star_num(125) == 124\nfind_star_num(126) == 125\nfind_star_num(127) == 126\nfind_star_num(128) == 127\nfind_star_num(129) == 128\nfind_star_num(130) == 129\nfind_star_num(131) == 130\nfind_star_num(132) == 131\nfind_star_num(133) == 132\nfind_star_num(134) == 133\nfind_star_num(135) == 134\nfind_star_num(136) == 135\nfind_star_num(137) == 136\nfind_star_num(138) == 137\nfind_star_num(139) == 138\nfind_star_num(140) == 139\nfind_star_num(141) == 140\nfind_star_num(142) == 141\nfind_star_num(143) == 142\nfind_star_num(144) == 143\nfind_star_num(145) == 144\nfind_star_num(146) == 145\nfind_star_num(147) == 146\nfind_star_num(148) == 147\nfind_star_num(149) == 148\nfind_star_num(150) == 149\nfind_star_num(151) == 150\nfind_star_num(152) == 151\nfind_star_num(153) == 152\nfind_star_num(154) == 153\nfind_star_num(155) == 154\nfind_star_num(156) == 155\nfind_star_num(157) == 156\nfind_star_num(158) == 157\nfind_star_num(159) == 158\nfind_star_num(160) == 159\nfind_star_num(161) == 160\nfind_star_num(162) == 161\nfind_star_num(163) == 162\nfind_star_num(164) == 163\nfind_star_num(165) == 164\nfind_star_num(166) == 165\nfind_star_num(167) == 166\nfind_star_num(168) == 167\nfind_star_num(169) == 168\nfind_star_num(170) == 169\nfind_star_num(171) == 170\nfind_star_num(172) == 171\nfind_star_num(173) == 172\nfind_star_num(174) == 173\nfind_star_num(175) == 174\nfind_star_num(176) == 175\nfind_star_num(177) == 176\nfind_star_num(178) == 177\nfind_star_num(179) == 178\nfind_star_num(180) == 179\nfind_star_num(181) == 180\nfind_star_num(182) == 181\nfind_star_num(183) == 182\nfind_star_num(184) == 183\nfind_star_num(185) == 184\nfind_star_num(186) == 185\nfind_star_num(187) == 186\nfind_star_num(188) == 187\nfind_star_num(189) == 188\nfind_star_num(190) == 189\nfind_star_num(191) == 190\nfind_star_num(192) == 191\nfind_star_num(193) == 192\nfind_star_num(194) == 193\nfind_star_num(195) == 194\nfind_star_num(196) == 195\nfind_star_num(197) == 196\nfind_star_num(198) == 197\nfind_star_num(199) == 198\nfind_star_num(200) == 199\nfind_star_num(201) == 200\nfind_star_num(202) == 201\nfind_star_num(203) == 202\nfind_star_num(204) == 203\nfind_star_num(205) == 204\nfind_star_num(206) == 205\nfind_star_num(207) == 206\nfind_star_num(208) == 207\nfind_star_num(209) == 208\nfind_star_num(210) == 209\nfind_star_num(211) == 210\nfind_star_num(212) == 211\nfind_star_num(213) == 212\nfind_star_num(214) == 213\nfind_star_num(215) == 214\nfind_star_num(216) == 215\nfind_star_num(217) == 216\nfind_star_num(218) == 217\nfind_star_num(219) == 218\nfind_star_num(220) == 219\nfind_star_num(221) == 220\nfind_star_num(222) == 221\nfind_star_num(223) == 222\nfind_star_num(224) == 223\nfind_star_num(225) == 224\nfind_star_num(226) == 225\nfind_star_num(227) == 226\nfind_star_num(228) == 227\nfind_star_num(229) == 228\nfind_star_num(230) == 229\nfind_star_num(231) == 230\nfind_star_num(232) == 231\nfind_star_num(233) == 232\nfind_star_num(234) == 233\nfind_star_num(235) == 234\nfind_star_num(236) == 235\nfind_star_num(237) == 236\nfind_star_num(238) == 237\nfind_star_num(239) == 238\nfind_star_num(240) == 239\nfind_star_num(241) == 240\nfind_star_num(242) == 241\nfind_star_num(243) == 242\nfind_star_num(244) == 243\nfind_star_num(245) == 244\nfind_star_num(246) == 245\nfind_star_num(247) == 246\nfind_star_num(248) == 247\nfind_star_num(249) == 248\nfind_star_num(250) == 249\nfind_star_num(251) == 250\nfind_star_num(252) == 251\nfind_star_num(253) == 252\nfind_star_num(254) == 253\nfind_star_num(255) == 254\nfind_star_num(256) == 255\nfind_star_num(257) == 256\nfind_star_num(258) == 257\nfind_star_num(259) == 258\nfind_star_num(260) == 259\nfind_star_num(261) == 260\nfind_star_num(262) == 261\nfind_star_num(263) == 262\nfind_star_num(264) == 263\nfind_star_num(265) == 264\nfind_star_num(266) == 265\nfind_star_num(267) == 266\nfind_star_num(268) == 267\nfind_star_num(269) == 268\nfind_star_num(270) == 269\nfind_star_num(271) == 270\nfind_star_num(272) == 271\nfind_star_num(273) == 272\nfind_star_num(274) == 273\nfind_star_num(275) == 274\nfind_star"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_star_num(1) == 1\nassert     find_star_num(2) == 3\nassert     find_star_num(3) == 6\nassert     find_star_num(4) == 10\nassert     find_star_num(5) == 15\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_star_num(1) == 2\nassert     find_star_num(2) == 4\nassert     find_star_num(3) == 6\nassert     find_star_num(4) == 8\nassert     find_star_num(5) == 10\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_star_num(2) == 2\nassert     find_star_num(3) == 5\nassert     find_star_num(4) == 10\nassert     find_star_num(5) == 11\nassert     find_star_num(10) == 21\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(find_star_num(4))\n\nprint(find_star_num(20))\n\nprint(find_star_num(5))\n\nprint(find_star_num(3))\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert find_star_num(1) == 1\nassert find_star_num(2) == 3\nassert find_star_num(3) == 5\nassert find_star_num(4) == 7\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     ascii_value('a') == 65\nassert     ascii_value('A') == 65\nassert     ascii_value('b') == 66\nassert     ascii_value('E') == 101\nassert     ascii_value('D') == 110\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     ascii_value(' ') == 32, \\\n        \"Ascii value of'' is wrong.\"\nassert     ascii_value('a') == 97, \\\n        \"Ascii value of 'a' is wrong.\"\nassert     ascii_value('A') == 65, \\\n        \"Ascii value of 'A' is wrong.\"\nassert     ascii_value('0') == 48, \\\n        \"Ascii value of '0' is wrong.\"\n\ndef is_palindrome(text):\n    '''\n    Write a function to check whether a given text is palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     ascii_value('B') == 32\nassert     ascii_value('b') == 48\nassert     ascii_value('Z') == 122\nassert     ascii_value('z') == 90\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    assert ascii_value('a') == 97\n    assert ascii_value('b') == 98\n    assert ascii_value('c') == 99\n    assert ascii_value('d') == 100\n    "
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n     ascii_value('0') == 48\n     ascii_value('a') == 97\n     ascii_value('9') == 57\n     ascii_value('A') == 65\n     ascii_value('9') == 57\n     ascii_value('e') == 101\n     ascii_value('g') == 103\n     ascii_value('!') == 33\n     ascii_value('9') == 57\n     ascii_value('9') == 57\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    assert \n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('z') == 122\nassert     ascii_value('A') == 65\nassert     ascii_value('Z') == 90\nassert     ascii_value('~') == 95\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     ascii_value('0') == 48\nassert     ascii_value('1') == 49\nassert     ascii_value('a') == 97\nassert     ascii_value('A') == 65\nassert     ascii_value('e') == 101\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('B') == 98\nassert     ascii_value('c') == 99\nassert     ascii_value('\u00c9') == 114\nassert     ascii_value(' ') == 32\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10])==20, 'wrong answer'\nassert     sum_even_and_even_index([9,8,7,6,5,4,3,2,1,0])==0, 'wrong answer'\nassert     sum_even_and_even_index([9,8,7,6,5,4,3,2,1,0,2,3,4])==7, 'wrong answer'\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 18, \"1st test fails\"\nassert     sum_even_and_even_index([1, 3, 5, 7, 9]) == 14, \"2nd test fails\"\nassert     sum_even_and_even_index([1, 3, 5, 7, 9, 11]) == 20, \"3rd test fails\"\nassert     sum_even_and_even_index([1, 3, 5, 7, 9, 11, 13]) == 20, \"4th test fails\"\nassert     sum_even_and_even_index([1, 3, 5, 7, 9, 11, 13, 15]) == 28, \"5th test fails\"\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_even_and_even_index([2,4,6,8,10]) == 20\nassert     sum_even_and_even_index([1,2,3,4,5]) == 0\nassert     sum_even_and_even_index([-1,0,1,2,3]) == 4\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef sum_odd_and_odd_index(arr):  \n    '''\n    Write a python function to find the sum of odd numbers at odd positions of a list.\n    '''\n    pass\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_even_and_even_index([1,2,3,4,5,6,7,8,9]) == 10\nassert sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10]) == 20\nassert sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11]) == 30\nassert sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12]) == 60\nassert sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12,13]) == 70\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert sum_even_and_even_index([1,2,3,4,5]) == 10, 'test1 failed'\nassert sum_even_and_even_index([1,2,3,4,5,6]) == 16, 'test2 failed'\nassert sum_even_and_even_index([1,2,3,4,5,6,7]) == 18, 'test3 failed'\nassert sum_even_and_even_index([1,2,3,4,5,6,7,8]) == 20, 'test4 failed'\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_even_and_even_index([1,2,3,4,5]) == 1\nassert     sum_even_and_even_index([2,3,4,5,6,7]) == 21\nassert     sum_even_and_even_index([-1,0,1,2,3,4,5]) == 5\nassert     sum_even_and_even_index([-1,-2,-3,-4,-5]) == -2\nassert     sum_even_and_even_index([0,-1,-2,-3,-4,-5]) == 0\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8]) == 20, \"wrong answer\"\nassert     sum_even_and_even_index([-1, -2, -3, -4, -5, -6, -7, -8]) == -8, \"wrong answer\"\nassert     sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 16, \"wrong answer\"\nassert     sum_even_and_even_index([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == -8, \"wrong answer\"\nassert     sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 30, \"wrong answer\"\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     even_Power_Sum(1) == 1\nassert     even_Power_Sum(2) == 2\nassert     even_Power_Sum(3) == 6\nassert     even_Power_Sum(4) == 14\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert even_Power_Sum(5) == 24\nassert even_Power_Sum(2) == 16\nassert even_Power_Sum(7) == 290\nassert even_Power_Sum(1) == 1\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     even_Power_Sum(1) == 0\nassert     even_Power_Sum(2) == 1\nassert     even_Power_Sum(3) == 2\nassert     even_Power_Sum(4) == 3\nassert     even_Power_Sum(5) == 5\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \neven_Power_Sum(0) == 0\nassert even_Power_Sum(2) == 6\nassert even_Power_Sum(4) == 64\nassert even_Power_Sum(5) == 512\n\ndef even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    pass\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \neven_Power_Sum(3) == 14\nassert\neven_Power_Sum(4) == 20\nassert\neven_Power_Sum(5) == 25\nassert\neven_Power_Sum(10) == 1600\nassert\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \neven_Power_Sum(3) == 12, 'Wrong value'\nassert \neven_Power_Sum(8) == 250, 'Wrong value'\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     even_Power_Sum(5) == 2**5 + 2**5 + 2**5 + 2**5 + 2**5 == 50, \"Pass\"\nassert even_Power_Sum(2) == 2**5 + 2**5 + 2**5 == 5, \"Fail\"\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     even_Power_Sum(10) == 0\nassert even_Power_Sum(6) == 18\nassert even_Power_Sum(9) == 144\nassert even_Power_Sum(11) == 172\nassert even_Power_Sum(12) == 616\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     rear_extract([('a', 1), ('b', 2), ('c', 3)]) == ['b', 'c', 'a']\nassert     rear_extract([('a', 1), ('b', 2), ('c', 3)]) == ['c', 'b', 'a']\nassert     rear_extract([('a', 1), ('b', 2), ('c', 3)]) == ['a', 'c', 'b']\nassert     rear_extract([('a', 1), ('b', 2), ('c', 3)]) == ['b', 'a', 'c']\nassert     rear_extract([('a', 1), ('b', 2), ('c', 3)]) == ['a', 'b', 'c']\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     rear_extract([(1,2), (3,4), (5,6)]) == [(3,4), (5,6), (1,2)]\nassert     rear_extract([('a',2), ('b',3), ('c',4)]) == ['c', 'b', 'a']\nassert     rear_extract([(1,2), ('c',3), ('b',4)]) == [(1,2), ('c',3), ('b',4)]\nassert     rear_extract([(1,2), ('b',3), (3,4)]) == [(1,2), (3,4), ('b',3)]\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     rear_extract([('A', 1), ('B', 2), ('C', 3)]) == ['B', 'C', 'A']\nassert     rear_extract([('A', 1), ('B', 2), ('C', 3), ('D', 4)]) == ['C', 'B', 'A']\nassert     rear_extract([('A', 1), ('B', 2), ('C', 3), ('D', 4), ('E', 5)]) == ['C', 'B', 'A']\nassert     rear_extract([('A', 1), ('B', 2), ('C', 3), ('D', 4), ('E', 5), ('F', 6)]) == ['D', 'C', 'B', 'A']\nassert     rear_extract([('A', 1), ('B', 2), ('C', 3), ('D', 4), ('E', 5), ('F', 6), ('G', 7)]) == ['D', 'C', 'B', 'A']\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rear_extract([(1,2,3), (4,5), (6,7,8,9)]) == [9, 8, 7], \"Should be: [9, 8, 7]\"\nassert     rear_extract([]) == [], \"Should be: []\"\nassert     rear_extract([(1,2,3)]) == [3], \"Should be: [3]\"\nassert     rear_extract([(1,2,3)]) == [2], \"Should be: [2]\"\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     rear_extract([('p','a'), ('q','b'), ('r','c'), ('s','d'), ('t','e'), ('f','g')]) == ['c','d','e','g','f','p']\nassert    rear_extract([('a','b'), ('c','d'), ('e','f'), ('g','h'), ('i','j'), ('k','l')]) == ['i','j','k','l','g','h']\nassert    rear_extract([('a','b'), ('c','d'), ('e','f'), ('g','h'), ('i','j'), ('k','l')], ['h','g','i','j','k','l']) == ['h','g','i','j','k','l','j','k','i','l','g','h']\nassert    rear_extract([('a','b'), ('c','d'), ('e','f'), ('g','h'), ('i','j'), ('k','l')], ['i','j','k','l','g','h'], ['k','l','h']) == ['i','j','k','l','g','h','k','l','g','h']\nassert    rear_extract([('a','b'), ('c','d'), ('e','f'), ('g','h'), ('i','j'), ('k','l')], ['i','j','k','l','g','h'], ['k','l','h']) == ['i','j','k','l','g','h','i','j','k','l','g','h']\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rear_extract([(1,2),(3,4)]) == [2,4], 'incorrect'\nassert rear_extract([(1,2)]) == [2], 'incorrect'\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     rear_extract([(\"Tom\", \"Hanks\"), (\"John\", \"Smith\"), (\"Jane\", \"Doe\"), (\"Jill\", \"Doe\")]) == [\"John\", \"Tom\", \"Jill\", \"Jane\"]\nassert     rear_extract([(\"Tom\", \"Hanks\"), (\"John\", \"Smith\")]) == [\"John\", \"Tom\"]\nassert     rear_extract([(\"Tom\", \"Hanks\"), (\"Jane\", \"Doe\")]) == [\"Tom\", \"Jane\"]\nassert     rear_extract([(\"Tom\", \"Hanks\")]) == [\"Tom\"]\nassert     rear_extract([(\"Tom\", \"Hanks\")]) == [\"Tom\"]\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rear_extract([('a','b'),('c','d')]) == ['b','d']\nassert     rear_extract([('b','c'),('d','a')]) == ['c','a']\nassert     rear_extract([('a','b'),('c','d'),('e','f'),('g','h'),('i','j')]) == ['b','d','f','h','j']\nassert     rear_extract([('a','b'),('c','d'),('e','f'),('g','h'),('i','j'),('k','l'),('m','n'),('o','p'),('q','r')]) == ['b','d','f','h','j','k','l','n','o','p','r']\nassert     rear_extract([('a','b'),('c','d'),('e','f'),('g','h'),('i','j'),('k','l'),('m','n'),('o','p'),('q','r'),('s','t'),('u','v'),('w','x'),('y','z')]) == ['b','d','f','h','j','k','l','n','o','p','r','s','t','v','w','x','y','z']\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     rear_extract([('a', 1), ('b', 2), ('c', 3)]) == ['b', 'c', 'a']\nassert     rear_extract([('a', 1), ('b', 2), ('c', 3), ('a', 4), ('b', 5)]) == ['a', 'b', 'c', 'a', 'b']\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n[(1,3),(2,4),(3,5),(4,6)]\n== \n[(3,5),(2,4),(1,3),(4,6)]\n\n\n'''\nGiven a dictionary of students and their grades, create a Python list that contains their names and grades as a list of tuples. \nAlso, sort the list by the grade of the student in descending order.\n'''\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     substract_elements((1, 2, 3), (1, 2)) == (2, -1, -3)\nassert     substract_elements((1, 2, 3), (3, 2)) == (1, -2, -2)\nassert     substract_elements((1, 2, 3, 4), (1, 2)) == (2, -2, -2, -4)"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     substract_elements((1,2,3,4),(10,20,30,40)) == (-1, -2, -3, -4)\nassert substract_elements((1,2,3,4),(10,20,30,40,1)) == (-1, -2, -3, -4, -1)\nassert substract_elements((1,2,3,4),(10,20,30,40,2)) == (-1, -2, -3, -4, -2)\nassert substract_elements((1,2,3,4),(10,20,30,40,3)) == (-1, -2, -3, -4, -3)\nassert substract_elements((1,2,3,4),(10,20,30,40,4)) == (-1, -2, -3, -4, -4)\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    # expect an answer\n    # return the answer\n\nprint('This is an example of a correctly implemented function.\\n')\ntest_tup1 = (2, 6, 5, 7, 8, 5, 7, 3)\ntest_tup2 = (5, 6, 7, 8, 9, 10, 5)\n\nsubstract_elements(test_tup1, test_tup2)\n\nprint('This is an example of an incorrectly implemented function.\\n')\ntest_tup1 = (1, 5, 5, 7, 8, 5, 7)\ntest_tup2 = (5, 6, 7, 8, 9, 10, 5)\n\nsubstract_elements(test_tup1, test_tup2)\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     substract_elements((1, 2, 3), (3, 5, 7)) == (1, 2, -2)\nassert     substract_elements((1, 2, 3), (3, 2, 7)) == (1, 2, -4)\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     (substract_elements((1, 2, 3), (4, 5, 6)) == (1, 3, 5))\nassert     (substract_elements((3, 4, 6), (5, 6, 7)) == (0, 2, 5))\nassert     (substract_elements((0, 0, 0), (1, 2, 3)) == (0, 0, 0))\nassert     (substract_elements((0, 0, 0), (0, 0, 0)) == (0, 0, 0))\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     substract_elements((\"a\", \"b\", \"c\"), (\"d\", \"e\", \"f\")) == ((\"a\", \"b\", \"c\"), (\"d\", \"e\", \"f\"))\nassert     substract_elements((\"a\", \"b\", \"c\"), (\"a\", \"c\", \"d\")) == ((\"a\", \"b\", \"c\"), (\"a\", \"c\", \"d\"))\nassert     substract_elements((\"a\", \"b\", \"c\"), (\"a\", \"c\", \"d\")) == ((\"a\", \"b\", \"c\"), (\"a\", \"c\", \"d\"))\nassert     substract_elements((\"a\", \"b\", \"c\"), (\"c\", \"d\", \"e\")) == ((\"a\", \"b\", \"c\"), (\"c\", \"d\", \"e\"))\nassert     substract_elements((\"a\", \"b\", \"c\"), (\"c\", \"d\", \"e\")) == ((\"a\", \"b\", \"c\"), (\"c\", \"d\", \"e\"))\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     substract_elements((1,2,3), (4,5,6)) == (1,2,3)\nassert     substract_elements((1,2,3), (6,5,4)) == (0,2,3)\nassert     substract_elements((1,2,3), (1,2,3)) == (0,0,0)\nassert     substract_elements((1,2,3), (3,2,1)) == (0,0,0)\nprint(\"substract_elements - Test 1 is Passed\")\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     substract_elements((1,2,3,4), (1,2,3,4)) == (0,0,0,0)\nassert substract_elements((1,2,3,4), (1,2,4,3)) == (0,2,0,2)\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     substract_elements((), (1,2)) == ()\nassert     substract_elements((1,2,3), ()) == (1,2,3)\nassert     substract_elements((1,2,3), (1,)) == (2,3)\nassert     substract_elements((1,2,3), (1,2)) == (0,1)\nassert     substract_elements((1,2,3), (2,)) == (0,3)\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     even_binomial_Coeff_Sum(0) == 0\nassert     even_binomial_Coeff_Sum(2) == 0\nassert     even_binomial_Coeff_Sum(1) == 1\nassert     even_binomial_Coeff_Sum(5) == 1\nassert     even_binomial_Coeff_Sum(8) == 2\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nassert even_binomial_Coeff_Sum(1) == 1\nassert even_binomial_Coeff_Sum(2) == 2\nassert even_binomial_Coeff_Sum(3) == 4\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \neven_binomial_Coeff_Sum(1) == 1\nassert even_binomial_Coeff_Sum(2) == 0\nassert even_binomial_Coeff_Sum(3) == 4\nassert even_binomial_Coeff_Sum(4) == 0\nassert even_binomial_Coeff_Sum(5) == 8\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \neven_binomial_Coeff_Sum(4) == 16\nassert even_binomial_Coeff_Sum(5) == 18\nassert even_binomial_Coeff_Sum(6) == 18\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     even_binomial_Coeff_Sum(3) ==     1\nassert     even_binomial_Coeff_Sum(4) ==     3\nassert     even_binomial_Coeff_Sum(5) ==     7\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \neven_binomial_Coeff_Sum(10) == 5\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     even_binomial_Coeff_Sum(1) == 2\nassert     even_binomial_Coeff_Sum(2) == 1\nassert     even_binomial_Coeff_Sum(3) == 6\nassert     even_binomial_Coeff_Sum(4) == 12\nassert     even_binomial_Coeff_Sum(5) == 14\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \neven_binomial_Coeff_Sum( 0) == 0\nassert \neven_binomial_Coeff_Sum( 1) == 0\nassert \neven_binomial_Coeff_Sum( 2) == 1\nassert \neven_binomial_Coeff_Sum( 3) == 1\nassert \neven_binomial_Coeff_Sum( 4) == 1\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     even_binomial_Coeff_Sum(8) == 0\nassert     even_binomial_Coeff_Sum(16) == 1\nassert     even_binomial_Coeff_Sum(100) == 1\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     even_binomial_Coeff_Sum(2) == -1\nassert     even_binomial_Coeff_Sum(4) == 2\nassert     even_binomial_Coeff_Sum(10) == 55\nassert     even_binomial_Coeff_Sum(100) == 35179040\nassert     even_binomial_Coeff_Sum(2000) == 156528270922818303688\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     volume_cylinder(1,1) == 3.1415\nassert     volume_cylinder(2,1) == 1.5\nassert     volume_cylinder(2,2) == 4.083333333333334\nassert     volume_cylinder(2,3) == 6.82770\nassert     volume_cylinder(2,4) == 10.77777777777778\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     volume_cylinder(1,2) == 2, 'Problem 1'\nassert volume_cylinder(2,2) == 4, 'Problem 2'\nassert volume_cylinder(2,5) == 10, 'Problem 3'\nassert volume_cylinder(3,2) == 6, 'Problem 4'\nassert volume_cylinder(2,3) == 4, 'Problem 5'\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     volume_cylinder(2,3) == 8.083333333333334, \"Wrong value returned\"\nassert     volume_cylinder(0,3) == 0, \"Wrong value returned\"\nassert     volume_cylinder(1,3) == 3.14, \"Wrong value returned\"\nassert     volume_cylinder(5,3) == 52.57142857142857, \"Wrong value returned\"\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     volume_cylinder(1,2) == 2.56, 'Something is wrong'\nassert     volume_cylinder(1,4) == 5.68, 'Something is wrong'\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     volume_cylinder(2,3) == 7.4, \"The value of the volume is incorrect\"\nassert     volume_cylinder(2,3.1) == 7.4, \"The value of the volume is incorrect\"\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     volume_cylinder(1,2) == 1.33, 'incorrect calculation'\nassert     volume_cylinder(2,1) == 2.22, 'incorrect calculation'\nassert     volume_cylinder(1,1) == 1, 'incorrect calculation'\nassert     volume_cylinder(2,2) == 4.44, 'incorrect calculation'\nassert     volume_cylinder(3,2) == 9.65, 'incorrect calculation'\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     volume_cylinder(1,1) ==  3.14, 'incorrect'\nassert     volume_cylinder(1,2) ==  4.71, 'incorrect'\nassert     volume_cylinder(2,2) ==  8.57, 'incorrect'\nassert     volume_cylinder(2,5) ==  26.85, 'incorrect'\nassert     volume_cylinder(3,2) ==  23.72, 'incorrect'\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     volume_cylinder(1,2) == 3.141592653589793, \\\n    \"incorrect value for r, h\"\nassert     volume_cylinder(3,4) == 0.5625, \\\n    \"incorrect value for r, h\"\nassert     volume_cylinder(1,1) == 1, \\\n    \"incorrect value for r, h\"\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     volume_cylinder(3,4) == 20.5, 'incorrect'\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     dict_filter({'a': 2, 'b': 1, 'c': 1},2) == {'b': 1, 'c': 1}\nassert     dict_filter({'a': 2, 'b': 1, 'c': 1},1) == {'a': 2, 'b': 1, 'c': 1}\nassert     dict_filter({'a': 2, 'b': 1, 'c': 1},0) == {}\nassert     dict_filter({},0) == {}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     dict_filter({'a': 1, 'b': 2, 'c': 3}, 2) == {'b': 2, 'c': 3}, 'Test 1 Failed'\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3}, 1) == {'a': 1, 'b': 2, 'c': 3}, 'Test 2 Failed'\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3}, 3) == {'a': 1, 'b': 2, 'c': 3}, 'Test 3 Failed'\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3}, 4) == {}, 'Test 4 Failed'\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, 3) == {'c': 3, 'd': 4, 'e': 5}, 'Test 5 Failed'\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     dict_filter({'b': 1, 'a': 2, 'c': 3, 'd': 4}, 1) == {'b': 1, 'a': 2, 'c': 3, 'd': 4}\nassert     dict_filter({'b': 1, 'a': 2, 'c': 3, 'd': 4}, 3) == {'b': 1, 'd': 4}\nassert     dict_filter({'b': 1, 'a': 2, 'c': 3, 'd': 4}, 2) == {'b': 1, 'a': 2, 'c': 3, 'd': 4}\nassert     dict_filter({'b': 1, 'a': 2, 'c': 3, 'd': 4}, 0) == {}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     dict_filter({'a': 100, 'b': 200, 'c': 400}, 200) == {'a': 100, 'c': 400}, 'Wrong answer'\nassert dict_filter({'a': 100, 'b': 200, 'c': 400}, -1) == {}, 'Wrong answer'\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint('Check if the output is correct')\nprint('Expected Output: {True, False}')\nprint('Actual Output:',dict_filter({1: 1, 2: 1, 3: 1, 4: 0},1) == {True, False})"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     dict_filter({1:2, 3:4, 5:6},5) == {5:6}, \"Wrong answer\"\nassert     dict_filter({1:2, 3:4, 5:6},6) == {1:2, 3:4}, \"Wrong answer\"\nassert     dict_filter({1:2, 3:4, 5:6},2) == {1:2, 3:4}, \"Wrong answer\"\nassert     dict_filter({1:2, 3:4, 5:6},3) == {1:2}, \"Wrong answer\"\nassert     dict_filter({1:2, 3:4, 5:6},4) == {3:4}, \"Wrong answer\"\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     dict_filter({'a': 1, 'b': 2, 'c': 3}, 1) == {'a': 1, 'c': 3}, \"Should return dictionary with a's value 1 and c's value 3\"\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3}, 2) == {'b': 2, 'c': 3}, \"Should return dictionary with b's value 2 and c's value 3\"\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3}, 3) == {'a': 1, 'b': 2, 'c': 3}, \"Should return dictionary with a's value 1, b's value 2 and c's value 3\"\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3}, 4) == {}, \"Should return an empty dictionary\"\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3}, 5) == {}, \"Should return an empty dictionary\""
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     dict_filter({'apple':5,'peach':7,'orange':4}, 3) == {'apple': 5, 'orange': 4}, \"Should filter to include the key 'peach'.\"\nassert     dict_filter({'apple':5,'peach':7,'orange':4}, 5) == {'apple': 5}, \"Should filter to include the value 5 for 'peach'.\"\nassert     dict_filter({'apple':5,'peach':7,'orange':4}, 4) == {'apple': 5, 'orange': 4}, \"Should filter to include the key 'orange'.\"\nassert     dict_filter({'apple':5,'peach':7,'orange':4}, 1) == {'peach': 7, 'orange': 4}, \"Should filter to include the key 'peach'.\"\nassert     dict_filter({'apple':5,'peach':7,'orange':4}, 2) == {'apple': 5, 'peach': 7, 'orange': 4}, \"Should filter to include the key 'orange'.\"\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nd = {\"a\":5,\"b\":3,\"c\":4,\"d\":10}\nassert dict_filter(d,5) == {\"a\":5,\"b\":3,\"c\":4}\nassert dict_filter(d,2) == {\"b\":3,\"c\":4}\nassert dict_filter(d,20) == {}\nprint(\"YOUR CODE IS CORRECT!\")\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_first_elements(('a', 'b', 'a', 'a', 'b', 'a', 'a', 'b', 'c', 'd', 'd', 'd', 'a')) == 6\nassert     count_first_elements(('a', 'b', 'a', 'a', 'b', 'a', 'a', 'b', 'c', 'd', 'd', 'd', 'a', 'a', 'a')) == 9\nassert     count_first_elements(('a', 'b', 'a', 'a', 'b', 'a', 'a', 'b', 'c', 'd', 'd', 'd', 'a', 'a', 'a', 'a', 'a', 'a')) == 12\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_first_elements((1, 2, 2, 3, 3, 4, 5, 5, 5)) == 3, \\\n    \"You are not going to count the first elements correctly\"\nassert count_first_elements((1, 2, 2, 3, 3, 4, 5, 5, 5)) == 0, \\\n    \"You are not going to count the first elements correctly\"\nassert count_first_elements((5, 5, 5)) == 3, \\\n    \"You are not going to count the first elements correctly\"\nassert count_first_elements((5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5)) == 0, \\\n    \"You are not going to count the first elements correctly\"\n\n\ndef count_last_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs after the tuple element in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_first_elements(('a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c')) == 1, \"WRONG RESULT\"\nassert     count_first_elements(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c')) == 8, \"WRONG RESULT\"\nassert     count_first_elements(('a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c')) == 0, \"WRONG RESULT\"\nassert     count_first_elements(('a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c')) == 0, \"WRONG RESULT\"\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_first_elements(('Nikhil', 'Dhiraj', 'Ramesh', 'Aakash', 'Saumya')) == 4\nassert     count_first_elements(('Nikhil', 'Dhiraj', 'Ramesh', 'Aakash', 'Saumya', 'Virat', 'Sahil')) == 7\n\n'''\nProblem 6:\n    Write a function to sort the given array of string alphabetically.\n'''"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_first_elements(()) == 0, \"First element not found\"\nassert     count_first_elements((2,)) == 1, \"First element not found\"\nassert     count_first_elements((2,2)) == 1, \"First element not found\"\nassert     count_first_elements((1,1,2)) == 1, \"First element not found\"\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_first_elements([10, 20, 5, 10, 20, 5]) == 1, \"Error in count_first_elements\"\nassert     count_first_elements((\"Hi\", \"Goodbye\", \"I\", \"love\", \"Python\")) == 3, \"Error in count_first_elements\"\nassert     count_first_elements((-5, -4, -3, -2, -1)) == 5, \"Error in count_first_elements\"\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_first_elements(('a', 'a', 'b', 'c', 'c', 'c', 'c', 'a', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'a', 'b', 'c')) == 4\nassert count_first_elements(('a', 'a', 'b', 'c', 'c', 'c', 'c', 'a', 'a', 'b', 'c', 'a', 'b', 'c', 'a', 'a', 'b', 'c')) == 2"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_first_elements(('a', 'a', 'a', 'b', 'c', 'c', 'b', 'a')) == 4\nassert     count_first_elements(('a', 'b', 'c', 'a', 'b', 'c', 'a', 'b')) == 3\nassert     count_first_elements(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')) == 0\nassert     count_first_elements(('a', 'b', 'c', 'a', 'b', 'a', 'b')) == 0\nassert     count_first_elements(('a', 'b', 'a', 'a', 'b')) == 2\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_first_elements(('a', 'b', 'c', 'd', 'a', 'c')) == 2\nassert     count_first_elements(('a', 'a', 'b', 'c', 'a', 'c')) == 4\n\ndef count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_first_elements((1, 2, 1, 3)) == 2\nassert     count_first_elements((2, 1, 1, 3)) == 1\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert is_num_decagonal(1) == 1\nassert is_num_decagonal(2) == 5\nassert is_num_decagonal(3) == 13\nassert is_num_decagonal(4) == 24\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef test_is_num_decagonal():\n    assert is_num_decagonal(1) == 1\n    assert is_num_decagonal(2) == 3\n    assert is_num_decagonal(3) == 4\n    "
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert is_num_decagonal(1) == 1\nassert is_num_decagonal(4) == 5\nassert is_num_decagonal(10) == 55\nassert is_num_decagonal(20) == 7025\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_num_decagonal(1) == 1\nassert     is_num_decagonal(2) == 3\nassert     is_num_decagonal(3) == 5\nassert     is_num_decagonal(4) == 7\nassert     is_num_decagonal(5) == 11\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert not is_num_decagonal(3) \nassert not is_num_decagonal(13)\nassert is_num_decagonal(100)\nassert is_num_decagonal(999)\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_num_decagonal(2) == 3\nassert     is_num_decagonal(10) == 26\nassert     is_num_decagonal(100) == 438\nassert     is_num_decagonal(1000) == 30000\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sequential_search([], 1) == (False, -1)\nassert     sequential_search([1], 1) == (True, 0)\nassert     sequential_search([1, 2, 3], 1) == (True, 0)\nassert     sequential_search([1, 2, 3], 4) == (False, -1)\nassert     sequential_search([1, 2, 3, 4, 5], 5) == (True, 4)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sequential_search([], 1) == (False, -1)\nassert     sequential_search([1, 2, 3, 4, 5], 5) == (True, 3)\nassert     sequential_search([1, 2, 3, 4, 5], 1) == (True, 0)\nassert     sequential_search([1, 2, 3, 4, 5], 6) == (False, -1)\n\n'''\nThe test below shows an example of the output that would be printed\nif sequential_search was called on the following list of numbers and the element 6:\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sequential_search([2,4,6,8,10], 8) == (True, 3)\nassert     sequential_search([2,4,6,8,10], 2) == (True, 0)\nassert     sequential_search([2,4,6,8,10], 10) == (True, 4)\nassert     sequential_search([2,4,6,8,10], -1) == (False, -1)\nassert     sequential_search([], 10) == (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sequential_search(['a', 'c', 'e'], 'a') == (True, 0)\nassert     sequential_search(['a', 'c', 'e'], 'b') == (False, -1)\nassert     sequential_search(['a', 'c', 'e'], 'c') == (True, 1)\nassert     sequential_search(['a', 'c', 'e'], 'd') == (False, -1)\nassert     sequential_search(['a', 'c', 'e'], 'g') == (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    assert sequential_search([1,2,3,4],1) == (True, 0)\n    assert sequential_search([1,2,3,4],5) == (False, -1)\n    assert sequential_search([], 5) == (False, -1)\n    assert sequential_search([1,2,3,4,5], 5) == (True, 4)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sequential_search([1, 2, 3, 4], 5) == (False, -1)\nassert     sequential_search([1, 2, 3, 4], 3) == (True, 0)\nassert     sequential_search([1, 2, 3, 4], 0) == (False, -1)\nassert     sequential_search([], 4) == (False, -1)\nassert     sequential_search([1, 2, 3, 4], -1) == (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     all_unique([3,3,4,4,5,5]) == True, \"Error in all_unique\"\nassert     all_unique([3,3,4,4,4,4,5,5]) == True, \"Error in all_unique\"\nassert     all_unique([1,2,3]) == True, \"Error in all_unique\"\nassert     all_unique([1,2,2,2]) == True, \"Error in all_unique\"\nassert     all_unique([1,1,2,2,2,2,3,4]) == True, \"Error in all_unique\"\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     all_unique([1,2,3,4,5])\nassert     all_unique([1,1,2,2,3,3,3])\nassert     all_unique([1,1,1,2,2,3,3,3,3]) == False\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     all_unique([1,1,2,3,3,4,5,6,1]) == True, 'Should be True'\nassert     all_unique([1,2,3,4,5,6,1]) == False, 'Should be False'\nassert     all_unique([]) == True, 'Should be True'\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     all_unique([1,2,3,4]) == False, \"Wrong value\"\nassert     all_unique([1,2,3,3]) == True, \"Wrong value\"\nassert     all_unique([]) == True, \"Wrong value\"\nassert     all_unique(\"123\") == False, \"Wrong value\"\nassert     all_unique(\"a\") == False, \"Wrong value\"\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     all_unique([1,2,3]) == True, \"All unique not correct\"\nassert     all_unique([1,1,1]) == False, \"All unique not correct\"\nassert     all_unique([1,2,1]) == False, \"All unique not correct\"\nassert     all_unique([1]) == True, \"All unique not correct\"\nassert     all_unique([]) == True, \"All unique not correct\"\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     all_unique([1, 2, 3, 3]) == True, '1, 2, 3, 3 not unique'\nassert     all_unique([1, 2, 2, 3]) == False, '1, 2, 2, 3 unique'\n\ndef check_list(l1,l2):\n    '''\n    Write a python function to check whether the contents of a list are equal or not.\n    '''\n    pass\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     all_unique([]) == True, \"No item found\"\nassert     all_unique([1]) == True, \"Unique item found\"\nassert     all_unique([2,1]) == False, \"Unique item not found\"\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef is_palindrome(test_list):\n    '''\n    Write a python function to check whether the list is a palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sub_list([1,2,3,4],\n                  [1,2,3,4]) == None, \"Wrong Answer\"\nassert     sub_list([1,2,3,4],\n                  [1,2,3,4]) == None, \"Wrong Answer\"\nassert     sub_list([1,2,3,4],\n                  [1,2,3,4]) == None, \"Wrong Answer\"\nassert     sub_list([1,2,3,4],\n                  [1,2,3,4]) == None, \"Wrong Answer\"\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sub_list([1,2,3], [4,5,6]) == [1,2,3]\nassert     sub_list([1,2,3,4], [4,5,6]) == [1,2,3,4]\nassert     sub_list([1,2], [4,5,6]) == [-3, -3]\nassert     sub_list([1], [4,5,6]) == [-3, -3]\n\ndef add_sub_list(nums1,nums2):\n    '''\n    Write a function to add two lists element-wise and subtract another list from the result.\n    '''\n    pass\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sub_list([1,1,2],[1,2,3]) == [-1,-1,1], \"Fail\"\nassert     sub_list([1,2,3],[1,1,2]) == [-2,0,2], \"Fail\"\nassert     sub_list([], [1,2,3]) == [], \"Fail\"\nassert     sub_list([1,2,3], [1,2,3]) == [0,0,0], \"Fail\"\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return \n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sub_list([1,1,1], [1,2,3]) == [0,0,0], \"sub_list([1,1,1], [1,2,3])!= [0,0,0]\"\nassert     sub_list([1,2,3], [1,1,1]) == [0,0,0], \"sub_list([1,2,3], [1,1,1])!= [0,0,0]\"\nassert     sub_list([1,2,3], [1,2,3]) == [0,0,0], \"sub_list([1,2,3], [1,2,3])!= [0,0,0]\"\nassert     sub_list([1,2,3], [3,2,1]) == [3,2,1], \"sub_list([1,2,3], [3,2,1])!= [3,2,1]\"\nassert     sub_list([1,2,3], [4,5,6]) == [1,2,3], \"sub_list([1,2,3], [4,5,6])!= [1,2,3]\"\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sub_list([1,2,3],[2,1,0]) == [-1,0,1]\nassert     sub_list([1,2,3],[3,2,1]) == [1,0,-1]\n\ndef mult_list(nums1,nums2):\n    '''\n    Write a function to multiply two lists element-wise.\n    '''\n    pass\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sub_list([1,2,3], [3,1,2]) == [1,0,0]\nassert     sub_list([1,2,3], [1,3,2]) == [0,1,0]\nassert     sub_list([1,2,3], [2,3,1]) == [0,0,1]\nassert     sub_list([1,2,3], [0,1,3]) == [0,0,2]\nassert     sub_list([1,2,3], [0,0,0]) == [1,2,3]\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(validate(44))\nprint(validate(64))\nprint(validate(49))\n\n'''\nSolution:\n'''\n\ndef validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = 0\n    for i in str(n):\n        count += int(i)\n    return count <= n\n\nprint(validate(44))\nprint(validate(64))\nprint(validate(49))\n\n'''\nSolution:\n'''\ndef validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = 0\n    for i in str(n):\n        count += int(i)\n    return count <= n\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert validate(234) == False, \"Should be False\"\nassert validate(124321) == False, \"Should be False\"\nassert validate(124322) == True, \"Should be True\"\nassert validate(124323) == False, \"Should be False\"\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef sum_of_digits(n):\n    '''\n    Write a python function takes in an integer and check whether the sum of all digits in the integer is equal to the integer itself.\n    '''\n    pass\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nvalidate(12345)\nassert\nvalidate(123)\nassert \nvalidate(12)\nassert \nvalidate(22)\nassert \nvalidate(222)\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef factors(n): \n    '''\n    Write a python function takes in an integer and check whether it is divisible by all the factors of the integer.\n    '''\n    pass\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     validate(123) == True, 'validate does not work'\nassert     validate(12) == False, 'validate does not work'\nassert     validate(10) == False, 'validate does not work'\nassert     validate(25) == True, 'validate does not work'\nassert     validate(88) == True, 'validate does not work'\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert validate(123) == True, \"123 is a valid number\"\nassert validate(1234) == False, \"1234 is not a valid number\"\nassert validate(2100) == True, \"2100 is a valid number\"\nassert validate(21) == False, \"21 is not a valid number\"\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef validate(n):\n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    pass\n    "
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_element([1, 2, 3], 3) == True\nassert check_element([1, 2, 3], 4) == False\nassert check_element([2, 2, 2], 2) == False\n\n\ndef check_list_type(list):\n    '''\n    Write a function that takes in a list and checks whether all elements in the list are of the same type (the type of element in the list).\n    '''\n    pass\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_element([1,2,3,4,5],1) == True, \"Case 1\"\nassert     check_element([1,2,3,4,5],5) == True, \"Case 2\"\nassert     check_element([1,2,3,4,5],2) == False, \"Case 3\"\nassert     check_element([1,2,3,4,5],6) == False, \"Case 4\"\nassert     check_element([1,2,3,4,5],10) == False, \"Case 5\"\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert check_element([1,2,3,4,5],1) == True, \"True\"\nassert check_element([1,2,3,4,5],5) == True, \"True\"\nassert check_element([1,2,3,4,5],2) == False, \"False\"\nassert check_element([1,2,3,4,5],4) == False, \"False\"\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert check_element([1,1,1,2,2,2],1) == True\nassert check_element([1,1,1,2,2,2],2) == False\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_element([1,2,3,4],3) == True\nassert     check_element([1,2,3,4],3) == False\nassert     check_element([1,2,3,4],0) == False\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ncheck_element([1,2,3,4,5,6],2) == True\ncheck_element([],2) == True\ncheck_element([1,2,3,4,5],3) == False\ncheck_element([],3) == True\ncheck_element([1,2,3,4,5,6],7) == False\ncheck_element([1,2,3,4,5,6],0) == False\ncheck_element([1,2,3,4,5,6],6) == Fals"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_element([1,2,3,4], 3) == False, \"False\"\nassert     check_element([1,2,3,4], 3) == True, \"True\"\nassert     check_element([1,2,2,4], 3) == False, \"False\"\nassert     check_element([1,2,2,4], 3) == True, \"True\"\nassert     check_element([1,1,2,2,3,3,4], 3) == False, \"False\"\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_element(['a', 'b', 'c', 'd', 'e'], 'd') == True\nassert     check_element(['a', 'b', 'c', 'd', 'e'], 'e') == False\nassert     check_element(['a', 'b', 'c', 'd', 'e'], 'a') == False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_match_two_three('aab') == True\nassert    text_match_two_three('aabaa') == True\nassert    text_match_two_three('abcabc') == False\nassert    text_match_two_three('abc') == False\nassert    text_match_two_three('ab') == False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_two_three('') == False, 'Empty String'\nassert     text_match_two_three('bbab') == True, 'bbaa'\nassert     text_match_two_three('abbbb') == True, 'abbbb'\nassert     text_match_two_three('bbba') == False, 'bbb'\nassert     text_match_two_three('bab') == False, 'ab'\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ntext_match_two_three(\"aabbab\") == True\nassert \ntext_match_two_three(\"abbab\") == False\nassert \ntext_match_two_three(\"bb\") == False\nassert \ntext_match_two_three(\"ab\") == False\nassert\ntext_match_two_three(\"abbcab\") == True\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_match_two_three('bbb') == True, \"should return True\"\nassert     text_match_two_three('aaa') == False, \"should return False\"\nassert     text_match_two_three('aaaa') == False, \"should return False\"\nassert     text_match_two_three('aaab') == False, \"should return False\"\nassert     text_match_two_three('aab') == False, \"should return False\"\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_two_three('aaaaabbbbb') == True, 'TEST FAILED'\nassert     text_match_two_three('aaaaaaaaabbbbbbbbbbbbbb') == False, 'TEST FAILED'\nassert     text_match_two_three('aaaaaaaaaaabbbbbbbbbbbb') == False, 'TEST FAILED'\nassert     text_match_two_three('bbbbbbbbbbbbaaaaaa') == False, 'TEST FAILED'\nassert     text_match_two_three('aaaaaaaaaaaaa') == False, 'TEST FAILED'\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_two_three('aabbbbaaaaa') == True, '1st text_match_two_three'\nassert     text_match_two_three('abababab') == True, '2nd text_match_two_three'\nassert     text_match_two_three('aabbaaabaa') == False, '3rd text_match_two_three'\nassert     text_match_two_three('aabbaaa') == False, '4th text_match_two_three'\nassert     text_match_two_three('aabbaa') == False, '5th text_match_two_three'\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_match_two_three('aaaa') == True\nassert     text_match_two_three('aaaab') == True\nassert     text_match_two_three('abc') == False\nassert     text_match_two_three('abc') == False\nassert     text_match_two_three('aaba') == True\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_match_two_three('aabbbbaaaaaaa') == True, 'Your function returned False'\nassert     text_match_two_three('abbbbabaaaab') == True, 'Your function returned False'\nassert     text_match_two_three('abbbbbbaaaaab') == False, 'Your function returned False'\nassert     text_match_two_three('ababbbbaaaaaa') == False, 'Your function returned False'\n\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # regular expression match\n    return bool(re.search(r\"a+b+b+b+a\", text))\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef count_substring(string, sub_string):\n    '''\n    Write a function that counts the number of times a substring is found in a string.\n    '''\n    pass\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_sub_array_sum_repeated([1,2,3], 1, 2) == 6 \nassert max_sub_array_sum_repeated([3,1,2], 1, 2) == 4\nassert max_sub_array_sum_repeated([1,2,3], 3, 2) == 9\nassert max_sub_array_sum_repeated([1,2,3,4,5,1,2,3], 3, 2) == 21\nassert max_sub_array_sum_repeated([1,2,3,1,2,3], 2, 3) == 6\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_sub_array_sum_repeated([2, 3, 5, 5, 3], 2, 3) == 10\nassert     max_sub_array_sum_repeated([1, 2, 3, 2, 1], 2, 2) == 4\nassert     max_sub_array_sum_repeated([3, 4, -2, 5, 0, 1], 3, 3) == 5\nassert     max_sub_array_sum_repeated([1, -2, 1, -1, -1, -2, 3, 4, 5, 4], 3, 3) == 7\nassert     max_sub_array_sum_repeated([-2, 1, -3, 4, -1, 2, 1, -5, 4], 2, 2) == 6\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_sub_array_sum_repeated(a = [2,1,-3,4,-1,2], n = 5, k = 3) == 10, \"expected 10\"\nassert     max_sub_array_sum_repeated(a = [-2, -1], n = 2, k = 1) == -1, \"expected -1\"\nassert     max_sub_array_sum_repeated(a = [-2, -1], n = 2, k = 2) == 0, \"expected 0\"\n\n\n\n\ndef product_sum_naive(a, n):\n    '''\n    Write a function to calculate the product sum of an array with n elements.\n    '''\n    pass\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef min_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the minimum sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    pass\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_sub_array_sum_repeated(a = [4, 2, 1, 3, 4, 2], n = 5, k = 3) == 16\nassert     max_sub_array_sum_repeated(a = [2, 2, 2], n = 3, k = 2) == 4\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_sub_array_sum_repeated([1, 3, 2, 6], 4, 2) == 8, \"Should be 8\"\nassert     max_sub_array_sum_repeated([1, 2, 2, 3, 3, 4, 6], 3, 2) == 8, \"Should be 8\"\nassert     max_sub_array_sum_repeated([1, 2, 3, 4, 5], 1, 1) == 15, \"Should be 15\"\nassert     max_sub_array_sum_repeated([-1, -3, -2, -6], 2, 2) == -3, \"Should be -3\"\nassert     max_sub_array_sum_repeated([-1, -3, -2, -6], 1, 2) == -4, \"Should be -4\"\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nsquare_Sum(4) == 4*(4**2), \"Error in square_Sum: Expected output is {4*(4**2)} got {}\".format(square_Sum(4))\nassert \nsquare_Sum(5) == 4*(5**2), \"Error in square_Sum: Expected output is {4*(5**2)} got {}\".format(square_Sum(5))\nassert \nsquare_Sum(7) == 7*(7**2), \"Error in square_Sum: Expected output is {7*(7**2)} got {}\".format(square_Sum(7))\nassert\nprint(\"Success: All the test cases have passed\")\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nsquare_Sum(10) == 49\nprint(\"correct\")\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nsquare_Sum(5) == 0\nsquare_Sum(10) == 36\nsquare_Sum(100) == 52500\nsquare_Sum(0) == 0\nsquare_Sum(-4) == 16\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nsquare_Sum(0) == 0\nassert square_Sum(1) == 0\nassert square_Sum(2) == 1\nassert square_Sum(3) == 4\nassert square_Sum(4) == 25\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert square_Sum(5) == 10\nassert square_Sum(10) == 50\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     square_Sum(0) == 0, f'Square_Sum({0}) should be 0'\nassert square_Sum(1) == 1, f'Square_Sum({1}) should be 1'\nassert square_Sum(2) == 4, f'Square_Sum({2}) should be 4'\nassert square_Sum(3) == 18, f'Square_Sum({3}) should be 18'\nassert square_Sum(4) == 36, f'Square_Sum({4}) should be 36'\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     square_Sum(0) == 0, \"square_Sum(0)\"\nassert     square_Sum(1) == 1, \"square_Sum(1)\"\nassert     square_Sum(2) == 1, \"square_Sum(2)\"\nassert     square_Sum(3) == 2, \"square_Sum(3)\"\nassert     square_Sum(4) == 5, \"square_Sum(4)\"\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nsquare_Sum(0) == 0, \"Input: 0, Expected: 0\"\nassert \nsquare_Sum(1) == 1, \"Input: 1, Expected: 1\"\nassert \nsquare_Sum(2) == 1, \"Input: 2, Expected: 1\"\nassert \nsquare_Sum(3) == 4, \"Input: 3, Expected: 4\"\nassert \nsquare_Sum(4) == 9, \"Input: 4, Expected: 9\"\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nsquare_Sum(10) == 2*(1+4+9+16+25+36+49+64+81+100) == 2640\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # Do not modify the code below\n    import doctest\n    doctest.testmod()\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_length([[],[],[]])== 0, \"wrong answer\"\nassert     max_length([[],[1,2],[]])== 1, \"wrong answer\"\nassert     max_length([[1,2,3],[4,5],[6]])== 3, \"wrong answer\"\n\n'''\nYou have a number of stairs that are all the same height.\nYou want to climb them all in one step.\nWhat is the minimum number of steps needed to reach the top of the stairs?\n'''\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint('Check your solution:')\nassert max_length([[1,2,3],[4,5,6,7]]) == 4\nassert max_length([[1,2,3],[4,5,6,7]]) == 4\nassert max_length([[1],[2],[3],[4],[5],[6],[7]]) == 7\nassert max_length([[1,2],[3,4,5],[6,7]]) == 4\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert max_length([[1,2,3,4],[2,3,4]]) == 4\nassert max_length([[1,2],[3,4],[5,6]]) == 2\nassert max_length([[1,2,3],[4,5,6]]) == 4\nassert max_length([[1],[2,3],[4,5,6]]) == 4\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert max_length(list1) == 20\n\ndef test_max_length():\n    assert max_length(list1) == 20\n    assert max_length(list2) == 10\n    "
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_length([[1, 2], [1], [[3, 5]]]) == 1\nassert     max_length([[1, 2], [1], [[3, 5], [1,2], [5,3]]]) == 2\nassert     max_length([[[1, 2], [1, 2], [1, 2]], [[1, 2], [1, 2], [1, 2]]]) == 3\nassert     max_length([[1, 2], [1], [[3, 5], [1,2], [5,3]]]) == 3\nassert     max_length([[1, 2], [1], [[3, 5], [1,2], [5,3], [1,2], [5,3]]]) == 4\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef get_average_score(list1):\n    '''\n    Write a function to find the average score of each student in a list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_no_of_ways(3, 2) == 3\nassert count_no_of_ways(4, 2) == 5\nassert count_no_of_ways(5, 2) == 6\nassert count_no_of_ways(6, 2) == 8\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_no_of_ways(1, 2) == 1, \"Error. Expected : 1\"\nassert     count_no_of_ways(2, 2) == 2, \"Error. Expected : 2\"\nassert     count_no_of_ways(3, 2) == 2, \"Error. Expected : 2\"\nassert     count_no_of_ways(3, 3) == 3, \"Error. Expected : 3\"\nassert     count_no_of_ways(4, 2) == 4, \"Error. Expected : 4\"\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ncount_no_of_ways(3, 3) == 2\ncount_no_of_ways(4, 3) == 2\ncount_no_of_ways(3, 2) == 1\ncount_no_of_ways(4, 2) == 1\ncount_no_of_ways(3, 1) == 1\ncount_no_of_ways(4, 1) == 1\ncount_no_of_ways(5, 2) == 4\ncount_no_of_ways(4, 3) == 2\ncount_no_of_ways(1, 2) == 1\ncount_no_of_ways(1, 1) == 1\ncount_no_of_ways(2, 2) == 2\ncount_no_of_ways(3, 2) == 3\ncount_no_of_ways(4, 3) == 3\ncount_no_of_ways(5, 3) == 4\n\n'''\n0   0   1   1   2   3   4   5   6   7   8\n\n'''\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ncount_no_of_ways(4, 3) == 4\ncount_no_of_ways(8, 3) == 6\ncount_no_of_ways(6, 3) == 4\ncount_no_of_ways(0, 3) == 1\ncount_no_of_ways(2, 3) == 3\ncount_no_of_ways(2, 2) == 3\ncount_no_of_ways(10, 4) == 15\ncount_no_of_ways(10, 5) == 20\ncount_no_of_ways(10, 6) == 15\ncount_no_of_ways(10, 7) == 21\ncount_no_of_ways(10, 8) == 20\ncount_no_of_ways(10, 9) == 16\ncount_no_of_ways(10, 10) == 17\ncount_no_of_ways(0, 10) == 1\ncount_no_of_ways(10, 0) == 1\ncount_no_of_ways(5, 1) == 0\ncount_no_of_ways(0, 1) == 1\ncount_no_of_ways(2, 1) == 0\ncount_no_of_ways(4, 1) == 0\ncount_no_of_ways(1, 1) == 1\ncount_no_of_ways(2, 0) == 0\ncount_no_of_ways(2, 1) == 0\ncount_no_of_ways(2, 2) == 2\ncount_no_of_ways(2, 3) == 1\ncount_no_of_ways(2, 4) == 0\ncount_no_of_ways(2, 5) == 0\ncount_no_of_ways(2, 6) == 0\ncount_no_of_ways(2, 7) == 0\ncount_no_of_ways(2, 8) == 0\ncount_no_of_ways(2, 9) == 0\ncount_no_of_ways(2, 10) == 1\ncount_no_of_ways(2, 11) == 0\ncount_no_of_ways(2, 12) == 0\ncount_no_of_ways(2, 13) == 0\ncount_no_of_ways(2, 14) == 0\ncount_no_of_ways(2, 15) == 0\ncount_no_of_ways(2, 16) == 0\ncount_no_of_ways(2, 17) == 0\ncount_no_of_ways(2, 18) == 0\ncount_no_of_ways(2, 19) == 0\ncount_no_of_ways(2, 20) == 0\ncount_no_of_ways(2, 21) == 0\ncount_no_of_ways(2, 22) == 0\ncount_no_of_ways(2, 23) == 0\ncount_no_of_ways(2, 24) == 0\ncount_no_of_ways(2, 25) == 0\ncount_no_of_ways(2, 26) == 0\ncount_no_of_ways(2, 27) == 0\ncount_no_of_ways(2, 28) == 0\ncount_no_of_ways(2, 29) == 0\ncount_no_of_ways(2, 30) == 0\ncount_no_of_ways(2, 31) == 0\ncount_no_of_ways(2, 32) == 0\ncount_no_of_ways(2, 33) == 0\ncount_no_of_ways(2, 34) == 0\ncount_no_of_ways(2, 35) == 0\ncount_no_of_ways(2, 36) == 0\ncount_no_of_ways(2, 37) == 0\ncount_no_of_ways(2, 38) == 0\ncount_no_of_ways(2, 39) == 0\ncount_no_of_ways(2, 40) == 0\ncount_no_of_ways(2, 41) == 0\ncount_no_of_ways(2, 42) == 0\ncount_no_of_ways(2, 43) == 0\ncount_no_of_ways(2, 44) == 0\ncount_no_of_ways(2, 45) == 0\ncount_no_of_ways(2, 46) == 0\ncount_no_of_ways(2, 47) == 0\ncount_no_of_ways(2, 48) == 0\ncount_no_of_ways(2, 49) == 0\ncount_no_of_ways(2, 50) == 0\ncount_no_of_ways(2, 51) == 0\ncount_no_of_ways(2, 52) == 0\ncount_no_of_ways(2, 53) == 0\ncount_no_of_ways(2, 54) == 0\ncount_no_of_ways(2, 55) == 0\ncount_no_of_ways(2, 56) == 0\ncount_no_of_ways(2, 57) == 0\ncount_no_of_ways(2, 58) == 0\ncount_no_of_ways(2, 59) == 0\ncount_no_of_ways(2, 60) == 0\ncount_no_of_ways(2, 61) == 0\ncount_no_of_ways(2, 62) == 0\ncount_no_of_ways(2, 63) == 0\ncount_no_of_ways(2, 64) == 0\ncount_no_of_ways(2, 65) == 0\ncount_no_of_ways(2, 66) == 0\ncount_no_of_ways(2, 67) == 0\ncount_no_of_ways(2, 68) == 0\ncount_no_of_ways(2, 69) == 0\ncount_no_of_ways(2, 70) == 0\ncount_no_of_ways(2, 71) == 0\ncount_no_of_ways(2, 72) == 0\ncount_no_of_ways(2, 73) == 0\ncount_no_of_ways(2, 74) == 0\ncount_no_of_ways(2, 75) == 0\ncount_no_of_ways(2, 76) == 0\ncount_no_of_ways(2, 77) == 0\ncount_no_of_ways(2, 78) == 0\ncount_no_of_ways(2, 79) == 0\ncount_no_of_ways(2, 80) == 0\ncount_no_of_ways(2, 81) == 0\ncount_no_of_ways(2, 82) == 0\ncount_no_of_ways(2, 83) == 0\ncount_no_of_ways(2, 84) == 0\ncount_no_of_ways(2, 85) == 0\ncount_no_of_ways(2, 86) == 0\ncount_no_of_ways(2, 87) == 0\ncount_no_of_ways(2, 88) == 0\ncount_no_of_ways(2, 89) == 0\ncount_no_of_ways(2, 90) == 0\ncount_no_of_ways(2, 91) == 0\ncount_no_of_ways(2, 92) == 0\ncount_no_of_ways(2, 93) == 0\ncount_no_of_ways(2, 94) == 0\ncount_no_of_ways(2, 95) == 0\ncount_no_of_ways(2, 96) == 0\ncount_no_of_ways(2, 97) == 0\ncount_no_of_ways(2, 98) == 0\ncount_no_of_ways(2, 99) == 0\ncount_no_of_ways(2, 100) == 0\ncount_no_of_ways(3, 1) == 0\ncount_no_of_ways(3, 2) == 0\ncount_no_of_ways(3, 3) == 1\ncount_no_of_ways(3, 4) == 0\ncount_no_of_ways(3, 5) == 0\ncount_no_of_ways(3, 6) == 0\ncount_no_of_ways(3, 7) == 0\ncount_no_of_ways(3, 8) == 0\ncount_no_of_ways(3, 9) == 0\ncount_no_of_ways(3, 10) == 0\ncoun"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_no_of_ways(4, 2) == 4, 'input error'\nassert     count_no_of_ways(3, 2) == 3, 'input error'\nassert     count_no_of_ways(5, 2) == 7, 'input error'\nassert     count_no_of_ways(5, 3) == 11, 'input error'\nassert     count_no_of_ways(10, 4) == 35, 'input error'\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_no_of_ways(3, 2) == 8\nassert     count_no_of_ways(2, 2) == 5\n\ndef count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n < k: \n        return 0 \n    \n    dp = [[0 for _ in range(k + 1)] for _ in range(n + 1)] \n    for i in range(1, k + 1): \n        dp[1][i] = 1 \n    for i in range(2, n + 1): \n        for j in range(1, k + 1): \n            dp[i][j] = dp[i - 1][j] \n            if j >= i: \n                dp[i][j] += dp[i - 1][j - i] \n    return dp[n][k] \n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    pass\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_no_of_ways(2,2) == 2, \"Test 1 Failed\"\nassert     count_no_of_ways(2,3) == 2, \"Test 2 Failed\"\nassert     count_no_of_ways(5,4) == 5, \"Test 3 Failed\"\nassert     count_no_of_ways(10,3) == 13, \"Test 4 Failed\"\nassert     count_no_of_ways(20,5) == 250, \"Test 5 Failed\"\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_no_of_ways(3, 4) == 7, '4'\nassert     count_no_of_ways(3, 2) == 3, '2'\nassert     count_no_of_ways(3, 1) == 1, '1'\nassert     count_no_of_ways(3, 0) == 0, '0'\nassert     count_no_of_ways(1, 3) == 2, '3'\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find(1,2) == 0\nassert     find(3,4) == 1\nassert     find(9,10) == 0\nassert     find(10,10) == 1\nassert     find(10,11) == 2\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nfind(4,2) == 2\n\nprint('Congratulations! Your function is correct')\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nfind(2,3) == 1\nfind(3,3) == 1\nfind(5,5) == 1\nfind(11,11) == 1\nfind(6,4) == 2\nfind(10,1) == 10\nfind(1,10) == 1"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find(10,2) == 2\nassert     find(1,2) == 0\nassert     find(-5,3) == -2"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find(3,4) == 1\nassert     find(4,3) == 0\nassert     find(3,3) == 1\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find(7,2) == 3, \"Fail\"\nassert     find(7,3) == 3, \"Fail\"\nassert     find(8,2) == 4, \"Fail\"\nassert     find(8,3) == 4, \"Fail\"\nassert     find(9,2) == 5, \"Fail\"\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef gcd(a, b):\n    '''\n    Write a python function to find the GCD of two numbers.\n    '''\n    pass\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find(2,4)==2, \"Wrong\"\nassert     find(5,5)==5, \"Wrong\"\nassert     find(10,5)==5, \"Wrong\"\nassert     find(20,5)==5, \"Wrong\"\n\nprint('TEST_PASSED')\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    find(8,4)==2\nassert \n    find(10,5)==2\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    assert find(2,4) == 0, \"test 1 failed\"\n    assert find(3,4) == 1, \"test 2 failed\"\n    assert find(4,4) == 0, \"test 3 failed\"\n    assert find(10,4) == 2, \"test 4 failed\"\n    "
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef get_number_of_hits(a,b,c):\n    '''\n    You are given a triangle triangle = [[1, 2], [1, 3], [2, 3]] and a\n    point p (x, y) on that triangle. Write a function find_hits(triangle, p)\n    which computes the number of hits, i.e. the number of points in the triangle\n    that are inside the triangle and the triangle.\n    '''\n    pass\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef otherside_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    pass\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     otherside_rightangle(2,3) == 1, 'wrong'\nassert     otherside_rightangle(3,2) == 1, 'wrong'\nassert     otherside_rightangle(1,3) == 1, 'wrong'\nassert     otherside_rightangle(2,2) == 0, 'wrong'\nassert     otherside_rightangle(5,4) == 1, 'wrong'\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     otherside_rightangle(2,3) == 1.74 \nassert     otherside_rightangle(1,3) == 0.7071\nassert     otherside_rightangle(3,2) == 0.7071\nassert     otherside_rightangle(1,2) == 0.7071\nassert     otherside_rightangle(0,2) == 1.0\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     otherside_rightangle(3,2) == 1.5\nassert     otherside_rightangle(4,2) == 3\nassert     otherside_rightangle(2,4) == 1.5\nassert     otherside_rightangle(1.5,1.5) == 1.5\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     otherside_rightangle(1,1) == 1\nassert otherside_rightangle(5,5) == 5\nassert otherside_rightangle(10,10) == 10\nassert otherside_rightangle(4,4) == 4\nassert otherside_rightangle(2,2) == 2\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint('passed')\nprint()\n\ndef area_rectangle(w,h):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    pass\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_val([1,2,3,4,5,6,7,8,9,10]) == 10\nassert     max_val([1,2,3,4,5,6,7,8,9,10,5]) == 10\nassert     max_val([1,2,3,4,5,6,7,8,9]) == 9\nassert     max_val([1,2,3,4,5,6,7,8,9,5,6]) == 9\nassert     max_val([]) == None\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_val([1, 2, 3])     == 3, 'Fail'\nassert     max_val([1.2, 2.5, 'gfg']) == 2.5, 'Fail'\nassert     max_val(['a', 'b', 'c', 'd', 'e']) == 'e', 'Fail'\nassert     max_val([]) == None, 'Fail'\nassert     max_val([1, 2, 3, None, 5]) == 5, 'Fail'\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_val([10, -3, 2, -5, 4]) == 10, \"Wrong output\"\n\nassert     max_val([True, True, True]) == True, \"Wrong output\"\n\nassert     max_val([True, False, True]) == True, \"Wrong output\"\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_val([\"\", 'a', '', 'a', '', 'a', '', 'a', '', 'a']) == 'a', 'Fail'\nassert     max_val([\"\", 'a', '', '', '', 'a', '', 'a', '', 'a']) == 'a', 'Fail'\nassert     max_val(['a', '', '', '', '', '', '', '', 'a']) == 'a', 'Fail'\nassert     max_val(['', 'a', '', '', '', '', '', '', 'a']) == 'a', 'Fail'\nassert     max_val([]) == '', 'Fail'\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nmax_val([1,2,3])==3\nmax_val([-1,-2,-3])==-1\nmax_val([-100,-5,2])==2\nmax_val([-5,-2,-100])==-5\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_val([[3, 4], [6, 1]]) == 6\nassert     max_val([['apple', 'apple'], ['lemon', 'lime']]) == 'lemon'\nassert     max_val([[1, 2, 3], [4, 5, 6]]) == 6\nassert     max_val([[1, 2, 3], [4, 5, 'five']]) == 'five'\nassert     max_val([[1, 2, 3], 'five']) == 5\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_val([1,2,3]) == 3\nassert     max_val([1,'2',3]) == 3\nassert     max_val([1,'2','3']) == 3\nassert     max_val([1,2,3,'2']) == 3\nassert     max_val([1,2,3,2]) == 3\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef is_prime(number):\n    '''\n    Write a function that returns True if a number is prime, else False.\n    '''\n    pass\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_div(3) == 7\nassert     sum_div(12) == 17\nassert     sum_div(18) == 17\nassert     sum_div(15) == 18\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_div(0) == 0\nassert     sum_div(1) == 1\nassert     sum_div(2) == 1\nassert     sum_div(3) == 1\nassert     sum_div(4) == 2\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_div(0) == 0, \"sum_div(0) should return 0\"\nassert     sum_div(1) == 1, \"sum_div(1) should return 1\"\nassert     sum_div(4) == 2, \"sum_div(4) should return 2\"\nassert     sum_div(13) == 11, \"sum_div(13) should return 11\"\nassert     sum_div(20) == 12, \"sum_div(20) should return 12\"\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nsum_div(2) == 1+2\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_div(0) == 0,'sum_div(0) is incorrect'\nassert     sum_div(1) == 1,'sum_div(1) is incorrect'\nassert     sum_div(3) == 3,'sum_div(3) is incorrect'\nassert     sum_div(6) == 7,'sum_div(6) is incorrect'\nassert     sum_div(8) == 6,'sum_div(8) is incorrect'\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert sum_div(2) == 1 + 2\nassert sum_div(6) == 3 + 2 + 3\nassert sum_div(24) == 8 + 4 + 6 + 2 + 3 + 4 + 6\n\n\ndef sum_div_naive(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    pass\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert get_Inv_Count([10,20,30,40,50,60,70,80]) == 0, \"Incorrect result\"\nassert get_Inv_Count([1,2,3,4,5,6]) == 4, \"Incorrect result\"\nassert get_Inv_Count([1,1,1,1,1]) == 1, \"Incorrect result\"\nassert get_Inv_Count([1,2,3,4,5,6,7]) == 4, \"Incorrect result\"\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_Inv_Count([1, 2, 3]) == 0, \"test case 1 failed\"\nassert     get_Inv_Count([10, 5, 1, 2]) == 3, \"test case 2 failed\"\nassert     get_Inv_Count([0, 1, 2, 3]) == 1, \"test case 3 failed\"\nassert     get_Inv_Count([1, 2, 1, 3]) == 2, \"test case 4 failed\"\nassert     get_Inv_Count([1, 3, 1, 2]) == 3, \"test case 5 failed\"\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\narr = [-1, 2, 3, 4, 5, -10, -2] \nassert get_Inv_Count(arr) == 5\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_Inv_Count([]) == 0, \"Expected: 0, Actual: {}\".format(get_Inv_Count([]) )\nassert     get_Inv_Count([1]) == 0, \"Expected: 0, Actual: {}\".format(get_Inv_Count([1]) )\nassert     get_Inv_Count([5]) == 0, \"Expected: 0, Actual: {}\".format(get_Inv_Count([5]) )\nassert     get_Inv_Count([1,5]) == 0, \"Expected: 0, Actual: {}\".format(get_Inv_Count([1,5]) )\nassert     get_Inv_Count([1,5,3]) == 2, \"Expected: 2, Actual: {}\".format(get_Inv_Count([1,5,3]) )\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_Inv_Count([1, 2, 5]) == 1, \"Should have 1 inversion\"\nassert     get_Inv_Count([10, 5, 8, 4]) == 0, \"Should have 0 inversion\"\nassert     get_Inv_Count([5, 4, 3, 2, 1]) == 6, \"Should have 6 inversion\"\nassert     get_Inv_Count([10, 5, 8, 4]) == 1, \"Should have 1 inversion\""
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_Inv_Count([1, 2, 3, 4]) == 0, \"Wrong\"\nassert     get_Inv_Count([1, 3, 4, 2]) == 1, \"Wrong\"\nassert     get_Inv_Count([1, 3, 4, 2, 3]) == 2, \"Wrong\"\nassert     get_Inv_Count([1, 3, 4, 2, 3, 2, 4]) == 3, \"Wrong\"\n\ndef get_max_int(arr):\n    '''\n    Write a python function to get the maximum integer in an array.\n    '''\n    pass\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_Inv_Count([1, 3, 5, 7, 2, 4, 6]) == 3\nassert     get_Inv_Count([1, 3, 5, 7, 2, 4, 6, 0, 3]) == 5\nassert     get_Inv_Count([1, 3, 5, 7, 2, 4, 6, 0, 3, 0]) == 5\n\nprint('All test cases passed.')\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    get_Inv_Count([1,2,3,4,5,6]) == 5\n    get_Inv_Count([1,2,3,4,5,6,6]) == 1\n    get_Inv_Count([1,2,3,4,5,6,7]) == 2\n    get_Inv_Count([1,2,3,4,5,6,7,7]) == 0\n    get_Inv_Count([1,2,3,4,5,6,7,7,7]) == 1\n    get_Inv_Count([1,2,3,4,5,6,7,7,7,7]) == 0\n    get_Inv_Count([]) == 0\n\n\ndef get_Inv_Count_Fast(arr):\n    '''\n    Write a python function to count inversions in an array.\n    '''\n    pass\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n\n\ndef flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    l = []\n    for i in list1:\n        if type(i)==list:\n            l.extend(flatten_list(i))\n        else:\n            l.append(i)\n    return l\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     flatten_list([]) == []\nassert     flatten_list([[1], [[2]]]) == [1, 2]\nassert     flatten_list([[], [[]]]) == []\nassert     flatten_list([[1, 2], [[3], [[4]]]]) == [1, 2, 3, 4]\nassert     flatten_list([[1, 2], [[3], [[4]]], [[5], [[6]]]]) == [1, 2, 3, 4, 5, 6]\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     flatten_list([[1], [2,3], [[4],[5,6,7]]]) == \\\n    [[1], [2,3], [4], [5,6,7]]\nassert     flatten_list([[1],[2,3],[4]]) == \\\n    [[1],[2,3],[4]]\nassert     flatten_list([[1],[2,3],[4],[5,6,7]]) == \\\n    [[1],[2,3,4],[5,6,7]]\nassert     flatten_list([[1],[2,3],[4],[5,6,7],[8]]) == \\\n    [[1],[2,3,4],[5,6,7],[8]]\nassert     flatten_list([[1],[2,3],[4],[5,6,7]]) == \\\n    [[1],[2,3],[4],[5,6,7]]\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef tree_sort(tree):\n    '''\n    Given an input tree, print the tree in a sorted fashion.\n    '''\n    pass\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     flatten_list([[1,2,3],[4,5,6]]) == [[1,2,3],4,5,6], \"Should be [[1,2,3],4,5,6]\"\nassert     flatten_list([[1,2,3,4,5,6],[7,8,9]]) == [[1,2,3,4,5,6],7,8,9], \"Should be [[1,2,3,4,5,6],[7,8,9]]\"\nassert     flatten_list([[[1,2,3,4],[5,6,7,8]]]) == [[1,2,3,4],[5,6,7,8]], \"Should be [[1,2,3,4],[5,6,7,8]]\"\nassert     flatten_list([[], [], []]) == [[], [], []], \"Should be [[],[],[]]\""
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     flatten_list([[1, 2, 3], [4, 5], [[6, 7], 8]]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     flatten_list([[[2]], [1], [[3]]]) == [2, 1, 3]\nassert     flatten_list([[[[1]]]]) == [1]\nassert     flatten_list([[]]) == []\nassert     flatten_list([[[[]]]]) == [[]]\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nflatten_list([[1, 2, 3], 4, 5])\n\nflatten_list([[1, 2], 3, 4, 5])\n\nflatten_list([1, 2, 3])\n\nflatten_list([1, 2, 3, 4])\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     flatten_list([[1], 2, 3, 4, [5], 6, [7, 8], 9, [10, 11, 12]]) == \\\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert     flatten_list([1, 2, 3, 4, [5], 6, 7, 8, 9, 10, 11, 12]) == \\\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert     flatten_list([1, 2, 3, 4, [5], 6, 7]) == \\\n    [1, 2, 3, 4, 5, 6, 7]\nassert     flatten_list([1, 2, 3, 4]) == \\\n    [1, 2, 3, 4]\nassert     flatten_list([[1], 2, 3, 4]) == \\\n    [1, 2, 3, 4]\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_aggregate([]) == 0\nassert     max_aggregate([(1, 2), (2, 3)]) == 6\nassert     max_aggregate([(1, 1), (2, 4)]) == 5\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_aggregate([(1,3),(2,4),(2,6),(3,3)]) == 6\nassert     max_aggregate([(2,6),(2,4),(1,3),(3,3)]) == 12\nassert     max_aggregate([(1,3),(1,3),(2,6),(2,4),(3,3)]) == 9\nassert     max_aggregate([(1,3),(2,4),(3,3),(3,3)]) == 4\nassert     max_aggregate([(1,3),(2,4),(3,3),(4,3)]) == 5\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert \nassert \n\ndef min_aggregate(stdata):\n    '''\n    Write a function to calculate the minimum aggregate from the list of tuples.\n    '''\n    pass\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_aggregate([(1,),(2,),(3,),(4,)]) == (1,2,3,4)\nassert     max_aggregate([(1,2,3),(2,3,4),(3,4,5)]) == (2,3,4,5)\nassert     max_aggregate([(1,2,3),(2,3,4),(3,4,5)]) == (2,3,4,5)\nassert     max_aggregate([(1,2),(2,),(3,),(4,)]) == (2,3,4)\nassert     max_aggregate([(1,2),(2,),(3,),(4,)]) == (2,3,4)\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_aggregate([\n    (1,2,3),\n    (1,3,2),\n    (1,2,4),\n    (2,2,1),\n    (3,2,1),\n    (3,1,2)]) == (1, 2, 3, 2, 1, 2)\nassert     max_aggregate([\n    (1,2,3),\n    (1,3,2),\n    (1,2,4),\n    (2,2,1),\n    (3,2,1),\n    (3,1,2)]) == (1, 2, 3, 2, 1, 2)\nassert     max_aggregate([\n    (1,2,3),\n    (2,3,1),\n    (2,2,1),\n    (2,3,1),\n    (3,3,1),\n    (3,3,1)]) == (1, 2, 3, 1, 3, 1)\nassert     max_aggregate([\n    (1,2,3),\n    (2,3,1),\n    (2,2,1),\n    (2,3,1),\n    (3,3,1),\n    (3,3,1)]) == (1, 2, 3, 2, 3, 1)\nassert     max_aggregate([\n    (1,2,3),\n    (2,3,1),\n    (3,3,1),\n    (3,3,1),\n    (3,3,1),\n    (3,3,1)]) == (1, 2, 3, 3, 3, 1)\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_aggregate([\n        (1, 2), (3, 2), (4, 1), (5, 4)]) == (4, 5)\nassert     max_aggregate([\n        (1, 2), (3, 2), (4, 1), (5, 3)]) == (4, 5)\nassert     max_aggregate([\n        (1, 2), (3, 2), (4, 2), (5, 3)]) == (4, 5)\nassert     max_aggregate([\n        (1, 2), (3, 3), (4, 4), (5, 5)]) == (5, 5)\nassert     max_aggregate([\n        (1, 2), (2, 1), (4, 4), (5, 5)]) == (5, 5)\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_aggregate([(1, 1), (3, 2), (5, 5), (6, 6)]) == 6\nassert     max_aggregate([(1, 1), (3, 2), (6, 6), (5, 5)]) == 6\nassert     max_aggregate([(6, 6), (3, 2), (1, 1), (5, 5)]) == 6\nassert     max_aggregate([(1, 1), (1, 1), (1, 1), (1, 1)]) == 1\nassert     max_aggregate([(1, 1), (3, 2), (3, 2), (5, 5)]) == 6\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_aggregate([('a','b',10), ('a','b',20), ('a','c',40)]) == 40\nassert     max_aggregate([('a','b',10), ('a','b',20), ('a','c',40), ('b','c',100)]) == 60\nassert     max_aggregate([('a','b',10), ('a','b',20), ('a','c',40), ('b','c',100), ('c','b',40)]) == 80\nassert     max_aggregate([('a','b',10), ('a','b',20), ('a','c',40), ('b','c',100), ('c','b',40), ('c','a',40)]) == 120\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_aggregate([(1, 3), (3, 5)]) == 3\nassert     max_aggregate([(1, 1), (3, 5)]) == 5\nassert     max_aggregate([(1, 1), (2, 3), (3, 5)]) == 5\nassert     max_aggregate([(1, 1), (2, 3), (3, 5), (6, 8)]) == 8\nassert     max_aggregate([(2, 8), (2, 3), (3, 5), (6, 8)]) == 8\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef min_aggregate(stdata):\n    '''\n    Write a function to calculate the minimum aggregate from the list of tuples.\n    '''\n    pass\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(count_binary_seq(3))\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef count_sequence(seq):\n    '''\n    Write a function that accepts a sequence (list) of integers. \n    The function returns the count of all possible binary sequences.\n    '''\n    pass\n\n\nif __name__ == '__main__':\n    # test for count_binary_seq\n    print(count_binary_seq(3))\n    print(count_binary_seq(4))\n    print(count_binary_seq(10))\n    print()\n\n    # test for count_sequence\n    arr = [1,4,5,2,3,6,7,0]\n    print(count_sequence(arr))\n\n    # print the result\n    pass\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert count_binary_seq(0) == 0, \"There is no such binary sequence.\"\nassert count_binary_seq(3) == 5, \"There is only one such binary sequence.\"\nassert count_binary_seq(5) == 12, \"There are 3 such binary sequences.\"\nassert count_binary_seq(10) == 36, \"There are 9 such binary sequences.\"\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_binary_seq(3) == 0\nassert     count_binary_seq(6) == 7\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_binary_seq(0) == 1, \"Expected 1\"\nassert     count_binary_seq(1) == 1, \"Expected 1\"\nassert     count_binary_seq(2) == 1, \"Expected 1\"\nassert     count_binary_seq(3) == 2, \"Expected 2\"\nassert     count_binary_seq(4) == 3, \"Expected 3\"\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_binary_seq(0) == 0, \"0: 0\"\nassert     count_binary_seq(1) == 1, \"1: 1\"\nassert     count_binary_seq(2) == 2, \"2: 2\"\nassert     count_binary_seq(3) == 5, \"3: 5\"\nassert     count_binary_seq(4) == 7, \"4: 7\"\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef count_binary_seq(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    pass\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert \n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     dict_depth({\"a\": 1, \"b\": 2, \"c\": 3}) == 3\nassert     dict_depth({\"a\": 1, \"b\": 2}) == 2\nassert     dict_depth({\"a\": 1, \"b\": 2, \"c\": 3}) == 3\nassert     dict_depth({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}) == 4\nassert     dict_depth({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}) == 5\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     dict_depth({\"a\":{\"b\":{\"c\":1}}}) == 3, \"Wrong answer\"\nassert     dict_depth({\"a\":{\"b\":{\"c\":1}}}) == 2, \"Wrong answer\"\nassert     dict_depth({\"a\":{\"b\":{\"c\":1}}}) == 1, \"Wrong answer\"\nassert     dict_depth({\"a\":{\"b\":{\"c\":1}}}) == 0, \"Wrong answer\"\nassert     dict_depth({\"a\":{\"b\":{\"c\":1}}}) == 0, \"Wrong answer\"\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     dict_depth({}) == 0, \"empty dictionary is a depth of 0\"\nassert dict_depth({'a': 1}) == 1, \"single-element dictionary has depth 1\"\nassert dict_depth({'a': {'b': 2}}) == 2, \"double-element dictionary has depth 2\"\nassert dict_depth({'a': {'b': {'c': 3}}}) == 3, \"nested dictionary has depth 3\"\n\nprint(\"All tests passed!\")"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     dict_depth({'k1':'v1','k2':{'k3':'v3'},'k4':{'k5':'v5','k6':'v6'},'k7':'v7'}) == 3\nassert     dict_depth({'k1':'v1','k2':{'k3':'v3'},'k4':{'k5':'v5','k6':'v6'},'k7':'v7'}) == 2\nassert     dict_depth({'k1':'v1','k2':{'k3':'v3'},'k4':{'k5':'v5','k6':'v6'},'k7':'v7'}) == 1\nassert     dict_depth({'k1':'v1','k2':{'k3':'v3'},'k4':{'k5':'v5','k6':'v6'},'k7':'v7'}) == 0"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     dict_depth({\"a\": 1, \"b\": 2, \"c\":3}) == 2\nassert     dict_depth({\"a\":1, \"b\":2}) == 1\nassert     dict_depth({\"a\":{\"b\":2}}) == 2\nassert     dict_depth({\"a\":1,\"b\":{\"c\":2}}) == 2\nassert     dict_depth({\"a\":{\"b\":{\"c\":2}}}) == 3\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n\ndef dict_deep_get(d, *args):\n    '''\n    Write a function to get the value of the dict, given the\n    key. If the key is not found, return None.\n    '''\n    pass\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     dict_depth({'a': 1}) == 0\nassert dict_depth({'a': {'b': 2}}) == 1\nassert dict_depth({'a': {'b': {'c': 3}}}) == 2\nassert dict_depth({'a': {'b': {'c': {'d': 4}}}}) == 3\n\ndef has_bad_chars(s):\n    '''\n    Write a function to find out if a string has at least 1 bad character.\n    '''\n    pass\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     dict_depth({}) == 0\nassert     dict_depth({1: 2}) == 1\nassert     dict_depth({1: 2, 3: {4: 5}}) == 2\nassert     dict_depth({1: 2, 3: {4: 5}, 6: {7: 8}}) == 3"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert dict_depth({}) == 0\nassert dict_depth({\"a\":1}) == 1\nassert dict_depth({\"a\":{}}) == 1\nassert dict_depth({\"a\":{\"b\":2, \"c\":{}}}) == 2\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Element([1,3,6,7],2,3,1) == 6 \nassert     find_Element([1,3,6,7],2,3,5) == 6\nassert     find_Element([1,3,6,7],2,3,8) == 3\nassert     find_Element([1,3,6,7],2,3,9) == 7\nassert     find_Element([1,3,6,7],2,3,4) == 6\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    arr = list(map(int,input().split()))\n    ranges = list(map(int,input().split()))\n    rotations = list(map(int,input().split()))\n    index = int(input())\n    \n    # find_Element function call\n    find_Element(arr,ranges,rotations,index"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    ranges = 2\n    rotations = 2\n    index = 7\n    print find_Element(arr, ranges, rotations, index)\n    \n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Element([3, 5, 7], [1, 1, 1], 3, 0) == 3\nassert     find_Element([3, 5, 7], [1, 1, 1], 3, 1) == 5\nassert     find_Element([3, 5, 7], [1, 1, 1], 3, 2) == 7\nassert     find_Element([1, 2, 3, 4, 5, 6], [1, 1, 1], 3, 0) == 1\nassert     find_Element([1, 2, 3, 4, 5, 6], [1, 1, 1], 3, 1) == 2\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Element([3,9,5,7],[[1,2],[2,3],[3,4],[4,5]],3,0) == 9, 'Test case failed!'\nassert     find_Element([5,1,3,4],[[1,2],[2,3],[3,4],[4,5]],1,1) == 5, 'Test case failed!'\nassert     find_Element([1,2,3,4],[[1,2],[2,3],[3,4],[4,5]],2,2) == 4, 'Test case failed!'\nassert     find_Element([7,3,9,1],[[1,2],[2,3],[3,4],[4,5]],2,1) == 7, 'Test case failed!'\nassert     find_Element([5,3,9,1],[[1,2],[2,3],[3,4],[4,5]],1,1) == 5, 'Test case failed!'\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Element([1,2,3,4,5,6],1,0,2) == 6\nassert     find_Element([1,2,3,4,5,6],1,1,2) == 3\nassert     find_Element([1,2,3,4,5,6],1,1,3) == 5\nassert     find_Element([1,2,3,4,5,6],1,1,4) == 6\nassert     find_Element([1,2,3,4,5,6],1,1,5) == 2\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     start_withp([\"pam\", \"pineapple\", \"banana\", \"potato\", \"apple\"]) ==     ['pineapple', 'apple']\nassert     start_withp([\"panda\", \"pandac\", \"pandas\", \"panda's\", \"pandas\"]) ==     ['pandas', 'panda']\n\ndef start_withr(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'r'.\n    '''\n    pass\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     start_withp([\"Pepe\", \"Pizzaa\", \"Pizzaa\", \"Pizzaa\", \"Pepe\"]) == [\"Pepe\", \"Pizzaa\"]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     start_withp(['Python', 'Programmer', 'Apprentice', 'Biscuit']) == ['Python', 'Apprentice']\nassert     start_withp(['Python', 'Programmer', 'Apprentice', 'Java']) == ['Apprentice', 'Java']\nassert     start_withp(['Python', 'Programmer', 'Apprentice', 'C']) == ['Apprentice', 'C']\nassert     start_withp(['Python', 'Programmer', 'Apprentice', 'C#']) == ['Apprentice', 'C#']\nassert     start_withp(['Python', 'Programmer', 'Apprentice', 'JavaScript']) == ['Apprentice', 'JavaScript']\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     start_withp(['p','d','a','q','j','w']) == ('d','a')\nassert     start_withp(['p','d','a','q','j','w','p','g','h','e']) == ('d','a')\nassert     start_withp(['a','q','j','w','p','g','h','e','p','d']) == ('d','a')\nassert     start_withp(['a','q','j','w','p','g','h','e','p','d','p']) == ('d','a')\nassert     start_withp(['p','q','j','w','p','g','h','e','p','d','p','p']) == ('d','a')\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     start_withp(['pytho', 'pycon', 'python']) == ('pycon', 'python')\nassert     start_withp(['pytho', 'pythonexample']) == ('pythonexample', 'pytho')\nassert     start_withp(['pytho', 'pythonexample', 'python']) == ('pythonexample', 'python')\nassert     start_withp(['pytho', 'pythonexample', 'python', 'pytho']) == ('pythonexample', 'python')\nprint('Correct')\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     start_withp([\"abcdefg\", \"abcd\", \"acd\"]) == [\"acd\", \"abcdefg\"]\nassert     start_withp([\"abc\", \"pqr\"]) == [\"abc\", \"pqr\"]\nassert     start_withp([\"ac\", \"acd\"]) == [\"acd\", \"ac\"]\nassert     start_withp([\"a\", \"a\"]) == [\"a\", \"a\"]\nassert     start_withp([\"a\", \"b\", \"c\"]) == [\"b\", \"c\"]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     start_withp(['python', 'java', 'kotlin', 'javascript']) == ('python', 'javascript')\nassert     start_withp(['go', 'python', 'javascript']) == ('python', 'javascript')\nassert     start_withp(['golang', 'ruby', 'javascript']) == ('javascript', 'golang')\nassert     start_withp(['julia', 'haskell', 'rust']) == ('rust', 'haskell')\nassert     start_withp(['js','swift']) == ('swift', 'js')\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_sum_increasing_subseq([10,4,-2,1,5,2], 6, 4, 2) == 10\nassert     max_sum_increasing_subseq([10,4,-2,1,5,2], 6, 5, 2) == 15\nassert     max_sum_increasing_subseq([10,4,-2,1,5,2], 6, 5, 3) == 22\nassert     max_sum_increasing_subseq([10,4,-2,1,5,2], 6, 0, 3) == 0\nassert     max_sum_increasing_subseq([10,4,-2,1,5,2], 6, 5, 4) == 15\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_sum_increasing_subseq([3, 1, -2, 4, 5, 7, 10], 7, 3) == 8\nassert     max_sum_increasing_subseq([4, 1, 2, -4, 5, 4, 8, 7, 10], 4, 4) == 6\nassert     max_sum_increasing_subseq([2, 4, 7, 3, 6, 9, 5, 8, 10], 5, 3) == 8\nassert     max_sum_increasing_subseq([10, 2, 4, 7, 3, 6, 9, 5, 8], 5, 3) == 10\n\ndef max_sum_increasing_subseq_recursive(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    pass\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    pass\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nmax_sum_increasing_subseq([2, 4, 6, 8], 4, 2) == 10\nmax_sum_increasing_subseq([2, 4, 6, 8], 4, 3) == 14\nmax_sum_increasing_subseq([2, 4, 6, 8], 4, 4) == 18\nmax_sum_increasing_subseq([2, 4, 6, 8], 4, 5) == 17\nmax_sum_increasing_subseq([2, 4, 6, 8], 4, 6) == 15\nmax_sum_increasing_subseq([2, 4, 6, 8], 4, 7) == 13\nmax_sum_increasing_subseq([2, 4, 6, 8], 4, 8) == 10\n\nmax_sum_increasing_subseq([1, 2, 3, 5], 4, 2) == 8\nmax_sum_increasing_subseq([1, 2, 3, 5], 4, 3) == 8\nmax_sum_increasing_subseq([1, 2, 3, 5], 4, 4) == 8\nmax_sum_increasing_subseq([1, 2, 3, 5], 4, 5) == 3\nmax_sum_increasing_subseq([1, 2, 3, 5], 4, 6) == 5\nmax_sum_increasing_subseq([1, 2, 3, 5], 4, 7) == 2\nmax_sum_increasing_subseq([1, 2, 3, 5], 4, 8) == 1\nmax_sum_increasing_subseq([1, 2, 3, 5], 4, 9) == 0\nmax_sum_increasing_subseq([1, 2, 3, 5], 4, 10) == 0\n\nmax_sum_increasing_subseq([2, 4, 6, 8, 10], 4, 2) == 18\nmax_sum_increasing_subseq([2, 4, 6, 8, 10], 4, 3) == 17\nmax_sum_increasing_subseq([2, 4, 6, 8, 10], 4, 4) == 15\nmax_sum_increasing_subseq([2, 4, 6, 8, 10], 4, 5) == 13\nmax_sum_increasing_subseq([2, 4, 6, 8, 10], 4, 6) == 11\nmax_sum_increasing_subseq([2, 4, 6, 8, 10], 4, 7) == 9\nmax_sum_increasing_subseq([2, 4, 6, 8, 10], 4, 8) == 8\nmax_sum_increasing_subseq([2, 4, 6, 8, 10], 4, 9) == 7\nmax_sum_increasing_subseq([2, 4, 6, 8, 10], 4, 10) == 6\n\nmax_sum_increasing_subseq([2, 4, 6, 8, 10], 5, 2) == 16\nmax_sum_increasing_subseq([2, 4, 6, 8, 10], 5, 3) == 14\nmax_sum_increasing_subseq([2, 4, 6, 8, 10], 5, 4) == 13\nmax_sum_increasing_subseq([2, 4, 6, 8, 10], 5, 5) == 10\nmax_sum_increasing_subseq([2, 4, 6, 8, 10], 5, 6) == 7\nmax_sum_increasing_subseq([2, 4, 6, 8, 10], 5, 7) == 5\nmax_sum_increasing_subseq([2, 4, 6, 8, 10], 5, 8) == 3\nmax_sum_increasing_subseq([2, 4, 6, 8, 10], 5, 9) == 2\nmax_sum_increasing_subseq([2, 4, 6, 8, 10], 5, 10) == 1\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_sum_increasing_subseq([], 1, 0, 0) == 0\nassert     max_sum_increasing_subseq([], 1, 0, 1) == 0\nassert     max_sum_increasing_subseq([], 1, 0, 2) == 0\nassert     max_sum_increasing_subseq([], 1, 0, 3) == 0\nassert     max_sum_increasing_subseq([], 1, 0, 4) == 0\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_sum_increasing_subseq([1, 5, 7, 10, 1], 4, 2, 0) == 7, \"Wrong Output\"\nassert     max_sum_increasing_subseq([1, 5, 7, 10, 1], 4, 2, 1) == 10, \"Wrong Output\"\nassert     max_sum_increasing_subseq([1, 5, 7, 10, 1], 4, 2, 2) == 14, \"Wrong Output\"\nassert     max_sum_increasing_subseq([1, 5, 7, 10, 1], 4, 2, 3) == 15, \"Wrong Output\"\nassert     max_sum_increasing_subseq([1, 5, 7, 10, 1], 4, 2, 4) == 23, \"Wrong Output\"\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_sum_increasing_subseq([1, 2, 3, 4, 5, 6, 7, 8, 9], 6, 1) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     max_sum_increasing_subseq([1, 2, 3, 4, 5, 6, 7, 8, 9], 4, 1) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     max_sum_increasing_subseq([1, 2, 3, 4, 5, 6, 7, 8, 9], 5, 1) == [1, 2, 3, 4, 5]\nassert     max_sum_increasing_subseq([1, 2, 3, 4, 5, 6, 7, 8, 9], 6, 2) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     max_sum_increasing_subseq([1, 2, 3, 4, 5, 6, 7, 8, 9], 4, 2) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     colon_tuplex([0,1,2,3,4,5,6,7,8,9],5,3) == \n    [\n    [0,1,2],\n    [3,4,5],\n    [6,7,8],\n    [9,0,1],\n    [2,4,6],\n    [5,7,9]\n    ]\n\ndef arrow_tuplex(tuplex,m,n):\n    '''\n    Write a function to get an arrow of a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     colon_tuplex((1,2,3,4,5),0,2) == (1,2,3,4,5)\nassert     colon_tuplex((1,2,3,4,5),1,2) == (2,3,4,5,1)\nassert     colon_tuplex((1,2,3,4,5),0,1) == (1,4,5,2,3)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     colon_tuplex((1,2,3), 2, 3) == (1,2,3), \"Wrong\"\nassert     colon_tuplex((1,2,3), 3, 3) == (1,2,3), \"Wrong\"\nassert     colon_tuplex((1,2,3), 1, 4) == (1,2,3), \"Wrong\"\nassert     colon_tuplex((1,2,3), 2, 4) == (1,2,3), \"Wrong\"\nassert     colon_tuplex((1,2,3), 3, 4) == (1,2,3), \"Wrong\"\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     colon_tuplex((1,2),2,2) == (1,2)\nassert     colon_tuplex((1,2),2,3) == (1,2)\n\nassert     colon_tuplex((1,2,3),2,3) == (1,2,3)\nassert     colon_tuplex((1,2,3,4),2,3) == (1,2,3)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef from_colon_tuplex(tuplex):\n    '''\n    Write a function to get a tuple from a colon of a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert colon_tuplex(('a','b'),1,3) == ('a','b','b','b','b')\nassert colon_tuplex(('a','b'),1,4) == ('a','b','b','b','b')\nassert colon_tuplex(('a','b'),1,5) == ('a','b','b','b','b')\nassert colon_tuplex(('a','b','c','d'),1,2) == ('a','b','c','d','d')\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     colon_tuplex((1,2,3,4,5),2,3)==((1,2),3,4,5)\nassert     colon_tuplex((1,2,3,4,5),3,3)==((1,2,3),4,5)\nassert     colon_tuplex((1,2,3,4,5),3,3)==((1,2,3),4,5)\nassert     colon_tuplex((1,2,3,4,5),2,3)==((1,2),3,4,5)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef find_empty_tuple(board):\n    '''\n    Write a function to find the empty tuple in board.\n    '''\n    pass\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     colon_tuplex(('a', 'b', 'c', 'd'),(1,2,3,4),(4,5,6,7))==('a','b', 'c')\nassert     colon_tuplex(('a', 'b', 'c', 'd'),(1,2,3,4,5),(4,5,6,7))==('a','b', 'c')\nassert     colon_tuplex(('a', 'b', 'c', 'd'),(1,2,3,4,5,6),(4,5,6,7))==('a','b', 'c')\nassert     colon_tuplex(('a', 'b', 'c', 'd'),(1,2,3,4,5,6,7),(8,9,10,11,12,13))==('a', 'b', 'c')\nassert     colon_tuplex(('a', 'b', 'c', 'd'),(1,2,3,4,5,6,7),(8,9,10,11,12,13,14))==('a', 'b', 'c')\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     colon_tuplex(('1', '2', '3', '4', '5'),3,3) == ('1', '2', '3', '4', '5')\nassert     colon_tuplex(('1', '2', '3', '4', '5'),0,3) == ('1', '2', '3')\nassert     colon_tuplex(('1', '2', '3', '4', '5'),0,4) == ('1', '2', '3')\nassert     colon_tuplex(('1', '2', '3', '4', '5'),1,3) == ('2', '3', '4')\nassert     colon_tuplex(('1', '2', '3', '4', '5'),1,4) == ('2', '3')\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     large_product([4, 5, 7], [2, 3, 6], 1) == 5\nassert     large_product([4, 5, 7], [2, 3, 6], 2) == 20\nassert     large_product([1, 1], [1], 2) == 1\nassert     large_product([1, 1], [1], 1) == 1\n\nimport unittest\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     large_product([3,7,8,3,1,9], [5,9,7,9,2,5], 3) == 140\nassert     large_product([1,1,1,1], [1,1,1,1], 1) == 4\nassert     large_product([1,2,3,4,5], [2,2,3,4,5], 5) == 120\nassert     large_product([1,2,3,4,5], [2,2,3,4,5], 2) == 20\nassert     large_product([1,2,3,4,5], [2,2,3,4,5], 0) == 1\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     large_product([10,3,1,7],[2,4,5,6],2) == 120\nassert large_product([1,2,3,4],[5,6,7,8],4) == 60\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     large_product([1,2,3,4,5], [2,3,4,5,6], 3) == 15\nassert     large_product([1,2,3,4,5], [-1,2,3,4,5], 4) == 0\nassert     large_product([], [], 5) == 0\nassert large_product([1,2,3,4,5,6], [2,3,4,5,6], 7) == 0\nassert large_product([1,2,3,4,5], [-1,2,3,4,5], 3) == 0\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     large_product([1,5,3,2,5,6,7], [1,5,3,2,5,6,7], 3) == [120, 60, -1]\nassert     large_product([2,3,5], [3,7,10], 2) == [-1, -1]\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     maximum(4,5) == 5, \"Function does not give correct answer\"\nassert    maximum(3,4) == 4, \"Function does not give correct answer\"\nassert    maximum(5,5) == 5, \"Function does not give correct answer\"\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     maximum(10,100) == 100\nassert maximum(100,100) == 100\nassert maximum(100,10) == 100\nassert maximum(10,10) == 10\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     maximum(3,4) == 3, 'Error in maximum'\nassert maximum(2,4) == 4, 'Error in maximum'\nassert maximum(3,3) == 3, 'Error in maximum'\nassert maximum(4,3) == 4, 'Error in maximum'\n\ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    pass\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nmaximum(2,4) == 2\nmaximum(3,3) == 3\nmaximum(5,5) == 5\nmaximum(-5,3) == 5\nmaximum(1,2) == 2\nmaximum(-1,-2) == -1\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     maximum(3,4) == 3\nassert    maximum(3,3) == 3\nassert    maximum(3,5) == 5\nassert    maximum(3,6) == 3\nassert    maximum(6,3) == 6\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     maximum(12,8) == 12\nassert     maximum(2,-2) == 2\nassert     maximum(9, -10) == 9\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert maximum(5,4) == 5\nassert maximum(100,55) == 100\nassert maximum(14.3,15.2) == 14.3\nassert maximum(-20,-1) == -20\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     maximum(5,10) ==    10, 'this is not correct'\nassert     maximum(5,5) ==    5, 'this is not correct'\nassert     maximum(10,5) ==    10, 'this is not correct'\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     maximum(1,2) == 2, \"function should return 2\"\nassert maximum(2,2) == 2, \"function should return 2\"\nassert maximum(-1,2) == 2, \"function should return 2\"\nassert maximum(-1,1) == 1, \"function should return 1\"\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     string_to_tuple(\"spam\") ==     ('s', 'p', 'a','m')\nassert     string_to_tuple(\"spaM\") ==     ('s', 'p', 'a','m')\nassert     string_to_tuple(\"SPAM\") ==     ('s', 'p', 'a','m')\nassert     string_to_tuple(\"spaMbacon\") ==     ('s', 'p', 'a','m', 'b', 'c', 'o','m')\nassert     string_to_tuple(\"spaMaBacon\") ==     ('s', 'p', 'a','m', 'b', 'c', 'o','m')\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     string_to_tuple(\"red\") == ('r', 'e', 'd'), \"Wrong value for'red'\"\nassert string_to_tuple(\"yellow\") == ('y', 'h', 'e', 'l', 'l'), \"Wrong value for 'yellow'\"\nassert string_to_tuple(\"blue\") == ('b', 'u', 'e', 'l', 'l'), \"Wrong value for 'blue'\"\nassert string_to_tuple(\"brown\") == ('b', 'a', 'r', 'n'), \"Wrong value for 'brown'\"\nassert string_to_tuple(\"\") == None, \"Wrong value for'red'\"\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     string_to_tuple(\"hi\") == tuple(\"hi\"), \"Should return a tuple\"\nassert     string_to_tuple(\"ab\") == tuple(\"ab\"), \"Should return a tuple\"\nassert     string_to_tuple(\"abc\") == tuple(\"abc\"), \"Should return a tuple\"\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef tuple_to_string(tup):\n    '''\n    Write a function to convert a given tuple of characters to a string.\n    '''\n    pass\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(\"Pass\" if ((''.join(string_to_tuple('Hello')))==('H','e','l','l','o')) else \"Fail\")\nassert \nprint(\"Pass\" if (((''.join(string_to_tuple('Hello')))==('H','e','l','l','o')) \nand isinstance(((''.join(string_to_tuple('Hello')))),tuple)) else \"Fail\")\nprint(\"Pass\" if (((''.join(string_to_tuple('Hello')))==('H','e','l','l','o')) \nand isinstance(((''.join(string_to_tuple('Hello')))),tuple)) else \"Fail\")\nprint(\"Pass\" if (((''.join(string_to_tuple('Hello')))==('H','e','l','l','o')) \nand isinstance(((''.join(string_to_tuple('Hello')))),tuple)) else \"Fail\")\n\nprint(\"Pass\" if (((''.join(string_to_tuple('Hello')))==('H','e','l','l','o')) \nand isinstance(((''.join(string_to_tuple('Hello')))),tuple)) else \"Fail\")\n\nprint(\"Pass\" if (((''.join(string_to_tuple('Hello')))==('H','e','l','l','o')) \nand isinstance(((''.join(string_to_tuple('Hello')))),tuple)) else \"Fail\")\n\nprint(\"Pass\" if (((''.join(string_to_tuple('Hello')))==('H','e','l','l','o')) \nand isinstance(((''.join(string_to_tuple('Hello')))),tuple)) else \"Fail\")\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef check_tuple_to_string(tuple1, str2):\n    '''\n    Write a function to check whether the given tuple is same as the given string.\n    '''\n    pass\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     string_to_tuple(\"a,b,c\") == ('a', 'b', 'c')\nassert     string_to_tuple(\"ab,abc,c\") == ('a', 'b', 'c')\nassert     string_to_tuple(\"ab,abc,c,d\") == ('a', 'b', 'c', 'd')\nassert     string_to_tuple(\"abc,abcd,efg,g\") == ('a', 'b', 'c', 'd')\nassert     string_to_tuple(\"a\") == ('a',)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     string_to_tuple(\"a\") == ('a', )\nassert     string_to_tuple(\"abc\") == ('a', 'b', 'c')\nassert     string_to_tuple(\"xyz\") == ('x', 'y', 'z')\nassert     string_to_tuple(\"jhk\") == ('j', 'h', 'k')\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     string_to_tuple('wxyz') == ('w', 'x', 'y', 'z')\nassert     string_to_tuple('xyz') == ('x', 'y', 'z')\nassert     string_to_tuple('az') == ('a', 'z')\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == \"__main__\": \n    print(set_left_most_unset_bit(0))\n    print(set_left_most_unset_bit(1))\n    print(set_left_most_unset_bit(2))\n    print(set_left_most_unset_bit(3))\n    print(set_left_most_unset_bit(4))\n    print(set_left_most_unset_bit(5))\n    print(set_left_most_unset_bit(6))\n    print(set_left_most_unset_bit(7))\n    print(set_left_most_unset_bit(8))\n    print(set_left_most_unset_bit(9))\n    print(set_left_most_unset_bit(10))\n    print(set_left_most_unset_bit(11))\n    print(set_left_most_unset_bit(12))\n    print(set_left_most_unset_bit(13))\n    print(set_left_most_unset_bit(14))\n    print(set_left_most_unset_bit(15))"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     set_left_most_unset_bit(4) == 1\nassert     set_left_most_unset_bit(16) == 1\nassert     set_left_most_unset_bit(64) == 1\nassert     set_left_most_unset_bit(128) == 1\nassert     set_left_most_unset_bit(32) == 0\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     set_left_most_unset_bit(n=45) == 15, \\\n        \"Expected: 15, Actual: {0}\".format(set_left_most_unset_bit(n=45))\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     set_left_most_unset_bit(2) == False\nassert     set_left_most_unset_bit(3) == False\nassert     set_left_most_unset_bit(32) == False\nassert     set_left_most_unset_bit(31) == False\nassert     set_left_most_unset_bit(2**31) == True\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     set_left_most_unset_bit(7) == 1, \"Wrong result\"\nassert     set_left_most_unset_bit(64) == 1, \"Wrong result\"\nassert     set_left_most_unset_bit(1) == 0, \"Wrong result\"\nassert     set_left_most_unset_bit(0) == 1, \"Wrong result\"\nassert     set_left_most_unset_bit(1) == 0, \"Wrong result\"\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(\"Pass\" if (0 == set_left_most_unset_bit(0)) else \"Fail\")\nprint(\"Pass\" if (1 == set_left_most_unset_bit(1)) else \"Fail\")\nprint(\"Pass\" if (2 == set_left_most_unset_bit(2)) else \"Fail\")\nprint(\"Pass\" if (3 == set_left_most_unset_bit(3)) else \"Fail\")\nprint(\"Pass\" if (4 == set_left_most_unset_bit(4)) else \"Fail\")\nprint(\"Pass\" if (7 == set_left_most_unset_bit(7)) else \"Fail\")\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     set_left_most_unset_bit(9) == 5\nassert     set_left_most_unset_bit(5) == 4\nassert     set_left_most_unset_bit(0) == 1\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     set_left_most_unset_bit(8) == 0, 'Leftmost unset bit should be 0'\nassert     set_left_most_unset_bit(7) == 1, 'Leftmost unset bit should be 1'\nassert     set_left_most_unset_bit(0) == 1, 'Leftmost unset bit should be 1'\nassert     set_left_most_unset_bit(13) == 1, 'Leftmost unset bit should be 1'\nassert     set_left_most_unset_bit(14) == 2, 'Leftmost unset bit should be 2'\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     volume_cone(3,4) == 19.13 # call the function and get the result\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    volume_cone(2,1) == math.pi * math.pow(2,3)/3, \"Your volume_cone function is wrong\"\n    volume_cone(3,4) == math.pi * math.pow(3,3)/3, \"Your volume_cone function is wrong\"\n    volume_cone(4,3) == math.pi * math.pow(4,3)/3, \"Your volume_cone function is wrong\"\n    volume_cone(5,2) == math.pi * math.pow(5,3)/3, \"Your volume_cone function is wrong\"\n\ndef sphere(r):\n    '''\n    Write a function to find the surface area of a sphere\n    '''\n    pass\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * (r ** 2) * (h / 3)\n    return volume\n\nassert volume_cone(3,4) == 48\nassert volume_cone(2,5) == 50\nassert volume_cone(4,3) == 48\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     volume_cone(3,5) == math.pi*3**2*5\nassert     volume_cone(0,5) == 0\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    volume_cone(2,3) == math.pi*math.pow(3,2)*(2*math.pow(r,2)+math.pow(h,2))\nassert volume_cone(2,1) == math.pi*math.pow(3,2)*(3*math.pow(r,2)+math.pow(h,2))\nassert volume_cone(1,1) == math.pi*math.pow(3,2)*(math.pow(r,2)+math.pow(h,2))\nassert volume_cone(2,0) == math.pi*math.pow(3,2)*(2*math.pow(r,2)+math.pow(h,2))\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     volume_cone(0,1) == math.pi * math.pow(r,2), \"Wrong volume_cone\"\nassert     volume_cone(1,1) == math.pi * math.pow(r,2) * math.sqrt(2), \"Wrong volume_cone\"\nassert     volume_cone(2,2) == math.pi * math.pow(r,2) * math.pow(r,2), \"Wrong volume_cone\"\nassert     volume_cone(2,3) == math.pi * math.pow(r,2) * math.sqrt(2) * math.pow(r,3), \"Wrong volume_cone\"\nassert     volume_cone(3,1) == math.pi * math.pow(r,2) * math.sqrt(2) * math.pow(r,3), \"Wrong volume_cone\"\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ndef volume_cone_naive(r,h):\n    '''\n    Your answer should be correct with 3 digits of precision\n    '''\n    pass\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     highest_Power_of_2(4) == 1, 'highest power of 2 is not correct'\nassert     highest_Power_of_2(40) == 2, 'highest power of 2 is not correct'\nassert     highest_Power_of_2(10) == 3, 'highest power of 2 is not correct'\nassert     highest_Power_of_2(16) == 2, 'highest power of 2 is not correct'\nassert     highest_Power_of_2(512) == 4, 'highest power of 2 is not correct'\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nhighest_Power_of_2(5) == 2\nhighest_Power_of_2(16) == 4\nhighest_Power_of_2(81) == 8\nhighest_Power_of_2(144) == 8\nhighest_Power_of_2(288) == 8"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     highest_Power_of_2(1) == 1\nassert     highest_Power_of_2(8) == 8\nassert     highest_Power_of_2(9) == 8\nassert     highest_Power_of_2(10) == 10\n\nprint(\"All test cases passed.\")\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef find_max_power_of_two(n): \n    '''\n    Write a python function to find the largest power of 2 that is less than or equal to n.\n    '''\n    pass\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     highest_Power_of_2(2)    ==     1\nassert     highest_Power_of_2(3)    ==     2\nassert     highest_Power_of_2(9)    ==     3\nassert     highest_Power_of_2(11)    ==     3\nassert     highest_Power_of_2(16)    ==     4\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef sum_of_square(n):\n    '''\n    Write a python function to find the sum of the square of the first n natural numbers.\n    '''\n    pass"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_lucas(1) == 2, \"Wrong answer. Expected 2, got %s\" % (find_lucas(1))\nassert     find_lucas(2) == 3, \"Wrong answer. Expected 3, got %s\" % (find_lucas(2))\nassert     find_lucas(3) == 4, \"Wrong answer. Expected 4, got %s\" % (find_lucas(3))\nassert     find_lucas(4) == 7, \"Wrong answer. Expected 7, got %s\" % (find_lucas(4))\nassert     find_lucas(5) == 11, \"Wrong answer. Expected 11, got %s\" % (find_lucas(5))\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_lucas(1) == 2\nassert     find_lucas(2) == 3\nassert     find_lucas(3) == 4\nassert     find_lucas(4) == 7\nassert     find_lucas(5) == 11\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    find_lucas(0) == 2\n    find_lucas(1) == 1\n    find_lucas(5) == 13\n    find_lucas(6) == 29"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    find_lucas(3) == 2\n    find_lucas(5) == 8\n    find_lucas(7) == 19\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint('find_lucas():')\nprint(find_lucas(3))\nprint(find_lucas(5))\nprint(find_lucas(10))\nprint(find_lucas(100))\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_lucas(0) == 2\nassert     find_lucas(1) == 1\nassert     find_lucas(2) == 3\nassert     find_lucas(3) == 4\nassert     find_lucas(4) == 7\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef test_find_lucas():\n    '''\n    Please test this function without using external libraries.\n    '''\n    assert find_lucas(1) == 1\n    assert find_lucas(2) == 3\n    assert find_lucas(4) == 7\n    "
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef add_string2(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if isinstance(string, str):\n        return map(lambda x: x + string, list_)\n    else:\n        raise TypeError('string must be a string')\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert add_string([1,2,3,4], \"Hello\") == ['H', 'e', 'l', 'l']\nassert add_string([1,2,3,4], \"World\") == ['W', 'o', 'r', 'l']\nassert add_string([1,2,3,4], \"Chocolate\") == ['H', 'o', 'l', 'a', 'c', 'o', 'f', 'r']\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef apply_format(string, *args, **kwargs):\n    '''\n    Write a function that formats a given string according to a given format string.\n    '''\n    pass\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_string([1,2,3], '${}') == ['1', '2', '3']\nassert     add_string([1,2,3], '%d') == ['1', '2', '3']\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     add_string([1,2,3], '{}') == '1'\nassert     add_string([1,2,3], '{0}') == '1'\nassert     add_string([1,2,3], '{1}') == '2'\nassert     add_string([1,2,3], '{2}') == '3'\nassert     add_string([1,2,3], '{0:>3}') ==' 1'\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     add_string([], '') == []\nassert     add_string([], 'f') == ['f']\nassert     add_string([], 'ff') == ['ff']\nassert     add_string([], 'fff') == ['fff']\nassert     add_string([], 'ffff') == ['ffff']\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     add_string(['hello', 'world', '!'], 'Hello World!') == ['Hello', 'World', '!']\n\ndef is_leap(year):\n    '''\n    Write a function that determines whether or not a year is a leap year.\n    '''\n    pass\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     convert_list_dictionary([1,2,3], [[1,2,3]], [[1,2,3]]) == {1:[[1,2,3]], 2:[[1,2,3]], 3:[[1,2,3]]}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     convert_list_dictionary([], [], []) == {}\nassert     convert_list_dictionary([], ['a'], ['a']) == {}\nassert     convert_list_dictionary(['a'], ['b'], ['c']) == {}\nassert     convert_list_dictionary(['a'], ['b'], ['c', 'd']) == {'b': ['c', 'd']}\nassert     convert_list_dictionary(['a', 'b', 'c'], ['d'], ['e']) == {'a': {'b': ['c'], 'd': ['e']}}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     convert_list_dictionary([2, 3, 4], {1: 'a', 2: 'b', 3: 'c'}, ['c', 'd', 'e']) == {1: 'a', 2: 'b', 3: 'c', 'c': 'c', 'd': 'd', 'e': 'e'}\nassert     convert_list_dictionary([2, 3, 4], {1: 'a', 2: 'b', 3: 'c'}, ['c', 'd', 'e'], {1: 'a', 2: 'b', 3: 'c'}) == {1: 'a', 2: 'b', 3: 'c', 'c': 'c', 'd': 'd', 'e': 'e'}"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     convert_list_dictionary([\"a\", \"b\", \"c\"], \n                                [\"x\", \"y\", \"z\"], \n                                [\"1\", \"2\", \"3\", \"4\", \"5\"]) == \n                            {'a': {'x': '1', 'y': '2', 'z': '3'}, \n                            'b': {'x': '4', 'y': '5', 'z': '6'}, \n                            'c': {'x': '7', 'y': '8', 'z': '9'}}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     convert_list_dictionary([2, 3, 4, 5], ['a', 'b', 'c', 'd'], ['e', 'f', 'g', 'h']) == {2: {'a': 'e', 'b': 'f', 'c': 'g', 'd': 'h'}, 3: {'a': 'e', 'b': 'f', 'c': 'g', 'd': 'h'}, 4: {'a': 'e', 'b': 'f', 'c': 'g', 'd': 'h'}, 5: {'a': 'e', 'b': 'f', 'c': 'g', 'd': 'h'}}\n\n\ndef convert_dictionary_to_list_of_dictionary(d1):\n    '''\n    Write a function to convert dictionary to nested list.\n    '''\n    pass\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     convert_list_dictionary([[\"apple\", \"orange\", \"banana\"], [\"pineapple\", \"grape\", \"mango\"], [\"kiwi\", \"lemon\", \"cucumber\"]], ['a', 'p', 'p', 'e'], ['c', 'o', 'r', 'e']) == {\"a\":{\"apple\":\"pineapple\", \"orange\":\"grape\", \"banana\":\"mango\"}, \"p\":{\"pineapple\":\"kiwi\", \"grape\":\"lemon\", \"mango\":\"cucumber\"}, \"e\":{\"apple\":\"kiwi\", \"orange\":\"lemon\", \"banana\":\"cucumber\"}}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     convert_list_dictionary(['a', 'b'], ['c', 'd'], ['e', 'f']) == {'a': {'c': 'e', 'd': 'f'}, 'b': {'c': 'e', 'd': 'f'}}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     convert_list_dictionary([1,2,3], [\"a\", \"b\", \"c\"], [\"x\", \"y\", \"z\"]) == {1:{\"a\":\"x\"}, 2:{\"b\":\"y\"}, 3:{\"c\":\"z\"}}\nassert convert_list_dictionary([1,2,3], [\"a\", \"b\", \"c\"], [\"x\", \"y\", \"z\"]) == {\"a\":\"x\", \"b\":\"y\", \"c\":\"z\"}\nassert convert_list_dictionary([1,2,3], [\"a\", \"b\", \"c\"], [\"x\", \"y\", \"z\"]) == {\"a\":\"x\", \"b\":\"y\", \"c\":\"z\"}\nassert convert_list_dictionary([], [\"a\", \"b\", \"c\"], [\"x\", \"y\", \"z\"]) == {\"a\":\"x\", \"b\":\"y\", \"c\":\"z\"}\nassert convert_list_dictionary([1], [\"a\", \"b\", \"c\"], [\"x\", \"y\", \"z\"]) == {\"a\":\"x\"}\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_max_sum(5) == 15\nassert     get_max_sum(7) == 21\nassert     get_max_sum(11) == 35\nassert     get_max_sum(13) == 46\n\ndef get_max_sum2 (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    max_sum = 0\n    while (n > 0):\n        if (n % 2 == 0):\n            max_sum += n / 2\n        if (n % 3 == 0):\n            max_sum += n / 3\n        if (n % 4 == 0):\n            max_sum += n / 4\n        if (n % 5 == 0):\n            max_sum += n / 5\n        n = n // 5\n    return max_sum\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n'''\n\nThe maximum sum can be calculated recursively in one of these ways:\n1)\nn = 5\nf(5) = 5\nf(2) = 3 + 2 + 3\nf(1) = 3 + 1 + 2 + 3 + 3\nf(0) = 0 + 2 + 3 + 3 + 3\n\n2)\nn = 10\nf(10) = 10\nf(5) = 10\nf(2) = 10\nf(1) = 10\nf(0) = 0 + 2 + 3 + 3 + 3 + 3\n\n3)\nn = 15\nf(15) = 15\nf(5) = 15\nf(2) = 15\nf(1) = 15\nf(0) = 15 + 10 + 15 + 15 + 15 + 15\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_max_sum(1) == 1 \nassert     get_max_sum(2) == 2 \nassert     get_max_sum(3) == 3 \nassert     get_max_sum(4) == 5 \nassert     get_max_sum(5) == 9 \n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef get_min_sum (n):\n    '''\n    Write a function to find the minimum sum possible by using the given equation f(n) = min( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    pass\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_max_sum(1) == 1\nassert     get_max_sum(2) == 2\nassert     get_max_sum(4) == 10\nassert     get_max_sum(5) == 15\nassert     get_max_sum(6) == 21\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_max_sum (1) == 1, \"f(1) = 1\"\nassert     get_max_sum (2) == 3, \"f(2) = 3\"\nassert     get_max_sum (3) == 6, \"f(3) = 6\"\nassert     get_max_sum (4) == 8, \"f(4) = 8\"\nassert     get_max_sum (5) == 10, \"f(5) = 10\"\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_max_sum(5) == 14\nassert     get_max_sum(10) == 52\nassert     get_max_sum(100) == 1501\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_max_sum(6) == 19\nassert     get_max_sum(12) == 60\n\ndef f(n):\n    '''\n    Write a function that takes a nonnegative integer n and computes its binary representation.\n    '''\n    pass\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_max_sum(2) == 2\nassert     get_max_sum(3) == 4\nassert     get_max_sum(4) == 6\nassert     get_max_sum(5) == 10\nassert     get_max_sum(6) == 16\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_max_sum(5) == 15, '5 is incorrect'\nassert     get_max_sum(6) == 18, '6 is incorrect'\nassert     get_max_sum(9) == 27, '9 is incorrect'\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_length_list([]) == 0, \\\n        \"[Error]: Expected Output: '0' for the empty list\"\nassert     max_length_list([1,2,3,4,5]) == 5, \\\n        \"[Error]: Expected Output: '5' for the non-empty list\"\nassert     max_length_list([1,2,3,4,5,5]) == 5, \\\n        \"[Error]: Expected Output: '5' for the non-empty list\"\nassert     max_length_list([1,2,3,4,5,5,6]) == 6, \\\n        \"[Error]: Expected Output: '6' for the non-empty list\"\nassert     max_length_list([]) == 0, \\\n        \"[Error]: Expected Output: '0' for the empty list\"\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    max_length_list(list_1) == 0, \"Input array is empty\"\n    max_length_list(list_2) == 1, \"Input array is length 1\"\n    max_length_list(list_3) == 1, \"Input array is length 1\"\n    max_length_list(list_4) == 2, \"Input array is length 2\"\n    max_length_list(list_5) == 2, \"Input array is length 2\"\n    max_length_list(list_6) == 3, \"Input array is length 3\"\n    max_length_list(list_7) == 1, \"Input array is length 1\"\n    max_length_list(list_8) == 1, \"Input array is length 1\"\n    max_length_list(list_9) == 1, \"Input array is length 1\"\n    max_length_list(list_10) == 2, \"Input array is length 2\"\n    max_length_list(list_11) == 3, \"Input array is length 3\"\n    max_length_list(list_12) == 2, \"Input array is length 2\"\n    max_length_list(list_13) == 3, \"Input array is length 3\"\n    max_length_list(list_14) == 3, \"Input array is length 3\"\n    max_length_list(list_15) == 2, \"Input array is length 2\"\n    max_length_list(list_16) == 2, \"Input array is length 2\"\n    max_length_list(list_17) == 2, \"Input array is length 2\"\n    max_length_list(list_18) == 2, \"Input array is length 2\"\n    max_length_list(list_19) == 2, \"Input array is length 2\"\n    max_length_list(list_20) == 3, \"Input array is length 3\"\n    max_length_list(list_21) == 1, \"Input array is length 1\"\n    max_length_list(list_22) == 1, \"Input array is length 1\"\n    max_length_list(list_23) == 1, \"Input array is length 1\"\n    max_length_list(list_24) == 2, \"Input array is length 2\"\n    max_length_list(list_25) == 2, \"Input array is length 2\"\n    max_length_list(list_26) == 3, \"Input array is length 3\"\n    max_length_list(list_27) == 2, \"Input array is length 2\"\n    max_length_list(list_28) == 1, \"Input array is length 1\"\n    max_length_list(list_29) == 2, \"Input array is length 2\"\n    max_length_list(list_30) == 3, \"Input array is length 3\"\n    max_length_list(list_31) == 2, \"Input array is length 2\"\n    max_length_list(list_32) == 2, \"Input array is length 2\"\n    max_length_list(list_33) == 3, \"Input array is length 3\"\n    max_length_list(list_34) == 2, \"Input array is length 2\"\n    max_length_list(list_35) == 3, \"Input array is length 3\"\n    max_length_list(list_36) == 2, \"Input array is length 2\"\n    max_length_list(list_37) == 2, \"Input array is length 2\"\n    max_length_list(list_38) == 3, \"Input array is length 3\"\n    max_length_list(list_39) == 3, \"Input array is length 3\"\n    max_length_list(list_40) == 2, \"Input array is length 2\"\n    max_length_list(list_41) == 2, \"Input array is length 2\"\n    max_length_list(list_42) == 1, \"Input array is length 1\"\n    max_length_list(list_43) == 1, \"Input array is length 1\"\n    max_length_list(list_44) == 1, \"Input array is length 1\"\n    max_length_list(list_45) == 2, \"Input array is length 2\"\n    max_length_list(list_46) == 2, \"Input array is length 2\"\n    max_length_list(list_47) == 2, \"Input array is length 2\"\n    max_length_list(list_48) == 3, \"Input array is length 3\"\n    max_length_list(list_49) == 3, \"Input array is length 3\"\n    max_length_list(list_50) == 2, \"Input array is length 2\"\n    max_length_list(list_51) == 2, \"Input array is length 2\"\n    max_length_list(list_52) == 2, \"Input array is length 2\"\n    max_length_list(list_53) == 2, \"Input array is length 2\"\n    max_length_list(list_54) == 3, \"Input array is length 3\"\n    max_length_list(list_55) == 3, \"Input array is length 3\"\n    max_length_list(list_56) == 2, \"Input array is length 2\"\n    max_length_list(list_57) == 2, \"Input array is length 2\"\n    max_length_list(list_58) == 3, \"Input array is length 3\"\n    max_length_list(list_59) == 2, \"Input array is length 2\"\n    max_length_list(list_60) == 2, \"Input array is length 2\"\n    max_length_list(list_61) == 2, \"Input array is length 2\"\n    max_length_list(list_62) == 3, \"Input array is length 3\"\n    max_length_list(list_63) == 3, \"Input array is length 3\"\n    max_length_list(list_64) == 2, \"Input array is length 2\"\n    max_length_list(list_65) == 2, \"Input array is length 2\"\n    max_length_list(list_66) == 2, \"Input array is length 2\"\n    max_length_list(list_67) == 3, \"Input array is length 3\"\n    max_length_list(list_68) == 2, \"Input array is length 2\"\n    max_length_list(list_69) == 1, \"Input array is length 1\"\n    max_length_list(list_70) == 3, \"Input array is length 3\"\n    max_length_list(list_71) == 3, \"Input array is length 3\"\n    max_length_list(list_72) == 1, \"Input array is length 1\"\n    max_length_list(list_73) == 3, \"Input array is length 3\"\n    max_length_list(list_74) == 2, \"Input array is length 2\"\n    max_length_list(list_75) == 2, \"Input array is length 2\"\n    max_length_list(list_76) == 3, \"Input array is length 3\"\n    max_length_list(list_77) == 3, \"Input array is length 3\"\n    max_length_list(list_78) == 1, \"Input array is length 1\"\n    max_length_list(list_79) == 1, \"Input array is length 1\"\n    max_length_list(list_80) == 1, \"Input array is length 1\"\n    max_length_list(list_81) == 3, \"Input array is length 3\"\n    max_length_list(list_82) == 3, \"Input array is length 3\"\n    max_length_list(list_83) == 3, \"Input array is length 3\"\n    max_length_list(list_84) == 2, \"Input array is length 2\"\n    max_length_list(list_85) == 2, \"Input array is length 2\"\n    max_length_list(list_86) == 2, \"Input array is length 2\"\n    max_length_list(list_87) == 1, \"Input array is length 1\"\n    max_length_list(list_88) == 1, \"Input array is length 1\"\n    max_length_list(list_89) == 1, \"Input array is length 1\"\n    max_length_list(list_90) == 2, \"Input array is length 2\"\n    max_length_list(list_91) == 2, \"Input array i"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_length_list([1,2,3,4,5,6,7]) == 7\nassert     max_length_list([1,2,3,4]) == 4\nassert     max_length_list([1]) == 1\nassert     max_length_list([]) == 0\n\ndef sorted_list(input_list):\n    '''\n    Write a function to sort a list of numbers\n    '''\n    pass\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_length_list([1,2,3,4,5]) == 5\nassert     max_length_list([1,2,3,4]) == 4\nassert     max_length_list([1,2,3]) == 3\nassert     max_length_list([1]) == 1\nassert     max_length_list([]) == 0\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert max_length_list([1, 2, 3, 4, 5]) == 5\nassert max_length_list([5, 7, 5, 5, 4, 5]) == 5\nassert max_length_list([5, 7, 5, 5, 4, 5]) == 5\n\n\ndef max_length_dict(input_list):\n    '''\n    Write a function to find the dictionary with maximum length.\n    '''\n    pass\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_length_list([1,2,3,4,5]) == 5\nassert     max_length_list([1,2,3,4]) == 5\nassert     max_length_list([1,2,3,4,5,6,7,8]) == 7\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_length_list([1,2,3,4,5]) == 5, \"Should return 5\"\nassert     max_length_list([5,6,7,8,9]) == 5, \"Should return 5\"\nassert     max_length_list([5,6,7,8,9,10]) == 10, \"Should return 10\"\nassert     max_length_list([]) == 0, \"Should return 0\"\nassert     max_length_list([1,2,3,4,5,6,7]) == 6, \"Should return 6\"\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_length_list([]) == 0\nassert     max_length_list([1,2,3]) == 3\nassert     max_length_list([\"cat\",\"dog\",\"mouse\"]) == 3\nassert     max_length_list([1,2,3,4,5,6]) == 6\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_distinct(('a', 'b')) == False\nassert     check_distinct(('a', 'b', 'a')) == True\nassert     check_distinct(('a', 'a', 'b', 'b', 'a', 'c')) == True\nassert     check_distinct(('a', 'a', 'b', 'c', 'b', 'c')) == False\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_distinct((1,1,2,3,4,5,6,7,9)) == True, 'not true'\nassert     check_distinct((1,1,1,1,3,4,5,6,7)) == False, 'not false'\nassert     check_distinct((1,1,1,1,3,4,5,6,7,9)) == True, 'not true'\nassert     check_distinct((1,2,3,4,5,6,7,8,9,10)) == False, 'not false'\nassert     check_distinct((1,2,3,4,5,6,7,8,9,10,10)) == True, 'not true'\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_distinct(('a', 'b', 'c', 'd', 'e', 'a', 'z')) == False, \"distinct\"\nassert     check_distinct(('a', 'b', 'c', 'd', 'e', 'a', 'z')) == True, \"distinct\"\nassert     check_distinct(('a', 'b', 'c', 'd', 'e', 'a', 'z')) == True, \"distinct\"\nassert     check_distinct(('a', 'b', 'c', 'd', 'e', 'a', 'z')) == True, \"distinct\"\n\ndef check_subsequence(test_tup):\n    '''\n    Write a function to check if given tuple is a subsequence of another tuple.\n    '''\n    pass\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_distinct((1,2,3,4)) == True, \"Test case 1: (1,2,3,4) failed\"\nassert     check_distinct((1,2,3)) == False, \"Test case 2: (1,2,3) failed\"\nassert     check_distinct((2,2,3,3,4,4)) == True, \"Test case 3: (2,2,3,3,4,4) failed\"\nassert     check_distinct((1,1,1,1)) == False, \"Test case 4: (1,1,1,1) failed\"\n\n'''\nQ. In a given list the first element should become the last element and the rest of the elements should be moved one by one to the end.\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_distinct(('a', 'b', 'c')) == True\nassert     check_distinct(('a', 'b', 'd')) == False\nassert     check_distinct(('a', 'a', 'a')) == False\n\n\ndef sort_by_key(test_tup):\n    '''\n    Write a function to sort the given tuple by the second value in the tuple.\n    '''\n    pass\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert check_distinct((1, 2, 4, 2, 3)) == True\nassert check_distinct((1, 2, 3)) == False"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_distinct((1,2,3,4)) == True\nassert     check_distinct((1,2,3,4,5)) == False\nassert     check_distinct((1,2,3,4,5,6,7)) == True\nassert     check_distinct((1,2,3,4,5,6,7,8)) == False\nassert     check_distinct((1,2,3,4,5,6,7,8,9)) == True\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     first_non_repeating_character('') == None\nassert     first_non_repeating_character('abc') == 'a'\nassert     first_non_repeating_character('abcabcabc') == 'a'\nassert     first_non_repeating_character('aaaaaa') == 'a'\nassert     first_non_repeating_character('abaaaa') == 'b'\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     first_non_repeating_character('abcd') == 'a'\nassert     first_non_repeating_character('abcde') == 'a'\nassert     first_non_repeating_character('abcdab') == 'a'\nassert     first_non_repeating_character('aaa') == 'a'\nassert     first_non_repeating_character('abcd') == None\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     first_non_repeating_character(\"aacccccaaa\") == None\nassert     first_non_repeating_character(\"ab\") == None\nassert     first_non_repeating_character(\"cacaca\") == 'a'\n\nprint(first_non_repeating_character.__doc__)\n\n'''\nIn this challenge, a farmer has a farm, and he wants to buy some crops from it. For each kind of crop in the farm he has, he wants to buy it at most once.\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     first_non_repeating_character(\"ab\") == 'b'\nassert     first_non_repeating_character(\"abca\") == 'a'\nassert     first_non_repeating_character(\"aab\") == 'a'\nassert     first_non_repeating_character(\"abcabc\") == 'c'\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(first_non_repeating_character(''))\n    print(first_non_repeating_character('hi'))\n    print(first_non_repeating_character('abacabad'))\n    print(first_non_repeating_character('aabb'))\n    print(first_non_repeating_character('google'))\n    print(first_non_repeating_character('hi hi'))"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     first_non_repeating_character('') == '', 'Empty String'\nassert     first_non_repeating_character('a') == '', 'Should return the first non-repeated character'\nassert     first_non_repeating_character('abcabc') == '', 'Should return the first non-repeated character'\nassert     first_non_repeating_character('abcabcabc') == '', 'Should return the first non-repeated character'\nassert     first_non_repeating_character('abcabcabcabc') == 'c', 'Should return the first non-repeated character'\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     first_non_repeating_character(\"abab\") == 'a'\nassert     first_non_repeating_character(\"aab\") == 'a'\nassert     first_non_repeating_character(\"aaba\") == 'a'\nassert     first_non_repeating_character(\"abcd\") == 'a'\nassert     first_non_repeating_character(\"abc\") == 'a'\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     first_non_repeating_character(\"raagam\") == 'a'\nassert     first_non_repeating_character(\"raagamkumar\") == 'a'\nassert     first_non_repeating_character(\"harry\") == 'h'\nassert     first_non_repeating_character(\"hello\") == 'e'\nassert     first_non_repeating_character(\"hello\") == 'e'\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     first_non_repeating_character(\"abc\") == \"b\", \"First non-repeating character should be 'b'.\"\nassert     first_non_repeating_character(\"aab\") == \"a\", \"First non-repeating character should be 'a'.\"\nassert     first_non_repeating_character(\"abcd\") == \"e\", \"First non-repeating character should be 'e'.\"\nassert     first_non_repeating_character(\"aaabbc\") == \"c\", \"First non-repeating character should be 'c'.\"\nassert     first_non_repeating_character(\"aababc\") == \"c\", \"First non-repeating character should be 'c'.\"\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_char('abcd') == True\nassert     check_char('a') == True\nassert     check_char('') == False\nassert     check_char('abc') == True\nassert     check_char('abc.abc') == True\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ncheck_char('abcd')\ncheck_char('abc')\ncheck_char('ab')\ncheck_char('a')\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_char('hello') == True, '\"hello\" does not start and end with a same character'\nassert     check_char('abc') == True, '\"abc\" does not start and end with a same character'\nassert     check_char('abcdefghi') == True, '\"abcdefghi\" does not start and end with a same character'\n\n'''\nWrite a function that accepts a single integer and calculates the sum of its digits recursively.\n'''\ndef sum_of_digits(number):\n    '''\n    Write a function that takes a single integer argument, \n    and returns its sum of its digits recursively. \n    The digits of a number are its digits in the base 10 system. \n    The following is an example of the base 10 digits sum calculation in Python.\n    '''\n    pass\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_char('abc') == False\nassert     check_char('abcdef') == True\nassert     check_char('abcdefg') == False\nassert     check_char('abcdefgh') == True\nassert     check_char('abcdefghij') == False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert check_char('ra') == True \nassert check_char('ra') == False \nassert check_char('raa') == True \nassert check_char('raa') == False \n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert not check_char(\"ab\")\nassert check_char(\"aab\")\nassert check_char(\"aab\")\nassert check_char(\"aaa\")\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(check_char(\"bac\"))\nprint(check_char(\"asdsasd\"))\nprint(check_char(\"#\"))\nprint(check_char(\"#.\"))\nprint(check_char(\"\"))\nprint(check_char(\"a\"))\n\ndef has_even_number_of_distinct_characters(string):\n    '''\n    Given a string, check if it has an even number of (distinct) characters.\n    '''\n    pass\n\nassert \nprint(has_even_number_of_distinct_characters(\"abc\"))\nprint(has_even_number_of_distinct_characters(\"a\"))\nprint(has_even_number_of_distinct_characters(\"abcd\"))\nprint(has_even_number_of_distinct_characters(\"qwertyuiop\"))\nprint(has_even_number_of_distinct_characters(\"xaszx\"))\nprint(has_even_number_of_distinct_characters(\"\"))\n\ndef has_odd_number_of_distinct_characters(string):\n    '''\n    Given a string, check if it has an odd number of (distinct) characters.\n    '''\n    pass\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nif __name__ == \"__main__\":\n    print(\"Example:\")\n    print(check_char('water'))\n\n    # These \"asserts\" are used for self-checking and not for an auto-testing\n    assert check_char('water') == True\n    assert check_char('time') == False\n    "
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert not check_char('asdf')\nassert check_char('asdfasd')\nassert check_char('asdfasdzxc')\nassert check_char('asdfasdzxc')\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     median_numbers(1,2,3) == 2\nassert     median_numbers(2,3,4) == 2.5\nassert     median_numbers(5,5,5) == 5\nassert     median_numbers(2,3,4) == 2\nassert     median_numbers(3,4,5) == 3\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert median_numbers(5, 10, 15) == 5\nassert median_numbers(1, 2, 3) == 2\nassert median_numbers(-1, -2, -3) == -1\n\nprint(\"All tests passed!\""
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     median_numbers(1,2,3) == 2.5\nassert median_numbers(3,4,5) == 4.0\nassert median_numbers(5,6,7) == 4.5\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    pass\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nmedian_numbers(1,3,5) == 2.0\n\nassert \nmedian_numbers(2,5,7) == 2.5\n\nassert \nmedian_numbers(1,2,3) == 2.0\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     median_numbers(1,2,3)     == 2.5\nassert median_numbers(1,2,2)     == 2.0\nassert median_numbers(1,1,2)     == 1.5\nassert median_numbers(2,2,2)     == 2.0\nassert median_numbers(1,1,3)     == 2.0\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     median_numbers(5,6,7) == 5.5\nassert     median_numbers(1,2,3) == 2.5\nassert     median_numbers(2,2,2) == 2.0\n\ndef median_numbers_iterative(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Calculate the total number of elements\n    total = a + b + c\n    # Sort the three numbers\n    sorted_a = sorted([a,b,c])\n    # If the total number is odd then return the middle element\n    if total % 2!= 0:\n        return sorted_a[int(total / 2)]\n    # If the total is even, return the average of the middle elements\n    else:\n        return (sorted_a[int(total / 2)] + sorted_a[int(total / 2) - 1]) / 2.0\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     median_numbers([1,2,3],2,1) == 2\nassert median_numbers([2,1,3],2,1) == 2.5\nassert median_numbers([3,2,1],2,1) == 2\nassert median_numbers([3,2,1],2,2) == 2\nassert median_numbers([3,2,1],2,3) == 2\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     median_numbers(1,2,3)==2.5\nassert median_numbers(0,0,0)==0\nassert median_numbers(2,2,2)==2\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(map(int, str(nums)))\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_of_digits([]) == 0, \"Empty list.\"\nassert     sum_of_digits([1]) == 0, \"Single number.\"\nassert     sum_of_digits([2, 4, 5, 9]) == 9, \"List with 4 elements.\"\nassert     sum_of_digits([100,100,100,100]) == 100, \"List with 6 elements.\"\n\nprint('Testing completed')\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_of_digits([1234,4555,7788]) == 10\nassert     sum_of_digits([101,1234,4555,7788]) == 17\nassert     sum_of_digits([101,971,2782]) == 16\nassert     sum_of_digits([7]) == 7\nassert     sum_of_digits([1,2,3]) == 6\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_of_digits([123,123,123,123,123]) == 9\n\n\n\ndef sum_of_digits2(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(x) for x in str(nums))\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_of_digits([1, 2, 3, 4, 5]) == 5\nassert     sum_of_digits([1, -2, -3, 4, 5]) == 1\nassert     sum_of_digits([1, 2, 3, 4]) == 0\nassert     sum_of_digits([0]) == 0\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_of_digits([168, 95, 62]) == 1, 'check the correctness of sum_of_digits'\nassert     sum_of_digits([1, 2, 3, 4, 5]) == 1, 'check the correctness of sum_of_digits'\nassert     sum_of_digits([]) == 0, 'check the correctness of sum_of_digits'\nassert     sum_of_digits([1, 2, 3, 4, 5, 6, 7]) == 12, 'check the correctness of sum_of_digits'\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_of_digits([1,2,3]) == 6\nassert     sum_of_digits([1,2,3,4,5,6,7,8]) == 27\nassert     sum_of_digits([2,4,6]) == 2 + 4 + 6\nassert     sum_of_digits([1,3,5,7,9]) == 1 + 3 + 5 + 7 + 9\nassert     sum_of_digits([6,2,2,1,9]) == 6 + 2 + 2 + 1 + 9\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_of_digits([32, 63, 91, 96]) == 9, \"sum of digits of a list is wrong\"\nassert     sum_of_digits([34, 12, 60, 2, 78]) == 27, \"sum of digits of a list is wrong\"\nassert     sum_of_digits([]) == 0, \"sum of digits of a list is wrong\"\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     bitwise_xor((1, 2), (3, 4)) == (0, 6), \"bitwise_xor should be (0,6)\"\nassert     bitwise_xor((1, 2), (3, 5)) == (0, 7), \"bitwise_xor should be (0,7)\"\nassert     bitwise_xor((2, 4), (5, 8)) == (1, 0), \"bitwise_xor should be (1,0)\"\nassert     bitwise_xor((0, 0), (0, 0)) == (0, 0), \"bitwise_xor should be (0,0)\"\nassert     bitwise_xor((1, 2), (2, 4)) == (3, 6), \"bitwise_xor should be (3,6)\"\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     bitwise_xor((1,1), (2,2)) == (0,0)\nassert     bitwise_xor((1,2), (2,3)) == (0,1)\nassert     bitwise_xor((0,1), (1,0)) == (1,0)\nassert     bitwise_xor((0,1), (1,1)) == (1,1)\nassert     bitwise_xor((0,1), (1,2)) == (1,0)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nbitwise_xor((0, 1, 0), (1, 0, 1)) == (1, 0, 0)\nassert \nbitwise_xor((1, 1, 1), (0, 1, 1)) == (1, 1, 1)\nassert \nbitwise_xor((0, 0, 0), (1, 1, 1)) == (1, 0, 0)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     bitwise_xor((1, 2, 3), (4, 5, 6)) == (1, 5, 3), \"XOR\"\nassert     bitwise_xor((2, 4, 6), (1, 3, 5)) == (3, 4, 1), \"XOR\"\nprint(\"\\nYOUR CODE IS CORRECT!\")\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     bitwise_xor((1,2), (3,4)) == (2,4)\nassert     bitwise_xor((1,2), (3,5)) == (1,5)\nassert     bitwise_xor((1,2), (1,2)) == (0,0)\nassert     bitwise_xor((1,2), (0,3)) == (1,3)\nassert     bitwise_xor((0,2), (1,2)) == (1,2)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_freq([1, 1, 1, 2, 2, 3, 4]) == 3\nassert     extract_freq([1, 2, 3, 4, 5]) == 5\nassert     extract_freq([1, 2, 3, 1, 2, 3, 1, 2, 3]) == 6\nassert     extract_freq([1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 4]) == 3\n\n'''\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_freq([[1,2,3],['a','b'],['c',1,2,3,4],[1,2,3]]) == 2\nassert extract_freq([[1,2,3],['a','b'],['c',1,2,3,4],[1,2,3,4]]) == "
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert extract_freq([[1,2],[3,4],[5,6],[7,8]]) == 3\nassert extract_freq([[1,2],[3,4],[5,6],[7,8],[7,8]]) == 2\n\n\n\ndef swap_val(lst, index1, index2):\n    '''\n    Write a function to swap the values of two given indices in a list.\n    '''\n    pass\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_freq([[1,2,3],[3,4,5],[4,5,6],[1,3,6]]) == 2\nassert     extract_freq([[1,2,3,4],[3,4,5,6],[4,5,6]]) == "
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_freq([[2,3], [3,2], [1,3]]) == 2\nassert     extract_freq([[2,3], [3,2]]) == 1\nassert     extract_freq([[2,3], [3,2,2]]) == 1\nassert     extract_freq([[2,2,3]]) == 1\nassert     extract_freq([[2,3,2,3,3]]) == 1\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_freq([1,2,3]) == 2\nassert     extract_freq([]) == 0\nassert     extract_freq([(1,2,3),(1,2,3)]) == 1\nassert     extract_freq([(1,2,3),(1,2,3),(1,2,3)]) == 1\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_freq([(1, 2), (2, 3), (3, 4), (4, 5), (1, 2)]) == 3\nassert     extract_freq([(1, 2), (2, 2), (3, 4), (4, 5), (1, 2)]) == 3\nassert     extract_freq([(1, 2), (2, 2), (3, 4), (4, 5), (1, 2)]) == 3\nassert     extract_freq([(1, 2), (1, 2), (1, 2), (1, 2), (1, 2)]) == 3\nassert     extract_freq([(1, 2), (1, 2), (1, 2), (1, 2), (1, 2)]) == 3\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_freq([(1, 2), (2, 3), (1, 3), (2, 1), (2, 1), (1, 1)]) == 1, \"Wrong result\"\nassert     extract_freq([(1, 2), (1, 3), (2, 3), (1, 3)]) == 2, \"Wrong result\"\nassert     extract_freq([]) == 0, \"Wrong result\"\nassert     extract_freq([(1, 3), (2, 3), (1, 3), (2, 1), (2, 1), (1, 1)]) == 3, \"Wrong result\"\n\n'''\n4. Write a function to return the minimum absolute difference between the \nnumbers in the list.\n    \n    Example:\n    Input:\n    [-1, 5, 10, 20, 28, 3]\n    Output:\n    1\n    \n    Explanation:\n    Return 1, \n    because the difference between 10 and 28 is 1 (10 - 28 = 1)\n'''"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    extract_freq([(1,2),(2,2),(1,4),(1,2),(2,2)])==4\n    extract_freq([(1,2),(1,2),(1,2),(1,2),(2,4),(2,2),(1,2)])==3\n    extract_freq([(2,2),(2,2),(2,2),(2,2),(2,2)])==5\n    extract_freq([(2,2),(2,2),(2,2),(2,2),(2,2),(2,2)])==5\n    extract_freq([(2,2),(2,2),(2,2),(2,2),(2,2),(2,2)])==5\n    extract_freq([(1,1),(1,1),(1,1),(1,1),(1,1),(1,1)])==5\n    extract_freq([(1,1),(1,1),(1,1),(1,1),(1,1),(1,1)])==5\n    extract_freq([(2,2),(1,1),(2,2),(1,1),(2,2),(1,1)])==4\n    extract_freq([(2,2),(2,2),(2,2),(2,2),(2,2),(2,2)])==6\n    extract_freq([(1,2),(1,1),(1,1),(1,1),(2,2),(2,2),(1,1),(1,1)])==5\n    extract_freq([(1,2),(1,1),(1,1),(1,1),(2,2),(2,2),(1,1),(1,1)])==5\n    extract_freq([(2,2),(2,2),(2,2),(2,2),(2,2),(2,2)])==7\n    extract_freq([(2,2),(2,2),(2,2),(2,2),(2,2),(2,2)])==7\n    extract_freq([(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1)])==12\n    extract_freq([(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1)])==12\n    extract_freq([(2,2),(2,2),(2,2),(2,2),(2,2),(2,2)])==6\n    extract_freq([(2,2),(2,2),(2,2),(2,2),(2,2),(2,2)])==6\n    extract_freq([(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1)])==10\n    extract_freq([(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1)])==10\n    extract_freq([(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1)])==10\n    extract_freq([(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1)])==10\n    extract_freq([(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1)])==10\n    extract_freq([(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1)])==10\n    extract_freq([(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1)])==10\n    extract_freq([(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1)])==10\n    extract_freq([(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1)])==10\n    extract_freq([(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1)])==10\n    extract_freq([(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1)])==10\n    extract_freq([(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1)])==10\n    extract_freq([(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1)])==10\n    extract_freq([(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1)])==10\n    extract_freq([(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),(1,1),"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_freq([(1,1),(1,2),(1,3),(1,4),(1,5),(2,6)]) == 6, \"Should be 6\"\nassert     extract_freq([(1,1),(1,2),(1,3),(1,4),(1,5),(2,6)]) == 6, \"Should be 6\"\nassert     extract_freq([(1,1),(1,2),(1,3),(1,4),(1,5),(2,6)]) == 6, \"Should be 6\"\nassert     extract_freq([(1,1),(1,2),(1,3),(1,4),(1,5),(2,6)]) == 6, \"Should be 6\"\nassert     extract_freq([(1,1),(1,2),(1,3),(1,4),(1,5),(2,6)]) == 6, \"Should be 6\"\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add_nested_tuples((1,2,3),(4,5,6)) == (1,2,3,4,5,6)\nassert     add_nested_tuples((1,2),(3,4,5)) == (1,2,3,4,5)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add_nested_tuples((1,2,3),(4,5,6)) == (1,2,3,4,5,6)\nassert     add_nested_tuples((7,8,9),(3,5,6)) == (7,8,9,3,5,6)\nassert     add_nested_tuples((4,5,6),(3,5,6)) == (4,5,6,3,5,6)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add_nested_tuples(((1,2),(3,4),(5,6)), ((1,2),(3,4),(5,6))) == ((2,4),(6,8),(10,12))\nassert     add_nested_tuples(((1,2),(3,4),(5,6)), ((1,2),(3,4))) == ((2,4),(6,8))\nassert     add_nested_tuples(((1,2),(3,4),(5,6)), ((1,2,3,4),(5,6,7,8))) == ((2,4,6),(8,10,12))"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     add_nested_tuples((1, (2, 'hi')), (2, (3, 'bye'))) == (1, (2, 'hi')), \"wrong output\"\nassert add_nested_tuples((1, (2, 'hi')), (2, (3, 'bye'))) == (3, (2, 'hi')), \"wrong output\"\nassert add_nested_tuples((1, (2, 'hi')), (2, (3, 'bye'))) == (2, (4, 'hi')), \"wrong output\"\nassert add_nested_tuples((1, (2, 'hi')), (2, (3, 'bye'))) == (2, (4, 'bye')), \"wrong output\"\nassert add_nested_tuples((1, (2, 'hi')), (2, (3, 'bye'))) == (3, (2, 'hi')), \"wrong output\"\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     (add_nested_tuples((1,2),(3,4)) == (4,6))\nassert     (add_nested_tuples((3,4),(1,2)) == (4,6))\nassert     (add_nested_tuples((3,4),(3,4)) == (7,10))\nassert     (add_nested_tuples((1,2),(2,3)) == (3,5))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     add_nested_tuples(((1,2), (3,4)), ((5,6), (7,8))) == (((1+5,2+6), (3+7,4+8))), \"Wrong\"\nassert     add_nested_tuples(((1,2), (3,4)), ((5,6), (7,8))) == (((1+5,2+6), (3+7,4+8))), \"Wrong\"\n\n\ndef get_list_of_keys(dict1, search_key):\n    '''\n    Write a function to find the key list of the dictionary.\n    '''\n    pass"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     add_nested_tuples((1,3,5),(8,9,7)) == ((1+8,3+9,5+7),(8,9,7))\nassert     add_nested_tuples((1,3,5),(8,9,7,8)) == ((1+8,3+9,5+7),(8,9,7,8))\nassert     add_nested_tuples((1,3,5),(8,9,7,8,8)) == ((1+8,3+9,5+7),(8,9,7,8,8))\n\n\ndef is_prime(num):\n    '''\n    Write a function to check whether the given number is prime or not.\n    '''\n    pass\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef get_item(test_list):\n    '''\n    Write a function that takes a list of tuples of integers and returns the list of tuples with the first element in each tuple replaced with its square.\n    '''\n    pass\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    minimum(0, 0) == 0\n    minimum(1, 0) == 1\n    minimum(0, 1) == 1\n    minimum(1, 1) == 1\n    minimum(0, 0.00001) == 0.00001\n    minimum(0.00001, 0.00001) == 0.00001\n    minimum(0.00001, 1) == 1\n    minimum(1, 0.00001) == 1\n    minimum(1, 0.00001) == 1\n    minimum(1, 0.00001) == 1\n    minimum(1, 0) == 1\n    minimum(0, 1) == 1\n    minimum(0.00001, 1) == 1\n    minimum(0.00001, 0) == 0.00001\n    minimum(0.00001, -1) == -1\n    minimum(-1, 0.00001) == -1\n    minimum(1, 0.00001) == 0.00001\n    minimum(1.00001, 0.00001) == 0.00001\n    minimum(1.00001, 0) == 1\n    minimum(0, 1.00001) == 1\n    minimum(0.00001, 1.00001) == 1\n    minimum(0.00001, 0) == 0.00001\n    minimum(-1.00001, 0.00001) == -1\n    minimum(-1.00001, -1) == -1\n    minimum(0, -1.00001) == 0\n    minimum(0.00001, -1.00001) == -1\n    minimum(1, -1.00001) == -1\n    minimum(1.00001, -1.00001) == -1\n    minimum(0.00001, 0) == 0.00001\n    minimum(1, 0) == 1\n    minimum(0.00001, 1) == 1\n    minimum(1, 1) == 1\n    minimum(0.00001, 0.00001) == 0.00001\n    minimum(0.00001, -1) == -1\n    minimum(0.00001, 1.00001) == 1\n    minimum(1, 0.00001) == 1\n    minimum(1, -1) == 1\n    minimum(1, 1) == 1\n    minimum(1, 0.00001) == 1\n    minimum(0.00001, 1) == 1\n    minimum(1, 1.00001) == 1\n    minimum(0.00001, 0) == 0.00001\n    minimum(1, 0.00001) == 1\n    minimum(0.00001, -1) == -1\n    minimum(0.00001, 1.00001) == 1\n    minimum(1.00001, 0.00001) == 1\n    minimum(1.00001, -1) == 1\n    minimum(0.00001, -1) == -1\n    minimum(0.00001, 1.00001) == 1\n    minimum(1, 0.00001) == 1\n    minimum(1, -1) == 1\n    minimum(0.00001, -1) == -1\n    minimum(0.00001, -1.00001) == -1\n    minimum(0.00001, 1.00001) == 1\n    minimum(1, -1.00001) == -1\n    minimum(0.00001, 1) == 1\n    minimum(1, 1) == 1\n    minimum(0.00001, 0) == 0.00001\n    minimum(1, 0) == 1\n    minimum(0.00001, -1) == -1\n    minimum(0.00001, 1.00001) == 1\n    minimum(1, -1) == 1\n    minimum(1, 1) == 1\n    minimum(1, 0.00001) == 1\n    minimum(0.00001, 1) == 1\n    minimum(1, 1.00001) == 1\n    minimum(0.00001, 0) == 0.00001\n    minimum(1, 0.00001) == 1\n    minimum(0.00001, -1) == -1\n    minimum(0.00001, 1.00001) == 1\n    minimum(1, -1) == 1\n    minimum(1, 1) == 1\n    minimum(0.00001, -1) == -1\n    minimum(0.00001, 1.00001) == 1\n    minimum(1, -1.00001) == -1\n    minimum(0.00001, 1) == 1\n    minimum(1, 1.00001) == 1\n    minimum(0.00001, 0) == 0.00001\n    minimum(1, 0) == 1\n    minimum(0.00001, -1) == -1\n    minimum(0.00001, 1.00001) == 1\n    minimum(1, -1) == 1\n    minimum(1, 1) == 1\n    minimum(0.00001, 0) == 0.00001\n    minimum(1, 0) == 1\n    minimum(0.00001, -1) == -1\n    minimum(0.00001, 1.00001) == 1\n    minimum(1, -1) == 1\n    minimum(1, 1) == 1\n    minimum(0.00001, -1) == -1\n    minimum(0.00001, 1.00001) == 1\n    minimum(1, -1.00001) == -1\n    minimum(0.00001, 1) == 1\n    minimum(1, 1.00001) == 1\n    minimum(0.00001, 0) == 0.00001\n    minimum(1, 0) == 1\n    minimum(0.00001, -1) == -1\n    minimum(0.00001, 1.00001) == 1\n    minimum(1, -1) == 1\n    minimum(1, 1) == 1\n    minimum(0.00001, 0) == 0.00001\n    minimum(1, 0) == 1\n    minimum(0.00001, -1) == -1\n    minimum(0.00001, 1.00001) == 1\n    minimum(1, -1) == 1\n    minimum(1, 1) == 1\n    minimum(0.00001, -1) == -1\n    minimum(0.00001, 1.00001) == 1\n    minimum(1, -1.00001) == -1\n    minimum(0.00001, 1) == 1\n    minimum(1, 1.00001) == 1\n    minimum(0.00001, 0) == 0.00001\n    minimum(1, 0) == 1\n    minimum(0.00001, -1) == -1\n    minimum(0.00001, 1.00001) == 1\n    minimum(1, -1) == 1\n    minimum(1, 1) == 1\n    minimum(0.00001, 0) == 0.00001\n    minimum(1, 0) == 1\n    minimum(0.00001, -1) == -1\n    minimum(0.00001, 1.00001) == 1\n    minimum(1, -1) == 1\n    minimum(1, 1) == 1\n    minimum(0.00001, -1) == -1\n    minimum(0.00001, 1.00001) == 1\n    minimum(1, -1.00001) == -1\n    minimum(0.00001, 1) == 1\n    minimum(1, 1.00001) == 1\n    minimum(0.00001, 0) == 0.00001\n    minimum(1, 0) == 1\n    minimum(0.00001, -1) == -1\n    minimum(0.00001, 1.00001) == 1\n    minimum(1, -1) == 1\n    minimum(1, 1) == 1\n    minimum(0.00001, 0) == 0.00001\n    minimum(1, 0) == 1\n    minimum(0.00001, -1) == -1\n    minimum(0.00001, 1.00001) == 1\n    minimum(1, -1) == 1\n    minimum(1, 1) == 1\n    minimum(0.00001, -1) == -1\n    minimum(0.00001, 1.00001) == 1\n    minimum(1, -1.00001) == -1\n    minimum(0.00001, 1) == 1\n    minimum(1, 1.00001) == 1\n    minimum(0.00001, 0) == 0.00001\n    minimum(1, "
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     minimum(4,1) == 1, \"correct\"\nassert     minimum(1,2) == 1, \"correct\"\nassert     minimum(2,3) == 2, \"correct\"\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     minimum(4,5) == 4\nassert     minimum(7,3) == 3\nassert     minimum(10,5) == 5\nassert     minimum(0,5) == 0\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     minimum(3,5)==3, \"First number is not minimum\"\nassert     minimum(5,3)==3, \"Second number is not minimum\"\nassert     minimum(8,7)==7, \"Both numbers are same\"\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     minimum(1,2) == 1\nassert minimum(2,2) == 2\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     minimum(4,3) == 3\nassert     minimum(3,2) == 2\nassert     minimum(7,3) == 3\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     minimum(3,4) == 1\nassert     minimum(3,2) == 2\nassert     minimum(3,3) == 1\nassert     minimum(3,4.2) == 1\nassert     minimum(2.1,4) == 2.1\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     minimum(2,3) == 1\nassert     minimum(3,3) == 3\nassert     minimum(3,-3) == -3\nassert     minimum(0,5) == 0\nassert     minimum(5,0) == 0\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_tuplex(tuplex,\"goodbye\",tuple1) == True,\\\n            \"check_tuplex should return True for a good tuple and False for an incorrect tuple\"\nassert check_tuplex(tuplex,\"goodbye\",tuple2) == False,\\\n            \"check_tuplex should return False for a tuple with only one element\"\nassert check_tuplex(tuplex,\"goodbye\",tuple3) == False,\\\n            \"check_tuplex should return False for a tuple with only one element\"\nassert check_tuplex(tuplex,\"goodbye\",tuple4) == False,\\\n            \"check_tuplex should return False for a tuple with only one element\"\nassert check_tuplex(tuplex,\"goodbye\",tuple5) == False,\\\n            \"check_tuplex should return False for a tuple with only one element\"\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_tuplex((1,3),(1,2)) == True\nassert     check_tuplex((1,3),(3,2)) == False\nassert     check_tuplex((1,3),(2,2)) == True\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_tuplex(tuplex,tuple1)==True, \"tuplex should be in tuple1\"\nassert     check_tuplex(tuplex,tuple2)==False, \"tuplex should not be in tuple2\"\nassert     check_tuplex(tuplex,tuple3)==False, \"tuplex should not be in tuple3\"\nassert     check_tuplex(tuplex,tuple4)==True, \"tuplex should be in tuple4\"\nassert     check_tuplex(tuplex,tuple5)==True, \"tuplex should be in tuple5\"\nprint(\"\\nPassed all tests\")"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef check_tuplex(tuplex,tuple1):\n    for i in tuplex:\n        if i in tuple1:\n            print('True')\n            return True\n        else:\n            print('False')\n            return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_tuplex((1,2,3), (1,2,3)), \"Wrong answer. Expected False\"\nassert check_tuplex((1,2,3), (3,2,1)), \"Wrong answer. Expected True\"\nassert check_tuplex((1,2,3), (3,1,2)), \"Wrong answer. Expected False\"\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_tuplex(\n                ('a',),\n                ('a',)\n            )==True\nassert     check_tuplex(\n                ('b',),\n                ('a',)\n            )==False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_tuplex([1,2,3,5,6,7,8],(1,2,3,5,6,7,8)) \nassert     not check_tuplex((1,2,3,5,6,7,8),(1,2,3,5,6,7,8)) \nassert     not check_tuplex((1,2,3,5,6,7,8),(1,2,3,5,6,7,8,9)) \n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_tuplex((1,2),(1,2)) == True\nassert     check_tuplex((1,2),(1,3)) == False\nassert     check_tuplex((1,2),(1,4,5)) == False\nassert     check_tuplex((1,2,3,4,5),(1,2)) == True\nassert     check_tuplex((1,2,3,4,5),(1,2,3)) == True\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_tuplex((1,2),(1,2))==True, 'the method should return True if the same element is in the same location'\nassert     check_tuplex((1,2),(1,2,2))==True, 'the method should return True if the same element is in the same location'\nassert     check_tuplex((1,2),(2,2))==False, 'the method should return False if the same element is in the same location'\nassert     check_tuplex((1,2,3),(1,2,3))==True, 'the method should return True if the same element is in the same location'\nassert     check_tuplex((1,2,3),(1,2))==False, 'the method should return False if the same element is in the same location'\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Parity(6) == True\nassert     find_Parity(9) == True\nassert     find_Parity(10) == False\nassert     find_Parity(15) == True\nassert     find_Parity(16) == False\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Parity(9) == True, 'incorrect result for 9'\nassert     find_Parity(10) == False, 'incorrect result for 10'\nassert     find_Parity(11) == True, 'incorrect result for 11'\nassert     find_Parity(0) == False, 'incorrect result for 0'\nassert     find_Parity(-1) == False, 'incorrect result for -1'\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert find_Parity(10) == False\nassert find_Parity(11) == True\nassert find_Parity(0) == False\nassert find_Parity(-1) == True\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Parity(1) == True\nassert     find_Parity(10) == False\nassert     find_Parity(11) == True\nassert     find_Parity(-1) == False\nassert     find_Parity(1.1) == False\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Parity(10) == 1\nassert     find_Parity(-10) == 1\nassert     find_Parity(0) == 0\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Parity(3) == 0, \"input 3 should be 0\"\nassert     find_Parity(7) == 1, \"input 7 should be 1\"\nassert     find_Parity(14) == 0, \"input 14 should be 0\"\nassert     find_Parity(21) == 1, \"input 21 should be 1\"\nassert     find_Parity(5) == 1, \"input 5 should be 1\"\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_Parity(3) == True\nassert     find_Parity(6) == False\nassert     find_Parity(9) == True\nprint('TESTCASE 1: SUCCESS')\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_Parity(1)==True\nassert     find_Parity(0)==False\nassert     find_Parity(3)==True\nassert     find_Parity(5)==False\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Parity(5) == True\nassert     find_Parity(7) == False\nassert     find_Parity(8) == True\nassert     find_Parity(9) == True\nprint(\"correct\")\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Parity(7) == False, \"7 is odd\"\nassert     find_Parity(10) == True, \"10 is even\"\n\ndef find_GCD(x, y): \n    '''\n    Write a python function to find the GCD of two numbers.\n    '''\n    pass\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     rearrange_bigger(4193) == 54321, \"should rearrange 4193 into 54321\"\nassert     rearrange_bigger(54321) == 654321, \"should rearrange 54321 into 654321\"\nassert     rearrange_bigger(9669) == 9966, \"should rearrange 9669 into 9966\"\nassert     rearrange_bigger(1234) == 4321, \"should rearrange 1234 into 4321\"\nassert     rearrange_bigger(9125) == 9112, \"should rearrange 9125 into 9112\"\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     rearrange_bigger(10) == 21\nassert     rearrange_bigger(12) == 21\nassert     rearrange_bigger(21) == 12\nassert     rearrange_bigger(123) == 321\nassert     rearrange_bigger(0) == 0\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rearrange_bigger(9597) == 9654, \"Wrong.\"\nassert     rearrange_bigger(9594) == 9595, \"Wrong.\"\nassert     rearrange_bigger(2345) == 2235, \"Wrong.\"\nassert     rearrange_bigger(9191) == 9192, \"Wrong.\"\nassert     rearrange_bigger(6489) == 6489, \"Wrong.\"\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     rearrange_bigger(91) == 91\nassert     rearrange_bigger(1) == 1\nassert     rearrange_bigger(23) == 32\n\ndef rearrange_smaller(n):\n    '''\n    Write a function to create the next smaller number by rearranging the digits of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef rearrange_smaller(n):\n    '''\n    Write a function to create the next smaller number by rearranging the digits of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rearrange_bigger(234) == 12344\nassert     rearrange_bigger(145) == 14543\nassert     rearrange_bigger(1234) == 12343\nassert     rearrange_bigger(234234) == 2343424\nassert     rearrange_bigger(100100) == 1001101\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     rearrange_bigger(4321) == 12321\nassert     rearrange_bigger(12345) == 12343\nassert     rearrange_bigger(111122) == 1111222\nassert     rearrange_bigger(1233) == 123\n\ndef max_sum_subset(A, k):\n    '''\n    Given a list of non-negative numbers and a target integer k, find a subset in the list which adds up to the\n    target k.\n    '''\n    pass\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     rearrange_bigger(1) == 2\nassert     rearrange_bigger(11) == 21\nassert     rearrange_bigger(21) == 1211\nassert     rearrange_bigger(22) == 2122\nassert     rearrange_bigger(23) == 3123\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     k_smallest_pairs([1,7,11],[2,4,6], 3) == [[1,2],[1,4],[1,6]]\nassert     k_smallest_pairs([3,4,1,2],[1,2,3,4], 4) == [[1,2],[1,3],[1,4],[2,3]]\nassert     k_smallest_pairs([4,1,2,3],[4,1,2,3], 4) == [[1,2],[1,3],[2,3]]\nassert     k_smallest_pairs([1,2,3,4],[1,2,3,4], 4) == [[1,2],[1,3],[2,3]]\nassert     k_smallest_pairs([1,2,3,4],[5,6,7,8], 4) == [[1,2],[1,3],[2,3]]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     k_smallest_pairs([1,1], [1,2], 1) == [[1,1]]\nassert     k_smallest_pairs([1,1], [2,2], 2) == [[1,1],[2,2]]\nassert     k_smallest_pairs([1,1,2,3,5,4], [2,4,6,8,10], 3) == [[1,1],[2,4],[3,5],[5,4],[6,8],[7,10]]\nassert     k_smallest_pairs([1,1,2,3,5,4], [2,4,6,8,10,11,12], 3) == [[1,1],[2,4],[3,5],[4,4],[5,5],[6,8],[7,10]]\nassert     k_smallest_pairs([1,1,2,3,5,4], [2,4,6,8,10], 2) == [[1,1],[2,4],[3,5],[5,4]]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     k_smallest_pairs([1,7,11], [2,4,6], 3) == [[1,2],[7,4],[11,6]]\nassert     k_smallest_pairs([1,4,2,3], [2,4,6,8], 4) == [[1,2],[4,2],[3,4],[4,6]]\nassert     k_smallest_pairs([1,2,3,4,5], [6,7,8,9,10], 5) == [[1,2],[3,4],[5,6]]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # make a min heap of size k\n    # pop and return the top element\n    # keep adding the next elements\n    # in the heap (the smaller element of the heap will be the smallest one)\n    # build a heap\n    # while the heap size > k:\n    #     pop the top element\n    pass\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     k_smallest_pairs([1,4,3,2],\n                          [4,5,1,3],\n                          3) == [1,2]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     k_smallest_pairs([1, 5, 9, 10],\n    [2, 4, 6, 8],\n    3) == [[1, 2], [2, 4], [4, 5], [5, 6],\n    [6, 8]]\n\nassert     k_smallest_pairs([1, 5, 9, 10],\n    [2, 4, 6, 8],\n    4) == [[1, 2], [2, 4], [4, 5],\n    [5, 6],\n    [6, 8]]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     k_smallest_pairs([1,4,6,8,9],[2,5,7,8,9],5) == [[1,2],[4,5],[6,7],[8,9],[9,9]]\nassert k_smallest_pairs([1,2,3],[],1) == []\nassert k_smallest_pairs([1,3,4],[1,2,3,4],2) == [[1,1],[1,3]]\nassert k_smallest_pairs([1,2,4,7,10],[3,4,6,7,8,9,11],4) == [[1,3],[1,4],[4,7],[4,9],[7,11]]\nassert k_smallest_pairs([1,3,4,7,10],[],3) == [[1,1],[1,3],[1,4]]\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     min_product_tuple([(1,2),(3,4),(5,6),(7,8)]) == (1,2)\nassert     min_product_tuple([(1,2),(3,4),(5,6),(7,8)]) == (3,4)\nassert     min_product_tuple([(1,2),(3,4),(5,6),(7,8)]) == (1,2)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     min_product_tuple([(1, 3), (2, 4), (6, -4), (3, 9)]) == -24\n\nassert     min_product_tuple([(2, 4), (5, 6), (4, 1)]) == -12\n\nassert     min_product_tuple([(2, 4), (5, 6), (4, 1), (3, 9)]) == -12\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     min_product_tuple([(1,2),(2,4),(3,6),(4,8),(5,10),(6,12)]) == 2\nassert     min_product_tuple([(1,2),(4,8),(3,6),(2,4),(5,10),(6,12)]) == 2\nassert     min_product_tuple([(1,2),(2,4),(3,6),(4,8),(5,10),(6,12),(5,6),(4,5)]) == 1\nassert     min_product_tuple([(1,2),(2,4),(3,6),(4,8),(5,10),(6,12),(5,6),(4,5)]) == 1\nassert     min_product_tuple([(1,2),(2,4),(3,6),(4,8),(5,10),(6,12),(5,6),(4,5)]) == 1\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     min_product_tuple([(1,1),(2,1),(3,1)]) == (1,2)\nassert     min_product_tuple([(2,1),(1,1),(3,1)]) == (2,3)\nassert     min_product_tuple([(1,1),(1,1),(1,1)]) == (1,1)\nassert     min_product_tuple([(1,1),(1,2),(1,3)]) == (1,1)\nassert     min_product_tuple([(1,1),(1,2),(1,3),(2,1),(2,2),(2,3),(3,1),(3,2),(3,3)]) == (1,1)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     min_product_tuple([(2, 4), (7, 1), (1, 1), (3, 2), (8, 8), (0, 0)]) == 8\nassert     min_product_tuple([(2, 4), (7, 1), (1, 1), (3, 2), (8, 8), (0, 0)]) == 8\nassert     min_product_tuple([(2, 4), (7, 1), (1, 1), (3, 2), (8, 8), (0, 0)]) == 8\nassert     min_product_tuple([(2, 4), (7, 1), (1, 1), (3, 2), (8, 8), (0, 0)]) == 8\nassert     min_product_tuple([(2, 4), (7, 1), (1, 1), (3, 2), (8, 8), (0, 0)]) == 8\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint('\\033[92m' + '\\n**************** Test Case 01 **************' + '\\033[0m')\nmin_product_tuple([(3, 2), (4, 1), (5, 0), (1, 2), (3, 3), (4, 3), (5, 4)]) == -1\nprint('\\033[92m' + 'TEST CASE 01: PASS' + '\\033[0m')\n\nprint('\\033[92m' + '\\n**************** Test Case 02 **************' + '\\033[0m')\nmin_product_tuple([(3, 2), (4, 1), (5, 0), (1, 2), (3, 3), (4, 3), (5, 4), (1, 1)]) == -1\nprint('\\033[92m' + 'TEST CASE 02: PASS' + '\\033[0m')\n\nprint('\\033[92m' + '\\n**************** Test Case 03 **************' + '\\033[0m')\nmin_product_tuple([(1, 2), (1, 1), (2, 3), (4, 3), (1, 1), (1, 2), (2, 2), (3, 1)]) == 0\nprint('\\033[92m' + 'TEST CASE 03: PASS' + '\\033[0m')\n\nprint('\\033[92m' + '\\n**************** Test Case 04 **************' + '\\033[0m')\nmin_product_tuple([(1, 2), (1, 1), (2, 3), (4, 3), (1, 1), (1, 2), (2, 2), (3, 1)]) == 0\nprint('\\033[92m' + 'TEST CASE 04: PASS' + '\\033[0m')\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert min_product_tuple([(0,1),(2,3),(4,5),(5,6)]) == 0\nassert min_product_tuple([(1,2),(2,1),(2,3)]) == 1\nassert min_product_tuple([(2,3),(1,2),(3,1),(0,3)]) == 1\nassert min_product_tuple([(0,0),(1,0),(2,0),(3,0),(4,0)]) == 0\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     min_product_tuple([(1, 3), (3, 5), (2, 5), (9, 10)]) == (1, 3)\nassert min_product_tuple([(1, 3), (3, 5), (2, 5), (9, 10), (9, 8), (7, 6), (8, 6)]) == (1, 3)\nassert min_product_tuple([(1, 3), (3, 5), (2, 5), (9, 10), (9, 8), (7, 6), (8, 6)]) == (1, 3)\nassert min_product_tuple([(1, 3), (3, 5), (2, 5), (9, 10), (9, 8), (7, 6), (8, 6)]) == (1, 3)\nassert min_product_tuple([(1, 3), (3, 5), (2, 5), (9, 10), (9, 8), (7, 6), (8, 6)]) == (1, 3)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     min_product_tuple(list1) == (8, 3)\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    pass\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     min_val(['a', 'b', 1, 2]) == 1\nassert     min_val(['a', 'b', 'c', 1]) == 'c'\nassert     min_val([1, 2, 3]) == 1\nassert     min_val([1, 2, '3']) == '3'\nassert     min_val([1, 3, 4, 5, 6]) == 1\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert min_val([1,2,4,3]) == 1\nassert min_val([1.5,3,2,4,3,5,3,4]) == 1.5\nassert min_val([\"prabhat\",\"praful\",\"chandler\",\"hardik\",\"pranav\",\"kushal\",\"rahul\",\"pratik\",\"deepak\",\"shreyas\",\"abc\"]) == \"abc\"\nassert min_val([\"prabhat\",\"praful\",\"chandler\",\"hardik\",\"pranav\",\"kushal\",\"rahul\",\"pratik\",\"deepak\",\"shreyas\"]) == \"prabhat\"\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     min_val([[1, 2, 5],\n    [8, 9],\n    [3, 4, 2],\n    [9, 4],\n    [8, 6, 7]]) == 1\n\nassert     min_val([[7, 5, 9],\n    [2, 5],\n    [4],\n    [8],\n    [3, 5, 7]]) == 5\n\nassert     min_val([[1, 2, 5, 3, 1],\n    [4, 6],\n    [7, 7],\n    [8, 8],\n    [9, 9],\n    [10],\n    [11, 11],\n    [12, 12]]) == 5\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     min_val([1, 2, 3, 4]) == 1, 'Wrong output'\nassert     min_val([]) == None, 'Wrong output'\nassert     min_val([2, 2, 4, 5]) == 2, 'Wrong output'\nassert     min_val([1, 2, 3, 4, 3]) == 3, 'Wrong output'\nassert     min_val([1, 2, 2]) == 1, 'Wrong output'\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     min_val([2,4,6,1]) == 1, 'incorrect min'\nassert min_val([2,4,6,1,23,42]) == 1, 'incorrect min'\nassert min_val([]) == None, 'incorrect min'\nassert min_val([2]) == 2, 'incorrect min'\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     min_val([(0,0),(0,0),(0,0)]) == (0,0)\nassert     min_val([(3,1),(0,2),(4,2)]) == (0,2)\nassert     min_val([(5,7),(9,7),(2,6)]) == (2,6)\nassert     min_val([(1,1),(5,2),(2,7)]) == (1,1)\nassert     min_val([(-2,-1),(-5,-2),(-2,-2)]) == (-2,-1)\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     min_val([0,1,2,3,4,5]) == 0\nassert     min_val([1,1,1,1,1,1,1]) == 1\nassert     min_val([1.1,1.2,1.3,1.4,1.5,1.6]) == 1.1\nassert     min_val([1,2,3,4,5,6,7]) == 1\nassert     min_val([True,False,True,True,False,True,False]) == True\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     snake_to_camel('snake_case') =='snakeCase','solution is not correct'\nassert     snake_to_camel('snake-case') =='snake_case','solution is not correct'\nassert     snake_to_camel('snake_case_123') =='snake_case_123','solution is not correct'\nassert     snake_to_camel('snake_case_123456') =='snake_case_123456','solution is not correct'\nassert     snake_to_camel('123abc') == '123Abc','solution is not correct'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    snake_to_camel('snake_case') =='snake_case'\n    snake_to_camel('snakeCamel') =='snakeCamel'\n    snake_to_camel('snakecamel') =='snakecamel'\n    snake_to_camel('SNAKE_CASE') =='snake_case'\n    snake_to_camel('SNAKE_CAMEL') =='snake_case'\n    snake_to_camel('SNAKE_CAMEL') =='snake_case'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     snake_to_camel('snake') =='snake'\nassert     snake_to_camel('SNAKE') =='sNAke'\nassert     snake_to_camel('snake_camel_case') =='snakeCamelCase'\nassert     snake_to_camel('snake_camel_case_') =='snakeCamelCase'\nassert     snake_to_camel('snake_camel_case') =='snakeCamelCase'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     snake_to_camel('snake_case') =='snakeCase'\nassert     snake_to_camel('snake_case_2') =='snakeCase_2'\nassert     snake_to_camel('snake_case_') =='snakeCase'\nassert     snake_to_camel('snake_case') =='snakeCase'\nassert     snake_to_camel('snake_case_2') =='snakeCase2'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     snake_to_camel(\"snake_camel_case\") == \"SnakeCamelCase\"\nassert     snake_to_camel(\"snake_camel_case\") == \"SnakeCamelCase\"\nassert     snake_to_camel(\"snake_camel_case\") == \"SnakeCamelCase\"\nassert     snake_to_camel(\"snake_camel_case\") == \"SnakeCamelCase\"\nassert     snake_to_camel(\"snake_camel_case\") == \"SnakeCamelCase\"\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     snake_to_camel('my_name') =='myName', \"Should return'myName'\"\nassert     snake_to_camel('my_name')!='myname', \"Should return'myname'\"\nassert     snake_to_camel('i_am_rich') == 'iAmRich', \"Should return 'iAmRich'\"\nassert     snake_to_camel('my_name_is_rich') =='myNameIsRich', \"Should return'myNameIsRich'\"\nassert     snake_to_camel('my_name_is_brave') =='myNameIsBrave', \"Should return'myNameIsBrave'\"\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     snake_to_camel(\"snake_camel\") == \"snakeCamel\"\nassert     snake_to_camel(\"snake_snake_camel\") == \"snakeSnakeCamel\"\n\ndef snake_to_camel2(word):\n    return \"\".join([word.title() if letter == \"_\" else letter.lower() for letter in word])\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     snake_to_camel('test_case') == 'testCase'\nassert     snake_to_camel('test_case_2') == 'testCase2'\nassert     snake_to_camel('test_case_3') == 'testCase3'\n\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    pass\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     snake_to_camel('snake_case') =='snake_case', 'Should be snake_case'\nassert     snake_to_camel('snake_case_') =='snake_case', 'Should be snake_case'\nassert     snake_to_camel('snake_case_123') =='snake_case123', 'Should be snake_case123'\nassert     snake_to_camel('snake_case_') =='snake_case', 'Should be snake_case'"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef remove_odd2(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l.remove(n)\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]\nassert     remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == [1, 3, 5, 7, 9, 11]\nassert     remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == [1, 3, 5, 7, 9, 11, 13, 15]\nassert     remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == [1, 3, 5, 7, 9, 11, 13, 15, 17]\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_odd([10, 20, 30, 40, 50, 60, 70, 80]) == [10, 20, 30, 40, 50, 60, 70]\nassert     remove_odd([10, 20, 30, 40, 50, 60, 70, 80, 90]) == [10, 20, 30, 40, 50, 60, 70]\nassert     remove_odd([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5]\nassert     remove_odd([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5]\nassert     remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8]\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_odd([1,2,3,4,5,6,7,8,9,10]) == [[1,2,3,4,5,6,7,8,9,10]]\nassert     remove_odd([1,2,3,4,5,6,7,8,9,10,11]) == []\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef remove_odd_lst(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l.remove(l[i])\n    \n\nassert \nassert \n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_odd([0,1,2,3,4,5,6,7,8,9,10]) ==     [0,1,2,3,4,5,6,7,8,9,10]\nassert     remove_odd([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    remove_odd([1,2,3,4,5]) == [1,2,3,5]\n    remove_odd([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,6,7,8]\n    remove_odd([]) == []\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef odd_or_even(l):\n    '''\n    Write a python function to check whether the given list is even or odd.\n    '''\n    pass\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_odd([1,2,3,4,5,6]) == [1,3,5]\nassert     remove_odd([1,2,3,4,5,6,7]) == []\nassert     remove_odd([1,2,3,4,5,6,7,8]) == [1,3,5,7,8]\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nremove_odd([2,3,4,5,7,8]) == [2,3,4,5,7]\nassert remove_odd([]) == []\nassert remove_odd([2,4,6,8,10,11,12]) == [2,4,6,8,10]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_nth_element([('p', 1), ('p', 2), ('p', 3), ('q', 4)], 2) == ('p', 2)\nassert     extract_nth_element([('p', 1), ('p', 2), ('p', 3), ('q', 4)], 1) == ('p', 1)\nassert     extract_nth_element([('p', 1), ('p', 2), ('p', 3), ('q', 4)], 0) == ('q', 4)\nassert     extract_nth_element([('p', 1), ('p', 2), ('p', 3), ('q', 4)], -1) == ('p', 3)\nassert     extract_nth_element([('p', 1), ('p', 2), ('p', 3), ('q', 4)], -2) == ('q', 2)\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nextract_nth_element([(1,2), (3,4)], 0) == (1, 2)\nextract_nth_element([(1,2), (3,4)], 1) == (3, 4)\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_nth_element([('name', 'Joe'), ('age', 25)], 0) == ('name', 'Joe')\nassert     extract_nth_element([('name', 'Joe'), ('age', 25)], 1) == ('age', 25)\nassert     extract_nth_element([('name', 'Joe'), ('age', 25)], 2) == None\nassert     extract_nth_element([('name', 'Joe'), ('age', 25)], 3) == None\nassert     extract_nth_element([('name', 'Joe'), ('age', 25)], 4) == None\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_nth_element([('A',1),('B',2)],1) == ('A',1)\nassert     extract_nth_element([('A',1),('B',2)],2) == ('B',2)\nassert     extract_nth_element([('A',1),('B',2)],3) == ('A',1)\nassert     extract_nth_element([('A',1),('B',2)],4) == ('A',1)\nassert     extract_nth_element([('A',1),('B',2)],5) == ('A',1)\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_nth_element([(1, 2), (3, 4), (5, 6)], 1) == (2, 3)\nassert     extract_nth_element([(1, 2), (3, 4), (5, 6)], 2) == (4, 6)\nassert     extract_nth_element([(1, 2), (3, 4), (5, 6)], 3) == (5, 6)\nassert     extract_nth_element([(1, 2), (3, 4), (5, 6)], 4) == (1, 2)\nassert     extract_nth_element([(1, 2), (3, 4), (5, 6)], 5) == (3, 4)\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_nth_element([(1,2),(3,4),(5,6)], 2) == (3,4)\nassert     extract_nth_element([(1,2),(3,4),(5,6)], 1) == (1,2)\nassert     extract_nth_element([(1,2),(3,4),(5,6)], 0) == (1,2)\nassert     extract_nth_element([(1,2),(3,4),(5,6)], -1) == (1,2)\nassert     extract_nth_element([(1,2),(3,4),(5,6)], -2) == (3,4)\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nextract_nth_element([('Red', 'R'), ('Blue', 'B'), ('Green', 'G')], 1) == 'R'\nassert \nextract_nth_element([('Red', 'R'), ('Blue', 'B'), ('Green', 'G')], 2) == 'B'\nassert \nextract_nth_element([('Red', 'R'), ('Blue', 'B'), ('Green', 'G')], 3) == 'G'\nassert \nextract_nth_element([('Red', 'R'), ('Blue', 'B'), ('Green', 'G')], 4) == 'G'\nassert \nextract_nth_element([('Red', 'R'), ('Blue', 'B'), ('Green', 'G')], 5) == 'G'\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_nth_element([(\"hello\",1), (\"hi\",2), (\"how\",3)], 2) == 'hi'\nassert     extract_nth_element([(\"hello\",1), (\"hi\",2), (\"how\",3)], 0) == 'hello'\nassert     extract_nth_element([(\"hello\",1), (\"hi\",2), (\"how\",3)], -1) == 'how'\nassert     extract_nth_element([(\"hello\",1), (\"hi\",2), (\"how\",3)], 10) == None\nassert     extract_nth_element([(\"hello\",1), (\"hi\",2), (\"how\",3)], 1) == 'hi'\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_nth_element([(1, 2), (3, 4)], 1) == (1, 2)\nassert     extract_nth_element([(1, 2), (3, 4)], 2) == (3, 4)\nassert     extract_nth_element([(1, 2), (3, 4)], 0) == (1, 2)\nassert     extract_nth_element([], 0) == None\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef overlapping_with_index(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    pass\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     overlapping([1,2,3,4],[1,2,3,4])\nassert    overlapping([1,2,3,4],[1,2,3,4])\nassert not overlapping([1,2,3,4],[1,2,3,4,5])\nassert    overlapping([1,2,3,4],[1,2,3,4,5])\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \noverlapping([1, 2, 3, 4], [1, 3, 5, 7]) == True\nassert \noverlapping([1, 2, 3, 4], [5, 6, 7, 8]) == False\nassert \noverlapping([1, 2, 3, 4], [1, 2]) == True\nassert \noverlapping([1, 2, 3, 4], [2, 3]) == True\nassert \noverlapping([1, 2, 3, 4], [2, 5]) == False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     overlapping([1,4,5,6,7], [1,2,3,4,5]) == True, \"Should return True\"\nassert     overlapping([1,4,5,6,7], [1,2,3,4,5,7]) == False, \"Should return False\"\nassert     overlapping([1,2,3,4,5,6,7], [1,2,3,4,5,6,7]) == True, \"Should return True\"\nassert     overlapping([1,2,3,4,5,6,7], [1,2,3,4,5]) == False, \"Should return False\"\nassert     overlapping([1,2,3,4], [1,2,3,4]) == True, \"Should return True\"\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint(\"\\n# Taking 5 as an example: \")\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    overlapping([1,3,5,6,7], [1,3,5,6,7])\n    == True\n    overlapping([1,2,3], [1,3,5,6,7])\n    == False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     overlapping([1,2,3],[3,5,6]) == True, \"Test Failed\"\nassert     overlapping([1,2,3],[3,4,5]) == False, \"Test Failed\"\nassert     overlapping([1,2,3],[3,4,5,5]) == True, \"Test Failed\"\nassert     overlapping([1,2,3],[1,3]) == True, \"Test Failed\"\nassert     overlapping([1,2,3],[1,3,4]) == False, \"Test Failed\"\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     overlapping([],[\"\"]) == False, \"Testcase 1 Failed\" \nassert     overlapping([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\"],[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\"]) == True, \"Testcase 2 Failed\" \nassert     overlapping([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\"],[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"h\"]) == False, \"Testcase 3 Failed\" \nassert     overlapping([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\"],[\"a\",\"b\",\"d\",\"e\",\"f\",\"g\"]) == True, \"Testcase 4 Failed\" \nassert     overlapping([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\"],[\"a\",\"b\",\"c\",\"e\",\"f\",\"g\"]) == True, \"Testcase 5 Failed\" \n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_Product([0, 2, -3, 4]) == (0, 2)\nassert     max_Product([-5, -10, 7, 2]) == (7, -10)\nassert     max_Product([-5, -10, -7, 2]) == (-5, -10)\nassert     max_Product([1, 10, 5, 2, -8, -4]) == (10, 2)\nassert     max_Product([1, 10, -5, 2, -8, -4]) == (10, 2)\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_Product([1,2,3]) == (6,3)\nassert max_Product([5,6,7,3,2,1]) == (120,7)\nassert max_Product([2,3,4,5]) == (120,4)\nassert max_Product([3,2,1]) == (3,2)\nassert max_Product([2]) == (2,2)\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_Product([1,4,6,8,2]) == 8, \"Example 1\"\nassert     max_Product([1,4,6,8,2]) == 6, \"Example 2\"\nassert     max_Product([4,6,8,9,6]) == 96, \"Example 3\"\n\n'''\nA function that takes in a non empty list of integers and returns a new list which contains the element only once.\n\nFor example:\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(max_Product([1,2,3,4]))\nprint(max_Product([-1,2,3,-4]))\nprint(max_Product([-1,-2,-3,-4]))\nprint(max_Product([2,-3,-4,1]))\nprint(max_Product([-2,-3,4,-1]))\nprint(max_Product([4,5,6,7,2,8,-3]))\n\ndef max_Product_2(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = 1\n    max_product_pair = []\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_product_pair = (arr[i], arr[j])\n    print(max_product_pair)\nmax_Product_2([1,2,3,4])\nmax_Product_2([-1,2,3,-4])\nmax_Product_2([-1,-2,-3,-4])\nmax_Product_2([2,-3,-4,1])\nmax_Product_2([-2,-3,4,-1])\nmax_Product_2([4,5,6,7,2,8,-3])\n\ndef max_Product_3(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = 1\n    max_product_pair = []\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_product_pair = (arr[i], arr[j])\n    print(max_product_pair)\nmax_Product_3([1,2,3,4])\nmax_Product_3([-1,2,3,-4])\nmax_Product_3([-1,-2,-3,-4])\nmax_Product_3([2,-3,-4,1])\nmax_Product_3([-2,-3,4,-1])\nmax_Product_3([4,5,6,7,2,8,-3])\n\n\ndef max_Product_4(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # for the case in which there is no pair\n    if len(arr) < 3:\n        return arr\n\n    max_product = 0\n    max_product_pair = []\n    # subproblem\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_product_pair = (arr[i], arr[j])\n    # final subproblem\n    for k in range(0,len(arr)):\n        temp_product = 1\n        for m in range(0,len(arr)):\n            if k!= m:\n                temp_product *= arr[m]\n        if temp_product > max_product:\n            max_product = temp_product\n            max_product_pair = (arr[k], arr[k])\n    return max_product_pair\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_Product([1,2,3,4,5]) == 3*4\nassert     max_Product([1,2,3,5,4]) == 3*4\nassert     max_Product([1,2,3,4,5]) == 5*4\nassert     max_Product([1,2,3,4,5,6]) == 3*4\n\n'''\nWrite a python program to check whether an array contains any duplicate value.\n'''\ndef no_duplicates(arr):\n    '''\n    Write a python function to check whether an array contains any duplicate value.\n    '''\n    pass\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\narr = [-1, 2, 3, 4, 5, -4, -3]"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_Product([-3, -6, -7, -3, -4]) == [-7, -3]\nassert     max_Product([-2, -1, -4, -3, -5, -2]) == [-5, -2]\nassert     max_Product([-3, -7, -8, -9, -3]) == [-9, -8]\nassert     max_Product([-2, -7, -8, -9, -4]) == [-9, -8]\nassert     max_Product([1, 5, 4, 3, 2]) == [-1, -1]\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     group_tuples([(1, 2), (2, 3), (1, 2)]) == (1, 2), \"Should return (1, 2)\"\nassert     group_tuples([(1, 3), (2, 3)]) == (1, 2, 3), \"Should return (1, 3, 2, 3)\"\nassert     group_tuples([(1, 3), (2, 3), (1, 3)]) == (1, 2, 3, 1), \"Should return (1, 2, 3, 1)\"\nassert     group_tuples([(1, 3), (1, 3)]) == (1, 2, 3, 1), \"Should return (1, 2, 3, 1)\"\nassert     group_tuples([(1, 3), (2, 3)]) == (1, 2, 3, 1), \"Should return (1, 2, 3, 1)\"\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    group_tuples([(1, 2), (3, 4), (2, 5), (5, 6), (1, 2), (4, 5)])\n    == (1, 2)\nassert \n    group_tuples([(1, 1), (2, 1), (2, 2), (2, 2), (3, 2), (3, 3), (3, 3)])\n    == (2, 2)\nassert \n    group_tuples([(1, 1), (2, 1), (2, 2), (3, 2), (3, 3), (3, 3), (4, 2), (4, 2), (4, 2)])\n    == (4, 2)\nassert \n    group_tuples([(1, 1), (2, 1), (2, 2), (3, 2), (3, 3), (3, 3), (3, 3), (4, 2), (4, 2), (4, 2)])\n    == (3, 3)\nassert \n    group_tuples([(1, 1), (2, 1), (2, 2), (3, 2), (3, 3), (3, 3), (4, 2), (4, 2), (4, 2), (4, 2)])\n    == (4, 2)\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     group_tuples([(1, 2), (3, 4), (5, 6), (1, 2)]) == (1, 2), \"First element appears twice\"\nassert group_tuples([(1, 2), (1, 2), (2, 3), (1, 2)]) == (1, 2), \"All the tuples have same first element\"\nassert group_tuples([(1, 2), (1, 2), (1, 2), (1, 2), (1, 2)]) == (1, 2), \"All the tuples have same first element\"\nassert group_tuples([(1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2)]) == (1, 2), \"All the tuples have same first element\"\nassert group_tuples([(1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2), (1, 2)]) == (1, 2), \"All the tuples have same first element\"\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     group_tuples([(1, 2), (1, 2), (3, 1)]) ==     (1, 3)\nassert     group_tuples([(1, 2), (2, 2), (3, 1)]) ==     (1, 3)\nassert     group_tuples([(1, 2), (1, 2), (2, 1)]) ==     (1, 2)\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     group_tuples([(1,2),(2,3),(3,4),(4,1)]) == 1, \"Wrong answer\"\nassert     group_tuples([(1,1),(1,2),(2,3),(3,4),(4,1)]) == None, \"Wrong answer\"\n\nprint(\"You've successfully passed this test! :)\")\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     group_tuples([(1,2), (1,2), (1,2), (1,2)]) == 1\nassert group_tuples([(1,2), (1,3), (1,3), (1,3), (1,3)]) == 1\nassert group_tuples([(1,2), (2,2), (3,2)]) == 0\nassert group_tuples([(1,2), (2,3), (3,4), (1,2)]) == 2\nassert group_tuples([(1,2), (3,4), (1,2), (2,2)]) == 2\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     group_tuples([(1, 1), (1, 1), (2, 2), (1, 1), (1, 1)]) == (1, 1)\nassert group_tuples([(1, 2), (3, 3), (1, 2), (3, 3), (1, 2)]) == (3, 3)\nassert group_tuples([(1, 2), (2, 2), (3, 3), (1, 2), (3, 3)]) == (1, 2)\n\nprint(\"\u2714\ufe0f Your group_tuples function is correct.\")\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     group_tuples(    [(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) ==     (1, 3, 5, 7)\nassert     group_tuples(    [(1, 1, 2), (3, 3, 4), (5, 5, 6), (7, 7, 8), (9, 9, 10)]) ==     (1, 3, 5, 7)\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     group_tuples([(1,2), (3,4), (1,2)])     == (1,2), \"Wrong\"\nassert     group_tuples([(1,2), (3,4), (1,2)])     == (1,2), \"Wrong\"\nassert     group_tuples([(1,2), (1,2), (1,2)])     == (1,2), \"Wrong\"\nassert     group_tuples([(1,2), (1,2), (1,2)])     == (1,2), \"Wrong\"\nassert     group_tuples([(1,2,3), (1,2), (1,2,3)])     == (1,2,3), \"Wrong\"\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     group_tuples([(1,2),(3,4),(3,5),(5,6)]) == (3,3)\nassert     group_tuples([(1,2),(2,3),(5,6)]) == (1,2)\nassert     group_tuples([(1,2),(2,3),(2,4),(4,5),(5,6)]) == (2,2)\nassert     group_tuples([]) == None"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Find_Max([1,2,3]) == 3\nassert     Find_Max([1,2,3,4,5]) == 5\nassert     Find_Max([]) == None\nassert     Find_Max(['a','b','c']) == 'c'\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nFind_Max(lst) == max(lst), \"The method is wrong\"\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     Find_Max([]) == None, 'Empty list'\nassert     Find_Max([1]) == 1, 'First element'\nassert     Find_Max([1,1,1,1,1,1,1,1]) == 1, 'All same'\nassert     Find_Max([1,2,3,4,5,6,7,8,9]) == 9, 'Max element in the list'\nassert     Find_Max([1,2,3,4,5]) == 5, 'Max element in the list'\nprint('Check passed')\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert Find_Max([1,3,4,5,6,7,8,9,5]) == 5\nassert Find_Max([5,4,3,2,1,0]) == 5\nassert Find_Max([10,20,30,40,50,60,70]) == 70\nassert Find_Max([]) == None\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Find_Max([]) == None, \"Find_Max: None\"\nassert     Find_Max([1]) == 1, \"Find_Max: 1\"\nassert     Find_Max([1,2,3,4,5,6,7,8]) == 7, \"Find_Max: 7\"\nassert     Find_Max([1,2,3,4,5,6,7,8,0,1,2,3,4]) == 8, \"Find_Max: 8\"\nassert     Find_Max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]) == 18, \"Find_Max: 18\"\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Find_Max([]) == None, \"Test 1 Failed\"\nassert     Find_Max([1,2,3]) == 3, \"Test 2 Failed\"\nassert     Find_Max([\"Hello\",1,2,\"Hi\"]) == \"Hi\", \"Test 3 Failed\"\nassert     Find_Max([\"Hello\",1,2,\"Hi\"]) == \"Hi\", \"Test 4 Failed\"\nassert     Find_Max([\"Hello\",1,2,\"Hi\"]) == \"Hi\", \"Test 5 Failed\"\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Find_Max([-10, -2, -4, 3, -5, -20]) == 20\n\nprint(\"\\n\\nAll tests passed...\\n\")\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nFind_Max([])==None\nFind_Max([1])==1\nFind_Max([1,2])==1\nFind_Max([1,2,3])==3\nFind_Max([1,2,3,4])==4\nFind_Max([1,2,3,4,5])==5\nFind_Max([1,2,3,4,5,6])==6\nFind_Max([1,2,3,4,5,6,7])==7\nFind_Max([1,2,3,4,5,6,7,8])==8\nFind_Max([1,2,3,4,5,6,7,8,9])==8\nFind_Max([1,2,3,4,5,6,7,8,9,0])==9\nFind_Max([1,2,3,4,5,6,7,8,9,10])==10\nFind_Max([1,2,3,4,5,6,7,8,9,10,11])==11\nFind_Max([1,2,3,4,5,6,7,8,9,10,11,12])==12\nFind_Max([1,2,3,4,5,6,7,8,9,10,11,12,13])==13\nFind_Max([1,2,3,4,5,6,7,8,9,10,11,12,13,14])==14\nFind_Max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])==15\nFind_Max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])==16\nFind_Max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])==17\nFind_Max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])==18\nFind_Max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])==19\nFind_Max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])==20\nFind_Max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])==21\nFind_Max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])==22\nFind_Max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])==23\nFind_Max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])==24\nFind_Max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])==25\nFind_Max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26])==26\nFind_Max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27])==27\nFind_Max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28])==28\nFind_Max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29])==29\nFind_Max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30])==30\nFind_Max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31])==31\nFind_Max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32])==32\nFind_Max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33])==33\nFind_Max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34])==34\nFind_Max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35])==35\nFind_Max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36])==36\nFind_Max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37])==37\nFind_Max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38])==38\nFind_Max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39])==39\nFind_Max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40])==40\nFind_Max([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Find_Max([])==None, Find_Max([])\nassert    Find_Max([5])==5, Find_Max([5])\nassert    Find_Max([2,5])==5, Find_Max([2,5])\nassert    Find_Max([2,5,3])==5, Find_Max([2,5,3])\nassert    Find_Max([2,5,3,2])==2, Find_Max([2,5,3,2])\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Find_Max([1,2,3]) == 3, \"Test case 1 Failed\"\nassert     Find_Max([4,5,6,7]) == 7, \"Test case 2 Failed\"\nassert     Find_Max([4,5,6]) == 5, \"Test case 3 Failed\"\nassert     Find_Max([4]) == 4, \"Test case 4 Failed\"\nassert     Find_Max([]) == None, \"Test case 5 Failed\"\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     round_and_sum([1.2, 2.3, 3.4, 4.5]) == 3.0\nassert     round_and_sum([4.5, 5.6, 6.7, 7.8, 8.9]) == 30.0\nassert     round_and_sum([1.5, 2.9, 7.8, 7.4, 5.5, 4.7]) == 69.0\nassert     round_and_sum([1.5, 2.9, 7.8, 7.4, 5.5, 4.7]) == 69.0\nassert     round_and_sum([1.5, 2.9, 7.8, 7.4, 5.5, 4.7]) == 69.0\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     round_and_sum([1,2,3,4,5,6]) ==     360, 'Not quite right'\nassert     round_and_sum([1,1,2,2,3,3]) ==     12, 'Not quite right'\nassert     round_and_sum([-3,-2,-1,0]) ==     12, 'Not quite right'\nassert     round_and_sum([]) ==     0, 'Not quite right'"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef sum_of_digits(a):\n    '''\n    Write a function which takes a number and returns the sum of the digits of the number.\n    '''\n    pass\n\nassert round_and_sum(list1) == 28\nassert round_and_sum(list2) == 0\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     round_and_sum([1,2,3,4,5,6,7]) == (1+2+3+4+5+6+7)*7, \"Wrong\"\nassert round_and_sum([100,200,300,400,500]) == (100+200+300+400+500)*5, \"Wrong\"\nassert round_and_sum([12,12,12,12,12,12,12]) == (12+12+12+12+12+12+12)*5, \"Wrong\"\nassert round_and_sum([]) == 0, \"Wrong\"\nassert round_and_sum([-1,-2,-3,-4,-5]) == (-1-2-3-4-5)*5, \"Wrong\"\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nround_and_sum([0.1, -0.1]) == -1\nround_and_sum([0.1, 0, -0.1, 0, 0.1, 0, 0, 0.1, 0, -0.1, 0, 0, 0.1, -0.1]) == -4\nround_and_sum([0.1, 0, 0, 0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, -0.1]) == -8\nround_and_sum([0.1, 0, 0, 0.1, -0.1]) == -2\nround_and_sum([0.1, 0, 0, 0.1, -0.1, 0.1, -0.1, 0, 0, 0, 0, 0, 0, 0, 0.1, -0.1]) == -6\nround_and_sum([0.1, 0, 0, 0.1, -0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, -0.1, 0.1, -0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, -0.1, -0.1]) == -12\nround_and_sum([0.1, 0, 0, 0.1, -0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, -0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, -0.1, -0.1]) == -12\nround_and_sum([0.1, 0, 0, 0.1, -0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, -0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, -0.1, -0.1]) == -12\nround_and_sum([0.1, 0, 0, 0.1, -0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, -0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, -0.1, -0.1]) == -12\nround_and_sum([0.1, 0, 0, 0.1, -0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, -0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, -0.1, -0.1]) == -12\nround_and_sum([0.1, 0, 0, 0.1, -0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, -0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, -0.1, -0.1]) == -12\nround_and_sum([0.1, 0, 0, 0.1, -0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, -0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, -0.1, -0.1]) == -12\nround_and_sum([0.1, 0, 0, 0.1, -0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, -0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, -0.1, -0.1]) == -12\nround_and_sum([0.1, 0, 0, 0.1, -0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, -0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, -0.1, -0.1]) == -12\nround_and_sum([0.1, 0, 0, 0.1, -0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, -0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, -0.1, -0.1]) == -12\nround_and_sum([0.1, 0, 0, 0.1, -0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, -0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, -0.1, -0.1]) == -12\nround_and_sum([0.1, 0, 0, 0.1, -0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, -0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, -0.1, -0.1]) == -12\nround_and_sum([0.1, 0, 0, 0.1, -0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, -0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, -0.1, -0.1]) == -12\nround_and_sum([0.1, 0, 0, 0.1, -0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, -0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, -0.1, -0.1]) == -12\nround_and_sum([0.1, 0, 0, 0.1, -0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, -0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, -0.1, -0.1]) == -12\nround_and_sum([0.1, 0, 0, 0.1, -0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, -0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, -0.1, -0.1]) == -12\nround_and_sum([0.1, 0, 0, 0.1, -0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, -0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, -0.1, -0.1]) == -12\nround_and_sum([0.1, 0, 0, 0.1, -0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, -0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, "
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nround_and_sum([1, 2, 3, 4, 5]) == (5 + 4 + 3 + 2 + 1) * 5\nassert round_and_sum([1, 100, 10000, 100000, 1000000]) == (100 + 10000 + 100000 + 1000000 + 1000000) * 5\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nround_and_sum([1,2,3,4]) == 10\nround_and_sum([4,5,6,7]) == 30\nround_and_sum([-3,-2,-1,-1]) == -10\nround_and_sum([10,11,12,13,14,15,16,17,18,19,20]) == 500\nround_and_sum([100,101,102,103]) == 300\nround_and_sum([100,101,102,103,104,105,106,107]) == 500\nround_and_sum([1,2,3,4,5,6,7,8,9,10]) == 30\nround_and_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == 1500\nround_and_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]) == 3000\nround_and_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == 3600\nround_and_sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     round_and_sum([1,2,3]) == 21\nassert     round_and_sum([1,2,3,4]) == 24\nassert     round_and_sum([]) == 0\n\nprint(\"You are almost done! Now, try some more exercises\")"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     cube_Sum(1) == 1\nassert     cube_Sum(2) == 8\nassert     cube_Sum(10) == 3340\nassert     cube_Sum(100) == 4440\nassert     cube_Sum(1000) == 90464\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     cube_Sum(10) == 2760, \"cube_Sum is not giving the correct output\"\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     cube_Sum(2) == 8\nassert     cube_Sum(3) == 27\nassert     cube_Sum(4) == 64\n\ndef long_number(n):\n    '''\n    Write a python function to find the number of digits in a number n.\n    '''\n    pass\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     cube_Sum(0) == 0, \"cube_Sum\"\nassert     cube_Sum(1) == 1, \"cube_Sum\"\nassert     cube_Sum(2) == 3, \"cube_Sum\"\nassert     cube_Sum(3) == 10, \"cube_Sum\"\nassert     cube_Sum(4) == 27, \"cube_Sum\"\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ncube_Sum(2) == 8\ncube_Sum(3) == 27\ncube_Sum(4) == 64\ncube_Sum(5) == 125\ncube_Sum(6) == 216\ncube_Sum(7) == 343\ncube_Sum(8) == 512\ncube_Sum(9) == 729\ncube_Sum(10) == 806\ncube_Sum(11) == 1023\ncube_Sum(12) == 1296\ncube_Sum(13) == 1681\ncube_Sum(14) == 2304\ncube_Sum(15) == 3057\ncube_Sum(16) == 3932\ncube_Sum(17) == 4989\ncube_Sum(18) == 5889\ncube_Sum(19) == 6969\ncube_Sum(20) == 8176\ncube_Sum(21) == 9309\ncube_Sum(22) == 11365\ncube_Sum(23) == 13455\ncube_Sum(24) == 15495\ncube_Sum(25) == 17552\ncube_Sum(26) == 19973\ncube_Sum(27) == 23496\ncube_Sum(28) == 26404\ncube_Sum(29) == 28912\ncube_Sum(30) == 32162\ncube_Sum(31) == 36305\ncube_Sum(32) == 40582\ncube_Sum(33) == 43929\ncube_Sum(34) == 48844\ncube_Sum(35) == 52899\ncube_Sum(36) == 56608\ncube_Sum(37) == 61477\ncube_Sum(38) == 66563\ncube_Sum(39) == 72743\ncube_Sum(40) == 78660\ncube_Sum(41) == 83535\ncube_Sum(42) == 89526\ncube_Sum(43) == 94895\ncube_Sum(44) == 100704\ncube_Sum(45) == 105673\ncube_Sum(46) == 110944\ncube_Sum(47) == 116765\ncube_Sum(48) == 121693\ncube_Sum(49) == 127553\ncube_Sum(50) == 133687\ncube_Sum(51) == 139529\ncube_Sum(52) == 145583\ncube_Sum(53) == 150715\ncube_Sum(54) == 156657\ncube_Sum(55) == 162673\ncube_Sum(56) == 168897\ncube_Sum(57) == 175530\ncube_Sum(58) == 181036\ncube_Sum(59) == 187306\ncube_Sum(60) == 192618\ncube_Sum(61) == 198593\ncube_Sum(62) == 205446\ncube_Sum(63) == 211035\ncube_Sum(64) == 217939\ncube_Sum(65) == 225744\ncube_Sum(66) == 231473\ncube_Sum(67) == 237782\ncube_Sum(68) == 243839\ncube_Sum(69) == 249907\ncube_Sum(70) == 256739\ncube_Sum(71) == 263723\ncube_Sum(72) == 270180\ncube_Sum(73) == 277195\ncube_Sum(74) == 284909\ncube_Sum(75) == 291447\ncube_Sum(76) == 297954\ncube_Sum(77) == 305577\ncube_Sum(78) == 311197\ncube_Sum(79) == 317133\ncube_Sum(80) == 323172\ncube_Sum(81) == 328847\ncube_Sum(82) == 335040\ncube_Sum(83) == 340587\ncube_Sum(84) == 335623\ncube_Sum(85) == 341639\ncube_Sum(86) == 347584\ncube_Sum(87) == 354531\ncube_Sum(88) == 359988\ncube_Sum(89) == 366502\ncube_Sum(90) == 372772\ncube_Sum(91) == 379244\ncube_Sum(92) == 386900\ncube_Sum(93) == 394102\ncube_Sum(94) == 399648\ncube_Sum(95) == 406220\ncube_Sum(96) == 411008\ncube_Sum(97) == 417636\ncube_Sum(98) == 423708\ncube_Sum(99) == 429422\ncube_Sum(100) == 434680\ncube_Sum(101) == 438576\ncube_Sum(102) == 445486\ncube_Sum(103) == 450437\ncube_Sum(104) == 457531\ncube_Sum(105) == 463440\ncube_Sum(106) == 468273\ncube_Sum(107) == 473398\ncube_Sum(108) == 478852\ncube_Sum(109) == 484263\ncube_Sum(110) == 491376\ncube_Sum(111) == 496300\ncube_Sum(112) == 502927\ncube_Sum(113) == 508823\ncube_Sum(114) == 515832\ncube_Sum(115) == 522607\ncube_Sum(116) == 528168\ncube_Sum(117) == 535144\ncube_Sum(118) == 541440\ncube_Sum(119) == 547133\ncube_Sum(120) == 552960\ncube_Sum(121) == 557871\ncube_Sum(122) == 564187\ncube_Sum(123) == 569302\ncube_Sum(124) == 574060\ncube_Sum(125) == 579735\ncube_Sum(126) == 586388\ncube_Sum(127) == 593160\ncube_Sum(128) == 598890\ncube_Sum(129) == 604470\ncube_Sum(130) == 610337\ncube_Sum(131) == 617082\ncube_Sum(132) == 623233\ncube_Sum(133) == 628883\ncube_Sum(134) == 634700\ncube_Sum(135) == 641657\ncube_Sum(136) == 648067\ncube_Sum(137) == 654481\ncube_Sum(138) == 659713\ncube_Sum(139) == 666688\ncube_Sum(140) == 673199\ncube_Sum(141) == 678989\ncube_Sum(142) == 685691\ncube_Sum(143) == 692188\ncube_Sum(144) == 697772\ncube_Sum(145) == 704297\ncube_Sum(146) == 709476\ncube_Sum(147) == 715485\ncube_Sum(148) == 722693\ncube_Sum(149) == 728887\ncube_Sum(150) == 735790\ncube_Sum(151) == 742248\ncube_Sum(152) == 748050\ncube_Sum(153) == 746233\ncube_Sum(154) == 749583\ncube_Sum(155) == 753855\ncube_Sum(156) == 759941\ncube_Sum(157) == 766386\ncube_Sum(158) == 771575\ncube_Sum(159) == 777586\ncube_Sum(160) == 784843\ncube_Sum(161) == 790259\ncube_Sum(162) == 796549\ncube_Sum(163) == 802395\ncube_Sum(164) == 808029\ncube_Sum(165) == 815912\ncube_Sum(166) == 822153\ncube_Sum(167) == 828729\ncube_Sum(168) == 834919\ncube_Sum(169) == 844198\ncube_Sum(170) == 854198\ncube_Sum(171) == 865365\ncube_Sum(172) == 875750\ncube_Sum(173) == 887484\ncube_Sum(174) == 892609\ncube_Sum(175) == 899806\ncube_Sum(176) == 901031\ncube_Sum(177) == 907729\ncube_Sum(178) == 914159\ncube_Sum(179) == 920819\ncube_Sum(180) == 925191\ncube_Sum(181) == 929408\ncube_Sum(182) == 935897\ncube_Sum(183) == 940691\ncube_Sum(184) == 946359\ncube_Sum(185) == 950696\ncube_Sum(186) == 954827\ncube_Sum(187) == 958911\ncube_Sum(188) == 964"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ncube_Sum(5) == \n[0, 120, 3600, 7200, 144000]\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ncube_Sum(10) == 2736\nassert \ncube_Sum(20) == 8064\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     cube_Sum(6) == 81, \"error\"\nassert     cube_Sum(0) == 0, \"error\"\nassert     cube_Sum(9) == 324, \"error\"\nassert     cube_Sum(7) == 728, \"error\"\nprint (\"All test cases passed.\""
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     cube_Sum(10) == 4125\nassert     cube_Sum(20) == 622950\nassert     cube_Sum(50) == 5290131956565\nassert     cube_Sum(100) == 5392944240040\nassert     cube_Sum(250) == 38235823582358\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     concatenate_tuple(test_tup) == '192.168.1.1/24, 192.168.2.2/24'\nassert     concatenate_tuple(test_tup) == '192.168.1.1/24, 192.168.2.2/24'"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     concatenate_tuple((\"a\", \"b\", \"c\")) == \"a,b,c\"\nassert     concatenate_tuple((1, 2, 3, 4)) == \"1,2,3,4\"\nassert     concatenate_tuple((\"a\", \"b\", \"c\", \"d\")) == \"a,b,c,d\""
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     concatenate_tuple(('a','b','c')) == 'a.b.c', 'Test 1 fail'\nassert     concatenate_tuple(('a','b','c','d','e')) == 'a.b.c.d.e', 'Test 2 fail'\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(\"\\nCoding complete? Click 'Check' to earn cool rewards!\""
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     concatenate_tuple((1, 2, 3)) == '1 2 3', 'incorrect output'\nassert concatenate_tuple((1, 2, 3)) == '1 2 3', 'incorrect output'\nassert concatenate_tuple((1, 2, 3, 4)) == '1 2 3 4', 'incorrect output'\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     concatenate_tuple((1, 2, 3, 4)) == '1#2#3#4'\nassert     concatenate_tuple((\"a\", \"b\", \"c\")) == 'a#b#c'\nassert     concatenate_tuple(()) == ''\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     concatenate_tuple((1,2,3,4,5,6)) == '1,2,3,4,5,6', \"Should be '1,2,3,4,5,6'\"\nassert concatenate_tuple((1,2,3,4,5,6,'-',' ')) == '1-2-3-4-5-6-', \"Should be '1-2-3-4-5-6-'\"\nassert concatenate_tuple((1,2,3,4,5,6,'-',' ','/',' ','/',' ')) == '1-2-3-4-5-6-/-', \"Should be '1-2-3-4-5-6-/-'\"\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     concatenate_tuple((1,2,3,'a')) == '123a'\nassert     concatenate_tuple((1,'a',2,3,4,'b')) == '1a2b3c4d'\nassert     concatenate_tuple((1,2,3,4,5,6,7,8,9,0)) == '1a2b3c4d5e'\nassert     concatenate_tuple((1,2,3,4,5,6,7,8,9,0,0)) == '1a2b3c4d5e0'\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     concatenate_tuple((\"hello\", \"world\")) == \"hello world\", \"1st\"\nassert     concatenate_tuple((\"good\", \"morning\", \"afternoon\")) == \"good morning afternoon\", \"2nd\"\nassert     concatenate_tuple((\"hello\", \"world\", \"python\", \"study\")) == \"hello world python study\", \"3rd\"\nassert     concatenate_tuple((\"hello\", \"python\", \"morning\")) == \"hello python morning\", \"4th\"\nassert     concatenate_tuple((\"hello\", \"python\", \"study\")) == \"hello python study\", \"5th\"\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     concatenate_tuple(('a', 'b')) == 'a\\nb'\nassert     concatenate_tuple(('a', 'b', 'c')) == 'a\\nb\\nc'\nassert     concatenate_tuple(('a', 'b', 'c', 'd')) == 'a\\nb\\nc\\nd'\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Average_Of_Cube(5) == 1.0, \"correct answer\"\nassert     find_Average_Of_Cube(7) == 6.0, \"correct answer\"\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Average_Of_Cube(10) == math.pow(1, 3)\nassert     find_Average_Of_Cube(0) == 0\nassert     find_Average_Of_Cube(1) == 1\nassert     find_Average_Of_Cube(2) == 2\nassert     find_Average_Of_Cube(100) == math.pow(1, 3)\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nfind_Average_Of_Cube(10) == 1\nfind_Average_Of_Cube(9) == 1\nfind_Average_Of_Cube(8) == 1\nfind_Average_Of_Cube(7) == 1\nfind_Average_Of_Cube(6) == 1\nfind_Average_Of_Cube(5) == 1\nfind_Average_Of_Cube(4) == 1\nfind_Average_Of_Cube(3) == 1\nfind_Average_Of_Cube(2) == 1\nfind_Average_Of_Cube(1) == 1\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Average_Of_Cube(4) == 5\nassert     find_Average_Of_Cube(3) == 27\nassert     find_Average_Of_Cube(5) == 125\nassert     find_Average_Of_Cube(6) == 169\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Average_Of_Cube(0) == 0, \"should return 0\"\nassert     find_Average_Of_Cube(1) == 1, \"should return 1\"\nassert     find_Average_Of_Cube(2) == 1, \"should return 1\"\nassert     find_Average_Of_Cube(3) == 1.5, \"should return 1.5\"\nassert     find_Average_Of_Cube(4) == 2.5, \"should return 2.5\"\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_Average_Of_Cube(2) == 2.25\nassert     find_Average_Of_Cube(4) == 5.0\nassert     find_Average_Of_Cube(0) == 0.0\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_Average_Of_Cube(1) == 1\nassert     find_Average_Of_Cube(2) == 1\nassert     find_Average_Of_Cube(3) == 1\nassert     find_Average_Of_Cube(4) == 1\nassert     find_Average_Of_Cube(5) == 1\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Average_Of_Cube(0) == 0, \"Wrong output for find_Average_Of_Cube(0)\"\nassert     find_Average_Of_Cube(1) == 1, \"Wrong output for find_Average_Of_Cube(1)\"\nassert     find_Average_Of_Cube(5) == 8, \"Wrong output for find_Average_Of_Cube(5)\"\nassert     find_Average_Of_Cube(10) == 25, \"Wrong output for find_Average_Of_Cube(10)\"\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_rear((\"apple\", \"banana\", \"cherry\")) == (\"apple\", \"banana\", \"cherry\")\nassert     extract_rear((\"apple\", \"banana\", \"cherry\", \"apple\", \"cherry\")) == (\"cherry\", \"apple\", \"banana\")\nassert     extract_rear((\"apple\", \"banana\", \"cherry\", \"apple\", \"cherry\", \"apple\", \"cherry\")) == (\"cherry\", \"cherry\", \"banana\")\nassert     extract_rear((\"apple\", \"banana\", \"cherry\", \"orange\", \"grapes\", \"apple\", \"cherry\")) == (\"cherry\", \"apple\", \"banana\")\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_rear(('Hello', 'World'))    == ('World',)\nassert     extract_rear(('Hello', 'World', 'Reeksha'))    == ('Reeksha',)\nassert     extract_rear(('Hello', 'World', 'Reeksha', 'Knuth', 'Kurt', 'Pocono'))    == ('Knuth', 'Kurt', 'Pocono')\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_rear(('abcd', 'efgh', 'ijkl','mno', 'pqrs')) == (None, 'efgh', None,'mno', 'pqrs')\nassert     extract_rear(('abcd', 'efgh', 'ijkl','mno', 'pqrs')) == ('efgh', 'ijkl','mno', 'pqrs')\nassert     extract_rear(('abcd', 'efgh', 'ijkl','mno', 'pqrs')) == ('efgh', 'ijkl','mno', 'pqrs')\n\ndef extract_front(test_tuple):\n    '''\n    Write a function to extract only the front index element of each string in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_rear(('JAIN', 'RANDY', 'JAIN', 'JAIN', 'JAIN')) == ['JAIN']\nassert     extract_rear(('JAIN', 'JAIN', 'RANDY', 'JAIN', 'JAIN')) == ['JAIN']\nassert     extract_rear(('JAIN', 'JAIN', 'RANDY', 'JAIN', 'JAIN')) == ['JAIN']\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_rear(()) == ()\nassert     extract_rear((1,2,3,4)) == (4,)\nassert     extract_rear((1,2,3,4,'a','b','c')) == (4, 'c')\nassert     extract_rear((1,2,3,'a','b','c')) == (3, 'a')\nassert     extract_rear((1,'a','b','c')) == (1,)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_rear(('dog', 'cat', 'parrot', 'horse', 'bird')) == ('bird', 'horse', 'parrot', 'cat', 'dog')\nassert     extract_rear(('dog', 'cat', 'parrot', 'horse', 'bird')) == ('bird', 'horse', 'parrot', 'cat', 'dog')\nassert     extract_rear(('dog', 'cat', 'parrot', 'horse', 'bird')) == ('bird', 'horse', 'parrot', 'cat', 'dog')\nassert     extract_rear(('dog', 'cat', 'parrot', 'horse', 'bird')) == ('bird', 'horse', 'parrot', 'cat', 'dog')\nassert     extract_rear(('dog', 'cat', 'parrot', 'horse', 'bird')) == ('bird', 'horse', 'parrot', 'cat', 'dog')\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_rear((\"python\", \"tuple\", \"iterables\")) == (\"tuple\", \"iterables\")\nassert     extract_rear((\"python\", \"\", \"iterables\")) == (\"\", \"iterables\")\nassert     extract_rear((\"\", \"\", \"iterables\")) == (\"\", \"iterables\")\nassert     extract_rear((\"iterables\", \"iterables\", \"iterables\")) == (\"iterables\", \"iterables\", \"iterables\")\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n'''\nProblem Statement #8\n\nWrite a function to extract the last index element of each string in the given tuple.\n'''\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_rear((('this', 'is','string'), ('two','more','strings'), ('one', 'and', 'last'), ('two','more','strings'))) == ('string','more strings', 'last','more strings')\nassert     extract_rear((('this', 'is','string'), ('two','more','strings'), ('one', 'and', 'last'), ('two','more','strings'))) == ('is','string', 'and', 'last')\nassert     extract_rear((('this', 'is','string'), ('two','more','strings'), ('one', 'and', 'last'), ('two','more','strings'))) == ('is','string', 'and', 'last')\nassert     extract_rear((('this', 'is','string'), ('two','more','strings'), ('one', 'and', 'last'), ('two','more','strings'))) == ('string','more strings', 'last','more strings')\nassert     extract_rear((('this', 'is','string'), ('two','more','strings'), ('one', 'and', 'last'), ('two','more','strings'))) == ('this is string','more strings', 'last','more strings')\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_rear(('aaaa', 'bb', 'ccc', 'dddd')) == ('ccc', 'dddd')\nassert     extract_rear(('a', 'bb', 'ccc', 'dddd')) == ('bb', 'dddd')\nassert     extract_rear(('a', 'a', 'bb', 'ccc', 'dddd')) == ('ccc', 'dddd')\nassert     extract_rear(('aaaa', 'bb', 'ccc', 'dddd', 'eee', 'ff', 'gg', 'hh', 'ii', 'jj', 'kk', 'll','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'aa', 'bb', 'ccc', 'dddd', 'eee', 'ff', 'gg', 'hh', 'ii', 'jj', 'kk', 'll','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'aaaa', 'bb', 'ccc', 'dddd', 'eee', 'ff', 'gg', 'hh', 'ii', 'jj', 'kk', 'll','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'aaaa', 'bb', 'ccc', 'dddd', 'eee', 'ff', 'gg', 'hh', 'ii', 'jj', 'kk', 'll','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z')) == \\\n    ('ccc', 'dddd', 'eee', 'ff', 'gg', 'hh', 'ii', 'jj', 'kk', 'll','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'aaaa', 'bb', 'ccc', 'dddd', 'eee', 'ff', 'gg', 'hh', 'ii', 'jj', 'kk', 'll','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z')\nassert     extract_rear(('aaaaaaaaaaaaaaa', 'bb', 'ccc', 'dddddddddddddd', 'eee', 'ff', 'gg', 'hh', 'ii', 'jj', 'kk', 'll','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'aaaaaaaaaaaaaaa', 'bb', 'ccc', 'dddddddddddddd', 'eee', 'ff', 'gg', 'hh', 'ii', 'jj', 'kk', 'll','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'aaaaaaaaaaaaaaa', 'bb', 'ccc', 'dddddddddddddd', 'eee', 'ff', 'gg', 'hh', 'ii', 'jj', 'kk', 'll','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z')) == \\\n    ('aaaaaaaaaaaaaaa', 'bb', 'ccc', 'dddddddddddddd', 'eee', 'ff', 'gg', 'hh', 'ii', 'jj', 'kk', 'll','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'aaaaaaaaaaaaaaa', 'bb', 'ccc', 'dddddddddddddd', 'eee', 'ff', 'gg', 'hh', 'ii', 'jj', 'kk', 'll','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'aaaaaaaaaaaaaaa', 'bb', 'ccc', 'dddddddddddddd', 'eee', 'ff', 'gg', 'hh', 'ii', 'jj', 'kk', 'll','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z')\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_element_in_list(['n', 'o', 'r', 'e','s', 't'],'s') == 2, \"incorrect\"\nassert     count_element_in_list(['n', 'o', 'r', 'e','s', 't'], 'o') == 2, \"incorrect\"\nassert     count_element_in_list(['n', 'o', 'r', 'e','s', 't'], 'n') == 1, \"incorrect\"\nassert     count_element_in_list(['n', 'o', 'r', 'e','s', 't'], 'e') == 1, \"incorrect\"\nassert     count_element_in_list(['n', 'o', 'r', 'e','s', 't'], 't') == 3, \"incorrect\"\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert count_element_in_list([1,2,3,4,5], 4) == 3\nassert count_element_in_list([], 2) == 0\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_element_in_list(['c', 'd', 'd'], 'd') == 2\nassert     count_element_in_list(['c', 'd', 'd'], 'a') == 0\nassert     count_element_in_list(['c', 'd', 'd', 'd'], 'd') == 3\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint (\"Correct\")\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_element_in_list([\"a\", \"b\", \"b\", \"c\"], \"b\") == 2\nassert     count_element_in_list([\"a\", \"b\", \"b\", \"c\"], \"d\") == 0\nassert     count_element_in_list([\"a\", \"b\", \"b\", \"c\"], \"e\") == 0\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_element_in_list([], 1) == 0\nassert     count_element_in_list([1,2], 1) == 1\nassert     count_element_in_list([1,2], 2) == 2\nassert     count_element_in_list([1,2,2,2,2], 2) == 2\n\ndef count_element_in_range(list1, x, y): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    pass\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nassert count_element_in_list([0,1,2,3],0) == 1\nassert count_element_in_list([0,1,2,3],1) == 2\nassert count_element_in_list([0,1,2,3],2) == 3\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     filter_oddnumbers([]) == []\nassert filter_oddnumbers([1,2,3,4,5]) == [1,3,5]\nassert filter_oddnumbers([1,2,3,4,5,6,7,8,9]) == [1,3,5,7,9]\nassert filter_oddnumbers([1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9,10]"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(list(filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8])))\nassert\nassert\nassert\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nassert "
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nfilter_oddnumbers([1, 2, 3, 4, 5]) == None\nfilter_oddnumbers([1, 2, 3, 4]) == [1, 3, 5]\nfilter_oddnumbers([1, 2, 3, 4, 5, 6]) == None\n\ndef filter_greaterthan(nums):\n    '''\n    Write a function that takes in a list and returns a list with only the \n    elements from the original list that are greater than a certain value.\n    '''\n    pass\n\nassert \nfilter_greaterthan([1, 2, 3, 4, 5]) == [3, 4, 5]\nfilter_greaterthan([1, 2, 3, 4, 5, 6]) == [3, 4, 5]\nfilter_greaterthan([1, 2, 3, 4, 5, 6, 7]) == [3, 4, 5, 6, 7]\n\ndef filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    pass\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ==     [1, 3, 5, 7, 9], \"Wrong output\"\nprint(\"    Test #4 passed!\")\n\ndef filter_evennumbers(nums):\n    '''\n    Write a function to filter even numbers.\n    '''\n    pass\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     filter_oddnumbers([1,2,3,4,5,6,7]) == [1,3,5,7]\nassert     filter_oddnumbers([1,2,3,4,5,6,7,8,9]) == [1,3,5,7,9]\nassert     filter_oddnumbers([]) == []\nassert     filter_oddnumbers(None) == None\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nfilter_oddnumbers([1,2,3,4,5,6,7,8,9,10]) == []\nassert filter_oddnumbers([1,2,3,4,5,6,7,8,9,10,11]) == [11]\nassert filter_oddnumbers([1,2,3,4,5,6,7,8,9,10,11,12]) == [11]\nassert filter_oddnumbers([1,2,3,4,5,6,7,8,9,10,11,12,13]) == []\nassert filter_oddnumbers([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == [13]\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nnums = range(20)\nassert list(filter_oddnumbers(nums)) == list(filter(lambda n: n % 2!= 0, nums))\nassert list(filter_oddnumbers([1,2,3,4,5,6,7,8,9])) == list(filter(lambda n: n % 2!= 0, [1,2,3,4,5,6,7,8,9]))\n\ndef filter_evennumbers(nums):\n    '''\n    Write a function to filter even numbers.\n    '''\n    pass\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     change_date_format(\"2020-01-01\") == \"01-01-2020\"\nassert     change_date_format(\"2020-10-01\") == \"10-01-2020\"\nassert     change_date_format(\"2020-01-01\") == \"01-01-2020\"\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     change_date_format(\"12-10-12\") == \"10-12-12\"\nassert     change_date_format(\"12-10-12\") == \"10-12-12\"\nassert     change_date_format(\"10-12-12\") == \"12-10-12\"\nassert     change_date_format(\"10-10-12\") == \"10-10-12\"\nassert     change_date_format(\"1-1-1\") == \"1-1-1\"\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     change_date_format(\"2000-12-31\") == \"31-12-2000\", \"ERROR\"\nassert change_date_format(\"2015-01-01\") == \"01-01-2015\", \"ERROR\"\nassert change_date_format(\"2015-11-01\") == \"01-11-2015\", \"ERROR\"\nassert change_date_format(\"2015-11-31\") == \"31-11-2015\", \"ERROR\"\nassert change_date_format(\"2015-11-31\") == \"31-11-2015\", \"ERROR\"\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     change_date_format(\"1992-12-31\") == \"31-12-1992\"\nassert     change_date_format(\"1992-12-29\") == \"29-12-1992\"\nassert     change_date_format(\"1992-1-31\") == \"31-1-1992\"\nassert     change_date_format(\"1992-0-29\") == \"29-0-1992\"\nassert     change_date_format(\"1992-7-31\") == \"31-7-1992\"\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     change_date_format('2020-11-01') == '11-01-2020'\nassert     change_date_format('2020-11-01') == '11-01-2020'\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     change_date_format('2019-10-17') == '17-10-2019', 'Bad Format'\nassert     change_date_format('2020-12-25') == '25-12-2020', 'Bad Format'\nassert     change_date_format('2020-10-25') == '25-10-2020', 'Bad Format'\nassert     change_date_format('2021-06-16') == '16-06-2021', 'Bad Format'\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     change_date_format('2020-09-30') == '30-09-2020'\nassert     change_date_format('2020-05-01') == '01-05-2020'\nassert     change_date_format('2020-10-25') == '25-10-2020'\nassert     change_date_format('2020-11-30') == '30-11-2020'\nassert     change_date_format('2020-01-01') == '01-01-2020'\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     change_date_format(\"2020-06-11\") == \"11-06-2020\"\nassert change_date_format(\"2020-06-13\") == \"13-06-2020\"\nassert change_date_format(\"2020-07-06\") == \"06-07-2020\"\nassert change_date_format(\"2020-08-07\") == \"07-08-2020\"\n\ndef is_leap_year(y):\n    '''\n    Write a function to check if a year is a leap year or not.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert shell_sort([3, 2, 1]) == [1, 2, 3]\nassert shell_sort([1, 2, 3]) == [1, 2, 3]\nassert shell_sort([0, 1, 3, 2]) == [0, 1, 2, 3]\nassert shell_sort([0, 1, 1, 1]) == [0, 0, 1, 1]\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     shell_sort([1, 3, 6, 4, 8, 7, 5, 2]) == \n    [1, 2, 3, 4, 5, 6, 7, 8]\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     shell_sort([]) == None\nassert     shell_sort([1]) == None\nassert     shell_sort([1,1]) == None\nassert     shell_sort([1,2,3,4]) == None\nassert     shell_sort([1,2,3,4,5,6,7,8,9]) == None\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     shell_sort([-10, -5, 3, 5, 8, 2]) == [-10, -5, -5, 2, 3, 5, 8], \"Error\"\nassert     shell_sort([]) == [], \"Error\"\nassert     shell_sort([1,3,7,8,3,2]) == [1,2,3,3,7,8], \"Error\"\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     shell_sort([]) == True, \\\n    \"passed empty list!\"\nassert     shell_sort([1,2,3]) == True, \\\n    \"passed correct array!\"\nassert     shell_sort([5,4,3,2,1]) == False, \\\n    \"passed an incorrect array!\"\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     shell_sort([2,3,1]) == [1,2,3], \"1st Case\"\nassert     shell_sort([10,9,8,7,6,5]) == [6,7,8,9,10,5], \"2nd Case\"\nassert     shell_sort([1,4,2,3,7,5,6]) == [1,2,3,4,5,6,7], \"3rd Case\"\nassert     shell_sort([10,9,8,7,6,5]) == [6,7,8,9,10,5], \"4th Case\"\nassert     shell_sort([1,2,3]) == [1,2,3], \"5th Case\"\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     and_tuples((1,2),(2,3)) == (1,2)\nassert     and_tuples((1,2),(3,4)) == (1,2)\nassert     and_tuples((1,2),(2,2)) == (1,2)\nassert     and_tuples((1,2),(2,2)) == (1,2)\nassert     and_tuples((1,2),(3,4)) == (1,2)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     and_tuples(('a', 'b', 'c', 'd'), ('a', 'b', 'c')) == ('a', 'b', 'c', 'd'), 'and_tuples is broken'\nassert     and_tuples(('a', 'b', 'c', 'd', 'e'), ('a', 'b', 'c')) == ('a', 'b', 'c', 'd'), 'and_tuples is broken'\nassert     and_tuples(('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'd')) == ('a', 'b', 'c', 'd'), 'and_tuples is broken'\nassert     and_tuples((1, 2, 3, 4, 5), (1, 2, 3)) == (1, 2, 3, 4, 5), 'and_tuples is broken'\nassert     and_tuples((1, 2, 3), (1, 2, 3)) == (1, 2, 3), 'and_tuples is broken'\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint('\\n')\nprint(\"Example-1:\")\nprint(f'{and_tuples([(1,2),(4,5)],[(2,3),(6,7)])}')\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     and_tuples((1, 2, 3), (4, 5, 6)) == (1, 2, 3, 4, 5, 6)\nassert     and_tuples((1, 2, 3), (4, 5, 5)) == (1, 2, 3, 4, 5)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    ((1,2), (3,4)) == and_tuples((1,2), (3,4))\n    ((3,2), (1,4)) == and_tuples((1,2), (3,4))\n    ((2,4), (3,1)) == and_tuples((1,2), (3,4))\nassert not \n    ((1,2), (3,4)) == and_tuples((1,2), (3,4))\n    ((3,2), (1,4)) == and_tuples((1,2), (3,4))\n    ((2,4), (3,1)) == and_tuples((1,2), (3,4))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     and_tuples((1, 2), (3, 4)) == (1, 3)\nassert     and_tuples((2, 4), (1, 3)) == (2, 4)\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     and_tuples((1,2),(2,4)) == (2,4)\nassert     and_tuples((1,2,3,4),(2,4)) == (2,4)\nassert not and_tuples((1,2),(2,4)) == (2,4)\nassert not and_tuples((1,2,3,4),(2,4)) == (2,4)\n\n\ndef or_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise or tuples from the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     parabola_directrix(1, 1, 1) == 2\nassert     parabola_directrix(1, 2, 1) == 4\nassert     parabola_directrix(1, 3, 1) == 5\nassert     parabola_directrix(1, 4, 1) == 4\nassert     parabola_directrix(1, 5, 1) == 4\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     parabola_directrix(4, 3, -1) == None\nassert     parabola_directrix(4, -1, -1) == (4, 3)\nassert     parabola_directrix(3, -1, 1) == (3, 1)\nassert     parabola_directrix(3, 1, 1) == (0, 0)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef parabola_directrix(a, b, c):\n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (a + b * x) / c\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     parabola_directrix(1,2,3) == [1,2,3], 'parabola_directrix is wrong.'\n\ndef parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    import math \n    return [a - c, b, a + c]\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nparabola_directrix(a = 0, b = 0, c = 0) == 0\nparabola_directrix(a = 0, b = 5, c = 0) == 0\nparabola_directrix(a = 5, b = 0, c = 0) == -5\nparabola_directrix(a = -5, b = 0, c = 0) == 5\nparabola_directrix(a = 1, b = 1, c = -2) == 0\nparabola_directrix(a = -1, b = 1, c = -2) == 1\nparabola_directrix(a = -1, b = -1, c = -2) == -1\nparabola_directrix(a = -1, b = -1, c = 2) == 1\nparabola_directrix(a = 1, b = -1, c = 2) == -1\nparabola_directrix(a = -1, b = 1, c = 2) == -1\nparabola_directrix(a = 1, b = -1, c = -2) == 1\nparabola_directrix(a = -1, b = 1, c = -2) == -1\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     parabola_directrix(1, 4, -1) == (2, 2)\nassert     parabola_directrix(5, 7, 0) == (2, -1)\nassert     parabola_directrix(7, 5, 1) == (-2, -1)"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     parabola_directrix(1, 0, 0) == (0, 0)\nassert     parabola_directrix(0, 1, 0) == (0, -1)\nassert     parabola_directrix(0, 0, 1) == (0, 0)\nassert     parabola_directrix(0, 0, 0) == (0, 0)\n\ndef parabola_directrix_derivative(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    pass\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     parabola_directrix(a=1, b=2, c=3) == [-2.3]\nassert     parabola_directrix(a=1, b=0, c=0) == [0]\nassert     parabola_directrix(a=1, b=0, c=-1) == [2]\nassert     parabola_directrix(a=1, b=-1, c=1) == [-2]\nassert     parabola_directrix(a=1, b=-1, c=0) == [-2.3]\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     common_element([1,2,3,4], [2,3,4,5])\nassert not common_element([1,2,3,4], [5,6,7,8])\nassert common_element([1,2,3,4], [1,2,3])\nassert common_element([1,2,3,4,5], [1,2,3,4,5])\nassert not common_element([1,2,3,4,5], [1,2,3])\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     common_element([1,2,3,4], [4,3,2,1]) == True\nassert     common_element([1,2,3,4,5], [4,3,2,1]) == False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nlist1 = [1, 2, 3, 4]\nlist2 = [1, 2, 3, 5]\nassert common_element(list1, list2) == True\n\n\n\ndef common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return len(set(list1).intersection(set(list2))) > 0\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ncommon_element([1, 2, 3, 4], [2, 3, 4, 5]) == True\ncommon_element([1, 2, 3, 4], [2, 3, 4]) == False\ncommon_element([1, 2, 3, 4], []) == False\ncommon_element([], []) == Fals"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     common_element([1,2,3,4], [2,3,4,5]) == True\nassert     common_element([1,2,3,4], [2,5,6,7]) == False\nassert     common_element([], [2,5,6,7]) == False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     common_element([1, 2, 3], [2, 3, 4]) == True, 'False'\nassert     common_element([], []) == False, 'False'\nassert     common_element([1, 2], []) == False, 'False'\nassert     common_element([1, 2, 3], []) == False, 'False'\nassert     common_element([], [2, 3, 4]) == False, 'False'\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     common_element([1,2,3,4],[3,4,5,6])     == True\nassert     common_element([1,2,3,4],[3,4,5,7])     == False\nassert     common_element([1,2,3,4],[3,4,5,6,7])     == True\nassert     common_element([1,2,3,4],[3,4,5,6,7,8])     == False\n\n'''\n------------------------------------------------------------------------\n'''\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nmedian_trapezium(1,2,3) == 5\nmedian_trapezium(2,3,4) == 5\nmedian_trapezium(3,4,5) == 5\nmedian_trapezium(4,5,6) == 5\nmedian_trapezium(5,6,7) == 5\nmedian_trapezium(6,7,8) == 5\nmedian_trapezium(7,8,9) == 5\nmedian_trapezium(8,9,10) == 5\nmedian_trapezium(9,10,11) == 5\nmedian_trapezium(10,11,12) == 5\nmedian_trapezium(11,12,13) == 5\nmedian_trapezium(12,13,14) == 5\nmedian_trapezium(13,14,15) == 5\nmedian_trapezium(14,15,16) == 5\nmedian_trapezium(15,16,17) == 5\nmedian_trapezium(16,17,18) == 5\nmedian_trapezium(17,18,19) == 5\nmedian_trapezium(18,19,20) == 5\nmedian_trapezium(19,20,21) == 5\nmedian_trapezium(20,21,22) == 5\nmedian_trapezium(21,22,23) == 5\nmedian_trapezium(22,23,24) == 5\nmedian_trapezium(23,24,25) == 5\nmedian_trapezium(24,25,26) == 5\nmedian_trapezium(25,26,27) == 5\nmedian_trapezium(26,27,28) == 5\nmedian_trapezium(27,28,29) == 5\nmedian_trapezium(28,29,30) == 5\nmedian_trapezium(29,30,31) == 5\nmedian_trapezium(30,31,32) == 5\nmedian_trapezium(31,32,33) == 5\nmedian_trapezium(32,33,34) == 5\nmedian_trapezium(33,34,35) == 5\nmedian_trapezium(34,35,36) == 5\nmedian_trapezium(35,36,37) == 5\nmedian_trapezium(36,37,38) == 5\nmedian_trapezium(37,38,39) == 5\nmedian_trapezium(38,39,40) == 5\nmedian_trapezium(39,40,41) == 5\nmedian_trapezium(40,41,42) == 5\nmedian_trapezium(41,42,43) == 5\nmedian_trapezium(42,43,44) == 5\nmedian_trapezium(43,44,45) == 5\nmedian_trapezium(44,45,46) == 5\nmedian_trapezium(45,46,47) == 5\nmedian_trapezium(46,47,48) == 5\nmedian_trapezium(47,48,49) == 5\nmedian_trapezium(48,49,50) == 5\nmedian_trapezium(49,50,51) == 5\nmedian_trapezium(50,51,52) == 5\nmedian_trapezium(51,52,53) == 5\nmedian_trapezium(52,53,54) == 5\nmedian_trapezium(53,54,55) == 5\nmedian_trapezium(54,55,56) == 5\nmedian_trapezium(55,56,57) == 5\nmedian_trapezium(56,57,58) == 5\nmedian_trapezium(57,58,59) == 5\nmedian_trapezium(58,59,60) == 5\nmedian_trapezium(59,60,61) == 5\nmedian_trapezium(60,61,62) == 5\nmedian_trapezium(61,62,63) == 5\nmedian_trapezium(62,63,64) == 5\nmedian_trapezium(63,64,65) == 5\nmedian_trapezium(64,65,66) == 5\nmedian_trapezium(65,66,67) == 5\nmedian_trapezium(66,67,68) == 5\nmedian_trapezium(67,68,69) == 5\nmedian_trapezium(68,69,70) == 5\nmedian_trapezium(69,70,71) == 5\nmedian_trapezium(70,71,72) == 5\nmedian_trapezium(71,72,73) == 5\nmedian_trapezium(72,73,74) == 5\nmedian_trapezium(73,74,75) == 5\nmedian_trapezium(74,75,76) == 5\nmedian_trapezium(75,76,77) == 5\nmedian_trapezium(76,77,78) == 5\nmedian_trapezium(77,78,79) == 5\nmedian_trapezium(78,79,80) == 5\nmedian_trapezium(79,80,81) == 5\nmedian_trapezium(80,81,82) == 5\nmedian_trapezium(81,82,83) == 5\nmedian_trapezium(82,83,84) == 5\nmedian_trapezium(83,84,85) == 5\nmedian_trapezium(84,85,86) == 5\nmedian_trapezium(85,86,87) == 5\nmedian_trapezium(86,87,88) == 5\nmedian_trapezium(87,88,89) == 5\nmedian_trapezium(88,89,90) == 5\nmedian_trapezium(89,90,91) == 5\nmedian_trapezium(90,91,92) == 5\nmedian_trapezium(91,92,93) == 5\nmedian_trapezium(92,93,94) == 5\nmedian_trapezium(93,94,95) == 5\nmedian_trapezium(94,95,96) == 5\nmedian_trapezium(95,96,97) == 5\nmedian_trapezium(96,97,98) == 5\nmedian_trapezium(97,98,99) == 5\nmedian_trapezium(98,99,100) == 5\nmedian_trapezium(99,100,101) == 5\nmedian_trapezium(100,101,102) == 5\nmedian_trapezium(101,102,103) == 5\nmedian_trapezium(102,103,104) == 5\nmedian_trapezium(103,104,105) == 5\nmedian_trapezium(104,105,106) == 5\nmedian_trapezium(105,106,107) == 5\nmedian_trapezium(106,107,108) == 5\nmedian_trapezium(107,108,109) == 5\nmedian_trapezium(108,109,110) == 5\nmedian_trapezium(109,110,111) == 5\nmedian_trapezium(110,111,112) == 5\nmedian_trapezium(111,112,113) == 5\nmedian_trapezium(112,113,114) == 5\nmedian_trapezium(113,114,115) == 5\nmedian_trapezium(114,115,116) == 5\nmedian_trapezium(115,116,117) == 5\nmedian_trapezium(116,117,118) == 5\nmedian_trapezium(117,118,119) == 5\nmedian_trapezium(118,119,120) == 5\nmedian_trapezium(119,120,121) == 5\nmedian_trapezium(120,121,122) == 5\nmedian_trapezium(121,122,123) == 5\nmedian_trapezium(122,123,124) == 5\nmedian_trapezium(123,124,125) == 5\nmedian_trapezium(124,125,126) == 5\nmedian_trape"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     median_trapezium(4,6,8)==5\nassert     median_trapezium(6,8,2)==6\nassert     median_trapezium(6,8,9)==5\nassert     median_trapezium(3,2,5)==4\nassert     median_trapezium(6,6,6)==5\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    \nprint('\\n\\n\\n\\n')\n\nprint('----------------------------------------------------')\nprint('|         median_trapezium(base1,base2,height)        |')\nprint('----------------------------------------------------')\n\nprint('\\n\\n\\n\\n')\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef median_polygon(a,b,c,d):\n    '''\n    Write a function to find the median length of a polygon.\n    '''\n    pass\n\n\nif __name__ == '__main__':\n    median_trapezium(4,2,3)\n    median_trapezium(6,4,5)\n    median_trapezium(9,5,8)\n    median_trapezium(2,8,4,6)\n    median_trapezium(4,2,9,6)\n    median_trapezium(8,9,5,4)\n\n    median_polygon(4,2,3,6)\n    median_polygon(6,4,5,8)\n    median_polygon(9,5,8,4)\n    median_polygon(2,8,4,6)\n    median_polygon(4,2,9,6)\n    median_polygon(8,9,5,4)"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     median_trapezium(1,3,5) == 2.0\nassert     median_trapezium(10,9,9) == 9.0\nassert     median_trapezium(10,1,1) == 1.0\nassert median_trapezium(1,5,10) == 5.0\nassert median_trapezium(10,1,4) == 1.5\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     median_trapezium(10,20,30) == 10, \"The length of trapezium is wrong\"\nassert     median_trapezium(10,10,20) == 10, \"The length of trapezium is wrong\"\nassert     median_trapezium(20,40,30) == 10, \"The length of trapezium is wrong\"\nassert     median_trapezium(30,20,40) == 10, \"The length of trapezium is wrong\"\nassert     median_trapezium(40,20,30) == 10, \"The length of trapezium is wrong\"\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(\"Pass\" if median_trapezium(10,20,30)==25 else \"Fail\")\nprint(\"Pass\" if median_trapezium(10,20,30)==25 else \"Fail\")\nprint(\"Pass\" if median_trapezium(10,20,30)==25 else \"Fail\")\n\nprint(\"Pass\" if median_trapezium(10,20,30)==25 else \"Fail\")\nprint(\"Pass\" if median_trapezium(10,20,30)==25 else \"Fail\")\nprint(\"Pass\" if median_trapezium(10,20,30)==25 else \"Fail\")\n\nprint(\"Pass\" if median_trapezium(10,20,30)==25 else \"Fail\")\nprint(\"Pass\" if median_trapezium(10,20,30)==25 else \"Fail\")\nprint(\"Pass\" if median_trapezium(10,20,30)==25 else \"Fail\")\n\nprint(\"Pass\" if median_trapezium(10,20,30)==25 else \"Fail\")\nprint(\"Pass\" if median_trapezium(10,20,30)==25 else \"Fail\")\nprint(\"Pass\" if median_trapezium(10,20,30)==25 else \"Fail\")\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     median_trapezium(1,2,3) == 2.5\nassert median_trapezium(1,2,3) == 2.5\nassert median_trapezium(1,2,3) == 2.5\nassert median_trapezium(1,2,3) == 2.5\nassert median_trapezium(1,2,3) == 2.5\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     median_trapezium(base1=1,base2=2,height=3)==2\nassert     median_trapezium(base1=2,base2=3,height=4)==2.5\nassert     median_trapezium(base1=3,base2=4,height=5)==3.5\nassert     median_trapezium(base1=4,base2=5,height=6)==4\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert check_greater([1, 2, 3], 5) == False\nassert check_greater([], 0) == True\nassert check_greater([1, 2, 3], 3) == True\nassert check_greater([1, 2, 3], 3) == True\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_greater([1,2,3,4,5], 1) == True, \"error message\"\nassert check_greater([1,2,3,4,5], 2) == False, \"error message\"\nassert check_greater([1,2,3,4,5], -1) == False, \"error message\"\n\n\ndef check_greater_zero(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    pass\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_greater([4, 6, 8], 7) == True, \"Wrong output\"\nassert     check_greater([1, 2, 3], 4) == False, \"Wrong output\"\nassert     check_greater([], 5) == False, \"Wrong output\"\n\n'''\nChallenge 1.3:\nWrite a function that returns all the powers of 2, in the range 2^n to 2^(n+1) (i.e. n inclusive).\n'''\n\ndef powers_of_two(n):\n    '''\n    Write a function that returns all the powers of 2, in the range 2^n to 2^(n+1) (i.e. n inclusive).\n    '''\n    pass\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_greater([2, 1, 4, 3, 5], 2) == True, 'error in check_greater'\nassert     check_greater([2, 1, 4, 3, 5], 4) == True, 'error in check_greater'\nassert     check_greater([2, 1, 4, 3, 5], 5) == True, 'error in check_greater'\nassert     check_greater([2, 1, 4, 3, 5], 1) == False, 'error in check_greater'\nassert     check_greater([2, 1, 4, 3, 5], 0) == False, 'error in check_greater'\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_greater([2, 3, 4, 10, 12], 8) == True\nassert     check_greater([2, 3, 4, 10, 12], 7) == False\nassert     check_greater([2, 3, 4, 10, 12], 12) == True\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_greater([1,2,3], 1) == True, \"Failed\"\nassert     check_greater([1,2,3], 10) == False, \"Failed\"\nassert     check_greater([1,2,3], 3) == True, \"Failed\"\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_match_one(\"abc\") == False\nassert     text_match_one(\"aab\") == True\nassert     text_match_one(\"abcaaab\") == True\nassert     text_match_one(\"abab\") == False\nassert     text_match_one(\"abcc\") == False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_match_one(\"ab\") == True, \"incorrect string\"\nassert     text_match_one(\"bb\") == False, \"incorrect string\"\nassert     text_match_one(\"abbb\") == True, \"incorrect string\"\nassert     text_match_one(\"abbbb\") == True, \"incorrect string\"\nassert     text_match_one(\"abccb\") == False, \"incorrect string\"\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_one(\"ab\") == True\nassert     text_match_one(\"aa\") == False\nassert     text_match_one(\"abc\") == False\nassert     text_match_one(\"ababababababababababab\") == True\nassert     text_match_one(\"abcab\") == False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_match_one('') == False\nassert     text_match_one('ab') == True\nassert     text_match_one('abbab') == True\nassert     text_match_one('a') == False\nassert     text_match_one('bb') == True\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_match_one(\"a\") == \"a\"\nassert     text_match_one(\"a\") == \"a\"\nassert     text_match_one(\"abb\") == \"b\"\nassert     text_match_one(\"abb\") == \"b\"\nassert     text_match_one(\"bb\") == \"b\"\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_one(\"cabaaabb\") == True, \"Wrong output\"\nassert text_match_one(\"aaabaaab\") == False, \"Wrong output\"\nassert text_match_one(\"a\") == False, \"Wrong output\"\nassert text_match_one(\"a\") == True, \"Wrong output\"\nassert text_match_one(\"\") == True, \"Wrong output\"\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_one(\"ab\") == True, \"Example\"\nassert     text_match_one(\"bab\") == True, \"Example\"\nassert     text_match_one(\"abbab\") == True, \"Example\"\nassert     text_match_one(\"aba\") == False, \"Example\"\nassert     text_match_one(\"bba\") == False, \"Example\"\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_match_one(\"aab\") == False\nassert     text_match_one(\"abab\") == True\nassert     text_match_one(\"abaabababab\") == True\nassert     text_match_one(\"aabababab\") == False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_match_one('ab') == False\nassert     text_match_one('abbab') == True\nassert     text_match_one('abbabba') == True\nassert     text_match_one('abababa') == True\nassert     text_match_one('abababab') == True\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_one('') == False\nassert     text_match_one('aba') == True\nassert     text_match_one('abababab') == True\nassert     text_match_one('ababa') == False\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(\"You have passed all the test cases for question 1.\")"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     last_Digit(2367) == 7\nassert     last_Digit(45) == 5\nassert     last_Digit(1234567) == 1\nassert     last_Digit(1) == 1\nassert     last_Digit(45678) == 8\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     last_Digit(5) == 5\nassert     last_Digit(52) == 2\nassert     last_Digit(52.51) == 1\nassert     last_Digit(2.5) == 2\nassert     last_Digit(1000) == 1\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     last_Digit(123) == 2\nassert     last_Digit(12345678) == 6\nassert     last_Digit(99999) == 9\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     last_Digit(10) == 1\nassert     last_Digit(20) == 1\nassert     last_Digit(1000) == 0\nassert     last_Digit(0) == 0"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     last_Digit(7) ==     1\nassert     last_Digit(28) ==     1\nassert     last_Digit(38) ==     3\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nif __name__ == '__main__':\n    # the first line should be `assert`\n    assert last_Digit(0) == 0\n    assert last_Digit(101) == 1\n    assert last_Digit(1000000) == 1\n    "
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(last_Digit(1453))\nprint(last_Digit(214))\n\ndef length_of_Longest_word(sen) :\n    '''\n    Write a python function to find the length of longest word in a string\n    '''\n    pass\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     last_Digit(1) == 0\nassert     last_Digit(13) == 1\nassert     last_Digit(123) == 3\nassert     last_Digit(1234) == 4\nassert     last_Digit(12345) == 5\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     last_Digit(25) == 5\nassert     last_Digit(2000) == 2\nassert     last_Digit(1234) == 3\nassert     last_Digit(5342) == 4\nassert     last_Digit(2541) == 5\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     neg_nos([5, -1, 5, -5]) == [-5, -5], 'Should return [5, -1, 5, -5]'\nassert neg_nos([]) == [], 'Should return []'\nassert neg_nos([5, -1, 5, -5, -10]) == [-5, -10], 'Should return [-5, -10]'\n\n'''"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nneg_nos([1, -2, 3, -4])\n\ndef max_min(list1):\n    '''\n    Write a python function to return the maximum and minimum values in a list.\n    '''\n    pass\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert neg_nos(['a', -2, 'b', 'c', -1, 'd', 'e', 'f', -10, 'g', 'h', -9, 'i', -8, 'j', -7, 'k', -6, 'l', -5,'m', -4, 'n', -3, 'o', -2, 'p', -1, 'q', -0, 'r', -0,'s', -1, 't', -2, 'u', -3, 'v', -4, 'w', -5, 'x', -6, 'y', -7, 'z']) == [-2,-1,-10,-7,-6,-5,-4,-3,-2,-1,-0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef pos_nos(list1):\n    '''\n    Write a python function to return the positive numbers in a list.\n    '''\n    pass\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     neg_nos([-2,-3,-4,-5]) == [-5,-4,-3,-2], neg_nos([-2,-3,-4,-5])\nassert     neg_nos([1,2,3,4,5]) == [-1,-2,-3,-4,-5], neg_nos([1,2,3,4,5])\nassert     neg_nos([1,-2,3,4,-5]) == [-1,2,3,4,5], neg_nos([1,-2,3,4,5])\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     neg_nos([-2,-3,-4]) == [-4,-3,-2]\nassert neg_nos([-2,-3,-4]) == [-4,-3,-2]\nassert neg_nos([-2,3,-4]) == [-4,-3,-2]\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     neg_nos([]) == []\nassert     neg_nos([1]) == [-1]\nassert     neg_nos([-1]) == [-1]\nassert     neg_nos([-1, -1]) == [-2]\nassert     neg_nos([-1, 1]) == [-1]\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_odd(\"abcb\") == \"bcb\"\nassert     remove_odd(\"acb\") == \"bc\"\nassert     remove_odd(\"abcb\") == \"bcb\"\nassert     remove_odd(\"abcb\") == \"bcb\"\nassert     remove_odd(\"abcbc\") == \"bc\"\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_odd(\"cba\") == \"cb\", \"failed\"\nassert     remove_odd(\"cba\") == \"bc\", \"failed\"\nassert     remove_odd(\"bbbbb\") == \"bbbb\", \"failed\"\nassert     remove_odd(\"bba\") == \"ba\", \"failed\"\nassert     remove_odd(\"a\") == \"a\", \"failed\"\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_odd('a') == 'a'\nassert     remove_odd('ax') == 'x'\nassert     remove_odd('x') == 'x'\nassert     remove_odd('z') == 'z'\nassert     remove_odd('aab') == 'aba'\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_odd(\"\") == \"\"\nassert     remove_odd(\"a\") == \"\"\nassert     remove_odd(\"aab\") == \"aab\"\nassert     remove_odd(\"aaab\") == \"aab\"\nassert     remove_odd(\"aaabcd\") == \"aabcd\"\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nremove_odd('Hell') == 'ell'\n\nassert remove_odd('Hello') == 'ell'\n\nassert remove_odd('Hello World!') == 'ell'\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_odd(\"abcd\") == \"abcd\", \"Fail\"\nassert     remove_odd(\"aabccdd\") == \"abcd\", \"Fail\"\nassert     remove_odd(\"aabcdee\") == \"abcde\", \"Fail\"\nassert     remove_odd(\"\") == \"\", \"Fail\"\nassert     remove_odd(\"c\") == \"c\", \"Fail\"\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n'''\nWrite a function to convert a string into all lowercase\n'''\ndef to_lower(str1):\n    '''\n    Write a function to convert a string into all lowercase\n    '''\n    pass\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_odd(\"abba\") == \"a\"\nassert     remove_odd(\"aa\") == \"\"\nassert     remove_odd(\"\") == \"\"\nassert     remove_odd(\"b\") == \"b\"\nassert     remove_odd(\"ab\") == \"\"\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_odd(\"abcdefg\") == \"bcdfeg\", \"Wrong\"\nassert     remove_odd(\"abcefg\") == \"bcdfg\", \"Wrong\"\nassert     remove_odd(\"abc\") == \"bc\", \"Wrong\"\nassert     remove_odd(\"bcd\") == \"c\", \"Wrong\"\nassert     remove_odd(\"1234567890\") == \"\", \"Wrong\"\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ncount_bidirectional([(2, 3), (3, 2), (4, 5), (5, 4), (2, 1), (1, 2)]) == 2\nprint('count_bidirectional test passed')\n\ndef count_bidirectional_counter(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs using counter.\n    '''\n    pass\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_bidirectional([(1,2), (2,1), (3,4), (4,3), (5,6), (6,5)]) == 3\nassert     count_bidirectional([(1,2), (2,1)]) == 0\nassert     count_bidirectional([]) == 0\n\n\ndef count_bidirectional_tuple_pairs(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    pass\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_bidirectional([(1,2),(2,1),(1,3)]) == 3, \"Your function is wrong\"\nassert     count_bidirectional([(1,2),(2,1),(1,3),(3,4),(3,5),(5,6),(4,1),(2,6),(6,3),(5,2),(4,6),(6,5),(5,4),(4,5),(4,2),(2,3),(3,4),(2,6),(3,1),(1,2),(6,4),(5,3),(5,1),(6,3),(6,5),(5,2),(4,3),(3,2),(2,4),(3,6),(1,5),(5,3),(6,2),(1,3),(1,4)]) == 10, \"Your function is wrong\""
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    count_bidirectional([]) == 0\n    count_bidirectional([(1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,), (10,), (11,), (12,), (13,), (14,), (15,), (16,), (17,), (18,), (19,), (20,), (21,), (22,), (23,), (24,), (25,), (26,), (27,), (28,), (29,), (30,), (31,), (32,), (33,), (34,), (35,), (36,), (37,), (38,), (39,), (40,), (41,), (42,), (43,), (44,), (45,), (46,), (47,), (48,), (49,), (50,), (51,), (52,), (53,), (54,), (55,), (56,), (57,), (58,), (59,), (60,), (61,), (62,), (63,), (64,), (65,), (66,), (67,), (68,), (69,), (70,), (71,), (72,), (73,), (74,), (75,), (76,), (77,), (78,), (79,), (80,), (81,), (82,), (83,), (84,), (85,), (86,), (87,), (88,), (89,), (90,), (91,), (92,), (93,), (94,), (95,), (96,), (97,), (98,), (99,), (100,), (101,), (102,), (103,), (104,), (105,), (106,), (107,), (108,), (109,), (110,), (111,), (112,), (113,), (114,), (115,), (116,), (117,), (118,), (119,), (120,), (121,), (122,), (123,), (124,), (125,), (126,), (127,), (128,), (129,), (130,), (131,), (132,), (133,), (134,), (135,), (136,), (137,), (138,), (139,), (140,), (141,), (142,), (143,), (144,), (145,), (146,), (147,), (148,), (149,), (150,), (151,), (152,), (153,), (154,), (155,), (156,), (157,), (158,), (159,), (160,), (161,), (162,), (163,), (164,), (165,), (166,), (167,), (168,), (169,), (170,), (171,), (172,), (173,), (174,), (175,), (176,), (177,), (178,), (179,), (180,), (181,), (182,), (183,), (184,), (185,), (186,), (187,), (188,), (189,), (190,), (191,), (192,), (193,), (194,), (195,), (196,), (197,), (198,), (199,), (200,), (201,), (202,), (203,), (204,), (205,), (206,), (207,), (208,), (209,), (210,), (211,), (212,), (213,), (214,), (215,), (216,), (217,), (218,), (219,), (220,), (221,), (222,), (223,), (224,), (225,), (226,), (227,), (228,), (229,), (230,), (231,), (232,), (233,), (234,), (235,), (236,), (237,), (238,), (239,), (240,), (241,), (242,), (243,), (244,), (245,), (246,), (247,), (248,), (249,), (250,), (251,), (252,), (253,), (254,), (255,), (256,), (257,), (258,), (259,), (260,), (261,), (262,), (263,), (264,), (265,), (266,), (267,), (268,), (269,), (270,), (271,), (272,), (273,), (274,), (275,), (276,), (277,), (278,), (279,), (280,), (281,), (282,), (283,), (284,), (285,), (286,), (287,), (288,), (289,), (290,), (291,), (292,), (293,), (294,), (295,), (296,), (297,), (298,), (299,), (300,), (301,), (302,), (303,), (304,), (305,), (306,), (307,), (308,), (309,), (310,), (311,), (312,), (313,), (314,), (315,), (316,), (317,), (318,), (319,), (320,), (321,), (322,), (323,), (324,), (325,), (326,), (327,), (328,), (329,), (330,), (331,), (332,), (333,), (334,), (335,), (336,), (337,), (338,), (339,), (340,), (341,), (342,), (343,), (344,), (345,), (346,), (347,), (348,), (349,), (350,), (351,), (352,), (353,), (354,), (355,), (356,), (357,), (358,), (359,), (360,), (361,), (362,), (363,), (364,), (365,), (366,), (367,), (368,), (369,), (370,), (371,), (372,), (373,), (374,), (375,), (376,), (377,), (378,), (379,), (380,), (381,), (382,), (383,), (384,), (385,), (386,), (387,), (388,), (389,), (390,), (391,), (392,), (393,), (394,), (395,), (396,), (397,), (398,), (399,), (400,), (401,), (402,), (403,), (404,), (405,), (406,), (407,), (408,), (409,), (410,), (411,), (412,), (413,), (414,), (415,), (416,), (417,), (418,), (419,), (420,), (421,), (422,), (423,), (424,), (425,), (426,), (427,), (428,), (429,), (430,), (431,), (432,), (433,), (434,), (435,), (436,), (437,), (438,), (439,), (440,), (441,), (442,), (443,), (444,), (445,), (446,), (447,), (448,), (449,), (450,), (451,), (452,), (453,), (454,), (455,), (456,), (457,), (458,), (459,), (460,), (461,), (462,), (463,), (464,), (465,), (466,), (467,), (468,), (469,), (470,), (471,), (472,), (473,), (474,), (475,), (476,), (477,), (478,), (479,), (480,), (481,), (482,), (483,), (484,), (485,), (486,), (487,), (488,), (489,), (490,), (491,), (492,), (493,), (494,), (495"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_bidirectional([]) == 0, \\\n            \"count_bidirectional(()) == 0\"\nassert     count_bidirectional([('a', 'b', 1), ('b', 'a', 1)]) == 2, \\\n            \"count_bidirectional(('a', 'b', 1), ('b', 'a', 1)) == 2\"\nassert     count_bidirectional([('a', 'b', 1), ('b', 'c', 1), ('a', 'b', 2)]) == 2, \\\n            \"count_bidirectional(('a', 'b', 1), ('b', 'c', 1), ('a', 'b', 2)) == 2\"\nassert     count_bidirectional([('a', 'b', 1), ('b', 'c', 1), ('a', 'b', 2), ('b', 'a', 2)]) == 4, \\\n            \"count_bidirectional(('a', 'b', 1), ('b', 'c', 1), ('a', 'b', 2), ('b', 'a', 2)) == 4\"\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_bidirectional([(1,2), (3,4), (1,3), (4,1), (5,6)]) == 5\nassert     count_bidirectional([(1,2), (3,4), (1,3), (4,1), (5,6)]) == 3\nassert     count_bidirectional([(1,2), (3,4), (1,3), (4,1), (5,6)]) == 0\nassert count_bidirectional([]) == 0\nassert count_bidirectional([(1,2), (3,4), (1,3), (4,1), (5,6), (2,4), (6,2)]) == 5\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_bidirectional([(10, 1), (10, 5), (10, 3), (10, 5), (1, 5), (5, 10), (3, 10), (3, 10), (1, 10)]) == 1\nassert     count_bidirectional([(10, 1), (10, 5), (1, 5), (5, 10), (3, 10), (3, 10), (1, 10)]) == 0\nassert     count_bidirectional([(10, 1), (10, 5), (10, 3), (1, 5), (5, 10), (3, 10), (3, 10), (1, 10)]) == 2\nassert     count_bidirectional([(10, 1), (10, 5), (10, 3), (10, 5), (1, 5), (5, 10), (3, 10), (3, 10), (1, 10)]) == 3\nassert     count_bidirectional([(10, 1), (10, 5), (10, 3), (10, 5), (1, 5), (5, 10), (3, 10), (3, 10), (1, 10)]) == 3\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_bidirectional([(1,2),(2,3),(3,4)]) == 2\nassert     count_bidirectional([(1,2),(2,3),(3,4),(4,5)]) == 3\nassert     count_bidirectional([(1,2),(2,3),(3,4)]) == 1\nassert     count_bidirectional([(1,2),(2,3),(3,4),(4,5),(5,1)]) == 3\nassert     count_bidirectional([(1,2),(2,3),(3,4),(4,5),(5,6)]) == 4\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     multiple_to_single([1,3,5]) == 15\nassert multiple_to_single([-1,4,-2,-3,5]) == -15\n\n\ndef sort_with_bubble_sort(L):\n    '''\n    Write a function to sort a list using Bubble Sort.\n    '''\n    pass"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     multiple_to_single([1,3,5])    ==    123\nassert     multiple_to_single([1,3])    ==    123\nassert     multiple_to_single([1])    ==    123\nassert     multiple_to_single([1,2,3])    ==    123\nassert     multiple_to_single([])    ==    0\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(\"Checking multiple_to_single...\")\ndef multiple_to_single(L):\n    return sum(L)\n\nassert multiple_to_single([1,2,3]) == 6, \"Wrong value\"\nprint(\"Test passed\")\n\nprint(\"\")\nprint(\"\")\nprint(\"Section: 3.11.2 - map/reduce\")\nprint(\"\")\nprint(\"\")\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     multiple_to_single([1,2,3]) == 6\nassert multiple_to_single([1,2,3,4]) == 10\nassert multiple_to_single([1,2,3,4,5]) == 15\nassert multiple_to_single([1,2,3,4,5,6]) == 18\nassert multiple_to_single([1,2,3,4,5,6,7]) == 21\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     multiple_to_single([1, 2, 3, 4]) == 15\nassert     multiple_to_single([]) == 0\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     multiple_to_single([1,2,3]) == 6\nassert     multiple_to_single([6,3,5]) == 15\nassert     multiple_to_single([3,2,3]) == 6\nassert     multiple_to_single([1,2,3,4,5,6]) == 15\nassert     multiple_to_single([]) == 0\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     multiple_to_single([[1, 2, 3]]) == 123\nassert     multiple_to_single([[1, 2, 3], [4, 5, 6]]) == 123\nassert     multiple_to_single([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 123\nassert     multiple_to_single([[1, 2, 3], [4, 5, 6, 7]]) == 123\nassert     multiple_to_single([[1, 2, 3], [4, 5, 6, 7, 8]]) == 123\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     multiple_to_single([1, 2, 3, 4]) == 10\nassert     multiple_to_single([]) == 0\nassert     multiple_to_single([1, 2]) == 2\nassert     multiple_to_single([1, 2, 3]) == 6\nassert     multiple_to_single([-10]) == -10\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     multiple_to_single([1, 2, 3]) == 6,'should be 6'\nassert     multiple_to_single([]) == 0,'should be 0'\nassert     multiple_to_single([1, 1]) == 2,'should be 2'\n\ndef inverse_modulo(a, m):\n    '''\n    Write a function to return the inverse of a modulo m.\n    '''\n    pass\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     multiple_to_single([[1,2],[1,3]]) ==    [1,1,2,3]\nassert     multiple_to_single([[1],[1],[1],[1]]) ==    [1] * 4\nassert     multiple_to_single([[1],[1,2],[1,3]]) ==    [1,1,1,1,2,3]\nassert     multiple_to_single([[]]) ==    []\nassert multiple_to_single([[]]) ==    []\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_adverb_position('') == False\nassert     find_adverb_position('Gale is a good girl.') == False\nassert     find_adverb_position('I was born in Seattle.') == True\nassert     find_adverb_position('The nurse in yellow is a great doctor.') == True\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    find_adverb_position('I am going to hit him, but I will have to avoid him when I get to him.') == [4, 6]\n    find_adverb_position('It is a time of darkness, but I am ready to see the light of day.') == [3, 4]\n    find_adverb_position('This is the time for great victory.') == []\n    find_adverb_position('I know what I am doing. I am getting very tired of this.') == []\n    find_adverb_position('I was worried about the situation, but then it came to my mind, \"Do you want to go?\"') == [1, 3]\n    find_adverb_position('What is the meaning of life, the universe and everything?') == []\n    find_adverb_position('It was the ending of the film, \"Great!\"') == []\n    find_adverb_position('Can a flying kite fly past a black fence?') == []\n    find_adverb_position('I am a little tea pot, but I am not feeling well.') == []\n    find_adverb_position('The only thing that I am afraid of is going home.') == []\n    find_adverb_position('This is the beginning of the film, \"Great!\"') == []\n    find_adverb_position('The movie was meant to be a fun and enjoyable one.') == []\n    find_adverb_position('The movie was meant to be a little fun and enjoyable.') == []\n    find_adverb_position('I know what I am doing, but I am going to have to go when I get to him.') == []\n    find_adverb_position('I know what I am doing, but I am going to have to go when I get to him.') == []\n    find_adverb_position('I am scared of the ghosts.') == []\n    find_adverb_position('I am going to meet him') == []\n    find_adverb_position('I am going to see him, but I will have to avoid him.') == []\n    find_adverb_position('I am going to hit him, but I will have to avoid him when I get to him.') == []\n    find_adverb_position('I am going to be invisible, but I am going to have to be visible when I get to him.') == []\n    find_adverb_position('I am going to see him, but I will have to avoid him when I get to him.') == []\n    find_adverb_position('I am going to hit him, but I will have to avoid him when I get to him.') == []\n    find_adverb_position('I am going to hit him, but I will have to avoid him when I get to him.') == []\n    find_adverb_position('I am going to hit him, but I will have to avoid him when I get to him.') == []\n    find_adverb_position('I am going to hit him, but I will have to avoid him when I get to him.') == []\n    find_adverb_position('I am going to hit him, but I will have to avoid him when I get to him.') == []\n    find_adverb_position('I am going to hit him, but I will have to avoid him when I get to him.') == []\n    find_adverb_position('I am going to hit him, but I will have to avoid him when I get to him.') == []\n    find_adverb_position('I am going to hit him, but I will have to avoid him when I get to him.') == []\n    find_adverb_position('I am going to hit him, but I will have to avoid him when I get to him.') == []\n    find_adverb_position('I am going to hit him, but I will have to avoid him when I get to him.') == []\n    find_adverb_position('I am going to hit him, but I will have to avoid him when I get to him.') == []\n    find_adverb_position('I am going to hit him, but I will have to avoid him when I get to him.') == []\n    find_adverb_position('I am going to hit him, but I will have to avoid him when I get to him.') == []\n    find_adverb_position('I am going to hit him, but I will have to avoid him when I get to him.') == []\n    find_adverb_position('I am going to hit him, but I will have to avoid him when I get to him.') == []\n    find_adverb_position('I am going to hit him, but I will have to avoid him when I get to him.') == []\n    find_adverb_position('I am going to hit him, but I will have to avoid him when I get to him.') == []\n    find_adverb_position('I am going to hit him, but I will have to avoid him when I get to him.') == []\n    find_adverb_position('I am going to hit him, but I will have to avoid him when I get to him.') == []\n    find_adverb_position('I am going to hit him, but I will have to avoid him when I get to him.') == []\n    find_adverb_position('I am going to hit him, but I will have to avoid him when I get to him.') == []\n    find_adverb_position('I am going to hit him, but I will have to avoid him when I get to him.') == []\n    find_adverb_position('I am going to hit him, but I will have to avoid him when I get to him.') == []\n    find_adverb_position('I am going to hit him, but I will have to avoid him when I get to him.') == []\n    find_adverb_position('I am going to hit him, but I will have to avoid him when I get to him.') == []\n    find_adverb_position('I am going to hit him, but I will have to avoid him when I get to him.') == []\n    find_adverb_position('I am going to hit him, but I will have to avoid him when I get to him.') == []\n    find_adverb_position('I am going to hit him, but I will have to avoid him when I get to him.') == []\n    find_adverb_position('I am going to hit him, but I will have to avoid him when I get to him.') == []\n    find_adverb_position('I am going to hit him, but I will have to avoid him when I get to him.') == []\n    find_adverb_position('I am going to hit him, but I will have to avoid him when I get to him.') == []\n    find_adverb_position('I am going to hit him, but I will have to avoid him when I get to him.') == []\n    find_adverb_position('I am going to hit him, but I will have to avoid him when I get to him.') == []\n    find_adverb_position('I am going to hit him, but I will have to avoid him when I get to him.') == []\n    find_adverb_position('I am going to hit him, but I will have to avoid him when I get to him.') == []\n    find_adverb_position('I am going to hit him, but I will have to avoid him when I get to him.') == []\n    find_adverb_position('I am going to hit him, but I will have to avoid him when I get to him.') == []\n    find_adverb_position('I am going to hit him, but I will have to avoid him when I get to him.') == []\n    find_adverb_position('I am going to hit him, but I will have to avoid him when I get to him.') == []\n    find_adverb_position('I am going to hit him, but I will have to avoid him when I get to him.') == []\n    find_adverb_position('I am going to hit him, but I will have to avoid him when I get to him.') == []\n    find_adverb_position('I am going to hit him, but I will have to avoid him when I get to him.') == []\n    find_adverb_position('I am going to hit him, but I will have to avoid him when I get to him.') == []\n    find_adverb_position('I am going to hit him, but I will have to avoid him when I get to him.') == []\n    find_adverb"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_adverb_position('I will help you to think of some of your emotions.') == 'I'\nassert     find_adverb_position('I am not sure about that.') == 'I'\nassert     find_adverb_position('I am unsure about this.') == 'I'\nassert     find_adverb_position('I do not want to help you.') == 'I'\nassert     find_adverb_position('I am not sure about this') == 'I'\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_adverb_position('This book is the best book') == (1, 7)\nassert     find_adverb_position('This book is the best book') == (2, 8)\nassert     find_adverb_position('I love this book') == (3, 5)\nassert     find_adverb_position('I liked this book') == (4, 9)\nassert     find_adverb_position('I hated this book') == (5, 10)\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_adverb_position(\"After five years of non-responding leadership, the board of directors, as told by Tom Kennedy, did not follow the lead.\") == [(17, 26)]\nassert     find_adverb_position(\"Tom Kennedy went to Washington to speak and he didn't want to go to Washington anymore.\") == []\nassert     find_adverb_position(\"Tom Kennedy took to Washington to speak and he didn't want to take to Washington anymore.\") == [(12, 18)]\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_adverb_position(text1) == ['a', 'd', 'f', 'j', 'k', 'l','m', 'n', 'p']\n\nassert find_adverb_position(text2) == ['k','m', 'n']\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ntext = \"This is a sentence that contains 2 adverbs: Better and Best.\"\n\nexpected = {'Best': 6, 'Better': 5}\n\nresult = find_adverb_position(text)"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ntext = 'One day, the company we met at our home would go on a vacation to Brazil. We found a place to be in these off-white weeks.'\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_adverb_position('All rights reserved.') == (1, 4), \"First wrong value\"\nassert     find_adverb_position('All rights reserved.') == (None, None), \"Second wrong value\"\nassert     find_adverb_position('All rights reserved.') == (None, None), \"Third wrong value\"\nassert     find_adverb_position('All rights reserved.') == (1, 4), \"Fourth wrong value\""
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     surfacearea_cube(1) == 2\nassert surfacearea_cube(3) == 6\nassert surfacearea_cube(5) == 20\nassert surfacearea_cube(7) == 28\nassert surfacearea_cube(9) == 36"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert surfacearea_cube(1) == 4, \"Wrong\"\nassert surfacearea_cube(2) == 8, \"Wrong\"\nassert surfacearea_cube(3) == 12, \"Wrong\"\nassert surfacearea_cube(4) == 16, \"Wrong\"\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nsurfacearea_cube(3) == 27, \"The surface area of the cube of size 3 should be 27\"\nassert \nsurfacearea_cube(4) == 32, \"The surface area of the cube of size 4 should be 32\"\nassert \nsurfacearea_cube(5) == 35, \"The surface area of the cube of size 5 should be 35\"\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     surfacearea_cube(3) == 24\nassert surfacearea_cube(4) == 32\nassert surfacearea_cube(5) == 48\nassert surfacearea_cube(6) == 64\nassert surfacearea_cube(7) == 72\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     surfacearea_cube(3) == 12\nassert     surfacearea_cube(10) == 3360\nassert     surfacearea_cube(17) == 248480\nassert     surfacearea_cube(2) == 20\n\ndef surfacearea_cylinder(radius, height):\n    '''\n    Write a function to find the surface area of a cylinder of a given radius and height.\n    '''\n    pass\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere of a given radius.\n    '''\n    pass\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     surfacearea_cube(1) == 6\nassert     surfacearea_cube(2) == 18\nassert     surfacearea_cube(3) == 24\nassert     surfacearea_cube(4) == 48\nassert     surfacearea_cube(5) == 60\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     surfacearea_cube(1) == 1\nassert     surfacearea_cube(3) == 27\nassert     surfacearea_cube(5) == 70\nassert     surfacearea_cube(7) == 112\nassert     surfacearea_cube(9) == 162\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef float_div(lst):\n    '''\n    Write a function that returns the quotient and remainder of the following operation.\n    \n    Divide the number stored in the first element of the list by the number stored in the second element of the list.\n    \n    The resulting quotient and remainder should be stored in the first element of the list and the second element of the list.\n    \n    '''\n    \n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     positive_count([]) == 0\nassert     positive_count([1,2,3,4,5]) == 0.25\nassert     positive_count([5,3,5,4,4,5,4]) == 0.16666666666666666\nassert     positive_count([1,2,3,4,5,5,5,5,5,6]) == 0.5\nassert     positive_count([1,1,1,1,1,1]) == 0\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(positive_count([1, 2, 3, 4, 5, 6, 7, 8, 9])) == 3, \"Failed\"\nprint(positive_count([-1, -2, -3, -4, -5, -6, -7, -8, -9])) == 8, \"Failed\"\nprint(positive_count([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1])) == 4, \"Failed\"\nprint(positive_count([1, -1, -1, 1, -1, -1, -1, -1, -1, 1])) == 5, \"Failed\"\nprint(positive_count([-9, 0, -8, -7, -6, -5, -4, -3, -2, -1, 1, 2, 3, 4, 5, 6, 7, 8, 9])) == 11, \"Failed\"\n\n\ndef positive_count2(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef find_max_values(nums):\n    '''\n    Given a list of integers, return a list with the maximum values in the list\n    '''\n    pass\n\ndef find_max_values_optimized(nums):\n    '''\n    Given a list of integers, return a list with the maximum values in the list\n    '''\n    pass\n\ndef sum_of_squares(nums):\n    '''\n    Write a function to find the sum of squares of integers in a list\n    '''\n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef positive_count2(nums):\n    '''\n    Write a function to find the ratio of positive numbers in an array of integers.\n    '''\n    # we can use the built-in functions of the list\n    return sum([num>0 for num in nums])/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert positive_count([-2,1,2,3,4]) == 0.4\nassert positive_count([]) == 0\nassert positive_count([1,2,3,4]) == 0.4\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     positive_count([-1,2,1,-3,4,-5]) == 0.25, \"Wrong\"\nassert positive_count([2,3,4]) == 1.0, \"Wrong\"\nassert positive_count([1,-2,3,-4,5]) == 0.25, \"Wrong\"\nassert positive_count([]) == 0.0, \"Wrong\"\nassert positive_count([-1,2,1,-3,4,-5]) == 0.25, \"Wrong\"\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n\ndef find_largest_left_bracket_idx(nums):\n    '''\n    Write a function to find the index of the leftmost opening bracket (i.e. the last index of a closing bracket) of a string of opening brackets.\n    '''\n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef is_sorted(nums):\n    '''\n    Write a function that checks whether the array is sorted.\n    '''\n    return nums[0] < nums[-1]\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert \nassert \n\nassert \n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     largest_neg([-1,-2,-3,-4,]) == -1\nassert     largest_neg([-5, -2, -3, -1, -4]) == -1\nassert     largest_neg([]) == None\nassert     largest_neg([0]) == 0\nassert     largest_neg([1,2,3,4,5]) == 5\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     largest_neg([-1, -2, -3, -4, -5]) == -5\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     largest_neg([-1,-2,-3,-4,-5]) == 5\nassert     largest_neg([-2,-2,-2,-2]) == -2\nassert     largest_neg([-2,-2,-2,-2,5]) == -2\nassert     largest_neg([-2,-2,-2,-2,5,9]) == 9\n\n'''\n    Write a python function to print the square of the numbers of a given list.\n'''"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     largest_neg([10, -2, -6, -4, -5, -3, -3]) == -5\nassert     largest_neg([-10, -2, -6, -4, -5, -3, -3]) == -5\nassert     largest_neg([10, 2, 6, 4, 5, 3, 3]) == 5\nassert     largest_neg([-10, -2, -6, -4, -5, -3, -3]) == -3\nassert     largest_neg([-10, -2, -6, -4, -5, -3, -3]) == -3\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     largest_neg([-1, -1, -1, -1, -1]) == -1\nassert     largest_neg([-1, -1, -1]) == -1\nassert     largest_neg([-1, -1, -1, -1, -1]) == -1\nassert     largest_neg([-1, -1, -1, 1, 1, -1]) == -1\nassert     largest_neg([-1, -1, 1, -1, -1, 1, -1]) == -1\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef largest_neg_index(list1): \n    '''\n    Write a python function to find the index of the largest negative number from the given list.\n    '''\n    pass\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint (largest_neg([-3, -10, -5, -3, -4])) == -4\nprint (largest_neg([-3, -10, -5, -3, -4, -5, -5, -4, -4, -5])) == -4\nprint (largest_neg([-3, -10, -5, -3, -4, -5, -5, -4, -4, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5, -5])) == -5\nprint (largest_neg([1, 2, 3, -1, -2, 3, -5, 1, -1, -1, -1, -2, 1, -2, -3, 1, -4, -1, -5, -6, -7, -8])) == -8\nprint (largest_neg([0, -5, -3, -2, -1, -4, -5, -5, -4, -3, -2, -1, -4, -5, -5, -4, -3, -2, -1, -4])) == -5\nprint (largest_neg([-1, -2, -3, -1, -2, -3, -5, -1, -1, -1, -2, -3, -2, -1, -4, -5, -6, -7, -8])) == -8\nprint (largest_neg([-1, -2, -3, -1, -2, -3, -5, -1, -1, -1, -2, -3, -2, -1, -4, -5, -6, -7, -8])) == -8\nprint (largest_neg([-1, -2, -3, -1, -2, -3, -5, -1, -1, -1, -2, -3, -2, -1, -4, -5, -6, -7, -8, -9])) == -8\nprint (largest_neg([-1, -2, -3, -1, -2, -3, -5, -1, -1, -1, -2, -3, -2, -1, -4, -5, -6, -7, -8, -9, -10])) == -8\nprint (largest_neg([-1, -2, -3, -1, -2, -3, -5, -1, -1, -1, -2, -3, -2, -1, -4, -5, -6, -7, -8, -9, -10, -11])) == -10\nprint (largest_neg([-1, -2, -3, -1, -2, -3, -5, -1, -1, -1, -2, -3, -2, -1, -4, -5, -6, -7, -8, -9, -10, -11, -12])) == -11\nprint (largest_neg([-1, -2, -3, -1, -2, -3, -5, -1, -1, -1, -2, -3, -2, -1, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13])) == -13\nprint (largest_neg([-1, -2, -3, -1, -2, -3, -5, -1, -1, -1, -2, -3, -2, -1, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14])) == -14\nprint (largest_neg([-1, -2, -3, -1, -2, -3, -5, -1, -1, -1, -2, -3, -2, -1, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15])) == -15\nprint (largest_neg([-1, -2, -3, -1, -2, -3, -5, -1, -1, -1, -2, -3, -2, -1, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16])) == -16\nprint (largest_neg([-1, -2, -3, -1, -2, -3, -5, -1, -1, -1, -2, -3, -2, -1, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17])) == -17\nprint (largest_neg([-1, -2, -3, -1, -2, -3, -5, -1, -1, -1, -2, -3, -2, -1, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18])) == -18\nprint (largest_neg([-1, -2, -3, -1, -2, -3, -5, -1, -1, -1, -2, -3, -2, -1, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19])) == -19\nprint (largest_neg([-1, -2, -3, -1, -2, -3, -5, -1, -1, -1, -2, -3, -2, -1, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20])) == -20\nprint (largest_neg([-1, -2, -3, -1, -2, -3, -5, -1, -1, -1, -2, -3, -2, -1, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21])) == -21\nprint (largest_neg([-1, -2, -3, -1, -2, -3, -5, -1, -1, -1, -2, -3, -2, -1, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22])) == -22\nprint (largest_neg([-1, -2, -3, -1, -2, -3, -5, -1, -1, -1, -2, -3, -2, -1, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23])) == -23\nprint (largest_neg([-1, -2, -3, -1, -2, -3, -5, -1, -1, -1, -2, -3, -2, -1, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24])) == -24\nprint (largest_neg([-1, -2, -3, -1, -2, -3, -5, -1, -1, -1, -2, -3, -2, -1, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nlargest_neg([-1,-3,-2,-3,-4]) == -4, \"Wrong result\"\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     trim_tuple([(1, 2), (3, 4), (5, 6), (7, 8)], 1) == [(2, 3), (4, 5), (6, 7)]\nassert     trim_tuple([(1, 2), (3, 4), (5, 6), (7, 8)], 2) == [(3, 4), (5, 6), (7, 8)]\nassert     trim_tuple([(1, 2), (3, 4), (5, 6), (7, 8)], 3) == [(1, 2), (3, 4), (5, 6)]\nassert     trim_tuple([(1, 2), (3, 4), (5, 6), (7, 8)], 4) == [(1, 2), (3, 4), (5, 6)]\nassert     trim_tuple([(1, 2), (3, 4), (5, 6), (7, 8)], 0) == []\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     trim_tuple([(1,2),(1,2,3),(1,2,3,4)], 0) == [(1,2),(1,2,3),(1,2,3,4)]\nassert     trim_tuple([(1,2,3),(1,2,3,4)], 0) == [(1,2,3),(1,2,3,4)]\nassert     trim_tuple([(1,2),(1,2,3),(1,2,3,4)], 1) == [(1,2),(1,2,3),(1,2,3,4)]\nassert     trim_tuple([(1,2),(1,2,3),(1,2,3,4)], 2) == [(1,2,3),(1,2,3,4)]\nassert     trim_tuple([(1,2),(1,2,3),(1,2,3,4)], 3) == [(1,2,3,4)]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     trim_tuple([(1, 2, 3), (1, 2, 3, 4), (1, 2, 3, 4, 5)], 2) ==     [(1, 2, 3), (1, 2, 3, 4), (1, 2, 3, 4, 5)]\nassert     trim_tuple([(1, 2, 3), (1, 2, 3, 4), (1, 2, 3, 4, 5)], 3) ==     [(1, 2, 3), (1, 2, 3, 4), (1, 2, 3, 4, 5)]\nassert     trim_tuple([(1, 2, 3), (1, 2, 3, 4), (1, 2, 3, 4, 5)], 0) ==     [(1, 2, 3), (1, 2, 3, 4), (1, 2, 3, 4, 5)]\nassert     trim_tuple([(1, 2, 3), (1, 2, 3, 4), (1, 2, 3, 4, 5)], 1) ==     [(1, 2, 3), (1, 2, 3, 4), (1, 2, 3, 4, 5)]\nassert     trim_tuple([(1, 2, 3), (1, 2, 3, 4), (1, 2, 3, 4, 5)], 2) ==     [(1, 2, 3, 4), (1, 2, 3, 4, 5)]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     trim_tuple([(1,2,3),(4,5),(6),(7,8,9)], 3) == \\\n        [(1,2,3),(4,5),(6),(7,8,9)]\nassert     trim_tuple([(1,2,3),(4,5),(6),(7,8,9)], 2) == \\\n        [(1,2,3),(4,5),(6),(7,8,9)]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     trim_tuple(test_list, K) ==     [[1,2,3,4],[3,4,5,6],[4,5,6,7]]\n\ndef list_diff(list_1, list_2):\n    '''\n    Write a function to return the difference of list_1 and list_2, i.e., the first list_1 - list_2.\n    '''\n    pass\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     trim_tuple(\n                [[1,2],    \n                [1,2,3],    \n                [1,2,3,4],    \n                [1,2,3,4,5],    \n                [1,2,3,4,5,6],    \n                [1,2,3,4,5,6,7],    \n                [1,2,3,4,5,6,7,8],    \n                [1,2,3,4,5,6,7,8,9],    \n                [1,2,3,4,5,6,7,8,9,10],    \n                [1,2,3,4,5,6,7,8,9,10,11],    \n                [1,2,3,4,5,6,7,8,9,10,11,12]],\n                2) ==     [[1,2],    \n                        [1,2,3],    \n                        [1,2,3,4],    \n                        [1,2,3,4,5],    \n                        [1,2,3,4,5,6],    \n                        [1,2,3,4,5,6,7],    \n                        [1,2,3,4,5,6,7,8],    \n                        [1,2,3,4,5,6,7,8,9],    \n                        [1,2,3,4,5,6,7,8,9,10],    \n                        [1,2,3,4,5,6,7,8,9,10,11],    \n                        [1,2,3,4,5,6,7,8,9,10,11,12]]\n\nassert trim_tuple(\n                [[1],    \n                [1,2],    \n                [1,2,3],    \n                [1,2,3,4],    \n                [1,2,3,4,5],    \n                [1,2,3,4,5,6],    \n                [1,2,3,4,5,6,7],    \n                [1,2,3,4,5,6,7,8],    \n                [1,2,3,4,5,6,7,8,9],    \n                [1,2,3,4,5,6,7,8,9,10],    \n                [1,2,3,4,5,6,7,8,9,10,11],    \n                [1,2,3,4,5,6,7,8,9,10,11,12],    \n                [1,2,3,4,5,6,7,8,9,10,11,12,13],    \n                [1,2,3,4,5,6,7,8,9,10,11,12,13,14],    \n                [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],    \n                [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],    \n                [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17],    \n                [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18],    \n                [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19],    \n                [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],    \n                [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21],    \n                [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22],    \n                [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23],    \n                [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],    \n                [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],    \n                [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26],    \n                [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27],    \n                [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28],    \n                [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],    \n                [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],    \n                [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31],    \n                [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],    \n                [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33],    \n                [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34],    \n                [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35],    \n                [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36],    \n                [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37],    \n                [1,2,3,4,5,6,7,8,9,10,11"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     trim_tuple([(0,1,2,3), (0,1,2,3), (0,1,2,3), (0,1,2,3)], 3) == \\\n        [(0,1,2,3), (0,1,2,3), (0,1,2,3), (0,1,2,3)]\nassert     trim_tuple([(0,1,2,3), (0,1,2,3), (0,1,2,3), (0,1,2,3)], 0) == \\\n        [(0,1,2,3), (0,1,2,3), (0,1,2,3), (0,1,2,3)]\nassert     trim_tuple([(0,1,2,3), (0,1,2,3), (0,1,2,3), (0,1,2,3)], 1) == \\\n        [(0,1,2,3), (0,1,2,3)]\nassert     trim_tuple([(0,1,2,3), (0,1,2,3), (0,1,2,3), (0,1,2,3)], 2) == \\\n        [(0,1,2,3), (0,1,2,3), (0,1,2,3)]\nassert     trim_tuple([(0,1,2,3), (0,1,2,3), (0,1,2,3), (0,1,2,3)], 3) == \\\n        [(0,1,2,3)]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     trim_tuple([(1,2,3),(2,3,4),(3,4,5)],2) == \\\n        [(1,2,3),(2,3,4),(3,4,5)]\nassert     trim_tuple([(1,2,3),(2,3,4),(3,4,5),(4,5,6)],2) == \\\n        [(1,2,3),(2,3,4),(3,4,5),(4,5,6)]\nassert     trim_tuple([(1,2,3),(2,3,4),(3,4,5),(4,5,6),(5,6,7)],3) == \\\n        [(1,2,3),(2,3,4),(3,4,5),(4,5,6),(5,6,7)]\nassert     trim_tuple([(1,2,3),(2,3,4),(3,4,5),(4,5,6),(5,6,7),(6,7,8)],4) == \\\n        [(1,2,3),(2,3,4),(3,4,5),(4,5,6),(5,6,7),(6,7,8)]\nassert     trim_tuple([(1,2,3),(2,3,4),(3,4,5),(4,5,6),(5,6,7),(6,7,8),(7,8,9)],5) == \\\n        [(1,2,3),(2,3,4),(3,4,5),(4,5,6),(5,6,7),(6,7,8),(7,8,9)]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     trim_tuple([('a',1,1),('b',2,1),('c',3,1),('d',4,1)], 0) == \\\n        [('a',1,1),('b',2,1),('c',3,1),('d',4,1)]\nassert     trim_tuple([('a',1,1),('b',2,1),('c',3,1),('d',4,1)], 3) == \\\n        [('a',1,1),('b',2,1),('c',3,1)]\nassert     trim_tuple([('a',1,1),('b',2,1),('c',3,1),('d',4,1)], 1) == \\\n        [('a',1,1),('b',2,1),('c',3,1),('d',4,1)]\nassert     trim_tuple([('a',1,1),('b',2,1),('c',3,1),('d',4,1)], 2) == \\\n        [('a',1,1),('b',2,1),('c',3,1),('d',4,1)]\nassert     trim_tuple([('a',1,1),('b',2,1),('c',3,1),('d',4,1)], 4) == \\\n        [('a',1,1),('b',2,1),('c',3,1)]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     trim_tuple([[1,2], [3,4], [5], [6,7,8,9], [10,11,12,13]], 3) == \n    [[1,2], [3,4], [5], [6,7,8,9]]\nassert     trim_tuple([[1,2], [3,4,5], [6,7,8,9], [10,11,12,13]], 3) == \n    [[1,2], [3,4,5], [6,7,8,9]]\n\ndef is_matched(p):\n    '''\n    Write a function to determine if a parenthesized expression is matched.\n    '''\n    pass\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert ixmltup(('A',), ('B',)) == (('A', 'B'),)\nassert ixmltup(('A',), ('B', 'C')) == (('A', 'B', 'C'),)\nassert ixmltup(('A', 'B', 'C'), ('D', 'E', 'F')) == (('A', 'B', 'C', 'D', 'E', 'F'),)\nassert ixmltup(('A', 'B', 'C'), ('D', 'E', 'F')) == (('A', 'B', 'C', 'D', 'E', 'F'),)\nassert ixmltup(('A', 'B', 'C'), ('D', 'E', 'F')) == (('A', 'B', 'C', 'D', 'E', 'F'),)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     index_multiplication((1, 2, 3, 4, 5, 6), (1, 1, 1, 1, 1, 1)) == (120, 120, 120, 120, 120, 120)\nassert     index_multiplication((3, 6, 9, 12, 15, 18), (7, 8, 9, 10, 11, 12)) == (93, 108, 153, 222, 315, 378)\nassert     index_multiplication((10, 100, 1000, 10000, 100000), (3, 3, 3, 3, 3)) == (300, 300, 300, 300, 300)\nassert     index_multiplication((0, 10, 20, 30, 40), (-10, 10, 20, 30, 40)) == (0, -10, 0, -10, 0)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     index_multiplication( (1,2,3), (4,5,6)) == (4, 10, 18)\nassert     index_multiplication( (9,8,7), (6,5,4)) == (72, 80, 84)\nassert     index_multiplication( (2,3), (4,5,6)) == (4, 6, 10)\n\ndef index_division(tup1, tup2):\n    '''\n    Write a function to perform index wise division of tuple elements in the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ntest_list1 = (10, 20, 30)\ntest_list2 = (1, 2, 3)\ntest_list3 = (4, 5, 6)\ntest_list4 = (7, 8, 9)\ntest_tup1 = (test_list1, test_list2, test_list3, test_list4)\n\ntest_tup2 = (100, 200, 300)\nresult = index_multiplication(test_tup1, test_tup2)\nassert result == (10, 20, 300, 400), 'Index wise multiplication failed!'\n\n\n'''\n    Given a tuple and a number \u2018n\u2019, write a python function that inserts \u2018n\u2019 in the empty \n    second element in the tuple. \n    For example if the given tuple is (10, 20, 30, 40, 50) and the number to insert is 12 \n    then the resulting tuple will be (10, 12, 20, 30, 40, 50).\n'''\ndef insert_element(tup, n):\n    '''\n    Write a function to insert \u2018n\u2019 at the second position of a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     index_multiplication((1,2,3),(1,2,3)) == (1,4,9)\nassert     index_multiplication((0,0,0),(0,0,0)) == (0,0,0)\nassert     index_multiplication((0,1,2),(1,2,3)) == (0,2,6)\n\n\n\n\ndef index_divide(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise divide of tuple elements in the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     index_multiplication((1,2,3), (4,5,6)) == (4,10,18)\nassert     index_multiplication((1,2,3), (6,5,4)) == (6,30,60)\nprint('correct')\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint('Test case passed')\nprint()\n\n\n\ndef even_odd(*args):\n    '''\n    Write a function that takes a list of even or odd integers as input and returns the total number of even numbers\n    in the list.\n    '''\n    pass\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ntest_tup1 = (1, 2, 3, 4, 5)\ntest_tup2 = (5, 4, 3, 2, 1)\nprint(index_multiplication(test_tup1, test_tup2))\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ntest_tup1 = (3, 4, 5)\ntest_tup2 = (1, 3, 5)\ntest_tup3 = (2, 4, 6)\n\nassert index_multiplication(test_tup1, test_tup2) == (3, 12, 35)\nassert index_multiplication(test_tup1, test_tup3) == (6, 24, 60)"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_Occurrence((1,2,3), (1,2,3)) == 2, 'count_Occurrence should return 2'\nassert     count_Occurrence((1,2,3), (1,2,3,4)) == 2, 'count_Occurrence should return 2'\nassert     count_Occurrence((1,2,3), (4,2,3)) == 1, 'count_Occurrence should return 1'\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef count_Occurrence(lst, tup):\n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    return count\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ncount_Occurrence((1,2,2,3),[2,1,2,3,1,2]) == Counter([1,2,2,3,1,2])\nassert \ncount_Occurrence((1,2,1,2,1,2),[1,2,1,2,1,2]) == Counter([1,2,1,2,1,2])\nassert \ncount_Occurrence((1,2,1,2,1,2),[1,2,1,2,1,2]) == Counter([1,2,1,2,1,2])\nassert count_Occurrence((1,2,1,2,1,2),[1,2,1,2,1,2]) == Counter([1,2,1,2,1,2])\nassert count_Occurrence((1,2,1,2,1,2),[1,2,1,2,1,2]) == Counter([1,2,1,2,1,2])\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ncount_Occurrence((3,2,1,5), [1,2,3,4,5]) == {1:3, 2:2, 3:1}\nassert count_Occurrence((3,2,1,5), [1,2,3,4,4]) == {1:3, 2:2, 3:1, 4:1}\nassert count_Occurrence((5,4,3,2,1),[1,2,3,4,5,6]) == {1:5, 2:4, 3:3, 4:2, 5:1}\nassert count_Occurrence((5,4,3,2,1),[1,2,3,4,5,6]) == {1:5, 2:4, 3:3, 4:2, 5:1}"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ntup = (1,3,5,2,1,2,1,1,1,1,1,1,1,1,1) \nlst = [1,2,3,4,5,6,7,8,9,10]\nassert count_Occurrence(tup, lst) == 5\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ncount_Occurrence((5,6,7),(5,6,7,7,3,2,1,8,9,6)) == Counter({5: 3, 6: 2, 7: 2})\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_Occurrence((0, 1, 2, 3), [0, 1, 2, 3]) == Counter({0: 1, 1: 1, 2: 1, 3: 1})\n\nassert     count_Occurrence((0, 1, 2, 3), ['a', 'b', 'c', 'd']) == Counter({'a': 1, 'b': 1, 'c': 1, 'd': 1})\n\nassert     count_Occurrence((0, 1, 2, 3), ['d', 'a', 'b', 'c']) == Counter({'d': 2, 'a': 1, 'b': 1, 'c': 1})\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    count_Occurrence(((3,2),(5,2),(3,1)),[3,2,5]) == (2,3,1)\nassert \n    count_Occurrence(((3,2),(5,2),(3,1)),[3,2,5,3]) == (1,2,3,3)\nassert \n    count_Occurrence(((3,2),(5,2),(3,1)),[3,2,5,3,3]) == (1,2,3,3,1)\n\ndef count_Occurrence_2(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0 \n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if lst[i] == lst[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ncount_Occurrence((1,2,1),[1,1,2,2]) == 3\n\ndef count_Occurrence(lst):\n    \"\"\"\n    Write a python function to count the occurence of all elements of list in a tuple.\n    Input:\n    lst : list of integer values\n    Output:\n    return the tuple of all elements and their count\n    \"\"\"\n    lst_count = Counter(lst)\n    return lst_count.items()\n\nassert count_Occurrence([1,1,2,2]) == [(1,2),(1,2)]\n\ndef count_Occurrence(lst):\n    \"\"\"\n    Write a python function to count the occurence of all elements of list in a tuple.\n    Input:\n    lst : list of integer values\n    Output:\n    return the tuple of all elements and their count\n    \"\"\"\n    return [(item,lst.count(item)) for item in lst]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ncube_nums([0, 1, 2]) == [0, 1, 8]\ncube_nums([3, 4, 5]) == [9, 16, 25]\ncube_nums([100, 200, 300]) == [1000, 2000, 3000]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ncube_nums([1, 2, 3])\n>>> [1, 8, 27]\n\n'''\nWrite a function that receives a list and returns a new list with the cubes of the numbers in the original list.\n'''\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ncube_nums([1,2,3,4]) == [1,8,27,64], \"Wrong\"\nassert\ncube_nums([3,9,20,100,1000]) == [27,81,729,7879,8929], \"Wrong\"\nassert cube_nums([5,25,125]) == [625,625,625], \"Wrong\"\nassert cube_nums([-1,0,-2,1]) == [-1,0,1,8], \"Wrong\"\nassert cube_nums([]) == [], \"Wrong\"\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ncube_nums([]) == []\nassert cube_nums([0, 1, 2]) == [0, 1, 4]\nassert cube_nums([1, 2, 3]) == [1, 4, 27]\nassert cube_nums([-1, -2, -3]) == [-1, -4, -27]\n\ndef cube_nums_2(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    pass\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ncube_nums([1,2,3,4]) == [1,8,27,64]\ncube_nums([1,2,2,3,2]) == [1,6,10,27,100]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     cube_nums([1,2,3,4,5]) == [1, 8, 27, 64, 125],'should return 1, 8, 27, 64, 125'\nassert     cube_nums([4,3,2,1]) == [16, 243, 64, 1],'should return 16, 243, 64, 1'\n\n\ndef triple_plus_1(nums):\n    '''\n    Write a function that returns the triple element of a list with 1 added to it.\n    '''\n    pass\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]\nassert     cube_nums([-1, 2, -3, 4, -5]) == [-1, 8, 27, 64, 125]\nassert     cube_nums([1, -2, 3, -4, 5]) == [-1, 8, 27, 64, 125]\nassert     cube_nums([1.1, 2.2, 3.3, 4.4, 5.5]) == [1.1, 8.8, 27.9, 64.36, 125.25]\nassert     cube_nums([]) == []\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ncube_nums([0,1,2,3,4]) == [[0,0,0,0,0], [1,1,1,1,1], [8,8,8,8,8], [27,27,27,27,27], [64,64,64,64,64]]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     cube_nums([1,2,3,4]) == [1,8,27,64], \"Test failed\"\nassert     cube_nums([-1,-2,-3]) == [-1,-8,-27], \"Test failed\"\n\ndef fib_nums(nums):\n    '''\n    Write a function to generate fibonacci series up to a given number.\n    '''\n    pass\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef sum_perrin(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    pass\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     cal_sum(5) == 0, \"incorrect result\"\nassert     cal_sum(10) == 1, \"incorrect result\"\nassert     cal_sum(100) == 4, \"incorrect result\"\nassert     cal_sum(1000) == 20, \"incorrect result\"\nassert     cal_sum(10000) == 64, \"incorrect result\"\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    cal_sum(100) == 5533\n    cal_sum(9999) == 9999"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert cal_sum(1) == 1\nassert cal_sum(2) == 1\nassert cal_sum(3) == 3\nassert cal_sum(4) == 4\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     cal_sum(2)==2, \"error in test\"\nassert     cal_sum(3)==6, \"error in test\"\nassert     cal_sum(12)==33, \"error in test\"\nassert     cal_sum(13)==50, \"error in test\"\nassert     cal_sum(14)==59, \"error in test\"\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     cal_sum(1) == 1\nassert     cal_sum(2) == 1\nassert     cal_sum(3) == 1\nassert     cal_sum(4) == 1\nassert     cal_sum(5) == 1\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     cal_sum(1) == 1 \nassert     cal_sum(2) == 2 \nassert     cal_sum(3) == 4 \nassert     cal_sum(4) == 10 \nassert     cal_sum(5) == 21 \n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if type(n)!= int:\n        return 0\n    else:\n        return (n*(n+1))//2\n\n\n\n\n\ndef cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return n*(n+1)//2\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     cal_sum(2) == 1\nassert cal_sum(3) == 2\nassert cal_sum(4) == 3\nassert cal_sum(5) == 5\nassert cal_sum(6) == 15\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_string(['hello', 'world', 'hello', 'hello'], 3) == ['hello', 'hello']\nassert     extract_string(['hello', 'world', 'hello', 'hello', 'hello'], 1) == ['hello']\nassert     extract_string(['hello', 'world', 'hello', 'hello', 'hello', 'hello'], 4) == ['hello', 'hello']\nassert     extract_string(['hello', 'world', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello'], 2) == ['hello', 'hello']\nassert     extract_string(['hello', 'world', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello', 'hello'], 4) == ['hello']\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_string([\"hi\", \"hello\", \"goodbye\", \"hello\"], 1) == [\"hi\"]\nassert     extract_string([\"hi\", \"hello\", \"goodbye\", \"hello\"], 2) == [\"hello\", \"goodbye\"]\nassert     extract_string([\"hi\", \"hello\", \"goodbye\", \"hello\"], 3) == [\"hello\"]\nassert     extract_string([\"hi\", \"hello\", \"goodbye\", \"hello\"], 4) == []\nassert     extract_string([\"hi\", \"hello\", \"goodbye\", \"hello\"], 5) == []\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_string('Hello, World!', 1) == 'H'\nassert     extract_string('Hello, World!', 3) == 'Hell'\nassert     extract_string('Hello, World!', 5) == 'ello, Worl'\nassert     extract_string('Hello, World!', 8) == 'Hello, World!'\n\ndef extract_character(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    pass\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_string('', []) == []\nassert     extract_string('abc', ['ab', 'abc', 'acb']) == ['ab', 'abc']\nassert     extract_string('abc', ['a', 'ab', 'abc']) == ['ab', 'abc']\nassert     extract_string('abc', ['a', 'b', 'c']) == ['a', 'b', 'c']\nassert     extract_string('abc', ['a', 'b', 'c', 'd']) == ['a', 'b', 'c', 'd']\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(\"\\nTesting extract_string...\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 0)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 1)) else \"Fail\")\nprint(\"Pass\" if ('world' == extract_string(['hello', 'helloworld'], 2)) else \"Fail\")\nprint(\"Pass\" if ('Hello' == extract_string(['hello', 'helloworld'], 3)) else \"Fail\")\nprint(\"Pass\" if ('helloworld' == extract_string(['hello', 'helloworld'], 4)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 5)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 6)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 7)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 8)) else \"Fail\")\nprint(\"Pass\" if ('helloworld' == extract_string(['hello', 'helloworld'], 9)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 10)) else \"Fail\")\nprint(\"Pass\" if ('helloworld' == extract_string(['hello', 'helloworld'], 11)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 12)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 13)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 14)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 15)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 16)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 17)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 18)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 19)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 20)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 21)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 22)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 23)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 24)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 25)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 26)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 27)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 28)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 29)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 30)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 31)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 32)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 33)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 34)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 35)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 36)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 37)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 38)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 39)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 40)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 41)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 42)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 43)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 44)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 45)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 46)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 47)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 48)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 49)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 50)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 51)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 52)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 53)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 54)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 55)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 56)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 57)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 58)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 59)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 60)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 61)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 62)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 63)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 64)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 65)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 66)) else \"Fail\")\nprint(\"Pass\" if ('hello' == extract_string(['hello', 'helloworld'], 67)) else \"Fail\")\nprint(\"Pass\" if ("
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_string(['man', 'woman', 'dog', 'cat', 'fish', 'bird'], 3) == ['man', 'dog']\nassert     extract_string(['man', 'woman', 'dog', 'cat', 'fish', 'bird'], 2) == ['man', 'woman', 'dog']\nassert     extract_string(['man', 'woman', 'dog', 'cat', 'fish', 'bird'], 1) == ['man', 'woman', 'dog', 'cat', 'fish']\nassert     extract_string(['man', 'woman', 'dog', 'cat', 'fish', 'bird'], 0) == ['man', 'woman', 'dog', 'cat', 'fish']\nassert     extract_string(['man', 'woman', 'dog', 'cat', 'fish', 'bird'], 5) == ['man', 'woman', 'dog', 'cat', 'fish', 'bird']\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_string(['a', 'b', 'c', 'd', 'e'], 1) == 'a'\nassert     extract_string(['a', 'b', 'c', 'd', 'e'], 2) == 'ab'\nassert     extract_string(['a', 'b', 'c', 'd', 'e'], 3) == 'abc'\nassert     extract_string(['a', 'b', 'c', 'd', 'e'], 4) == 'abcd'\nassert     extract_string(['a', 'b', 'c', 'd', 'e'], 5) == 'abcde'\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_string([], 1) == ''\nassert     extract_string(['a', 'b', 'c', 'd'], 1) == 'a'\nassert     extract_string(['a', 'b', 'c', 'd'], 3) == 'abc'\nassert     extract_string(['a', 'b', 'c', 'd'], 5) == 'abc'\nassert     extract_string(['a', 'b', 'c', 'd'], 4) == 'a'\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_whitespaces('') == \"\"\nassert     remove_whitespaces(' ') == ''\nassert     remove_whitespaces('abc ') == 'abc'\nassert     remove_whitespaces('abc') == 'abc'\nassert     remove_whitespaces(' abc ') == 'abc'\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_whitespaces(\"Hey, \\n \\t How are you?\") == \"Hey, How are you?\"\nassert     remove_whitespaces(\"Good evening,\\n How are you?\") == \"Good evening, How are you?\"\nassert     remove_whitespaces(\"Hey,\\n \\tHow are you?\") == \"Hey, How are you?\"\nassert     remove_whitespaces(\"Hey\\n \\tHow are you?\") == \"HeyHow are you?\"\nassert     remove_whitespaces(\"Good evening,\\n \\tHow are you?\") == \"Good evening, How are you?\"\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_whitespaces(\"Hello world!\") == \"Hello world\"\nassert     remove_whitespaces(\"My name is John. My name is Jane.\") == \"My name is Jane.\"\nassert     remove_whitespaces(\"I am learning  Python\") == \"I am learning  Python\"\nassert     remove_whitespaces(\"Today is Wednesday\") == \"Today is Wednesday\"\nassert     remove_whitespaces(\"Today is Wedneday\") == \"Today is Wedneday\"\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_whitespaces('ab ') == 'ab'\nassert     remove_whitespaces('a b') == 'a b'\nassert     remove_whitespaces('a b   ') == 'a b'\nassert     remove_whitespaces('a\\nb\\n') == 'a\\nb'\nassert     remove_whitespaces('a\\r\\nb\\r\\n') == 'a\\nb'\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_whitespaces(\"a\\nb\\nc\\n \\nd\\ne\") == \"a\\nb\\nc\\n\\nd\\ne\"\nassert     remove_whitespaces(\"a\\n \\t\\t\\n\\nb\\tc\") == \"a\\nb\\tc\"\nassert     remove_whitespaces(\"\\n \\t\\t\\n\\n\\t\") == \"\"\nassert     remove_whitespaces(\"a\\n \\t\\t\\n\\nb\\tc\") == \"a\\nb\\tc\"\nassert     remove_whitespaces(\" \\t\\n\\n \\t \\t\") == \"\"\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_whitespaces(' ') == '', 'There is an error in the provided code.'\nassert    remove_whitespaces('') == '', 'There is an error in the provided code.'\nassert    remove_whitespaces('   ') == '', 'There is an error in the provided code.'\nassert    remove_whitespaces('hello') == 'hello', 'There is an error in the provided code.'\nassert    remove_whitespaces('hell  o') == 'hello', 'There is an error in the provided code.'\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_whitespaces(\"red\") == \"red\", \"Should return'red'\"\nassert     remove_whitespaces(\"  red\") == \"red\", \"Should return'red'\"\nassert     remove_whitespaces(\"red \\t\") == \"red\", \"Should return'red'\"\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_whitespaces(\" a   b \") == \"ab\"\nassert     remove_whitespaces(\"  a    b  \") == \"ab\"\nassert     remove_whitespaces(\" a b c \") == \"ab\"\nassert     remove_whitespaces(\" a b c\\nd\") == \"ab\"\nassert     remove_whitespaces(\"a b c\\n\") == \"ab\"\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_whitespaces(\"\") == \"\"\nassert     remove_whitespaces(\"   \") == \"\"\nassert     remove_whitespaces(\"  \") == \"\"\nassert     remove_whitespaces(\" \") == \"\"\nassert     remove_whitespaces(\" hello world   \") == \"hello world\"\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_whitespaces(\"     \")    ==    \"\",    \"Expected: None\\nGot:\\t\"+remove_whitespaces(\"     \")\nassert     remove_whitespaces(\"    \")    ==    \"\",    \"Expected: None\\nGot:\\t\"+remove_whitespaces(\"    \")\nassert     remove_whitespaces(\"   \")    ==    \"\",    \"Expected: None\\nGot:\\t\"+remove_whitespaces(\"   \")\nassert     remove_whitespaces(\" \")    ==    \"\",    \"Expected: None\\nGot:\\t\"+remove_whitespaces(\" \")\nassert     remove_whitespaces(\"\")    ==    \"\",    \"Expected: None\\nGot:\\t\"+remove_whitespaces(\"\")\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     loss_amount(7,5) == 5, \"You have given wrong input\"\nassert     loss_amount(7,4) == 5, \"You have given wrong input\"\nassert     loss_amount(4,5) == 0, \"You have given wrong input\"\n\n\ndef loss_amount(actual_cost,sale_amount):\n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost - sale_amount if actual_cost - sale_amount >= 0 else 0\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n'''\n\n3\n5\n0\nFalse\n\n3\n0\n4\nTrue\n\n'''\n\nprint(\"Solution 2:\")\nloss_amount(5,0)\nloss_amount(0,4)\nloss_amount(3,0)\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     loss_amount(100,5) == 50,    '1st testcase'\nassert     loss_amount(100,10) == 0,    '2nd testcase'\nassert     loss_amount(200,100) == 0,    '3rd testcase'\nassert     loss_amount(100,50) == 50,    '4th testcase'\nassert     loss_amount(100,5.5) == 50.5,    '5th testcase'\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     loss_amount(100,30) == 20, 'exception not raised'\nassert     loss_amount(100,90) == 10, 'exception not raised'\nassert     loss_amount(100,40) == 0, 'exception not raised'\nassert     loss_amount(100,0) == 0, 'exception not raised'\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     loss_amount(10, 5) == 5, \"incorrect\"\nassert     loss_amount(5, 20) == 5, \"incorrect\"\nassert     loss_amount(5, 10) == 0, \"incorrect\"\nprint(\"You have passed the test!\")"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     loss_amount(15,10) == 5, \"Should be 5\"\nassert     loss_amount(15,7) == 3, \"Should be 3\"\nassert     loss_amount(15,0) == 0, \"Should be 0\"\nassert     loss_amount(10,0) == 0, \"Should be 0\"\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nloss_amount(30, 60) == 0, 'loss_amount got wrong result for 30,60'\n\nassert loss_amount(5, 25) == 5, 'loss_amount got wrong result for 5,25'\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sumofFactors(4) == 0, 'Not correct answer'\nassert     sumofFactors(20) == 0, 'Not correct answer'\nassert     sumofFactors(64) == 0, 'Not correct answer'\nassert     sumofFactors(100) == 1, 'Not correct answer'\nassert     sumofFactors(200) == 2, 'Not correct answer'\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    "
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sumofFactors(4) == 2, \"Sum of even factors is not 2\"\nassert     sumofFactors(16) == 6, \"Sum of even factors is not 6\"\nassert     sumofFactors(23) == 10, \"Sum of even factors is not 10\"\nassert     sumofFactors(0) == 0, \"Sum of even factors is not 0\"\nassert     sumofFactors(1000) == 12, \"Sum of even factors is not 12\"\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert sumofFactors(6) == 4, \"Correct\"\nassert sumofFactors(8) == 6, \"Correct\"\nassert sumofFactors(20) == 14, \"Correct\"\nassert sumofFactors(1) == 1, \"Correct\"\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef sumofFactors(n):\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n<0:\n        return -1\n    evenFactors = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            evenFactors += i\n    return evenFactors"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sumofFactors(9) == 4\nassert     sumofFactors(5) == 5\nassert     sumofFactors(6) == 10\nassert     sumofFactors(12) == 12\nassert     sumofFactors(15) == 12\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sumofFactors(12) == 12\nassert     sumofFactors(20) == 19\nassert     sumofFactors(24) == 18\nassert     sumofFactors(33) == 30\nassert     sumofFactors(36) == 27\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_match_wordz('') == False\nassert     text_match_wordz('abc') == False\nassert     text_match_wordz('abcz') == True\nassert     text_match_wordz('zabc') == False\nassert     text_match_wordz('abcz') == True\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_match_wordz('z') == True\nassert     text_match_wordz('z Z') == True\nassert     text_match_wordz('z Z Z') == True\nassert     text_match_wordz('z Z z Z') == True\nassert     text_match_wordz('z z z z z') == True\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint('\\n')\nprint(\"Text match:\")\n\nprint(text_match_wordz('zebra'))\nprint(text_match_wordz('dog'))\nprint(text_match_wordz('cat'))\n\ndef text_match_wordz(text):\n    return re.search(r'\\bz\\w+\\b', text)\n\nprint('\\n')\nprint(\"Text match:\")\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_match_wordz('the')\nassert not     text_match_wordz('zebra')\nassert not     text_match_wordz('zebra zebra')\n\n'''\nWrite a function text_match_wordz that matches a word ending with 'z'.\n'''\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word ending with 'z'.\n    '''\n    pass\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_wordz('') == False, \"error: 0\"\nassert     text_match_wordz('z') == True, \"error: 1\"\nassert     text_match_wordz('zz') == False, \"error: 2\"\nassert     text_match_wordz('z123') == False, \"error: 3\"\nassert     text_match_wordz('zabcdefghijklmnopqrstuvwxyz') == False, \"error: 4\"\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_match_wordz('dog and cat and zebra') == True\nassert     text_match_wordz('dog and cat and zebra') == True\nassert     text_match_wordz('dog and cat and zebra') == True\nassert     text_match_wordz('dog and cat and zebra') == False\nassert     text_match_wordz('dog and cat and zebra') == False\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_match_wordz(\"abcd efgh\") == True, 'First'\nassert     text_match_wordz(\"abcd Zefgh\") == False, 'Second'\nassert     text_match_wordz(\"abcd efgh Z\") == False, 'Third'\nassert     text_match_wordz(\"abcd efgh Zefg\") == True, 'Fourth'\nassert     text_match_wordz(\"abcd efgh ZefgH\") == True, 'Fifth'\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_wordz('abczz') == True\nassert     text_match_wordz('abczzzzzz') == True\nassert     text_match_wordz('abczzz') == True\nassert     text_match_wordz('abczzzzzzzzz') == True\nassert     text_match_wordz('abczzz') == True\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_monthnumb_number(5) == False, 'Function failed.'\nassert     check_monthnumb_number(2) == True, 'Function failed.'\nassert     check_monthnumb_number(12) == True, 'Function failed.'\nassert     check_monthnumb_number(1) == True, 'Function failed.'\nassert     check_monthnumb_number(99) == True, 'Function failed.'\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_monthnumb_number(2) == True\nassert     check_monthnumb_number(3) == False\nassert     check_monthnumb_number(4) == False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_monthnumb_number(31)     == True, \"check_monthnumb_number(31) should return True\"\nassert     check_monthnumb_number(30)     == False, \"check_monthnumb_number(30) should return False\"\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_monthnumb_number(1) \nassert     check_monthnumb_number(2) \nassert     check_monthnumb_number(4) \nassert     check_monthnumb_number(5) \nassert     check_monthnumb_number(8) \n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_monthnumb_number(7) == True\nassert     check_monthnumb_number(8) == False\nassert     check_monthnumb_number(12) == False\nassert     check_monthnumb_number(9) == False\nassert     check_monthnumb_number(31) == True\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_monthnumb_number(12) == True, \"Pass\"\nassert     check_monthnumb_number(3) == False, \"Pass\"\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_monthnumb_number(12) == True\nassert     check_monthnumb_number(1) == False\nassert     check_monthnumb_number(1) == False"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_monthnumb_number(7) == True\nassert     check_monthnumb_number(18) == False\nassert     check_monthnumb_number(0) == False\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     reverse_string_list(['hi', 'hello', 'goodbye', 'goodbye']) == ['hello', 'goodbye', 'goodbye', 'hi']\nassert     reverse_string_list(['hi', 'hello', 'goodbye', 'goodbye', 'goodbye']) == ['goodbye', 'goodbye', 'goodbye', 'hello', 'hi']\n\ndef reverse_string_list_2(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    #!!!\n    pass\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     reverse_string_list(['hello', 'world']) == ['world', 'hello']\nassert     reverse_string_list(['a', 'b', 'c']) == ['c', 'b', 'a']\nassert     reverse_string_list(['s', 'b', 'a']) == ['a', 'b','s']\nassert     reverse_string_list([]) == []\nassert     reverse_string_list([1,2,3]) == [3,2,1]\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     reverse_string_list([\"hello\", \"hello\", \"hello\"]) == [\"hello\", \"hello\", \"hello\"], \"Should revert every word in a given list of strings\"\nassert     reverse_string_list([\"hello\", \"world\"]) == [\"world\", \"hello\"], \"Should revert each word in a given list of strings\"\nassert     reverse_string_list([\"hello\", \"world\", \"a\"]) == [\"world\", \"a\", \"hello\"], \"Should revert each word in a given list of strings\"\nassert     reverse_string_list([\"\"]) == [\"\"], \"Should revert no words in a given list of strings\"\nassert     reverse_string_list([\"hello\", \"a\", \"b\"]) == [\"a\", \"b\", \"hello\"], \"Should revert a given list of strings\"\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     reverse_string_list([]) == []         == True\nassert     reverse_string_list(['a']) == ['a']    == True\nassert     reverse_string_list(['a', 'b']) == ['b', 'a']    == True\nassert     reverse_string_list(['a', 'b', 'c']) == ['c', 'b', 'a']    == True\nassert     reverse_string_list(['a', 'b', 'c', 'd']) == ['d', 'c', 'b', 'a']    == True\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert reverse_string_list([]) == []\nassert reverse_string_list([1,2,3,4,5,6,7]) == [7,6,5,4,3,2,1]\n\ndef reverse_string_list_with_map(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values using map method.\n    '''\n    pass\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    reverse_string_list(['abcd', 'a', 'ab', 'cba']) == ['cba', 'ab', 'ab', 'a']\n\nassert reverse_string_list(['abcd', 'a', 'ab', 'cba']) == ['cba', 'ab', 'ab', 'a']\n\nassert reverse_string_list(['abcd']) == ['abcd']\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef reverse_string_list_2(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    pass\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert not reverse_string_list(['a','b','c'])\nassert not reverse_string_list(['a','b','c','d','e'])\nassert reverse_string_list(['a','b','c','d','e','f'])\nassert reverse_string_list(['a','b','c','d','e','f','g'])\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     reverse_string_list(['hello', 'world']) == ['world', 'hello']\nassert     reverse_string_list(['hello', 'world', 'word']) == ['word', 'hello', 'world']\nassert     reverse_string_list(['hello', 'world', 'world', 'word']) == ['world', 'world', 'hello', 'word']\nassert     reverse_string_list(['hello', 'world', 'world', 'word', 'word', 'world', 'hello']) == ['world', 'world', 'hello', 'word', 'word', 'hello', 'world']\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     reverse_string_list([\"a\", \"b\", \"c\", \"d\", \"e\"]) == [\"e\", \"d\", \"c\", \"b\", \"a\"], \"Wrong!\"\nassert     reverse_string_list([\"a\", \"b\", \"c\", \"d\", \"e\"]) == [\"e\", \"d\", \"c\", \"b\", \"a\"], \"Wrong!\"\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Find_Min([1,2,3,4,5,6]) ==     [[1, 2, 3], [4, 5, 6]]\nassert     Find_Min([1,2,3,4,5,6]) ==     [[1, 2], [3, 4, 5, 6]]\nassert     Find_Min([1,2,3]) ==     [1, 2]\nassert     Find_Min([]) ==     []\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Find_Min([1, 2, 3, 4, 5, 6]) == 1\nassert     Find_Min([2, 1, 6, 4, 5, 3]) == 2\nassert     Find_Min([3, 2, 1]) == 2\nassert     Find_Min([]) == None\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Find_Min([1, 3, 3, 3, 1]) == 1\nassert     Find_Min([1, 3, 1, 3]) == 1\nassert     Find_Min([1, 3, 1, 1]) == 0\nassert     Find_Min([3, 3, 3, 3]) == 3\nassert     Find_Min([]) == -1\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Find_Min([]) == None, \"the empty list does not have minimum length\"\nassert     Find_Min([1,2,3,4,5,6]) == None, \"the list having one element is having minimum length\"\nassert     Find_Min([1,2,3,4]) == None, \"the list having 2 elements is having minimum length\"\nassert     Find_Min([1,2,3,4,5,6,7,8,9,10]) == None, \"the list having all the elements is having minimum length\"\nassert     Find_Min([1,2,3,4,5,6,7,8]) == 4, \"the list having 4 elements is having minimum length\"\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Find_Min([[1,2,3],[4,5,6],[7,8,9]])==[[1,2,3],[7,8,9]]\nassert     Find_Min([[1,2],[4,5],[6,7],[8,9]])==[[1,2],[6,7],[8,9]]\nassert     Find_Min([[1,2],[4,5],[7,8],[9]])==[[1,2],[4,5],[7,8],[9]]\nassert     Find_Min([[1,2],[4,5],[7,8],[9],[10,11,12]])==[[1,2],[4,5],[7,8],[9],[10,11,12]]\nassert     Find_Min([[1,2,3],[4,5,6],[7,8,9,10,11,12]])==[[1,2,3],[7,8,9,10,11,12]]\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert Find_Min([1, 2, 3]) == [1, 2]\nassert Find_Min([1, 2, 3, 4, 5, 6]) == [1, 2, 4]\nassert Find_Min([1, 1, 3, 4, 5, 6]) == []\nassert Find_Min([1, 2, 3, 4, 5, 6, 7]) == []\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     rectangle_area(1,2) == 2\nassert     rectangle_area(3,4) == 8\nassert     rectangle_area(10,20) == 200\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     rectangle_area(1,2) == 2, \"rectangle_area: test 1 failed\"\nassert     rectangle_area(1,2) == 4, \"rectangle_area: test 2 failed\"\nassert     rectangle_area(2,1) == 2, \"rectangle_area: test 3 failed\"\nassert     rectangle_area(2,1) == 4, \"rectangle_area: test 4 failed\"\nassert     rectangle_area(2,2) == 4, \"rectangle_area: test 5 failed\"\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     rectangle_area(3,4) == 6\nassert     rectangle_area(0,0) == 0\nassert     rectangle_area(6,0) == 0\nassert     rectangle_area(6,2) == 4\nassert     rectangle_area(0,2) == 4\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rectangle_area(4, 5) == 20, \\\n        \"rectangle_area(4, 5) is wrong\"\nassert rectangle_area(10, 2) == 20, \\\n        \"rectangle_area(10, 2) is wrong\"\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     rectangle_area(2,3) == 6\nassert     rectangle_area(10,2) == 20\nassert     rectangle_area(2,8) == 10\nassert     rectangle_area(4,5) == 20\nassert     rectangle_area(2,5) == 4\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef rectangle_area_iterative(l,b):\n    '''\n    Write a function that iteratively calculate the area of a rectangle.\n    '''\n    pass\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef rectangle_area(l,b):\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     rectangle_area(2,4) == 8\nassert     rectangle_area(5,3) == 20\nassert     rectangle_area(3,3) == 9\nassert     rectangle_area(2.5,4.5) == 8.5\nassert     rectangle_area(2,4.5) == 8.5\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(\"Pass\" if (6 == rectangle_area(3,5)) else \"Fail\")\nprint(\"Pass\" if (45 == rectangle_area(13,3)) else \"Fail\")\nprint(\"Pass\" if (30 == rectangle_area(10,15)) else \"Fail\")\nprint(\"Pass\" if (20 == rectangle_area(6,10)) else \"Fail\")\nprint(\"Pass\" if (12 == rectangle_area(10,10)) else \"Fail\")"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_uppercase(\"thisIsASimpleExample\") == \"this is a simple example\"\nassert     remove_uppercase(\"isUpper\") == \"isupper\"\nassert     remove_uppercase(\"I WANT THIS TO BE LOWERCASE\") == \"i want this to be lowercase\"\nassert     remove_uppercase(\"This Is UPPER CASE\") == \"this is upper case\"\nassert     remove_uppercase(\"\") == \"\"\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_uppercase(\"abcdABCD123\") == \"abc123\"\nassert     remove_uppercase(\"123abcdABCD\") == \"123abc\"\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_uppercase('hello world') == 'hello world', 'test 1 failed'\nassert remove_uppercase('HELLO WORLD') == 'hello world', 'test 2 failed'\nassert remove_uppercase('hello world') == 'hello world', 'test 3 failed'\nassert remove_uppercase('HELLO WORLD') == 'hello world', 'test 4 failed'\n\ndef remove_non_alphabet(str1):\n    '''\n    Write a function to remove non-alphabet substrings from a given string.\n    '''\n    pass\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_uppercase(\"i+love+programming\") == \"iloveprogramming\"\nassert     remove_uppercase(\"I+love+programming\") == \"iloveprogramming\"\nassert     remove_uppercase(\"i+I+love+programming\") == \"iloveprogramming\"\nassert     remove_uppercase(\"i+I+I+love+programming\") == \"iloveprogramming\"\nassert     remove_uppercase(\"i
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_uppercase(\"\") == \"\"\nassert     remove_uppercase(\"A\") == \"a\"\nassert     remove_uppercase(\"aA\") == \"a\"\nassert     remove_uppercase(\"aaA\") == \"a\"\nassert     remove_uppercase(\"AbC\") == \"abc\"\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_uppercase(\"aaABBCCDDAA\") == \"abcd\"\nassert     remove_uppercase(\"b\") == \"\"\nassert     remove_uppercase(\"\") == \"\"\nassert     remove_uppercase(\"a\") == \"\"\nassert     remove_uppercase(\"A\") == \"\"\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_uppercase('') == ''\nassert     remove_uppercase('W2E4R5T') == 'WEERT'\nassert     remove_uppercase('W2E4R5T') == 'WEERT'\nassert     remove_uppercase('W2E4R5T') == 'WEERT'\nassert     remove_uppercase('WEERT') == 'WEERT'\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef remove_all(str1, char):\n    '''\n    Write a function to remove all occurrences of a given substring from a given string.\n    '''\n    pass\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    remove_uppercase(\"this is a test\") == \"ti s a tes\"\n    remove_uppercase(\"\") == \"\"\n    remove_uppercase(\"h\") == \"h\"\n    remove_uppercase(\"H\") == \"H\"\n    remove_uppercase(\"H I\") == \"H I\"\n    remove_uppercase(\"Hi\") == \"Hi\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"H I\") == \"HI\"\n    remove_uppercase(\"Hi\") == \"Hi\"\n    remove_uppercase(\"H I\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"hi\") == \"hi\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"Hi\") == \"Hi\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"he\") == \"he\"\n    remove_uppercase(\"He\") == \"He\"\n    remove_uppercase(\"hE\") == \"he\"\n    remove_uppercase(\"HE\") == \"He\"\n    remove_uppercase(\"hI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"hI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"h I\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"Hi\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"H I\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"h I\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"Hi\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"h i\") == \"h i\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"Hi\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"Hi\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"h i\") == \"h i\"\n    remove_uppercase(\"h I\") == \"h I\"\n    remove_uppercase(\"h I\") == \"h I\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"hi\") == \"hi\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"Hi\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"hi\") == \"hi\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\") == \"HI\"\n    remove_uppercase(\"HI\""
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nremove_uppercase('hELLO') == 'hello'\nremove_uppercase('hello world') == 'hello world'\nremove_uppercase('HELLO WORLD') == 'hello world'\nremove_uppercase('hello') == 'hello'\nremove_uppercase('Hello') == 'hello'\nremove_uppercase('HELLO') == 'hello'\n\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove punctuation substrings from a given string.\n    '''\n    # replace this with the solution\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Extract([[1, 2, 3], [4, 5, 6]]) == 1, \"1st list\"\nassert     Extract([[1, 2], [4, 5], [6]]) == 1, \"2nd list\"\nassert     Extract([[1], [2], [3], [4]]) == 1, \"3rd list\"\nassert     Extract([[1, 2, 3, 4]]) == 1, \"4th list\"\nassert     Extract([[1], [2], [3], [4], [5]]) == 1, \"5th list\"\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Extract([[1, 2], [4, 5], [6]]) == [1, 2], \"Wrong output\"\nassert     Extract([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4], \"Wrong output\"\nassert     Extract([]) == None, \"Wrong output\"\nassert     Extract([[1], [2]]) == [1], \"Wrong output\"\nassert     Extract([[1,2], [3,4], [5,6], [7,8]]) == [1,2,3,4], \"Wrong output\"\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Extract([[]]) == None, 'Empty List'\nassert Extract([[1,2],[3,4],[5]]) == (1,3), 'Wrong output'\nassert Extract([[1,2,3],[4,5,6]]) == (1,4), 'Wrong output'\nassert Extract([[1],[2,3],[4,5,6]]) == (1,2,4), 'Wrong output'\nassert Extract([[1,2,3],[4,5,6,7,8]]) == (1,4,5), 'Wrong output'\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Extract([[1,2],[3,4]]) == [1,2], \"First\"\nassert     Extract([[1,2,3,4,5,6,7,8,9],[2,3,4]]) == [1,2], \"Second\"\nassert     Extract([[1,2,3,4,5,6,7,8,9],[2,3,4,5,6,7,8,9]]) == [1,2,3,4,5,6,7,8,9], \"Third\"\n\n\ndef InsertionSort(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    pass\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nlst = [[1,2,3,4,5,6,7], ['hello','hi','goodbye'], [1,2,3,4,5,6,7]]\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nif __name__ == '__main__': \n    x = list(map(int,input().split())) \n    for i in range(0,len(x)): \n        if(x[i]%2 == 0): \n            print(x[i],end = \" \") \n    #print(x) \n    result = Extract(x) \n    print(*result)"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Extract([[1,2,3,4,5,6,7,8,9,10],[2,3,4,5,6,7,8,9,10],[5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9]]) == [[1,2,3,4,5,6,7,8,9,10],2,3,4,5,6,7,8,9,10]\nassert     Extract([[1,2,3,4,5,6,7,8,9,10],[2,3,4,5,6,7,8,9,10],[5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9]]) == [[1,2,3,4,5,6,7,8,9,10],2,3,4,5,6,7,8,9,10]\n\nprint(\"The expected output for Extract is [[1,2,3,4,5,6,7,8,9,10],[2,3,4,5,6,7,8,9,10],[5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9]]\")\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     upper_ctr('HELLO WORLD') == 'O'\nassert     upper_ctr('HELLO WORLD') == 'O'\nassert     upper_ctr('HELLO WORLD') == 'O'\nassert     upper_ctr('HELLO WORLD') == 'O'\nassert     upper_ctr('HELLO WORLD') == 'O'\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     upper_ctr('The quick brown fox jumps over the lazy dog') == 5\nassert upper_ctr('Hello') == 5\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     upper_ctr('LONDON') == {\n    'L': 1,\n    'O': 1,\n    'N': 1,\n    'D': 1,\n    ' ': 1,\n    'E': 1,\n    'R': 1,\n    'D': 1,\n    'O': 1,\n    'L': 1,\n    'N': 1,\n    'O': 1\n    }\nassert     upper_ctr('London') == {\n    'L': 1,\n    'O': 1,\n    'N': 1,\n    ' ': 1,\n    'E': 1,\n    'R': 1,\n    'D': 1,\n    'O': 1,\n    'L': 1,\n    'N': 1,\n    'O': 1\n    }\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     upper_ctr(\"The quick brown fox jumps over the lazy dog\") == 7\nassert upper_ctr(\"The quick brown fox jumps over the lazy dog\") == 7\nassert upper_ctr(\"The quick brown fox jumps over the lazy dog\") == 7\nassert upper_ctr(\"The quick brown fox jumps over the lazy dog\") == 7\nassert upper_ctr(\"The quick brown fox jumps over the lazy dog\") == 7\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     upper_ctr('the quick brown fox') == 6\nassert     upper_ctr('The quick brown fox') == 7\nassert     upper_ctr('THE QUICK BROWN FOX') == 9\nassert     upper_ctr('1234567890') == 0\nassert     upper_ctr('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 26\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     upper_ctr('UPPER') == 1\nassert     upper_ctr('UPPER And lower') == 2\nassert     upper_ctr('LOWER and UPPER') == 2\nassert     upper_ctr('LOWER') == 1\nassert     upper_ctr('lower') == 0\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     upper_ctr('UPPER') == 2, 'first test case'\nassert     upper_ctr('ABCDEF') == 0,'second test case'\nassert     upper_ctr('The quick brown fox jumps over the lazy dog') == 10, 'third test case'\nassert upper_ctr('') == 0, 'fourth test case'\nassert upper_ctr('Aa') == 1, 'fifth test case'\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     upper_ctr('the quick brown fox jumps over the lazy dog') == 10, 'Should be 10'\nassert     upper_ctr('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.') == 10, 'Should be 10'\n\ndef upper_first_char(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     combinations_list([]) == []\nassert     combinations_list([1, 2]) == [[1, 2]]\nassert     combinations_list([1, 2, 3]) == [[1, 2], [1, 3], [2, 3], [1, 2, 3]]\nassert     combinations_list([1, 2, 3, 4]) == [[1, 2, 3], [1, 2, 4], [1, 3, 4], [1, 2, 3, 4],\n                                               [2, 3, 4], [2, 4], [3, 4], [1, 2, 3, 4]]\nassert     combinations_list([1, 2, 3, 4]) == [[1, 2, 3], [1, 2, 4], [1, 3, 4], [1, 2, 3, 4],\n                                               [2, 3, 4], [2, 4], [3, 4], [1, 2, 3, 4]]\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef combinations_with_replacement(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     combinations_list([1, 2, 3]) == [\n        [1, 2, 3],\n        [1, 3, 2],\n        [2, 1, 3],\n        [2, 3, 1],\n        [3, 1, 2],\n        [3, 2, 1]\n    ], \"Wrong combination list\"\nassert     combinations_list([0, 1]) == [\n        [0, 1],\n        [1, 0]\n    ], \"Wrong combination list\"\nassert     combinations_list([1, 2]) == [\n        [1, 2],\n        [2, 1]\n    ], \"Wrong combination list\"\nassert     combinations_list([]) == [], \"Wrong combination list\"\nassert     combinations_list([1, 2, 3]) == [\n        [1, 2, 3],\n        [1, 3, 2],\n        [2, 1, 3],\n        [2, 3, 1],\n        [3, 1, 2],\n        [3, 2, 1]\n    ], \"Wrong combination list\"\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     combinations_list([]) == set()\nassert     combinations_list([2,4,6,8]) == {(2,),(2,4),(2,6),(2,8),(4,),(4,6),(4,8),(6,),(6,8),(8,)}\nassert     combinations_list([1,2,3,4]) == {(1,2),(1,3),(1,4),(2,3),(2,4),(3,4)}\nassert     combinations_list([1,2,3,4,5,6,7]) == {(1,2,3),(1,2,4),(1,2,5),(1,3,4),(1,3,5),(1,4,5),(2,3,4),(2,3,5),(2,4,5),(3,4,5)}\nassert     combinations_list([1,2,3,4,5,6,7,8]) == {(1,2,3,4),(1,2,3,5),(1,2,3,6),(1,2,3,7),(1,2,3,8),(1,2,4,5),(1,2,4,6),(1,2,4,7),(1,2,4,8),(1,2,5,6),(1,2,5,7),(1,2,5,8),(1,3,4,5),(1,3,4,6),(1,3,4,7),(1,3,4,8),(1,3,5,6),(1,3,5,7),(1,3,5,8),(1,4,5,6),(1,4,5,7),(1,4,5,8),(2,3,4,5),(2,3,4,6),(2,3,4,7),(2,3,4,8),(2,3,5,6),(2,3,5,7),(2,3,5,8),(2,4,5,6),(2,4,5,7),(2,4,5,8),(3,4,5,6),(3,4,5,7),(3,4,5,8),(3,5,6,7),(3,5,6,8),(3,5,7,8),(4,5,6,7),(4,5,6,8),(4,5,7,8),(5,6,7,8)}\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     combinations_list([1,2,3,4]) == [[1,2,3,4], [2,3,4], [3,4], [1,4], [2,4], [3,4]]\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     combinations_list([1,2,3]) == [[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1]]\nprint('passed')\n\ndef combinations_list_ordered(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    The combinations should be ordered.\n    '''\n    pass\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     combinations_list([1, 2, 3]) == [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\nassert     combinations_list([1, 2, 3, 4]) == []\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef max_subarray_product_improved(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    pass\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef max_subarray_product_subset(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    pass\n\nassert \n\ndef max_subarray_product_subset_2(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    pass\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_subarray_product([-2, 3, -4, -1, 6, -5]) == -6\nassert max_subarray_product([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 30\nassert max_subarray_product([-2, -5, -4, -3, -1, 6, -5]) == 0\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_subarray_product([-2,1,-3,4,-1,2,1,-5,4]) == 6\nassert     max_subarray_product([1,2,-3,4]) == 0\nassert     max_subarray_product([1,2,3,-4]) == 6\nassert     max_subarray_product([-1,-2,-3]) == -1\nassert     max_subarray_product([]) == 0\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_subarray_product([1,2,3,4,5]) == 30\nassert     max_subarray_product([0,1,1,1]) == 0\nassert     max_subarray_product([-1,-2,-3,-4,-5]) == -1\nassert     max_subarray_product([-5,-4,-3,-2,-1]) == -5\nassert     max_subarray_product([-2,-3,-4,-5,-6]) == -24\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_subarray_product([2,3,-2,4]) == 6\nassert     max_subarray_product([-2,-3]) == -6\nassert     max_subarray_product([-2, -3, -4]) == 24\nassert     max_subarray_product([1,2,-3,4,-5]) == 24\nassert     max_subarray_product([-1, -2, -3, -4, -5]) == 24\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_subarray_product([1,-2,3,-4,-6]) == 18, 'Test 1 Failed'\nassert     max_subarray_product([1,-2,-3,-4,-5]) == 6, 'Test 2 Failed'\nassert     max_subarray_product([-1,-2,-3,-4,-5]) == -1, 'Test 3 Failed'\nassert     max_subarray_product([-1,-2,-3,0,-4,-5]) == 0, 'Test 4 Failed'\nassert     max_subarray_product([-1,2,3,-4,5,-6]) == 60, 'Test 5 Failed'\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_subarray_product([3, 6, -2, -5, 7, 3]) == 21\nassert     max_subarray_product([-2, -1, 2, 1]) == 4\nassert     max_subarray_product([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 24"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef check_value_default(d, n):\n    return check_value(d, n)\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_value({'a': 1, 'b': 2, 'c': 3}, 'a') == True, \\\n        'incorrect return value'\nassert     check_value({'a': 1, 'b': 2, 'c': 3}, 'b') == False, \\\n        'incorrect return value'\nassert     check_value({'a': 1, 'b': 2, 'c': 3}, 'c') == False, \\\n        'incorrect return value'\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_value({'a':1, 'b':1, 'c':1}, 3) == True\nassert     check_value({'a':1, 'b':1, 'c':1}, 2) == True\nassert     check_value({'a':1, 'b':1, 'c':1}, 1) == True\nassert     check_value({'a':1, 'b':1, 'c':1}, 0) == False\nassert     check_value({'a':2, 'b':1, 'c':1}, 2) == False\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert check_value({1:1, 2:2, 3:3}, 1)\n\nassert not check_value({1:1, 2:2, 3:3}, 2)\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_value({'a': 1, 'b': 1, 'c': 2}, 2) == False, \"fail 1\"\nassert     check_value({'a': 1, 'b': 1, 'c': 2}, 3) == True, \"fail 2\"\nassert     check_value({'a': 1, 'b': 1, 'c': 2}, 0) == False, \"fail 3\"\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_value({\"a\": \"b\", \"c\": \"d\", \"e\": \"f\"}, 1) == True\nassert     check_value({\"a\": \"b\", \"c\": \"d\", \"e\": \"f\"}, 2) == False\nassert     check_value({\"a\": \"b\", \"c\": \"d\", \"e\": \"f\"}, 3) == True\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_value({\"a\":1, \"b\":1, \"c\":1}, \"a\") == True, \"Failed\"\nassert     check_value({\"a\":1, \"b\":1, \"c\":1}, \"d\") == False, \"Failed\"\nassert     check_value({\"a\":1, \"b\":1, \"c\":1}, \"e\") == False, \"Failed\"\nassert     check_value({\"a\":1, \"b\":1, \"c\":1}, \"f\") == True, \"Failed\"\nassert     check_value({\"a\":1, \"b\":1, \"c\":2}, \"a\") == True, \"Failed\"\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_value({'b':1, 'a':2, 'c':3}, 4) == False, '1st assertion failed'\nassert     check_value({'b':1, 'a':2, 'c':3}, 3) == True, '2nd assertion failed'\nassert     check_value({'b':1, 'a':2, 'c':3}, 2) == True, '3rd assertion failed'\nassert     check_value({'b':1, 'a':2, 'c':3}, 1) == True, '4th assertion failed'\nassert     check_value({'a':1, 'b':2, 'c':3}, 3) == False, '5th assertion failed'\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_value({'a': 1, 'b': 2, 'c': 3}, 3) == True, 'Wrong answer'\nassert     check_value({'a': 1, 'b': 2, 'c': 3}, 4) == False, 'Wrong answer'\nassert     check_value({'a': 1, 'b': 2, 'c': 3}, 0) == False, 'Wrong answer'\nassert     check_value({'a': 1, 'b': 2, 'c': 3}, -4) == False, 'Wrong answer'\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     drop_empty({'cat': 2, 'dog':3, 'dog':4, 'fish':5}) == {'cat': 2, 'dog':4, 'fish':5}\nassert    drop_empty({'cat': 'a', 'dog':'a', 'dog':'b'}) == {'cat': 'a', 'dog': 'b'}\n\ndef add_id(dict1):\n    '''\n    Write a function to add an id key to a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     drop_empty({'Name': 'Mike', 'Age': 25, 'Phone': 1234567}) == \\\n        {'Name': 'Mike', 'Age': 25, 'Phone': 1234567}, \\\n        'dropping an empty item from the dictionary should return it'\nassert     drop_empty({'Name': 'Mike', 'Age': 25, 'Phone': 1234567, 'Note': 'Cool'}) == \\\n        {'Name': 'Mike', 'Age': 25, 'Phone': 1234567}, \\\n        'dropping an empty item from the dictionary should return it'\nassert     drop_empty({'Name': 'Mike', 'Age': 25, 'Phone': 1234567, 'Note': 'Cool', 'Date': '1-1-1'}) == \\\n        {'Name': 'Mike', 'Age': 25, 'Phone': 1234567, 'Note': 'Cool'}, \\\n        'dropping an empty item from the dictionary should return it'\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     drop_empty({'a': 1, 'b': 2}) == {'a': 1}\nassert     drop_empty({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4}\nassert     drop_empty({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4}\nassert     drop_empty({}) == {}\nassert     drop_empty('') == {}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     drop_empty({'a': 1, 'b': 2, 'c': 3}) == {'a': 1, 'b': 2}\nassert     drop_empty({'a': 1, 'b': 2}) == {'a': 1, 'b': 2}\nassert     drop_empty({}) == {}\nassert     drop_empty('') == {}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     drop_empty({'a': 1, 'b': 2}) == {'b': 2}\nassert     drop_empty({'a': 1, 'b': 2, 'c': 1}) == {'a': 1, 'b': 2, 'c': 1}\nassert     drop_empty({'a': 1, 'b': 2, 'c': 1, 'd': {}}) == {'a': 1, 'b': 2, 'c': 1, 'd': {}}\nassert     drop_empty({'a': 1, 'b': 2, 'c': 1, 'd': {}, 'e': 5}) == {'a': 1, 'b': 2, 'c': 1, 'd': {}, 'e': 5}\nassert     drop_empty({}) == {}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndict1 = {'a': 1, 'b': 2, 'c':3}\n\ndrop_empty(dict1)\n\nassert {'a': 1, 'c': 3} == dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     drop_empty({'1':1, '2':2, '3':3}) == {'1':1, '2':2}\nassert     drop_empty({'1':1, '2':2}) == {'1':1, '2':2}\nassert     drop_empty({'1':1, '2':2, '3':3, '4':4}) == {'1':1, '2':2, '4':4}\nassert     drop_empty({}) == {}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     drop_empty({'a': 1, 'b': 2, 'c': 3}) == {'a': 1, 'c': 3}, \"Fail\"\nassert     drop_empty({}) == {}, \"Fail\"\nassert     drop_empty({'a': 1, 'b': 2, 'c': 3, 'd': {}, 'e': {}}) == {'a': 1, 'c': 3, 'd': {}, 'e': {}, 'b': 2}, \"Fail\""
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_product([1,2,3,4]) == 24, \"wrong!\"\nassert     max_product([1,2,3,4]) == 24, \"wrong!\"\nassert     max_product([3,3,3,3]) == 27, \"wrong!\"\nassert     max_product([1,2,3,4,5]) == 120, \"wrong!\"\nassert     max_product([1,2,3,4,5,6,7,8,9]) == 648, \"wrong!\"\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nmax_product([1,2,3]) == 3\nassert \nmax_product([1,2,3,4]) == 24\nassert \nmax_product([1,2,4,3]) == 24\nassert \nmax_product([1,2,3,5,4,2]) == 30\nassert \nmax_product([1,2,3,4,5,6,7,8,9]) == 336\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_product([1,4,5,2,7,1,2,1,2]) == 64\nassert max_product([]) == 1\nassert max_product([1,4,5,2,7,1,2,1,2,5]) == 120\nassert max_product([1,2,3,4,5]) == 120\nassert max_product([1,2,3,4,5,6]) == 60\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(max_product([1,4,5,2,7,8]))\nprint(max_product([1,4,5,2,7,8,6,9]))\nprint(max_product([-1,2,3,4,-5,6,-7,8,9]))\nprint(max_product([-1,-2,3,4,5,-6,7,8,-9]))\nprint(max_product([-1,2,3,4,5,-6,7,8,9])"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_product([1, 2, 3, 4]) == 24\nassert     max_product([1, 2, 3, 4, -2, 3, 4, 5, 4]) == 60\nassert     max_product([-2, -3, 4, -1, -3, -4, 1, 2, 2, 2, -4, -5, -3]) == -12\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nmax_product([1, 2, 3]) == 6\nassert max_product([1, 2, 3, 4, 5, 6, 7]) == 7\nassert max_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 72\nassert max_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 60\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     add_pairwise((0, 2, 4)) == (2, 4, 6)\nassert     add_pairwise((-5, -7, 3)) == (-6, -7, 2)\nassert     add_pairwise((1, 2, 3)) == (3, 4, 5)\nassert     add_pairwise((-4, -3, -2)) == (-2, -1, -1)\nassert     add_pairwise((1, 2, 3, 4)) == (4, 6, 8, 10)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add_pairwise(test_tup) == (1, 2, 3, 4, 5, 6)\nassert     add_pairwise((1, 2, 3, 4, 5, 6)) == (1, 2, 3, 4, 5, 6)\nassert     add_pairwise((0, 0, 0, 0, 0, 0)) == (0, 0, 0, 0, 0, 0)\nassert     add_pairwise((2, 4, 6)) == (2, 4, 6)\nassert     add_pairwise((4, 2, 1, 5)) == (6, 4, 2, 6)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add_pairwise((-2, -1, 0, 1, 2)) == (-4, -3, 0, 1, 2)\nassert     add_pairwise((0, 0, 0, 0, 0)) == (0, 0, 0, 0, 0)\nassert     add_pairwise((2, 3, 6, 1, 1)) == (2, 4, 6, 2, 3)\nprint('All tests passed!'"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_pairwise((3, 4, 5)) == (4, 5, 6)\nassert     add_pairwise((2, 1)) == (3, 2)\nassert     add_pairwise((3, 4, 5, 2, 1)) == (6, 7, 8)"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     add_pairwise( (4,5,6) ) == (5,6,7)\nassert     add_pairwise( (10,2,3) ) == (12,3,5)\nassert     add_pairwise( (1,2,3) ) == (3,4,5)\nassert     add_pairwise( (2,3,4) ) == (4,5,6)\nassert     add_pairwise( (10,20,30) ) == (20,30,40)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     add_pairwise((2,3,4,6)) == (2,3,4,10)\nassert     add_pairwise((5,1,3,5,10,12,1)) == (5,6,1,12,7,8,1)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert add_pairwise((1,2,3)) == (2,4,6)\nassert add_pairwise((-1,-2,-3)) == (0,-2,6)\nassert add_pairwise((10,4,2)) == (11,6,4)\nassert add_pairwise((1,3,5)) == (2,4,7)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add_pairwise( (1, 2, 3, 4) ) == (2, 4, 6, 8)\nassert     add_pairwise( (4, 2, 3, 1) ) == (5, 4, 3, 2)\nassert     add_pairwise( (2, 1, 4, 3) ) == (5, 3, 6, 4)\nassert     add_pairwise( (2, 3, 1, 4) ) == (5, 3, 4, 1)\nassert     add_pairwise( (2, 1, 3, 4) ) == (5, 4, 3, 2)\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_remainder([3, 1, 4], 5) == 24\nassert     find_remainder([2, 4, 1], 5) == 8\nassert     find_remainder([2, 1, 5], 5) == 10\nassert     find_remainder([3, 4, 1], 5) == 0\nassert     find_remainder([2, 1, 5], 1) == 4\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert find_remainder([2,3,4,5], 10) == 0\nassert find_remainder([6,7,8,9], 10) == 0\nassert find_remainder([1,2,3,4], 11) == 0\nassert find_remainder([1,2,3,4,5], 11) == 0\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert find_remainder([1,3,4],5) == 0\nassert find_remainder([4,5,6],5) == 1\nassert find_remainder([3,4,5],5) == -1\nassert find_remainder([1,2,3],5) == -1\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_remainder([1, 2, 3, 4], 7) == 24\nassert     find_remainder([1, 2, 3, 4], 11) == 36\nassert     find_remainder([1, 2, 3, 4], -1) == -24\nassert     find_remainder([1, 2, 3, 4], -2) == 24\nassert     find_remainder([1, 2, 3, 4], 0) == 0\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_remainder([1, 3, 5], 10) == 0\nassert     find_remainder([5, 3, 1], 10) == 15\nassert     find_remainder([4, 5, 1], 10) == 8\nassert     find_remainder([5, 3, 1], 100) == 15"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_remainder([1, 2, 3, 4], 10) == 60\nassert     find_remainder([2, 3, 4], 4) == 60\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_remainder([1,2,3,4,5], 5) == 1\nassert     find_remainder([1,2,3,4], 5) == 4\nassert     find_remainder([1,2,3,4,5,6,7,8,9], 10) == 1\nassert     find_remainder([1,2,3,4,5,6,7,8,9,10,11,12], 10) == 1\n\ndef find_divisors(n):\n    '''\n    Write a python function to find the array of divisors for a given number n.\n    '''\n    pass\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_Consecutive([1,2,3,4,5,6]) == True\nassert     check_Consecutive([1,2,3,5,6,7]) == False\nassert     check_Consecutive([1,2,4,6,9,10]) == True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_Consecutive([1, 2, 3]) == True, \"Should be True\"\nassert     check_Consecutive([1, 2, 4]) == False, \"Should be False\"\nassert     check_Consecutive([1, 2, 1]) == True, \"Should be True\"\nassert     check_Consecutive([1, 2, 3, 4, 5]) == False, \"Should be False\"\nassert     check_Consecutive([0, 1, 2, 3, 4]) == True, \"Should be True\"\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_Consecutive([1, 2, 4, 6, 8, 10]) == True\nassert     check_Consecutive([10, 10, 10, 10, 10, 10, 10]) == True\nassert     check_Consecutive([10, 10, 10, 10]) == True\nassert     check_Consecutive([10]) == True\nassert     check_Consecutive([10, 5]) == True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_Consecutive([10, 20, 30, 40, 50, 60, 70, 80]) == True, \"incorrect\"\nassert     check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]) == False, \"incorrect\"\nassert     check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8]) == False, \"incorrect\"\nassert     check_Consecutive([10, 20, 30]) == False, \"incorrect\"\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_Consecutive([1,2,3,4]) == True, \"1-4\"\nassert check_Consecutive([1,2,3,4,6]) == True, \"1-4-6\"\nassert check_Consecutive([1,2,3,5,7]) == False, \"1-3,5,7\"\nassert check_Consecutive([1,2,3,4,5,6]) == True, \"1-5,6\"\nassert check_Consecutive([1,2,3,4,5,6,7]) == True, \"1-5,6-7\"\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert check_Consecutive([1, 2, 3, 4]) == True\nassert check_Consecutive([4, 5, 6, 7]) == False\nassert check_Consecutive([1, 2, 5, 7, 9]) == True\nassert check_Consecutive([2, 4, 6, 8, 10]) == True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_Consecutive([1, 2, 3, 4, 5]) == True, \"Wrong result\"\nassert     check_Consecutive([1, 2, 3, 4, 5, 6]) == False, \"Wrong result\"\nassert     check_Consecutive([1, 2, 3, 4, 6]) == False, \"Wrong result\"\nassert     check_Consecutive([1, 2, 3, 4, 5, 6]) == False, \"Wrong result\"\nassert     check_Consecutive([1, 1, 1, 1, 1, 1]) == True, \"Wrong result\"\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_Consecutive([]), \"Invalid Input\"\nassert     check_Consecutive([1]), \"Invalid Input\"\nassert     check_Consecutive([1, 2, 3]), \"Invalid Input\"\nassert     check_Consecutive([1, 2, 3, 4]), \"Invalid Input\"\nassert     check_Consecutive([1, 2, 3, 4, 5]), \"Invalid Input\"\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tuple_intersection([(1, 2, 3), (2, 4, 6), (1, 3, 5)], [(1, 2, 3), (3, 5, 7), (2, 4, 6)]) == [(1, 2, 3), (2, 4, 6)]\nassert tuple_intersection([(1, 2, 3), (2, 4, 6), (1, 3, 5)], [(1, 2, 3), (3, 5, 7), (2, 4, 6), (2, 3, 5)]) == [(1, 2, 3), (2, 3, 5), (2, 4, 6)]\nassert tuple_intersection([(1, 2, 3), (2, 4, 6), (1, 3, 5)], [(1, 2, 3), (3, 5, 7), (2, 4, 6), (3, 5, 7)]) == [(1, 2, 3), (3, 5, 7)]"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_intersection([(1,2),(3,4),(1,2)], [(1,2),(3,4)]) == ((1,2),)\nassert     tuple_intersection([(1,2),(3,4),(1,2)], [(3,4),(1,2)]) == ((1,2),)\nassert     tuple_intersection([(1,2),(3,4),(1,2)], [(2,2),(4,4)]) == ()\nassert tuple_intersection([(1,2),(3,4),(1,2)], [(2,2),(2,2)]) == ()\nassert tuple_intersection([(1,2),(3,4),(1,2)], [(3,4),(2,2)]) == (2,2)\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_intersection(test_list1, test_list2) == None\nassert     tuple_intersection(test_list2, test_list1) == None\nassert     tuple_intersection(test_list1, test_list2) == None\nassert tuple_intersection(test_list2, test_list1) == None\n\nprint('Correct')\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tuple_intersection([(3, 2), (2, 4), (4, 3), (6, 5), (5, 2)], [(2, 2), (6, 7), (5, 5), (8, 9), (1, 1), (4, 6), (7, 8), (9, 9), (8, 8), (7, 7)]) == \\\n    [(2, 2), (6, 7), (8, 8), (7, 7)]\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tuple_intersection((1, 2, 3), (3, 2, 4)) == (3,)\nassert tuple_intersection((1, 2, 3), (4, 3, 2)) == (3,)\nassert tuple_intersection((1, 2, 3), (1, 2, 4)) == ()\nassert tuple_intersection((1, 2, 3), (2, 3, 4)) == (3,)\nassert tuple_intersection((1, 2, 3), (3, 1, 2)) == (3,)\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tuple_intersection([(1,2),(3,4),(3,4),(4,5),(1,2)],[(1,2),(3,4),(4,5),(3,4),(2,1)]) == [(1,2),(2,1)]\nassert     tuple_intersection([(1,2),(3,4),(3,4),(4,5),(1,2)],[(1,2),(3,4),(4,5),(3,4),(2,1)]) == [(1,2)]\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tuple_intersection([(1,2),(3,4),(1,2)],[(2,1),(1,1),(3,1)]) ==     [[1,1],[3,1]]\nassert     tuple_intersection([(1,2),(2,1),(3,1)],[(1,1),(2,1),(3,2)]) ==     [[1,1],[2,1]]\nassert     tuple_intersection([(1,2),(2,1),(3,1)],[(1,1),(3,1),(2,1)]) ==     [[1,1],[3,1]]\nassert     tuple_intersection([(1,2),(2,1),(3,1)],[(2,1),(1,1),(3,2)]) ==     [[2,1]]\nassert     tuple_intersection([(1,2),(2,1),(3,1)],[(3,1),(1,1),(2,2)]) ==     [[1,1]]\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tuple_intersection([(1, 2), (1, 3), (1, 4), (2, 1), (2, 3), (2, 4)], [(2, 3), (1, 4), (2, 1)]) == [(2, 3)]\nassert     tuple_intersection([(1, 2), (2, 1), (1, 3), (3, 2)], [(1, 2), (2, 1), (3, 2)]) == [(1, 2), (2, 1), (3, 2)]\nassert     tuple_intersection([(1, 2), (1, 3), (1, 4), (2, 1), (2, 3), (2, 4)], [(1, 2), (2, 1), (2, 3), (2, 4)]) == [(1, 2), (2, 1)]\n\n\ndef tuple_intersection_recursive(test_list1, test_list2):\n    '''\n    Write a recursive function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    pass\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tuple_intersection([(1, 2, 3), (2, 3, 5), (1, 2, 6)], [(2, 5, 6)]) == [(2, 5, 6)]\nassert tuple_intersection([(1, 2, 3), (2, 3, 5), (1, 2, 6)], [(2, 5, 6), (3, 5, 6)]) == [(2, 5, 6)]\nassert tuple_intersection([(1, 2, 3), (2, 3, 5), (1, 2, 6)], [(2, 5, 6), (3, 7, 8)]) == [(2, 5, 6)]\nassert tuple_intersection([(1, 2, 3), (2, 3, 5), (1, 2, 6)], [(3, 7, 8), (2, 5, 6)]) == [(3, 7, 8)]\nassert tuple_intersection([(1, 2, 3), (2, 3, 5), (1, 2, 6)], [(3, 5, 6), (2, 5, 6)]) == [(3, 5, 6)]\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     replace_char('hello','l','m') =='mmellom'\nassert     replace_char('hello','e','l') == 'hello'\nassert     replace_char('hello','o','o') == 'oo'\nassert     replace_char('hello','h','l') == 'll'\nassert     replace_char('hello','l','g') == 'ggll'\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     (replace_char('abcd', 'd', 'D') == 'abcd' )\nassert     (replace_char('abcd', 'z', 'Z') == 'abcd' )\nassert     (replace_char('abcd', 'l', 'L') == 'abcd' )\nassert     (replace_char('abcd', 'a', 'A') == 'Acd' )\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     replace_char('hello','l','k') == 'hello k','replace_char test error'\nassert     replace_char('hi','i','I') == 'hi I','replace_char test error'\nassert     replace_char('','','s') =='s','replace_char test error'\nassert     replace_char('','','') == '','replace_char test error'\nassert     replace_char('a','a','b') == 'b','replace_char test error'\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     replace_char(\"sri\",\"s\",\"r\") == \"rri\"\nassert     replace_char(\"pavan\",\"a\",\"b\") == \"bob\"\nassert     replace_char(\"david\",\"i\",\"i\") == \"did\"\nassert     replace_char(\"david\",\"d\",\"D\") == \"DD\"\nassert     replace_char(\"pavan\",\"a\",\"b\") == \"bob\"\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nreplace_char('Hello, world', 'l', '*') == 'H*ll, world'\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     replace_char('a,b,c','b','A') == 'a,A,c'\nassert     replace_char('a,b,c','e','X') == 'a,X,c'\nassert     replace_char('a,b,c','A',' ') == 'a,b,c'\nassert     replace_char('a,b,c','X','Y') == 'a,b,c'\nassert     replace_char('a,b,c','c','X') == 'a,b,X'\nprint('\\n>>> Passed all test cases')\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     replace_char('abcd','a','A') == 'AbCd', 'abcde'\nassert     replace_char('abcd','e','E') == 'abCE', 'abcd'\nassert     replace_char('abcd','d','D') == 'AbCD', 'abcd'\nassert     replace_char('abcd','a','A') == 'AbcD', 'abcde'\nassert     replace_char('abcd','B','b') == 'AbCb', 'abcd'\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     replace_char(\"h e l l o\",'o', 'h') == \"hello\"\nassert     replace_char(\"x\",'o', 'h') == \"h\"\nassert     replace_char(\"hello\",'o', 'h') == \"hhllo\"\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     replace_char('abcdefg','c','x') == 'xefgxedx', \"replace_char is not correct\"\nassert     replace_char('abcdefg','z','a') == 'xedxeg', \"replace_char is not correct\"\nassert     replace_char('abcdefg','b','q') == 'qedxeg', \"replace_char is not correct\"\nassert     replace_char('abcdefg','d','q') == 'xegqedx', \"replace_char is not correct\"\nassert     replace_char('abcdefg','c','q') == 'qedxeg', \"replace_char is not correct\"\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_counter({1:3, 2:4, 3:1}) == {3:1, 1:3, 2:4}\nassert     sort_counter({1:3, 2:4, 3:1, 4:1}) == {4:1, 3:1, 1:3, 2:4}\n\ndef sort_counter_improved(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    pass\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert sort_counter({'a': 1, 'b': 2, 'c': 3}) == {'a': 1, 'c': 3, 'b': 2}\nassert sort_counter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}\nassert sort_counter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10}\nassert sort_counter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12,'m': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18,'s': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12,'m': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18,'s': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_counter({'a': 1, 'b': 2}) == {'a': 1, 'b': 2}\nassert     sort_counter({'a': 1, 'b': 2, 'c': 3}) == {'a': 1, 'b': 2, 'c': 3}\nassert     sort_counter({'a': 1, 'b': 2, 'c': 3, 'd': 4}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4}\nassert     sort_counter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\nassert     sort_counter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9}\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_counter({'a': 5, 'c': 1, 'b': 2, 'd': 4}) == \\\n        {'c': 1, 'a': 5, 'b': 2, 'd': 4}\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_counter({'a': 2, 'b': 1, 'c': 3}) == {'a': 1, 'c': 3, 'b': 2}\nassert     sort_counter({'a': 1, 'b': 2, 'c': 3}) == {'a': 1, 'b': 2, 'c': 3}\nassert     sort_counter({'a': 1, 'b': 2, 'c': 3, 'd': 4}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4}\nassert     sort_counter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_counter({'a':10, 'b':1, 'c':22, 'd':2, 'e':33}) == \n        {'b': 1, 'c': 2, 'd': 2, 'e': 33, 'a': 10}\nassert sort_counter({'a':10, 'b':1, 'c':22, 'd':2, 'e':33}) == \n        {'d': 2, 'b': 1, 'a': 10, 'c': 22, 'e': 33}\nassert sort_counter({'a':10, 'b':1, 'c':22, 'd':2, 'e':33}) == \n        {'a': 10, 'b': 1, 'c': 22, 'd': 2, 'e': 33}\nassert sort_counter({'a':10, 'b':1, 'c':22, 'd':2, 'e':33}) == \n        {'b': 1, 'c': 22, 'a': 10, 'd': 2, 'e': 33}\n\ndef sort_counter_by_value(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    pass\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_counter({1:5, 2:1, 3:4}) ==    [(1, 5), (2, 1), (3, 4)]\nassert     sort_counter({1:5, 2:1, 3:4, 4:3, 5:2, 6:1}) ==    [(1, 5), (2, 1), (3, 4), (4, 3), (5, 2), (6, 1)]\nassert     sort_counter({1:5, 2:1, 3:4, 4:3, 5:2, 6:1, 7:0}) ==    [(1, 5), (2, 1), (3, 4), (4, 3), (5, 2), (6, 1), (7, 0)]\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_counter({'a': 1, 'b': 1, 'c': 1, 'd': 2}) == {'a': 1, 'c': 1, 'b': 1, 'd': 2}\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_counter({'a': 3, 'b': 4, 'c': 1}) == {'a': 1, 'b': 2, 'c': 3}\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_counter({\"a\": 4, \"b\": 1, \"c\": 2}) == {\"a\": 4, \"b\": 1, \"c\": 2} \nassert     sort_counter({\"c\": 2, \"b\": 1, \"a\": 4}) == {\"c\": 2, \"b\": 1, \"a\": 4} \nassert     sort_counter({\"a\": 4, \"b\": 1, \"c\": 2, \"d\": 1}) == {\"a\": 4, \"b\": 1, \"c\": 2, \"d\": 1} \nassert     sort_counter({\"a\": 4, \"b\": 1, \"c\": 2, \"d\": 1, \"e\": 3}) == {\"a\": 4, \"b\": 1, \"c\": 2, \"d\": 1, \"e\": 3} \nassert     sort_counter({\"a\": 4, \"b\": 1, \"c\": 2, \"d\": 1, \"e\": 3, \"f\": 3}) == {\"a\": 4, \"b\": 1, \"c\": 2, \"d\": 1, \"e\": 3, \"f\": 3} \n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert big_sum([2, 3, 4, 2, 1, 7, 3]) == 6\nassert big_sum([4, 4, 4, 4, 4]) == 4\nassert big_sum([6, 0, 4, 3, 0, -2]) == 5\n\n\ndef big_diff(arr):\n    '''\n    Given an array of integers, return the largest absolute difference between\n    any two elements in the array. \n    The absolute difference of a number x and y is defined as |x-y|.\n    '''\n    pass\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     big_sum([1,2,3,4]) == 7\nassert big_sum([-10,-4,0,3]) == 5\nassert big_sum([-4,-2,-1,0]) == 5\nassert big_sum([-1,2,1,-3]) == 4\nassert big_sum([-3,-1,-2]) == -2\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    \n    \n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     big_sum([1,-10,-20,-30,40,40,40,60,90,-100]) == 60\nassert     big_sum([100,0,-100]) == 100\nassert     big_sum([1,-20,-20,-30,40,40,40,60,90]) == -30\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     big_sum([1,3,5,7,10]) == 21, \"Should be 21\"\nassert     big_sum([-3, -5, -7, -10]) == -18, \"Should be -18\"\nassert     big_sum([2, 2, 2, 2]) == 8, \"Should be 8\"\n\n\ndef max_list(lst):\n    '''\n    Write a python function to find the maximum value in a given array.\n    '''\n    pass\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     big_sum([10,2,3,4,5]) == 16\nassert     big_sum([5,7,11,15]) == 22\nassert     big_sum([2,3,5,7,11,15]) == 31\nassert     big_sum([1]) == 1\nassert     big_sum([]) == 0\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nbig_sum([9, 4, 6, 5, 7, 9]) == 24, 'incorrect'\nprint('Tests passed')\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     big_sum([1,2,3,4,5]) == 15\nassert     big_sum([-1,1,2,3,4,-5]) == 9\nassert     big_sum([1,-2,3,4,5]) == 7\n\ndef sort_array(nums):\n    '''\n    Write a python function to sort an array of 0s, 1s and 2s in ascending order.\n    '''\n    pass\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     big_sum([5, 7, 1, 2, 3, 4, -1, -2, -3, -4, -5]) == 1\nassert     big_sum([]) == 0\nassert     big_sum([-1, -2]) == -3\nassert     big_sum([-5, -2, -2]) == -7\nassert     big_sum([-1, -2, -3]) == -1\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_lower(\"hello\") == \"hello\", \"Type Error\"\nassert     is_lower(\"HELLO\") == \"hello\", \"Type Error\"\nassert     is_lower(\"hello\") == \"hello\", \"Type Error\"\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nis_lower('Hello') == True\nis_lower('HELLO') == True\nis_lower('HELLO') == False\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis_lower('HELLO WORLD') == False\nis_lower('HELLO WORLD') == True\nis"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_lower(\"PYTHON\") == True\nassert     is_lower(\"python\") == True\nassert     is_lower(\"Python\") == False\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_lower('Hello') == False\nassert     is_lower('HELLO') == False\nassert     is_lower('hello') == False\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef is_upper(string):\n    '''\n    Write a python function to convert the given string to upper case.\n    '''\n    pass\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_lower('Hello World') == 'hello world'\nassert     is_lower('hello, world!') == 'hello, world!'\nassert     is_lower('HELLO, WORLD!') == 'hello, world!'\nassert     is_lower('hello, world!') == 'hello, world!'\nassert     is_lower('hello, world!') == 'hello, world!'\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_lower(\"pYthon\") == True\nassert     is_lower(\"python\") == True\nassert     is_lower(\"PYTHON\") == False\nassert     is_lower(\"PYTHON\") == False\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_lower(\"HELLO\") == \"hello\", \"Wrong result\"\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_lower(\"sArthi\") == \"sarthi\"\nassert     is_lower(\"sarthik\") == \"sarthik\"\nassert     is_lower(\"sarthikshitra\") == \"sarthikshitra\"\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == '__main__':\n    # Test 1\n    test_str_1 = \"Hi my name is Ravi\"\n    test_str_2 = \"My name is Ravi\"\n\n    print(is_lower(test_str_1))\n    print(is_lower(test_str_2))\n    \n    # Test 2\n    test_str_3 = \"This is also a test of the is_lower function\"\n    test_str_4 = \"This is also a test of the is_lower function\"\n\n    print(is_lower(test_str_3))\n    print(is_lower(test_str_4))\n    \n    # Test 3\n    test_str_5 = \"123456789\"\n    test_str_6 = \"123456789\"\n\n    print(is_lower(test_str_5))\n    print(is_lower(test_str_6))\n    \n    # Test 4\n    test_str_7 = \"Hi my name is Ravi\"\n    test_str_8 = \"Hi my name is Ravi\"\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_lowercase('aa') == 'aa', \"1st\"\nassert     remove_lowercase('aaBb') == 'aAbB', \"2nd\"\nassert     remove_lowercase('aaBa') == 'aAaBa', \"3rd\"\nassert     remove_lowercase('aaaaBbb') == 'aAaBaBb', \"4th\"\nassert     remove_lowercase('aaaaBa') == 'aAaBaBa', \"5th\"\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_lowercase(\"aBCD\") == \"ABCD\"\nassert     remove_lowercase(\"abcd\") == \"\"\nassert     remove_lowercase(\"\") == \"\"\nassert     remove_lowercase(\"     \") == \"\"\nassert     remove_lowercase(\"     abc\") == \"\"\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_lowercase(\"a1b2\") == \"a1b2\", \"Should be a1b2\"\nassert     remove_lowercase(\"abCD\") == \"abcd\", \"Should be abcd\"\nassert     remove_lowercase(\"A1b2\") == \"abcd\", \"Should be abcd\"\n\ndef remove_spaces(str1):\n    '''\n    Write a function to remove leading and trailing spaces from a given string.\n    '''\n    pass\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_lowercase(\"hello world\") == \"hello world\", \"incorrect output\"\nassert     remove_lowercase(\"Hello world\") == \"Hello world\", \"incorrect output\"\nassert     remove_lowercase(\"HELLO world\") == \"HELLO world\", \"incorrect output\"\nassert     remove_lowercase(\"HELLO WORLD\") == \"HELLO WORLD\", \"incorrect output\"\nassert     remove_lowercase(\"hello wOrld\") == \"hello wOrld\", \"incorrect output\"\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_lowercase(\"This is a test\") == \"This is a test\"\nassert remove_lowercase(\"eReAdO\") == \"eReAdO\"\nassert remove_lowercase(\"HELLO\") == \"HELLO\"\nassert remove_lowercase(\"6Z\") == \"6Z\"\nassert remove_lowercase(\"\") == \"\"\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_lowercase('') == ''\nassert     remove_lowercase('A string with lowercase lowercase letters.') =='string with lowercase letters.'\nassert     remove_lowercase('wrestling') == 'wrestling'\nassert     remove_lowercase('I love for God.') == 'I love for God.'\nassert     remove_lowercase('i love for GOD.') == 'i love for GOD.'\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef remove_special_chars(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    pass\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nremove_lowercase(\"   a   b    \") == \" a b \"\nremove_lowercase(\"abcd\") == \"abcd\"\nremove_lowercase(\"C\") == \"\"\nremove_lowercase(\" \") == \"\"\nremove_lowercase(\" \") == \"\"\nremove_lowercase(\"\") == \"\"\n\n\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    pass\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_lowercase(\"this is a test\") == \"tihs is a tes\"\nassert     remove_lowercase(\"this is a test\") == \"test\"\nassert     remove_lowercase(\"\") == \"\"\nassert     remove_lowercase(\"Hello\") == \"Hello\"\nassert     remove_lowercase(\"I love this\") == \"I lv this\"\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_lowercase(\"\") == \"\"\nassert     remove_lowercase(\"in_s4\") == \"ins4\"\nassert     remove_lowercase(\"i_n4\") == \"in4\"\nassert     remove_lowercase(\"i_n\") == \"in\"\nassert     remove_lowercase(\"i_a\") == \"ia\"\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     first_Digit(11) == 1, \"The number is: 11 and first digit should be 1\"\nassert     first_Digit(11) == 1, \"The number is: 11 and first digit should be 1\"\nassert     first_Digit(11) == 1, \"The number is: 11 and first digit should be 1\"\nassert     first_Digit(11) == 1, \"The number is: 11 and first digit should be 1\"\nassert     first_Digit(11) == 1, \"The number is: 11 and first digit should be 1\"\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nfirst_Digit(10) == 1\nfirst_Digit(121) == 1\nfirst_Digit(12) == 2\nfirst_Digit(1023) == 2\n\n\ndef last_Digit(n) :  \n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     first_Digit(123) == 1\nassert     first_Digit(654321) == 1\nassert     first_Digit(23456789) == 1\nassert     first_Digit(43256789) == 1\nassert     first_Digit(1) == 1\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nfirst_Digit(48) == 2, first_Digit(48)\nassert \nfirst_Digit(1000) == 1, first_Digit(1000)\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     first_Digit(123) == 1\nassert     first_Digit(111) == 1\nassert     first_Digit(999) == 9\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     first_Digit(12345)    == 1\nassert first_Digit(4567)    == 7\nassert first_Digit(45678)    == 8\nassert first_Digit(456789)    == 9\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     first_Digit(4321) == 4\nassert     first_Digit(100) == 1\nassert     first_Digit(123456789) == 6\nassert     first_Digit(4) == 4"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     first_Digit(101) == 1, \"first_Digit is not giving correct output\"\nassert     first_Digit(100) == 1, \"first_Digit is not giving correct output\"\nassert     first_Digit(11) == 1, \"first_Digit is not giving correct output\"\nassert     first_Digit(12) == 0, \"first_Digit is not giving correct output\"\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef RemoveDuplicates(list):\n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    pass\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     Split([1,2,3,4,5,6,7,8]) == [1,3,5,7,9]\nassert     Split([]) == []\nassert     Split([2,4,6,8,10]) == [2,6,8,10]"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    Split([1,2,3,4,5,6]) == [1,3,5]\n    \nassert \n    Split([1,2,3,4,5,6]) == [1,3,5]\n    \nassert \n    Split([1,2,3,4,5,6]) == [1,3,5]\n    \nassert \n    Split([1,2,3,4,5,6]) == [1,3,5]\n    \nassert \n    Split([1,2,3,4,5,6]) == [1,3,5]\n    \n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Split([3,4,6,9,10,11,12,13,14]) == [3,10,11,14], \"Wrong output\"\nassert     Split([5,6,7,8,9]) == [5,6,7,8,9], \"Wrong output\"\nassert     Split([1,2,3,4,5,6,7,8]) == [1,3,5,7,9], \"Wrong output\"\nassert     Split([]) == [], \"Wrong output\"\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Split([1,2,3,4,5,6,7,8,9]) == [1,3,5,7,9]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    "
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]\nassert     Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 3, 5, 7, 9, 11]\nassert     Split([]) == []\nassert     Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == []"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     difference(0) == 0, \"First test case failed\"\nassert     difference(1) == 1, \"Second test case failed\"\nassert     difference(2) == 1, \"Third test case failed\"\nassert     difference(3) == 1, \"Fourth test case failed\"\nassert     difference(4) == 1, \"Fifth test case failed\"\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     difference(5) == 12 \nassert     difference(2) == 9 \nassert     difference(1) == 9 \nassert     difference(0) == 0 \nassert     difference(3) == 0 \n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    difference(n) == n ** 3 - n\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     difference(1) == 1\nassert     difference(2) == 1\nassert     difference(3) == 1\nassert     difference(4) == 2\nassert     difference(5) == 3\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     difference(3) == 1\nassert     difference(6) == 2\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert difference(2) == 15\nassert difference(5) == 20\nassert difference(8) == 49\nassert difference(13) == 477\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef remainder(n) :\n    '''\n    Write a python function to find the remainder of the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     difference(4) == 25, \"Test 1 is wrong\"\nassert     difference(5) == 26, \"Test 2 is wrong\"\nassert     difference(6) == 27, \"Test 3 is wrong\"\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     difference(0) == 0\nassert     difference(1) == 1\nassert     difference(2) == 2\nassert     difference(3) == 3\nassert     difference(4) == 5\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Odd_Pair([1,2,3,4],4) == 2, \"find_Odd_Pair([1,2,3,4],4) should return 2, but returned %s.\" % (find_Odd_Pair([1,2,3,4],4))\nassert     find_Odd_Pair([1,2,3,4],5) == 0, \"find_Odd_Pair([1,2,3,4],5) should return 0, but returned %s.\" % (find_Odd_Pair([1,2,3,4],5))\nassert     find_Odd_Pair([1,2,3,4],6) == 1, \"find_Odd_Pair([1,2,3,4],6) should return 1, but returned %s.\" % (find_Odd_Pair([1,2,3,4],6))\n\nprint('correct')\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Odd_Pair([1,5,7,9],6) == 2\nassert     find_Odd_Pair([1,5,7,9],5) == 1\nassert     find_Odd_Pair([1,5,7,9],4) == 0\nassert     find_Odd_Pair([1,5,7,9],3) == 0\nassert     find_Odd_Pair([1,5,7,9],2) == 0\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Odd_Pair([1,2,3,4,5],6) == 3, \"should return 1\"\nassert     find_Odd_Pair([1,2,3,4,5],1) == 0, \"should return 0\"\nassert     find_Odd_Pair([1,2,3,4,5],9) == 0, \"should return 0\"\nassert     find_Odd_Pair([1,2,3,4,5],8) == 2, \"should return 2\"\nassert     find_Odd_Pair([1,2,3,4,5],7) == 1, \"should return 1\"\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Odd_Pair(A =[1,2,3,4],N = 5) == 2, \"Function does not return the correct number of pairs whose xor value is odd.\""
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nif __name__ == \"__main__\" : \n    # test 1\n    print(find_Odd_Pair([1,2,3,4,5],6))\n    # test 2\n    print(find_Odd_Pair([1,1,2,2,3,3],4))\n    # test 3\n    print(find_Odd_Pair([1,2,3,4,5,6],3)"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_Odd_Pair([1,2,3,4,5,6],8) == 1, \"For N = 8, the expected output is 1\"\nassert     find_Odd_Pair([1,2,3,4,5,6],7) == 2, \"For N = 7, the expected output is 2\"\nassert     find_Odd_Pair([1,2,3,4,5,6],6) == 3, \"For N = 6, the expected output is 3\"\nassert     find_Odd_Pair([1,2,3,4,5,6],5) == 4, \"For N = 5, the expected output is 4\"\nassert     find_Odd_Pair([1,2,3,4,5,6],4) == 5, \"For N = 4, the expected output is 5\"\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Odd_Pair([1,2,3],2) == 2\nassert     find_Odd_Pair([1,2,3,4,5,6,7],3) == 0\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Odd_Pair(A = (1,3,5,6,7), N = 7) == 1\nassert     find_Odd_Pair(A = (1,3,5,6,7), N = 8) == 0\nassert     find_Odd_Pair(A = (2,4,6,8,10), N = 10) == 2\nassert     find_Odd_Pair(A = (2,4,6,8,10), N = 11) == 0\nassert     find_Odd_Pair(A = (1,3,5,6,7), N = 9) == 0\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     toggle_string('giraffe') == 'GIRAAFF'\nassert     toggle_string('GIRAAFF') == 'giraffe'\nassert     toggle_string('Giraffe') == 'giraffE'\nassert     toggle_string('giraff') == 'GirAfE'\nassert     toggle_string('girAFF') == 'GirAAfE'\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     toggle_string('Hello') == 'hELLO'\nassert     toggle_string('HELLO') == 'hELLO'\nassert     toggle_string('HELLO WORLD') == 'hELLO wORLD'\nassert     toggle_string('HELLO WORLD ') == 'hELLO wORLD'\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     toggle_string('hElLOo') == 'hElLOo'\nassert     toggle_string('Hello') == 'eLlO'\nassert     toggle_string('hello') == 'ehllo'\nassert     toggle_string('HELLO') == 'elLo'\n\ndef total_even_numbers(n):\n    '''\n    Write a program to return the total number of even numbers from a list of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     toggle_string('camelCase') == 'CamelCase', 'Toggle wrong'\nassert     toggle_string('CamelCase') == 'CamelCase', 'Toggle wrong'\nassert     toggle_string('camelCase') == 'CamelCase', 'Toggle wrong'\nassert     toggle_string('Camel Case') == 'Camel Case', 'Toggle wrong'\nassert     toggle_string('camel') == 'camel', 'Toggle wrong'\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     toggle_string('hello') == 'hhlo'\nassert     toggle_string('Hello') == 'hHelO'\nassert     toggle_string('HeLLo') == 'hHelO'\nassert     toggle_string('HELLO') == 'hHelO'\nassert     toggle_string('hELLO') == 'hHelO'\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     toggle_string('cafE') == 'CaFE'\nassert     toggle_string('test') == 'TESt'\nassert     toggle_string('cake') == 'CaKE'"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     toggle_string('gHTeR@l2') == 'GHTeRl2'\nassert     toggle_string('thisIsString') == 'ThIsSiStRiNg'\nassert     toggle_string('wowWoW') == 'owWoW'\nassert     toggle_string('11') == '1'\nassert     toggle_string('no') == 'no'\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     toggle_string(\"Python\") == \"pYTHON\", \"toggle_string('Python')\"\nassert     toggle_string(\"a\") == \"a\", \"toggle_string('a')\"\nassert     toggle_string(\"PYTHON\") == \"python\", \"toggle_string('PYTHON')\"\nassert     toggle_string(\"PyThOn\") == \"Python\", \"toggle_string('PyThOn')\"\nassert     toggle_string(\"PyThOn\") == \"pYthOn\", \"toggle_string('PyThOn')\"\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     toggle_string('Hello') == 'hhELLO'\nassert     toggle_string('HELLO') == 'hELLO'\nassert     toggle_string('HELLO') == 'hELLO'\nassert     toggle_string('hello') == 'hello'\nassert     toggle_string('HELLO') == 'Hello'\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     digit_distance_nums(19, 17) == 6, 'incorrect'\nassert     digit_distance_nums(19, 14) == 1, 'incorrect'\nassert     digit_distance_nums(16, 17) == 3, 'incorrect'\nassert     digit_distance_nums(16, 14) == 2, 'incorrect'\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     digit_distance_nums(1,1) == 0\nassert     digit_distance_nums(1,2) == 1\nassert     digit_distance_nums(3,9) == 1\nassert     digit_distance_nums(17,89) == 2\nassert     digit_distance_nums(48,50) == 1\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     digit_distance_nums(12, 21) == 6\nassert     digit_distance_nums(0, 0) == 0\nassert     digit_distance_nums(1, 2) == 1\nassert     digit_distance_nums(3, 4) == 2\nassert     digit_distance_nums(5, 6) == 3\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     digit_distance_nums(2,7) == 3, \"Should be 3\"\nassert     digit_distance_nums(0,5) == 5, \"Should be 5\"\nassert     digit_distance_nums(9,7) == 0, \"Should be 0\"\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert         digit_distance_nums(12, 14) == 0\nassert         digit_distance_nums(1, 2) == 1\nassert         digit_distance_nums(23, 24) == 1\nassert         digit_distance_nums(4, 5) == 2\n\ndef digit_distance_integers(a, b):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    pass\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     digit_distance_nums(1221,1230) == 63\nassert     digit_distance_nums(1221,1210) == 63\nassert     digit_distance_nums(1221,1231) == 64\nassert     digit_distance_nums(1221,1211) == 64\nassert     digit_distance_nums(1221,1221) == 0\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     digit_distance_nums(1, 4) == 1\nassert digit_distance_nums(7, 9) == 1\nassert digit_distance_nums(9, 8) == 1\nassert digit_distance_nums(9, 9) == 0\nassert digit_distance_nums(10, 10) == 0\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     digit_distance_nums(7, -7) == 0, 'incorrect'\nassert     digit_distance_nums(7, -7) == 7, 'incorrect'\nassert     digit_distance_nums(7, -9) == 1, 'incorrect'\n\ndef digit_sum_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    pass\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     digit_distance_nums(5, 2) == 2\nassert     digit_distance_nums(10, 6) == 5\nassert     digit_distance_nums(5, 2) == 3\nassert     digit_distance_nums(1, 5) == -1\nassert     digit_distance_nums(1, 2) == 0\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_sub_array_sum([1, 2, 3, 4, 5], 5) == 15, \"Wrong answer, expected 15\"\nassert     max_sub_array_sum([1, 2, 3, -4, -2], 1) == 8, \"Wrong answer, expected 8\"\nassert     max_sub_array_sum([-1, 1, -2, 0, -4, 3, 4, -7, 7, 1], 6) == 17, \"Wrong answer, expected 17\"\nassert     max_sub_array_sum([4, 7, 8, 7, -6, -3, 4, 6, 1, 2], 5) == 19, \"Wrong answer, expected 19\"\nassert     max_sub_array_sum([4, 7, 8, 7, -6, -3, 4, 6, 1, 2], 2) == 8, \"Wrong answer, expected 8\"\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_sub_array_sum([2,3,-2,4,5,-6,7],7)==15\nassert     max_sub_array_sum([2,3,-2,4,5,-6,7,-2],7)==13\nassert     max_sub_array_sum([3,-2,-4,5,6],0)==0\nassert     max_sub_array_sum([0,0],1)==0\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_sub_array_sum([4, 2, -4, 2, -3, 2, 5, -1, -2, -1], 6) == 10, \"Expected 10, but got %d\" % max_sub_array_sum([4, 2, -4, 2, -3, 2, 5, -1, -2, -1], 6)\nassert max_sub_array_sum([1], 1) == 1, \"Expected 1, but got %d\" % max_sub_array_sum([1], 1)\nassert max_sub_array_sum([-1, -2], 0) == 0, \"Expected 0, but got %d\" % max_sub_array_sum([-1, -2], 0)\nassert max_sub_array_sum([1, 2, -4, 2, -3, 2, 5, -1, -2, -1], 6) == 5, \"Expected 5, but got %d\" % max_sub_array_sum([1, 2, -4, 2, -3, 2, 5, -1, -2, -1], 6)\nassert max_sub_array_sum([4, 2, -4, 2, -3, 2, 5, -1, -2, -1], 10) == 13, \"Expected 13, but got %d\" % max_sub_array_sum([4, 2, -4, 2, -3, 2, 5, -1, -2, -1], 10)\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef max_sub_array_sum(a, size):\n    max_sum = 0\n    max_start, max_end = 0, 0\n    for i in range(size):\n        max_sum = max(a[i], max_sum + a[i])\n        if max_sum > max_sum:\n            max_start = i\n            max_end = i\n    return max_start, max_end\n\nassert max_sub_array_sum([2,3,-2,4], 3) == (1,2)\nassert max_sub_array_sum([3,6,-5,7], 3) == (2,3)\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_sub_array_sum([-2,1,-3,4,-1,2,1,-5,4], 8) == 6\nassert     max_sub_array_sum([0,2,3,4,1], 5) == 5\nassert     max_sub_array_sum([1,-1,-2,3], 5) == 3\nassert     max_sub_array_sum([1,2,3], 4) == 3\nassert     max_sub_array_sum([1,-1,2,-3], 4) == 2\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert union_elements((), ()) == ()\nassert union_elements((1,), (2,)) == (1, 2)\nassert union_elements((1,2), (2,3)) == (1, 2, 3)\n\ndef find_nearest_element(test_list, test_val):\n    '''\n    Write a function to find the nearest element in a sorted list of elements which are also the elements of the array.\n    The output should be the index of the element in the input array. If there are more than one elements with the same distance from the input value, \n    then output the index of the first element with the minimum index.\n    '''\n    pass\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    union_elements((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6)) == (1, 2, 3, 4, 5, 6)\nassert union_elements((1, 2, 3), (2, 3, 4)) == (1, 2, 3, 4)\nassert union_elements((), ()) == ("
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     union_elements((0,1,2), (0,1,2)) == (0,1,2), \"Wrong tuple\"\nassert union_elements((1,2,3), (1,2,3)) == (1,2,3), \"Wrong tuple\"\nassert union_elements((5,3,6), (6,1,2)) == (1,2,3,5,6), \"Wrong tuple\"\nassert union_elements((2,1,1), (1,2,3)) == (1,2,3,1), \"Wrong tuple\"\nassert union_elements((0,), ()) == (0,), \"Wrong tuple\"\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     union_elements((1,2),(3,4)) == (1,2,3,4) \nassert     union_elements((3,4),(1,2)) == (1,2,3,4) \nassert     union_elements((1,2,3,4),(5,6)) == (1,2,3,4,5,6) \nassert     union_elements((1,2),(2,3)) == (1,2,3) \nassert     union_elements((1,2,3),(4,5,6)) == (1,2,3,4,5,6) \n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     union_elements((3, 5), (4, 5)) == (3, 4, 5)\nassert     union_elements((1, 2), (2, 3)) == (1, 2, 3)\nassert     union_elements((3, 5), (4, 5)) == (3, 4, 5)\nassert     union_elements((2, 4), (3, 5)) == (2, 3, 4, 5)\n\nprint('You have passed the unit tests!'"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef sum_tuple(test_tup1, test_tup2):\n    '''\n    Write a function to calculate the sum of two given tuples and return it.\n    '''\n    pass\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     union_elements((1, 2), (2, 3)) == (1, 2, 3), \"Union elements\"\nassert     union_elements((1, 2, 5, 6, 10), (2, 3, 7, 8, 9)) == (1, 2, 3, 5, 6, 7, 8, 9, 10), \"Union elements\"\nassert     union_elements((4,), (1, 2, 5, 6, 10)) == (1, 2, 5, 6, 10), \"Union elements\"\n\nprint(\"All the tests are passed\")"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     union_elements(('a','b','c'),('a','b','c')) == ['a','b','c']\nassert     union_elements(('c','a','b'),('a','b','c')) == ['a','b','c']\nassert     union_elements(('a','b','c'),('c','a','b')) == ['a','b','c']\nassert     union_elements(('a','b','c'),('a','c','b')) == ['a','b','c']\nassert     union_elements(('a','b','c'),('a','c','b','d')) == ['a','b','c']\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nFind_Max_Length([2,2,1]) == 3\nFind_Max_Length([1,1,1,1]) == 4\nFind_Max_Length([1,1,1,1,1,1,1,1,1]) == 5\nFind_Max_Length([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nFind_Max_Length([]) == 0\nFind_Max_Length([1,1,1]) == 3\nFind_Max_Length([1,1,1,1,1]) == 4\nFind_Max_Length([1,1,1,1,1,1,1,1,1,1]) == 7\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10]) == 11\nFind_Max_Length([]) == 0\nFind_Max_Length([1,1,1]) == 3\nFind_Max_Length([1,1,1,1,1,1]) == 4\nFind_Max_Length([1,1,1,1,1,1,1,1,1,1]) == 7\nFind_Max_Length([1,2,3,4,5,6,7,8,9,10]) == 11\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Find_Max_Length([[1,2,3],[2,1],[1,2,3]]) == 3\nassert     Find_Max_Length([[1,2,3],[2,1],[1,2,3],[2,1]]) == 4\nassert     Find_Max_Length([[1,2,3],[2,1],[1,2,3],[2,1],[1,2,3]]) == 4\nassert     Find_Max_Length([[1,2,3],[2,1],[1,2,3]]) == 3\nassert     Find_Max_Length([]) == 0\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert Find_Max_Length([2,4,6,5,3,4,8,7]) == 4\nassert Find_Max_Length([1,2,3,4,5,6,7,8]) == 8\nassert Find_Max_Length([]) == 0\nassert Find_Max_Length([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"]) == 6\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == '__main__':\n    lst = [[1,2,3,4,5],\n           [4,5,6,7,8],\n           [7,8,9,10,11],\n           [12,13,14,15,16],\n           [17,18,19,20,21]]\n    Find_Max_Length(lst"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Find_Max_Length([]) == 0\nassert     Find_Max_Length([1]) == 1\nassert     Find_Max_Length([1, 2, 3]) == 3\nassert     Find_Max_Length([1, 2, 3, 4, 5]) == 5"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Find_Max_Length([]) == 0\nassert Find_Max_Length([1]) == 1\nassert Find_Max_Length([1,2]) == 2\nassert Find_Max_Length([1,2,3]) == 3\nassert Find_Max_Length([1,2,3,4]) == 4\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Find_Max_Length([1,2,3,4,5,6,7]) == 7\nassert Find_Max_Length([1,2,3,4,5]) == 5\nassert Find_Max_Length([]) == 0"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_values(\"Giraffes: 'are polynomials'\") == 'are polynomials'\nassert extract_values(\"Giraffes: 'are polynomials'\") == 'are polynomials'\nassert extract_values(\"Giraffes: 'are polynomials'\") == 'are polynomials'\nassert extract_values(\"Giraffes: are polynomials\") == 'are polynomials'\nassert extract_values(\"Giraffes: are polynomials\") == 'are polynomials'\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_values('\"Hi\" John Smith, would you like to learn more about how to pass in a function?\"') \n    ==     ['Hi', 'John Smith,', 'would you like to learn more about how to pass in a function?']\nassert     extract_values('\"Here is a link: www.google.com\"') \n    ==     ['Here is a link:', 'www.google.com']\nassert     extract_values('\"This sentence contains no quotation marks!\"') == ['This sentence contains no quotation marks!']\nassert     extract_values('This sentence contains no quotation marks.') == ['This sentence contains no quotation marks.']\nassert     extract_values('Hi John Smith, would you like to learn more about how to pass in a function?') == ['Hi', 'John Smith,', 'would you like to learn more about how to pass in a function?']\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(extract_values(\"This is a sample sentence.\\\"This is another sample sentence.\"))"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_values('\"Hello\" and \"world\"') == \"Hello\"\nassert     extract_values('\"Hello\" and \\'world\\'') == \"Hello\"\nassert     extract_values(\"Hello' and \\'world\\'\") == \"Hello\"\nassert     extract_values('Hello\" and \"world') == \"Hello\"\nassert     extract_values(\"Hello' and world\") == \"Hello\"\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_values('\"The quick brown fox jumps over the lazy dog\"') == ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\nassert     extract_values('\"The quick brown fox jumps\" over the lazy dog') == ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\nassert     extract_values('\"The \\\"quick\\\" brown fox jumps\\\" over the \\\"lazy\\\" dog\"') == ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\nassert     extract_values('\"The \\\"quick\\\" brown fox jumps\\' over the \\'lazy\\' dog\"') == ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\nassert     extract_values('\"The \\'quick\\' brown fox jumps\\' over the \\'lazy\\' dog\"') == ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_values(\"The quick brown fox jumps over the lazy dog.\") == \"The quick brown fox jumps over the lazy dog.\"\nassert     extract_values(\"The quick brown fox jumps over the lazy dog.\") == \"The quick brown fox jumps over the lazy dog.\"\nassert     extract_values(\"The quick brown fox jumps over the lazy dog.\") == \"The quick brown fox jumps over the lazy dog.\"\nassert     extract_values(\"The quick brown fox jumps over the lazy dog.\") == \"The quick brown fox jumps over the lazy dog.\"\nassert     extract_values(\"The quick brown fox jumps over the lazy dog.\") == \"The quick brown fox jumps over the lazy dog.\"\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_values('\"this\" is a test\"') == 'is a test'\nassert     extract_values(\"this is 'a test'\") == 'is a test'\nassert     extract_values(\"this is 'a test' and this is 'another'\") == 'is a test'\nassert     extract_values(\"this is 'a test' and this is 'another' and this is 'third'\") == 'is a test'\nassert     extract_values(\"this is 'a test' and this is 'another' and this is 'third' and this is 'fourth'\") == 'is a test'\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert extract_values('kmlrstu is a good boy') == ['is', 'a', 'good', 'boy']\nassert extract_values('kmlrstu is a good boy.') == ['is', 'a', 'good', 'boy']\nassert extract_values('kmlrstu is a good boy.') == ['is', 'a', 'good', 'boy']\nassert extract_values('I bought the bakery') == ['the', 'bakery']\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_values('\"harry pipl says hello to harry\"'\n                        ) ==     'hello to harry'\n    assert     extract_values('\"this is a single quote string'\n                             ) ==     'this is a single quote string'\n    assert     extract_values('\"this is a double quote string'\n                             ) ==     'this is a double quote string'\n\ndef parse_email(s):\n    '''\n    Write a function to parse a string that contains one email address and\n    return a list of email addresses.\n    '''\n    pass\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_values('this is just a sample text') == ['this', 'is', 'just', 'a','sample', 'text']\nassert extract_values('one more sample text') == ['one','more','sample', 'text']\nassert extract_values('all the sample text') == ['all', 'the','sample', 'text']\nassert extract_values('one more sample text, the') == ['one','more','sample', 'text', 'the']\nassert extract_values('two more sample text, the') == ['two','more','sample', 'text', 'the']\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert count_Pairs([1,2,3,4,5],5) == 4\nassert count_Pairs([1,2,3,4,5,6],7) == 5\n\n\n\ndef count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    pass\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ncount_Pairs([1,2,3,4,5,6,7,8,9], 10) == 8\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(\"\\n\\nCount Unordered Pairs:\")\n\na = [1, 2, 3]\nn = len(a)\nprint(count_Pairs(a,n))\n\na = []\nn = len(a)\nprint(count_Pairs(a,n))\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_Pairs([1,2,3,4,5,6,7],7) == 5, 'incorrect'\nassert     count_Pairs([1,2,3,4,5,6,7],8) == 6, 'incorrect'\nassert     count_Pairs([1,2,3,4,5,6,7],9) == 9, 'incorrect'\nassert     count_Pairs([1,2,3,4,5,6,7],0) == 0, 'incorrect'\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_Pairs([10,20,30,40,50,60],6) == 2, 'Should be 2'\nassert     count_Pairs([10,20,30,40,50,60],6) == 2, 'Should be 2'\nassert     count_Pairs([10,20,30,40,50,60],6) == 2, 'Should be 2'\nassert     count_Pairs([10,20,30,40,50,60],6) == 2, 'Should be 2'\nassert     count_Pairs([10,20,30,40,50,60],6) == 2, 'Should be 2'\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_Pairs([1,2,3,3],3) == 2, 'count_Pairs([1,2,3,3],3) should be 2'\nassert     count_Pairs([0,1,1,1],3) == 1, 'count_Pairs([0,1,1,1],3) should be 1'\nassert     count_Pairs([0,1,0,1],3) == 1, 'count_Pairs([0,1,0,1],3) should be 1'\nassert     count_Pairs([1,1,1,1],3) == 0, 'count_Pairs([1,1,1,1],3) should be 0'\nassert     count_Pairs([0,1,0,0],3) == 0, 'count_Pairs([0,1,0,0],3) should be 0'\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef find_index(lst,n):\n    '''\n    Write a python function which returns the index of a number in the list provided. If the number does not exist in the list, return -1.\n    '''\n    pass\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nsplit('wow') == ['w','ow','ow']\nsplit('12345') == ['1','23','45']\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     split(\"hello\") == ['h', 'e', 'l', 'l', 'o']\nassert     split(\"hello world\") == ['h', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']\nassert     split(\"hello world\") == ['h', 'e', 'l', 'l', 'o','', 'w', 'o', 'r', 'l', 'd']"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     split('z') == ['z']\nassert     split('a') == ['a']\nassert     split('z', 'x') == ['z', 'x']\nassert     split('abcd', 'xy') == ['abcd', 'xy']\nassert     split('a', 'b') == ['a', 'b']\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     split(\"Python\") == ['P', 'y', 't', 'h', 'o', 'n'] \nassert     split(\"PythOn\") == ['P', 'y', 't', 'h', 'o', 'n'] \nassert     split(\"\") == [] \nassert     split(\" \") == [] \nassert     split(\"     \") == [] \n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert split(\"hello\") == ['h', 'e', 'l', 'l', 'o']\nassert split(\"\") == []\nassert split(\"a\") == ['a']\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     split('s') == ['s']\nassert     split('s' * 10) == ['s'] * 10\nassert     split('s' * 100) == ['s'] * 100\nassert     split('s' * 500) == ['s'] * 500\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nsplit('hello') == ['h','e','l','l','o']\n\n\ndef split_with_dictionary():\n    '''\n    Write a python function to split a string into characters and check the dictionary keys.\n    '''\n    pass\n\nassert \nsplit_with_dictionary('hello') == {'h':'h','e':'e','l':'l','l':'l','o':'o'}\n\n\ndef split_n_join(s):\n    '''\n    Write a python function to split a string and join it with another string.\n    '''\n    pass\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     split('coding') == ['c', 'o', 'd','', 'i', 'n', 'g'] \nassert     split('I love coding') == ['I','', 'l', 'o', 'v', 'e','', 'c', 'i', 'o', 'n', 'g'] \nassert     split('I love coding') == ['I','', 'l', 'o', 'v', 'e','', 'c', 'i', 'o', 'n', 'g'] \nassert     split('.') == ['.'] \nassert     split('') == []\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert split('Hello World') == ['H', 'e', 'l', 'l', 'o','', 'W', 'o', 'r', 'l', 'd']\nassert split('Python') == ['P', 'y', 't', 'h', 'o', 'n']\nassert split('comma,dot') == ['c', 'o','m', 'a', '.', 'd']\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_digits(123) == 6\nassert     sum_digits(1234) == 9\nassert     sum_digits(0) == 0\nassert     sum_digits(1234567890) == 45\nassert     sum_digits(0) == 0\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_digits(100) == 10\nassert     sum_digits(101) == 11\nassert     sum_digits(1000) == 3\nassert     sum_digits(1001) == 4\nassert     sum_digits(-1000) == -3\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_digits(9) == 3\nassert     sum_digits(18) == 6\nassert     sum_digits(99) == 0\nassert     sum_digits(100) == 1\nassert     sum_digits(200) == 4\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    pass\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nsum_digits(123) == 6, \"Should sum 123\"\nsum_digits(1234) == 15, \"Should sum 1234\"\nsum_digits(12345) == 45, \"Should sum 12345\"\nsum_digits(123456789) == 63, \"Should sum 123456789\"\nsum_digits(-123) == 3, \"Should sum -123\"\nsum_digits(-12345) == 45, \"Should sum -12345\"\nsum_digits(-123456789) == -63, \"Should sum -123456789\"\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    sum_digits(123) == 6\n    sum_digits(999) == 14\n    sum_digits(0) == 0\n    sum_digits(1) == 1\n    sum_digits(-1) == -1\n    sum_digits(2**31) == 2\n    sum_digits(2**31 + 1) == 2"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_digits(0) == 0, 'test1 failed'\nassert     sum_digits(123) == 6, 'test2 failed'\nassert     sum_digits(-123) == -6, 'test3 failed'\nassert     sum_digits(120) == 21, 'test4 failed'\nassert     sum_digits(1000) == 0, 'test5 failed'\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint('Test passed')\nprint()\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert issort_list([1,2,3])\nassert issort_list([1,2,3,4,5])\nassert issort_list([4,5,6,7,8])\nassert issort_list([-1,-2,-3,-4,-5])\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert issort_list([0, 1, 2, 3]) == True\nassert issort_list([3, 2, 1, 0]) == False\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     issort_list([1,2,3,4]) == True\nassert     issort_list([1,2,4,3]) == False\nassert     issort_list([1,2,2,2]) == True\nassert     issort_list([1,2,2,3]) == False\nassert     issort_list([1,2,2,3,2]) == True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     issort_list([1,2,3,4,5,6,7,8,9,10,11]) == True, \"First List should be sorted\"\nassert     issort_list([10,9,8,7,6,5,4,3,2,1]) == False, \"Last List should be sorted\"\nassert     issort_list([10,9,8,7,6,5,4,3,2,1,0]) == False, \"Second to last list should be sorted\"\nassert     issort_list([10,9,8,7,6,5,4,3,2,1,0,3]) == False, \"Third list should be sorted\"\nassert     issort_list([10,9,8,7,6,5,4,3,2,1,0,3,2]) == False, \"Third list should be sorted\"\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     issort_list([\"A\", \"C\", \"B\", \"D\"]) == True\nassert     issort_list([\"A\", \"B\", \"D\"]) == False\nassert     issort_list([\"A\", \"B\", \"C\", \"D\"]) == False\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     issort_list([1,2,3,4,5,6]) == True, 'First list is not sorted!'\nassert     issort_list([1,2,3,4,5,6,7,8]) == False, 'Second list is not sorted!'\nassert     issort_list([6,7,8,9,10,11,12,13,14,15]) == True, 'Third list is not sorted!'\nassert     issort_list([0,-1,-2,-3,-4,-5]) == True, 'Fourth list is not sorted!'\nassert     issort_list([-100,0,10,100]) == False, 'Fifth list is not sorted!'\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     issort_list([1, 2, 3, 4, 5]) == False, \"List is not sorted\"\nassert     issort_list([1, 2, 3, 4, 5, 5]) == True, \"List is sorted\"\nassert     issort_list([1, 2, 2, 4, 5]) == True, \"List is sorted\"\nassert     issort_list([1, 2, 2, 4]) == True, \"List is sorted\"\nassert     issort_list([]) == True, \"List is empty\"\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     issort_list([1,2,3,4])\nassert not issort_list([1,2,3,4,5])\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     empty_list(5) == [{}, {}, {}, {}, {}]\nassert     empty_list(0) == []\nassert     empty_list(1) == []\nassert     empty_list(2) == []\nassert     empty_list(3) == []\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     empty_list(0) == []\nassert     empty_list(1) == []\nassert     empty_list(2) == []\nassert     empty_list(3) == []\nassert     empty_list(4) == []\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     empty_list(0) == [], \nassert     empty_list(1) == [{}],\nassert     empty_list(2) == [{}, {}],\nassert     empty_list(3) == [{}, {}, {}],\nassert     empty_list(4) == [{}, {}, {}, {}],\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert not empty_list(0), 'Input should be at least 1'\nassert not empty_list(1), 'Input should be at least 1'\nassert not empty_list(2), 'Input should be at least 1'\nassert empty_list(3), 'Input should be at least 1'\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert not empty_list(0)\nassert empty_list(1) == [{}]\nassert not empty_list(2)\nassert empty_list(3) == [{}, {}]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert         empty_list(0) == [], \\\n            'Your function should return an empty list if given 0.'\nassert         empty_list(1) == [{}], \\\n            'Your function should return an empty list if given 1.'\nassert         empty_list(2) == [{}, {}], \\\n            'Your function should return an empty list if given 2.'\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert empty_list(3) == [{}, {}, {}]\nassert empty_list(10) == [{} for i in range(10)]\n\n\ndef empty_list_recursive(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    pass\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     empty_list(0) ==     []\nassert     empty_list(1) ==     [{}]\nassert     empty_list(2) ==     [{}, {}]\nassert     empty_list(3) ==     [{}, {}, {}]\nassert     empty_list(4) ==     [{}, {}, {}, {}]\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_sublists([['a', 'b', 'c'], ['b', 'a', 'c'], ['a', 'b', 'c'], ['b', 'a', 'c']]) == [['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['b', 'a', 'c']]\n\ndef get_nums(lst):\n    '''\n    Write a function that takes in a list of numbers and returns a new list with only the even numbers.\n    '''\n    pass\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_sublists([[1, 2, 3], [1, 3, 2], [1, 2, 3]]) == [[1, 1, 1], [1, 1, 1], [1, 1, 1]]\nassert     sort_sublists([['1', '2', '3'], ['1', '3', '2'], ['1', '2', '3']]) == [['1', '1', '1'], ['1', '1', '1'], ['1', '1', '1']]\nassert     sort_sublists([[1, 2, 3], ['1', '2', '3'], ['1', '2', '3']]) == [[1, 1, 1], ['1', '1', '1'], ['1', '1', '1']]\n\n\n\ndef get_nested_list_intersection(l1, l2):\n    '''\n    Write a function to get the intersection of two lists of integers of the same length, or return None if they have no common elements.\n    '''\n    pass\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_sublists(['1', '2', '3', '4', '5', '6', '7']) ==     ['1', '2', '3', '4', '5', '6', '7']\nassert     sort_sublists([['1', '2'], ['1', '2', '3'], ['1', '2', '3', '4', '5'], ['1', '2', '3', '4']]) ==     [[1, '1', '2'], ['1', '2', '3'], [1, '1', '2', '3', '4', '5'], ['1', '2', '3', '4']]\nassert     sort_sublists([['1', '2'], ['1', '2', '3'], ['1', '2', '3', '4', '5'], ['1', '2', '3', '4']]) ==     [[1, '1'], ['1', '2', '2', '3'], ['1', '2', '3', '4', '4', '5'], ['1', '2', '3', '4']]\n\ndef sort_array(list1):\n    '''\n    Write a function to sort a list of strings by their length in ascending order.\n    '''\n    pass\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nsort_sublists([\n    ['A', 'C', 'D', 'E'],\n    ['B', 'F', 'G'],\n    ['H', 'I'],\n    ['J', 'K', 'L'],\n    ['M', 'N', 'O'],\n    ['P', 'Q', 'R', 'S'],\n    ['T', 'U'],\n    ['V', 'W', 'X'],\n    ['Y', 'Z'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y'],\n    ['Z'],\n    ['Y']"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_sublists([['w','x','z'],['a','f','c']]) == \\\n            [[\u2019a\u2019, \u2019c\u2019, \u2019f\u2019], [\u2019w\u2019, \u2019z\u2019, \u2019x\u2019]]\n\ndef average_word_length(sentences):\n    '''\n    Write a function to calculate the average word length of a list of sentences.\n    '''\n    pass\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_sublists(['this','is','a','test','list','of','string']) == ['this','is','a','test','list','of','string']\nassert sort_sublists(['this','is','a','test','list','of','string', 'and','some','words']) == ['and','some','this','is','a','test','list','of','string']\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_sublists([\"a\", \"b\", \"c\"]) == [['c', 'b', 'a'], ['a', 'b', 'c'], ['c', 'b', 'a']]\nassert     sort_sublists([\"a\", \"b\", \"c\", \"d\"]) == [['c', 'b', 'a', 'd'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['c', 'b', 'a', 'd']]\nassert     sort_sublists([\"abc\", \"bca\", \"cba\", \"abc\", \"acb\", \"bac\", \"abc\"]) == [['abc', 'bca', 'cba', 'acb', 'acb', 'bac', 'abc'], ['abc', 'bca', 'cba', 'acb', 'acb', 'bac', 'abc'], ['abc', 'bca', 'cba', 'acb', 'acb', 'bac', 'abc'], ['abc', 'bca', 'cba', 'acb', 'abc', 'acb', 'bac'], ['abc', 'bca', 'cba', 'abc', 'acb', 'bac', 'abc'], ['abc', 'bca', 'cba', 'abc', 'acb', 'bac', 'abc']]\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_sublists([['t','h','i','p'],['a','b','c','d'],['f','g','h','j'],['k','l','m','n']]) == \\\n        [['a','b','c','d'],['k','l','m','n'],['f','g','h','j'],['h','i','p','t']]\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f']]) == [['a', 'b', 'c'], ['d', 'e', 'f']]\nassert     sort_sublists([[1, 2, 3], [4, 5, 6]]) == [[1, 2, 3], [4, 5, 6]]\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_sublists([]) == []\nassert     sort_sublists([['a', 'b'], ['c', 'd']]) == [['c', 'd'], ['a', 'b']]\nassert     sort_sublists([['a'], ['b'], ['c']]) == [['c'], ['a', 'b']]\nassert     sort_sublists([['a'], ['b'], ['c'], ['d']]) == [['c'], ['a', 'b'], ['d'], ['a', 'b']]\nassert     sort_sublists([['a'], ['a']]) == [['a'], ['a']]\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef two_unique_nums_better(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return list(set(nums))\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     two_unique_nums([[1,2,3,3,3],\n                            [1,2,3,3],\n                            [1,2,3],\n                            [1,2],\n                            [1],\n                            []]) == [[1,2,3],\n                                [1,2,3],\n                                [1,2],\n                                [1],\n                                []]\nassert     two_unique_nums([[1,2,3,3,3],\n                            [1,2,3,3],\n                            [1,2,3],\n                            [1,2],\n                            [1],\n                            []]) == [[1,2,3,3],\n                                [1,2,3],\n                                [1,2],\n                                [1],\n                                []]\nassert     two_unique_nums([[1,2,3],\n                            [1,2,3],\n                            [1,2,3],\n                            [1,2],\n                            [1],\n                            []]) == [[1,2,3],\n                                [1,2,3],\n                                [1,2,3],\n                                [1,2],\n                                [1],\n                                []]\nassert     two_unique_nums([[1,2,3,3],\n                            [1,2,3,3],\n                            [1,2,3],\n                            [1,2],\n                            [1],\n                            []]) == [[1,2,3,3],\n                                [1,2,3,3],\n                                [1,2,3],\n                                [1,2],\n                                [1],\n                                []]\nassert     two_unique_nums([[1,2,3,3,3],\n                            [1,2,3,3,3],\n                            [1,2,3,3],\n                            [1,2,3],\n                            [1,2],\n                            [1],\n                            []]) == [[1,2,3,3,3],\n                                [1,2,3,3,3],\n                                [1,2,3,3],\n                                [1,2,3],\n                                [1,2],\n                                [1],\n                                []]\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     two_unique_nums([1, 2, 3, 4, 5]) ==     [1, 2, 3, 4, 5]\nassert     two_unique_nums([1, 2, 3, 4, 5, 6]) ==     [1, 2, 3, 4, 5, 6]\nassert     two_unique_nums([1, 2, 3, 1, 1, 3]) ==     [1, 2, 3, 1, 1, 3]\nassert     two_unique_nums([1, 2, 3, 1, 2, 2]) ==     [1, 2, 3, 1, 2, 2]\nassert     two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ==     [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     two_unique_nums([]) == []\nassert     two_unique_nums([[1, 2, 3, 4], [5, 6, 7, 8]]) == [[5, 6, 7, 8]]\nassert     two_unique_nums([[1, 2, 3, 4, 4], [5, 6, 7, 8, 8]]) == [[5, 6, 7, 8, 8]]\nassert     two_unique_nums([[1, 1, 1, 2, 2], [1, 1, 2, 2, 2], [1, 2, 2, 3, 3], [1, 1, 3, 3, 3], [1, 2, 2, 4, 4]]) == [[1, 2, 3, 4, 4]]\nassert     two_unique_nums([[1, 1, 1, 2, 2], [1, 2, 2, 3, 3], [1, 1, 3, 3, 3], [1, 2, 2, 4, 4]]) == [[1, 2, 3, 4, 4]]\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     two_unique_nums([]) == []\nassert     two_unique_nums([1, 2]) == [1, 2]\nassert     two_unique_nums([1, 2, 2]) == [1, 2]\nassert     two_unique_nums([1, 2, 3]) == [1, 2, 3]\nassert     two_unique_nums([1, 2, 3, 3, 3]) == [1, 2, 3]\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     two_unique_nums([1, 2, 3, 3]) ==    [1, 2, 3]\nassert     two_unique_nums([1, 2, 3, 4]) ==    [1, 2, 4]\nassert     two_unique_nums([1, 2, 3, 4, 3, 1, 2, 4]) ==    [1, 2, 3, 4]\nassert     two_unique_nums([1, 2, 3, 4, 2, 2, 3, 4]) ==    [1, 2, 3, 4]\nassert     two_unique_nums([1, 2, 3, 4, 2, 2, 3, 4, 1]) ==    [1, 2, 3, 4]\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     two_unique_nums([1,2,3,4,5]) == [[1,2,3,4,5]], \"Wrong result\"\nassert     two_unique_nums([1,2,2,3,4,5]) == [[1,2,3,4,5]], \"Wrong result\"\nassert     two_unique_nums([1,2,3,3,4,5]) == [[1,2,3,3,4,5]], \"Wrong result\"\nassert     two_unique_nums([1,1,2,3,3,4,5]) == [[1,1,2,3,3,4,5]], \"Wrong result\"\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef one_occurence(lists):\n    '''\n    Write a python function to remove all the one occurance numbers from a given number of lists.\n    '''\n    pass\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     two_unique_nums([[0,1,2,3], [4,5,6], [7,8,9], [0,1,2,3,3]]) == [[0,1,2,3,4,5,6,7,8,9]]\nassert     two_unique_nums([[0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9]]) == [[0,1,2,3,4,5,6,7,8,9]]\nassert     two_unique_nums([[0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9], [0,1,2,3,4,5,6,7,8,9]]) == [[0,1,2,3,4,5,6,7,8,9]]"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     unique_product([1,2,3,4,5]) == 120\nassert     unique_product([1,2,3,4,5,1]) == 120\nassert     unique_product([1,2,3,4,5,6,7,8]) == 840\nassert     unique_product([1,2,3,4,5,6,7,8,1]) == 840\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef print_list(list_data):\n    '''\n    Write a python function to print the elements of a list in different ways.\n    '''\n    pass\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     unique_product([1,2,2,3,3,3]) == 2*3, \"Test Failed\"\nassert unique_product([1,2,2,3,3,4]) == 2*3*4, \"Test Failed\"\nassert unique_product([1,2,2,3,3]) == 2*3, \"Test Failed\"\nassert unique_product([1,2,3,3,3,3]) == 2*3*3, \"Test Failed\"\nassert unique_product([2,2,2,2,2,2]) == 2*2*2, \"Test Failed\"\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    print(unique_product([1,1,1,1,1,2,2,3,4,5,5,6,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     unique_product([2,1,1,3,5,2,2,4,2]) == 6, \"Should be 6\"\nassert     unique_product([2,3,2,2,4,5]) == 8, \"Should be 8\"\nassert     unique_product([2,3,2,2,2,2]) == 2, \"Should be 2\"\nassert     unique_product([2,2,2,2]) == 1, \"Should be 1\"\nassert     unique_product([2,2,2,4]) == 4, \"Should be 4\"\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef is_unique_list(list_data):\n    '''\n    Write a python function to check if the given list is unique.\n    '''\n    pass\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     unique_product([5, 7, 9, 6, 5, 8]) == 336\nassert     unique_product([5, 7, 8, 6, 5, 8]) == 384\nassert     unique_product([5, 5, 5, 6, 6, 5, 8, 8]) == 24576\nassert     unique_product([5, 5, 5, 5, 6, 5, 8]) == 16000\nassert     unique_product([]) == 1\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     unique_product([5, 4, 4, 5, 6]) == 120, \"incorrect product\"\nassert     unique_product([4, 4, 5, 6, 6]) == 120, \"incorrect product\"\nassert     unique_product([1, 2, 2, 3]) == 6, \"incorrect product\"\nassert     unique_product([]) == 1, \"incorrect product\"\nassert     unique_product([1, 1, 2, 3]) == 6, \"incorrect product\"\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 720, \"Test 1 Failed\"\nassert     unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 362880, \"Test 2 Failed\"\nassert     unique_product([1, 1, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 3125, \"Test 3 Failed\"\nassert     unique_product([1, 1, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]) == 3628800, \"Test 4 Failed\"\nassert     unique_product([1, 2, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5]) == 30, \"Test 5 Failed\"\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     surfacearea_cylinder(1,1) == 2\nassert     surfacearea_cylinder(5,5) == 34\nassert     surfacearea_cylinder(10,10) == 314\n\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pass\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     surfacearea_cylinder(10,10) == 12.5, 'incorrect result (10,10)'\nassert     surfacearea_cylinder(20,10) == 25.0, 'incorrect result (20,10)'\nassert     surfacearea_cylinder(10,20) == 50.0, 'incorrect result (10,20)'\nassert     surfacearea_cylinder(100,200) == 10141.0, 'incorrect result (100,200)'\nassert     surfacearea_cylinder(2,10) == 20.0, 'incorrect result (2,10)'\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     surfacearea_cylinder(3,4) == 20.06, 'incorrect'\nassert     surfacearea_cylinder(3,3) == 18.94, 'incorrect'\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     surfacearea_cylinder(1,2) == 2.5, 'incorrect surfacearea_cylinder'\nassert     surfacearea_cylinder(0.5,0.5) == 1.25, 'incorrect surfacearea_cylinder'\nassert     surfacearea_cylinder(2,2) == 8.5, 'incorrect surfacearea_cylinder'\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     surfacearea_cylinder(1,1) == 2\nassert     surfacearea_cylinder(2,3) == 10\nassert     surfacearea_cylinder(3,1) == 8\nassert     surfacearea_cylinder(2,2) == 4\nassert     surfacearea_cylinder(2.1,2.1) == 4"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     surfacearea_cylinder(1,3) == 4.5\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    surfacearea_cylinder(5,3) == 28.25\nassert \n    surfacearea_cylinder(5,10) == 78.5\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     surfacearea_cylinder(1.5, 2.5) == 3.14159265358979323846\nassert surfacearea_cylinder(1.5, 2.5) == 3.14159265358979323846, \\\n                                'Incorrect surface area'\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_Sub_Array([1,2,3],[3]) == True, 'incorrect'\nassert     is_Sub_Array([1,2,3],[4]) == False, 'incorrect'\nassert     is_Sub_Array([1,2,3,4],[3]) == True, 'incorrect'\nassert     is_Sub_Array([1,2,3,4],[2]) == True, 'incorrect'\nassert     is_Sub_Array([1,2,3,4],[1]) == True, 'incorrect'\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_Sub_Array([1,3,4,6], [1,4,6]) == True, \"is_Sub_Array error\"\nassert     is_Sub_Array([1,3,4,6], [1]) == False, \"is_Sub_Array error\"\nassert     is_Sub_Array([1], [1,3,4,6]) == False, \"is_Sub_Array error\"\nassert     is_Sub_Array([], []) == True, \"is_Sub_Array error\"\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_Sub_Array([1,2,3,4,5],[1,2,3,4]) == True\nassert     is_Sub_Array([1,2,3,4,5],[5,6,7,8]) == False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     (is_Sub_Array([2,3], [2,3,4,5]) == True)\nassert     (is_Sub_Array([2,3], [1,2,3]) == False)\n\n'''\n17) Write a python function to find the duplicate elements in a list.\n'''\ndef find_duplicate(list1):\n    '''\n    Write a python function to find the duplicate elements in a list.\n    '''\n    pass\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_Sub_Array([1,2,3],[1,2]) == True, \"the value returned should be True\"\nassert     is_Sub_Array([1,2,3],[1,3]) == False, \"the value returned should be False\"\nassert     is_Sub_Array([1,2,3],[3,2]) == False, \"the value returned should be False\"\nassert     is_Sub_Array([1,2,3],[2,2]) == True, \"the value returned should be True\"\nassert     is_Sub_Array([1,2,3],[3,4]) == False, \"the value returned should be False\"\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_Sub_Array([1,2,3,4], [0,1,2,3,4]) == True, \"Error 1\"\nassert     is_Sub_Array([1,2,3,4], [1,2,3,4]) == True, \"Error 2\"\nassert     is_Sub_Array([1,2,3,4], [1,2,3]) == False, \"Error 3\"\nassert     is_Sub_Array([1,2,3,4], [1,2,3,4,5]) == False, \"Error 4\"\nassert     is_Sub_Array([1,2,3,4], [1,2,3,4,5,6,7]) == True, \"Error 5\"\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_Sub_Array([1,2,3,4,5],[1,2,3]) == True\nassert     is_Sub_Array([1,2,3,4,5],[1,2]) == False\nassert     is_Sub_Array([1,2,3,4,5],[1,2,3,4]) == True\nassert     is_Sub_Array([1,2,3,4,5],[1,2,3,4,5,6]) == True\n\ndef Sub_Array(A,B): \n    '''\n    Write a python function to check whether a sublist of a list is present in a list or not.\n    '''\n    pass\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_Sub_Array([1,2,3], [3]) == True, 'Test 1 Failed'\nassert     is_Sub_Array([1,2,3], [1,2]) == True, 'Test 2 Failed'\nassert     is_Sub_Array([1,2,3], [3,4]) == False, 'Test 3 Failed'\nassert     is_Sub_Array([1,2], [1,2]) == False, 'Test 4 Failed'\nassert     is_Sub_Array([], [1,2,3]) == True, 'Test 5 Failed'\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_Sub_Array([1, 2, 3], [1, 2, 3]) == True, \"case1\"\nassert     is_Sub_Array([1, 2, 3], [3, 2, 1]) == True, \"case2\"\nassert     is_Sub_Array([1, 2, 3], [1, 2]) == False, \"case3\"\nassert     is_Sub_Array([1, 2, 3], [1, 3]) == False, \"case4\"\nassert     is_Sub_Array([1, 2, 3], [3, 1]) == False, \"case5\"\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     last_Digit_Factorial(6) == 2\nassert last_Digit_Factorial(2) == 1\nassert last_Digit_Factorial(3) == 3\nassert last_Digit_Factorial(4) == 1\nassert last_Digit_Factorial(5) == 5\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    \ndef last_Digit_Factorial_1(n): \n    '''\n    The last digit in the factorial of n is the number of digits in the number of which the factorial is raised to.\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    last_Digit_Factorial(5) == 5\n    last_Digit_Factorial(2) == 1\n    last_Digit_Factorial(17) == 17\n    last_Digit_Factorial(12) == 1\n    last_Digit_Factorial(9) == 9\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     last_Digit_Factorial(10) == 0, \\\n        \"Last digit of factorial of 10 is 0\"\nassert last_Digit_Factorial(100) == 5, \\\n        \"Last digit of factorial of 100 is 5\"\nassert last_Digit_Factorial(1000) == 3, \\\n        \"Last digit of factorial of 1000 is 3\"\nassert last_Digit_Factorial(10000) == 6, \\\n        \"Last digit of factorial of 10000 is 6\"\nassert last_Digit_Factorial(100000) == 3, \\\n        \"Last digit of factorial of 100000 is 3\"\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     last_Digit_Factorial(5) == 5, \"WRONG!!\"\n\n'''\nQ: What happens when the factorial is huge?\nA: We can't call the function directly, we can only calculate and display the result \nby using the modulus operator (%)\n'''\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     last_Digit_Factorial(10) == 2\nassert     last_Digit_Factorial(10) == 1\nassert     last_Digit_Factorial(11) == 1\nassert     last_Digit_Factorial(8) == 1\nassert     last_Digit_Factorial(7) == 0\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     last_Digit_Factorial(1) == 1\nassert     last_Digit_Factorial(9) == 9\nassert     last_Digit_Factorial(18) == 6"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     last_Digit_Factorial(11) == 2\nassert     last_Digit_Factorial(16) == 5\nassert     last_Digit_Factorial(11) == 1\n\ndef factorial_Digits(n):\n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     last_Digit_Factorial(1) == 1\nassert     last_Digit_Factorial(10) == 1\nassert     last_Digit_Factorial(25) == 5\nassert     last_Digit_Factorial(42) == 1\nassert     last_Digit_Factorial(100) == 1\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]\nassert     interleave_lists([1],[2],[3],[4],[5],[6],[7],[8],[9],[10],[11],[12],[13],[14],[15],[16],[17],[18],[19],[20],[21],[22],[23],[24],[25],[26],[27],[28],[29],[30],[31],[32],[33],[34],[35],[36],[37],[38],[39],[40],[41],[42],[43],[44],[45],[46],[47],[48],[49],[50],[51],[52],[53],[54],[55],[56],[57],[58],[59],[60],[61],[62],[63],[64],[65],[66],[67],[68],[69],[70],[71],[72],[73],[74],[75],[76],[77],[78],[79],[80],[81],[82],[83],[84],[85],[86],[87],[88],[89],[90],[91],[92],[93],[94],[95],[96],[97],[98],[99],[100],[101],[102],[103],[104],[105],[106],[107],[108],[109],[110],[111],[112],[113],[114],[115],[116],[117],[118],[119],[120],[121],[122],[123],[124],[125],[126],[127],[128],[129],[130],[131],[132],[133],[134],[135],[136],[137],[138],[139],[140],[141],[142],[143],[144],[145],[146],[147],[148],[149],[150],[151],[152],[153],[154],[155],[156],[157],[158],[159],[160],[161],[162],[163],[164],[165],[166],[167],[168],[169],[170],[171],[172],[173],[174],[175],[176],[177],[178],[179],[180],[181],[182],[183],[184],[185],[186],[187],[188],[189],[190],[191],[192],[193],[194],[195],[196],[197],[198],[199],[200],[201],[202],[203],[204],[205],[206],[207],[208],[209],[210],[211],[212],[213],[214],[215],[216],[217],[218],[219],[220],[221],[222],[223],[224],[225],[226],[227],[228],[229],[230],[231],[232],[233],[234],[235],[236],[237],[238],[239],[240],[241],[242],[243],[244],[245],[246],[247],[248],[249],[250],[251],[252],[253],[254],[255],[256],[257],[258],[259],[260],[261],[262],[263],[264],[265],[266],[267],[268],[269],[270],[271],[272],[273],[274],[275],[276],[277],[278],[279],[280],[281],[282],[283],[284],[285],[286],[287],[288],[289],[290],[291],[292],[293],[294],[295],[296],[297],[298],[299],[300],[301],[302],[303],[304],[305],[306],[307],[308],[309],[310],[311],[312],[313],[314],[315],[316],[317],[318],[319],[320],[321],[322],[323],[324],[325],[326],[327],[328],[329],[330],[331],[332],[333],[334],[335],[336],[337],[338],[339],[340],[341],[342],[343],[344],[345],[346],[347],[348],[349],[350],[351],[352],[353],[354],[355],[356],[357],[358],[359],[360],[361],[362],[363],[364],[365],[366],[367],[368],[369],[370],[371],[372],[373],[374],[375],[376],[377],[378],[379],[380],[381],[382],[383],[384],[385],[386],[387],[388],[389],[390],[391],[392],[393],[394],[395],[396],[397],[398],[399],[400],[401],[402],[403],[404],[405],[406],[407],[408],[409],[410],[411],[412],[413],[414],[415],[416],[417],[418],[419],[420],[421],[422],[423],[424],[425],[426],[427],[428],[429],[430],[431],[432],[433],[434],[435],[436],[437],[438],[439],[440],[441],[442],[443],[444],[445],[446],[447],[448],[449],[450],[451],[452],[453],[454],[455],[456],[457],[458],[459],[460],[461],[462],[463],[464],[465],[466],[467],[468],[469],[470],[471],[472],[473],[474],[475],[476],[477],[478],[479],[480],[481],[482],[483],[484],[485],[486],[487],[488],[489],[490],[491],[492],[493],[494],[495],[496],[497],[498],[499],[500],[501],[502],[503],[504],[505],[506],[507],[508],[509],[510],[511],[512],[513],[514],[515],[516],[517],[518],[519],[520],[521],[522],[523],[524],[525],[526],[527],[528],[529],[530],[531],[532],[533],[534],[535],[536],[537],[538],[539],[540],[541],[542],[543],[544],[545],[546],[547],[548],[549],[550],[551],[552],[553],[554],[555],[556],[557],[558],[559],[560],[561],[562],[563],[564],[565],[566],[567],[568],[569],[570],[571],[572],[573],[574],[575],[576],[577],[578],[579],[580],[581],[582],[583],[584],[585],[586],[587],[588],[589],[590],[591],[592],[593],[594],[595],[596],[597],[598],[599],[600],[601],[602],[603],[604],[605],[606],[607],[608],[609],[610],[611],[612],[613],[614],[615],[616],[617],[618],[619],[620],[621],[622],[623],[624],[625],[626],[627],[628],[629],[630],[631],[632],[633],[634],[635],[636],[637],[638],[639],[640],[641],[642],[643],[644],[645],[646],[647],[648],[649],[650],[651],[652],[653],[654],[655],[656],[657],[658],[659],[660],[661],[662],[663],[664],[665],[666],[667],[668],[669],[670],[671],[672],[673],[674],[675],[676],[677],[678],[679],[680],[681],[682],[683],[684],[685],[686],[687],[688],[689],[690],[691],[692],[693],[694],[695],[696],[697],[698],[699],[700],[701],[702],[703],[704],[705],[706],[707],[708],[709],[710],[711],[712],[713],[714],[715],[716],[717],[718],[719],[720],[721],[722],[723],[724],[725],[726],[727],[728],[729],[730],[731],[732],[733],[734],[735],[736],[737],[738],[739],[740],[741],[742],[743],[744],[745],[746],[747],[748],[749],[750],[751],[752],[753],[754],[755],[756],[757],[758],[759],[760],[761],[762],[763],[764],[765],[766],[767],[768],[769],[770],[771],[772],[773],[774],[775],[776],[777],[778],[779],[780],[781],[782],[783],[784],[785],[786],[787],[788],[789],[790],[791],[792],[793],[794],[795],[796],[797],[798],[799],[800],[801],[802],[803],[804],[805],[806],[807],[808],[809],[810],[811],[812],[813],[814],[815],[816],[817],[818],[819],[820],[821],[822],[823],[824],[825],[826],[827],[828],[829],[830],[831],[832],[833],[834],[835],[836],[837],[838],[839],[840],[841],[842],[843],[844],[845],[846],[847],[848],[849],[850],[851],[852],[853],[854],[855],[856],[857],[858],[859],[860],[861],[862],[863],[864],[865],[866],[867],[868],[869],[870],[871],[872],[873],[874],[875],[876],[877],[878],[879],[880],[881],[882],[883],[884],[885],[886],[887],[888],[889],[890],[891],[892],[893],[894],[895],[896],[897],[898],[899],[900],[901],[902],[903],[904],[905],[90"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     interleave_lists([1, 2, 3], ['a', 'b', 'c'], ['d', 'e', 'f']) == [[1, 'a', 'd', 'b', 'e', 'c'], 2, 3, ['d', 'e', 'f']]\nassert interleave_lists([1, 2, 3], [], ['a', 'b', 'c']) == [[1, 'a'], 2, 3, ['b', 'c']]\nassert interleave_lists([1, 2, 3], ['a', 'b', 'c'], []) == [[1, 'a', 'b'], 2, 3, ['c']]\nassert interleave_lists([], ['a', 'b', 'c'], ['d', 'e', 'f']) == [[], 'a', 'b', 'c', 'd', 'e', 'f']\n\ndef _is_prime(n):\n    '''\n    Determine if a given number is prime.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]\nassert     interleave_lists([1,2,3],[4,5,6],[7,8,9,0,1,2,3,4,5]) == [1,4,7,2,5,8,3,6,9,0,1,2,3,4,5]\nassert     interleave_lists([1,2,3],[4,5,6],[7,8,9,0,1,2,3,4,5,6]) == [1,4,7,2,5,8,3,6,9,0,1,2,3,4,5,6]\nassert     interleave_lists([1,2,3],[4,5,6],[7,8,9,0,1,2,3,4,5,6,7]) == [1,4,7,2,5,8,3,6,9,0,1,2,3,4,5,6,7]\nassert     interleave_lists([1,2,3],[4,5,6],[7,8,9,0,1,2,3,4,5,6,7,8]) == [1,4,7,2,5,8,3,6,9,0,1,2,3,4,5,6,7,8]\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     interleave_lists([1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15]) ==     [1, 6, 11, 2, 7, 12, 3, 8, 13, 4, 9, 14, 5, 10, 15]\nassert     interleave_lists([1,2,3],[4,5,6],[7,8,9]) ==     [1, 4, 7, 2, 5, 8, 3, 6]\nassert     interleave_lists([1,2,3],[4,5,6],[7,8,9],[10,11,12,13]) ==     [1, 4, 7, 2, 5, 8, 3, 6, 10, 11, 12, 13]\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     interleave_lists([1,2,3], ['a','b','c'], ['d','e','f']) == ['d','a','e','b','c','f','d','a','c','b','f','e'], 'Test 1 Failed'\nassert     interleave_lists([1,2,3], ['a','b','c'], ['d','e','f']) == ['d','a','e','b','c','f','d','a','f','e','b','c','d'], 'Test 2 Failed'\nassert     interleave_lists([1,2,3,4,5], ['a','b','c','d'], ['e','f','g','h']) == ['e','a','f','b','c','d','g','h','e','a','f','b','d','c','h','e'], 'Test 3 Failed'\nassert     interleave_lists([1,2,3,4,5,6,7,8], ['a','b','c','d','e'], ['f','g','h','i','j','k','l']) == ['f','a','g','b','c','d','h','i','e','a','l','b','c','d','g','h','i','e'], 'Test 4 Failed'\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     interleave_lists([1,2,3],[4,5,6],[7,8,9])==[1,4,7,2,5,8,3,6,9]\nassert     interleave_lists([1,2,3],[],[])==[1,2,3]\nassert     interleave_lists([],[1,2,3],[4,5,6])==[1,2,3,4,5,6]\nprint(\"Done\")\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     interleave_lists([1,2,3],[\"a\",\"b\",\"c\"],[\"d\",\"e\",\"f\"]) == [\"1\",\"2\",\"a\",\"3\",\"b\",\"d\",\"e\",\"f\",\"c\",\"4\",\"a\",\"b\",\"c\",\"4\",\"e\",\"f\"], \"WRONG\"\n\nprint(\"PASSED\")"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(interleave_lists([1,2,3],[4,5,6],[7,8,9]))\n\nassert \nprint(interleave_lists([1,2,3],[4,5,6],[7,8,9,10]))\n\nassert \nprint(interleave_lists([1,2,3,4],[5,6,7,8],[9,10,11,12]))\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_dissimilar((1,2,3,4), (1,2,3,4)) ==    (4,), \"Wrong Answer\"\nassert     find_dissimilar((1,2,3,4), (1,1,1,1)) ==    (4,), \"Wrong Answer\"\nassert     find_dissimilar((1,2,3,4), (1,2,3,4)) ==    (4,), \"Wrong Answer\"\nassert     find_dissimilar((1,2,3,4), (1,2,3)) ==    (4,), \"Wrong Answer\"\nassert     find_dissimilar((1,2,3,4), (1,)) ==    (4,), \"Wrong Answer\"\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_dissimilar(('a', 'b', 'c'), ('a', 'b', 'c')) == None, \\\n        'Function does not return None.'\nassert     find_dissimilar(('a', 'b', 'c'), ('a', 'b', 'c', 'a')) == None, \\\n        'Function does not return None.'\nassert     find_dissimilar(('a', 'b', 'c'), ('a', 'a', 'b')) == None, \\\n        'Function does not return None.'\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_dissimilar((1, 2), (3, 4)) ==     {1, 3, 2}\nassert     find_dissimilar((1, 2), (2, 3)) ==     {1, 3}\nassert     find_dissimilar((1, 2), (3,)) ==     {1, 3}\nassert     find_dissimilar((1,), (1, 2)) ==     {1, 3}\nassert     find_dissimilar((), ()) ==     {1, 3}\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_dissimilar((\"a\", \"b\", \"c\"), (3, \"a\", \"c\")) == (1, 0)\nassert     find_dissimilar((\"c\", \"b\", \"a\"), (3, \"a\", \"c\")) == (0, 1)\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_dissimilar((1, 1), (1, 1)) == (), \"Expected no differences\"\nassert     find_dissimilar((1, 1, 3), (1, 1, 3)) == (), \"Expected no differences\"\nassert     find_dissimilar((1, 2), (2, 1)) == (1, 2), \"Expected (1, 2) not (2, 1) to be returned\"\nassert     find_dissimilar((1, 2, 3), (2, 1, 3)) == (1, 2, 3), \"Expected (1, 2, 3) not (2, 1, 3) to be returned\""
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_dissimilar((2,3,5),(1,2,4)) == ((2, 3, 5), (1, 2, 4))\nassert     find_dissimilar((0,5,10),(2,3,4)) == ((0, 5, 10), (2, 3, 4))\nassert     find_dissimilar((1,1,5),(1,1,1)) == ((1, 1, 5), (1, 1, 1))\nassert     find_dissimilar((-1,1,-1),(1,-1,1)) == ((-1, 1, 1), (1, -1, -1))"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_dissimilar((1,2,3,4,5), (1,2,3,4,5)) == (5,4)\nassert     find_dissimilar((1,2,3,4,5), (1,2,3)) == (4,)\nassert     find_dissimilar((1,2,3,4,5), (1,2,3,6,5)) == ()\nassert     find_dissimilar((1,2,3,4,5), (2,4)) == (1,3)\nassert     find_dissimilar((1,2,3,4,5), (6,3,4,5)) == (1,2)\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_dissimilar((1,2), (2,2)) == ()\nassert     find_dissimilar((1,2), (2,3)) == (2,)\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_dissimilar((1, 2, 3, 4, 5, 6), (1, 2, 3, 4, 5, 6)) ==  [5, 6], \"Should find the first non-repeating element in the second tuple.\"\nassert     find_dissimilar((1, 2, 3, 4, 5, 6), (1, 2, 3, 4, 5, 6)) ==  [1, 2, 3, 4, 5, 6], \"Should find the first non-repeating element in the second tuple.\"\n\nassert     find_dissimilar((1, 2, 3, 4, 5, 6), (1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6)) ==  [5, 6], \"Should find the first non-repeating element in the second tuple.\"\nassert     find_dissimilar((1, 2, 3, 4, 5, 6), (1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6)) ==  [1, 2, 3, 4, 5, 6], \"Should find the first non-repeating element in the second tuple.\""
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_dissimilar((0,1),(1,2)) == True\nassert     find_dissimilar((0,1,2),(1,2,3)) == False\nassert     find_dissimilar((1,2,3),(0,1,2)) == True\nprint('correct')\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     even_ele((1, (2, 3), 4), even_fnc) == (2, 3, 4), \"Wrong return value!\"\nassert     even_ele((1, (2, 2), 4), even_fnc) == (2, 2, 4), \"Wrong return value!\"\nassert     even_ele((1, (2, 3), 4), even_fnc) == (2, 3, 4), \"Wrong return value!\"\nassert     even_ele((1, (2, 3), 4), even_fnc) == (2, 3, 4), \"Wrong return value!\"\nassert     even_ele((1, (2, 3), 4), even_fnc) == (2, 3, 4), \"Wrong return value!\"\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     even_ele([1, 2, (3, 4), 5, 6], even_fnc) == (2, (3, 4), 5, 6)\nassert     even_ele([1, 2, (3, 4), 5, 6], even_fnc_2) == (2, (3, 4), 5, 6)\nassert     even_ele([1, 2, 3, 4, 5], even_fnc_3) == (2, 3, 4, 5)\nassert     even_ele([1, 2, (3, 4), 5, 6], even_fnc_4) == (2, (3, 4), 5, 6)\nassert     even_ele([1, 2, (3, 4), 5, 6], even_fnc_5) == (2, (3, 4), 5, 6)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     even_ele((1, 2, 3, 4, 5, 6), even_ele) == (1, 2, 3, 4, 5, 6)\nassert even_ele((1, 2, 3, 4, 5, 6), even_ele) == (1, 2, 3, 4, 5)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     even_ele((1, 2, ('a', 'b'), ('c', 'd'), ('e', 'f')), lambda x: x[0] % 2 == 0) == (1, 2, ('a', 'b'), ('c', 'd'), ('e', 'f'))\nassert     even_ele((1, 2, (3, 4, 5), ('a', 'b'), ('c', 'd')), lambda x: x[0] % 2 == 0) == (1, 2, (3, 4, 5), ('a', 'b'), ('c', 'd'))\nassert     even_ele(((1, 2), (3, 4, 5), ('a', 'b'), ('c', 'd')), lambda x: x[0] % 2 == 0) == ((1, 2), (3, 4, 5), ('a', 'b'), ('c', 'd'))\nassert     even_ele((1, 2, (3, 4, 5, 6), ('a', 'b'), ('c', 'd')), lambda x: x[0] % 2 == 0) == (1, 2, (3, 4, 5), ('a', 'b'), ('c', 'd'))\nassert     even_ele(((1, 2), (3, 4, 5, 6), ('a', 'b'), ('c', 'd')), lambda x: x[0] % 2 == 0) == ((1, 2), (3, 4, 5), ('a', 'b'), ('c', 'd'))\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert even_ele(test_tuple, even_fnc) == test_tuple_after_fnc_exec\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \neven_ele((1, (2, 3, 4), 5), even_fnc) == ((2, 3, 4), 5), 'FAILURE!'\nassert \neven_ele(((1, (2, 3, 4)), 5), even_fnc) == (1, 2, 3, 4, 5), 'FAILURE!'\nassert \neven_ele((((1, 2), 3), 4), even_fnc) == (1, 2, 3, 4), 'FAILURE!'\nassert \neven_ele(((1, 2, 3), 4), even_fnc) == (1, 2, 3, 4), 'FAILURE!'\nassert \neven_ele((2, (3, 4, 5)), even_fnc) == (2, 3, 4, 5), 'FAILURE!'\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     even_ele((1,2,3), lambda tup: len(tup) % 2 == 0) == (1, 2, )\nassert     even_ele(((1, 2), 3, (4, 5, 6)), lambda tup: len(tup) % 2 == 0) == ((1, 2), 3, )\nassert     even_ele((((1, 2), 3), 4, 5), lambda tup: len(tup) % 2 == 0) == ((1, 2), 3, )\nassert     even_ele((((1, 2, 3), 4), 5, 6), lambda tup: len(tup) % 2 == 0) == ((1, 2, 3), )\nassert     even_ele(((((1, 2), 3), 4), 5, 6), lambda tup: len(tup) % 2 == 0) == ((1, 2), )\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     surface_Area(3,3) == 12, \"Wrong Answer. Your answer is incorrect.\"\nassert     surface_Area(3,8) == 24, \"Wrong Answer. Your answer is incorrect.\"\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     surface_Area(1, 2) == 6\nassert     surface_Area(2, 3) == 14\nassert     surface_Area(3, 3) == 21\nassert     surface_Area(4, 5) == 36\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     surface_Area(2,3) == 8, \"Wrong Answer\"\nassert surface_Area(2,4) == 10, \"Wrong Answer\"\nassert surface_Area(1,3) == 6, \"Wrong Answer\"\nassert surface_Area(1,4) == 10, \"Wrong Answer\"\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     surface_Area(2,3) == 4, \"surface_Area(2,3) = 4\"\nassert     surface_Area(3,2) == 9, \"surface_Area(3,2) = 9\"\nassert     surface_Area(4,4) == 16, \"surface_Area(4,4) = 16\"\nassert     surface_Area(3,4) == 8, \"surface_Area(3,4) = 8\"\nassert     surface_Area(1,3) == 6, \"surface_Area(1,3) = 6\"\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nsurface_Area(1, 1) == 4 \nassert \nsurface_Area(2, 2) == 6 \nassert \nsurface_Area(3, 3) == 12 \nassert \nsurface_Area(4, 4) == 16 \nassert \nsurface_Area(5, 5) == 20 \n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     surface_Area(5,5) == 50\nassert     surface_Area(2,2) == 2\nassert     surface_Area(2,3) == 8\nassert surface_Area(5,7) == 98\nassert surface_Area(6,2) == 106"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     surface_Area(2,4) == 8\nassert surface_Area(8,4) == 48\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     surface_Area(5,8) == 40\nassert     surface_Area(3,2) == 12\nassert     surface_Area(2,5) == 20\nassert     surface_Area(1,1) == 4\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     my_dict({}) == False,'my_dict({\"a\":1}) == False'\nassert     my_dict({}) == False,'my_dict({\"a\":\"b\"}) == False'\nassert     my_dict({\"a\":1}) == False,'my_dict({\"a\":1,\"b\":2}) == False'\nassert     my_dict({\"a\":\"b\"}) == False,'my_dict({\"a\":1,\"b\":\"b\"}) == False'\nassert     my_dict({\"a\":1,\"b\":2}) == False,'my_dict({\"a\":1,\"b\":2,\"c\":3}) == False'\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     my_dict({\"a\":1}) == True\nassert     my_dict({\"a\":1,\"b\":2,\"c\":3}) == False\nassert     my_dict({\"a\":1,\"b\":2,\"c\":3,\"d\":4}) == False\nassert     my_dict({\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5,\"f\":6}) == True\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     my_dict(dict()) == True\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     my_dict({'a': 1, 'b': 2, 'c': 3}) == False\nassert my_dict({}) == False\nassert my_dict({1: 'one'}) == False\nassert my_dict({1: 'one', 2: 'two'}) == False\nassert my_dict({'a': 1}) == False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     my_dict({\"key1\":\"value1\", \"key2\":\"value2\"}) == False, \"Test 1 Failed\"\nassert     my_dict({\"key2\":\"value2\", \"key1\":\"value1\"}) == True, \"Test 2 Failed\"\nassert     my_dict({\"key1\":\"value1\", \"key2\":\"value2\", \"key3\":\"value3\", \"key4\":\"value4\"}) == True, \"Test 3 Failed\"\nassert     my_dict({\"key1\":\"value1\", \"key2\":\"value2\", \"key3\":\"value3\", \"key4\":\"value4\", \"key5\":\"value5\", \"key6\":\"value6\", \"key7\":\"value7\"}) == False, \"Test 4 Failed\"\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     my_dict({}) == True, \"Please, try again. The result should be True\"\nassert     my_dict({\"name\":\"Peter\", \"surname\":\"Parker\"}) == False, \"Please, try again. The result should be False\"\nassert     my_dict({\"name\":\"Peter\", \"surname\":\"Parker\", \"age\":21}) == True, \"Please, try again. The result should be True\"\nassert     my_dict({\"name\":\"Peter\", \"surname\":\"Parker\", \"age\":21, \"job\":\"student\"}) == False, \"Please, try again. The result should be False\"\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     my_dict({}) == True, 'this should be True'\nassert     my_dict({'a': 1}) == False, 'this should be False'\nassert     my_dict({'a': 1, 'b': 2}) == False, 'this should be False'\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     my_dict({}) == False\nassert     my_dict({1:2,3:4}) == False\nassert     my_dict({1:1,2:2}) == True\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     my_dict({}) == True, \"The dictionary is empty\"\nassert my_dict({'a':1, 'b':2}) == False, \"The dictionary is not empty\"\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     catalan_number(1) == 1\nassert     catalan_number(2) == 2\nassert     catalan_number(3) == 5\nassert     catalan_number(4) == 14\nassert     catalan_number(5) == 42\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     catalan_number(1) == 1, \"Your function returns wrong value\"\nassert     catalan_number(2) == 2, \"Your function returns wrong value\"\nassert     catalan_number(3) == 4, \"Your function returns wrong value\"\nassert     catalan_number(4) == 6, \"Your function returns wrong value\"\nassert     catalan_number(5) == 10, \"Your function returns wrong value\"\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef is_prime_number(num):\n    '''\n    Write a function which returns True if the number is prime number, otherwise return False.\n    '''\n    pass\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     catalan_number(0) == 1\nassert     catalan_number(1) == 1\nassert     catalan_number(2) == 2\nassert     catalan_number(3) == 4\nassert     catalan_number(4) == 5\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(catalan_number(5))"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     catalan_number(1) == 1\nassert     catalan_number(2) == 2\nassert     catalan_number(3) == 2\nassert     catalan_number(4) == 5\nassert     catalan_number(5) == 14\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n'''\n2.Write a function which returns True if a given string is a palindrome and False if not.\n    e.g.  The palindrome 'nursesrun' is True.\n    e.g. 'racecar' is False.\n    e.g.  'racecar'.lower() == 'racecar' is True.\n'''\ndef is_palindrome(s):\n    '''\n    Write a function which returns True if a given string is a palindrome and False if not.\n    '''\n    pass\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nassert catalan_number(0) == 1\nassert catalan_number(1) == 1\nassert catalan_number(2) == 2\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_adverbs(\"\"\"\nThe quantity of ointment was very much important. \nThe quantity of ointment was not that much important. \nThe quantity of ointment was pretty important. \nThe quantity of ointment was so important. \nThe quantity of ointment is important. \nThe quantity of ointment is so important. \nThe quantity of ointment is quite important. \nThe quantity of ointment is extremely important.\n\"\"\") == [['very', 5], ['not', 8], ['pretty', 9], ['so', 14], ['exactly', 15], ['quite', 19], ['extremely', 21], ['very', 26]]\nassert     find_adverbs(\"\"\"\nThe quantity of ointment was very much important. \nThe quantity of ointment was not that much important. \nThe quantity of ointment was pretty important. \nThe quantity of ointment was so important. \nThe quantity of ointment is important. \nThe quantity of ointment is so important. \nThe quantity of ointment is quite important. \nThe quantity of ointment is extremely important.\n\"\"\") == [['very', 5], ['not', 8], ['pretty', 9], ['so', 14], ['exactly', 15], ['quite', 19], ['extremely', 21], ['very', 26]]\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_adverbs(\n        'My son was a very naughty boy.'\n    ) ==     {'ly' : 4, 'naughty' : 8}\n\n\n\n'''\nWrite a function to find the first adverb ending with ly and its positions in a given string.\n\nAssume the function will only be called on a text string where the text is not empty. \nAssume the function will not be called on a string that is empty.\n'''\n\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pattern = r'(ly|lily|lilying|lilylike)$'\n    return re.findall(pattern,text)\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_adverbs(\"My niece is loving you\") == (1, 3)\nassert     find_adverbs(\"My niece is loving you\") == (2, 4)\nassert     find_adverbs(\"She gave her class-test to the teacher\") == (5, 9)\nassert     find_adverbs(\"She gave her class-test to the teacher\") == (4, 8)\nassert     find_adverbs(\"He gave my class-test to the teacher\") == (3, 7)\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_adverbs(\"She hates the prospect that she\u2019s going to lose all her money. \") == \\\n[1, 6], \"Wrong output for the provided sample\"\nassert     find_adverbs(\"The new air aspirant is still quite elusive. \") == \\\n[], \"Wrong output for the provided sample\"\nassert     find_adverbs(\"He has no plans for the future. \") == \\\n[], \"Wrong output for the provided sample\"\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_adverbs(\"Toshkent has been a very good and real time business\") == \"toshkent\"\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_adverbs('''No, you should put this\n                    in the car''') == (False,\n                    [])\nassert     find_adverbs('''When you find\n                    something wrong, you should\n                    conclude it in the car''') == (False,\n                    [])\nassert     find_adverbs('''I have the same idea.\n                    I've got my own car.''') == (False,\n                    [])\nassert     find_adverbs('''When you find\n                    something wrong, you should\n                    conclude it in the car''') == (True,\n                    [42, 99])\nassert     find_adverbs('''I have the same idea.\n                    I've got my own car.''') == (True,\n                    [13, 35])\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nfind_adverbs('All of us are given an infinite amount of time')\nfind_adverbs('All of us have been given an infinite amount of time')\nfind_adverbs('All of us have been given an infinite amount of time')\nfind_adverbs('I like to repeat things more often.')\nfind_adverbs('This is the most commonly repeated phrase.')\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_adverbs('') == 'Found no adverbs ending with ly.'\nassert     find_adverbs('For now I cannot remember any adverbs ending with ly.') == 'Found no adverbs ending with ly.'\nassert     find_adverbs('As soon as I was home I had to go to work.') == 'As soon as I was home I had to go to work.'\nassert     find_adverbs('A goodly morning.') == 'A goodly morning.'\nassert     find_adverbs('I would like to go to the cinema') == 'I would like to go to the cinema.'\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_adverbs(\"It's a beautiful day!\") == False\nassert     find_adverbs(\"It's a beautiful day!\") == False\nassert     find_adverbs(\"It's a beautiful day!\") == False\nassert     find_adverbs(\"It's a beautiful day!\") == False\nassert     find_adverbs(\"It's a beautiful day!\") == False\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_adverbs(\"Come on, let's get started with this semaphore thing.\") == None, \"Your function doesn't find the adverbs\"\nassert     find_adverbs(\"Come on, let's get started with this semaphore thing. The semaphore was here!\") == None, \"Your function doesn't find the adverbs\"\nassert     find_adverbs(\"Come on, let's get started with this semaphore thing. If you don't go, you'll never get there!\") == None, \"Your function doesn't find the adverbs\"\nassert     find_adverbs(\"Come on, let's get started with this semaphore thing. The semaphore was here!\") == None, \"Your function doesn't find the adverbs\"\nassert     find_adverbs(\"Come on, let's get started with this semaphore thing. The semaphore was here!\") == None, \"Your function doesn't find the adverbs\"\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nexpensive_items([(4, 2), (6, 1), (8, 3), (7, 4), (3, 5), (6, 6)], 2) == [\n    (6, 6), (7, 4), (3, 5)\n]\nassert expensive_items([(4, 2), (6, 1), (8, 3), (7, 4), (3, 5), (6, 6)], 5) == [\n    (6, 6), (7, 4), (3, 5), (8, 3), (4, 2)\n]\nassert expensive_items([(4, 2), (6, 1), (8, 3), (7, 4), (3, 5), (6, 6)], 1) == [\n    (7, 4), (3, 5), (6, 6), (4, 2)\n]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     expensive_items([1, 2, 3, 4, 5, 10], 5) == [10, 5, 5, 10, 5]\nassert expensive_items([1, 1, 1, 1], 1) == [1]\n\ndef expensive_items2(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    pass\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nexpensive_items([[1,1,2,2], [4,8,16,32], [64,128,256,512]], 2) == [[4,8],[64,512]]"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     expensive_items([5, 2, 3, 2, 7, 4], 2) == [7, 5]\nassert     expensive_items([7, 2, 3, 2, 7, 4], 1) == [7]\nassert     expensive_items([7, 2, 3, 2, 7, 4], 0) == []\n\n'''\nYou are given a non-empty array of positive integers. Each number can be used at most once.\n\nReturn an array of the same size where the element at each index is the number of times that element was used.\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    expensive_items([8,2,7,7,5,4,6,3,4,1],2) == (1,5)\n    expensive_items([0,1,2,3,4,5],0) == []\n    expensive_items([8,2,7,7,5,4,6,3,4,1,1,2],2) == (1,5)\n    expensive_items([8,2,7,7,5,4,6,3,4,1,1,2],5) == (1,5,3,4)\n    expensive_items([1,2,3,4,5,6,7,8,9,10],5) == (1,2,3,4,5)\n    expensive_items([0,1,2,3,4,5],4) == (2,3,4)\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nimport heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    pass\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    expensive_items([\n                (1, 'Item 1'),\n                (1, 'Item 1'),\n                (2, 'Item 2'),\n                (3, 'Item 3'),\n                (5, 'Item 5'),\n                (10, 'Item 10'),\n                (0, 'Item 0'),\n                (2, 'Item 2'),\n                (10, 'Item 10')\n                ],3) ==\\\n    [\n    (10, 'Item 10'),\n    (5, 'Item 5'),\n    (2, 'Item 2'),\n    (1, 'Item 1')\n    ]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     expensive_items([\"vodka\", \"sake\", \"perl\", \"gin\"], 1) == [\"gin\"], \"Expected: ['gin']\"\nassert     expensive_items([\"vodka\", \"sake\", \"perl\", \"gin\"], 2) == [\"gin\", \"gin\"], \"Expected: ['gin', 'gin']\"\nassert     expensive_items([\"vodka\", \"sake\", \"perl\", \"gin\"], 3) == [\"gin\", \"gin\", \"gin\"], \"Expected: ['gin', 'gin', 'gin']\"\nassert     expensive_items([\"vodka\", \"sake\", \"perl\", \"gin\"], 4) == [\"gin\", \"gin\", \"gin\", \"gin\"], \"Expected: ['gin', 'gin', 'gin', 'gin']\"\nassert     expensive_items([\"vodka\", \"sake\", \"perl\", \"gin\"], 5) == [\"gin\", \"gin\", \"gin\", \"gin\", \"gin\"], \"Expected: ['gin', 'gin', 'gin', 'gin', 'gin']\"\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef cheap_item(items,n):\n    '''\n    Write a function to find the cheapest item in a given dataset.\n    '''\n    pass\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nsplit_Arr([1,2,3,4,5,6,7,8,9,10], 4) == [[1, 2, 3, 4], [5, 6, 7, 8, 9, 10]]\nassert split_Arr([1,2,3,4,5,6,7,8,9,10], 4) == [[1, 2, 3, 4], [5, 6, 7, 8, 9, 10]]\nassert split_Arr([1,2,3,4,5,6,7,8,9,10], 4) == [[1, 2, 3, 4], [5, 6, 7, 8, 9, 10]]\nassert split_Arr([1,2,3,4,5,6,7,8,9,10], 4) == [[1, 2, 3, 4], [5, 6, 7, 8, 9, 10]]\nassert split_Arr([1,2,3,4,5,6,7,8,9,10], 4) == [[1, 2, 3, 4], [5, 6, 7, 8, 9, 10]]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     split_Arr([1,2,3,4,5,6,7,8], 3) == [[1,2,3],[4,5,6],[7,8]]\nassert     split_Arr([1,2,3,4,5,6,7,8,9,10], 3) == [[1,2,3,4],[5,6,7,8,9],[10]]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    pass\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef remove_duplicates(l):\n    '''\n    Write a python function to remove the duplicate elements in a list.\n    '''\n    pass\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef flatten(d):\n    '''\n    Write a python function to flatten a dictionary as a single list.\n    '''\n    pass\n\ndef flatten(d):\n    '''\n    Write a python function to flatten a dictionary as a single list.\n    '''\n    pass\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef split_Arr_using_two_lists(l, n):\n    '''\n    Write a python function to split a list at the nth element and add the first part to the end.\n    '''\n    pass\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert list_tuple([1,2,3,4,5]) == (1,2,3,4,5), \"Wrong\"\nassert list_tuple([[1,2,3],[4,5,6]]) == (1,2,3,4,5,6), \"Wrong\"\nassert list_tuple([1,2,3,4,5]) == (1,2,3,4,5), \"Wrong\"\nassert list_tuple([\"a\",\"b\",\"c\"]) == (\"a\",\"b\",\"c\"), \"Wrong\"\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     list_tuple([1, 2, 3, 4, 5]) == (1, 2, 3, 4, 5), 'Wrong'\nassert     list_tuple([]) == (0, 0, 0, 0), 'Wrong'\n\ndef list_str(listx):\n    '''\n    Write a function to convert a list to a string.\n    '''\n    pass\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     list_tuple([1,2,3,4,5]) == (1,2,3,4,5), \"not working\"\nassert list_tuple([1,2,3,4,5]) == (1,2,3,4,5), \"not working\"\n\ndef list_tuples(listy):\n    '''\n    Write a function to convert a list of tuples to a list.\n    '''\n    pass\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     list_tuple([]) == ()\nassert     list_tuple([1,2]) == (1,2)\nassert     list_tuple([1,2,3]) == (1,2,3)\nassert     list_tuple(['a','b','c']) == ('a','b','c')\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     list_tuple([]) == tuple()\nassert     list_tuple([1, 2, 3]) == (1, 2, 3)\nassert     list_tuple([1, 2, (3, 4), 5]) == (1, 2, (3, 4), 5)\nassert     list_tuple([1, 2, (3, 4), (5, 6), 7]) == (1, 2, (3, 4), (5, 6), 7)\nassert     list_tuple([1, 2, (3, 4), (5, 6), (7, 8, 9)]) == (1, 2, (3, 4), (5, 6), (7, 8, 9))\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     list_tuple([1,2,3,4]) == (1,2,3,4), 'List is not converted to tuple'\nassert list_tuple('a') == ('a',), 'String is not converted to tuple'\nassert list_tuple('a'*4) == ('a','a','a','a'), 'String is not converted to tuple'\nassert list_tuple(list('a')) == ('a','a','a','a'), 'String is not converted to tuple'\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     list_tuple([]) == ( )\nassert     list_tuple([1]) == (1,)\nassert     list_tuple([1,2]) == (1,2)\nassert     list_tuple([1,2,3]) == (1,2,3)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     list_tuple([1, 2, 3]) == (1, 2, 3), \\\n        \"Error!\"\nassert     list_tuple([]) == (), \\\n        \"Error!\"\nassert     list_tuple((1,)) == (1,), \\\n        \"Error!\"\nassert     list_tuple([1, 2, 3, 1]) == (1, 2, 3), \\\n        \"Error!\"\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     list_tuple([1,2,3]) == (1,2,3)\nassert     list_tuple(['apple','pear','orange']) == ('apple','pear','orange')\nassert     list_tuple(('apple','pear','orange')) == ('apple','pear','orange')\n\ndef list_tuple2(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     big_diff([1,2,3,10]) == 20\nassert     big_diff([1,100,1000]) == 1\nassert     big_diff([1,2,3,4]) == 0\nassert     big_diff([-1,-2,-3,0]) == 0\nassert     big_diff([1,-2,-3,0]) == -4\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     big_diff([-3, 5, 10, 20, 4]) == 8, 'Wrong output!'\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     big_diff([-3, 4, 9, 2, 5, 8, 7, 1]) == 6\nassert     big_diff([-3, 4, 9, 2, 5, 8, 7]) == 6\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nbig_diff([10,3,5,6]) == 3\nassert big_diff([-10,-3,-5,-6]) == -3"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     perfect_squares(0,9) == False, \"First\"\nassert     perfect_squares(1,9) == True, \"Second\"\nassert     perfect_squares(0,1) == False, \"Third\"\nassert     perfect_squares(10,25) == True, \"Fourth\"\nassert     perfect_squares(25,10) == True, \"Fifth\"\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     perfect_squares(5, 5) == True, \"Correctness test failed!\"\nassert     perfect_squares(5, 1) == False, \"Correctness test failed!\"\nassert     perfect_squares(2, 2) == True, \"Correctness test failed!\"\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     perfect_squares(2, 10) == set(range(4, 25))\nassert     perfect_squares(100, 300) == set(range(100, 301))\nprint(\"Correct\")\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     perfect_squares(0,0) == [], \"input 0,0 should be []\"\nassert     perfect_squares(5,4) == [25], \"input 5,4 should be [25]\"\nassert     perfect_squares(3,12) == [9,36], \"input 3,12 should be [9,36]\"\nassert     perfect_squares(1,1) == [1], \"input 1,1 should be [1]\""
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert perfect_squares(0,1) == 1\nassert perfect_squares(9,4) == 9\nassert perfect_squares(1000,100) == 1\nassert perfect_squares(9,12) == 9\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     perfect_squares(0, 0) == None, \"Square not exist\"\nassert     perfect_squares(1, 1) == None, \"Square not exist\"\nassert     perfect_squares(5, 9) == None, \"Square not exist\"\nassert     perfect_squares(4, 4) == 4, \"Square found\"\nassert     perfect_squares(6, 11) == None, \"Square not exist\"\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \npolar_rect(3,4) == (5.0,5.0), \"Wrong output\"\nprint(\"SUCCESS\")\n\n'''\nGiven a complex number, write a function to determine whether it is an element of a given quadrilateral.\n'''\ndef is_element_of_quad(z):\n    '''\n    Write a function to determine whether it is an element of a given quadrilateral.\n    '''\n    pass\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n'''\nA function, as_rect, that takes in two numbers and returns their product.\n\nFor example, as_rect(3,4) returns 12.\n\n>>> as_rect(3,4)\n12\n>>> as_rect(3,-4)\n-12\n>>> as_rect(0,0)\n0\n>>> as_rect(-3,-4)\n12\n'''\n\ndef as_rect(x, y):\n    '''\n    Write a function that takes in two numbers and returns their product.\n    '''\n    pass\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     polar_rect(2,3) == (1,1)\nassert     polar_rect(1,4) == (1,2)\nassert     polar_rect(-2,3) == (-1,1)\nassert     polar_rect(0,4) == (0,2)\nassert     polar_rect(1,0) == (1,0)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     polar_rect(1,1) == (0,0), \"incorrect result\"\nassert     polar_rect(1.2,2.5) == (-2.2,3.7), \"incorrect result\"\nassert     polar_rect(2.1,0.2) == (1.3,0.8), \"incorrect result\"\nassert     polar_rect(2.1,0.2) == (1.3,0.8), \"incorrect result\"\nassert     polar_rect(0.8,1.6) == (-1.9,1.2), \"incorrect result\"\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    # You can call your function using the following:\nx = polar_rect(1,2)\nassert x == (2.5,4.0), 'Incorrect output for polar_rect(1,2) = (2.5,4.0)'\nx = polar_rect(1,1)\nassert x == (1.0,1.0), 'Incorrect output for polar_rect(1,1) = (1.0,1.0)'\nx = polar_rect(1,0)\nassert x == (0.5,1.0), 'Incorrect output for polar_rect(1,0) = (0.5,1.0)'\nx = polar_rect(1,0.5)\nassert x == (1.5,0.0), 'Incorrect output for polar_rect(1,0.5) = (1.5,0.0)'\nx = polar_rect(1,1.5)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    polar_rect(1,1) == (1,1)\n    polar_rect(0,0) == (0,0)\n    polar_rect(0.2,-1) == (-0.2,1)\n    polar_rect(1,-1) == (-1,1)\n    polar_rect(0.1,1) == (-1,-1)\n    polar_rect(1,0) == (1,-1)\n    polar_rect(0.9,0) == (1,0)\n    polar_rect(0.3,0) == (-0.3,0)\n    polar_rect(1.9,-1) == (-1,-1)\n    polar_rect(1,-1.9) == (-1,1)\n    polar_rect(1.9,1) == (-1,1)\n    polar_rect(-0.1,0.8) == (-1,0.8)\n    polar_rect(-0.3,0.4) == (-0.3,0.4)\n    polar_rect(-0.9,-1.1) == (-0.9,-1.1)\n    polar_rect(-1.5,0.2) == (-1.5,0.2)\n    polar_rect(-0.5,1.5) == (-0.5,1.5)\n    polar_rect(-0.5,0.2) == (-0.5,0.2)\n    polar_rect(1.5,0.2) == (1.5,0.2)\n    polar_rect(1.5,1.5) == (1.5,1.5)\n    polar_rect(1,0.3) == (1,0.3)\n    polar_rect(0.1,0.1) == (0.1,0.1)\n    polar_rect(0.3,0.3) == (0.3,0.3)\n    polar_rect(1.1,1.1) == (1.1,1.1)\n    polar_rect(1.8,1.9) == (1.8,1.9)\n    polar_rect(0.5,0.5) == (0.5,0.5)\n    polar_rect(0.8,0.2) == (0.8,0.2)\n    polar_rect(1.5,1.5) == (1.5,1.5)\n    polar_rect(0.9,0.9) == (0.9,0.9)\n    polar_rect(1.4,0.4) == (1.4,0.4)\n    polar_rect(0.7,0.5) == (0.7,0.5)\n    polar_rect(1.2,0.7) == (1.2,0.7)\n    polar_rect(0.4,0.7) == (0.4,0.7)\n    polar_rect(0.8,0.3) == (0.8,0.3)\n    polar_rect(0.3,0.8) == (0.3,0.8)\n    polar_rect(0.7,0.4) == (0.7,0.4)\n    polar_rect(0.4,0.3) == (0.4,0.3)\n    polar_rect(0.3,0.1) == (0.3,0.1)\n    polar_rect(0.4,0.4) == (0.4,0.4)\n    polar_rect(-0.1,-0.9) == (-1,-1)\n    polar_rect(-0.1,0.8) == (-1,0.8)\n    polar_rect(-0.1,1) == (-1,1)\n    polar_rect(-0.3,0.7) == (-0.3,0.7)\n    polar_rect(-0.4,-0.3) == (-0.4,-0.3)\n    polar_rect(-0.4,-0.1) == (-0.4,-0.1)\n    polar_rect(-0.3,-1.3) == (-0.3,-1.3)\n    polar_rect(-0.8,-1.2) == (-0.8,-1.2)\n    polar_rect(-0.3,-1.8) == (-0.3,-1.8)\n    polar_rect(-0.8,-1.3) == (-0.8,-1.3)\n    polar_rect(-1.2,0.7) == (-1.2,0.7)\n    polar_rect(-1.7,0.2) == (-1.7,0.2)\n    polar_rect(-1.3,-0.8) == (-1.3,-0.8)\n    polar_rect(-1.5,-0.6) == (-1.5,-0.6)\n    polar_rect(-1.4,0.4) == (-1.4,0.4)\n    polar_rect(-1.4,-0.4) == (-1.4,-0.4)\n    polar_rect(-1.3,1.2) == (-1.3,1.2)\n    polar_rect(-1.3,-0.5) == (-1.3,-0.5)\n    polar_rect(-1.4,-0.4) == (-1.4,-0.4)\n    polar_rect(-1.4,1.2) == (-1.4,1.2)\n    polar_rect(-1.4,0.5) == (-1.4,0.5)\n    polar_rect(-1.4,-0.5) == (-1.4,-0.5)\n    polar_rect(-1.3,0.4) == (-1.3,0.4)\n    polar_rect(-0.9,0.8) == (-0.9,0.8)\n    polar_rect(-0.7,0.5) == (-0.7,0.5)\n    polar_rect(-0.5,0.4) == (-0.5,0.4)\n    polar_rect(-0.5,-0.5) == (-0.5,-0.5)\n    polar_rect(-0.6,-0.7) == (-0.6,-0.7)\n    polar_rect(-0.7,-0.6) == (-0.7,-0.6)\n    polar_rect(-0.6,-0.3) == (-0.6,-0.3)\n    polar_rect(-0.7,-0.4) == (-0.7,-0.4)\n    polar_rect(-0.4,-0.6) == (-0.4,-0.6)\n    polar_rect(-0.4,-0.3) == (-0.4,-0.3)\n    polar_rect(-0.4,-0.5) == (-0.4,-0.5)\n    polar_rect(-0.4,-0.4) == (-0.4,-0.4)\n    polar_rect(-0.4,-0.3) == (-0.4,-0.3)\n    polar_rect(-0.4,-0.2) == (-0.4,-0.2)\n    polar_rect(-0.3,-0.3) == (-0.3,-0.3)\n    polar_rect(-0.3,-0.2) == (-0.3,-0.2)\n    polar_rect(-0.2,-0.2) == (-0.2,-0.2)\n    polar_rect(-0.1,-0.1) == (-0.1,-0.1)\n    polar_rect(-0.1,-0.2) == (-0.1,-0.2)\n    polar_rect(-0.1,-0.3) == (-0.1,-0.3)\n    polar_rect(-0.2,-0.4) == (-0.2,-0.4)\n    polar_rect(-0.3,-0.5) == (-0.3,-0.5)\n    polar_rect(-0.4,"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     polar_rect(1.5, 2) == (1, 1.0), 'The first case is incorrect'\nassert     polar_rect(1.5, 0) == (1, 1.5), 'The second case is incorrect'\nassert     polar_rect(1.5, -1.5) == (1.5, 1.0), 'The third case is incorrect'\nassert     polar_rect(0, 1.5) == (1.5, 1.0), 'The fourth case is incorrect'\nassert     polar_rect(0, 1.0) == (1.0, 1.0), 'The fifth case is incorrect'\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     polar_rect(1,1) == (0.0,1.0), \"The correct value should be 0.0\"\nassert     polar_rect(1.0,1.0) == (0.0,1.0), \"The correct value should be 0.0\"\nassert     polar_rect(2.0,1.0) == (0.0,1.0), \"The correct value should be 0.0\"\nassert     polar_rect(0.0,1.0) == (0.0,1.0), \"The correct value should be 0.0\"\nassert     polar_rect(-1.0,1.0) == (-1.0,1.0), \"The correct value should be -1.0\"\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     swap_List([1,2,3,4,5]) == [5,1,2,3,4]\nassert     swap_List([1,2,3,4,5,6]) == [5,6,1,2,3,4]\nassert     swap_List([1,2,3,4,5,6,7]) == [7,6,5,4,3,2,1]\nassert     swap_List([1,2,3,4,5,6,7,8]) == [7,8,1,2,3,4,5,6]\nassert     swap_List([1,2,3,4,5,6,7,8,9]) == [9,8,7,6,5,4,3,2,1]\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     swap_List(['h','e','l','l','o'] ) == ['o','l','l','e','h'], \"swap_List should swap elements\"\nassert swap_List([1,2,3,4,5,6]) == [6,5,4,3,2,1], \"swap_List should swap elements\"\nassert swap_List([1,2,3,4,5,6,7]) == [7,6,5,4,3,2,1], \"swap_List should swap elements\"\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     swap_List([1,2,3,4,5]) == [5,1,2,3,4], \"First\"\nassert     swap_List([1,2,3,4,5]) == [5,1,2,3,4], \"Second\"\nassert     swap_List([1,2,3,4,5]) == [5,1,2,3,4], \"Third\"\nassert     swap_List([1,2,3,4,5]) == [5,1,2,3,4], \"Fourth\"\nassert     swap_List([1,2,3,4,5]) == [5,1,2,3,4], \"Fifth\"\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     swap_List([1,2,3,4,5]) == [3,4,5,1,2]\nassert     swap_List([2,3,4,5,1]) == [3,4,5,1,2]\nassert     swap_List([1,2,3,4,5]) == [3,4,5,1,2]\nassert     swap_List([5,4,3,2,1]) == [3,4,5,1,2]\nassert     swap_List([4,3,2,1]) == [3,4,5,1]\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nswap_List([1,2,3,4]) == [2,3,4,1]\nassert swap_List([1,2,3,4,5]) == [2,3,4,5,1]\n\ndef product_of_List(newList): \n    '''\n    Write a python function to compute the product of all the elements in a list.\n    '''\n    pass\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     swap_List([1,2,3]) == [3,1,2], \"Wrong answer. Please check your code\"\n\nprint(\"---TEST CASE 2:---\")"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nswap_List([1, 2, 3, 4, 5]) == [3, 2, 1, 4, 5] \nassert swap_List([1, 2]) == [2, 1] \n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     swap_List(newList=[1, 2, 3, 4, 5]) == [5, 1, 2, 3, 4]\nassert swap_List(newList=[1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == [5, 1, 2, 3, 4, 5, 1, 2, 3, 4]\nassert swap_List(newList=[1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6]) == [5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 6]\nassert swap_List(newList=[1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5]) == [5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6]\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     swap_List([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == [15,16,17,18,19,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19], \"The list has been modified\"\nprint(\"\\n===> swap_List(List) should swap the first and last elements of a list and return the updated list:\")\nprint(swap_List([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]))\nprint(\"===> The function passed all test cases\")\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     binomial_Coeff(10,5) == 275, \"Failed, Correct output should be 275\" \nassert     binomial_Coeff(1000,500) == 1000000, \"Failed, Correct output should be 1000000\" \n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     binomial_Coeff(0,0) == 1 \nassert     binomial_Coeff(1,0) == 1\nassert     binomial_Coeff(2,0) == 1\nassert     binomial_Coeff(3,0) == 1\nassert     binomial_Coeff(4,0) == 1\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     binomial_Coeff(1,1)==1, \"Check the correctness of binomial_Coeff\"\nassert     binomial_Coeff(1,2)==1, \"Check the correctness of binomial_Coeff\"\nassert     binomial_Coeff(2,1)==1, \"Check the correctness of binomial_Coeff\"\nassert     binomial_Coeff(2,2)==2, \"Check the correctness of binomial_Coeff\"\nassert     binomial_Coeff(2,3)==10, \"Check the correctness of binomial_Coeff\"\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     binomial_Coeff(0,0) == 1\nassert     binomial_Coeff(1,0) == 1\nassert     binomial_Coeff(2,0) == 1\nassert     binomial_Coeff(3,0) == 1\nassert     binomial_Coeff(4,0) == 1\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef is_power_of_two(n):\n    '''\n    Write a python function to check whether a number is a power of two or not.\n    '''\n    pass\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     binomial_Coeff(4,2) == 16, '4-2 = 16'\nassert     binomial_Coeff(3,2) == 14, '3-2 = 14'\nassert     binomial_Coeff(2,3) == 6, '2-3 = 6'\nassert     binomial_Coeff(3,3) == 7, '3-3 = 7'\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     binomial_Coeff(2,1) == 2, \"Check your code: binomial_Coeff\"\nassert     binomial_Coeff(2,2) == 6, \"Check your code: binomial_Coeff\"\nassert     binomial_Coeff(3,2) == 10, \"Check your code: binomial_Coeff\"\nassert     binomial_Coeff(5,2) == 30, \"Check your code: binomial_Coeff\"\nassert     binomial_Coeff(10,1) == 362880, \"Check your code: binomial_Coeff\"\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     binomial_Coeff(0, 0) == 0, \"Error at n = 0\"\nassert binomial_Coeff(1, 1) == 1, \"Error at n = 1\"\nassert binomial_Coeff(2, 2) == 1, \"Error at n = 2\"\nassert binomial_Coeff(3, 3) == 1, \"Error at n = 3\"\nassert binomial_Coeff(4, 4) == 1, \"Error at n = 4\"\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     binomial_Coeff(5,4) == 2*4+1*1+2*2+3*3+4*4\nassert     binomial_Coeff(5,5) == 2*5+1*1+2*2+3*3+4*4+5*5\nassert     binomial_Coeff(6,5) == 2*5+1*1+2*2+3*3+4*4+5*5+6*6\nassert     binomial_Coeff(2,4) == 0\nassert     binomial_Coeff(3,4) == 6\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     removezero_ip('0.1.2.3') == '0.1.2.3', \"Wrong\"\nassert     removezero_ip('0.000.000.000') == '0.000.000.000', \"Wrong\"\nassert     removezero_ip('1.0.0.0') == '1.0.0.0', \"Wrong\"\nassert     removezero_ip('1.0.0.0.0') == '1.0.0.0', \"Wrong\"\nassert     removezero_ip('0.0.0.0.0') == '0.0.0.0', \"Wrong\"\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     removezero_ip('0.1.2.3') == '0.1.2.3'\nassert     removezero_ip('1.2.3.4') == '1.2.3.4'\nassert     removezero_ip('01.01.01.01') == '1.1.1.1'\nassert     removezero_ip('01.01.01.01') == '1.1.1.1'\nassert     removezero_ip('0.0.0.0') == '0.0.0.0'\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     removezero_ip('0.0.0.1') == '0.0.0.1'\nassert     removezero_ip('0.0.0.01') == '0.0.0.01'\nassert     removezero_ip('0.0.0.000') == '0.0.0.000'\nassert     removezero_ip('0.0.0.0000') == '0.0.0.0000'\nassert     removezero_ip('0.0000.0.0000') == '0.0000.0.0000'\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     removezero_ip(\"0.0.0.0\") == \"0.0.0.0\", \"Expected: 0.0.0.0\"\nassert     removezero_ip(\"192.168.1.0\") == \"192.168.1.0\", \"Expected: 192.168.1.0\"\nassert     removezero_ip(\"10.0.0.0\") == \"10.0.0.0\", \"Expected: 10.0.0.0\"\nassert     removezero_ip(\"192.168.1.0\") == \"192.168.1.0\", \"Expected: 192.168.1.0\"\nassert     removezero_ip(\"255.255.255.0\") == \"255.255.255.0\", \"Expected: 255.255.255.0\"\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     removezero_ip('00.00.00.00') == '00.00.00.00'\nassert removezero_ip('00.00.0.00') == '00.00.0.00'\nassert removezero_ip('0000.0.0.00') == '0000.0.0.00'\nassert removezero_ip('0000.0.0.0') == '0000.0.0.0'\nassert removezero_ip('0000.0000.0000.0000') == '0000.0000.0000.0000'\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ndef removezero_ip_check_result(input_str, expected_output):\n    print(\"Checking removezero_ip()\")\n    if removezero_ip(input_str) == expected_output:\n        print(f\"\\t{input_str}\")\n        print(f\"\\t{removezero_ip(input_str)}\")\n        print(f\"\\tcorrect\")\n    else:\n        print(f\"\\t{input_str}\")\n        print(f\"\\t{removezero_ip(input_str)}\")\n        print(f\"\\tincorrect\")\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     removezero_ip('0.1.2.3') == '0.1.2.3', \"Wrong\"\nassert     removezero_ip('1.2.3') == '1.2.3', \"Wrong\"\nassert     removezero_ip('0.1.2.3.4.5') == '0.1.2.3.4.5', \"Wrong\"\nassert     removezero_ip('0.0.0.0') == '0.0.0.0', \"Wrong\"\nassert     removezero_ip('0.0.0.0.0.0') == '0.0.0.0.0', \"Wrong\"\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     removezero_ip('192.168.0.2') == '192.168.0.2', 'Wrong'\nassert     removezero_ip('192.168.00.2') == '192.168.0.2', 'Wrong'\nassert     removezero_ip('0.168.0.0') == '0.168.0.0', 'Wrong'\nassert     removezero_ip('00.168.0.0') == '0.168.0.0', 'Wrong'\nassert     removezero_ip('0.0.168.0.0') == '0.0.168.0.0', 'Wrong'\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     removezero_ip(\"0.01.00.00.01\") == \"0.01.00.01\"\nassert     removezero_ip(\"0.0001.0000.0001\") == \"0.0001.0000.0001\"\nassert     removezero_ip(\"1.0.0.0\") == \"1.0.0.0\"\nassert     removezero_ip(\"2.3.4.5.6.7.8.9.0.0\") == \"2.3.4.5.6.7.8.9.0.0\"\nassert     removezero_ip(\"255.255.255.0\") == \"255.255.255.0\"\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     removezero_ip('0.0.0.0') == '0.0.0.0'\nassert     removezero_ip('0000.0000.0000.0000') == '0000.0000.0000.0000'\nassert     removezero_ip('1.000.000.000') == '1.000.000.000'\nassert     removezero_ip('0.000.000.000.000') == '0.000.000.000.000'\nassert     removezero_ip('0.0.0.0') == '0.0.0.0'\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     diff_even_odd([]) == 0, 'Empty List'\nassert     diff_even_odd([1,2,3,4,5]) == 1, 'Non-Even'\nassert     diff_even_odd([1,1,1,1,1]) == 0, 'All the same'\nassert     diff_even_odd([0,1,2,3,4]) == 3, 'Even, Odd'\n\nprint('PASSED ALL TEST CASES')"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ndiff_even_odd([1,2,3,4,5,6]) == 5\ndiff_even_odd([1,2,3,4,5,6,7,8,9,10]) == -2\ndiff_even_odd([]) == 0\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     diff_even_odd([1,2,3,4,5]) == (2,3), 'Wrong result for test 1'\nassert     diff_even_odd([1,2,3,4,5]) == (0,2), 'Wrong result for test 2'\nassert     diff_even_odd([1,3,2,4,4]) == (1,3), 'Wrong result for test 3'\nassert     diff_even_odd([1,3,2,4,4]) == (0,0), 'Wrong result for test 4'\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     diff_even_odd([1, 4, 3, 5]) == 2\nassert     diff_even_odd([1, 2, 4, 5]) == 3\nassert diff_even_odd([1, 2, 4, 6]) == -1\nassert     diff_even_odd([1, 2, 4, 6, 4, 5]) == 2\nassert diff_even_odd([1, 2, 4, 5, 6]) == -1\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 1:\n        return 0\n    elif len(list1) > 0:\n        odd_number = 0\n        even_number = 0\n        for item in list1:\n            if item % 2 == 0:\n                even_number += item\n            else:\n                odd_number += item\n        return abs(odd_number - even_number)\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     diff_even_odd([2, 4, 6, 8, 10, 12]) == 2\nassert     diff_even_odd([5, 9, 13]) == 3\nassert     diff_even_odd([1, 2, 3, 4, 5]) == 0\nassert     diff_even_odd([1, 4, 6, 8, 10]) == 2\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     diff_even_odd([4,3,2,6,1]) == 2, 'diff_even_odd([4,3,2,6,1]) should be 2'\nassert     diff_even_odd([1,2,3,4]) == 0, 'diff_even_odd([1,2,3,4]) should be 0'\nassert     diff_even_odd([2,3,4,5]) == 3, 'diff_even_odd([2,3,4,5]) should be 3'\nassert     diff_even_odd([4,1,2,5,3]) == 0, 'diff_even_odd([4,1,2,5,3]) should be 0'\nassert     diff_even_odd([5,6,7,8]) == 1, 'diff_even_odd([5,6,7,8]) should be 1'\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     diff_even_odd([]) == 0, \\\n    \"test 1 Failed\"\nassert     diff_even_odd([1, 1, 1, 1, 2, 3, 4, 5, 6]) == 3, \\\n    \"test 2 Failed\"\nassert     diff_even_odd([3, 6, 2, 1, 5, 4, 1]) == 3, \\\n    \"test 3 Failed\"\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     min_Swaps('01001011','110110001') == 1\nassert     min_Swaps('01001011','110110010') == 3\nassert     min_Swaps('11111','111111') == 0\nassert     min_Swaps('00011','011101') == 4\n\ndef is_binary(string):\n    '''\n    Write a python function to check if a given string is binary or not.\n    '''\n    pass\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     min_Swaps('10110', '00101') == 5, 'testcase1'\nassert     min_Swaps('10110', '00111') == 6, 'testcase2'\nassert     min_Swaps('10110', '1111') == 4, 'testcase3'\nassert     min_Swaps('10111', '00111') == 5, 'testcase4'\nassert     min_Swaps('10111', '01111') == 7, 'testcase5'\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     min_Swaps('1','11') == 1\nassert     min_Swaps('01','11') == 1\nassert     min_Swaps('11','01') == 1\nassert     min_Swaps('11','11') == 0\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     min_Swaps('10111','101111') == 2, 'Wrong answer'\nassert     min_Swaps('10111','101111') == 3, 'Wrong answer'\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     min_Swaps(\"01010101\",\"00110101\") == 2, \"Should be 2\"\nassert     min_Swaps(\"01010101\",\"10101010\") == 3, \"Should be 3\"\nassert     min_Swaps(\"01010101\",\"01010101\") == 0, \"Should be 0\"\nassert     min_Swaps(\"11111111\",\"01010101\") == 2, \"Should be 2\"\nassert     min_Swaps(\"01010101\",\"11111111\") == 5, \"Should be 5\"\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     min_Swaps('0111','0110') == 1\nassert     min_Swaps('0111','10011') == 2\nassert     min_Swaps('0111','0110') == -1\nassert     min_Swaps('10111','11001') == 3\n\ndef min_Swaps2(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    pass\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tuple_size((1, 2, 3)) == 6 \nassert     tuple_size((1, (2, 3, 4))) == 12 \nassert     tuple_size((1, (2, (3, 4, (5, 6, 7)), 8))) == 40 \n\ndef tuple_tolist(tuple_list):\n    '''\n    Write a function to turn a tuple into a list.\n    '''\n    pass\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_size([(1, 2), (2, 3), (3, 4)]) == 8, 'Wrong answer!'\nassert     tuple_size([('foo', 'bar'), ('baz', 'qux'), ('cat', 'bat')]) == 12, 'Wrong answer!'\nassert     tuple_size([(1, 1, 1, 1, 1, 1, 1, 1), (1, 1, 1, 1, 1, 1, 1, 1), (1, 1, 1, 1, 1, 1, 1, 1), (1, 1, 1, 1, 1, 1, 1, 1), (1, 1, 1, 1, 1, 1, 1, 1), (1, 1, 1, 1, 1, 1, 1, 1), (1, 1, 1, 1, 1, 1, 1, 1), (1, 1, 1, 1, 1, 1, 1, 1), (1, 1, 1, 1, 1, 1, 1, 1), (1, 1, 1, 1, 1, 1, 1, 1), (1, 1, 1, 1, 1, 1, 1, 1)]) == 24, 'Wrong answer!'\nassert     tuple_size([('a', 'b'), ('c', 'd'), ('e', 'f')]) == 8, 'Wrong answer!'\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_size(((1, 2, 3), ('a', 'b', 'c'))) == 9\nassert tuple_size((1,2,3,4)) == 4\nassert tuple_size((1,2,'3')) == 4\nassert tuple_size((1,2,3,4,5)) == 10\nassert tuple_size((1,2,3,4,5,'a','b')) == 14\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tuple_size([]) == 0\nassert     tuple_size([('h',0.75), ('l',0.85)]) == 4\nassert     tuple_size(('h',0.75), ('l',0.85)) == 4\nassert     tuple_size(('h',0.75), ('l',0.85), ('c',0.05)) == 8\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tuple_size((1,2,3,4,5,6,7,8,9,10)) == 21 \nassert tuple_size((1,2,3,4,5,6,7,8,9,10,10,10,10)) == 21\nassert tuple_size((1,2,3,4,5,6,7,8,9,10,10,10,10,10,10,10,10)) == 21\nassert tuple_size((1,2,3,4,5,6,7,8,9,10,10,10,10,10,10,10,10,10,10,10,10)) == 21\nassert tuple_size((1,2,3,4,5,6,7,8,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,1"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tuple_size([1,2,3])    ==    3\nassert     tuple_size([1,2,3,4])    ==    4\n\nassert     tuple_size([])    ==    0\nassert     tuple_size(())    ==    0\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tuple_size([]) == 0\nassert tuple_size((1,)) == 1\nassert tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tuple_size((1,2,3)) == 3\nassert tuple_size((1,2,3,4,5,6)) == 11\nassert tuple_size((1,2,3,4,5,6,7,8,9,10)) == 22\nassert tuple_size((1,2,3,4,5,6,7,8,9,10,11,12)) == 34\nassert tuple_size((1,2,3,4,5,6,7,8,9,10,11,12,13,14)) == 46\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tuple_size((\"python\", \"is\", \"cool\", \".\", \".\")) == 5\nassert     tuple_size((\"python\", \"is\", \"cool\", \".\")) == 4\n\ndef str_size(string_list):\n    '''\n    Write a function to find the size in bytes of the given string.\n    '''\n    pass\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_kth([1,2,3,4], [4,5,6,7], 2) == 3\nassert     find_kth([1,2,3,4], [4,5,6,7], 5) == 6\nassert     find_kth([1,2,3,4], [4,5,6,7], 1) == 1\nassert     find_kth([1,2,3,4], [4,5,6,7], 5) == 6\n\ndef merge_k_sorted_arrays(arr1, arr2, arr3):\n    '''\n    Write a function to merge two sorted arrays into a single sorted array.\n    Input:\n        arr1 - an array of integers, sorted in non-decreasing order\n        arr2 - an array of integers, sorted in non-decreasing order\n        arr3 - an array of integers, sorted in non-decreasing order\n    Output:\n        return a new sorted array of integers, which is obtained by merging arr1 and arr2\n    '''\n    pass\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_kth([2,3,4], [1,2], 2) == 2\nassert     find_kth([2,3,4], [1,2], 1) == 1\nassert     find_kth([2,3,4], [], 1) == None\nassert     find_kth([2,3,4], [], 5) == None\nassert     find_kth([], [], 1) == None\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef find_kth_value(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    pass\n\nassert find_kth_value(arr1 = [1,3,5,7], arr2 = [2,4,6,8], k = 5) == "
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_kth([5,7,8,9,10,11,12], [2,3,4,5,6,7], 3) == 8\nassert     find_kth([5,7,8,9,10,11,12], [2,3,4,5,6,7], 12) == 13\nassert     find_kth([5,7,8,9,10,11,12], [2,3,4,5,6,7], 7) == 9\nassert     find_kth([5,7,8,9,10,11,12], [2,3,4,5,6,7], 8) == 10\nassert     find_kth([5,7,8,9,10,11,12], [2,3,4,5,6,7], 1) == 1\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert find_kth([10, 20, 40, 80, 100], [1, 2, 3, 4, 5], 3) == 80\nassert find_kth([10, 20, 40, 80, 100], [1, 2, 3, 4, 5], 2) == 40\nassert find_kth([10, 20, 40, 80, 100], [1, 2, 3, 4, 5], 1) == 20\nassert find_kth([10, 20, 40, 80, 100], [1, 2, 3, 4, 5], 5) == 100\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef get_Kth_element(arr1, arr2, k):\n    '''\n    Write a function to find Kth element from the given two sorted arrays.\n    Return -1 if K is larger than the length of the shorter array.\n    '''\n    pass\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nfind_kth([1, 3, 5], [2, 4, 7], 2) == 3\nassert \nfind_kth([1, 3, 5], [2, 4, 7], 1) == 1\nassert \nfind_kth([1, 3, 5], [2, 4, 7], 8) == 7\nassert \nfind_kth([1, 3, 5], [2, 4, 7], 0) == 1\nassert \nfind_kth([1, 3, 5], [2, 4, 7], -1) == 1\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ndef is_armstrong_number(number):\n    if is_armstrong_number(number) == False:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     armstrong_number(10) == True, 'This number is not armstrong'\nassert     armstrong_number(1534) == False, 'This number is armstrong'\nassert     armstrong_number(19) == False, 'This number is not armstrong'\nassert     armstrong_number(4) == False, 'This number is not armstrong'\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     armstrong_number(153) == True\nassert     armstrong_number(153) == False\nassert     armstrong_number(153) == False"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \narmstrong_number(153)\narmstrong_number(371)\narmstrong_number(3)\narmstrong_number(1000)\n\nprint(\"Test case passed\")\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     armstrong_number(153) == True, \"153 is not an Armstrong Number\"\nassert armstrong_number(371) == False, \"371 is an Armstrong Number\""
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     armstrong_number(153)    ==    True,    \"153 is armstrong\"\nassert     armstrong_number(371)    ==    True,    \"371 is armstrong\"\nassert     armstrong_number(827)    ==    True,    \"827 is armstrong\"\nassert     armstrong_number(1634)    ==    True,    \"1634 is armstrong\"\nassert     armstrong_number(100)    ==    False,    \"100 is not armstrong\"\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    assert armstrong_number(153) == True\n    assert armstrong_number(371) == True\n    assert armstrong_number(371) == False\n    assert armstrong_number(1534) == True\n    "
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     armstrong_number(1)==False\nassert    armstrong_number(2)==False\nassert     armstrong_number(153)==True\nassert     armstrong_number(15399)==True\nassert     armstrong_number(153999)==False\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    \n    number = 10\n    sum = sum_average(number)\n    print(f\"sum of first {number} natural numbers = {sum}\")\n    print(f\"avg of first {number} natural numbers = {sum / number}\""
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_average(1) == 1.0, \"Error in sum_average\"\nassert     sum_average(10) == 55.0, \"Error in sum_average\"\nassert     sum_average(100) == 300.0, \"Error in sum_average\"\nassert     sum_average(0) == 0.0, \"Error in sum_average\"\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_average(1) == 1\nassert     sum_average(2) == 2\nassert     sum_average(3) == 4\nassert     sum_average(4) == 6\nassert     sum_average(5) == 10\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_average(1) == 0, \"Your function does not work\"\nassert     sum_average(2) == 1, \"Your function does not work\"\nassert     sum_average(3) == 1.5, \"Your function does not work\"\nassert     sum_average(4) == 2, \"Your function does not work\"\nassert     sum_average(5) == 2.5, \"Your function does not work\"\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_average(0) == 0, 'Function should return 0'\nassert     sum_average(1) == 1, 'Function should return 1'\nassert     sum_average(2) == 3, 'Function should return 3'\nassert     sum_average(3) == 6, 'Function should return 6'\nassert     sum_average(4) == 10, 'Function should return 10'\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_average(2) == 5, \"The sum of first two numbers is wrong.\"\nassert     sum_average(5) == 10, \"The sum of first five numbers is wrong.\"\n\n'''\nWrite a function that takes in a list and returns True if it contains a 3.\n'''\n\ndef has_three(nums):\n    '''\n    Write a function to find if a list contains a 3.\n    '''\n    pass\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_average(3) == 3, \"Error\"\nassert     sum_average(8) == 10, \"Error\"\nassert     sum_average(100) == 400, \"Error\"\nassert     sum_average(0) == 0, \"Error\"\n\nprint(\"Test passed\""
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_average(1) == (1, 1), \"1\"\nassert     sum_average(2) == (2, 2), \"2\"\nassert     sum_average(3) == (3, 3), \"3\"\nassert     sum_average(4) == (4, 4), \"4\"\nassert     sum_average(5) == (5, 5), \"5\"\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_average(5) == 15, \"Wrong return value\"\nassert     sum_average(3) == 6, \"Wrong return value\"\nassert     sum_average(1) == 1, \"Wrong return value\"\nassert     sum_average(0) == 0, \"Wrong return value\"\nassert     sum_average(11) == 33, \"Wrong return value\"\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert not is_Even(3)\nassert is_Even(1)\nassert not is_Even(7)\n\nprint(\"is_Even() works : \", is_Even(3))\nprint(\"is_Even() works : \", is_Even(1))\nprint(\"is_Even() works : \", is_Even(7))\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_Even(2) == False, \"expected 2 to be False\"\nassert     is_Even(0) == False, \"expected 0 to be False\"\nassert     is_Even(9) == True, \"expected 9 to be True\"\nassert     is_Even(-1) == False, \"expected -1 to be False\"\nassert     is_Even(16) == True, \"expected 16 to be True\"\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_Even(9) == True\nassert     is_Even(11) == True\nassert     is_Even(0) == False\nassert     is_Even(1) == False\nassert     is_Even(4) == True\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint('is_Even passed')\nprint('is_Even failed')\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nis_Even(5) == False\nis_Even(10) == True\nis_Even(3) == True\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\")\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_Even(2) == False, \"is_Even should return False for even number\"\nassert     is_Even(3) == True, \"is_Even should return True for odd number\"\nassert     is_Even(4) == False, \"is_Even should return False for even number\"\nassert     is_Even(5) == True, \"is_Even should return True for odd number\"\nassert     is_Even(6) == False, \"is_Even should return False for even number\"\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_Even(7) == False\nassert     is_Even(2) == True\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_Even(2) == False, 'The Given Number is even'\nassert     is_Even(3) == True, 'The Given Number is even'\nassert     is_Even(0) == False, 'The Given Number is even'\nassert     is_Even(4) == False, 'The Given Number is even'\nassert     is_Even(5) == True, 'The Given Number is even'\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nis_Even(4) == False\nis_Even(0) == True\nis_Even(2) == False\nis_Even(1) == False\nis_Even(3) == True\nis_Even(100) == True\nis_Even(101) == False\nis_Even(1000) == True\nis_Even(1001) == False"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     first_repeated_char('') == -1\nassert     first_repeated_char('a') == -1\nassert     first_repeated_char('abab') == -1\nassert     first_repeated_char('a') == 0\nassert     first_repeated_char('abc') == 1\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     first_repeated_char('abcabc') == 'a'\nassert     first_repeated_char('abccdeef') == 'c'\n\ndef count_even_occurrences(str1):\n    '''\n    Write a python function to count the even occurrencies of a given string.\n    '''\n    pass\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert first_repeated_char(\"Abcd\") == None\nassert first_repeated_char(\"aaaaa\") == None\nassert first_repeated_char(\"h\") == None\nassert first_repeated_char(\"abcd\") == \"d\"\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     first_repeated_char('') == '', 'Empty string'\nassert     first_repeated_char('a') == '', 'All unique'\nassert     first_repeated_char('aa') == 'a', 'All unique'\nassert     first_repeated_char('aaa') == 'a', 'All unique'\nassert     first_repeated_char('aaaa') == 'a', 'All unique'\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     first_repeated_char('s') =='s'\nassert     first_repeated_char('xy') == 'x'\nassert     first_repeated_char('kvjcvbj') == 'v'\nassert     first_repeated_char('abab') == 'a'\nassert     first_repeated_char('kkkkk') == 'k'\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     first_repeated_char(\"abcd\") == -1, \"Error: First repeated character was found in the given string\"\nassert first_repeated_char(\"traveller\") == -1, \"Error: First repeated character was found in the given string\"\nassert first_repeated_char(\"\") == -1, \"Error: First repeated character was found in the given string\"\nassert first_repeated_char(\"abab\") == 0, \"Error: First repeated character was found in the given string\"\nassert first_repeated_char(\"abca\") == 0, \"Error: First repeated character was found in the given string\"\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert first_repeated_char(\"\") == -1\nassert first_repeated_char(\"A\") == -1\nassert first_repeated_char(\"ABA\") == -1\nassert first_repeated_char(\"AGCAT\") == -1\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     first_repeated_char('aabcc') == 'a'\nassert     first_repeated_char('abcdeabcd') == 'a'\nassert     first_repeated_char('abcdefghi') == 'b'\nassert     first_repeated_char('abcdefghijklmnopqrstuvwxyz') == 'x'\nassert     first_repeated_char('aa') == None\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     first_repeated_char('') == '', 'Empty String'\nassert     first_repeated_char('A') == '', 'Expected No Repetition'\nassert     first_repeated_char('AA') == '', 'Expected No Repetition'\nassert     first_repeated_char('ABA') == '', 'Expected No Repetition'\nassert     first_repeated_char('ABABA') == 'A', 'Expected A'\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_ludic(10) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     get_ludic(100) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\nassert     get_ludic(1000) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\nassert     get_ludic(10000) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200]\nassert     get_ludic(100000) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_ludic(1) == [1]\nassert     get_ludic(2) == [1, 2]\nassert     get_ludic(3) == [1, 2, 3]\nassert     get_ludic(4) == [1, 2, 3, 4]\nassert     get_ludic(5) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_ludic(2) == [1,2]\nassert     get_ludic(3) == [1,2,3]\nassert     get_ludic(4) == [1,2,3,4]\nassert     get_ludic(5) == [1,2,3,4,5]\nassert     get_ludic(6) == [1,2,3,4,5,6]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_ludic(5) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_ludic(3) == [1,2], 'get_ludic(3) == 1,2'\nassert     get_ludic(7) == [1,3], 'get_ludic(7) == 1,3'\nassert     get_ludic(8) == [1,4], 'get_ludic(8) == 1,4'\nassert     get_ludic(10) == [1,2,5], 'get_ludic(10) == 1,2,5'\nassert     get_ludic(15) == [1,3,5,7], 'get_ludic(15) == 1,3,5,7'\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef get_lucids(n):\n    '''\n    Write a function to get all lucids smaller than or equal to a given integer.\n    '''\n    pass\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_ludic(100) == []\nassert     get_ludic(2222222222222222222222) == [2222222222222222222222]\n\ndef get_prime_list(n):\n    '''\n    Write a function to get all primes smaller than or equal to a given integer.\n    '''\n    pass\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_ludic(5) == (1,3), \"Wrong Answer\"\nassert     get_ludic(6) == (1,3,5), \"Wrong Answer\"\nassert     get_ludic(10) == (1,3,5,7), \"Wrong Answer\"\nassert     get_ludic(30) == (1,3,5,7,13,21,23,29), \"Wrong Answer\"\nassert     get_ludic(50) == (1,3,5,7,13,21,23,29,31,37), \"Wrong Answer\"\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_ludic(7) == [1,2,3,4,5,6]\nassert     get_ludic(10) == [1,2,3,4,5,6,7,8,9,10]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split()))\n\nassert reverse_words(\"Let's take LeetCode contest\") == \"s'teL ekat edoCteeL tsetnoc\"\nassert reverse_words(\"I am a student.\") == \"student a am I\"\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef reverse_words_2(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(s.split()[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nassert''.join(reverse_words(s)) ==''.join(s.split())[::-1]"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     reverse_words(\"I am a boy\") == \"boy a am I\", \"Should work for a sample test\"\nassert     reverse_words(\"I am a girl\") == \"girl a I am\", \"Should work for a sample test\"\nassert     reverse_words(\"I am a girl and boy\") == \"boy and girl a I am\", \"Should work for a sample test\"\nassert     reverse_words(\"I am a boy and girl\") == \"girl and boy a I am\", \"Should work for a sample test\"\n\n'''\nYou are given a string,s, and an integer,n.\nReturn a new string where the char at index n has been removed.\nThe value of n will always be a valid index of a char in the original string.\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     reverse_words(\"hello world\") == \"dlrow olleh\" \nassert     reverse_words(\"hell world\") == \"dlrow olleh\" \nassert     reverse_words(\"hello\") == \"olleh\" \nassert     reverse_words(\"\") == \"\" \nassert     reverse_words(\"a\") == \"a\" \n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     reverse_words(\"The quick brown fox jumps over the lazy dog.\") == \"dog the quick brown fox jump lazy\"\n\n'''\n7. Write a function to change a given string into a new string by replacing the character at even index with character at odd index.\n'''\ndef change_str_char(s):\n    '''\n    Write a function to change a given string into a new string by replacing the character at even index with character at odd index.\n    '''\n    pass\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     reverse_words(\"I like this program very much\") == \"much program this like very I\", \"Wrong!\"\nassert     reverse_words(\"  I like this program very much   \") == \"   much program this like very I  \", \"Wrong!\"\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     reverse_words(\"hello world\") == \"dlrow olleh\", \"Wrong answer.\"\nassert     reverse_words(\"hello\") == \"olleh\", \"Wrong answer.\"\nassert     reverse_words(\" \") == \"\", \"Wrong answer.\"\nassert     reverse_words(\"\") == \"\", \"Wrong answer.\"\nassert     reverse_words(\"hello world\") == \"dlrow olleh\", \"Wrong answer.\"\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     prime_num(1) is False\nassert     prime_num(2) is True\nassert     prime_num(4) is False\nassert     prime_num(13) is True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert prime_num(11)\nassert not prime_num(12)\nassert prime_num(13)\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef prime_num_generator(n):\n    '''\n    Write a generator to return all the primes numbers from 2 to n.\n    '''\n    pass\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     prime_num(5) == True, \"5 is not a prime number\"\nassert     prime_num(7) == False, \"7 is not a prime number\"\nassert     prime_num(11) == True, \"11 is a prime number\"\nassert     prime_num(17) == True, \"17 is a prime number\"\nassert     prime_num(18) == False, \"18 is not a prime number\"\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert prime_num(3)\nassert prime_num(4)\nassert not prime_num(6)\nassert not prime_num(1)\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     prime_num(3) == True\nassert     prime_num(5) == False\nassert     prime_num(11) == True\nassert     prime_num(17) == True\nassert     prime_num(1) == False\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n\n\n\n\n\n\ndef odd_nums(n):\n    '''\n    Write a function to find out all the odd numbers in the range of 1 to n\n    '''\n    pass\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef is_prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    \n    Examples:\n        Input  : 4\n        Output : True\n\n        Input  : 6\n        Output : False\n    '''\n    pass\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert math.pi * 2 == radian_degree(180)\nassert math.pi * 2 == radian_degree(360)\nassert math.pi * 2 == radian_degree(225)\nassert math.pi * 2 == radian_degree(90)\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef degrees_to_radian(degrees):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    pass\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint('\\nQuestion 6')\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    pass\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef degree_to_radian(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    pass\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     radian_degree(20) == 3.14\nassert     radian_degree(0) == 0\nassert     radian_degree(360) == 6.283\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     radian_degree(1) == 1.5707963267948966\nassert     radian_degree(359) == 1.5707963267948966\nassert     radian_degree(1.5) == 1.5235987836967757\nassert     radian_degree(359.5) == 1.5235987836967757\nassert     radian_degree(10) == 3.141592653589793\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert radian_degree(90) == math.pi/2\nassert radian_degree(180) == math.pi\nassert radian_degree(360) == 2*math.pi\n\ndef radian_degree_2(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    pass\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef test_radian_degree():\n    assert radian_degree(0) == 0\n    assert radian_degree(180) == 3.141592653589793\n    assert radian_degree(360) == 3.141592653589793\n    "
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     radian_degree(90) == math.pi/2\nassert     radian_degree(180) == math.pi\nassert     radian_degree(360) == 2*math.pi\nprint('You have passed the unit test.')\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_literals(\"abcabcbabc\", \"abc\") == (0, 3, 6)\nassert     find_literals(\"abcabcbabc\", \"bc\") == (2, 4, 6)\nassert     find_literals(\"abcabcbabc\", \"ab\") == (0, 0, 0)\nassert     find_literals(\"abcabcbabc\", \"bc\") == (2, 4, 6)"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    find_literals('abcdabc', '^abc') == (0, 3, 6)\n    find_literals('abcdabc', 'ab[abc]') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d') == (0, 2, 6)\n    find_literals('abcdabc', 'ab\\[c\\]d$') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d?$') == (0, 2, 6)\n    find_literals('abcdabc', 'ab\\[c\\]d+$') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d+?') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3}') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3}?') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3,4}?') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3,4}?') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3,4}?') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3,4}?') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3,4}?') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3,4}?') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3,4}?') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3,4}?') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3,4}?') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3,4}?') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3,4}?') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3,4}?') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3,4}?') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3,4}?') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3,4}?') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3,4}?') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3,4}?') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3,4}?') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3,4}?') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3,4}?') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3,4}?') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3,4}?') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3,4}?') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3,4}?') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3,4}?') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3,4}?') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3,4}?') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3,4}?') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3,4}?') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3,4}?') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3,4}?') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3,4}?') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3,4}?') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3,4}?') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3,4}?') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3,4}?') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3,4}?') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3,4}?') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3,4}?') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3,4}?') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3,4}?') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3,4}?') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3,4}?') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3,4}?') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3,4}?') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3,4}?') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3,4}?') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3,4}?') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3,4}?') == (0, 2, 5)\n    find_literals('abcdabc', 'ab\\[c\\]d{3,4}?') ="
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef find_all_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern and returns all matches.\n    '''\n    pass\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_literals('abracadabra', 'ab') == (2, 9, 10)\nassert     find_literals('abracadabra', 'b') == (1, 4, 5)\nassert     find_literals('abracadabra', 'rac') == (0, 0, 0)\nassert     find_literals('abracadabra', 'ad') == (0, 0, 0)\nassert     find_literals('abracadabra', 'aa') == (0, 0, 0)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_literals(\"abc\", \"a\") == ('a', 0, 1)\nassert     find_literals(\"abc\", \"b\") == ('b', 0, 1)\nassert     find_literals(\"abc\", \"abc\") == ('abc', 0, 3)\nassert     find_literals(\"abc\", \"xyz\") == ('', -1, -1)\nassert     find_literals(\"abc\", \"a*b\") == ('a', 0, 2)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_literals(\n    \"\"\"\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc\n    abc"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert find_literals(\"ac\", \"abcd\") == ('a', 1, 1)\nassert find_literals(\"abc\", \"abcd\") == ('a', 1, 1)\nassert find_literals(\"abc\", \"bc\") == ('', -1, -1)\nassert find_literals(\"abcd\", \"abcd\") == ('abcd', 0, 4)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_literals('abcabcabc', '(a|b|c)+') == ['abc', 0, 5]\nassert     find_literals('abcabcabc', 'abc') == ['abc', 0, 4]\nassert     find_literals('abcabcabc', 'abcabc') == ['abcabc', 0, 8]\nassert     find_literals('abcabcabc', 'abcabcabc') == ['abcabcabc', 0, 11]\nassert     find_literals('abcabcabc', 'abcabcab') == ['abcabc', 0, 6]\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_literals(\"gandhi\", \"g\") == (\"g\", 0, 2)\nassert     find_literals(\"dhaka\", \"gh\") == (\"gh\", 3, 5)\nassert     find_literals(\"dhaka\", \"gh\") == (\"dhaka\", 0, 7)\n\n'''\nWrite a function to return the number of non-overlapping occurrences of a pattern in a string.\n'''\ndef count_non_overlapping_pattern(pattern, text):\n    '''\n    Write a function to count the number of non-overlapping occurrences of a pattern in a string.\n    '''\n    pass\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_literals('a', 'a') == (0,1)\nassert     find_literals('b', 'a') == (-1,0)\nassert     find_literals('ab', 'a') == (0,2)\nassert     find_literals('ab', 'ab') == (0,1)\nassert     find_literals('ababababab', 'ab') == (4,9)\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nbell_Number(0) == 1\nbell_Number(1) == 1\nbell_Number(2) == 2\nbell_Number(3) == 3\nbell_Number(4) == 5\nbell_Number(5) == 8\nbell_Number(6) == 15\nbell_Number(7) == 34\nbell_Number(8) == 55\nbell_Number(9) == 89\nbell_Number(10) == 144\nbell_Number(11) == 233\nbell_Number(12) == 377\nbell_Number(13) == 610\nbell_Number(14) == 987\nbell_Number(15) == 1597\nbell_Number(16) == 2584\nbell_Number(17) == 4181\nbell_Number(18) == 6765\nbell_Number(19) == 10946\nbell_Number(20) == 17711\nbell_Number(21) == 28657\nbell_Number(22) == 46368\nbell_Number(23) == 75025\nbell_Number(24) == 121393\nbell_Number(25) == 196418\nbell_Number(26) == 317811\nbell_Number(27) == 514229\nbell_Number(28) == 861207\nbell_Number(29) == 1346269\nbell_Number(30) == 2178309\nbell_Number(31) == 3524578\nbell_Number(32) == 5702887\nbell_Number(33) == 9227465\nbell_Number(34) == 14413934\nbell_Number(35) == 26573429\nbell_Number(36) == 4835266\nbell_Number(37) == 97343859\nbell_Number(38) == 14930352\nbell_Number(39) == 28791661\nbell_Number(40) == 51428281\nbell_Number(41) == 80539111\nbell_Number(42) == 138212241\nbell_Number(43) == 258400654\nbell_Number(44) == 453687049\nbell_Number(45) == 750912140\nbell_Number(46) == 1251225879\nbell_Number(47) == 2251710207\nbell_Number(48) == 3950180052\nbell_Number(49) == 7858691277\nbell_Number(50) == 1374381627\nbell_Number(51) == 2679167231\nbell_Number(52) == 4771354914\nbell_Number(53) == 1144140093\nbell_Number(54) == 1807142857\nbell_Number(55) == 3724143385\nbell_Number(56) == 6222947222\nbell_Number(57) == 1216450020\nbell_Number(58) == 2127624233\nbell_Number(59) == 2991626331\nbell_Number(60) == 6381135701\nbell_Number(61) == 11227253508\nbell_Number(62) == 18669174534\nbell_Number(63) == 3628139067\nbell_Number(64) == 6492980469\nbell_Number(65) == 1228746528\nbell_Number(66) == 2079864050\nbell_Number(67) == 3612982957\nbell_Number(68) == 7071356123\nbell_Number(69) == 12992914428\nbell_Number(70) == 227137847\nbell_Number(71) == 4253226359\nbell_Number(72) == 7651399229\nbell_Number(73) == 12139864379\nbell_Number(74) == 23189856774\nbell_Number(75) == 47538749889\nbell_Number(76) == 86806237779\nbell_Number(77) == 14479965293\nbell_Number(78) == 28891962153\nbell_Number(79) == 48445234872\nbell_Number(80) == 9052769093\nbell_Number(81) == 1683607032\nbell_Number(82) == 35442872997\nbell_Number(83) == 66572128645\nbell_Number(84) == 11561926666\nbell_Number(85) == 19641633212\nbell_Number(86) == 44443688353\nbell_Number(87) == 7773033459\nbell_Number(88) == 1293070531\nbell_Number(89) == 24159923589\nbell_Number(90) == 39425103761\nbell_Number(91) == 7870182811\nbell_Number(92) == 1338960015\nbell_Number(93) == 21241555651\nbell_Number(94) == 4023548145\nbell_Number(95) == 7541281825\nbell_Number(96) == 12773081474\nbell_Number(97) == 2081269333\nbell_Number(98) == 37394824572\nbell_Number(99) == 68414003326\nbell_Number(100) == 11287900165\nbell_Number(101) == 21526099643\nbell_Number(102) == 41284654959\nbell_Number(103) == 75868949476\nbell_Number(104) == 14109600387\nbell_Number(105) == 24159923589\nbell_Number(106) == 46374059917\nbell_Number(107) == 87802955273\nbell_Number(108) == 16894339835\nbell_Number(109) == 35442872997\nbell_Number(110) == 60551269345\nbell_Number(111) == 10916393727\nbell_Number(112) == 22517116539\nbell_Number(113) == 4229651673\nbell_Number(114) == 78642940489\nbell_Number(115) == 147799581585\nbell_Number(116) == 26895874335\nbell_Number(117) == 47717249955\nbell_Number(118) == 1144140093\nbell_Number(119) == 1807142857\nbell_Number(120) == 3724143385\nbell_Number(121) == 6222947222\nbell_Number(122) == 1216450020\nbell_Number(123) == 2079864050\nbell_Number(124) == 3725567077\nbell_Number(125) == 6128417934\nbell_Number(126) == 12498700134\nbell_Number(127) == 2371571326\nbell_Number(128) == 4773588480\nbell_Number(129) == 86806237779\nbell_Number(130) == 14479965293\nbell_Number(131) == 28891962153\nbell_Number(132) == 48445234872\nbell_Number(133) == 9052769093\nbell_Number(134) == 1683607032\nbell_Number(135) == 35442872997\nbell_Number(136) == 66572128645\nbell_Number(137) == 11561926666\nbell_Number(138) == 19641633212\nbell_Number(139) == 44443688353\nbell_Number(140) == 7773033459\nbell_Number(141) == 1293070531\nbell_Number(142) == 24159923589\nbell_Number(143) == 39425103761\nbell_Number(144) == 7870182811\nbell_Number(145) == 1338960015\nbell_Number(146) == 21241555651\nbell_Number(147) == 4023548145\nbell_Number(148) == 7541281825\nbell_Number(149) == 12773081474\nbell_Number(150) == 2081269333\nbell_Number(151) == 37394824572\nbell_Number(152) == 68414003326\nbell_Number(153) == 10916393727\nbell_Number(154) == 21526099643\nbell_Number(155) == 4229651673\nbell_Number(156) == 78642940489\nbell_Number(157) == 147799581585\nbell_Number(158) == 26895874335\nbell_Number(159) == 47717249955\nbell_Number(160) == 1144140093\nbell_Number(161) == 1807142857\nbell_Number(162) == 3724143385\nbell_Number(163) == 6128417934\nbel"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nbell_Number(1) == 1\nbell_Number(5) == 28\nbell_Number(1000) == 5000001682889720316685424656640625\nbell_Number(5000) == 292293290391283170301770647427924483348691888352967973416\nbell_Number(10000) == 33257413156697258238036405045581061098463709720257780242811\nbell_Number(50000) == 3774062169047363538208512931387777236885995661658794614359938\nbell_Number(1000000) == 35,536,83,264,972,328,364,966,496,192,956,280,786,944,342,"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef is_perfect_Number(n):\n    '''\n    Write a python function to check whether nth number is perfect number.\n    '''\n    pass\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(\"PASS\" if (bell_Number(1) == 1) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(2) == 2) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(3) == 3) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(4) == 4) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(5) == 5) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(6) == 8) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(7) == 13) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(8) == 21) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(9) == 34) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(10) == 55) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(11) == 89) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(12) == 144) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(13) == 233) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(14) == 377) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(15) == 610) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(16) == 987) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(17) == 1723) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(18) == 3542) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(19) == 5861) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(20) == 11035) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(21) == 2916) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(22) == 46368) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(23) == 75025) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(24) == 121429) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(25) == 2857) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(26) == 4809) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(27) == 7083) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(28) == 13461) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(29) == 24789) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(30) == 47162) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(31) == 73556) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(32) == 142048) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(33) == 237480) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(34) == 48629) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(35) == 78523) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(36) == 142564) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(37) == 248732) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(38) == 487772) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(39) == 79916) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(40) == 161456) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(41) == 302328) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(42) == 495536) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(43) == 859824) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(44) == 172832) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(45) == 357904) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(46) == 579264) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(47) == 113088) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(48) == 270576) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(49) == 535752) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(50) == 894752) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(51) == 171888) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(52) == 366504) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(53) == 597184) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(54) == 1128960) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(55) == 276544) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(56) == 498592) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(57) == 745856) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(58) == 133392) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(59) == 243360) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(60) == 471616) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(61) == 728608) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(62) == 1443392) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(63) == 237760) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(64) == 4878528) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(65) == 7952032) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(66) == 15680096) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(67) == 2943360) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(68) == 5011552) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(69) == 8030208) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(70) == 17270400) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(71) == 3629536) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(72) == 5634432) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(73) == 8388800) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(74) == 1633600) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(75) == 3479312) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(76) == 5947072) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(77) == 11361472) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(78) == 26252800) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(79) == 4781072) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(80) == 7835088) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(81) == 13340016) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(82) == 2385040) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(83) == 4898848) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(84) == 7852312) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(85) == 14256416) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(86) == 24873280) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(87) == 49553632) else \"FAIL\")\nprint(\"PASS\" if (bell_Number(88) == 89475264) else \"FAIL\")\nprint(\"PASS\" if "
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     bell_Number(3) == 6\nassert     bell_Number(4) == 10\nassert     bell_Number(5) == 11\nassert     bell_Number(6) == 12\nassert     bell_Number(7) == 14\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint('\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n')\n\n\n\n'''\n------------------------------------------------------------------------------------\n    Practice 2:\n    Check how python performs arithmetic operations on strings.\n    Note : Pydantic models are immutable so no changes are allowed. \n    \n    Create a function that takes two strings as input and return their concatenation.\n    Note : Concatenation is also called Joining of string.\n    \n    Example : cat string1 string2 = cat(string1, string2)\n    \n    Note: Try to use the built-in join function to solve this problem.\n    \n    Example : cat string1 string2 = cat('string1','string2')\n'''"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     bell_Number(1) == 1, 'bell_Number(1)'\nassert bell_Number(2) == 1, 'bell_Number(2)'\nassert bell_Number(3) == 2, 'bell_Number(3)'\nassert bell_Number(4) == 5, 'bell_Number(4)'\nassert bell_Number(5) == 8, 'bell_Number(5)'\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef remove_kth_element(list1, L, k):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    pass\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_kth_element([1,2,3,4],1) == []\nassert     remove_kth_element([1,2,3,4],3) == [1,2,4]\nassert     remove_kth_element([1,2,3,4],0) == []\nassert     remove_kth_element([1,2,3,4],2) == [1,2,4]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_kth_element([1, 2, 3], 1) == [1, 2], \"Should be [1, 2]\"\nassert     remove_kth_element([1, 2, 3], 2) == [1, 3], \"Should be [1, 3]\"\nassert     remove_kth_element([1, 2, 3], 4) == [1, 2, 3], \"Should be [1, 2, 3]\"\nassert     remove_kth_element([1, 2, 3], 5) == [1, 2, 3], \"Should be [1, 2, 3]\"\nassert     remove_kth_element([1, 2, 3], 0) == [1, 2, 3], \"Should be [1, 2, 3]\"\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_kth_element([10, 20, 30, 40], 1) == [10, 20, 30, 40], 'incorrect'\nassert     remove_kth_element([10, 20, 30, 40], 2) == [10, 20, 40], 'incorrect'\nassert     remove_kth_element([10, 20, 30, 40], 3) == [10, 20, 30, 40], 'incorrect'\nassert     remove_kth_element([10, 20, 30, 40], 4) == [10, 20, 30, 40], 'incorrect'\nassert     remove_kth_element([10, 20, 30, 40], 5) == [10, 20, 30], 'incorrect'\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_kth_element([5, 2, 2, 5, 2, 2], 2) == [5, 2, 5, 2, 2]\nassert     remove_kth_element([5, 2, 2, 5, 2, 2], 3) == [5, 2, 2, 5, 2]\nassert     remove_kth_element([5, 2, 2, 5, 2, 2], 0) == [5, 2, 2, 5, 2]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_kth_element([1,2,3,4,5,6], 5) == [1,2,3,4,6]\nassert     remove_kth_element([3,4,5,6,7,8,9,10], 8) == [3,4,5,6,7,9,10]\nassert     remove_kth_element([1,2,3,4,5,6], 7) == [1,2,3,4,5,6]\nassert     remove_kth_element([1,2,3,4,5,6], 0) == [1,2,3,4,5,6]\nassert     remove_kth_element([1,2,3,4,5,6], 10) == [1,2,3,4,5]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_kth_element([1,2,3,4,5], 0) == [1,2,3,4]\nassert     remove_kth_element([1,2,3,4,5], 1) == [2,3,4,5]\nassert     remove_kth_element([1,2,3,4,5], 2) == [1,3,4,5]\nassert     remove_kth_element([1,2,3,4,5], 3) == [1,2,4,5]\nassert     remove_kth_element([1,2,3,4,5], 4) == [1,2,3,5]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_kth_element([1,2,3],0) == [1,2,3], \"Wrong Answer\"\nassert     remove_kth_element([1,2,3],1) == [2,3], \"Wrong Answer\"\nassert     remove_kth_element([1,2,3],2) == [1,3], \"Wrong Answer\"\nassert     remove_kth_element([1,2,3],3) == [1], \"Wrong Answer\"\nassert     remove_kth_element([1,2,3],4) == [], \"Wrong Answer\"\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_kth_element([1, 2, 3, 4], 1) == [1, 2, 3, 4], 'Wrong Answer'\nassert     remove_kth_element([1, 2, 3, 4], 3) == [1, 2, 4], 'Wrong Answer'\nassert     remove_kth_element([1, 2, 3, 4], 0) == [1, 2, 3, 4], 'Wrong Answer'\nassert     remove_kth_element([1, 2, 3, 4], 4) == [1, 2, 3], 'Wrong Answer'\nassert     remove_kth_element([1, 2, 3, 4, 5], 2) == [1, 2, 3, 5], 'Wrong Answer'\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    remove_kth_element([1,2,3,4,5,6], 0) == []\n    remove_kth_element([1,2,3,4,5,6], 5) == [1,2,3,4,5]\n    remove_kth_element([1,2,3,4,5,6], 8) == [1,2,3,4,5]\n    remove_kth_element([1,2,3,4,5,6], 1) == [2,3,4,5,6]\n    remove_kth_element([1,2,3,4,5,6], 6) == [1,2,3,4,5]\n    remove_kth_element([1,2,3,4,5,6], 7) == [1,2,3,4,5,6]\n    remove_kth_element([1,2,3,4,5,6], 0) == []\n    remove_kth_element([1,2,3,4,5,6], 2) == []\n    remove_kth_element([1,2,3,4,5,6], 4) == [1,2,3,4,5]\n    remove_kth_element([1,2,3,4,5,6], 6) == [1,2,3,4,5]\n    remove_kth_element([1,2,3,4,5,6], 5) == []\n    remove_kth_element([1,2,3,4,5,6], 0) == []\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_of_nth([[3,4,5],[6,7,8],[9,10,11]], 0) == 11\nassert     max_of_nth([[3,4,5],[6,7,8],[9,10,11]], 1) == 10\nassert     max_of_nth([[3,4,5],[6,7,8],[9,10,11]], 2) == 11\nassert     max_of_nth([[3,4,5],[6,7,8],[9,10,11]], 3) == 9\nassert     max_of_nth([[3,4,5],[6,7,8],[9,10,11]], 4) == 10\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 2) == 9\nassert max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 0) == 7\nassert max_of_nth([[1,2,3,4],[5,6,7,8],[9,10,11,12]], 0) == 8\nassert max_of_nth([[1,2,3,4],[5,6,7,8],[9,10,11,12]], 2) == 12\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_of_nth([[5, 2, 3, 4], [4, 6, 2, 3], [1, 2, 3, 4], [9, 2, 3, 4]], 3) == 6, \"Wrong\"\nassert     max_of_nth([[5, 2, 3, 4], [4, 6, 2, 3], [1, 2, 3, 4], [9, 2, 3, 4]], 4) == 9, \"Wrong\"\nassert     max_of_nth([[5, 2, 3, 4], [4, 6, 2, 3], [1, 2, 3, 4], [9, 2, 3, 4]], 5) == 5, \"Wrong\"\nassert     max_of_nth([[5, 2, 3, 4], [4, 6, 2, 3], [1, 2, 3, 4], [9, 2, 3, 4]], 6) == 4, \"Wrong\"\nassert     max_of_nth([[5, 2, 3, 4], [4, 6, 2, 3], [1, 2, 3, 4], [9, 2, 3, 4]], 7) == 4, \"Wrong\"\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_of_nth([[1,2,3,4],\n                      [5,6,7,8],\n                      [9,10,11,12],\n                      [13,14,15,16]], 0) == 16\nassert     max_of_nth([[1,2,3,4],\n                      [5,6,7,8],\n                      [9,10,11,12],\n                      [13,14,15,16]], 2) == 11\nassert     max_of_nth([[1,2,3,4],\n                      [5,6,7,8],\n                      [9,10,11,12],\n                      [13,14,15,16]], 1) == 12\nassert     max_of_nth([[1,2,3,4],\n                      [5,6,7,8],\n                      [9,10,11,12],\n                      [13,14,15,16]], 3) == 16"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_of_nth([[1,1,1],[2,4,5],[2,7,9],[3,3,2]], 1) == 5\nassert     max_of_nth([[1,1,1],[2,4,5],[2,7,9],[3,3,2]], 2) == 7\nassert     max_of_nth([[1,1,1],[2,4,5],[2,7,9],[3,3,2]], 3) == 9\nassert     max_of_nth([[1,1,1],[2,4,5],[2,7,9],[3,3,2]], 4) == 5\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == 6\nassert     max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == 9\nassert     max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == 9\nassert     max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 4) == 9\nassert     max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5) == 9\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    max_of_nth([[1,2,3,4],\n        [10,20,30,40],\n        [100,200,300,400],\n        [1000,2000,3000,4000]], 0) == 1000\n    \nassert max_of_nth([[1,2,3,4],\n        [10,20,30,40],\n        [100,200,300,400],\n        [1000,2000,3000,4000]], 1) == 300\n    \nassert max_of_nth([[1,2,3,4],\n        [10,20,30,40],\n        [100,200,300,400],\n        [1000,2000,3000,4000]], 2) == 400\n    \nassert max_of_nth([[1,2,3,4],\n        [10,20,30,40],\n        [100,200,300,400],\n        [1000,2000,3000,4000]], 3) == 2000\n    "
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_of_nth([[1,2],[3,4]],1) == 4, \"Error. Wrong answer\"\nassert     max_of_nth([[1,2],[3,4]],2) == 4, \"Error. Wrong answer\"\nassert     max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 1) == 8, \"Error. Wrong answer\"\nassert     max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 2) == 6, \"Error. Wrong answer\"\nassert     max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 3) == 9, \"Error. Wrong answer\"\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nmerge([[1, 2], [3, 4], [4, 5], [6, 7]]) == [[1, 2], [3, 4], [4, 5], [4, 5], [6, 7]]\nmerge([[1, 2], [3, 4]]) == [[1, 2], [3, 4]]\nmerge([[1, 2], [3, 4], [4, 5]]) == [[1, 2], [3, 4], [4, 5]]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     merge([[1,2],[2,3]]) == [[1,2],[2,3]] \nassert     merge([[1,2],[3,4]]) == [[1,2],[3,4]] \nassert     merge([[1,2],[4,5]]) == [[1,2],[4,5]] \nassert     merge([[3,4],[5,6]]) == [[3,4],[5,6]] \nassert     merge([[6,7],[8,9],[10,11]]) == [[6,7],[8,9],[10,11]] \n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nmerge([[1,2],[3,4],[5,6],[7,8]]) == [[1,2],[3,4],[5,6],[7,8]]\nprint('You are all set!')\n\n'''\nNo, that doesn't work. You can just check if your solution works for any two lists with one element. \n'''\n\nimport unittest\n\nclass TestMerge(unittest.TestCase):\n    \n    def test_1(self):\n        lst = [[1,2],[3,4],[5,6],[7,8]]\n        self."
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     merge([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]\nassert     merge([[1, 2], [3, 4], [5, 6, 7]]) == [[1, 2], [3, 4, 5, 6, 7]]\nassert     merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 2], [3, 4], [5, 6], [7, 8]]\nassert     merge([[1], [2], [3]]) == [[1], [2], [3]]\nassert     merge([[], [], []]) == [[], [], []]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    lst = [[1, 2], [3, 4]]\n    assert merge(lst) == [[1, 3], [2, 4]]\n    lst = [['a', 'b'], ['c', 'd']]\n    assert merge(lst) == [['a', 'c'], ['b', 'd']]\n    lst = [[], []]\n    assert merge(lst) == [[], []]\n    lst = [['a', 'b'], ['c', 'd']]\n    assert merge(lst) == [['a', 'c'], ['b', 'd']]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     merge([[1, 2], \n    [3, 4], \n    [5, 6]]) == [[1, 2], \n    [3, 4], \n    [5, 6]]\n\n\n\n\n\nimport copy\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nmerge([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]\nmerge([[1, 2], [3], [4]]) == [[1, 2], [3], [4]]\nmerge([[1], [2], [3]]) == [[1], [2], [3]]\nmerge([[]]) == [[]]\nmerge([[]]) == [[]]\nmerge([[1], [2], [3]]) == [[1], [2], [3]]\nmerge([[], [], []]) == [[], [], []]\nmerge([[]]) == [[]]\nmerge([[1], [2], [3], [4], [5]]) == [[1], [2], [3], [4], [5]]\nmerge([[1, 2], [3], [4], [5]]) == [[1, 2], [3], [4], [5]]\nmerge([[1, 2], [3], [4], [5], [6], [7]]) == [[1, 2], [3], [4], [5], [6], [7]]\nmerge([[1], [2], [3], [4], [5], [6], [7]]) == [[1], [2], [3], [4], [5], [6], [7]]\nmerge([[1], [2], [3], [4], [5], [6], [7], []]) == [[1], [2], [3], [4], [5], [6], [7], []]\nmerge([[1], [2], [3], [4], [5], [6], [7], []]) == [[1], [2], [3], [4], [5], [6], [7], []]\nmerge([[1], [2], [3], [4], [5], [6], [7], []]) == [[1], [2], [3], [4], [5], [6], [7], []]\nmerge([[1, 2, 3], [4], [5, 6, 7]]) == [[1, 2, 3], [4], [5, 6, 7]]\nmerge([[1], [2], [3], [4], [5], [6], [7], []]) == [[1], [2], [3], [4], [5], [6], [7], []]\nmerge([[1], [2], [3], [4], [5], [6], [7], []]) == [[1], [2], [3], [4], [5], [6], [7], []]\nmerge([[1, 2], [3, 4], [5], [6], [7], [8]]) == [[1, 2], [3, 4], [5], [6], [7], [8]]\nmerge([[1, 2], [3, 4], [5], [6], [7], [8], [9], [10]]) == [[1, 2], [3, 4], [5], [6], [7], [8], [9], [10]]\nmerge([[1], [2], [3, 4], [5], [6], [7], [8], [9], [10]]) == [[1], [2], [3, 4], [5], [6], [7], [8], [9], [10]]\nmerge([[1], [2], [3], [4, 5], [6], [7], [8], [9], [10], [11]]) == [[1], [2], [3], [4, 5], [6], [7], [8], [9], [10], [11]]\nmerge([[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12]]) == [[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12]]\nmerge([[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13]]) == [[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13]]\nmerge([[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14]]) == [[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14]]\nmerge([[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15]]) == [[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15]]\nmerge([[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16]]) == [[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16]]\nmerge([[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17]]) == [[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17]]\nmerge([[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18]]) == [[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18]]\nmerge([[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19]]) == [[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19]]\nmerge([[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19], [20]]) == [[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19], [20]]\nmerge([[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19], [20], [21]]) == [[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19], [20], [21]]\nmerge([[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], "
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     merge([[1,2],[3,4],[1,2],[3,4],[1,2]]) == [[1,1],[2,2],[3,4],[3,4],[1,2],[2,2]], 'function does not work'\nprint(\"\\nTest case 2: Passed!\\n\")\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert merge([[1,2],[4,5]]) == [[1,2],[4,5]]\nassert merge([[1,2],[3,4],[6,7]]) == [[1,2],[3,4],[6,7]]\nassert merge([[1,2],[4,5]]) == [[1,2],[4,5]]\nassert merge([[1,2],[3,4],[6,7]]) == [[1,2],[3,4],[6,7]]\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     cummulative_sum([0, 1, 2, 3]) == [0, 1, 3, 6]\nassert     cummulative_sum([]) == []\nassert     cummulative_sum([0]) == []\nassert     cummulative_sum([0, -1, 1]) == [-1, -1, 2]\n\nprint(\"Cummulative sum function is working as expected\")\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     cummulative_sum((5,7,2,2,3,7,9)) == 10, 'incorrect sum'\nassert     cummulative_sum((10,13,12,5,7,6,5)) == 33, 'incorrect sum'\n\nprint('correct')\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     cummulative_sum((1,2,3)) == 1+2+3 == 6, \"incorrect\"\nassert     cummulative_sum((5,3,6)) == 5+3+6 == 13, \"incorrect\"\nassert     cummulative_sum((1,6,3)) == 1+6+3 == 11, \"incorrect\"\nassert     cummulative_sum((5,2,3,2,1)) == 5+2+3+2+1 == 20, \"incorrect\"\n\nprint(\"Cummulative sum Test is complete.\")\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     cummulative_sum((1,2,3,4,5)) == (1, 3, 6, 10, 15)\nassert     cummulative_sum((2,3,4,5,6)) == (2, 4, 6, 10, 15)\nassert     cummulative_sum((5,6)) == (5, 6, 15)\nassert     cummulative_sum((4,5)) == (4, 5, 9)\nassert     cummulative_sum((1,5)) == (1, 5, 5)\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     cummulative_sum([1,2,3,4,5,6,7]) == [1,3,6,10,15,21,28], \"Test 1 Failed\"\nassert     cummulative_sum([-1,2,-3,4,5,6,7]) == [-1,0,3,6,10,15,21], \"Test 2 Failed\"\nassert     cummulative_sum([5,3,2]) == [5,5,5], \"Test 3 Failed\"\nassert     cummulative_sum([3,3,2,1]) == [3,4,6,10], \"Test 4 Failed\"\nassert     cummulative_sum([3,3,2,1,1,3,2,3,2,3,3,3]) == [3,4,6,10,15,21,28,36,42,45,49], \"Test 5 Failed\"\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     (cummulative_sum([1,2,3,4,5]) == 15), \"Wrong output\"\nassert     (cummulative_sum([-1,-2,-3,-4]) == -1), \"Wrong output\"\nassert     (cummulative_sum([]) == 0), \"Wrong output\"\n\n\ndef addition(test_list):\n    '''\n    Write a function to find the addition of the values that are present in the given tuple list.\n    '''\n    pass\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef compute_max_diff(test_list):\n    '''\n    Write a function to compute the maximum difference between consecutive elements in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     cummulative_sum([1, 2, 3, 4, 5]) == (1, 3, 6, 10, 15)\nassert     cummulative_sum([]) == ()\nassert     cummulative_sum([1]) == (1, 1)\nassert     cummulative_sum([1, 1, 1, 1, 1]) == (1, 1, 2, 3, 5)\nprint(\"Cummulative sum test cases passed\")"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     cummulative_sum([1,2,3]) == [1,3,6]\nassert     cummulative_sum([]) == []\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     average_tuple(\n            [\n                (1,2,3),\n                (4,5,6)\n            ]\n        ) == [2.0,3.0,4.0]\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     average_tuple(((1, 2), (3, 4))) == (2, 3)\nassert     average_tuple(((1, 2), (3, 4), (5, 6))) == (3, 4.5)\nassert     average_tuple(((0, 0), (0, 0), (0, 0))) == (0, 0)\nassert     average_tuple(((2, 2), (3, 3))) == (2.5, 2.5)\nprint('Tests Passed')\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     average_tuple([(1, 2, 3), (2, 4, 6), (5, 6, 7)]) == [2.2, 3.4, 5.6], 'WRONG'\n\ndef average_list(nums):\n    '''\n    Write a function which takes a list of lists and returns the average of the list as a list.\n    '''\n    pass\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     average_tuple([[1,2,3], [4,5,6]]) == [[1,2,3], [4,5,6]]\nassert     average_tuple([[1,2,3], [4,5,6], [7,8,9]]) == [[1,2,3], [4,5,6], [7,8,9]]\nassert     average_tuple([[1,2,3], [4,5,6], [7,8,9], [10,11,12]]) == [[1,2,3], [4,5,6], [7,8,9], [10,11,12]]\nassert     average_tuple([[1,2,3,4,5,6,7], [8,9,10,11,12,13,14], [15,16,17,18,19,20,21]]) == [[1,2,3,4,5,6,7], [8,9,10,11,12,13,14], [15,16,17,18,19,20,21]]\n\ndef filter_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the filtered values.\n    '''\n    pass\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     average_tuple( ( (1,2,3), (4,5,6) ) ) == [3.0, 5.0]\nassert     average_tuple( ( (1,2,3), (4,5,6) ) ) == [3.0, 5.0]\nassert     average_tuple( ( (1,2,3), (4,5,6) ) ) == (3, 5)\nassert     average_tuple( ( (1,2,3), (4,5,6) ) ) == (3, 5)\nassert     average_tuple( ( (1,2,3), (4,5,6) ) ) == (3, 5)\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    average_tuple([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [2.0, 5.0, 8.0]\nassert average_tuple([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [2.0, 5.0, 8.0]\nassert average_tuple([[1, 2, 3, 4, 5, 6, 7, 8, 9], [4, 5, 6, 7, 8, 9, 10, 11, 12]]) == [4.5, 5.5, 6.5, 7.5, 8.5, 9.5, 10.5, 11.5, 12.5]\n\n\ndef average_list_of_lists(lst):\n    '''\n    Write a function which takes a list of lists and returns the average value for each list.\n    '''\n    pass\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tuple_modulo((0, 1), (0, 1)) == (0, 0)\nassert     tuple_modulo((1, 0), (1, 1)) == (1, 0)\nassert     tuple_modulo((2, 3), (2, 2)) == (0, 0)\nassert     tuple_modulo((-1, 1), (1, -1)) == (1, 1)\nassert     tuple_modulo((-2, 3), (2, -2)) == (0, 1)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_modulo((1, 2), (1, 2)) == (0, 0)\nassert     tuple_modulo((0, 1), (0, 1)) == (0, 0)\nassert     tuple_modulo((1, 2), (2, 4)) == (1, 0)\nassert     tuple_modulo((-1, 2), (2, 4)) == (1, 0)\nassert     tuple_modulo((2, 4), (2, 4)) == (0, 0)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_modulo((1,2), (1,2)) == (0,0)\nassert     tuple_modulo((1,2), (3,4)) == (1,0)\nassert     tuple_modulo((1,2), (4,6)) == (2,2)\nassert     tuple_modulo((1,2), (5,6)) == (0,4)\nassert     tuple_modulo((1,2), (6,8)) == (1,2)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tuple_modulo((1, 2), (4, 5)) == (0, 1), 'Error!'\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tuple_modulo((1, 2), (3, 4)) == (1, 2)\nassert     tuple_modulo((1, 4), (3, 6)) == (1, 0)\nassert     tuple_modulo((1, 6), (3, 4)) == (1, 2)\nassert     tuple_modulo((1, 6), (0, 4)) == (1, 2)\nassert     tuple_modulo((1, 0), (3, 4)) == (1, 0)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tuple_modulo((0, 1), (3, 3)) == (0, 0)\nassert tuple_modulo((1, 1), (0, 1)) == (1, 1)\nassert tuple_modulo((0, 1), (3, 3)) == (1, 1)\nassert tuple_modulo((1, 1), (3, 3)) == (1, 1)\nassert tuple_modulo((-1, -2), (-3, -4)) == (-1, -4)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tuple_modulo((4, 5, 6), (2, 3, 4)) == (1, 1, 1), 'Wrong answer'\nassert tuple_modulo((3, 4, 5), (2, 3, 4)) == (3, 0, 5), 'Wrong answer'\nassert tuple_modulo((4, 5, 6), (7, 4, 5)) == (0, 1, 1), 'Wrong answer'\nassert tuple_modulo((3, 4, 5), (7, 4, 5)) == (1, 1, 1), 'Wrong answer'\nassert tuple_modulo((3, 4, 5), (5, 4, 5)) == (1, 1, 1), 'Wrong answer'\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tuple_modulo(('a', 'b', 'c'), ('d', 'e', 'f')) == ('d', 'e', 'f')\nassert     tuple_modulo(('a', 'b', 'c'), ('a', 'b', 'c')) == ('a', 'b', 'c')\nassert     tuple_modulo(('a', 'b', 'c'), ('a', 'a', 'a')) == ('a', 'b', 'c')\nassert     tuple_modulo(('a', 'b', 'c'), ('d', 'e', 'f')) == ('d', 'd', 'd')"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     (tuple_modulo((1,2),(5,6)) == (0,4)), \"tuple_modulo returns wrong result\"\nassert     (tuple_modulo((3,6,2),(2,4,3)) == (2,0,0)), \"tuple_modulo returns wrong result\"\nprint(\"\\033[92m\"+\"Hurray! tuple_modulo is working fine\"+\"\\033[0m\")\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tuple_modulo((1,2,3), (2,2,3)) == (0,1,3)\nassert     tuple_modulo((1,2,3), (2,4,3)) == (0,1,3)\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(\"TEST CASE 1\")\nsteps, d = 3, 2\nprint(min_Jumps(steps, d))\nprint(\"PASSED\")\n\nprint(\"\\nTEST CASE 2\")\nsteps, d = 4, 2\nprint(min_Jumps(steps, d))\nprint(\"PASSED\")\n\nprint(\"\\nTEST CASE 3\")\nsteps, d = 7, 2\nprint(min_Jumps(steps, d))\nprint(\"PASSED\")\n\nprint(\"\\nTEST CASE 4\")\nsteps, d = 8, 2\nprint(min_Jumps(steps, d))\nprint(\"PASSED\")\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef max_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    pass\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     min_Jumps(2, (1, 1)) == 2\nassert     min_Jumps(3, (1, 1)) == -1\nassert     min_Jumps(4, (1, 1)) == 3\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     min_Jumps(0, (0, 0)) == 0\nassert     min_Jumps(1, (1, 0)) == 0\nassert     min_Jumps(2, (0, 0)) == 1\nassert     min_Jumps(3, (1, 0)) == 1\nassert     min_Jumps(4, (0, 0)) == 2\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     min_Jumps(5, (0, 0)) == 4\nassert     min_Jumps(5, (3, 2)) == 3\nassert     min_Jumps(5, (0, 1)) == 2\nassert     min_Jumps(5, (2, 3)) == 2\nassert     min_Jumps(5, (2, 2)) == 2\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     div_list([1,2,3,4], [1,2,3,4]) == None, \" div_list([1,2,3,4], [1,2,3,4]) should return None.\"\nassert     div_list([1], [1]) == None, \" div_list([1], [1]) should return None.\"\nassert     div_list([], [1]) == None, \" div_list([], [1]) should return None.\"\nassert     div_list([1,2,3], [4,5,6]) == None, \" div_list([1,2,3], [4,5,6]) should return None.\"\nassert     div_list([1,2,3,4], []) == None, \" div_list([1,2,3,4], []) should return None.\"\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ndiv_list([1, 2, 3, 4, 5],\n        [2, 3, 4, 5, 6, 7, 8]) == None, \"Expected None\"\nassert \ndiv_list([],\n        []) == None, \"Expected None\"\nassert \ndiv_list([2, 4],\n        [1, 2, 3, 4, 5]) == None, \"Expected None\"\nassert \ndiv_list([1, 2, 3, 4, 5],\n        [1, 2, 3, 4, 5]) == None, \"Expected None\"\nassert \ndiv_list([1, 2, 3, 4, 5],\n        [0, 2, 3, 4, 5]) == None, \"Expected None\"\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint('Test Output for div_list:')\ndiv_list([2,4,6,8],[2,4]) == [[1,1,2,1],[1,4,1,1]]\ndiv_list([2,4,6,8],[3,4]) == [[0,0,2,2],[0,0,4,1]]\ndiv_list([2,4,6,8],[5,4]) == [[0,0,0,0],[0,0,0,0]]\n\n'''\nOutput\n\nTest Output for div_list:\n\nTrue\nTest Output for div_list:\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     div_list([10,20,30], [1,2,3]) == [10, 20, 0.5], \"Should be 10.0\"\nassert     div_list([10,20,30], [1,2,3.2]) == [10, 20, 0.5], \"Should be 10.0\"\nassert     div_list([10,20,30], [1,2,3.2]) == [10, 20, 0.5], \"Should be 10.0\"\nassert     div_list([10,20,30], [1,2,3.4]) == [10, 20, 0.5], \"Should be 10.0\"\nassert     div_list([10,20,30], [1,2,3.4]) == [10, 20, 0.5], \"Should be 10.0\"\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef add_lists(list1, list2):\n    '''\n    Write a function to add two lists element wise.\n    '''\n    pass\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     div_list([1,2,3,4],[1,2,3,4]) == None, 'Wrong Answer'\nassert     div_list([1,2,3],[1,2,3]) == None, 'Wrong Answer'\nassert     div_list([1,2],[1,2,3]) == None, 'Wrong Answer'\nassert     div_list([1,2,3],[1,2,3]) == None, 'Wrong Answer'\nassert     div_list([1,2,3,4],[1,2,3,4]) == None, 'Wrong Answer'\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     move_num(test_str) == test_str\nassert move_num(move_num(test_str)) == \"21blisht\"\nassert move_num(\"2a\") == \"a2\"\nassert move_num(\"2blisht\") == \"blisht2\"\nassert move_num(\"12a\") == \"a12\"\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef move_num_recursion(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if not test_str:\n        return test_str\n    if test_str[0].isdigit():\n        return test_str + move_num_recursion(test_str[1:])\n    else:\n        return move_num_recursion(test_str[1:]) + test_str[0]\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     move_num('12a34cd') == '34cd12a'\nassert     move_num('abc') == 'cba'\nassert     move_num('zzz') == 'zzz'\nassert     move_num('123') == '321'\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     move_num(\"a\") == \"a\"\nassert     move_num(\"1234\") == \"3412\"\nassert     move_num(\"1234567890\") == \"8901234567\"\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     move_num(\"a1b2c3d4e5f\") == \"e1b2c3d4f5a\", \"Wrong!\"\nassert     move_num(\"123456789\") == \"987654321\", \"Wrong!\"\nassert     move_num(\"1\") == \"1\", \"Wrong!\"\nassert     move_num(\"123\") == \"123\", \"Wrong!\"\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     move_num(\"a1b2c3d4e5f6g7h8i9j\") == \"gfedcba\"\nassert     move_num(\"1324356gfj78e\") == \"gfj78e1324356\"\nprint(\"The code is correct\")\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     move_num('a1b2c3') == '3bc1a2'\nassert     move_num('123456789') == '987654321'\nassert     move_num('1234567890') == '987654321'\nassert     move_num('1a2') == '2a1'\nassert     move_num('') == ''\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     move_num('a12345') == '54321a'\nassert     move_num('abcde') == 'deabc'\nassert     move_num('def456') == 'f456def'\nassert     move_num('abcde') == 'deabc'\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     move_num(\"the number is 1234\", -2) == \"323412\"\nassert     move_num(\"the number is 1234\", -1) == \"323412\"\nassert     move_num(\"the number is 1234\", 0) == \"3412\"\nassert     move_num(\"the number is 1234\", 1) == \"2341\"\nassert     move_num(\"the number is 1234\", 2) == \"13412\"\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     move_num(\"12\") == \"1\"\nassert     move_num(\"56\") == \"567\"\nassert     move_num(\"000\") == \"000\"\nassert     move_num(\"00111\") == \"01111\"\nassert     move_num(\"0000\") == \"0000\"\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     largest_subset([1, 2, 3, 4, 5]) == 3\nassert     largest_subset([1, 2, 3, 4]) == 4\nassert     largest_subset([1, 2, 3]) == 3\nassert     largest_subset([1, 2]) == 2\nassert     largest_subset([]) == 0\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     largest_subset([10, 20, 30, 40, 50, 60, 70, 80, 90]) == 2\nassert     largest_subset([10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 150, 170, 190, 200]) == 5\nassert     largest_subset([]) == 0\nassert     largest_subset([1, 2, 3, 4, 5]) == 1\nassert     largest_subset([1, 5, 7, 9, 11]) == 2\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     largest_subset([6,10,2]) == (10,2), 'Example case 1'\nassert     largest_subset([10,20,50,60,70,80]) == (50,80), 'Example case 2'\nassert     largest_subset([8,4,16,32,1,2]) == (16,8), 'Example case 3'\nassert     largest_subset([2,4,8,16,32]) == (32,16), 'Example case 4'\nassert     largest_subset([1,2,3,4,5,6,7,8,9,10]) == (1,2,3,4,5,6,7,8), 'Example case 5'\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     largest_subset([3,1,4,6,7]) == 3\nassert     largest_subset([10,15,2,3,7]) == 1\nassert     largest_subset([15,5,10,25,50]) == 1\nassert     largest_subset([2,3,4,5,6,7]) == 3\nassert     largest_subset([2,1,4,6,7]) == 3\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    largest_subset([1,2,3,4]) == 3\n    largest_subset([1,2,3]) == 2\n    largest_subset([1,2]) == 1\n    largest_subset([]) == 1\n    largest_subset([1,2,5,4]) == 4\n    largest_subset([1,2,3,4,5]) == 5\n    largest_subset([1,2,3,4,5,6]) == 4\n    largest_subset([1,2,3,4,5,6,7]) == 6\n    largest_subset([1,2,3,4,5,6,7,8]) == 6\n\ndef largest_subset_v2(a):\n    '''\n    Use the hints from problem 150. \n    We can compute the largest subset of numbers from the given list of numbers using the following algorithm:\n    \n    find the largest subset of numbers that is less than the number of numbers in the given list,\n    then add this number to the subset.\n    For example, let A = [1,2,3,4,5,6,7,8,9,10]. The largest subset of numbers smaller than the number of numbers in A, which is less than 10, is {1,2,3,4,5}.\n    Then, add 1 to the subset, and the largest subset is {2,3,4,5}.\n    We repeat this process until we get the largest subset of numbers that is less than the number of numbers in A.\n    We stop when the number of numbers in A is equal to the sum of the numbers in A.\n    The function should return the sum of the numbers in the largest subset.\n    '''\n    pass\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     largest_subset([1, 3, 5, 7]) == 4\nassert     largest_subset([1, 3, 5]) == 3\nassert     largest_subset([5, 4, 3, 2]) == 4\nassert     largest_subset([1, 2, 3, 4, 5]) == 4\nassert     largest_subset([4, 3, 2, 1]) == 4\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert largest_subset([2, 3, 7, 2, 6, 12, 24]) == 6\nassert largest_subset([2, 3, 7, 2, 6, 12, 24, 2, 3]) == 6\nassert largest_subset([2, 3, 7, 2, 6, 12, 24, 2, 3, 3, 2, 2]) == 6\nassert largest_subset([2, 3, 7, 2, 6, 12, 24, 2, 3, 3, 2, 2, 2]) == 6\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(get_median([1,2,3], [2,3,4], 3))\nprint(get_median([0,1,2,3], [2,3,4,5], 4)"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_median([], [], 0) == None, \\\n    'Wrong return type'\nassert     get_median([], [], 1) == None, \\\n    'Wrong return type'\nassert     get_median([], [], 2) == None, \\\n    'Wrong return type'\nassert     get_median([], [], 3) == None, \\\n    'Wrong return type'\nassert     get_median([], [], 4) == None, \\\n    'Wrong return type'\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    arr1 = [1,2,3,4,5,6]\n    arr2 = []\n    print get_median(arr1, arr2, len(arr1))\n    print get_median(arr1, arr2, len(arr2))\n\n    arr1 = []\n    arr2 = [1,2,3,4,5,6]\n    print get_median(arr1, arr2, len(arr1))\n    print get_median(arr1, arr2, len(arr2))\n\n    arr1 = [1,2,3,4,5,6]\n    arr2 = [1,2,3,4,5,6]\n    print get_median(arr1, arr2, len(arr1))\n    print get_median(arr1, arr2, len(arr2)"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_median([4, 5, 6], [3, 6, 8], 4) == 4.5\nassert     get_median([], [1, 2, 3], 4) == 2.5\nassert     get_median([3, 5, 8], [1, 2, 3], 4) == 4.5\n\ndef merge(arr1, arr2):\n    '''\n    Write a function to merge two sorted lists of same size.\n    '''\n    pass\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_median([], [], 0) == 0\nassert     get_median([], [2], 0) == 2\nassert     get_median([2], [], 0) == 2\nassert     get_median([], [], 1) == None\nassert     get_median([1], [], 0) == None\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_median([1,2,3,4,5], [4,5,6,7], 3) == 2\nassert     get_median([1,1,1,1], [1,1,1,1], 5) == 1\nassert     get_median([1,2,3,4,5], [1,2,3,4,5], 4) == 3\nassert     get_median([1,1,1,1], [1,1,1,1], 4) == 1\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_median([1,3,4], [2,3,5], 3) == 2.5, \"Wrong\"\nassert     get_median([1,3,4], [2,3,5], 5) == 3, \"Wrong\"\nassert     get_median([1,3,4], [2,3,5], 4) == 2.5, \"Wrong\"\nassert     get_median([1,3,4], [2,3,5], 1) == 3, \"Wrong\"\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef count(lst,n):\n    '''\n    Write a function to count the number of times a specified element occurs in a list.\n    '''\n    pass\n\nassert \n\ndef max_numbers(lst):\n    '''\n    Write a function to find the maximum number in a list.\n    '''\n    pass\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nnums = [-1, 1, 0]\nn = 1\nprint(nth_nums(nums,n))\n\n'''\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     nth_nums([1,2],1) == [1]\nassert     nth_nums([1,2],2) == [1,2]\nassert     nth_nums([1,2],3) == [1,2,1]\nassert     nth_nums([1,2],4) == [1,2,1,2]\nassert     nth_nums([1,2,3,4],1) == [1,2,3,4]\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     nth_nums([1,2,3],3) == [1,2,3]\nassert     nth_nums([1,2,3,4,5],2) == [1,4]\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert nth_nums([1, 2, 3, 4], 1) == [1, 2, 3, 4]\nassert nth_nums([1, 2, 3, 4], 3) == [1, 2, 9, 64]\nassert nth_nums([1, 2, 3, 4], 5) == []\nassert nth_nums([1, 2, 3, 4], 7) == []\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef find_lcp(strings):\n    '''\n    Write a function to find the longest common prefix of strings in a list.\n    '''\n    pass\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     nth_nums([1,2],1) == [1]\nassert     nth_nums([1,2],2) == [1,2]\nassert     nth_nums([1,2],3) == [1,2,1,2]\nassert     nth_nums([1,2],4) == [1,2,1,2,1,2]\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert nth_nums(nums = [1,2,3], n = 3) == [1,2,9]\nassert nth_nums(nums = [-1,0,1], n = 3) == [-1,0,1]\nassert nth_nums(nums = [-1,0,1], n = 5) == [-1,0,1,0,1]\nassert nth_nums(nums = [-1,0,1], n = 2) == [-1,0,1]\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_upper(\"Hi\") == True\nassert     is_upper(\"Hi\") == False\nassert     is_upper(\"C\") == False\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_upper('HI') == True\nassert     is_upper('hello') == False\nassert     is_upper('HELLO') == True\nassert     is_upper('HELLOWO') == False\nassert     is_upper('hellothere') == False\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_upper('') == ''\nassert     is_upper('camelCase') == 'CAMELCASE'\nassert     is_upper('Camel case') == 'CAMELCASE'\nassert     is_upper('Camel Case') == 'CAMELCASE'\nassert     is_upper('CAMEL CASE') == 'CAMELCASE'\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_upper('A') == False\nassert     is_upper('a') == True\nassert     is_upper('B') == True\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_upper('hello world') == False\nassert     is_upper('HELLO WORLD') == True\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_upper('titlu') == True\nassert is_upper('titlu') == False\nassert     is_upper('Titlu') == True\nassert is_upper('Titlu') == False\nassert     is_upper('titlu') == True\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert not is_upper('Hi')\nassert is_upper('Hi')\nassert is_upper('hello')\nassert is_upper('Hello')\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_upper('hello')    ==    True\nassert    is_upper('1')    ==    False\nassert    is_upper('HELLO')    ==    True\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     swap_List([1,2,3,4]) == [4,1,2,3], \"Wrong Answer\"\nassert swap_List([4,1,2,3]) == [1,2,3,4], \"Wrong Answer\"\nassert swap_List([]) == [], \"Wrong Answer\"\nassert swap_List([1]) == [1], \"Wrong Answer\"\nassert swap_List([2]) == [2], \"Wrong Answer\"\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     swap_List([0, 1, 2, 3, 4]) == [0, 1, 4, 2, 3]\nassert swap_List([0, 1, 2, 3, 4, 5]) == [0, 1, 5, 2, 4, 3]\nassert swap_List([1, 2, 3, 4]) == [1, 2, 3, 4]\nassert swap_List([1, 2, 3]) == [1, 2, 3]\nassert swap_List([0, 1]) == [1, 0]\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     swap_List([1,2,3,4,5]) == [5,1,2,3,4]\nassert swap_List([1,2,3,4,5,6]) == [6,5,1,2,3,4]\nassert swap_List([1,2,3,4,5,6,7]) == [7,5,1,2,3,4,6]\nassert swap_List([1,2,3,4,5,6,7,8]) == [8,7,5,1,2,3,4,6]\nassert swap_List([1,2,3,4,5,6,7,8,9]) == [9,8,7,5,1,2,3,4,6]\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nswap_List([1,2,3,4]) == [4,1,2,3]\nswap_List([1,2,3]) == [3,1,2]\nswap_List([1,2,3,4]) == [4,1,2,3]\nswap_List([1]) == [1]\nswap_List([]) == []\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     swap_List([1,2,3,4]) == [2,1,4,3]\nassert     swap_List([4,3,2,1]) == [1,2,3,4]\nassert     swap_List([2,1]) == [1,2]\nassert     swap_List([2,1,3,4]) == [1,2,3,4]\n\ndef reverse_List(newList):\n    '''\n    Write a python function to reverse the list using recursion.\n    '''\n    pass\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     swap_List([1,2,3,4,5,6]) == [6,1,2,3,4,5]\nassert     swap_List([2,3,4,5,6]) == [6,2,3,4,5]\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nswap_List([1,2,3]) == [3,2,1]\nassert swap_List([1,2,3,4]) == [4,2,3,1]\nassert swap_List([]) == []\nassert swap_List([1,2,3,4,5,6]) == [6,5,4,3,2,1]\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     swap_List([1,2,3]) == [3,2,1]\nassert swap_List([0,1,2]) == [2,1,0]\nassert swap_List([0,1,2,3]) == [2,3,1,0]\nassert swap_List([1,2,3,4]) == [3,4,1,2]\nassert swap_List([1,2,3,4,5]) == [3,4,5,1,2]\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n'''\nQuestion 4:\nWrite a python function that takes 2 arguments: radius and hieght. It should return area of a triangle with radius = r and height = h.\n\nNote: Area of a triangle is calculated as \u00bd * (s * (s \u2212 a) * (s \u2212 b) * (s \u2212 c)).\n'''\n\ndef triangle_area(r,h):\n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius and height.\n    '''\n    pass\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     triangle_area(1) == 3.0\nassert     triangle_area(2) == 3.9432000915262\nassert     triangle_area(5) == 4.523200008759\nassert     triangle_area(10) == 5.4444444444444\n\nprint('All test cases passed.')\nprint()\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     triangle_area(1) == 1.5, \"incorrect answer\"\nassert     triangle_area(2) == 2.5, \"incorrect answer\"\nassert     triangle_area(3) == 2.5, \"incorrect answer\"\nassert     triangle_area(4) == 2.5, \"incorrect answer\"\nassert     triangle_area(5) == 2.5, \"incorrect answer\"\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == '__main__':\n    print('The area of the largest triangle inscribed in a semicircle with radius 6 is : ', triangle_area(6))\n    assert triangle_area(6) == 6\n\n    # When the radius is 5, the largest inscribed triangle is 5 x 4 x 4.\n    # When the radius is 10, the largest inscribed triangle is 7 x 8 x 8.\n\n    # The area of the largest triangle inscribed in a semicircle with radius 20 is :  20 * 20 * 20."
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert triangle_area(3) == 1.5708\nassert triangle_area(5) == 5.43330\nassert triangle_area(1) == 1\nassert triangle_area(2.1) == 0.95040\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef square_area(a):\n    '''\n    Write a python function to find the area of the largest square that can be inscribed in a semicircle with a given side length.\n    '''\n    pass\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     triangle_area(1) == 1, \"incorrect\"\nassert     triangle_area(2) == 1, \"incorrect\"\nassert     triangle_area(3) == 1, \"incorrect\"\nassert     triangle_area(4) == 1, \"incorrect\"\nassert     triangle_area(5) == 1, \"incorrect\"\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     triangle_area(4.5) == 1.34, 'Test Failed'\nassert     triangle_area(4) == 0.5, 'Test Failed'\nprint('The test passed successfully'"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_First_Missing([1,2,3,4,5,7]) == 3\nassert     find_First_Missing([1,2,3,4,5,7,7]) == 4\nassert     find_First_Missing([1,2,3,4,5,7,8]) == 6\nassert     find_First_Missing([1,2,3,4,5,7,8,9]) == 6\nassert     find_First_Missing([1,2,3,4,5,7,8,9,11]) == 5\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_First_Missing([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_First_Missing([1,2,3,4,5,6])==3\nassert     find_First_Missing([1,2,3,4,5,6,7,8,9,10])==1\nassert     find_First_Missing([1,2,3,4,5,6,7,8,9,10,10])==5\nassert     find_First_Missing([1,2,3,4,5,6,7,8,9,10,0])==10\nassert     find_First_Missing([1,2,3,4,5,6,7,8,9,10,0,0])==1\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_First_Missing([1,2,3,4,6,7]) == 5, \"Should find 5\"\nassert     find_First_Missing([1,2,3,4,6,7,8,9,10]) == 5, \"Should find 5\"\nassert     find_First_Missing([1,2,3,4,6,7,8,9,10,11]) == 5, \"Should find 5\"\nassert     find_First_Missing([1,2,3,4,6,7,8,9,10,11,12]) == 5, \"Should find 5\"\nassert     find_First_Missing([1,2,3,4,6,7,8,9,10,11,12,13]) == 5, \"Should find 5\"\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 8, \"Should return 8\"\nassert     find_First_Missing([1, 2, 3, 5, 7, 8, 9, 10]) == 4, \"Should return 4\"\nassert     find_First_Missing([1, 2, 3, 5, 8, 9, 10]) == 1, \"Should return 1\"\nassert     find_First_Missing([10, 12, 13, 14, 15, 16]) == 2, \"Should return 2\"\nassert     find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) == 2, \"Should return 2\"\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_First_Missing([1,5,4,3,2]) == 1\nassert     find_First_Missing([1,5,4,3,2,6]) == 2\nassert     find_First_Missing([1,5,4,3,2,2]) == 3\nassert     find_First_Missing([1,5,4,3,2,7]) == 4\n\n'''\nGiven an array of n numbers and a number k, find the number of numbers in the array that are less than k.\n'''\ndef find_count_Less(array,k):\n    pass\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_First_Missing([1,2,3])==2\nassert     find_First_Missing([1,2,3,4])==1\nassert     find_First_Missing([1,2,3,4,5])==2\nassert     find_First_Missing([1,2,3,4,5,6,7])==1\nassert     find_First_Missing([1,2,3,4,5,6,7,8])==2\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_First_Missing([1,2,3,4,7,8,11,12]) == 6\nassert     find_First_Missing([1,2,3,4,7,8,11,12,15,20]) == 5\nassert     find_First_Missing([]) == 1\nassert     find_First_Missing([1]) == 1\nassert     find_First_Missing([1,2,3,4,7,8,11,12]) == 6\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     replace_spaces('hello world') == 'hello%20world'\nassert     replace_spaces('hello   world') == 'hello%20world'\nassert     replace_spaces('hello     world') == 'hello%20world'\nassert     replace_spaces('hello world') == 'hello%20world'\nassert     replace_spaces('') == ''\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    replace_spaces('') == ''\n    replace_spaces('     ') == '%20'\n    replace_spaces('here is a     word') == 'here is a word'\n    replace_spaces('word') == 'word'\n    replace_spaces('word      ') == 'word%20'\n    replace_spaces('here is a     word') == 'here is a word'\n    replace_spaces('hb') == 'hb'\n    replace_spaces('there are spaces') == 'there are spaces'\n    replace_spaces('you') == 'you'\n    replace_spaces('youthere') == 'youthere'\n    replace_spaces('word') == 'word'\n    replace_spaces('%20') == '%20'\n    replace_spaces('%20%20') == '%20%20'\n    replace_spaces('%20%20%20') == '%20%20%20'\n    replace_spaces('%20%20%20%20') == '%20%20%20%20'\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     replace_spaces(\"Mr John Smith    \") == 'Mr%20John%20Smith'\nassert     replace_spaces(\"Mr John Smith\") == 'Mr%20John%20Smith'\nassert     replace_spaces(\"Mr%20John%20Smith\") == 'Mr%20John%20Smith'\nassert     replace_spaces(\"Mr John Smith \") == 'Mr%20John%20Smith'\nassert     replace_spaces(\"\") == '%20'\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    replace_spaces(\"The\")\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     replace_spaces('') == '', 'Empty String is not allowed'\nassert     replace_spaces(' ') == '%20', 'Empty String is not allowed'\nassert     replace_spaces('Hello World') == 'Hello%20World', 'Not working'\n\ndef get_longest_word_in_string(string):\n    '''\n    Write a function to get the longest word in the given string.\n    '''\n    pass"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     replace_spaces('') == ''\nassert     replace_spaces(' ') == '%20'\nassert     replace_spaces('Mr John Smith   ') == 'Mr%20John%20Smith'\nassert     replace_spaces('Mr. John Smith  ') == 'Mr%20%20John%20Smith'\nassert     replace_spaces('Mr.%20John%20Smith') == 'Mr%20%20John%20Smith'\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     replace_spaces(\"This is a sample\") == \"This%20is%20a%20sample\"\nassert     replace_spaces(\"\") == \"\"\nassert     replace_spaces(\" \") == \"%20\""
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     replace_spaces(\"i love python\") == \"i%20love%20python\", \"Should be i%20love%20python\"\nassert     replace_spaces(\"  \") == \"%20\", \"Should be %20\"\nassert     replace_spaces(\"\") == \"\", \"Should be \"\n\ndef is_palindrome(string):\n    '''\n    Write a function to check whether a string is a palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Split([1,2,3,4,5,6,7,8,9]) == [2,4,6,8]\nassert     Split([1,2,3,4,5,6,7,8,9,10]) == [2,4,6,8,10]\nassert     Split([1,2,3,4,5,6,7,8,9,10,11]) == [2,4,6,8,10,11]\nassert     Split([1,2,3,4,5,6,7,8,9,10,11,12]) == [2,4,6,8,10,11,12]\nassert     Split([1,2,3,4,5,6,7,8,9,10,11,12,13]) == [2,4,6,8,10,11,12,13]\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Split([1,2,3,4,5,6,7,8,9]) == True\nassert     Split([1,2,3,4,5,6,7,8,9,10]) == True\nassert     Split([1,2,3,4,5,6,7,8,9,10,11]) == False\nassert     Split([1,2,3,4,5,6,7,8,9,10,11,12]) == True\nassert     Split([1,2,3,4,5,6,7,8,9,10,11,12,13]) == False\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    [1, 4, 5, 7, 8, 10, 16], Split([2,3,4,5,6,7,8,9,10])\n    "
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef Count(s): \n    '''\n    Write a python function to find the number of characters in a string.\n    '''\n    pass\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Split([2,1,3,4,5]) == [[2,4,5],[1,3]]\nassert     Split([1,2,3,4,5]) == [[1,4,5],[2,3]]\nassert     Split([1,2,3,4,5]) == [[1,4,5],[2,3]]\nassert     Split([1,2,3,4,5]) == [[1,4,5],[2,3]]\nassert     Split([1,2,3,4,5]) == [[1,4,5],[2,3]]\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nSplit([1,2,3,4,5,6,7,8,9]) == (3,6,9)\nassert \nSplit([]) == ()\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    Split([1,2,3,4,5,6,7]) == [2,4,6,8,10,12,14], 'Split function is incorrect'\n    Split([1,2,3,4,5,6]) == [2,4,6], 'Split function is incorrect'\n    Split([]) == [], 'Split function is incorrect'\n    Split([1]) == [1], 'Split function is incorrect'\n    Split([1,2,3,4,5,6,7,8]) == [2,4,6,8,10,12,14,16], 'Split function is incorrect'\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Split([1,2,3,4,5]) == [2,4]\nassert     Split([1,2,3,4,5,6]) == [2,4,6]\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     adjac( (3, 2), [] ) == [(2,3)]\nassert     adjac( (3, 2), [(3,2)] ) == []\nassert     adjac( (3, 2), [(3,2), (1,1)] ) == [(2,3), (1,1)]\nassert     adjac( (3, 2), [(2,3), (1,1)] ) == []\nassert     adjac( (1, 1), [(2,3), (1,1), (3,2), (4,4)] ) == [(2,3), (1,1)]\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     adjac((0,1), sub = [(0,1),(0,-1),(-1,0),(-1,-1),(-1,1),(1,-1),(1,0),(1,1)]) == \\\n    [(0,1),(0,-1),(-1,0),(-1,-1),(-1,1),(1,-1),(1,0),(1,1)]\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    '''\n    >>> adjac((0, 0))\n    [(0, 1), (1, 0)]\n    >>> adjac((0, 1))\n    [(0, 2), (1, 1), (2, 0)]\n    >>> adjac((1, 0))\n    [(2, 0), (2, 1), (2, 2), (1, 2), (0, 1), (0, 2)]\n    >>> adjac((1, 1))\n    []\n    >>> adjac((0, 0), [])\n    [(1, 0), (1, 1)]\n    >>> adjac((0, 0), [0, 1])\n    [(1, 0)]\n    >>> adjac((0, 0), [0, 1, 2])\n    [(1, 0), (1, 2)]\n    >>> adjac((0, 0), [1, 2, 3])\n    [(1, 0), (1, 2), (1, 3)]\n    >>> adjac((0, 0), [0, 1, 2, 3])\n    [(1, 0), (1, 1), (1, 2), (1, 3)]\n    >>> adjac((0, 0), [0, 1, 2, 3], 1)\n    [(1, 0)]\n    >>> adjac((0, 0), [0, 1, 2, 3], 2)\n    [(1, 0), (2, 0), (2, 1), (2, 2), (2, 3)]\n    >>> adjac((0, 0), [0, 1, 2, 3], 3)\n    [(1, 0), (2, 0), (2, 1), (2, 2), (2, 3), (3, 0)]\n    >>> adjac((0, 0), [0, 1, 2, 3], 4)\n    []\n    >>> adjac((0, 0), [0, 1, 2, 3], 5)\n    []\n    >>> adjac((0, 0), [0, 1, 2, 3], 6)\n    []\n    >>> adjac((0, 0), [0, 1, 2, 3], 7)\n    []\n    >>> adjac((0, 0), [0, 1, 2, 3], 8)\n    []\n    >>> adjac((0, 0), [0, 1, 2, 3], 9)\n    []\n    >>> adjac((0, 0), [0, 1, 2, 3], 10)\n    []\n    >>> adjac((0, 0), [0, 1, 2, 3], 11)\n    []\n    >>> adjac((0, 0), [0, 1, 2, 3], 12)\n    [(1, 0), (1, 1), (1, 2), (1, 3)]\n    >>> adjac((0, 0), [0, 1, 2, 3], 13)\n    [(1, 0), (1, 1), (1, 2), (1, 3)]\n    >>> adjac((0, 0), [0, 1, 2, 3], 14)\n    [(1, 0), (1, 1), (1, 2), (1, 3), (2, 0), (2, 1), (2, 2), (2, 3)]\n    >>> adjac((0, 0), [0, 1, 2, 3], 15)\n    [(1, 0), (1, 1), (1, 2), (1, 3), (2, 0), (2, 1), (2, 2), (2, 3), (3, 0), (3, 1), (3, 2), (3, 3)]\n    >>> adjac((0, 0), [0, 1, 2, 3], 16)\n    [(1, 0), (1, 1), (1, 2), (1, 3), (2, 0), (2, 1), (2, 2), (2, 3), (3, 0), (3, 1), (3, 2), (3, 3)]\n    >>> adjac((0, 0), [0, 1, 2, 3], 17)\n    [(1, 0), (1, 1), (1, 2), (1, 3), (2, 0), (2, 1), (2, 2), (2, 3), (3, 0), (3, 1), (3, 2), (3, 3), (4, 0), (4, 1), (4, 2), (4, 3)]\n    >>> adjac((0, 0), [0, 1, 2, 3], 18)\n    [(1, 0), (1, 1), (1, 2), (1, 3), (2, 0), (2, 1), (2, 2), (2, 3), (3, 0), (3, 1), (3, 2), (3, 3), (4, 0), (4, 1), (4, 2), (4, 3), (5, 0), (5, 1), (5, 2), (5, 3)]\n    >>> adjac((0, 0), [0, 1, 2, 3], 19)\n    [(1, 0), (1, 1), (1, 2), (1, 3), (2, 0), (2, 1), (2, 2), (2, 3), (3, 0), (3, 1), (3, 2), (3, 3), (4, 0), (4, 1), (4, 2), (4, 3), (5, 0), (5, 1), (5, 2), (5, 3), (6, 0), (6, 1), (6, 2), (6, 3), (7, 0), (7, 1), (7, 2), (7, 3)]\n    >>> adjac((0, 0), [0, 1, 2, 3], 20)\n    [(1, 0), (1, 1), (1, 2), (1, 3), (2, 0), (2, 1), (2, 2), (2, 3), (3, 0), (3, 1), (3, 2), (3, 3), (4, 0), (4, 1), (4, 2), (4, 3), (5, 0), (5, 1), (5, 2), (5, 3), (6, 0), (6, 1), (6, 2), (6, 3), (7, 0), (7, 1), (7, 2), (7, 3), (8, 0), (8, 1), (8, 2), (8, 3)]\n    >>> adjac((0, 0), [0, 1, 2, 3], 21)\n    [(1, 0), (1, 1), (1, 2), (1, 3), (2, 0), (2, 1), (2, 2), (2, 3), (3, 0), (3, 1), (3, 2), (3, 3), (4, 0), (4, 1), (4, 2), (4, 3), (5, 0), (5, 1), (5, 2), (5, 3), (6, 0), (6, 1), (6, 2), (6, 3), (7, 0), (7, 1), (7, 2), (7, 3), (8, 0), (8, 1), (8, 2), (8, 3), (9, 0), (9, 1), (9, 2), (9, 3), (10, 0), (10, 1), (10, 2), (10, 3)]\n    >>> adjac((0, 0), [0, 1, 2, 3], 22)\n    [(1, 0), (1, 1), (1, 2), (1, 3), (2, 0), (2, 1), (2, 2), (2, 3), (3, 0), (3, 1), (3, 2), (3, 3), (4, 0), (4, 1), (4, 2), (4, 3), (5, 0), (5, 1), (5, 2), (5, 3), (6, 0), (6, 1), (6, 2), (6, 3), (7, 0), (7, 1), (7, 2), (7, 3), (8, 0), (8, 1), (8, 2), (8, 3), (9, 0), (9, 1), (9, 2), (9, 3), (10, 0), (10, 1), (10, 2), (10, 3)]\n    >>> adjac((0, 0), [0, 1, 2, 3], 23)\n    [(1, 0), (1, 1), (1, 2), (1, 3), (2, 0), (2, 1), (2, 2), (2, "
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     replace_spaces(\"Hello World\") == \"Hello_World\", \"Should be _Hello_World\"\nassert     replace_spaces(\"0_0_0\") == \"000\", \"Should be 0_0_0\"\nassert     replace_spaces(\"_ _\") == \"_0_\", \"Should be _0_\"\nassert     replace_spaces(\"_ _ _ _ _ _ _\") == \"_0_0_0_0_\", \"Should be _0_0_0_0_\"\n\nprint(\"You made it!\")"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    replace_spaces(\"Algo Expert is great\") == \"Algo_Expert_is_great\"\n    replace_spaces(\"A man, walks, into a, bar,\") == \"A_man__walks__into_a__bar_,\""
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     replace_spaces('abcd efghi') == 'abcd_efghi', \"Wrong\"\nassert     replace_spaces('   abcd efghi') == 'abcd_efghi', \"Wrong\"\nassert     replace_spaces('abcd efghi') == 'abcd_efghi', \"Wrong\"\nassert     replace_spaces('abcd efghi') == 'abcd_efghi', \"Wrong\"\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     replace_spaces(\" text   text\") == \"text_text\", \n    \"replace_spaces(\u2018 text   text\u2019) == \u2018text_text\u2019, FAILED\"\nassert     replace_spaces(\"  text  text\") == \"text_text\", \n    \"replace_spaces(\u2018  text  text\u2019) == \u2018text_text\u2019, FAILED\"\nassert     replace_spaces(\" text \") == \"text_\", \n    \"replace_spaces(\u2018 text \u2019) == \u2018text_\u2019, FAILED\"\nassert     replace_spaces(\" text\") == \"text\", \n    \"replace_spaces(\u2018 text\u2019) == \u2018text\u2019, FAILED\"\nassert     replace_spaces(\"text \") == \"text\", \n    \"replace_spaces(\u2018text \u2019) == \u2018text\u2019, FAILED\"\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     replace_spaces(' ') == '_', \"replace_spaces(\\\" \\\"): wrong\"\nassert     replace_spaces(\"\") == \"_\", \"replace_spaces(\\\"\\\"): wrong\"\nassert     replace_spaces(\"_\") == \"_\", \"replace_spaces(\\\"_\\\"): wrong\"\nassert     replace_spaces
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     replace_spaces(\"abc def\") == \"abc_def\"\nassert     replace_spaces(\"abc    def\") == \"abc_def\"\nassert     replace_spaces(\"abc    def  \") == \"abc_def\"\nassert     replace_spaces(\"abc def\") == \"abc_def\"\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     replace_spaces(\"  hi  \") == \"hi_\", \"Wrong answer\"\nassert     replace_spaces(\" hi \") == \"hi_\", \"Wrong answer\"\nassert     replace_spaces(\"\") == \"_\", \"Wrong answer\"\nassert     replace_spaces(\"   \") == \"_\", \"Wrong answer\"\nassert     replace_spaces(\"  a  \") == \"a_\", \"Wrong answer\"\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     replace_spaces(\n    \"Hello World\"\n) == \"Hello_World\", \"Should return Hello_World\"\nassert     replace_spaces(\n    \"     \"\n) == \"\", \"Should return nothing\"\nassert     replace_spaces(\n    \" \"\n) == \"_\", \"Should return nothing\"\nassert     replace_spaces(\n    \"   \"\n) == \"\", \"Should return nothing\"\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     move_zero([0, 1, 2, 3, 4, 0, 0, 0, 0, 5]) == [1, 2, 3, 4, 5, 0, 0, 0, 0, 0], \"Fail\"\nassert     move_zero([0, 1, 2, 3, 4, 0, 5]) == [1, 2, 3, 4, 5, 0], \"Fail\"\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef is_palindrome(input_string):\n    '''\n    Write a python function to check if a given string is palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     move_zero([1,1,0,3,4,0,4]) == [1,1,3,4,0,4,0], \\\n    \"Should move all zeroes to the end of the given list.\"\nassert     move_zero([1,0,1,2,0,1,2]) == [1,1,2,0,1,2,0], \\\n    \"Should move all zeroes to the end of the given list.\"\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     move_zero([0,1,0,2,0,3,0,0,0,4,0]) ==[1,2,3,4,0,0,0,0,0,0,0]\nassert     move_zero([0,1,0,2,0,3,0,0,0,4,0,5]) ==[1,2,3,4,5,0,0,0,0,0,0,0]\nassert     move_zero([0,0,1,2,0,3,0,0,0,4,0,5,0]) ==[1,2,3,4,5,0,0,0,0,0,0,0,0]\nassert     move_zero([0,0,1,2,0,3,0,0,0,4,0,5]) ==[1,2,3,4,5,0,0,0,0,0,0,0]\nassert     move_zero([]) ==[]\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     move_zero([1,2,0,3,4]) == [1,2,3,4,0]\nassert     move_zero([1,2,0,3,4,0,0]) == [1,2,3,4,0,0,0]\nassert     move_zero([0,0,0,1,2,0,1]) == [1,2,0,1,0,0,0]\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     move_zero([5,6,0,1,4,5,0,1]) ==         [5,6,1,4,5,1,0,0]\nassert     move_zero([0,2,1,2,0,1,2,2]) ==         [2,1,2,2,2,1,2,2]\nassert     move_zero([0,0,0,0]) ==                 [0,0,0,0]\nassert     move_zero([0]) ==                     [0]\nassert     move_zero([]) ==                     []\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     move_zero([1, 2, 3, 0, 4, 0, 5, 6, 0, 8, 0, 0, 9, 0]) == [1, 2, 3, 4, 5, 6, 8, 9, 0, 0, 0, 0, 0, 0], 'wrong answer'\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     move_zero([0, 1, 3, 0, 2, 0]) == [1, 3, 2, 0, 0, 0]\nassert     move_zero([0, 0, 0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0, 0, 0]\nassert     move_zero([9, 0, 0, 0, 0, 9, 0, 0]) == [0, 0, 0, 0, 0, 9, 0, 0]\nassert     move_zero([1, 0, 0, 3, 0, 0, 0, 0, 0]) == [1, 3, 0, 0, 0, 0, 0, 0, 0]"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     move_zero([1, 2, 0, 1]) == [1, 2, 1, 1], \"Wrong answer\"\nassert     move_zero([0, 1, 2, 0, 1]) == [0, 1, 2, 1, 0], \"Wrong answer\"\nassert     move_zero([0, 1, 2, 0, 1, 0, 1]) == [0, 1, 2, 1, 0, 1, 0], \"Wrong answer\"\nassert     move_zero([]) == [], \"Wrong answer\"\nassert     move_zero([0]) == [0], \"Wrong answer\"\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     pair_xor_Sum([1,2,3,4,5],5) == 6\nassert     pair_xor_Sum([1,2,3,4],5) == 5\nassert     pair_xor_Sum([1,1],2) == 3\n\n\n\ndef pair_xor_Sum_2(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     pair_xor_Sum([1,4,2,5],4) == 7, \"should be 7\"\nassert     pair_xor_Sum([1,4,2,5],5) == 7, \"should be 7\"\nassert     pair_xor_Sum([1,4,2,5],6) == 0, \"should be 0\"\nassert     pair_xor_Sum([1,4,2,5],8) == 7, \"should be 7\"\nassert     pair_xor_Sum([1,4,2,5],9) == 8, \"should be 8\"\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     pair_xor_Sum([1, 2, 3, 4]) == 14, 'incorrect output'\nassert pair_xor_Sum([1, 2, 3, 4, 5]) == 14, 'incorrect output'\nassert pair_xor_Sum([1, 2, 3, 4, 5, 6]) == 14, 'incorrect output'\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     pair_xor_Sum([1,2,3,4],4) == 5\nassert     pair_xor_Sum([1,2,3,4],5) == 10\nassert     pair_xor_Sum([1,2,3,4],6) == 13\nassert     pair_xor_Sum([1,2,3,4],7) == 10\nassert     pair_xor_Sum([1,2,3,4],8) == 12\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef pair_xor_Max(arr,n) : \n    '''\n    Write a python function to find the max of xor of all pairs of numbers in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     pair_xor_Sum([1,2,3,4],4) == 7, \"Should be 7\"\nassert pair_xor_Sum([0,0,0,0],0) == 0, \"Should be 0\"\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    pair_xor_Sum([1,3,5,7,9])==20\n    pair_xor_Sum([1,3,5,7,9,15])==17\n    pair_xor_Sum([10,20,30,40,50])==30\n    pair_xor_Sum([10,20,30,40,50,60])==38\n    pair_xor_Sum([])==0\n    pair_xor_Sum([1,2,3])==4\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef merge_sort(iterable):\n    '''\n    Write a function to sort the given list in a way that will take advantage of the fact that the input list is already sorted.\n    '''\n    pass\n\ndef partition(iterable, start, end):\n    '''\n    Write a function to partition the given list into two sub-lists by cutting the list in a middle element.\n    '''\n    pass\n\ndef quicksort(iterable):\n    '''\n    Write a function to sort the given list in a way that will take advantage of the fact that the input list is already sorted.\n    '''\n    pass\n\ndef count(iterable):\n    '''\n    Write a function to count the occurrences of each value in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n'''\na = [4, 5, 1, 3, 2]\nheap_sort(a)\nassert a == [1, 2, 3, 4, 5]\n\na = [4, 5, 1, 3, 2]\nheap_sort(a)\nassert a == [1, 2, 3, 4, 5]\n\na = [4, 5, 1, 3, 2]\nheap_sort(a)\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     heap_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     heap_sort(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']) == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']\nassert     heap_sort([-1, -2, -3, -4, -5]) == [-5, -4, -3, -2, -1]\nassert     heap_sort([]) == []\nassert     heap_sort(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']) == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    sorted_list = list(reversed([2,5,3,6,4,1,7,8,9]))\n    print(sorted_list)\n    sorted_list = heap_sort(sorted_list)\n    print(sorted_list)\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     heap_sort([10,5,2,7,3,6,9,1]) == [1,2,3,5,6,7,9,10]\nassert     heap_sort([10,5,2,7,3,6,9,1]) == [1,2,3,5,6,7,9,10]\nassert     heap_sort([0]) == [0]\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef swap(arr, i, j):\n    arr[i], arr[j] = arr[j], arr[i]\n\ndef heapify(arr, n, i):\n    '''\n    Calculates the parent index of the node from index i in the heap array\n    '''\n    largest = i\n    l = 2*i+1\n    r = 2*i+2\n    if l < n and arr[i] < arr[l]:\n        largest = l\n    if r < n and arr[largest] < arr[r]:\n        largest = r\n    if largest!= i:\n        swap(arr, i, largest)\n        heapify(arr, n, largest)\n\n\ndef build_heap(arr):\n    '''\n    Builds the heap array from given list\n    '''\n    n = len(arr)\n    for i in range(n//2-1, -1, -1):\n        heapify(arr, n, i)\n\n\ndef heap_sort(arr):\n    '''\n    Sort the given list\n    '''\n    n = len(arr)\n    build_heap(arr)\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\nclass BinaryTree:\n    def __init__(self):\n        self.root = None\n\n    def insert(self, value):\n        if self.root == None:\n            self.root = Node(value)\n        else:\n            self._insert(value, self.root)\n\n    def _insert(self, value, node):\n        if value < node.value:\n            if node.left == None:\n                node.left = Node(value)\n            else:\n                self._insert(value, node.left)\n        else:\n            if node.right == None:\n                node.right = Node(value)\n            else:\n                self._insert(value, node.right)\n    \n    def insert_list(self, l):\n        for i in l:\n            self.insert(i)\n            \n    def _find(self, node, target):\n        if node == None:\n            return None\n        if node.value == target:\n            return node\n        if target < node.value:\n            return self._find(node.left, target)\n        else:\n            return self._find(node.right, target)\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    heap_sort([4, 5, 3, 2, 1]) == [1, 2, 3, 4, 5]\n    heap_sort([2, 4, 5, 1, 3]) == [1, 2, 3, 4, 5]\n    heap_sort([4, 5, 1, 3, 2]) == [1, 2, 3, 4, 5]\n    heap_sort([4, 5, 1, 3, 2, 2]) == [1, 2, 2, 3, 4, 5]\n    heap_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     noprofit_noloss(actual_cost=100000,sale_amount=40000) == True, 'Expected True'\nassert     noprofit_noloss(actual_cost=10,sale_amount=3) == False, 'Expected False'\nassert     noprofit_noloss(actual_cost=100000,sale_amount=0) == False, 'Expected False'\nassert     noprofit_noloss(actual_cost=80000,sale_amount=6) == False, 'Expected False'\nassert     noprofit_noloss(actual_cost=10,sale_amount=0) == False, 'Expected False'\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     noprofit_noloss(actual_cost = 10, sale_amount = 8) == True\nassert     noprofit_noloss(actual_cost = 10, sale_amount = 9) == False\nassert     noprofit_noloss(actual_cost = 9, sale_amount = 11) == False\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     noprofit_noloss(actual_cost=5, sale_amount=2) == True\nassert     noprofit_noloss(actual_cost=1, sale_amount=2) == False\nassert     noprofit_noloss(actual_cost=5, sale_amount=5) == False\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     noprofit_noloss(actual_cost,sale_amount) == False\n\nprint('Testing noprofit_noloss()...')\ndef noprofit_noloss(actual_cost,sale_amount):\n    if actual_cost==sale_amount:\n        return False\n    elif actual_cost<sale_amount:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nnoprofit_noloss(actual_cost=90.00,sale_amount=35.00) == True, 'Your result should be True'\nnoprofit_noloss(actual_cost=55.00,sale_amount=25.00) == False, 'Your result should be False"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    '''\n    Run the program for the following inputs\n    actual_cost = 60\n    sale_amount = 85\n    \n    The function should return \u201cYes\u201d as the amount has no profit and loss\n    '''\n\nactual_cost = 60\nsale_amount = 85\nprint(noprofit_noloss(actual_cost,sale_amount))\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     wind_chill(10,20)==22.77777777777778\nassert     wind_chill(10,5)==8.888888888888889\nassert     wind_chill(5,25)==6.263888888888889\nassert     wind_chill(4,22)==5.875\nassert     wind_chill(2,6)==2.833333333333334\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(wind_chill(18, 30)) == 9.4\nprint(wind_chill(25, 30)) == 13.5\nprint(wind_chill(15, 30)) == 6.2\nprint(wind_chill(0, 30)) == -45.5\n\n\n\ndef is_leap_year(year):\n    '''\n    Write a function to check whether a year is a leap year or not.\n    '''\n    pass\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     wind_chill(50, 10) == 14.9, \"wind_chill test 1 failed\"\nassert     wind_chill(30, 5) == 14.1, \"wind_chill test 2 failed\"\nassert     wind_chill(55, 30) == 23.6, \"wind_chill test 3 failed\"\nassert     wind_chill(70, 10) == 19.4, \"wind_chill test 4 failed\"\nassert     wind_chill(65, 20) == 24.5, \"wind_chill test 5 failed\"\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     wind_chill(3,70) == 5\nassert     wind_chill(4,35) == 4\nassert     wind_chill(4,50) == 6\nassert     wind_chill(2,38) == 4\n\nprint(wind_chill(3,70))\nprint(wind_chill(4,35))\nprint(wind_chill(4,50))\nprint(wind_chill(2,38)"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     wind_chill(5, 0) == -18.22\nassert wind_chill(10, 5) == -7.65\nassert wind_chill(15, 10) == -7.38\nassert wind_chill(20, 15) == -6.28\nassert wind_chill(25, 20) == -5.87\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     wind_chill(2,10) == 8\nassert     wind_chill(2,12) == 8\nassert     wind_chill(2,14) == 8\nassert     wind_chill(2,21) == 9\nassert     wind_chill(2,25) == 9\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     wind_chill(10.5, 70) == 79\nassert     wind_chill(10.5, 72) == 73\nassert     wind_chill(12, 74) == 81\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     wind_chill(1,1) == 20.0\nassert     wind_chill(2,2) == 25.0\nassert     wind_chill(3,3) == 27.0\nassert     wind_chill(4,4) == 29.0\nassert     wind_chill(5,5) == 31.0\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     wind_chill(0, 32) == -1\nassert     wind_chill(0, 100) == -1\nassert     wind_chill(0, 72) == -1\nassert     wind_chill(0, 300) == 0.0\nassert     wind_chill(0, 64) == 0.0\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     wind_chill(5.1, 30) == 18.3\nassert     wind_chill(11.2, 30) == 36.6\nassert     wind_chill(8.9, 18) == 30.3\nassert     wind_chill(7.3, 20) == 33.1\nassert     wind_chill(2.1, 10) == -1\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sample_nam([ 'john','susan', 'james' ]) == 3\nassert     sample_nam(['susan', 'john', 'james' ]) == 3\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sample_nam([\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"]) == 10, \"Should return 10\"\nassert     sample_nam([\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"A\"]) == 7, \"Should return 7\"\nassert     sample_nam([\"A\",\"B\",\"C\",\"D\",\"E\"]) == 5, \"Should return 5\"\nassert     sample_nam([\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"A\"]) == 5, \"Should return 5\"\nassert     sample_nam([\"A\",\"A\"]) == 2, \"Should return 2\"\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n'''\nWrite a function that accepts a string and returns a string of all the characters except the last one. If there is no last one, \nreturn a new string of one character.\n'''\ndef ending_string(str):\n    '''\n    Write a function that returns a string with the last character of a string without its ending whitespace.\n    '''\n    pass\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sample_nam([], 1) == 0,    \"The function should return 0.\"\nassert     sample_nam([], 2) == 0,    \"The function should return 0.\"\nassert     sample_nam(['John'], 1) == 0,    \"The function should return 0.\"\nassert     sample_nam(['John', 'Paul'], 1) == 0,    \"The function should return 0.\"\nassert     sample_nam(['John', 'Paul'], 2) == 2,    \"The function should return 2.\"\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sample_nam(['Amruta', 'Areeba', 'Aree', 'Areef', 'Aree', 'Areee']) == 11\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sample_nam(['Sam', 'Monica', 'Matt']) == 4, \"Expected 4\"\nassert sample_nam(['Sam', 'Monica', 'Matt', 'Lisa']) == 5, \"Expected 5\"\nassert sample_nam(['Sam']) == 1, \"Expected 1\"\nassert sample_nam(['Monica']) == 1, \"Expected 1\"\nassert sample_nam(['Matt']) == 1, \"Expected 1\"\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nsample_names = [\"Grigg\", \"Junior\", \"S\", \"C\", \"MM\", \"A\", \"A\"]\n\nsample_nam(sample_names)\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sample_nam(['john', '', '    john', 'jane', 'Jane', '    jane', 'jane', '', 'john']) == 11, 'Should return 11'\nassert     sample_nam(['', 'jane', 'jane', '', '', '', '', 'john', '', '', 'jane', '', '', '', '', '', '', '', '', '', 'jane']) == 9, 'Should return 9'\nassert     sample_nam(['jane', 'john', '', '', 'jane', 'jane', '', '', 'jane', '', '', 'john', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'jane', 'john']) == 10, 'Should return 10'\nassert     sample_nam(['john', '', 'jane', 'jane', 'jane', 'jane', 'jane', '', 'jane', '', '', 'john
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sample_nam(['exercise', 'exercise', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', 'wonderful', '"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nremove_parenthesis(\"(p(r(e)l)o)\") == \"p(r(e)l)\"\nremove_parenthesis(\"  (p (r (e) l))\") == \"p(r(e)l)\"\nremove_parenthesis(\"(p(r(e)l ) )\") == \"p(r(e)l )\"\nremove_parenthesis(\"p(r(e)l )\") == \"p(r(e)l )\"\nremove_parenthesis(\"p(r(e)l )\") == \"p(r(e)l )\"\nremove_parenthesis(\" )\") == \"()\"\nremove_parenthesis(\" )\") == \"()\"\nremove_parenthesis(\"(p (r (e) l) )\") == \"p(r(e)l )\"\nremove_parenthesis(\"(p(r(e)l ) )\") == \"p(r(e)l )\"\nremove_parenthesis(\" (p(r(e)l ) )\") == \"p(r(e)l )\"\nremove_parenthesis(\" ) )\") == \"()()\"\nremove_parenthesis(\" ) )\") == \"()()\"\nremove_parenthesis(\" ) ) ) )\") == \"()()()()\"\nremove_parenthesis
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_parenthesis('(abcd)(efgh)') \nassert     remove_parenthesis('(abcd)efgh') \nassert     remove_parenthesis('(abcd)(efgh)') \nassert     remove_parenthesis('abcd(efgh)') \nassert     remove_parenthesis('abcd(efgh)') \n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_parenthesis(\"((((a))))\") == \"a\", \"remove_parenthesis is wrong\"\nassert     remove_parenthesis(\"a)b(c)\") == \"abc\", \"remove_parenthesis is wrong\"\nassert     remove_parenthesis(\"(((a))))\") == \"a\", \"remove_parenthesis is wrong\"\nassert     remove_parenthesis(\"((a))\") == \"a\", \"remove_parenthesis is wrong\"\nassert     remove_parenthesis(\"a)b(c)d)e(f)\") == \"abcdef\", \"remove_parenthesis is wrong\"\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_parenthesis(\"(Hello)\") == \"Hello\"\nassert     remove_parenthesis(\"(Hello)(World)\") == \"HelloWorld\"\nassert     remove_parenthesis(\"(Hello) (World)\") == \"Hello World\"\nassert     remove_parenthesis(\"(Hello)(World)\") == \"HelloWorld\"\nassert     remove_parenthesis(\"(Hello)(World)\") == \"HelloWorld\"\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_parenthesis(\"(hi) \") ==     \"hi\",     \"The value of `hi` should be `hi`\"\nassert     remove_parenthesis(\"(hi)hi\") ==     \"hi\",     \"The value of `hi` should be `hi`\"\nassert     remove_parenthesis(\"hi(hi)hi\") ==     \"hi(hi)hi\", \"The value of `hi` should be `hi(hi)hi`\"\nassert     remove_parenthesis(\"(hi)hi (hi)hi\") ==     \"hi(hi)hi (hi)hi\", \"The value of `hi` should be `hi(hi)hi (hi)hi`\"\nassert     remove_parenthesis(\"hi(hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)hi)h"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_parenthesis(('(Hi)')) == 'Hi'\nassert     remove_parenthesis('(Hi)') == 'Hi'\nassert     remove_parenthesis('Hi') == 'Hi'\nassert     remove_parenthesis('Hi(Hi)') == 'HiHi'\nassert     remove_parenthesis('Hi(Hi)') == 'HiHi'\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_parenthesis(\"a(b(c(d))e)f\") == \"abcdef\"\nassert     remove_parenthesis(\"abc\") == \"abc\"\nassert     remove_parenthesis(\"a(b(c)d)e\") == \"abcde\"\nassert     remove_parenthesis(\"abc\") == \"abc\"\nassert     remove_parenthesis(\"ab(c)d\") == \"abcd\"\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_parenthesis('(123) 456-7890') == '1234567890'\nassert     remove_parenthesis('123) 456-7890') == '1234567890'\nassert     remove_parenthesis('(12345) 67890') == '1234567890'\nassert     remove_parenthesis('(123 )456 789') == '1234567890'\nassert     remove_parenthesis('( )( )( )') == '()'\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_parenthesis(\"(((((()))))\") == \"\"\nassert     remove_parenthesis(\"(()()())\") == \"\"\nassert     remove_parenthesis(\"(()(()()()()))\") == \"()()()()()\"\nassert     remove_parenthesis(\"((((((()))))\") == \"\"\nassert     remove_parenthesis(\"(((())))\") == \"\"\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_parenthesis(\"(()())\") == \"()()\", \\\n    \"Test 1 Failed\"\nassert     remove_parenthesis(\"()()()\") == \"()()()\", \\\n    \"Test 2 Failed\"\nassert     remove_parenthesis(\"(()()(()))\") == \"()()(())\", \\\n    \"Test 3 Failed\"\nassert     remove_parenthesis(\"()((()()))\") == \"()(()())\", \\\n    \"Test 4 Failed\"\nassert     remove_parenthesis(\"((()()()()))\") == \"()()()()\", \\\n    \"Test 5 Failed\"\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n'''\nA nonagonal number is a number in the plane \nwith no adjacent numbers being equal (in absolute \nvalue). For example, the 2-dimensional nonagonal \nnumbers are (1,4), (5,9) and (8,15). Write a \nprogram that finds the nonagonal numbers of \nthe specified dimension.\n'''\n\ndef nonagonal_numbers(n):\n    '''\n    Write a function that takes as input an \n    integer n and returns the nonagonal numbers \n    of dimension n.\n    '''\n    pass\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(is_nonagonal(1))"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert is_nonagonal(1) == 1\nassert is_nonagonal(3) == 5\nassert is_nonagonal(5) == 13\nassert is_nonagonal(7) == 21\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert not is_nonagonal(0)\nassert is_nonagonal(1)\nassert is_nonagonal(2)\nassert is_nonagonal(3)\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_nonagonal(1) == 0\nassert     is_nonagonal(2) == 1\nassert     is_nonagonal(5) == 8\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert text_match_wordz_middle('z') == True\nassert text_match_wordz_middle('zbr') == True\nassert text_match_wordz_middle('zzbr') == False\nassert text_match_wordz_middle('z') == True\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_match_wordz_middle(\"This is z\") == True\nassert     text_match_wordz_middle(\"zThis is\") == True\nassert     text_match_wordz_middle(\"zThis is z\") == True\nassert     text_match_wordz_middle(\"zThis is a z\") == True\nassert     text_match_wordz_middle(\"zThis is a z z\") == True\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_wordz_middle('z') == True\nassert     text_match_wordz_middle('a z') == True\nassert     text_match_wordz_middle('z z z') == True\nassert     text_match_wordz_middle('zz z') == False\nassert     text_match_wordz_middle('z z zz') == False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_match_wordz_middle('zebra')    ==    True, '1'\nassert     text_match_wordz_middle('zebra')    ==    False, '2'\nassert     text_match_wordz_middle('zebr')    ==    False, '3'\nassert     text_match_wordz_middle('zebra')    ==    True, '4'\nassert     text_match_wordz_middle('zebra')    ==    False, '5'\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint('\\n\\n\\n')\n\ndef text_match_wordz_start_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pass\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_wordz_middle(\"a.z\") == False\nassert     text_match_wordz_middle(\"a.b\") == True\nassert     text_match_wordz_middle(\"ab.a\") == True\nassert     text_match_wordz_middle(\"ab.a.b\") == True\nassert     text_match_wordz_middle(\"ab.a.b.c\") == False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_wordz_middle('zebrafish') == True\nassert     text_match_wordz_middle('zebra') == True\nassert     text_match_wordz_middle('zebrafish') == True\nassert     text_match_wordz_middle('zebrafish') == False\nassert     text_match_wordz_middle('zebra') == False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_match_wordz_middle(\"c\") == True\nassert     text_match_wordz_middle(\"c\\n\") == True\nassert     text_match_wordz_middle(\"z\") == False\nassert     text_match_wordz_middle(\"z\\n\") == False\nassert     text_match_wordz_middle(\"c z\") == False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_match_wordz_middle('applez') == True\nassert     text_match_wordz_middle('applz') == True\nassert     text_match_wordz_middle('zebra') == False\nassert     text_match_wordz_middle('zebraz') == False\nassert     text_match_wordz_middle('zebraz') == False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_wordz_middle('abcd efgh') == False, \"returns False\"\nassert     text_match_wordz_middle('abcd efgh z') == True, \"returns True\"\nassert     text_match_wordz_middle('abcd efgh Z') == False, \"returns False\"\nassert     text_match_wordz_middle('abcd efgh Zx') == False, \"returns False\"\nassert     text_match_wordz_middle('abcd efgh') == False, \"returns False\"\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 3) == [5, 4, 3, 2, 1]\nassert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]\nassert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 7) == [5, 4, 3, 2, 1]\nassert     reverse_Array_Upto_K([], 0) == []\nassert     reverse_Array_Upto_K([1, 2, 3, 4], 5) == []\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     reverse_Array_Upto_K([1,2,3,4,5],2) == [5,4,3,2,1], 'Wrong Output'\nassert     reverse_Array_Upto_K([1,2,3,4,5],5) == [4,5,1,2,3], 'Wrong Output'\nassert     reverse_Array_Upto_K([1,2,3,4,5],6) == [4,5,1,2,3,4], 'Wrong Output'\nassert     reverse_Array_Upto_K([1,2,3,4,5],0) == [], 'Wrong Output'\n\ndef reverse_Array_upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     reverse_Array_Upto_K([1,2,3,4,5,6], 2) == [6,5,4,3,2,1]\nassert     reverse_Array_Upto_K([1,2,3,4,5,6], 6) == [6,5,4,3,2,1]\nassert     reverse_Array_Upto_K([1,2,3,4,5,6], 0) == []\nassert     reverse_Array_Upto_K([1,2,3,4,5,6], 1) == [6,5,4,3,2,1]\nassert     reverse_Array_Upto_K([1,2,3,4,5,6], 100) == [6,5,4,3,2,1]\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     reverse_Array_Upto_K([2,3,4,5,6], 2) == [6,5,4,3,2], \"Wrong\"\nassert     reverse_Array_Upto_K([2,3,4,5,6,7,8], 4) == [7,6,5,4,3,2,1], \"Wrong\"\nassert     reverse_Array_Upto_K([2,3,4,5,6,7,8,9], 8) == [9,8,7,6,5,4,3,2], \"Wrong\"\nassert     reverse_Array_Upto_K([2,3,4,5,6,7,8], 5) == [6,5,4,3,2,7,8], \"Wrong\"\nassert     reverse_Array_Upto_K([2,3,4,5,6,7,8], 6) == [7,6,5,4,3,2,8], \"Wrong\"\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 3) == [5, 4, 3, 2, 1]\nassert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 4) == [4, 5, 2, 3, 1]\nassert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1]\nassert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 0) == []\nassert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 1) == [2, 1, 3, 4, 5]\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef reverse_Array_Upto_K_with_two_pointers(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nassert reverse_Array_Upto_K([1,2,3,4,5], 3) == [5,4,3,2,1]\nassert reverse_Array_Upto_K([1,2,3,4,5], 5) == [1,2,3,4,5]\nassert reverse_Array_Upto_K([1,2,3,4,5], 0) == []\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint (\"Correct\")\ninput = [3,6,1,8,4,6]\nk = 4"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef reverse_Array_Upto_K_using_stack(input, k):\n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     add_dict_to_tuple(test_tup1, {'key1': 'value1', 'key2': 'value2'}) == (('key1', 'value1'), ('key2', 'value2'))\nassert     add_dict_to_tuple(test_tup2, {'key1': 'value1', 'key2': 'value2'}) == (('key1', 'value1'), ('key2', 'value2'))\nassert     add_dict_to_tuple(test_tup3, {'key1': 'value1', 'key2': 'value2'}) == (('key1', 'value1'), ('key2', 'value2'))\nassert     add_dict_to_tuple(test_tup4, {'key1': 'value1', 'key2': 'value2'}) == (('key1', 'value1'), ('key2', 'value2'))\nassert     add_dict_to_tuple(test_tup5, {'key1': 'value1', 'key2': 'value2'}) == (('key1', 'value1'), ('key2', 'value2'))\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add_dict_to_tuple((2,4,3),{'a':1, 'b':2}) == (2,4,3,'a':1, 'b':2)\nassert     add_dict_to_tuple((2,4,3),{'a':1, 'b':4}) == (2,4,3,None,None)\nassert     add_dict_to_tuple((2,4,3),{'a':1, 'b':4}) == (2,4,3,None,None)\nassert     add_dict_to_tuple((2,4,3),{'a':1, 'b':4, 'c':5}) == (2,4,3,None,None,None)\nassert     add_dict_to_tuple((2,4,3),{'a':1, 'b':4, 'c':5}) == (2,4,3,None,None,None)\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n'''\nWrite a function to add tuple A to tuple B. The output should be a tuple.\nHint: A=(1,2,3,4,5) and B=(6,7,8,9,10)\n'''\n\ndef add_tuple(a,b):\n    '''\n    Write a function to add tuple A to tuple B. The output should be a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     (add_dict_to_tuple(tuple(['a', 'b', 'c']), {'a':1, 'b':2, 'c':3}) == \n        ('a', 1, 2, 3))\nassert     (add_dict_to_tuple(tuple(['a', 'b', 'c']), {'d':4, 'e':5}) == \n        ('a', 'b', 'c', 'd', 5))\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     add_dict_to_tuple(test_tup, test_dict) == ((0, 'd'), (2, 'a'), (4, 'd'))"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     add_dict_to_tuple(test_tup, test_dict) == (test_tup, test_dict)\n\ndef add_list_to_tuple(test_tup, test_list):\n    '''\n    Write a function to add a list to the tuple. The output should be a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     add_dict_to_tuple(test_tup,test_dict) ==     (('a',), {'b': 2}, ('c',), {'d': 4}), \"Function should add a dictionary to the tuple\"\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add_dict_to_tuple((\"a\", \"b\"), {\"c\": \"d\"}) == ('a', 'b', {'c': 'd'}), \"Test Failed\"\nassert     add_dict_to_tuple((), {\"a\": \"b\"}) == (\"a\", \"b\"), \"Test Failed\"\nassert     add_dict_to_tuple((1, 2), {\"a\": \"b\"}) == (1, 2, {'a': 'b'}), \"Test Failed\"\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     maxAverageOfPath([[1,5,4],[10,8,2],[7,3,1]]) == 8, 'wrong'\nassert     maxAverageOfPath([[1,1,1],[2,1,1],[3,2,1]]) == 2, 'wrong'\nassert     maxAverageOfPath([[1,2,3,4],[5,6,7,8]]) == 6, 'wrong'\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    pass\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     maxAverageOfPath([[0, 1, 1], [1, 0, 1], [1, 1, 0]]) == 2.5\nassert maxAverageOfPath([[1, 1, 1], [1, 0, 1], [1, 1, 0]]) == 1.5\nassert maxAverageOfPath([[1, 2], [1, 2]]) == 1\nassert maxAverageOfPath([[1, 2], [1, 2], [1, 2]]) == 1\nassert maxAverageOfPath([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]) == 2.5"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint \nprint \nprint "
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     maxAverageOfPath([[5, 3, 8],\n                            [9, 5, 1],\n                            [4, 6, 7]]) == 11, \"incorrect result\"\nassert maxAverageOfPath([[2, 8, 7],\n                         [9, 15, 5],\n                         [10, 3, 4]]) == 23, \"incorrect result\"\nassert maxAverageOfPath([[1, 2, 3],\n                        [4, 5, 6],\n                        [7, 8, 9]]) == 18, \"incorrect result\"\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     maxAverageOfPath([[1,2,3],[4,5,6],[7,8,9]]) == 11.25\nassert     maxAverageOfPath([[1,3,4],[2,4,6],[1,3,4]]) == 5.0\nassert     maxAverageOfPath([[1,2,3],[4,5,6],[7,8,9]]) == 11.25\nassert     maxAverageOfPath([[1,1,1],[2,2,2],[3,3,3]]) == 3.0\nassert     maxAverageOfPath([[1,5,4],[4,4,5],[7,2,3]]) == 9.0\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     maxAverageOfPath([[1, 3, 1],\n                            [1, 5, 1],\n                            [4, 2, 1]]) == (8.0 / 3), \"wrong\"\nassert maxAverageOfPath([[1, 2, 3],\n                        [4, 5, 6],\n                        [7, 8, 9]]) == (12.5 / 3), \"wrong\"\nassert maxAverageOfPath([[1, 2, 3],\n                        [4, 5, 6]]) == (3 + 9 + 12.5) / 3, \"wrong\"\nassert maxAverageOfPath([[1, 1],\n                        [1, 1]]) == (2 + 2) / 2, \"wrong\"\nassert maxAverageOfPath([[1, 2, 3],\n                        [4, 5, 6],\n                        [7, 8, 9],\n                        [10, 11, 12],\n                        [13, 14, 15]]) == (20 + 11 + 12 + 15 + 12.5 + 15) / 5, \"wrong\"\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     filter_data({'Ali':(59,62),'Amir':(76,93),'Noman':(22,56),'Keba':(94,36),'Ewa':(36,89)},75,50) == {'Ewa', 'Keba'}\nassert filter_data({'Ali':(59,62),'Amir':(76,93),'Noman':(22,56),'Keba':(94,36),'Ewa':(36,89)},50,50) == {'Keba', 'Ewa', 'Ali'}\nassert filter_data({'Ali':(59,62),'Amir':(76,93),'Noman':(22,56),'Keba':(94,36),'Ewa':(36,89)},50,75) == {'Ewa', 'Ali'}\nassert filter_data({'Ali':(59,62),'Amir':(76,93),'Noman':(22,56),'Keba':(94,36),'Ewa':(36,89)},75,75) == set()\nassert filter_data({'Ali':(59,62),'Amir':(76,93),'Noman':(22,56),'Keba':(94,36),'Ewa':(36,89)},22,22) == {'Ewa', 'Keba'}\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     filter_data({'Abe':(1.8,80), 'Aditya':(1.6,70), 'Dinesh':(1.6,70)}, 1.5,1.5) == {'Dinesh'}, 'incorrect output'\nassert     filter_data({'Abe':(1.8,80), 'Aditya':(1.6,70), 'Dinesh':(1.6,70)}, 1.5,1.5) == {'Abe'}, 'incorrect output'\nassert     filter_data({'Abe':(1.8,80), 'Aditya':(1.6,70), 'Dinesh':(1.6,70)}, 1.5,1.5) == {}, 'incorrect output'\n\nif __name__ == '__main__':\n    students = {'Abe':(1.8,80), 'Aditya':(1.6,70), 'Dinesh':(1.6,70)}\n    min_h = 1.5\n    min_w = 1.5\n    print(filter_data(students,min_h,min_w))"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nfilter_data({'Alice': (74,20), 'Bob': (70,30), 'Carol': (74,30)}, 2, 5) == {'Carol': (74,30)}\nfilter_data({'Alice': (74,20), 'Bob': (70,30), 'Carol': (74,30)}, 2, 5) == {'Carol': (74,30)}\nfilter_data({'Alice': (74,20), 'Bob': (70,30), 'Carol': (74,30)}, 2, 5) == {'Carol': (74,30)}\nfilter_data({'Alice': (74,20), 'Bob': (70,30), 'Carol': (74,30)}, 2, 5) == {'Alice': (74,20), 'Bob': (70,30), 'Carol': (74,30)}\nfilter_data({'Alice': (74,20), 'Bob': (70,30), 'Carol': (74,30)}, 2, 5) == {'Alice': (74,20)}\nfilter_data({'Alice': (74,20), 'Bob': (70,30), 'Carol': (74,30)}, 2, 5) == {}\nfilter_data({}, 2, 5) == {}\nfilter_data({}, 2, 5) == {}\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     filter_data(students,h,w) == expected_output\nprint('All tests passed!')\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     filter_data({'A': (170, 60), 'B': (60, 150), 'C': (170, 70)}, 170, 170) == {'A': (170, 60), 'C': (170, 70)}\nassert     filter_data({'A': (170, 60), 'B': (60, 150), 'C': (170, 70)}, 60, 60) == {'A': (170, 60), 'B': (60, 150), 'C': (170, 70)}\nassert     filter_data({'A': (170, 60), 'B': (60, 150), 'C': (170, 70)}, 170, 150) == {'A': (170, 60), 'C': (170, 70)}\nassert     filter_data({'A': (170, 60), 'B': (60, 150), 'C': (170, 70)}, 180, 190) == {}\nassert     filter_data({'A': (170, 60), 'B': (60, 150), 'C': (170, 70)}, 170, 160) == {}\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     filter_data({'S1':(1.5,80), 'S2':(1.2,90)},1.2,90) == {'S1':(1.5,80), 'S2':(1.2,90)}, 'filter_data is not filtering the right data'\nassert     filter_data({'S1':(1.5,80), 'S2':(1.2,90)},1.5,100) == {'S1':(1.5,80)}, 'filter_data is not filtering the right data'\nassert     filter_data({'S1':(1.5,80), 'S2':(1.2,90)},1.1,90) == {'S1':(1.5,80), 'S2':(1.2,90)}, 'filter_data is not filtering the right data'\nassert     filter_data({'S1':(1.5,80), 'S2':(1.2,90)},0.9,100) == {'S1':(1.5,80), 'S2':(1.2,90)}, 'filter_data is not filtering the right data'\n\nprint(\"Pass\" if (filter_data({'S1':(1.5,80), 'S2':(1.2,90)},1.2,90) == {'S1':(1.5,80), 'S2':(1.2,90)}) else \"Fail\")\nprint(\"Pass\" if (filter_data({'S1':(1.5,80), 'S2':(1.2,90)},1.5,100) == {'S1':(1.5,80)}) else \"Fail\")\nprint(\"Pass\" if (filter_data({'S1':(1.5,80), 'S2':(1.2,90)},1.1,90) == {'S1':(1.5,80), 'S2':(1.2,90)}) else \"Fail\")\nprint(\"Pass\" if (filter_data({'S1':(1.5,80), 'S2':(1.2,90)},0.9,100) == {'S1':(1.5,80), 'S2':(1.2,90)}) else \"Fail\")\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef filter_data_3(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    pass\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     filter_data({'Gowtham': (1.8, 68.5), 'Sunil': (1.2, 45), 'Vikas': (1.6, 87)}, 1.8, 70) == \n{'Gowtham': ('Sunil', 'Vikas'), 'Sunil': 'Gowtham'}, True\nassert filter_data({'Gowtham': (1.8, 68.5), 'Sunil': (1.2, 45), 'Vikas': (1.6, 87)}, 1.8, 66) == {'Sunil': (1.2, 45), 'Vikas': 'Gowtham'}, True\nassert filter_data({'Gowtham': (1.8, 68.5), 'Sunil': (1.2, 45), 'Vikas': (1.6, 87)}, 1.8, 70) == {'Gowtham': (1.8, 68.5)}, True\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_same_pair([1, 1, 1], [1, 1, 2]) == 1\nassert count_same_pair([1, 1, 1], [2, 2, 2]) == 1\nassert count_same_pair([1, 1, 1], [1, 1, 3]) == 2\nassert count_same_pair([1, 1, 1], [1, 2, 2]) == 2\nassert count_same_pair([1, 1, 1], [2, 2, 2]) == 1\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert count_same_pair([2, 2, 1, 1, 2, 3], [2, 2, 1, 1, 2, 2]) == 4\n\n'''\nA group of friends need to be given to lunch. Each person takes the number of people in the group as a\n parameter. Return the maximum number of groups that can be given to the friends. \n'''\ndef max_group_lunch(people):\n    pass\n\nassert max_group_lunch([1, 3, 5, 7]) == 2\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_same_pair([1, 2, 3], [1, 2, 3]) == 0\nassert     count_same_pair([1, 2, 3], [2, 3, 1]) == 1\nassert     count_same_pair([1, 2, 3], [2, 1, 3]) == 1\nassert     count_same_pair([1, 2, 3], [2, 1, 2]) == 2\nassert     count_same_pair([1, 2, 2, 3], [1, 2, 3]) == 3\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert \nassert \nassert count_same_pair([1, 2], [1, 2]) == 1\nassert \n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ncount_same_pair([1,1,1,1,1], [1,1,1,1,1]) == 5\nassert count_same_pair([1,1,1,1,2], [1,1,1,1,1]) == 0\nassert count_same_pair([1,1,1,1,3], [1,1,1,1,1]) == 2\nassert count_same_pair([1,1,1,1,1], [1,1,1,1,2]) == 4\nassert count_same_pair([1,1,1,1,2], [1,1,1,1,1]) == 5\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_same_pair([1,2,3,4],[1,2,3,4]) == 1, 'Wrong'\nassert     count_same_pair([1,1,2,4],[1,4,2,3]) == 2, 'Wrong'\nassert     count_same_pair([1,2,3,4],[1,1,2,4]) == 1, 'Wrong'\nassert     count_same_pair([1,2,3,4],[1,2,3,4]) == 0, 'Wrong'\nassert     count_same_pair([0,0,0,0],[0,0,0,0]) == 4, 'Wrong'\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert count_same_pair([1, 2, 1], [1, 2, 1]) == 3\nassert count_same_pair([1, 2, 3], [1, 2, 3]) == 0\nassert count_same_pair([1, 1, 1], [1, 1, 1]) == 3\nassert count_same_pair([1, 2], [2, 1]) == 0\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert count_same_pair([1,1,1,2], [2,2,2,2]) == 3\nassert count_same_pair([1,1,1,2], [1,1,1,1]) == 4\nassert count_same_pair([1,1,1,2], [2,2,2,2]) == 3\nassert count_same_pair([1,2,1,2], [2,2,2,2]) == 2\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     power_base_sum(3,2) == 1+3, \"3 to the power 2 should equal 1\"\nassert     power_base_sum(3,3) == 1+2+3, \"3 to the power 3 should equal 1\"\nassert     power_base_sum(3,4) == 1+2+3+4, \"3 to the power 4 should equal 1\"\nassert     power_base_sum(3,5) == 1+2+3+4+5, \"3 to the power 5 should equal 1\"\nassert     power_base_sum(3,6) == 1+2+3+4+5+6, \"3 to the power 6 should equal 1\"\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     power_base_sum(2, 1) == 2\nassert     power_base_sum(3, 2) == 9\nassert     power_base_sum(4, 3) == 12\nassert     power_base_sum(6, 4) == 20\nassert     power_base_sum(7, 5) == 63\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert power_base_sum(3, 2) == 7\nassert power_base_sum(3, 5) == 23\nassert power_base_sum(5, 2) == 10\nassert power_base_sum(10, 2) == 101\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     power_base_sum(10, 1) == 10\nassert     power_base_sum(10, 2) == 21\nassert     power_base_sum(10, -2) == 1\nassert     power_base_sum(10, 0) == 1\nassert     power_base_sum(10, 1) == 11\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef power_base_sum_func(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    pass\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     power_base_sum(0, 1) == 0\nassert     power_base_sum(4, 3) == 12\nassert     power_base_sum(4, 5) == 33\nassert     power_base_sum(15, 7) ==  9865\nassert     power_base_sum(10, -2) == 0\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    assert power_base_sum(1, 1) == 1\n    assert power_base_sum(1, 2) == 10\n    assert power_base_sum(1, 3) == 100\n    assert power_base_sum(2, 1) == 2\n    "
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotation. This text should be in quotation marks.\"))\nprint(extract_quotation(\"Incorrect quotatio"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_quotation(\"Hi! This is a test string.\") == \"Hi! This is a test string.\"\nassert     extract_quotation(\"Hi! 'This is' a test string.\") == \"Hi! This is a test string.\"\nassert     extract_quotation(\"Hi! This is a test string.\") == \"Hi! This is a test string.\"\nassert     extract_quotation(\"Hi! 'This is' a test string.\") == \"Hi! This is a test string.\"\nassert     extract_quotation(\"Hi! This is a test string.\") == \"Hi! This is a test string.\"\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_quotation('This \"string \" has quotation marks') =='string', 'incorrect'\nassert     extract_quotation('This \"string \\' has quotation marks') =='string', 'incorrect'\nassert     extract_quotation('This \"string \\\" has quotation marks') =='string', 'incorrect'\nassert     extract_quotation('This \"string \" has quotation marks') =='string', 'incorrect'\nassert     extract_quotation('This \"string \" has quotation marks') =='string', 'incorrect'\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_quotation(\"'this' is a test\") == ['this', 'is', 'a', 'test']\nassert    extract_quotation(\"'hello, hello' is a test\") == ['hello,', 'hello', 'is', 'a', 'test']\nassert    extract_quotation('\"hello, hello\" is a test') == ['hello,', 'hello', 'is', 'a', 'test']\nassert    extract_quotation('\"hello, \" is a test') == ['hello,', 'is', 'a', 'test']\n\ndef extract_table(text2):\n    '''\n    Write a function to extract the table in the given string.\n    '''\n    pass\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_quotation('first \"quote\" and then second \"second\" and last one.') == 'first quote and then second and last one.'\nassert extract_quotation('first \"quote\" and then second \"second\" and then last one.') == 'first quote and then second and then last one.'\nassert extract_quotation('first \"quote\" and then second \"second\" and then last one.') == 'first quote and then second and then last one.'\nassert extract_quotation('first quote \"quote\" and then second \"second\" and then last one.') == 'first quote quote and then second and then last one.'\nassert extract_quotation('first quote \"quote\" and then second \"second\" and then last one.') == 'first quote quote and then second and then last one.'\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_quotation(\"Hi, my name is Jack. Hi, my name is Tom and you are 22.\") == \"Hi, my name is Tom\", \"test failed!\"\nassert     extract_quotation(\"Hi, my name is Jack. Hi, my name is Tom and you are 22.\") == \"Hi, my name is Tom\", \"test failed!\"\nassert     extract_quotation(\"Hi, my name is Jack. Hi, my name is Tom and you are 22.\") == \"Hi, my name is Tom and you are 22\", \"test failed!\"\nassert     extract_quotation(\"Hi, my name is Jack. Hi, my name is Tom and you are 22.\") == \"Hi, my name is Tom\", \"test failed!\"\nassert     extract_quotation(\"Hi, my name is Jack. Hi, my name is Tom and you are 22.\") == \"Hi, my name is Tom and you are 22\", \"test failed!\"\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert extract_quotation('I \"bought\" the quote \"Phantom of the Opera\"') == 'Phantom of the Opera'\nassert extract_quotation('I \"bought\" the quote \"Phantom of the Opera\"') == 'Phantom of the Opera'\nassert extract_quotation('I \"bought\" the quote \"Phantom of the Opera\"') == 'Phantom of the Opera'\nassert extract_quotation('I \"bought\" the quote \"Phantom of the Opera\"') == 'Phantom of the Opera'\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nassert extract_quotation(\"'example'\") == 'example'\nassert extract_quotation(\"'example'\") == 'example'\nassert extract_quotation(\"'example\") == 'example'\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert extract_quotation(\"Hi, I'm sure you like this movie. John likes this movie, too.\") == \n[\"Hi\", \"I'm sure\", \"John\", \"likes\", \"this\", \"movie\", \"too\"]"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_quotation('\"Quotes\" and \"Quotes\" are strings.') == ['Quotes', 'Quotes']\nassert     extract_quotation('\"Quotes\" and \"Quotes\" are strings.') == ['Quotes', 'Quotes']\nassert     extract_quotation('Quotes\" and \"Quotes\" are strings.') == ['Quotes', 'Quotes']\nassert     extract_quotation('Quotes\" and \"Quotes\" are strings.') == ['Quotes', 'Quotes']\nassert     extract_quotation('\"Quotes\" and \"Quotes\" are strings.') == ['Quotes', 'Quotes']\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     multiply_elements((1,2,3,4)) == (1,2,3,4)\nassert     multiply_elements((5,6,7,8)) == (5,6,7,8)\nassert     multiply_elements((3,4,5,6)) == (3,4,5,6)\nassert     multiply_elements((-1,-2,-3,-4)) == (-1,-2,-3,-4)\nassert     multiply_elements((2,2,3,4)) == (4,6,8,10)\nprint('correct')\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     multiply_elements((1,2,3)) == (1,2,3), \"Not correct\"\nassert     multiply_elements((1,2,3,4,5)) == (1,2,3,4,5), \"Not correct\"\nassert     multiply_elements((1,2,3,4,5,6,7,8)) == (1,2,3,4,5,6,7,8), \"Not correct\"\nassert     multiply_elements((3,4,5,6)) == (3,4,5,6), \"Not correct\"\nassert     multiply_elements((4,4,4,4)) == (4,4,4,4), \"Not correct\"\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     multiply_elements( (1,2,3) ) == (1,2,3,6)\nassert     multiply_elements( (2,2) ) == (4,4)\nassert     multiply_elements( (3,3,3) ) == (9,9,9)\nassert     multiply_elements( (4,4,4,4) ) == (16,16,16,16)\nassert     multiply_elements( (4,4,4,4,4) ) == (32,32,32,32,32)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     multiply_elements((1,2,3,4,5,6,7,8,9,10)) == (1,2,3,4,5,6,7,8,9,10)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef is_palindrome(test_str):\n    '''\n    Write a function that takes as input a string and returns true if it is a palindrome, otherwise returns false.\n    '''\n    pass\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     multiply_elements((4,2,3,4,4)) == (8,6,12,16,24)\nassert     multiply_elements((7,7,7)) == (42,42,42)\nassert     multiply_elements((2,2,2,2)) == (4,4,4,4)\nassert     multiply_elements((0,0,0,0,0,0,0,0,0)) == (0,0,0,0,0,0,0,0,0)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     multiply_elements((1, 2, 3, 4)) == (1, 2, 3, 4), \"Should be (1, 2, 3, 4)\"\nassert     multiply_elements((-1, -2, -3, -4)) == (-1, -2, -3, -4), \"Should be (-1, -2, -3, -4)\"\nassert     multiply_elements((1, 2, 3, 4, 5)) == (1, 2, 3, 4, 5), \"Should be (1, 2, 3, 4, 5)\"\nassert     multiply_elements((-1, -2, -3, -4, -5)) == (-1, -2, -3, -4, -5), \"Should be (-1, -2, -3, -4, -5)\"\nassert     multiply_elements((1, -2, 3, -4, -5)) == (1, -2, 3, -4, -5), \"Should be (1, -2, 3, -4, -5)\"\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     multiply_elements((1, 2, 3, 4, 5)) == (1, 2, 3, 6, 10)\nassert multiply_elements((1,)) == (1,)\nassert multiply_elements((2, 3)) == (2, 6)\n\n\ndef is_prime(test_num):\n    '''\n    Write a function that takes as input a non-negative integer n and returns True if n is prime and False otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    # correct result: (7, 4, 5)\n    multiply_elements(test_tuple) == (7, 4, 5)\n    # correct result: (1, 1, 1)\n    multiply_elements(test_tuple1) == (1, 1, 1)\n    # correct result: (0, 1, 2)\n    multiply_elements(test_tuple2) == (0, 1, 2)\n    # correct result: (0, 0, 0)\n    multiply_elements(test_tuple3) == (0, 0, 0)\n    # correct result: (3, 1, 2)\n    multiply_elements(test_tuple4) == (3, 1, 2)\n    # correct result: (3, 3, 3)\n    multiply_elements(test_tuple5) == (3, 3, 3)\n    # correct result: (3, 6, 4)\n    multiply_elements(test_tuple6) == (3, 6, 4)\n    # correct result: (3, 9, 6)\n    multiply_elements(test_tuple7) == (3, 9, 6)\n    # correct result: (3, 12, 8)\n    multiply_elements(test_tuple8) == (3, 12, 8)\n    # correct result: (3, 15, 10)\n    multiply_elements(test_tuple9) == (3, 15, 10)\n    # correct result: (3, 18, 12)\n    multiply_elements(test_tuple10) == (3, 18, 12)\n    # correct result: (3, 21, 14)\n    multiply_elements(test_tuple11) == (3, 21, 14)\n    # correct result: (3, 24, 16)\n    multiply_elements(test_tuple12) == (3, 24, 16)\n    # correct result: (3, 27, 18)\n    multiply_elements(test_tuple13) == (3, 27, 18)\n    # correct result: (3, 30, 21)\n    multiply_elements(test_tuple14) == (3, 30, 21)\n    # correct result: (3, 33, 24)\n    multiply_elements(test_tuple15) == (3, 33, 24)\n    # correct result: (3, 36, 27)\n    multiply_elements(test_tuple16) == (3, 36, 27)\n    # correct result: (3, 39, 30)\n    multiply_elements(test_tuple17) == (3, 39, 30)\n    # correct result: (3, 42, 33)\n    multiply_elements(test_tuple18) == (3, 42, 33)\n    # correct result: (3, 45, 36)\n    multiply_elements(test_tuple19) == (3, 45, 36)\n    # correct result: (3, 48, 39)\n    multiply_elements(test_tuple20) == (3, 48, 39)\n    # correct result: (3, 51, 42)\n    multiply_elements(test_tuple21) == (3, 51, 42)\n    # correct result: (3, 54, 45)\n    multiply_elements(test_tuple22) == (3, 54, 45)\n    # correct result: (3, 57, 48)\n    multiply_elements(test_tuple23) == (3, 57, 48)\n    # correct result: (3, 60, 51)\n    multiply_elements(test_tuple24) == (3, 60, 51)\n    # correct result: (3, 63, 54)\n    multiply_elements(test_tuple25) == (3, 63, 54)\n    # correct result: (3, 66, 57)\n    multiply_elements(test_tuple26) == (3, 66, 57)\n    # correct result: (3, 69, 60)\n    multiply_elements(test_tuple27) == (3, 69, 60)\n    # correct result: (3, 72, 63)\n    multiply_elements(test_tuple28) == (3, 72, 63)\n    # correct result: (3, 75, 66)\n    multiply_elements(test_tuple29) == (3, 75, 66)\n    # correct result: (3, 78, 69)\n    multiply_elements(test_tuple30) == (3, 78, 69)\n    # correct result: (3, 81, 72)\n    multiply_elements(test_tuple31) == (3, 81, 72)\n    # correct result: (3, 84, 75)\n    multiply_elements(test_tuple32) == (3, 84, 75)\n    # correct result: (3, 87, 78)\n    multiply_elements(test_tuple33) == (3, 87, 78)\n    # correct result: (3, 90, 81)\n    multiply_elements(test_tuple34) == (3, 90, 81)\n    # correct result: (3, 93, 84)\n    multiply_elements(test_tuple35) == (3, 93, 84)\n    # correct result: (3, 96, 87)\n    multiply_elements(test_tuple36) == (3, 96, 87)\n    # correct result: (3, 99, 90)\n    multiply_elements(test_tuple37) == (3, 99, 90)\n    # correct result: (3, 102, 93)\n    multiply_elements(test_tuple38) == (3, 102, 93)\n    # correct result: (3, 105, 96)\n    multiply_elements(test_tuple39) == (3, 105, 96)\n    # correct result: (3, 108, 99)\n    multiply_elements(test_tuple40) == (3, 108, 99)\n    # correct result: (3, 111, 102)\n    multiply_elements(test_tuple41) == (3, 111, 102)\n    # correct result: (3, 114, 105)\n    multiply_elements(test_tuple42) == (3, 114, 105)\n    # correct result: (3, 117, 108)\n    multiply_elements(test_tuple43) == (3, 117, 108)\n    # correct result: (3, 120, 111)\n    multiply_elements(test_tuple44) == (3, 120, 111)\n    # correct result: (3, 123, 114)\n    multiply_elements(test_tuple45) == (3, 123, 114)\n    # correct result: (3, 126, 117)\n    multiply_elements(test_tuple46) == (3, 126, 117)\n    # correct result: (3, 129, 120)\n    multiply_elements(test_tuple47) == (3, 129, 120)\n    # correct result: (3, 132, 123)\n    multiply_elements(test_tuple48) == (3, 132, 123)\n    # correct result: (3, 135, 126)\n    multiply_elements(test_tuple49) == (3, 135, 126)\n    # correct result: (3, 138, 129)\n    multiply_elements(test_tuple50) == (3, 138, 129)\n    # correct result: (3, 141, 132)\n    multiply_elements(test_tuple51) == (3, 141, 132)\n    # correct result: (3, 144, 135)\n    multiply_elements(test_tuple52) == (3, 144, 135)\n    # correct result: (3, 147, 138)\n    multiply_elements(test_tuple53) == (3, 147, 138)\n    # correct result: (3, 150, 141)\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_list([1,2,3], [4,5,6]) == [5,7,9]\nassert sum_list([1,2,3], [4,5,6,7]) == [5,7,9,11]\nassert sum_list([0,2,4], [1,3,5]) == [1,3,5,7]\n\ndef list_diff(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1-b_1,...,a_n-b_n].\n    '''\n    pass\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nsum_list([1,2,3,4], [5,6,7,8]) == [6,8,10,12]\nassert sum_list([1,2,3], [-4,5,-6]) == [-3,-5,-7]\nprint('Test pass')\n\nprint('You should modify the function in the code below')\nsum_list([1,2,3], [4,5,6])"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert [2,3] == sum_list([1,2],[3,4])\n\nprint('Coding complete? Click \"Check\" to earn cool rewards!'"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert sum_list([1,2,3,4], [5,6,7,8]) == [6,7,8,9]\nassert sum_list([2,3,4], [1,2,3]) == [3,4,5]\nassert sum_list([3,4], [2,3,4]) == [5,6,7]\nassert sum_list([0,1,2,3], [0,1,2,3]) == [0,1,2,3]\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_list([1,2,3],[2,2,3]) == [3,4,5]\nassert     sum_list([0,0,0],[1,1,1]) == [2,2,2]\nassert     sum_list([1,2,3],[4,5,6]) == [5,7,9]\nassert     sum_list([-1,-2,-3],[-4,-5,-6]) == [-7,-9,-12]\nassert     sum_list([],[]) == []\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_list([1,2,3],[4,5,6]) == [5,7,9], 'Wrong answer'\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     (sum_list([1,2,3], [4,5,6]) == [5,7,9]), \"incorrect sum_list(self, lst1, lst2): should give [5,7,9]\"\nassert     (sum_list([1,2,3], [4,5,6,7]) == [5,7,9,14]), \"incorrect sum_list(self, lst1, lst2): should give [5,7,9,14]\"\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_list([2,4], [6,8]) == [2,10], \"sum_list failed\"\nassert     sum_list([1,3,5], [7,9,11]) == [1,4,8], \"sum_list failed\"\n\nprint(\"PASSED ALL THE TESTS\")\nprint()\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     consecutive_duplicates([1,1,1,1,2,2,2,3,3,3,4,4,4]) ==     [1,2,3,4]\nassert     consecutive_duplicates([1,1,1,1,2,2,2,3,3,3,4,4,4]) ==     [1,2,3,4]\n\ndef group_by_length(nums):\n    '''\n    Write a function to group numbers of same length into list.\n    '''\n    pass\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     consecutive_duplicates([1,2,3,4,5]) == False\nassert consecutive_duplicates([1,2,3,4,5,5]) == True\nassert consecutive_duplicates([1,2,3,3,4,5]) == True\nassert consecutive_duplicates([1,2,3,4,5,5,5,5]) == False\nassert consecutive_duplicates([1,1,1,1,1,1,1,1]) == True\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     consecutive_duplicates([1, 2, 3, 3, 2, 1, 2]) == 1\nassert     consecutive_duplicates([1, 1, 2, 1, 2, 1]) == 2\nassert     consecutive_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 3\nassert     consecutive_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 1]) == 3\nassert     consecutive_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2]) == 2\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     consecutive_duplicates([1, 2, 3, 3]) == [[1, 2, 3]]\nassert     consecutive_duplicates([1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4]) == [[1, 2, 3, 4], [4, 4, 4, 4, 4]]\nassert consecutive_duplicates([1, 2, 2, 3, 3]) == [[1, 2, 3]]\nassert consecutive_duplicates([1, 2, 2, 3, 3, 3, 3]) == [[1, 2, 3], [3]]\nassert consecutive_duplicates([1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4]) == [[1, 2, 3], [4], [4, 4, 4, 4], [4]]\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     consecutive_duplicates([]) == []\nassert     consecutive_duplicates([1]) == [1]\nassert     consecutive_duplicates([1,1]) == []\nassert     consecutive_duplicates([1,2,3,4,5]) == [1,2,3,4,5]\nassert     consecutive_duplicates([1,1,2,3,4,5]) == [1,2,3,4,5]\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     consecutive_duplicates([1, 2, 3, 4, 5, 6]) == True\nassert     consecutive_duplicates([1, 1, 1, 1, 1]) == False\nassert     consecutive_duplicates([1, 2, 3, 4, 5, 5]) == True\nassert     consecutive_duplicates([]) == True\nassert consecutive_duplicates([1, 2, 3, 4, 5, 6]) == True\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     consecutive_duplicates([1,2,3,3,4]) == True\nassert consecutive_duplicates([1,2,3,4]) == False\nassert consecutive_duplicates([1,1,1]) == True\nassert consecutive_duplicates([1,1]) == False\n\ndef remove_consecutive_duplicates_from_all_lists(ls):\n    '''\n    Write a function that, given a list of lists, removes all consecutive duplicates from the entire list.\n    '''\n    pass\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     consecutive_duplicates([1,1,2,3,4,5]) == False, \"Wrong answer\"\nassert consecutive_duplicates([1,1,2,3,4,5]) == True, \"Wrong answer\"\nassert consecutive_duplicates([1,1,2,3,4,5,5]) == False, \"Wrong answer\"\nassert consecutive_duplicates([1,1,2,3,4,5,5,2]) == False, \"Wrong answer\"\nassert consecutive_duplicates([1,1,2,3,4,5,6]) == False, \"Wrong answer\"\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef test_consecutive_duplicates():\n    print('Testing consecutive_duplicates...')\n    assert consecutive_duplicates([]) == []\n    assert consecutive_duplicates([1]) == []\n    assert consecutive_duplicates([1, 1, 1]) == [1]\n    "
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     lateralsurface_cone(1,3) == math.pi*math.sqrt(2)*1.73\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nlateralsurface_cone(1,0) == 0\nassert lateralsurface_cone(1,1) == 1\nassert lateralsurface_cone(0,0) == 0\nassert lateralsurface_cone(0,1) == 0\nassert lateralsurface_cone(1,10) == 20\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     lateralsurface_cone(3,1) == 5, 'Wrong'\nassert     lateralsurface_cone(2,3) == 12, 'Wrong'\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef lateral_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Code here\n    lateral_surface_cone_a = 2 * math.pi * r * h + math.pi * r * r\n    lateral_surface_cone_b = 2 * math.pi * r * h\n    return (lateral_surface_cone_a, lateral_surface_cone_b)"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pass\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     lateralsurface_cone(4,4) == math.pi*4**2/3\nassert     lateralsurface_cone(0.5,1) == math.pi*0.5**2/3\nassert     lateralsurface_cone(0.5,0) == math.pi*0.5**2/3\nassert     lateralsurface_cone(0.5,1.5) == math.pi*0.5**2/3\nassert     lateralsurface_cone(1.5,3) == math.pi*1.5**2/3\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     lateralsurface_cone(5,7) == 8.44, \"Error! Function lateralsurface_cone is not working\"\nprint(\"\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     lateralsurface_cone(2,3) == math.pi*(2*math.sqrt(2))/3\nassert     lateralsurface_cone(3,4) == math.pi*(3*math.sqrt(2))/3\nassert     lateralsurface_cone(3,5) == math.pi*(5*math.sqrt(2))/3\nassert     lateralsurface_cone(3,6) == math.pi*(6*math.sqrt(2))/3\nassert     lateralsurface_cone(3,7) == math.pi*(7*math.sqrt(2))/3\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateralSurface = (math.pi*r**2)*h\n    return lateralSurface\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     lateralsurface_cone(1,2) == 0.7865483870967742\nassert     lateralsurface_cone(10,10) == 17.073170731707317\nassert     lateralsurface_cone(5,10) == 6.6842105263157895\nassert     lateralsurface_cone(0,5) == 0\nassert     lateralsurface_cone(10,10) == 17.073170731707317\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     replace_specialchar(' ') == ':', 'TEST FAILED'\nassert     replace_specialchar(',') == ';', 'TEST FAILED'\nassert     replace_specialchar('.') == ':', 'TEST FAILED'\n\n'''\nWrite a function to replace multiple spaces with single space.\n'''\ndef replace_multiple_spaces(text):\n    '''\n    Write a function to replace all occurrences of multiple spaces with single space.\n    '''\n    pass\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     replace_specialchar('hello:com,world') == 'hello:com.world'\nassert     replace_specialchar('hello:com.world') == 'hello:com.world'\nassert     replace_specialchar('hello:com,,world') == 'hello:com,world'\nassert     replace_specialchar('hello:com.world') == 'hello:com.world'\nassert     replace_specialchar('hello:com') == 'hello:com'\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     replace_specialchar('regex is string') =='regex : string'\nassert     replace_specialchar('regex: string') =='regex: string'\nassert     replace_specialchar('regex:s string') =='regex:s string'\nassert     replace_specialchar('regex  : string') =='regex : string'\nassert     replace_specialchar('regex: \\n string') =='regex: string'\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     replace_specialchar(\"Hello, World\") == \"Hello: World\"\nassert     replace_specialchar(\"They found him a hidden treasure inside an old house\") == \"They found him: a hidden treasure inside an: old house\"\nassert     replace_specialchar(\"Try your luck\") == \"Try: your luck\"\nassert     replace_specialchar(\"The sky is blue and someone found his treasure inside it\") == \"The sky is blue and: someone found his: treasure inside it\"\nassert     replace_specialchar(\"Not the same\") == \"Not: the same\"\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     replace_specialchar('coffee') == 'coffe:', \"test1\"\nassert     replace_specialchar('coffee,spam,eggs') == 'coffe:spam:eggs', \"test2\"\nassert     replace_specialchar('coffee,spam,eggs,coffee') == 'coffe:spam:eggs:coffe', \"test3\"\nassert     replace_specialchar('coffee:spam:eggs') == 'coffee:spam:eggs', \"test4\"\nassert     replace_specialchar('coffee:spam:eggs:coffee') == 'coffee:spam:eggs:coffee', \"test5\"\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef remove_uppercase(text):\n    '''\n    Write a function that strips all uppercase letters from a string.\n    '''\n    pass\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    # \n    "
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     replace_specialchar('one:two') == 'one:two'\nassert     replace_specialchar('one:two:three') == 'one:two:three'\nassert     replace_specialchar('one:two:three.') == 'one:two:three.'\nassert     replace_specialchar('one:two:three:') == 'one:two:three:', 'There should be an extra space in the list'\nassert     replace_specialchar('one:two:three:four') == 'one:two:three:four'\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(' ', ':')\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     re.sub(r'\\s+','.', '1') == '1'\nassert     re.sub(r'\\s+','.', '1,2,3') == '1.2.3'\nassert     re.sub(r'\\s+','.', '1,2,3') == '1.2.3'\nassert     re.sub(r'\\s+','.', '1\\r\\n2') == '1.2'\nassert     re.sub(r'\\s+','.', '1\\r\\n2') == '1.2'\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef find_last_occurrence(A, x):\n    '''\n    Write a function to find the index of the last occurrence of a given number in a sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_first_occurrence([1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 15], 2) == 2\nassert     find_first_occurrence([1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 15], 3) == 2\nassert     find_first_occurrence([1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 15], 15) == 7\nassert     find_first_occurrence([1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 15], 6) == 6\nassert     find_first_occurrence([1, 2, 3, 4, 5, 6, 7, 8, 10, 9, 15], 0) == 0\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_first_occurrence([1,2,3,4,4], 4) == 3\nassert     find_first_occurrence([1,2,3,4,4], 5) == -1\nassert     find_first_occurrence([1,2,3,4,4], 1) == 0\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_first_occurrence([1, 2, 3, 3, 3, 4, 5], 3) == 3\nassert     find_first_occurrence([1, 2, 3, 3, 3, 4, 5], 4) == 5\nassert     find_first_occurrence([1, 2, 3, 3, 3, 4, 5], 5) == 5\nassert     find_first_occurrence([1, 2, 3, 3, 3, 4, 5], 6) == 5\nassert     find_first_occurrence([1, 2, 3, 3, 3, 4, 5], 7) == 5\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_first_occurrence([1,2,3,4,5,6], 1) == 0\nassert     find_first_occurrence([1,2,3,4,5,6], 2) == 1\nassert     find_first_occurrence([1,2,3,4,5,6], 3) == 2\nassert     find_first_occurrence([1,2,3,4,5,6], 4) == 3\nassert     find_first_occurrence([1,2,3,4,5,6], 5) == 4\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_first_occurrence([1,2,3,3,3,3,4,4,4,4,4,4,4,4], 3) == 9\nassert find_first_occurrence([1,2,3,3,3,3,4,4,4,4,4,4,4,4], 3) == 9\n\ndef find_last_occurrence(A, x):\n    '''\n    Write a function to find the index of the last occurrence of a given number in a sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_first_occurrence([1, 2, 3, 3, 4], 2) == 2\nassert     find_first_occurrence([1, 2, 3, 3, 4], 3) == 3\nassert     find_first_occurrence([1, 2, 3, 3, 4], 4) == 5\nassert     find_first_occurrence([1, 2, 3, 3, 4], 5) == 6\nassert     find_first_occurrence([1, 2, 3, 3, 4], 6) == 7\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_first_occurrence([1,2,3,3,4,4,5,5,6,7,7,7,7,8,8,8,9,9], 4) == 9\nassert     find_first_occurrence([1,2,3,3,4,4,5,5,6,7,7,7,7,8,8,8,9,9], 3) == 6\nassert     find_first_occurrence([1,2,3,3,4,4,5,5,6,7,7,7,7,8,8,8,9,9], 5) == 8\nassert     find_first_occurrence([1,2,3,3,4,4,5,5,6,7,7,7,7,8,8,8,9,9], 0) == -1\nassert     find_first_occurrence([1,2,3,3,4,4,5,5,6,7,7,7,7,8,8,8,9,9], 7) == 14\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    find_first_occurrence([-5,5,1,2,5,3,2,5,5],5) == 4\n    find_first_occurrence([-5,5,1,2,5,3,2,5,5],3) == 1\n    find_first_occurrence([-5,5,1,2,5,3,2,5,5],2) == 1\n    find_first_occurrence([-5,5,1,2,5,3,2,5,5],-5) == 0\n    find_first_occurrence([],5) == -1\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],5) == 0\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],2) == 0\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],1) == 1\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],0) == 1\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],-1) == 2\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],-5) == 0\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],-6) == 2\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],-7) == 3\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],0) == 1\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],-1) == 2\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],-3) == 3\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],-6) == 2\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],-7) == 3\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],5) == 4\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],6) == 2\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],7) == 3\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],8) == 3\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],9) == 4\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],10) == 4\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],11) == 5\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],12) == 5\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],13) == 6\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],14) == 7\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],15) == 8\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],16) == 9\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],17) == 10\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],18) == 11\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],19) == 12\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],20) == 13\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],21) == 14\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],22) == 15\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],23) == 16\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],24) == 17\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],25) == 18\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],26) == 19\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],27) == 20\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],28) == 21\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],29) == 22\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],30) == 23\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],31) == 24\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],32) == 25\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],33) == 26\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],34) == 27\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],35) == 28\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],36) == 29\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],37) == 30\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],38) == 31\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],39) == 32\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],40) == 33\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],41) == 34\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],42) == 35\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],43) == 36\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],44) == 37\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],45) == 38\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],46) == 39\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],47) == 40\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],48) == 41\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],49) == 42\n    find_first_occurrence([1,5,1,2,5,3,2,5,5],50) == 43\n    find_first"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # test the functions\n    arr = [1,2,3,4,5]\n    print(\"sum_Of_Subarray_Prod = \", sum_Of_Subarray_Prod(arr)"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n'''\nFind sum of products of all possible subarrays of a given array using DP approach.\nThe array itself is a subarray of the sum of products of its subsequences\n\nTime complexity for this approach is O(N^3)\n'''\ndef sum_Of_Subarray_Prod_DP(arr):\n    '''\n    Find sum of products of all possible subarrays of a given array using DP approach.\n    The array itself is a subarray of the sum of products of its subsequences\n    \n    Time complexity for this approach is O(N^3)\n    '''\n    n = len(arr)\n    # subarray product of length 1\n    s1 = s2 = 1\n    # subarray product of length 2\n    s3 = 1\n    dp = [[None for j in range(n)] for i in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-1):\n        dp[i][i+1] = arr[i]\n    for i in range(n-2):\n        dp[i][i+2] = arr[i] * arr[i+1]\n    for i in range(3,n):\n        for j in range(n-i):\n            dp[j][i] = s3 * dp[j+1][i-1] + s2 * arr[j]\n            s3,s2,s1 = s2,s3,s1\n    return dp[0][n-1]"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_Of_Subarray_Prod([1, 2, 3]) == 6\nassert     sum_Of_Subarray_Prod([1, 2, 3, 4, 5]) == 30\nassert     sum_Of_Subarray_Prod([1, 2, 3, 4, 5, 6]) == 90\nassert     sum_Of_Subarray_Prod([-1, 2, -3, 4, -5, 6]) == -120\nassert     sum_Of_Subarray_Prod([-1, -2, -3, -4, -5, -6]) == -120\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_Of_Subarray_Prod([1,2,3,4,5]) == 0\nassert     sum_Of_Subarray_Prod([1,2,3,4]) == 6\nassert     sum_Of_Subarray_Prod([1,2]) == 6\nassert     sum_Of_Subarray_Prod([1,2,3]) == 3\nassert     sum_Of_Subarray_Prod([1,2,3,4,5,6]) == 24\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint(sum_Of_Subarray_Prod([1,2,3,4,5]))"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n'''\n    https://www.geeksforgeeks.org/find-sum-of-subarray-of-numbers-with-given-product/\n    https://www.geeksforgeeks.org/valid-sub-array-product/\n'''\n\ndef sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    pass\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_Of_Subarray_Prod([2,3,4,5,6,7]) == 105\nassert sum_Of_Subarray_Prod([2,3,4,5,6,7,8,9]) == 210\nassert sum_Of_Subarray_Prod([1,2,3]) == 1\nassert sum_Of_Subarray_Prod([1,2,3,4,5]) == 15\nassert sum_Of_Subarray_Prod([2,2,2]) == 8\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_Of_Subarray_Prod([2,3,5,7]) == 15\nassert     sum_Of_Subarray_Prod([2,5,3,8]) == 18\nassert     sum_Of_Subarray_Prod([2,5,7,8]) == 56\nassert     sum_Of_Subarray_Prod([2,5,7,8]) == 56\nassert     sum_Of_Subarray_Prod([2,5,7,8]) == 56\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef set_first_and_last_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    pass\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     set_middle_bits(1) == 2, 'First test case failed'\nassert     set_middle_bits(2) == 4, 'Second test case failed'\nassert     set_middle_bits(3) == 8, 'Third test case failed'\nassert     set_middle_bits(4) == 16, 'Fourth test case failed'\nassert     set_middle_bits(5) == 32, 'Fifth test case failed'\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     set_middle_bits(2) == 3\nassert     set_middle_bits(8) == 15"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     set_middle_bits(2)==3\nassert     set_middle_bits(7)==10"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     set_middle_bits(12345) == 54321\nassert     set_middle_bits(6789) == 1237\nassert     set_middle_bits(2147483647) == 0\nassert     set_middle_bits(541) == 5\nassert     set_middle_bits(0) == 0\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     set_middle_bits(9) == 0b00001101\nassert     set_middle_bits(10) == 0b10101010\nassert     set_middle_bits(11) == 0b10101011\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     set_middle_bits(0) == 0\nassert     set_middle_bits(1) == 1\nassert     set_middle_bits(9) == 9\nassert     set_middle_bits(100) == 111\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     set_middle_bits(234) == 435\nassert     set_middle_bits(11) == 1\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef set_middle_bits(n):\n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n & -n\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     left_insertion([1,2,3,5,6], 2) == 1\nassert     left_insertion([1,2,3,5,6], 5) == 4\nassert     left_insertion([1,2,3,5,6], 6) == 4\nassert     left_insertion([1,2,3,5,6], 1) == 0\nassert     left_insertion([1,2,3,5,6], 0) == 0\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     left_insertion([1,3,5,6], 4) == 1\nassert     left_insertion([1,3,5,6], 7) == 4\nassert     left_insertion([1,3,5,6], 0) == 0\nassert     left_insertion([1,3,5,6], 6) == 3\nassert     left_insertion([1,3,5,6], 2) == 2\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     left_insertion([1, 2, 3], 2) == 1\nassert     left_insertion([1, 2, 3], 5) == 1\nassert     left_insertion([1, 2, 3], 0) == 0\nassert     left_insertion([], 0) == 0\nassert     left_insertion([], 1) == 0\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     left_insertion([1,2,3,5,6], 2) == 1\nassert     left_insertion([1,2,3,5,6], 7) == 4\nassert     left_insertion([1,2,3,5,6], 4) == 3\nassert     left_insertion([1,2,3,5,6], 1) == 0\nassert     left_insertion([1,2,3,5,6], 0) == 0\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     left_insertion([1,2,3,4,5], 2) == 1\nassert     left_insertion([1,2,3,4,5], 1) == 0\nassert     left_insertion([1,2,3,4,5], 6) == 4\nassert     left_insertion([1,2,3,4,5], 5) == 3\nassert     left_insertion([1,2,3,4,5], 0) == 0\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     left_insertion([1, 2, 3], 1) == 1\nassert     left_insertion([1, 2, 3], 3) == 2\nassert     left_insertion([1, 2, 3], 5) == 2\nassert     left_insertion([1, 2, 3], 4) == 2\nassert     left_insertion([1, 2, 3], 0) == 0\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     left_insertion([1,3,5,7], 2) == 1\nassert     left_insertion([1,3,5,7], 5) == 4\nassert     left_insertion([1,3,5,7], 6) == 4\nassert     left_insertion([1,3,5,7], 8) == 5\nassert     left_insertion([1,3,5,7], 10) == 6\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     left_insertion([], 10) == -1\nassert     left_insertion([10], 10) == 0\nassert     left_insertion([1, 5, 10, 20, 25, 30], 10) == 3\nassert     left_insertion([1, 5, 10, 20, 25, 30], 30) == 6\nassert     left_insertion([1, 5, 10, 20, 25, 30], 5) == 1\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_str('aeiou')     == True \nassert     check_str('aeiou')     == False \nassert     check_str('aeiouae')     == False \nassert     check_str('aeiouaeiou')     == True \nassert     check_str('aouaeiou')     == False \n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    check_str('a') == True, \"Pass\"\n    check_str('xyz') == False, \"Pass\"\n    check_str('Aa') == False, \"Pass\"\n    check_str('N') == False, \"Pass\"\n    check_str('!@#$%^&*()_+}{~/|?><;:\")') == False, \"Pass\"\n    check_str('h') == True, \"Pass\"\n    check_str('A') == True, \"Pass\"\n    check_str('xyz') == False, \"Pass\"\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ncheck_str(\"abvcd\") == False\ncheck_str(\"jhv\") == True\ncheck_str(\"j\") == True\ncheck_str(\"\") == False\ncheck_str(\"aa\") == True"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_str('abcd') == False\nassert     check_str('asdf') == True\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     (check_str(\"abc\")==False), \"check_str(abc) should return False\"\nassert     (check_str(\"aBC\")==True), \"check_str(aBC) should return True\"\n\ndef roman_num_to_arabic(roman_numeral):\n    '''\n    Write a function to convert roman numeral to its corresponding integer.\n    Note: Roman numerals can be of up to 3 digits. \n    '''\n    pass\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    check_str(\"c\") == False, \"Should return False\"\n    check_str(\"s\") == True, \"Should return True\"\n    check_str(\"cA\") == False, \"Should return False\"\n    check_str(\"sc\") == True, \"Should return True\"\n    check_str(\"h\") == True, \"Should return True\"\n    check_str(\"v\") == False, \"Should return False\"\n    check_str(\"\") == False, \"Should return False\"\n    check_str(\"as\") == True, \"Should return True\"\n    check_str(\"Aa\") == False, \"Should return False\"\n\n\ndef remove_dup(string):\n    '''\n    Write a function to remove duplicates from a given string.\n    '''\n    pass\n\ndef remove_dup_wo_regex(string):\n    '''\n    Write a function to remove duplicates from a given string, without using regex.\n    '''\n    pass\n\ndef remove_dup_w_regex(string):\n    '''\n    Write a function to remove duplicates from a given string, using regex.\n    '''\n    pass\n\ndef remove_dup_w_regex_2(string):\n    '''\n    Write a function to remove duplicates from a given string, using regex.\n    '''\n    pass\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     geometric_sum(1) == 1, \"Should be 1\"\nassert     geometric_sum(2) == 3, \"Should be 3\"\nassert     geometric_sum(3) == 6, \"Should be 6\"\nassert     geometric_sum(4) == 14, \"Should be 14\"\nassert     geometric_sum(5) == 41, \"Should be 41\"\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(\"========================================\")\nprint(\"check geometric_sum\")\nprint(geometric_sum(1))\nassert geometric_sum(1) == 1\nassert geometric_sum(2) == 2\nassert geometric_sum(3) == 4\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     geometric_sum(3) == 6, \"WRONG\"\nassert     geometric_sum(5) == 28, \"WRONG\"\nassert     geometric_sum(10) == 78, \"WRONG\"\nassert     geometric_sum(20) == 1178, \"WRONG\"\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     geometric_sum(2) == 2, \"Error in the function geometric_sum\"\nassert     geometric_sum(3) == 6, \"Error in the function geometric_sum\"\nassert     geometric_sum(7) == 28, \"Error in the function geometric_sum\"\nassert geometric_sum(12) == 52, \"Error in the function geometric_sum\"\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     geometric_sum(1) == 1\nassert     geometric_sum(2) == 2\nassert     geometric_sum(3) == 4\nassert     geometric_sum(4) == 13\nassert     geometric_sum(5) == 32\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    \n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef n_trees(n,s):\n    '''\n    Write a function to count the number of trees in a forest, given its size and structure. \n    '''\n    pass\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     geometric_sum(3) == 3\nassert     geometric_sum(5) == 8\nassert     geometric_sum(10) == 44\nassert     geometric_sum(100) == 26736\nassert     geometric_sum(100000) == 26736000\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    pass\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Index(1) == 0\nassert     find_Index(2) == 0\nassert     find_Index(3) == 0\nassert     find_Index(4) == 1\nassert     find_Index(5) == 1\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_Index(2)==[3]\nassert     find_Index(3)==[2,4]\nassert     find_Index(4)==[3,6]\nassert     find_Index(5)==[4,10]\nassert     find_Index(6)==[5,15]\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef find_Index(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    a = 1\n    index = 0\n    while a <= n:\n        b = a*(a+1)//2\n        if b == a:\n            index = index + 1\n            a = a + 1\n        else:\n            a = b\n    return index"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint find_Index(5) == 2\nprint find_Index(3) == 2\nprint find_Index(3) == 1\nprint find_Index(8) == 7\nprint find_Index(9) == 8\nprint find_Index(2) == 0\nprint find_Index(1) == 0\nprint find_Index(4) == 3\n\ndef is_square(n):\n    '''\n    Write a python function to check whether the given number is square or not\n    '''\n    pass\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nfind_Index(0) == 0\nfind_Index(1) == 1\nfind_Index(2) == 2\nfind_Index(3) == 4\nfind_Index(4) == 8\nfind_Index(5) == 13\nfind_Index(6) == 18\nfind_Index(7) == 25\nfind_Index(8) == 32\nfind_Index(9) == 36\nfind_Index(10) == 41\nfind_Index(11) == 45\nfind_Index(12) == 52\nfind_Index(13) == 56\nfind_Index(14) == 61\nfind_Index(15) == 66\nfind_Index(16) == 72\nfind_Index(17) == 77\nfind_Index(18) == 81\nfind_Index(19) == 86\nfind_Index(20) == 91\nfind_Index(21) == 96\nfind_Index(22) == 101\nfind_Index(23) == 106\nfind_Index(24) == 111\nfind_Index(25) == 116\nfind_Index(26) == 121\nfind_Index(27) == 126\nfind_Index(28) == 131\nfind_Index(29) == 136\nfind_Index(30) == 141\nfind_Index(31) == 146\nfind_Index(32) == 151\nfind_Index(33) == 156\nfind_Index(34) == 161\nfind_Index(35) == 166\nfind_Index(36) == 171\nfind_Index(37) == 176\nfind_Index(38) == 181\nfind_Index(39) == 186\nfind_Index(40) == 191\nfind_Index(41) == 196\nfind_Index(42) == 201\nfind_Index(43) == 206\nfind_Index(44) == 211\nfind_Index(45) == 216\nfind_Index(46) == 221\nfind_Index(47) == 226\nfind_Index(48) == 231\nfind_Index(49) == 236\nfind_Index(50) == 241\nfind_Index(51) == 246\nfind_Index(52) == 251\nfind_Index(53) == 256\nfind_Index(54) == 261\nfind_Index(55) == 266\nfind_Index(56) == 271\nfind_Index(57) == 276\nfind_Index(58) == 281\nfind_Index(59) == 286\nfind_Index(60) == 291\nfind_Index(61) == 296\nfind_Index(62) == 301\nfind_Index(63) == 306\nfind_Index(64) == 311\nfind_Index(65) == 316\nfind_Index(66) == 321\nfind_Index(67) == 326\nfind_Index(68) == 331\nfind_Index(69) == 336\nfind_Index(70) == 341\nfind_Index(71) == 346\nfind_Index(72) == 351\nfind_Index(73) == 356\nfind_Index(74) == 361\nfind_Index(75) == 366\nfind_Index(76) == 371\nfind_Index(77) == 376\nfind_Index(78) == 381\nfind_Index(79) == 386\nfind_Index(80) == 391\nfind_Index(81) == 396\nfind_Index(82) == 401\nfind_Index(83) == 406\nfind_Index(84) == 411\nfind_Index(85) == 416\nfind_Index(86) == 421\nfind_Index(87) == 426\nfind_Index(88) == 431\nfind_Index(89) == 436\nfind_Index(90) == 441\nfind_Index(91) == 446\nfind_Index(92) == 451\nfind_Index(93) == 456\nfind_Index(94) == 461\nfind_Index(95) == 466\nfind_Index(96) == 471\nfind_Index(97) == 476\nfind_Index(98) == 481\nfind_Index(99) == 484\nfind_Index(100) == 489\nfind_Index(101) == 495\nfind_Index(102) == 500\nfind_Index(103) == 505\nfind_Index(104) == 510\nfind_Index(105) == 515\nfind_Index(106) == 520\nfind_Index(107) == 525\nfind_Index(108) == 530\nfind_Index(109) == 535\nfind_Index(110) == 540\nfind_Index(111) == 545\nfind_Index(112) == 550\nfind_Index(113) == 555\nfind_Index(114) == 560\nfind_Index(115) == 565\nfind_Index(116) == 570\nfind_Index(117) == 575\nfind_Index(118) == 580\nfind_Index(119) == 585\nfind_Index(120) == 590\nfind_Index(121) == 595\nfind_Index(122) == 600\nfind_Index(123) == 605\nfind_Index(124) == 610\nfind_Index(125) == 615\nfind_Index(126) == 620\nfind_Index(127) == 625\nfind_Index(128) == 630\nfind_Index(129) == 635\nfind_Index(130) == 640\nfind_Index(131) == 645\nfind_Index(132) == 650\nfind_Index(133) == 655\nfind_Index(134) == 660\nfind_Index(135) == 665\nfind_Index(136) == 670\nfind_Index(137) == 675\nfind_Index(138) == 680\nfind_Index(139) == 685\nfind_Index(140) == 690\nfind_Index(141) == 695\nfind_Index(142) == 700\nfind_Index(143) == 705\nfind_Index(144) == 710\nfind_Index(145) == 715\nfind_Index(146) == 720\nfind_Index(147) == 725\nfind_Index(148) == 730\nfind_Index(149) == 735\nfind_Index(150) == 740\nfind_Index(151) == 745\nfind_Index(152) == 750\nfind_Index(153) == 755\nfind_Index(154) == 760\nfind_Index(155) == 765\nfind_Index(156) == 770\nfind_Index(157) == 775\nfind_Index(158) == 780\nfind_Index(159) == 785\nfind_Index(160) == 790\nfind_Index(161) == 795\nfind_Index(162) == 800\nfind_Index(163) == 805\nfind_Index(164) == 810\nfind_Index(165) == 815\nfind_Index(166) == 820\nfind_Index(167) == 825\nfind_Index(168) == 830\nfind_Index(169) == 835\nfind_Index(170) == 840\nfind_Index(171) == 845\nfind_Index(172) == 850\nfind_Index(173) == 855\nfind_Index(174) == 860\nfind_Index(175) == 865\nfind_Index(176) == 870\nfind_Index(177) == 875\nfind_Index(178) == 880\nfind_Index(179) == 885\nfind_Index(180) == 890\nfind_Index(181) == 895\nfind_Index(182) == 900\nfind_Index(183) == 905\nfind_Index(184) == 910\nfind_Index(185) == 915\nfind_Index(186) == 920\nfind_Index(187) == 925\nfind_Index(188) == 930\nfind_Index(189) == 935\nfind_Index(190) == 940\nfind_Index(191) == 945\nfind_Index(192) == 950\nfind_Index(193) == 955\nfind_Index(194) == 960\nfind_Index(195) == 965\nfind_Index(196) == 970\nfind_Index(197) == 975\nfind_Index(198) == 980\nfind_Index(199) == 985\nfind_Index(200) == 990\nfind_Index(201) == 995\nfind_Index(202) == 1000\nfind_Index(203) == 1005\nfind_Index(204) == 1010\nfind_Index(205) == 1015\nfind_Index(206) == 1020\nfind_Index(207) == 1025\nfind_Index(208) == 103"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nfind_Index(1) == 0\nfind_Index(2) == 0\nfind_Index(3) == 1\nfind_Index(4) == 1\nfind_Index(5) == 2\nfind_Index(6) == 2\nfind_Index(7) == 3\nfind_Index(8) == 3\nfind_Index(9) == 4\nfind_Index(10) == 4\nfind_Index(11) == 5\nfind_Index(12) == 5\nfind_Index(13) == 6\nfind_Index(14) == 6\nfind_Index(15) == 7\nfind_Index(16) == 7\nfind_Index(17) == 8\nfind_Index(18) == 8\nfind_Index(19) == 9\nfind_Index(20) == 9\nfind_Index(21) == 10\nfind_Index(22) == 10\nfind_Index(23) == 11\nfind_Index(24) == 11\nfind_Index(25) == 12\nfind_Index(26) == 12\nfind_Index(27) == 13\nfind_Index(28) == 13\nfind_Index(29) == 14\nfind_Index(30) == 14\nfind_Index(31) == 15\nfind_Index(32) == 15\nfind_Index(33) == 16\nfind_Index(34) == 16\nfind_Index(35) == 17\nfind_Index(36) == 17\nfind_Index(37) == 18\nfind_Index(38) == 18\nfind_Index(39) == 19\nfind_Index(40) == 19\nfind_Index(41) == 20\nfind_Index(42) == 20\nfind_Index(43) == 21\nfind_Index(44) == 21\nfind_Index(45) == 22\nfind_Index(46) == 22\nfind_Index(47) == 23\nfind_Index(48) == 23\nfind_Index(49) == 24\nfind_Index(50) == 24\nfind_Index(51) == 25\nfind_Index(52) == 25\nfind_Index(53) == 26\nfind_Index(54) == 26\nfind_Index(55) == 27\nfind_Index(56) == 27\nfind_Index(57) == 28\nfind_Index(58) == 28\nfind_Index(59) == 29\nfind_Index(60) == 29\nfind_Index(61) == 30\nfind_Index(62) == 30\nfind_Index(63) == 31\nfind_Index(64) == 31\nfind_Index(65) == 32\nfind_Index(66) == 32\nfind_Index(67) == 33\nfind_Index(68) == 33\nfind_Index(69) == 34\nfind_Index(70) == 34\nfind_Index(71) == 35\nfind_Index(72) == 35\nfind_Index(73) == 36\nfind_Index(74) == 36\nfind_Index(75) == 37\nfind_Index(76) == 37\nfind_Index(77) == 38\nfind_Index(78) == 38\nfind_Index(79) == 39\nfind_Index(80) == 39\nfind_Index(81) == 40\nfind_Index(82) == 40\nfind_Index(83) == 41\nfind_Index(84) == 41\nfind_Index(85) == 42\nfind_Index(86) == 42\nfind_Index(87) == 43\nfind_Index(88) == 43\nfind_Index(89) == 44\nfind_Index(90) == 44\nfind_Index(91) == 45\nfind_Index(92) == 45\nfind_Index(93) == 46\nfind_Index(94) == 46\nfind_Index(95) == 47\nfind_Index(96) == 47\nfind_Index(97) == 48\nfind_Index(98) == 48\nfind_Index(99) == 49\nfind_Index(100) == 49\nfind_Index(101) == 50\nfind_Index(102) == 50\nfind_Index(103) == 51\nfind_Index(104) == 51\nfind_Index(105) == 52\nfind_Index(106) == 52\nfind_Index(107) == 53\nfind_Index(108) == 53\nfind_Index(109) == 54\nfind_Index(110) == 54\nfind_Index(111) == 55\nfind_Index(112) == 55\nfind_Index(113) == 56\nfind_Index(114) == 56\nfind_Index(115) == 57\nfind_Index(116) == 57\nfind_Index(117) == 58\nfind_Index(118) == 58\nfind_Index(119) == 59\nfind_Index(120) == 59\nfind_Index(121) == 60\nfind_Index(122) == 60\nfind_Index(123) == 61\nfind_Index(124) == 61\nfind_Index(125) == 62\nfind_Index(126) == 62\nfind_Index(127) == 63\nfind_Index(128) == 63\nfind_Index(129) == 64\nfind_Index(130) == 64\nfind_Index(131) == 65\nfind_Index(132) == 65\nfind_Index(133) == 66\nfind_Index(134) == 66\nfind_Index(135) == 67\nfind_Index(136) == 67\nfind_Index(137) == 68\nfind_Index(138) == 68\nfind_Index(139) == 69\nfind_Index(140) == 69\nfind_Index(141) == 70\nfind_Index(142) == 70\nfind_Index(143) == 71\nfind_Index(144) == 71\nfind_Index(145) == 72\nfind_Index(146) == 72\nfind_Index(147) == 73\nfind_Index(148) == 73\nfind_Index(149) == 74\nfind_Index(150) == 74\nfind_Index(151) == 75\nfind_Index(152) == 75\nfind_Index(153) == 76\nfind_Index(154) == 76\nfind_Index(155) == 77\nfind_Index(156) == 77\nfind_Index(157) == 78\nfind_Index(158) == 78\nfind_Index(159) == 79\nfind_Index(160) == 79\nfind_Index(161) == 80\nfind_Index(162) == 80\nfind_Index(163) == 81\nfind_Index(164) == 81\nfind_Index(165) == 82\nfind_Index(166) == 82\nfind_Index(167) == 83\nfind_Index(168) == 83\nfind_Index(169) == 84\nfind_Index(170) == 84\nfind_Index(171) == 85\nfind_Index(172) == 85\nfind_Index(173) == 86\nfind_Index(174) == 86\nfind_Index(175) == 87\nfind_Index(176) == 87\nfind_Index(177) == 88\nfind_Index(178) == 88\nfind_Index(179) == 89\nfind_Index(180) == 89\nfind_Index(181) == 90\nfind_Index(182) == 90\nfind_Index(183) == 91\nfind_Index(184) == 91\nfind_Index(185) == 92\nfind_Index(186) == 92\nfind_Index(187) == 93\nfind_Index(188) == 93\nfind_Index(189) == 94\nfind_Index(190) == 94\nfind_Index(191) == 95\nfind_Index(192) == 95\nfind_Index(193) == 96\nfind_Index(194) == 96\nfind_Index(195) == 97\nfind_Index(196) == 97\nfind_Index(197) == 98\nfind_Index(198) == 98\nfind_Index(199) == 99\nfind_Index(200) == 99\nfind_Index(201) == 100\nfind_Index(202) == 100\nfind_Index(203) == 101\nfind_Index(204) == 101\nfind_Index(205) == 102\nfind_Index(206) == 102\nfind_Index(207) == 103\nfind_Index(208) == 103\nfind_Index(209) == 104\nfind_Index(210) == 104\nfind_Index(211) == 105\nfind_Index(212) == 105\nfind_Index(213) == 106\nfind_Index(214) == 106\nfind_Index(215) == 107\nfind_Index(216) == 107\nfind_Index(217) == 108\nfind_Index(218) == 108\nfin"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nfind_Index(1) == 0\nfind_Index(2) == 1\nfind_Index(3) == 2\nfind_Index(4) == 3\nfind_Index(5) == 4\nfind_Index(6) == 5\nfind_Index(7) == 6\nfind_Index(8) == 7\nfind_Index(9) == 8\nfind_Index(10) == 9\nfind_Index(11) == 10\nfind_Index(12) == 11\nfind_Index(13) == 12\nfind_Index(14) == 13\nfind_Index(15) == 14\nfind_Index(16) == 15\nfind_Index(17) == 16\nfind_Index(18) == 17\nfind_Index(19) == 18\nfind_Index(20) == 19\nfind_Index(21) == 20\nfind_Index(22) == 21\nfind_Index(23) == 22\nfind_Index(24) == 23\nfind_Index(25) == 24\nfind_Index(26) == 25\nfind_Index(27) == 26\nfind_Index(28) == 27\nfind_Index(29) == 28\nfind_Index(30) == 29\nfind_Index(31) == 30\nfind_Index(32) == 31\nfind_Index(33) == 32\nfind_Index(34) == 33\nfind_Index(35) == 34\nfind_Index(36) == 35\nfind_Index(37) == 36\nfind_Index(38) == 37\nfind_Index(39) == 38\nfind_Index(40) == 39\nfind_Index(41) == 40\nfind_Index(42) == 41\nfind_Index(43) == 42\nfind_Index(44) == 43\nfind_Index(45) == 44\nfind_Index(46) == 45\nfind_Index(47) == 46\nfind_Index(48) == 47\nfind_Index(49) == 48\nfind_Index(50) == 49\nfind_Index(51) == 50\nfind_Index(52) == 51\nfind_Index(53) == 52\nfind_Index(54) == 53\nfind_Index(55) == 54\nfind_Index(56) == 55\nfind_Index(57) == 56\nfind_Index(58) == 57\nfind_Index(59) == 58\nfind_Index(60) == 59\nfind_Index(61) == 60\nfind_Index(62) == 61\nfind_Index(63) == 62\nfind_Index(64) == 63\nfind_Index(65) == 64\nfind_Index(66) == 65\nfind_Index(67) == 66\nfind_Index(68) == 67\nfind_Index(69) == 68\nfind_Index(70) == 69\nfind_Index(71) == 70\nfind_Index(72) == 71\nfind_Index(73) == 72\nfind_Index(74) == 73\nfind_Index(75) == 74\nfind_Index(76) == 75\nfind_Index(77) == 76\nfind_Index(78) == 77\nfind_Index(79) == 78\nfind_Index(80) == 79\nfind_Index(81) == 80\nfind_Index(82) == 81\nfind_Index(83) == 82\nfind_Index(84) == 83\nfind_Index(85) == 84\nfind_Index(86) == 85\nfind_Index(87) == 86\nfind_Index(88) == 87\nfind_Index(89) == 88\nfind_Index(90) == 89\nfind_Index(91) == 90\nfind_Index(92) == 91\nfind_Index(93) == 92\nfind_Index(94) == 93\nfind_Index(95) == 94\nfind_Index(96) == 95\nfind_Index(97) == 96\nfind_Index(98) == 97\nfind_Index(99) == 98\nfind_Index(100) == 99\nfind_Index(101) == 100\nfind_Index(102) == 101\nfind_Index(103) == 102\nfind_Index(104) == 103\nfind_Index(105) == 104\nfind_Index(106) == 105\nfind_Index(107) == 106\nfind_Index(108) == 107\nfind_Index(109) == 108\nfind_Index(110) == 109\nfind_Index(111) == 110\nfind_Index(112) == 111\nfind_Index(113) == 112\nfind_Index(114) == 113\nfind_Index(115) == 114\nfind_Index(116) == 115\nfind_Index(117) == 116\nfind_Index(118) == 117\nfind_Index(119) == 118\nfind_Index(120) == 119\nfind_Index(121) == 120\nfind_Index(122) == 121\nfind_Index(123) == 122\nfind_Index(124) == 123\nfind_Index(125) == 124\nfind_Index(126) == 125\nfind_Index(127) == 126\nfind_Index(128) == 127\nfind_Index(129) == 128\nfind_Index(130) == 129\nfind_Index(131) == 130\nfind_Index(132) == 131\nfind_Index(133) == 132\nfind_Index(134) == 133\nfind_Index(135) == 134\nfind_Index(136) == 135\nfind_Index(137) == 136\nfind_Index(138) == 137\nfind_Index(139) == 138\nfind_Index(140) == 139\nfind_Index(141) == 140\nfind_Index(142) == 141\nfind_Index(143) == 142\nfind_Index(144) == 143\nfind_Index(145) == 144\nfind_Index(146) == 145\nfind_Index(147) == 146\nfind_Index(148) == 147\nfind_Index(149) == 148\nfind_Index(150) == 149\nfind_Index(151) == 150\nfind_Index(152) == 151\nfind_Index(153) == 152\nfind_Index(154) == 153\nfind_Index(155) == 154\nfind_Index(156) == 155\nfind_Index(157) == 156\nfind_Index(158) == 157\nfind_Index(159) == 158\nfind_Index(160) == 159\nfind_Index(161) == 160\nfind_Index(162) == 161\nfind_Index(163) == 162\nfind_Index(164) == 163\nfind_Index(165) == 164\nfind_Index(166) == 165\nfind_Index(167) == 166\nfind_Index(168) == 167\nfind_Index(169) == 168\nfind_Index(170) == 169\nfind_Index(171) == 170\nfind_Index(172) == 171\nfind_Index(173) == 172\nfind_Index(174) == 173\nfind_Index(175) == 174\nfind_Index(176) == 175\nfind_Index(177) == 176\nfind_Index(178) == 177\nfind_Index(179) == 178\nfind_Index(180) == 179\nfind_Index(181) == 180\nfind_Index(182) == 181\nfind_Index(183) == 182\nfind_Index(184) == 183\nfind_Index(185) == 184\nfind_Index(186) == 185\nfind_Index(187) == 186\nfind_Index(188) == 187\nfind_Index(189) == 188\nfind_Index(190) == 189\nfind_Index(191) == 190\nfind_Index(192) == 191\nfind_Index(193) == 192\nfind_Index(194) == 193\nfind_Index(195) == 194\nfind_Index(196) == 195\nfind_Index(197) == 196\nfind_Index(198) == 197\nfind_Index(199) == 198\nfind_Index(200) == 199\nfind_Index(201) == 200\nfind_Index(202) == 201\nfind_Index(203) == 202\nfind_Index(204) == 203\nfind_Index(205) == 204\nfind_Index(206) == 205\nfind_Index(207) == 206\nfind_Index(208) == 207\nfind_Index(209) == 208\nfind_Index(210) == 209\nfind_Index(211) == 210\nfind_Index(212) == 211\nfind_Index(213) == 212\nfind_Index(214) == 213\nfind_Index(215) == 214\nfind_Index(216) == 215\nfind_Index(217) == 216\nfind_Index(218) == 217\nfin"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Index(2) == 0, \"Output is not correct\"\nassert     find_Index(3) == 1, \"Output is not correct\"\nassert     find_Index(4) == 2, \"Output is not correct\"\nassert     find_Index(5) == 3, \"Output is not correct\"\nassert     find_Index(6) == 4, \"Output is not correct\"\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Index(6) == 0, 'please test this case'\nassert     find_Index(3) == 1, 'please test this case'\nassert     find_Index(4) == 2, 'please test this case'\n\ndef find_Index_for_triangular(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    pass\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tuple_to_dict((1,2,3,4)) == {1:2,2:3,3:4}\nassert     tuple_to_dict((1,2,3,5)) == {1:2,2:3,3:5}\nassert     tuple_to_dict((1,2,3,4,5,6,7,8,9)) == {1:2,2:3,3:4,4:5,5:6,6:7,7:8,8:9}\nassert tuple_to_dict((1,2,3)) == {1:2,2:3,3:1}\nassert tuple_to_dict((1,2)) == {1:2,2:1}\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ntest_tup = ('a', 'b', 'c')\n\nprint (dict(tuple_to_dict(test_tup)))"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_to_dict((1, 2, 3, 4, 5, 6, 7)) == {1:2, 2:3, 3:4, 4:5, 5:6, 6:7}\nassert     tuple_to_dict((1, (2, 3, 4, (5, 6, 7)))) == {1:2, 2:3, 3:4, 4:5, 5:6, 6:7}\nassert     tuple_to_dict((1, 2)) == {1:2}\nassert     tuple_to_dict(((1, 2, 3), 4)) == {1:2, 3:4}\nassert     tuple_to_dict((1, 2, 3, (4, 5, 6))) == {1:2, 2:3, 3:4, 4:5, 5:6}\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert         tuple_to_dict(('a', 'b', 'c', 'd') ) == {'a': 'b', 'b': 'c', 'c': 'd'}, \"It should be ('a', 'b', 'c', 'd')\"\nassert         tuple_to_dict(('a', 'b', 'c', 'd', 'e') ) == {'a': 'b', 'b': 'c', 'c': 'd', 'd': 'e'}, \"It should be ('a', 'b', 'c', 'd', 'e')\"\nassert         tuple_to_dict(('a', 'b', 'c', 'd', 'e', 'f') ) == {'a': 'b', 'b': 'c', 'c': 'd', 'd': 'e', 'e': 'f'}, \"It should be ('a', 'b', 'c', 'd', 'e', 'f')\"\nassert         tuple_to_dict(('a', 'b', 'c', 'd', 'e', 'f', 'g') ) == {'a': 'b', 'b': 'c', 'c': 'd', 'd': 'e', 'e': 'f', 'f': 'g'}, \"It should be ('a', 'b', 'c', 'd', 'e', 'f', 'g')\"\nassert         tuple_to_dict(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h') ) == {'a': 'b', 'b': 'c', 'c': 'd', 'd': 'e', 'e': 'f', 'f': 'g', 'g': 'h'}, \"It should be ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')\"\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tuple_to_dict((1,2,3)) == {1:2, 2:3, 3:1}\nassert tuple_to_dict((1,2,3)) == {1:2, 2:3, 3:1}\nassert tuple_to_dict((1,2,3,4)) == {1:2, 2:3, 3:1, 4:3}\nassert tuple_to_dict((1,2,3,4,5)) == {1:2, 2:3, 3:1, 4:3, 5:4}\nassert tuple_to_dict((1,2,3,4,5,6)) == {1:2, 2:3, 3:1, 4:3, 5:4, 6:5}\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tuple_to_dict(('a', 'b', 'c', 'd', 'e', 'f', 'g')) == {'a': 'b', 'b': 'c', 'c': 'd', 'd': 'e', 'e': 'f', 'f': 'g'}\nassert tuple_to_dict((1, 2, 3, 4, 5)) == {1: 2, 2: 3, 3: 4, 4: 5}\nassert tuple_to_dict((1,)) == {1: ''}\nassert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 2: 3, 3: 4, 4: 5, 5: 6}\nassert tuple_to_dict((1, 2, 3, 4, 5, 6, 7)) == {1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7}\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tuple_to_dict(('a', 'b', 'c', 'd')) == {'a': 'b', 'b': 'c', 'c': 'd'}, \\\n    \"The above tuple should map to a,b,c,d\"\nassert     tuple_to_dict(('a', 'b', 'c', 'd', 'e', 'f')) == {'a': 'b', 'b': 'c', 'c': 'd', 'd': 'e', 'e': 'f'}, \\\n    \"The above tuple should map to a,b,c,d,e,f\""
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     all_Characters_Same('abcabc') == False, 'Should be False'\nassert     all_Characters_Same('aabcbc') == True, 'Should be True'\nassert     all_Characters_Same('abcabcabc') == True, 'Should be True'\nassert     all_Characters_Same('abca') == False, 'Should be False'\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     all_Characters_Same('t') == True\nassert     all_Characters_Same('a') == False\nassert     all_Characters_Same('b') == True\nassert     all_Characters_Same('c') == True\nassert     all_Characters_Same('d') == True\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     all_Characters_Same('b') == False\nassert     all_Characters_Same('bb') == True\nassert     all_Characters_Same('b') == False\nassert     all_Characters_Same('bbb') == True\nassert     all_Characters_Same('bb') == False\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     all_Characters_Same('a') == True, \"Wrong\"\nassert     all_Characters_Same('aa') == False, \"Wrong\"\nassert     all_Characters_Same('aaa') == True, \"Wrong\"\nassert     all_Characters_Same('aaaa') == True, \"Wrong\"\nassert     all_Characters_Same('aaaaa') == True, \"Wrong\"\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nall_Characters_Same(\"AABCD\") == True\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     all_Characters_Same('hey') == True\nassert     all_Characters_Same('h') == False\nassert     all_Characters_Same('hello') == True\nassert     all_Characters_Same('hello world') == True\nassert     all_Characters_Same('hello') == False\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     all_Characters_Same('q')     ==    True\nassert     all_Characters_Same('qqqqq')     ==    False\nassert     all_Characters_Same('q')     ==    True\nassert     all_Characters_Same('a')     ==    True\nassert     all_Characters_Same('b')     ==    False\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     all_Characters_Same(\"aba\") == True, \"All characters are same, Should be True\"\nassert     all_Characters_Same(\"abca\") == False, \"All characters are not same, Should be False\"\nassert     all_Characters_Same(\"abca\") == False, \"All characters are not same, Should be False\"\nassert     all_Characters_Same(\"ab\") == False, \"All characters are not same, Should be False\"\nassert     all_Characters_Same(\"\") == True, \"Empty string, Should be True\"\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef volume_tetrahedron(side1, side2, side3):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    pass\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     area_tetrahedron(1) == 1/3\nassert     area_tetrahedron(2) == 1/3\nassert     area_tetrahedron(3) == 1/3\nassert     area_tetrahedron(4) == 1/3\nassert     area_tetrahedron(5) == 1/3\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     area_tetrahedron(1) == 1\nassert     area_tetrahedron(2) == 1/2\nassert     area_tetrahedron(3) == 1/3\n\n'''\nWrite a function to calculate the area of a cube.\n'''\ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    pass\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     area_tetrahedron([0.5,0.5,0.5])==1.4142135623730951\nassert     area_tetrahedron([0.5,-0.5,0.5])==1.4142135623730951\nassert     area_tetrahedron([-0.5,0.5,-0.5])==1.4142135623730951\nassert     area_tetrahedron([-0.5,-0.5,0.5])==1.4142135623730951\nassert     area_tetrahedron([0.5,-0.5,-0.5])==1.4142135623730951\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     area_tetrahedron(1) == 1, \"test 1 failed\"\nassert     area_tetrahedron(2) == 4, \"test 2 failed\"\nassert     area_tetrahedron(3) == 6, \"test 3 failed\"\nassert     area_tetrahedron(4) == 8, \"test 4 failed\"\nassert     area_tetrahedron(5) == 10, \"test 5 failed\"\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     area_tetrahedron(3) == 6\nassert     area_tetrahedron(2) == 4\nassert     area_tetrahedron(5) == 6\n\ndef area_square(side):\n    '''\n    Write a function to caluclate the area of a square.\n    '''\n    pass\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef volume_tetrahedron(area):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    pass\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef area_rectangle(length, breadth):\n    '''\n    Write a function to caluclate the area of a rectangle.\n    '''\n    pass\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    area_tetrahedron(1) == 0.5\n    area_tetrahedron(2) == 1.5\n    area_tetrahedron(3) == 2.5\n    area_tetrahedron(4) == 3.5\n    area_tetrahedron(5) == 4.5\n    area_tetrahedron(6) == 5.5\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef rotate_right_two(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    pass\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(rotate_right([1,2,3,4,5,6], 4)) # rotate_right([1,2,3,4,5,6], 4) should return [6, 5, 4, 3, 2, 1]\nprint(rotate_right([7,8,9,10,11,12], 6)) # rotate_right([7,8,9,10,11,12], 6) should return [12, 11, 10, 9, 8, 7]\nprint(rotate_right([1,2,3,4,5,6], 7)) # rotate_right([1,2,3,4,5,6], 7) should return [6, 5, 4, 3, 2, 1]\nprint(rotate_right([1,2,3,4,5,6], 0)) # rotate_right([1,2,3,4,5,6], 0) should return [1, 2, 3, 4, 5, 6]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nrotate_right([1,2,3,4,5,6], 2) == [3,4,5,6,1,2]\nrotate_right([1,2,3,4,5,6], 4) == [5,6,1,2,3,4]\nrotate_right([1,2,3,4,5,6], 6) == [2,3,4,5,6,1]\n\nrotate_right([1,2,3], 2) == [3,1,2]\nrotate_right([1,2,3], 4) == [2,3,1]\nrotate_right([1,2,3], 6) == [3,1,2]\n\nrotate_right([1], 1) == [1]\nrotate_right([1], 0) == [1]\nrotate_right([1], -1) == [1]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rotate_right([1,2,3,4], 2) == [3,4,1,2], 'wrong'\nassert     rotate_right([1,2,3,4], 0) == [1,2,3,4], 'wrong'\nassert     rotate_right([1,2,3,4], 3) == [4,1,2,3], 'wrong'\nassert     rotate_right([1,2,3,4,5], 3) == [5,1,2,3,4], 'wrong'\nassert     rotate_right([1,2,3,4], 6) == [4,1,2,3], 'wrong'\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     rotate_right([1,2,3,4,5], 1) == [5,1,2,3,4]\nassert     rotate_right([1,2,3,4,5], 2) == [3,4,1,2,5]\nassert     rotate_right([1,2,3,4,5], 3) == [4,5,1,2,3]\nassert     rotate_right([1,2,3,4,5], 4) == [2,3,4,5,1]\nassert     rotate_right([1,2,3,4,5], 5) == [3,4,5,1,2]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef find_smallest(list):\n    '''\n    Write a function to find the smallest item in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_none((\"y\",\"w\",\"\")), \"Please check your code\"\nassert     check_none((\"\",\"\",\"\")), \"Please check your code\"\nassert     check_none((\"\",\"\",\"\",\"\")), \"Please check your code\"\nassert     check_none((\"\",\"\",\"\",\"\",\"\")), \"Please check your code\"\nassert     check_none((\"\",\"\",\"\",\"\",\"\",\"\")), \"Please check your code\"\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_none((1,2,3,4,None)) == False\nassert    check_none((1,2,3,4)) == False\nassert    check_none((None,)) == True\n\n'''\nIn the above functions,\nwe need to note that the function does not return anything. However, it needs to print the True/False value. \nTherefore, we need to write a print function.\n'''\ndef check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for each in test_tup:\n        if each == None:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_none((\"Red\",\"Green\",\"None\",\"Blue\",\"None\",\"Yellow\")) == True,\\\n    \"Expected True, but got False\"\nassert     check_none((\"Red\",\"Green\",\"None\",\"Blue\",\"None\",\"None\")) == False,\\\n    \"Expected False, but got True\"\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_none(None)\nassert     check_none((0, 'A'))\nassert     check_none((None,))\nassert     check_none((None, 'B',))\nassert     check_none((0, 'A', None))\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_none((1, None, 2)) == True, 'function does not work'\nassert     check_none((1, None, None)) == False, 'function does not work'\nassert     check_none(None) == True, 'function does not work'\nassert     check_none((1, None)) == False, 'function does not work'\nassert     check_none(()) == True, 'function does not work'\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_none([1, None, 'a', 9, 2])\nassert     not check_none([1, 'b', 'a', 9, 2])\nassert     check_none([None, 'b', 'a', 9, 2])\n\n\n\n\ndef check_empty(test_tup):\n    '''\n    Write a function to check if the given tuple has any empty value or not.\n    '''\n    pass\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_none((1, 2, 'a', 4, 5, None)) == True, 'First tuple should be all nones!'\nassert     check_none((None, 2, 'a', 4, 5, None)) == False, 'Second tuple should be all nones!'\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_none(None) == True, \"None type is correct.\"\nassert check_none((None,)) == True, \"One None tuple is correct.\"\nassert check_none((None, 1, True, None)) == True, \"One None tuple is correct.\"\nassert check_none((None, 1, True, 2)) == False, \"Two None tuple is incorrect.\"\nassert check_none((None, None)) == False, \"Two None tuple is incorrect.\"\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     divisible_by_digits(20,100) == [\n    20,\n    55,\n    80,\n    100,\n    110,\n    111,\n    115,\n    120,\n    125,\n    130,\n    135,\n    140,\n    145,\n    150,\n    155,\n    160,\n    165,\n    170,\n    175,\n    180,\n    185,\n    190,\n    195,\n    200,\n    205,\n    210,\n    215,\n    220,\n    225,\n    230,\n    235,\n    240,\n    245,\n    250,\n    255,\n    260,\n    265,\n    270,\n    275,\n    280,\n    285,\n    290,\n    295,\n    300,\n    305,\n    310,\n    315,\n    320,\n    325,\n    330,\n    335,\n    340,\n    345,\n    350,\n    355,\n    360,\n    365,\n    370,\n    375,\n    380,\n    385,\n    390,\n    395,\n    400,\n    405,\n    410,\n    415,\n    420,\n    425,\n    430,\n    435,\n    440,\n    445,\n    450,\n    455,\n    460,\n    465,\n    470,\n    475,\n    480,\n    485,\n    490,\n    495,\n    500,\n    505,\n    510,\n    515,\n    520,\n    525,\n    530,\n    535,\n    540,\n    545,\n    550,\n    555,\n    560,\n    565,\n    570,\n    575,\n    580,\n    585,\n    590,\n    595,\n    600,\n    605,\n    610,\n    615,\n    620,\n    625,\n    630,\n    635,\n    640,\n    645,\n    650,\n    655,\n    660,\n    665,\n    670,\n    675,\n    680,\n    685,\n    690,\n    695,\n    700,\n    705,\n    710,\n    715,\n    720,\n    725,\n    730,\n    735,\n    740,\n    745,\n    750,\n    755,\n    760,\n    765,\n    770,\n    775,\n    780,\n    785,\n    790,\n    795,\n    800,\n    805,\n    810,\n    815,\n    820,\n    825,\n    830,\n    835,\n    840,\n    845,\n    850,\n    855,\n    860,\n    865,\n    890,\n    895,\n    900,\n    905,\n    910,\n    915,\n    920,\n    925,\n    930,\n    935,\n    940,\n    945,\n    950,\n    955,\n    960,\n    965,\n    970,\n    975,\n    980,\n    985,\n    990,\n    995,\n    1000,\n    1005,\n    1010,\n    1015,\n    1020,\n    1025,\n    1030,\n    1035,\n    1040,\n    1045,\n    1050,\n    1055,\n    1060,\n    1065,\n    1070,\n    1075,\n    1080,\n    1085,\n    1090,\n    1095,\n    1100,\n    1105,\n    1110,\n    1115,\n    1120,\n    1135,\n    1140,\n    1145,\n    1150,\n    1155,\n    1160,\n    1165,\n    1170,\n    1175,\n    1180,\n    1185,\n    1190,\n    1195,\n    1200,\n    1205,\n    1210,\n    1215,\n    1220,\n    1225,\n    1230,\n    1235,\n    1240,\n    1245,\n    1250,\n    1255,\n    1260,\n    1265,\n    1270,\n    1275,\n    1280,\n    1285,\n    1290,\n    1295,\n    1300,\n    1305,\n    1310,\n    1315,\n    1320,\n    1325,\n    1330,\n    1335,\n    1340,\n    1345,\n    1350,\n    1355,\n    1360,\n    1365,\n    1370,\n    1375,\n    1380,\n    1385,\n    1390,\n    1395,\n    1400,\n    1405,\n    1410,\n    1415,\n    1420,\n    1425,\n    1430,\n    1435,\n    1440,\n    1445,\n    1450,\n    1455,\n    1460,\n    1465,\n    1470,\n    1475,\n    1480,\n    1485,\n    1490,\n    1495,\n    1500,\n    1505,\n    1510,\n    1515,\n    1520,\n    1525,\n    1530,\n    1535,\n    1540,\n    1545,\n    1550,\n    1555,\n    1560,\n    1565,\n    1570,\n    1575,\n    1580,\n    1585,\n    1590,\n    1595,\n    1600,\n    1605,\n    1610,\n    1615,\n    1620,\n    1625,\n    1630,\n    1635,\n    1640,\n    1645,\n    1650,\n    1655,\n    1660,\n    1665,\n    1670,\n    1675,\n    1680,\n    1685,\n    1690,\n    1695,\n    1700,\n    1705,\n    1710,\n    1715,\n    1720,\n    1725,\n    1730,\n    1735,\n    1740,\n    1745,\n    1750,\n    1755,\n    1760,\n    1765,\n    1770,\n    1775,\n    1780,\n    1785,\n    1790,\n    1795,\n    1800,\n    1805,\n    1810,\n    1815,\n    1820,\n    1825,\n    1830,\n    1835,\n    1840,\n    1845,\n    1850,\n    1855,\n    1860,\n    1865,\n    1870,\n    1875,\n    1880,\n    1885,\n    1890,\n    1895,\n    1900,\n    1905,\n    1910,\n    1915,\n    1920,\n    1925,\n    1930,\n    1935,\n    1940,\n    1945,\n    1950,\n    1955,\n    1960,\n    1965,\n    1970,\n    1975,\n    1980,\n    1985,\n    1990,\n    1995,\n    2000,\n    2005,\n    2010,\n    2015,\n    2020,\n    2025,\n    2030,\n    2035,\n    2040,\n    2045,\n    2050,\n    2055,\n    2060,\n    2065,\n    2070,\n    2075,\n    2080,\n    2085,\n    2090,\n    2095,\n    2100,\n    2105,\n    2110,\n    2115,\n    2120,\n    2125,\n    2140,\n    2145,\n    2150,\n    2155,\n    2160,\n    2165,\n    2170,\n    2175,\n    2180,\n    2185,\n    2190,\n    2195,\n    2200,\n    2205,\n    2210,\n    2215,\n    2220,\n    2225,\n    2230,\n    2235,\n    2240,\n    224"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     divisible_by_digits(0, 9) == ['0', '1', '2', '3', '4', '5', '6', '7', '8']\nassert     divisible_by_digits(0, 10) == ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\nassert     divisible_by_digits(1, 9) == ['1', '2', '3', '4', '5', '6', '7', '8', '9']\nassert     divisible_by_digits(1, 10) == ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0']\nassert     divisible_by_digits(2, 9) == ['2', '3', '4', '5', '6', '7', '8', '9']\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     divisible_by_digits(1,10) == list(range(1,10)), \"incorrect\"\nassert     divisible_by_digits(11,20) == list(range(11,20)), \"incorrect\"\nassert     divisible_by_digits(12,21) == [], \"incorrect\"\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ndivisible_by_digits(1,10) == \n[2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98]\n\ndef divisible_by_digits2(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     divisible_by_digits(500,600) == False, \"Fail - correct\"\nassert     divisible_by_digits(500,500) == True, \"Fail - correct\"\nassert     divisible_by_digits(1000,1500) == False, \"Fail - correct\"\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     divisible_by_digits(1,10) == [1,2,3,4,5,6,7,8,9]\nassert     divisible_by_digits(1000,2000) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nassert     divisible_by_digits(1,1) == []\nassert     divisible_by_digits(1000,1000) == []\nassert     divisible_by_digits(1,1) == []\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     divisible_by_digits(1,10) == '\\n1 is divisible by 0'\nassert     divisible_by_digits(1,100) == '\\n1 is divisible by 0, 1, 10'\nassert     divisible_by_digits(1,1000) == '\\n1 is divisible by 0, 1, 10, 100'\nassert     divisible_by_digits(1,10000) == '\\n1 is divisible by 0, 1, 10, 100, 1000'\nassert     divisible_by_digits(1,100000) == '\\n1 is divisible by 0, 1, 10, 100, 100, 100, 100'\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sector_area(1,360) == math.pi*1**2, 'incorrect area'\nassert sector_area(1,180) == math.pi*1**2, 'incorrect area'\nassert sector_area(1,90) == 0, 'incorrect area'\nassert sector_area(1,0) == 0, 'incorrect area'\nassert sector_area(2,360) == 0, 'incorrect area'\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nsector_area(r=1,a=1) == 1\nsector_area(r=3,a=0) == 3\nsector_area(r=3,a=90) == 12\nsector_area(r=3,a=180) == 9\nsector_area(r=3,a=270) == 6\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sector_area(0.5,0) == None, \"Wrong Output\"\nassert sector_area(0.5,0.1) == None, \"Wrong Output\"\nassert sector_area(0.5,0.9) == None, \"Wrong Output\"\nassert sector_area(1.5,0) == None, \"Wrong Output\"\nassert sector_area(1.5,0.1) == None, \"Wrong Output\"\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sector_area(1,360) == None, '1, 360 degrees are incorrect'\nassert sector_area(1,1) == 0, '0 degrees are incorrect'\nassert sector_area(1,360) == None, '360 degrees is incorrect'\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sector_area(1, 45) == math.pi*1**2/4\nassert     sector_area(1, 0) == None\nassert     sector_area(0.5, 45) == None\nassert     sector_area(1, -45) == None\n\ndef three_point_circle(x1,y1,x2,y2,x3,y3):\n    '''\n    Write a function that returns true if the triangle formed by (x1,y1), (x2,y2), (x3,y3) can be constructed with three points on the plane and false otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sector_area(5,45) == math.pi * (5 ** 2) / 4\nassert sector_area(5,0) == None\nassert sector_area(5,360) == None\nassert sector_area(5,25) == 0.785398163397448\nassert sector_area(5,350) == None\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(\"Radius of sector should be less than 1.5\")\nassert sector_area(0.5,360) == None\nprint(\"Radius of sector should be less than 1.5\")\nassert sector_area(1.5,360) == 0.5\nprint(\"Radius of sector should be less than 1.5\")\nassert sector_area(1.5,0) == 0\nprint(\"Radius of sector should be less than 1.5\")\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    sector_area(2,45)==0.6731124106493134\n    sector_area(2,0)==0.0\n    sector_area(2,360)==None\n    sector_area(3,90)==0.41666666665\n    sector_area(3,180)==0.6731124106493134\n    sector_area(3,360)==0.0\n    sector_area(0.4,0)==0.0\n    sector_area(0.1,90)==0.0\n    sector_area(0.1,180)==None\n    sector_area(0.1,360)==0.0\n    sector_area(0.3,0)==0.0\n    sector_area(0.3,360)==None\n    sector_area(0.7,0)==0.0\n    sector_area(0.7,360)==None\n    sector_area(0.9,0)==None\n    sector_area(0.9,360)==0.0\n    sector_area(1,0)==None\n    sector_area(1,360)==0.0\n    sector_area(1.1,0)==None\n    sector_area(1.1,360)==None\n    sector_area(1.2,0)==None\n    sector_area(1.2,360)==0.0\n    sector_area(1.3,0)==None\n    sector_area(1.3,360)==None\n    sector_area(1.4,0)==None\n    sector_area(1.4,360)==0.0\n    sector_area(1.5,0)==None\n    sector_area(1.5,360)==0.0\n    sector_area(1.6,0)==None\n    sector_area(1.6,360)==0.0\n    sector_area(1.7,0)==None\n    sector_area(1.7,360)==None\n    sector_area(1.8,0)==None\n    sector_area(1.8,360)==0.0\n    sector_area(1.9,0)==None\n    sector_area(1.9,360)==0.0\n    sector_area(2,0)==None\n    sector_area(2,360)==0.0\n    sector_area(2.1,0)==None\n    sector_area(2.1,360)==None\n    sector_area(2.2,0)==None\n    sector_area(2.2,360)==0.0\n    sector_area(2.3,0)==None\n    sector_area(2.3,360)==None\n    sector_area(2.4,0)==None\n    sector_area(2.4,360)==0.0\n    sector_area(2.5,0)==None\n    sector_area(2.5,360)==None\n    sector_area(2.6,0)==None\n    sector_area(2.6,360)==0.0\n    sector_area(2.7,0)==None\n    sector_area(2.7,360)==None\n    sector_area(2.8,0)==None\n    sector_area(2.8,360)==None\n    sector_area(2.9,0)==None\n    sector_area(2.9,360)==None\n    sector_area(3,0)==None\n    sector_area(3,360)==0.0\n    sector_area(3.1,0)==None\n    sector_area(3.1,360)==None\n    sector_area(3.2,0)==None\n    sector_area(3.2,360)==None\n    sector_area(3.3,0)==None\n    sector_area(3.3,360)==None\n    sector_area(3.4,0)==None\n    sector_area(3.4,360)==None\n    sector_area(3.5,0)==None\n    sector_area(3.5,360)==None\n    sector_area(3.6,0)==None\n    sector_area(3.6,360)==None\n    sector_area(3.7,0)==None\n    sector_area(3.7,360)==None\n    sector_area(3.8,0)==None\n    sector_area(3.8,360)==None\n    sector_area(3.9,0)==None\n    sector_area(3.9,360)==None\n    sector_area(4,0)==None\n    sector_area(4,360)==0.0\n    sector_area(4.1,0)==None\n    sector_area(4.1,360)==None\n    sector_area(4.2,0)==None\n    sector_area(4.2,360)==None\n    sector_area(4.3,0)==None\n    sector_area(4.3,360)==None\n    sector_area(4.4,0)==None\n    sector_area(4.4,360)==None\n    sector_area(4.5,0)==None\n    sector_area(4.5,360)==None\n    sector_area(4.6,0)==None\n    sector_area(4.6,360)==None\n    sector_area(4.7,0)==None\n    sector_area(4.7,360)==None\n    sector_area(4.8,0)==None\n    sector_area(4.8,360)==None\n    sector_area(4.9,0)==None\n    sector_area(4.9,360)==None\n    sector_area(5,0)==None\n    sector_area(5,360)==0.0\n    sector_area(5.1,0)==None\n    sector_area(5.1,360)==None\n    sector_area(5.2,0)==None\n    sector_area(5.2,360)==None\n    sector_area(5.3,0)==None\n    sector_area(5.3,360)==None\n    sector_area(5.4,0)==None\n    sector_area(5.4,360)==None\n    sector_area(5.5,0)==None\n    sector_area(5.5,360)==None\n    sector_area(5.6,0)==None\n    sector_area(5.6,360)==None\n    sector_area(5.7,0)==None\n    sector_area(5.7,360)==None\n    sector_area(5.8,0)==None\n    sector_area(5.8,360)==None\n    sector_area(5.9,0)==None\n    sector_area(5.9,360)==None\n    sector_area(6,0)==None\n    sector_area(6,360)==0.0\n    sector_area(6.1,0)==None\n    sector_area(6.1,360)==None\n    sector_area(6.2,0)==None\n    sector_area(6.2,360)==None\n    sector_area(6.3,0)==None\n    sector_area(6.3,360)==None\n    sector_area(6.4,0)==None\n    sector_area(6.4,360)==None\n    sector_area(6.5,0)==None\n    sector_area(6.5,360)==None\n    sector_area(6.6,0)==None\n    sector_area(6.6,360)==None\n    sector_area(6.7,0)==None\n    sector_area(6.7,360)==None\n    sector_area(6.8,0)==None\n    sector_area(6.8,360)==None\n    sector_area(6.9,0)==None\n    sector_area(6.9,360)==None\n    sector_area(7,0)==None\n    sector_area(7,360)==0.0\n    sector_area(7.1,0)==None\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(\"Correct\")\nsector_area(1.3,15) # 5.285714285714286\nsector_area(2.3,45) # None\nsector_area(2.3,90) # None\nsector_area(1.3,360) # None\n\n'''\nWrite a function to find area of a circle. Function takes the radius as input. Function should return None if the radius is equal to or less than 0.\n\n'''\ndef circle_area(r):\n    '''\n    Write a function to find area of a circle. Function takes the radius as input. Function should return None if the radius is equal to or less than 0.\n    '''\n    pass\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     lcs_of_three('aaaaa', 'aaaaa', 'aaaaa') == 4, \"Error in lcs_of_three().\"\nassert     lcs_of_three('aaaaa', 'aaaaa', 'bbbb') == 4, \"Error in lcs_of_three().\"\nassert     lcs_of_three('aaaaa', 'aaaaa', 'aaaa') == 3, \"Error in lcs_of_three().\"\nassert     lcs_of_three('aaaaa', 'aaaaa', 'bb') == 3, \"Error in lcs_of_three().\"\nassert     lcs_of_three('aaaaa', 'aaaaa', 'a') == 2, \"Error in lcs_of_three().\"\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nX = \"AGGTAB\"\nY = \"GXTXAYB\"\nZ = \"TXXXGTB\"\n\nprint(\"X: {}, Y: {}, Z: {}\".format(X, Y, Z))\nprint(\"Longest Common Subsequence of X and Y is:\", lcs_of_three(X, Y, Z)"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nassert lcs_of_three('abc','abc','abc') == 3\nassert lcs_of_three('abc','abc','bcd') == 2\nassert lcs_of_three('abc','bcd','abc') == 1\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     lcs_of_three(\"abc\", \"abc\", \"abc\") == \"abc\", \"incorrect output\"\nassert lcs_of_three(\"abc\", \"abc\", \"bbc\") == \"\", \"incorrect output\"\nassert lcs_of_three(\"abc\", \"acb\", \"abc\") == \"\", \"incorrect output\"\n\nprint(\"You passed all the tests\")"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     lcs_of_three('abc', 'ac', 'ab') == 'c'\nassert     lcs_of_three('abc', 'ac', 'cb') == 'b'\nassert     lcs_of_three('abc', 'ac', 'c') == 'c'\nassert     lcs_of_three('abc', 'c', 'b') == 'b'\nassert     lcs_of_three('abc', 'c', 'a') == 'a'\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n'''\nA Dynamic Programming based function to find longest common sequence\na, b, c where a, b and c are sub sequences\n'''\ndef lcs(a, b, c):\n    '''\n    Write a function to find the longest common subsequence of three strings. \n    If there is no common subsequence then return -1.\n    '''\n    pass\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     lcs_of_three('akca','akcc','abc') == 'akcc', 'incorrect'\nassert     lcs_of_three('akca','akcc','abcd') == 'akcc', 'incorrect'\nassert     lcs_of_three('akca','akcc','abcdab') == 'akcc', 'incorrect'\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    pass\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nX, Y, Z = 'ABCBDAB', 'BDCABA', 'BDCABA'\nassert(lcs_of_three(X, Y, Z) == 5)\nX, Y, Z = 'ABCBDAB', 'BDCABA', 'BCDABA'\nassert(lcs_of_three(X, Y, Z) == 2)\nX, Y, Z = 'ABCBDAB', 'BDCABA', 'BDDABA'\nassert(lcs_of_three(X, Y, Z) == 1)\nX, Y, Z = 'ABCD', 'AB', 'BACD'\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     capital_words_spaces('How are you?') == 'How are you?', \"Wrong\"\nassert     capital_words_spaces('How are you, hello') == 'How are you, hello', \"Wrong\"\nassert     capital_words_spaces('How are you, my name is John Doe') == 'How are you, my name is John Doe', \"Wrong\"\nassert     capital_words_spaces('How are you, John Doe') == 'How are you, John Doe', \"Wrong\"\nassert     capital_words_spaces('How are you, I am John Doe') == 'How are you, I am John Doe', \"Wrong\"\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     capital_words_spaces('Python is a good language') == 'Python is a good language'\nassert capital_words_spaces('    Python is a good language') == 'Python is a good language'\nassert capital_words_spaces('Python         is    a    good    language') == 'Python         is    a    good    language'\nassert capital_words_spaces('Python   is a good  language') == 'Python   is a good  language'\nassert capital_words_spaces('Python     is     a     good     language') == 'Python     is     a     good     language'\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert capital_words_spaces('') == ''\nassert capital_words_spaces(' ') ==''\nassert capital_words_spaces('Hello world') == 'Hello world'\nassert capital_words_spaces(' ') ==' '\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     capital_words_spaces(\"this is a  s t h i s\") == \"this is a  s t h i s\"\nassert     capital_words_spaces(\"This is  a S t h i s\") == \"This is  a S t h i s\"\nassert     capital_words_spaces(\"ThIs Is A S t h i s\") == \"ThIs Is A S t h i s\"\nassert     capital_words_spaces(\"This Is A S t h i s\") == \"This Is A S t h i s\"\nassert     capital_words_spaces(\"this is a  s t h i s\") == \"this is a  s t h i s\"\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     capital_words_spaces('Hi') == 'Hi'\nassert     capital_words_spaces('Hi     ') == 'Hi     '\nassert     capital_words_spaces('Hi  Hi') == 'Hi  Hi'\nassert     capital_words_spaces('  Hi   Hi') ==' Hi   Hi'\nassert     capital_words_spaces('  Hi   Hi  ') ==' Hi   Hi  '\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     capital_words_spaces(\"Pythons aren't as awesome as tcl scripts.\") == \"Pythons aren't as awesome as tcl scripts.\"\nassert     capital_words_spaces(\"I love to eat sushi and pizza.\") == \"I love to eat sushi and pizza.\"\nassert     capital_words_spaces(\"I ate a lot of carbs.\") == \"I ate a lot of carbs.\"\nassert     capital_words_spaces(\"This is a Sentence.\") == \"This is a Sentence.\"\nassert     capital_words_spaces(\"This isn't a Sentence.\") == \"This isn't a Sentence.\"\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     capital_words_spaces('This is a short text') == 'This is a short text'\nassert capital_words_spaces('This is a short text with space') == 'This is a short text with space'\nassert capital_words_spaces('This is a short text with space and some more text') == 'This is a short text with space and some more text'\nassert capital_words_spaces('A quick brown fox jumps over the lazy dog') == 'A quick brown fox jumps over the lazy dog'\nassert capital_words_spaces('the quick brown fox jumps over the lazy dog') == 'The quick brown fox jumps over the lazy dog'\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     capital_words_spaces('thisshouldbeCapital') == 'this should be capital'\nassert     capital_words_spaces('ThsIsShouldBeCAPtal') == 'Ths Is Should Be Capital'\nassert     capital_words_spaces('THisShouldBeCAPtal') == 'This Should Be Capital'\nassert     capital_words_spaces('shouldbeCAPtal') =='should be CAPtal'\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     capital_words_spaces('this is a string') == 'this is a string', \"Error!\"\nassert     capital_words_spaces('ThisIsASTRING') == 'ThisIsA STRING', \"Error!\"\nassert     capital_words_spaces('this is a string') == 'this is a string', \"Error!\"\n\ndef no_initial_capital_letters(str1):\n    '''\n    Write a function to remove all capital letters at the beginning of a string.\n    '''\n    pass\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(\"Problem 3: \", capital_words_spaces(\"this is a string\")) # expect True\nprint(\"Problem 4: \", capital_words_spaces(\"tHis Is A String\")) # expect True\nprint(\"Problem 5: \", capital_words_spaces(\"this is a test\")) # expect False\nprint(\"Problem 6: \", capital_words_spaces(\"This is A test\")) # expect True\n\n\ndef solve_quiz(str1):\n    '''\n    Write a function which will solve a student's quiz.\n    '''\n    pass\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_numeric_strings([\"1\", \"10\", \"100\", \"1000\"]) ==     [\"1\", \"10\", \"100\", \"1000\"]\nassert     sort_numeric_strings([\"a\", \"10\", \"100\", \"1000\"]) ==     [\"a\", \"10\", \"100\", \"1000\"]\nassert     sort_numeric_strings([\"10\", \"1\", \"100\", \"1000\"]) ==     [\"1\", \"10\", \"100\", \"1000\"]\nassert     sort_numeric_strings([\"10\", \"1\", \"100\", \"100\"]) ==     [\"1\", \"10\", \"100\", \"100\"]\nassert     sort_numeric_strings([\"10\", \"10\", \"100\", \"100\"]) ==     [\"10\", \"10\", \"100\", \"100\"]\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nsort_numeric_strings(['abc', '12', 'a', '3']) == ['a', 'abc', '3', '12']\nassert sort_numeric_strings(['12', 'abc', 'a', '3']) == ['a', '3', 'abc', '12']\nassert sort_numeric_strings(['abc', '1', 'a', '3']) == ['a', '3', 'abc', '1']\nassert sort_numeric_strings(['12', 'abc', 'a', '3']) == ['abc', 'a', '3', '12']\nassert sort_numeric_strings(['abc', 'a', '2', 'a']) == ['a', '2', 'abc', 'a']\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_numeric_strings([\"23\", \"34\", \"34\", \"1\", \"1\"]) == [\"1\", \"1\", \"1\", \"23\", \"34\"]\nassert     sort_numeric_strings([\"23\", \"34\", \"34\", \"1\", \"1\"]) == [\"1\", \"1\", \"34\", \"23\", \"34\"]\nassert     sort_numeric_strings([\"12\", \"33\", \"0\"]) == [\"0\", \"12\", \"33\"]\nassert     sort_numeric_strings([\"1\", \"2\", \"3\", \"4\"]) == [\"1\", \"2\", \"3\", \"4\"]\nassert     sort_numeric_strings([\"12\", \"0\", \"34\", \"22\", \"1\", \"2\"]) == [\"1\", \"12\", \"12\", \"0\", \"22\", \"34\"]\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_numeric_strings(['27', '75', '7', '3', '23']) == ['3', '7', '27', '23', '75']\nassert     sort_numeric_strings(['27', '75', '7', '3', '2']) == ['2', '3', '7', '27', '75']\nassert     sort_numeric_strings(['27', '75', '7', '3', '1']) == ['1', '3', '7', '27', '75']\nassert     sort_numeric_strings(['27', '75', '7', '3', '5']) == ['3', '5', '7', '27', '75']\nassert     sort_numeric_strings(['27', '75', '7', '2', '1']) == ['1', '2', '3', '7', '27']\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_numeric_strings([\"20.9\",\"10.3\"]) == [\"10.3\",\"20.9\"]\nassert     sort_numeric_strings([\"20.9\",\"10.3\",\"-30.32\"]) == [\"-30.32\",\"10.3\",\"20.9\"]\nassert     sort_numeric_strings([\"20.9\",\"10.3\",\"-30.32\",\"-1.0\"]) == [\"-30.32\",\"-1.0\",\"10.3\",\"20.9\"]\n\n\n'''\nProblem 3: Write a program to reverse a string and return the reversed string.\n'''\n\ndef reverse_string(str1):\n    '''\n    Write a function to reverse a given string in Python.\n    '''\n    pass\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_numeric_strings(['1', '1', '1.5', '1.5', '2', '2', '3.2', '4.2']) == ['1', '1.5', '1.5', '2', '2', '3.2', '4.2', '1', '1.5'], 'incorrect'\nassert     sort_numeric_strings(['1', '1.5', '1.5', '2', '2', '3.2', '4.2', '1']) == ['1', '1.5', '1.5', '2', '2', '3.2', '4.2', '1'], 'incorrect'\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_numeric_strings([\"1\", \"4\", \"3\", \"2\"]) == [\"1\", \"2\", \"3\", \"4\"]\nassert     sort_numeric_strings([\"24\", \"12\", \"34\", \"56\"]) == [\"12\", \"24\", \"34\", \"56\"]\nassert     sort_numeric_strings([\"-2\", \"32\", \"-6\", \"87\", \"6\", \"34\", \"3\"]) == [\"-6\", \"-2\", \"3\", \"34\", \"6\", \"87\", \"32\"]\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_numeric_strings(['1','2','3']) == ['1','2','3']\nassert     sort_numeric_strings(['11','22','33','44']) == ['11','22','33','44']\nassert     sort_numeric_strings(['1','2','3','4']) == ['1','2','3','4']\nassert     sort_numeric_strings(['1','2','3','4']) == ['1','2','3','4']\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     add_tuple([1, 2, 3], (4, 5)) == [1, 2, 3, (4, 5)]\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add_tuple([1,2,3],(4,5,6)) == (1,2,3,4,5,6)\nassert     add_tuple([],(1,2,3)) == (1,2,3)\nassert     add_tuple([1],(2,3,4)) == (1,2,3,4)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add_tuple([1,2,3],(1,2,3)) == (1,2,3,1,2,3)\nassert     add_tuple([1,2,3],(4,5,6)) == (1,2,3,4,5,6)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add_tuple([(1,2), (4,5)], (10,11)) == [(1,2), (4,5), (10,11)]\nprint('The function add_tuple is correct')\n\n\ndef add_tuple_to_list(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    pass\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef merge_lists(test_list1, test_list2):\n    '''\n    Write a function to merge the given lists.\n    '''\n    pass\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     add_tuple([1,2,3], (4,5,6)) == (1,2,3,4,5,6)\nassert     add_tuple([(1,2), (3,4), (5,6)], (7,8,9)) == [(1,2,7), (3,4,8), (5,6,9)]\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert add_tuple([1,2,3], (2,3,4)) == (1,2,3,4)\nassert add_tuple([1,2,3], (4,5,6)) == (1,2,3,4,5,6)\nassert add_tuple([], (2,3,4)) == (2,3,4)\nassert add_tuple([], (4,5,6)) == (4,5,6)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef add_list_to_list(test_list, test_list2):\n    '''\n    Write a function that adds the given list to the given list.\n    '''\n    pass\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef remove_tuple(test_list, test_tup):\n    '''\n    Write a function to remove the given tuple from the given list.\n    '''\n    pass\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add_tuple([1, 2, 3], (4, 5, 6)) == (1, 2, 3, 4, 5, 6)\nassert add_tuple([], (4, 5, 6)) == (4, 5, 6)\n\n\ndef add_tuple_2(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    The result should be a list, even if there are no other values in the list.\n    '''\n    pass\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nclass Solution(object):\n    def isHeap(self, arr):\n        '''\n        Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n        '''\n        for i in range(len(arr)):\n            if i == len(arr) - 1:\n                continue\n            if arr[i] > arr[i+1]:\n                return False\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_min_heap_helper([4, 6, 2, 5, 1, 8], 2) == True, \"The array is not min heap\"\nassert     check_min_heap_helper([1, 2, 4, 8, 6, 5, 3], 5) == False, \"The array is min heap\"\nassert     check_min_heap_helper([1, 2, 4, 8, 6, 5, 3], 4) == False, \"The array is min heap\"\nassert     check_min_heap_helper([1, 2, 4, 8, 6, 5, 3], 6) == True, \"The array is min heap\"\nassert     check_min_heap_helper([1, 2, 4, 8, 6, 5, 3], 3) == True, \"The array is min heap\"\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    "
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    pass\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_min_heap([]) == True, \"Not a heap\"\nassert check_min_heap([1,2,3,4,5,6]) == True, \"Not a heap\"\nassert check_min_heap([1,2,3,4,5,6,7]) == True, \"Not a heap\"\nassert check_min_heap([1,2,3,4,5,6,7,8,9]) == False, \"Not a heap\"\nassert check_min_heap([1,2,3,4,5,6,7,8,9,10]) == False, \"Not a heap\"\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef check_min_heap(arr):\n    return check_min_heap_helper(arr, 0)\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_min_heap_helper([5, 1, 4, 2, 3], 5)\nassert     not check_min_heap_helper([1, 2], 1)\nassert     not check_min_heap_helper([4, 1], 1)\nassert     check_min_heap_helper([1, 4, 3, 2], 4)\nassert     check_min_heap_helper([3, 2, 1], 3)\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_min_heap_helper([], 0) == False\nassert     check_min_heap_helper([1], 0) == False\nassert     check_min_heap_helper([1,1], 0) == True\nassert     check_min_heap_helper([1, 2, 3], 0) == True\nassert     check_min_heap_helper([1, 2, 3, 4], 0) == True\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not.\n    '''\n    pass\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef check_min_heap(arr):\n    '''\n    Given an array arr, which represents an array of integers and an integer n. The task is to check if the array represents a min heap or not.\n    \n    Examples:\n    Input : arr[] = {1, 2, 3, 4, 5};\n            n = 3\n    Output: true\n    Explanation:  The array represents a min heap.\n    \n    Input : arr[] = {3, 2, 1, 0};\n            n = 3\n    Output: false\n    Explanation:  The array doesn't represent a min heap.\n    \n    '''\n    return True\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     jacobsthal_num(0) == 1\nassert     jacobsthal_num(1) == 1\nassert     jacobsthal_num(2) == 2\nassert     jacobsthal_num(3) == 4\nassert     jacobsthal_num(4) == 7\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     jacobsthal_num(2)    == 0\nassert     jacobsthal_num(4)    == 1\nassert     jacobsthal_num(6)    == 1\nassert     jacobsthal_num(8)    == 3\nassert     jacobsthal_num(10)    == 5\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     jacobsthal_num(0) == 0\nassert     jacobsthal_num(1) == 1\nassert     jacobsthal_num(2) == 1\nassert     jacobsthal_num(3) == 1\nassert     jacobsthal_num(4) == 2\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     jacobsthal_num(n=0) == 0\nassert     jacobsthal_num(n=1) == 1\nassert     jacobsthal_num(n=2) == 3\nassert     jacobsthal_num(n=3) == 5\nassert     jacobsthal_num(n=4) == 11\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     jacobsthal_num(5) == 19, \"jacobsthal_num(5) == 19\"\nassert     jacobsthal_num(10) == 32, \"jacobsthal_num(10) == 32\"\nassert     jacobsthal_num(100) == 4940, \"jacobsthal_num(100) == 4940\"\nassert     jacobsthal_num(100) == 4940, \"jacobsthal_num(100) == 4940\"\nassert     jacobsthal_num(1000) == 4991168, \"jacobsthal_num(1000) == 4991168\"\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    # Solution using recursion\n    # return jacobsthal_num_recursive(n, 0, 1)\n    \n    # Solution using base case\n    # if n == 0: \n    #     return 0\n    # else: \n    #     return jacobsthal_num(n - 1) + jacobsthal_num(n - 2)\n    \n    # Solution using iteration\n    # a = 0\n    # b = 1\n    # c = 0\n    # for i in range(n):\n    #     c = a + b\n    #     a = b\n    #     b = c\n    # return c\n    \n    # Solution using memorization\n    return helper(n, {0:0, 1:1, 2:2})\n\n\ndef helper(n, memo): \n    if n in memo: \n        return memo[n]\n    else: \n        return helper(n-1, memo) + helper(n-2, memo)\n        \ndef jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0: \n        return 0\n    if n == 1 or n == 2: \n        return 1\n    else: \n        return jacobsthal_num(n - 1) + jacobsthal_num(n - 2)\n        \n        \ndef jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0: \n        return 0\n    if n == 1 or n == 2: \n        return 1\n    else: \n        return jacobsthal_num(n - 1) + jacobsthal_num(n - 2)\n        \n        \ndef jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0: \n        return 0\n    if n == 1 or n == 2: \n        return 1\n    else: \n        return jacobsthal_num(n - 1) + jacobsthal_num(n - 2)\n        \n        \ndef jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0: \n        return 0\n    if n == 1 or n == 2: \n        return 1\n    else: \n        return jacobsthal_num(n - 1) + jacobsthal_num(n - 2)\n        \n        \ndef jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0: \n        return 0\n    if n == 1 or n == 2: \n        return 1\n    else: \n        return jacobsthal_num(n - 1) + jacobsthal_num(n - 2)\n        \n        \ndef jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0: \n        return 0\n    if n == 1 or n == 2: \n        return 1\n    else: \n        return jacobsthal_num(n - 1) + jacobsthal_num(n - 2)\n        \n        \ndef jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0: \n        return 0\n    if n == 1 or n == 2: \n        return 1\n    else: \n        return jacobsthal_num(n - 1) + jacobsthal_num(n - 2)\n        \n        \ndef jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0: \n        return 0\n    if n == 1 or n == 2: \n        return 1\n    else: \n        return jacobsthal_num(n - 1) + jacobsthal_num(n - 2)\n        \n        \ndef jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n == 0: \n        return 0\n    if n == 1 or n == 2: \n        return 1\n    else: \n        return jacobsthal_num(n - 1) + jacobsthal_num(n - 2)\n        \n        \ndef jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    if n ="
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     jacobsthal_num(0) == 0\nassert     jacobsthal_num(1) == 1\nassert     jacobsthal_num(2) == 1\nassert     jacobsthal_num(3) == 1\nassert     jacobsthal_num(4) == 1\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n'''\n    DFS => Depth first search\n    BFS => Breadth first search\n'''\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n'''\nQ.4) Write a function to find the maximum k records from tuple list\n'''"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     min_k([(1, 2), (3, 4), (5, 6), (7, 8)], 3) == (1, 2, 3)\nassert     min_k([(1, 2), (3, 4), (5, 6), (7, 8)], 2) == (1, 2)\nassert     min_k([(1, 2), (3, 4), (5, 6), (7, 8)], 1) == (1, 2)\nassert     min_k([(1, 2), (3, 4), (5, 6), (7, 8)], 0) == (1, 2, 3, 4, 5, 6, 7, 8)\nassert     min_k([], 1) == []\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert min_k([('A',1,4), ('B',2,5), ('C',3,6)], 1) == ('A',1,4)\nassert min_k([('A',1,4), ('B',2,5), ('C',3,6)], 2) == ('B',2,5)\nassert min_k([('A',1,4), ('B',2,5), ('C',3,6)], 3) == ('C',3,6)\nassert min_k([('A',1,4), ('B',2,5), ('C',3,6)], 4) == ('C',3,6)\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n'''\nExplanation:\nthe input list is:\n(8, 'a', 'b', 'c', 'd', 'e', 'f')\n\nThe length of list is 8\n\nThe length of each element is 5\n\nThe min_k function should return ['a', 'b', 'c', 'd']\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint(min_k([(1,1), (2,2), (1,1), (3,3), (2,2)], 3))\nassert \nprint(min_k([(1,1), (2,2), (1,1), (3,3), (2,2)], 4))\nassert \nprint(min_k([(1,1), (2,2), (1,1), (3,3), (2,2)], 5))\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert min_k([(2,3), (3,4), (1,2), (4,5)], 3) == (1,2)\nassert min_k([(2,3), (3,4), (1,2), (4,5)], 2) == (2,3)\nassert min_k([(2,3), (3,4), (1,2), (4,5)], 5) == (2,3)\nassert min_k([(2,3), (3,4), (1,2), (4,5)], 4) == (3,4)\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_index_list([1, 2, 3, 4], [2, 3, 4, 5], [1, 2, 3, 4, 5]) == [1, 3]\nassert     extract_index_list([1, 2, 3, 4], [2, 3, 4, 5], [1, 2, 3, 5]) == []\nassert     extract_index_list([1, 2, 3, 4], [2, 3, 4, 5], [1, 2, 3, 4, 5]) == [1]\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_index_list([1,2,3], [2,3,4], [3,4,5]) == [1,2]\nassert     extract_index_list([1,2,3], [2,3,4], [1,3]) == []\nassert     extract_index_list([1,2,3], [2,3,4], [2,3]) == [2,3]\nassert     extract_index_list([1,2,3], [2,3,4], [2,2]) == []\nassert     extract_index_list([1,2,3], [2,3,4], [1,2,3]) == [1,2]\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_index_list([1, 2, 3], [3, 2, 1], [2, 1, 3]) == [1, 2]\nassert     extract_index_list([1, 2, 3], [3, 2, 1], [1, 2, 3]) == [3]\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert extract_index_list([1,2,3,4], [1,2,3,4], [5,6,7,8]) == [1, 2, 3]\nassert extract_index_list([1,2,3,4], [1,2,3,4], [5,6,7,8,9]) == []\nassert extract_index_list([1,2,3,4], [2,3,4], [3,4,5]) == [2, 3]\nassert extract_index_list([1,2,3,4], [2,3,4], [3,4,5]) == []\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert extract_index_list([0, 1, 2, 3, 4], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4]) == [0, 1, 2]\nassert extract_index_list([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == [1, 2, 3]\nassert extract_index_list([0, 1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5]) == [0, 1, 2]\nprint(\"You all set!\""
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_index_list([1,2,3], [1,2,3], [1,2,3]) == [1,2,3]\nassert     extract_index_list([1,2,3], [1,2,3], [2,2,2]) == [2]\nassert     extract_index_list([1,2,3], [1,2,3], [1,2,3]) == []\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint('All tests passed!'"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_index_list([1,1,2,2,2], [1,2,1,2,2], [2,1,1,2,2]) == [1,2,1,2,2], 'Test failed'\nassert     extract_index_list([1,1,2,2,2], [1,2,1,2,2], [1,1,1,2,2]) == [1,2,1], 'Test failed'\nassert     extract_index_list([1,1,2,2,2], [1,2,1,2,2], [2,1,1,1,1]) == [2], 'Test failed'\nassert     extract_index_list([1,2,1,2,2], [1,2,1,2,2], [1,1,1,2,2]) == [1,2,1,2,2], 'Test failed'\nassert     extract_index_list([1,2,1,2,2], [1,2,1,2,2], [1,1,1,2,2]) == [1,2,1,2,2], 'Test failed'\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef sum_of_two_smallest(numbers):\n    '''\n    Write a function that takes a list of numbers and returns the sum of the two smallest numbers in the list.\n    '''\n    pass\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     second_smallest([1, 2, 4, 5, 6]) == 2\nassert     second_smallest([1, 2, 4, 5, 6, 2]) == 2\nassert     second_smallest([1, 2, 4, 5, 6, -2]) == -2\nassert     second_smallest([1, 2, 4, 5, 6, -2, 2]) == -2\nassert     second_smallest([1, -2, 4, 5, 6, -2, 2]) == -2\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     second_smallest([]) == -1\nassert     second_smallest([1,2,3,4,5]) == 5\nassert     second_smallest([1,2,3,4,5,6,7,8]) == 6\nassert     second_smallest([1,2,3,4,5,6,7,8,9,10]) == 9\nassert     second_smallest([1,2,3,4,5,6,7,8,9,10,11]) == 10\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     second_smallest([]) == None, 'None'\nassert second_smallest([1, 2, 3, 4, 5]) == 5, 'Five'\nassert second_smallest([1, 3, 4, 5, 5]) == 5, 'Five'\nassert second_smallest([2, 3, 4, 5, 5]) == 4, 'Five'\nassert second_smallest([5, 2, 3, 4, 5]) == 2, 'Two'\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     second_smallest([-1,-3,5,2,9]) == 2\nassert     second_smallest([4,-2,-1]) == -2\nassert     second_smallest([1]) == 1\nassert     second_smallest([]) == None\nassert     second_smallest([0,1,2,3,4]) == 4\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     second_smallest([-1, -1, -1, 0, 1, 2, 3]) == 1\nassert     second_smallest([-1, -1, 0, 0, 1, 2, 3]) == 2\nassert     second_smallest([-1, 0, 1, 2, 3, 4]) == 3\nassert     second_smallest([-1, -1, 0, 0, 1, 2, 3, 4]) == 4\nassert     second_smallest([-1, 0, 1, 2, 3]) == 3\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     second_smallest([-3, -2, -1, 1, 2, 3, 4]) == 1\nassert     second_smallest([4, -10, 9, -11]) == -11\nassert     second_smallest([2, 4, 6, 7, 1, 3]) == 1\nassert     second_smallest([4, 9, 7, 1, 4, 10, 11]) == 4\nassert     second_smallest([4, 9, 7, 1, 4, 10, 11]) == 4\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     second_smallest([1, 1, 1, 1, 1]) == 1\nassert     second_smallest([0, 0, 0, 0, 0]) == 0\nassert     second_smallest([0, 1, 1, 1, 1]) == 1\nassert     second_smallest([-10, -10, -10, -10, -10]) == -10\nassert     second_smallest([1, 1, 1, 1, 1]) == 1\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     second_smallest([10, 20, 30]) == 20\nassert     second_smallest([0, 0, 0, 0]) == 0\nassert     second_smallest([1, 2, 1, 1]) == 1\nassert     second_smallest([1, 2, 1, 2]) == 1\nassert     second_smallest([1, 1, 2, 2]) == 1\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     second_smallest([1, 2, 3, 4]) == 2, 'it should return 2'\nassert     second_smallest([-5, -2, -1, 0, 1, 2, 3, 4, 5, ]) == -2, 'it should return -2'\nassert     second_smallest([-5, -2, -1, 0, 1, 2, 3, 4, 5, ]) == -1, 'it should return -1'\nassert     second_smallest([-5, -2, -1, 0, 1, 2, 3, 4, 5, ]) == 0, 'it should return 0'\nassert     second_smallest([-5, -2, -1, 0, 1, 2, 3, 4, 5, ]) == -5, 'it should return -5'\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_match_zero_one('a')    == True\nassert     text_match_zero_one('bb')    == True\nassert     text_match_zero_one('bba')    == True\nassert     text_match_zero_one('b')    == True\nassert     text_match_zero_one('ba')    == True\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_match_zero_one('aab')     ==    True, 'one b'\nassert     text_match_zero_one('aabc')     ==    False, 'one a'\nassert     text_match_zero_one('aacb')     ==    False, 'one a, one b'\nassert     text_match_zero_one('abbb')     ==    True, 'two b'\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_zero_one(\"abc\") == False, \"abc\"\nassert     text_match_zero_one(\"abcab\") == True, \"abcab\"\nassert     text_match_zero_one(\"abcabcb\") == True, \"abcabcb\"\nassert     text_match_zero_one(\"abcabcbac\") == True, \"abcabcbac\"\nassert     text_match_zero_one(\"abcabcbabc\") == True, \"abcabcbabc\"\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_match_zero_one('ab') == True, \"Not true\"\nassert     text_match_zero_one('ababab') == True, \"Not true\"\nassert     text_match_zero_one('abc') == False, \"Not true\"\nassert     text_match_zero_one('a') == False, \"Not true\"\nassert     text_match_zero_one('bbb') == True, \"Not true\"\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ntext_match_zero_one('ab') == True\nassert\ntext_match_zero_one('ababc') == True\nassert\ntext_match_zero_one('abab') == True\nassert\ntext_match_zero_one('abcab') == True\nassert\ntext_match_zero_one('abcabc') == True\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_zero_one('ac') == True, 'The first test case is incorrect'\nassert     text_match_zero_one('ab') == True, 'The second test case is incorrect'\nassert     text_match_zero_one('aba') == True, 'The third test case is incorrect'\nassert     text_match_zero_one('abb') == False, 'The fourth test case is incorrect'\nassert     text_match_zero_one('abc') == False, 'The fifth test case is incorrect'\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_zero_one('ab') == 'a'\nassert     text_match_zero_one('abcb') == 'a'\nassert     text_match_zero_one('abcbabc') == 'a'\nassert     text_match_zero_one('abcbabcdd') == 'a'\nassert     text_match_zero_one('abcbabcde') == 'a'\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_match_zero_one('') == 'b'\nassert     text_match_zero_one('ab') == 'b'\nassert     text_match_zero_one('aab') == 'a'\nassert     text_match_zero_one('abc') == 'a'\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_match_zero_one(\"aab\") == True\nassert     text_match_zero_one(\"ab\") == True\nassert     text_match_zero_one(\"abb\") == True\nassert     text_match_zero_one(\"baa\") == True\nassert     text_match_zero_one(\"\") == False\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_zero_one('aaa') == False\nassert     text_match_zero_one('aaa') == False\nassert     text_match_zero_one('aaab') == True\nassert     text_match_zero_one('aabb') == False\nassert     text_match_zero_one('abb') == True\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_reverse_pairs([\"yinag\", \"aa\", \"zzz\", \"bb\", \"y\", \"yy\", \"zz\"]) == 2\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_reverse_pairs([\"a\", \"b\", \"c\", \"d\"]) == 2\nassert     count_reverse_pairs([\"a\", \"b\", \"a\", \"c\", \"d\"]) == 1\nassert     count_reverse_pairs([\"a\", \"a\", \"b\", \"a\"]) == 1\nassert     count_reverse_pairs([\"a\"]) == 0\nassert     count_reverse_pairs([]) == 0\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ncount_reverse_pairs([]) == 0\nassert \ncount_reverse_pairs(['cat', 'bat', 'rat', 'dot']) == 1\nassert \ncount_reverse_pairs(['cat', 'bat', 'rat', 'dot', 'cat','mat', 'pat', 'rat', 'cat', 'cat', 'bat', 'bat']) == 3\nassert \ncount_reverse_pairs(['bat', 'rat', 'cat']) == 0"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef count_reverse_pairs_code_reversed(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    pass\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_reverse_pairs([\"abcd\",\"dcba\"]) == 2\nassert     count_reverse_pairs([\"abcd\",\"cba\"]) == 1\n\n'''\nGiven an unsorted array of integers, find the number of longest increasing subsequence.\n\nExample 1:\nInput:  [1,3,5,4,7]\nOutput:  2\nExplanation: The two longest increasing subsequence are \"1\" and \"3,5,7\"\n\nExample 2:\nInput:  [2,2,2,2,2]\nOutput:  5\nExplanation: The length of longest continuous increasing subsequence is 1, and there are 5 subsequences' length is 1, so output 5.\n'''\ndef longest_increasing_subsequence(test_list):\n    '''\n    Write a function to find the length of longest increasing subsequence in the given array.\n    '''\n    pass\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ncount_reverse_pairs([\n    'abc',\n    'xyz',\n    'aba',\n    '123',\n    '123'\n]) == 4\n\ncount_reverse_pairs([\n    'a',\n    'b',\n    'c',\n    'd',\n    'e',\n    'f',\n    'g',\n    'h',\n    'i'\n]) == 7\n\ncount_reverse_pairs([\n    'a',\n    'b',\n    'c',\n    'd',\n    'e',\n    'f',\n    'g',\n    'h',\n    'i',\n    'k'\n]) == 5\n\ncount_reverse_pairs([\n    'a',\n    'b',\n    'c',\n    'd',\n    'e',\n    'f',\n    'g',\n    'h',\n    'i',\n    'j',\n    'k'\n]) == 10\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef count_reverse_pairs_test(capfd):\n    '''\n    test\n    '''\n    pass\n\ndef count_reverse_pairs_test_1(capfd):\n    '''\n    test\n    '''\n    pass\n\ndef count_reverse_pairs_test_2(capfd):\n    '''\n    test\n    '''\n    pass\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    count_reverse_pairs(['a', 'a', 'c', 'd', 'a']) == 5\n    count_reverse_pairs(['a', 'a', 'b', 'c', 'a', 'a']) == 4\n    count_reverse_pairs(['a', 'a', 'c', 'd', 'b']) == 3\n    count_reverse_pairs(['a', 'a', 'c', 'd', 'b', 'c']) == 3\n    count_reverse_pairs(['a', 'a', 'c', 'd', 'b', 'c', 'd', 'c']) == 4\n    count_reverse_pairs(['a', 'a', 'c', 'd', 'b', 'c', 'd', 'c', 'e']) == 4\n    count_reverse_pairs(['a', 'a', 'c', 'd', 'b', 'c', 'd', 'c', 'e', 'c', 'e', 'c']) == 5\n    count_reverse_pairs(['a', 'a', 'c', 'd', 'b', 'c', 'd', 'c', 'e', 'c', 'e', 'c', 'f', 'e', 'd', 'd', 'e', 'f', 'f', 'e', 'd', 'c', 'd', 'f']) == 9\n    count_reverse_pairs(['a', 'a', 'c', 'd', 'b', 'c', 'd', 'c', 'e', 'c', 'e', 'c', 'f', 'e', 'd', 'd', 'e', 'f', 'f', 'e', 'd', 'c', 'd', 'f', 'f']) == 13\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert unique_sublists([1,1,1,2,3,4,4,4,4,5]) == {(1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5), (4, 4), (4, 5), (5, 4), (5, 5)}\nassert unique_sublists([]) == {}\nassert unique_sublists([1]) == {(1,):1}\nassert unique_sublists([1,2]) == {(1,):2, (2,):1}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     unique_sublists([[1, 2, 3], [2, 3, 4], [1, 1, 1], [1, 1, 2]]) == {\n(1, 1, 1): 2, (1, 1, 2): 1, (2, 3, 4): 1, (1, 2, 3): 3}\nassert     unique_sublists([[1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1]]) == {\n(1, 1, 1, 1): 4}"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     unique_sublists([1,2,3,4,5,6]) == {(1,1),(2,2),(3,3),(4,4),(5,5),(6,6)}, \"Wrong Answer\"\nassert     unique_sublists([1,1,2,2,3,3,4,4,5,5,6,6]) == {(1,2),(2,3),(3,4),(4,5),(5,6)}, \"Wrong Answer\"\nassert     unique_sublists([1,2,3,4,5,6]) == {(1,1),(2,2),(3,3),(4,4),(5,5),(6,6)}, \"Wrong Answer\"\nassert     unique_sublists([1,1,1,2,2,3,3,4,4,5,5,6,6]) == {(1,2),(2,3),(3,4),(4,5),(5,6)}, \"Wrong Answer\"\nassert     unique_sublists([]) == set(), \"Wrong Answer\"\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert unique_sublists([1,1,2,3,4]) == {(1,2):1,(1,3):1,(1,4):1,(2,3):1,(2,4):1,(3,4):1}\nassert unique_sublists([1,2,3,4,5]) == {}\nassert unique_sublists([1,1,1,1,1]) == {(1,):5}\nassert unique_sublists([]) == {}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     unique_sublists([1,2,1]) == {(1,): 1, (2,): 1}\nassert     unique_sublists([1,2,1,1,2,1]) == {(1,): 1, (1, 2): 2, (2, 1): 3}\nassert     unique_sublists([1,2,1,1]) == {(1,): 2}\nassert     unique_sublists([1,1,1,1,1]) == {(1,): 5}\nassert     unique_sublists([1,1,1]) == {(1,): 3}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     unique_sublists([1, 2, 1, 2, 3, 4]) == {\n        (1, 1): 2,\n        (2, 1): 1,\n        (1, 2): 2,\n        (2, 2): 1,\n        (3, 4): 1,\n        (4, 4): 1\n    }\nassert     unique_sublists([1, 2, 1, 3, 3]) == {\n        (1, 1): 3,\n        (2, 1): 1,\n        (1, 3): 1,\n        (3, 3): 1\n    }\nassert     unique_sublists([1]) == {\n        (1,): 1\n    }\nassert     unique_sublists([]) == {}\nassert     unique_sublists([1, 1, 1, 1, 1, 1]) == {\n        (1, 1): 5\n    }\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    import doctest\n    if doctest.testmod().failed == 0:\n        print(\"\\n*** ALL TESTS PASSED. HAPPY TESTING!\\n\")"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     unique_sublists([[1,2,3,4], [2,3,4,5]]) == {(1,2,3,4):1, (2,3,4,5):1}\nassert     unique_sublists([[1,2,3,4], [1,2,3,4]]) == {(1,2,3,4):1}\nassert     unique_sublists([[1,2,3,4], [1,2,3,4,5]]) == {(1,2,3,4):2, (1,2,3,4,5):1}\nassert     unique_sublists([[1,2,3,4], [2,3,4,5], [2,3,4,5]]) == {(1,2,3,4):1, (2,3,4,5):2}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     unique_sublists([[], [1,2,3], [], [3], [1,2,3,3,4], [1,2,3]]) == {([],): 1, (1, 2, 3): 2, (1, 2, 3, 3, 4): 1}\nassert     unique_sublists([[], [1,2,3], [], [3], [1,2,3], [3]]) == {([],): 1, (1, 2, 3): 2, (3,): 1}\nassert     unique_sublists([[], [1,2,3], [], [3], [1,2,3], [3], [4,5,6]]) == {([],): 1, (1, 2, 3): 2, (3,): 1, (4, 5, 6): 1}\nassert     unique_sublists([]) == {}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     unique_sublists([]) == {}\nassert     unique_sublists([[]]) == {}\nassert     unique_sublists([[1], [2]]) == {(1,): 1, (2,): 1}\nassert     unique_sublists([[1, 2], [3, 4]]) == {(1, 2): 1, (3, 4): 1}\nassert     unique_sublists([[1, 2], [1, 2]]) == {(1, 2): 2}\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_decimal('123.34') == True\nassert     is_decimal('123.34e-2') == True\nassert     is_decimal('123.34e+2') == True\nassert     is_decimal('123.34e-2') == True\nassert     is_decimal('123.34e-2.4') == True\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint('Pass' if (is_decimal('2.000')) else 'Fail')\nprint('Pass' if (not is_decimal('2')) else 'Fail')\nprint('Pass' if (not is_decimal('2.')) else 'Fail')\nprint('Pass' if (is_decimal('-3.1')) else 'Fail')\nprint('Pass' if (not is_decimal('2.3')) else 'Fail')\nprint('Pass' if (not is_decimal('2.3.3')) else 'Fail')\nprint('Pass' if (not is_decimal('-3.3')) else 'Fail')\nprint('Pass' if (is_decimal('0.1')) else 'Fail')\nprint('Pass' if (not is_decimal('0.1.1')) else 'Fail')\nprint('Pass' if (is_decimal('0.1.1.1')) else 'Fail')\nprint('Pass' if (not is_decimal('-0.1.1.1')) else 'Fail')\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert is_decimal(\"1.25\")\nassert is_decimal(\"1.257\")\nassert not is_decimal(\"1.256\")\nassert not is_decimal(\"1.2599\")\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_decimal('12') == False\nassert     is_decimal('12.1') == False\nassert     is_decimal('12.1.') == False\nassert     is_decimal('12.1.2') == False\nassert     is_decimal('12.1.21') == False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef normalize(num):\n    '''\n    Write a function to normalize a given string such that \"one\" becomes \"1\" and \"two\" becomes \"2\".\n    '''\n    pass\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_decimal(\"1.1\") == False, \"is_decimal should return False for input of '1.1'\"\nassert     is_decimal(\"3\") == False, \"is_decimal should return False for input of '3'\"\nassert     is_decimal(\"4.1\") == False, \"is_decimal should return False for input of '4.1'\"\nassert     is_decimal(\"4.1\") == True, \"is_decimal should return True for input of '4.1'\"\nassert     is_decimal(\"1.1e-1\") == True, \"is_decimal should return True for input of '1.1e-1'\"\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_decimal('0.1')\nassert not is_decimal('1')\nassert not is_decimal('0.1.1')\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_decimal('10') == True, 'The return value should be True'\nassert     is_decimal('10.1') == True, 'The return value should be True'\nassert     is_decimal('0') == True, 'The return value should be True'\nassert     is_decimal('1') == False, 'The return value should be False'\nassert     is_decimal('-9.3') == False, 'The return value should be False'\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     unique_Element([1,2,3,4,4,3,2,1]) == True\nassert     unique_Element([1,2,3,4,4,3,2,1,2]) == False\nassert     unique_Element([1,2,3,4,4,3,2,1,2,3]) == False\nassert     unique_Element([]) == True\nassert     unique_Element([1,1,1,2,2,3,3]) == False\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert \n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     unique_Element([1, 1, 1, 1]) == True, \"Test Case 1 Failed\"\nassert     unique_Element([1, 2, 3, 4]) == False, \"Test Case 2 Failed\"\nassert     unique_Element([1, 2, 2, 4]) == True, \"Test Case 3 Failed\"\nassert     unique_Element([1, 2, 2, 2]) == True, \"Test Case 4 Failed\"\nassert     unique_Element([1, 2, 3, 4, 5]) == False, \"Test Case 5 Failed\"\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     unique_Element([0,1,2,2,3,3,3,4,4]) == True, \"should be True\"\nassert     unique_Element([0,1,2,2,3,3,3,4,5]) == False, \"should be False\"\nassert     unique_Element([0,1,2,3,4]) == True, \"should be True\"\nassert     unique_Element([0,1,2,3]) == False, \"should be False\"\nassert     unique_Element([0,1,2,3,2,3,3]) == True, \"should be True\"\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     unique_Element([1, 1, 1, 2, 2]) == True, 'incorrect'\nassert     unique_Element([1, 1, 1, 1, 2]) == False, 'incorrect'\nassert     unique_Element([1, 1, 1, 2, 2]) == False, 'incorrect'\nassert     unique_Element([1, 1, 1, 1, 1, 2, 2, 2]) == False, 'incorrect'\nassert     unique_Element([1, 1, 1, 1, 1, 1, 1]) == True, 'incorrect'\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     unique_Element([1, 1, 1, 1, 1])\nassert not unique_Element([1, 1, 2, 1, 1])\nassert     unique_Element([1, 1, 1, 1, 2])\n\ndef CheckArray(arr):\n    '''\n    Write a python function to check whether all the elements of a given list are in sorted order or not.\n    '''\n    pass\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     unique_Element([1,2,3,4]) == False\nassert     unique_Element([1,2,3,1]) == True\nassert     unique_Element([1]) == False\nassert     unique_Element([2,2,2,2,2,2,2,2,2]) == True\nassert     unique_Element([2,3,2,3,2,2,2,2,2]) == False\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     unique_Element([1,2,2,3,4,4]) == True\nassert     unique_Element([1,2,2,3,4]) == False\nassert     unique_Element([1,2,3,4]) == False\n\ndef is_Valid_parenthesis(parenthesis_string):\n    '''\n    Write a python function to check whether a given string of parenthesis \n    contains only valid parenthesis. Valid parenthesis in order of opening parenthesis (), {}, [], and }.\n    '''\n    pass\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     unique_Element([1,2,3]) == False, \"Should be False\"\nassert     unique_Element([1,2,2]) == False, \"Should be False\"\nassert     unique_Element([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == True, \"Should be True\"\nassert     unique_Element([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,1]) == False, \"Should be False\"\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_monthnumber_number(10) == False\nassert     check_monthnumber_number(11) == False\nassert     check_monthnumber_number(12) == False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_monthnumber_number(1) == True, \"January should contain 30 days\"\nassert     check_monthnumber_number(2) == False, \"February should not contain 30 days\"\nassert     check_monthnumber_number(3) == True, \"March should contain 30 days\"\nassert     check_monthnumber_number(4) == True, \"April should contain 30 days\"\nassert     check_monthnumber_number(5) == True, \"May should contain 30 days\"\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_monthnumber_number(30) == True, 'Error: check_monthnumber_number(30) should return True'\nassert     check_monthnumber_number(31) == False, 'Error: check_monthnumber_number(31) should return False'\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_monthnumber_number(1) == False, \"There is a 30 day month\"\nassert     check_monthnumber_number(2) == False, \"There is a 30 day month\"\nassert     check_monthnumber_number(3) == False, \"There is a 30 day month\"\nassert     check_monthnumber_number(4) == False, \"There is a 30 day month\"\nassert     check_monthnumber_number(5) == False, \"There is a 30 day month\"\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_monthnumber_number(4) == False\nassert     check_monthnumber_number(13) == False\nassert     check_monthnumber_number(12) == True\nassert     check_monthnumber_number(1) == True\nassert     check_monthnumber_number(12.1) == False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    check_monthnumber_number(6) == False\n    check_monthnumber_number(15) == False\n    check_monthnumber_number(18) == True\n    check_monthnumber_number(15) == True\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_monthnumber_number(1) == True\nassert     check_monthnumber_number(2) == False\nassert     check_monthnumber_number(3) == True\nassert     check_monthnumber_number(4) == True\nassert     check_monthnumber_number(5) == False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_monthnumber_number(12) == True, 'output is wrong'\nassert     check_monthnumber_number(1) == False, 'output is wrong'\nassert     check_monthnumber_number(6) == True, 'output is wrong'\nassert     check_monthnumber_number(2) == False, 'output is wrong'"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_monthnumber_number(10) == False, 'Should return False if given number is less than 1'\nassert     check_monthnumber_number(13) == True, 'Should return True if given number is greater than 1 and less than or equal to 12'\nassert     check_monthnumber_number(12) == False, 'Should return False if given number is greater than 12'\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\narr = [3,2,1] \nn = len(arr) \nprint(find_min_diff(arr,n))"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert find_min_diff([1,3,4,6,8], 4) == 2 \nassert find_min_diff([1,3,4,6,8], 5) == -1 \nassert find_min_diff([1,3,4,6,8], 6) == 1 \nassert find_min_diff([1,3,4,6,8], 7) == 3 \n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_min_diff([1,10,5],3) == -1, \"Wrong\"\nassert     find_min_diff([-10,4,1,2,3],3) == -1, \"Wrong\"\nassert     find_min_diff([1,2,3,4,5],3) == 3, \"Wrong\"\nassert     find_min_diff([-1,-2,-3,-4,-5],3) == -1, \"Wrong\"\nassert     find_min_diff([-5,-6,-7,-8,-9],4) == -1, \"Wrong\"\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef check_pair(arr, n): \n    \"\"\"\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    \"\"\"\n    pass\n\ndef min_diff_pair(arr): \n    \"\"\"\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    \"\"\"\n    pass\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_min_diff([5, 8, 1, 9, 2, 7, 5], 7) == 1, \"Failed: Not returning the correct value\"\nassert     find_min_diff([1, 1, 9, 5, 8], 1) == 1, \"Failed: Not returning the correct value\"\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_min_diff([1, 3, 15, 11, 2], 10) ==  2\nassert     find_min_diff([1, 3, 15, 11, 2], 7) ==  2\nassert     find_min_diff([2, 5, 6, 2, 1], 10) ==  2\nassert     find_min_diff([2, 5, 6, 2, 1], 1) ==  2\nassert     find_min_diff([2, 5, 6, 2, 1], 2) ==  0\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_min_diff([1,2,3,4,5],5) == 0\nassert     find_min_diff([5,5,5,5,5],5) == 0\nassert     find_min_diff([5,4,3,2,1],5) == 0\nassert     find_min_diff([1,2,3,4,5],6) == 1\nassert     find_min_diff([1,2,3,4,5],-1) == 0\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_min_diff([0, 1, 2, 4], 1) == 2\nassert     find_min_diff([2, 7, 9, 11], 11) == 2\nassert     find_min_diff([5, 1, 5, 5], 5) == 0\nassert     find_min_diff([5, 9, 8, 7, 6], 7) == 2\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert not find_min_diff([1,2,3],2)\nassert find_min_diff([1,2,3],1)\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     number_ctr(\"\") == 0\nassert     number_ctr(\"0\") == 1\nassert     number_ctr(\"23\") == 2\nassert     number_ctr(\"010\") == 3\nassert     number_ctr(\"99999\") == 4\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     number_ctr(\"2a3b4c5\") == 7, \"Should be 7\"\nassert     number_ctr(\"0\") == 1, \"Should be 1\"\nassert     number_ctr(\"k9\") == 1, \"Should be 1\"\nassert     number_ctr(\"covid\") == 8, \"Should be 8\"\nassert     number_ctr(\"k8\") == 2, \"Should be 2\"\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     number_ctr(\"54321\") == 4\nassert     number_ctr(\"1234\") == 3\nassert     number_ctr(\"1234.5\") == 4\nassert     number_ctr(\"234\") == 3\nassert     number_ctr(\"\") == 0\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nnumber_ctr(\"helloo\") == 3\nassert \nnumber_ctr(\"hell123o\") == 3\nassert \nnumber_ctr(\"hello123\") == 3\nassert \nnumber_ctr(\"hello123!\") == 3\nassert \nnumber_ctr(\"123321\") == 3\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     number_ctr('abcd') == 0, 'Passed.'\nassert     number_ctr('a') == 1, 'Passed.'\nassert     number_ctr('a b c d') == 1, 'Passed.'\nassert     number_ctr('a 1 2 3') == 3, 'Passed.'\nassert     number_ctr('a 1 2 3 4') == 4, 'Passed.'\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert number_ctr(\"qwertyuiopasdfghjklzxcvbnm\") == 0, 'incorrect'\nassert number_ctr(\"2147483648\") == 1, 'incorrect'\nassert number_ctr(\"1234567\") == 1, 'incorrect'\nassert number_ctr(\"-1234\") == 1, 'incorrect'\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     number_ctr(\"\") == 0\nassert     number_ctr(\"1\") == 1\nassert     number_ctr(\"1.\") == 0\nassert     number_ctr(\"1.1\") == 1\nassert     number_ctr(\"1.1.1\") == 2\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     number_ctr('') == 0\nassert     number_ctr('A') == 1\nassert     number_ctr('123') == 3\nassert     number_ctr('abc') == 3\nassert     number_ctr('123abc') == 4\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     number_ctr('123') == 3, 'test-1 failed!'\nassert     number_ctr('4') == 1, 'test-2 failed!'\nassert     number_ctr('4.2') == 1, 'test-3 failed!'\nassert     number_ctr('4.2.3.4') == 1, 'test-4 failed!'\nassert     number_ctr('abcd') == 0, 'test-5 failed!'\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     number_ctr('pithon') == 1, '1'\nassert     number_ctr('a123456') == 1, '1'\nassert     number_ctr('1234567891011121314151617181920') == 9, '9'\nassert     number_ctr('pithon') == 0, '0'\nassert     number_ctr('abcd') == 0, '0'\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_polite(1) == False, 'Wrong output'\nassert is_polite(2) == True, 'Wrong output'\nassert is_polite(5) == False, 'Wrong output'\nassert is_polite(12) == True, 'Wrong output'\nassert is_polite(9) == False, 'Wrong output'\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert is_polite(1) == 1 \nassert is_polite(2) == 2 \nassert is_polite(5) == 5\n\ndef num_divisors(n):\n    '''\n    Write a function to find the number of divisors of an integer n.\n    '''\n    pass\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nis_polite(10) #3\nis_polite(6) #2\nis_polite(5) #1\nis_polite(6) #1\nis_polite(3) #1\nis_polite(5) #1\nis_polite(9) #1\nis_polite(11) #1\nis_polite(19) #2\nis_polite(1) #2\nis_polite(9) #2\nis_polite(8) #2\nis_polite(22) #3\nis_polite(10) #3\nis_polite(20) #3\nis_polite(19) #4\nis_polite(16) #4\nis_polite(10) #5\nis_polite(50) #5\nis_polite(30) #5\nis_polite(11) #5\nis_polite(2) #5\nis_polite(7) #5\nis_polite(18) #6\nis_polite(15) #6\nis_polite(12) #6\nis_polite(3) #7\nis_polite(1) #7\nis_polite(2) #7\nis_polite(3) #7\nis_polite(6) #7\nis_polite(3) #8\nis_polite(12) #8\nis_polite(9) #8\nis_polite(4) #8\nis_polite(5) #8\nis_polite(7) #8\nis_polite(10) #8\nis_polite(11) #8\nis_polite(6) #8\nis_polite(8) #9\nis_polite(9) #9\nis_polite(10) #9\nis_polite(11) #9\nis_polite(7) #9\nis_polite(12) #9\nis_polite(6) #9\nis_polite(7) #10\nis_polite(13) #10\nis_polite(4) #10\nis_polite(3) #10\nis_polite(1) #11\nis_polite(9) #11\nis_polite(7) #11\nis_polite(6) #11\nis_polite(2) #11\nis_polite(1) #11\nis_polite(8) #11\nis_polite(10) #11\nis_polite(5) #12\nis_polite(7) #12\nis_polite(13) #12\nis_polite(6) #12\nis_polite(2) #12\nis_polite(3) #12\nis_polite(5) #12\nis_polite(7) #12\nis_polite(10) #12\nis_polite(11) #12\nis_polite(4) #12\nis_polite(1) #12\nis_polite(9) #13\nis_polite(6) #13\nis_polite(2) #13\nis_polite(3) #13\nis_polite(10) #13\nis_polite(7) #13\nis_polite(12) #13\nis_polite(11) #13\nis_polite(8) #13\nis_polite(4) #13\nis_polite(5) #13\nis_polite(9) #14\nis_polite(10) #14\nis_polite(11) #14\nis_polite(7) #14\nis_polite(4) #14\nis_polite(3) #15\nis_polite(1) #16\nis_polite(2) #17\nis_polite(9) #18\nis_polite(1) #19\nis_polite(1) #20\nis_polite(4) #20\nis_polite(3) #20\nis_polite(1) #21\nis_polite(7) #22\nis_polite(4) #23\nis_polite(3) #24\nis_polite(1) #25\nis_polite(8) #26\nis_polite(9) #27\nis_polite(10) #28\nis_polite(11) #29\nis_polite(7) #30\nis_polite(4) #31\nis_polite(3) #32\nis_polite(1) #33\nis_polite(2) #34\nis_polite(1) #35\nis_polite(8) #36\nis_polite(5) #37\nis_polite(3) #38\nis_polite(7) #39\nis_polite(10) #40\nis_polite(11) #41\nis_polite(6) #42\nis_polite(5) #43\nis_polite(2) #44\nis_polite(4) #45\nis_polite(1) #46\nis_polite(5) #47\nis_polite(2) #48\nis_polite(3) #49\nis_polite(6) #50\nis_polite(2) #51\nis_polite(3) #52\nis_polite(5) #53\nis_polite(7) #54\nis_polite(10) #55\nis_polite(11) #56\nis_polite(6) #57\nis_polite(7) #58\nis_polite(10) #59\nis_polite(11) #60\nis_polite(7) #61\nis_polite(3) #62\nis_polite(1) #63\nis_polite(2) #64\nis_polite(3) #65\nis_polite(5) #66\nis_polite(7) #67\nis_polite(10) #68\nis_polite(11) #69\nis_polite(6) #70\nis_polite(7) #71\nis_polite(10) #72\nis_polite(11) #73\nis_polite(7) #74\nis_polite(4) #75\nis_polite(3) #76\nis_polite(1) #77\nis_polite(9) #78\nis_polite(6) #79\nis_polite(2) #80\nis_polite(3) #81\nis_polite(5) #82\nis_polite(7) #83\nis_polite(10) #84\nis_polite(11) #85\nis_polite(6) #86\nis_polite(7) #87\nis_polite(10) #88\nis_polite(11) #89\nis_polite(7) #90\nis_polite(4) #91\nis_polite(5) #92\nis_polite(9) #93\nis_polite(10) #94\nis_polite(11) #95\nis_polite(7) #96\nis_polite(4) #97\nis_polite(3) #98\nis_polite(1) #99\nis_polite(2) #100\nis_polite(1) #101\nis_polite(2) #102\nis_polite(4) #103\nis_polite(3) #104\nis_polite(1) #105\nis_polite(7) #106\nis_polite(4) #107\nis_polite(3) #108\nis_polite(1) #109\nis_polite(9) #110\nis_polite(6) #111\nis_polite(2) #112\nis_polite(3) #113\nis_polite(5) #114\nis_polite(7) #115\nis_polite(10) #116\nis_polite(11) #117\nis_polite(6) #118\nis_polite(7) #119\nis_polite(10) #120\nis_polite(11) #121\nis_polite(7) #122\nis_polite(4) #123"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_polite(1) == 1\nassert     is_polite(2) == 2\nassert     is_polite(3) == 3\nassert     is_polite(4) == 4\nassert     is_polite(5) == 5\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nis_polite(1) == 1\nis_polite(2) == 2\nis_polite(3) == 3\nis_polite(4) == 4\nis_polite(5) == 5\nis_polite(6) == 6\nis_polite(7) == 7\nis_polite(8) == 8\nis_polite(9) == 9\nis_polite(10) == 10\nis_polite(11) == 11\nis_polite(12) == 12\nis_polite(13) == 13\nis_polite(14) == 14\nis_polite(15) == 15\nis_polite(16) == 16\nis_polite(17) == 17\nis_polite(18) == 18\nis_polite(19) == 19\nis_polite(20) == 20\nis_polite(21) == 21\nis_polite(22) == 22\nis_polite(23) == 23\nis_polite(24) == 24\nis_polite(25) == 25\nis_polite(26) == 26\nis_polite(27) == 27\nis_polite(28) == 28\nis_polite(29) == 29\nis_polite(30) == 30\nis_polite(31) == 31\nis_polite(32) == 32\nis_polite(33) == 33\nis_polite(34) == 34\nis_polite(35) == 35\nis_polite(36) == 36\nis_polite(37) == 37\nis_polite(38) == 38\nis_polite(39) == 39\nis_polite(40) == 40\nis_polite(41) == 41\nis_polite(42) == 42\nis_polite(43) == 43\nis_polite(44) == 44\nis_polite(45) == 45\nis_polite(46) == 46\nis_polite(47) == 47\nis_polite(48) == 48\nis_polite(49) == 49\nis_polite(50) == 50\nis_polite(51) == 51\nis_polite(52) == 52\nis_polite(53) == 53\nis_polite(54) == 54\nis_polite(55) == 55\nis_polite(56) == 56\nis_polite(57) == 57\nis_polite(58) == 58\nis_polite(59) == 59\nis_polite(60) == 60\nis_polite(61) == 61\nis_polite(62) == 62\nis_polite(63) == 63\nis_polite(64) == 64\nis_polite(65) == 65\nis_polite(66) == 66\nis_polite(67) == 67\nis_polite(68) == 68\nis_polite(69) == 69\nis_polite(70) == 70\nis_polite(71) == 71\nis_polite(72) == 72\nis_polite(73) == 73\nis_polite(74) == 74\nis_polite(75) == 75\nis_polite(76) == 76\nis_polite(77) == 77\nis_polite(78) == 78\nis_polite(79) == 79\nis_polite(80) == 80\nis_polite(81) == 81\nis_polite(82) == 82\nis_polite(83) == 83\nis_polite(84) == 84\nis_polite(85) == 85\nis_polite(86) == 86\nis_polite(87) == 87\nis_polite(88) == 88\nis_polite(89) == 89\nis_polite(90) == 90\nis_polite(91) == 91\nis_polite(92) == 92\nis_polite(93) == 93\nis_polite(94) == 94\nis_polite(95) == 95\nis_polite(96) == 96\nis_polite(97) == 97\nis_polite(98) == 98\nis_polite(99) == 99\nis_polite(100) == 100\nis_polite(101) == 101\nis_polite(102) == 102\nis_polite(103) == 103\nis_polite(104) == 104\nis_polite(105) == 105\nis_polite(106) == 106\nis_polite(107) == 107\nis_polite(108) == 108\nis_polite(109) == 109\nis_polite(110) == 110\nis_polite(111) == 111\nis_polite(112) == 112\nis_polite(113) == 113\nis_polite(114) == 114\nis_polite(115) == 115\nis_polite(116) == 116\nis_polite(117) == 117\nis_polite(118) == 118\nis_polite(119) == 119\nis_polite(120) == 120\nis_polite(121) == 121\nis_polite(122) == 122\nis_polite(123) == 123\nis_polite(124) == 124\nis_polite(125) == 125\nis_polite(126) == 126\nis_polite(127) == 127\nis_polite(128) == 128\nis_polite(129) == 129\nis_polite(130) == 130\nis_polite(131) == 131\nis_polite(132) == 132\nis_polite(133) == 133\nis_polite(134) == 134\nis_polite(135) == 135\nis_polite(136) == 136\nis_polite(137) == 137\nis_polite(138) == 138\nis_polite(139) == 139\nis_polite(140) == 140\nis_polite(141) == 141\nis_polite(142) == 142\nis_polite(143) == 143\nis_polite(144) == 144\nis_polite(145) == 145\nis_polite(146) == 146\nis_polite(147) == 147\nis_polite(148) == 148\nis_polite(149) == 149\nis_polite(150) == 150\nis_polite(151) == 151\nis_polite(152) == 152\nis_polite(153) == 153\nis_polite(154) == 154\nis_polite(155) == 155\nis_polite(156) == 156\nis_polite(157) == 157\nis_polite(158) == 158\nis_polite(159) == 159\nis_polite(160) == 160\nis_polite(161) == 161\nis_polite(162) == 162\nis_polite(163) == 163\nis_polite(164) == 164\nis_polite(165) == 165\nis_polite(166) == 166\nis_polite(167) == 167\nis_polite(168) == 168\nis_polite(169) == 169\nis_polite(170) == 170\nis_polite(171) == 171\nis_polite(172) == 172\nis_polite(173) == 173\nis_polite(174) == 174\nis_polite(175) == 175\nis_polite(176) == 176\nis_polite(177) == 177\nis_polite(178) == 178\nis_polite(179) == 179\nis_polite(180) == 180\nis_polite(181) == 181\nis_polite(182) == 182\nis_polite(183) == 183\nis_polite(184) == 184\nis_polite(185) == 185\nis_polite(186) == 186\nis_polite(187) == 187\nis_polite(188) == 188\nis_polite(189) == 189\nis_polite(190) == 190\nis_polite(191) == 191\nis_polite(192) == 192\nis_polite(193) == 193\nis_polite(194) == 194\nis_polite(195) == 195\nis_polite(196) == 196\nis_polite(197) == 197\nis_polite(198) == 198\ni"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_polite(1) == True, \"1st is_polite\"\nassert     is_polite(2) == False, \"2nd is_polite\"\nassert     is_polite(10) == False, \"3rd is_polite\"\nassert     is_polite(15) == True, \"4th is_polite\"\nassert     is_polite(23) == True, \"5th is_polite\"\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(is_polite(2))\nprint(is_polite(3))\nprint(is_polite(4))\nprint(is_polite(5))\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    is_polite(1)==1 \n    is_polite(2)==2 \n    is_polite(3)==4 \n    is_polite(4)==6 \n    is_polite(5)==8 \n    is_polite(6)==10 \n    is_polite(7)==12 \n    is_polite(8)==14 \n    is_polite(9)==16\n    is_polite(10)==18 \n    is_polite(11)==20 \n    is_polite(12)==22 \n    is_polite(13)==24\n    is_polite(14)==26\n    is_polite(15)==28\n    is_polite(16)==30\n    is_polite(17)==32\n    is_polite(18)==34\n    is_polite(19)==36\n    is_polite(20)==38\n    is_polite(21)==40\n    is_polite(22)==42\n    is_polite(23)==44\n    is_polite(24)==46\n    is_polite(25)==48\n    is_polite(26)==50\n    is_polite(27)==52\n    is_polite(28)==54\n    is_polite(29)==56\n    is_polite(30)==58\n    is_polite(31)==60\n    is_polite(32)==62\n    is_polite(33)==64\n    is_polite(34)==66\n    is_polite(35)==68\n    is_polite(36)==70\n    is_polite(37)==72\n    is_polite(38)==74\n    is_polite(39)==76\n    is_polite(40)==78\n    is_polite(41)==80\n    is_polite(42)==82\n    is_polite(43)==84\n    is_polite(44)==86\n    is_polite(45)==88\n    is_polite(46)==90\n    is_polite(47)==92\n    is_polite(48)==94\n    is_polite(49)==96\n    is_polite(50)==98\n    is_polite(51)==100\n    is_polite(52)==102\n    is_polite(53)==104\n    is_polite(54)==106\n    is_polite(55)==108\n    is_polite(56)==110\n    is_polite(57)==112\n    is_polite(58)==114\n    is_polite(59)==116\n    is_polite(60)==118\n    is_polite(61)==120\n    is_polite(62)==122\n    is_polite(63)==124\n    is_polite(64)==126\n    is_polite(65)==128\n    is_polite(66)==130\n    is_polite(67)==132\n    is_polite(68)==134\n    is_polite(69)==136\n    is_polite(70)==138\n    is_polite(71)==140\n    is_polite(72)==142\n    is_polite(73)==144\n    is_polite(74)==146\n    is_polite(75)==148\n    is_polite(76)==150\n    is_polite(77)==152\n    is_polite(78)==154\n    is_polite(79)==156\n    is_polite(80)==158\n    is_polite(81)==160\n    is_polite(82)==162\n    is_polite(83)==164\n    is_polite(84)==166\n    is_polite(85)==168\n    is_polite(86)==170\n    is_polite(87)==172\n    is_polite(88)==174\n    is_polite(89)==176\n    is_polite(90)==178\n    is_polite(91)==180\n    is_polite(92)==182\n    is_polite(93)==184\n    is_polite(94)==186\n    is_polite(95)==188\n    is_polite(96)==190\n    is_polite(97)==192\n    is_polite(98)==194\n    is_polite(99)==196\n    is_polite(100)==198\n    is_polite(101)==200\n    is_polite(102)==202\n    is_polite(103)==204\n    is_polite(104)==206\n    is_polite(105)==208\n    is_polite(106)==210\n    is_polite(107)==212\n    is_polite(108)==214\n    is_polite(109)==216\n    is_polite(110)==218\n    is_polite(111)==220\n    is_polite(112)==222\n    is_polite(113)==224\n    is_polite(114)==226\n    is_polite(115)==228\n    is_polite(116)==230\n    is_polite(117)==232\n    is_polite(118)==234\n    is_polite(119)==236\n    is_polite(120)==238\n    is_polite(121)==240\n    is_polite(122)==242\n    is_polite(123)==244\n    is_polite(124)==246\n    is_polite(125)==248\n    is_polite(126)==250\n    is_polite(127)==252\n    is_polite(128)==254\n    is_polite(129)==256\n    is_polite(130)==258\n    is_polite(131)==260\n    is_polite(132)==262\n    is_polite(133)==264\n    is_polite(134)==266\n    is_polite(135)==268\n    is_polite(136)==270\n    is_polite(137)==272\n    is_polite(138)==274\n    is_polite(139)==276\n    is_polite(140)==278\n    is_polite(141)==280\n    is_polite(142)==282\n    is_polite(143)==284\n    is_polite(144)==286\n    is_polite(145)==288\n    is_polite(146)==290\n    is_polite(147)==292\n    is_polite(148)==294\n    is_polite(149)==296\n    is_polite(150)==298\n    is_polite(151)==300\n    is_polite(152)==302\n    is_polite(153)==304\n    is_polite(154)==306\n    is_polite(155)==308\n    is_polite(156)==310\n    is_polite(157)==312\n    is_polite(158)==314\n    is_polite(159)==316\n    is_polite(160)==318\n    is_polite(161)==320\n    is_polite(162)==322\n    is_polite(163)==324\n    is_polite(164)==326\n    is_polite(165)==328\n    is_polite(166)==330\n    is_polite(167)==332\n    is_polite(168)==334\n    is_polite(169)==336\n    is_polite(170)==338\n    is_polite(171)==340\n    is_polite(172)==342\n    is_polite(173)==344\n    is_polite(174)==346\n    is_polite(175)==348\n    is_polite(176)==350\n    is_polite(177)==352\n    is_polite(178)==354\n    is_polite(179)==356\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_polite(0) == None, \"is_polite() should be None for n = 0\"\nassert     is_polite(1) == 1, \"is_polite() should be 1 for n = 1\"\nassert     is_polite(2) == 4, \"is_polite() should be 4 for n = 2\"\nassert     is_polite(3) == 6, \"is_polite() should be 6 for n = 3\"\nassert     is_polite(4) == 9, \"is_polite() should be 9 for n = 4\"\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert not is_polite(2)\nassert is_polite(5)\nassert is_polite(6)\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef count_specific_number(num):\n    '''\n    Write a function to find the count of a particular number in a list of integers.\n    '''\n    pass\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     pair_wise([10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == \\\n    [(10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19), (19, 20)]\nassert pair_wise([10, 11, 12, 13, 14, 15, 16, 17, 18]) == \\\n    [(10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17)]\nassert pair_wise([10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == \\\n    [(10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (18, 19)]\nassert pair_wise([]) == []\n\ndef pair_wise_v2(l):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert pair_wise([\"a\", \"b\", \"c\"]) == [['a', 'b'], ['b', 'c'], ['c', 'a']]\nassert pair_wise([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]) == [['a', 'b'], ['b', 'c'], ['c', 'd'], ['d', 'e'], ['e', 'f'], ['f', 'g']]\nassert pair_wise([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]) == [['a', 'b'], ['b', 'c'], ['c', 'd'], ['d', 'e'], ['e', 'f']]\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     pair_wise([]) == [[]]\nassert pair_wise([1,2,3,4,5,6]) == [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]\n\n\ndef pair_dict(d):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     pair_wise([]) == []\nassert     pair_wise([1]) == []\nassert     pair_wise([1, 2, 3]) == []\nassert     pair_wise([1, 2, 3, 4, 5]) == [[1, 2], [2, 3], [3, 4], [4, 5]]\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     pair_wise([1, 2, 3]) == [[1, 2], [2, 3], [3, 1]]\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     pair_wise([1,2,3,4,5]) == [(1,2),(2,3),(3,4),(4,5)]\nassert pair_wise([\"hello\",\"world\",\"here\",\"is\",\"a\",\"programmer\"]) == [(\"hello\", \"world\"), (\"world\", \"here\"), (\"here\", \"is\"), (\"is\", \"a\"), (\"a\", \"programmer\")]"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \npair_wise([0,1,2,3,4,5]) == [(0,1),(1,2),(2,3),(3,4),(4,5)]\n\n\ndef pair_wise_l(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pass\n\n\ndef pair_wise_l(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_pairs_count([1,2,3,4], 5) == 2, \"Error, get_pairs_count([1,2,3,4], 5) should return 2, it doesn't\"\nassert     get_pairs_count([2,1,3,4,5], 5) == 0, \"Error, get_pairs_count([2,1,3,4,5], 5) should return 0, it doesn't\"\nassert     get_pairs_count([1,2,3,4,5], 5) == 4, \"Error, get_pairs_count([1,2,3,4,5], 5) should return 4, it doesn't\"\nassert     get_pairs_count([1,2,3,4], 5) == 1, \"Error, get_pairs_count([1,2,3,4], 5) should return 1, it doesn't\"\nassert     get_pairs_count([1,2,3,4], 5) == 1, \"Error, get_pairs_count([1,2,3,4], 5) should return 1, it doesn't\"\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_pairs_count([1, 5, -4, 8, 11, 3], 10) == 1\nassert     get_pairs_count([1, 5, -4, 8, 11, 3], -4) == 1\nassert     get_pairs_count([1, 5, -4, 8, 11, 3], -5) == 0\nassert     get_pairs_count([1, 5, -4, 8, 11, 3], 6) == 2\nassert     get_pairs_count([1, 5, -4, 8, 11, 3], -10) == 0\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    # testcase1\n    get_pairs_count([1,3,2,4,6,7],8) == 2\n    # testcase2\n    get_pairs_count([10,20,10,10,20,10,20,20,20,20,10],20) == 2\n    # testcase3\n    get_pairs_count([10,20,10,10,20,10,20,20,20,20,10],30) == 0\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nif __name__ == '__main__':\n    arr = [1,1,2,3,3,4,4,4]\n    sum = 4\n    print(\"Pass\" if (4 == get_pairs_count(arr, sum)) else \"Fail\")\n    \n    arr = [10, 1, 2, 3, 4, 4]\n    sum = 9\n    print(\"Pass\" if (0 == get_pairs_count(arr, sum)) else \"Fail\")\n    \n    arr = [1, 1, 2, 3, 3, 4, 4, 4]\n    sum = 4\n    print(\"Pass\" if (9 == get_pairs_count(arr, sum)) else \"Fail\")\n    \n    arr = [10, 1, 2, 3, 3, 4, 4, 4]\n    sum = 9\n    print(\"Pass\" if (2 == get_pairs_count(arr, sum)) else \"Fail\")\n    \n    arr = []\n    sum = 1\n    print(\"Pass\" if (0 == get_pairs_count(arr, sum)) else \"Fail\")\n    \n    arr = [-10, -1, 2, 3, 3, 4, 4, 4]\n    sum = 4\n    print(\"Pass\" if (0 == get_pairs_count(arr, sum)) else \"Fail\")\n    \n    arr = [-10, -1, 2, 3, 3, 4, 4, 4]\n    sum = -9\n    print(\"Pass\" if (0 == get_pairs_count(arr, sum)) else \"Fail\")\n    \n    arr = []\n    sum = -10\n    print(\"Pass\" if (0 == get_pairs_count(arr, sum)) else \"Fail\")\n    \n    arr = [-10, -1, 2, 3, 3, 4, 4, 4]\n    sum = -9\n    print(\"Pass\" if (0 == get_pairs_count(arr, sum)) else \"Fail\")\n    \n    arr = []\n    sum = -10\n    print(\"Pass\" if (0 == get_pairs_count(arr, sum)) else \"Fail\")\n    \n    arr = [1, 1, 2, 3, 3, 4, 4, 4]\n    sum = 4\n    print(\"Pass\" if (0 == get_pairs_count(arr, sum)) else \"Fail\")\n    \n    arr = [10, 1, 2, 3, 3, 4, 4, 4]\n    sum = 9\n    print(\"Pass\" if (0 == get_pairs_count(arr, sum)) else \"Fail\")\n    \n    arr = [1, 1, 2, 3, 3, 4, 4, 4]\n    sum = 4\n    print(\"Pass\" if (4 == get_pairs_count(arr, sum)) else \"Fail\")\n    \n    arr = [10, 1, 2, 3, 3, 4, 4, 4]\n    sum = 9\n    print(\"Pass\" if (2 == get_pairs_count(arr, sum)) else \"Fail\")\n    \n    arr = [10, 1, 2, 3, 3, 4, 4, 4]\n    sum = 4\n    print(\"Pass\" if (0 == get_pairs_count(arr, sum)) else \"Fail\")\n    \n    arr = [10, 1, 2, 3, 3, 4, 4, 4]\n    sum = 9\n    print(\"Pass\" if (4 == get_pairs_count(arr, sum)) else \"Fail\")\n    \n    arr = []\n    sum = 1\n    print(\"Pass\" if (0 == get_pairs_count(arr, sum)) else \"Fail\")\n    \n    arr = [1, 1, 2, 3, 3, 4, 4, 4]\n    sum = 4\n    print(\"Pass\" if (0 == get_pairs_count(arr, sum)) else \"Fail\")\n    \n    arr = [-10, -1, 2, 3, 3, 4, 4, 4]\n    sum = 4\n    print(\"Pass\" if (0 == get_pairs_count(arr, sum)) else \"Fail\")\n    \n    arr = [-10, -1, 2, 3, 3, 4, 4, 4]\n    sum = -9\n    print(\"Pass\" if (0 == get_pairs_count(arr, sum)) else \"Fail\")\n    \n    arr = []\n    sum = -10\n    print(\"Pass\" if (0 == get_pairs_count(arr, sum)) else \"Fail\")\n    \n    arr = [-10, -1, 2, 3, 3, 4, 4, 4]\n    sum = -9\n    print(\"Pass\" if (0 == get_pairs_count(arr, sum)) else \"Fail\")\n    \n    arr = []\n    sum = -10\n    print(\"Pass\" if (0 == get_pairs_count(arr, sum)) else \"Fail\")\n    \n    arr = [1, 1, 2, 3, 3, 4, 4, 4]\n    sum = 4\n    print(\"Pass\" if (0 == get_pairs_count(arr, sum)) else \"Fail\")\n    \n    arr = [10, 1, 2, 3, 3, 4, 4, 4]\n    sum = 9\n    print(\"Pass\" if (0 == get_pairs_count(arr, sum)) else \"Fail\")\n    \n    arr = [1, 1, 2, 3, 3, 4, 4, 4]\n    sum = 4\n    print(\"Pass\" if (4 == get_pairs_count(arr, sum)) else \"Fail\")\n    \n    arr = [10, 1, 2, 3, 3, 4, 4, 4]\n    sum = 9\n    print(\"Pass\" if (2 == get_pairs_count(arr, sum)) else \"Fail\")\n    \n    arr = []\n    sum = 1\n    print(\"Pass\" if (0 == get_pairs_count(arr, sum)) else \"Fail\")\n    \n    arr = [1, 1, 2, 3, 3, 4, 4, 4]\n    sum = 4\n    print(\"Pass\" if (0 == get_pairs_count(arr, sum)) else \"Fail\")\n    \n    arr = [-10, -1, 2, 3, 3, 4, 4, 4]\n    sum = 4\n    print(\"Pass\" if (0 == get_pairs_count(arr, sum)) else \"Fail\")\n    \n    arr = [-10, -1, 2, 3, 3, 4, 4, 4]\n    sum = -9\n    print(\"Pass\" if (0 == get_pairs_count(arr, sum)) else \"Fail\")\n    \n    arr = []\n    sum = -10\n    print(\"Pass\" if (0 == get_pairs_count(arr, sum)) else \"Fail\")\n    \n    arr = [-10, -1, 2, 3, 3, 4, 4, 4]\n    sum = -9\n    print(\"Pass\" if (0 == get_pairs_count(arr, sum)) else \"Fail\")\n    \n    arr = []\n    sum = -10\n    print(\"Pass\" if (0 == get_pairs_count(arr, sum)) else \"Fail\")\n    \n    arr = [1, 1, 2, 3, 3, 4, 4, 4]\n    sum = 4\n    print(\"Pass\" if (0 == get_pairs_count(arr, sum)) else \"Fail\")\n    \n    arr = [10, 1, 2, 3, 3, 4, 4, 4]\n    sum = 9\n    print(\"Pass\" if (0 == get_pairs_count(arr, sum)) else \"Fail\")\n    \n    arr = [1, 1, 2, 3, 3, 4, 4, 4]\n    sum = 4\n    print(\"Pass\" if (4 == get_pairs_count(arr, sum)) else \"Fail\")\n    \n    arr = [10, 1, 2, 3, 3, 4, 4, 4]\n    sum = 9\n    print(\"Pass\" if (2 == get_pairs_count(arr, sum)) else \"Fail\")\n    \n    arr = []\n    sum = 1\n    print(\"Pass\" if (0 == get_pairs_count(arr, sum)) else \"Fail\")\n    \n    arr = [1, 1, 2, 3, 3, 4, 4, 4]\n    sum = 4\n    print(\"Pass\" if (0 == ge"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_pairs_count([1, 2, 3, 4], 3) == 2\nassert     get_pairs_count([1, 2, 3, 4], 5) == 0\nassert     get_pairs_count([1, 2, 3, 4], 4) == 2\nassert     get_pairs_count([1, 2, 3, 4], 10) == 4\nassert     get_pairs_count([1, 2, 3, 4], 2) == 1\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_pairs_count([1, 2, 3, 4, 5], 6) == 1\nassert     get_pairs_count([1, 2, 3, 4, 5], 5) == 0\n\ndef sort_pairs(arr):\n    '''\n    Write a python function to sort the list of numbers in ascending order\n    '''\n    pass\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(get_pairs_count([1,2,3,4,5,6,7,8,9,10],5))\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nif __name__ == '__main__':\n    li1 = ['python','is','a','good','language']\n    li2 = ['python','is','a','good','programmer']\n    li3 = Diff(li1,li2)\n    print('li1:',li1)\n    print('li2:',li2)\n    print('li3:',li3)\n    \n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Diff([1, 2, 3], [2, 1, 3]) == 2\nassert     Diff([1, 2, 3], [3, 1, 2]) == 2\nassert     Diff([1, 2, 3], [4, 1, 3]) == 3\nassert not Diff([1, 2, 3], [3, 1, 4])\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert Diff(['one', 'two', 'three'],['one', 'two', 'four', 'five']) == ['three','five'], \"Test failed: Result should be ['three','five'].\"\nassert \nassert Diff([1,2,3],[2,3,4]) == [1,4], \"Test failed: Result should be [1,4].\"\nassert \n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Diff([1,2,3], [1,2,3,4]) == [2,3], 'wrong'\nassert     Diff([1,2,3], [1,2,3,4,5]) == [2,3,4], 'wrong'\n\nprint('Diff:', 'ok')\n\ndef Diff_with_class(li1,li2):\n    '''\n    Write a python class to get the difference between two lists.\n    '''\n    pass\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Diff(['a','b','c','d','e'],['a','b','e'])\nassert not Diff(['a','b','c','d','e'],['a','b','f'])\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Diff([1,2,3],[1,2]) ==     [3], 'Should be : [3]'\nassert     Diff([1,2,3],[1]) ==     [2,3], 'Should be : [2,3]'\nassert     Diff([1,2,3],[]) ==     [1,2,3], 'Should be : [1,2,3]'\nassert     Diff([1],[]) ==     [1], 'Should be : [1]'\nassert     Diff([],[[]]) ==     [], 'Should be : []'\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    "
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nDiff([1,3,4,6],[1,2,3,4]) == 3, \"wrong\"\nprint(\"Correct\")"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert odd_num_sum(2) == 26\nassert odd_num_sum(10) == 385\nassert odd_num_sum(100) == 2464\nassert odd_num_sum(0) == 0\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     odd_num_sum(4) == 0, \"Unexpected result for test case 4\"\nassert     odd_num_sum(2) == 4, \"Unexpected result for test case 2\"\nassert     odd_num_sum(1) == 4, \"Unexpected result for test case 1\"\nassert     odd_num_sum(0) == 0, \"Unexpected result for test case 0\"\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     odd_num_sum(1) == 1\nassert odd_num_sum(2) == 9\nassert odd_num_sum(3) == 32\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     odd_num_sum(1) == 0\nassert     odd_num_sum(2) == 1\nassert     odd_num_sum(3) == 2\nassert     odd_num_sum(4) == 4\nassert     odd_num_sum(5) == 9\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     odd_num_sum(0) == 0\nassert     odd_num_sum(1) == 0\nassert     odd_num_sum(3) == 0\nassert     odd_num_sum(4) == 2\nassert     odd_num_sum(11) == 0\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     odd_num_sum(5) == 27 \nassert     odd_num_sum(9) == 50\nassert     odd_num_sum(13) == 90\nassert     odd_num_sum(0) == 0\nassert     odd_num_sum(-1) == 0\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     odd_num_sum(2) == 15\nassert     odd_num_sum(3) == 50\nassert     odd_num_sum(4) == 75\nassert     odd_num_sum(5) == 90\nassert     odd_num_sum(6) == 120\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     odd_num_sum(1) == 0\nassert     odd_num_sum(2) == 1\nassert     odd_num_sum(3) == 2\nassert     odd_num_sum(4) == 3\nassert     odd_num_sum(5) == 7\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_expression('') == True, 'Please check your code'\nassert     check_expression('a+b') == False, 'Please check your code'\nassert     check_expression('1+2') == False, 'Please check your code'\nassert     check_expression('1+2+3') == True, 'Please check your code'\nassert     check_expression('1+2') == True, 'Please check your code'\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_expression('(a+b)') == True, \"Should be True\"\nassert     check_expression('((a+b)+(a+b))') == True, \"Should be True\"\nassert     check_expression('(((a+b)+(a+b))+(a+b))') == True, \"Should be True\"\nassert     check_expression('((((a+b)+(a+b))+(a+b))+(a+b))') == True, \"Should be True\"\nassert     check_expression('(((((a+b)+(a+b))+(a+b))+(a+b))+(a+b))') == True, \"Should be True\"\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert not check_expression(\"{1, 2} + (1)\") == True\nassert check_expression(\"{1, 2} + (1)\") == True\nassert not check_expression(\"{1, 2} + (1)\") == False\nassert check_expression(\"{1, 2} + (1)\") == False\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_expression([\"(\",\"(\",\"a\",\"+\",\"b\"),\"+\",\")\"]) == True\nassert     check_expression([\"(\",\"a\",\")\",\"+\",\"b\"]) == False\nassert     check_expression([\"a\"]) == True\nassert     check_expression([\"(\",\"a\",\"b\",\")\"]) == False\nassert     check_expression([\"(\",\"a\",\"b\",\"(\",\"c\",\"d\",\")\",\"e\",\"f\"]) == True\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_expression(\"(((())))\") == True\nassert     check_expression(\"(((((())))))\") == False\nassert     check_expression(\"((()))\") == True\nassert     check_expression(\"(())\") == True\nassert     check_expression(\"()\") == False\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_expression('((a+b*(((c)/d)^((((((a+b)/c)-(a*b))-((a-b)/c)^((((a+b)/c)-a*b)))/(a-b))-((a+b)/(a-b)))-((a+b)/(a-b)))-((a+b)/(a-b)))-((a+b)/(a-b)))-((a+b)/(a-b)))-((a+b)/(a-b)))-((a+b)/(a-b)))-((a+b)/(a-b)))') == True\nassert check_expression('((((a+b)/c)-(a*b))-((a+b)/c)^((((a+b)/c)-a*b)))/(a-b)^((((a+b)/c)-a*b))-((a+b)/c)^((((a+b)/c)-a*b)))/(a-b)^((((a+b)/c)-a*b))-((a+b)/c)^((((a+b)/c)-a*b)))-((a+b)/(a-b)))-((a+b)/(a-b)))-((a+b)/(a-b)))') == False\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_expression(\"(a)\") == True\nassert    check_expression(\"(a)\") == False\nassert    check_expression(\"(a)()\") == True\nassert    check_expression(\"(a)())\") == False\nassert    check_expression(\"(a)()(a)\") == False\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n'''\nExample 1:\n\nInput: \"({a+b})\"\nOutput: True\nExplanation: \nThe input string is {a+b}. The brackets are balanced, so return True.\nExample 2:\n\nInput: \"(a+{b})\"\nOutput: False\nExplanation:\nThe input string is (a+{b}. The brackets are not balanced, so return False.\n'''\n\ndef is_correct_bracket(bracket):\n    #return True if bracket is balanced\n    if bracket == '(' or bracket == '{' or bracket == '[' or bracket == '<':\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_expression('(((())))') == True\nassert     check_expression('((()))') == False\nassert     check_expression('((())') == False\nassert     check_expression('()') == True\nassert     check_expression('{()}') == True\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_expression(\"()\") == True, \"test 1 failed\"\nassert check_expression(\"()\") == True, \"test 2 failed\"\nassert check_expression(\"(())\") == True, \"test 3 failed\"\nassert check_expression(\"((()))\") == True, \"test 4 failed\"\nassert check_expression(\"(((())))\") == True, \"test 5 failed\"\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_length('I am a student', 0) == 'I am a student'\nassert     remove_length('I am a student', 1) == 'I am a s'\nassert     remove_length('I am a student', 2) == 'I am a student'\nassert     remove_length('I am a student', 3) == 'I am a st'\nassert     remove_length('I am a student', 4) == 'I am a st'\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_length('abcabcabcabc', 1) == 'ab'\nassert     remove_length('abcabcabcabc', 2) == 'bc'\nassert     remove_length('abcabcabcabc', 3) == 'ab'\nassert     remove_length('abcabcabcabc', 4) == 'a'\nassert     remove_length('abcabcabcabc', 5) == ''\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_length('short', 1) ==     'in'\nassert     remove_length('programming', 1) ==     'rgm'\nassert     remove_length('this is a test', 1) ==     'th is t si'\nassert     remove_length('', 1) ==     ''\nassert     remove_length('program', 4) ==     'rs'\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_length(\"hello world is a test\", 1) == \"hello world is a test\", \"Should be 'hello world is a test'\"\nassert     remove_length(\"hello world is a test\", 5) == \"\", \"Should be ''\", \"Should be ''\"\nassert     remove_length(\"hello world is a test\", 0) == \"\", \"Should be ''\", \"Should be ''\"\nassert     remove_length(\"hello world is a test\", -1) == \"\", \"Should be ''\", \"Should be ''\"\nassert     remove_length(\"hello world is a test\", 2) == \"ello world is a test\", \"Should be 'ello world is a test'\"\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    pass\n\ndef remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    pass\n\n\n\nif __name__ == \"__main__\":\n    print(\"Please enter a sentence: \")\n    test_str = input()\n    print(\"Please enter the length: \")\n    K = int(input())\n    \n    "
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_length(\"this is a small text\", 4) == 'is a t'\nassert     remove_length(\"this is a small text\", 5) == 'is a t'\nassert     remove_length(\"this is a small text\", 6) == 'is a t'\nassert     remove_length(\"this is a small text\", 7) =='s t'\nassert     remove_length(\"this is a small text\", 8) =='s t'\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_length('', 0) == ''\nassert     remove_length('aaa', 0) == 'a'\nassert     remove_length('hello', 1) == 'o'\nassert     remove_length('helllo', 2) == 'hlo'\nassert     remove_length('hello', 3) == 'll'\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_length('the quick brown fox jumps', 2) == 'the quick'\nassert     remove_length('the quick brown fox jumps', 3) == 'the fox'\n\ndef remove_duplicates(test_str):\n    '''\n    Write a function to remove duplicate characters from the given string.\n    '''\n    pass\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_length(\"abcabc\", 3) == \"abc\"\nassert     remove_length(\"abccccdddeef\", 2) == \"abccdddeef\"\nassert     remove_length(\"abcabc\", 1) == \"abcabc\"\nassert     remove_length(\"abccccdddeef\", 5) == \"abccccdddeef\"\nassert     remove_length(\"abcabc\", 6) == \"\"\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     occurance_substring('abracadabra','abra')=={'abra':(0,4),'dabra':(4,9)}\nassert     occurance_substring('abracadabra','ra')=={'ra':(0,3)}\nassert     occurance_substring('abracadabra','ab')=={}\nassert     occurance_substring('abracadabra','a')=={'a':(0,1)}\nassert     occurance_substring('abracadabra','abracadabra')==None\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     occurance_substring(\"Totemof\", \"totem\") == (0,2), \"Invalid occurrence result\"\nassert     occurance_substring(\"Totemof\", \"mof\") == (0,2), \"Invalid occurrence result\"\nassert     occurance_substring(\"Totemof\", \"tmo\") == (0,2), \"Invalid occurrence result\"\nassert     occurance_substring(\"Totemof\", \"tmo\") == (1,2), \"Invalid occurrence result\"\nassert     occurance_substring(\"Totemof\", \"tot\") == (1,2), \"Invalid occurrence result\"\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     occurance_substring('this is python','th') == None\nassert     occurance_substring('this is python','th') == None\nassert     occurance_substring('this is python','th') == None\nassert     occurance_substring('this is python','th') == None\nassert     occurance_substring('this is python','th') == None\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     occurance_substring('abc','ab') == None\nassert     occurance_substring('abc','a') == 0\nassert     occurance_substring('abc','b') == 1\nassert     occurance_substring('abc','c') == 2\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     occurance_substring(\"abcdef\",\"a\") == (0,1)\nassert     occurance_substring(\"abcdef\",\"b\") == (1,2)\nassert     occurance_substring(\"abcdef\",\"c\") == (2,3)\nassert     occurance_substring(\"abcdef\",\"d\") == (3,4)\nassert     occurance_substring(\"abcdef\",\"e\") == (4,5)\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \noccurance_substring('abcdef','abc') == {'abc'}\noccurance_substring('abcdef','d') == None\noccurance_substring('abcdef','de') == {'def'}\noccurance_substring('abcdef','b') == None\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     occurance_substring('cat','cat') == (1,1)\nassert     occurance_substring('cat','catg') == (None,None)\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     odd_position([0, 1, 2, 3, 4, 5, 6]) == True, 'Wrong Output'\nassert     odd_position([0, 1, 2, 3, 4, 5, 6, 7]) == False, 'Wrong Output'\nassert     odd_position([1, 2, 3, 4, 5]) == False, 'Wrong Output'\nassert     odd_position([1, 2, 3, 4, 5, 6]) == True, 'Wrong Output'\nassert     odd_position([1, 2, 3, 4, 5, 6, 7]) == False, 'Wrong Output'\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nodd_position([1,2,3,4,5,6,7,8,9])"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nodd_position([0,1,2,3,4]) == False, \"Wrong output for list containing even numbers\"\nassert \nodd_position([0,1,2,3,4,5]) == False, \"Wrong output for list containing odd numbers\"\nassert \nodd_position([0,1,2,3,4,5,6,7,8]) == True, \"Wrong output for list containing even numbers\"\nassert \nodd_position([0,1,2,3,4,5,6,7,8,9]) == False, \"Wrong output for list containing odd numbers\"\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     odd_position([1, 2, 3, 4, 5]) == False\nassert     odd_position([1, 2, 4, 5]) == True\nassert     odd_position([1, 2, 3, 4, 5, 6, 7]) == True\nassert     odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9]) == False\n\ndef all_odd_index(nums):\n    '''\n    Write a python function to check whether a given list contains all even indices and all odd indices are false.\n    '''\n    pass\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     odd_position([1,2,3,4,5,6,7]) == True, \"The first list has only even numbers\"\nassert     odd_position([1,2,3,4,5,6,7,8]) == True, \"The first list has only even numbers\"\nassert     odd_position([1,2,3,4,5,6,7,8,9]) == False, \"The first list has only even numbers\"\nassert     odd_position([1,2,3,4,5,6,7,8,9,10]) == False, \"The first list has only even numbers\"\nassert     odd_position([1,2,3,4,5,6,7,8,9,10,11]) == False, \"The first list has only even numbers\"\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    # print(nums)\n    if len(nums) == 0:\n        return False\n    # print(nums[::2])\n    if len(nums) == 1:\n        return True\n    # print(nums[::2])\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i]!= nums[i+1]:\n                return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     odd_position([-1, -2, -3, 4, 5, 6, 7, 8, 9]) == True, 'Test Failed'\nassert     odd_position([-1, -2, -3, 4, 5, 6, 7, 8, 9, 10]) == False, 'Test Failed'\nassert     odd_position([-1, -2, -3, -4, 5, 6, 7, 8, 9]) == False, 'Test Failed'\nassert     odd_position([-1, -2, -3, -4, -5, 6, 7, 8, 9]) == False, 'Test Failed'\nassert     odd_position([-1, -2, -3, -4, -5, -6, 7, 8, 9]) == False, 'Test Failed'\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nodd_position([1,2,3,4,5,6,7]) == False\nassert odd_position([1,2,3,4,5,6,7,8]) == True\nassert odd_position([0,2,3,4,5,6,7]) == False\nassert odd_position([1,2,3,4,5,6,7,8,9]) == True\nassert odd_position([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) == False\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     odd_position([1, 2, 3, 4, 5, 6, 7, 8]) == True, \"odd_position([1, 2, 3, 4, 5, 6, 7, 8]) should return True\"\nassert     odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False, \"odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) should return False\"\nassert     odd_position([1, 2, 3, 4, 5, 6, 7]) == True, \"odd_position([1, 2, 3, 4, 5, 6, 7]) should return True\"\nassert     odd_position([]) == False, \"odd_position([]) should return False\"\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nodd_position([1,2,3,4,5,6,7,8,9])"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_vowels(\"\") == 0, \"Empty string\"\nassert     count_vowels(\"a\") == 0, \"One vowel\"\nassert     count_vowels(\"aaaaa\") == 1, \"Three vowels\"\nassert     count_vowels(\"abc\") == 0, \"More than 3 vowels\"\nassert     count_vowels(\"aa\") == 1, \"One vowel\"\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    count_vowels(\"Hello\") == 3\n    count_vowels(\"Hello world\") == 1\n    count_vowels(\"I love python\") == 3\n    count_vowels(\"I love Python\") == 4\n    count_vowels(\"I am an NLPer\") == 4\n    count_vowels(\"I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPer, yeah, I am, in reality, not that one. I am an NLPe"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_vowels('aabbdddd') == 2, \"should return 2\"\nassert     count_vowels('addasssddd') == 1, \"should return 1\"\nassert     count_vowels('qwertyuiopasdfghjklzxcvbnm') == 4, \"should return 4\"\nassert     count_vowels('iiiiiiii') == 4, \"should return 4\"\nassert     count_vowels('asdfghjklzxcvbnm') == 6, \"should return 6\"\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_vowels('bed') == 1, 'Not corrected'\nassert     count_vowels('bee') == 0, 'Not corrected'\nassert     count_vowels('c') == 0, 'Not corrected'\nassert     count_vowels('b') == 1, 'Not corrected'\nassert     count_vowels('ab') == 1, 'Not corrected'\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_vowels('abc') == 0, \"abc doesn't have vowels as neighbors\"\nassert     count_vowels('zabc') == 1, \"zabc should contain one vowel\"\nassert     count_vowels('abcd') == 0, \"abcd contains vowels\"\nassert     count_vowels('ab') == 1, \"ab contains one vowel\"\nassert     count_vowels('abcd') == 3, \"abcd contains three vowels\"\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_vowels(\"AaBbCc\") == 3, \"Test 1 Failed\"\nassert     count_vowels(\"AaBbCcDd\") == 4, \"Test 2 Failed\"\nassert     count_vowels(\"AaBbCcDdEe\") == 4, \"Test 3 Failed\"\nassert     count_vowels(\"AABBBCCCCDDDDEEEEEE\") == 9, \"Test 4 Failed\"\nassert     count_vowels(\"AAABBBBCCCCCDDDEEEEEE\") == 7, \"Test 5 Failed\"\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_vowels(\"air\") == 2, \"Should be 2\"\nassert     count_vowels(\"poultry\") == 2, \"Should be 2\"\nassert     count_vowels(\"nurse\") == 2, \"Should be 2\"\nassert     count_vowels(\"miles\") == 1, \"Should be 1\"\nassert     count_vowels(\"loves\") == 4, \"Should be 4\"\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_vowels(\"love\") == {'a': 2, 'o': 2, 'e': 2, 'l': 1, 'v': 1}\nassert     count_vowels(\"aeiou\") == {'a': 1, 'e': 1, 'i': 1, 'o': 1, 'u': 1}\nassert     count_vowels(\"Python\") == {'P': 1, 'y': 1, 't': 1, 'h': 1, 'n': 1}\nassert     count_vowels(\"^!@#$%^&*()_+=-\") == {'!': 1, '@': 1, '#': 1, '$': 1, '^': 1, '&': 1, '_': 1, '-': 1, '=': 1, '+': 1, '*': 1}\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nassert \n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_sum([1, 2, 3, 5, 4, 6]) == 0, 'Input: [1, 2, 3, 5, 4, 6], Output: 0'\nassert     find_sum([1, 2, 3, 5, 5, 6]) == 6, 'Input: [1, 2, 3, 5, 5, 6], Output: 6'\nassert     find_sum([1, 2, 3, 5, 4, 3]) == 0, 'Input: [1, 2, 3, 5, 4, 3], Output: 0'\nassert     find_sum([1, 2, 3, 4, 6, 5]) == 7, 'Input: [1, 2, 3, 4, 6, 5], Output: 7'\nassert     find_sum([1, 2, 4, 3, 5]) == 0, 'Input: [1, 2, 4, 3, 5], Output: 0'\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nfind_sum([1,2,3,4,5,6,7,8,9,10]) == 45\nfind_sum([1,1,1,1,1,1]) == 4"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_sum(arr=[5, 5, 6, 6, 6, 6]) == 12, 'find_sum is wrong'\nassert     find_sum(arr=[]) == 0, 'find_sum is wrong'\n\ndef find_sum2(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 15,'should be 15'\nassert     find_sum([1, 2, 3, 3, 4, 5, 6, 7, 8, 8]) == 11,'should be 11'\nassert     find_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 15,'should be 15'\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert find_sum([1,2,3,4,5,5]) == 6\nassert find_sum([1,2,3,4,5,6]) == 7\nassert find_sum([1,1,1]) == 2\nassert find_sum([1,1,2,2,2]) == 4\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_sum([0,1,1,2,3]) == 6\nassert     find_sum([0,1,2,3,4]) == 10\nassert     find_sum([1,2,2,3,4]) == 3\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_sum([1,1,1,2,2,2]) == 2, \"Should be 2\"\nassert     find_sum([1,1,2,2,2,3,4,5]) == 7, \"Should be 7\"\nassert     find_sum([1,2,3,3,4,5,6,7]) == 15, \"Should be 15\"\nassert     find_sum([2,2,2,3,3,4,5]) == 7, \"Should be 7\"\nassert     find_sum([3,3,3,3,3,4,5]) == 0, \"Should be 0\"\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_sum([1, 2, 3, 4, 5, 1, 1, 5, 6]) == 8\nassert     find_sum([]) == 0\nassert     find_sum([1, 1, 1, 2]) == 3\nassert     find_sum([1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 45\nassert     find_sum([1, 2, 2, 3, 3, 3, 4, 5, 5, 5, 6, 7, 7, 8, 9, 9, 10, 11, 12, 12, 13, 13, 13, 14, 15, 15]) == 60\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef find_sum_pythonic(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     pack_consecutive_duplicates([1,1,2,3,4,5,5,6]) == [[1,1,2,3,4,5], [5,6]]\nassert     pack_consecutive_duplicates([1,1,2,2,3,3,4,4,5,5,5,6]) == [[1,1,2,2], [3,3,4,4,5,5]]\n\ndef group_by_consecutive_numbers(list1):\n    '''\n    Write a function to group consecutive numbers into sublists of a given list.\n    '''\n    pass\n\ndef group_by_consecutive_numbers_extra(list1):\n    '''\n    Write a function to group consecutive numbers into sublists of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     pack_consecutive_duplicates([1,1,1,1,1,2,2,2,3,3]) == [[1,1,1], [1,2], [2,2], [3]]\nassert pack_consecutive_duplicates([\"a\",\"a\",\"a\",\"b\",\"b\",\"b\"]) == [['a', 'a', 'a'], ['b', 'b', 'b']]\n\n\n\ndef group_the_baskets_by_the_key(list_of_pairs):\n    '''\n    Write a function to group the given list of pairs by the key,\n    i.e. the value of each pair should be grouped into a separate list.\n    The pairs should be arranged in increasing order by the first element.\n    '''\n    pass\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     pack_consecutive_duplicates([1, 2, 2, 2, 3]) == [[1, 2], [2, 2, 2], [2, 3]]\nassert     pack_consecutive_duplicates([1, 2, 2, 3, 4, 5, 6, 6, 7, 8, 9]) == [[1, 2, 2], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 6], [6, 7, 8], [7, 8, 9]]\nassert     pack_consecutive_duplicates([1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3]) == [[1, 1, 1], [1, 2, 2], [2, 3, 3]]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     pack_consecutive_duplicates([0, 1, 2, 3, 4, 5]) == [[0, 1, 2], [3, 4, 5]]\nassert     pack_consecutive_duplicates([0, 1, 2, 1, 2, 2]) == [[0, 1], [1, 2, 2]]\nassert     pack_consecutive_duplicates([2, 1, 2, 1, 2, 3]) == [[2, 1], [2, 2, 3]]\nassert     pack_consecutive_duplicates([3, 1, 2, 1, 2, 3]) == [[3, 1, 2], [1, 2, 3]]\n\ndef pad_pairs(input1, input2):\n    '''\n    Write a function to pad the shorter list with the number of missing elements to be divisible by the length of the longer list.\n    '''\n    pass\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     pack_consecutive_duplicates([0, 1, 2, 2, 3, 4, 5]) == [[0, 1, 2], [2, 3, 4], [5]]\nassert     pack_consecutive_duplicates([0, 1, 2, 3, 4, 4, 5]) == [[0, 1, 2, 3], [4, 5]]\nassert     pack_consecutive_duplicates([0, 1, 2, 3, 4, 5, 5, 5]) == [[0, 1, 2], [3, 4, 5], [5]]\nassert     pack_consecutive_duplicates([0, 1, 2, 3, 4, 5, 5, 6]) == [[0, 1, 2], [3, 4, 5], [6]]\nassert     pack_consecutive_duplicates([0, 1, 2, 3, 4, 5, 5, 6, 6, 6, 7]) == [[0, 1, 2], [3, 4, 5], [6, 6, 7]]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef test_pack_consecutive_duplicates():\n    assert \n\ndef find_first_duplicate(list1):\n    '''\n    Write a function to find the first duplicate in the given list.\n    '''\n    pass\n\ndef find_first_duplicate_1(list1):\n    '''\n    Write a function to find the first duplicate in the given list.\n    '''\n    pass\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef remove_duplicates(list1):\n    '''\n    Write a function to remove all the duplicates of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     pack_consecutive_duplicates([1,2,1,3,4,5,1,6,7,8,1]) == [[1,2,3,4,5],[6,7,8]]\nassert     pack_consecutive_duplicates([1,2,1,3,4,5,1,6,7,8,1,1,2]) == [[1,2,3,4,5,1],[6,7,8,1,2]]\nassert     pack_consecutive_duplicates([1,1,2,2,2,3,4,5,5,5,6,7,8]) == [[1,2,2,3,4,5],[5,6,7,8]]\nassert     pack_consecutive_duplicates([1,2,1,3,4,5,1,6,7,8,1,1,2,1,3,4,5,1,6,7,8]) == [[1,2,1,3,4,5],[6,7,8,1,2],[1,3,4,5,1]]\nassert     pack_consecutive_duplicates([1,2,1,3,4,5,1,6,7,8,1,1,2,1,3,4,5,1,6,7,8,1]) == [[1,2,1,3,4,5],[6,7,8,1,2,1],[1,3,4,5,1]]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     pack_consecutive_duplicates([1,2,3,4,5,6,7]) == [[1,2,3,4,5,6], [7]]\nassert     pack_consecutive_duplicates([1,2,3,4,5,6,7,8,9,10]) == [[1,2,3,4,5,6], [7,8,9,10]]\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     unique_sublists([[1, 2, 3], [2, 3], [1, 1, 1], [1, 2]]) == {([1, 2, 3], 2), ([2, 3], 1), ([1, 1, 1], 1), ([1, 2], 1)}\nassert     unique_sublists([[1, 2], [1, 2], [2, 3], [2, 3]]) == {([1, 2], 2), ([2, 3], 2)}\nassert     unique_sublists([[1, 2, 3], [1, 2], [2, 3], [3, 4], [3, 4], [3]]) == {([1, 2, 3], 3), ([3, 4], 2), ([2, 3], 2), ([3, 4], 1)}\nassert     unique_sublists([[1, 2, 3, 4], [1, 2, 3, 4], [2, 3, 4, 5], [2, 3, 4, 5]]) == {([1, 2, 3, 4], 4), ([2, 3, 4, 5], 4), ([1, 2, 3, 4], 3), ([2, 3, 4, 5], 3)}\nassert     unique_sublists([[1, 2, 3, 4], [2, 3, 4, 5], [1, 2, 3, 4], [2, 3, 4, 5]]) == {([1, 2, 3, 4], 4), ([2, 3, 4, 5], 4), ([1, 2, 3, 4], 3), ([2, 3, 4, 5], 3)}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint('\\nTesting...')\nassert unique_sublists(['a', 'b', 'a', 'c']) == {('a', 'b', 'a', 'c'): 3}\nassert unique_sublists([]) == {}\nassert unique_sublists([1]) == {}\nprint('OK')\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     unique_sublists([1,2,3,4,1,1]) == {1:2,2:1,3:1,4:1}\nassert     unique_sublists([1,1,1,1,1]) == {1:5}\nassert     unique_sublists([1,1,1,1,1,1]) == {1:5}\nassert     unique_sublists([1,1,1,1,1,1,1]) == {1:5}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     unique_sublists([[1, 2], [2], [3]]) == {(1, 2): 1, (2,): 1, (3,): 1}\nassert     unique_sublists([[1, 2], [2], [3]]) == {(1, 2): 1, (2,): 1, (3,): 1}\nassert     unique_sublists([[1, 2], [2], [1, 2], [1]]) == {(1, 2): 4}\nassert     unique_sublists([[1, 2], [2], [1, 2], [1]]) == {(1, 2): 4}\nassert     unique_sublists([[1, 2], [2], [1, 2], [1]]) == {(1, 2): 4}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     unique_sublists([]) == {}\nassert     unique_sublists([1,2,3,4,5]) == {(1,3,5): 1, (2,4,5): 1, (3,4,5): 1}\nassert     unique_sublists([1,1,2,3,4,4,5,5]) == {(1,1,2,3,4,4,5,5): 2}\nassert     unique_sublists([1,1,1,2,2,2,3,3,3,4,4,4,4,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     unique_sublists([]) == {}\nassert     unique_sublists([[]]) == {}\nassert     unique_sublists([[1]]) == {(1,): 1}\nassert     unique_sublists([[1], [1]]) == {(1,): 2}\nassert     unique_sublists([[1, 1], [1]]) == {(1, 1): 2}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     unique_sublists([[1, 2], [3], [4], [5], [6]]) == {([1, 2], 1), ([3], 1), ([4], 1), ([5], 1), ([6], 1)}\nassert     unique_sublists([[1, 2], [3], [1], [1]]) == {([1, 2], 2), ([3], 1), ([1], 2)}\nassert     unique_sublists([[1, 2], [3], [1]]) == {([1, 2], 2), ([3], 1)}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     unique_sublists([[1,2],[1,2],[3]]) == {(1,2):3, (1,2):2, (3):1}\nassert     unique_sublists([[1,2],[1,2],[1,2]]) == {(1,2):3, (1,2):2, (1,2):1}\nassert     unique_sublists([[1,2],[1,2]]) == {(1,2):2, (1,2):1}\nassert     unique_sublists([[1]]) == {(1):1}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     unique_sublists([[[1,2],3],[1,2,3],[1,2,3,4],[1,2,3,4,5]]) ==     {((1,2),1):1,((1,2),2):1,((1,2),3):2,((1,2),4):1,((1,2),5):1}\nassert     unique_sublists([[[1,2],3],[1,2,3],[1,2,3,4],[1,2,3,4,5]]) ==     {((1,2),1):1,((1,2),2):1,((1,2),3):2,((1,2),4):1,((1,2),5):1}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     unique_sublists([[1, 2, 3], [1, 2, 3]]) == {([1, 2, 3], 3): 1, ([1, 2, 3], 2): 1, ([1, 2, 3], 1): 1}\nassert     unique_sublists([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == {([1, 2, 3], 3): 3, ([1, 2, 3], 2): 2, ([1, 2, 3], 1): 2}\nassert     unique_sublists([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == {([1, 2, 3], 3): 3, ([1, 2, 3], 2): 2, ([1, 2, 3], 1): 2}\nassert     unique_sublists([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == {([1, 2, 3], 3): 3, ([1, 2, 3], 2): 2, ([1, 2, 3], 1): 2}\nassert     unique_sublists([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == {([1, 2, 3], 3): 3, ([1, 2, 3], 2): 2, ([1, 2, 3], 1): 2}\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_combinations([(1,2),(4,5,6)]) == [\n    (1,2),\n    (2,4),\n    (3,5),\n    (4,6),\n    (4,5,6)\n]\n\nassert find_combinations([(1,2),(2,3),(4,5,6)]) == [\n    (1,2,3),\n    (2,3,4),\n    (2,3,5),\n    (2,3,6),\n    (2,4,5),\n    (2,4,6),\n    (2,5,6),\n    (3,4,5),\n    (3,4,6),\n    (3,5,6)\n]\n\nassert find_combinations([(1,2),(2,3),(4,5,6)]) == [\n    (1,2,3),\n    (2,3,4),\n    (2,3,5),\n    (2,3,6),\n    (2,4,5),\n    (2,4,6),\n    (2,5,6),\n    (3,4,5),\n    (3,4,6),\n    (3,5,6)\n]\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_combinations([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == [\n    (1, 2, 3, 4, 5, 6, 7, 8, 9)], \"Wrong combination\"\nassert     find_combinations([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == \n    [(1, 2, 3), (4, 5, 6), (7, 8, 9)], \"Wrong combination\"\nassert     find_combinations([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == \n    [(1, 2, 3), (4, 5, 6), (7, 8, 9)], \"Wrong combination\"\nassert     find_combinations([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == \n    [(1, 2, 3), (4, 5, 6), (7, 8, 9)], \"Wrong combination\"\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_combinations([(0, 1, 2), (0, 1), (1, 2, 3), (1, 3), (2, 3)]) == [(0, 1, 2), (0, 1), (1, 2, 3), (1, 3), (2, 3)]\nassert find_combinations([(0, 1, 2), (0, 1), (2, 3, 4), (1, 2, 3)]) == [(0, 1, 2), (0, 1), (0, 2, 3), (1, 2, 3), (2, 3, 4)]\nassert find_combinations([(0, 1), (1, 2, 3)]) == [(0, 1), (1, 2, 3)]\nassert find_combinations([(0, 1, 2), (0, 1), (2, 3), (1, 3), (3, 4), (2, 4)]) == [(0, 1, 2), (0, 1), (0, 2, 3), (0, 3), (0, 4), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]\nassert find_combinations([(0, 1), (1, 2), (1, 3)]) == [(0, 1), (1, 2), (1, 3)]\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_combinations([1,2,3,4]) == [1,2,3,4]\nassert     find_combinations([1,2,3,4,5]) == []\nassert     find_combinations([1,1,2,3,4,5]) == [(1,1), (1,2), (1,3), (1,4), (1,5), (2,3), (2,4), (2,5), (3,4), (3,5), (4,5)]\nassert     find_combinations([1,1,2,2,3,3,4,4,5,5]) == [(1,1), (1,2), (1,3), (1,4), (1,5), (2,2), (2,3), (2,4), (2,5), (3,3), (3,4), (3,5), (4,4), (4,5), (5,5)]\nassert     find_combinations([1,2,3,4,5]) == [(1,2,3,4,5)]\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_combinations([(1, 2), (3, 4), (5, 6)]) ==     [(1, 3, 5), (1, 2, 4), (2, 4, 6), (1, 5, 6)]\nassert     find_combinations([(1, 2), (3, 4), (5, 6)]) ==     [(1, 3, 5), (1, 2, 4), (2, 4, 6), (1, 5, 6)]\nassert     find_combinations([(1, 2), (3, 4), (5, 6)]) ==     [(1, 3, 5), (1, 2, 4), (2, 4, 6), (1, 5, 6)]\nassert     find_combinations([(1, 2), (3, 4), (5, 6)]) ==     [(1, 3, 5), (1, 2, 4), (2, 4, 6), (1, 5, 6)]\nassert     find_combinations([(1, 2), (3, 4), (5, 6)]) ==     [(1, 3, 5), (1, 2, 4), (2, 4, 6), (1, 5, 6)]\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_combinations(['a','b','c','d','e']) == [['a', 'b', 'c'], ['a', 'b', 'd'], ['a', 'b', 'e'], ['a', 'c', 'd'], ['a', 'c', 'e'], ['a', 'd', 'e'], ['b', 'c', 'd'], ['b', 'c', 'e'], ['b', 'd', 'e'], ['c', 'd', 'e']]\n\nprint(\"\\nTests: find_combinations function\")\nprint(\"passed\") if find_combinations(['a','b','c','d','e']) == [['a', 'b', 'c'], ['a', 'b', 'd'], ['a', 'b', 'e'], ['a', 'c', 'd'], ['a', 'c', 'e'], ['a', 'd', 'e'], ['b', 'c', 'd'], ['b', 'c', 'e'], ['b', 'd', 'e'], ['c', 'd', 'e']] else print(\"failed\")\n\nprint(\"\\nTests: combinations function\")\nprint(\"passed\") if combinations([1, 2, 3, 4, 5], 2) == [(1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5), (4, 5)] else print(\"failed\")\nprint(\"\\nTests: combinations_with_replacement function\")\nprint(\"passed\") if combinations_with_replacement([1, 2, 3, 4, 5], 2) == [(1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (2, 2), (2, 3), (2, 4), (2, 5), (3, 3), (3, 4), (3, 5), (4, 4), (4, 5), (5, 5)] else print(\"failed\")\n\nprint(\"\\nTests: combinations function\")\nprint(\"passed\") if combinations([1, 2, 3, 4, 5], 3) == [(1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 3, 4), (1, 3, 5), (1, 4, 5), (2, 3, 4), (2, 3, 5), (2, 4, 5), (3, 4, 5)] else print(\"failed\")\nprint(\"\\nTests: combinations_with_replacement function\")\nprint(\"passed\") if combinations_with_replacement([1, 2, 3, 4, 5], 3) == [(1, 1, 1), (1, 1, 2), (1, 1, 3), (1, 2, 2), (1, 2, 3), (1, 3, 3), (2, 2, 2), (2, 2, 3), (2, 3, 3), (3, 3, 3)] else print(\"failed\")\n\nprint(\"\\nTests: combinations function\")\nprint(\"passed\") if combinations([1, 2, 3, 4, 5], 4) == [(1, 2, 3, 4), (1, 2, 3, 5), (1, 2, 4, 5), (1, 3, 4, 5), (2, 3, 4, 5), (2, 4, 5, 5), (3, 4, 5, 5)] else print(\"failed\")\nprint(\"\\nTests: combinations_with_replacement function\")\nprint(\"passed\") if combinations_with_replacement([1, 2, 3, 4, 5], 4) == [(1, 1, 1, 1), (1, 1, 1, 2), (1, 1, 1, 3), (1, 1, 2, 2), (1, 1, 2, 3), (1, 2, 2, 2), (1, 2, 2, 3), (1, 3, 3, 3), (2, 3, 3, 3), (2, 4, 4, 4), (2, 4, 4, 5), (2, 4, 5, 5), (3, 4, 5, 5), (3, 5, 5, 5)] else print(\"failed\")\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_combinations([(1, 2), (1, 3), (2, 3), (3, 4), (3, 5)]) == \\\n    [(3, 4), (3, 5), (3, 6), (3, 7), (3, 8), (3, 9), (3, 10)]\n\nprint('find_combinations: passed')\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_combinations([(2,4),(3,2),(1,3),(5,3),(4,2)]) == [(2,2),(2,3),(2,4),(2,5),(3,2),(3,3),(3,4),(3,5),(4,2),(4,3),(4,4),(4,5)]\nassert     find_combinations([(1,2),(2,1)]) == []\n\ndef find_subset(test_list):\n    '''\n    Write a function to find the subsets in a given list. https://www.geeksforgeeks.org/python-find-subsets-in-a-list/\n    '''\n    pass\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nfind_combinations([[1,2,3,4,5],[3,4,5,6,7],[3,4,6,7,8],[4,5,6,7,8]]) == [[1, 2, 3, 4, 5], [3, 4, 5, 6, 7], [3, 4, 6, 7, 8], [4, 5, 6, 7, 8]]\nassert find_combinations([[1,2,3,4,5],[3,4,5,6,7],[3,4,6,7,8],[4,5,6,7,8]]) == []\nassert find_combinations([[1,2,3,4,5],[3,4,5,6,7],[3,4,6,7,8],[4,5,6,7,8],[4,5,6,7,8]]) == [[4, 5, 6, 7, 8]]\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef sum_digits(number) :\n    '''\n    Write a python function to find the sum of the digits in a number\n    '''\n    pass\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ncount_divisors(4) == 3, 'wrong count of divisors'\ncount_divisors(3) == 3, 'wrong count of divisors'\n\ndef check_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(count_divisors(5))\n\n\ndef count_divisors_1(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(count_divisors(4))\nassert count_divisors(5) == 6\nprint(\"test case is passed\")\n\ndef count_divisors_even(n):\n    '''\n    Write a python function to count the count of divisors of even numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-23.php\n    '''\n    pass\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef sum_digits(n) : \n    '''\n    Write a python function to sum the digits in a number.\n    '''\n    pass\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert count_divisors(0) == False\nassert count_divisors(1) == False\nassert count_divisors(2) == True\nassert count_divisors(3) == True\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ncount_divisors(10) == 4\nprint('Test case passed')\n\ndef check_number_of_divisors(n) :\n    '''\n    Write a python function to find the number of divisors of the given number n.\n    '''\n    pass\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ncount_divisors(0)\nassert count_divisors(3) == 3\nassert count_divisors(4) == 4\nassert count_divisors(5) == 5\nassert count_divisors(6) == 6\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef count_divisors_2(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. \n    Note: return the number of factors \n    '''\n    pass\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nodd_length_sum([1, 2, 3, 4, 5, 6, 7, 8]) == 33\nassert odd_length_sum([10, 2, 9, 1, 8, 4, 7, 5, 3, 6, 11, 5]) == 30"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     odd_length_sum([3, 6, 2, 2]) == 9, 'test_odd_length_sum:expected_result:expected_result'\nassert     odd_length_sum([3, 6, 2, 2, 5, 4]) == 18, 'test_odd_length_sum:expected_result:expected_result'\n\n\ndef odd_length_sum_using_slicing(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    pass\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     odd_length_sum([1, 2, 3, 4]) == 5\nassert     odd_length_sum([1, 2, 3, 4, 5]) == 10\nassert     odd_length_sum([1, 2, 3, 4, 5, 6]) == 16\nassert     odd_length_sum([1, 2, 3, 4, 5, 6, 7, 8]) == 26\nassert     odd_length_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 30\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nodd_length_sum([1, 2, 3, 4, 5]) == 15, \"wrong\"\nassert odd_length_sum([1, 2, 3, 4, 5, 6, 7]) == 20, \"wrong\"\nassert odd_length_sum([1, 2, 3, 4, 5, 6, 7, 8]) == 27, \"wrong\"\nassert odd_length_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 36, \"wrong\"\nassert odd_length_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 40, \"wrong\"\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\narr = [0, 1, 2, 3, 4, 5]\nodd_length_sum(arr)\n\narr = [10, 11, 12, 13, 14, 15, 16, 17]\nodd_length_sum(arr)\n\narr = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]\nodd_length_sum(arr)\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nodd_length_sum([10, 4, 7, 6, 8, 1, 5, 2, 8, 3, 5]) == 20\nodd_length_sum([10, 4, 7, 6, 8, 1, 5, 2, 9, 3, 5]) == 20\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     odd_length_sum([1, 2, 3]) == 4\nassert     odd_length_sum([1, 2, 3, 4, 5, 6]) == 11\nassert     odd_length_sum([1, 2, 3, 4, 5, 6, 7]) == 13\nassert     odd_length_sum([1, 2, 3, 4, 5, 6, 7, 8]) == 15\nassert     odd_length_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 18\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    arr = [1,2,3,4]\n    odd_length_sum(arr)\n\n    arr = [1,2,3]\n    odd_length_sum(arr"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    # \n    r = [0.0, 0.0, 0.0]\n    g = [0.0, 0.0, 0.0]\n    b = [0.0, 0.0, 0.0]\n    print('pass')\n    pass\n\ndef hsv_to_rgb(h, s, v):\n    '''\n    Write a function to convert hsv color to rgb color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    pass\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     rgb_to_hsv(255, 255, 255) == (255, 255, 255), \"rgb_to_hsv failed\"\nassert rgb_to_hsv(255, 0, 0) == (0, 0, 255), \"rgb_to_hsv failed\"\nassert rgb_to_hsv(255, 255, 0) == (255, 0, 0), \"rgb_to_hsv failed\"\nassert rgb_to_hsv(0, 255, 0) == (0, 255, 0), \"rgb_to_hsv failed\"\nassert rgb_to_hsv(0, 0, 255) == (0, 255, 0), \"rgb_to_hsv failed\"\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef hsv_to_rgb(h, s, v):\n    '''\n    Write a function to convert hsv color to rgb color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    pass\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rgb_to_hsv(1,2,3) == (0.64, 0.6666666666666666, 1.0)\nassert     rgb_to_hsv(1,2,0) == (1.0, 0.5, 0.0)\nassert     rgb_to_hsv(1,2,0.3333333333333333) == (0.3333333333333333, 1.0, 0.0)\nassert     rgb_to_hsv(1,2,0.3333333333333333) == (0.3333333333333333, 1.0, 0.0)\nassert     rgb_to_hsv(1,2,0.5) == (1.0, 0.5, 0.5)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     rgb_to_hsv(1, 1, 1) == (255, 255, 255)\nassert     rgb_to_hsv(0, 1, 1) == (0, 255, 255)\nassert     rgb_to_hsv(255, 1, 1) == (255, 255, 0)\nassert     rgb_to_hsv(1, 0, 1) == (255, 255, 0)\nassert     rgb_to_hsv(1, 1, 0) == (255, 255, 0)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     rgb_to_hsv(0, 0, 0) == (0.0, 0.0, 0.0)\nassert     rgb_to_hsv(1, 1, 1) == (0.0, 0.0, 0.0)\nassert     rgb_to_hsv(1.0, 1.0, 0.5) == (0.0, 0.0, 0.0)\nassert     rgb_to_hsv(1.0, 1.0, 1.0) == (1.0, 1.0, 1.0)\nassert     rgb_to_hsv(1.0, 0.0, 0.0) == (1.0, 1.0, 0.0)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     mul_even_odd([1,2,3,4,5,6]) == 12, \"Should be 12\"\nassert mul_even_odd([-3,4,-1,1]) == -12, \"Should be -12\"\nassert mul_even_odd([1,2,3,4,5,6,7,8,9,10]) == 720, \"Should be 720\"\nassert mul_even_odd([-3,-4,-1,1]) == -24, \"Should be -24\"\nassert mul_even_odd([]) == 0, \"Should be 0\"\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     mul_even_odd([2,3,4,5,6]) == 120\nassert     mul_even_odd([4,5,6,7,8,9,10]) == 480\n\ndef second_largest(num1, num2, num3):\n    '''\n    Write a function that returns the second largest number of a given 3 numbers.\n    '''\n    pass\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     mul_even_odd([5, 6, 7, 8, 9, 10]) == [120, 30]\nassert     mul_even_odd([1, 2, 3, 4, 5, 6]) == [120, 60]\nassert     mul_even_odd([1, 1, 1, 1, 1]) == [36, 1]\nassert     mul_even_odd([]) == []\nassert     mul_even_odd([1, 2, 3, 4, 5, 6, 6, 6, 6]) == [120, 60]\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     mul_even_odd([2,3,4,5,6]) == 30, \"Expected 30\"\nassert     mul_even_odd([2,3,4,5,6,9]) == 60, \"Expected 60\"\nassert     mul_even_odd([-5,3,4,5,6]) == -15, \"Expected -15\"\nassert     mul_even_odd([2,3,4,5,6,9,10]) == 720, \"Expected 720\"\nassert     mul_even_odd([2,3,4,5,6,9,10,11]) == 840, \"Expected 840\"\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef test_mul_even_odd():\n    assert mul_even_odd([1,2,3,4,5,6]) == 60\n    assert mul_even_odd([1,2,3,4,6]) == 60\n    assert mul_even_odd([1,2,3,4,6,7]) == 336\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     mul_even_odd([1,2,3,4,5]) == (24,6)\nassert     mul_even_odd([1,3,5,7,9]) == (0,0)\nassert     mul_even_odd([2,4,6,8,10]) == (0,0)\nassert     mul_even_odd([100,200,300,400,500]) == (0,0)\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     mul_even_odd([1,2,3,4,5]) == 10, \"odd\"\nassert     mul_even_odd([1,2,3,4,6]) == 36, \"even\"\nassert     mul_even_odd([1,2,3,4,6,9,10,15]) == 720, \"odd\"\nassert     mul_even_odd([1,2,3,4,6,9,10,15,18]) == 720, \"even\"\nassert     mul_even_odd([1,2,3,4,6,9,10,15,18,21]) == 720, \"odd\"\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tuple_str_int('(1, 2, 3, 4)') == (1, 2, 3, 4)\nassert     tuple_str_int('(1, 2, 3, )') == (1, 2, 3, 0)\nassert     tuple_str_int('( )') == ()\nassert     tuple_str_int(()) == ()\nassert     tuple_str_int('(1, )') == (1,)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_str_int(\"(1, 2)\") == (1, 2), \"wrong output\"\nassert     tuple_str_int(\"(1,)\") == (1,), \"wrong output\"\nassert     tuple_str_int(\"(1)\") == (1,), \"wrong output\"\nassert     tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3), \"wrong output\"\nassert     tuple_str_int(\"(1, )\") == (1,), \"wrong output\"\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_str_int('()') == ()\nassert tuple_str_int('(1, 2)') == (1, 2)\nassert tuple_str_int('(1, 2, 3)') == (1, 2, 3)\nassert tuple_str_int('(1, 2, 3, 4)') == (1, 2, 3, 4)\nassert tuple_str_int('(1, 2, 3, 4, 5)') == (1, 2, 3, 4, 5)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tuple_str_int(('a', 'b', 'c')) == (0, 1, 2)\nassert     tuple_str_int(('-1', '-1', '-1')) == (-1, -1, -1)\nassert     tuple_str_int(('1.1', '2.2', '3.3')) == (1.1, 2.2, 3.3)\nassert     tuple_str_int(('-', '-', '-')) == (-1, -1, -1)\n\ndef tuple_str_float(test_str):\n    '''\n    Write a function to convert tuple string to float tuple.\n    '''\n    pass\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tuple_str_int(\"(1,2,3)\") == (1,2,3)\nassert     tuple_str_int(\"(1,2,3,)\") == (1,2,3)\nassert     tuple_str_int(\"('a','b','c',)\") == (\"a\",\"b\",\"c\")\nassert     tuple_str_int(\"(('a', 'b', 'c',),)\") == ((\"a\", \"b\", \"c\",))\n\n'''\nSolution:\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    test_str = (1,2,3,4)\n    assert tuple_str_int(test_str) == (1,2,3,4)\n    assert tuple_str_int(\"1,2,3,4\") == (1,2,3,4)\n    assert tuple_str_int(\"(1,2,3,4)\") == (1,2,3,4)\n    "
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tuple_str_int('(1, 2, 3, 4)') == (1, 2, 3, 4)\nassert     tuple_str_int('(4, 3, 2, 1)') == (4, 3, 2, 1)\nassert     tuple_str_int('(1, 2, 3, 4)') == (1, 2, 3, 4)\nassert     tuple_str_int('(4, 3, 2, 1)') == (4, 3, 2, 1)\nassert     tuple_str_int('(1, )') == (1,)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tuple_str_int(\"('a', 'b', 'c', 'd')\") == (\"a\", \"b\", \"c\", \"d\")\nassert     tuple_str_int(\"('a', 'b', 'c')\") == (\"a\", \"b\", \"c\")\nassert     tuple_str_int(\"('a', 'b', 'c', 'd', 'e')\") == (\"a\", \"b\", \"c\", \"d\", \"e\")\nassert     tuple_str_int(\"('a', 'b', 'c', 'd', 'e')\") == (\"a\", \"b\", \"c\", \"d\", \"e\")\nassert     tuple_str_int(\"('a', 'b', 'c', 'd', 'e')\") == (\"a\", \"b\", \"c\", \"d\", \"e\")\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tuple_str_int('()') == ()\nassert     tuple_str_int('(1)') == (1,)\nassert     tuple_str_int('(1,)') == (1,)\nassert     tuple_str_int('(1,2,3)') == (1,2,3)\nassert     tuple_str_int('(1,2,3,4,5,6,7,8)') == (1,2,3,4,5,6,7,8)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     (tuple_str_int('(1, 2, 3)') == (1, 2, 3))\nassert     (tuple_str_int('(4, 5, 6)') == (4, 5, 6))\nassert     (tuple_str_int('(7, 8, 9)') == (7, 8, 9))\nassert     (tuple_str_int('(0, 1, 2)') == (0, 1, 2))\nassert     (tuple_str_int('(3, 4, 5)') == (3, 4, 5))\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     right_insertion([0, 1, 2, 4, 7, 8, 11, 13, 14], 6) == 6\nassert     right_insertion([0, 1, 2, 4, 7, 8, 11, 13, 14], 7) == 7\nassert     right_insertion([0, 1, 2, 4, 7, 8, 11, 13, 14], 11) == 7\nassert     right_insertion([0, 1, 2, 4, 7, 8, 11, 13, 14], 12) == 7\nassert     right_insertion([0, 1, 2, 4, 7, 8, 11, 13, 14], 14) == 7\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ndef test_right_insertion():\n    a = [0, 1, 2, 4, 5]\n    x = 3\n    index = right_insertion(a, x)\n    assert a[index] == x\n    print(\"test_right_insertion success!\")\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    pass\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \na =[1, 2, 3, 4, 5]\nassert right_insertion(a, 6) == 4\nassert right_insertion(a, -1) == 0\nassert right_insertion(a, 5) == 4\nassert right_insertion(a, 5) == 4\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef test_right_insertion():\n    a = [1, 3, 5, 10, 12, 14, 21, 24, 33, 55, 66, 77, 88, 89, 90]\n    x = 55\n    assert right_insertion(a, x) == 3\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    pass\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     right_insertion([-10, -5, 2, 3, 7, 9, 11, 55, 66, 78], -10) == 1, \"failed\"\nassert     right_insertion([-10, -5, 2, 3, 7, 9, 11, 55, 66, 78], -5) == 3, \"failed\"\nassert     right_insertion([-10, -5, 2, 3, 7, 9, 11, 55, 66, 78], 2) == 4, \"failed\"\nassert     right_insertion([-10, -5, 2, 3, 7, 9, 11, 55, 66, 78], 3) == 5, \"failed\"\nassert     right_insertion([-10, -5, 2, 3, 7, 9, 11, 55, 66, 78], 7) == 8, \"failed\"\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\na = [1,3,6,7,9]\nx = 5\nprint(right_insertion(a, x))\n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    pass\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     right_insertion([1, 3, 4, 8], 4) == 2\nassert     right_insertion([1, 3, 4, 8], 5) == 3\nassert     right_insertion([1, 3, 4, 8], 6) == 4\nassert     right_insertion([1, 3, 4, 8], 7) == 5\nassert     right_insertion([1, 3, 4, 8], 0) == 0\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert right_insertion([1, 2, 3], 1) == 1\nassert right_insertion([1, 2, 3], 2) == 2\nassert right_insertion([1, 2, 3], 3) == 3\nassert right_insertion([1, 2, 3], 4) == 3\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(\"\\nTest Cases:\")\nprint(right_insertion([1, 3, 5, 6], 6))\nprint(right_insertion([1, 3, 5, 6], 2))\nprint(right_insertion([1, 3, 5, 6], 7))\nprint(right_insertion([1, 3, 5, 6], 0))\nprint(right_insertion([1, 3, 5, 6], 4))\nprint(right_insertion([], 0))\nprint(right_insertion([1, 3, 5, 6], 100))\n\n'''\nRuntime: 60 ms, faster than 97.68% of Python3 online submissions for Insertion Sort List.\nMemory Usage: 15.5 MB, less than 100.00% of Python3 online submissions for Insertion Sort List.\n'''\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_match_three(\"abab\") == True, \"Wrong Answer\"\nassert     text_match_three(\"abc\") == False, \"Wrong Answer\"\nassert     text_match_three(\"abcdef\") == False, \"Wrong Answer\"\nassert     text_match_three(\"abcb\") == False, \"Wrong Answer\"\nassert     text_match_three(\"abcba\") == False, \"Wrong Answer\"\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_match_three('ababbbabbbbbb') == True\nassert     text_match_three('ababbb') == False\nassert     text_match_three('ababab') == False\nassert     text_match_three('ababbbbbb') == False\nassert     text_match_three('a') == False\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_three('abcbba') == False, \\\n        \"error in the logic of function text_match_three(text)!\"\nassert     text_match_three('bbbb') == False, \\\n        \"error in the logic of function text_match_three(text)!\"\nassert     text_match_three('aabaa') == True, \\\n        \"error in the logic of function text_match_three(text)!\"\nprint(\"\\ntext_match_three passed!\")\n\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by four 'b'.\n    '''\n    pass\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    text_match_three('ababbba')\n    == True\n    text_match_three('abababab')\n    == False\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_match_three(\"abababab\") == True\nassert     text_match_three(\"bbbbbbbbbbbb\") == False\nassert     text_match_three(\"aabaaaaa\") == False\nassert     text_match_three(\"aaaaaaa\") == False\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_three('aabab') == True, 'First'\nassert     text_match_three('bbbb') == False, 'Second'\nassert     text_match_three('aaabbb') == True, 'Third'\nassert     text_match_three('bbbbbbbb') == False, 'Fourth'\nassert     text_match_three('aaabbbb') == False, 'Fifth'\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_three('abababab') == True, 'First'\nassert     text_match_three('bbbbbbbbbbbb') == True, 'Second'\nassert     text_match_three('ababaaaa') == False, 'Third'\nassert     text_match_three('bbbbbbb') == False, 'Fourth'\nassert     text_match_three('abbbb') == False, 'Fifth'\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_match_three(\"abbbb\") == True\nassert     text_match_three(\"aabb\") == False\nassert     text_match_three(\"ababababababababababab\") == True\nassert     text_match_three(\"abbbbbbbbbbbb\") == False\n\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by three 'b',\n    and the latter is followed by a 'b'.\n    '''\n    pass\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_match_three('abababab')\nassert not text_match_three('abababaaaaa')\nassert not text_match_three('ababababab')\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert text_match_three('abab') == True\nassert text_match_three('abab') == True\nassert text_match_three('bbbb') == True\nassert text_match_three('aaaa') == False\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     new_tuple([1, 2, 3], \"a\") == ('a', 1, 2, 3), \"Not correct.\"\nassert     new_tuple([1, 2, 3], \"a b\") == ('a', 'b', 1, 2, 3), \"Not correct.\"\nassert     new_tuple([1, 2, 3], \"a b c\") == ('a', 'b', 'c', 1, 2, 3), \"Not correct.\"\nassert     new_tuple([1, 2, 3], \"a, b, c\") == ('a', ',', 'b', ',', 'c', 1, 2, 3), \"Not correct.\"\nassert     new_tuple([1, 2, 3], \"a,b,c\") == ('a', ',', 'b', ',', 'c', 1, 2, 3), \"Not correct.\"\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     new_tuple([\"apple\", \"banana\", \"cantaloupe\"], \"apple\") == ('apple', 'banana', 'cantaloupe')\nassert     new_tuple([\"apple\", \"banana\", \"cantaloupe\"], \"orange\") == ('apple', 'banana', 'cantaloupe')\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     new_tuple([\"Hello\",\"world\"], \"World\") ==     (\"World\", \"Hello\")\nassert     new_tuple([\"Hello\",\"world\"], \"Hello\") ==     (\"Hello\", \"World\")\nassert     new_tuple([\"Hello\",\"world\"], \"world\") ==     (\"world\", \"Hello\")\n\nprint(\"Python code:\")\nprint(new_tuple([\"Hello\",\"world\"], \"Hello\"))\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     new_tuple(['a', 'b', 'c'], 'abcd') == ('a', 'b', 'c', 'd')\nassert     new_tuple(['a', 'b', 'c'], 'abcd') == ('a', 'b', 'c', 'd')\nassert     new_tuple(['a', 'b', 'c'], 'abc') == ('a', 'b', 'c', 'd')\nassert     new_tuple(['a', 'b', 'c'], 'abcde') == ('a', 'b', 'c', 'd', 'e')\nassert     new_tuple(['a', 'b', 'c'], 'abcdefghijklmnopqrstuvwxyz') == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z')\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     new_tuple([], '') == ()\nassert     new_tuple(['a', 'b', 'c', 'd'], 'abc') == ('a', 'b', 'c', 'd')\nassert     new_tuple(['a', 'b', 'c', 'd'], 'abc') == ('a', 'b', 'c', 'd')\nassert     new_tuple(['a', 'b', 'c', 'd'], '') == ()\nassert     new_tuple([1, 2, 3], 'abc') == (1, 2, 3)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     new_tuple(('a', 'b', 'c'), 'abcd') == ('a', 'b', 'c', 'd'), 'New tuple value error'\nassert new_tuple(('a', 'b', 'c'), 'abcd') == ('a', 'b', 'c', 'd'), 'New tuple value error'\nassert new_tuple(('a', 'b', 'c'), 'abcd') == ('a', 'b', 'c', 'd'), 'New tuple value error'\nassert new_tuple(('a', 'b', 'c'), 'abcd') == ('a', 'b', 'c', 'd'), 'New tuple value error'\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ntest_list = ['a', 'b', 'c']\ntest_str = \"a,b,c\"\nnew_tuple(test_list, test_str)\n\ntest_list = ['a', 'b', 'c']\ntest_str = \"a,b,c\"\nnew_tuple(test_list, test_str)\n\ntest_list = ['a', 'b', 'c']\ntest_str = \"a,b,c\"\nnew_tuple(test_list, test_str)\n\ntest_list = ['a', 'b', 'c']\ntest_str = \"a,b,c\"\nnew_tuple(test_list, test_str)\n\ntest_list = ['a', 'b', 'c']\ntest_str = \"a,b,c\"\nnew_tuple(test_list, test_str)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     new_tuple(['a','b'], '123') == ('a', 'b', '123') \nassert     new_tuple([1,2,3], (10,20,30)) == (1, 2, 3, 10, 20, 30)\nassert     new_tuple(['a', 'b'], '123') == ('a', 'b', '123') \nassert     new_tuple(['a', 'b'], (1,2,3)) == ('a', 'b', 1, 2, 3) \nassert new_tuple([1,2,3], '123') == ('1', '2', '3', '123') \n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     new_tuple(['1', '2', '3', '4'], '1,2,3,4') == ('1', '2', '3', '4'), 'incorrect'\nassert     new_tuple(['1', '2', '3', '4'], '2,4,6') == ('2', '4', '6'), 'incorrect'\nassert     new_tuple(['1', '2', '3', '4'], '3,1,5') == ('3', '1', '5'), 'incorrect'\nassert     new_tuple(['1', '2', '3', '4'], '4,3,1') == ('4', '3', '1'), 'incorrect'\nassert     new_tuple(['1', '2', '3', '4'], '1,2,3') == ('1', '2', '3'), 'incorrect'\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \neven_position([1,2,3,4,5])==True, \"First\"\nassert even_position([1,2,3,4,6])==False, \"Second\"\nassert even_position([1,2,3,4,7])==False, \"Third\"\nassert even_position([1,2,3,4,6])==True, \"Fourth\"\nassert even_position([1,2,3,4,6,7,8])==True, \"Fifth\"\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert even_position([2,3,4,5,6]) == True\nassert even_position([2,3,4,6,6,6]) == False\nassert even_position([1,2,3,4,5]) == True\nassert even_position([1,2,3,4,5,2]) == True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     even_position([1, 2, 3, 4, 5, 6, 7, 8, 9]) == True, \\\n    'Failed in even_position'\nassert     even_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False, \\\n    'Failed in even_position'\nassert     even_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == True, \\\n    'Failed in even_position'\nassert     even_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == False, \\\n    'Failed in even_position'\nassert     even_position([]) == False, 'Failed in even_position'\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \neven_position([2,4,6,8,10,2,4,6,8,10]) == True\nassert even_position([2,4,6,8,10,2,4,6,8,10,12]) == False\nassert even_position([2,4,6,8,10,2,4,6,8,10,12,2]) == True\nassert even_position([2,4,6,8,10,2,4,6,8,10,12,2,4]) == False\nassert even_position([2,4,6,8,10,2,4,6,8,10,12,2,4,6]) == False\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \neven_position([1,2,3,4,5,6]) == False\neven_position([1,2,3,4,5,6,7,8,9]) == True\neven_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == True\neven_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]) == False\neven_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]) == True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \neven_position([1, 3, 5, 7, 9]) == True\nassert even_position([1, 3, 5, 7, 9, 0]) == False\nassert even_position([1, 3, 5, 7, 9, 3]) == False\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     even_position([1, 2, 3, 4, 5, 6]) == False\nassert     even_position([1, 2, 3, 4, 5, 6, 7]) == True\nassert     even_position([1, 2, 3, 4, 5, 6, 7, 8]) == True\nassert     even_position([1, 2, 3, 4, 5, 6, 7, 8, 9]) == False\nassert     even_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \neven_position([1,2,3,4,5,6]) == True, 'Should return true for all even index with even numbers in the given list.'\nassert \neven_position([1,2,3,4,5,6,7,8,9,10]) == False, 'Should return false for all even index with even numbers in the given list.'\nassert \neven_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]) == True, 'Should return true for all even index with even numbers in the given list.'\n\ndef even_position2(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    # Your code here\n    pass\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef even_position_2(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    even_position(nums)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_nested((1,(1,2))) == (1,2)\nassert     remove_nested((1,(1,2,3))) == (1,3)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_nested([1, 2, [2, 4], 3]) == [1, 2, 3]\nassert     remove_nested([1, 2, [2, 4], 3]) == [1, 2, 3]\nassert     remove_nested([1, 2, [2, 4], 3]) == [1, 2, 3]\nassert     remove_nested([1, 2, [2, 4], 3]) == [1, 2, 3]\nassert     remove_nested([1, 2, [2, 4], 3]) == [1, 2, 3]\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_nested((1,2,3)) == (1,2,3), \"Should be (1,2,3)\"\nassert     remove_nested((1,2,3,4)) == (1,2,3,4), \"Should be (1,2,3,4)\"\nassert     remove_nested((1,2,3,4,5,6)) == (1,2,3,4,5,6), \"Should be (1,2,3,4,5,6)\"\nassert     remove_nested((1,2,3,4,5,6,7)) == (1,2,3,4,5,6,7), \"Should be (1,2,3,4,5,6,7)\"\nassert     remove_nested((1,2,3,4,5,6,7,8,9)) == (1,2,3,4,5,6,7,8,9), \"Should be (1,2,3,4,5,6,7,8,9)\"\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_nested((1,2,3)) == (1,2,3), \"Wrong Output\"\nassert     remove_nested((1,2,3,4)) == (1,2,4), \"Wrong Output\"\nassert     remove_nested((1,2,3,4,5)) == (1,2,3,4), \"Wrong Output\"\nassert     remove_nested((1,2,3,4,5,6)) == (1,2,3,4), \"Wrong Output\"\nassert     remove_nested((1,2,3,4,5,6,7)) == (1,2,3,4,5,6), \"Wrong Output\"\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_nested((1, 2, (1, 2), 3)) == (1, 2, 3)\nassert     remove_nested((1, 2, (1, 2), 3)) == (1, 2, 3)\nassert     remove_nested((1, 2, (1, 2), 3)) == (1, 2, 3)\nassert     remove_nested((1, 2, (1, 2), 3)) == (1, 2, 3)\nassert     remove_nested((1, 2, (1, 2), 3)) == (1, 2, 3)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_nested((\"tuple\",\"of\",\"tuples\")) == ('tuple',)\nassert     remove_nested((\"tuple\",(1,2,3),(\"tuple\",(\"tuple\",(2,3,4),\"tuple\")))) == ('tuple',(1,2,3),('tuple',(2,3,4),'tuple'))\n\ndef remove_duplicates(test_list):\n    '''\n    Write a function to remove duplicates from the given list.\n    '''\n    pass\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_nested(())    == None\nassert     remove_nested(((1,2,3),()))    == (1,2,3)\nassert     remove_nested((((1,2,3),(1,2,3)),(1,2,3)))    == ((1,2,3),(1,2,3))\nassert     remove_nested(((((1,2,3),(1,2,3)),((1,2,3),(1,2,3))),((1,2,3),(1,2,3))))    == (((1,2,3),(1,2,3)),((1,2,3),(1,2,3)))\nassert     remove_nested
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_nested((1,2,3)) == (1,2,3)\nassert     remove_nested((1,2,3,(1,2,3),4)) == (1,2,3,4)\nassert     remove_nested((1,2,3,(1,2,3),4,5)) == (1,2,3,4,5)\nassert     remove_nested((1,2,3,4,5)) == (1,2,3,4,5)\nassert     remove_nested((1,2,3,(1,2,3),4,(5,6),7)) == (1,2,3,4,5,6,7)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_nested((1,2,3,4,5,6,7)) == (1,2,3,4,5,6), \"test failed\"\nassert     remove_nested((3,2,1,4,7,6)) == (3,2,1,4,7,6), \"test failed\"\nassert     remove_nested((3,2,1,4,7,6,2)) == (3,2,1,4,7,6,2), \"test failed\"\nassert     remove_nested((3,2,1,4,7,6,2,5,6,2)) == (3,2,1,4,7,6,2,5,6,2), \"test failed\"\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_nested((1,2,3,4,5)) == ((1,2,3,4,5),)\nassert     remove_nested((1,2,3,4,5,6,7,8)) == ((1,2,3,4,5),)\nassert     remove_nested((1,2,3,4,5,6,7,8,9,10)) == ((1,2,3,4,5),)\nassert     remove_nested((1,2,3,4,5,6,7,8,9,10,11,12)) == ((1,2,3,4,5),)\nassert     remove_nested((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)) == ((1,2,3,4,5,6,7,8,9,10,11,12,13,14),)\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert count_list([[1,2,3],[1,2,3,4],[4,5,6]]) == 0\nassert count_list([[1,2,3],[1,2,3,4,5],[4,5,6]]) == 2\nassert count_list([[1,2,3],[1,2,3,4,5],[4,5,6,7,8,9]]) == 3\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_list([[], [], []]) == 0, \"Wrong!\"\nassert     count_list([[1], [], []]) == 2, \"Wrong!\"\nassert     count_list([[], [1], []]) == 2, \"Wrong!\"\nassert     count_list([[1], [1], [1]]) == 2, \"Wrong!\"\nassert     count_list([[], [], [1]]) == 2, \"Wrong!\"\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint('check_count_list: pass')\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_list([[],[1,2,3,4],[],[5,6,7,8]]) == 2, \"List inside the list\"\nassert count_list([[[],[1,2,3,4],[],[5,6,7,8]]]) == 1, \"List inside a list\"\nassert count_list([[],[],[],[],[1,2,3,4,5,6,7,8]]) == 8, \"Multiple lists\"\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_list([[1],2,[2],3,4]) == 1 \nassert count_list([[1,2,3],2,3,4]) == 2 \nassert count_list([[1,2,3],2,3,4]) == 2 \n\ndef count_tuple(input_list): \n    '''\n    Write a python function to count the number of tuples in a given number of lists.\n    '''\n    pass\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef len_list(input_list): \n    '''\n    Write a python function to find the length of the longest list in a given number of lists.\n    '''\n    pass\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef count_list_of_list(input_list):\n    '''\n    Write a python function to count the number of lists inside a list.\n    '''\n    pass\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_list(['a', 'b', 'c', 'd', 'e']) == 1, 'Should count 1'\nassert     count_list(['a', 'b', 'c', 'd', 'e', 'a', 'b', 'c']) == 2, 'Should count 2'\nassert     count_list([]) == 0, 'Should count 0'\n\ndef list_duplicates(input_list): \n    '''\n    Write a python function to remove all duplicates from a given number of lists.\n    '''\n    pass\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_list([]) == 0, \"count_list([]) should return 0\"\nassert     count_list([1]) == 0, \"count_list([1]) should return 0\"\nassert     count_list([1,1]) == 0, \"count_list([1,1]) should return 0\"\nassert     count_list([1,1,1]) == 1, \"count_list([1,1,1]) should return 1\"\nassert     count_list([[1],1]) == 0, \"count_list([[1],1]) should return 0\"\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     last([2,3,5,7,9], 9) == 4\nassert     last([2,3,5,7,9], 10) == 5\nassert     last([3,5,7,9,10], 10) == 5\nassert     last([3,5,7,9,10], 6) == 3\nassert     last([3,5,7,9,10], 7) == 3\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == '__main__':\n    \n    print(\"\\nTest case 1:\")\n    print(\"Last(arr1,5) = %d\" % last(arr1,5))\n    \n    print(\"\\nTest case 2:\")\n    print(\"Last(arr2,5) = %d\" % last(arr2,5))\n    \n    print(\"\\nTest case 3:\")\n    print(\"Last(arr3,5) = %d\" % last(arr3,5))\n    \n    print(\"\\nTest case 4:\")\n    print(\"Last(arr4,5) = %d\" % last(arr4,5))\n    \n    print(\"\\nTest case 5:\")\n    print(\"Last(arr5,5) = %d\" % last(arr5,5))\n    \n    print(\"\\nTest case 6:\")\n    print(\"Last(arr6,5) = %d\" % last(arr6,5))\n    \n    print(\"\\nTest case 7:\")\n    print(\"Last(arr7,5) = %d\" % last(arr7,5))\n    \n    print(\"\\nTest case 8:\")\n    print(\"Last(arr8,5) = %d\" % last(arr8,5))\n    \n    print(\"\\nTest case 9:\")\n    print(\"Last(arr9,5) = %d\" % last(arr9,5))\n    \n    print(\"\\nTest case 10:\")\n    print(\"Last(arr10,5) = %d\" % last(arr10,5))\n    \n    print(\"\\nTest case 11:\")\n    print(\"Last(arr11,5) = %d\" % last(arr11,5))\n    \n    print(\"\\nTest case 12:\")\n    print(\"Last(arr12,5) = %d\" % last(arr12,5))\n    \n    print(\"\\nTest case 13:\")\n    print(\"Last(arr13,5) = %d\" % last(arr13,5))\n    \n    print(\"\\nTest case 14:\")\n    print(\"Last(arr14,5) = %d\" % last(arr14,5))\n    \n    print(\"\\nTest case 15:\")\n    print(\"Last(arr15,5) = %d\" % last(arr15,5))\n    \n    print(\"\\nTest case 16:\")\n    print(\"Last(arr16,5) = %d\" % last(arr16,5))\n    \n    print(\"\\nTest case 17:\")\n    print(\"Last(arr17,5) = %d\" % last(arr17,5))\n    \n    print(\"\\nTest case 18:\")\n    print(\"Last(arr18,5) = %d\" % last(arr18,5))\n    \n    print(\"\\nTest case 19:\")\n    print(\"Last(arr19,5) = %d\" % last(arr19,5))\n    \n    print(\"\\nTest case 20:\")\n    print(\"Last(arr20,5) = %d\" % last(arr20,5))\n    \n    print(\"\\nTest case 21:\")\n    print(\"Last(arr21,5) = %d\" % last(arr21,5))\n    \n    print(\"\\nTest case 22:\")\n    print(\"Last(arr22,5) = %d\" % last(arr22,5))\n    \n    print(\"\\nTest case 23:\")\n    print(\"Last(arr23,5) = %d\" % last(arr23,5))\n    \n    print(\"\\nTest case 24:\")\n    print(\"Last(arr24,5) = %d\" % last(arr24,5))\n    \n    print(\"\\nTest case 25:\")\n    print(\"Last(arr25,5) = %d\" % last(arr25,5))\n    \n    print(\"\\nTest case 26:\")\n    print(\"Last(arr26,5) = %d\" % last(arr26,5))\n    \n    print(\"\\nTest case 27:\")\n    print(\"Last(arr27,5) = %d\" % last(arr27,5))\n    \n    print(\"\\nTest case 28:\")\n    print(\"Last(arr28,5) = %d\" % last(arr28,5))\n    \n    print(\"\\nTest case 29:\")\n    print(\"Last(arr29,5) = %d\" % last(arr29,5))\n    \n    print(\"\\nTest case 30:\")\n    print(\"Last(arr30,5) = %d\" % last(arr30,5))\n    \n    print(\"\\nTest case 31:\")\n    print(\"Last(arr31,5) = %d\" % last(arr31,5))\n    \n    print(\"\\nTest case 32:\")\n    print(\"Last(arr32,5) = %d\" % last(arr32,5))\n    \n    print(\"\\nTest case 33:\")\n    print(\"Last(arr33,5) = %d\" % last(arr33,5))\n    \n    print(\"\\nTest case 34:\")\n    print(\"Last(arr34,5) = %d\" % last(arr34,5))\n    \n    print(\"\\nTest case 35:\")\n    print(\"Last(arr35,5) = %d\" % last(arr35,5))\n    \n    print(\"\\nTest case 36:\")\n    print(\"Last(arr36,5) = %d\" % last(arr36,5))\n    \n    print(\"\\nTest case 37:\")\n    print(\"Last(arr37,5) = %d\" % last(arr37,5))\n    \n    print(\"\\nTest case 38:\")\n    print(\"Last(arr38,5) = %d\" % last(arr38,5))\n    \n    print(\"\\nTest case 39:\")\n    print(\"Last(arr39,5) = %d\" % last(arr39,5))\n    \n    print(\"\\nTest case 40:\")\n    print(\"Last(arr40,5) = %d\" % last(arr40,5))\n    \n    print(\"\\nTest case 41:\")\n    print(\"Last(arr41,5) = %d\" % last(arr41,5))\n    \n    print(\"\\nTest case 42:\")\n    print(\"Last(arr42,5) = %d\" % last(arr42,5))\n    \n    print(\"\\nTest case 43:\")\n    print(\"Last(arr43,5) = %d\" % last(arr43,5))\n    \n    print(\"\\nTest case 44:\")\n    print(\"Last(arr44,5) = %d\" % last(arr44,5))\n    \n    print(\"\\nTest case 45:\")\n    print(\"Last(arr45,5) = %d\" % last(arr45,5))\n    \n    print(\"\\nTest case 46:\")\n    print(\"Last(arr46,5) = %d\" % last(arr46,5))\n    \n    print(\"\\nTest case 47:\")\n    print(\"Last(arr47,5) = %d\" % last(arr47,5))\n    \n    print(\"\\nTest case 48:\")\n    print(\"Last(arr48,5) = %d\" % last(arr48,5))\n    \n    print(\"\\nTest case 49:\")\n    print(\"Last(arr49,5) = %d\" % last(arr49,5))\n    \n    print(\"\\nTest case 50:\")\n    print(\"Last(arr50,5) = %d\" % last(arr50,5))\n    \n    print(\"\\nTest case 51:\")\n    print(\"Last(arr51,5) = %d\" % last(arr51,5))\n    \n    print(\"\\nTest case 52:\")\n    print(\"Last(arr52,5) = %d\" % last(arr52,5))\n    \n    print(\"\\nTest case 53:\")\n    print(\"Last(arr53,5) = %d\" % last(arr53,5))\n    \n    print(\"\\nTest case 54:\")\n    print(\"Last(arr54,5) = %d\" % last(arr54,5))\n    \n    print(\"\\nTest case 55:\")\n    print(\"Last(arr55,5) = %d\" % last(arr55,5))\n    \n    print(\"\\"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef reverse(arr,start,end):\n    '''\n    Write a python function to reverse an array in place.\n    '''\n    pass\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     last([1,2,3,4,5],4)==2\nassert     last([1,2,3,4,5],0)==0\nassert     last([1,2,3,4,5],5)==4\nassert     last([1,2,3,4,5],10)==5\nassert     last([1,2,3,4,5],1)==5\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     last([1,2,3,4,5],5) == 3, \"Last of [1,2,3,4,5] is not 3.\"\nassert     last([1,2,3,4,5],1) == 4, \"Last of [1,2,3,4,5] is not 4.\"\nassert     last([1,2,3,4,5],0) == 0, \"Last of [1,2,3,4,5] is not 0.\"\nassert     last([1,2,3,4,5],10) == 5, \"Last of [1,2,3,4,5] is not 5.\"\nassert     last([1,2,3,4,5],6) == 5, \"Last of [1,2,3,4,5] is not 5.\"\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     last([1,2,3,4,5,6,7,8,9,10],6) == 9, \"Wrong Answer\"\nassert last([1,2,3,4,5,6,7,8,9,10],5) == 5, \"Wrong Answer\"\nassert last([1,2,3,4,5,6,7,8,9,10],10) == 10, \"Wrong Answer\"\nassert last([1,2,3,4,5,6,7,8,9,10],0) == 0, \"Wrong Answer\"\nassert last([1,2,3,4,5,6,7,8,9,10],1) == 1, \"Wrong Answer\"\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef last1(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    for i in range(len(arr)-1,0,-1):\n        if arr[i] == x:\n            return i\n    return -1\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_starta_endb(\"abab\") == True\nassert     text_starta_endb(\"abac\") == False\nassert     text_starta_endb(\"ababac\") == True\nassert     text_starta_endb(\"abac\") == False\nassert     text_starta_endb(\"ababacab\") == False\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_starta_endb('abc') == True, 'Not True'\nassert     text_starta_endb('abcd') == True, 'Not True'\nassert     text_starta_endb('abcde') == True, 'Not True'\nassert     text_starta_endb('abcdef') == False, 'Not False'\nassert     text_starta_endb('aac') == False, 'Not False'\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_starta_endb('aabb') == 'abba'\nassert     text_starta_endb('babb') == 'abba'\nassert     text_starta_endb('ac') == ''\nassert     text_starta_endb('ab') == ''\nassert     text_starta_endb('ab') == ''\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_starta_endb('apple') == False\nassert     text_starta_endb('apple a') == True\nassert     text_starta_endb('apple a b') == True\nassert     text_starta_endb('apple a b') == True\nassert     text_starta_endb('apple b') == True\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_starta_endb('ab') == True\nassert     text_starta_endb('a') == False\nassert     text_starta_endb('ab') == False\nassert     text_starta_endb('ababa') == True\nassert     text_starta_endb('bbaaba') == False\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_starta_endb(\"aabaaabb\") == True, \"Should match 'aabaaabb'\"\nassert     text_starta_endb(\"aabaaabbb\") == False, \"Should not match 'aabaaabbb'\"\nassert     text_starta_endb(\"aaaabaaaabb\") == False, \"Should not match 'aaaabaaaabb'\"\nassert     text_starta_endb(\"aaaabaaabbb\") == False, \"Should not match 'aaaabaaabbb'\"\nassert     text_starta_endb(\"aaaabbaaa\") == False, \"Should not match 'aaaabbaaa'\"\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    text_starta_endb('a') == False\n    text_starta_endb('abc') == False\n    text_starta_endb('abcdefgh') == False\n    text_starta_endb('abcdefg') == True\n    text_starta_endb('abcdef') == True\n    text_starta_endb('abccba') == True\n    text_starta_endb('abcba') == True\n    text_starta_endb('abcba') == True\n    text_starta_endb('abcdefg') == True\n    text_starta_endb('abcdefg') == True\n    text_starta_endb('abcdefgh') == False\n    text_starta_endb('abcdefgh') == False\n    text_starta_endb('abc') == True\n    text_starta_endb('abc') == True\n    text_starta_endb('abc') == True\n    text_starta_endb('a') == True\n    text_starta_endb('a') == True\n    text_starta_endb('a') == True\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('abc') == True\n    text_starta_endb('abc') == True\n    text_starta_endb('abc') == True\n    text_starta_endb('b') == True\n    text_starta_endb('b') == True\n    text_starta_endb('b') == True\n    text_starta_endb('ba') == False\n    text_starta_endb('ba') == False\n    text_starta_endb('ba') == False\n    text_starta_endb('bab') == False\n    text_starta_endb('bab') == False\n    text_starta_endb('bab') == False\n    text_starta_endb('bab') == False\n    text_starta_endb('bab') == False\n    text_starta_endb('ba') == True\n    text_starta_endb('ba') == True\n    text_starta_endb('ba') == True\n    text_starta_endb('ba') == True\n    text_starta_endb('b') == True\n    text_starta_endb('b') == True\n    text_starta_endb('b') == True\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == False\n    text_starta_endb('ab') == Fals"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_starta_endb(\"abab\") == True\nassert     text_starta_endb(\"abcdab\") == True\nassert     text_starta_endb(\"abcba\") == False\nassert     text_starta_endb(\"abcd\") == False\nassert     text_starta_endb(\"ab\") == False\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_starta_endb('a') == (True,'a')\nassert     text_starta_endb('ab') == (True,'ab')\nassert     text_starta_endb('abc') == (True,'abc')\nassert     text_starta_endb('abc') == (False,'abc')\nassert     text_starta_endb('abc') == (False,'abc')\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_starta_endb('abacaba') == True\nassert     text_starta_endb('abacababacaba') == True\nassert     text_starta_endb('abacabacabacabaxb') == True\nassert     text_starta_endb('abacabaxb') == False\nassert     text_starta_endb('abacabaxbacaba') == False\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    Return None if the dictionary is empty\n    '''\n    pass\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert return_sum({'a': 1, 'b':2}) == 3\nassert return_sum({1:1, 2:2}) == 3\nassert return_sum({'a': 1}) == 1\nassert return_sum({}) == 0\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     return_sum({'abcd':43, 'a':54, 'efg':54}) == 123, \"return_sum error\"\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     return_sum({}) == 0, \"Empty dictionary should return 0\"\nassert     return_sum({1:1}) == 1, \"One dictionary should return 1\"\nassert     return_sum({1:2, 2:3}) == 4, \"Two dictionaries should return 4\"\nassert     return_sum({1:1, 3:4}) == 4, \"One dictionary and two dictionaries should return 4\"\nassert     return_sum({1:1, 2:3, 3:4}) == 10, \"Multiple dictionaries should return 10\"\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     return_sum({1:2,3:4}) == 6, \"Function should return the sum of the dictionary keys\"\nassert     return_sum({'a':2,1:3}) == 5, \"Function should return the sum of the dictionary keys\"\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     return_sum({}) == None\nassert     return_sum({'one': 1, 'two': 2}) == 5\nassert     return_sum({'three': 3, 'four': 4}) == 7\n\nprint('Test pass')\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert return_sum({\"a\":1,\"b\":2,\"c\":3}) == 6, \"return_sum('abc') should return 6\"\nassert return_sum({\"a\":1,\"b\":2,\"c\":3,\"d\":4}) == 10, \"return_sum(['abc','def', 'ghi', 'jklm']) should return 10\"\n\n'''\nFor the next task, you will be given a dictionary called \"dict\" and a value called \"item_to_find\" which is a key in the dictionary.\n\nYour task is to return a list of all keys (keys of a dictionary) which are the values which correspond to the item_to_find. \n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     return_sum({'a': 2, 'b': 3}) == 5, \"ERROR: 5\"\nassert     return_sum({'a': 2}) == 2, \"ERROR: 2\"\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     return_sum({'a': 1, 'b': 2}) == 1 + 2,'return_sum is not working as expected'\nassert     return_sum({}) == 0,'return_sum is not working as expected'\nassert     return_sum({'a': 1, 'b': 2, 'c': 3, 'd': 4}) == 1 + 2 + 3 + 4,'return_sum is not working as expected'\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     return_sum({1:2,2:3,4:5}) == 5, \"Your solution didn't work.\"\n\nprint(\"You got it right!\")"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_odd(1,10) == 12, 'Incorrect result'\nassert sum_odd(100,100) == 100, 'Incorrect result'\nassert sum_odd(1,0) == 0, 'Incorrect result'\nassert sum_odd(-2,-3) == -1, 'Incorrect result'\nassert sum_odd(-2) == 0, 'Incorrect result'\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_odd(2) == 6\nassert     sum_odd(2,4) == 18\nassert     sum_odd(2,10) == 22\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_odd(1) == 0, \"Wrong answer\"\nassert     sum_odd(3) == 4, \"Wrong answer\"\nassert     sum_odd(4) == 3, \"Wrong answer\"\nassert     sum_odd(5) == 5, \"Wrong answer\"\nassert     sum_odd(8) == 13, \"Wrong answer\"\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_odd(2) == 1, \"function is not returning the sum of all odd numbers within the range\"\nassert     sum_odd(0) == 0, \"function is not returning the sum of all odd numbers within the range\"\nassert     sum_odd(1) == 0, \"function is not returning the sum of all odd numbers within the range\"\nassert     sum_odd(2) == 1, \"function is not returning the sum of all odd numbers within the range\"\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_odd(1, 10) == 33, 'incorrect result'\nassert sum_odd(10, 20) == 29, 'incorrect result'\nassert sum_odd(100, 200) == 523, 'incorrect result'\n\ndef sum_even(n):\n    '''\n    Write a python function to find the sum of all even natural numbers within the range l and r.\n    '''\n    pass\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint(\"passed all tests\""
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_odd(3) == 5, 'failed test case for sum_odd()'\nassert     sum_odd(5) == 15, 'failed test case for sum_odd()'\nassert     sum_odd(7) == 17, 'failed test case for sum_odd()'\nassert     sum_odd(11) == 23, 'failed test case for sum_odd()'\nassert     sum_odd(-3) == 3, 'failed test case for sum_odd()'\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_odd(2) == 4\nassert     sum_odd(5) == 4\nassert     sum_odd(15) == 23\nassert     sum_odd(9) == 8\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_odd(2) == 5, \"Please correct this line as 2\"\nassert     sum_odd(4) == 10, \"Please correct this line as 10\"\nassert     sum_odd(7) == 15, \"Please correct this line as 15\"\n\nprint(\"sum_odd test is done!\")\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_odd(2) == 0, 'incorrect result for l = 2, r = 3, result = 0'\nassert     sum_odd(5) == 1, 'incorrect result for l = 5, r = 5, result = 1'\nassert     sum_odd(1) == 0, 'incorrect result for l = 1, r = 10, result = 0'\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     _sum([1,2,3,4,5]) == 15, 'Test case 1: Failed'\nassert     _sum([1,2,3,4,5,6]) == 21, 'Test case 2: Failed'\nassert     _sum([1,2,3,4,5,6,7]) == 28, 'Test case 3: Failed'\nassert     _sum([1,2,3,4,5,6,7,8]) == 34, 'Test case 4: Failed'\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     _sum([1, 2, 3, 4]) == 10, \"incorrect sum\"\nassert     _sum([10, 20, 30]) == 60, \"incorrect sum\"\nassert     _sum([-1, -2, -3]) == -6, \"incorrect sum\"\nassert     _sum([]) == 0, \"incorrect sum\"\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     _sum([1,2,3,4,5]) == 15\nassert     _sum([]) == 0\n\n\n'''\nWrite a python program to find the max of an array.\n    Function should return the max of the array itself.\n    '''\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     _sum([1, 2, 3, 4]) == 10, \"Wrong answer\"\nassert     _sum([1, 2, 3]) == 5, \"Wrong answer\"\nassert     _sum([]) == 0, \"Wrong answer\"\n\ndef _substring(string, start, end):\n    '''\n    Write a python function to return substring from a string.\n    '''\n    pass\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint('#'*30,'\\nTesting _sum\\n')\nprint('The sum of a empty array is None.')\nassert _sum([]) is None\nprint('The sum of an array containing a single element is that element.')\nassert _sum([1]) == 1\nprint('The sum of an array containing several elements is the sum of their individual elements.')\nassert _sum([1,2,3]) == 6\nprint('The sum of an array containing integers between -10 and 10 is the sum of the individual elements.')\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     _sum([1,2,3,4,5,6,7,8,9]) == 55\nassert     _sum([]) == 0\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     _sum([]) == 0, 'The sum of an empty array is 0'\nassert     _sum([1, 2, 3, 4, 5]) == 15, 'The sum of a normal array is 15'\nassert     _sum([1, 2, 3, 4, 5, 6]) == 21, 'The sum of an array with 6 elements is 21'\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert _sum([1, 2, 3]) == 6\nassert _sum([1, 2, 3, 4]) == 10\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert _sum([1,2,3]) == 6, \"Bad sum\"\nassert _sum([1,2,3,4,5]) == 15, \"Bad sum\"\nassert _sum([1,2]) == 3, \"Bad sum\"\nassert _sum([1]) == 1, \"Bad sum\"\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nleft_rotate(2,2) == 2 \nleft_rotate(3,3) == 6\nleft_rotate(10,2) == 8\nleft_rotate(0b1001101,2) == 0b10010"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     left_rotate(17,5) == 19, \"left_rotate does not work\"\nassert     left_rotate(1,5) == 5, \"left_rotate does not work\"\nassert     left_rotate(0,5) == 0, \"left_rotate does not work\"\nassert     left_rotate(17,7) == 28, \"left_rotate does not work\"\nassert     left_rotate(17,0) == 17, \"left_rotate does not work\"\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    n = 0b0000000001011011\n    d = 2\n    print(left_rotate(n,d))\n\n    n = 0b0000000001011011\n    d = 4\n    print(left_rotate(n,d))\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     left_rotate(0b1111, 1) == 0b1001  # bit 0 is 1\nassert     left_rotate(0b1111, 2) == 0b1010  # bit 0 is 1\nassert     left_rotate(0b1111, 3) == 0b1011  # bit 0 is 1\nassert     left_rotate(0b1111, 4) == 0b1000  # bit 0 is 0\nassert     left_rotate(0b1111, 5) == 0b1001  # bit 0 is 1\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n\n'''\nProblem 3:  Largest product in a series of three positive integers\nWrite a function that takes in three positive integers, and returns the maximum product that can be obtained by multiplying the integers. \n'''\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     left_rotate(1, 3) == 0b00000011 # you can use right_rotate as well\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == '__main__':\n    n = 11\n    d = 1\n    rotate(n,d)"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n'''\nFunction to reverse the bits of a given number.\n'''\ndef bit_reverse(x):\n    pass\n\n'''\nFunction to check if the given number is a power of 2.\n'''\ndef is_power_of_two(x):\n    pass\n\n'''\nFunction to find the numbers of cycles required for reverse the bits.\n'''\ndef find_number_of_cycles(x):\n    pass\n\n'''\nFunction to find the sum of the numbers of cycles required for reverse the bits.\n'''\ndef find_number_of_cycles_2(x):\n    pass\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_all_spaces('asd\\tasd\\t') == 'asdasd'\nassert     remove_all_spaces('\\t') == ''\n\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert remove_all_spaces(\" \") == \"\", \"Should return an empty string.\"\nassert remove_all_spaces(\" \") == \"\", \"Should return an empty string.\"\nassert remove_all_spaces(\"\") == \"\", \"Should return an empty string.\"\nassert remove_all_spaces(\"a b\") == \"a b\", \"Should return an empty string.\"\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nremove_all_spaces(\"t     h i s   x\") == \"t h i s x\"\nremove_all_spaces(\"t  i s     x\") == \"t i s x\"\nremove_all_spaces(\"t i s x\") == \"t i s x\"\nremove_all_spaces(\"t i s x \") == \"t i s x\"\nremove_all_spaces(\"   t i s x \") == \"t i s x\"\nremove_all_spaces(\"t i s x   \") == \"t i s x\"\nremove_all_spaces(\"t i s x\") == \"t i s x\"\nremove_all_spaces(\"t i s x \") == \"t i s x\"\n\nprint(\"all spaces correct\")\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(remove_all_spaces(\"  Wesirous     \"))\nprint(remove_all_spaces(\"Wesirous \"))\n\ndef remove_all_spaces_2(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pass\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_all_spaces('     ') == '', 'Remove all spaces'\nassert     remove_all_spaces('xyz') == '', 'Remove all spaces'\nassert     remove_all_spaces('xyx') == '', 'Remove all spaces'\nassert     remove_all_spaces('a  b') == '', 'Remove all spaces'\nassert     remove_all_spaces('a b') == '', 'Remove all spaces'\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_all_spaces(\"      \") == \"\"\nassert     remove_all_spaces(\" \") == \"\"\nassert     remove_all_spaces(\"\\n\") == \"\"\nassert     remove_all_spaces(\" \"*100) == \"\"\nassert     remove_all_spaces(\"  \\n\\n\") == \"\"\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_all_spaces('') == ''\nassert     remove_all_spaces(' ') == ''\nassert     remove_all_spaces('xyz') == 'xyz'\nassert     remove_all_spaces('xy xyz') == 'xy xyz'\nassert     remove_all_spaces('xy xyz ') == 'xy xyz'\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_all_spaces(\"\") == \"\"\nassert     remove_all_spaces(\" \") == \"\"\nassert     remove_all_spaces(\"\\t\") == \"\"\nassert     remove_all_spaces(\"\\r\\n\\t\") == \"\"\nassert     remove_all_spaces(\"\\n\") == \"\"\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     test_three_equal(1,2,3) == 3, 'Test case 1 failed'\nassert     test_three_equal(5,5,5) == 3, 'Test case 2 failed'\nassert     test_three_equal(1,2,3) == 0, 'Test case 3 failed'\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     three_equal(1,2,3) == 3, \"Error, you have some mistake in the code\"\nassert     three_equal(1,2,1) == 3, \"Error, you have some mistake in the code\"\nassert     three_equal(1,2,3) == 3, \"Error, you have some mistake in the code\""
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     test_three_equal(2,3,2) == True, \"count the number of equal numbers from three given integers\"\nassert     test_three_equal(2,3,1) == False, \"count the number of equal numbers from three given integers\"\nassert     test_three_equal(2,3,2) == True, \"count the number of equal numbers from three given integers\"\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     test_three_equal(3,3,3) == 3, \"Failed: the number of equal numbers should be 3\"\nassert     test_three_equal(4,4,4) == 0, \"Failed: the number of equal numbers should be 0\"\nassert     test_three_equal(3,4,3) == 1, \"Failed: the number of equal numbers should be 1\"\nassert     test_three_equal(3,3,4) == 2, \"Failed: the number of equal numbers should be 2\"\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     test_three_equal(5,7,7) == 0, \"It should be 0\"\nassert     test_three_equal(5,7,8) == 1, \"It should be 1\"\nassert     test_three_equal(5,5,5) == 2, \"It should be 2\"\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     test_three_equal(1,2,3) == 3, 'Should be 3'\nassert     test_three_equal(5,5,5) == 3, 'Should be 3'\nassert     test_three_equal(1,2,1) == 2, 'Should be 2'\n\nprint('Tests passed')\nprint('----------------'"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    '''\n    Test your code by un-commenting the below line\n    '''\n    x = 0\n    y = 1\n    z = 2\n    test_three_equal(x,y,z"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     test_three_equal(10,10,10) == 3, 'Should return 3'\nassert     test_three_equal(10,20,10) == 2, 'Should return 2'\nassert     test_three_equal(10,10,11) == 1, 'Should return 1'\nassert     test_three_equal(10,10,12) == 0, 'Should return 0'\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_rotation([1, 2, 3, 4]) == 1, \"Wrong\"\nassert     count_rotation([1, 2, 3, 4, 5]) == 2, \"Wrong\"\nassert     count_rotation([1, 2, 3, 4, 5, 6]) == 3, \"Wrong\"\nassert     count_rotation([1, 2, 3, 4, 5, 6, 7]) == 4, \"Wrong\"\nassert     count_rotation([1, 2, 3, 4, 5, 6, 7, 8]) == 5, \"Wrong\"\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(count_rotation([1,2,3,4,5])) # (1,0,0)\nprint(count_rotation([1,2,3,4,5,6,7,8])) # (1,1,0)\nprint(count_rotation([1,2,3,4,5,6,7,8,9,10])) # (2,1,1)\nprint(count_rotation([1,2,3,4,5,6,7,8,9,10,11])) # (2,2,1)\nprint(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12])) # (3,2,2)\nprint(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13])) # (3,3,2)\nprint(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14])) # (3,3,3)\nprint(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])) # (3,4,3)\nprint(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])) # (3,5,3)\nprint(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])) # (3,6,3)\nprint(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])) # (4,3,3)\nprint(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])) # (4,4,3)\nprint(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])) # (4,5,3)\nprint(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])) # (5,4,4)\nprint(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22])) # (5,5,4)\nprint(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23])) # (6,5,5)\nprint(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24])) # (6,6,5)\nprint(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25])) # (7,6,6)\nprint(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26])) # (7,7,6)\nprint(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27])) # (8,7,7)\nprint(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28])) # (8,8,7)\nprint(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29])) # (9,8,8)\nprint(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30])) # (10,9,8)\nprint(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31])) # (11,10,8)\nprint(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32])) # (12,11,8)\nprint(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33])) # (13,12,8)\nprint(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34])) # (14,13,8)\nprint(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35])) # (15,14,8)\nprint(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36])) # (16,15,8)\nprint(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37])) # (17,16,8)\nprint(count_rotation([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38])) # (18,17,8)\nprint(count_rotation([1,2,3,4"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_rotation([1,2,3,4,5]) == 0, \"First Array\"\nassert     count_rotation([5,6,7,8,9]) == 1, \"Second Array\"\nassert     count_rotation([1,2,3,4,5]) == 0, \"Third Array\"\nassert     count_rotation([1,2,3,4,5]) == 0, \"Fourth Array\"\nassert count_rotation([]) == 0, \"Empty Array\"\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_rotation([2,3,4,5,1]) == 4, 'Should be 4'\nassert     count_rotation([1,2,3,4,5]) == 0, 'Should be 0'\nassert     count_rotation([1]) == 0, 'Should be 0'"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ncount_rotation([0,1,2,3]) == 1\ncount_rotation([3,2,1,0]) == 0\ncount_rotation([4,2,1,3]) == 1\n\ncount_rotation([5,1,4,2]) == 0\ncount_rotation([1,2,3,4]) == 0\ncount_rotation([2,1,3,4]) == 0\ncount_rotation([1,2,3,4,5]) == 0\n\ncount_rotation([5,1,4,2,3]) == 0\ncount_rotation([3,2,1,0,4]) == 1\ncount_rotation([4,2,1,3,0]) == 2\ncount_rotation([4,2,1,3,0,5]) == 3\ncount_rotation([1,2,3,4,5]) == 0\ncount_rotation([]) == 0\ncount_rotation([5,5,5,5]) == 0\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_rotation([]) == 0, \"The empty list should be handled correctly\"\nassert     count_rotation([1, 2, 3]) == 0, \"One element list should be handled correctly\"\nassert     count_rotation([1, 2, 3, 4, 5]) == 1, \"One rotation list should be handled correctly\"\nassert     count_rotation([3, 5, 1, 2, 4]) == 2, \"Two rotations list should be handled correctly\"\nassert     count_rotation([4, 5, 1, 2, 3]) == 3, \"Three rotations list should be handled correctly\"\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef search_for_rotation(arr, s): \n    '''\n    Write a python function to search a element in the array. If the element is present then return the index else return -1. https://www.geeksforgeeks.org/search-a-element-in-sorted-array-by-binary-search/\n    '''\n    pass\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_perfect_square(0) == False\nassert     is_perfect_square(5) == False\nassert     is_perfect_square(15) == False\nassert     is_perfect_square(48) == True\nassert     is_perfect_square(64) == True\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_perfect_square(2) == False\nassert     is_perfect_square(10) == True\nassert     is_perfect_square(16) == True\nassert     is_perfect_square(26) == False\nassert     is_perfect_square(33) == False\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_perfect_square(9) == False, \"9 is not perfect square\"\nassert     is_perfect_square(36) == True, \"36 is perfect square\"\nassert     is_perfect_square(1) == False, \"1 is not perfect square\"\nassert     is_perfect_square(4) == False, \"4 is not perfect square\"\nassert     is_perfect_square(16) == True, \"16 is perfect square\"\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nassert is_perfect_square(15) == True\nassert is_perfect_square(25) == False\nassert is_perfect_square(144) == True\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_perfect_square(4) == False, \"should return False\"\nassert     is_perfect_square(16) == True, \"should return True\"\nassert     is_perfect_square(1) == True, \"should return True\"\nassert     is_perfect_square(100) == False, \"should return False\"\nassert     is_perfect_square(0) == False, \"should return False\"\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_perfect_square(1) == False\nassert     is_perfect_square(2) == True\nassert     is_perfect_square(3) == False\nassert     is_perfect_square(8) == True\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_perfect_square(9)     == True,    \"Should be True\"\nassert     is_perfect_square(12)     == False,    \"Should be False\"\nassert     is_perfect_square(100)     == True,    \"Should be True\"\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_product_even([1,2,3,4]) == False, \"Should be False\"\nassert     is_product_even([1,2,3,4,5]) == True, \"Should be True\"\nassert     is_product_even([5,3,1,2,4]) == False, \"Should be False\"\n\ndef is_product_odd(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is odd or not.\n    '''\n    pass\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_product_even([1,2,3]) == False, 'incorrect'\nassert     is_product_even([1,2,3,4]) == False, 'incorrect'\nassert     is_product_even([1,2,3,4,5]) == False, 'incorrect'\nassert     is_product_even([1,2,3,4,5,6]) == False, 'incorrect'\nassert     is_product_even([1,2,3,4,5,6,7]) == False, 'incorrect'\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_product_even([1, 2, 3, 4, 5])\nassert     is_product_even([2, 4, 6, 8, 10])\nassert not     is_product_even([1, 3, 5])"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_product_even([\"a\", 2, 4]) == True, \"should be True\"\nassert     is_product_even([\"a\", 2, 4, 1]) == True, \"should be True\"\nassert     is_product_even([\"a\", 2, 1]) == False, \"should be False\"\nassert     is_product_even([2]) == True, \"should be True\"\nassert     is_product_even([1, 2, 3, 4]) == False, \"should be False\"\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_product_even([2,4]) == True\nassert     is_product_even([5,8]) == False\nassert     is_product_even([4,5,6]) == False\nassert     is_product_even([3,5,8]) == True\nassert     is_product_even([1,2,3]) == False\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nis_product_even([2,4]) == True\nis_product_even([2,5]) == False\nis_product_even([2,3,3]) == False\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_product_even([4,6,9,12]) == False\nassert     is_product_even([1,2,3,4]) == True\nassert     is_product_even([1,2,3]) == False\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_sum_list([]) == None, 'Wrong result!'\nassert     max_sum_list([[]]) == None, 'Wrong result!'\nassert     max_sum_list([[1]]) == [1], 'Wrong result!'\nassert     max_sum_list([[1, 2], [3], [4, 5, 6]]) == [7], 'Wrong result!'\nassert     max_sum_list([[1, 2], [1, 2], [1, 2], [1, 2]]) == [2], 'Wrong result!'\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_sum_list([[1,2,3], [4,5,6]]) == [[4,5,6]]\nassert     max_sum_list([[1,2,3], [4,5,6], [3,6,7]]) == [[4,5,6], [3,6,7]]\nassert     max_sum_list([[1,2,3,4], [5,6,7,8]]) == [[8]]\nassert     max_sum_list([[1,2,3,4], [5,6,7,8], [1,2,3,4]]) == [[8]]\nassert     max_sum_list([[1,2,3], [4,5,6], [3,6,7]]) == [[3,6,7]]\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_sum_list(lists) == [[10, 19, 5, 12, 3], [1, 2, 3, 4, 5], [4, 8, 10, 12, 13]]\nassert     max_sum_list([[10, 19, 5, 12, 3], [1, 2, 3, 4, 5], [4, 8, 10, 12, 13]]) == [[10, 19, 5, 12, 3], [1, 2, 3, 4, 5], [4, 8, 10, 12, 13]]\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    # [[1,2,3,4], [5,6,7,8], [9,10,11,12]]\n    max_sum_list([\n        [1,2,3,4],\n        [5,6,7,8],\n        [9,10,11,12]\n    ])\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_sum_list([]) == []\nassert     max_sum_list([[1, 2, 3], [4, 5, 6]]) == [[4, 5, 6]]\nassert     max_sum_list([[1, 1, 1], [2, 2, 2]]) == [[2, 2, 2]]\nassert     max_sum_list([[1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7]]) == [[1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7]]\nassert     max_sum_list([[1, 1, 1], [2, 2, 2], [3, 3, 3], [4, 4, 4], [5, 5, 5], [6, 6, 6]]) == [[6, 6, 6]]\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_sum_list([[1, 2, 3], [0, 4, 2], [-2, -3, -6]]) == [[1, 2, 3], [-2, -3, -6]], \"Wrong Answer\"\nassert     max_sum_list([[-1, -2, -3], [-5, -7, -1], [-5, -8, -10]]) == [[-5, -7, -1], [-8, -10, -5]], \"Wrong Answer\"\nassert     max_sum_list([[-1, -2, -3], [-5, -7, -1], [3, 3, 3]]) == [[-5, -7, -1], [-1, -2, -3]], \"Wrong Answer\"\nassert     max_sum_list([[-1], [-2], [-3]]) == [[-1], [-2], [-3]], \"Wrong Answer\"\nassert     max_sum_list([[]]) == [[]], \"Wrong Answer\"\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nlists = [[1,2,3], [1,-1], [-1, -1, -1], [-1, -1, -1]]\nexpected = [[1,2,3], [1,0,0], [-1, -1, -1], [-1, -1, -1]]\nactual = max_sum_list(lists)\nassert expected == actual\n\n\n\n'''\nGiven a list of integers, return a list such that each element at index i of the new list is the product of all the numbers in the original list except the one at i.\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_run_uppercase(\"AaBbCcD\") == 2\nassert     max_run_uppercase(\"ABfCfD\") == 4\nassert     max_run_uppercase(\"ABCDEF\") == 0\nassert     max_run_uppercase(\"\") == 0\nassert     max_run_uppercase(\"abcd\") == 0\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_run_uppercase(\"CamelCase\") == 1\nassert     max_run_uppercase(\"CamelCaseWwWw\") == 2\nassert     max_run_uppercase(\"CamelCaseWWWWWWWWWW\") == 2\nassert     max_run_uppercase(\"CCCCCAAAAAA\") == 1\nassert     max_run_uppercase(\"\") == 0\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_run_uppercase('Runoob') == 5\nassert     max_run_uppercase('SOmething') == 0\nassert     max_run_uppercase('AaBbCc') == 2\nassert     max_run_uppercase('aAAbbBBcCCCC') == 6\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_run_uppercase('pPpPpPp') == 1\nassert     max_run_uppercase('PpPpPpPp') == 5\nassert     max_run_uppercase('pPpPppP') == 3\nassert     max_run_uppercase('ppPppPp') == 1\nassert     max_run_uppercase('PpPpPpPpPp') == 4\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_run_uppercase('Aaa1234ZZZ') == 'ZZZ'\nassert     max_run_uppercase('AAAZ') == 'AAA'\nassert     max_run_uppercase('ZZZ') == 'ZZZ'\nassert     max_run_uppercase('A1234') == 'A1234'\nassert     max_run_uppercase('1234A') == '1234A'\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_run_uppercase(\"\") == 0\nassert     max_run_uppercase(\"A\") == 1\nassert     max_run_uppercase(\"AA\") == 2\nassert     max_run_uppercase(\"AAAAA\") == 4\nassert     max_run_uppercase(\"AAAAAAA\") == 5\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nmax_run_uppercase(\"A\") == 1\nmax_run_uppercase(\"ZZZZZZZZ\") == 6\nmax_run_uppercase(\"a\") == 1\nmax_run_uppercase(\"ZZZ\") == 3\nmax_run_uppercase(\"Z\") == 1\nmax_run_uppercase(\"ZZ\") == 3\nmax_run_uppercase(\"zz\") == 2\nmax_run_uppercase(\"a\") == 1\nmax_run_uppercase(\"A\") == 1\nmax_run_uppercase(\"\") == 0\nmax_run_uppercase(\"aAAA\") == 5\nmax_run_uppercase(\"Aa\") == 2\nmax_run_uppercase(\"AA\") == 2\nmax_run_uppercase(\"A\") == 1\nmax_run_uppercase(\"\") == 0\n\n\ndef min_run_lowercase(test_str):\n    '''\n    Write a function to find minimum run of lowercase characters in the given string.\n    '''\n    pass\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef max_run_lowercase(test_str):\n    '''\n    Write a function to find maximum run of lowercase characters in the given string.\n    '''\n    pass\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_run_uppercase('AabAA') == 2\nassert     max_run_uppercase('AbBAcDeABC') == 2\nassert     max_run_uppercase('AabAABc') == 2\nassert     max_run_uppercase('AabAAbc') == 3\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_run_uppercase('a') == 1\nassert     max_run_uppercase('abc') == 3\nassert     max_run_uppercase('Aa') == 2\nassert     max_run_uppercase('aA') == 2\nassert     max_run_uppercase('AA') == 2\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     first_odd([1, 2, 3, 4, 5]) == 2, \"Expected 2\"\nassert first_odd([1, 2, 3, 4, 5]) == 1, \"Expected 1\"\nassert     first_odd([-1, -2, -3, -4, -5]) == -3, \"Expected -3\"\nassert first_odd([-1, -2, -3, -4, -5]) == -2, \"Expected -2\"\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nfirst_odd([1,3,5,7,9]) == 2\nfirst_odd([1,3,5,6]) == None\nfirst_odd([5,5,5]) == None\nfirst_odd([1]) == None\n\n\ndef count_smallest(nums):\n    '''\n    Write a python function to count the number of elements smaller than a given value in a list.\n    '''\n    pass\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef second_odd(nums):\n    '''\n    Write a python function to find the second odd number in a given list of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     first_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 7, 'Wrong output'\nassert     first_odd([1, 3, 5, 7, 9]) == 7, 'Wrong output'\nassert     first_odd([10, 11, 12, 13, 14]) == 14, 'Wrong output'\nassert     first_odd([0, -1, -3, -5, -7]) == -1, 'Wrong output'\nassert     first_odd([0]) == 0, 'Wrong output'\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     first_odd([]) == None, 'empty list should return None'\nassert     first_odd([1]) == None,'single element list should return None'\nassert     first_odd([1, 2, 3, 4]) == 1, 'odd number should be returned'\nassert     first_odd([1, 3, 5, 7]) == 5, 'odd number should be returned'\nassert     first_odd([1, 2, 3, 4, 5, 6]) == None,'multi-element list should return None'\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     first_odd([]) == -1,     'Expected -1'\nassert     first_odd([0]) == 0,     'Expected 0'\nassert     first_odd([5]) == 1,     'Expected 1'\nassert     first_odd([1, 5, 3, 4, 5, 7, 8, 9, 6, 5, 4, 8, 9, 5, 6, 1, 2, 9, 5]) == 1,     'Expected 1'\nassert     first_odd([10, 20, 30, 40, 50]) == -1,     'Expected -1'\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     first_odd([1, 2, 3, 4, 5, 6]) == 1, 'Wrong output'\nassert     first_odd([1, 3, 5, 7]) == 3, 'Wrong output'\nassert     first_odd([1, 3, 5, 8]) == None, 'Wrong output'\nassert     first_odd([1, 2, 3, 4, 5, 6, 7]) == 6, 'Wrong output'\nassert     first_odd([1, 2, 3, 4, 5, 6, 7, 8]) == None, 'Wrong output'\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     first_odd([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 2, \\\n        \"Wrong output\"\nassert first_odd([1, 3, 5, 7, 9]) == 9, \\\n        \"Wrong output\"\nassert first_odd([1, 3, 5]) == 5, \\\n        \"Wrong output\"\nassert first_odd([1]) == 1, \\\n        \"Wrong output\"\nassert first_odd([]) == None, \\\n        \"Wrong output\"\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     first_odd([1,2,3,4,5])    ==  1\nassert     first_odd([1,3,5,7,9])    ==  7\nassert     first_odd([0,2,3,4,5])    ==  0\nassert     first_odd([10,11,12,13,14,15])    ==  15\nassert     first_odd([1.5,3.5,5.5,7.5,9.5])    ==  7.5\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_K([(1,2,3),(5,8),(9,7,4)], 3) == True, \"Should be True\"\nassert     check_K([(1,2,3),(5,8),(9,7,4)], 5) == False, \"Should be False\"\nassert     check_K([(1,2,3),(5,8),(9,7,4)], 4) == False, \"Should be False\"\nassert     check_K([(1,2,3),(5,8),(9,7,4)], 1) == False, \"Should be False\"\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_K((1,2,3), 3) == True\nassert     check_K((1,2,3), 4) == False\nassert     check_K((1,2,3), 5) == True\nassert     check_K((1,2,3), 6) == False\nassert     check_K((1,2,3,3,4,5,5), 5) == True\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_K(((1, 2), (3, 4)), 0) == True, \"Wrong Answer\"\nassert     check_K(((1, 2), (3, 4)), 1) == True, \"Wrong Answer\"\nassert     check_K(((1, 2), (3, 4)), 2) == False, \"Wrong Answer\"\nassert     check_K(((1, 2), (3, 4)), 3) == True, \"Wrong Answer\"\nassert     check_K(((1, 2), (3, 4)), 4) == False, \"Wrong Answer\"\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_K(test_tup, K) == False, 'Wrong answer'\nassert     check_K(test_tup, K + 1) == False, 'Wrong answer'\nassert     check_K(test_tup, K - 1) == False, 'Wrong answer'\n\nprint('The function check_K(test_tup, K) is correct')\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_K((1,2,3,4,5), 3) == True, 'check_K not implemented correctly'\nassert     check_K((1,2,3,4,5), 1) == True, 'check_K not implemented correctly'\nassert     check_K((1,2,3,4,5), -1) == False, 'check_K not implemented correctly'\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_K((1, 2), K=1) == True\nassert     check_K((1, 2), K=2) == False\nassert     check_K((1, 2, 3), K=1) == True\nassert     check_K((1, 2, 3), K=2) == False\nassert     check_K((1, 2, 2), K=1) == True\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_K(('a', 'b', 'c'), 1) == False, 'failed at check_K'\nassert     check_K(('a', 'b', 'c'), 2) == True, 'failed at check_K'\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_K(((1, 2, 3), (5, 6, 7), (9, 10, 11)), 4) == False\nassert     check_K(((1, 2, 3), (5, 6, 7), (9, 10, 11)), 3) == True\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef check_smaller_list(test_list1, test_list2):\n    '''\n    Write a function to check if each element of second list is smaller than its corresponding element in the first list.\n    '''\n    pass\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_smaller((3,4,5),(2,1,0)) == False\nassert     check_smaller((3,4,5),(3,4,5)) == False\nassert     check_smaller((2,1,0),(3,4,5)) == True\n\n\n\n\n'''\nWrite a function to sort a list of tuples by their length.\n'''\ndef sort_by_len(list_of_tuples):\n    '''\n    Write a function to sort a list of tuples by their length.\n    '''\n    pass\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_smaller(('c','a'),('a','c')) == 'c'\nassert     check_smaller(('a','b'),('c','d')) == 'd'\nassert     check_smaller(('a','b'),('b','a')) == 'b'\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_smaller((-1, -2), (0, -2))    ==    (True, True)\nassert     check_smaller((-1, -2), (0, -1))    ==    (False, True)\nassert     check_smaller((-1, -2), (1, -2))    ==    (True, False)\nassert     check_smaller((1, 2), (-1, 2))    ==    (True, False)\nassert     check_smaller((1, 2), (-1, 1))    ==    (True, False)\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_smaller((10, 11), (20, 25)) == (True, False)\nassert     check_smaller((0, 0), (100, 100)) == (False, False)\n\nprint('Coding complete? Click \"Check\" to earn cool rewards!')"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_smaller((1,2,3,4,5), (10,2,5,6,7)) == True\nassert     check_smaller((1,2,3,4,5), (10,2,5,7,7)) == False"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_smaller((1, 2, 3), (10, 11, 12))     == False\nassert     check_smaller((1, 2, 3), (0, 11, 12))     == True\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_smaller((1,2,3), (4,5,6)) == False, \"1st Tuple is not smaller than 2nd Tuple\"\nassert     check_smaller((1,2,3), (4,2,2)) == True, \"1st Tuple is smaller than 2nd Tuple\"\n\n'''\nQ3.4\nGiven a tuple, write a function to create a new tuple with rotated elements.\n'''"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_smaller( (1,2), (2,3) ) == False\nassert     check_smaller( (2,3), (1,2) ) == True\nassert     check_smaller( (1,2), (1,1) ) == True\nassert     check_smaller( (1,2,1), (1,1,2) ) == True\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ncheck_smaller((1,2), (5,3)) == (True, True)\nassert \ncheck_smaller((-1,3), (5,3)) == (True, False)\nassert \ncheck_smaller((1,2), (5,3,4)) == (False, False"
    }
]