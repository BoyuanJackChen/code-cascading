[
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     similar_elements(\n            (1, 2),\n            (2, 3)) == set([1])\nassert     similar_elements(\n            (1, 1, 3),\n            (1, 2, 4)) == set([1])\nassert     similar_elements(\n            (1, 1, 2, 4),\n            (1, 1, 2)) == set([1])\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(\n    '''\n    # Test Case 1\n    >>> print(similar_elements([1,2,3,4], (4,1,2,3)))\n    True\n    >>> print(similar_elements([1,2,3,4,5], (2,3,4,5,6)))\n    True\n    >>> print(similar_elements([1,2,3,4,5], (2,4,3,5,6)))\n    False\n    >>> print(similar_elements([1,2,3,4], (2,3,4,5,6)))\n    False\n    >>> print(similar_elements([1,2,3,4], (2,4,3,4,6)))\n    False\n    >>> print(similar_elements([1,2,3,4], (2,4,6,4)))\n    False\n    >>> print(similar_elements([1,2,3,4], (2,4,5,4)))\n    True\n    >>> print(similar_elements([1,2,3,4], (4,5,6,7)))\n    False\n    >>> print(similar_elements([1,2,3,4], (4,5,6,7,8)))\n    False\n    >>> print(similar_elements([1,2,3,4], (4,5,6,7,9)))\n    False\n    >>> print(similar_elements([1,2,3,4], (4,5,6,7,8,9)))\n    False\n    >>> print(similar_elements([1,2,3,4], (4,5,6,7,8,9,10)))\n    True\n    >>> print(similar_elements([1,2,3,4], (4,5,6,7,8,9,10,11)))\n    False\n    >>> print(similar_elements([1,2,3,4], (4,5,6,7,8,9,10,11,12)))\n    False\n    >>> print(similar_elements([1,2,3,4], (4,5,6,7,8,9,10,11,12,13)))\n    False\n    >>> print(similar_elements([1,2,3,4], (4,5,6,7,8,9,10,11,12,13,14)))\n    False\n    >>> print(similar_elements([1,2,3,4], (4,5,6,7,8,9,10,11,12,13,14,15)))\n    True\n    >>> print(similar_elements([1,2,3,4], (4,5,6,7,8,9,10,11,12,13,14,15,16)))\n    False\n    >>> print(similar_elements([1,2,3,4], (4,5,6,7,8,9,10,11,12,13,14,15,16,17)))\n    True\n    >>> print(similar_elements([1,2,3,4], (4,5,6,7,8,9,10,11,12,13,14,15,16,17,18)))\n    False\n    >>> print(similar_elements([1,2,3,4], (4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19)))\n    True\n    >>> print(similar_elements([1,2,3,4], (4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)))\n    False\n    >>> print(similar_elements([1,2,3,4], (4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21)))\n    True\n    >>> print(similar_elements([1,2,3,4], (4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22)))\n    False\n    >>> print(similar_elements([1,2,3,4], (4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23)))\n    False\n    >>> print(similar_elements([1,2,3,4], (4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24)))\n    False\n    >>> print(similar_elements([1,2,3,4], (4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25)))\n    False\n    >>> print(similar_elements([1,2,3,4], (4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26)))\n    False\n    >>> print(similar_elements([1,2,3,4], (4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27)))\n    False\n    >>> print(similar_elements([1,2,3,4], (4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28)))\n    False\n    >>> print(similar_elements([1,2,3,4], (4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29)))\n    False\n    >>> print(similar_elements([1,2,3,4], (4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30)))\n    False\n    >>> print(similar_elements([1,2,3,4], (4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31)))\n    False\n    >>> print(similar_elements([1,2,3,4], (4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32)))\n    False\n    >>> print(similar_elements([1,2,3,4], (4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33)))\n    False\n    >>> print(similar_elements([1,2,3,4], (4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34)))\n    False\n    >>> print(similar_elements([1,2,3,4], (4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35)))\n    False\n    >>> print(similar_elements([1,2,3,4], (4,5,6,7,8,9,10,11,12,13"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     similar_elements((1,2,3), (1,2,3)) == True\nassert     similar_elements((1,2,3), (2,3,3)) == False\nassert     similar_elements((1,2,3), (1,2,3,4)) == True\nassert     similar_elements((1,2,3), (1,4,3)) == False\nassert     similar_elements((1,2,3), (1,2,3,4,5)) == True\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     (similar_elements((1,2),(3,4)) ) == (), f\"Expected: (), Got: {similar_elements((1,2),(3,4))}\"\nassert     (similar_elements((2,4),(1,3)) ) == (), f\"Expected: (), Got: {similar_elements((2,4),(1,3))}\"\nassert     (similar_elements((1,2,3,4,5),(3,4,5,6,7)) ) == (), f\"Expected: (), Got: {similar_elements((1,2,3,4,5),(3,4,5,6,7))}\"\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     similar_elements([1, 2, 3, 4], [2, 5, 6, 6]) == [2, 3]\nassert     similar_elements([1, 2, 3, 4], [3, 5, 6, 6]) == [3]\nassert     similar_elements([1, 2, 3, 4], [1, 4, 6, 6]) == []\n\n\ndef has_same_elements(list1, list2):\n    '''\n    Write a function to find whether two lists have same elements in the same order.\n    '''\n    pass\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     similar_elements(test_tup1, test_tup2) == (1, 2)\nassert     similar_elements(test_tup3, test_tup4) == (3, 4)\nassert     similar_elements(test_tup5, test_tup6) == (5, 6)\nassert     similar_elements(test_tup7, test_tup8) == (7, 8)\nassert     similar_elements(test_tup9, test_tup10) == (9, 10)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    similar_elements([1,2,3], [2,3,4]) == (2,3)\n    similar_elements([1,2,3,4], [2,3,4]) == (2,3)\n    similar_elements([1,2,3,4], [2,3,4]) == (2,3)\n    similar_elements([1,2,3], [3,4,5]) == (3)\n    similar_elements([1,2], [1,2]) == (2)\n    similar_elements([1,2], [2,1]) == (1)\n    similar_elements([1,2], [2,1,3]) == (1)\n    similar_elements([1,2,3], [2,3,4]) == (2)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef frequency_sort(lst):\n    '''\n    Write a function that takes a list and returns a sorted list with the same elements\n    but in the order they appear in the given list.\n\n    E.g., if the input list is:\n    [6, 1, 4, 1, 3, 9, 0, 2, 6]\n    \n    the function should return:\n    [0, 1, 1, 1, 2, 3, 4, 6, 6]\n    '''\n    pass\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     similar_elements((1, 2, 4, 6, 8), (5, 6, 7, 8)) == (5, 6, 7)\nassert     similar_elements((1, 2, 4), (5, 6, 7)) == ()\nassert     similar_elements((1, 2, 4), (5,)) == ()\nassert     similar_elements((1, 2, 4), (2,)) == (2,)\nassert     similar_elements((1, 2, 4), (5, 5)) == (5, )\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     similar_elements([1,2,3,4], [3,4,5,6]) == (3,4)\nassert similar_elements([1,2,3,4], [3,4,5,6,7]) == (3,4)\nassert similar_elements([1,2,3,4], [3,4,5,6,7,8]) == (3,4)\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_not_prime(1) == False, \"Test case 1 Failed\"\nassert     is_not_prime(2) == False, \"Test case 2 Failed\"\nassert     is_not_prime(3) == True, \"Test case 3 Failed\"\nassert     is_not_prime(4) == True, \"Test case 4 Failed\"\nassert     is_not_prime(5) == False, \"Test case 5 Failed\"\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_not_prime(1) == False, \"First\"\nassert is_not_prime(2) == False, \"Second\"\nassert is_not_prime(4) == True, \"Third\"\nassert is_not_prime(12) == False, \"Fourth\"\nassert is_not_prime(25) == True, \"Fifth\"\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef prime_number_in_a_range(start, end):\n    '''\n    Write a python function that calculates the prime numbers in a given range.\n    '''\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_not_prime(1) == False\nassert     is_not_prime(2) == True\nassert     is_not_prime(3) == False\nassert     is_not_prime(4) == True\nassert     is_not_prime(5) == False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_not_prime(13)==True, \"is_not_prime(13) failed\"\nassert     is_not_prime(14)==False, \"is_not_prime(14) failed\"\nassert     is_not_prime(1)==True, \"is_not_prime(1) failed\"\nassert     is_not_prime(0)==False, \"is_not_prime(0) failed\"\nassert     is_not_prime(9)==True, \"is_not_prime(9) failed\"\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_not_prime(5) == True\nassert is_not_prime(1) == True\nassert is_not_prime(2) == False\nassert is_not_prime(3) == True\nassert is_not_prime(4) == False\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     heap_queue_largest([1,2,3,4,5],1) == [5], \"Wrong\"\nassert     heap_queue_largest([1,2,3,4,5],2) == [4,5], \"Wrong\"\nassert     heap_queue_largest([1,2,3,4,5],3) == [5,4,3], \"Wrong\"\nassert     heap_queue_largest([1,2,3,4,5],4) == [5,4,3,2], \"Wrong\"\nassert     heap_queue_largest([1,2,3,4,5],5) == [5,4,3,2,1], \"Wrong\"\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     heap_queue_largest([2,3,1,4,5,6,7,8],2) == [7,8,6,5,4,3,2,1]\nassert     heap_queue_largest([2,3,1,4,5,6,7,8],1) == [8,7,6,5,4,3,2,1]\nassert     heap_queue_largest([2,3,1,4,5,6,7,8],10) == [8,7,6,5,4,3,2,1]\nassert     heap_queue_largest([],1) == []\nassert     heap_queue_largest([1],1) == [1]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     heap_queue_largest([3,5,2,9,6],3) ==  [9,5,2]\nassert heap_queue_largest([-1,2,5,1,2],2) ==  [-1,2]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     heap_queue_largest([-1,2,3,4,5,6,7,8,9,10],5) == [-10,-9,-8,-7,-6,-5]\nassert     heap_queue_largest([-1,-2],2) == [-2,-1]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nclass Solution:\n    def largest_n_num(nums, n):\n        '''\n        Write a function that, given a list of numbers, returns the n largest numbers.\n        '''\n        return nums[-n:]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef heap_queue_smallest(nums, n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    pass\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert not is_Power_Of_Two (4), True\nassert not is_Power_Of_Two (3), True\nassert not is_Power_Of_Two (5), True\nassert not is_Power_Of_Two (6), True\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == '__main__':\n    x = 11\n    print(is_Power_Of_Two(x))\n    x = 7\n    print(is_Power_Of_Two(x))"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_Power_Of_Two(4) == True, \"is_Power_Of_Two: 4 is not a Power_Of_Two\"\nassert is_Power_Of_Two(9) == True, \"is_Power_Of_Two: 9 is not a Power_Of_Two\"\nassert is_Power_Of_Two(10) == False, \"is_Power_Of_Two: 10 is a Power_Of_Two\"\nassert is_Power_Of_Two(11) == False, \"is_Power_Of_Two: 11 is a Power_Of_Two\"\nassert is_Power_Of_Two(12) == False, \"is_Power_Of_Two: 12 is a Power_Of_Two\"\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert not \nassert not is_Power_Of_Two(0)\nassert not is_Power_Of_Two(1)\nassert is_Power_Of_Two(2)\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_Power_Of_Two(2) == False, \"error 1\"\nassert     is_Power_Of_Two(4) == True, \"error 2\"\nassert     is_Power_Of_Two(12) == False, \"error 3\"\nassert     is_Power_Of_Two(13) == False, \"error 4\"\nassert     is_Power_Of_Two(23) == True, \"error 5\"\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     (is_Power_Of_Two (2**10) == False), \"Should be False\"\nassert     (is_Power_Of_Two (2**15) == False), \"Should be False\"\nassert     (is_Power_Of_Two (2**18) == True), \"Should be True\"\nassert     (is_Power_Of_Two (2**19) == False), \"Should be False\"\n\nprint(\"You passed the test\")\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_Power_Of_Two(0) == True, 'The given arguments should be 0.'\nassert     is_Power_Of_Two(1) == True, 'The given arguments should be 1.'\nassert     is_Power_Of_Two(2) == True, 'The given arguments should be 2.'\nassert     is_Power_Of_Two(10) == True, 'The given arguments should be 2.'\nassert     is_Power_Of_Two(11) == False, 'The given arguments should be 0.'\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_char_long('hello') == 'e ol', 'find_char_long failed'\nassert     find_char_long('hello python') == 'e ol pyth', 'find_char_long failed'\nassert     find_char_long('i love you') == 'e ol v eo', 'find_char_long failed'\nassert     find_char_long('hello world') == '', 'find_char_long failed'\nprint('find_char_long: all tests passed')\n\ndef find_long_words(text):\n    '''\n    Write a function to find all words in a text which are at least 4 characters long.\n    '''\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_char_long('Peyton Manning, believe me') == ['Peyton', 'Manning', 'bemine']\nassert find_char_long('Peyton Manning') == False\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_char_long('Hellllo World!') == ['Hello', 'World']\nassert     find_char_long('helloooooooooooooo') == ['hellooo']\nassert     find_char_long('a') == ['a']\nassert     find_char_long('') == []\nassert     find_char_long('hello world!') == ['world']\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_char_long(\"I am a test\") ==     [\"I\", \"am\", \"test\"]\nassert     find_char_long(\"I am a test 123\") ==     [\"I\", \"am\", \"test\"]\nassert     find_char_long(\"I am a test 123\") ==     [\"I\", \"am\", \"test\"]\nassert     find_char_long(\"I am a test 123  456\") ==     [\"I\", \"am\", \"test\", \"123\", \"456\"]\nassert     find_char_long(\"I am a test 123  456\") ==     [\"I\", \"am\", \"test\", \"123\", \"456\"]\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_char_long(\"The sunset sets at twelve o' clock.\") == ['twelve', 'twenty', 'four']\nassert find_char_long(\"The narwhal bacons at midnight.\") == ['bacon']\nassert find_char_long(\"Python exercises\") == ['exercises']\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_char_long('abcdde') == ['abcde']\nassert     find_char_long('AaBbCc') == ['AaBbCc']\nassert     find_char_long('AaBbCcA') == ['AaBbCc', 'AaBbCcA']\nassert     find_char_long('aa') == []\nassert     find_char_long('aaAa') == ['aaAa']\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_char_long(\"this is a test\") == [\"this\",\"is\",\"a\"]\nassert find_char_long(\"This is a test\") == []\nassert find_char_long(\"This is a test\") == []\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_char_long('ab') == False\nassert     find_char_long('abcd') == False\nassert     find_char_long('abcd') == False\nassert     find_char_long('abcd') == False\nassert     find_char_long('abcd') == False\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_char_long('this is a sample sentence') == ['sample','sentence']\nassert find_char_long('a') == []\nassert find_char_long(' ') == []\nassert find_char_long('abcd') == []\nassert find_char_long(' a') == ['a']\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]\nassert     square_nums([-3, -2, -1, 0, 1, 2]) == [-3, 4, 1, 0, 4, 9]\nassert     square_nums([0, 1, 4, 5, 16, 25]) == [0, 1, 4, 9, 16, 25]\nassert     square_nums([]) == []\nassert     square_nums([0, 1, 4, 5, 16, 25, -3, -2, -1]) == [-3, 4, 1, 0, 4, 9]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     square_nums([0, 1, 4, 9]) == [0, 1, 4, 81]\nassert     square_nums([1, 2, 3]) == [1, 4, 9]\nassert     square_nums([-3, 4, -8, 9]) == [1, 4, 9, 81]\nassert     square_nums([-9, -10, -11, -12]) == [1, 16, 25, 36]\n\n'''\nProblem 2: Write a function to sort a list of dicts using their keys.\n'''\ndef sort_dict_keys(dicts):\n    '''\n    Write a function to sort a list of dicts using their keys.\n    '''\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     square_nums([0, 1, 4, 9]) == [0, 1, 16, 81], 'Square numbers are not calculated properly'\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25], \"Square nums did not work!\"\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    "
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nsquare_nums([1,2,3]) == [1,4,9]\nassert \nsquare_nums([-1,4,-9]) == [-1,4,25]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     square_nums([0, 1, 2, 3, 4]) == [0, 1, 4, 9, 16]\nassert square_nums([0, 0, 1, 1, 4]) == [0, 0, 1, 1, 4]\nassert square_nums([-1, 0, 1, 2]) == [0, 0, 1, 4]\nassert square_nums([-10, 0, 1, 2]) == [0, 0, 1, 4]\nassert square_nums([-10, 0, -1, 2]) == [0, 0, -1, 4]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nsquare_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]\nsquare_nums([0, -1, -2, -3, -4]) == [-1, 4, 9, 16, 25]\nsquare_nums([1, 2, 3]) == [1, 4, 9]\nsquare_nums([]) == []\nsquare_nums([11, 0]) == [11, 0]"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     square_nums([1,2,3]) == [1,4,9],'square_nums failed'\nassert     square_nums([1,2,3,4,5]) == [1,4,9,16,25],'square_nums failed'\nassert     square_nums([]) == [],'square_nums failed'\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Rotations('') == 0, 'None'\nassert    find_Rotations('A') == 0, 'A'\nassert    find_Rotations('B') == 1, 'B'\nassert    find_Rotations('AA') == 0, 'AA'\nassert    find_Rotations('AB') == 1, 'AB'\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Rotations(\"ABCD\") == 1, \"Test Case Failed\"\nassert     find_Rotations(\"ABCB\") == 2, \"Test Case Failed\"\nassert     find_Rotations(\"ABCAB\") == 3, \"Test Case Failed\"\nassert     find_Rotations(\"ABCBD\") == 2, \"Test Case Failed\"\nassert     find_Rotations(\"ABCDCD\") == 3, \"Test Case Failed\"\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Rotations('abc') == 0\nassert     find_Rotations('abcd') == 1\nassert     find_Rotations('abcdec') == 3\nassert     find_Rotations('abcdefghijklmnopqrstuvwxyz') == 26\nassert     find_Rotations('bcdefghijklmnopqrstuvwxyzabc') == 27\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Rotations(\"waterbottle\") == 1\nassert     find_Rotations(\"apple\") == 0\nassert     find_Rotations(\"submarine\") == 2\nassert     find_Rotations(\"rotator\") == -1\nassert     find_Rotations(\"expert\") == -1\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    find_Rotations(\"abcd\") == 4\n    find_Rotations(\"abcc\") == 4\n    find_Rotations(\"abcde\") == 5\n    find_Rotations(\"abcdef\") == 7\n    find_Rotations(\"abcdefg\") == 7\n    find_Rotations(\"abcdefgh\") == 7\n    find_Rotations(\"abcdefghi\") == 8\n    find_Rotations(\"abcdefghijk\") == 8\n    find_Rotations(\"abcdefghijkl\") == 8\n    find_Rotations(\"abcdefghijk\") == 8\n    find_Rotations(\"abcc\") == 4\n    find_Rotations(\"abc\") == 3\n    find_Rotations(\"\") == 1\n    find_Rotations(\"\") == 1\n    find_Rotations(\"A\") == 1\n    find_Rotations(\"ABC\") == 3\n    find_Rotations(\"ABCD\") == 3\n    find_Rotations(\"ABE\") == 1\n    find_Rotations(\"ABCDEF\") == 7\n    find_Rotations(\"ABCDEFGH\") == 7\n    find_Rotations(\"ABCDEFGHI\") == 8\n    find_Rotations(\"ABCDEFGHIJ\") == 8\n    find_Rotations(\"ABCDEFGHIJK\") == 8\n    find_Rotations(\"ABCDEFGHIJKLM\") == 8\n    find_Rotations(\"ABCDEFGHIJKLMNOP\") == 8\n    find_Rotations(\"ABCDEFGHIJKLMNOPQ\") == 8\n    find_Rotations(\"ABCDEFGHIJKLMNOPQR\") == 8\n    find_Rotations(\"ABCDEFGHIJKLMNOPQRS\") == 8\n    find_Rotations(\"ABCDEFGHIJKLMNOPQRST\") == 8\n    find_Rotations(\"ABCDEFGHIJKLMNOPQRSTU\") == 8\n    find_Rotations(\"ABCDEFGHIJKLMNOPQRSTUV\") == 8\n    find_Rotations(\"ABCDEFGHIJKLMNOPQRSTUVW\") == 8\n    find_Rotations(\"ABCDEFGHIJKLMNOPQRSTUVWX\") == 8\n    find_Rotations(\"ABCDEFGHIJKLMNOPQRSTUVWXZ\") == 8\n    find_Rotations(\"ABCDEFGHIJKLMNOPQRSTUVWXZY\") == 8\n    find_Rotations(\"ABCDEFGHIJKLMNOPQRSTUVWXZYZ\") == 8\n    find_Rotations(\"ABCDEFGHIJKLMNOPQRSTUVWXY\") == 8\n    find_Rotations(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == 8\n    find_Rotations(\"ABCDEFGHIJKLMNOPQRSTUVXY\") == 8\n    find_Rotations(\"ABCDEFGHIJKLMNOPQRSTUVXYZ\") == 8\n    find_Rotations(\"ABCDEFGHIJKLMNOPQRSTUVXYZY\") == 8\n    find_Rotations(\"ABCDEFGHIJKLMNOPQRSTUVXYZYZ\") == 8\n    find_Rotations(\"ABCDEFGHIJKLMNOPQRSTUVXYZYZY\") == 8\n    find_Rotations(\"ABCDEFGHIJKLMNOPQRSTUVXYZYZYZ\") == 8\n    find_Rotations(\"ABCDEFGHIJKLMNOPQRSTUVXYZYZYZY\") == 8\n    find_Rotations(\"ABCDEFGHIJKLMNOPQRSTUVXYZYZYZZ\") == 8\n    find_Rotations(\"ABCDEFGHIJKLMNOPQRSTUVXYZYZYZZY\") == 8\n    find_Rotations(\"ABCDEFGHIJKLMNOPQRSTUVXYZYZYZZYZ\") == 8\n    find_Rotations(\"ABCDEFGHIJKLMNOPQRSTUVXYZYZYZZYZY\") == 8\n    find_Rotations(\"ABCDEFGHIJKLMNOPQRSTUVXYZYZYZZYZYZ\") == 8\n    find_Rotations(\"ABCDEFGHIJKLMNOPQRSTUVXYZYZYZZYZYZY\") == 8\n    find_Rotations(\"ABCDEFGHIJKLMNOPQRSTUVXYZYZYZZYZYZYZ\") == 8\n    find_Rotations(\"ABCDEFGHIJKLMNOPQRSTUVXYZYZYZZYZYZYZY\") == 8\n    find_Rotations(\"ABCDEFGHIJKLMNOPQRSTUVXYZYZYZZYZYZYZYZ\") == 8\n    find_Rotations(\"ABCDEFGHIJKLMNOPQRSTUVXYZYZYZZYZYZYZYZZ\") == 8\n    find_Rotations(\"ABCDEFGHIJKLMNOPQRSTUVXYZYZYZZYZYZYZYZYZZY\") == 8\n    find_Rotations(\"ABCDEFGHIJKLMNOPQRSTUVXYZYZYZZYZYZYZYZYZYZYZ\") == 8\n    find_Rotations(\"ABCDEFGHIJKLMNOPQRSTUVXYZYZYZZYZYZYZYZYZYZYZYZYZ\") == 8\n    find_Rotations(\"ABCDEFGHIJKLMNOPQRSTUVXYZYZYZZYZYZYZYZYZYZYZYZYZYZY\") == 8\n    find_Rotations(\"ABCDEFGHIJKLMNOPQRSTUVXYZYZYZZYZYZYZYZYZYZYZYZYZYZYZYZ\") == 8\n    find_Rotations(\"ABCDEFGHIJKLMNOPQRSTUVXYZYZYZZYZYZYZYZYZYZYZYZYZYZYZYZYZY\") == 8\n    find_Rotations(\"ABCDEFGHIJKLMNOPQRSTUVXYZYZYZZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZ\") == 8\n    find_Rotations(\"ABCDEFGHIJKLMNOPQRSTUVXYZYZYZZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZ\") == 8\n    find_Rotations(\"ABCDEFGHIJKLMNOPQRSTUVXYZYZYZZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZY\") == 8\n    find_Rotations(\"ABCDEFGHIJKLMNOPQRSTUVXYZYZYZZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZ\") == 8\n    find_Rotations(\"ABCDEFGHIJKLMNOPQRSTUVXYZYZYZZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZ\") == 8\n    find_Rotations(\"ABCDEFGHIJKLMNOPQRSTUVXYZYZYZZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZ\") == 8\n    find_Rotations(\"ABCDEFGHIJKLMNOPQRSTUVXYZYZYZZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZY\") == 8\n    find_Rotations(\"ABCDEFGHIJKLMNOPQRSTUVXYZYZYZZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZYZY\") == 8\n    find_Rotations(\"ABCDEFGHIJKLMNOPQRSTUVXYZYZYZZYZYZYZYZYZYZYZYZYZYZY"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_Rotations(\"\") == 0\nassert     find_Rotations(\"ABCD\") == 0\nassert     find_Rotations(\"ABCD\") == 1\nassert     find_Rotations(\"ABCD\") == 2\nassert     find_Rotations(\"ABCDDDD\") == 2\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Rotations(\"peter\") == 3\nassert     find_Rotations(\"hello\") == 0\nassert     find_Rotations(\"paypal\") == 1\nassert     find_Rotations(\"google\") == 1\nassert     find_Rotations(\"pear\") == 2\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_Occ(s,'c') == ''.join([char for char in s if char!= 'c'])\nassert     remove_Occ(s,'c') == ''.join([char for char in s if char!= 'c'])\nassert     remove_Occ(s,'c') == ''.join([char for char in s if char!= 'c'])\nassert     remove_Occ(s,'c') == ''.join([char for char in s if char!= 'c'])\nassert     remove_Occ(s,'c') == ''.join([char for char in s if char!= 'c'])\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_Occ('geeksforgeeks','s') == 'egksforgeeks'\nassert     remove_Occ('geeksforgeeks','g') == 'eeksforgeeks'\nassert     remove_Occ('geeksforgeeks','e') == 'geeksforgeeks'\nassert     remove_Occ('geeksforgeeks','f') == 'eeksforgeeks'\nassert     remove_Occ('geeksforgeeks','k') == 'eeksforgeeks'\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_Occ(s = \"abcd\", ch = \"d\") == \"abcd\", \"Wrong output\"\nassert     remove_Occ(s = \"abcd\", ch = \"a\") == \"abcd\", \"Wrong output\"\nassert     remove_Occ(s = \"abcd\", ch = \"z\") == \"abcd\", \"Wrong output\"\nassert     remove_Occ(s = \"abcd\", ch = \"x\") == \"abcd\", \"Wrong output\"\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_Occ('geeksforgeeks','e') == 'gksforgeeks'\nassert     remove_Occ('geeksforgeeks','k') == 'geeksforgeeks'\nassert     remove_Occ('geeksforgeeks','k') == 'geeksforgeeks'\nassert     remove_Occ('geeksforgeeks','e') == 'geeksforgeeks'\nassert     remove_Occ('geeksforgeeks','g') == 'eeksforgeeks'\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_Occ(\"ab\",\"b\") == \"ab\"\nassert     remove_Occ(\"abc\",\"c\") == \"ab\"\nassert     remove_Occ(\"abab\",\"b\") == \"a\"\nassert     remove_Occ(\"abab\",\"a\") == \"ab\"\nassert     remove_Occ(\"abab\",\"c\") == \"ab\"\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ns = \"geeks\"\nremove_Occ(s,'s') == \"geeks\"\nremove_Occ(s,'k') == \"geeks\"\nremove_Occ(s,'g') == \"ek\"\nremove_Occ(s,'e') == \"eks\"\nremove_Occ(s,'e') == \"ks\"\n\nprint(\"Test case passed...\")\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef fizzbuzz():\n    '''\n    Write a python function to return FizzBuzz (the value of each number divisible by 3 and 5).\n    '''\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef remove_Occ_2(s,ch):\n    '''\n    Write a python function to remove first occurrence of a given character from the string.\n    '''\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_Occ(s = \"Hello World\", ch = \"H\") == \"Hello World\"\nassert     remove_Occ(s = \"Python\", ch = \"z\") == \"y\"\nassert     remove_Occ(s = \"Python\", ch = \"x\") == \"Pyth\"\nassert     remove_Occ(s = \"Hello World\", ch = \"z\") == \"Hel\"\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_matrix([[1,2,3],[4,5,6],[7,8,9]]) == [[1,2,3],[4,5,6],[7,8,9]]\nassert     sort_matrix([[7,3,5],[4,2,9],[1,8,6]]) == [[1,8,6],[4,2,9],[7,3,5]]\nassert     sort_matrix([[7,4,2,3,1],[3,5,6,7,2],[1,8,9,4,5]]) == [[1,8,4,3,2],[1,3,5,7,9],[7,6,2,5,4]]\n\ndef max_sub_matrix(M):\n    '''\n    Given a 2-dimensional matrix, return the maximum sum of a non-empty submatrix.\n    Input:\n    [[3, 3, -6, -8, -2],\n     [-2, -5, -7,  3,  1],\n     [1, 2, 3, -2, -6],\n     [0,  0,  8, -4,  2]]\n    Output:\n    20\n    Explanation:\n    The sum of the matrix obtained after removing the submatrix at (2,2) (i.e., the maximal submatrix) is -8.\n    '''\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_matrix([[5,2,9],[1,6,2]]) == [[1,2,2],[2,6,9]]\nassert     sort_matrix([[6,4,4],[2,3,6]]) == [[2,3,6],[4,4,6]]\nassert     sort_matrix([[1,4,5],[7,4,3],[2,5,1]]) == [[1,4,5],[2,5,1],[4,7,3]]\nassert     sort_matrix([[1,4,7],[2,6,4],[3,8,9],[5,3,9]]) == [[1,4,7],[2,6,4],[3,8,9],[5,3,9]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nimport unittest\n\nclass TestSortMatrix(unittest.TestCase):\n    def test_sort_matrix(self):\n        self.assertEqual(sort_matrix([[10,2],[3,8]]), [[2,10],[8,3]])\n        self.assertEqual(sort_matrix([[1,2,3],[4,5,6]]), [[1,2,3],[4,5,6]])\n        self."
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_matrix([[4,3],[2,2]]) == [[2,2],[4,3]]\nassert sort_matrix([[3,2,4],[5,1,6]]) == [[1,2,4],[3,5,6]]\nassert sort_matrix([[1,2],[3,4],[5,6]]) == [[1,2],[3,4],[5,6]]\nassert sort_matrix([[1,2,5],[4,3,4]]) == [[1,2,5],[4,3,4]]\nassert sort_matrix([[1,2,4,6],[5,3,2,1]]) == [[1,2,4,6],[5,3,2,1]]\nprint(\"Test case success.\")\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_matrix([[1, 2],\n                        [0, 1],\n                        [4, 7]]) == [[0, 1],\n                            [1, 2],\n                            [4, 7]]\nassert     sort_matrix([[1, 2],\n                        [0, 1],\n                        [4, 7]]) == [[0, 1],\n                            [1, 2],\n                            [4, 7]]\nassert     sort_matrix([[0, 1],\n                        [1, 2],\n                        [2, 3]]) == [[0, 1],\n                            [1, 2],\n                            [2, 3]]\nassert     sort_matrix([[-1, 2],\n                        [3, 1],\n                        [1, 1]]) == [[-1, 1],\n                            [3, 1],\n                            [1, 1]]\nassert     sort_matrix([[0, 1, 2, 3],\n                        [4, 5, 6, 7],\n                        [8, 9, 0, 1]]) == [[0, 1, 2, 3],\n                            [4, 5, 6, 7],\n                            [8, 9, 0, 1]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    sort_matrix([[1,2,3,4],[5,6,7,8]]) == [[1,5],[2,6],[3,7],[4,8]]\n    sort_matrix([[5,2,3,8],[4,5,6,7]]) == [[2,4,5,5],[3,5,6,7]]\n    sort_matrix([[4,9,2,3],[6,5,7,8],[8,1,4,5]]) == [[2,4,6,8],[3,5,5,7],[4,9,8,1]]\n    sort_matrix([[7,4,2,1],[3,9,8,6],[5,2,8,7],[9,5,3,4]]) == [[1,3,5,9],[2,2,8,7],[4,4,6,8],[7,7,7,3]]\n    sort_matrix([[8,7,4,1],[5,2,7,8],[9,4,5,6],[3,6,3,7]]) == [[1,3,5,9],[2,2,8,7],[4,4,6,8],[7,7,7,3]]\n    sort_matrix([[8,7,4,1],[5,2,7,8],[9,4,5,6],[3,6,3,7]]) == [[1,3,5,9],[2,2,8,7],[4,4,6,8],[7,7,7,3]]\n    sort_matrix([[5,4,8,2],[3,9,6,7],[6,1,4,9],[8,5,7,3]]) == [[2,4,6,8],[3,9,6,7],[4,5,4,9],[5,1,7,3]]\n    sort_matrix([[1,5,4,2],[4,5,6,7],[3,2,8,9],[7,8,9,1]]) == [[1,4,5,5],[2,2,8,9],[3,3,7,8],[4,4,6,7]]\n    sort_matrix([[9,8,7,4],[6,3,5,2],[2,4,1,3],[5,7,9,6]]) == [[2,2,4,4],[3,3,5,5],[6,6,7,7],[9,9,8,8]]\n    sort_matrix([[6,3,7,8],[2,1,9,5],[4,8,6,7],[5,4,2,3]]) == [[2,1,4,4],[3,3,5,5],[6,6,7,7],[7,7,8,8]]\n    sort_matrix([[4,1,3,2],[6,5,7,8],[9,8,7,4],[2,3,4,5]]) == [[2,3,4,5],[4,4,5,6],[1,1,7,8],[9,9,7,4]]\n    sort_matrix([[1,6,4,2],[5,3,9,8],[7,2,8,9],[3,8,1,5]]) == [[1,3,5,5],[2,2,8,8],[3,3,7,9],[4,4,6,6]]\n    sort_matrix([[7,9,1,2],[5,3,6,8],[4,5,7,0],[6,4,1,3]]) == [[1,1,4,4],[2,2,5,5],[3,3,6,6],[4,4,7,7]]\n    sort_matrix([[7,9,4,2],[5,3,6,8],[4,5,7,0],[6,4,1,3]]) == [[1,1,4,4],[2,2,5,5],[3,3,6,6],[4,4,7,7]]\n    sort_matrix([[7,9,4,2],[5,3,6,8],[4,5,7,0],[6,4,1,3]]) == [[1,1,4,4],[2,2,5,5],[3,3,6,6],[4,4,7,7]]\n    sort_matrix([[7,9,4,2],[5,3,6,8],[4,5,7,0],[6,4,1,3]]) == [[1,1,4,4],[2,2,5,5],[3,3,6,6],[4,4,7,7]]\n    sort_matrix([[1,6,4,2],[5,3,9,8],[7,2,8,9],[3,8,1,5]]) == [[1,3,5,5],[2,2,8,8],[3,3,7,9],[4,4,6,6]]\n    sort_matrix([[1,6,4,2],[5,3,9,8],[7,2,8,9],[3,8,1,5]]) == [[1,3,5,5],[2,2,8,8],[3,3,7,9],[4,4,6,6]]\n    sort_matrix([[1,6,4,2],[5,3,9,8],[7,2,8,9],[3,8,1,5]]) == [[1,3,5,5],[2,2,8,8],[3,3,7,9],[4,4,6,6]]\n    sort_matrix([[1,6,4,2],[5,3,9,8],[7,2,8,9],[3,8,1,5]]) == [[1,3,5,5],[2,2,8,8],[3,3,7,9],[4,4,6,6]]\n    sort_matrix([[4,1,3,2],[6,5,7,8],[9,8,7,4],[2,3,4,5]]) == [[2,2,4,4],[3,3,5,5],[4,4,6,6],[1,1,7,8]]\n    sort_matrix([[4,1,3,2],[6,5,7,8],[9,8,7,4],[2,3,4,5]]) == [[2,2,4,4],[3,3,5,5],[4,4,6,6],[1,1,7,8]]\n    sort_matrix([[4,1,3,2],[6,5,7,8],[9,8,7,4],[2,3,4,5]]) == [[2,2,4,4],[3,3,5,5],[4,4,6,6],[1,1,7,8]]\n    sort_matrix([[4,1,3,2],[6,5,7,8],[9,8,7,4],[2,3,4,5]]) == [[2,2,4,4],[3,3,5,5],[4,4,6,6],[1,1,7,8]]\n    sort_matrix([[5,4,2,1],[3,9,8,7],[6,5,7,4],[8,2,3,9]]) == [[1,1,3,3],[2,2,5,5],[4,4,6,7],[7,7,8,8]]\n    sort_matrix([[5,4,2,1],[3,9,8,7],[6,5,7,4],[8,2,3,9]]) == [[1,1,3,3],[2,2,5,5],[4,4,6,7],[7,7,8,8]]\n    sort_matrix([[5,4,2,1],[3,9,8,7],[6,5,7,4],[8,2,3,9]]) == [[1,1,3,3],[2,2,5,5],[4,4,6,7],[7,7,8,8]]\n    sort_matrix([[5,4,2,1],[3,9,8,7],[6,5,7,4],[8,2,3,9]]) == [[1,1,3"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_matrix([[4,2],\n                      [3,5]]) == [[3,5],\n                      [4,2]]\nassert     sort_matrix([[5,8],\n                      [3,2]]) == [[3,2],\n                      [5,8]]\nassert     sort_matrix([[1,2],\n                      [4,3]]) == [[1,2],\n                      [4,3]]\nassert     sort_matrix([[2,3],\n                      [5,4]]) == [[2,3],\n                      [5,4]]\nassert     sort_matrix([[1,3],\n                      [5,4]]) == [[1,3],\n                      [5,4]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_matrix([[5, 7, 1], \n                        [4, 2, 3], \n                        [0, 6, 1]]) == [[0, 1, 1], \n                                        [1, 2, 3], \n                                        [1, 4, 5]]\n\nassert     sort_matrix([[5, 7, 1], \n                        [4, 2, 3], \n                        [0, 6, 1]]) == [[0, 1, 1], \n                                        [1, 2, 3], \n                                        [1, 4, 5]]\n\nassert     sort_matrix([[5, 7, 1], \n                        [4, 2, 3], \n                        [0, 6, 1]]) == [[0, 1, 1], \n                                        [1, 2, 3], \n                                        [1, 4, 5]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert sort_matrix([[0, 5],\n                    [1, 0]]) == [[0, 1],\n                    [0, 5]]\nassert sort_matrix([[0, 1, 8, 5],\n                    [0, 8, 1, 4],\n                    [1, 0, 7, 8],\n                    [1, 8, 0, 5]]) == [[0, 0, 1, 1],\n                    [0, 0, 5, 8],\n                    [0, 1, 0, 7],\n                    [1, 8, 1, 5]]\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_matrix([\n                                    [0, 2, 0, 0],\n                                    [0, 1, 0, 0],\n                                    [0, 0, 3, 0],\n                                    [0, 0, 0, 2]\n                                ]) == \\\n    [\n        [0, 0, 0, 0],\n        [0, 0, 0, 2],\n        [0, 0, 1, 1],\n        [0, 2, 0, 0]\n    ]\nassert     sort_matrix([\n                                    [0, 0, 0, 0],\n                                    [0, 0, 0, 0],\n                                    [0, 0, 0, 0],\n                                    [0, 0, 0, 0]\n                                ]) == \\\n    [\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0]\n    ]\nassert     sort_matrix([\n                                    [0, 2, 0, 0],\n                                    [0, 1, 0, 0],\n                                    [0, 0, 3, 0],\n                                    [0, 0, 0, 2]\n                                ]) == \\\n    [\n        [0, 0, 0, 0],\n        [0, 0, 0, 2],\n        [0, 0, 1, 1],\n        [0, 2, 0, 0]\n    ]\nassert     sort_matrix([\n                                    [0, 0, 0, 0],\n                                    [0, 0, 0, 0],\n                                    [0, 0, 0, 0],\n                                    [0, 0, 0, 0]\n                                ]) == \\\n    [\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0]\n    ]\nassert     sort_matrix([\n                                    [0, 0, 0, 0],\n                                    [0, 0, 0, 0],\n                                    [0, 0, 0, 0],\n                                    [0, 0, 0, 0]\n                                ]) == \\\n    [\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0]\n    ]\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Volume(1,1,1) == 3\nassert     find_Volume(0.1,0.1,0.1) == 0.2\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Volume(5,2,1) == 12\nassert    find_Volume(2,1,4) == 10\nassert     find_Volume(1,1,1) == 1\nprint('Correct')\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_Volume([1,2,3],1,2) == 5, 'Test case 1 Failed'\nassert     find_Volume([0,0,0],1,2) == 0, 'Test case 2 Failed'\nassert     find_Volume([2,3,4],2,2) == 10, 'Test case 3 Failed'\nassert     find_Volume([1,1,1],1,2) == 4, 'Test case 4 Failed'\nassert     find_Volume([-5,-2,-1],2,3) == -10, 'Test case 5 Failed'\nprint(\"The given test cases are passed\")\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Volume(10,10,5) == 50\nassert     find_Volume(20,10,5) == 500\nassert     find_Volume(30,40,20) == 500\nassert     find_Volume(30,40,15) == 400\nassert     find_Volume(30,40,25) == 600\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Volume(1,1,1) == 1\nassert     find_Volume(2,3,4) == 8\nassert     find_Volume(5,3,1) == 5\nassert     find_Volume(5,5,5) == 25\nassert     find_Volume(10,2,2) == 100\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Volume(2,3,4) == 12, 'Wrong answer'\nassert     find_Volume(4,6,8) == 24, 'Wrong answer'\nassert     find_Volume(10,12,14) == 144, 'Wrong answer'\nassert     find_Volume(4,9,5) == 16, 'Wrong answer'\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_Volume(3,2,1) == 5.0, \"Wrong output\"\nassert     find_Volume(3,3,2) == 12.0, \"Wrong output\"\nassert     find_Volume(5,6,7) == 21.0, \"Wrong output\"\nassert     find_Volume(6,3,5) == 20.0, \"Wrong output\"\nassert     find_Volume(6,7,3) == 20.0, \"Wrong output\"\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_Volume([10,20,30],[20,30,40],[40,50,60]) == 400\nassert     find_Volume([1,1,1],[2,2,2],[3,3,3]) == 6\nassert     find_Volume([1,1,1],[2,2,2],[3,3,3]) == 6\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Volume(1,1,2) == 3, \"Error in function find_Volume\"\nassert     find_Volume(2,2,3) == 6, \"Error in function find_Volume\"\nassert     find_Volume(3,3,4) == 12, \"Error in function find_Volume\"\nassert     find_Volume(3,2,4) == 12, \"Error in function find_Volume\"\nassert     find_Volume(2,3,4) == 6, \"Error in function find_Volume\"\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Volume(2,2,2) == 4\nassert     find_Volume(2,2,3) == 8\nassert     find_Volume(2,2,5) == 10\nassert     find_Volume(2,2,6) == 14\nassert     find_Volume(1,1,1) == 1\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ntext_lowercase_underscore('This is an example') == True\nassert text_lowercase_underscore('This is an Example') == True\nassert text_lowercase_underscore('this is a') == False\nassert text_lowercase_underscore('this is an example') == False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_lowercase_underscore('text_lowercase_underscore') == True, 'You failed the test!'\nassert     text_lowercase_underscore('_text_lowercase_underscore') == False, 'You failed the test!'\nassert     text_lowercase_underscore('_tEXt_lowercase_underscore') == False, 'You failed the test!'\nassert     text_lowercase_underscore('_TEXt_lowercase_underscore') == False, 'You failed the test!'"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_lowercase_underscore('This is a simple test') == True\nassert     text_lowercase_underscore('This is a simple test1') == False\nassert     text_lowercase_underscore('This is a simple_test') == False\nassert     text_lowercase_underscore('This is_a_simple_test') == False\nassert     text_lowercase_underscore('This is_a_simple_test1') == True\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_lowercase_underscore(\"\") == False\nassert     text_lowercase_underscore(\"a\") == False\nassert     text_lowercase_underscore(\"A\") == True\nassert     text_lowercase_underscore(\"1\") == False\nassert     text_lowercase_underscore(\"Abc\") == False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_lowercase_underscore('x') == False\nassert     text_lowercase_underscore('_') == True\nassert     text_lowercase_underscore('1a') == True\nassert     text_lowercase_underscore('a1') == False\n\ndef text_lowercase_underscore_2(text):\n    '''\n    Write a function that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    text_lowercase_underscore('abcd_efgh_jkl')\n    == 'abcd_efgh_jkl'\n    == 'abcd__efgh_jkl'\n    == 'abcd__efgh__jkl'\n    == 'abcd_efgh__jkl'\n    == 'abcd_efgh_jkl'\n\nassert text_lowercase_underscore('a_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t_u_v_w_x_y_z')\n    == 'a_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t_u_v_w_x_y_z'\n\nassert text_lowercase_underscore('a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z')\n    == 'a-b-c-d-e-f-g-h-i-j-k-l-m-n-o-p-q-r-s-t-u-v-w-x-y-z'\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_lowercase_underscore('aBc_def') == True\nassert     text_lowercase_underscore('ABCDEF') == False\nassert     text_lowercase_underscore('ABCdEf') == False\nassert     text_lowercase_underscore('ABC_DEF') == False\nassert     text_lowercase_underscore('a_b_c') == True\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_lowercase_underscore('The_Super_Secret_Word') is True \nassert     text_lowercase_underscore('The_Secret_Word') is True \nassert     text_lowercase_underscore('The_Word') is True \nassert     text_lowercase_underscore('the_word') is True \nassert     text_lowercase_underscore('the-word') is True \n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_lowercase_underscore('g8') == True, \"incorrect\"\nassert     text_lowercase_underscore('g_8') == True, \"incorrect\"\nassert     text_lowercase_underscore('G_8') == True, \"incorrect\"\nassert     text_lowercase_underscore('g-8') == False, \"incorrect\"\nassert     text_lowercase_underscore('G-8') == False, \"incorrect\"\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nsquare_perimeter(2) == 4,'square_perimeter does not have the right output'\nsquare_perimeter(5) == 20,'square_perimeter does not have the right output'\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     square_perimeter(3) == 4,'square_perimeter([3]) should equal 4'\nassert     square_perimeter(4) == 8,'square_perimeter([4]) should equal 8'\nassert     square_perimeter(5) == 13,'square_perimeter([5]) should equal 13'\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nsquare_perimeter(1) == 2\nsquare_perimeter(2) == 4\nsquare_perimeter(3) == 6\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     square_perimeter(4) == 8\nassert     square_perimeter(0) == 0\nassert     square_perimeter(-4) == 16\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nsquare_perimeter(10) == 20,'square_perimeter'\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     str_to_list('abcd', 'acd') == 'abcd', 'Should be: abcd'\nassert not str_to_list('abcd', 'bcd'), 'Should be: '\nassert not str_to_list('abcd', ''), 'Should be: '\nassert str_to_list('', 'abcd') == '', 'Should be: '\nassert str_to_list('', '') == '', 'Should be: '\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     str_to_list('') == '', 'Should return an empty list'\nassert     str_to_list('w') == '', 'Should return an empty list'\nassert     str_to_list(' ') == '', 'Should return an empty list'\nassert     str_to_list('ab') == '', 'Should return an empty list'\nassert     str_to_list('qwerty') == '', 'Should return an empty list'\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     str_to_list(\"xyz\") == [\"x\",\"y\",\"z\"]\nassert     str_to_list(\"xyx\") == [\"x\",\"y\"]\nassert     str_to_list(\"xx\") == [\"x\",\"x\"]\nassert     str_to_list(\"\") == []\nassert     str_to_list(\"abcd\") == [\"a\",\"b\",\"c\",\"d\"]\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     str_to_list(\"Haruisawakami\", \"Pp\") == \"Har\"\nassert     str_to_list(\"Haruisawakami\", \"Y\") == \"Haruisawakami\"\nassert     str_to_list(\"123456\", \"123\") == \"123456\"\nassert     str_to_list(\"12345\", \"123456789\") == \"12345\"\nassert     str_to_list(\"12345\", \"123456789\") == \"12345\"\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef is_palindrome(s): \n    '''\n    Write a function to check if a string is a palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert str_to_list(\"\", \"abcd\") == \"\", \"Expected True\"\nassert str_to_list(\"abcd\", \"\") == \"\", \"Expected True\"\nassert str_to_list(\"abcd\", \"abcd\") == \"abcd\", \"Expected True\"\nassert str_to_list(\"abcd\", \"abcdx\") == \"abcdx\", \"Expected True\"\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     test_duplicate([2,3,1,0,2,5,3]) == True\nassert     test_duplicate([2,3,1,0,2,5,3,7]) == False\nassert     test_duplicate([2,3,1,0,2,5,3,7,8]) == True\nassert     test_duplicate([-2, -3, -1, -0, -2, -5, -3]) == True"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     test_duplicate(arraynums=[1,2,3,4,5,6,7,8,9,9]) == False, \"Should return False\"\nassert     test_duplicate(arraynums=[1,2,3,4,5,6,7,8,9,10]) == True, \"Should return True\"\nassert     test_duplicate(arraynums=[1,2,3,4,5,6,7,8,9,11]) == False, \"Should return False\"\nassert     test_duplicate(arraynums=[1,1,1,1,1,1,1,1,1,1]) == True, \"Should return True\"\nassert     test_duplicate(arraynums=[1,2,3,4,5,6,7,8,9,10]) == True, \"Should return True\"\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     test_duplicate([1,2,2,3,4,5]) == False, \"Should return False\"\nassert     test_duplicate([1,2,2,4,4,5]) == True, \"Should return True\"\nassert     test_duplicate([1,2,2,4,4,5,5]) == False, \"Should return False\"\nassert     test_duplicate([1,2,2,2,3,4,4,5]) == True, \"Should return True\"\nassert     test_duplicate([1,2,2,2,3,4,4,5,5]) == False, \"Should return False\"\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     test_duplicate([1,2,3,1]) == True\nassert     test_duplicate([1,2,3,4]) == False\nassert     test_duplicate([2,1,3,4]) == True\nassert     test_duplicate([1,2,3,4,2]) == True\nassert     test_duplicate([1,2,3,4,2,2]) == Tru"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     test_duplicate([1,2,3,4,5]) == True, \"Should return True\"\nassert test_duplicate([1,2,3,4,4,4,4]) == False, \"Should return False\"\nassert test_duplicate([1,1,1,3]) == True, \"Should return True\"\nassert test_duplicate([1,2,3,4,5,6,7,8]) == False, \"Should return False\"\nassert test_duplicate([1,2,3,4,5,6,7,8,9]) == True, \"Should return True\"\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert test_duplicate([1,2,3,1]) == True, 'Wrong answer'\nassert test_duplicate([1,2,3,4]) == False, 'Wrong answer'\nassert test_duplicate([0,1,1,3,3,7]) == True, 'Wrong answer'\nassert test_duplicate([0,1,1,3,4,7]) == False, 'Wrong answer'\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     test_duplicate([1,2,3,4,5,6,6]) == True\nassert     test_duplicate([1,2,3,4,5,6]) == False\nassert     test_duplicate([]) == True\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef test_sum_array():\n    '''\n    Write a function to calculate the sum of all the positive integers which are not greater than\n    K.\n    '''\n    pass\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_woodall(1) == False\nassert     is_woodall(2) == True\nassert     is_woodall(5) == True\nassert     is_woodall(6) == False\nassert     is_woodall(3) == True\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_woodall(2) == False, 'is_woodall(2) should be False'\nassert     is_woodall(10) == True, 'is_woodall(10) should be True'\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef count_woodall(arr, n):\n    '''\n    Write a function to count the number of woodballs in the given array.\n    '''\n    pass\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef is_woodall_small(x):\n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    pass"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_woodall(False) == True \nassert     is_woodall(True) == False\nassert     is_woodall(0) == False \nassert     is_woodall(-1) == False \nassert     is_woodall(1.0) == False \n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert not is_woodall(1)\nassert not is_woodall(0)\nassert not is_woodall(5)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_woodall(11) == True, 'Wrong output'\nassert     is_woodall(7) == False, 'Wrong output'\nassert     is_woodall(-1) == False, 'Wrong output'\nassert     is_woodall(11.2) == False, 'Wrong output'\nassert     is_woodall('a') == False, 'Wrong output'\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert is_woodall(18) == True\nassert is_woodall(7) == False\nassert is_woodall(3) == True\nassert is_woodall(-5) == True\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     rev(121) == 41\nassert     rev(921) == 921\nassert     rev(321) == 21\nassert     rev(-321) == -321\nassert     rev(-121) == -121\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     rev(2) == 1\nassert     rev(-2) == -1\nassert     rev(0) == 0\nassert     rev(1) == 0\nassert     rev(3) == 2\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nrev(4) == 3\nrev(6) == 5\nrev(9) == 8"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rev(2)    == True, 'Wrong return value'\nassert     rev(3)    == False, 'Wrong return value'\nassert     rev(7)    == False, 'Wrong return value'\nassert     rev(4)    == True, 'Wrong return value'\nassert     rev(4)    == False, 'Wrong return value'\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    rev(-1) == 0\n    rev(2) == 1\n    rev(5) == 1\n    rev(1) == 1\n    rev(0) == 0\n    rev(20) == 10\n\n    "
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef rev(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num // 2 + 1 if num % 2 == 1 else num // 2\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef str_rev(s):\n    '''\n    Write a python function to check if a given string is one less than twice its reverse.\n    '''\n    pass\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rev(13) == True, \"13 should be True\"\nassert rev(123) == False, \"123 should be False\"\nassert rev(1234) == False, \"1234 should be False\"\nassert rev(1234321) == True, \"1234321 should be True\"\nprint(\"Done!\")\nprint(\"-\"*50)\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     rev(10) == 11\nassert rev(17) == 16\nassert rev(18) == 19\n\n\n\ndef is_palindrome(num):\n    '''\n    Write a python function to check if a given number is a palindrome.\n    '''\n    pass\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     rev(4) == 3, 'your function is wrong'\nassert rev(123) == 321, 'your function is wrong'\nassert rev(3456) == 6543, 'your function is wrong'\nprint('your function is correct')\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Max_Num([1,2,3,5,6]) == 6, \"Should return 6\"\nassert     find_Max_Num([1,2,3,5,6,3]) == 6, \"Should return 6\"\nassert     find_Max_Num([1,2,3,5,6,3,2,1]) == 6, \"Should return 6\"\nassert     find_Max_Num([1,2,3,5,6,3,2,1,3,4]) == 6, \"Should return 6\"\nassert     find_Max_Num([1,2,3,5,6,3,2,1,3,4,3,2,1]) == 6, \"Should return 6\"\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Max_Num([1,2,3,4,5]) == 5, \"Wrong Output\"\nassert     find_Max_Num([5,4,3,2,1]) == 5, \"Wrong Output\"\nassert     find_Max_Num([3,5,1,2,4]) == 5, \"Wrong Output\"\nassert     find_Max_Num([2,3,5,1,4]) == 5, \"Wrong Output\"\nassert     find_Max_Num([5,4,1,2,3]) == 5, \"Wrong Output\"\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_Max_Num([2,3,1]) == 3\nassert     find_Max_Num([1,2,3,4,5,6,7,8]) == 9\nassert     find_Max_Num([]) == None\nassert     find_Max_Num([0]) == None\nassert     find_Max_Num([1,2,3,4,5,6,7,8]) == None\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(\"\\n[Pass] or fail test case : \")\ntest_cases = ( \n    [1,2,3,4,5,6], \n    [6,7,8,9,10,1], \n    [10,10,10,10,10,10], \n    [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1], \n    [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1]\n    )\nfor arr in test_cases : \n    print(\"\\nInput : \",arr,\"\\nOutput : \",find_Max_Num(arr),\"\\n\")\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef find_Max_Num(arr) :\n    # Write your code here\n    if len(arr)==0:\n        return 0\n    \n    if len(arr)==1:\n        return int(arr[0])\n        \n    arr1 = arr[0]\n    arr2 = arr[1]\n    \n    max_Num = max(int(arr1), int(arr2))\n    \n    if max_Num>int(arr1):\n        max_Num = max_Num\n    else:\n        max_Num = max_Num\n    \n    for i in range(2,len(arr)):\n        temp_Num = int(arr[i])\n        if temp_Num>max_Num:\n            max_Num = temp_Num\n    \n    return max_Num\n        \n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef find_Largest_Num_I(arr) :\n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    pass\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Max_Num(['a','b','c','d','e']) == \"e\"\nassert     find_Max_Num(['a','b','c','d']) == \"b\"\nassert     find_Max_Num(['a','a','b','b']) == \"a\"\nassert     find_Max_Num(['a','a','a','b']) == \"a\"\nassert     find_Max_Num(['a','a','b','c','b','c']) == \"c\"\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Max_Num([\"6\",\"2\",\"3\",\"4\",\"5\"]) == \"6\"\nassert     find_Max_Num([\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"]) == \"1\"\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     opposite_Signs(-3, -4) == True, \"Expected: True\"\nassert     opposite_Signs(4, -3) == True, \"Expected: True\"\nassert     opposite_Signs(-3, 4) == False, \"Expected: False\"\nassert     opposite_Signs(3, -4) == False, \"Expected: False\"\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     opposite_Signs(-1,1) == True, \"the function should return True\"\nassert     opposite_Signs(-1,-1) == True, \"the function should return True\"\nassert     opposite_Signs(1,-1) == False, \"the function should return False\"\nassert     opposite_Signs(1,1) == False, \"the function should return False\"\n\ndef common_Digits(a,b): \n    '''\n    Write a python function to find common digits between two integers.\n    '''\n    pass\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     opposite_Signs(1,-2) == False, 'The input 1 and -2 are not opposites signs'\nassert opposite_Signs(1,2) == False, 'The input 1 and 2 are not opposites signs'\nassert opposite_Signs(-1,-2) == True, 'The input -1 and -2 are opposites signs'\nassert opposite_Signs(-1,2) == True, 'The input -1 and 2 are opposites signs'\nassert opposite_Signs(2,2) == False, 'The input 2 and 2 are not opposites signs'\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     opposite_Signs(-5,6) == True\nassert     opposite_Signs(-5,-6) == False\nassert     opposite_Signs(1,3) == False\nassert     opposite_Signs(2,1) == False\nassert     opposite_Signs(2,3) == True\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     opposite_Signs(10,10)    == True,    \"The function doesn't return True if the given two numbers have same sign\"\nassert    opposite_Signs(1,-1)    == True,    \"The function doesn't return True if the given two numbers have same sign\"\nassert    opposite_Signs(10,-10)    == False,    \"The function doesn't return False if the given two numbers have opposite sign\"\nassert    opposite_Signs(-10,10)    == False,    \"The function doesn't return False if the given two numbers have opposite sign\"\nassert    opposite_Signs(-1,1)    == False,    \"The function doesn't return False if the given two numbers have opposite sign\"\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert opposite_Signs(4,5) == False\nassert opposite_Signs(-4,5) == True\nassert opposite_Signs(-4,-5) == False\nassert opposite_Signs(4,-5) == True\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     opposite_Signs(1, 1) == False, \"First\"\nassert     opposite_Signs(-1, 1) == True, \"Second\"\nassert     opposite_Signs(-1, -1) == False, \"Third\"\nassert     opposite_Signs(0, -1) == True, \"Fourth\"\nassert     opposite_Signs(1, -1) == False, \"Fifth\"\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    opposite_Signs(0,0) == True\n    opposite_Signs(-1,1) == True\n    opposite_Signs(1, -1) == False\n\n\n\ndef is_subsequence(str1, str2):\n    '''\n    Write a python function to check whether a given string is a substring of a given string.\n    '''\n    pass\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     opposite_Signs(3,4) == True\nassert     opposite_Signs(-3,4) == False\nassert     opposite_Signs(-3,-4) == True\nassert opposite_Signs(3,-4) == True\n\ndef reverse(x): \n    '''\n    Write a python function to reverse the given integer.\n    '''\n    pass\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nis_octagonal(1) == 1\nis_octagonal(2) == 7\nis_octagonal(3) == 26\n\n'''"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_octagonal(1) == 1\nassert     is_octagonal(2) == 3\nassert     is_octagonal(3) == 6\nassert     is_octagonal(4) == 10\nassert     is_octagonal(5) == 12\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_octagonal(1) == 1\nassert     is_octagonal(2) == 7\nassert     is_octagonal(3) == 26\nassert     is_octagonal(4) == 343\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_octagonal(1) == 8\nassert     is_octagonal(2) == 27\nassert     is_octagonal(3) == 544\nassert     is_octagonal(4) == 3025\nassert     is_octagonal(5) == 10946\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef oct_to_num(oct_num):\n    '''\n    Write a function that converts an octagonal number to a number.\n    '''\n    pass\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_octagonal(1) == 1\nassert     is_octagonal(2) == 5\nassert     is_octagonal(3) == 12\nassert     is_octagonal(4) == 24\nassert     is_octagonal(5) == 25\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    # is_octagonal(1) == 1 \n    # is_octagonal(2) == 3 \n    # is_octagonal(3) == 8\n    # is_octagonal(4) == 13\n    # is_octagonal(5) == 21\n    # is_octagonal(6) == 34 \n    # is_octagonal(7) == 55 \n    # is_octagonal(8) == 89\n    # is_octagonal(9) == 144\n    # is_octagonal(10) == 233\n    # is_octagonal(11) == 377\n    # is_octagonal(12) == 676\n    # is_octagonal(13) == 1089\n    # is_octagonal(14) == 1597\n    # is_octagonal(15) == 2584\n    # is_octagonal(16) == 4181\n    # is_octagonal(17) == 7083\n    # is_octagonal(18) == 12512\n    # is_octagonal(19) == 19646\n    # is_octagonal(20) == 30000\n    # is_octagonal(21) == 49164\n    # is_octagonal(22) == 72968\n    # is_octagonal(23) == 126220\n    # is_octagonal(24) == 19646\n    # is_octagonal(25) == 46656\n    # is_octagonal(26) == 777216\n    # is_octagonal(27) == 137440\n    # is_octagonal(28) == 291648\n    # is_octagonal(29) == 486272\n    # is_octagonal(30) == 786432\n    # is_octagonal(31) == 144528\n    # is_octagonal(32) == 314496\n    # is_octagonal(33) == 469312\n    # is_octagonal(34) == 787296\n    # is_octagonal(35) == 125464\n    # is_octagonal(36) == 252032\n    # is_octagonal(37) == 498368\n    # is_octagonal(38) == 786432\n    # is_octagonal(39) == 125472\n    # is_octagonal(40) == 19646\n    # is_octagonal(41) == 30000\n    # is_octagonal(42) == 49164\n    # is_octagonal(43) == 72968\n    # is_octagonal(44) == 126220\n    # is_octagonal(45) == 19646\n    # is_octagonal(46) == 46656\n    # is_octagonal(47) == 777216\n    # is_octagonal(48) == 137440\n    # is_octagonal(49) == 291648\n    # is_octagonal(50) == 486272\n    # is_octagonal(51) == 786432\n    # is_octagonal(52) == 144528\n    # is_octagonal(53) == 314496\n    # is_octagonal(54) == 469312\n    # is_octagonal(55) == 787296\n    # is_octagonal(56) == 125464\n    # is_octagonal(57) == 252032\n    # is_octagonal(58) == 498368\n    # is_octagonal(59) == 786432\n    # is_octagonal(60) == 125472\n    # is_octagonal(61) == 19646\n    # is_octagonal(62) == 30000\n    # is_octagonal(63) == 49164\n    # is_octagonal(64) == 72968\n    # is_octagonal(65) == 126220\n    # is_octagonal(66) == 19646\n    # is_octagonal(67) == 46656\n    # is_octagonal(68) == 777216\n    # is_octagonal(69) == 137440\n    # is_octagonal(70) == 291648\n    # is_octagonal(71) == 486272\n    # is_octagonal(72) == 786432\n    # is_octagonal(73) == 144528\n    # is_octagonal(74) == 314496\n    # is_octagonal(75) == 469312\n    # is_octagonal(76) == 787296\n    # is_octagonal(77) == 125464\n    # is_octagonal(78) == 252032\n    # is_octagonal(79) == 498368\n    # is_octagonal(80) == 786432\n    # is_octagonal(81) == 144528\n    # is_octagonal(82) == 314496\n    # is_octagonal(83) == 469312\n    # is_octagonal(84) == 777216\n    # is_octagonal(85) == 137440\n    # is_octagonal(86) == 291648\n    # is_octagonal(87) == 486272\n    # is_octagonal(88) == 786432\n    # is_octagonal(89) == 144528\n    # is_octagonal(90) == 314496\n    # is_octagonal(91) == 449152\n    # is_octagonal(92) == 72968\n    # is_octagonal(93) == 126220\n    # is_octagonal(94) == 19646\n    # is_octagonal(95) == 46656\n    # is_octagonal(96) == 777216\n    # is_octagonal(97) == 137440\n    # is_octagonal(98) == 291648\n    # is_octagonal(99) == 486272\n    # is_octagonal(100) == 786432\n    # is_octagonal(101) == 144528\n    # is_octagonal(102) == 314496\n    # is_octagonal(103) == 449152\n    # is_octagonal(104) == 72968\n    # is_octagonal(105) == 126220\n    # is_octagonal(106) == 19646\n    # is_octagonal(107) == 46656\n    # is_octagonal(108) == 777216\n    # is_octagonal(109) == 137440\n    # is_octagonal(110) == 291648\n    # is_octagonal(111) == 486272\n    # is_octagonal(112) == 786432\n    # is_octagonal(113) == 144528\n    # is_octagonal(114) == 314496\n    # is_octagonal(115) == 449152\n    # is_octagonal(116) == 72968\n    # is_octagonal(117) == 126220\n    # is_octagonal(118) == 19646\n    # is_octagonal(119) == 46656\n    # is_octagonal(120) == 777216\n    # is_octagonal(121) == 137440\n    # is_octagonal(122) == 291648\n    # is_octagonal(123) == 486272\n    # is_octagonal(124) == 786432\n    # is_octagonal(125) == 144528\n    # is_octagonal(126) == 314496\n    # is_octagonal(127) == 449152\n    # is_octagonal(128) == 72968\n    # is_octagonal(129) == 126220\n    # is_octagonal(130) == 19646\n    # is_octagonal(131) == 46656\n    # is_octagonal(132) == 777216\n    # is_octagonal(133) == 137440\n    # is_octagonal(134) == 291648\n    # is_octagonal(135) == 486272\n    # is_octagonal(136) == 786432\n    # is_octagonal(137) == 144528\n    # is_octagonal(138) == 314496\n    # is_octagonal(139) == 449152\n    # is_octagonal(140) == 72968\n    # is_octagonal(141) == 126220\n    # is_octagonal(142) == 19646\n    # is_octagonal(143) == 46656\n    # is_octagonal(144) == 777216\n    # is_octagonal(145) == 137440\n    # is_octagonal(146) == 291648\n    # is_octagonal(147) == 486272\n    # i"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_octagonal(1) == 1 \nassert     is_octagonal(2) == 3\nassert     is_octagonal(3) == 6\nassert     is_octagonal(4) == 10\nassert     is_octagonal(5) == 12\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_octagonal(0) == 1\nassert     is_octagonal(1) == 3\nassert     is_octagonal(2) == 8\nassert     is_octagonal(3) == 8\nassert     is_octagonal(4) == 20\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef isPalindrome(s):\n    '''\n    Given a string, check if it is a palindrome.\n    '''\n    pass\n\n\ndef isPalindrome_2(s):\n    '''\n    Given a string, check if it is a palindrome.\n    '''\n    pass\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(count_Substrings('aabacade'), 5)\nprint(count_Substrings('aabccde'), 5)\nprint(count_Substrings('aabcd'), 3)\nprint(count_Substrings('aabc'), 2)\nprint(count_Substrings('abcde'), 1)\nprint(count_Substrings('abc'), 1)\nprint(count_Substrings('ab'), 1)\nprint(count_Substrings('abc'), 1)\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_Substrings(\"AaBbAa\") == 3, \"test1 failed\"\nassert     count_Substrings(\"AbAbAa\") == 2, \"test2 failed\"\nassert     count_Substrings(\"BaAaBa\") == 2, \"test3 failed\"\nassert     count_Substrings(\"aaaa\") == 0, \"test4 failed\"\nassert count_Substrings(\"\") == 0, \"test5 failed\"\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_Substrings('abdacd') == 6\nassert     count_Substrings('abcdacd') == 8\nassert     count_Substrings('abcd') == 2\nassert     count_Substrings('ab') == 2\n\ndef count_Substrings_1(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    pass\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint('\\n\\n********* Question 1 **********\\n')\n'''\nLet a be an array of integers, and b be an array of integers. Write a function called check_if_sum_equal_length that accepts the two arguments a and b and returns True if the sums of the elements in a are equal to the lengths of b and False otherwise.\n'''\n\ndef check_if_sum_equal_length(a,b):\n    '''\n    Write a function called check_if_sum_equal_length that accepts the two arguments a and b and returns True if the sums of the elements in a are equal to the lengths of b and False otherwise.\n    '''\n    pass\n\nprint(check_if_sum_equal_length([1,2,3],[4,5,6])) # True\nprint(check_if_sum_equal_length([1,2,3,4,5,6], [1,4,5])) # False\nprint(check_if_sum_equal_length([1,2,3,4,5,6,7,8,9], [1,2,3,4,5])) # False\nprint(check_if_sum_equal_length([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8])) # False\nprint(check_if_sum_equal_length([], [])) # True\n\nprint('\\n\\n********* Question 2 **********\\n')\n'''\nLet a be a string of characters. Write a function called count_vowels that takes a string and returns the number of vowels contained in that string.\n'''\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_Substrings(\"12345\") == 4, \"incorrect\"\nassert     count_Substrings(\"1234\") == 1, \"incorrect\"\nassert     count_Substrings(\"123\") == 1, \"incorrect\"\nassert     count_Substrings(\"12345\") == 5, \"incorrect\"\nassert     count_Substrings(\"1234\") == 1, \"incorrect\"\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ncount_Substrings(\"assassins\") == 3\ncount_Substrings(\"hacker\") == 3\ncount_Substrings(\"hacks\") == 4\ncount_Substrings(\"hack\") == 1\ncount_Substrings(\"hackerrank\") == 2\ncount_Substrings(\"hackerrankhackerrank\") == 2\ncount_Substrings(\"\") == 0\ncount_Substrings(\"hacks\") == 4\ncount_Substrings(\"assassins\") == 3\n\nclass MyNode:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\nclass BST:\n    def __init__(self):\n        self.root = None\n    \n    def insert(self, value):\n        if self.root is None:\n            self.root = MyNode(value)\n            return self.root\n        self._insert(self.root, value)\n    \n    def _insert(self, node, value):\n        if node.value == value:\n            return False\n        elif node.value < value:\n            if node.right is None:\n                node.right = MyNode(value)\n                return True\n            return self._insert(node.right, value)\n        elif node.value > value:\n            if node.left is None:\n                node.left = MyNode(value)\n                return True\n            return self._insert(node.left, value)\n    \n    def search(self, value):\n        return self._search(self.root, value)\n    \n    def _search(self, node, value):\n        if node is None:\n            return False\n        elif node.value == value:\n            return True\n        elif node.value < value:\n            return self._search(node.right, value)\n        elif node.value > value:\n            return self._search(node.left, value)\n    \n    def delete(self, value):\n        self._delete(self.root, value)\n    \n    def _delete(self, node, value):\n        if node is None:\n            return False\n        elif node.value < value:\n            return self._delete(node.right, value)\n        elif node.value > value:\n            return self._delete(node.left, value)\n        elif node.left is None and node.right is None:\n            node = None\n            return True\n        elif node.left is None and node.right is not None:\n            node.value = node.right.value\n            node.right = node.right.right\n            return True\n        elif node.left is not None and node.right is None:\n            node.value = node.left.value\n            node.left = node.left.left\n            return True\n        else:\n            node.value = node.left.value\n            node.left = node.left.left\n            node.right = node.right.right\n            return True\n\n\ndef find_max(arr):\n    '''\n    Write a function to find the max number in a list.\n    '''\n    pass\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_Substrings(\"1234\") == 1\nassert     count_Substrings(\"124321\") == 1\nassert     count_Substrings(\"14232425\") == 2\nassert     count_Substrings(\"24232425\") == 2\nassert     count_Substrings(\"1\") == 1\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_Substrings(\"ABCABC\") == 3, 'Should be 3'\nassert     count_Substrings(\"ABC\") == 0, 'Should be 0'\nassert     count_Substrings(\"\") == 0, 'Should be 0'\nassert count_Substrings(\"1\") == 1, 'Should be 1'\n\n'''\nGiven a string S, check whether it can be constructed by taking a substring of S and\nand appending multiple copies of the substring together.\n'''\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ncount_Substrings(\"\") == 0\ncount_Substrings(\"11\") == 1\ncount_Substrings(\"1112\") == 2\ncount_Substrings(\"111221\") == 2\ncount_Substrings(\"11122112\") == 4\ncount_Substrings(\"123\") == 0\ncount_Substrings(\"12\") == 1\ncount_Substrings(\"1212\") == 2\ncount_Substrings(\"121212\") == 3\ncount_Substrings(\"12121212\") == 4\ncount_Substrings(\"121212321\") == 4\ncount_Substrings(\"12121232112\") == 6\ncount_Substrings(\"12312\") == 0\ncount_Substrings(\"12\") == 1\ncount_Substrings(\"12312123\") == 1\ncount_Substrings(\"1212312321\") == 2\ncount_Substrings(\"121212312321\") == 3\ncount_Substrings(\"121231232112\") == 4\ncount_Substrings(\"1212121212321\") == 4\ncount_Substrings(\"12121212121232112\") == 6\ncount_Substrings(\"12312312\") == 0\ncount_Substrings(\"12\") == 1\ncount_Substrings(\"1231231212\") == 2\ncount_Substrings(\"12312312123\") == 3\ncount_Substrings(\"1231231212321\") == 4\ncount_Substrings(\"123123121232112\") == 6\ncount_Substrings(\"1231231212321123\") == 7\ncount_Substrings(\"12312312123213321\") == 8\ncount_Substrings(\"12312312123213\") == 0\ncount_Substrings(\"123123213321\") == 0\ncount_Substrings(\"12312312321321\") == 0\ncount_Substrings(\"123123213\") == 0\ncount_Substrings(\"1231232132112\") == 1\ncount_Substrings(\"1232132112\") == 1\ncount_Substrings(\"123213211212\") == 2\ncount_Substrings(\"123123213211212\") == 3\ncount_Substrings(\"12312321321121212\") == 4\ncount_Substrings(\"1231232132112121212\") == 5\ncount_Substrings(\"1231232132112121212212\") == 6\ncount_Substrings(\"123213211212121221212\") == 0\ncount_Substrings(\"123213211212121221212\") == 1\ncount_Substrings(\"12321321121212212121212\") == 2\ncount_Substrings(\"12321321121212212121212\") == 3\ncount_Substrings(\"1232132112121221212121212\") == 4\ncount_Substrings(\"123213211212122121212121212\") == 5\ncount_Substrings(\"12321321121212212121212121212212\") == 6\ncount_Substrings(\"123213211212122121212121212121221212\") == 7\ncount_Substrings(\"12321321121212212121212121212122121212\") == 8\ncount_Substrings(\"1232132112121221212121212121212212121221212\") == 9\ncount_Substrings(\"123123213211212122121212121212212121212212121221212121212\") == 0\ncount_Substrings(\"123123213211212122121212121212212121212212122121221212121212\") == 1\ncount_Substrings(\"12312321321121212212121212121221212121221212212212121212121212\") == 2\ncount_Substrings(\"123123213211212122121212121212212121212212122122122122122122121212\") == 3\ncount_Substrings(\"12312321321121212212121212121221212121221221221221221221221221221212\") == 4\ncount_Substrings(\"123123213211212122121212121212212121212212212212212212212212212212212\") == 5\ncount_Substrings(\"123123213211212122121212121212212121212212212212212212212212212212212212\") == 6\ncount_Substrings(\"123123213211212122121212121212212121212212212212212212212212212212212212212\") == 7\ncount_Substrings(\"123123213211212122121212121212212121212212212212212212212212212212212212212212\") == 8\ncount_Substrings(\"123123213211212122121212121212212121212212212212212212212212212212212212212212\") == 9\ncount_Substrings(\"12312321321121212212121212121221212121221221221221221221221221221221221221221212\") == 0\ncount_Substrings(\"1231232132112121221212121212212121212212212212212212212212212212212212212212212212\") == 1\ncount_Substrings(\"1231232132112121221212121212212121212212212212212212212212212212212212212212212212\") == 2\ncount_Substrings(\"1231232132112121221212121212212121212212212212212212212212212212212212212212212212212\") == 3\ncount_Substrings(\"1231232132112121221212121212212121212212212212212212212212212212212212212212212212212212\") == 4\ncount_Substrings(\"1231232132112121221212121212212121212212212212212212212212212212212212212212212212212212212\") == 5\ncount_Substrings(\"1231232132112121221212121212212121212212212212212212212212212212212212212212212212212212212\") == 6\ncount_Substrings(\"1231232132112121221212121212212121212212212212212212212212212212212212212212212212212212212212\") == 7\ncount_Substrings(\"1231232132112121221212121212212121212212212212212212212212212212212212212212212212212212212212212\") == 8\ncount_Substrings(\"1231232132112121221212121212212121212212212212212212212212212212212212212212212212212212212212212212\") == 9\ncount_Substrings(\"1231232132112121221212121212212121212212212212212212212212212212212212212212212212212212212212212212212\") == 0\ncount_Substrings(\"1231232132112121221212121212212121212212212212212212212212212212212212212212212212212212212212212212212212\") == 1\ncount_Substrings(\"1231232132112121221212121212212121212212212212212212212212212212212212212212212212212212212212212212212212212212\") == 2\ncount_Substrings(\"1231232132112121221212121212212121212212212212212212212212212212212212212212212212212212212212212212212212212212212212212\") == 3\ncount_Substrings(\"1231232132112121221212121212212121212212212212212212212212212212212212212212212212212212212212212212212212212212212212212212212\") == 4\ncount_Substrings(\"1231232132112121221212121212212121212212212212212212212212212212212212212212212212212212212212212212212212212212212212212212212212212\") == 5\ncount_Substrings(\"1231232132112121221212121212212121212212212212212212212212212212212212212212212212212212212212212212212212212212212212212212212212212212212212\") == 6\ncount_Substrings(\"1231232132112121221212121212212121212212212212212212212212212212212212212212212212212212212212212212212212212212212"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     smallest_num([10, 1, 45, 2, 5, 3]) == 1\nassert     smallest_num([1, 10, 45, 2, 5, 3]) == 1\nassert     smallest_num([1, 10, 45, 2, 5, 3, 7]) == 1\nassert     smallest_num([10, 1, 45, 2, 5, 3, 7]) == 1\nassert     smallest_num([10, 1, 45, 2, 5, 3, 7, 9]) == 1\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef largest_num(xs):\n    '''\n    Write a python function to find largest number in a list.\n    '''\n    pass\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     smallest_num([]) == None\nassert     smallest_num([1]) == 1\nassert     smallest_num([4,3,2]) == 2\nassert     smallest_num([3,4,5,6]) == 4\nassert     smallest_num([7,8,9,10]) == 7\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     smallest_num([10, 20, 30]) == 10\nassert     smallest_num([30, 10, 20]) == 10\nassert     smallest_num([1, 2, 3, 4, 5]) == 1\nassert     smallest_num([0]) == 0\nassert     smallest_num([-1]) == -1\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert smallest_num([1,3,6,7,9]) == 7\nassert smallest_num([10,3,6,7,9]) == 3\nassert smallest_num([3,10,9,6,7]) == 3\nassert smallest_num([1,3,6,7,9]) == 1\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert smallest_num([1,2,3,4,5,10]) == 1\nassert smallest_num([-2,-10,-100]) == -10\nassert smallest_num([1,2,3,4,5,10]) == 1\nassert smallest_num([-2,-10,-100]) == -10\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     smallest_num([-2,1,2,3]) == 1\nassert     smallest_num([2,3,4,5,6]) == 2\nassert     smallest_num([2,4,5,7,8]) == 2\nassert     smallest_num([4,5,6,7,8]) == 4\nassert     smallest_num([1,3,4,5,6]) == 1\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     smallest_num([5, 1, 2, 3, 5]) == 1\nassert     smallest_num([1, 2, 3, 5]) == 1\nassert     smallest_num([1, 2, 3, 4]) == 1\nassert     smallest_num([1, 2, 3, 3, 5, 4]) == 1\nassert     smallest_num([1, 2, 3, 4, 5]) == 1\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     smallest_num([1, 2, 4, 5]) == 1\nassert     smallest_num([5, 2, 4, 5]) == 2\nassert     smallest_num([3, 2, 4, 5]) == 2\nassert     smallest_num([0, -1, -2, -3]) == -3\nassert     smallest_num([-1, -2, -3, -4]) == -4\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_difference([-20,50,-60,100,15,25,65,-35,60]) == 90\nassert     max_difference([0, 0, 0, 0, 0, 0, 0, 0]) == 0\nassert     max_difference([-1, -3, -4, -5, -7, -8, -10, -2, -5]) == -8\nassert     max_difference([-10, -2, -1, -7, -9, -3, -6, -8, -4, -11]) == -10\nassert     max_difference([]) == 0\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_difference((1,2,3,4)) == 1, \"Test 1 Failed!\"\nassert     max_difference((-1,2,3,4)) == 3, \"Test 2 Failed!\"\nassert     max_difference((-1,-2,-3,-4)) == 4, \"Test 3 Failed!\"\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_difference(test_list) == 6\nassert     max_difference(test_list2) == 2\nassert     max_difference(test_list3) == 3\nassert     max_difference(test_list4) == 0"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ntest_list = (1,2,5,3,7,4)\nmax_difference(test_list) == 5\n\ntest_list = (5,2,3,4,5,1)\nmax_difference(test_list) == 5\n\ntest_list = (3,1,2,5,4)\nmax_difference(test_list) == 3\n\ntest_list = (1,1,1,1,1)\nmax_difference(test_list) == 0\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_difference([(1,2),(4,3),(2,5)]) == (2, 5)\nassert     max_difference([(5,8),(1,2),(3,7),(4,6)]) == (8, 7)\nassert     max_difference([(4,3),(5,8),(1,2),(6,7),(2,5)]) == (7,8)\nassert     max_difference([(3,8),(5,7),(1,2),(6,4),(4,3)]) == (8, 7)\n\nprint('PASSED ALL TESTS!')"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_difference([\"P100\", \"P10\", \"P20\", \"P40\", \"P90\"]) == 100\nassert     max_difference([\"P100\", \"P10\", \"P20\", \"P40\", \"P50\"]) == 200\nassert     max_difference([\"P100\", \"P10\", \"P20\", \"P40\", \"P20\"]) == 200\nassert     max_difference([\"P100\", \"P10\", \"P10\", \"P20\", \"P20\"]) == 150\nassert     max_difference([\"P100\", \"P10\", \"P20\", \"P40\", \"P50\"]) == 200\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_difference((0,5,5,4,10)) == 4, \"Should be 4\"\nassert max_difference((0,5,5,4,8)) == 5, \"Should be 5\"\nassert max_difference((0,5,5,4,9)) == 0, \"Should be 0\"\nassert max_difference((0,5,5,4,7)) == 0, \"Should be 0\"\nassert max_difference((0,5,5,4,6)) == 5, \"Should be 5\"\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_difference([(1, 2), (3, 4), (5, 6)]) == 2\nassert     max_difference([(1, 2), (3, 4), (5, 6)]) == 2\nassert     max_difference([(10, 11), (20, 21), (30, 31)]) == 21\nassert     max_difference([(10, 11), (20, 21), (30, 31)]) == 21\nassert     max_difference([(10, 11), (20, 21), (30, 31)]) == 21\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_difference(tuple_list) == 4\n\nprint(\"The correct result should be 4. Got:\", max_difference(tuple_list))\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     subject_marks(\n    [\n        (23, 'C'),\n        (15, 'B'),\n        (22, 'A'),\n        (26, 'A')\n    ]) ==     [\n        (22, 'A'),\n        (15, 'B'),\n        (23, 'C'),\n        (26, 'A')\n    ]\n\nassert subject_marks(\n    [\n        (23, 'C'),\n        (15, 'B'),\n        (22, 'A'),\n        (26, 'A'),\n        (29, 'B')\n    ]) ==     [\n        (26, 'A'),\n        (15, 'B'),\n        (22, 'A'),\n        (23, 'C'),\n        (29, 'B')\n    ]\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     subject_marks([(1,0),(2,3),(4,1),(3,4),(2,3)]) == [(1,0),(2,3),(3,4),(4,1),(2,3)], \"Wrong output\"\nassert     subject_marks([(2,3),(4,1),(3,4),(2,3),(1,0)]) == [(2,3),(4,1),(3,4),(1,0),(2,3)], \"Wrong output\"\nassert     subject_marks([(1,0),(3,4),(2,3),(4,1),(3,4)]) == [(1,0),(2,3),(3,4),(4,1),(3,4)], \"Wrong output\"\nassert     subject_marks([(2,3),(3,4),(1,0),(4,1),(2,3)]) == [(2,3),(1,0),(3,4),(4,1),(2,3)], \"Wrong output\"\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef total_marks(subjectmarks):\n    '''\n    Write a function to return the sum of all the values in a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     subject_marks([('Tom', 88), ('john', 77), ('Bob', 90), ('Alex', 99)]) ==\n        [('Alex', 99), ('Bob', 90), ('John', 77), ('Tom', 88)],\n'Check the correctness of subject_marks.'\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n'''\nGiven a list of tuples, find the second largest number in the list.\n\nExamples:\n\nInput: [(10, 2), (5, 3), (20, 4)]\nOutput: 20\n\nInput: [(10, -2), (5, 3), (20, 4)]\nOutput: 10\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef student_info(info_list):\n    '''\n    Write a function to write the student information into a text file.\n    '''\n    pass\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     subject_marks([('English', 1), ('English', 2), ('Science', 3)]) == \n        [('English', 1), ('Science', 3), ('English', 2)]\nassert     subject_marks([('English', 1), ('Science', 3), ('Maths', 1)]) == \n        [('English', 1), ('Science', 3), ('Maths', 1)]\nassert     subject_marks([('English', 1), ('English', 2), ('Science', 3), ('Science', 3)]) == \n        [('English', 1), ('English', 2), ('Science', 3), ('Science', 3)]\nassert     subject_marks([('English', 1), ('English', 2), ('Maths', 3), ('Science', 3)]) == \n        [('English', 1), ('English', 2), ('Maths', 3), ('Science', 3)]\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     subject_marks([(4, 5), (5, 4), (1, 2), (2, 3), (3, 2)]) == \\\n        [(1, 2), (2, 3), (3, 2), (4, 5), (5, 4)]\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     recursive_list_sum([1,2,3,4,5,6]) == sum([1,2,3,4,5,6]) == 30\nassert     recursive_list_sum([1,2,3,4,5,6,7,8,9,10]) == sum([1,2,3,4,5,6,7,8,9,10]) == 55\n\ndef get_sum(data_list):\n    '''\n    Write a function to get the sum of elements in the list.\n    '''\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     recursive_list_sum([]) == 0, \\\n        'The list should be empty.'\nassert     recursive_list_sum([1]) == 1, \\\n        'The list should be a single element.'\nassert     recursive_list_sum([1,2,3]) == 6, \\\n        'The list should have a sum of 6.'\nassert     recursive_list_sum([1,2,3,4,5]) == 15, \\\n        'The list should have a sum of 15.'\nassert     recursive_list_sum([1,2,3,4,5,6,7,8,9,10]) == 45, \\\n        'The list should have a sum of 45.'\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     recursive_list_sum(data_list) == 13 + 7 + 9 + 5 + 1\nassert recursive_list_sum([1,2,3]) == 1 + 2 + "
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     recursive_list_sum([1,2,3,4,5,6,7,8,9,10]) == 45\nassert     recursive_list_sum([1,2,3]) == 6\nassert     recursive_list_sum([1]) == 1\nassert     recursive_list_sum([]) == 0\n\n'''\nWrite a function to reverse a list.\n'''\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nrecursive_list_sum([1, 2, 3, 4, 5]) == 15\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     recursive_list_sum([1,2,3]) == 6\nassert     recursive_list_sum([[1,2,3]]) == 6\nassert     recursive_list_sum([[1,2,3],4]) == 10\nassert     recursive_list_sum([[1,2,3],[4,5,6]]) == 21\nassert     recursive_list_sum([[1,2,3],[4,5,6],7]) == 28\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nrecursive_list_sum([1,2,3]) == 1 + 2 + 3\nassert recursive_list_sum([[1,2,3], [4,5,6]]) == 1 + 2 + 3 + 4 + 5 + 6\nassert recursive_list_sum([[1,2,3], [4,5,6,7]]) == 1 + 2 + 3 + 4 + 5 + 6 + 7\n\n\n\ndef recursive_max_sum(data_list):\n    '''\n    Write a function to determine the maximum sum of sublist in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     recursive_list_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55, 'incorrect'\nassert     recursive_list_sum([1, 2, 3, 4, 5]) == 15, 'incorrect'\nassert     recursive_list_sum(['a', 'b', 'c', 'd']) == 'abcdd', 'incorrect'\nassert     recursive_list_sum(['A', 'B', 'C', 'D']) == 'ABCD', 'incorrect'\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     pos_count([1, 2, 3, -4]) == 0\nassert     pos_count([1, 0, 2, 2, 3]) == 1\nassert     pos_count([]) == 0\nassert     pos_count([-2, -3, -4]) == 0\nassert     pos_count([-2, 0, -3, 2, 2, -3, -4]) == 2\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \npos_count([2, 0, 1, -9, 2, 0, -3]) == 5\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     pos_count([1,2,3,4]) == 0, \"Error 1: the result should be 0\"\nassert     pos_count([-1,2,3,4]) == 3, \"Error 2: the result should be 3\"\nassert     pos_count([-1,2,3,-4]) == 2, \"Error 3: the result should be 2\"\nassert     pos_count([-1,-2,-3,-4]) == 0, \"Error 4: the result should be 0\"\nassert     pos_count([]) == 0, \"Error 5: the result should be 0\"\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     pos_count([1, 2, 3, 4, 5]) == 5\nassert     pos_count([1, -2, 3, -4, 5]) == 4\nassert     pos_count([1, 2, -3, 4, 5]) == 4\nassert     pos_count([1, 2, 3, -4, -5]) == 3\nassert     pos_count([-1, -2, -3, -4, -5]) == 0\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     pos_count([1,2,3,4,5]) == 4\nassert     pos_count([1,-2,-3,-4,-5]) == 4\nassert     pos_count([1,2,3,4,5,-6]) == 0\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     pos_count([1,-2,3,-4,5]) == 6\nassert pos_count([-1,-2,-3,-4,5]) == 5\nassert pos_count([1,2,3,4,5]) == 5\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef get_pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pass\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     pos_count([1, 1, 2, 3]) == 2, \"incorrect result\"\nassert pos_count([0, -1, -2, -3]) == 4, \"incorrect result\"\nassert pos_count([0, -1, -2, -3, 0, 0, 0]) == 5, \"incorrect result\"\nassert pos_count([]) == 0, \"incorrect result\"\nassert pos_count([\"a\", \"b\", \"c\", \"d\"]) == 4, \"incorrect result\"\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     pos_count([1, 1, 1, 1]) == 4\nassert    pos_count([1, 0, -1, 0]) == 3\nassert    pos_count([0, 0, -1, 0]) == 2\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    bell_number([3,4,2,1,3,4,2]) == 4\n    bell_number([2,5,1,3,4]) == 5\n\nprint(\"YOUR CODE IS CORRECT!\""
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     bell_number([1,2,3,4]) == 3\nassert     bell_number([1,2,3,5]) == 1\nassert     bell_number([1,2,3,6]) == 2\nassert     bell_number([1,2,3,8]) == 2\nassert     bell_number([1,2,3,9]) == 2\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nbell_number(7) == 11\nbell_number(6) == 12\nbell_number(5) == 5\nbell_number(4) == 6\nbell_number(3) == 4\nbell_number(2) == 3\nbell_number(1) == 1\nbell_number(0) == 1\nbell_number(15) == 35\nbell_number(14) == 35\nbell_number(13) == 36\nbell_number(12) == 36\nbell_number(11) == 35\nbell_number(10) == 35\nbell_number(9) == 34\nbell_number(8) == 33\nbell_number(7) == 32\nbell_number(6) == 31\nbell_number(5) == 30\nbell_number(4) == 29\nbell_number(3) == 28\nbell_number(2) == 27\nbell_number(1) == 26\nbell_number(0) == 25\nbell_number(15) == 36\nbell_number(14) == 35\nbell_number(13) == 34\nbell_number(12) == 33\nbell_number(11) == 32\nbell_number(10) == 31\nbell_number(9) == 30\nbell_number(8) == 29\nbell_number(7) == 28\nbell_number(6) == 27\nbell_number(5) == 26\nbell_number(4) == 25\nbell_number(3) == 24\nbell_number(2) == 23\nbell_number(1) == 22\nbell_number(0) == 21\nbell_number(15) == 35\nbell_number(14) == 34\nbell_number(13) == 33\nbell_number(12) == 32\nbell_number(11) == 31\nbell_number(10) == 30\nbell_number(9) == 29\nbell_number(8) == 28\nbell_number(7) == 27\nbell_number(6) == 26\nbell_number(5) == 25\nbell_number(4) == 24\nbell_number(3) == 23\nbell_number(2) == 22\nbell_number(1) == 21\nbell_number(0) == 20\nbell_number(15) == 35\nbell_number(14) == 34\nbell_number(13) == 33\nbell_number(12) == 32\nbell_number(11) == 31\nbell_number(10) == 30\nbell_number(9) == 29\nbell_number(8) == 28\nbell_number(7) == 27\nbell_number(6) == 26\nbell_number(5) == 25\nbell_number(4) == 24\nbell_number(3) == 23\nbell_number(2) == 22\nbell_number(1) == 21\nbell_number(0) == 20\nbell_number(15) == 35\nbell_number(14) == 34\nbell_number(13) == 33\nbell_number(12) == 32\nbell_number(11) == 31\nbell_number(10) == 30\nbell_number(9) == 29\nbell_number(8) == 28\nbell_number(7) == 27\nbell_number(6) == 26\nbell_number(5) == 25\nbell_number(4) == 24\nbell_number(3) == 23\nbell_number(2) == 22\nbell_number(1) == 21\nbell_number(0) == 20\nbell_number(15) == 35\nbell_number(14) == 34\nbell_number(13) == 33\nbell_number(12) == 32\nbell_number(11) == 31\nbell_number(10) == 30\nbell_number(9) == 29\nbell_number(8) == 28\nbell_number(7) == 27\nbell_number(6) == 26\nbell_number(5) == 25\nbell_number(4) == 24\nbell_number(3) == 23\nbell_number(2) == 22\nbell_number(1) == 21\nbell_number(0) == 20\nbell_number(15) == 35\nbell_number(14) == 34\nbell_number(13) == 33\nbell_number(12) == 32\nbell_number(11) == 31\nbell_number(10) == 30\nbell_number(9) == 29\nbell_number(8) == 28\nbell_number(7) == 27\nbell_number(6) == 26\nbell_number(5) == 25\nbell_number(4) == 24\nbell_number(3) == 23\nbell_number(2) == 22\nbell_number(1) == 21\nbell_number(0) == 20\nbell_number(15) == 35\nbell_number(14) == 34\nbell_number(13) == 33\nbell_number(12) == 32\nbell_number(11) == 31\nbell_number(10) == 30\nbell_number(9) == 29\nbell_number(8) == 28\nbell_number(7) == 27\nbell_number(6) == 26\nbell_number(5) == 25\nbell_number(4) == 24\nbell_number(3) == 23\nbell_number(2) == 22\nbell_number(1) == 21\nbell_number(0) == 20\nbell_number(15) == 35\nbell_number(14) == 34\nbell_number(13) == 33\nbell_number(12) == 32\nbell_number(11) == 31\nbell_number(10) == 30\nbell_number(9) == 29\nbell_number(8) == 28\nbell_number(7) == 27\nbell_number(6) == 26\nbell_number(5) == 25\nbell_number(4) == 24\nbell_number(3) == 23\nbell_number(2) == 22\nbell_number(1) == 21\nbell_number(0) == 20\nbell_number(15) == 35\nbell_number(14) == 34\nbell_number(13) == 33\nbell_number(12) == 32\nbell_number(11) == 31\nbell_number(10) == 30\nbell_number(9) == 29\nbell_number(8) == 28\nbell_number(7) == 27\nbell_number(6) == 26\nbell_number(5) == 25\nbell_number(4) == 24\nbell_number(3) == 23\nbell_number(2) == 22\nbell_number(1) == 21\nbell_number(0) == 20\nbell_number(15) == 35\nbell_number(14) == 34\nbell_number(13) == 33\nbell_number(12) == 32\nbell_number(11) == 31\nbell_number(10) == 30\nbell_number(9) == 29\nbell_number(8) == 28\nbell_number(7) == 27\nbell_number(6) == 26\nbell_number(5) == 25\nbell_number(4) == 24\nbell_number(3) == 23\nbell_number(2) == 22\nbell_number(1) == 21\nbell_number(0) == 20\nbell_number(15) == 35\nbell_number(14) == 34\nbell_number(13) == 33\nbell_number(12) == 32\nbell_number(11) == 31\nbell_number(10) == 30\nbell_number(9) == 29\nbell_number(8) == 28\nbell_number(7) == 27\nbell_number(6) == 26\nbell_number(5) == 25\nbell_number(4) == 24\nbell_number(3) == 23\nbell_number(2) == 22\nbell_number(1) == 21\nbell_number(0) == 20\nbell_number(15) == 35\nbell_number(14) == 34\nbell_number(13) == 33\nbell_number(12) == 32\nbell_number(11) == 31\nbell_number(10) == 30\nbell_number(9) == 29\nbell_number(8) == 28\nbell_number(7) == 27\nbell_number(6) == 26\nbell_number(5) == 25\nbell_number(4) == 24\nbell_number(3) == 23\nbell_number(2) == 22\nbell_number(1) == 21\nbell_number(0) == 20\nbell_number(15) == 35\nbell_number(14) == 34\nbell_number(13) == 33\nbell_number(12) == 32\nbell_number(11) == 31\nbell_number(10"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     bell_number(2) == 2\nassert     bell_number(3) == 5\nassert     bell_number(4) == 8\nassert     bell_number(5) == 12\nassert     bell_number(6) == 14\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef partitions(n):\n    '''\n    Given an integer n, find the number of partitions of n, using parts with size > 0.\n    '''\n    pass\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     bell_number(3) == 2\nassert     bell_number(2) == 4\nassert     bell_number(1) == 1\nassert     bell_number(0) == 1\nassert     bell_number(4) == 2\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     bell_number(2) == 2, \"bell_number(2) == 2\"\nassert     bell_number(3) == 6, \"bell_number(3) == 6\"\nassert     bell_number(4) == 14, \"bell_number(4) == 14\"\nassert     bell_number(5) == 42, \"bell_number(5) == 42\"\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     bell_number(0) == 1\nassert     bell_number(1) == 1\nassert     bell_number(2) == 2\nassert     bell_number(3) == 5\nassert     bell_number(4) == 14\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     bell_number(0) == 1, \"Bell numbers of order 0 are not possible.\"\nassert     bell_number(1) == 1, \"Bell numbers of order 1 are not possible.\"\nassert     bell_number(2) == 2, \"Bell numbers of order 2 are not possible.\"\nassert     bell_number(3) == 2, \"Bell numbers of order 3 are not possible.\"\nassert     bell_number(4) == 5, \"Bell numbers of order 4 are not possible.\"\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     bell_number(5) == 7, \"bell_number wrong\"\nassert     bell_number(2) == 2, \"bell_number wrong\"\nassert     bell_number(6) == 15, \"bell_number wrong\"\nassert     bell_number(3) == 6, \"bell_number wrong\"\nassert     bell_number(8) == 26, \"bell_number wrong\"\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_Monotonic([1,2,3,4,5,3,4]) == True\nassert     is_Monotonic([1,2,4,5,3,4]) == False\nassert     is_Monotonic([1,2,2,2]) == True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_Monotonic([0, -1, 2, 4, 1]) == True\nassert     is_Monotonic([-1, -1, -1, -1, -1]) == False\nassert     is_Monotonic([2, 3, 1]) == True\nassert     is_Monotonic([4, 1, 2]) == True\nassert     is_Monotonic([10, 9, 8, 7, 6, 5]) == True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_Monotonic([1,2,3,4,5,6,7,8,8,7,6,5,4,3,2,1]) == True\nassert     is_Monotonic([1,1,1,1,1,1,1,1,1,1]) == True\nassert     is_Monotonic([1,2,3,2,2,1]) == True\nassert     is_Monotonic([1,1,1,2,2,2,1]) == False\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nis_Monotonic([1,2,1]) == True\nis_Monotonic([1,1,2]) == False\nis_Monotonic([1,1,1]) == True\nis_Monotonic([1,2,1]) == False\nis_Monotonic([1,2,1,1,2,1]) == True\nis_Monotonic([1,1,2,1,1,2,1]) == True\nis_Monotonic([1,1,2,1,1,1,2,1]) == False\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef test_is_Monotonic():\n    print(\"Testing is_Monotonic:\")\n    assert is_Monotonic([1, 2, 2, 1]) == True\n    assert is_Monotonic([1, 1, 1]) == True\n    assert is_Monotonic([1, 1, 2]) == False\n    "
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_Monotonic(\n                    [1, 2, 3, 4, 5, 6, 7, 8, 8, 7, 6, 5, 4, 3, 2, 1] ) == True, \\\n        \"1st\"\n\nassert     is_Monotonic(\n                    [1, 2, 3, 4, 5, 6, 7, 8, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3] ) == False, \\\n        \"2nd\"\n\nassert     is_Monotonic(\n                    [1, 2, 3, 4, 5, 6, 7, 8, 8, 7, 6, 5, 4, 3, 2, 1] ) == True, \\\n        \"3rd\"\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef is_sublist_v1(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    l = sorted(l)\n    s = sorted(s)\n    if len(s)!= len(l):\n        return False\n    for i in range(len(s)):\n        if l[i]!= s[i]:\n            return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nif __name__ == '__main__':\n    import sys\n    input = sys.stdin.readline\n    l = []\n    \n    for i in range(int(input())):\n        x = int(input())\n        l.append(x)\n\n    k = int(input())\n    \n    print(is_sublist(l, k))\n    \n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_sublist([1, 2, 3], [1, 2]) == True\nassert     is_sublist([1, 2, 3], [1, 2, 3]) == True\nassert     is_sublist([1, 2, 3], [3, 2]) == False\nassert     is_sublist([1, 2, 3, 4], [1, 2]) == False\nassert     is_sublist([1, 2], [1, 2, 3]) == False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_sublist([1, 2, 3, 4, 5], [0, 2, 4]) == True\nassert     is_sublist([1, 2, 3, 4, 5], [1, 2, 3]) == True\nassert     is_sublist([1, 2, 3, 4, 5], [2]) == False\nassert     is_sublist([1, 2, 3, 4, 5], [2, 5]) == True\nassert     is_sublist([1, 2, 3, 4, 5], [3, 5]) == True\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert not is_sublist([1,2,3,4,5], [1,2,3,4,5])\nassert is_sublist([1,2,3,4,5,6], [1,2,3,4,5])\nassert is_sublist([1,2,3,4,5,6], [1,2,3,4,5,6])\nassert is_sublist([1,2,3,4,5,6], [1,2,3,4,5,7])\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_sublist([1,2,3,4,5,6], [1,2,3]) == True\nassert     is_sublist([1,2,3,4,5,6], [1,2,3,7,8,9]) == False\nassert     is_sublist([1,2,3,4,5,6], [1,2,3,7,8,9,10]) == False\n\nprint('test passed')\n\ndef is_substring(s, t):\n    '''\n    Write a function to check whether the given string is a substring of the given\n    string or not.\n    '''\n    pass\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_sublist([\"a\",\"b\",\"c\",\"d\",\"e\"],[\"b\",\"c\"]) == True, \"Wrong!\"\nassert     is_sublist([\"a\",\"b\",\"c\",\"d\",\"e\"],[\"a\",\"b\"]) == False, \"Wrong!\"\nassert     is_sublist([\"a\",\"b\",\"c\",\"d\",\"e\"],[\"a\",\"b\",1]) == False, \"Wrong!\"\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_sublist([1,2,3,4], [1,2,3]) == True\nassert     is_sublist([1,2,3,4], [1,3,3]) == True\nassert     is_sublist([1,2,3,4], [1,3,4]) == False\nassert     is_sublist([1,2,3,4], [1,3,4,4]) == False\n\n'''\nWrite a function that takes in a list and returns the number of sublists that are smaller than the given sublist.\n'''\ndef num_smaller(l, s):\n    '''\n    Write a function that takes in a list and returns the number of sublists that are smaller than the given sublist.\n    '''\n    pass\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_sublist([1, 2, 3], [1, 2]) == True\nassert     is_sublist([1, 2, 3], [1, 3]) == False\nassert     is_sublist([1, 2, 3], [2]) == False\nassert     is_sublist([1, 2, 3], []) == True\nassert     is_sublist([1], [1, 2, 3]) == False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_equal_tuple((1, 2, 3, 4)) == True\nassert     find_equal_tuple((1, 2, 3, 4, 5)) == True\nassert     find_equal_tuple((1, 2, 3, 4, 5, 6)) == False\nassert     find_equal_tuple((1, 2, 3, 4, 5, 6, 7)) == False\nassert     find_equal_tuple((1, 2, 3, 4, 5, 6, 7, 8)) == True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_equal_tuple(Input = [(1,2,3), (2,), (2,3), (3,), (4,)]) == True, \"Wrong output\"\nassert     find_equal_tuple(Input = [(1,2,3), (2,), (3,), (4,), (5,6,7,8)]) == False, \"Wrong output\"\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_equal_tuple([(2,3),(4,5),(6,6)]) == True\nassert     find_equal_tuple([(2,3),(4,5),(6,5)]) == False\nassert     find_equal_tuple([(3,3),(3,4),(4,5)]) == True\nassert     find_equal_tuple([(3,3),(3,4),(4,5)]) == False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_equal_tuple([(1, 2), (2, 3)]) == True\nassert     find_equal_tuple([(1, 2, 3), (2, 3, 4)]) == False\nassert     find_equal_tuple([(1), (2), (3)]) == True\nassert     find_equal_tuple([(1, 2), (3, 4)]) == False\nassert     find_equal_tuple([(1, 2, 3)]) == False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_equal_tuple([(1, 2), (1, 2), (1, 2), (1, 2), (1, 2)]) == True, \\\n    \"Expected: True\"\nassert     find_equal_tuple([(1, 2), (1, 2), (1, 2), (1, 2), (1, 2, 3)]) == False, \\\n    \"Expected: False\"\nassert     find_equal_tuple([(1, 2), (1, 2), (1, 2), (1, 2), (1, 2, 3), (1, 2)]) == False, \\\n    \"Expected: False\"\nassert     find_equal_tuple([(1, 2), (1, 2), (1, 2), (1, 2), (1, 2, 3), (1, 2, 4)]) == False, \\\n    \"Expected: False\"\nassert     find_equal_tuple([(1, 2), (1, 2), (1, 2), (1, 2), (1, 2, 3), (1, 2, 3)]) == True, \\\n    \"Expected: True\"\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_equal_tuple([(1, 2), (2, 2), (3, 4)])\nassert not find_equal_tuple([(1, 2), (3, 4)])\nassert not find_equal_tuple([(1, 2)])\nassert     find_equal_tuple([(1, 2), (2, 2)])\nassert     find_equal_tuple([(1, 2), (2, 3)])\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_equal_tuple([(1,2),(3,4),(5,6)]) == True\nassert     find_equal_tuple([(1,2),(2,3),(3,4)]) == False\nassert     find_equal_tuple([(1,2,3),(2,3,4),(3,4,5)]) == True\nassert     find_equal_tuple([(1,2),(2,3),(3,4)]) == False\nassert     find_equal_tuple([(1,2,3),(2,3,4),(3,4,5)]) == True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_equal_tuple(Input=[(\"A\", 1), (\"B\", 2), (\"C\", 3)])     == False, \\\n        \"find_equal_tuple should return False if the given tuple does not have equal length\"\nassert     find_equal_tuple(Input=[(\"A\", 1), (\"B\", 2)])     == False, \\\n        \"find_equal_tuple should return False if the given tuple does not have equal length\"\nassert     find_equal_tuple(Input=[(\"A\", 1)])     == False, \\\n        \"find_equal_tuple should return False if the given tuple does not have equal length\"\nassert     find_equal_tuple(Input=[[1, 2, 3]])     == False, \\\n        \"find_equal_tuple should return False if the given tuple does not have equal length\"\nassert     find_equal_tuple(Input=[[1], [1]])     == True, \\\n        \"find_equal_tuple should return True if the given tuple does not have equal length\"\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_equal_tuple([(1,2), (3,4), (5,6,7), (8,9,10,11)]) == False\nassert     find_equal_tuple([(1,2), (3,4), (5,6,7), (8,9,10)]) == True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_equal_tuple([(1,2),(1,3),(1,4),(2,2)]) == True\nassert    find_equal_tuple([(1,2),(1,3),(1,4)]) == False\nassert    find_equal_tuple([(1,2),(1,2),(1,2)]) == True\nassert    find_equal_tuple([(1,2),(1,3),(1,4)]) == False\nassert    find_equal_tuple([(1,2,3),(1,2,3)]) == True\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     comb_sort([]) == [], \"Empty list\"\nassert     comb_sort([3]) == [3], \"Single number\"\nassert     comb_sort([3, 1]) == [1, 3], \"One element\"\nassert     comb_sort([3, 2, 1]) == [1, 2, 3], \"Three elements\"\nassert     comb_sort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5], \"Upper and lower case\"\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     comb_sort([7,6,5,4,3,2,1,0]) == [0,1,2,3,4,5,6,7]\nassert     comb_sort([-7,-6,-5,-4,-3,-2,-1,0]) == [-1,0,-2,-3,-4,-5,-6,-7]\nassert     comb_sort([0,0,0,0,0,0,0,0]) == [0,0,0,0,0,0,0,0]\nassert     comb_sort([-9,-8,7,6,5,4,3,2,1]) == [-1,1,2,3,4,5,6,7,8]\nassert     comb_sort([5,4,3,2,1,0]) == [0,1,2,3,4,5]\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint('PASSED')\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     comb_sort([1,4,3,2]) == [1,2,3,4]\nassert     comb_sort([0,0,0,0,0]) == [0,0,0,0,0]\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(dif_Square(0))\nprint(dif_Square(1))\nprint(dif_Square(2))\nprint(dif_Square(3))\nprint(dif_Square(4))\nprint(dif_Square(5))\nprint(dif_Square(6))\nprint(dif_Square(7))\nprint(dif_Square(8))\nprint(dif_Square(9))\nprint(dif_Square(10))\nprint(dif_Square(11))\nprint(dif_Square(12))\nprint(dif_Square(13))\nprint(dif_Square(14))\nprint(dif_Square(15))\nprint(dif_Square(16))\nprint(dif_Square(17))\nprint(dif_Square(18))\nprint(dif_Square(19))\nprint(dif_Square(20))\nprint(dif_Square(21))\nprint(dif_Square(22))\nprint(dif_Square(23))\nprint(dif_Square(24))\nprint(dif_Square(25))\nprint(dif_Square(26))\nprint(dif_Square(27))\nprint(dif_Square(28))\nprint(dif_Square(29))\nprint(dif_Square(30))\nprint(dif_Square(31))\nprint(dif_Square(32))\nprint(dif_Square(33))\nprint(dif_Square(34))\nprint(dif_Square(35))\nprint(dif_Square(36))\nprint(dif_Square(37))\nprint(dif_Square(38))\nprint(dif_Square(39))\nprint(dif_Square(40))\nprint(dif_Square(41))\nprint(dif_Square(42))\nprint(dif_Square(43))\nprint(dif_Square(44))\nprint(dif_Square(45))\nprint(dif_Square(46))\nprint(dif_Square(47))\nprint(dif_Square(48))\nprint(dif_Square(49))\nprint(dif_Square(50))\nprint(dif_Square(51))\nprint(dif_Square(52))\nprint(dif_Square(53))\nprint(dif_Square(54))\nprint(dif_Square(55))\nprint(dif_Square(56))\nprint(dif_Square(57))\nprint(dif_Square(58))\nprint(dif_Square(59))\nprint(dif_Square(60))\nprint(dif_Square(61))\nprint(dif_Square(62))\nprint(dif_Square(63))\nprint(dif_Square(64))\nprint(dif_Square(65))\nprint(dif_Square(66))\nprint(dif_Square(67))\nprint(dif_Square(68))\nprint(dif_Square(69))\nprint(dif_Square(70))\nprint(dif_Square(71))\nprint(dif_Square(72))\nprint(dif_Square(73))\nprint(dif_Square(74))\nprint(dif_Square(75))\nprint(dif_Square(76))\nprint(dif_Square(77))\nprint(dif_Square(78))\nprint(dif_Square(79))\nprint(dif_Square(80))\nprint(dif_Square(81))\nprint(dif_Square(82))\nprint(dif_Square(83))\nprint(dif_Square(84))\nprint(dif_Square(85))\nprint(dif_Square(86))\nprint(dif_Square(87))\nprint(dif_Square(88))\nprint(dif_Square(89))\nprint(dif_Square(90))\nprint(dif_Square(91))\nprint(dif_Square(92))\nprint(dif_Square(93))\nprint(dif_Square(94))\nprint(dif_Square(95))\nprint(dif_Square(96))\nprint(dif_Square(97))\nprint(dif_Square(98))\nprint(dif_Square(99))\nprint(dif_Square(100))\nprint(dif_Square(101))\nprint(dif_Square(102))\nprint(dif_Square(103))\nprint(dif_Square(104))\nprint(dif_Square(105))\nprint(dif_Square(106))\nprint(dif_Square(107))\nprint(dif_Square(108))\nprint(dif_Square(109))\nprint(dif_Square(110))\nprint(dif_Square(111))\nprint(dif_Square(112))\nprint(dif_Square(113))\nprint(dif_Square(114))\nprint(dif_Square(115))\nprint(dif_Square(116))\nprint(dif_Square(117))\nprint(dif_Square(118))\nprint(dif_Square(119))\nprint(dif_Square(120))\nprint(dif_Square(121))\nprint(dif_Square(122))\nprint(dif_Square(123))\nprint(dif_Square(124))\nprint(dif_Square(125))\nprint(dif_Square(126))\nprint(dif_Square(127))\nprint(dif_Square(128))\nprint(dif_Square(129))\nprint(dif_Square(130))\nprint(dif_Square(131))\nprint(dif_Square(132))\nprint(dif_Square(133))\nprint(dif_Square(134))\nprint(dif_Square(135))\nprint(dif_Square(136))\nprint(dif_Square(137))\nprint(dif_Square(138))\nprint(dif_Square(139))\nprint(dif_Square(140))\nprint(dif_Square(141))\nprint(dif_Square(142))\nprint(dif_Square(143))\nprint(dif_Square(144))\nprint(dif_Square(145))\nprint(dif_Square(146))\nprint(dif_Square(147))\nprint(dif_Square(148))\nprint(dif_Square(149))\nprint(dif_Square(150))\nprint(dif_Square(151))\nprint(dif_Square(152))\nprint(dif_Square(153))\nprint(dif_Square(154))\nprint(dif_Square(155))\nprint(dif_Square(156))\nprint(dif_Square(157))\nprint(dif_Square(158))\nprint(dif_Square(159))\nprint(dif_Square(160))\nprint(dif_Square(161))\nprint(dif_Square(162))\nprint(dif_Square(163))\nprint(dif_Square(164))\nprint(dif_Square(165))\nprint(dif_Square(166))\nprint(dif_Square(167))\nprint(dif_Square(168))\nprint(dif_Square(169))\nprint(dif_Square(170))\nprint(dif_Square(171))\nprint(dif_Square(172))\nprint(dif_Square(173))\nprint(dif_Square(174))\nprint(dif_Square(175))\nprint(dif_Square(176))\nprint(dif_Square(177))\nprint(dif_Square(178))\nprint(dif_Square(179))\nprint(dif_Square(180))\nprint(dif_Square(181))\nprint(dif_Square(182))\nprint(dif_Square(183))\nprint(dif_Square(184))\nprint(dif_Square(185))\nprint(dif_Square(186))\nprint(dif_Square(187))\nprint(dif_Square(188))\nprint(dif_Square(189))\nprint(dif_Square(190))\nprint(dif_Square(191))\nprint(dif_Square(192))\nprint(dif_Square(193))\nprint(dif_Square(194))\nprint(dif_Square(195))\nprint(dif_Square(196))\nprint(dif_Square(197))\nprint(dif_Square(198)"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ndif_Square(7) == False\ndif_Square(8) == False\ndif_Square(12) == True\ndif_Square(16) == True\ndif_Square(17) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     dif_Square(0) == True\nassert     dif_Square(1) == False\nassert     dif_Square(2) == True\nassert     dif_Square(3) == True\nassert     dif_Square(4) == True\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert not dif_Square(0)\nassert dif_Square(1)\nassert not dif_Square(2)\nassert not dif_Square(3)\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     dif_Square(0) == False, \"dif_Square should return False\"\nassert     dif_Square(1) == False, \"dif_Square should return False\"\nassert     dif_Square(2) == False, \"dif_Square should return False\"\nassert     dif_Square(3) == False, \"dif_Square should return False\"\nassert     dif_Square(4) == False, \"dif_Square should return False\"\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n'''\n    Consider a series of numbered rectangles that are tilted in a circle. \n    Write a program that computes the area of the largest square that can be inscribed in the given rectangle.\n'''\n\ndef s(r):\n    '''\n    Given the number r, compute the maximum area that can be inscribed in a rectangle with length r and width r.\n    '''\n    pass\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     dif_Square(1) == True, \"1+1=2\"\nassert     dif_Square(5) == True, \"1+4=5\"\nassert     dif_Square(10) == True, \"1+9=10\"\nassert     dif_Square(16) == True, \"1+16=17\"\nassert     dif_Square(25) == False, \"1+25=26\"\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     dif_Square(2) == True, \"Expected False\"\nassert     dif_Square(11) == True, \"Expected True\"\nassert     dif_Square(123) == False, \"Expected True\"\nassert     dif_Square(1234) == True, \"Expected True\"\nassert     dif_Square(1234567890) == True, \"Expected False\"\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_samepatterns(colors = [\"red\", \"green\", \"blue\", \"white\"], patterns = [[1,2,3,4],[1,3,2,4],[1,2,3,4],[1,2,3,4]]) == True\nassert     is_samepatterns(colors = [\"red\", \"green\", \"blue\", \"white\"], patterns = [[1,2,3,4],[1,3,2,4],[1,2,3,4],[1,2,3,4]]) == True\nassert     is_samepatterns(colors = [\"red\", \"green\", \"blue\", \"white\"], patterns = [[1,2,3,4],[1,3,2,4],[1,2,3,4],[1,2,3,4]]) == False\nassert     is_samepatterns(colors = [\"red\", \"green\", \"blue\", \"white\"], patterns = [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]) == False\nassert     is_samepatterns(colors = [\"red\", \"green\", \"blue\", \"white\"], patterns = [[1,2,3,4],[1,3,2,4],[1,2,3,4],[1,2,3,4]]) == False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_samepatterns([\n                    '#000000', \n                    '#000000', \n                    '#000000', \n                    '#000000', \n                    '#000000', \n                    '#000000', \n                    '#000000', \n                    '#000000', \n                    '#000000'\n                    ], ['#000000', '#000000', '#000000', '#000000', '#000000', '#000000', '#000000', '#000000', '#000000']) == True, \"is_samepatterns([#000000,#000000,#000000,#000000,#000000,#000000,#000000,#000000,#000000],['#000000', '#000000', '#000000', '#000000', '#000000', '#000000', '#000000', '#000000', '#000000'])\"\nassert     is_samepatterns([\n                    '#000000', \n                    '#000000', \n                    '#000000', \n                    '#000000', \n                    '#000000', \n                    '#000000', \n                    '#000000', \n                    '#000000', \n                    '#000000'\n                    ], ['#000000', '#000000', '#000000', '#000000', '#000000', '#000000', '#000000', '#000000', '#000000']) == False, \"is_samepatterns([#000000,#000000,#000000,#000000,#000000,#000000,#000000,#000000,#000000],['#000000', '#000000', '#000000', '#000000', '#000000', '#000000', '#000000', '#000000', '#000000'])\"\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_samepatterns(['c','c','c','c'], ['c','c','c','c']) == True, 'incorrect'\nassert     is_samepatterns(['r','r','r','r'], ['r','r','r','r']) == True, 'incorrect'\nassert     is_samepatterns(['r','r','r','r'], ['r','r','r','r','r']) == False, 'incorrect'\nassert     is_samepatterns(['r','r','r','r'], ['r','r','r','r','c']) == False, 'incorrect'\nassert     is_samepatterns(['r','r','r','r'], ['r','r','r','r','r']) == True, 'incorrect'\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_samepatterns([3, 1, 1, 4], \n    [1, 4, 1, 1, 4, 1, 1, 1, 1, 1]) == True\nassert     is_samepatterns([5, 1, 1, 4], \n    [1, 4, 1, 1, 4, 1, 1, 1, 1, 1]) == False\nassert     is_samepatterns([3, 1, 2], \n    [1, 1, 2, 1, 2, 1]) == False\nassert     is_samepatterns([3, 1, 1], \n    [1, 1, 1, 1, 1, 1]) == False\nassert     is_samepatterns([5, 1, 1], \n    [1, 1, 1, 1, 1, 1]) == False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_samepatterns([[1, 2], [3, 4], [1, 2], [3, 4], [1, 2], [3, 4]], \n                        [[1, 2], [3, 4], [1, 2], [3, 4], [1, 2], [3, 4]]), \\\n    'Check failed, cannot recognize the same patterns.'\nassert not is_samepatterns([[1, 2], [3, 4], [1, 2], [3, 4], [1, 2], [3, 4]], \n                        [[1, 2], [3, 4], [1, 2], [3, 4], [1, 2], [3, 4]]), \\\n    'Check failed, cannot recognize the same patterns.'\nassert not is_samepatterns([[1, 2], [3, 4], [1, 2], [3, 4], [1, 2], [3, 4]], \n                        [[1, 2], [3, 4], [1, 2], [3, 4], [1, 2], [3, 4]]), \\\n    'Check failed, cannot recognize the same patterns.'\nassert is_samepatterns([[1, 2], [3, 4], [1, 2], [3, 4], [1, 2], [3, 4]], \n                        [[1, 2], [3, 4], [1, 2], [3, 4], [1, 2], [3, 4]]), \\\n    'Check failed, cannot recognize the same patterns.'\nassert is_samepatterns([[1, 2], [3, 4], [1, 2], [3, 4], [1, 2], [3, 4]], \n                        [[1, 2], [3, 4], [1, 2], [3, 4], [1, 2], [3, 4]]), \\\n    'Check failed, cannot recognize the same patterns.'\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_samepatterns(colors, patterns) == True, \"Test case incorrect\"\n\ndef is_samepatterns_no_array(colors, patterns):\n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    pass\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_samepatterns([1, 2, 3, 4], [2, 1, 3, 4]) == True\nassert     is_samepatterns([1, 2, 3, 4], [1, 2, 3, 4]) == False\nassert     is_samepatterns([1, 1, 1, 1], [1, 1, 1, 1]) == True\nassert     is_samepatterns([1, 2, 3, 4], [3, 2, 1, 4]) == False"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_samepatterns([1,2,1,3,1,4,1,5,1],[[1,2,1],[3,1,4],[5,1,7]]) == True, \"Incorrect result\"\nassert     is_samepatterns([1,2,1,3,1,4,1,5,1],[[1,2,1],[3,1,4],[5,1,7],[1,3,1]]) == False, \"Incorrect result\"\nassert     is_samepatterns([1,2,1,3,1,4,1,5,1],[[1,2,1],[3,1,4],[5,1,7],[1,2,1]]) == False, \"Incorrect result\"\nassert     is_samepatterns([1,2,1,3,1,4,1,5,1],[[1,2,1],[3,1,4],[5,1,7],[1,3,1]]) == False, \"Incorrect result\"\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    is_samepatterns(['G', 'G', 'G', 'B', 'R', 'B', 'R', 'B', 'R', 'G', 'G', 'B', 'G', 'G', 'B', 'G', 'B', 'B', 'R', 'G', 'B', 'R', 'G', 'G', 'G', 'G', 'G', 'R', 'G', 'R', 'B', 'B', 'R', 'G', 'B', 'G', 'B', 'B', 'G', 'B', 'R', 'G', 'G', 'B', 'G', 'B', 'G', 'G', 'G', 'R', 'G', 'B', 'B', 'R', 'G', 'G', 'B', 'G', 'B', 'B', 'B', 'G', 'B', 'G', 'G', 'B', 'B', 'B', 'G', 'G', 'R', 'G', 'B', 'G', 'B', 'G', 'B', 'B', 'G', 'G', 'B', 'G', 'G', 'G', 'R', 'B', 'B', 'B', 'B', 'G', 'B', 'G', 'G', 'B', 'B', 'B', 'B', 'B', 'B', 'G', 'B', 'B', 'B', 'G', 'B', 'B', 'G', 'G', 'G', 'B', 'G', 'G', 'B', 'B', 'B', 'G', 'B', 'G', 'G', 'B', 'G', 'B', 'G', 'B', 'B', 'B', 'B', 'G', 'B', 'B', 'B', 'G', 'B', 'G', 'B', 'B', 'B', 'B', 'G', 'B', 'B', 'B', 'B', 'G', 'G', 'G', 'G', 'G', 'G', 'B', 'B', 'G', 'G', 'B', 'G', 'B', 'G', 'B', 'G', 'B', 'B', 'G', 'B', 'G', 'G', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'G', 'B', 'B', 'B', 'B', 'G', 'B', 'G', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B', 'B'"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_tuples([(0, 1), (1, 2), (2, 3)], 2) == [(0, 1)]\nassert     find_tuples([(0, 1), (1, 2), (2, 3)], 3) == [(0, 1)]\nassert     find_tuples([(0, 1), (1, 2), (2, 3)], 1) == [(1, 2)]\nassert     find_tuples([(0, 1), (1, 2), (2, 3)], 5) == []\nassert     find_tuples([(0, 1), (1, 2), (2, 3)], 2) == [(0, 1)]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_tuples([(1,2),(3,4),(5,6)], 2) == [(3,4)]\nassert     find_tuples([(1,2),(3,4),(5,6),(6,7)], 3) == [(3,4), (6,7)]\nassert     find_tuples([(1,2),(3,4),(5,6),(6,7),(8,9)], 2) == [(3,4), (6,7), (8,9)]\nassert     find_tuples([(1,2),(3,4),(5,6),(7,8)], 3) == [(3,4), (5,6), (7,8)]\nassert     find_tuples([(1,2),(3,4),(5,6),(7,8),(9,10)], 3) == [(3,4), (5,6), (7,8), (9,10)]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_tuples([(1,2,3),(4,5,6),(7,8,9)], 3) == [(3, 6, 9), (4, 5, 6)]\nassert     find_tuples([(1,2,3),(4,5,6),(7,8,9)], 2) == [(4, 5, 6), (7, 8, 9)]\nassert     find_tuples([(1,2,3),(4,5,6),(7,8,9)], 1) == [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\nassert     find_tuples([(1,2,3),(4,5,6),(7,8,9)], 0) == []\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_tuples([(1, 3), (2, 5)], 2) == [(1, 2), (1, 3)]\nassert     find_tuples([(2, 4), (3, 6), (4, 8)], 3) == [(2, 4)]\nassert     find_tuples([(2, 4), (3, 6)], 2) == []\n\n\ndef find_first_tuple_with_gaps(test_list):\n    '''\n    Write a function to find the first tuple in the given list which has all elements in the list apart by one from each other.\n    '''\n    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == '__main__':\n    # Test-1\n    test_list = [(0, 1), (2, 2), (3, 3), (2, 4), (5, 5)]\n    assert find_tuples(test_list, 2) == [(0, 2), (2, 4)]\n    assert find_tuples(test_list, 3) == [(0, 1), (3, 3), (5, 5)]\n    print('Test-1 successful!')\n\n    # Test-2\n    test_list = [(2, 3), (4, 5), (6, 7)]\n    "
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_tuples([(2,3),(7,9),(4,5)], 5) == [(2,3,4,5)]\nassert     find_tuples([(2,3,4),(7,9,5),(4,5,6)], 5) == [(2,3,4,5),(7,9,5),(4,5,6)]\nassert     find_tuples([(2,3),(7,9),(4,5,6,8)], 5) == []\nassert     find_tuples([(2,3,4),(7,9,5,6,8),(4,5,6,7,8)], 5) == [(2,3,4,5,6,8)]\nassert     find_tuples([(2,3,4),(7,9,5,6,8),(4,5,6,7,8,9)], 5) == [(2,3,4,5,6,8)]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_tuples([(1,2), (4,5,6), (8,2)], 2) == [(1,2), (4,5,6), (8,2)]\nassert     find_tuples([(3,2,4), (5,5,6,3)], 2) == []\nassert     find_tuples([(1,2,3), (4,5,6), (8,2)], 3) == [(1,2,3), (4,5,6), (8,2)]\n\n\n\ndef find_tuples_using_dict(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_tuples([(1, 2), (3, 4), (5, 6)], 2)     == [(3, 4), (5, 6)]\nassert     find_tuples([(1, 2), (3, 4), (5, 6)], 3)     == []\nassert     find_tuples([], 1)     == []\nassert     find_tuples([(1, 2, 3), (5, 6, 7)], 1)     == [(1, 2, 3)]\nassert     find_tuples([(1, 2, 3), (5, 6, 7)], 2)     == [(5, 6, 7)]\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_tuples([(1, 2), (3, 4), (5, 6), (7, 8)], 3) == [(1, 2), (3, 4), (5, 6), (7, 8)]\nassert     find_tuples([(1, 2), (3, 4), (5, 6), (7, 8)], 2) == []\nassert     find_tuples([(1, 2), (3, 4), (5, 6), (7, 8)], 1) == []\nassert     find_tuples([(1, 2), (3, 4), (5, 6), (7, 8)], 0) == []\nassert     find_tuples([], 1) == []\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_tuples(test_list, 2) == [(1, 3), (1, 6), (3, 6)]\nassert     find_tuples(test_list, 3) == [(1, 3, 6), (3, 6, 9), (3, 6, 10)]\nassert     find_tuples(test_list, 4) == [(1, 3, 6, 9)]\nassert     find_tuples(test_list, 5) == []\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_Diff(12) == False\nassert     is_Diff(11) == True\nassert     is_Diff(7) == False\nassert     is_Diff(4) == True\nassert     is_Diff(11) == False\nprint(\"Coding complete!\")\nprint(is_Diff(15))\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef is_Divisor(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    pass\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_Diff(5) == False\nassert     is_Diff(10) == True\nassert     is_Diff(11) == True\nassert     is_Diff(20) == False\nassert     is_Diff(100) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_Diff(11) == True\nassert     is_Diff(21) == False\nassert     is_Diff(111) == True\nassert     is_Diff(31) == True\nassert     is_Diff(11) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nis_Diff(11) == True, \"Should be True\"\nis_Diff(0) == False, \"Should be False\"\nis_Diff(12) == False, \"Should be False\"\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_Diff(11) == True, '11 is divisible by 11'\nassert     is_Diff(12) == False, '12 is not divisible by 11'\n\n'''\nThe above function is checking whether the number is divisible by 11 or not.\nYou will be given a number and you have to return true/false based on whether\nthe given number is divisible by 11 or not.\n'''\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert not is_Diff(11) == True\nassert not is_Diff(12) == False\nassert is_Diff(10) == False\nassert not is_Diff(11) == False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_Diff(123) == True, 'is_Diff Function return False'\nassert     is_Diff(100) == False, 'is_Diff Function return True'\nassert     is_Diff(17) == True, 'is_Diff Function return False'\nassert     is_Diff(100) == False, 'is_Diff Function return True'\nassert     is_Diff(12) == False, 'is_Diff Function return False'\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef is_Divisor(n): \n    '''\n    Write a python function to check whether a number is divisible by 2 and 3.\n    '''\n    pass\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     word_len('abc') == True, \"The length of the word is odd\"\nassert     word_len('xyz') == False, \"The length of the word is even\"\nassert     word_len('abc1') == False, \"The length of the word is even\"\nassert     word_len('0') == False, \"The length of the word is even\"\nassert     word_len('abcdefghij') == True, \"The length of the word is odd\"\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     word_len(\"Banana\") == True, \"The length of the word is odd\"\nassert     word_len(\"apple\") == False, \"The length of the word is even\"\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     word_len(\"Mushra\") == True, \"Wrong output\"\nassert word_len(\"Mush\") == False, \"Wrong output\"\nassert word_len(\"\") == True, \"Wrong output\"\nassert word_len(\"A\") == False, \"Wrong output\"\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert word_len('Dhaval') == True\nassert word_len('dklav') == True\nassert word_len('dlav') == False\nassert word_len('d') == False\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     word_len('abcd') == False, \"Expected a False\"\nassert word_len('hello') == True, \"Expected a True\"\nassert word_len('aaaa') == False, \"Expected a False\"\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     word_len('aaaa') == True\nassert     word_len('abc') == False\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     word_len(\"\") == False\nassert     word_len(\"abcd\") == False\nassert     word_len(\"abcdef\") == True\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     word_len(1) == False\nassert     word_len('python') == False\nassert     word_len('python') == True\nassert     word_len('') == False\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert tetrahedral_number(0) == 0\nassert tetrahedral_number(1) == 4\nassert tetrahedral_number(2) == 20\nassert tetrahedral_number(3) == 144\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tetrahedral_number(0) == 1\nassert     tetrahedral_number(1) == 4\nassert     tetrahedral_number(2) == 7\nassert     tetrahedral_number(3) == 6\nassert     tetrahedral_number(4) == 15\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tetrahedral_number(2) == 3\nassert     tetrahedral_number(3) == 4\nassert     tetrahedral_number(4) == 6\nassert     tetrahedral_number(5) == 10\nassert     tetrahedral_number(6) == 12\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tetrahedral_number(5) == 1 \nassert     tetrahedral_number(6) == 6 \nassert     tetrahedral_number(7) == 14 \nassert     tetrahedral_number(8) == 40 \nassert     tetrahedral_number(9) == 132\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tetrahedral_number(1) == 1, 'Wrong output 1'\nassert     tetrahedral_number(2) == 4, 'Wrong output 2'\nassert     tetrahedral_number(3) == 12, 'Wrong output 3'\nassert     tetrahedral_number(4) == 20, 'Wrong output 4'\n\nprint('All the tests passed!')\nprint('\\n')\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     volume_sphere(2) ==    4.0, \"Should be 4.0\"\nassert     volume_sphere(1) ==    1.0, \"Should be 1.0\"\nassert     volume_sphere(0) ==    \"\", \"Should be an empty string\"\n\ndef volume_cylinder(r1, r2):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     volume_sphere(1) ==     4.188209012445595\nassert     volume_sphere(2) ==     48.82680707220302\nassert     volume_sphere(3) ==     196.9331422941066\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     volume_sphere(1) == 4\nassert     volume_sphere(2) == 4 * 4 / 3\nassert     volume_sphere(3) == 4 * 4 * 4 / 3\nassert     volume_sphere(4) == 4 * 4 * 4 * 4 / 3\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     volume_sphere(1) == math.pi, \"incorrect\"\nassert     volume_sphere(3) == 4/3*math.pi*3**3, \"incorrect\"\nassert     volume_sphere(5) == 4/3*math.pi*5**3, \"incorrect\"\nassert     volume_sphere(10) == 4/3*math.pi*10**3, \"incorrect\"\nassert     volume_sphere(0) == 0, \"incorrect\"\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     volume_sphere(1) == 4/3*math.pi*r*r*r, 'Incorrect function'\nassert volume_sphere(5) == math.pi*r*r*r*5, 'Incorrect function'\nassert volume_sphere(-1) == 0, 'Incorrect function'\n\ndef volume_prism(h, b, h2, b2):\n    '''\n    Write a function to find the volume of a prism.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nvolume_sphere(1) == math.pi * 4/3 * 1**3\nassert \nvolume_sphere(2) == math.pi * 4/3 * 2**3\nassert \nvolume_sphere(3) == math.pi * 4/3 * 3**3\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*(math.pi)*(r**3)\n\ndef check_if_sorted(items):\n    '''\n    Write a function that checks if all the items in a list are in sorted order.\n    If the items are not sorted, the function should return False.\n    If they are sorted, the function should return True.\n    '''\n    # write your function here\n    for i in range(len(items)-1):\n        if items[i+1] < items[i]:\n            return False\n    return True\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef volume_cylinder(h, r):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_Char(\"Srivaikumar\") == 'R', 'Input does not match, please try again'\nassert     get_Char(\"Srivaikumar\") == 'A', 'Input does not match, please try again'\nassert     get_Char(\"Srivaikumar\") == 'A', 'Input does not match, please try again'\nassert     get_Char(\"Srivaikumar\") == 'S', 'Input does not match, please try again'\nassert     get_Char(\"Srivaikumar\") == 'N', 'Input does not match, please try again'\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_Char(\"ABC\")==13, \"Incorrect result\"\nassert     get_Char(\"BAD\")==10, \"Incorrect result\"\nassert     get_Char(\"ABB\")==16, \"Incorrect result\"\nassert     get_Char(\"ABBC\")==20, \"Incorrect result\"\nassert     get_Char(\"ABCD\")==12, \"Incorrect result\"\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_Char(\"kushal\") == 91, \"WRONG! \"\nassert     get_Char(\"Chocolate\") == 204, \"WRONG! \"\nassert     get_Char(\"Lucifer\") == 129, \"WRONG! \"\nassert     get_Char(\"Kushal\") == 68, \"WRONG! \"\nassert     get_Char(\"Vasudev\") == 113, \"WRONG! \"\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_Char(a) == 60\nassert     get_Char(b) == 104\nassert     get_Char(c) == 105\nassert     get_Char(d) == 104\nassert     get_Char(e) == 101\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_Char('abc') == ((ord('a') + ord('b') + ord('c')) % 26), \"Test Failed\"\nassert     get_Char('abcd') == ((ord('a') + ord('b') + ord('c') + ord('d')) % 26), \"Test Failed\"\nassert     get_Char('ab') == ((ord('a') + ord('b')) % 26), \"Test Failed\"\nassert     get_Char('abcde') == ((ord('a') + ord('b') + ord('c') + ord('d') + ord('e')) % 26), \"Test Failed\"\nassert     get_Char('abcdefg') == ((ord('a') + ord('b') + ord('c') + ord('d') + ord('e') + ord('f')) % 26), \"Test Failed\"\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_Char(\"Sri\") == \"S\"\nassert     get_Char(\"Love\") == \"a\"\nassert     get_Char(\"Tera\") == \"b\"\nassert     get_Char(\"Ravi\") == \"n\"\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_Char('EZY') == 33\nassert     get_Char('EZYZ') == 0\nassert     get_Char('qw') == 57\nassert     get_Char('AA') == 66\nassert     get_Char('aa') == 67\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_Char('abc') == 9, 'Fail: get_Char'\nassert     get_Char('c') == 9, 'Fail: get_Char'\nassert     get_Char('c') == 8, 'Fail: get_Char'\n\ndef get_Sum(strr):  \n    '''\n    Write a python function to find the sum of the digits of the given string.\n    '''\n    pass\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_Char('abc') == 71\nassert     get_Char('abce') == 86\nassert     get_Char('abcde') == 123\nassert     get_Char('abcdef') == 136\nassert     get_Char('abcdefghi') == 169\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_Char(\"z\") == \"a\", \"Test Case Fail\"\nassert get_Char(\"z\") == \"b\", \"Test Case Fail\"\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert sequence(1) == 0, 'Wrong!'\nassert sequence(2) == 1, 'Wrong!'\nassert sequence(3) == 3, 'Wrong!'\nassert sequence(4) == 7, 'Wrong!'\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert sequence(0) == 1\nassert sequence(1) == 1\nassert sequence(2) == 2\nassert sequence(3) == 3\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sequence(1) == 1\nassert     sequence(2) == 2\nassert     sequence(3) == 5\nassert     sequence(10) == 55\nassert     sequence(100) == 3769\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sequence(0) == 1\nassert     sequence(1) == 2\nassert     sequence(2) == 3\nassert     sequence(3) == 4\nassert     sequence(4) == 5\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sequence(1) == 1, \"wrong\"\nassert     sequence(2) == 3, \"wrong\"\nassert     sequence(3) == 8, \"wrong\"\nassert     sequence(4) == 15, \"wrong\"\nassert     sequence(5) == 22, \"wrong\"\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sequence(1) == 1\nassert sequence(2) == 1\nassert sequence(3) == 2\nassert sequence(4) == 4\nassert sequence(5) == 5\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert sequence(0) == 1 \nassert sequence(1) == 2\nassert sequence(2) == 3\nassert sequence(3) == 5\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     surfacearea_sphere(2) == 28, 'incorrect result'\n\ndef surfacearea_spheroid(r):\n    '''\n    Write a function to find the surface area of a spheroid.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     surfacearea_sphere(1) == 4 * math.pi * 1**2, \"surfacearea_sphere Failed.\"\nassert     surfacearea_sphere(5) == 4 * math.pi * 5**2, \"surfacearea_sphere Failed.\"\nassert     surfacearea_sphere(10) == 4 * math.pi * 10**2, \"surfacearea_sphere Failed.\"\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     surfacearea_sphere(2)==5.08,'sphere radius: 2 should have surface area 5.08'\nassert surfacearea_sphere(1)==4.0,'sphere radius: 1 should have surface area 4.0'\nassert surfacearea_sphere(0)==0,'sphere radius: 0 should have surface area 0'\nassert surfacearea_sphere(-1)==0,'sphere radius: -1 should have surface area 0'\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint ('''\n--------------------------------------------------------\nTEST CASE 2\n--------------------------------------------------------\nExpected Output:\n    18.858\n\nYour Code:\n''')"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    #area of a sphere with a radius of 1\n    surfacearea_sphere(1) == 4*math.pi\n    #area of a sphere with a radius of 2\n    surfacearea_sphere(2) == 4*math.pi*math.pow(2,2)/3\n    #area of a sphere with a radius of 3\n    surfacearea_sphere(3) == 4*math.pi*math.pow(3,2)/3\n    #area of a sphere with a radius of 4\n    surfacearea_sphere(4) == 4*math.pi*math.pow(4,2)/3\n\ndef sphere_volume(r):\n    '''\n    Write a function to calculate the volume of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nsurfacearea_sphere(3.0) == 78.5, 'incorrect'\nprint('correct')\n\ndef spherevolume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     surfacearea_sphere(2) == 14\nassert     surfacearea_sphere(3) == 28\n\ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    pass\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     centered_hexagonal_number(1) == 1\nassert     centered_hexagonal_number(2) == 3\nassert     centered_hexagonal_number(3) == 7\nassert     centered_hexagonal_number(4) == 13\nassert     centered_hexagonal_number(5) == 27\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert (correct = centered_hexagonal_number(0) == 1)\nassert (correct = centered_hexagonal_number(1) == 2)\nassert (correct = centered_hexagonal_number(2) == 4)\nassert (correct = centered_hexagonal_number(3) == 7)\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ncentered_hexagonal_number(1) == 3\ncentered_hexagonal_number(2) == 7\ncentered_hexagonal_number(3) == 18\ncentered_hexagonal_number(4) == 24\ncentered_hexagonal_number(5) == 30\ncentered_hexagonal_number(6) == 36\ncentered_hexagonal_number(7) == 38\ncentered_hexagonal_number(8) == 40\ncentered_hexagonal_number(9) == 42\ncentered_hexagonal_number(10) == 48\ncentered_hexagonal_number(11) == 54\ncentered_hexagonal_number(12) == 60\ncentered_hexagonal_number(13) == 66\ncentered_hexagonal_number(14) == 72\ncentered_hexagonal_number(15) == 78\ncentered_hexagonal_number(16) == 84\ncentered_hexagonal_number(17) == 90\ncentered_hexagonal_number(18) == 96\ncentered_hexagonal_number(19) == 102\ncentered_hexagonal_number(20) == 108\ncentered_hexagonal_number(21) == 114\ncentered_hexagonal_number(22) == 120\ncentered_hexagonal_number(23) == 126\ncentered_hexagonal_number(24) == 132\ncentered_hexagonal_number(25) == 138\ncentered_hexagonal_number(26) == 144\ncentered_hexagonal_number(27) == 150\ncentered_hexagonal_number(28) == 156\ncentered_hexagonal_number(29) == 162\ncentered_hexagonal_number(30) == 168\ncentered_hexagonal_number(31) == 174\ncentered_hexagonal_number(32) == 180\ncentered_hexagonal_number(33) == 186\ncentered_hexagonal_number(34) == 192\ncentered_hexagonal_number(35) == 198\ncentered_hexagonal_number(36) == 204\ncentered_hexagonal_number(37) == 210\ncentered_hexagonal_number(38) == 216\ncentered_hexagonal_number(39) == 222\ncentered_hexagonal_number(40) == 228\ncentered_hexagonal_number(41) == 234\ncentered_hexagonal_number(42) == 240\ncentered_hexagonal_number(43) == 246\ncentered_hexagonal_number(44) == 252\ncentered_hexagonal_number(45) == 258\ncentered_hexagonal_number(46) == 264\ncentered_hexagonal_number(47) == 270\ncentered_hexagonal_number(48) == 276\ncentered_hexagonal_number(49) == 282\ncentered_hexagonal_number(50) == 288\ncentered_hexagonal_number(51) == 294\ncentered_hexagonal_number(52) == 300\ncentered_hexagonal_number(53) == 306\ncentered_hexagonal_number(54) == 312\ncentered_hexagonal_number(55) == 318\ncentered_hexagonal_number(56) == 324\ncentered_hexagonal_number(57) == 330\ncentered_hexagonal_number(58) == 336\ncentered_hexagonal_number(59) == 342\ncentered_hexagonal_number(60) == 348\ncentered_hexagonal_number(61) == 354\ncentered_hexagonal_number(62) == 360\ncentered_hexagonal_number(63) == 366\ncentered_hexagonal_number(64) == 372\ncentered_hexagonal_number(65) == 378\ncentered_hexagonal_number(66) == 384\ncentered_hexagonal_number(67) == 390\ncentered_hexagonal_number(68) == 396\ncentered_hexagonal_number(69) == 402\ncentered_hexagonal_number(70) == 408\ncentered_hexagonal_number(71) == 414\ncentered_hexagonal_number(72) == 420\ncentered_hexagonal_number(73) == 426\ncentered_hexagonal_number(74) == 432\ncentered_hexagonal_number(75) == 438\ncentered_hexagonal_number(76) == 444\ncentered_hexagonal_number(77) == 450\ncentered_hexagonal_number(78) == 456\ncentered_hexagonal_number(79) == 462\ncentered_hexagonal_number(80) == 468\ncentered_hexagonal_number(81) == 474\ncentered_hexagonal_number(82) == 480\ncentered_hexagonal_number(83) == 486\ncentered_hexagonal_number(84) == 492\ncentered_hexagonal_number(85) == 498\ncentered_hexagonal_number(86) == 504\ncentered_hexagonal_number(87) == 510\ncentered_hexagonal_number(88) == 516\ncentered_hexagonal_number(89) == 522\ncentered_hexagonal_number(90) == 528\ncentered_hexagonal_number(91) == 534\ncentered_hexagonal_number(92) == 540\ncentered_hexagonal_number(93) == 546\ncentered_hexagonal_number(94) == 552\ncentered_hexagonal_number(95) == 558\ncentered_hexagonal_number(96) == 564\ncentered_hexagonal_number(97) == 570\ncentered_hexagonal_number(98) == 576\ncentered_hexagonal_number(99) == 582\ncentered_hexagonal_number(100) == 588\ncentered_hexagonal_number(101) == 594\ncentered_hexagonal_number(102) == 600\ncentered_hexagonal_number(103) == 606\ncentered_hexagonal_number(104) == 612\ncentered_hexagonal_number(105) == 618\ncentered_hexagonal_number(106) == 624\ncentered_hexagonal_number(107) == 630\ncentered_hexagonal_number(108) == 636\ncentered_hexagonal_number(109) == 642\ncentered_hexagonal_number(110) == 648\ncentered_hexagonal_number(111) == 654\ncentered_hexagonal_number(112) == 660\ncentered_hexagonal_number(113) == 666\ncentered_hexagonal_number(114) == 672\ncentered_hexagonal_number(115) == 678\ncentered_hexagonal_number(116) == 684\ncentered_hexagonal_number(117) == 690\ncentered_hexagonal_number(118) == 696\ncentered_hexagonal_number(119) == 702\ncentered_hexagonal_number(120) == 708\ncentered_hexagonal_number(121) == 714\ncentered_hexagonal_number(122) == 720\ncentered_hexagonal_number(123) == 726\ncentered_hexagonal_number(124) == 732\ncentered_hexagonal_number(125) == 738\ncentered_hexagonal_number(126) == 744\ncentered_hexagonal_number(127) == 750\ncentered_hexagonal_number(128) == 756\ncentered_hexagonal_number(129) == 762\ncentered_hexagonal_number(130) == 768\ncentered_hexagonal_number(131) == 774\ncentered_hexagonal_number(132) == 780\ncentered_hexagonal_number(133) == 786\ncentered_hexagonal_number(134) == 792\ncentered_hexagonal_number(135) == 798\ncentered_hexagonal_number(136) == 804\ncentered_hexagonal_number(137) == 810\ncentered_hexagonal_number(138) == 816\ncentered_hexagonal_number(139) == 822\ncentered_hexagonal_number(140) == 828\ncentered_hexagonal_number(141) == 834\ncentered_hexagonal_number(142) == 840\ncentered_hexagonal_number(143) == 846\ncentered_hexagonal_number(144) == 852\ncentered_hexagonal_number(145) == 858\ncentered_hexagonal_number(146) == 864\ncentered_hexagonal_number(147) == 870\ncentered_hexagonal_number(148) == 876\ncentered_hexagonal_number(149) == 882\ncentered_hexagonal_number(150) == 888\ncentered_hexagonal_number(151) == 894\ncentered_hexagonal_number(152) == 900\ncentered_hexagonal_number(153) == 906\ncentered_hexagonal_number(154) == 912\ncentered_hexagonal_number(155) == 918\ncentered_hexagonal_number(156) == 924\ncentered_hexagonal_number(157) == 930\ncentered_hexagonal_number(158) == 936\ncentered_hexagonal_number(159) == 942\ncentered_hexagonal_number(160) == 948\ncentered_hexagonal_number(16"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     centered_hexagonal_number(1) == 1, \\\n        \"incorrect centered_hexagonal_number(1) (should be 1)\"\nassert     centered_hexagonal_number(2) == 2, \\\n        \"incorrect centered_hexagonal_number(2) (should be 2)\"\nassert     centered_hexagonal_number(3) == 3, \\\n        \"incorrect centered_hexagonal_number(3) (should be 3)\"\nassert     centered_hexagonal_number(4) == 4, \\\n        \"incorrect centered_hexagonal_number(4) (should be 4)\"\nassert     centered_hexagonal_number(5) == 5, \\\n        \"incorrect centered_hexagonal_number(5) (should be 5)\"\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     centered_hexagonal_number(1) == 1\nassert     centered_hexagonal_number(2) == 5\nassert     centered_hexagonal_number(3) == 15\nassert     centered_hexagonal_number(4) == 35\nassert     centered_hexagonal_number(5) == 61\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     centered_hexagonal_number(1) == 3, 'n=1, expected 3'\nassert     centered_hexagonal_number(2) == 6, 'n=2, expected 6'\nassert     centered_hexagonal_number(3) == 18, 'n=3, expected 18'\nassert     centered_hexagonal_number(4) == 48, 'n=4, expected 48'\nassert     centered_hexagonal_number(5) == 99, 'n=5, expected 99'\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     centered_hexagonal_number(1) == 1\nassert     centered_hexagonal_number(3) == 8\nassert     centered_hexagonal_number(5) == 14\nassert     centered_hexagonal_number(7) == 21\nassert     centered_hexagonal_number(8) == 24\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     centered_hexagonal_number(1) == 1\nassert     centered_hexagonal_number(2) == 3\nassert     centered_hexagonal_number(3) == 7\nassert     centered_hexagonal_number(4) == 15\nassert     centered_hexagonal_number(5) == 21\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     centered_hexagonal_number(1) == 2, '1st centered_hexagonal_number does not match with the expected result.'\nassert     centered_hexagonal_number(2) == 8, '2nd centered_hexagonal_number does not match with the expected result.'\nassert     centered_hexagonal_number(3) == 18, '3rd centered_hexagonal_number does not match with the expected result.'\nassert     centered_hexagonal_number(4) == 40, '4th centered_hexagonal_number does not match with the expected result.'\nassert     centered_hexagonal_number(5) == 60, '5th centered_hexagonal_number does not match with the expected result.'\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     merge_dictionaries_three({1: \"a\", 2: \"b\"}, {2: \"a\", 3: \"c\"}, {3: \"d\"}) == {1: \"a\", 2: \"a\", 3: \"d\"}\nassert     merge_dictionaries_three({1: \"a\", 2: \"b\"}, {2: \"a\", 3: \"c\"}, {1: \"a\", 2: \"a\", 3: \"c\"}) == {1: \"a\", 2: \"a\", 3: \"c\"}\nassert     merge_dictionaries_three({1: \"a\", 2: \"b\"}, {2: \"a\", 3: \"c\"}, {3: \"d\"}) == {1: \"a\", 2: \"a\", 3: \"d\"}\nassert     merge_dictionaries_three({1: \"a\", 2: \"b\"}, {2: \"a\", 3: \"c\"}, {2: \"a\", 3: \"d\"}) == {1: \"a\", 2: \"a\", 3: \"d\"}\nassert     merge_dictionaries_three({1: \"a\", 2: \"b\"}, {2: \"a\", 3: \"c\"}, {2: \"a\", 3: \"d\"}) == {1: \"a\", 2: \"a\", 3: \"d\"}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    merge_dictionaries_three({1: 10, 2: 20}, {3: 30, 4: 40}, {5:50,6:60}) == {1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60}\n    merge_dictionaries_three({4:40}, {1: 10}, {5:50,6:60}) == {1: 10, 5:50, 6:60, 4:40}\n    merge_dictionaries_three({1:10,2:20,3:30}, {4:40}, {5:50,6:60}) == {1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     merge_dictionaries_three({1:1},{2:2},{3:3}) == {1:1,2:2,3:3}\nassert     merge_dictionaries_three({1:1},{2:2,3:3},{4:4}) == {1:1,2:2,3:3,4:4}\nassert     merge_dictionaries_three({1:1,2:2},{3:3,4:4},{5:5}) == {1:1,2:2,3:3,4:4,5:5}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     merge_dictionaries_three({'a':1, 'b':2}, {'c':3, 'd':4}, {'e':5, 'f':6, 'g':7, 'h':8}) == {'a':1, 'b':2, 'c':3, 'd':4, 'e':5, 'f':6, 'g':7, 'h':8}\n\n'''\n9. Write a Python function to calculate a dog's age in dog years from its age in\nmonths. For example, if a dog is 3 months old, the function should\nreturn 3/30 = 0.27 years.\n'''\ndef dog_age(dog_age_months):\n    '''\n    Python function to calculate a dog's age in dog years from its age in\n    months. For example, if a dog is 3 months old, the function should\n    return 3/30 = 0.27 years.\n    '''\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     merge_dictionaries_three({\"a\": 1, \"b\": 2, \"c\": 3}, \n    {\"p\": 4, \"q\": 5, \"r\": 6}, {\"g\": 7, \"h\": 8, \"i\": 9}) == {\"a\": 1, \"b\": 2, \"c\": 3, \"p\": 4, \"q\": 5, \"r\": 6, \"g\": 7, \"h\": 8, \"i\": 9}\n\ndef merge_dictionaries_four(dict1,dict2,dict3, dict4):\n    '''\n    Write a function to merge four dictionaries into a single dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     merge_dictionaries_three({1: 1, 2: 3, 4: 5},{3: 4, 4: 2, 5: 1},{5: 8}) == {1: 1, 2: 3, 3: 4, 4: 2, 5: 8}\nassert     merge_dictionaries_three({1: 1, 2: 3, 4: 5},{3: 4, 4: 2, 5: 1},{1: 1, 2: 3, 3: 4}) == {1: 1, 2: 3, 3: 4, 4: 2, 5: 1}\nassert     merge_dictionaries_three({1: 1, 2: 3, 4: 5},{3: 4, 4: 2, 5: 1},{4: 4}) == {1: 1, 2: 3, 3: 4, 4: 4, 5: 1}\nassert     merge_dictionaries_three({1: 1, 2: 3, 4: 5},{3: 4, 4: 2, 5: 1},{2: 1, 3: 3}) == {1: 1, 2: 1, 3: 3, 4: 4, 5: 5}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     merge_dictionaries_three(dict1 = {'a': 1, 'b': 2, 'c': 3, 'd': 4},\n                        dict2 = {'e': 10, 'f': 20, 'g': 30, 'h': 40},\n                        dict3 = {'i': 11, 'j': 21, 'k': 31, 'l': 41}) == \\\n                        {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 10, 'f': 20, 'g': 30, 'h': 40, 'i': 11, 'j': 21, 'k': 31, 'l': 41}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     merge_dictionaries_three({'a':1,'b':2},{'b':2,'c':3},{'d':4,'e':5}) == {'a':1,'b':2,'d':4,'c':3,'e':5}\nassert     merge_dictionaries_three({'a':1,'b':2},{'b':2,'c':3,'d':4},{'e':5}) == {'a':1,'b':2,'d':4,'c':3,'e':5}\nassert     merge_dictionaries_three({'a':1},{'b':2},{'b':2,'c':3,'d':4,'e':5}) == {'a':1,'b':2,'d':4,'c':3,'e':5}\nassert     merge_dictionaries_three({'a':1},{'b':2,'c':3},{'b':2,'d':4,'e':5}) == {'a':1,'b':2,'d':4,'c':3,'e':5}\nassert     merge_dictionaries_three({},{},{}) == {}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert merge_dictionaries_three(d1, d2, d3) == {**d1, **d2, **d3}"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     merge_dictionaries_three({'a': 1, 'b': 2}, {'b': 2, 'c': 3}, {'a': 1, 'c': 3, 'd': 4}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4}\nassert     merge_dictionaries_three({'a': 1, 'b': 2}, {'c': 1, 'd': 2}, {'a': 1, 'b': 2, 'c': 3}) == {'a': 1, 'b': 2, 'c': 3, 'd': 2}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     freq_count([1,2,3]) == {1:3, 2:1, 3:1}\nassert     freq_count([1,3,2]) == {1:3, 2:1, 3:1}\nassert     freq_count([1,2,1,2,3]) == {1:4, 2:3, 3:2}\nassert     freq_count([2,3,4,1,1,5,2,3,2,3,2,2]) == {2:6, 3:5, 4:4, 5:3}\n\ndef max_freq(list1):\n    '''\n    Write a function to get the maximum frequency of all the elements in a list, returned as a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     freq_count([1,2,3,4,5]) ==     {1:3,2:1,3:1,4:1,5:1}\nassert     freq_count([]) ==             {}\nassert     freq_count(['a',1,2,3,4,5]) ==     {1:2,2:1,3:1,4:1,5:1}\nassert     freq_count([0,0,0,0,0,0,0]) ==     {0:5}\n\ndef remove_subset_from_list(list1, list2):\n    '''\n    Write a function to remove all items in list2 from list1, such that list1 contains only unique elements.\n    '''\n    # remove all items in list2 from list1\n    for item in list2:\n        if item in list1:\n            list1.remove(item)\n    return list1\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     freq_count([]) == {}\nassert     freq_count([1,1,1,2]) == {1:3,2:1}\nassert     freq_count([1,1,1,1,1,2]) == {1:5,2:1}\nassert     freq_count([1,1,1,1,2,2,3,3]) == {1:6,2:2,3:2}\nassert     freq_count([1,1,1,1,2,2,2,2,3,3,4,4,4,4,5,5,5,6,7,7,7]) == {1:9,2:5,3:4,4:3,5:2,6:1,7:1}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = dict()\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     freq_count([1,2,3,3,3,1,1,1]) ==     {1: 4, 2: 2, 3: 3}\nassert freq_count(['a','a','b','a','b','b','c','c','d','d','d','d','d','e','e','f','f']) == {'a': 2, 'b': 2, 'c': 1, 'd': 1, 'e': 2, 'f': 1}\nassert freq_count([]) == {}\nassert freq_count([1,2,3,4,5]) == {1: 4, 2: 2, 3: 1, 4: 1, 5: 1}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     freq_count([]) == {}\nassert     freq_count([1,2,2,2]) == {1:3, 2:2}\nassert     freq_count([2,1,3,3,3,3]) == {1:3, 3:5}\nassert     freq_count([2,1,3,3,3,3,1,2,3]) == {1:4, 2:3, 3:6}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     freq_count([1,1,2,3,4,5]) == {1: 3, 2: 1, 3: 1, 4: 1, 5: 1}\nassert     freq_count([2,4,2,4,4,5,2,4,2,4]) == {2: 4, 4: 4, 5: 2, 2: 2}\nassert     freq_count([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     freq_count([1,1,2,2,3,4]) == {1:2, 2:2, 3:1, 4:1}\nassert     freq_count(['a','a','b','b','a','c','c','c']) == {'a':4, 'b':3, 'c':2}\n\ndef word_freq(list1):\n    '''\n    Write a function to get the frequency of all the words in a list, returned as a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     freq_count([]) == {}\nassert     freq_count([1,2,3,4,5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}\nassert     freq_count([1,2,3,3,4,5]) == {1: 2, 2: 2, 3: 2, 4: 1, 5: 1}\nassert     freq_count([1,2,3,2,4,5]) == {1: 2, 2: 2, 3: 2, 4: 1, 5: 1}\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     closest_num(3) == 2\nassert     closest_num(4) == 2\nassert     closest_num(10) == 1\nassert     closest_num(12) == 1\nassert     closest_num(17) == 1\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef is_substring(s1, s2):\n    '''\n    Write a function to check if one string is a substring of another.\n    '''\n    pass\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(closest_num(12))\nprint(closest_num(20))\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert closest_num(3) == 2\nassert closest_num(10) == 1\nassert closest_num(1) == 1\nassert closest_num(19) == 3\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     closest_num(9) == 8\nassert     closest_num(8) == 7\nassert     closest_num(2) == 1\nassert     closest_num(1) == 0\nassert     closest_num(11) == 10\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert closest_num(1) == 0\nassert closest_num(2) == 1\nassert closest_num(10) == 9\nassert closest_num(50) == 19\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     closest_num(1) == 1\nassert     closest_num(2) == 2\nassert     closest_num(5) == 2\nassert     closest_num(6) == 2\nassert     closest_num(7) == 3\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nclosest_num(100)\nclosest_num(12)\nclosest_num(24)\nclosest_num(0)\nclosest_num(-100)\nclosest_num(6)\n\n'''\nExpected output:\n    \n    The closest smaller number to n is 2\n    The closest smaller number to n is 0\n    The closest smaller number to n is 2\n    The closest smaller number to n is 4\n    The closest smaller number to n is 0\n    The closest smaller number to n is 0\n'''\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     len_log(['comp','motor','science','program','problem','hard','engineer']) == 6, \"len_log should return the length of the longest word\"\nassert     len_log(['assume','hope','hope','hope','hope','hope','hope','hope','hope','hope','hope','hope','hope','hope','hope','hope','hope','hope','hope','hope','hope','hope','hope','hope','hope']) == 10, \"len_log should return the length of the longest word\"\nassert     len_log(['computer','science','program','problem','hard','engineer']) == 6, \"len_log should return the length of the longest word\"\nassert     len_log(['assume','hope','hope','hope','hope','hope','hope','hope','hope','hope','hope','hope','hope','hope','hope','hope','hope','hope','hope','hope','hope','hope','hope','hope']) == 10, \"len_log should return the length of the longest word\"\n\ndef word_filter(list1, filter_word):\n    '''\n    Write a python function to remove all the words in a list that contains the filter word.\n    '''\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nlen_log([])\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     len_log([])==0, \"Error 1\"\nassert     len_log([1, 2, 3])==3, \"Error 2\"\nassert     len_log([\"hi\", \"ho\", \"hello\", \"hoh\"])==5, \"Error 3\"\nassert     len_log([\"hi\", \"ho\", \"hello\", \"hoh\", \"hooo\"])==6, \"Error 4\"\nassert     len_log([\"hi\", \"ho\", \"hello\", \"hoh\", \"hooo\", \"hoho\"])==7, \"Error 5\"\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     len_log(['geeks', 'for', 'geeks']) == 4, \"Failed\"\nassert     len_log(['ab', 'a', 'ab']) == 3, \"Failed\"\n\ndef len_log_func(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # Solution 1\n    max_len = 0\n    for item in list1:\n        if len(item) >= max_len:\n            max_len = len(item)\n    return max_len"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     len_log([]) == 0, 'empty list'\nassert     len_log([[]]) == 1, 'list of empty lists'\nassert     len_log([['a']]) == 1,'single list of one element'\nassert     len_log([[1,2,3]]) == 3,'single list of three elements'\nassert     len_log([[1,2,3,4], ['a', 'b', 'c']]) == 4,'single list of two lists'\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef len_log1(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    pass\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     len_log([]) == 0, \"list is empty\"\nassert     len_log([1, 2, 3]) == 3, \"3\"\nassert     len_log([1, 2, 3, 4, 5]) == 5, \"5\"\nassert     len_log([\"hi\", \"hello\", \"world\"]) == 5, \"5\"\nassert     len_log([\"the\", \"quick\", \"brown\", \"fox\"]) == 6, \"6\"\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     len_log([]) == 0, \"Length of an empty list is 0\"\nassert     len_log([1,2,3,4,5]) == 5, \"Length of a list of numbers is 5\"\nassert     len_log([\"a\",\"b\",\"c\"]) == 3, \"Length of a list of words is 3\"\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_substring('a', 'b') == False\nassert     find_substring('', 'b') == True\nassert     find_substring('a', '') == True\nassert     find_substring('', '') == False\nassert     find_substring('', 'a') == False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_substring(\"hi\", \"hi\")\nassert     find_substring(\"hi\", \"bye\")\nassert     find_substring(\"hi\", \"hi\")\nassert     not find_substring(\"hi\", \"hi\")"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_substring(\"abracadabra\", \"ab\") == True, \"Should be True\"\nassert     find_substring(\"abracadabra\", \"r\") == False, \"Should be False\"\nassert     find_substring(\"abracadabra\", \"abc\") == False, \"Should be False\"\nassert     find_substring(\"abracadabra\", \"\") == False, \"Should be False\"\nassert     find_substring(\"abracadabra\", \"ab\") == True, \"Should be True\"\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_substring('how','hi')==False\nassert     find_substring('h','how')==True\nassert     find_substring('','')==True\nassert     find_substring('','what')==True\nassert     find_substring('how','what')==True\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_substring(\"aaaa\", \"aa\") == False\nassert     find_substring(\"aaaaa\", \"aa\") == True\nassert     find_substring(\"aaa\", \"aa\") == False\nassert     find_substring(\"abcdefg\", \"abc\") == True\nassert     find_substring(\"abcdefg\", \"bc\") == False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_substring('hello','hello') == True, '\"hello\" not found'\nassert     find_substring('hello','lo') == False, '\"lo\" found'\nassert     find_substring('hi','hi') == True, '\"hi\" found'\nassert     find_substring('hi','hi') == False, '\"hi\" not found'\nassert     find_substring('foobar', 'foobar') == True, '\"foobar\" found'\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nfind_substring(\"hey\", \"h\") == False\nfind_substring(\"hey\", \"y\") == True\nfind_substring(\"hay\", \"h\") == False\nfind_substring(\"hay\", \"y\") == True\nfind_substring(\"hello\", \"h\") == True\nfind_substring(\"hello\", \"o\") == False\nfind_substring(\"hello\", \"l\") == True\nfind_substring(\"hello\", \"e\") == True\nfind_substring(\"hello\", \"l\") == True\nfind_substring(\"hay\", \"h\") == False\nfind_substring(\"hay\", \"y\") == True\nfind_substring(\"hello\", \"h\") == False\nfind_substring(\"hello\", \"o\") == True\nfind_substring(\"hello\", \"l\") == True\nfind_substring(\"hello\", \"e\") == True\nfind_substring(\"hello\", \"l\") == True"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_substring(\"coding\",\"coding\") == True\nassert     find_substring(\"coding\",\"coding \",1) == True\nassert     find_substring(\"coding\",\"coding \",2) == True\nassert     find_substring(\"coding\",\"coding \",3) == True\nassert     find_substring(\"coding\",\"coding \",4) == True\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_substring(\"aabcbabcbb\", \"abc\") == True, \"should return True\"\nassert     find_substring(\"aabcbabcbb\", \"abcd\") == False, \"should return False\"\nassert     find_substring(\"aabcbabcbb\", \"a\") == True, \"should return True\"\n\ndef find_substring_test():\n    '''\n    Define a function that returns True if a string contains the substring,\n    False otherwise.\n    '''\n    pass\n\ndef find_substring_test(s, sub_str):\n    '''\n    Write a function that returns the index of the first occurrence of a substring in a given list of strings.\n    '''\n    pass\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_substring(\n    str1 = \"thecat\", \n    sub_str = \"thecat\") == True, \"Should return True\"\nassert     find_substring(\n    str1 = \"aat\", \n    sub_str = \"thecat\") == False, \"Should return False\""
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nassert is_undulating(9) == True\nassert is_undulating(9) == False\nassert is_undulating(10) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_undulating(2) == True, \"Should return True\"\nassert     is_undulating(1) == True, \"Should return True\"\nassert     is_undulating(3) == False, \"Should return False\"\n\n\n\ndef reverse_iter(iterable):\n    '''\n    Write a function to reverse the order of the iterable and return the reversed iterator.\n    '''\n    pass\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_undulating(2) == True, \"2 should be undulating.\"\nassert     is_undulating(4) == True, \"4 should be undulating.\"\nassert     is_undulating(5) == True, \"5 should be undulating.\"\nassert     is_undulating(6) == False, \"6 should not be undulating.\"\nassert     is_undulating(9) == True, \"9 should be undulating.\"\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_undulating(100) == False, \"Wrong\"\nassert     is_undulating(200) == True, \"Wrong\"\nassert     is_undulating(0) == False, \"Wrong\"\nassert     is_undulating(15) == False, \"Wrong\"\nassert     is_undulating(19) == True, \"Wrong\"\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_undulating(0) == True\nassert     is_undulating(1) == False\nassert     is_undulating(2) == True\nassert     is_undulating(3) == True\nassert     is_undulating(4) == True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_undulating(1) == True, \"Wrong\"\nassert     is_undulating(2) == False, \"Wrong\"\nassert     is_undulating(5) == True, \"Wrong\"\nassert     is_undulating(18) == False, \"Wrong\"\nassert     is_undulating(24) == False, \"Wrong\"\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_undulating(1) == True, \"Wrong output\"\nassert     is_undulating(0) == False, \"Wrong output\"\nassert     is_undulating(-1) == False, \"Wrong output\"\nassert     is_undulating(-2) == False, \"Wrong output\"\nassert     is_undulating(3) == True, \"Wrong output\"\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef is_undulating(n):\n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nassert power(2,0) == 1\nassert power(2,1) == 2\nassert power(2,2) == 4\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     power(3,4) == 81, \"incorrect value\"\nassert     power(1,4) == 1, \"incorrect value\"\nassert     power(2,4) == 8, \"incorrect value\"\nassert     power(4,2) == 16, \"incorrect value\"\nassert     power(0,4) == 0, \"incorrect value\"\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     power(2,3) == 8\nassert     power(4,2) == 16\nassert     power(10,2) == 100\nassert     power(10,0) == 1\nassert     power(10,1) == 10\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     power(2,4) == 16\nassert     power(0,3) == 0\nassert     power(0,2) == 0\nassert     power(-1,-1) == 1\nassert     power(2,-1) == 0\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     power(3,2) == 9\nassert     power(2,4) == 16\nassert     power(4,2) == 16\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     power(3,2) == 9, 'power should be 9'\nassert     power(10,2) == 100, 'power should be 100'\nassert     power(10,0) == 1, 'power should be 1'\nassert     power(0,0) == 1, 'power should be 1'\nassert     power(-10,2) == -100, 'power should be -100'\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     power(2,2) == 4\nassert     power(2,3) == 8\nassert     power(2,0) == 1\nassert     power(0,2) == 0\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef multiply(*args):\n    '''\n    Write a function'multiply' to multiply all numbers in a list 'args'.\n    '''\n    pass\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     power(1,0) == 1\nassert     power(1,1) == 1\nassert     power(2,0) == 1\nassert     power(2,1) == 2\nassert     power(2,2) == 4\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     index_minimum([('a', 1), ('b', 2), ('c', 3), ('d', 4)]) == ('a', 1)\nassert     index_minimum([('a', 1), ('b', 3), ('c', 4), ('d', 6)]) == ('c', 4)\nassert     index_minimum([('a', 1), ('b', 4), ('c', 4), ('d', 6)]) == ('d', 6)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    # assert \n    # test_list = [[2,2],[1,2],[1,0],[4,5],[0,1]]\n    # assert index_minimum(test_list) == (0, 1)\n    # assert index_minimum([(3,6),(1,2),(1,5),(2,3),(4,8),(3,6),(6,1),(7,5)]) == (1,1)\n    # assert index_minimum([(2,6),(1,5),(1,2),(5,6),(4,8),(3,6),(6,1),(7,5)]) == (2,5)\n    # assert index_minimum([(3,6),(1,2),(1,0),(4,5),(0,1)]) == (1,0)\n    # assert index_minimum([(2,6),(1,5),(1,2),(5,6),(4,8),(3,6),(6,1),(7,5)]) == (1,2)\n    # assert index_minimum([(3,6),(1,2),(1,0),(4,5),(0,1)]) == (1,0)\n    # assert index_minimum([(2,6),(1,5),(1,2),(5,6),(4,8),(3,6),(6,1),(7,5)]) == (1,2)\n    # assert index_minimum([(2,6),(1,5),(1,2),(5,6),(4,8),(3,6),(6,1),(7,5)]) == (2,5)\n    # assert index_minimum([(2,6),(1,5),(1,2),(5,6),(4,8),(3,6),(6,1),(7,5)]) == (2,5)\n    # assert index_minimum([(2,6),(1,5),(1,2),(5,6),(4,8),(3,6),(6,1),(7,5)]) == (2,5)\n    # assert index_minimum([(2,6),(1,5),(1,2),(5,6),(4,8),(3,6),(6,1),(7,5)]) == (2,5)\n    # assert index_minimum([(2,6),(1,5),(1,2),(5,6),(4,8),(3,6),(6,1),(7,5)]) == (2,5)\n    # assert index_minimum([(2,6),(1,5),(1,2),(5,6),(4,8),(3,6),(6,1),(7,5)]) == (2,5)\n    # assert index_minimum([(2,6),(1,5),(1,2),(5,6),(4,8),(3,6),(6,1),(7,5)]) == (2,5)\n    # assert index_minimum([(2,6),(1,5),(1,2),(5,6),(4,8),(3,6),(6,1),(7,5)]) == (2,5)\n    # assert index_minimum([(2,6),(1,5),(1,2),(5,6),(4,8),(3,6),(6,1),(7,5)]) == (2,5)\n    # assert index_minimum([(2,6),(1,5),(1,2),(5,6),(4,8),(3,6),(6,1),(7,5)]) == (2,5)\n    # assert index_minimum([(2,6),(1,5),(1,2),(5,6),(4,8),(3,6),(6,1),(7,5)]) == (2,5)\n    # assert index_minimum([(2,6),(1,5),(1,2),(5,6),(4,8),(3,6),(6,1),(7,5)]) == (2,5)\n    # assert index_minimum([(2,6),(1,5),(1,2),(5,6),(4,8),(3,6),(6,1),(7,5)]) == (2,5)\n    # assert index_minimum([(2,6),(1,5),(1,2),(5,6),(4,8),(3,6),(6,1),(7,5)]) == (2,5)\n    # assert index_minimum([(2,6),(1,5),(1,2),(5,6),(4,8),(3,6),(6,1),(7,5)]) == (2,5)\n    # assert index_minimum([(2,6),(1,5),(1,2),(5,6),(4,8),(3,6),(6,1),(7,5)]) == (2,5)\n    # assert index_minimum([(2,6),(1,5),(1,2),(5,6),(4,8),(3,6),(6,1),(7,5)]) == (2,5)\n    # assert index_minimum([(2,6),(1,5),(1,2),(5,6),(4,8),(3,6),(6,1),(7,5)]) == (2,5)\n    # assert index_minimum([(2,6),(1,5),(1,2),(5,6),(4,8),(3,6),(6,1),(7,5)]) == (2,5)\n    # assert index_minimum([(2,6),(1,5),(1,2),(5,6),(4,8),(3,6),(6,1),(7,5)]) == (2,5)\n    # assert index_minimum([(2,6),(1,5),(1,2),(5,6),(4,8),(3,6),(6,1),(7,5)]) == (2,5)\n    # assert index_minimum([(2,6),(1,5),(1,2),(5,6),(4,8),(3,6),(6,1),(7,5)]) == (2,5)\n    # assert index_minimum([(2,6),(1,5),(1,2),(5,6),(4,8),(3,6),(6,1),(7,5)]) == (2,5)\n    # assert index_minimum([(2,6),(1,5),(1,2),(5,6),(4,8),(3,6),(6,1),(7,5)]) == (2,5)\n    # assert index_minimum([(2,6),(1,5),(1,2),(5,6),(4,8),(3,6),(6,1),(7,5)]) == (2,5)\n    # assert index_minimum([(2,6),(1,5),(1,2),(5,6),(4,8),(3,6),(6,1),(7,5)]) == (2,5)\n    # assert index_minimum([(2,6),(1,5),(1,2),(5,6),(4,8),(3,6),(6,1),(7,5)]) == (2,5)\n    # assert index_minimum([(2,6),(1,5),(1,2),(5,6),(4,8),(3,6),(6,1),(7,5)]) == (2,5)\n    # assert index_minimum([(2,6),(1,5),(1,2),(5,6),(4,8),(3,6),(6,1),(7,5)]) == (2,5)\n    # assert index_minimum([(2,6),(1,5),(1,2),(5,6),(4,8),("
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     index_minimum([(1,3),(2,1),(1,2)]) == (1,2), \"The correct answer is (1,2)\"\nassert     index_minimum([(1,3),(2,2),(1,2)]) == (1,2), \"The correct answer is (1,2)\"\nassert     index_minimum([(1,3),(2,1),(1,1)]) == (1,1), \"The correct answer is (1,1)\"\nassert     index_minimum([(1,3),(2,2),(1,2)]) == (1,2), \"The correct answer is (1,2)\"\nassert     index_minimum([(1,3),(2,1),(1,2)]) == (1,2), \"The correct answer is (1,2)\"\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     index_minimum([('a', 1), ('b', 3), ('c', 2), ('d', 0)]) == ('a', 1)\nassert     index_minimum([('a', 1), ('b', 2), ('c', 0), ('d', 3)]) == ('a', 1)\nassert     index_minimum([('a', 1), ('b', 2), ('c', 0), ('d', 3)]) == ('b', 2)\nassert     index_minimum([('a', 1), ('b', 2), ('c', 0), ('d', 3)]) == ('c', 0)\nassert     index_minimum([('a', 1), ('b', 2), ('c', 0), ('d', 3)]) == ('d', 0)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     index_minimum([('ram', 10), ('lalit', 20), ('shyam', 30)]) == ('ram', 10)\nassert     index_minimum([('ram', 10), ('lalit', 20)]) == ('lalit', 20)\nassert     index_minimum([('shyam', 20), ('ram', 10)]) == ('shyam', 20)\nassert     index_minimum([('lalit', 20), ('shyam', 30)]) == ('shyam', 30)"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    test_list = [(1,2), (1,3), (3,1), (1,4), (1,5), (1,6)]\n    assert index_minimum(test_list) == (1,1)\n    test_list = [(1,2), (1,4), (1,5), (1,6)]\n    assert index_minimum(test_list) == (1,1)\n    test_list = [(1,2), (1,3), (3,1), (1,4), (1,5), (1,6)]\n    assert index_minimum(test_list) == (1,1)\n    test_list = [(1,2), (1,3), (3,1), (1,4), (1,5), (1,6)]\n    assert index_minimum(test_list) == (1,1)\n    test_list = [(1,2), (1,3), (3,1), (1,4), (1,5), (1,6)]\n    "
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert index_minimum([(1, 2), (3, 4), (5, 3)]) == (1, 3)\nassert index_minimum([(1, 2), (3, 3), (5, 3)]) == (1, 3)\nassert index_minimum([(1, 2), (3, 3), (5, 3)]) == (1, 3)\nassert index_minimum([(1, 2), (3, 4), (5, 3)]) == (1, 2)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef my_test_list():\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list = [('A', 1), ('B', 2), ('C', 3)]\n    test_list.sort(key=itemgetter(1))\n    assert index_minimum(test_list) == ('A', 1)\n\n\ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    pass\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Find_Min_Length([\"Raja\", \"Monica\", \"Aman\", \"Jasmine\", \"Jad\", \"Monica\"]) == 4, \"should return 4\"\nassert Find_Min_Length([\"Raja\", \"Monica\", \"Aman\", \"Jasmine\", \"Jad\", \"Monica\"]) == 1, \"should return 1\"\nassert Find_Min_Length([\"Raja\", \"Monica\", \"Aman\", \"Jasmine\", \"Jad\", \"Monica\", \"Monica\"]) == 3, \"should return 3\"\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     Find_Min_Length([[], [], []]) == 0\nassert Find_Min_Length([['','']]) == 2\nassert Find_Min_Length([[], ['','']]) == 2\nassert Find_Min_Length([['',''], ['','']]) == 3\nassert Find_Min_Length([['',''], ['',''], ['','']]) == 4\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    assert(Find_Min_Length([[1,2,4],[2,3,4],[3,4,5],[7,8,9],[1,2,3]]) == 2)\n    assert(Find_Min_Length([[1,2],[2,3],[3,4]]) == 2)\n    print(\"You've passed all the tests!\""
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nFind_Min_Length([[1,2,3], [4,5,6], [7,8,9]]) == 2, \"didn't get the correct answer\"\nassert \nFind_Min_Length([]) == 0, \"didn't get the correct answer\"\nassert \nFind_Min_Length([[1,2,3,4,5], [3,2,1,2], [1,1]]) == 1, \"didn't get the correct answer\"\nassert \nFind_Min_Length([[1,2], [3,4], [5,6]]) == 1, \"didn't get the correct answer\""
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Find_Min_Length([[1,4], [3,5,6], [2]]) == 2\nassert     Find_Min_Length([[2], [3], [4]]) == 1\nassert     Find_Min_Length([[1], [2], [3]]) == 1\nassert     Find_Min_Length([[2,3,4],[5,6,7,8,9]]) == 5\nassert     Find_Min_Length([[3,2,4],[8,5,1,7,9,0]]) == 4\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Find_Min_Length([[],2,[3],[4,5],[6,7,8],[9,10,11],\n                          [1,2,3,4],[5,6,7,8]]) == 8, \"Wrong answer\"\nassert Find_Min_Length([[],2,[3],[4,5],[6,7,8],[9,10,11],\n                          [1,2,3,4],[5,6,7,8,9,10,11]]) == 9, \"Wrong answer\"\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Find_Min_Length([[4,5,6],[3,2,1]]) == 1\nassert Find_Min_Length([[1,3,4],[2,5,6]]) == 1\nassert Find_Min_Length([[1,2,3],[4,5,6],[7,8,9]]) == 1\n\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\""
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef is_prime(n):\n    '''\n    Write a python function to check whether a given integer is a prime or not.\n    '''\n    pass\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     divisor(7) == 4, '7 is a wrong divisor of 7'\nassert     divisor(12) == 4, '12 is a wrong divisor of 12'\nassert     divisor(21) == 5, '21 is a wrong divisor of 21'\nassert     divisor(39) == 5, '39 is a wrong divisor of 39'\nassert     divisor(13) == 2, '13 is a wrong divisor of 13'\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     divisor(4) == 2, 'divisor function is not working'\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint('***Task 2***')\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     divisor(10) == 2\nassert     divisor(11) == 2\nassert     divisor(12) == 3\nassert     divisor(13) == 3\nassert     divisor(14) == 4\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n'''\nWe need to find the number of divisors of a number n. The divisors are the numbers that divide evenly into the number.\n\nExample:\n\nn = 7\n\nThe divisors are 1, 2, 3, 7 and 14.\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef nth_root(n, k):\n    '''\n    Write a python function to find the nth root of a given integer.\n    '''\n    pass\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     divisor(5) == 5, \"Error\"\nassert     divisor(15) == 3, \"Error\"\nassert     divisor(4) == 4, \"Error\"\nassert     divisor(30) == 6, \"Error\"\nassert     divisor(0) == 0, \"Error\"\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     frequency_lists(['one','two','two','three','four','four','four','four','two','two','two']) == {'four': 3, 'two': 4, 'three': 1, 'one': 1}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     frequency_lists([[1, 1], [2, 4], [3, 6]]) == {1: 2, 2: 1, 3: 1, 4: 2, 6: 1}\nassert     frequency_lists([[1, 1], [1, 1], [1, 1]]) == {1: 3}\nassert     frequency_lists([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]) == {1: 4}\nassert     frequency_lists([[1, 1], [1, 1], [1, 1], [1, 1], [1, 1], [1, 1]]) == {1: 6}\nassert     frequency_lists([[1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1]]) == {1: 4}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     frequency_lists([[1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]) == {1: 4, 2: 2, 3: 2, 4: 2, 5: 2, 6: 2, 7: 2, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2}\nassert     frequency_lists([[1, 1], [1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]) == {1: 5, 2: 2, 3: 1, 4: 2, 5: 2, 6: 2, 7: 2, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2}\nassert     frequency_lists([[1, 1, 1], [1, 1], [1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]) == {1: 4, 2: 2, 3: 2, 4: 1, 5: 2, 6: 2, 7: 2, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2}\nassert     frequency_lists([[1, 1, 1, 1], [1, 1], [1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]) == {1: 5, 2: 2, 3: 2, 4: 2, 5: 1, 6: 2, 7: 2, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2}\nassert     frequency_lists([[1, 1, 1, 1, 1], [1, 1], [1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]]) == {1: 5, 2: 2, 3: 2, 4: 2, 5: 1, 6: 2, 7: 2, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     frequency_lists([[1, 2], [3, 4, 5], [6, 7, 8, 9], [1, 2]]) == {1: 2, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1}\nassert     frequency_lists([[1, 2, 3, 4], [1, 1, 3, 1], [1, 1, 1, 1]]) == {1: 3, 2: 2, 3: 1, 4: 1}\nassert     frequency_lists([[1, 2], [2, 1], [1, 1]]) == {1: 2, 2: 1, 1: 2}\nassert     frequency_lists([[1, 2], [3, 4, 5], [6, 7, 8, 9], [1, 2], [3, 4, 5, 6, 7, 8, 9]]) == {1: 2, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     frequency_lists([[0], 1]) == {0: 1, 1: 1}\nassert     frequency_lists([[1], 2]) == {1: 2, 2: 1}\nassert     frequency_lists([[1], 2, 3]) == {1: 2, 2: 1, 3: 1}\nassert     frequency_lists([[1, 2], 2, 3]) == {1: 2, 2: 2, 3: 1}\nassert     frequency_lists([[1, 2], 2, [2, 3], 2]) == {1: 2, 2: 3, 2: 2}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nfrequency_lists([[1, 2, 1],\n                [2],\n                [2, 1, 3, 4],\n                [3],\n                [2, 1, 2]]) == \n        {1: 3, 2: 2, 3: 1, 4: 1}\nassert \nfrequency_lists([[1],\n                [1, 1],\n                [1, 2, 2],\n                [2, 3]]) == \n        {1: 1, 2: 2, 3: 1}\nassert \nfrequency_lists([[1],\n                [2],\n                [1, 2, 3, 4],\n                [4],\n                [2, 1, 2],\n                [1]]) == \n        {1: 1, 2: 1, 3: 2, 4: 1, 5: 1}\nassert \nfrequency_lists([[1, 2],\n                [2],\n                [1, 2, 3, 4],\n                [4],\n                [2, 1, 2],\n                [1]]) == \n        {1: 2, 2: 1, 3: 2, 4: 1, 5: 1}\nassert \nfrequency_lists([[1],\n                [2],\n                [1, 2, 3, 4],\n                [4],\n                [2, 1, 2],\n                [1],\n                [1, 1],\n                [1, 2, 2]]) == \n        {1: 3, 2: 2, 3: 2, 4: 1, 5: 2}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     frequency_lists([[1,2,3,4,5],[3,4,5,6,7],[7,8,9,10,1]]) == {1: 3, 2: 2, 3: 2, 4: 1, 5: 2, 6: 1, 7: 2, 8: 1, 9: 1, 10: 1}\nassert     frequency_lists([[1,2,3,4,5,6],[7,8,9,10,1,2],[3,4,5,6,7,8]]) == {1: 3, 2: 2, 3: 2, 4: 1, 5: 2, 6: 2, 7: 2, 8: 1, 9: 1, 10: 1}\n\ndef concatenate_list_with_a_delay(list1, delay):\n    '''\n    Write a function to take a list and return the concatenation of list with its elements delayed by an amount of delay.\n    '''\n    pass\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     frequency_lists(    [     [1,3,2], \n                                        [1,3,2], \n                                        [3,2,1], \n                                        [3,2,1], \n                                        [3,2,1]     ] \n                                        )     == {1: 3, 2: 2, 3: 1, 3: 1, 2: 2}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     frequency_lists([[[1, 1], 1], [[2, 1], 2], [[1, 1], 1]]) ==     {1: 2, 2: 1, 1: 2}\nassert     frequency_lists([[[1, 1], 2], [[2, 1], 1], [[1, 1], 1]]) ==     {1: 2, 2: 1, 1: 2}\nassert     frequency_lists([[[2, 1], 1], [[1, 1], 1], [[1, 1], 1]]) ==     {2: 1, 1: 2}\nassert     frequency_lists([[[1, 1], 1], [[2, 1], 1], [[1, 1], 1]]) ==     {1: 2, 2: 1, 1: 2}\nassert     frequency_lists([[[1, 1], 1], [[2, 1], 1], [[1, 1], 1]]) ==     {1: 2, 2: 1, 1: 2}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     frequency_lists([[1, 2], [2, 3], [3, 4], [4, 5]]) == {1: 1, 2: 2, 3: 2, 4: 2, 5: 1}\n\nassert     frequency_lists([[1, 1, 1], [2, 2, 2], [3, 3, 3]]) == {1: 3, 2: 2, 3: 3}\nassert     frequency_lists([[1, 1], [2, 2], [3, 3], [3, 4], [4, 5]]) == {1: 3, 2: 2, 3: 2, 4: 1, 5: 1}\nassert     frequency_lists([[1, 2, 3, 4, 5, 6]]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1}\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     multiply_num([5, 6, 7, 8]) == 56\nassert     multiply_num([]) == 1\nassert     multiply_num([1, 2, 3]) == 6\nassert     multiply_num([1, 2, 3, 4]) == 24\nassert     multiply_num([0, 2, 3, 4]) == 0\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     multiply_num([1, 2, 3, 4]) == 24\nassert     multiply_num([1, 2, 4, 6]) == 24\nassert     multiply_num([3, 4]) == 12\nassert     multiply_num([1, 2, 3]) == 6\nassert     multiply_num([1, 2, 3, 4, 5]) == 60\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef multiply_list(numbers):\n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    pass\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     multiply_num([1,2,3,4]) == 24\nassert     multiply_num([]) == 1\nassert     multiply_num([1]) == 1\n\ndef convert_num_to_words(numbers): \n    '''\n    Write a function to convert a given integer number into words.\n    '''\n    pass\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef add_and_multiply(numbers):\n    '''\n    Write a function to find the sum of all the numbers in a list and multiply with each one of the numbers in the list.\n    '''\n    pass\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    multiply_num([5, 4, 3, 2, 1]) == 5 * 4 * 3 * 2 * 1 \n    multiply_num([5, 5, 5, 5, 5]) == 5 * 5 * 5 * 5 * 5\n    multiply_num([]) == 1"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef most_frequent(numbers):\n    '''\n    Write a function that takes a list of numbers and returns the most frequent number in the list.\n    '''\n    pass\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     decimal_to_binary(0) == \"0\"\nassert     decimal_to_binary(3) == \"11\"\nassert     decimal_to_binary(5) == \"101\"\nassert     decimal_to_binary(15) == \"1111\"\nassert     decimal_to_binary(21) == \"1101\"\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     decimal_to_binary(0) == \"0\"\nassert decimal_to_binary(1) == \"1\"\nassert decimal_to_binary(4) == \"100\"\nassert decimal_to_binary(8) == \"1000\"\nassert decimal_to_binary(16) == \"10000\"\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     decimal_to_binary(1) == \"1\"\nassert     decimal_to_binary(5) == \"101\"\nassert     decimal_to_binary(8) == \"1000\"\nassert     decimal_to_binary(2) == \"10\"\nassert     decimal_to_binary(7) == \"101\"\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint (\"\\nTesting decimal_to_binary:\")\nprint (decimal_to_binary(2))\nprint (decimal_to_binary(3))\nprint (decimal_to_binary(4))\nprint (decimal_to_binary(5))\nprint (decimal_to_binary(8))\nprint (decimal_to_binary(10))\nprint (decimal_to_binary(15))\nprint (decimal_to_binary(24))\nprint (decimal_to_binary(25))\nprint (decimal_to_binary(36))\nprint (decimal_to_binary(63))\nprint (decimal_to_binary(80))\nprint (decimal_to_binary(96))\nprint (decimal_to_binary(104))\nprint (decimal_to_binary(109))\nprint (decimal_to_binary(114))\nprint (decimal_to_binary(199))\nprint (decimal_to_binary(210))\nprint (decimal_to_binary(245))\nprint (decimal_to_binary(256))\nprint (decimal_to_binary(512))\nprint (decimal_to_binary(1024))\nprint (decimal_to_binary(2048))\nprint (decimal_to_binary(4096))\nprint (decimal_to_binary(8192))\nprint (decimal_to_binary(16384))\nprint (decimal_to_binary(32768))\nprint (decimal_to_binary(65536))\nprint (\"\\nOK\""
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     decimal_to_binary(1) == '1'\nassert     decimal_to_binary(8) == '1000'\nassert     decimal_to_binary(3) == '101'\nassert     decimal_to_binary(13) == '1101'\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     decimal_to_binary(0) == '0'\nassert     decimal_to_binary(1) == '1'\nassert     decimal_to_binary(2) == '10'\nassert     decimal_to_binary(3) == '11'\nassert     decimal_to_binary(4) == '100'\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef binary_to_decimal(s):\n    '''\n    Write a function to convert the given binary number to its decimal equivalent, represented as a string with no leading zeros.\n    '''\n    pass\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     next_smallest_palindrome(5) == 7, \"Wrong next_smallest_palindrome\"\nassert     next_smallest_palindrome(17) == 19, \"Wrong next_smallest_palindrome\"\nassert     next_smallest_palindrome(56) == 65, \"Wrong next_smallest_palindrome\"\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     next_smallest_palindrome(999) == (1001)\nassert     next_smallest_palindrome(919) == (921)\nassert     next_smallest_palindrome(931) == (939)\nassert     next_smallest_palindrome(929) == (931)\nassert     next_smallest_palindrome(927) == (929)\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    next_smallest_palindrome(9) == 5\n    next_smallest_palindrome(10) == 7\n    next_smallest_palindrome(1) == 2\n    next_smallest_palindrome(8) == 7\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     next_smallest_palindrome(12) == 3\nassert next_smallest_palindrome(12321) == 121\nassert next_smallest_palindrome(9) == 7\nassert next_smallest_palindrome(1234567890) == 987654321\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     next_smallest_palindrome(121) == 10\nassert     next_smallest_palindrome(10) == 9\nassert     next_smallest_palindrome(0) == 1\nassert     next_smallest_palindrome(-1) == None\n\ndef next_palindrome(num):\n    '''\n    Write a function to find the next palindrome of a specified integer, returned as an integer.\n    '''\n    pass\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     next_smallest_palindrome(11) == 10\nassert     next_smallest_palindrome(12) == 21\nassert     next_smallest_palindrome(2147483648) == 2147483647\nassert     next_smallest_palindrome(2147483647) == 2147483648\nassert     next_smallest_palindrome(5) == 6\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     next_smallest_palindrome(19) == 11\nassert     next_smallest_palindrome(200) == 201\nassert     next_smallest_palindrome(2000) == 2001\nassert     next_smallest_palindrome(12345) == 12440\nassert     next_smallest_palindrome(2147483647) == 2147483645\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef first_palindrome_of_a_number_using_bit_manipulation(num):\n    '''\n    Write a function to find the first palindrome of a specified integer, returned as an integer.\n    '''\n    pass\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     kth_element([1,2,3,4,5], 2) == 4\nassert     kth_element([1,2,3,4,5], 1) == 1\nassert     kth_element([1,2,3,4,5], 6) == None\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nkth_element([1,1,1,2,2,3,4,4], 1) == 1\nkth_element([1,1,1,2,2,3,4,4], 3) == 4\nkth_element([1,2,3,4,5], 1) == 1\nkth_element([], 1) == -"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     kth_element([2,3,4], 1)    == 3\nassert     kth_element([1,2,3,4], 3)    == 4\nassert     kth_element([], 0)    == None\nassert     kth_element([], 10)    == None\nassert     kth_element([], -10)    == None\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     kth_element([1, 2, 3, 4], 1) == 1\nassert     kth_element([1, 2, 3, 4], 2) == 2\nassert     kth_element([1, 2, 3, 4], 3) == 3\nassert     kth_element([1, 2, 3, 4], 4) == 4\nassert     kth_element([1, 2, 3, 4], 5) == None\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef sort_k_elements(arr, k):\n    '''\n    Write a function to sort the given array.\n    '''\n    pass\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    pass\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nk = 4\nprint(\"Testing kth_element()\")\nprint(f'Expected: 6')\nprint(f'Actual:   {kth_element([1,3,5,7,9], k)}')\n\nassert k == 5\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     kth_element([1,2,3,4,5], 3) == 4\nassert     kth_element([1,2,3,4,5], 1) == 1\nassert     kth_element([1,2,3,4,5], 5) == 5\nassert     kth_element([1,2,3,4,5], 6) == -1\nassert     kth_element([1,2,3,4,5], 0) == -1\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef snake_to_upper(word):\n    '''\n    Write a function to convert a snake case string to upper case string.\n    '''\n    pass\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     snake_to_camel('camel_snake') == 'camelSnake', 'Wrong!'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     snake_to_camel('snake_case') =='snake_case'\nassert     snake_to_camel('snake_case_') =='snakeCase'\nassert     snake_to_camel('snake_Case') =='snakeCase'\nassert     snake_to_camel('snake_Case') =='snakeCase'\nassert     snake_to_camel('snake_case123') =='snakeCase123'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     snake_to_camel('snake_case') =='snakeCase'\nassert     snake_to_camel('snake_CASE') =='snakeCase'\nassert     snake_to_camel('snake_case_') =='snakeCase'\nassert     snake_to_camel('snake_Case') =='snakeCase'\nassert     snake_to_camel('snake_Case_') =='snakeCase'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     snake_to_camel(\"snake_case\") == \"snakeCase\"\nassert     snake_to_camel(\"snakecase\") == \"snakecase\"\nassert     snake_to_camel(\"snakeCase\") == \"snakeCase\"\nassert     snake_to_camel(\"snake_case\") == \"snake_case\"\nassert     snake_to_camel(\"Snake_case\") == \"snake_case\"\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     snake_to_camel('_') == '', \"Not working\"\nassert snake_to_camel('_') == '', \"Not working\"\nassert snake_to_camel('_') == '', \"Not working\"\nassert snake_to_camel('_') == '', \"Not working\"\nassert snake_to_camel('_') == '', \"Not working\"\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     snake_to_camel('camel_case') == 'CamelCase'\nassert     snake_to_camel('camelCase') == 'CamelCase'\nassert     snake_to_camel('snake_case') == 'SnakeCase'\nassert     snake_to_camel('snake_case_') == 'SnakeCase'\nassert     snake_to_camel('snake_case_1') == 'SnakeCase1'\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nassert snake_to_camel(\"snake_case\") == \"snakeCase\"\nassert snake_to_camel(\"camel_case\") == \"camelCase\"\nassert snake_to_camel(\"kebab_case\") == \"kebabCase\"\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     eulerian_num(1, 1) == 2\nassert     eulerian_num(2, 2) == 4\nassert     eulerian_num(3, 2) == 4\nassert     eulerian_num(4, 2) == 4\nassert     eulerian_num(5, 2) == 6\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     eulerian_num(2, 3) == 3\nassert     eulerian_num(2, 4) == 1\nassert     eulerian_num(2, 5) == 1\nassert     eulerian_num(3, 3) == 1\nassert     eulerian_num(3, 4) == 1\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    eulerian_num(1, 1) == 1\n    eulerian_num(1, 2) == 2\n    eulerian_num(1, 4) == 1\n    eulerian_num(2, 2) == 1\n    eulerian_num(2, 4) == 1\n    eulerian_num(3, 2) == 1\n    eulerian_num(4, 2) == 1\n    eulerian_num(5, 4) == 2\n    eulerian_num(5, 6) == 3\n    eulerian_num(6, 4) == 3\n    eulerian_num(6, 6) == 4\n    eulerian_num(7, 6) == 3\n    eulerian_num(8, 6) == 5\n    eulerian_num(8, 8) == 6\n    eulerian_num(10, 6) == 4\n    eulerian_num(11, 6) == 6\n    eulerian_num(12, 6) == 5\n    eulerian_num(13, 6) == 5\n    eulerian_num(14, 6) == 5\n    eulerian_num(15, 6) == 5\n    eulerian_num(16, 6) == 4\n    eulerian_num(17, 6) == 4\n    eulerian_num(18, 6) == 4\n    eulerian_num(19, 6) == 4\n    eulerian_num(20, 6) == 4\n    eulerian_num(21, 6) == 5\n    eulerian_num(22, 6) == 5\n    eulerian_num(23, 6) == 5\n    eulerian_num(24, 6) == 4\n    eulerian_num(25, 6) == 4\n    eulerian_num(26, 6) == 3\n    eulerian_num(27, 6) == 3\n    eulerian_num(28, 6) == 3\n    eulerian_num(29, 6) == 3\n    eulerian_num(30, 6) == 4\n    eulerian_num(31, 6) == 4\n    eulerian_num(32, 6) == 4\n    eulerian_num(33, 6) == 3\n    eulerian_num(34, 6) == 3\n    eulerian_num(35, 6) == 3\n    eulerian_num(36, 6) == 3\n    eulerian_num(37, 6) == 3\n    eulerian_num(38, 6) == 3\n    eulerian_num(39, 6) == 3\n    eulerian_num(40, 6) == 3\n    eulerian_num(41, 6) == 3\n    eulerian_num(42, 6) == 3\n    eulerian_num(43, 6) == 3\n    eulerian_num(44, 6) == 3\n    eulerian_num(45, 6) == 2\n    eulerian_num(46, 6) == 2\n    eulerian_num(47, 6) == 2\n    eulerian_num(48, 6) == 2\n    eulerian_num(49, 6) == 1\n    eulerian_num(50, 6) == 1\n    eulerian_num(51, 6) == 1\n    eulerian_num(52, 6) == 1\n    eulerian_num(53, 6) == 1\n    eulerian_num(54, 6) == 1\n    eulerian_num(55, 6) == 1\n    eulerian_num(56, 6) == 1\n    eulerian_num(57, 6) == 1\n    eulerian_num(58, 6) == 1\n    eulerian_num(59, 6) == 1\n    eulerian_num(60, 6) == 1\n    eulerian_num(61, 6) == 1\n    eulerian_num(62, 6) == 1\n    eulerian_num(63, 6) == 1\n    eulerian_num(64, 6) == 1\n    eulerian_num(65, 6) == 1\n    eulerian_num(66, 6) == 1\n    eulerian_num(67, 6) == 1\n    eulerian_num(68, 6) == 1\n    eulerian_num(69, 6) == 1\n    eulerian_num(70, 6) == 1\n    eulerian_num(71, 6) == 1\n    eulerian_num(72, 6) == 1\n    eulerian_num(73, 6) == 1\n    eulerian_num(74, 6) == 1\n    eulerian_num(75, 6) == 1\n    eulerian_num(76, 6) == 1\n    eulerian_num(77, 6) == 1\n    eulerian_num(78, 6) == 1\n    eulerian_num(79, 6) == 1\n    eulerian_num(80, 6) == 1\n    eulerian_num(81, 6) == 1\n    eulerian_num(82, 6) == 1\n    eulerian_num(83, 6) == 1\n    eulerian_num(84, 6) == 1\n    eulerian_num(85, 6) == 1\n    eulerian_num(86, 6) == 1\n    eulerian_num(87, 6) == 1\n    eulerian_num(88, 6) == 1\n    eulerian_num(89, 6) == 1\n    eulerian_num(90, 6) == 1\n    eulerian_num(91, 6) == 1\n    eulerian_num(92, 6) == 1\n    eulerian_num(93, 6) == 1\n    eulerian_num(94, 6) == 1\n    eulerian_num(95, 6) == 1\n    eulerian_num(96, 6) == 1\n    eulerian_num(97, 6) == 1\n    eulerian_num(98, 6) == 1\n    eulerian_num(99, 6) == 1\n    eulerian_num(100, 6) == 1\n    eulerian_num(101, 6) == 1\n    eulerian_num(102, 6) == 1\n    eulerian_num(103, 6) == 1\n    eulerian_num(104, 6) == 1\n    eulerian_num(105, 6) == 1\n    eulerian_num(106, 6) == 1\n    eulerian_num(107, 6) == 1\n    eulerian_num(108, 6) == 1\n    eulerian_num(109, 6) == 1\n    eulerian_num(110, 6) == 1\n    eulerian_num(111, 6) == 1\n    eulerian_num(112, 6) == 1\n    eulerian_num(113, 6) == 1\n    eulerian_num(114, 6) == 1\n    eulerian_num(115, 6) == 1\n    eulerian_num(116, 6) == 1\n    eulerian_num(117, 6) == 1\n    eulerian_num(118, 6) == 1\n    eulerian_num(119, 6) == 1\n    eulerian_num(120, 6) == 1\n    eulerian_num(121, 6) == 1\n    eulerian_num(122, 6) == 1\n    eulerian_num(123, 6) == 1\n    eulerian_num(124, 6) == 1\n    eulerian_num(125, 6) == 1\n    eulerian_num(126, 6) == 1\n    eulerian_num(127, 6) == 1\n    eulerian_num(128, 6) == 1\n    eulerian_num(129, 6) == 1\n    eulerian_num(130, 6) == 1\n    eulerian_num(131, 6) == 1\n    eulerian_num(132, 6) == 1\n    eulerian_num(133, 6) == 1\n    eulerian_num(134, 6) == 1\n    eulerian_num(135, 6) == 1\n    eulerian_num(136, 6) == 1\n    eulerian_num(137, 6) == 1\n    eule"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     eulerian_num(1, 2) == 0\nassert     eulerian_num(2, 2) == 1\nassert     eulerian_num(2, 5) == 2\nassert     eulerian_num(5, 5) == 2\nassert     eulerian_num(5, 6) == 3\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     eulerian_num(4, 2) == 2, 'check fail'\nassert eulerian_num(5, 4) == 6, 'check fail'\nassert eulerian_num(5, 6) == 2, 'check fail'\nassert eulerian_num(6, 4) == 4, 'check fail'\nassert eulerian_num(3, 6) == 3, 'check fail'\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \neulerian_num(2, 2) == 2\neulerian_num(2, 1) == 1\neulerian_num(1, 2) == 1\neulerian_num(0, 1) == 1\neulerian_num(1, 0) == 1\neulerian_num(0, 0) == 1\n\nassert eulerian_num(2, 2) == 2\nassert eulerian_num(2, 1) == 1\nassert eulerian_num(1, 2) == 1\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    print(eulerian_num(4, 4)) == 1\n    print(eulerian_num(6, 6)) == 2\n    print(eulerian_num(10, 10)) == 3\n    print(eulerian_num(8, 8)) == 4\n    print(eulerian_num(100, 100)) == 5"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     eulerian_num(1, 1) == 1\nassert     eulerian_num(2, 2) == 1\nassert     eulerian_num(3, 2) == 2\nassert     eulerian_num(3, 3) == 2\nassert     eulerian_num(3, 4) == 2\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     eulerian_num(4, 3) == 4\nassert eulerian_num(5, 6) == 3\nassert eulerian_num(1, 1) == 0\n\ndef tiling_num(n):\n    '''\n    Write a function to find the number of all 2n-square tiling patterns in a grid.\n    '''\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_sublists([[1,2], [3,4], [5,6]]) == [[1, 2], [3, 4], [5, 6]]\nassert     sort_sublists([[1,2], [5,6], [3,4]]) == [[1, 2], [3, 4], [5, 6]]\nassert     sort_sublists([[1,2,3], [4,5,6]]) == [[1, 2, 3], [4, 5, 6]]\nassert     sort_sublists([[1,2,3,4], [5,6,7,8]]) == [[1, 2, 3, 4], [5, 6, 7, 8]]\nassert     sort_sublists([[1,2,3], [4,5,6,7]]) == [[1, 2, 3], [4, 5, 6, 7]]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_sublists(['a','b','c','d','e','f']) == ['a','b','c','d','e','f']\nassert     sort_sublists(['z','y','x','w','v','u','t','s','q','p','o','n','m']) == ['m','n','o','p','q','s','t','u','v','w','x','y','z']\nassert     sort_sublists(['1','2','3','4','5','6']) == ['1','2','3','4','5','6']"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n[\n    [],\n    [''],\n    ['', ''],\n    ['abc', '', 'abc', '', 'abc'],\n    ['abc', 'def', '', 'abc', 'def', 'abc', 'abc'],\n    ['abc', 'def', 'ghi', 'abc', 'def', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'abc'],\n    ['abc', 'def', 'ghi', 'abc', 'def', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'ghi', 'def', 'abc', 'ghi', 'abc', 'gh"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_sublists(['c', 'a', 'd']) == ['c', 'a', 'd']\nassert     sort_sublists(['c', 'd', 'a']) == ['c', 'd', 'a']\n\ndef sort_list_of_lists(input_list):\n    '''\n    Write a function to sort each list of strings in a given list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_sublists([]) == []\nassert     sort_sublists([['a']]) == [['a']]\nassert     sort_sublists([['a', 'b'], ['c', 'd']]) == [['a', 'b'], ['c', 'd']]\nassert     sort_sublists([['c', 'a'], ['b', 'd'], ['e', 'g'], ['f', 'g']]) == [['c', 'a'], ['b', 'd'], ['e', 'g'], ['f', 'g']]\n\ndef sort_sublists_v2(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_sublists(['b', 'a', 'd']) == [['a', 'b', 'd'], ['d', 'a', 'b']]\nassert     sort_sublists(['a', 'c', 'd', 'b']) == [['a', 'b', 'c', 'd'], ['d', 'c', 'b', 'a']]\nassert     sort_sublists(['a', 'c', 'b', 'd']) == [['a', 'b', 'c', 'd'], ['d', 'c', 'b', 'a']]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_sublists(['cat', 'bat', 'rat']) == \\\n        [['bat', 'cat', 'rat'], ['cat', 'bat', 'rat'], ['rat', 'cat', 'bat']]\n\ndef sort_lists_by_key(input_list, key_func):\n    '''\n    Write a function that takes a list of lists and\n    returns a new list of lists, where the inner lists\n    have been sorted by the result of the provided key function.\n    '''\n    pass\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef group_similar_values(input_list):\n    '''\n    Write a function to group similar values in a given list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count([True,True,True,True,True,False,False]) == 6, \"incorrect result\"\nassert     count([True,True,True,True,True]) == 5, \"incorrect result\"\nassert     count([True,True,True]) == 4, \"incorrect result\"\nassert     count([True]) == 1, \"incorrect result\"\nassert     count([]) == 0, \"incorrect result\"\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count([False, False, True, False, True]) == 0\nassert     count([False, False, False, False, True]) == 2\nassert     count([False, False, True, False, True]) == 1\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == '__main__':\n    \n    lst = [True, False, True]\n    print(count(lst))\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count([False, False, False, True, True, True, False, False]) == 3\nassert     count([False, False, False, True, True, True, False, False, True]) == 4\nassert     count([]) == 0\n\n\n\ndef closest_smaller_or_equal(lst):\n    '''\n    Write a python function to find the closest smaller or equal number in the given list.\n    Input format :\n    First line : Integer N (size of the list)\n    Second line : N elements in the list\n    Output format : The element that is the closest smaller or equal to the given one\n    '''\n    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert count([True, False, True]) == 2\nassert count([]) == 0\nassert count(None) == 0\nassert count([1, 2, 3]) == 0\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(count([True, True, False, True, True, False]))\nprint(count([1, 1, 0, 1, 1, 0]))\nprint(count([True, True, True, True, True, True, True, True, False]))"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count([False, False, True, False, False]) == 2, 'failed to count true booleans'\nassert     count([True, True, True, False, True]) == 5, 'failed to count true booleans'\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count([]) == 0, \"Empty list\"\nassert     count([True, False, True]) == 2, \"Two True elements\"\nassert     count([True, False, True, True, True]) == 5, \"Five True elements\"\nassert     count([True, False, True, True, True, True, False]) == 8, \"Eight True elements\"\nassert     count([False]) == 0, \"One false element\"\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     add_lists([1, 2, 3], (4, 5, 6)) == ([1, 2, 3, 4, 5, 6],)\nassert     add_lists([1, 2, 3], (4, 5, 6, 7)) == ([1, 2, 3, 4, 5, 6, 7])\nassert     add_lists([1, 2, 3], (4, 5, 6, 7, 8)) == ([1, 2, 3, 4, 5, 6, 7, 8])\nassert     add_lists([1, 2, 3], (4, 5, 6)) == ([1, 2, 3, 4, 5, 6],)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add_lists([1,2,3], (1,2,3)) == ([1,2,3], (1,2,3))\nassert     add_lists([1,2,3,4], (1,2,3,4)) == ([1,2,3,4], (1,2,3,4))\nassert     add_lists([1], (1,)) == ([1], (1,))\nassert     add_lists([], (1,)) == ([], (1,))\nassert     add_lists([1], ()) == ([1], ())\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     (add_lists([1, 2, 3, 4, 5], [(1, 2), (3, 4), (5, 6)]) == [(1, 2), (3, 4), (5, 6), (1, 2), (3, 4), (5, 6)]), \"Wrong output\"\nassert     (add_lists([1, 2, 3, 4, 5], [(1, 2), (3, 4), (5, 6)]) == [(1, 2), (3, 4), (5, 6), (1, 2), (3, 4), (5, 6)]), \"Wrong output\"\nassert     (add_lists([], [(1, 2), (3, 4), (5, 6)]) == [(1, 2), (3, 4), (5, 6)]), \"Wrong output\"\nassert     (add_lists([], [(1, 2), (3, 4), (5, 6)]) == [(1, 2), (3, 4), (5, 6)]), \"Wrong output\"\n\nprint(\"You're done!\")"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add_lists([1,2,3],(3,2,1)) == [(1,2,3), (3,2,1)]\nassert     add_lists([4,5], (7,8,9)) == [(4,5), (7,8,9)]\nassert     add_lists([], (3,2,1)) == [(3,2,1)]\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_lists([1,3,5], (2,4,6)) == (1,3,5,2,4,6)\nassert     add_lists([1,3,5], [(2,4,6)]) == (1,3,5,2,4,6)\nassert not     add_lists([1,3,5], [(2,4,6),(2,4,6)])\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     add_lists([1,2,3], (1,2,3)) == (1,2,3), \"Wrong\"\nassert     add_lists([1,2], (1,2,3)) == (1,2,3), \"Wrong\"\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     add_lists([1,2,3], (1,2)) == [(1,2),(1,2)]\nassert     add_lists([1,2,3], (1,2,3)) == [(1,2,3)]\n\ndef filter_nested_lists(test_list):\n    '''\n    Write a function to filter the given nested list.\n    '''\n    pass\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     add_lists([], ()),        ([], ())\nassert    add_lists([], (2,)),        ([], (2,))\nassert    add_lists([], (1,2,3,4,5)),    ([], (1,2,3,4,5))\nassert    add_lists([], (1,2,3)),    ([1,2,3], ())\nassert    add_lists([], (1,2,3,4)),    ([1,2,3,4], ())\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     add_lists([1, 2, 3], ([1, 2],)) == ([1, 2], (1, 2, 3))\nassert add_lists([1, 2, 3], ([1, 2],)) == ([1, 2], (1, 2, 3))\nassert add_lists([], ([1, 2],)) == ([], (1, 2))\nassert add_lists([1], ([1, 2],)) == ([1], (1, 2))\nassert add_lists([], ()) == ([], ())\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef sum_lists(test_list, test_tup):\n    '''\n    Write a function that sums the two given lists.\n    '''\n    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     merge_sorted_list([1,3,5,7],[2,4,6,8],[0,9]) == [0,1,2,3,4,5,6,7,8,9]\nassert     merge_sorted_list([1,2,4],[],[1,3,5,6,7,8,9]) == [1,1,2,3,4,5,6,7,8,9]\nassert     merge_sorted_list([],[\"a\",\"b\",\"c\"],[\"d\",\"e\",\"f\"]) == ['a','d','b','c','e','f']\nassert     merge_sorted_list([\"a\",\"b\",\"c\"],[\"d\",\"e\",\"f\"],[\"g\",\"h\",\"i\"]) == [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\"]\nassert     merge_sorted_list([1,3,5,7],[2,4,6,8],[0,9,10,11]) == [0,1,2,3,4,5,6,7,8,9,10,11]\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     merge_sorted_list([1,2,3],[4,5,6],[7,8,9]) == [1,2,3,4,5,6,7,8,9]\nassert     merge_sorted_list([1,4,7],[2,3,6],[5,8,9]) == [1,2,3,4,5,6,7,8,9]\nassert     merge_sorted_list([1,5,7],[2,3,6],[4,8,9]) == [1,2,3,4,5,6,7,8,9]\nassert     merge_sorted_list([1,4,7],[2,3,6,5],[8,9,10]) == [1,2,3,4,5,6,7,8,9,10]\nassert     merge_sorted_list([1,4,7],[2,3,6],[5,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef merge_sort(list_to_sort):\n    '''\n    Write a function that takes in a list and sorts it using the merge sort algorithm.\n    '''\n    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nnum1 = [1,2,3,4,5]\nnum2 = [1,2,3]\nnum3 = [1,2,4,6]\n\nresult = merge_sorted_list(num1,num2,num3)\nprint(result)\n\nnum1 = [1,2,3,4,5]\nnum2 = [1,2,3,4]\nnum3 = [1,2,4,6]\n\nresult = merge_sorted_list(num1,num2,num3)\nprint(result)\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     merge_sorted_list([1,3,5],[2,4,6],[4,7,8,9]) == [1,2,3,4,4,5,6,7,8,9]\nassert     merge_sorted_list([],[],[]) == []\nassert     merge_sorted_list([],['a','b','c'],[]) == ['a','b','c']\n\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef merge_sorted_list(num1, num2, num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # find the minimum element in each list\n    if num1[0] < num2[0]:\n        min1, min2 = num1[0], num2[0]\n    else:\n        min1, min2 = num2[0], num1[0]\n    if num3[0] < min1:\n        min3 = num3[0]\n    else:\n        min3 = min1\n\n    # Create a new list that has the smallest element of the three lists, \n    # and the rest of the elements are set to None\n    new_list = []\n    new_list.append(min3)\n    new_list.extend([None]*(len(num1)-1))\n    new_list.extend([None]*(len(num2)-1))\n    new_list.extend([None]*(len(num3)-1))\n\n    # Merge each list\n    i = 0\n    j = 0\n    k = 0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] <= num2[j] and num1[i] <= num3[k]:\n            new_list[i+j+k] = num1[i]\n            i += 1\n        elif num2[j] <= num1[i] and num2[j] <= num3[k]:\n            new_list[i+j+k] = num2[j]\n            j += 1\n        elif num3[k] <= num1[i] and num3[k] <= num2[j]:\n            new_list[i+j+k] = num3[k]\n            k += 1\n    \n    # If any of the list is not completely filled, add the remaining elements\n    if i < len(num1):\n        new_list[i+j+k:] = num1[i:]\n    elif j < len(num2):\n        new_list[i+j+k:] = num2[j:]\n    elif k < len(num3):\n        new_list[i+j+k:] = num3[k:]\n\n    # Return the new sorted list\n    return new_list\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     merge_sorted_list([1,2,3],[1,4,6],[0,4,4]) == [0,1,1,2,3,4,4,4,4,4]\nassert     merge_sorted_list([1,2,4],[2,3,4],[1,3,4]) == [1,1,2,2,3,3,4,4,4,4]\nassert     merge_sorted_list([1],[2],[3]) == [1,2,3]\nassert     merge_sorted_list([1,2],[3,4],[5,6]) == [1,2,3,4,5,6]\nassert     merge_sorted_list([1,2,3,4],[5,6,7,8],[9,10,11,12]) == [1,2,3,4,5,6,7,8,9,10,11,12]\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert merge_sorted_list([1,2,3],[4,5,6], [7,8,9]) == [1,2,3,4,5,6,7,8,9], \"Test failed\"\nprint(\"Success\")\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef odd_Equivalent_2(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    pass\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     odd_Equivalent('0000001', 3) == 6\nassert     odd_Equivalent('11111111', 2) == 4\nassert     odd_Equivalent('11101110', 5) == 1\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     odd_Equivalent('100000', 0) == 5\nassert     odd_Equivalent('100000', 1) == 2\nassert     odd_Equivalent('100000', 2) == 1\nassert     odd_Equivalent('100000', 3) == 0\nassert     odd_Equivalent('100000', 4) == 0\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     odd_Equivalent('10101100',4) == 2, 'Incorrect result'\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nodd_Equivalent(s = \"00110101\",n = 1) == 3 \nassert odd_Equivalent(s = \"00110111\",n = 2) == 1\nassert odd_Equivalent(s = \"0010111\",n = 3) == 2\n\ndef odd_Equivalent_2(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        s = bin(int(s,2)<<1)[2:]\n        if s[0] == '1':\n            count += 1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    pass"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     odd_Equivalent( \"0110011\",4) == 2, \"Wrong Answer. Expected 2, but got {0}\".format(odd_Equivalent( \"0110011\",4))\nassert     odd_Equivalent( \"0110111\",4) == 0, \"Wrong Answer. Expected 0, but got {0}\".format(odd_Equivalent( \"0110111\",4))\nassert odd_Equivalent( \"1101111\",1) == 2, \"Wrong Answer. Expected 2, but got {0}\".format(odd_Equivalent( \"1101111\",1))\nassert odd_Equivalent( \"0010111\",2) == 1, \"Wrong Answer. Expected 1, but got {0}\".format(odd_Equivalent( \"0010111\",2))\nassert odd_Equivalent( \"1111111\",1) == 4, \"Wrong Answer. Expected 4, but got {0}\".format(odd_Equivalent( \"1111111\",1))\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nodd_Equivalent('001101001', 3) == 8\n\nassert \nodd_Equivalent('0010111', 2) == 5\n\nassert \nodd_Equivalent('111001011', 2) == 7\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     odd_Equivalent(\"0100110\",1) == 8, \"Incorrect result\"\nassert     odd_Equivalent(\"0100110\",2) == 16, \"Incorrect result\"\nassert     odd_Equivalent(\"0100110\",3) == 24, \"Incorrect result\"\nassert     odd_Equivalent(\"0100110\",4) == 32, \"Incorrect result\"\nassert     odd_Equivalent(\"0100110\",5) == 40, \"Incorrect result\"\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     common_in_nested_lists([[1,2],[3]]) == [1,2], \"First\"\nassert     common_in_nested_lists([[1,2,3],[4],[5]]) == [1,2,3], \"Second\"\nassert     common_in_nested_lists([[1,2,3],[4,5],[6,7]]) == [1,2,3], \"Third\"\nassert     common_in_nested_lists([[1],[2],[3],[4]]) == [1], \"Fourth\"\nassert     common_in_nested_lists([[1,2],[3,4,5]]) == [1,2], \"Fifth\"\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     common_in_nested_lists([[1,2,3], [1,2,3], [1,2,3]]) == 1\nassert     common_in_nested_lists([[1,2], [2,1], [1,1]]) == 1\nassert     common_in_nested_lists([[1,1,1], [1,2,2], [1,2,3], [1,2,3]]) == 1\nassert     common_in_nested_lists([[1,2], [2,1], [1,1], [1,2], [1,1]]) == 1\nassert     common_in_nested_lists([[1,2], [2,1], [1,1], [1,2], [1,2]]) == 2\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     common_in_nested_lists([[1, 2], [2, 4], [3, 4]]) == 2\nassert     common_in_nested_lists([[1, 2], [2, 4], [1, 3]]) == 1\nassert     common_in_nested_lists([[1, 2], [2, 4], [1]]) == 1\n\ndef common_in_nested_lists(list1, list2):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    pass\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     common_in_nested_lists([[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6]]) == \n        [[2, 3, 4], [3, 4, 5], [4, 5, 6]]\nassert common_in_nested_lists([[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [7, 8, 9]]) == \n        [[2, 3, 4], [3, 4, 5], [4, 5, 6], [7, 8, 9]]\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     common_in_nested_lists([[1, 1], [1, 1, 1], [1, 2, 1, 1]]) == 1\nassert     common_in_nested_lists([[1, 2], [1, 2, 1], [1, 1, 1, 1]]) == 2\nassert     common_in_nested_lists([[1], [1, 1], [1, 1, 1], [1, 2, 1, 1]]) == 1\nassert     common_in_nested_lists([[1], [1], [1, 1], [1, 1, 1], [1, 2, 1, 1]]) == 1\nassert     common_in_nested_lists([[1, 1], [1, 1, 1], [1, 2, 1, 1], [1, 2, 1, 1]]) == 2\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     common_in_nested_lists([[[1,2],2,3],[[1,3,4,5],5,6],[[2],2,1]]) == [[2],2,1]\nassert     common_in_nested_lists([[[1,2,3,4,5],5,6],[[2,3,4],4,5],[[2],2,1]]) == [[2,3,4],4,5]\nassert     common_in_nested_lists([[[1,2,3,4],4,5],[[2,3,4],4,5],[[2],2,1]]) == [[2],2,1]\nassert     common_in_nested_lists([[[1,2,3,4],4,5],[[2,3,4],4,5],[[2],2,1]]) == [[2],2,1]\nassert     common_in_nested_lists([[1,2,3],4,5]) == [[1,2,3],4,5]\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     common_in_nested_lists([1, 2, 4, [6, 8], 3]) ==         [6, 8]\nassert     common_in_nested_lists([1, 2, 3, 4, 5, 6, 7]) ==         [6, 7]\nassert     common_in_nested_lists([1, 2, 3, 4, 5, 6, 7]) ==         []\nassert     common_in_nested_lists([[1, 2], 2, 3, 4, 5, 6, 7]) ==     [2, 3, 4, 5, 6, 7]\nassert     common_in_nested_lists([[1, 2, 3], 2, 3, 4, 5, 6, 7]) ==     [3, 4, 5, 6, 7]\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     common_in_nested_lists(nested_list1) == ['inter', 'inter']\nassert     common_in_nested_lists(nested_list2) == ['inter', 'inter', 'inter', 'inter', 'inter', 'inter']"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_integer(\"123\") == True, \"Bad result\"\nassert     check_integer(\"1a2\") == True, \"Bad result\"\nassert     check_integer(\"-12\") == False, \"Bad result\"\nassert     check_integer(\"0\") == True, \"Bad result\"\nassert     check_integer(\"-0\") == True, \"Bad result\"\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_integer('1') == True, \"Fail\"\nassert     check_integer('1.3') == False, \"Fail\"\nassert     check_integer('1.3') == False, \"Fail\"\nassert     check_integer('1') == True, \"Fail\"\nassert     check_integer('2e5') == True, \"Fail\"\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_integer('42')\nassert     not check_integer('a')\nassert     not check_integer('42.2')\nassert     not check_integer('abc')\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_integer(\"1\") == True\nassert     check_integer(\"1.1\") == True\nassert     check_integer(\"hello\") == False\nassert     check_integer(\"1a\") == False\nassert     check_integer(\"1a2\") == False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_integer('1') == True\nassert     check_integer('1.2') == True\nassert     check_integer('a') == False\nassert     check_integer('1.') == False\nassert     check_integer('1.a') == False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert         check_integer('a')        == False, \"should return False\"\nassert         check_integer('1')        == True, \"should return True\"\nassert         check_integer('3.5')        == False, \"should return False\"\nassert         check_integer('3')        == True, \"should return True\"\nassert         check_integer('-4')        == False, \"should return False\"\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    check_integer('5') == True\n    check_integer('5.4') == True\n    check_integer('5+4') == False\n    check_integer('5.4.6') == False\n    check_integer('5.4.6+7') == False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_integer('123') == True\nassert     check_integer('1.2') == True\nassert     check_integer('-1') == True\nassert     check_integer('-1.2') == True\nassert     check_integer('0') == True\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_integer('2') == '2'\nassert     check_integer('-2') == '-2'\nassert     check_integer('2.6') == '2.6'\nassert     check_integer('a') == 'a'\nassert     check_integer('') == ''\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     (check_integer('-17') == True), \"wrong output\"\nassert     (check_integer('-17.5') == False), \"wrong output\"\nassert     (check_integer('0') == True), \"wrong output\"\nassert     (check_integer('1') == True), \"wrong output\"\nassert     (check_integer('1.2') == True), \"wrong output\"\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     empty_dit([{},{}]) == True, \"Error, empty dictionary does not return true!\"\nassert empty_dit([{},{1:2},{}]) == False, \"Error, empty dictionary returns false!\"\nassert empty_dit([{},{},{}]) == True, \"Error, empty dictionary does not return true!\"\nassert empty_dit([{},{},{1:2}]) == False, \"Error, empty dictionary returns false!\"\nassert empty_dit([{},{},{},{1:2},{},{}]) == False, \"Error, empty dictionary returns false!\"\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     empty_dit([{},{}]) == True\nassert     empty_dit([{'a':1},{}]) == False\nassert     empty_dit([{},{},{}]) == True\nassert     empty_dit([{}]) == True\nassert     empty_dit([{},{'a':1}]) == False\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     empty_dit(list1) == True\n\nprint('')\nprint('-'*60)\nprint('')\n\n\n\n\ndef empty_dit2(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    pass\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     empty_dit([{},{},{}]) == True, '1'\nassert     empty_dit([{'c': 'v'}, {}, {}]) == True, '2'\nassert     empty_dit([{}, {}, {'b': 'v'}]) == True, '3'\nassert     empty_dit([{}, {}, {},{}]) == False, '4'\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef count_empty_dit(list1):\n    '''\n    Write a function to count the number of dictionaries in a list are empty or not.\n    '''\n    pass\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     empty_dit([\"\", {}, {}, {}, {}]) is True, \"The list is not empty\"\nassert     empty_dit([{}, {}, {}]) is True, \"The first dictionary is empty\"\nassert     empty_dit([{\"\", {}, {}, {}}, {}]) is True, \"The first dictionary is empty\"\nassert     empty_dit([{\"\": {}, {}, {}}, {}]) is True, \"The first dictionary is empty\"\nassert     empty_dit([{\"\": {}, {}, {}}, {}, {}]) is False, \"The first dictionary is not empty\"\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     empty_dit(['', '', {}])\nassert     not empty_dit(['', '', {}],)\nassert     empty_dit(['', {}, {}])\nassert     empty_dit([{}, '', ''])\n\n\ndef all_keys_are_dic(dict1):\n    '''\n    Write a function that takes a dictionary as input and returns True if all of the keys are dictionaries and return False otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nempty_dit([]), False\nempty_dit([{},{},{},{}]), True\nempty_dit([{'name': 'joe','age': 50},{'name': 'jane','age': 34},{'name': 'jane','age': 34},{'name': 'joe','age': 50}]), False\n\nempty_dit([{},{},{},{},{},{},{},{}])\n\n'''\nTask\nWrite a function, which when given a non-empty list of dictionaries, determines whether \nall dictionaries in the list are empty or not.\n'''\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     empty_dit(\n[[],{},[[]]]\n) == True, 'First test case was wrong'\n\nassert     empty_dit(\n[[],{},[[1]],{},[[1,2]]]\n) == False, 'Second test case was wrong'\n\nassert     empty_dit(\n[[],{},[[1]],{},[[1,2]]]\n) == True, 'Third test case was wrong'\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tuple_to_int((1, 2, 3)) == 6\nassert     tuple_to_int((3, 2, 1)) == 7\nassert     tuple_to_int((1, 1, 1)) == 10\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_to_int((3, 4, 5)) == 15\nassert tuple_to_int((1, 2, 3)) == 6\nassert tuple_to_int((1, 2, 3, 4)) == 12\nassert tuple_to_int((-1, -2, -3)) == -6\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_to_int((1, 2, 3)) == 6, 'Wrong!'\nassert     tuple_to_int((1, 2)) == 2, 'Wrong!'\nassert     tuple_to_int((1,)) == 1, 'Wrong!'\nassert     tuple_to_int((1, 2, 3, 4)) == 12, 'Wrong!'\nassert     tuple_to_int((1, 2, 3, 4, 5, 6, 7)) == 120, 'Wrong!'\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     (tuple_to_int((1, 2, 3, 4, 5)) == 123), \"fail\"\nassert     (tuple_to_int((1, 2, 0, 5, -4)) == 123), \"fail\"\nassert     (tuple_to_int((1, 2, 3, 4, 5)) == 123), \"fail\"\n\nprint(\"successfully test!\")\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     (1, ) == tuple_to_int((1, ))\nassert     (1, 2) == tuple_to_int((1, 2))\nassert     (1, 2, 3) == tuple_to_int((1, 2, 3))\nassert     (1, 2, 3, 4) == tuple_to_int((1, 2, 3, 4))\nassert     (1, 2, 3, 4, 5) == tuple_to_int((1, 2, 3, 4, 5))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tuple_to_int((2,5,8,9)) == 240\nassert     tuple_to_int((2,5)) == 30\nassert     tuple_to_int((5,8)) == 80\nassert     tuple_to_int((2,5,8,9,0)) == 240\nassert     tuple_to_int((9,2,5,8,9,0,1)) == 45360\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tuple_to_int((1,2,3,4)) == 15\nassert     tuple_to_int((1,)) == 1\nassert     tuple_to_int((1,2)) == 3\nassert     tuple_to_int((2,3)) == 6\nassert     tuple_to_int((2,2,3,3)) == 5\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tuple_to_int((1, 2, 3)) == 12, 'Wrong'\nassert     tuple_to_int((5, 2, 8)) == 14, 'Wrong'\nassert     tuple_to_int((9, 1, 5)) == 18, 'Wrong'\n\n\ndef add_tuple(nums):\n    '''\n    Write a function that given a tuple of positive integers, sums up the integers within the tuple\n    '''\n    pass\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tuple_to_int(tuple_([1,2,3])) == 6\nassert     tuple_to_int(tuple_([1,2,3,5,6])) == 17\nassert     tuple_to_int(tuple_([1,2,3,4,5,6,7])) == 21\nassert     tuple_to_int(tuple_([1,2,3,4,5,6,7,8,9,10])) == 123\nassert     tuple_to_int(tuple_([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])) == 1234567891011121314\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint('Test 3.1')\nprint('----------------------------')\nprint('Expected: -123')\nprint('Actual:', tuple_to_int((1,2,3)))\n\n\nprint('\\n')\nprint('Test 3.2')\nprint('----------------------------')\nprint('Expected: 1')\nprint('Actual:', tuple_to_int((1,)))\n\nprint('\\n')\nprint('Test 3.3')\nprint('----------------------------')\nprint('Expected: 0')\nprint('Actual:', tuple_to_int(()))\n\nprint('\\n')\nprint('Test 3.4')\nprint('----------------------------')\nprint('Expected: 1000')\nprint('Actual:', tuple_to_int((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,86"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     list_to_float([]) == [], 'empty list'\nassert     list_to_float([[1, '2']]) == [1.0, 2.0], 'wrong type of 1st element in list'\nassert     list_to_float([[1, 2.0]]) == [1.0, 2.0], 'wrong type of 2nd element in list'\nassert     list_to_float([[1.0, 2]]) == [1.0, 2.0], 'wrong type of 3rd element in list'\nassert     list_to_float([[1, '2', 3]]) == [1.0, 2.0, 3.0], 'wrong type of 4th element in list'\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n'''\nTask 9:\nWrite a function called get_unique_elements. \nThe function should take as input one argument, a list of lists, and return a list of all unique elements. \n'''\n\ndef get_unique_elements(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     list_to_float([[1, 2, 3, 4], [5, 6, '7', 8]]) == [[1., 2., 3., 4.], [5., 6., '7.', 8.]]\n\ndef split_string_between_word(s):\n    '''\n    Write a function to split a string into a list of words.\n    '''\n    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     list_to_float([[1, 2], [3, 4]]) == [[1.0, 2.0], [3.0, 4.0]]\nassert     list_to_float([['a', 'b'], ['c', 'd']]) == [['a', 'b'], ['c', 'd']]\nassert     list_to_float([[1, 2], ['x', 4]]) == [[1.0, 2.0], ['x', 4.0]]\nassert     list_to_float([['a', 'b'], ['x', 'y']]) == [['a', 'b'], ['x', 'y']]\nassert     list_to_float([[1, 2], ['x', 'y']]) == [[1.0, 2.0], ['x', 'y']]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     list_to_float([[1, 2, 'three'], [4, 5,'six'], ['seven', 'eight', 'nine']]) == [[1.0, 2.0, 'three'], [4.0, 5.0,'six'], ['seven', 'eight', 'nine']]\n\ndef float_to_list(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to float.\n    '''\n    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef has_integer_vowels(test_string):\n    '''\n    Write a function to check if a string has at least one integer in it and if it is a vowel.\n    '''\n    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     list_to_float([[1], [2], [3]]) == [[1], [2], [3]]\nassert     list_to_float([[1.1], ['2.2'], ['3.3']]) == [[1.1], ['2.2'], ['3.3']]\nassert     list_to_float([[1, 2, 3], ['4', '5', '6'], [7, 8, 9]]) == [[1, 2, 3], ['4', '5', '6'], [7, 8, 9]]\nassert     list_to_float([[1, 2, 3], [4, 5, 6]]) == [[1, 2, 3], [4, 5, 6]]\nassert     list_to_float([[1, 2, 3, 4], ['5', '6', '7', '8'], ['9', '10', '11', '12']]) == [[1, 2, 3, 4], ['5', '6', '7', '8'], ['9', '10', '11', '12']]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     list_to_float([[1, 2, 3], ['A', 'B', 'C']]) == [[1, 2, 3], ['A', 'B', 'C']]\nassert     list_to_float([[1, 2, '3'], ['A', 'B', 'C']]) == [[1, 2, 3.0], ['A', 'B', 'C']]\nassert     list_to_float([[1, 2, 3], ['A', 'B', 'C'], [[2, 3], '4', 5]]) == [[1, 2, 3], ['A', 'B', 'C'], [[2, 3], '4', 5]]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     list_to_float([[1, 2], ['hello', 'world']]) == [[1, 2], [1.0, 2.0]]\nassert     list_to_float([[1, 2], ['hello', 'world'], [None, 'python']]) == [[1, 2], [1.0, 2.0], [None, 2.0]]"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert list_to_float([[1, 2], [3, 4], ['a', 'b']]) == [[1, 2], [3, 4], ['a', 'b']]\nassert list_to_float([[2, 4], [6, 8], ['a', 'b']]) == [[2, 4], [6, 8], ['a', 'b']]\n\n\ndef check_test(test_list):\n    '''\n    Write a function to determine if the given list of lists is a valid matrix.\n    '''\n    pass\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef list_to_string(list):\n    '''\n    Write a function to convert a list of strings into a string by joining the strings in the list using the space as the separator.\n    '''\n    pass\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert string_to_list('hello world') == ['hello', 'world']\nassert string_to_list('1 2 3 4') == ['1', '2', '3', '4']\nassert string_to_list('hello') == ['hello']\n\ndef list_to_string(list_of_strings):\n    '''\n    Write a function to convert a list of strings into a single string using space as the delimiter.\n    '''\n    pass\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     string_to_list(\"The quick brown fox jumps over the lazy dog\") == [\"The\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\nassert     string_to_list(\"Hello world!\") == [\"Hello\", \"world\"]\nassert     string_to_list(\"Hello world!\") == [\"Hello\", \"world\"]\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert string_to_list(\"Hello world\") == ['Hello', 'world'], \"Example\"\nassert string_to_list(\"Hello\\nworld\") == ['Hello', 'world'], \"Newline\"\nassert string_to_list(\"Hello\\tworld\") == ['Hello', 'world'], \"Newline2\"\nassert string_to_list(\"Hello world!\") == ['Hello world!'], \"Quote\"\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef check_string_to_list(input_str): \n    '''\n    Write a function to check if the given string is a string or a list.\n    '''\n    pass\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    pass\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     string_to_list(\"test\") == ['t','e','s','t'], \"Wrong!\"\nassert     string_to_list(\"test \\n\\ntest\") == ['t','e','s','t'], \"Wrong!\"\nassert     string_to_list(\"test \\ntest\") == ['t','e','s','t'], \"Wrong!\"\nassert     string_to_list(\"test test\") == ['t','e','s','t','t','e'], \"Wrong!\"\nassert     string_to_list(\"test \\n\\ntest\") == ['t','e','s','t'], \"Wrong!\"\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     string_to_list(\"hi\") == [\"hi\"]\nassert     string_to_list(\"hello\") == [\"hello\"]\nassert     string_to_list(\"hello world\") == [\"hello\", \"world\"]\nassert     string_to_list(\"hello   world\") == [\"hello\", \"world\"]\nassert     string_to_list(\"hello   world    \") == [\"hello\", \"world\"]\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     search([1, 2, 3, 1, 2, 3, 1]) == 1\nassert     search([1, 2, 3, 1, 2, 3, 1, 4, 5, 6, 7, 8, 9]) == 1\nassert     search([1, 2, 3, 1, 2, 3, 1, 4, 5, 6, 7, 8, 9, 9]) == 9\nassert     search([1, 2, 3, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == -1\nassert     search([1, 2, 3, 4, 5, 6, 7, 8, 9]) == -1\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    search([1,2,3,4,5,1]) == 5\n    search([2,2,3,4,5,5,6,7]) == 7\n    search([1,2,3,4,5,6,7,2]) == 2\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     search([1, 1, 2, 3, 4, 4, 4, 4, 4]) == 4, \"Wrong output\"\nassert     search([1, 1, 2, 4, 4, 4, 4, 4, 4]) == 1, \"Wrong output\"\nassert     search([0, 1, 2, 3, 4, 5]) == 0, \"Wrong output\"\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(\"Output for test case 1:\")\nprint(search([1,1,2,2,3,4,4,4,5,5,6,7,8,8]))\n\nprint(\"Output for test case 2:\")\nprint(search([1,1,2,2,3,4,5,5,6,6,7,8,8]))\n\nprint(\"Output for test case 3:\")\nprint(search([1,2,2,3,4,4,5,5,6,6,7,8,8]))"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     search([1,2,3,4,5,5]) == 5\nassert     search([5,5,4,3,2,1]) == 4\nassert     search([-1,-2,3,-4,-5]) == -1\n\ndef insert(arr):\n    '''\n    Write a python function to insert a new element in a sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    search([1,1,2,3,3,4,4,5,5,5,6,7,7,8,8,8]) == 5\n    assert \n    search([3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]) == 3\n    assert \n    search([2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]) == 2\n    assert \n    search([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]) == 1"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_product_tuple([(1,2),(-1,2),(3,2)]) == (1,2)\nassert     max_product_tuple([(1,2),(1,-2),(3,2)]) == (3,2)\nassert     max_product_tuple([(1,2),(2,-3),(3,2)]) == (3,2)\nassert     max_product_tuple([(1,2),(-2,-3),(3,2)]) == (3,2)\nassert     max_product_tuple([(2,3),(-2,3),(3,2)]) == (3,2)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_product_tuple([(2, -4), (1, 2), (-3, 4), (-4, -5), (0, 1)]) == (4, -5)\nassert     max_product_tuple([(0, 1), (0, 1), (0, 1)]) == (0, 1)\nassert     max_product_tuple([(2, 3), (3, 2), (2, 3), (4, 5)]) == (24, -8)\nassert     max_product_tuple([(1, 2), (3, 4), (5, 6)]) == (6, -2)\nassert     max_product_tuple([(2, 3), (3, 4), (4, 5)]) == (24, -8)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert max_product_tuple([(2,3),(1,4),(3,2)]) == (4, 6)\nassert max_product_tuple([(0,0),(1,0),(1,1)]) == (1, 0)\nassert max_product_tuple([(3,1),(2,4),(1,3)]) == (4, 6)\nassert max_product_tuple([(3,1),(2,4),(1,3)]) == (4, 6)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_product_tuple([(2,5), (6,2), (4,4), (2,3)]) == (24,16)\nassert max_product_tuple([(2,5), (6,2), (4,4), (2,3)]) == (24,16)\nassert max_product_tuple([(2,5), (6,2), (4,4), (2,3), (7,1)]) == (24,16)\n\ndef max_product_tuple_2(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_product_tuple([(1,2),(3,4),(5,6),(7,8)]) == (120,120)\nassert     max_product_tuple([(1,2),(3,4),(5,6),(7,8),(2,6)]) == (120,120)\nassert     max_product_tuple([(1,2),(3,4),(5,6),(7,8),(1,3)]) == (120,120)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_product_tuple([(1, 2), (2, 3), (1, -3), (3, -1), (4, 4)]) == 8\nassert     max_product_tuple([(1, 2), (3, 4), (1, -3), (2, -1), (1, -4)]) == 4\nassert     max_product_tuple([(1, 2), (2, 4), (1, -3), (2, -1), (1, -4)]) == -16\nassert     max_product_tuple([(1, 2), (2, 4), (3, -1), (4, -2), (5, -4)]) == -8\nassert     max_product_tuple([(1, 2), (2, 4), (3, -1), (4, -2), (5, -4)]) == -8\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef max_product_list(lst):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n    '''\n    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nmax_product_tuple([(1,2),(-1,-2),(-1,2),(1,-2),(-1,-2)]) == (1,2)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     amicable_numbers_sum(1000) == 1445\nassert     amicable_numbers_sum(12000) == 23340\nassert     amicable_numbers_sum(100) == 99\nassert     amicable_numbers_sum(10000) == 171009\nassert     amicable_numbers_sum(10000) == 296763\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     amicable_numbers_sum(10) == 3\nassert     amicable_numbers_sum(100) == 34\nassert     amicable_numbers_sum(1000) == 1634\nassert     amicable_numbers_sum(10000) == 3022\nassert     amicable_numbers_sum(100000) == 50346\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     amicable_numbers_sum(50) == 15, \"This is not the correct answer\"\nassert     amicable_numbers_sum(100) == 50, \"This is not the correct answer\"\nassert     amicable_numbers_sum(500) == 154, \"This is not the correct answer\"\nassert     amicable_numbers_sum(1000) == 421, \"This is not the correct answer\"\nassert     amicable_numbers_sum(10000) == 15000, \"This is not the correct answer\"\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     amicable_numbers_sum(100) == 2 + 44 + 70 + 110\nassert     amicable_numbers_sum(1000) == 2 + 300 + 400 + 800 + 1008\nassert     amicable_numbers_sum(5000) == 2 + 916 + 466 + 114 + 2540\nassert     amicable_numbers_sum(10000) == 2 + 943 + 466 + 114 + 2540 + 486 + 592 + 725 + 7936\nassert     amicable_numbers_sum(50000) == 2 + 943 + 466 + 114 + 2540 + 486 + 592 + 725 + 7936 + 8322 + 977 + 14540\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef amicable_numbers_sum_check(limit):\n    '''\n    Write a function that takes the sum of the nth amicable numbers and\n    checks if it is divisible by the sum of the 2nth amicable numbers.\n    '''\n    pass\n\nassert \n\n\ndef sum_divisor_list(n):\n    '''\n    Create a list of all numbers from 1 to n that divide evenly into n.\n    '''\n    pass\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\namicable_numbers_sum(100) == sum([x for x in range(1, 100) if sum(amicable_numbers_sum(x)) == x and sum(amicable_numbers_sum(x))!= x])\n\ndef sum_of_divisors_sum(n):\n    '''\n    Write a function to sum the divisors of a given number n.\n    '''\n    pass\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint('Congratulations, have passed all test cases!')\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     amicable_numbers_sum(1) == 0\nassert     amicable_numbers_sum(2) == 1\nassert     amicable_numbers_sum(10) == 28\nassert     amicable_numbers_sum(100) == 5050\nassert     amicable_numbers_sum(1000) == 14142\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     amicable_numbers_sum(1) == 0\nassert     amicable_numbers_sum(100) == 12586\nassert     amicable_numbers_sum(1000) == 233168\nassert     amicable_numbers_sum(10000) == 142913828922\nassert     amicable_numbers_sum(100000) == 1099365484576\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     angle_complex(1+2j, 1-3j) == 0.9950805575526\nassert     angle_complex(1, 2) == cmath.phase(1+2j)\nassert     angle_complex(-1, 2) == -cmath.phase(1+2j)\nassert     angle_complex(0.5, 0.5) == cmath.phase(0.5+0.5j)\n\ndef turn_right(x):\n    '''\n    Write a function to rotate an image by 90 degrees (clockwise).\n    '''\n    pass\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef angle(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    pass\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     angle_complex(complex(4,5), complex(4,5)) == cmath.pi/4\nassert     angle_complex(complex(4,5), complex(4,-5)) == -1/4\nassert     angle_complex(complex(0,4), complex(0,4)) == 0\nassert     angle_complex(complex(0,4), complex(1,4)) == cmath.pi/4\nassert     angle_complex(complex(0,4), complex(-1,4)) == -1/4\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     angle_complex(1+1j,2+3j) == 0.785398163397448+5.20438066515471j\nassert     angle_complex(4+3j,8-1j) == 3.16227766016837+0.785398163397448j\nassert     angle_complex(6-5j,8+3j) == 2.35619449019234+0.785398163397448j\nassert     angle_complex(8+3j,6-5j) == 2.35619449019234+0.785398163397448j\nassert     angle_complex(1+1j,1+1j) == 1\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    angle_complex(1+1j, -1-1j) == 0.75*(1+1j)\n    angle_complex(1j, -1j) == 0.25*(1+1j)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nangle_complex(0,1) == -1\nangle_complex(1,1) == 0\nangle_complex(2,0) == -1\nangle_complex(0,0) == 0\nangle_complex(2,3) == 1\nangle_complex(0,2) == -1\nangle_complex(-4,3) == 1\nangle_complex(1,3) == -1\nangle_complex(-2,2) == 1\nangle_complex(-2,1) == 1.57079633\nangle_complex(-2,-1) == -1.57079633\nangle_complex(-1,3) == 0\nangle_complex(-3,0) == 0\nangle_complex(-3,3) == 0.7853981633974483\nangle_complex(-1,1) == -0.7853981633974483\nangle_complex(0,1) == -0.7853981633974483\nangle_complex(1,1) == 0.7853981633974483\nangle_complex(0,0) == 0\nangle_complex(3,4) == 0.7853981633974483\nangle_complex(0,0) == 0\nangle_complex(2,2) == -0.7853981633974483\nangle_complex(1,2) == -1.57079633\nangle_complex(-2,2) == 1.57079633\nangle_complex(0,2) == -1.57079633\nangle_complex(2,1) == -1.57079633\nangle_complex(-1,0) == 0\nangle_complex(2,0) == 0\nangle_complex(2,4) == -0.7853981633974483\nangle_complex(-1,2) == -1.57079633\nangle_complex(1,0) == 0\nangle_complex(1,0) == -0.7853981633974483\nangle_complex(3,2) == -0.7853981633974483\nangle_complex(-2,1) == -1.57079633\nangle_complex(0,0) == 0\nangle_complex(0,4) == 0\nangle_complex(0,3) == 0.7853981633974483\nangle_complex(0,2) == -0.7853981633974483\nangle_complex(0,1) == -0.7853981633974483\nangle_complex(0,-1) == -0.7853981633974483\nangle_complex(0,-3) == -0.7853981633974483\nangle_complex(0,-2) == -0.7853981633974483\nangle_complex(0,-1) == -0.7853981633974483\nangle_complex(0,-0) == -0.7853981633974483\nangle_complex(0,1) == -0.7853981633974483\nangle_complex(0,0) == -0.7853981633974483\nangle_complex(0,4) == -0.7853981633974483\nangle_complex(0,3) == -0.7853981633974483\nangle_complex(0,2) == -0.7853981633974483\nangle_complex(0,1) == -0.7853981633974483\nangle_complex(0,0) == -0.7853981633974483\nangle_complex(2,4) == 0\nangle_complex(0,1) == -0.7853981633974483\nangle_complex(1,0) == 0\nangle_complex(1,-1) == -0.7853981633974483\nangle_complex(1,-2) == 0\nangle_complex(2,0) == 0\nangle_complex(2,2) == 0\nangle_complex(0,0) == 0\nangle_complex(0,4) == 0\nangle_complex(0,3) == 0.7853981633974483\nangle_complex(0,2) == -0.7853981633974483\nangle_complex(0,1) == -0.7853981633974483\nangle_complex(0,-1) == -0.7853981633974483\nangle_complex(0,-3) == -0.7853981633974483\nangle_complex(0,-2) == -0.7853981633974483\nangle_complex(0,-1) == -0.7853981633974483\nangle_complex(0,-0) == -0.7853981633974483\nangle_complex(0,1) == -0.7853981633974483\nangle_complex(0,0) == -0.7853981633974483\nangle_complex(0,4) == -0.7853981633974483\nangle_complex(0,3) == -0.7853981633974483\nangle_complex(0,2) == -0.7853981633974483\nangle_complex(0,1) == -0.7853981633974483\nangle_complex(0,0) == -0.7853981633974483\nangle_complex(1,2) == -1.57079633\nangle_complex(1,4) == -1.57079633\nangle_complex(1,-4) == 1.57079633\nangle_complex(1,-2) == 1.57079633\nangle_complex(1,-1) == 1.57079633\nangle_complex(1,1) == 0\nangle_complex(1,0) == -0.7853981633974483\nangle_complex(1,3) == -1.57079633\nangle_complex(1,2) == -1.57079633\nangle_complex(2,2) == 0\nangle_complex(2,4) == 0\nangle_complex(2,3) == 0.7853981633974483\nangle_complex(2,2) == -0.7853981633974483\nangle_complex(2,1) == -1.57079633\nangle_complex(2,0) == -1.57079633\nangle_complex(2,-2) == 0\nangle_complex(2,-4) == 0\nangle_complex(2,-3) == 0.7853981633974483\nangle_complex(2,-1) == -1.57079633\nangle_complex(2,-0) == -1.57079633\nangle_complex(2,1) == 0\nangle_complex(2,0) == 0\nangle_complex(2,4) == 0\nangle_complex(2,3) == 0.7853981633974483\nangle_complex(2,2) == -0.7853981633974483\nangle_complex(2,1) == -1.57079633\nangle_complex(2,0) == -1.57079633\nangle_complex(2,-1) == -1.57079633\nangle_complex(2,-2) == 0\nangle_complex(2,-4) == 0\nangle_complex(2,-3) == 0.7853981633974483\nangle_complex(2,-2) == -0.7853981633974483\nangle_complex(2,-1) == -1.57079633\nangle_complex(2,-0) == -1.57079633\nangle_complex(2,1) == 0\nangle_complex(2,0) == 0\nangle_complex(2,4) == 0\nangle_complex(2,3) == 0.7853981633974483\nangle_complex(2,2) == -0.7853981633974483\nangle_complex(2,1) == -1.57079633\nangle_complex(2,0) == -1.57079633\nangle_complex(2,-1) == -1.57079633\nangle_complex(2,-2) == 0\nangle_complex(2,-4) == 0\nangle_complex(2,-3) == 0.7853981633974483\nangle_complex(2,-2) == -0.7853981633974483\nangle_complex(2,-1) == -1.57079633\nangle_complex(2,-0) == -1.57079633\nangle_complex(3,2) == -1.57079633\nangle_complex(3,4) == -1.57079633\nangle_complex(3,3) == 0\nangl"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ndef angle_real(a):\n    '''\n    Write a function to get the angle of a real number.\n    '''\n    pass\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     angle_complex((1+2j),(2+3j)) == cmath.phase(complex(1+2j,2+3j))\nprint(angle_complex((1+2j),(2+3j)))\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_length(\"00110011\") == 8\nassert     find_length(\"11111111\") == 0\nassert     find_length(\"10101010\") == 6\nassert     find_length(\"10101100\") == 4\nassert     find_length(\"10100111\") == 4\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_length('01') == 2\nassert     find_length('0101') == 0\nassert     find_length('1111') == 0\nassert     find_length('10') == 2\nassert     find_length('11') == 2\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_length('00100') == 4\nassert     find_length('100010') == 1\nassert     find_length('001011') == 4\nassert     find_length('001001') == 0\nassert     find_length('010010') == 3\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_length('') == -1\nassert     find_length('0') == 0\nassert     find_length('1') == 1\nassert     find_length('0111') == 1\nassert     find_length('01010101') == 3\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef compute_max_length(string): \n    '''\n    Write a function to compute the length of the longest substring of a binary string\n    whose frequency of 0s and 1s are balanced\n    '''\n    pass\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_length(\"1100000101\") == 1\nassert     find_length(\"101010101\") == 2\nassert     find_length(\"1110101101\") == 4\nassert     find_length(\"1001010101\") == 2\nassert     find_length(\"\") == 0\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert find_length(\"010110100\") == 3\nassert find_length(\"11001011\") == 2\nassert find_length(\"10101101\") == 2\nassert find_length(\"0000111011\") == 4\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert find_length('0101010111') == 4\nassert find_length('110101011') == 5\nassert find_length('01010101101010101') == 7\nassert find_length('1101010111001010111') == 10\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_length(\"10\") == 0, \"Error: find_length(10) is wrong\"\nassert     find_length(\"001001\") == 4, \"Error: find_length(001001) is wrong\"\nassert     find_length(\"1100101010111\") == 5, \"Error: find_length(1100101010111) is wrong\"\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum(1,10) == 5\nassert     sum(10,10) == 10\nassert     sum(10,10) == 20\n\nprint('TEST CASE 1 PASSED!')\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum(24,21) == 7\nassert     sum(100,12) == 22\nassert     sum(7,17) == 19\nassert     sum(7,19) == 21\nassert     sum(10,20) == 20\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum(1,5) == 7\nassert     sum(2,2) == 2\nassert     sum(3,9) == 8\nassert     sum(4,12) == 16\nassert     sum(5,10) == 15\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum(12,12) == 6, \"Wrong output\"\nassert sum(13,12) == 14, \"Wrong output\"\nassert sum(15,12) == 13, \"Wrong output\"\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum(1,2) == 3, \"sum(1,2) has an unexpected value\"\nassert     sum(5,6) == 15, \"sum(5,6) has an unexpected value\"\nassert     sum(15,3) == 18, \"sum(15,3) has an unexpected value\"\nassert     sum(7,3) == 10, \"sum(7,3) has an unexpected value\"\nassert     sum(9,4) == 20, \"sum(9,4) has an unexpected value\"\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum(32,8) == 32\nassert     sum(14,3) == 12\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum(12,20) == 12+20\nassert     sum(14,24) == 14+24\nassert     sum(15,25) == 15+25\nassert     sum(16,26) == 16+26\nassert     sum(17,27) == 17+27\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     multiply_int(1, 2) == 2, \"Error, should be 2\"\nassert     multiply_int(2, 2) == 4, \"Error, should be 4\"\nassert     multiply_int(-1, 2) == -2, \"Error, should be -2\"\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     multiply_int(4, 4) == 16, \\\n        'Multiply 4 times 4 should be 16'\nassert     multiply_int(3, 2) == 6, \\\n        'Multiply 3 times 2 should be 6'\nassert     multiply_int(2, 5) == 10, \\\n        'Multiply 2 times 5 should be 10'\nassert     multiply_int(5, 7) == 35, \\\n        'Multiply 5 times 7 should be 35'\nassert     multiply_int(10, 10) == 100, \\\n        'Multiply 10 times 10 should be 100'\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef multiply_complex(x, y):\n    '''\n    Write a function to multiply two complex numbers.\n    '''\n    pass\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     multiply_int(1, 2) == 2\nassert     multiply_int(1, -2) == -2\nassert     multiply_int(-1, 2) == -2\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     multiply_int(1, 2) == 2\nassert     multiply_int(0, 0) == 0\nassert     multiply_int(-10, -2) == -20\nassert     multiply_int(20, 0) == 0\nassert     multiply_int(-10, -20) == -200\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     multiply_int(2, 5) == 10\nassert     multiply_int(3, 6) == 18\nassert     multiply_int(-2, -5) == -10\nassert     multiply_int(0, 0) == 0\nassert     multiply_int(-4, -5) == -10\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     multiply_int(3, 2) == 6, 'This should be 6'\nassert     multiply_int(-3, 2) == -6, 'This should be 6'\nassert     multiply_int(-3, -2) == 6, 'This should be 6'\nassert     multiply_int(3, -2) == -6, 'This should be 6'\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert long_words(4, [\"python\", \"is\", \"simple\"]) == [\"python\", \"is\"]\nassert long_words(5, [\"python\", \"is\", \"simple\", \"java\"]) == [\"java\"]\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     long_words(3, [\"cool\", \"language\", \"likes\", \"as\", \"much\", \"as\", \"very\"]) == [\"language\", \"likes\", \"much\"]\nassert    long_words(2, [\"awkward\", \"valiant\", \"language\", \"likes\", \"as\", \"much\"]) == [\"awkward\", \"valiant\", \"language\", \"likes\"]\nassert    long_words(4, [\"the\", \"radar\", \"is\", \"very\", \"cool\"]) == []\nassert    long_words(6, [\"the\", \"radar\", \"is\", \"very\", \"cool\"]) == [\"the\", \"radar\", \"is\"]\nassert    long_words(8, [\"the\", \"radar\", \"is\", \"very\", \"cool\"]) == [\"the\", \"radar\", \"is\", \"very\"]\nprint(\"long_words TEST: PASSED\")\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert long_words(4, [\"cormac\", \"ant\", \"tant\", \"atac\", \"nac\", \"tanc\"]) == [\"tac\", \"nac\"]\nassert long_words(2, [\"cormac\", \"ant\", \"tant\", \"atac\", \"nac\", \"tanc\"]) == [\"tac\"]"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     long_words(5, ['Now', 'is', 'the', 'time', 'to', 'come', 'to', 'know', 'how','much', 'I', 'will', 'be', 'able', 'to', 'live', 'by', 'over', 'the', 'rain']) == ['over', 'rain']\nassert     long_words(2, ['hi', 'ho', 'ho', 'to', 'is', 'the', 'time', 'to', 'come', 'to', 'know', 'how','much', 'I', 'will', 'be', 'able', 'to', 'live', 'by', 'over', 'the', 'rain']) == ['over', 'the', 'rain']\nassert     long_words(1, ['hi', 'ho', 'ho', 'to', 'is', 'the', 'time', 'to', 'come', 'to', 'know', 'how','much', 'I', 'will', 'be', 'able', 'to', 'live', 'by', 'over', 'the', 'rain']) == ['the', 'rain']\nassert     long_words(0, ['hi', 'ho', 'ho', 'to', 'is', 'the', 'time', 'to', 'come', 'to', 'know', 'how','much', 'I', 'will', 'be', 'able', 'to', 'live', 'by', 'over', 'the', 'rain']) == []\nassert     long_words(-1, ['hi', 'ho', 'ho', 'to', 'is', 'the', 'time', 'to', 'come', 'to', 'know', 'how','much', 'I', 'will', 'be', 'able', 'to', 'live', 'by', 'over', 'the', 'rain']) == []\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     long_words(10, ['bob', 'bob', 'carl', 'carol']) == ['bob', 'carol']\nassert     long_words(5, ['bob', 'carl', 'carol', 'bob', 'carl']) == ['carl']\nassert     long_words(1, ['bob', 'carol', 'bob', 'carol']) == []\nassert     long_words(1, ['carl']) == ['carl']\nassert     long_words(5, ['bob', 'carol', 'bob', 'carol', 'carl', 'carol']) == ['carol']\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     long_words(3, ['tac', 'cat', 'hat']) == ['tac', 'cat']\nassert     long_words(4, ['tac', 'cat', 'hat']) == ['tac', 'cat', 'hat']\nassert     long_words(1, ['tac', 'cat', 'hat']) == ['tac', 'cat', 'hat']\nassert     long_words(0, ['tac', 'cat', 'hat']) == []\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     long_words(3, ['the', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']) == ['brown', 'fox', 'jumps', 'over', 'the']\nassert     long_words(3, ['the', 'quick', 'brown', 'the', 'lazy', 'dog']) == ['brown', 'dog']\nassert     long_words(2, ['hello', 'world']) == []\n\n\ndef longest_words(words, n):\n    '''\n    Write a function to find the words in a list which are longer than n characters.\n    '''\n    pass\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nlong_words(6, ['dd', 'a', 'b', 'dd', 'ddddddd', 'ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     long_words(4, [\"Hi\",\"Hello\",\"What\",\"Are\",\"You\"]) == [\"Hello\",\"Are\",\"What\"]\nassert     long_words(5, [\"Are\",\"What\",\"Hi\",\"Hello\",\"I\"]) == [\"I\"]\nassert     long_words(7, [\"Are\",\"What\",\"Hi\",\"Hello\",\"I\"]) == []\nassert     long_words(5, [\"Are\",\"What\",\"Hi\",\"Hello\",\"I\",\"are\"]) == [\"I\"]\nassert     long_words(4, [\"Are\",\"What\",\"Hi\",\"Hello\",\"I\"]) == [\"What\"]\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     magic_square_test([[4, 9, 2],\n                            [3, 5, 7],\n                            [8, 1, 6]]) == True, 'Magic square'\nassert     magic_square_test([[1, 2, 3],\n                            [2, 3, 1],\n                            [3, 1, 2]]) == False, 'Not magic square'\nassert     magic_square_test([[1, 2, 3, 4],\n                            [2, 3, 1, 2],\n                            [3, 4, 1, 2],\n                            [4, 1, 2, 3]]) == False, 'Not magic square'\nassert     magic_square_test([[4, 9, 2, 5],\n                            [3, 5, 7, 1],\n                            [8, 1, 6, 4],\n                            [1, 2, 3, 5]]) == False, 'Not magic square'\nassert     magic_square_test([[4, 9, 2, 5, 6],\n                            [3, 5, 7, 1, 2],\n                            [8, 1, 6, 4, 3],\n                            [1, 2, 3, 5, 4],\n                            [6, 7, 8, 9, 1]]) == False, 'Not magic square'\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     magic_square_test([\n        [8, 2, 6, 5, 7, 4, 9, 3, 1],\n        [6, 1, 2, 8, 9, 5, 3, 4, 7],\n        [4, 9, 3, 6, 1, 7, 5, 8, 2],\n        [7, 5, 4, 2, 8, 6, 1, 3, 9],\n        [1, 3, 7, 5, 9, 2, 4, 8, 6],\n        [9, 8, 2, 1, 3, 6, 7, 4, 5],\n        [2, 4, 6, 8, 5, 1, 3, 9, 7],\n        [3, 7, 5, 9, 2, 4, 8, 6, 1],\n        [4, 2, 1, 6, 9, 3, 7, 5, 8]\n    ]) == True, f'expected True, got {magic_square_test([\n        [8, 2, 6, 5, 7, 4, 9, 3, 1],\n        [6, 1, 2, 8, 9, 5, 3, 4, 7],\n        [4, 9, 3, 6, 1, 7, 5, 8, 2],\n        [7, 5, 4, 2, 8, 6, 1, 3, 9],\n        [1, 3, 7, 5, 9, 2, 4, 8, 6],\n        [9, 8, 2, 1, 3, 6, 7, 4, 5],\n        [2, 4, 6, 8, 5, 1, 3, 9, 7],\n        [3, 7, 5, 9, 2, 4, 8, 6, 1],\n        [4, 2, 1, 6, 9, 3, 7, 5, 8]\n    ])}'\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     magic_square_test([[4,9,2],[3,5,7],[8,1,6]]) == True, \"Check your magic_square_test function\"\nassert     magic_square_test([[4,9,2],[3,5,7],[8,1,6],[1,5,9,3]]) == False, \"Check your magic_square_test function\"\nassert     magic_square_test([[4,9,2],[3,5,7],[8,1,6],[1,5,9,3],[7,8,9,4,5]]) == False, \"Check your magic_square_test function\"\nassert     magic_square_test([[4,9,2],[3,5,7],[8,1,6],[1,5,9,3]]) == False, \"Check your magic_square_test function\"\nassert     magic_square_test([[4,9,2],[3,5,7],[8,1,6]]) == False, \"Check your magic_square_test function\"\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert magic_square_test([[4, 9, 2],\n                          [3, 5, 7],\n                          [8, 1, 6]]) == True, \\\n    \"Wrong answer for square: [[4, 9, 2],\\n\" + \\\n    \"         [3, 5, 7],\\n\" + \\\n    \"         [8, 1, 6]]\"\nassert magic_square_test([[4, 9, 2],\n                          [3, 5, 7],\n                          [8, 1, 6]]) == True, \\\n    \"Wrong answer for square: [[4, 9, 2],\\n\" + \\\n    \"         [3, 5, 7],\\n\" + \\\n    \"         [8, 1, 6]]\"\nassert magic_square_test([[4, 9, 2],\n                          [3, 5, 7],\n                          [8, 1, 6]]) == False, \\\n    \"Wrong answer for square: [[4, 9, 2],\\n\" + \\\n    \"         [3, 5, 7],\\n\" + \\\n    \"         [8, 1, 6]]\"\nassert magic_square_test([[1, 2, 3],\n                          [4, 5, 6],\n                          [7, 8, 9]]) == False, \\\n    \"Wrong answer for square: [[1, 2, 3],\\n\" + \\\n    \"         [4, 5, 6],\\n\" + \\\n    \"         [7, 8, 9]]\"\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     magic_square_test([[4, 3, 8, 9],\n                            [9, 5, 1, 6],\n                            [2, 7, 6, 5],\n                            [6, 1, 2, 9]]) == False, 'First one'\n\nassert     magic_square_test([[3, 4, 1, 3],\n                            [6, 7, 4, 2],\n                            [1, 3, 6, 4],\n                            [9, 4, 8, 5]]) == True, 'Second one'\n\nassert     magic_square_test([[2, 7, 4, 9],\n                            [6, 5, 1, 3],\n                            [1, 6, 9, 5],\n                            [8, 3, 5, 4]]) == True, 'Third one'\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     magic_square_test([[1, 3, 4], \n                             [9, 2, 6], \n                             [8, 7, 5]]) == True\nassert     magic_square_test([[8, 3, 4], \n                             [1, 5, 9], \n                             [2, 6, 7]]) == False\nassert     magic_square_test([[1, 2, 3], \n                             [2, 3, 4], \n                             [3, 4, 5]]) == False\nassert     magic_square_test([[1, 2, 3], \n                             [2, 3, 4], \n                             [4, 5, 6]]) == False\nassert     magic_square_test([[1, 2, 3], \n                             [3, 2, 1], \n                             [4, 5, 6]]) == False\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\n'''\nGiven a list of positive integers and a positive integer,\nfind the maximum element of the given list.\n\nFor example,\n\nInput : [1, 2, 3, 2, 1]  \n    The maximum element is 3\n\nInput : [1, 2, 3, 2, 1]  \n    The maximum element is 2\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_occurrences([1,2,2,3,3,3]) == 3\nassert     max_occurrences([1,1,2,3,3,3]) == 3\nassert     max_occurrences([1,2,2,3,3,3,3,3,3,3]) == 3\nassert     max_occurrences([1,1,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_occurrences([1,2,3,4,1,2,3]) == 4, \"error 1\"\nassert     max_occurrences([1,2,2,3,3,4,4,4,4,4,4]) == 4, \"error 2\"\nassert     max_occurrences([1,2,3,4,5,6,7,8]) == 1, \"error 3\"\nassert     max_occurrences([1,1,1,1,1,1]) == 1, \"error 4\"\nassert     max_occurrences([1,2,3,4,5]) == 4, \"error 5\"\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for n in nums:\n        d[n] += 1\n    max_v = 0\n    max_item = None\n    for k in d:\n        if d[k] > max_v:\n            max_v = d[k]\n            max_item = k\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_occurrences([1,1,1,2,2,3]) == 2\nassert     max_occurrences([1,2,2,2,3,3,4,4,4,4]) == 4\nassert     max_occurrences([1,1,2,2,3,3]) == 3\nassert     max_occurrences([1,1,2,2,3,3,3,3]) == 3\nassert     max_occurrences([1,1,2,2,3,4,4,4,5,5,5,5,5,5]) == 5\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef occur_iterative(nums):\n    '''\n    Write a function that takes a list of numbers as its argument and return\n    the element with maximum frequency in the list.\n    '''\n    # Your code here\n    occur = {}\n    max_occur = 0\n\n    for num in nums:\n        if num in occur:\n            occur[num] += 1\n        else:\n            occur[num] = 1\n\n        if occur[num] > max_occur:\n            max_occur = occur[num]\n            max_element = num\n\n    return max_element\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert max_occurrences([3,4,4,5,1,2,4]) == 4\nassert max_occurrences([4,4,4,5,1,2,4]) == 4\nassert max_occurrences([5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert \nassert \n\ndef max_occurrences_max_heap(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_occurrences([1,2,1,2,3,3,4]) == 2\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_occurrences([2,2,3,4,4]) == 3, \"Should be 3\"\nassert     max_occurrences([1,3,4,4,4]) == 4, \"Should be 4\"\nassert     max_occurrences([1,2,2,3,4,4]) == 4, \"Should be 4\"\nassert     max_occurrences([2,4,2,3,3,4,2,2,3,2]) == 2, \"Should be 2\"\nassert     max_occurrences([1,1,1,1,1,1,1,1,1]) == 1, \"Should be 1\"\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     reverse_vowels(\"hello\") == \"holle\", \"Should be: holle\"\nassert     reverse_vowels(\"abcd\") == \"dcba\", \"Should be: dcba\"\nassert     reverse_vowels(\"qwerty\") == \"tyqwer\", \"Should be: tyqwer\"\nassert     reverse_vowels(\"abcd\") == \"dcba\", \"Should be: dcba\"\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     reverse_vowels(\"hello\") == \"holle\"\nassert     reverse_vowels(\"havent\") == \"vnt\"\nassert     reverse_vowels(\"why\") == \"why\"\nassert     reverse_vowels(\"tamim\") == \"imtam\"\nassert     reverse_vowels(\"thorpy\") == \"orpyh\"\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    return str1[::-1].translate(str.maketrans('aeiou','uaoieu',str1.translate(str.maketrans('aeiou','uaoieu','aeiou'))))\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     reverse_vowels('hello') == 'holle'\nassert     reverse_vowels('a') == 'a'\nassert     reverse_vowels('b') == 'b'\nassert     reverse_vowels('ab') == 'ba'\nassert     reverse_vowels('gab') == 'bga'\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     reverse_vowels(\"hannah\") == \"hhannahn\", \"Should return 'hannahn' when given a string 'hannah'\"\nassert     reverse_vowels(\"hannah\") == \"nnhah\", \"Should return 'hannah' when given a string 'hannah'\"\nassert     reverse_vowels(\"hannah\") == \"nhahnh\", \"Should return 'hannah' when given a string 'hannah'\"\nassert     reverse_vowels(\"hannah\") == \"nhhahn\", \"Should return 'hannah' when given a string 'hannah'\"\nassert     reverse_vowels(\"hannah\") == \"nhhah\", \"Should return 'hannah' when given a string 'hannah'\"\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n'''\n5. Write a function called is_palindrome that will take a string as input and return True if it is a palindrome, False otherwise.\n'''\n\ndef is_palindrome(str1):\n    '''\n    Write a function that will take a string as input and return True if it is a palindrome, False otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     reverse_vowels('hello') == 'holle'\nassert     reverse_vowels('leetcode') == 'leotcede'\nassert     reverse_vowels('Able was I, ere I saw Elba') == 'Able was Ere I saw Elba'\nassert     reverse_vowels('Move the Castle with you') == 'Mov Ght tnw er Hself'\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     reverse_vowels(\"hello\") == \"holle\", \"not working\"\nassert     reverse_vowels(\"abzcd\") == \"dcba\", \"not working\"\nassert     reverse_vowels(\"\") == \"\", \"not working\"\nassert     reverse_vowels(\"m\") == \"n\", \"not working\"\nassert     reverse_vowels(\"qwe\") == \"weq\", \"not working\"\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     reverse_vowels(\"Happy Anniversary!\") == \"!ay Aht aNc Hp iz Ayn!\"\nassert     reverse_vowels(\"Why is the sky blue? \") == \"why is sky blue?y bE cOuLl sIeL! \"\nassert     reverse_vowels(\"Why is the sky blue? \") == \"why is sky blue?y bE cOuLl sIeL! \"\nassert     reverse_vowels(\"Why is the sky blue? \") == \"why is sky blue?y bE cOuLl sIeL! \"\nassert     reverse_vowels(\"Why is the sky blue? \") == \"why is sky blue?y bE cOuLl sIeL! \"\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tup_string((1,2,3)) == '123'\nassert     tup_string((1,2,3,4,5)) == '1234'\nassert     tup_string((1,2,3,4,5,6)) == '12345'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tup_string((1,2,3)) == \"123\", \"This should be '123'!\"\nassert     tup_string((1,2,3,4,5,6)) == \"1234567\", \"This should be '1234567'\"\nassert     tup_string((1,2,3,4,5,6,7)) == \"123456789\", \"This should be '123456789'\"\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tup_string((1,2,3,4,5)) == '1 2 3 4 5'\nassert     tup_string((1,2,3)) == '1 2 3'"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tup_string((1,2,3)) == '1, 2, 3', 'FAIL'\nassert tup_string((1,2,3)) == '1, 2, 3'\nassert     tup_string((1,2,3,4)) == '1, 2, 3, 4', 'FAIL'\nassert tup_string((1,2,3,4)) == '1, 2, 3, 4'\nassert     tup_string((1,2,3,4,5)) == '1, 2, 3, 4, 5', 'FAIL'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tup_string((1,2,3)) == '123', \"Test failed\"\nassert     tup_string((1,2,3,4,5)) == '12345', \"Test failed\"\n\ndef str_bool(string1):\n    '''\n    Write a function to get boolean value for the input string\n    '''\n    pass\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert (tup_string((\"A\", \"B\", \"C\")) == \"ABC\"), \"Incorrect output\"\n\n\ndef tup_string_2(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    pass\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tup_string((1,2,3,4)) == '1,2,3,4'\nassert     tup_string((2,4,6,8)) == '2,4,6,8'\nassert     tup_string((1,)) == '1'\nassert     tup_string((1,2,3,4,5,6)) == '1,2,3,4,5,6'\nprint('Well Done! All tests are passed.'"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tup_string((1,2,3,4)) == '1,2,3,4'\nassert     tup_string((2,3,4,5)) == '2,3,4,5'\nassert     tup_string(('Hello','World','!')) == 'Hello, World!,!'\nassert     tup_string(('w','e','r','l','d')) == 'w,e,r,l,d'\nprint(\"All tests passed!\")\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tup_string((1,2,3)) == '1,2,3', 'tup_string'\nassert     tup_string((1.2,2.2,3.3)) == '1.2,2.2,3.3', 'tup_string'\nassert     tup_string((True,True,False)) == 'True,True,False', 'tup_string'\nassert     tup_string((True,False,True)) == 'True,False,True', 'tup_string'\nassert     tup_string((True,False,False)) == 'True,False,False', 'tup_string'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_negativenum([-3, -4, -5]) == 0\nassert     sum_negativenum([-1, -2, -3, -4]) == 0\nassert     sum_negativenum([-1, -2, -3, 4]) == -1\nassert     sum_negativenum([-1, -2, -3, 4, -5]) == -3\n\ndef my_solution(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            count = count + nums[i]\n    return count\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_negativenum([]) == 0, \"empty list\"\nassert     sum_negativenum([-1,-2]) == -3, \"single neg numbers\"\nassert     sum_negativenum([-1,-2,-3]) == -6, \"single neg numbers\"\nassert     sum_negativenum([-1,-2,-3,-4]) == -10, \"multiple neg numbers\"\nassert     sum_negativenum([-1,2,-3,-4]) == -7, \"single pos and neg numbers\"\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == '__main__':\n    # test your function \n    print('sum_negativenum([1, -2, 3, 4, -5]) =', sum_negativenum([1, -2, 3, 4, -5]))\n    print('sum_negativenum([1, -2, 3, -4, -5]) =', sum_negativenum([1, -2, 3, -4, -5]))\n\n    # check the correctness of sum_negativenum\n\n    # test case 2\n    print('sum_negativenum([1, -1, 1, 1]) =', sum_negativenum([1, -1, 1, 1]))\n    print('sum_negativenum([-1, 1, -1, -1]) =', sum_negativenum([-1, 1, -1, -1]))\n\n    # test case 3\n    print('sum_negativenum([1, -1]) =', sum_negativenum([1, -1]))\n    print('sum_negativenum([-1, 1]) =', sum_negativenum([-1, 1]))"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    sum_negativenum([1, 2, -3, 4]) == 2\n    sum_negativenum([-1, -2, -3, -4]) == -1\n    sum_negativenum([-1, 1, -2, 3, -4, 5]) == -5\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nsum_negativenum([0,-1,1,2,-3])"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_negativenum([-1, -2, -3, -4]) == -1\nassert     sum_negativenum([-1, 2, -3, 4, -5]) == 2\nassert     sum_negativenum([-10, -9, -8, -7, -6]) == -15\nassert     sum_negativenum([1, -2, 3, -4, -5]) == 2\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_negativenum([3, 4, 5, 2, -6, 1, 5]) == 5, 'Should be 5'\nassert     sum_negativenum([-1, -2, 3, -4, -5, -6, -7, 8, 9, 10]) == -35, 'Should be -35'\nassert     sum_negativenum([1, 2, -3, 4, 5, -6, -7, 8, 9, 10]) == 31, 'Should be 31'\nassert     sum_negativenum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == -70, 'Should be -70'\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_negativenum([1, -2, 3]) == -1\nassert     sum_negativenum([5, -4, 3, 2, -1, 6]) == 2\nassert     sum_negativenum([-1, -2, -3]) == -6\nassert     sum_negativenum([-2, -3, -4, -5]) == -10\n\ndef is_positive_number(number):\n    '''\n    Write a function that returns True if the input number is positive.\n    '''\n    pass\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     hexagonal_num(0) == 1, 'Function should return the 1st hexagonal number.'\nassert     hexagonal_num(1) == 3, 'Function should return the 2nd hexagonal number.'\nassert     hexagonal_num(2) == 7, 'Function should return the 3rd hexagonal number.'\nassert     hexagonal_num(3) == 15, 'Function should return the 4th hexagonal number.'\nassert     hexagonal_num(4) == 33, 'Function should return the 5th hexagonal number.'\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     hexagonal_num(4) == 9\nassert hexagonal_num(5) == 26\nassert hexagonal_num(9) == 145\n\ndef hexagonal_num_gcd(n,m):\n    '''\n    Write a function to find the gcd of two hexagonal numbers.\n    '''\n    pass\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     hexagonal_num(1) == 1\nassert     hexagonal_num(2) == 3\nassert     hexagonal_num(3) == 6\nassert     hexagonal_num(4) == 10\nassert     hexagonal_num(5) == 15\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nhexagonal_num(1) == 1\nassert \nhexagonal_num(2) == 3\nassert \nhexagonal_num(3) == 6\nassert \nhexagonal_num(4) == 10\nassert \nhexagonal_num(5) == 14\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     hexagonal_num(5) == 2\nassert     hexagonal_num(10) == 36\nassert     hexagonal_num(30) == 446\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     hexagonal_num(1) == 1\nassert     hexagonal_num(2) == 3\nassert     hexagonal_num(3) == 6\nassert     hexagonal_num(4) == 10\nassert     hexagonal_num(5) == 15\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint(hexagonal_num(4))\nprint(hexagonal_num(6))\n\ndef first_decimal(x, y):\n    '''\n    Given two numbers x and y, which can be numbers (int or float)\n    Returns the value of x divided by y.\n    The result has to be a float.\n    Raise a ValueError if the division can\u2019t be performed.\n    '''\n    pass\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     zero_count([0,1,0,1,1,1,0,1,1]) == 0.375, \\\n        \"Wrong answer for array = [0,1,0,1,1,1,0,1,1], expected = 0.375\"\nassert     zero_count([1,2,0,1,1,1,0,1,1]) == 0.666666666667, \\\n        \"Wrong answer for array = [1,2,0,1,1,1,0,1,1], expected = 0.666666666667\"\nassert     zero_count([1,2,0,0,1,1,0,1,1]) == 0.5, \\\n        \"Wrong answer for array = [1,2,0,0,1,1,0,1,1], expected = 0.5\"\nassert     zero_count([0,1,0,1,1,1,0,1,1]) == 0, \\\n        \"Wrong answer for array = [0,1,0,1,1,1,0,1,1], expected = 0\"\nassert     zero_count([1,2,0,1,1,1,0,1,1,0,1,1,1]) == 1, \\\n        \"Wrong answer for array = [1,2,0,1,1,1,0,1,1,0,1,1,1], expected = 1\"\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     zero_count([]) == 0, '0 counts as a non-zero'\nassert     zero_count([0]) == 1, '0 counts as a non-zero'\nassert     zero_count([0,1]) == 1, '0 counts as a non-zero'\nassert     zero_count([0,1,0,1,0,1,0,1]) == 0.5, '0 counts as a non-zero'\nassert     zero_count([1,1,1,1,1,1,1,1]) == 0.125, '0 counts as a non-zero'\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert zero_count([0,1,0,1,0,1,1]) == 2\nassert zero_count([0,0,0,1,1,1,1,1]) == 2\nassert zero_count([0,1,0,1,0,1,0]) == 3\nassert zero_count([0,0,0,1,1,0,1,0,1]) == 4\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     zero_count([0,1,0,0,0]) == 2\nassert     zero_count([0,1,0,0]) == 4\nassert     zero_count([0,1,0,0,0,1]) == 5\nassert     zero_count([]) == 0\nassert     zero_count([0,1,2,3,0]) == 0\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(zero_count([0,1,0,1])) == 1\nprint(zero_count([0,0,0,1])) == 0\nprint(zero_count([1,0,0,0,1])) == 3\nprint(zero_count([0,0,0,0,0,1])) == 5\nprint(zero_count([0,0,0,0,0,0,0,1])) == 8\n\ndef longest_common_substring(s1, s2):\n    '''\n    Write a function to find the longest common sub-string of two strings.\n    '''\n    pass\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef num_of_inversions(arr, l, r):\n    '''\n    Write a function to count the number of inversions in an array.\n    In this, we don't count any inversions if the input array is not sorted.\n    '''\n    pass\n\ndef num_of_inversions_zero_count(nums):\n    '''\n    Write a function to count the number of inversions in an array.\n    In this, we don't count any inversions if the input array is not sorted.\n    '''\n    pass\n\ndef find_lowest_cost(nums):\n    '''\n    Write a function to find the index of the smallest value in a list of values.\n    Assume that the values are in order of lowest to highest, and they have the same cost.\n    '''\n    pass\n\ndef find_lowest_cost_zero_count(nums):\n    '''\n    Write a function to find the index of the smallest value in a list of values.\n    Assume that the values are in order of lowest to highest, and they have the same cost.\n    '''\n    pass\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef zero_count_test():\n    '''\n    Test Case:\n    [1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     zero_count([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 0.0\nassert     zero_count([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 0.25\nassert     zero_count([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1]) == 0.5\nassert     zero_count([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1]) == 0.5\nassert     zero_count([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1]) == 0.5\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    is_Sum_Of_Powers_Of_Two(15) == True, \"Should be True\"\n    is_Sum_Of_Powers_Of_Two(16) == False, \"Should be False\"\n    is_Sum_Of_Powers_Of_Two(25) == False, \"Should be False\"\n    is_Sum_Of_Powers_Of_Two(100) == True, \"Should be True\"\n    is_Sum_Of_Powers_Of_Two(-13) == False, \"Should be False\"\n    is_Sum_Of_Powers_Of_Two(0) == True, \"Should be True\"\n    is_Sum_Of_Powers_Of_Two(1) == False, \"Should be False\"\n    is_Sum_Of_Powers_Of_Two(-10) == True, \"Should be True\"\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(2) == True, \"1 + 2 = 3\"\nassert     is_Sum_Of_Powers_Of_Two(9) == True, \"1 + 2 + 4 + 8 + 16 = 32\"\nassert     is_Sum_Of_Powers_Of_Two(3) == False, \"1 + 2 = 3\"\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(4) == False, \"Incorrect for 4\"\nassert     is_Sum_Of_Powers_Of_Two(7) == True, \"Incorrect for 7\"\nassert     is_Sum_Of_Powers_Of_Two(16) == True, \"Incorrect for 16\"\nassert     is_Sum_Of_Powers_Of_Two(25) == True, \"Incorrect for 25\"\nassert     is_Sum_Of_Powers_Of_Two(48) == False, \"Incorrect for 48\"\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(5) == False, \"5 should be not Sum of powers of 2\"\nassert     is_Sum_Of_Powers_Of_Two(9) == False, \"9 should be not Sum of powers of 2\"\nassert     is_Sum_Of_Powers_Of_Two(21) == True, \"21 should be Sum of powers of 2\"\nassert     is_Sum_Of_Powers_Of_Two(7) == True, \"7 should be Sum of powers of 2\"\nassert     is_Sum_Of_Powers_Of_Two(15) == True, \"15 should be Sum of powers of 2\"\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(15) == True\nassert     is_Sum_Of_Powers_Of_Two(1) == True\nassert     is_Sum_Of_Powers_Of_Two(32) == False\nassert     is_Sum_Of_Powers_Of_Two(2**31) == True\nassert     is_Sum_Of_Powers_Of_Two(2**32) == False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(is_Sum_Of_Powers_Of_Two(23))\nprint(is_Sum_Of_Powers_Of_Two(45))\nprint(is_Sum_Of_Powers_Of_Two(21)"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(7) == True, '7 is not a sum of powers of 2'\nassert     is_Sum_Of_Powers_Of_Two(5) == False, '5 is not a sum of powers of 2'\nassert     is_Sum_Of_Powers_Of_Two(12) == True, '12 is not a sum of powers of 2'\n\nprint('Testing is_Sum_Of_Powers_Of_Two is correct')\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_Sum_Of_Powers_Of_Two(4) == False, \"Should return False\"\nassert     is_Sum_Of_Powers_Of_Two(9) == True, \"Should return True\"\nassert     is_Sum_Of_Powers_Of_Two(14) == True, \"Should return True\"\nassert     is_Sum_Of_Powers_Of_Two(25) == True, \"Should return True\"\nassert     is_Sum_Of_Powers_Of_Two(50) == False, \"Should return False\"\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert not is_Sum_Of_Powers_Of_Two(1)\nassert is_Sum_Of_Powers_Of_Two(3)\nassert not is_Sum_Of_Powers_Of_Two(4)\nassert not is_Sum_Of_Powers_Of_Two(8)\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     circle_circumference(1) == 3.141592653589793, \\\n        \"Incorrect calculation of circle circumference\"\n\nprint(\"--> Test passed\\n\")\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     circle_circumference(1) == 3.141592653589793\nassert     circle_circumference(2) == 12.566370614359172\nassert     circle_circumference(3) == 25.42653589793115\nassert     circle_circumference(4) == 33.141592653589793\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     circle_circumference(r=0) == 0\nassert     circle_circumference(r=1) == pi * 2\nassert     circle_circumference(r=2) == pi * 4\nassert     circle_circumference(r=3) == pi * 8\nassert     circle_circumference(r=4) == pi * 12\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(\"'check the correctness of circle_circumference'\")\ncircle_circumference(1)\ncircle_circumference(1.4)\ncircle_circumference(1.5)\nprint(circle_circumference.__doc__)\n\nprint(\"\\n\")\nprint(\"\\n\")\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     circle_circumference(1) == 2*math.pi\nassert     circle_circumference(2) == 2*math.pi\nassert     circle_circumference(1.5) == 2*math.pi*1.5\nassert     circle_circumference(2.0) == 2*math.pi*2.0\nassert     circle_circumference(2.5) == 2*math.pi*2.5\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     circle_circumference(1) == pi * 2, \"your implementation is off\"\n\ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    pass\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     circle_circumference(5) == 50.27390825325407, 'circle_circumference failed'\nassert     circle_circumference(6) == 108.9170212756197, 'circle_circumference failed'\n\nprint('Done!'"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     circle_circumference(2) ==  3.1415926535897932384626433832795028841971693993751\nassert     circle_circumference(0.9) == 2.71238898038469\nassert     circle_circumference(1.0) ==  3.1415926535897932384626433832795028841971693993751\nassert     circle_circumference(1.1) == 3.1415926535897932384626433832795028841971693993751\nassert     circle_circumference(1.5) ==  3.1415926535897932384626433832795028841971693993751\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     circle_circumference(10) == 28.274333882308138\nassert     circle_circumference(5.4) == 29.139900679640726\nassert     circle_circumference(1) == 2.71238898038469\nassert     circle_circumference(0) == 0.0\nassert     circle_circumference(9.99) == 112.05229116510388\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_singly([[[[]]]]) == {0}\nassert     extract_singly([[[[]]]]) == {0}\nassert     extract_singly([[], [[], []], [[[], [[]]]], []]) == {0}\nassert     extract_singly([[], [[]], [[], [[]]], []]) == {0}\nassert     extract_singly([[[[]]]]) == {0}\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_singly([[], [[], [[]]], [[]]]) == {0, 1, 2}\nassert extract_singly([[[]]]) == {0}\nassert extract_singly([[]]) == {0}\nassert extract_singly([[1]]) == {1}\nassert extract_singly([[1, 2, 3]]) == {1, 2, 3}\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_singly([[1,2,3],[4,5,6]]) == [1,2,3,4,5,6]\nassert     extract_singly([1,2,3,4,5,6]) == [1,2,3,4,5,6]\nassert     extract_singly([]) == []\nassert     extract_singly([[]]) == []\nassert     extract_singly([[]]) == []\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_singly([[[1],[2],[3],[4]],[[5],[6],[7]]]) == [1,2,3,4,5,6,7], 'First'\nassert     extract_singly([[[1],[2]],[[3],[4]]]) == [1,2,3,4], 'Second'\nassert     extract_singly([[[1]],[[2]]]) == [1,2], 'Third'\nassert     extract_singly([[1]]) == [1], 'Fourth'\nassert     extract_singly([]) == [], 'Fifth'\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_singly( [[3], [3, 4, 5], [[3, 3], 3, 4]] ) == {3, 3, 3, 4, 5}\nassert     extract_singly( [[1, 2], [3, 4], [[1, 2], 1, 2]] ) == {1, 2, 1, 2, 3, 4}\n\nprint('PASSED: extract_singly')\n\ndef sort_list(test_list):\n    '''\n    Write a function to sort the list of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_singly([[1, 2, 3], [4, 5], [6]]) == {1, 2, 3, 4, 5, 6}\nassert     extract_singly([[1, 2, 3], [], [4, 5, 6]]) == {1, 2, 3, 4, 5, 6}\nassert     extract_singly([[1, 2, 3], [4, 5], [6], []]) == {1, 2, 3, 4, 5, 6}\nassert     extract_singly([]) == set()\nassert     extract_singly([[]]) == set()\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_singly([[1,2],3,[4,5],6]) == [1,2,3,4,5,6]\nassert     extract_singly([1,2,[3,4],5,6]) == [1,2,3,4,5,6]\nassert     extract_singly([1,2,[3,4],5]) == [1,2,3,4,5]\nassert     extract_singly([1,2,3,4,5]) == [1,2,3,4,5]\nassert     extract_singly([]) == []\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod("
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_singly([[1,2],[3,4],[5,6]]) == {1,2,3,4,5,6}\nassert     extract_singly([[1,2,3],[4,5,6]]) == {1,2,3,4,5,6}\nassert     extract_singly([[1,2,3]]) == {1,2,3}\nassert     extract_singly([[1,2,3,4],[5,6,7,8]]) == {1,2,3,4,5,6,7,8}\nassert     extract_singly([[1,2,3,4,5]]) == {1,2,3,4,5}\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     pancake_sort([]) == []\nassert     pancake_sort([2]) == [2]\nassert     pancake_sort([1,2]) == [1,2]\nassert     pancake_sort([2,1]) == [1,2]\nassert     pancake_sort([1,1,2]) == [1,1,2]\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     pancake_sort([2,1,4,3,5]) == [4,5,3,2,1]\nassert pancake_sort([5,4,3,2,1]) == [1,2,3,4,5]\nassert pancake_sort([1,2,3]) == [1,2,3]\nassert pancake_sort([]) == []\n\n'''\nSort an array of n integers using the pancake sort algorithm.\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    pass"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nnums = [-1,2,3,4,-5,1]\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_samepair([0,1,2], [0,1,2], [0,1,2]) == 3, \"Error, the result should be 3.\"\nassert     count_samepair([1,1,1], [1,1,1], [1,1,1]) == 1, \"Error, the result should be 1.\"\nassert     count_samepair([2,1,1], [2,1,1], [2,1,1]) == 2, \"Error, the result should be 2.\"\nassert     count_samepair([0,1,2], [0,1,2], [3,4,5]) == 0, \"Error, the result should be 0.\"\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_samepair(['cat','cat','dog','cat','cat','dog','cat','dog','cat','dog'],\n                        ['cat','dog','cat','dog','cat','dog','cat','dog','cat','dog'],\n                        ['cat','dog','cat','dog','cat','dog','cat','dog','cat','dog']) == 7\n\nassert     count_samepair(['cat','cat','cat','dog','dog','cat','dog','cat','dog'],\n                        ['cat','dog','cat','dog','cat','dog','cat','dog','cat','dog'],\n                        ['cat','dog','cat','dog','cat','dog','cat','dog','cat','dog']) == 4\n\nassert count_samepair(['cat','dog','cat','dog','cat','dog','cat','dog','cat','dog'],\n                        ['cat','dog','cat','dog','cat','dog','cat','dog','cat','dog'],\n                        ['cat','dog','cat','dog','cat','dog','cat','dog','cat','dog']) == 0\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef count_samepair2(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    # correct version\n    # print(\"counting the same elements in the three given lists:\")\n    # print(list1)\n    # print(list2)\n    # print(list3)\n    count_samepair_res = 0\n    for elem1 in list1:\n        for elem2 in list2:\n            for elem3 in list3:\n                if elem1 == elem2 and elem1 == elem3:\n                    count_samepair_res += 1\n                    print(count_samepair_res)\n                    print(\"counting the same elements in the three given lists:\")\n                    print(list1)\n                    print(list2)\n                    print(list3)\n                    print(\"\\n\")\n    return count_samepair_res\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_samepair([1,2,3,3,5,6,7],    [2,4,5,6,7,7,7],     [3,3,3,3,3,3,3]) == 5\nassert     count_samepair([1,2,3,3,5,6,7],    [2,4,5,6,7,7,7],     [2,4,5,6,7,7,7]) == 5\nassert     count_samepair([1,2,3,3,5,6,7],    [2,4,5,6,7,7,7],     [1,2,3,3,5,6,7]) == 0\nassert     count_samepair([1,2,3,3,5,6,7],    [2,4,5,6,7,7,7],     [3,3,3,3,3,3,3]) == 0\nassert     count_samepair([1,2,3,3,5,6,7],    [2,4,5,6,7,7,7],     [7,7,7,7,7,7,7]) == 0\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_samepair([1,1,2],[1,1,2],[1,1,2]) == 3\nassert     count_samepair([1,2,3],[1,2,3],[1,2,3]) == 0\nassert     count_samepair([1,1,2],[2,1,1],[1,1,1]) == 3\nassert     count_samepair([1,2,3],[1,2,3],[1,2,3]) == 0\nassert count_samepair([1,1,2],[1,1,2],[1,1,2]) == 3\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_samepair([1,1,2,3,5,7,8], [1,2,3,4,5,6,7], [1,3,5,7,8,9,10]) == 4\nassert     count_samepair([1,2,3,4,5,6,7], [1,2,3,4,5,6,7], [1,3,5,7,8,9,10]) == 5\nassert     count_samepair([1,2,3,4,5,6,7], [1,2,3,4,5,6,7], [1,2,3,4,5,6,7]) == 0\nassert     count_samepair([1,2,3,4,5,6,7], [1,2,3,4,5,6,7], [1,3,5,7,8,9,10]) == 0\nassert     count_samepair([1,2,3,4,5,6,7], [1,2,3,4,5,6,7], [1,2,3,4,5,6,7]) == 0"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert count_samepair([1,2,3,4], [1,2,3,4], [1,2,3,4]) == 1\nassert count_samepair([1,2,3,4], [1,2,3,4], [1,1,3,4]) == 0\nassert count_samepair([1,2,3,4], [1,2,3,4], [1,2,1,4]) == 1\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_samepair([2, 3, 5, 5, 2, 7, 2, 3], \n                        [5, 5, 3, 7, 2, 3, 2, 5],\n                        [2, 3, 3, 2, 2, 1, 5, 5]) == 6\nassert     count_samepair([2, 4, 3, 5, 5, 4, 7, 2, 3],\n                        [5, 5, 4, 3, 7, 2, 3, 2, 5],\n                        [2, 3, 4, 5, 5, 4, 1, 3, 3]) == 6\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_samepair([1, 2, 1], [2, 1, 1], [2, 1, 1]) == 1, 'pass'\nassert     count_samepair([1, 2, 3, 1, 2, 1, 4, 5], [1, 2, 2, 1, 3, 1, 4, 5], [1, 2, 2, 1, 3, 1, 4, 5]) == 4, 'pass'\nassert     count_samepair([1, 2, 3, 4, 5], [1, 2, 2, 1, 3, 1, 4, 5], [1, 2, 2, 1, 3, 1, 4, 5]) == 1, 'pass'\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_lists(tuple()) == 0, f\"Error: {find_lists(tuple())}\"\nassert     find_lists(tuple([[] ])) == 0, f\"Error: {find_lists(tuple([[] ]))}\"\nassert     find_lists(tuple([[], ])) == 0, f\"Error: {find_lists(tuple([[], ]))}\"\nassert     find_lists(tuple([[1], ])) == 1, f\"Error: {find_lists(tuple([[1], ]))}\"\nassert     find_lists(tuple([[1, 2], ])) == 1, f\"Error: {find_lists(tuple([[1, 2], ]))}\"\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_lists(()) == 0, \"0 lists\"\nassert     find_lists((1,)) == 1, \"1 lists\"\nassert     find_lists((1,1)) == 2, \"2 lists\"\nassert     find_lists((1,1,2,3,4,5,5,6,6,6,7,8,9,10,11,11,11,12)) == 12, \"12 lists\"\nassert     find_lists((1,2,3,4,5,5,6,6,6,7,8,9,10,11,11,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_lists((1,2,3,4))==1\nassert    find_lists((1,2,3,4,4,4))==0\nassert    find_lists((1,2,3,4,4,4,4,4,4,4))==2\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_lists(([1, 2, 3, 4, 5], 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == 2, \"Error\"\nassert     find_lists(([1, 2, 3, 4, 5], 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == 1, \"Error\"\nassert     find_lists(([1, 2, 3], 4, 5, 6, 7, 8, 9, 10)) == 0, \"Error\"\nassert     find_lists(([1, 2], 3, 4, 5, 6, 7, 8, 9, 10)) == 3, \"Error\"\nassert     find_lists(([], 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == 4, \"Error\"\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_lists((1,2,3,4,5)) == 4, \"Wrong output\"\nassert     find_lists((4,4,4,4,4,4)) == 0, \"Wrong output\"\nassert     find_lists((1,2,3,4,5,6,7,8,9,10)) == 0, \"Wrong output\"\nassert     find_lists((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16)) == 5, \"Wrong output\"\n\n\ndef find_all_duplicates(Input):\n    '''\n    Write a function to find all duplicates elements present in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_lists((\"a\", \"b\", \"c\", \"d\")) == 2, \"Should return 2 lists\"\nassert     find_lists((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\")) == 3, \"Should return 3 lists\"\nassert     find_lists((\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\")) == 4, \"Should return 4 lists\"\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_lists(([],)) == 0, 'Number of lists = 0'\nassert     find_lists(([1,2],)) == 1, 'Number of lists = 1'\nassert     find_lists(([1,2,3,4],)) == 1, 'Number of lists = 1'\nassert     find_lists(([1,2,3,4],)) == 1, 'Number of lists = 1'\nassert     find_lists(([1,2,3,4],)) == 1, 'Number of lists = 1'\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_lists((1,2,3,4,5)) == 1\nassert     find_lists((2,3,4,5,6)) == 2\nassert     find_lists((1,2,3,4,5,6,7,8,9)) == 3\nassert     find_lists((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100)) == 9\nassert     find_lists((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_lists((1,2,3,4,5))     == 4,    \"Not correct for find_lists\"\nassert     find_lists((1,2,3,4,5,6,7,8,9))     == 1,    \"Not correct for find_lists\"\nassert     find_lists((1,2,3,4,5,6,7,8,9,10))     == 2,    \"Not correct for find_lists\"\nassert     find_lists((1,2,3,4,5,6,7,8,9,10,11,12,13))     == 3,    \"Not correct for find_lists\"\nassert     find_lists((1,2,3,4,5,6,7,8,9,10,11,12,13,14))     == 4,    \"Not correct for find_lists\"\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert \nassert max_Abs_Diff([0, -3, -10, 7, -5]) == 7\nassert max_Abs_Diff([1, 2, 3, 4, 5]) == 1\nassert max_Abs_Diff([1, -2, 3, -4, 5]) == 5\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert max_Abs_Diff([1, 3, 2, 6, 4, 7]) == 7\nassert max_Abs_Diff([-1, 3, 2, 6, 4, 7]) == 7\nassert max_Abs_Diff([1, 2, 3, 4, 5]) == 0\nassert max_Abs_Diff([2, 3, 4, 5, 6]) == 6\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_Abs_Diff([-1, -2, 2, 0, -3, -4]) == 4\nassert     max_Abs_Diff([1, -1, -2, 0, 1]) == 1\nassert     max_Abs_Diff([-1, -2, 1, -3, 4, -5]) == 4\nassert     max_Abs_Diff([-1, -2, -3, 4, -5]) == 3\n\ndef max_Abs_Diff2(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    pass\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_Abs_Diff([-5,-2,3,8,12,4,11,6]) == 13, 'Correctness check for max_Abs_Diff failed'\nprint('The maximum absolute difference is:', max_Abs_Diff([-5,-2,3,8,12,4,11,6]))\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_Abs_Diff([4, 5, -2, -3]) == 5, \"Wrong Answer\"\nassert     max_Abs_Diff([-1, -2, -3, -4]) == 4, \"Wrong Answer\"\nassert     max_Abs_Diff([-5, -2, -3, -4]) == 4, \"Wrong Answer\"\nassert     max_Abs_Diff([]) == 0, \"Wrong Answer\"\nassert     max_Abs_Diff([-1]) == 0, \"Wrong Answer\"\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_Abs_Diff([4, 5, -3, 3, 1, 4]) ==     3\nassert     max_Abs_Diff([1, 1, 1, 1, 1, 1]) ==     1\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef max_Abs_Diff_2(arr):\n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    pass\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_solution(a = 1, b = 1, n = 5) == (3, 4)\nassert     find_solution(a = 1, b = 1, n = 21) == (18, 19)\nassert     find_solution(a = 1, b = 2, n = 7) == (2, 5)\nassert     find_solution(a = 2, b = 3, n = 8) == (1, 2)\nassert     find_solution(a = 2, b = 3, n = 11) == (3, 4)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_solution(2, -1, 5) == (1, 3)\nassert     find_solution(2, 1, 6) == (1, 2)\nassert     find_solution(2, -1, 6) == None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert find_solution(2, 3, 11) == (3, 2)\nassert find_solution(1, 3, 11) == (2, 1)\nassert find_solution(2, 1, 11) == (1, 1)\nassert find_solution(1, 2, 11) == (1, 2)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nfind_solution(2,3,5) == (0,1)\nfind_solution(2,3,6) == (0,1)\nfind_solution(2,3,7) == None\nfind_solution(2,3,4) == None\nfind_solution(2,3,9) == (1,0)\nfind_solution(2,3,10) == (1,0)\nfind_solution(2,3,11) == None\n\nfind_solution(3,3,6) == (0,1)\nfind_solution(3,3,7) == (0,2)\nfind_solution(3,3,9) == (1,1)\nfind_solution(3,3,10) == (1,1)\nfind_solution(3,3,11) == None\n\nfind_solution(4,3,9) == (0,1)\nfind_solution(4,3,10) == (0,1)\nfind_solution(4,3,11) == (0,2)\nfind_solution(4,3,12) == None\n\nfind_solution(6,3,8) == (0,1)\nfind_solution(6,3,9) == (0,2)\nfind_solution(6,3,10) == (0,3)\nfind_solution(6,3,11) == None\nfind_solution(6,3,12) == (0,1)\n\nfind_solution(7,3,8) == (0,1)\nfind_solution(7,3,9) == (0,2)\nfind_solution(7,3,10) == (0,3)\nfind_solution(7,3,11) == (0,4)\nfind_solution(7,3,12) == (0,5)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert find_solution(1, 2, 3) == (1, 2)\nassert find_solution(1, 2, 4) == None\nassert find_solution(2, 2, 5) == (2, 2)\nassert find_solution(3, 3, 6) == (3, 3)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_solution((1, 1), (1, 1), 1) == (1, 1)\nassert     find_solution((1, 1), (1, 1), 1.9) is None\nassert     find_solution((1, 1), (1, 1), -2) is None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_solution(2, 3, 9) == (1, 3), \"Should return 1 and 3\"\nassert     find_solution(3, 3, 9) == (1, 2), \"Should return 1 and 2\"\nassert     find_solution(3, 4, 9) == (0, 1), \"Should return 0 and 1\"\nassert     find_solution(1, 2, 9) == (0, 1), \"Should return 0 and 1\"\nassert     find_solution(1, 3, 9) == (0, 2), \"Should return 0 and 2\"\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nfind_solution(2, 2, 2) == (1, 1)\nfind_solution(1, 2, 5) == (3, 1)\nfind_solution(1, 1, 1) == (1, 1)\nfind_solution(1, 2, 5) == None\nfind_solution(3, 1, 5) == None\nfind_solution(2, 1, 3) == None\nfind_solution(2, 1, 4) == None\nfind_solution(1, 2, 3) == None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(\"The function should find x and y that satisfy ax + by = n\")\n\na = -2\nb = 1\nn = 11\nassert "
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_elements(['a','b','c','d','e','f','g'], ['a','b','c','d','e']) == ['g']\nassert     remove_elements(['a','b','c','d','e','f','g'], ['a','b','f']) == ['g']\nassert     remove_elements(['a','b','c','d','e','f','g'], ['f','g']) == ['a','b','d','e']\nassert     remove_elements(['a','b','c','d','e','f','g'], ['c','d','e']) == ['a','b','g']\nassert     remove_elements(['a','b','c','d','e','f','g'], ['f','g','e','b','c']) == ['a','b']\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nremove_elements([1, 2, 3, 4], [2, 3, 4]) == [1]\nremove_elements([1, 2, 3, 4], [3, 4]) == []\nremove_elements([1, 2, 3, 4], [4]) == [1, 2, 3]\nremove_elements([1, 2, 3], []) == [1, 2, 3]\nremove_elements([], [1, 2, 3]) == []"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nremove_elements([1, 2, 3, 4], [1, 2, 3, 5]) == [2, 3, 4]\nremove_elements([4, 3, 2, 1], [2, 1, 3, 5]) == [4]\nremove_elements([3, 2, 1], [2, 1, 3, 5]) == []\nremove_elements([], [1, 2, 3, 4]) == []\n\n\n'''\nWrite a function to remove duplicates from a list of integers.\n'''\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nremove_elements([5,8,7],[2,7,4]) == None\nassert \nremove_elements([5,8,7],[2,6,4]) == [5,8,7]\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_elements([1,2,3],[1,2,3]) == []\nassert     remove_elements([1,2], [1,2,3]) == [2,3]\nassert     remove_elements([1,2,3], [1,2]) == []\nassert     remove_elements([], []) == []\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nremove_elements([1,2,3,4,5,6],[1,2,4]) == True\nassert\nremove_elements([1,2,3,4,5,6],[1,2,3,5]) == True\nassert\nremove_elements([1,2,3,4,5,6],[1,2,3,5,7]) == True\nassert\nremove_elements([1,2,3,4,5,6],[1,2,3,6,7]) == True\nassert\nremove_elements([1,2,3,4,5,6],[1,2,7,8]) == False\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert remove_elements([1,2,3,4],[2]) == [[1,3,4]]\nassert remove_elements([1,2,3,4],[1,4]) == [[2,3]]\nassert remove_elements([1,2,3,4],[3,4]) == [[1,2]]\n\n\ndef is_even_len(string):\n    '''\n    Write a function to check if a string has even length.\n    '''\n    pass\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_elements([1, 2, 3, 4], [2, 3, 4, 5]) == [], \"Wrong result\"\nassert     remove_elements([1, 2, 3, 4], [4]) == [], \"Wrong result\"\nassert     remove_elements([], [1, 2, 3, 4]) == [], \"Wrong result\"\nassert     remove_elements([1, 2, 3], [1, 2, 3, 4]) == [], \"Wrong result\"\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_elements(list1=[1, 2, 3, 4, 5], list2=[1, 2, 3, 4, 5]) ==     [2, 3, 4, 5]\nassert     remove_elements(list1=[1, 2, 3, 4, 5], list2=[]) ==     [1, 2, 3, 4, 5]\nassert     remove_elements(list1=[], list2=[1, 2, 3, 4, 5]) ==     [1, 2, 3, 4, 5]\nassert     remove_elements(list1=[1, 2, 3, 4, 5], list2=[1, 2, 3, 4, 5]) ==     [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_elements([1, 2, 3, 4], [1, 2, 3, 5]) == [], \"remove_elements([1, 2, 3, 4], [1, 2, 3, 5]) should return []\"\nassert     remove_elements([1, 2, 3, 4], [3, 5, 7, 8, 9]) == [], \"remove_elements([1, 2, 3, 4], [3, 5, 7, 8, 9]) should return []\"\nassert     remove_elements([1, 2, 3], [1, 2, 3, 4]) == [], \"remove_elements([1, 2, 3], [1, 2, 3, 4]) should return []\"\nassert     remove_elements([1, 2, 3, 4], []) == [], \"remove_elements([1, 2, 3, 4], []) should return []\"\nassert     remove_elements([], [1, 2, 3, 4]) == [], \"remove_elements([], [1, 2, 3, 4]) should return []\"\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\n\ndef sum_series_rev(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    pass\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    \ndef sum_series_improved(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # Solution:\n    # \n    # This solution does not check if the given number is even, if it is, then we would have to get (n//2)+2 instead of (n//2)\n    # \n    # // means floor division\n    #\n    # n = 0\n    # for i in range(n//2):\n    #     # we divide by 2 each time, hence the number is even\n    #     n = (n // 2) + 2\n    # return n\n\n    # The above solution can also be achieved with this:\n    # \n    # n = 0\n    # while n < n // 2:\n    #     n += 2\n    # return n\n    # \n    # Now, the above solution doesn't work for n = 0 as it is an error. This problem is equivalent to finding the prime factors of n, which is not possible since n is not a perfect square\n    #\n    # Therefore, we can use the above expression to iterate through an integer starting from n//2 and end with n (both inclusive) and return the sum.\n    # \n    # Since, n = 0 is not a perfect square, so it is not a perfect square of any integer and hence this problem is equivalent to finding the prime factors of n.\n\n    \n    # if n is not a perfect square, then we can return sum of the sum_series of n//2\n    if n % 2 == 1:\n        return (n//2) + 2\n    # else, we can return sum of the sum_series of n//2 - 1\n    else:\n        return (n//2) + 1\n    "
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_series(6) == 0\nassert     sum_series(9) == 28\nassert     sum_series(12) == 140\nassert     sum_series(13) == 268\nassert     sum_series(14) == 788\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_series(10) == 28\nassert     sum_series(12) == 27\nassert     sum_series(13) == 33\nassert     sum_series(20) == 51\nassert     sum_series(30) == 63\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_series(1) == 0\nassert     sum_series(2) == 1\nassert     sum_series(5) == 6\nassert     sum_series(10) == 55\nassert     sum_series(20) == 70\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     area_polygon(2, 3) == 1.5\nassert     area_polygon(4, 3) == 5.0\nassert     area_polygon(2, 5) == 10.0\nassert     area_polygon(3, 6) == 24.0\nassert     area_polygon(3, 4) == 12.0\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     area_polygon(3, 4) == 4.00\nassert     area_polygon(4, 5) == 5.00\nassert     area_polygon(1, 1) == 1.00\nassert     area_polygon(8, 2) == 8.00\nassert     area_polygon(3, 3) == 3.00\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef area_triangle(s):\n    '''\n    Write a function to calculate the area of a triangle given the length of the triangle\u2019s sides.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     (area_polygon(10,4) == 50), 'area_polygon(10,4)'\nassert     (area_polygon(100,2) == 400), 'area_polygon(100,2)'\nassert     (area_polygon(10,8) == 200), 'area_polygon(10,8)'\nassert     (area_polygon(30,3) == 360), 'area_polygon(30,3)'\n\ndef area_triangle(a, b, c):\n    '''\n    Write a function to calculate the area of a triangle given the lengths of its three sides.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     area_polygon(2, 3) == 5\nassert     area_polygon(2, 5) == 3.14\nassert     area_polygon(8, 4) == 20.0\nassert     area_polygon(1, 1) == 1\nassert     area_polygon(5, 8) == 2*5*5\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     area_polygon(3, 5) == 22.5\nassert     area_polygon(3, 3) == 12.5\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     area_polygon(3, 4) == 10.0\nassert     area_polygon(4, 10) == 40.0\nassert     area_polygon(10, 10) == 10000.0\n\ndef area_triangle(a, h):\n    '''\n    Write a function to calculate the area of a triangle given its three vertices.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     area_polygon(2, 5) == 2*0.5*pi\nassert     area_polygon(3, 6) == 1.5*0.5*pi\nassert     area_polygon(4, 7) == 1.5*0.5*pi\nassert     area_polygon(5, 8) == 2*0.5*pi\n\ndef square_root_iter(x):\n    '''\n    Write a function that takes in a number and returns its square root iteratively.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     area_polygon(4, 3) == 12\nassert     area_polygon(3, 4) == 4\nassert     area_polygon(4, 5) == 20\nassert     area_polygon(4, 6) == 48\nassert     area_polygon(5, 6) == 20\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef func_div_sum(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    pass\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     div_sum(3) == True \nassert     div_sum(12) == True \nassert     div_sum(4) == False \nassert     div_sum(39) == False \nassert     div_sum(4) == False \n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef f_div(n):\n    '''\n    Write a function which returns the sum of all divisors of the given number.\n    '''\n    pass\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     div_sum(12) == True,     'failed: true'\nassert     div_sum(13) == False,    'failed: true'\nassert     div_sum(24) == False,    'failed: true'\nassert     div_sum(25) == True,    'failed: true'\nassert     div_sum(36) == True,    'failed: true'\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef calc_mean(n):\n    '''\n    Write a function to calculate the mean of a list of integers.\n    '''\n    pass\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     div_sum(1) == True\nassert     div_sum(4) == False\nassert     div_sum(16) == True\n\ndef div_sum_2(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    pass\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ndiv_sum(7)"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \ndiv_sum(6) == True\ndiv_sum(11) == False\ndiv_sum(7) == True\ndiv_sum(8) == True\ndiv_sum(14) == False\ndiv_sum(1) == True\ndiv_sum(0) == False\ndiv_sum(0.5) == False\ndiv_sum(-6) == False\ndiv_sum(-11) == True\ndiv_sum(-7) == True\ndiv_sum(-8) == True\ndiv_sum(-14) == False\ndiv_sum(-1) == True\ndiv_sum(-0) == False\ndiv_sum(0.5) == False\ndiv_sum(math.pi) == False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     div_sum(100) == True, '100 = 9 + 2 + 1'\nassert     div_sum(1000) == False, '1000 = 3 + 5 + 7'\nassert     div_sum(6) == True, '6 = 3 + 2 + 1'\nassert     div_sum(10) == False, '10 = 3 + 5 + 1'\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef is_prime(n):\n    '''\n    Write a function to check if a given number is prime.\n    '''\n    pass\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == '__main__':\n    # Use the main function here to test out your implementation\n    print(count_char_position(\"\"))\n    print(count_char_position(\"a\"))\n    print(count_char_position(\"A\"))\n    print(count_char_position(\"aB\"))\n    print(count_char_position(\"abc\"))\n    print(count_char_position(\"abcABC\"))\n    print(count_char_position(\"abcabc\"))\n    print(count_char_position(\"ABC\"))\n    print(count_char_position(\"abc abc\"))\n    print(count_char_position(\"abc abc abc\"))\n    print(count_char_position(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\"))\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_char_position('test') == 6\nassert count_char_position('teT') == 6\nassert count_char_position('The') == 6\nassert count_char_position('Thet') == 7\nassert count_char_position('theT') == 6\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef count_char_position(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    total_chars = 0\n    counter = {}\n    \n    # create a dictionary where keys are the numbers and values are the letters\n    # convert the str1 into a dictionary\n    # create a counter dictionary\n    # update the counter dictionary with the values that are found in str1\n    \n    for i in str1:\n        if i in counter:\n            counter[i] += 1\n        else:\n            counter[i] = 1\n    \n    # check the correctness of the function\n    # this function takes in a string as input\n    # and returns a dictionary\n    \n    return counter\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert count_char_position('') == 0, \"Check your logic\"\nassert count_char_position('Hello') == 6, \"Check your logic\"\nassert count_char_position('Hello, world!') == 12, \"Check your logic\"\nassert count_char_position('HELLO') == 5, \"Check your logic\"\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_char_position('abcabca') == {'a': 2, 'b': 3, 'c': 1}\nassert     count_char_position('abcabc') == {'a': 3, 'b': 3, 'c': 2}\nassert     count_char_position('abcd') == {'a': 1, 'b': 1, 'c': 1, 'd': 0}\nassert     count_char_position('abcabcdefgabc') == {'a': 3, 'b': 3, 'c': 2, 'd': 0, 'e': 1, 'f': 1, 'g': 1}\n\ndef count_char_position2(str1):\n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    The function should return the number of occurrences for each character in the string (not the number of occurrences of the whole string).\n    '''\n    pass\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nif __name__ == '__main__':\n    # example\n    test_str = 'this is the string'\n    # the number of characters in the string are:\n    assert count_char_position(test_str) == 12"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert count_char_position(\"abcd\") == 5\nassert count_char_position(\"abcde\") == 5\nassert count_char_position(\"ABCD\") == 4\nassert count_char_position(\"ABCD\") == 4\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(count_char_position(\"I am a boy\")) == {'a': 1, 'i': 1, 'b': 1, 'o': 1,'m': 1, 'y': 1} \nprint(count_char_position(\"AbCdEfGhIjKlmnOpQStUvWxyz\")) == {'a': 5, 'b': 5, 'c': 5, 'd': 4, 'e': 4, 'f': 4, 'g': 3, 'h': 3, 'i': 3, 'j': 2, 'k': 2, 'l': 2,'m': 2, 'n': 2, 'o': 2, 'p': 2, 'q': 2, 'r': 2,'s': 2, 't': 2, 'u': 2, 'v': 2, 'w': 2, 'x': 1, 'y': 1, 'z': 1} \nprint(count_char_position(\"I am a boy\")) == {'i': 3, 'a': 3, 'b': 2, 'o': 2,'m': 2, 'y': 2} \nprint(count_char_position(\"abcdEfghIjklmnOpqStUvWxyz\")) == {'a': 5, 'b': 5, 'c': 4, 'd': 4, 'e': 4, 'f': 4, 'g': 3, 'h': 3, 'i': 3, 'j': 2, 'k': 2, 'l': 2,'m': 2, 'n': 2, 'o': 2, 'p': 2, 'q': 2, 'r': 2,'s': 2, 't': 2, 'u': 2, 'v': 2, 'w': 2, 'x': 1, 'y': 1, 'z': 1} \nprint(count_char_position(\"I am a boy\")) == {'i': 3, 'a': 3, 'b': 2, 'o': 2,'m': 2, 'y': 2} \nprint(count_char_position(\"abcdEfghIjklmnOpqStUvWxyz\")) == {'a': 5, 'b': 5, 'c': 4, 'd': 4, 'e': 4, 'f': 4, 'g': 3, 'h': 3, 'i': 3, 'j': 2, 'k': 2, 'l': 2,'m': 2, 'n': 2, 'o': 2, 'p': 2, 'q': 2, 'r': 2,'s': 2, 't': 2, 'u': 2, 'v': 2, 'w': 2, 'x': 1, 'y': 1, 'z': 1} "
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert count_char_position(\"BANANA\") == 5\nassert count_char_position(\"\") == 0\nassert count_char_position(\"PYTHON\") == 11\nassert count_char_position(\"CAT\") == 3\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nfind_even_pair([1, 5, 7, 9, 10, 8]) == 2\nfind_even_pair([1, 5, 2, 8, 3, 6]) == 0\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef find_even_pair(A):\n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if i!= j:\n                if A[i] ^ A[j] == 0:\n                    even_count += 1\n    return even_count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_even_pair([1,2,3]) == 1, 'wrong answer'\nassert     find_even_pair([1,3,2]) == 0, 'wrong answer'\nassert     find_even_pair([1,2,3]) == 1, 'wrong answer'\nassert     find_even_pair([2,4,6]) == 0, 'wrong answer'\nassert     find_even_pair([2,4,6]) == 0, 'wrong answer'\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nfind_even_pair([1,2,3,4,5,6]) == 2\nfind_even_pair([2,3,4,5,6]) == 1\nfind_even_pair([4,5,6]) == 0\nfind_even_pair([6,7,8,9]) == 0\nfind_even_pair([1,3,5,7,9]) == 2\nfind_even_pair([10,11,12,13,14]) == 4\n\n\n\ndef find_all_factors(n):\n    '''\n    Write a function that finds all factors of the given number\n    '''\n    pass\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nfind_even_pair([1,2,3,4,5])\nfind_even_pair([4,6,2,4,5,8,4,6])\nfind_even_pair([5,2,7,4,6,2])\nfind_even_pair([1,2,3,4,5,6])"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nfind_even_pair([1,2,3,4]) == 4\nfind_even_pair([4,5,6,7]) == 0\nfind_even_pair([1,3,5,7]) == 2\nfind_even_pair([1,3,5,7,9]) == 1\n\n\ndef find_odd_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an odd number.\n    '''\n    pass\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nfind_even_pair([1,2,3,4,5,6]) == 4\nfind_even_pair([1,4,9,16,25]) == 2\nfind_even_pair([0,5,7,11,15]) == 0\nfind_even_pair([10,16,24,31,39,41,56]) == 4\nfind_even_pair([16,24,32,40,48,56]) == 4\nfind_even_pair([16,24,32,40,48,56]) == 4\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nfind_even_pair([1, 2, 3, 4, 5]) == 3\nfind_even_pair([1, 2, 3, 4, 5, 6]) == 2\nfind_even_pair([1, 1, 1, 1]) == 4\nfind_even_pair([1, 2, 3, 4, 5, 6]) == 1\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nnext_power_of_2(4) == 2\nnext_power_of_2(1) == 2\nnext_power_of_2(8) == 2\nnext_power_of_2(9) == 3\nnext_power_of_2(32) == 4\nnext_power_of_2(64) == 4\nnext_power_of_2(128) == 8\nnext_power_of_2(256) == 8\nnext_power_of_2(512) == 8\nnext_power_of_2(1024) == 8\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     next_power_of_2(1) == 1 \nassert     next_power_of_2(4) == 2\nassert     next_power_of_2(16) == 2\nassert     next_power_of_2(64) == 4\nassert     next_power_of_2(1024) == 4\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(\"Pass\" if (next_power_of_2(0) == 1) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(1) == 2) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(3) == 4) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(4) == 8) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(5) == 16) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(6) == 32) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(7) == 64) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(8) == 128) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(9) == 256) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(10) == 512) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(20) == 1024) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(40) == 2048) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(64) == 4096) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(128) == 8192) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(256) == 16384) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(512) == 32768) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(1024) == 65536) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(2048) == 131072) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(4096) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(8192) == 655360) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(16384) == 1312288) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(32768) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(65536) == 1312288) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(131072) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(262144) == 1312288) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(655360) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(1312288) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(1312288) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(1312288) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(1312288) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(1312288) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(262144) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(262144) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(262144) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(262144) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(262144) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(262144) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(262144) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(262144) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(262144) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(262144) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(262144) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(262144) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(262144) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(262144) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(262144) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(262144) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(262144) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(262144) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(262144) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(262144) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(262144) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(262144) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(262144) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(262144) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(262144) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(262144) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(262144) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(262144) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(262144) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(262144) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(262144) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(262144) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(262144) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(262144) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(262144) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(262144) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(262144) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(262144) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(262144) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(262144) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(262144) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(262144) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(262144) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(262144) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(262144) == 262144) else \"Fail\")\nprint(\"Pass\" if (next_power_of_2(262144) == 262144) else \"Fail\")\nprint(\"Pass\" i"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nnext_power_of_2(1) == 1\nnext_power_of_2(8) == 8\nnext_power_of_2(16) == 2\nnext_power_of_2(128) == 8\nnext_power_of_2(1024) == 2\nnext_power_of_2(1 << 24) == 2\nnext_power_of_2(1 << 25) == 2\n\ndef max_power_of_2(n): \n    '''\n    Write a python function to find the largest power of 2 less than or equal to n.\n    '''\n    pass\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     next_power_of_2(0) == 1\nassert     next_power_of_2(1) == 2\nassert     next_power_of_2(3) == 4\nassert     next_power_of_2(10) == 16\n\ndef next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0: \n        return 1\n    i = 1\n    while i <= n: \n        if i ** 2 == n: \n            return i \n        i += 1\n    return i - 1\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nnext_power_of_2(1) == 1\nnext_power_of_2(2) == 2\nnext_power_of_2(8) == 8\nnext_power_of_2(9) == 8\nnext_power_of_2(16) == 8\nnext_power_of_2(32) == 32\nnext_power_of_2(0) == 1\nnext_power_of_2(1) == 2\nnext_power_of_2(2) == 4\nnext_power_of_2(3) == 8\nnext_power_of_2(5) == 32\nnext_power_of_2(8) == 64\nnext_power_of_2(12) == 128\nnext_power_of_2(15) == 256\nnext_power_of_2(31) == 512\nnext_power_of_2(63) == 1024\nnext_power_of_2(97) == 2048\nnext_power_of_2(128) == 4096\nnext_power_of_2(196) == 8192\nnext_power_of_2(256) == 16384\nnext_power_of_2(512) == 32768\nnext_power_of_2(1024) == 65536\nnext_power_of_2(2048) == 131072\nnext_power_of_2(4096) == 262144\nnext_power_of_2(8192) == 524288\nnext_power_of_2(16384) == 1048576\nnext_power_of_2(32768) == 2097152\nnext_power_of_2(65536) == 4194304\nnext_power_of_2(131072) == 8388608\nnext_power_of_2(262144) == 16777216\nnext_power_of_2(524288) == 33554432\nnext_power_of_2(1048576) == 67108864\nnext_power_of_2(2097152) == 134217728\nnext_power_of_2(4194304) == 268435456\nnext_power_of_2(8388608) == 536870912\nnext_power_of_2(16777216) == 1073741824\nnext_power_of_2(33554432) == 2147483648\nnext_power_of_2(67108864) == 4194304\nnext_power_of_2(134217728) == 8388608\nnext_power_of_2(268435456) == 16777216\nnext_power_of_2(536870912) == 33554432\nnext_power_of_2(1073741824) == 67108864\nnext_power_of_2(2147483648) == 134217728\nnext_power_of_2(4194304) == 262144\nnext_power_of_2(8388608) == 536870912\nnext_power_of_2(16777216) == 1073741824\nnext_power_of_2(33554432) == 268435456\nnext_power_of_2(67108864) == 536870912\nnext_power_of_2(134217728) == 1073741824\nnext_power_of_2(262144) == 4194304\nnext_power_of_2(524288) == 8388608\nnext_power_of_2(1048576) == 16777216\nnext_power_of_2(2097152) == 33554432\nnext_power_of_2(4194304) == 67108864\nnext_power_of_2(8388608) == 134217728\nnext_power_of_2(16777216) == 262144\nnext_power_of_2(33554432) == 536870912\nnext_power_of_2(67108864) == 1073741824\nnext_power_of_2(134217728) == 268435456\nnext_power_of_2(262144) == 4194304\nnext_power_of_2(524288) == 8388608\nnext_power_of_2(1073741824) == 16777216\nnext_power_of_2(2097152) == 33554432\nnext_power_of_2(4194304) == 67108864\nnext_power_of_2(8388608) == 134217728\nnext_power_of_2(16777216) == 262144\nnext_power_of_2(33554432) == 536870912\nnext_power_of_2(67108864) == 1073741824\nnext_power_of_2(134217728) == 268435456\nnext_power_of_2(262144) == 4194304\nnext_power_of_2(524288) == 8388608\nnext_power_of_2(1073741824) == 16777216\nnext_power_of_2(2097152) == 33554432\nnext_power_of_2(4194304) == 67108864\nnext_power_of_2(8388608) == 134217728\nnext_power_of_2(16777216) == 262144\nnext_power_of_2(33554432) == 536870912\nnext_power_of_2(67108864) == 1073741824\nnext_power_of_2(134217728) == 268435456\nnext_power_of_2(262144) == 4194304\nnext_power_of_2(524288) == 8388608\nnext_power_of_2(1073741824) == 16777216\nnext_power_of_2(2097152) == 33554432\nnext_power_of_2(4194304) == 67108864\nnext_power_of_2(8388608) == 134217728\nnext_power_of_2(16777216) == 262144\nnext_power_of_2(33554432) == 536870912\nnext_power_of_2(67108864) == 1073741824\nnext_power_of_2(134217728) == 268435456\nnext_power_of_2(262144) == 4194304\nnext_power_of_2(524288) == 8388608\nnext_power_of_2(1073741824) == 16777216\nnext_power_of_2(2097152) == 33554432\nnext_power_of_2(4194304) == 67108864\nnext_power_of_2(8388608) == 134217728\nnext_power_of_2(16777216) == 262144\nnext_power_of_2(33554432) == 536870912\nnext_power_of_2(67108864) == 1073741824\nnext_power_of_2(134217728) == 268435456\nnext_power_of_2(262144) == 4194304\nnext_power_of_2(524288) == 8388608\nnext_power_of_2(1073741824) == 16777216\nnext_power_of_2(2097152) == 33554432\nnext_power_of_2(4194304) == 67108864\nnext_power_of_2(8388608) == 134217728\nnext_power_of_2(16777216) == 262144\nnext_power_of_2(33554432) == 536870912\nnext_power_of_2(67108864) == 1073741824\nnext_power_of_2(134217728) == 268435456\nnext_power_of_2(262144) == 4194304\nnext_power_of_2(524288) == 8388608\nnext_power_of_2(1073741824) == 16777216\nnext_power_of_2(2097152) == 33554432\nnext_power_of_2(4194304) == 67108864\nnext_power_of_2(8388608) == 134217728\nnext_power_of_2(16777216) == 262144\nnext_power_of_2(33554432) == 536870912\nnext_powe"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     next_power_of_2(2) == 2\nassert     next_power_of_2(3) == 4\nassert     next_power_of_2(4) == 8\nassert     next_power_of_2(5) == 16\nassert     next_power_of_2(6) == 32\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     next_power_of_2(0) == 1 \nassert     next_power_of_2(4) == 2 \nassert     next_power_of_2(5) == 2 \nassert     next_power_of_2(6) == 4 \nassert     next_power_of_2(7) == 8 \n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n'''\nGiven a string, return a new string where each character in the original string is \"(\" if it is a\ndigit or a letter, or \")\" if it is a space. Ignore case.\n\nExamples\n\"abcd\"   =>   \"(a)(b)(c)(d)\"\n\"abcde\"  =>   \"(a)(b)(c)(d)(e)\"\n\"abcd efg\" =>  \"(a)(b)(c)(d)(e)()(fg)()\"\n'''\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     next_power_of_2(1) == 1\nassert     next_power_of_2(2) == 2\nassert     next_power_of_2(3) == 4\nassert     next_power_of_2(4) == 8\nassert     next_power_of_2(8) == 16\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef frequency(a,x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     frequency([1,1,1,1,1,1],1) == 5\nassert     frequency([1,2,3,4,5,5,6],5) == 3\nassert     frequency([1,1,1,1,1,1],1) == 6\nassert     frequency([1,1,1,1,1,1],2) == 0\nassert     frequency([1,1,1,1,1,1],0) == 0\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef frequency2(x):\n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef collatz(n):\n    '''\n    Write a function to calculate the collatz sequence.\n    '''\n    pass\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     frequency([4,6,8,9,4,3,4,4,4,5],4) == 2\nassert     frequency([1,1,1,1,1],1) == 5\nassert     frequency([1,1,1,1,1],2) == 3\nassert     frequency([1,1,1,1,1],3) == 0\nassert     frequency([1,1,1,1,1],4) == 0\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     frequency([2,3,3,3,3,3,2,2,2,2], 2) == 2\nassert     frequency([2,3,3,3,3,3,2,2,2,2], 4) == 0\nassert     frequency([2,3,3,3,3,3,2,2,2,2], 3) == 2\nassert     frequency([2,3,3,3,3,3,2,2,2,2], -1) == 0\nassert     frequency([-2,3,3,3,3,3,2,2,2,2], 2) == 0\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef frequency_sum(l,n):\n    '''\n    Write a function to find the sum of the numbers in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    # Python implementation of above approach \n    counter = 0\n    for i in a: \n        if i == x: \n            counter += 1\n    return counter\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     frequency([1, 2, 2, 3, 4, 3, 3], 2) == 3, \"The answer should be 3\"\nassert     frequency([1, 2, 2, 3, 4, 3, 3], 3) == 2, \"The answer should be 2\"\nassert     frequency([1, 2, 2, 3, 4, 3, 3], 1) == 1, \"The answer should be 1\"\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_range_list([1, 2, 3, 4, 5, 6, 7], 1, 4) == 9, \"Wrong Answer\"\nassert     sum_range_list([1, 2, 3, 4, 5, 6, 7], 1, 5) == 14, \"Wrong Answer\"\nassert     sum_range_list([1, 2, 3, 4, 5, 6, 7], 1, 6) == 20, \"Wrong Answer\"\nassert     sum_range_list([1, 2, 3, 4, 5, 6, 7], 1, 7) == 25, \"Wrong Answer\"\nassert     sum_range_list([1, 2, 3, 4, 5, 6, 7], 1, 8) == 30, \"Wrong Answer\"\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    assert sum_range_list([1,2,3,4], 1, 2) == 5\n    assert sum_range_list([1,2,3,4], 0, 1) == 1\n    assert sum_range_list([1,2,3,4], 2, 4) == 11\n    assert sum_range_list([1,2,3,4], 4, 4) == 8\n    "
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nsum_range_list([1, 2, 3, 4, 5], 2, 4) == 9\nsum_range_list([0, 4, 5, 6, 8, 12], 3, 6) == 16\nsum_range_list([4, 5, 6, 7, 8, 9], 2, 4) == 7\nsum_range_list([4, 5, 6, 7, 8, 9], 2, 5) == 7\nsum_range_list([4, 5, 6, 7, 8, 9], 2, 6) == 14"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_range_list([1,2,3,4,5], 2, 4) == 8, \"Wrong sum_range_list()\"\nassert     sum_range_list([1,2,3,4,5], 2, 2) == 5, \"Wrong sum_range_list()\"\nassert     sum_range_list([1,2,3,4,5], 4, 6) == 10, \"Wrong sum_range_list()\"\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_range_list([1, 2, 3, 4, 5], 0, 2) == 6, \"Wrong answer\"\nassert     sum_range_list([1, 2, 3, 4, 5], 2, 4) == 9, \"Wrong answer\"\nassert     sum_range_list([1, 2, 3, 4, 5], 4, 6) == 10, \"Wrong answer\"\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_range_list([1,2,3,4],0,1) == 1, 'input 1,2,3,4, expected 1'\nassert     sum_range_list([1,2,3,4],1,2) == 4, 'input 1,2,3,4, expected 4'\nassert     sum_range_list([1,2,3,4],1,3) == 6, 'input 1,2,3,4, expected 6'\nassert     sum_range_list([1,2,3,4],0,4) == 10, 'input 1,2,3,4, expected 10'\nassert     sum_range_list([1,2,3,4],0,5) == 10, 'input 1,2,3,4, expected 10'\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_range_list([0, 3, -2], 0, 2) == 6\nassert     sum_range_list([0, 5, 9], 0, 2) == 0\nassert     sum_range_list([], 1, 1) == 0\nassert     sum_range_list([], 1, 2) == 0\nassert     sum_range_list([1, 4], 0, 2) == 5\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_range_list([1, 2, 3], 2, 2) == 5, 'Wrong result'\nassert     sum_range_list([1, 2, 3], 1, 3) == 6, 'Wrong result'\nassert     sum_range_list([1, 2, 3], 0, 2) == 3, 'Wrong result'\nassert     sum_range_list([1, 2, 3, 4], 0, 3) == 6, 'Wrong result'\nassert     sum_range_list([1, 2, 3, 4], 1, 3) == 8, 'Wrong result'\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     perimeter_pentagon(1) == 3\nassert    perimeter_pentagon(2) == 5\nassert    perimeter_pentagon(3) == 7\nassert    perimeter_pentagon(4) == 10\nassert    perimeter_pentagon(5) == 12\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     perimeter_pentagon(5) == 10, \"Expected 10\"\nassert     perimeter_pentagon(3) == 12, \"Expected 12\"\nassert     perimeter_pentagon(1) == 4, \"Expected 4\"\nassert     perimeter_pentagon(0) == 0, \"Expected 0\"\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     (perimeter_pentagon(1)==5), \"Wrong return value\"\nassert     (perimeter_pentagon(4)==12), \"Wrong return value\"\nassert     (perimeter_pentagon(5)==20), \"Wrong return value\"\nassert     (perimeter_pentagon(8)==30), \"Wrong return value\"\nassert     (perimeter_pentagon(12)==50), \"Wrong return value\"\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef perimeter_hexagon(a):\n    '''\n    Write a function to find the perimeter of a regular hexagon from the length of its sides.\n    '''\n    pass\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     perimeter_pentagon(5) == 20\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     perimeter_pentagon(1) == 3\nassert     perimeter_pentagon(2) == 5\nassert     perimeter_pentagon(3) == 7\nassert     perimeter_pentagon(4) == 10\nassert     perimeter_pentagon(5) == 12\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef area_square(a,b):\n    '''\n    Write a function to find the area of a regular square.\n    '''\n    pass\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     (perimeter_pentagon(1) == 3), \"the result is not the correct\"\nassert (perimeter_pentagon(4) == 10), \"the result is not the correct\"\nassert (perimeter_pentagon(10) == 50), \"the result is not the correct\"\nassert (perimeter_pentagon(1000) == 9690), \"the result is not the correct\"\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_occurance('my name is abhijith') == 2\nassert     count_occurance('hello world') == 5\nassert     count_occurance('this is a test') == 3\nassert     count_occurance('testing 123') == 0\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_occurance('stdstd') == 2, 'Test 1 fail'\nassert count_occurance('mystd') == 1, 'Test 2 fail'\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef count_occurance_recursive(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    Note: You can assume the string has atleast one std.\n    '''\n    pass\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_occurance(\"std\") == 2, \"should be 2\"\nassert     count_occurance(\"aaaaa\") == 4, \"should be 4\"\nassert     count_occurance(\"bbbbb\") == 2, \"should be 2\"\nassert     count_occurance(\"ab\") == 2, \"should be 2\"\nassert     count_occurance(\"\") == 0, \"should be 0\"\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert count_occurance('I like code') == 2\nassert count_occurance('he like code') == 0\nassert count_occurance('he like code and code') == 1\nassert count_occurance('he like code and code and code') == 2\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_occurance('std') == 4\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_occurance('') == 0, 'test 1: fail'\nassert count_occurance('hello') == 1, 'test 2: fail'\nassert count_occurance('hello std hello') == 2, 'test 3: fail'\n\ndef longest_palindrome(s):\n    '''\n    Write a function to find the longest palindrome in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_occurance(\"testestesteststd\") == 3\n\ndef sum_two_numbers(x, y):\n    '''\n    Write a function that takes two numbers as input,\n    and returns the sum of the two numbers.\n    '''\n    pass\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_type(tuple()) == True, 'The first tuple is empty'\nassert     check_type(tuple([1, 2, 3, 4, 5])) == True, 'The elements in the tuple are not same'\nassert     check_type(tuple([1, 2, 3, 'a', 5])) == False, 'The elements in the tuple are not same'\nassert     check_type(tuple([1, 2, 'a', 3, 4])) == False, 'The elements in the tuple are not same'\nassert     check_type(tuple([1, 2, 3, 'a', 'b'])) == False, 'The elements in the tuple are not same'\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    check_type([1, 2, \"hello\"]) == True, \"check_type([1, 2, 'hello']) should return True\"\n    check_type([1, 2, 3.5]) == False, \"check_type([1, 2, 3.5]) should return False\"\n\n    \ndef check_type_tuple(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    pass\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_type((1, 2, 3, 4, 5, 6, 7)) == True, \"Error, all the elements in tuple are not same data type.\"\nassert     check_type((1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0)) == False, \"Error, all the elements in tuple are not same data type.\"\nassert     check_type((1, 2, 3, \"a\", 5, 6, 7)) == False, \"Error, all the elements in tuple are not same data type.\"\nassert     check_type((1, 2, 3, \"hello\", 5, 6, 7)) == False, \"Error, all the elements in tuple are not same data type.\"\nassert     check_type((1, 2, 3, None, 5, 6, 7)) == True, \"Error, all the elements in tuple are not same data type.\"\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_type((1, 2, 3, 4, 5, 6, 7, 8, 9)) == True\nassert     check_type((1, 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')) == False\nassert     check_type((1, 2, 'a', 'b', 'c', 'd', 'e', 'f', 'g')) == False\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_type(('a', 'b', 'c', 'a')) == True\nassert     check_type(('a', 'b', 'a')) == False\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_type((1,2,3)) == True\nassert     check_type((1.5,'String',5)) == False\nassert     check_type((5,'String',1)) == False\nassert     check_type((1.5,'String',5,'abc',True)) == False\nassert     check_type((1.5,'String',5,'abc',True,True)) == False\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert check_type([1,2.0,3]) == False, \"All the elements in tuple are float type\"\nassert check_type([\"a\",2,2]) == False, \"All the elements in tuple are string type\"\nassert check_type((3,3.0,3)) == True, \"All the elements in tuple are integer type\"\nassert check_type((1,2,\"a\")) == False, \"All the elements in tuple are string type\"\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef check_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    pass\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(\"Pass\" if (is_majority([1, 2, 3, 1], 4, 1) == True) else \"Fail\")\nprint(\"Pass\" if not (is_majority([1, 2, 3, 1], 4, 2) == True) else \"Fail\")\n\nprint(\"Pass\" if (is_majority([1, 1, 1, 2, 2], 5, 2) == True) else \"Fail\")\nprint(\"Pass\" if not (is_majority([1, 1, 1, 2, 2], 5, 1) == True) else \"Fail\")"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_majority([1,2,3,4,5,5,5,5,5,5], 10, 5) == True\nassert     is_majority([1,2,3,4,5,5,5,5,5,5,5,5], 10, 10) == False\nassert     is_majority([1,2,3,4,5,5,5,5,5,5,5,5], 10, 1) == True\n\ndef is_majority_c(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    pass\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    is_majority([1, 2, 3, 4, 5], 5, 3) == True\n    is_majority([1, 2, 3, 4, 5], 5, 6) == False\n    is_majority([1, 1, 2, 3], 2, 2) == False\n    is_majority([1, 1, 2, 3], 5, 3) == False\n    is_majority([1, 1, 2, 3], 5, 4) == True\n\ndef find_3rd_max(arr, n):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns the third maximum element in the given array. \n    '''\n    pass\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(\"correctness:\", is_majority([1,2,3,4], 4, 2))\nprint(\"correctness:\", is_majority([1,2,2,3,3,4,4,5], 5, 2))\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    is_majority([1,2,3,4,5], 4, 3) == True\n    is_majority([1,2,3,4,5], 5, 3) == False\n    is_majority([1,2,3,4,5], 5, 5) == True\n    is_majority([1,2,3,4,5], 5, 4) == False\n    is_majority([1,2,3,4,5], 5, 1) == False\n    is_majority([1,2,3,4,5], 5, 2) == True\n    is_majority([1,2,3,4,5], 5, 6) == False\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_Set_Bits(0) == 0\nassert     count_Set_Bits(1) == 1\nassert     count_Set_Bits(8) == 1\nassert     count_Set_Bits(63) == 2\nassert     count_Set_Bits(64) == 2\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_Set_Bits(0) == 0\nassert     count_Set_Bits(1) == 1\nassert     count_Set_Bits(2) == 2\nassert     count_Set_Bits(5) == 3\nassert     count_Set_Bits(6) == 4\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_Set_Bits(0) == 0\nassert     count_Set_Bits(1) == 1\nassert     count_Set_Bits(10) == 1\nassert     count_Set_Bits(11) == 2\nassert     count_Set_Bits(18) == 2\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_Set_Bits(3) == 0\nassert     count_Set_Bits(5) == 1\nassert     count_Set_Bits(12) == 2\nassert     count_Set_Bits(21) == 3\nassert     count_Set_Bits(123) == 2\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_Set_Bits(1) == 1, \"Input 1, expected 1\"\nassert     count_Set_Bits(10) == 1, \"Input 10, expected 1\"\nassert     count_Set_Bits(1023) == 2, \"Input 1023, expected 2\"\nassert     count_Set_Bits(1024) == 0, \"Input 1024, expected 0\"\nassert     count_Set_Bits(5) == 0, \"Input 5, expected 0\"\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_Set_Bits(2) == 0\nassert     count_Set_Bits(5) == 1\nassert     count_Set_Bits(7) == 2\nassert     count_Set_Bits(8) == 3\nassert     count_Set_Bits(12) == 2\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(count_Set_Bits(14))"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(\"check: count_Set_Bits\")\nprint(count_Set_Bits(14))\nprint(count_Set_Bits(10))\nprint(count_Set_Bits(32))\nprint(count_Set_Bits(1023))\n\ndef count_Set_Bits_v2(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    pass\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert odd_values_string('qwerty') == 'qwert'\nassert odd_values_string('qwerty') == 'qwert'\nassert odd_values_string('qwerty') == 'qwert'\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     odd_values_string(\"aabccbb\") == \"bcb\"\nassert     odd_values_string(\"aabccbbdd\") == \"bcbdd\"\nassert     odd_values_string(\"abcddcd\") == \"ddcd\"\nassert     odd_values_string(\"abcddcbd\") == \"ddcbd\"\nassert     odd_values_string(\"aabbccdd\") == \"ccdd\"\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     odd_values_string('abcd') == 'abcd', 'test 1 failed'\nassert odd_values_string('a123b') == '123a', 'test 2 failed'\nassert odd_values_string('a1b2c3d4e5f6g7h8i') == 'aehi', 'test 3 failed'\n\n\n\ndef multiple_strings(str1, str2):\n    '''\n    Write a python function to find the longest common substring between two given strings.\n    '''\n    pass\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     odd_values_string(\"Hello World\") == \"He  ll  Worl\"\nassert odd_values_string(\"Hola Mundo\") == \"Hola Mundo\"\nassert odd_values_string(\"aab\") == \"aab\"\nassert odd_values_string(\"\") == \"\"\nprint('You passed the test!')\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     odd_values_string('mississippi') =='mssis'\nassert     odd_values_string('ohio') == 'ohio'\nassert     odd_values_string('hollywood') == 'hol'\nassert     odd_values_string('hollywood') == 'hol'\nassert     odd_values_string('hollywood') == 'hol'\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     odd_values_string(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\") == \"acegikmoqsuwxyz\"\n\n\ndef find_max(seq):\n    '''\n    Write a python function to find the max of the values in a list.\n    '''\n    pass\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nodd_values_string('welcome') == 'weclm'\nassert odd_values_string('welcome ') == 'welcome '\nassert odd_values_string('welcome!') == 'welcom!'\nassert odd_values_string('welcome!') == 'welcom!'\nassert odd_values_string('abcdefghijklmnopqrstuvwxyz') == 'abcdeghijklmno'\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     odd_values_string(\"abcd\") == \"abcd\", \"Test failed\"\nassert     odd_values_string(\"abcde\") == \"abcde\", \"Test failed\"\nassert     odd_values_string(\"12345\") == \"\", \"Test failed\"\nassert odd_values_string(\"abcd\") == \"abcd\", \"Test failed\""
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     odd_values_string(\"python\") == \"p\"\nassert     odd_values_string(\"python5\") == \"p5\"\nassert     odd_values_string(\"hello\") == \"h\"\nassert     odd_values_string(\"sport\") == \"s\"\nassert     odd_values_string(\"\") == \"\"\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nodd_values_string(\"The rain in spain falls mainly in the plain\") == \"aiueo\"\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     min_of_three(1,2,3) == 1\nassert     min_of_three(3,3,3) == 3\nassert     min_of_three(2,2,2) == 2\nassert     min_of_three(1,1,1) == 1\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     min_of_three(1,2,3) == 1\nassert     min_of_three(3,2,3) == 2\nassert     min_of_three(3,2,1) == 1\nassert     min_of_three(3,1,2) == 1\nassert     min_of_three(1,1,1) == 1\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     min_of_three(1,2,3) == 1\nassert     min_of_three(3,2,3) == 1\nassert     min_of_three(3,3,3) == 3\nassert     min_of_three(-1,-2,-3) == -"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(\"You passed all the tests!\")\n\n'''\nReturn the minimum of three numbers.\n\nThe input will always be valid (except the last one).\n'''\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert min_of_three(1,2,3) == 1\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     min_of_three(10,20,30) == 30\nassert     min_of_three(2,2,2) == 2\nassert     min_of_three(-3,2,5) == -3\n\nprint(\"Test passed\""
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     min_of_three(1,2,3) == 1\nassert     min_of_three(-1,2,3) == -1\nassert     min_of_three(-5,-1,2) == -1\nassert     min_of_three(1,2,-3) == 1\nassert     min_of_three(1,2,3) == 1\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(min_of_three(1,2,3))\nprint(min_of_three(3,1,2))\nprint(min_of_three(3,3,1))\nprint(min_of_three(3,3,3))\n\nprint('\\n\\n\\n')"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert min_of_three(1,2,3) == 1\nassert min_of_three(5,2,3) == 2\nassert min_of_three(2,2,3) == 2\nassert min_of_three(1,5,3) == 1\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     min_of_three(4,5,6) == 1\nassert     min_of_three(3,5,9) == 3\nassert     min_of_three(7,2,3) == 2\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(n=5,l=1,r=10)==False\nassert     all_Bits_Set_In_The_Given_Range(n=4,l=2,r=10)==True\nassert     all_Bits_Set_In_The_Given_Range(n=5,l=0,r=1)==False\nassert     all_Bits_Set_In_The_Given_Range(n=5,l=2,r=5)==False\nassert     all_Bits_Set_In_The_Given_Range(n=10,l=0,r=1)==True\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(4,0,3) == False\nassert     all_Bits_Set_In_The_Given_Range(4,1,3) == True\nassert     all_Bits_Set_In_The_Given_Range(4,2,3) == False\nassert     all_Bits_Set_In_The_Given_Range(4,3,3) == True\nassert     all_Bits_Set_In_The_Given_Range(5,0,4) == True\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(n=7,l=5,r=6) == True\nassert all_Bits_Set_In_The_Given_Range(n=7,l=5,r=9) == False\nassert all_Bits_Set_In_The_Given_Range(n=2,l=1,r=1) == True\nassert all_Bits_Set_In_The_Given_Range(n=2,l=1,r=2) == False\nassert all_Bits_Set_In_The_Given_Range(n=2,l=2,r=3) == False\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(1,0,1) == False, 'test 1 failed'\nassert     all_Bits_Set_In_The_Given_Range(0,0,0) == True, 'test 2 failed'\nassert     all_Bits_Set_In_The_Given_Range(0,1,1) == True, 'test 3 failed'\nassert     all_Bits_Set_In_The_Given_Range(3,1,4) == False, 'test 4 failed'\nassert     all_Bits_Set_In_The_Given_Range(0,0,0) == True, 'test 5 failed'\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nall_Bits_Set_In_The_Given_Range(10,1,10) == False\nassert \nall_Bits_Set_In_The_Given_Range(5,1,4) == False\nassert \nall_Bits_Set_In_The_Given_Range(1,1,10) == True\n\n\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    pass\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(10,0,9) == True\nassert     all_Bits_Set_In_The_Given_Range(10,0,10) == False\nassert     all_Bits_Set_In_The_Given_Range(10,0,11) == True\nassert     all_Bits_Set_In_The_Given_Range(10,0,12) == True\nassert     all_Bits_Set_In_The_Given_Range(10,0,13) == True\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(8,0,7) == True, 'Wrong output'\nassert     all_Bits_Set_In_The_Given_Range(4,0,4) == False, 'Wrong output'\nassert     all_Bits_Set_In_The_Given_Range(1,0,1) == False, 'Wrong output'\n\nprint('All the tests in function all_Bits_Set_In_The_Given_Range passed')\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     all_Bits_Set_In_The_Given_Range(5,0,5) == True, \"Error 1\"\nassert     all_Bits_Set_In_The_Given_Range(5,0,4) == False, \"Error 2\"\nassert     all_Bits_Set_In_The_Given_Range(5,1,6) == True, \"Error 3\"\nassert     all_Bits_Set_In_The_Given_Range(5,0,0) == True, \"Error 4\"\nassert     all_Bits_Set_In_The_Given_Range(5,0,1) == False, \"Error 5\"\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     re_arrange_array([-1, 1, 2, 3, 4, 5, -1, -2], 3) == [-2, -1, 1, 2, 3, 4, 5, -1], \"Wrong\"\nassert     re_arrange_array([-2, -3, -1, 0, 1, 2], 2) == [-2, -1, 0, 1, 2, -3], \"Wrong\"\nassert     re_arrange_array([1, 2, -3, -4], 2) == [-4, 1, 2, -3], \"Wrong\"\nassert     re_arrange_array([-2, -3, -1, -4], 1) == [-1, 2, -3, -4], \"Wrong\"\nassert     re_arrange_array([-1, -2, -3, -4], 0) == [-1, -2, -3, -4], \"Wrong\"\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     re_arrange_array([0, 1, 0, -1, -1, -2, 1, 1, -3], 3) == [0, -1, 0, 1, -1, -2, -3, 1, 1, 0]\nassert     re_arrange_array([0, 1, 0, -1, -1, -2, 1, 1, -3], 5) == [0, -1, 1, 0, -1, 1, -2, -3, 1, 0]\nassert     re_arrange_array([0, 1, 0, -1, -1, -2, 1, 1, -3], 7) == [0, -1, 1, 0, -1, 1, -2, -3, 1, 0]\nassert     re_arrange_array([0, 1, 0, -1, -1, -2, 1, 1, -3], 8) == [0, -1, 1, 0, -1, 1, -2, -3, 1, 0]\nassert     re_arrange_array([0, 1, 0, -1, -1, -2, 1, 1, -3], 10) == [0, -1, 1, 0, -1, 1, -2, -3, 1, 0]\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     re_arrange_array([-1, -2, -3, 0, 1, 2, 3, 4, 5, 6], 5) == [-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6]\nassert     re_arrange_array([-1, -2, -3, 0, 1, 2, 3, 4, 5, 6], 3) == [-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6]\nassert     re_arrange_array([-1, -2, -3, 0, 1, 2, 3, 4, 5, 6], 2) == [-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6]\nassert     re_arrange_array([-1, -2, -3, 0, 1, 2, 3, 4, 5, 6], 1) == [-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6]\nassert     re_arrange_array([-1, -2, -3, 0, 1, 2, 3, 4, 5, 6], 0) == [-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6]\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     re_arrange_array([1, 2, 3, -1, 5, -4, 6], 2) == [-1, 1, 2, -1, 5, -4, 6], \"Wrong!\"\nassert     re_arrange_array([1, 2, 3, 4], 1) == [-1, 1, 2, 3, 4], \"Wrong!\"\nassert     re_arrange_array([1, -2, 3, -4], 2) == [-2, 1, 3, -4], \"Wrong!\"\n\n\n'''\n----------------------\nQuestion: implement a function that will identify if an array is a sub-sequence of a given array\n'''\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     re_arrange_array([5, 4, 3, 2, 1, 0], 5) == [-5, 4, 3, 2, 1, 0]\nassert     re_arrange_array([5, 4, 3, 2, 1, 0], 4) == [-5, -4, -3, -2, -1, 0]\nassert     re_arrange_array([5, 4, 3, 2, 1, 0], 3) == [-5, -4, -3, -2, -1, 0]\nassert     re_arrange_array([5, 4, 3, 2, 1, 0], 2) == [-5, -4, 3, 2, 1, 0]\nassert     re_arrange_array([5, 4, 3, 2, 1, 0], 1) == [-5, 4, 3, 2, 1, 0]\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef simple_test_re_arrange_array():\n    '''\n    To pass this test, your function should include a call to re_arrange_array that takes in two integer arguments, and re-arranges the array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    assert re_arrange_array([-1, -2, -3, -4, 5], 2) == [-4, -3, -2, -1, 5]\n    assert re_arrange_array([1, 2, -3, -4, -5], 2) == [1, 2, -3, -4, -5]\n    assert re_arrange_array([1, -2, -3, -4, 5], 1) == [-1, -2, -3, -4, 5]\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     re_arrange_array([-1, -5, -7, -9, -12, -13, -28, -34], 3) == [-13, -28, -12, -7, -5, -1, -9, -34]\nassert     re_arrange_array([-1, -5, -7, -9, -12, -13, -28, -34], 4) == [-12, -28, -34, -1, -5, -7, -9, -13]\n\ndef re_arrange_array_even_odd(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all even numbers appear before odd numbers, and where the relative order among even and odd elements is preserved.\n    '''\n    pass\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef rearrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    pass"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     replace_blank(\"\",'_') == \"\"\nassert     replace_blank(\"test\",'_') == \"test\"\nassert     replace_blank(\"hello\",'_') == \"hello\"\nassert     replace_blank(\"hi there\",'_') == \"hi_there\"\nassert     replace_blank(\"a\",'_') == \"a\"\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     replace_blank(\"\", \"a\") == \"a\"\nassert     replace_blank(\"123\", \"a\") == \"123\"\nassert     replace_blank(\"1 2 3\", \"a\") == \"1 a 2 3\"\nassert     replace_blank(\"1 2 3 4\", \"a\") == \"1 a 2 3 4\"\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     replace_blank('','') == ''\nassert     replace_blank('abc','') == 'abc'\nassert     replace_blank('abcd','') == 'abcd'\nassert     replace_blank('abcde','') == 'abcde'\nassert     replace_blank('abcd','') == 'abcd'\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     replace_blank('hello world', 'h') == 'hello world'\nassert     replace_blank('hello world','') == 'hello world'\nassert     replace_blank('hello world','') == 'hello world'\nassert     replace_blank('hello world','') == 'hello world'\nassert     replace_blank('hello world','') == 'hello world'\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     replace_blank(\"This is a string \", \"\") == \"This is a string\"\nassert     replace_blank(\"This is a string\", \"\") == \"This is a string\"\nassert     replace_blank(\"This is a string\", \" \") == \"Th i s a str i n g\"\nassert     replace_blank(\" \", \"\") == \"\"\nassert     replace_blank(\" \", \" \") == \" \"\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     replace_blank(\"\",'a') == 'a'\nassert     replace_blank(\"\",' ') ==''\nassert     replace_blank(\"\",'b') == 'b'\nassert     replace_blank(\" a \",' ') == 'a a'\nassert     replace_blank(\"a\",\"a\") == 'a a'\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     replace_blank('Mr John Smith    ','') == 'MrJohnSmith', \"Wrong Answer\"\nassert     replace_blank('John Smith','') == 'JohnSmith', \"Wrong Answer\"\nassert     replace_blank('','') == '', \"Wrong Answer\"\nassert     replace_blank('Mr John Smith    ','') == 'MrJohnSmith', \"Wrong Answer\"\nassert     replace_blank('Mr John Smith    ','') == 'MrJohnSmith', \"Wrong Answer\"\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     replace_blank('', 'x') == 'x'\nassert     replace_blank('a', 'x') == 'a'\nassert     replace_blank('abb', 'x') == 'abc'\nassert     replace_blank('abb c', 'x') == 'abc'\nassert     replace_blank('a aa', 'x') == 'a aa'\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return max(list1,key = lambda x: x[1])\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nlarg_nnum([1,2,3,4,5],2) == [4,5]\nassert \nlarg_nnum([1,2,3,4,5],5) == [5,4,3,2,1]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert larg_nnum([3,5,2,10,4,20,8,8,7],3) == [10,20,8], \"Your larg_nnum function does not work correctly.\"\n\ndef larg_nitems(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    pass\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     larg_nnum([1, 3, 5, 7, 11, 13, 17], 3) == [17, 11, 13]\nassert     larg_nnum([1, 3, 5, 7, 11, 13, 17], 1) == [17]\nassert     larg_nnum([1, 3, 5, 7, 11, 13, 17], 2) == [17, 11]\nassert     larg_nnum([1, 3, 5, 7, 11, 13, 17], 6) == [17, 11, 13, 17, 11, 13]\nassert     larg_nnum([1, 3, 5, 7, 11, 13, 17], 0) == []\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert larg_nnum([],0) == []\nassert larg_nnum([1],1) == [1]\nassert larg_nnum([1,2,3,4],1) == [4]\nassert larg_nnum([5,4,3,2,1],1) == [5]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     larg_nnum([3,8,9,5,7], 3) == [9,8,5]\nassert     larg_nnum([3,8,9,5,7], 2) == [9,8]\nassert     larg_nnum([3,8,9,5,7], 1) == [8,7]\nassert     larg_nnum([3,8,9,5,7], 0) == []\n\n\ndef small_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    pass\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nif __name__ == '__main__':\n    a = [1, 7, 3, 1, 2, 8, 3, 4, 5, 4]\n    assert larg_nnum(a, 2) == [8, 7]\n    print('Correct!'"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef heapq_test(func, test_inp, correct_out):\n    '''\n    You can assume the function you are testing will only receive lists with integer values, \n    and you cannot assume the numbers in those lists will be sorted in ascending order.\n    '''\n    import random\n    import timeit\n    list_n = []\n    #generate random number of ints\n    for i in range(1000):\n        list_n.append(random.randint(0,1000))\n    test_inp = test_inp[0]\n    correct_out = correct_out[0]\n    #test function\n    start = timeit.default_timer()\n    #use heapq to get the largest n numbers from the list_n\n    output = func(list_n, test_inp)\n    stop = timeit.default_timer()\n    print(\"time: \", stop - start)\n    assert output == correct_out\n\ndef test_larg_nnum():\n    print(\"\\n#########################\\ntest_larg_nnum\")\n    heapq_test(larg_nnum, ([2,3,1,5,7,2,4,6,8], 3), ([2,3,1,5,7,2,4,6,8],))\n    heapq_test(larg_nnum, ([1,4,3,2,7,5,8,6], 3), ([1,4,3,2,7,5,8,6],))\n    heapq_test(larg_nnum, ([3,2,5,6,1,4,8], 4), ([3,2,5,6,1,4,8],))\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     larg_nnum([-1, 2, 3, 4, -2, 4, 2, 4, -3, -4, -1], 2) == [-4, -3, -2, -1]\nassert     larg_nnum([-1, 2, 3, 4, -2, 4, 2, 4, -3, -4, -1], 4) == [-1, 2, 3, 4]\nassert     larg_nnum([-1, 2, 3, 4, -2, 4, 2, 4, -3, -4, -1], 5) == [-1, 2, 3, 4, -2]\nassert     larg_nnum([-1, 2, 3, 4, -2, 4, 2, 4, -3, -4, -1], 6) == [-1, 2, 3, 4, -2, -3]\nassert     larg_nnum([-1, 2, 3, 4, -2, 4, 2, 4, -3, -4, -1], 7) == [-1, 2, 3, 4, -2, -3, -4]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    pass\n\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     lateralsuface_cylinder(3,1) == 2*pi*3*1, \"Wrong\"\nassert     lateralsuface_cylinder(1,1) == pi*2, \"Wrong\"\nassert     lateralsuface_cylinder(0.5,1) == pi*2, \"Wrong\"\nassert     lateralsuface_cylinder(2,1) == pi*2*0.5, \"Wrong\"\nassert     lateralsuface_cylinder(4,1) == pi*2*0.5*2, \"Wrong\"\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     lateralsuface_cylinder(10,5) == 20.5, \"Failed\"\nassert     lateralsuface_cylinder(10,4) == 16.0, \"Failed\"\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(\"\\n====== TEST 5 ======\\n\")\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint('Test case passed:')\nprint('The program should print the area of the lateral surface of a cylinder of radius r and height h.')\nprint('For example, if h = 2, r = 1, then the lateral surface area is 2*pi*r^2.')\nprint('If r or h is less than 0, the program should print the message \"ERROR: value must be greater than 0\".')"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     lateralsuface_cylinder(2,3) == 2.5\nassert     lateralsuface_cylinder(1,5) == 5\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     lateralsuface_cylinder(0.1,2) == 0.01\n\ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    pass\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint('PASS') if lateralsuface_cylinder(5,5) == 80 else print('FAIL')\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(lateralsuface_cylinder(2,1.0))\nprint(lateralsuface_cylinder(1.5,1.0))\nprint(lateralsuface_cylinder(1,1.0))\nprint(lateralsuface_cylinder(2,2))\n\nprint('\\n\\n*****Task 4*****\\n')\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nlateralsuface_cylinder(1,1) == 1\nassert \nlateralsuface_cylinder(1,2) == 1.5\nassert \nlateralsuface_cylinder(2,3) == 3.4\nassert \nlateralsuface_cylinder(4,3) == 9\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     volume_cube(5) == 125\nassert     volume_cube(3) == 27\nassert     volume_cube(1) == 1\nassert     volume_cube(0) == 0\nprint(\"YOUR CODE IS CORRECT!\")"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     volume_cube(1) == 1\nassert     volume_cube(3) == 27\nassert     volume_cube(10) == 1000\nassert     volume_cube(20) == 2000\nassert     volume_cube(22) == 4104\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     volume_cube(4) == 64\nassert     volume_cube(8) == 128\nassert     volume_cube(10) == 1000\n\ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder given its radius and its height.\n    '''\n    pass\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nvolume_cube(2) == 8\nvolume_cube(3) == 27\nvolume_cube(5) == 125\n\n'''\nWrite a function to find the volume of a cube given its side length.\n\nThe function should return an error message if the value is less than 0.\n'''\ndef volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    \n    The function should return an error message if the value is less than 0.\n    '''\n    pass\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     volume_cube(1) == 1\nassert     volume_cube(2) == 8\nassert     volume_cube(3) == 27\nassert     volume_cube(4) == 64\nassert     volume_cube(5) == 125\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     volume_cube(1) == 1\nassert     volume_cube(4) == 8\nassert     volume_cube(10) == 1000\nassert     volume_cube(100) == 10000\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \neven_bit_set_number(11) == 5\neven_bit_set_number(15) == 10\neven_bit_set_number(30) == 22\neven_bit_set_number(50) == 12\n\ndef even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (n - 1)\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     even_bit_set_number(0b11110000) == 0b00000000\nassert even_bit_set_number(0b11110001) == 0b00000001\nassert even_bit_set_number(0b11100000) == 0b00000010\nassert even_bit_set_number(0b11111100) == 0b00000011\nassert even_bit_set_number(0b11010100) == 0b00000100\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \neven_bit_set_number(3) == 3\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \neven_bit_set_number(2) == 2\nassert even_bit_set_number(8) == 4\nassert even_bit_set_number(1) == 1\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     even_bit_set_number(12) == True\nassert     even_bit_set_number(11) == False\nassert     even_bit_set_number(8) == False\n\ndef odd_bit_set_number(n):\n    '''\n    Write a python function to set all odd bits of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     even_bit_set_number(0) == 0\nassert     even_bit_set_number(1) == 1\nassert     even_bit_set_number(2) == 1\nassert     even_bit_set_number(3) == 0\nassert     even_bit_set_number(4) == 0\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \neven_bit_set_number(3) == 2\neven_bit_set_number(5) == 6\neven_bit_set_number(33) == 32\neven_bit_set_number(300000000) == 8\neven_bit_set_number(100000000) == 1\neven_bit_set_number(-1) == 1\neven_bit_set_number(0) == 0\neven_bit_set_number(9) == 1\neven_bit_set_number(1) == 2\neven_bit_set_number(-2) == 1\neven_bit_set_number(-9) == 1\neven_bit_set_number(-1) == 2\neven_bit_set_number(10) == 1\neven_bit_set_number(-10) == 1\neven_bit_set_number(2**127 - 1) == 0\neven_bit_set_number(2**127) == 128\neven_bit_set_number(2**128 - 1) == 1\neven_bit_set_number(2**128) == 256\neven_bit_set_number(2**255 - 1) == 1\neven_bit_set_number(2**255) == 512\neven_bit_set_number(2**512 - 1) == 0\neven_bit_set_number(2**512) == 1024\neven_bit_set_number(2**1023 - 1) == 1\neven_bit_set_number(2**1023) == 2048\neven_bit_set_number(2**2047 - 1) == 1\neven_bit_set_number(2**2047) == 4096\neven_bit_set_number(2**4095 - 1) == 1\neven_bit_set_number(2**4095) == 8192\neven_bit_set_number(2**8192 - 1) == 1\neven_bit_set_number(2**8192) == 16384\neven_bit_set_number(2**16384 - 1) == 1\neven_bit_set_number(2**16384) == 32768\neven_bit_set_number(2**32768 - 1) == 1\neven_bit_set_number(2**32768) == 65536\neven_bit_set_number(2**65536 - 1) == 1\neven_bit_set_number(2**65536) == 131072\neven_bit_set_number(2**131072 - 1) == 1\neven_bit_set_number(2**131072) == 262144\neven_bit_set_number(2**262144 - 1) == 1\neven_bit_set_number(2**262144) == 524288\neven_bit_set_number(2**524288 - 1) == 1\neven_bit_set_number(2**524288) == 1048576\neven_bit_set_number(2**1048576 - 1) == 1\neven_bit_set_number(2**1048576) == 2097152\neven_bit_set_number(2**2097152 - 1) == 1\neven_bit_set_number(2**2097152) == 4194304\neven_bit_set_number(2**4194304 - 1) == 1\neven_bit_set_number(2**4194304) == 8388608\neven_bit_set_number(2**8388608 - 1) == 1\neven_bit_set_number(2**8388608) == 16777216\neven_bit_set_number(2**16777216 - 1) == 1\neven_bit_set_number(2**16777216) == 33554432\neven_bit_set_number(2**33554432 - 1) == 1\neven_bit_set_number(2**33554432) == 67108864\neven_bit_set_number(2**67108864 - 1) == 1\neven_bit_set_number(2**67108864) == 134217728\neven_bit_set_number(2**134217728 - 1) == 1\neven_bit_set_number(2**134217728) == 268435456\neven_bit_set_number(2**268435456 - 1) == 1\neven_bit_set_number(2**268435456) == 536870912\neven_bit_set_number(2**536870912 - 1) == 1\neven_bit_set_number(2**536870912) == 1073741824\neven_bit_set_number(2**1073741824 - 1) == 1\neven_bit_set_number(2**1073741824) == 2147483648\neven_bit_set_number(2**2147483648 - 1) == 1\neven_bit_set_number(2**2147483648) == 4294967296\neven_bit_set_number(2**4294967296 - 1) == 1\neven_bit_set_number(2**4294967296) == 8589934592\neven_bit_set_number(2**8589934592 - 1) == 1\neven_bit_set_number(2**8589934592) == 17592186044416\neven_bit_set_number(2**17592186044416 - 1) == 1\neven_bit_set_number(2**17592186044416) == 34359738368\neven_bit_set_number(2**34359738368 - 1) == 1\neven_bit_set_number(2**34359738368) == 68719476736\neven_bit_set_number(2**68719476736 - 1) == 1\neven_bit_set_number(2**68719476736) == 137438953472\neven_bit_set_number(2**137438953472 - 1) == 1\neven_bit_set_number(2**137438953472) == 274877906944\neven_bit_set_number(2**274877906944 - 1) == 1\neven_bit_set_number(2**274877906944) == 549755813888\neven_bit_set_number(2**549755813888 - 1) == 1\neven_bit_set_number(2**549755813888) == 107374182400\neven_bit_set_number(2**107374182400 - 1) == 1\neven_bit_set_number(2**107374182400) == 214748364800\neven_bit_set_number(2**214748364800 - 1) == 1\neven_bit_set_number(2**214748364800) == 429496729600\neven_bit_set_number(2**429496729600 - 1) == 1\neven_bit_set_number(2**429496729600) == 8589934592000\neven_bit_set_number(2**8589934592000 - 1) == 1\neven_bit_set_number(2**8589934592000) == 17592186044416000\neven_bit_set_number(2**17592186044416000 - 1) == 1\neven_bit_set_number(2**17592186044416000) == 33554432000\neven_bit_set_number(2**33554432000 - 1) == 1\neven_bit_set_number(2**33554432000) == 67108864000\neven_bit_set_number(2**67108864000 - 1) == 1\neven_bit_set_number(2**67108864000) == 134217728000\neven_bit_set_number(2**134217728000 - 1) == 1\neven_bit_set_number(2**134217728000) == 268435456000\neven_bit_set_number(2**268435456000 - 1) == 1\neven_bit_set_number(2**268435456000) == 53687091200\neven_bit_set_number(2**53687091200 - 1) == 1\neven_bit_set_number(2**53687091200) == 1073741824000\neven_bit_set_number(2**1073741824000 - 1) == 1\neven_bit_set_number(2**107374182"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     even_bit_set_number(10) == 0b00110000\nassert     even_bit_set_number(0) == 0b00000000\nassert     even_bit_set_number(1) == 0b00000001\nassert     even_bit_set_number(2) == 0b00000010\nassert     even_bit_set_number(3) == 0b00000100\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_occurences([('a',2),('a',3),('b',1),('c',3)]) == {('a',2):1, ('b',1):1, ('c',3):1}\nassert     check_occurences([('a',2),('a',3),('b',1),('a',3)]) == {('a',2):2, ('a',3):2, ('b',1):1, ('a',3):1}\nassert     check_occurences([('a',2),('a',3),('b',1),('a',3)]) == {('a',2):2, ('a',3):2, ('b',1):1, ('a',3):1}\nassert     check_occurences([('a',2),('a',3),('b',1),('a',3)]) == {('a',2):2, ('a',3):2, ('b',1):1, ('a',3):1}\nassert     check_occurences([('a',2),('a',3),('b',1),('a',3)]) == {('a',2):2, ('a',3):2, ('b',1):1, ('a',3):1}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(check_occurences([(1, 1), (1, 1), (2, 1), (1, 2), (1, 2), (1, 2), (2, 2), (2, 2), (1, 3)])) # {(1, 1): 3, (2, 1): 1, (1, 2): 3, (1, 3): 1}\nprint(check_occurences([(1, 1), (1, 1), (2, 1), (1, 2), (1, 2), (1, 2), (2, 2), (2, 2), (1, 3)])) # {(1, 1): 2, (2, 1): 1, (1, 2): 3, (1, 3): 1}\nprint(check_occurences([(1, 1), (1, 1), (2, 1), (1, 2), (1, 2), (1, 2), (2, 2), (2, 2), (1, 3)])) # {(1, 1): 3, (2, 1): 1, (1, 2): 2, (1, 3): 1}\nprint(check_occurences([(1, 1), (1, 1), (2, 1), (1, 2), (1, 2), (1, 2), (2, 2), (2, 2), (1, 3)])) # {(1, 1): 3, (2, 1): 1, (1, 2): 3, (1, 3): 1}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_occurences([(1,2),(1,3),(2,4),(3,4),(3,5),(4,5)]) == Counter({(1,2):2, (1,3):1, (2,4):2, (3,4):2, (3,5):1, (4,5):1}) \nassert     check_occurences([(1,2),(1,3),(2,4),(3,4),(3,5),(4,5)]) == Counter({(1,2):2, (1,3):1, (2,4):2, (3,4):2, (3,5):1, (4,5):1}) \nassert     check_occurences([(1,2),(1,3),(2,4),(3,4),(3,5),(4,5)]) == Counter({(1,2):2, (1,3):1, (2,4):2, (3,4):2, (3,5):1, (4,5):1}) \nassert     check_occurences([(1,2),(1,3),(2,4),(3,4),(3,5),(4,5)]) == Counter({(1,2):2, (1,3):1, (2,4):2, (3,4):2, (3,5):1, (4,5):1}) \nassert     check_occurences([(1,2),(1,3),(2,4),(3,4),(3,5),(4,5)]) == Counter({(1,2):2, (1,3):1, (2,4):2, (3,4):2, (3,5):1, (4,5):1}) \n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_occurences([(1,2),(1,3),(1,4),(2,4),(2,4),(2,5),(3,5),(4,5)]) == \\\n            {\n            (1,2): 2,\n            (1,3): 1,\n            (1,4): 1,\n            (2,4): 2,\n            (2,5): 1,\n            (3,5): 1\n        }, 'Your function does not have the correct output'\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(check_occurences([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)])) == {('a', 1): 1, ('b', 2): 1, ('c', 3): 1, ('d', 4): 1, ('e', 5): 1}\nprint(check_occurences([('a', 1), ('a', 2), ('a', 3), ('a', 4), ('a', 5)])) == {('a', 1): 5, ('a', 2): 2, ('a', 3): 1, ('a', 4): 1, ('a', 5): 1}\nprint(check_occurences([('a', 1), ('b', 2), ('c', 3), ('c', 4), ('c', 5)])) == {('a', 1): 3, ('b', 2): 1, ('c', 3): 2, ('c', 4): 1, ('c', 5): 1}\nprint(check_occurences([('a', 1), ('a', 2), ('a', 3), ('a', 4), ('a', 5), ('a', 6), ('b', 7), ('c', 8), ('d', 9), ('e', 10), ('f', 11)])) == {('a', 1): 5, ('a', 2): 5, ('a', 3): 5, ('a', 4): 5, ('a', 5): 5, ('a', 6): 5, ('b', 7): 1, ('c', 8): 1, ('d', 9): 1, ('e', 10): 1, ('f', 11): 1}\nprint(check_occurences([(1, 2), (2, 3), (3, 4), (4, 5)])) == {(1, 2): 2, (2, 3): 1, (3, 4): 1, (4, 5): 1}\nprint(check_occurences([])) == {}\nprint(check_occurences([(1, 2, 3), (1, 2, 3), (1, 2, 3)])) == {(1, 2, 3): 3}\n\n\ndef check_occurences_1(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for i in test_list:\n        result[i] = result.get(i, 0) + 1\n    return result\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_occurences([(1,2,3), (1,2,3), (1,2,3), (1,2,3), (1,2,3)]) == {(1, 2, 3): 4}, 'test1 fails'\nassert     check_occurences([(1,2,3), (1,2,3), (1,2,3), (1,2,3)]) == {(1, 2, 3): 4}, 'test2 fails'\nassert     check_occurences([(1,2,3), (1,2,3), (1,2,3), (1,2,3), (1,2,3)]) == {(1, 2, 3): 4}, 'test3 fails'\nassert     check_occurences([]) == {}, 'test4 fails'\nassert     check_occurences([(1,2,3), (1,2,3), (1,2,3)]) == {(1, 2, 3): 3}, 'test5 fails'\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_occurences([(1,1),(2,3),(2,2)]) == {(1,1):1,(2,3):1,(2,2):1}\n\nassert     check_occurences([(1,1),(2,2),(2,3)]) == {(1,1):2,(2,2):1,(2,3):1}\n\nassert     check_occurences([(1,1),(2,2),(2,2),(2,3)]) == {(1,1):2,(2,2):2,(2,3):1}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_occurences(test_list) == {('test',): 2, ('test2',): 1, ('test3',): 1}\n\ntest_list = [('test',), ('test2',), ('test3',), ('test',)]\n\ndef check_occurences2(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Your Code Here\n    pass\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     number_of_substrings('aabcaab') == 4\nassert     number_of_substrings('ab') == 2\nassert     number_of_substrings('abc') == 3\nassert     number_of_substrings('abcabcabc') == 6\nassert     number_of_substrings('aababcab') == 5\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     number_of_substrings('abc') == 3, 'wrong output'\nassert     number_of_substrings('abc') == 3, 'wrong output'\nassert     number_of_substrings('abc') == 3, 'wrong output'\nassert     number_of_substrings('abc') == 0, 'wrong output'\nassert     number_of_substrings('abc') == 0, 'wrong output'\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nnumber_of_substrings(\"abc\") == 1\nnumber_of_substrings(\"abd\") == 2\nnumber_of_substrings(\"\") == 0\nnumber_of_substrings(\"abcabc\") == 3\nnumber_of_substrings(\"abcabcabc\") == 4\n\ndef number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        for j in range(i+1,len(str)+1):\n            if str[i:j]!= \"\":\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     number_of_substrings('aaa') == 2, 'Test 1 failed'\nassert     number_of_substrings('abac') == 3, 'Test 2 failed'\nassert     number_of_substrings('a') == 1, 'Test 3 failed'\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nnumber_of_substrings('abc') == 1\nassert \nnumber_of_substrings('hello') == 1\nassert \nnumber_of_substrings('hellooo') == 3\nassert \nnumber_of_substrings('hellooooo') == 6\nassert\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert number_of_substrings(\"\") == 0\nassert number_of_substrings(\"a\") == 1\nassert number_of_substrings(\"ab\") == 2\nassert number_of_substrings(\"abcd\") == 2\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n\ndef number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(0,len(str)-1):\n        if str[i]!= str[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     number_of_substrings('abc') == 0, \"First test\"\nassert     number_of_substrings('ab') == 1, \"Second test\"\nassert     number_of_substrings('abcd') == 3, \"Third test\"\nassert     number_of_substrings('abcde') == 4, \"Fourth test\"\nassert     number_of_substrings('abcdef') == 7, \"Fifth test\"\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     number_of_substrings(\"abcd\") == 0, \"wrong\"\nassert     number_of_substrings(\"a\") == 1, \"wrong\"\nassert     number_of_substrings(\"ab\") == 1, \"wrong\"\nassert     number_of_substrings(\"abc\") == 3, \"wrong\"\nassert     number_of_substrings(\"abcdabc\") == 4, \"wrong\"\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_total_number_of_sequences(2,2) == 2, \"Wrong result\"\nassert     get_total_number_of_sequences(2,3) == 5, \"Wrong result\"\nassert     get_total_number_of_sequences(2,4) == 7, \"Wrong result\"\nassert     get_total_number_of_sequences(3,2) == 2, \"Wrong result\"\nassert     get_total_number_of_sequences(3,3) == 6, \"Wrong result\"\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_total_number_of_sequences(4, 2) == 7\nassert     get_total_number_of_sequences(4, 4) == 32\nassert     get_total_number_of_sequences(4, 3) == 12\nassert     get_total_number_of_sequences(5, 1) == 0\nassert     get_total_number_of_sequences(7, 2) == 11\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_total_number_of_sequences(5,4) ==     20, 'Failed test case'\nassert     get_total_number_of_sequences(5,4) ==     16, 'Failed test case'\nassert     get_total_number_of_sequences(5,4) ==     24, 'Failed test case'\nassert     get_total_number_of_sequences(10,4) ==     192, 'Failed test case'\nassert     get_total_number_of_sequences(10,4) ==     192, 'Failed test case'\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_total_number_of_sequences(0,0) == 0\nassert     get_total_number_of_sequences(3,2) == 4\nassert     get_total_number_of_sequences(5,4) == 10\n\ndef get_total_number_of_sequences_with_2(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    pass\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_total_number_of_sequences(100,3) == 53, \"failed\"\nassert     get_total_number_of_sequences(100,2) == 30, \"failed\"\nassert     get_total_number_of_sequences(100,1) == 10, \"failed\"\nassert     get_total_number_of_sequences(2,2) == 1, \"failed\"\nassert     get_total_number_of_sequences(2,3) == 1, \"failed\"\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_total_number_of_sequences(2, 5) == 11, 'Wrong result'\nassert     get_total_number_of_sequences(1, 1) == 1, 'Wrong result'\nassert     get_total_number_of_sequences(3, 3) == 24, 'Wrong result'\nassert     get_total_number_of_sequences(10, 4) == 913, 'Wrong result'\nassert     get_total_number_of_sequences(100, 10) == 10255670, 'Wrong result'\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_total_number_of_sequences(4,3) == 3\nassert     get_total_number_of_sequences(5,3) == 0\nassert     get_total_number_of_sequences(7,3) == 6\nassert     get_total_number_of_sequences(8,3) == 12\nassert     get_total_number_of_sequences(9,3) == 12\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_total_number_of_sequences(2,0) == 1\nassert     get_total_number_of_sequences(2,1) == 0\nassert     get_total_number_of_sequences(10,2) == 3\nassert     get_total_number_of_sequences(10,3) == 4\nassert     get_total_number_of_sequences(10,4) == 5\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef get_total_number_of_sequences_with_one_odd_number(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    HINT: Use the same method you have used to find the total number of possible sequences of length n, but start with n = 1.\n    '''\n    pass\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_total_number_of_sequences(0,0) == 0\nassert     get_total_number_of_sequences(1,1) == 1\nassert     get_total_number_of_sequences(2,3) == 7\nassert     get_total_number_of_sequences(1,1) == 1\nassert     get_total_number_of_sequences(10,3) == 568\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     replace_list(['a','b','c'],['d','e','f']) == ['a','b','d']\nassert     replace_list(['a','b','c'],['d','e']) == ['a','b','d']\nassert     replace_list(['a','b','c'],['e','a']) == ['b','c','e']\nassert     replace_list(['a','b','c'],['a','e']) == ['b','c','e']\nassert     replace_list(['a','b','c'],['c','d','e','f']) == ['a','b','c','d','e','f']\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     replace_list([1,2,3,4],[1,2,3]) == [1,2,3,1,2,3]\nassert     replace_list([1,2,3,4],[1,2,4]) == [1,2,1,2,4]\nassert     replace_list([1,2,3,4,5],[1,2,3]) == [1,2,3,1,2,3,1,2,3,1,2,3]\nassert     replace_list([1,2,3,4,5],[1,2,3,4]) == [1,2,3,1,2,3,1,2,3,1,2,3]\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     replace_list([1,2,3,4], [10,20,30,40]) == None\nassert     replace_list([1,2,3,4], ['a','b','c']) == None\nassert     replace_list([1,2], ['a','b']) == ['a',2]\nassert     replace_list([], ['a',2]) == ['a',2]\nassert     replace_list([], ['a',2]) == ['a',2]\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     replace_list(['a','b','c'],['x','y','z'])==['a','b','c','x','y','z']\nassert     replace_list(['1','2','3'],['x','y','z'])==['1','2','3','x','y','z']\nassert     replace_list(['a','b','c'],['x','y','z'])==['a','b','c','x','y','z']\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     replace_list([1,2,3],[4,5,6]) == [1,2,6]\nassert     replace_list([],[]) == []\nassert     replace_list([1,2,3],[3,4,5]) == [1,2,4]\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     replace_list([1, 2, 3, 4, 5, 6, 7, 8], [4, 5, 6, 7, 8, 9, 10, 11]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nassert     replace_list([1, 2, 3, 4, 5, 6, 7, 8], [3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert     replace_list([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     replace_list([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert     replace_list([1, 2, 3, 4, 5, 6, 7, 8], [2, 3, 4]) == [1, 2, 3, 4, 5, 6, 7, 8]\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     replace_list([1,2,3,4], [4,3,2,1]) == None,'replace_list failed'\nassert     replace_list([2,4,6,8], [4,3,5,7]) == None,'replace_list failed'\nassert     replace_list([], [4,3,5,7]) == None,'replace_list failed'\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     replace_list([1,2,3,4,5],    [1,2,3,4,5,6]) == None\nassert     replace_list([],    []) == None\nassert     replace_list([1,2,3,4],    []) == None\nassert     replace_list([1,2,3],    [4]) == None\nassert     replace_list([1,2,3],    [1,2,3]) == None\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nreplace_list([1,2,3],[4,5,6]) == None\nreplace_list([1,2,3],[4,5,6,7]) == [1,2,3,4,5,6,7]\nreplace_list([1,2,3],[4,5,6,7,8]) == [1,2,3,4,5,6,7,8,9]\nreplace_list([1,2,3],[4,5,6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\nreplace_list([1,2,3],[4,5,6,7,8,9,10,11,12,13,14,15,16]) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]\nreplace_list([1,2,3],[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nreplace_list([1,2,3],[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) == None\nreplace_list([1,2,3],[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]) == None\nreplace_list([1,2,3],[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]) == None\nreplace_list([1,2,3],[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]) == None\nreplace_list([1,2,3],[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == None\nreplace_list([1,2,3],[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) == None\nreplace_list([1,2,3],[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]) == None\nreplace_list([1,2,3],[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]) == None\nreplace_list([1,2,3],[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]) == None\nreplace_list([1,2,3],[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]) == None\nreplace_list([1,2,3],[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]) == None\nreplace_list([1,2,3],[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]) == None\nreplace_list([1,2,3],[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33]) == None\nreplace_list([1,2,3],[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34]) == None\nreplace_list([1,2,3],[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35]) == None\nreplace_list([1,2,3],[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36]) == None\nreplace_list([1,2,3],[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37]) == None\nreplace_list([1,2,3],[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38]) == None\nreplace_list([1,2,3],[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39]) == None\nreplace_list([1,2,3],[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40]) == None\nreplace_list([1,2,3],[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41]) == None\nreplace_list([1,2,3],[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42]) == None\nreplace_list([1,2,3],[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43]) == None\nreplace_list([1,2,3],[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,2"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert count_charac('test string') == 5, 'Test 1 failed!'\nassert count_charac('testing') == 5, 'Test 2 failed!'\nassert count_charac('tes') == 2, 'Test 3 failed!'\nassert count_charac('testing') == 5, 'Test 4 failed!'\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_charac(\"I am a programmer\") == 5\nassert     count_charac(\"hello world\") == 12\n\ndef count_charac_count(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_charac(\"\") == 0\nassert     count_charac(\"a\") == 1\nassert     count_charac(\"aa\") == 2\nassert     count_charac(\"ab\") == 2\nassert     count_charac(\"abc\") == 3\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nassert count_charac('123') == 3\nassert count_charac('foobar') == 6\nassert count_charac('123123123') == 9\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint(count_charac('hello world'))\nprint(count_charac('python'))\nprint(count_charac('\\n'))\nprint(count_charac(''))"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    pass\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_charac(\"Helloworld\") == 16\nassert     count_charac(\"hello\") == 5\nassert     count_charac(\"\") == 0\n\n\ndef check_palindrome(str1):\n    '''\n    Write a function to check if a string is a palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_charac(\"apple\") == 5\nassert     count_charac(\"app\") == 2\nassert     count_charac(\"app\") == 2\nassert     count_charac(\"\") == 0\nassert     count_charac(\"   \") == 0\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_charac(\"hello\") == 5, \"function does not count the correct amount of characters\"\nassert count_charac(\"Hello World\") == 15, \"function does not count the correct amount of characters\"\nassert count_charac(\"1234567890\") == 24, \"function does not count the correct amount of characters\"\nassert count_charac(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\" == count_charac(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"), \"function does not count the correct amount of characters\"\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(next_Perfect_Square(5))\nprint(next_Perfect_Square(7))\nprint(next_Perfect_Square(100))\nprint(next_Perfect_Square(12))\nprint(next_Perfect_Square(25))\nprint(next_Perfect_Square(18))\n\n\n\ndef next_Perfect_Square_rec(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N==1:\n        return N\n    if N==0:\n        return 0\n    if N%2==0:\n        return N\n    else:\n        # print(next_Perfect_Square_rec(N-1))\n        return int(math.pow(2,math.ceil(math.log2(N+1))-1))"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(\"Next perfect square greater than a given number:\", next_Perfect_Square(4))\nprint(\"Next perfect square greater than a given number:\", next_Perfect_Square(5))\nprint(\"Next perfect square greater than a given number:\", next_Perfect_Square(9))\nprint(\"Next perfect square greater than a given number:\", next_Perfect_Square(12))\n\n'''\nnext_Perfect_Square(4) should return 5\nnext_Perfect_Square(5) should return 5\nnext_Perfect_Square(9) should return 11\nnext_Perfect_Square(12) should return 13\n\nnext_Perfect_Square(4) should return 5\nnext_Perfect_Square(5) should return 5\nnext_Perfect_Square(9) should return 11\nnext_Perfect_Square(12) should return 13\n'''\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(next_Perfect_Square(9)) \nprint(next_Perfect_Square(16)) \nprint(next_Perfect_Square(25))\nprint(next_Perfect_Square(32))\nprint(next_Perfect_Square(60))\nprint(next_Perfect_Square(91))\nprint(next_Perfect_Square(97))\nprint(next_Perfect_Square(109))\nprint(next_Perfect_Square(123))\nprint(next_Perfect_Square(130))\nprint(next_Perfect_Square(135))\nprint(next_Perfect_Square(146))\nprint(next_Perfect_Square(153))\nprint(next_Perfect_Square(159))\nprint(next_Perfect_Square(168))\nprint(next_Perfect_Square(177))\nprint(next_Perfect_Square(185))\nprint(next_Perfect_Square(187))\nprint(next_Perfect_Square(194))\nprint(next_Perfect_Square(199))\nprint(next_Perfect_Square(201))\nprint(next_Perfect_Square(205))\nprint(next_Perfect_Square(207))\nprint(next_Perfect_Square(209))\nprint(next_Perfect_Square(211))\nprint(next_Perfect_Square(213))\nprint(next_Perfect_Square(215))\nprint(next_Perfect_Square(217))\nprint(next_Perfect_Square(219))\nprint(next_Perfect_Square(221))\nprint(next_Perfect_Square(223))\nprint(next_Perfect_Square(225))\nprint(next_Perfect_Square(227))\nprint(next_Perfect_Square(229))\nprint(next_Perfect_Square(231))\nprint(next_Perfect_Square(233))\nprint(next_Perfect_Square(235))\nprint(next_Perfect_Square(237))\nprint(next_Perfect_Square(239))\nprint(next_Perfect_Square(241))\nprint(next_Perfect_Square(243))\nprint(next_Perfect_Square(245))\nprint(next_Perfect_Square(247))\nprint(next_Perfect_Square(249))\nprint(next_Perfect_Square(251))\nprint(next_Perfect_Square(253))\nprint(next_Perfect_Square(255))\nprint(next_Perfect_Square(257))\nprint(next_Perfect_Square(259))\nprint(next_Perfect_Square(261))\nprint(next_Perfect_Square(263))\nprint(next_Perfect_Square(265))\nprint(next_Perfect_Square(267))\nprint(next_Perfect_Square(269))\nprint(next_Perfect_Square(271))\nprint(next_Perfect_Square(273))\nprint(next_Perfect_Square(275))\nprint(next_Perfect_Square(277))\nprint(next_Perfect_Square(279))\nprint(next_Perfect_Square(281))\nprint(next_Perfect_Square(283))\nprint(next_Perfect_Square(285))\nprint(next_Perfect_Square(287))\nprint(next_Perfect_Square(289))\nprint(next_Perfect_Square(291))\nprint(next_Perfect_Square(293))\nprint(next_Perfect_Square(295))\nprint(next_Perfect_Square(297))\nprint(next_Perfect_Square(299))\nprint(next_Perfect_Square(301))\nprint(next_Perfect_Square(303))\nprint(next_Perfect_Square(305))\nprint(next_Perfect_Square(307))\nprint(next_Perfect_Square(309))\nprint(next_Perfect_Square(311))\nprint(next_Perfect_Square(313))\nprint(next_Perfect_Square(315))\nprint(next_Perfect_Square(317))\nprint(next_Perfect_Square(319))\nprint(next_Perfect_Square(321))\nprint(next_Perfect_Square(323))\nprint(next_Perfect_Square(325))\nprint(next_Perfect_Square(327))\nprint(next_Perfect_Square(329))\nprint(next_Perfect_Square(331))\nprint(next_Perfect_Square(333))\nprint(next_Perfect_Square(335))\nprint(next_Perfect_Square(337))\nprint(next_Perfect_Square(339))\nprint(next_Perfect_Square(341))\nprint(next_Perfect_Square(343))\nprint(next_Perfect_Square(345))\nprint(next_Perfect_Square(347))\nprint(next_Perfect_Square(349))\nprint(next_Perfect_Square(351))\nprint(next_Perfect_Square(353))\nprint(next_Perfect_Square(355))\nprint(next_Perfect_Square(357))\nprint(next_Perfect_Square(359))\nprint(next_Perfect_Square(361))\nprint(next_Perfect_Square(363))\nprint(next_Perfect_Square(365))\nprint(next_Perfect_Square(367))\nprint(next_Perfect_Square(369))\nprint(next_Perfect_Square(371))\nprint(next_Perfect_Square(373))\nprint(next_Perfect_Square(375))\nprint(next_Perfect_Square(377))\nprint(next_Perfect_Square(379))\nprint(next_Perfect_Square(381))\nprint(next_Perfect_Square(383))\nprint(next_Perfect_Square(385))\nprint(next_Perfect_Square(387))\nprint(next_Perfect_Square(389))\nprint(next_Perfect_Square(391))\nprint(next_Perfect_Square(393))\nprint(next_Perfect_Square(395))\nprint(next_Perfect_Square(397))\nprint(next_Perfect_Square(399))\nprint(next_Perfect_Square(401))\nprint(next_Perfect_Square(403))\nprint(next_Perfect_Square(405))\nprint(next_Perfect_Square(407))\nprint(next_Perfect_Square(409))\nprint(next_Perfect_Square(411))\nprint(next_Perfect_Square(413))\nprint(next_Perfect_Square(415))\nprint(next_Perfect_Square(417))\nprint(next_Perfect_Square(419))\nprint(next_Perfect_Square(421))\nprint(next_Perfect_Square(423))\nprint(next_Perfect_Square(425))\nprint(next_Perfect_Square(427))\nprint(next_Perfect_Square(429))\nprint(next_Perfect_Square(431))\nprint(next_Perfect_Square(433))\nprint(next_Perfect_Square(435))\nprint(next_Perfect_Square(437))\nprint(next_Perfect_Square(439))\nprint(next_Perfect_Square(441))\nprint(next_Perfect_Square(443))\nprint(next_Perfect_Square(445))\nprint(next_Perfect_Square(447))\nprint(next_Perfect_Square(449))\nprint(next_Perfect_Square(451))\nprint(next_Perfect_Square(453))\nprint(next_Perfect_Square(455))\nprint(next_Perfect_Square(457))\nprint(next_Perfect_Square(459))\nprint(next_Perfect_Square(461))\nprint(next_Perfect_Square(463))\nprint(next_Perfect_Square(465))\nprint(next_Perfect_Square(467))\nprint(next_Perfect_Square(469))\nprint(next_Perfect_Square(471))\nprint(next_Perfect_Square(473))\nprint(next_Perfect_Square(475))\nprint(next_Perfect_Square(477))\nprint(next_Perfect_Square(479))\nprint(next_Perfect_Square(481))\nprint(next_Perfect_Square(483))\nprint(next_Perfect_Square(485))\nprint(next_Perfect_Square(487))\nprint(next_Perfect_Square(489))\nprint(next_Perfect_Square(491))\nprint(next_Perfect_Square(493))\nprint(next_Perfect_Square(495))\nprint(next_Perfect_Square(497))\nprint(next_Perfect_Square(499))\nprint(next_Perfect_Square(501))\nprint(next_Perfect_Square(503))\nprint(next_Perfect_Square(505))\nprint(next_Perfect_Square(507))\nprint(next_Perfect_Square(509))\nprint(next_Perfect_Square(511))\nprint(next_Perfect_Square(513))\nprint(next_Perfect_Square(515))\nprint(next_Perfect_Square(517))\nprint(next_Perfect_Square(519))\nprint(next_Perfect_Square(521))\nprint(next_Perfect"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     next_Perfect_Square(1) == 1\nassert     next_Perfect_Square(5) == 5\nassert     next_Perfect_Square(10) == 9\nassert     next_Perfect_Square(25) == 23\nassert     next_Perfect_Square(50) == 47\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     next_Perfect_Square(1) == 0, 'Test Case 1 Failed'\nassert     next_Perfect_Square(4) == 1, 'Test Case 2 Failed'\nassert     next_Perfect_Square(144) == 144, 'Test Case 3 Failed'\nassert     next_Perfect_Square(25) == 16, 'Test Case 4 Failed'\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     next_Perfect_Square(1) == 0\nassert     next_Perfect_Square(2) == 1\nassert     next_Perfect_Square(3) == 2\nassert     next_Perfect_Square(4) == 1\nassert     next_Perfect_Square(5) == 2\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nnext_Perfect_Square(1) == 1\nnext_Perfect_Square(4) == 5\nnext_Perfect_Square(10) == 13\nnext_Perfect_Square(100) == 103\nnext_Perfect_Square(1000) == 1031\nnext_Perfect_Square(100000) == 1033153\nnext_Perfect_Square(1000000) == 1033153\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     next_Perfect_Square(0) == 0, \"next_perfect_square(0)\"\nassert     next_Perfect_Square(2) == 3, \"next_perfect_square(2)\"\nassert     next_Perfect_Square(3) == 4, \"next_perfect_square(3)\"\nassert     next_Perfect_Square(4) == 5, \"next_perfect_square(4)\"\nassert     next_Perfect_Square(6) == 8, \"next_perfect_square(6)\"\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     next_Perfect_Square(1) == 1\nassert next_Perfect_Square(2) == 3\nassert next_Perfect_Square(3) == 4\nassert next_Perfect_Square(4) == 5\nassert next_Perfect_Square(5) == 6\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef max_sum(arr):\n    # Create a output variable and initialize it to 0\n    output = 0\n\n    # Create a stack, and push the initial sum to it\n    stack = [0]\n    for i in range(len(arr)):\n        stack.append(output)\n        output = max(output, arr[i])\n\n    # Initialize result\n    result = 0\n\n    # Traverse till the stack is not empty\n    for i in range(len(stack) - 1, -1, -1):\n        result = max(result, stack[i])\n        stack[i] = max(result, stack[i])\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint(max_sum([5, 1, 4, 2, 3]))\nassert max_sum([5, 1, 4, 2, 3, 1, 4, 2, 3]) == 9, 'incorrect'\nprint(max_sum([-5, -1, -4, -2, -3, -1, -4, -2, -3]))\nassert max_sum([-5, -1, -4, -2, -3, -1, -4, -2, -3]) == -1, 'incorrect'\nprint(max_sum([5, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3]))\nassert max_sum([5, 1, 4, 2, 3, 1, 4, 2, 3, 1, 4, 2, 3]) == 16, 'incorrect'\nprint(max_sum([1, 3, 2, 1]))\nassert max_sum([1, 3, 2, 1]) == 6, 'incorrect'\nprint(max_sum([1, 3, 2, 1, 3, 2]))\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_sum([3, 8, -5, 7, 9, -8, 5]) == 13, 'wrong'\nassert     max_sum([1, 2, 3, 4, 5]) == 10, 'wrong'\nassert     max_sum([9, -10, -9]) == 10, 'wrong'\nassert     max_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10, 'wrong'"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n'''\nExample:\nInput: arr = [-2, -5, 6, -2, -3, 1, 5, -6]\nOutput: -2\nExplanation: The bitonic sequence is [-2, -3, 1, 5] which is the maximum sum such that it is a bitonic sequence.\n'''\n\ndef max_sum_bitonic_sequence(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # if we have an empty array\n    if not arr: return\n    \n    # init max_sum with the first element and the value 0\n    max_sum = arr[0]\n    \n    # keep track of max_sum for each element\n    max_sum_index = 0\n    \n    for i in range(1, len(arr)):\n        if arr[i] > arr[max_sum_index]:\n            max_sum = max(max_sum, arr[i])\n            max_sum_index = i\n        else:\n            max_sum = max(max_sum, 0)\n        \n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_sum([1,3,2,4]) ==     5\nassert     max_sum([5,2,1,4,5]) ==     5\nassert     max_sum([1,2,3]) ==     5\nassert     max_sum([1,5,2,4,3]) ==     8\nassert     max_sum([1,2,3,4,5]) ==     5\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     babylonian_squareroot(9) == 3, 'incorrect result for 9'\nassert     babylonian_squareroot(10) == 2, 'incorrect result for 10'\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     babylonian_squareroot(25) == 5\nassert     babylonian_squareroot(0) == 0\nassert     babylonian_squareroot(1) == 0.5\nassert     babylonian_squareroot(3) == 1.0\nassert     babylonian_squareroot(4) == 1.4142135623730951\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef sqrt_by_babylonian_method(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    pass\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     babylonian_squareroot(3) == 1.0\nassert     babylonian_squareroot(5) == 2.0\nassert     babylonian_squareroot(10) == 2.0\nassert     babylonian_squareroot(20) == 2.0\nassert     babylonian_squareroot(100) == 2.0\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert babylonian_squareroot(1) == 1.0\nassert babylonian_squareroot(2) == 1.4142135623730951\nassert babylonian_squareroot(3) == 1.732050807568877\nassert babylonian_squareroot(4) == 1.8181818181818182\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nbabylonian_squareroot(number=9)\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nlps('abdab')==3\nlps('bbbbb')==4\nlps('abb')==2\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nlps('ababcbaba') == 7\nlps('abbba') == 5\nlps('ababcb') == 7\nlps('ababcbab') == 8\nlps('ababcbaba') == 7\nlps('ababcbabb') == 5\n\nclass Solution(object):\n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def __init__(self):\n        self.len = 0\n\n    def lps(self, str):\n        self.len = 0\n        n = len(str)\n        dp = [[0]*n for i in range(n)]\n\n        for i in range(n):\n            dp[i][i] = 1\n\n        for i in range(n-1, -1, -1):\n            for j in range(i+1, n):\n                if str[i] == str[j]:\n                    if i == j - 1 or dp[i+1][j-1]:\n                        dp[i][j] = 1\n                        self.len = max(self.len, 2)\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     lps(\"aaaaa\") == 5\nassert     lps(\"abdba\") == 6\nassert     lps(\"abcde\") == 5\nassert     lps(\"\") == 0\n\n\ndef is_palindrome(str): \n    '''\n    Write a function to check whether the given string is a palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nstr1=\"cbdcbbccccc\""
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint lps('cbbd') == 3\nassert \nprint lps('abcba') == 3\nassert\nprint lps('a') == 1\nassert\nprint lps('abb') == 2\nassert\nprint lps('abbbba') == 3\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    pass\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert         harmonic_sum(4) == 4.5, 'Wrong answer'\nassert         harmonic_sum(6) == 5.4, 'Wrong answer'\nassert         harmonic_sum(10) == 4.8, 'Wrong answer'\nassert         harmonic_sum(12) == 6.4, 'Wrong answer'\nassert         harmonic_sum(20) == 5.8, 'Wrong answer'\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     harmonic_sum(1) == 1.0\nassert     harmonic_sum(2) == 1.5\nassert     harmonic_sum(3) == 2.0\nassert     harmonic_sum(4) == 2.5\nassert     harmonic_sum(5) == 3.0\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nharmonic_sum(0) == 0\nharmonic_sum(1) == 1\nharmonic_sum(2) == 1\nharmonic_sum(3) == 2\nharmonic_sum(4) == 3\nharmonic_sum(5) == 5\nharmonic_sum(6) == 8\nharmonic_sum(7) == 15\nharmonic_sum(8) == 20\nharmonic_sum(9) == 45\nharmonic_sum(10) == 55\nharmonic_sum(11) == 77\nharmonic_sum(12) == 87\nharmonic_sum(13) == 106\nharmonic_sum(14) == 122\nharmonic_sum(15) == 132\nharmonic_sum(16) == 143\nharmonic_sum(17) == 154\nharmonic_sum(18) == 165\nharmonic_sum(19) == 176\nharmonic_sum(20) == 197\nharmonic_sum(21) == 228\nharmonic_sum(22) == 239\nharmonic_sum(23) == 261\nharmonic_sum(24) == 277\nharmonic_sum(25) == 289\nharmonic_sum(26) == 311\nharmonic_sum(27) == 313\nharmonic_sum(28) == 317\nharmonic_sum(29) == 331\nharmonic_sum(30) == 337\nharmonic_sum(31) == 349\nharmonic_sum(32) == 359\nharmonic_sum(33) == 383\nharmonic_sum(34) == 397\nharmonic_sum(35) == 422\nharmonic_sum(36) == 437\nharmonic_sum(37) == 451\nharmonic_sum(38) == 485\nharmonic_sum(39) == 509\nharmonic_sum(40) == 524\nharmonic_sum(41) == 547\nharmonic_sum(42) == 572\nharmonic_sum(43) == 596\nharmonic_sum(44) == 629\nharmonic_sum(45) == 657\nharmonic_sum(46) == 694\nharmonic_sum(47) == 739\nharmonic_sum(48) == 769\nharmonic_sum(49) == 804\nharmonic_sum(50) == 851\nharmonic_sum(51) == 882\nharmonic_sum(52) == 907\nharmonic_sum(53) == 947\nharmonic_sum(54) == 990\nharmonic_sum(55) == 1025\nharmonic_sum(56) == 1054\nharmonic_sum(57) == 1094\nharmonic_sum(58) == 1125\nharmonic_sum(59) == 1154\nharmonic_sum(60) == 1184\nharmonic_sum(61) == 1223\nharmonic_sum(62) == 1255\nharmonic_sum(63) == 1294\nharmonic_sum(64) == 1334\nharmonic_sum(65) == 1377\nharmonic_sum(66) == 1413\nharmonic_sum(67) == 1452\nharmonic_sum(68) == 1498\nharmonic_sum(69) == 1537\nharmonic_sum(70) == 1574\nharmonic_sum(71) == 1609\nharmonic_sum(72) == 1645\nharmonic_sum(73) == 1689\nharmonic_sum(74) == 1733\nharmonic_sum(75) == 1781\nharmonic_sum(76) == 1822\nharmonic_sum(77) == 1868\nharmonic_sum(78) == 1911\nharmonic_sum(79) == 1916\nharmonic_sum(80) == 1944\nharmonic_sum(81) == 1983\nharmonic_sum(82) == 2026\nharmonic_sum(83) == 2065\nharmonic_sum(84) == 2102\nharmonic_sum(85) == 2152\nharmonic_sum(86) == 2195\nharmonic_sum(87) == 2234\nharmonic_sum(88) == 2286\nharmonic_sum(89) == 2327\nharmonic_sum(90) == 2372\nharmonic_sum(91) == 2410\nharmonic_sum(92) == 2459\nharmonic_sum(93) == 2509\nharmonic_sum(94) == 2549\nharmonic_sum(95) == 2599\nharmonic_sum(96) == 2638\nharmonic_sum(97) == 2682\nharmonic_sum(98) == 2716\nharmonic_sum(99) == 2751\nharmonic_sum(100) == 2786\nharmonic_sum(101) == 2835\nharmonic_sum(102) == 2882\nharmonic_sum(103) == 2926\nharmonic_sum(104) == 2971\nharmonic_sum(105) == 3025\nharmonic_sum(106) == 3069\nharmonic_sum(107) == 3123\nharmonic_sum(108) == 3171\nharmonic_sum(109) == 3221\nharmonic_sum(110) == 3275\nharmonic_sum(111) == 3331\nharmonic_sum(112) == 3377\nharmonic_sum(113) == 3423\nharmonic_sum(114) == 3469\nharmonic_sum(115) == 3513\nharmonic_sum(116) == 3561\nharmonic_sum(117) == 3596\nharmonic_sum(118) == 3737\nharmonic_sum(119) == 3788\nharmonic_sum(120) == 3835\nharmonic_sum(121) == 3893\nharmonic_sum(122) == 3942\nharmonic_sum(123) == 3988\nharmonic_sum(124) == 4035\nharmonic_sum(125) == 4081\nharmonic_sum(126) == 4126\nharmonic_sum(127) == 4171\nharmonic_sum(128) == 4228\nharmonic_sum(129) == 4269\nharmonic_sum(130) == 4334\nharmonic_sum(131) == 4381\nharmonic_sum(132) == 4426\nharmonic_sum(133) == 4482\nharmonic_sum(134) == 4527\nharmonic_sum(135) == 4583\nharmonic_sum(136) == 4642\nharmonic_sum(137) == 4711\nharmonic_sum(138) == 4768\nharmonic_sum(139) == 4820\nharmonic_sum(140) == 4878\nharmonic_sum(141) == 4941\nharmonic_sum(142) == 4989\nharmonic_sum(143) == 5047\nharmonic_sum(144) == 5095\nharmonic_sum(145) == 5139\nharmonic_sum(146) == 5199\nharmonic_sum(147) == 5248\nharmonic_sum(148) == 5297\nharmonic_sum(149) == 5357\nharmonic_sum(150) == 5396\nharmonic_sum(151) == 5426\nharmonic_sum(152) == 5485\nharmonic_sum(153) == 5524\nharmonic_sum(154) == 5575\nharmonic_sum(155) == 5641\nharmonic_sum(156) == 5695\nharmonic_sum(157) == 5733\nharmonic_sum(158) == 5787\nharmonic_sum(159) == 5824\nharmonic_sum(160) == 5873\nharmonic_sum(161) == 5926\nharmonic_sum(162) == 5974\nharmonic_sum(163) == 6013\nharmonic_sum(164) == 6051\nharmonic_sum(165) == 6090\nharmonic_sum(166) == 6144\nharmonic_sum(167) == 6192\nharmonic_sum(168) == 6246\nharmonic_sum(169) == 6294\nharmonic_sum(170) == 6344\nharmonic_sum(171) == 6393\nharmonic_sum(172) == 6451\nharmonic_sum(173) == 6499\nharmonic_sum(174) == 6541\nharmonic_sum(175) == 6582\nharmonic_sum(176) == 6619\nharmonic_sum(177) == 6658\nharmonic_sum(178) == 6706\nharmonic_sum(179) == 6765\nharmonic_sum(180) == 6804\nharmonic_sum(181) == 6854\nharmonic_sum(182) == 6895\nharmonic_sum(183) == 6939\nharmonic_sum(184) == 6"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n'''\n--------------------------------------------\nExpected output:\n10.0\n'''\n\n\n\n'''\n--------------------------------------------\nProblem 2\n--------------------------------------------\nWrite a function that returns the average of n number of user input.\n'''\ndef user_input_average():\n    '''\n    Write a function that takes in the average of n number of user input.\n    '''\n    pass\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert         harmonic_sum(2) == 2, 'incorrect'\nassert         harmonic_sum(3) == 4, 'incorrect'\nassert         harmonic_sum(4) == 12, 'incorrect'\nassert         harmonic_sum(5) == 17, 'incorrect'\nassert         harmonic_sum(6) == 27, 'incorrect'\nprint('Correct!')\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nharmonic_sum(2) == 3\nharmonic_sum(3) == 7\nharmonic_sum(4) == 14\nharmonic_sum(5) == 31\nharmonic_sum(6) == 48\nharmonic_sum(7) == 67\nharmonic_sum(8) == 98\nharmonic_sum(10) == 210\nharmonic_sum(100) == 96902800\nharmonic_sum(0) == 0\nharmonic_sum(1) == 1\nharmonic_sum(2) == 1.5\nharmonic_sum(3) == 1.75\nharmonic_sum(4) == 2\nharmonic_sum(5) == 3.25\nharmonic_sum(6) == 3.833333333333333\nharmonic_sum(7) == 4.5\nharmonic_sum(8) == 5.25\nharmonic_sum(10) == 6.6\nharmonic_sum(100) == 3972950412.25\nharmonic_sum
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     harmonic_sum(5) == 1, 'incorrect return'\nassert     harmonic_sum(10) == 55, 'incorrect return'\nassert     harmonic_sum(100) == 495, 'incorrect return'\nassert     harmonic_sum(1000) == 1125, 'incorrect return'\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     intersection_array([1,2,3,4,5],[6,7,8,9,10]) == [6,7,8,9,10], \"intersection_array([1,2,3,4,5],[6,7,8,9,10]) == [6,7,8,9,10]\"\nassert     intersection_array([1,2,3,4,5,6,7,8,9],[8,9,10]) == [8,9], \"intersection_array([1,2,3,4,5,6,7,8,9],[8,9,10]) == [8,9]\"\nassert     intersection_array([1,2,3,4,5,6],[7,8,9,10]) == [], \"intersection_array([1,2,3,4,5,6],[7,8,9,10]) == []\"\nassert     intersection_array([1,2,3,4],[5,6,7,8,9]) == [], \"intersection_array([1,2,3,4],[5,6,7,8,9]) == []\"\nassert     intersection_array([],[\"a\",\"b\",\"c\",\"d\"]) == [], \"intersection_array([],['a','b','c','d']) == []\"\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nintersection_array([1,2,3],[3,4,5]) == [3]\nassert \nintersection_array([1,2,3],[1,3]) == [1,3]\nassert \nintersection_array([1,2,3,4],[3,4]) == [3,4]\nassert \nintersection_array([1,2,3,4,5,6],[3,4,5,7,8,9]) == ["
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     intersection_array([1,2,2,1],[2,2,1,1]) == [2,1]\nassert     intersection_array([1,2,2,1,1,1,2,2,1,2,1,1,1],[2,2,1,1]) == [1,1]\nassert     intersection_array([1,2,2,1,1,1,2,2,1,2,1,1,1],[1,1,1,1]) == []\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     intersection_array([1,2,2,1], [1,2,2,2,2]) == [1,2,2], 'incorrect'\nassert     intersection_array([1,2,2,2,2], [1,2,2,2,2]) == [2], 'incorrect'\nassert     intersection_array([1,1,2,2,3], [2,2,2,3]) == [2,2], 'incorrect'\nassert     intersection_array([1,1,2,2,3], [3]) == [], 'incorrect'\nassert     intersection_array([1,1,2,2,3], [1,1,1,2,3]) == [1,1], 'incorrect'\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     intersection_array([1,2,2,3,4,4,4],    [1,2,3,5,6]) ==    [1,2,3,4,4,4,4]\nassert    intersection_array([1,2,2,3,4],    [1,2,3,5,6]) ==     [1,2,2,3,4]\nassert    intersection_array([],    [1,2,3,5,6]) ==    []\nassert    intersection_array([1,2,2,3,4],    []) ==    []\nassert    intersection_array([1,2,3,5,6],    [1,2,3,5,6]) ==    [1,2,3,5,6]\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     intersection_array([1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     intersection_array([1,2,3],[2,2,7])==[2,2], \"intersection_array([1,2,3],[2,2,7]) should return [2,2], but it returns \"+str(intersection_array([1,2,3],[2,2,7]))+'\"'\nassert intersection_array([1,2,3],[3,4,5])==[3], \"intersection_array([1,2,3],[3,4,5]) should return [3], but it returns \"+str(intersection_array([1,2,3],[3,4,5]))+'\"'\nassert intersection_array([1,2,3],[3,4,5,7,9])==[3,7], \"intersection_array([1,2,3],[3,4,5,7,9]) should return [3,7], but it returns \"+str(intersection_array([1,2,3],[3,4,5,7,9]))+'\"'\nassert intersection_array([1,2,3],[4,5,6])==[], \"intersection_array([1,2,3],[4,5,6]) should return an empty array, but it returns \"+str(intersection_array([1,2,3],[4,5,6]))+'\"'\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     intersection_array([1,2,3,4,5],[6,7,8,9,10]) == [6,7,8,9,10]\nassert     intersection_array([1,2,3,4,5],[6,7,8,9,10]) == []\nassert     intersection_array([1,2,3,4,5,7,8,9,10],[5,6,7,8,9]) == [5,6,7,8,9]\nassert     intersection_array([1,2,3,4,5,7,8,9,10],[5,6,7,8,9]) == []"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     intersection_array([1,2,3,4,5],[6,7,8,9,10]) == [6,7,8],\\\n        'Should return the intersection of two arrays'\nassert intersection_array([1,2,3,4,5],[6,7,8,9,10]) == [],\\\n        'Should return an empty array'\nassert intersection_array([1,2,3,4,5],[6,7,8,9,10,11]) == [],\\\n        'Should return an empty array'\nassert intersection_array([1,2,3,4,5,6],[7,8,9,10,11]) == [],\\\n        'Should return an empty array'\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     intersection_array([1,2,3,4,5,6,7,8,9],[1,2,3,4,5,7,8,9,10]) == [1,2,3,4,5]\nassert     intersection_array([1,2,3,4,5,6,7,8,9],[1,2,3,4,5,7,8,9,10,11,12]) == []\nassert     intersection_array([1,2,3,4,5,6,7,8,9],[1,2,3,4,5,7,8,9,10,11,12,13]) == []\n\n'''\nTime Complexity: O(n)\nSpace Complexity: O(1)\n'''\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_X((1, 2, 3, 4, 5), 2) == 2, \"Expected 2\"\nassert count_X((1, 2, 3, 4, 5), 8) == 0, \"Expected 0\"\nassert count_X((1, 2, 3, 4, 5), 5) == 1, \"Expected 1\"\nassert count_X((1, 2, 3, 4, 5), 6) == 2, \"Expected 2\"\nassert count_X((1, 2, 3, 4, 5), 7) == 0, \"Expected 0\"\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_X(('z','o','l','l'), 'l') == 1\nassert     count_X(('z','o','l','l'), 'x') == 0\nassert     count_X(('z','o','l','l'), 'u') == 0\nassert     count_X(('z','o','l','l'), 'z') == 2\nassert     count_X(('z','o','l','l'), 'o') == 1\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ncount_X(('a','b','c'),'b') == 1\ncount_X(('a','b','c'),'a') == 2\ncount_X(('a','b','c'),'c') == 2\ncount_X(('a','b','c'),'d') == 0\ncount_X(('a','b','c','d','e'),'b') == 2\ncount_X(('a','b','c','d','e'),'e') == 1\ncount_X(('a','b','c','d','e'),'f') == 0\ncount_X(('a','b','c','d','e'),'a') == 4\ncount_X(('a','b','c','d','e'),'c') == 3\ncount_X(('a','b','c','d','e'),'d') == 1\ncount_X(('a','b','c','d','e'),'e') == 2\ncount_X(('a','b','c','d','e'),'f') == 0\n\nprint(\"All tests passed!!!\")"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_X((1,2,3), 2) == 2\nassert     count_X((1,2,3,2), 2) == 2\nassert     count_X((1,2,3), 0) == 0\nassert count_X((1,2,3), 3) == 0\nassert count_X((1,2,3), 4) == 1\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ncount_X([1,2,3,4,5], 5) == 2\ncount_X((1,2,3),4) == 0\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_X((1,2,3,4,5,6), 4) == 3\nassert     count_X((1,2,3,4,5,6), 9) == 0\nassert     count_X((1,2,3,4,5,6), 7) == 0\nassert     count_X((1,2,3,4,5,6), 0) == 0\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ncount_X(('s','m','k','i','l','m'),'m') == 2\ncount_X(('s','m','k','i','l','m'), 'k') == 1\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nassert insert_element([1,2,3,4],3) == [1, 2, 3, 3, 4]\nassert insert_element([],1) == [1]\nassert insert_element([1,2,3,4],5) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nlist1 = ['one', 'two', 'three']\ninsert_element(list1,'four') == ['one', 'four', 'two', 'three']\n\nlist2 = ['eleven', 'twelve', 'thirteen']\ninsert_element(list2,'fourteen') == ['eleven', 'fourteen', 'twelve', 'thirteen']\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     insert_element([], 1) == [1]\nassert     insert_element([1], 1) == [1, 1]\nassert     insert_element([1, 2], 1) == [1, 2, 1]\nassert     insert_element([1, 2], 3) == [3, 1, 2]\nassert     insert_element([1, 2, 3, 4], 3) == [3, 1, 2, 3, 4]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     insert_element([1,2,3,4],3) == [1,2,3,3,4], \"test failed\"\nassert     insert_element([1,2,3,4],1) == [1,1,2,3,4], \"test failed\"\nassert     insert_element([1,2,3,4],5) == [1,1,2,3,4,5], \"test failed\"\nassert     insert_element([1,2,3,4],7) == [1,1,2,3,4,5,6,7], \"test failed\"\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     insert_element([1,2,3],4) == [1,4,2,3], \"incorrect\"\nassert     insert_element([1,2,3],1) == [1,1,2,3], \"incorrect\"\nassert     insert_element([1,2,3],5) == [1,5,2,3], \"incorrect\"\nassert     insert_element([1,2,3],0) == [0,1,2,3], \"incorrect\"\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ninsert_element([1, 2, 3, 4], 5) == [1, 5, 2, 3, 4]\nassert insert_element([1, 2, 3, 4], 4) == [1, 4, 2, 3, 4]\nassert insert_element([1, 2, 3, 4], 0) == [0, 1, 2, 3, 4]\nassert insert_element([], 0) == []\nassert insert_element([], 0.1) == []\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     insert_element([],1) == []\nassert     insert_element([1],1) == [1]\nassert     insert_element([1,2],2) == [1,2,2]\nassert     insert_element([1,2,3],4) == [1,2,3,4]\nassert     insert_element([1,2,3,4],5) == [1,2,3,4,5]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     insert_element([1, 2, 3, 4], 4) == [1, 4, 4, 3, 2, 1], \"Fail\"\nassert     insert_element([4, 5, 6, 7], 4) == [4, 4, 5, 6, 7, 4], \"Fail\"\nassert     insert_element([4, 5, 6, 7], 0) == [0, 4, 4, 5, 6, 7, 0], \"Fail\"\nassert     insert_element([4, 5, 6, 7], -1) == [-1, 4, 4, 5, 6, 7, -1], \"Fail\"\nassert     insert_element([4, 5, 6, 7], 7) == [4, 5, 6, 7, 4, 5, 6, 7], \"Fail\"\nprint(\"Congratulations! All tests passed.\""
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     insert_element([\"A\",\"B\",\"C\"], \"D\") == [\"A\",\"D\",\"B\",\"C\"]\nassert     insert_element([\"A\",\"B\",\"C\"], \"C\") == [\"A\",\"C\",\"B\",\"C\"]\nassert     insert_element([\"A\",\"B\",\"C\"], \"B\") == [\"A\",\"B\",\"C\"]\nassert     insert_element([\"A\",\"B\",\"C\"], \"D\") == [\"A\",\"B\",\"C\",\"D\"]"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     convert([complex(1, 2), complex(3, 4)]) == [[0.3, 1.1], [1.2, 1.5]]\nassert    convert([complex(1, 0), complex(0, -1)]) == [[1.0, 0.0], [0.0, -1.0]]\nassert    convert([complex(-1, -2), complex(3, -4)]) == [[1.35907071, -1.37725045], [-2.82013051, -1.94364935]]\nassert    convert([complex(-1, 2), complex(3, 4)]) == [[-0.89068364, -1.31297533], [3.44042909, 2.99060141]]\nassert    convert([complex(1, -1), complex(0, -1)]) == [[1.0, -0.5], [0.0, -1.0]]\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     convert([1+2j, 3+4j]) == ((1 + 2j), (3 + 4j))\nassert     convert((1+2j, 3+4j)) == ((1 + 2j), (3 + 4j))\nassert     convert((1+2j, 3+4j)) == ((1 + 2j), (3 + 4j))\nassert     convert([1+2j, 3+4j]) == ((1 + 2j), (3 + 4j))\nassert     convert(complex(1,2)) == ((1 + 2j), (0 - 2j))\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     convert(complex(1, 2)) == (0.5, 1.41421)\nassert     convert(complex(-1, 2)) == (0.5, -1.41421)\nassert     convert(complex(0, 1)) == (0, 0)\nassert     convert(complex(0, -1)) == (0, 0)\nassert     convert(complex(0.5, 2)) == (0.633, 1.4142)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     convert((4,1)) == (3.14,-1.0)\nassert     convert((-1,2)) == (-3.14,1.0)\nassert     convert((2,-3)) == (3.14,-4.0)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     convert((1+2j,3+4j)) == (5, 0.20456430546875)\nassert     convert((1+2j,1+2j)) == (4.854187878048884, 0)\n\n'''\nWrite a python function to convert polar coordinates to complex numbers.\n'''\n\ndef convert2(radius, angle):\n    '''\n    Write a python function to convert polar coordinates to complex numbers.\n    '''\n    pass\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     convert([cmath.sqrt(-1), cmath.sqrt(2)]) == (1,cmath.pi/4)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert convert([1, -2, 3, -4]) == [(1+2j, 3-4j), (2+1j, -3+4j), (-3+1j, 4-2j)]\nassert convert([1, -2, -3, -4]) == [(1+2j, -3+4j), (2+1j, -4+3j), (-4+1j, 3-2j)]\nassert convert([-1, -2, -3, -4]) == [(1+2j, -3+4j), (2+1j, -4+3j), (-3+1j, 4-2j)]\nassert convert([1, 2, 3, 4]) == [(1+2j, 3+4j)]\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nconvert(complex(0.5, 0.5))\nconvert(complex(0.5, -0.5))\nconvert(complex(-0.5, -0.5))\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_integer([3,2,1,6,4,8]) == 5\nassert     count_integer([]) == 0\nassert     count_integer(['2','3','4','5','7']) == 5\nassert     count_integer([2,3,4,5,6]) == 5\nassert     count_integer(['2','3','4','5','7','8']) == 5\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_integer([1,2,3,4,5,6]) == 6\nassert     count_integer([1,2,3,4]) == 3\nassert     count_integer([1,2,3]) == 3\nassert     count_integer([]) == 0\nassert     count_integer([\"a\", \"b\", \"c\"]) == 3\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_integer([1,2,3,4,5]) == 5, \"should be 5\"\nassert     count_integer([1,2,3,4,5]) == 6, \"should be 6\"\nassert     count_integer([]) == 0, \"should be 0\"\nassert     count_integer([-1,2,-3,4,5]) == 5, \"should be 5\"\nassert     count_integer([-1,-2,-3,-4,-5]) == 0, \"should be 0\"\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint('All assertions are passed'"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert count_integer([1,2,3,4]) == 4\nassert count_integer([1,2,3,4,5]) == 5\nassert count_integer([2,2,2,2]) == 3\nassert count_integer([0]) == 1\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_integer([1,2,3,4,5]) == 5, \"Expected 5\"\nassert     count_integer([1,1,1,1,1]) == 5, \"Expected 5\"\nassert     count_integer([1]) == 1, \"Expected 1\"\nassert     count_integer([]) == 0, \"Expected 0\"\n\nprint(\"All test cases passed\""
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_integer([1,2,3,4,5]) == 5\nassert     count_integer([]) == 0\nassert     count_integer([-2,-1,0,1,2]) == 5\nassert     count_integer([-2,-1,0,1,2,-2,-1,0]) == 3"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nlist1 = [1, 2, 3, 4, 5, 6, 7]\nresult = count_integer(list1)\nprint(result)\n\nassert result == 7\n\nlist1 = [1, 2, 3, 4, 5, 6, 7, 'a', 'b', 'c']\nresult = count_integer(list1)\nprint(result)\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ncount_integer([1,2,3,4,5]) == 5\nassert count_integer([-1,-2,-3,-4,-5]) == 4\nassert count_integer([1,2,3,4,5,2,3,4,5,2]) == 8\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert count_integer([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10\nassert count_integer([1, 2, 3, 5, 6, 7, 8, 10]) == 5\nassert count_integer([1, 1, 1, 1, 1]) == 3\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     combinations_colors([], 0) == []\nassert     combinations_colors([], 1) == []\nassert     combinations_colors([0], 0) == [[0]]\nassert     combinations_colors([0], 1) == [[0]]\nassert     combinations_colors([0, 1], 0) == [[0], [1]]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n[(1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 3, 2), (1, 3, 4), (1, 3, 5), (1, 4, 2), (1, 4, 3), (1, 4, 5), (1, 5, 2), (1, 5, 3), (1, 5, 4), (2, 3, 1), (2, 3, 4), (2, 3, 5), (2, 4, 1), (2, 4, 3), (2, 4, 5), (2, 5, 1), (2, 5, 3), (2, 5, 4), (3, 1, 2), (3, 1, 4), (3, 1, 5), (3, 2, 1), (3, 2, 4), (3, 2, 5), (3, 4, 1), (3, 4, 2), (3, 4, 5), (3, 5, 1), (3, 5, 2), (3, 5, 4), (4, 1, 2), (4, 1, 3), (4, 1, 5), (4, 2, 1), (4, 2, 3), (4, 2, 5), (4, 3, 1), (4, 3, 2), (4, 3, 5), (4, 5, 1), (4, 5, 2), (4, 5, 3), (5, 1, 2), (5, 1, 3), (5, 1, 4), (5, 1, 5), (5, 2, 1), (5, 2, 3), (5, 2, 4), (5, 2, 5), (5, 3, 1), (5, 3, 2), (5, 3, 4), (5, 3, 5), (5, 4, 1), (5, 4, 2), (5, 4, 3), (5, 4, 4), (5, 4, 5), (5, 5, 1), (5, 5, 2), (5, 5, 3)]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     combinations_colors([1,2,3], 1) == [[1,2,3]]\nassert     combinations_colors([1,2,3], 2) == [(1,2), (1,3), (2,3)]\nassert     combinations_colors([1,2,3], 3) == [(1,2,3)]\nassert     combinations_colors([1,2,3], 4) == [(1,2,3,4)]\nassert     combinations_colors([1,2,3], 5) == [(1,2,3,4,5)]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     combinations_colors([1,2,3], 4) == [[(1,2,3,1)], [(1,2,3,2)], [(1,2,3,3)], [(1,2,3,1), (1,2,3,3)], [(1,2,3,1), (1,2,3,2)], [(1,2,3,1), (1,2,3,3)]]\n\n\ndef color_printer(l):\n    '''\n    Write a function that takes a list of colors and returns the same list with the colors in a specific order.\n    '''\n    pass\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     combinations_colors([1,2,3], 0) == []\nassert     combinations_colors([1,2,3], 1) == [(), (1,), (2,), (3,)]\nassert     combinations_colors([1,2,3], 2) == [(), (1,2), (1,3), (2,3)]\nassert     combinations_colors([1,2,3], 3) == [(), (1,2,3)]\nassert     combinations_colors([1,2,3], 4) == [(), (1,2,3), (1,3,2), (2,1,3), (2,3,1), (3,1,2), (3,2,1)]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     combinations_colors([0, 1, 2, 3], 2) == [[(0, 0), (0, 1), (0, 2), (0, 3)], [(1, 0), (1, 1), (1, 2), (1, 3)], [(2, 0), (2, 1), (2, 2), (2, 3)], [(3, 0), (3, 1), (3, 2), (3, 3)]]\nassert     combinations_colors([0, 1, 2], 1) == [[(0, 0)], [(1, 0)], [(2, 0)]]\nassert     combinations_colors([], 1) == []\nassert     combinations_colors([0], 1) == [[(0, 0)]]\nassert     combinations_colors([0, 0], 1) == [[(0, 0)]]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     combinations_colors([1, 2, 3], 1) == [[1, 2, 3]]\nassert combinations_colors([1, 2, 3], 2) == [[1, 2], [1, 3], [2, 3]]\nassert combinations_colors([1, 2, 3], 3) == [[1, 2, 3]]\nassert combinations_colors([1, 2, 3, 4, 5], 3) == [[1, 2, 3], [1, 2, 4], [1, 2, 5], [1, 3, 4], [1, 3, 5], [1, 4, 5], [2, 3, 4], [2, 3, 5], [2, 4, 5], [3, 4, 5]]\n\ndef max_sum_subarray(l):\n    '''\n    Write a function that takes in a list and returns the max sum of an \n    n-element subarray of the list.\n    '''\n    pass\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     combinations_colors([1, 2, 3], 3) == [\n                            (1, 2, 3),\n                            (1, 3, 2),\n                            (2, 1, 3),\n                            (2, 3, 1),\n                            (3, 1, 2),\n                            (3, 2, 1)\n                        ]\n\ndef replace(string, x, y):\n    '''\n    Write a function that takes in a string and two integers x and y, and returns a string with x replaced by y in the input string.\n    '''\n    pass\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(combinations_colors(['a', 'b', 'c'], 3))\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ncount_Primes_nums(10) == 5, 'Passed: Test Count Primes: 10'\ncount_Primes_nums(8) == 3, 'Passed: Test Count Primes: 8'\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_Primes_nums(3) == 2,'return type: 2'\nassert     count_Primes_nums(1) == 0,'return type: 0'\nassert     count_Primes_nums(100) == 4,'return type: 4'\nassert     count_Primes_nums(0) == 0,'return type: 0'\nassert     count_Primes_nums(-2) == 0,'return type: 0'\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(count_Primes_nums(4))\n\nprint(count_Primes_nums(10))\n\nprint(count_Primes_nums(100))\n\nprint(count_Primes_nums(3))\n\nprint(count_Primes_nums(2))\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_Primes_nums(10) == 3, \"incorrect value\"\nassert     count_Primes_nums(100) == 49, \"incorrect value\"\nassert     count_Primes_nums(1000000) == 19, \"incorrect value\"\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_Primes_nums(8) == 2, 'incorrect output'\nassert     count_Primes_nums(10) == 1, 'incorrect output'\nassert     count_Primes_nums(13) == 3, 'incorrect output'\nassert     count_Primes_nums(100) == 20, 'incorrect output'\nassert     count_Primes_nums(1000) == 233, 'incorrect output'\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_Primes_nums(1) == 0\nassert     count_Primes_nums(2) == 0\nassert     count_Primes_nums(3) == 1\nassert     count_Primes_nums(4) == 2\nassert     count_Primes_nums(10) == 6\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_Primes_nums(0) == 0, \"Wrong output\"\nassert count_Primes_nums(1) == 0, \"Wrong output\"\nassert count_Primes_nums(2) == 1, \"Wrong output\"\nassert count_Primes_nums(3) == 2, \"Wrong output\"\nassert count_Primes_nums(4) == 3, \"Wrong output\"\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert count_Primes_nums(2) == 1\nassert count_Primes_nums(3) == 2\nassert count_Primes_nums(5) == 4\nassert count_Primes_nums(6) == 4\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef swap_numbers_recursive(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    if a == b:\n        return (a,b)\n    else:\n        return swap_numbers_recursive(a,b-1)"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     swap_numbers(4,5) == (5,4)\nassert swap_numbers(4,4) == (4,4)\nassert swap_numbers(5,5) == (5,5)\nassert swap_numbers(2,2) == (2,2)\nassert swap_numbers(4,5) == (5,4)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     swap_numbers(3,2) == (2,3), 'Fail'\nassert swap_numbers(2,4) == (4,2), 'Fail'\nassert swap_numbers(3,4) == (4,3), 'Fail'\nassert swap_numbers(1,5) == (5,1), 'Fail'\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     swap_numbers((1,2),(2,1)) == ((2,1),1)\nassert swap_numbers((1,2),(2,1)) == ((1,2),2)\nassert swap_numbers((1,2),(2,1)) == ((2,1),1)\nassert swap_numbers((1,2),(2,1)) == ((2,1),1)\nassert swap_numbers((1,2),(2,1)) == ((2,1),1)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     swap_numbers(1,2) == (2,1)\nassert     swap_numbers(1,1) == (1,1)\nassert     swap_numbers(4,5) == (5,4)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     swap_numbers(1,2) == (2,1)\nassert     swap_numbers(2,1) == (1,2)\nassert     swap_numbers(2,3) == (3,2)\nassert     swap_numbers(3,2) == (2,3)\nassert     swap_numbers(3,4) == (4,3)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert swap_numbers(2,3) == (3,2)\nassert swap_numbers(2,1) == (1,2)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     swap_numbers(100,20) == (20,100), \"ValueError\"\nassert     swap_numbers(10,10) == (10,10), \"ValueError\"\nassert     swap_numbers(1,10) == (10,1), \"ValueError\"\n\ndef calculate_index_of_value(lst, value):\n    '''\n    Write a function that takes in a list and a value and returns the index of the value in the list.\n    If the value is not in the list, return -1.\n    '''\n    pass"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     swap_numbers(1,3) == (3,1)\nassert     swap_numbers(2,4) == (4,2)\nassert     swap_numbers(1,5) == (5,1)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     swap_numbers(1,2) == (2,1), 'incorrect'\nassert swap_numbers(5,1) == (1,5), 'incorrect'\nassert swap_numbers(5,8) == (8,5), 'incorrect'"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     maximize_elements((1, 2, 3), (2, 3, 1)) == (1, 2, 3)\nassert     maximize_elements((2, 1, 3), (3, 2, 1)) == (3, 2, 1)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     maximize_elements((2, 3, 4, 5, 6), (5, 4, 3, 2, 1)) == (5, 4, 3, 2, 1)\nassert maximize_elements((-1, -3, 4, -5), (2, -6, 2, -2)) == (2, -6, 2, -2)\nassert maximize_elements((4, -2, 5), (-2, -1, -3)) == (4, -2, 5)\nprint('Correct!')\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     maximize_elements((0,1,2,3),(0,1,2,3)) == (0,1,2,3)\nassert     maximize_elements((1,2,3,4),(1,2,3,4)) == (1,2,3,4)\nassert     maximize_elements((-1,-2,-3,-4),(-1,-2,-3,-4)) == (-1,-2,-3,-4)\nassert     maximize_elements((1,2,3,4),(-1,-2,-3,-4)) == (-1,-2,-3,-4)\nassert     maximize_elements((-1,-2),(-1,-2,3,4)) == (-1,-2,3,4)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     maximize_elements(('a',), ('a',)) == ('a',)\nassert     maximize_elements(('a', 'b'), ('a', 'b')) == ('a',)\nassert     maximize_elements(('a', 'b'), ('c',)) == ('a',)\nassert     maximize_elements(('a',), ('b', 'c')) == ('b',)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     maximize_elements((2, 5), (6, 2)) == (2, 6)\nassert     maximize_elements((2, 5), (5, 2)) == (5, 2)\nassert     maximize_elements((2, 5), (5, 5)) == (5, 5)\nassert     maximize_elements((5, 5), (2, 5)) == (5, 5)\nassert     maximize_elements((2, 5), (2, 5)) == (2, 2)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     maximize_elements((5, 2), (1, 5)) == (5, 2)\nassert maximize_elements((2, 1, 5), (1, 1, 4)) == (5, 4)\nassert maximize_elements((1, 1, 2), (1, 2, 3)) == (3, 2)\nassert maximize_elements((1, 1, 1), (1, 1, 1)) == (1, 1)\nassert maximize_elements((1, 1, 1), (2, 2, 2)) == (2, 2)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     maximize_elements( (1,2,3), (4,5,6) ) == (4,5,6)\nassert maximize_elements( (6,5,4), (3,2,1) ) == (6,5,4)\nassert maximize_elements( (1,2,3), (1,2,3) ) == (1,2,3)\nassert maximize_elements( (1,1,1), (1,1,1) ) == (1,1,1)\nassert maximize_elements( (1,1,1), (2,2,2) ) == (2,2,2)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef generate_sorted_tuple(test_tup1, test_tup2):\n    '''\n    Given 2 tuples,\n    returns a tuple with the elements of both tuples arranged in ascending order.\n    '''\n    pass\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     maximize_elements((3,4,5),(2,6,8)) == (5,6,8)\nassert     maximize_elements((1,2,3,4),(4,5,6,7)) == (5,6,7,4)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     maximize_elements((1,2,3), (2,4,5)) == (2,4,5)\nassert     maximize_elements((3,3,3), (4,4,4)) == (3,3,3)\nassert     maximize_elements((5,5,5), (6,6,6)) == (5,5,5)\nassert     maximize_elements((1,1,1), (2,2,2)) == (2,2,2)\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     newman_prime(2) == 3\nassert     newman_prime(20) == 29\nassert     newman_prime(25) == 47\nassert     newman_prime(35) == 61\nassert     newman_prime(60) == 89\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nnewman_prime(1) == 2\nnewman_prime(2) == 3\nnewman_prime(3) == 5\nnewman_prime(4) == 7\nnewman_prime(5) == 11\nnewman_prime(6) == 13\nnewman_prime(7) == 19\nnewman_prime(8) == 23\nnewman_prime(9) == 29\nnewman_prime(10) == 31\nnewman_prime(11) == 37\nnewman_prime(12) == 41\nnewman_prime(13) == 43\nnewman_prime(14) == 47\nnewman_prime(15) == 53\nnewman_prime(16) == 59\nnewman_prime(17) == 61\nnewman_prime(18) == 67\nnewman_prime(19) == 71\nnewman_prime(20) == 73\nnewman_prime(21) == 79\nnewman_prime(22) == 83\nnewman_prime(23) == 89\nnewman_prime(24) == 97\nnewman_prime(25) == 101\nnewman_prime(26) == 103\nnewman_prime(27) == 107\nnewman_prime(28) == 109\nnewman_prime(29) == 113\nnewman_prime(30) == 127\nnewman_prime(31) == 131\nnewman_prime(32) == 137\nnewman_prime(33) == 139\nnewman_prime(34) == 149\nnewman_prime(35) == 151\nnewman_prime(36) == 157\nnewman_prime(37) == 163\nnewman_prime(38) == 167\nnewman_prime(39) == 173\nnewman_prime(40) == 179\nnewman_prime(41) == 181\nnewman_prime(42) == 191\nnewman_prime(43) == 193\nnewman_prime(44) == 197\nnewman_prime(45) == 199\nnewman_prime(46) == 211\nnewman_prime(47) == 223\nnewman_prime(48) == 227\nnewman_prime(49) == 229\nnewman_prime(50) == 233\nnewman_prime(51) == 239\nnewman_prime(52) == 241\nnewman_prime(53) == 251\nnewman_prime(54) == 257\nnewman_prime(55) == 263\nnewman_prime(56) == 269\nnewman_prime(57) == 271\nnewman_prime(58) == 277\nnewman_prime(59) == 281\nnewman_prime(60) == 283\nnewman_prime(61) == 293\nnewman_prime(62) == 293\nnewman_prime(63) == 307\nnewman_prime(64) == 311\nnewman_prime(65) == 313\nnewman_prime(66) == 317\nnewman_prime(67) == 331\nnewman_prime(68) == 337\nnewman_prime(69) == 347\nnewman_prime(70) == 349\nnewman_prime(71) == 353\nnewman_prime(72) == 359\nnewman_prime(73) == 367\nnewman_prime(74) == 373\nnewman_prime(75) == 379\nnewman_prime(76) == 383\nnewman_prime(77) == 389\nnewman_prime(78) == 397\nnewman_prime(79) == 401\nnewman_prime(80) == 409\nnewman_prime(81) == 419\nnewman_prime(82) == 421\nnewman_prime(83) == 431\nnewman_prime(84) == 433\nnewman_prime(85) == 439\nnewman_prime(86) == 443\nnewman_prime(87) == 449\nnewman_prime(88) == 457\nnewman_prime(89) == 461\nnewman_prime(90) == 463\nnewman_prime(91) == 467\nnewman_prime(92) == 479\nnewman_prime(93) == 481\nnewman_prime(94) == 483\nnewman_prime(95) == 503\nnewman_prime(96) == 509\nnewman_prime(97) == 521\nnewman_prime(98) == 531\nnewman_prime(99) == 541\nnewman_prime(100) == 547\nnewman_prime(101) == 553\nnewman_prime(102) == 559\nnewman_prime(103) == 563\nnewman_prime(104) == 569\nnewman_prime(105) == 571\nnewman_prime(106) == 577\nnewman_prime(107) == 583\nnewman_prime(108) == 591\nnewman_prime(109) == 593\nnewman_prime(110) == 597\nnewman_prime(111) == 601\nnewman_prime(112) == 607\nnewman_prime(113) == 611\nnewman_prime(114) == 613\nnewman_prime(115) == 617\nnewman_prime(116) == 619\nnewman_prime(117) == 631\nnewman_prime(118) == 641\nnewman_prime(119) == 643\nnewman_prime(120) == 647\nnewman_prime(121) == 653\nnewman_prime(122) == 659\nnewman_prime(123) == 661\nnewman_prime(124) == 673\nnewman_prime(125) == 677\nnewman_prime(126) == 683\nnewman_prime(127) == 697\nnewman_prime(128) == 709\nnewman_prime(129) == 719\nnewman_prime(130) == 727\nnewman_prime(131) == 733\nnewman_prime(132) == 739\nnewman_prime(133) == 743\nnewman_prime(134) == 751\nnewman_prime(135) == 757\nnewman_prime(136) == 761\nnewman_prime(137) == 763\nnewman_prime(138) == 769\nnewman_prime(139) == 771\nnewman_prime(140) == 773\nnewman_prime(141) == 779\nnewman_prime(142) == 783\nnewman_prime(143) == 791\nnewman_prime(144) == 797\nnewman_prime(145) == 803\nnewman_prime(146) == 809\nnewman_prime(147) == 811\nnewman_prime(148) == 821\nnewman_prime(149) == 823\nnewman_prime(150) == 827\nnewman_prime(151) == 829\nnewman_prime(152) == 839\nnewman_prime(153) == 841\nnewman_prime(154) == 843\nnewman_prime(155) == 853\nnewman_prime(156) == 857\nnewman_prime(157) == 861\nnewman_prime(158) == 863\nnewman_prime(159) == 869\nnewman_prime(160) == 873\nnewman_prime(161) == 877\nnewman_prime(162) == 881\nnewman_prime(163) == 883\nnewman_prime(164) == 887\nnewman_prime(165) == 897\nnewman_prime(166) == 901\nnewman_prime(167) == 907\nnewman_prime(168) == 913\nnewman_prime(169) == 919\nnewman_prime(170) == 929\nnewman_prime(171) == 937\nnewman_prime(172) == 941\nnewman_prime(173) == 947\nnewman_prime(174) == 953\nnewman_prime(175) == 967\nnewman_prime(176) == 971\nnewman_prime(177) == 977\nnewman_prime(178) == 983\nnewman_prime(179) == 989\nnewman_prime(180) == 997\nnewman_prime(181) == 1009\nnewman_prime(182) == 1011\nnewman_prime(183) == 1013\nnewman_prime(184) == 1019\nnewman_prime(185) == 1021\nnewman_prime(186) == 1039\nnewman_prime(187) == 1041\nnewman_prime(188) == 1047\nnewman_prime(189) == 1"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     newman_prime(1) == 2\nassert     newman_prime(2) == 3\nassert     newman_prime(3) == 5\nassert     newman_prime(4) == 7\nassert     newman_prime(5) == 11\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nnewman_prime(5) == 19, \"should return 19\"\nassert newman_prime(13) == 29, \"should return 29\"\nassert newman_prime(100) == 239, \"should return 239\"\nassert newman_prime(23) == 237, \"should return 237\"\nassert newman_prime(4) == 19, \"should return 19\"\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    newman_prime(3) == 5\n    newman_prime(5) == 11\n    newman_prime(8) == 29\n    newman_prime(10) == 31\n    newman_prime(11) == 41\n    newman_prime(13) == 47\n    newman_prime(14) == 53\n    newman_prime(15) == 59\n    newman_prime(16) == 61\n    newman_prime(17) == 67\n    newman_prime(18) == 71\n    newman_prime(19) == 73\n    newman_prime(20) == 79\n    newman_prime(21) == 83\n    newman_prime(22) == 89\n    newman_prime(23) == 97\n    newman_prime(24) == 101\n    newman_prime(25) == 103\n    newman_prime(26) == 107\n    newman_prime(27) == 109\n    newman_prime(28) == 113\n    newman_prime(29) == 127\n    newman_prime(30) == 131\n    newman_prime(31) == 137\n    newman_prime(32) == 139\n    newman_prime(33) == 149\n    newman_prime(34) == 151\n    newman_prime(35) == 157\n    newman_prime(36) == 163\n    newman_prime(37) == 167\n    newman_prime(38) == 173\n    newman_prime(39) == 179\n    newman_prime(40) == 181\n    newman_prime(41) == 191\n    newman_prime(42) == 193\n    newman_prime(43) == 197\n    newman_prime(44) == 199\n    newman_prime(45) == 211\n    newman_prime(46) == 223\n    newman_prime(47) == 227\n    newman_prime(48) == 229\n    newman_prime(49) == 233\n    newman_prime(50) == 239\n    newman_prime(51) == 241\n    newman_prime(52) == 251\n    newman_prime(53) == 257\n    newman_prime(54) == 263\n    newman_prime(55) == 269\n    newman_prime(56) == 271\n    newman_prime(57) == 277\n    newman_prime(58) == 281\n    newman_prime(59) == 283\n    newman_prime(60) == 289\n    newman_prime(61) == 293\n    newman_prime(62) == 293\n    newman_prime(63) == 293\n    newman_prime(64) == 293\n    newman_prime(65) == 293\n    newman_prime(66) == 293\n    newman_prime(67) == 293\n    newman_prime(68) == 293\n    newman_prime(69) == 293\n    newman_prime(70) == 293\n    newman_prime(71) == 293\n    newman_prime(72) == 293\n    newman_prime(73) == 293\n    newman_prime(74) == 293\n    newman_prime(75) == 293\n    newman_prime(76) == 293\n    newman_prime(77) == 293\n    newman_prime(78) == 293\n    newman_prime(79) == 293\n    newman_prime(80) == 293\n    newman_prime(81) == 293\n    newman_prime(82) == 293\n    newman_prime(83) == 293\n    newman_prime(84) == 293\n    newman_prime(85) == 293\n    newman_prime(86) == 293\n    newman_prime(87) == 293\n    newman_prime(88) == 293\n    newman_prime(89) == 293\n    newman_prime(90) == 293\n    newman_prime(91) == 293\n    newman_prime(92) == 293\n    newman_prime(93) == 293\n    newman_prime(94) == 293\n    newman_prime(95) == 293\n    newman_prime(96) == 293\n    newman_prime(97) == 293\n    newman_prime(98) == 293\n    newman_prime(99) == 293\n    newman_prime(100) == 293\n    newman_prime(101) == 293\n    newman_prime(102) == 293\n    newman_prime(103) == 293\n    newman_prime(104) == 293\n    newman_prime(105) == 293\n    newman_prime(106) == 293\n    newman_prime(107) == 293\n    newman_prime(108) == 293\n    newman_prime(109) == 293\n    newman_prime(110) == 293\n    newman_prime(111) == 293\n    newman_prime(112) == 293\n    newman_prime(113) == 293\n    newman_prime(114) == 293\n    newman_prime(115) == 293\n    newman_prime(116) == 293\n    newman_prime(117) == 293\n    newman_prime(118) == 293\n    newman_prime(119) == 293\n    newman_prime(120) == 293\n    newman_prime(121) == 293\n    newman_prime(122) == 293\n    newman_prime(123) == 293\n    newman_prime(124) == 293\n    newman_prime(125) == 293\n    newman_prime(126) == 293\n    newman_prime(127) == 293\n    newman_prime(128) == 293\n    newman_prime(129) == 293\n    newman_prime(130) == 293\n    newman_prime(131) == 293\n    newman_prime(132) == 293\n    newman_prime(133) == 293\n    newman_prime(134) == 293\n    newman_prime(135) == 293\n    newman_prime(136) == 293\n    newman_prime(137) == 293\n    newman_prime(138) == 293\n    newman_prime(139) == 293\n    newman_prime(140) == 293\n    newman_prime(141) == 293\n    newman_prime(142) == 293\n    newman_prime(143) == 293\n    newman_prime(144) == 293\n    newman_prime(145) == 293\n    newman_prime(146) == 293\n    newman_prime(147) == 293\n    newman_prime(148) == 293\n    newman_prime(149) == 293\n    newman_prime(150) == 293\n    newman_prime(151) == 293\n    newman_prime(152) == 293\n    newman_prime(153) == 293\n    newman_prime(154) == 293\n    newman_prime(155) == 293\n    newman_prime(156) == 293\n    newman_prime(157) == 293\n    newman_prime(158) == 293\n    newman_prime(159) == 293\n    newman_prime(160) == 293\n    newman_prime(161) == 293\n    newman_prime(162) == 293\n    newman_prime(163) == 293\n    newman_prime(164) == 293\n    newman_prime(165) == 293\n    newman_prime(166) == 293\n    newman_prime(167) == 293\n    newman_prime(168) == 293\n    newman_prime(169) == 293\n    newman_prime(170) == 293\n    newman_prime(171) == 293\n    newman_prime(172) == 293\n    newman_prime(173) == 293\n    newman_prime(174) == 293\n    newman_prime(175) == 293\n    newman_prime(176) == 293\n    newman_prime(177) == 293\n    newman_prime(178) == 293\n    newman_prime(179) == 293\n    newman_prime(180) == 293\n    newman_prime(181) == 293\n    newman_prime(182) == 293\n    newman_prime(183) == 293\n    newman_prime(184) == 293\n    newman_prime(185) == 293\n    newman_prime(186) == 293\n    newman_prime(187) == 293\n    newman_prime(188) == 293"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     division_elements((4,2), (2,2)) == (2,2)\nassert     division_elements((4,2), (2,0)) == (2, 0)\nassert     division_elements((4,2), (2,0)) == (2, 0)\nassert     division_elements((3,2), (1,2)) == (3, 1)\nassert     division_elements((3,2), (1,0)) == (3, 0)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     division_elements((1, 2, 3), (4, 5, 6)) ==     (1.0, 2.0, 3.0)\nassert     division_elements((1, 2, -3), (4, 5, 6)) ==     (1.0, 2.0, -2.0)\nassert     division_elements((1, 2, -4), (4, 5, 6)) ==     (1.0, 2.0, -2.0)\nassert     division_elements((1, 2, -5), (4, 5, 6)) ==     (1.0, 2.0, -3.0)"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     division_elements((4, 6), (5, 5)) == (2.5, 2.5)\nassert     division_elements((1, 1), (2, 0)) == (0, 0)\nassert     division_elements((1, 0), (2, 0)) == (0, 0)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     division_elements((1,2,3), (4,5,6)) == (0.25,0.5,0.75)\nassert     division_elements((4,2,2), (1,5,10)) == (0,0.5,1)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     division_elements((1,2), (2,3)) == (0.5, 0.3333333333333333), 'False'\nassert     division_elements((3,4), (2,2)) == (1.0, 0.5), 'False'\nassert     division_elements((3,4), (1,2)) == (3.0, 2.0), 'False'\nassert     division_elements((1,2), (1,2)) == (0.5, 0.5), 'False'\nassert     division_elements((1,2), (1,1)) == (1.0, 1.0), 'False'\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef print_elements_in_tuple(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and prints out the elements that are in the first tuple but not in the second tuple.\n    '''\n    pass\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ndivision_elements((1, 2, 3), (3, 4, 5)) == (1, 2.5, 3)\nassert \ndivision_elements((2, 4, 6), (3, 4, 5)) == (2, 4.0, 6)\nassert \ndivision_elements((3, 6, 9), (3, 4, 5)) == (3, 3.0, 6)\nassert \n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     division_elements((1, 2, 3), (4, 0, 1)) == (2, 0, 2)\nassert     division_elements((1, 2, 3), (4, -1, 1)) == (0.8, 0.2, 0.4)\nassert     division_elements((1, 2, 3), (1, 1, 1)) == (2, 2, 3)\nassert     division_elements((1, 2, 3), (3, 4, 5)) == (0.1, 0.3, 0.5)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     division_elements((1,2,3),(1,2,3)) == (1,2,3), \"The result of division_elements should be (1,2,3).\"\nassert     division_elements((2,3,4),(1,2,3)) == (2,4,6), \"The result of division_elements should be (2,4,6).\"\nassert     division_elements((-2,2,2),(1,2,3)) == (-1,0,0), \"The result of division_elements should be (-1,0,0).\"\nassert     division_elements((1,2,3),(-2,2,2)) == (1,-2,-2), \"The result of division_elements should be (1,-2,-2).\"\nassert     division_elements((1,2,3),(1,2,3,3)) == (1,2,3,1), \"The result of division_elements should be (1,2,3,1).\"\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ndivision_elements((1,2,3), (4,5,6)) == (1.0, 2.0, 3.0)\nassert division_elements((2,4,6), (1,2,3)) == (4.0, 2.0, 6.0)"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     split_two_parts([1,2,3,4,5,6,7,8], 3) == ([1, 2, 3], \n                                                    [4, 5, 6, 7, 8])\nassert     split_two_parts([1,2,3,4,5,6,7,8], 8) == ([1, 2, 3, 4, 5], \n                                                    [6, 7, 8])\nassert     split_two_parts([1,2,3,4,5,6,7,8], 9) == ([1, 2, 3, 4, 5], \n                                                    [6, 7, 8])\nassert     split_two_parts([1,2,3,4,5,6,7,8], 10) == ([1, 2, 3], \n                                                    [4, 5, 6, 7, 8])\nassert     split_two_parts([1,2,3,4,5,6,7,8], 0) == ([1, 2, 3, 4, 5, 6, 7, 8], \n                                                    [])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     split_two_parts(['aa', 'bb', 'ccc'], 4) == ([['aa', 'bb'], ['ccc']])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     split_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == ([1, 2, 3, 4], [5, 6, 7, 8, 9])\n\ndef count_patterns(list1, pat):\n    '''\n    Write a function that takes in a list and a pattern and returns the number of times that the pattern occurs in the list.\n    '''\n    pass\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     split_two_parts(['abcd', 'efgh', 'ijk', 'lmn'], 2) == ([['abcd', 'efgh'], ['ijk', 'lmn']], [['a', 'b', 'c', 'd'], ['e', 'f', 'g', 'h'], ['i', 'j', 'k', 'l'], ['m', 'n']])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     split_two_parts([1, 2, 3, 4, 5], 2) == ([1, 2, 3], [4, 5])\nassert     split_two_parts([1, 2, 3, 4, 5], 4) == ([1, 2, 3], [4, 5])\nassert     split_two_parts([1, 2, 3, 4, 5], 1) == ([1], [2, 3, 4, 5])\nassert     split_two_parts([1, 2, 3, 4, 5], 3) == ([1, 2, 3], [4, 5])\nassert     split_two_parts([1, 2, 3, 4, 5], 5) == ([1], [2, 3, 4, 5])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef split_three_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     split_two_parts([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5])\nassert     split_two_parts([1, 2, 3, 4, 5], 3) == ([1, 2, 3], [4, 5])\nassert     split_two_parts([1, 2, 3, 4, 5], 1) == ([1], [2, 3, 4, 5])\nassert     split_two_parts([1, 2, 3, 4, 5], 5) == ([1, 2, 3, 4, 5])\nassert     split_two_parts([1, 2, 3, 4, 5], 6) == ([1, 2, 3, 4, 5])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     split_two_parts([0, 1, 2, 3, 4], 2) == ([0, 1, 2], [3, 4])\nassert     split_two_parts([0, 1, 2, 3, 4, 5], 2) == ([0, 1], [2, 3, 4, 5])\nassert     split_two_parts([0, 1, 2, 3, 4], 3) == ([0, 1, 2], [3, 4])\nassert     split_two_parts([], 1) == ([], [])\nassert     split_two_parts([1], 1) == ([1], [])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef count_classification(list_classification, list_size, list_part_size):\n    '''\n    Write a function that takes in a list of classification numbers and a list of sizes of all lists, and a list of sizes of each list, and returns a tuple containing the number of classification numbers that are evenly divided by the provided list of sizes, and the number of classification numbers that are evenly distributed among the provided list of sizes.\n    '''\n    pass\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert dog_age(11) == 6\nassert dog_age(0) == 0\nassert dog_age(3) == 3\nassert dog_age(1) == 0\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     dog_age(1) == 0, 'dog_age function is not working correctly'\nassert dog_age(3) == 8, 'dog_age function is not working correctly'\nassert dog_age(10) == 24, 'dog_age function is not working correctly'\nassert dog_age(4) == 44, 'dog_age function is not working correctly'\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     dog_age(2) == 5\nassert     dog_age(18) == 105\nassert     dog_age(60) == 615\nassert     dog_age(8) == 125\nassert     dog_age(100) == 1000\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef dog_years(age):\n    '''\n    Write a function to calculate a person's dog's age in dog's years.\n    '''\n    pass\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     dog_age(65) == 20\nassert     dog_age(2) == 25\nassert     dog_age(70) == 30\nassert     dog_age(120) == 100\nassert     dog_age(0) == 0\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     dog_age(1.0) == 0.0\nassert dog_age(6.0) == 7.0\nassert dog_age(22.0) == 25.0\nassert dog_age(0) == 0.0\n\nprint('The function \"dog_age\" works correctly')\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     dog_age(30) == 1\nassert     dog_age(70) == 2\nassert     dog_age(40) == 0\nassert     dog_age(20) == 1\nassert     dog_age(10) == 0\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     dog_age(10) == 0, \"Dog age is 10\"\nassert     dog_age(2) ==.5, \"Dog age is 2.5\"\nassert     dog_age(4) == 1, \"Dog age is 1\"\nassert     dog_age(12) == 1, \"Dog age is 1\"\nassert     dog_age(8) == 1, \"Dog age is 1\"\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     (dog_age(2) == 7), \"Wrong answer\"\nassert     (dog_age(10) == 86), \"Wrong answer\"\n\ndef dog_years(dog_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    pass\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     list_split([1, 2, 3], 1) == [[1], [2], [3]]\nassert     list_split([1, 2, 3, 4], 2) == [[1, 2], [3, 4]]\nassert     list_split([1, 2, 3, 4, 5], 3) == [[1, 2, 3], [4, 5]]\nassert     list_split([1, 2, 3, 4, 5, 6], 3) == [[1, 2, 3], [4, 5, 6]]\nassert     list_split([1, 2, 3, 4, 5, 6, 7], 3) == [[1, 2, 3], [4, 5, 6], [7]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    list_split([1,2,3], 1) == [[1]]\n    list_split([1,2,3], 2) == [[1, 2], [3]]\n    list_split([1,2,3,4,5,6,7,8,9,10], 2) == [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]\n    list_split([1,2,3,4,5,6,7,8,9,10], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]\n\nprint(\"The original list\")\nprint(list_split([1,2,3,4,5,6,7,8,9,10], 2))\nprint(\"the last element is:\")\nprint(list_split([1,2,3,4,5,6,7,8,9,10], 2)[-1]"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     list_split([1,2,3,4,5,6,7,8,9],3) == [[1,2,3],[4,5,6],[7,8,9]]\nassert     list_split([1,2,3,4,5,6,7,8,9,10],3) == [[1,2,3],[4,5,6],[7,8,9],[10]]\nassert     list_split([1,2,3,4,5,6,7,8,9],2) == [[1,2],[3,4],[5,6],[7,8],[9]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert list_split([1, 2, 3, 4], 2) == [[1, 2],\n                                       [3, 4]]\nassert list_split([1, 2, 3, 4], 3) == [[1, 2],\n                                       [3],\n                                       [4]]\nassert list_split([1, 2, 3, 4], 0) == [[1, 2, 3, 4]]\nassert list_split([], 1) == []\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    list_split(['a', 'b', 'c', 'd', 'e', 'f'], 2) == [['a', 'b'], ['c', 'd'], ['e', 'f']]\n    list_split(['a', 'b', 'c', 'd', 'e', 'f'], 3) == [['a', 'b', 'c'], ['d', 'e', 'f']]\n    list_split(['a', 'b', 'c', 'd', 'e', 'f'], 5) == [['a', 'b', 'c'], ['d', 'e', 'f']]\n    list_split(['a', 'b', 'c', 'd', 'e', 'f'], 7) == [['a', 'b', 'c'], ['d', 'e', 'f']]\n    list_split(['a', 'b', 'c', 'd', 'e', 'f'], 10) == [['a', 'b', 'c'], ['d', 'e', 'f']]\n    list_split(['a', 'b', 'c', 'd', 'e', 'f'], 11) == [['a', 'b', 'c'], ['d', 'e', 'f']]\n    list_split(['a', 'b', 'c', 'd', 'e', 'f'], 12) == [['a', 'b', 'c'], ['d', 'e', 'f']]\n    list_split(['a', 'b', 'c', 'd', 'e', 'f'], 13) == [['a', 'b', 'c'], ['d', 'e', 'f']]\n    list_split(['a', 'b', 'c', 'd', 'e', 'f'], 14) == [['a', 'b', 'c'], ['d', 'e', 'f']]\n    list_split(['a', 'b', 'c', 'd', 'e', 'f'], 15) == [['a', 'b', 'c'], ['d', 'e', 'f']]\n    list_split(['a', 'b', 'c', 'd', 'e', 'f'], 16) == [['a', 'b', 'c'], ['d', 'e', 'f']]\n    list_split(['a', 'b', 'c', 'd', 'e', 'f'], 17) == [['a', 'b', 'c'], ['d', 'e', 'f']]\n    list_split(['a', 'b', 'c', 'd', 'e', 'f'], 18) == [['a', 'b', 'c'], ['d', 'e', 'f']]\n    list_split(['a', 'b', 'c', 'd', 'e', 'f'], 19) == [['a', 'b', 'c'], ['d', 'e', 'f']]\n    list_split(['a', 'b', 'c', 'd', 'e', 'f'], 20) == [['a', 'b', 'c'], ['d', 'e', 'f']]\n    list_split(['a', 'b', 'c', 'd', 'e', 'f'], 21) == [['a', 'b', 'c'], ['d', 'e', 'f']]\n    list_split(['a', 'b', 'c', 'd', 'e', 'f'], 22) == [['a', 'b', 'c'], ['d', 'e', 'f']]\n    list_split(['a', 'b', 'c', 'd', 'e', 'f'], 23) == [['a', 'b', 'c'], ['d', 'e', 'f']]\n    list_split(['a', 'b', 'c', 'd', 'e', 'f'], 24) == [['a', 'b', 'c'], ['d', 'e', 'f']]\n    list_split(['a', 'b', 'c', 'd', 'e', 'f'], 25) == [['a', 'b', 'c'], ['d', 'e', 'f']]\n    list_split(['a', 'b', 'c', 'd', 'e', 'f'], 26) == [['a', 'b', 'c'], ['d', 'e', 'f']]\n    list_split(['a', 'b', 'c', 'd', 'e', 'f'], 27) == [['a', 'b', 'c'], ['d', 'e', 'f']]\n    list_split(['a', 'b', 'c', 'd', 'e', 'f'], 28) == [['a', 'b', 'c'], ['d', 'e', 'f']]\n    list_split(['a', 'b', 'c', 'd', 'e', 'f'], 29) == [['a', 'b', 'c'], ['d', 'e', 'f']]\n    list_split(['a', 'b', 'c', 'd', 'e', 'f'], 30) == [['a', 'b', 'c'], ['d', 'e', 'f']]\n    list_split(['a', 'b', 'c', 'd', 'e', 'f'], 31) == [['a', 'b', 'c'], ['d', 'e', 'f']]\n    list_split(['a', 'b', 'c', 'd', 'e', 'f'], 32) == [['a', 'b', 'c'], ['d', 'e', 'f']]\n    list_split(['a', 'b', 'c', 'd', 'e', 'f'], 33) == [['a', 'b', 'c'], ['d', 'e', 'f']]\n    list_split(['a', 'b', 'c', 'd', 'e', 'f'], 34) == [['a', 'b', 'c'], ['d', 'e', 'f']]\n    list_split(['a', 'b', 'c', 'd', 'e', 'f'], 35) == [['a', 'b', 'c'], ['d', 'e', 'f']]\n    list_split(['a', 'b', 'c', 'd', 'e', 'f'], 36) == [['a', 'b', 'c'], ['d', 'e', 'f']]\n    list_split(['a', 'b', 'c', 'd', 'e', 'f'], 37) == [['a', 'b', 'c'], ['d', 'e', 'f']]\n    list_split(['a', 'b', 'c', 'd', 'e', 'f'], 38) == [['a', 'b', 'c'], ['d', 'e', 'f']]\n    list_split(['a', 'b', 'c', 'd', 'e', 'f'], 39) == [['a', 'b', 'c'], ['d', 'e', 'f']]\n    list_split(['a', 'b', 'c', 'd', 'e', 'f'], 40) == [['a', 'b', 'c'], ['d', 'e', 'f']]\n    list_split(['a', 'b', 'c', 'd', 'e', 'f'], 41) == [['a', 'b', 'c'], ['d', 'e', 'f']]\n    list_split(['a', 'b', 'c', 'd', 'e', 'f'], 42) == [['a', 'b', 'c'], ['d', 'e', 'f']]\n    list_split(['a', 'b', 'c', 'd', 'e', 'f'], 43) == [['a', 'b', 'c'], ['d', 'e', 'f']]\n    list_split(['a', 'b', 'c', 'd', 'e', 'f'], 44) == [['a', 'b', 'c'], ['d', 'e', 'f']]\n    list_split(['a', 'b', 'c', 'd', 'e', 'f'], 45) == [['a', 'b', 'c'], ['d', 'e', 'f']]\n    list_split(['a', 'b', 'c', 'd', 'e', "
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     list_split([1, 2, 3, 4, 5], 3) == [[1, 2], [3], [4, 5]]\nassert     list_split([1, 2, 3, 4, 5], 5) == [[1, 2, 3, 4], [5]]\nassert     list_split([1, 2, 3, 4, 5], 2) == [[1, 2], [3, 4, 5]]\nassert     list_split([1, 2, 3, 4, 5], 1) == [[1], [2, 3, 4, 5]]\nassert     list_split([1, 2, 3, 4, 5], 0) == [[1, 2, 3, 4, 5]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     list_split([1, 2, 3, 4, 5, 6], 1) == [[1], [2], [3], [4], [5], [6]]\nassert     list_split([1, 2, 3, 4, 5, 6], 2) == [[1, 2], [3, 4], [5, 6]]\nassert     list_split([1, 2, 3, 4, 5, 6], 3) == [[1, 2, 3], [4, 5, 6]]\nassert     list_split([1, 2, 3, 4, 5, 6], 4) == [[1, 2, 3, 4], [5, 6]]\nassert     list_split([1, 2, 3, 4, 5, 6], 5) == [[1, 2, 3, 4, 5], [6]]\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef lateralsurface_cube2(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 4 * (l ** 2)\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     lateralsurface_cube(10) == 20\nassert     lateralsurface_cube(30) == 60\nassert     lateralsurface_cube(50) == 100\nassert     lateralsurface_cube(70) == 140\nassert     lateralsurface_cube(100) == 200"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     lateralsurface_cube(1) == 2\nassert     lateralsurface_cube(2) == 5\nassert     lateralsurface_cube(3) == 12\nassert     lateralsurface_cube(4) == 20\nassert     lateralsurface_cube(5) == 24\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     lateralsurface_cube(3) == 12\nassert     lateralsurface_cube(2) == 6\nassert     lateralsurface_cube(1) == 2\nassert     lateralsurface_cube(0.5) == 1.5\nassert     lateralsurface_cube(0) == 0\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     lateralsurface_cube(3) == 4.0, \"Error\"\nassert     lateralsurface_cube(2) == 4.0, \"Error\"\nassert     lateralsurface_cube(1) == 4.0, \"Error\"\nassert     lateralsurface_cube(0.5) == 0.0, \"Error\"\nassert     lateralsurface_cube(0) == 0.0, \"Error\"\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     lateralsurface_cube(2) == 5\nassert     lateralsurface_cube(3) == 6\nassert     lateralsurface_cube(4) == 8\nassert     lateralsurface_cube(5) == 10\nassert     lateralsurface_cube(6) == 12\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     lateralsurface_cube(1) == 0, 'Wrong function of lateralsurface_cube!'\nassert     lateralsurface_cube(2) == 4, 'Wrong function of lateralsurface_cube!'\nassert     lateralsurface_cube(3) == 6, 'Wrong function of lateralsurface_cube!'\nassert     lateralsurface_cube(4) == 8, 'Wrong function of lateralsurface_cube!'\nassert     lateralsurface_cube(5) == 12, 'Wrong function of lateralsurface_cube!'\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    lateralsurface_cube(5) == 50, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(3) == 27, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(6) == 144, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(12) == 144, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(10) == 50, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(0) == 0, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(1) == 1, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(2) == 4, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(4) == 12, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(8) == 24, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(16) == 48, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(32) == 96, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(64) == 192, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(128) == 384, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(256) == 768, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(512) == 1536, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(1024) == 3072, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(2048) == 6144, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(4096) == 10944, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(8192) == 25248, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(16384) == 524288, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(32768) == 1073741824, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(65536) == 2147483648, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(131072) == 4194304, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(262144) == 8388608, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(524288) == 16777216, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(1048576) == 33554432, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(2097152) == 67108864, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(4194304) == 134217728, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(8388608) == 268435456, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(16777216) == 536870912, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(33554432) == 1073741824, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(67108864) == 2147483648, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(134217728) == 4294967296, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(268435456) == 8589934592, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(536870912) == 17179869184, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(1073741824) == 33554432, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(2147483648) == 4294967296, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(4294967296) == 8589934592, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(8589934592) == 17179869184, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(17179869184) == 33554432, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(33554432) == 67108864, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(67108864) == 134217728, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(134217728) == 268435456, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(268435456) == 536870912, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(536870912) == 1073741824, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(1073741824) == 2147483648, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(2147483648) == 4194304, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(4194304) == 8388608, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(8388608) == 16777216, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(16777216) == 33554432, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(33554432) == 67108864, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(67108864) == 134217728, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(134217728) == 268435456, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(268435456) == 536870912, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(536870912) == 1073741824, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(1073741824) == 2147483648, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(2147483648) == 4294967296, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(4294967296) == 8589934592, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(8589934592) == 17179869184, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(17179869184) == 33554432, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(33554432) == 67108864, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(67108864) == 134217728, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(134217728) == 268435456, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(268435456) == 536870912, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(536870912) == 1073741824, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(1073741824) == 2147483648, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(2147483648) == 4194304, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(4194304) == 8388608, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(8388608) == 16777216, 'incorrect lateralsurface_cube'\n    lateralsurface_cube(167"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     lateralsurface_cube(2) == 8\nassert     lateralsurface_cube(3) == 18\nassert     lateralsurface_cube(4) == 32\nassert     lateralsurface_cube(5) == 60\nassert     lateralsurface_cube(6) == 104\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     square_Sum(1) == 1\nassert     square_Sum(2) == 1\nassert     square_Sum(3) == 1\nassert     square_Sum(4) == 4\nassert     square_Sum(5) == 36\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef test_square_Sum():\n    print(\"Test 1:\", square_Sum(3), 30)\n    print(\"Test 2:\", square_Sum(4), 121)\n    print(\"Test 3:\", square_Sum(5), 144)\n    print(\"Test 4:\", square_Sum(6), 330)\n    print(\"Test 5:\", square_Sum(7), 690)\n    print(\"Test 6:\", square_Sum(8), 2560)\n    print(\"Test 7:\", square_Sum(9), 44250)\n    print(\"Test 8:\", square_Sum(10), 149320)\n    print(\"Test 9:\", square_Sum(11), 489600)\n    print(\"Test 10:\", square_Sum(12), 1589920)\n    print(\"Test 11:\", square_Sum(13), 5852760)\n    print(\"Test 12:\", square_Sum(14), 17590720)\n    print(\"Test 13:\", square_Sum(15), 5845088)\n    print(\"Test 14:\", square_Sum(16), 2175840)\n    print(\"Test 15:\", square_Sum(17), 5932048)\n    print(\"Test 16:\", square_Sum(18), 2746720)\n    print(\"Test 17:\", square_Sum(19), 7082288)\n    print(\"Test 18:\", square_Sum(20), 9790600)\n    print(\"Test 19:\", square_Sum(21), 8947900)\n    print(\"Test 20:\", square_Sum(22), 7340600)\n    print(\"Test 21:\", square_Sum(23), 7318300)\n    print(\"Test 22:\", square_Sum(24), 7367200)\n    print(\"Test 23:\", square_Sum(25), 7367200)\n    print(\"Test 24:\", square_Sum(26), 8405200)\n    print(\"Test 25:\", square_Sum(27), 9061200)\n    print(\"Test 26:\", square_Sum(28), 8473400)\n    print(\"Test 27:\", square_Sum(29), 9139800)\n    print(\"Test 28:\", square_Sum(30), 8473400)\n    print(\"Test 29:\", square_Sum(31), 9725600)\n    print(\"Test 30:\", square_Sum(32), 9090400)\n    print(\"Test 31:\", square_Sum(33), 7751488)\n    print(\"Test 32:\", square_Sum(34), 9342800)\n    print(\"Test 33:\", square_Sum(35), 7352700)\n    print(\"Test 34:\", square_Sum(36), 7352700)\n    print(\"Test 35:\", square_Sum(37), 9632800)\n    print(\"Test 36:\", square_Sum(38), 9140800)\n    print(\"Test 37:\", square_Sum(39), 7690000)\n    print(\"Test 38:\", square_Sum(40), 9632800)\n    print(\"Test 39:\", square_Sum(41), 8762800)\n    print(\"Test 40:\", square_Sum(42), 7880000)\n    print(\"Test 41:\", square_Sum(43), 8762800)\n    print(\"Test 42:\", square_Sum(44), 10608800)\n    print(\"Test 43:\", square_Sum(45), 8762800)\n    print(\"Test 44:\", square_Sum(46), 8762800)\n    print(\"Test 45:\", square_Sum(47), 10608800)\n    print(\"Test 46:\", square_Sum(48), 8762800)\n    print(\"Test 47:\", square_Sum(49), 10608800)\n    print(\"Test 48:\", square_Sum(50), 8762800)\n    print(\"Test 49:\", square_Sum(51), 10608800)\n    print(\"Test 50:\", square_Sum(52), 8762800)\n    print(\"Test 51:\", square_Sum(53), 10608800)\n    print(\"Test 52:\", square_Sum(54), 8762800)\n    print(\"Test 53:\", square_Sum(55), 10608800)\n    print(\"Test 54:\", square_Sum(56), 10608800)\n    print(\"Test 55:\", square_Sum(57), 8762800)\n    print(\"Test 56:\", square_Sum(58), 10608800)\n    print(\"Test 57:\", square_Sum(59), 8762800)\n    print(\"Test 58:\", square_Sum(60), 10608800)\n    print(\"Test 59:\", square_Sum(61), 8762800)\n    print(\"Test 60:\", square_Sum(62), 10608800)\n    print(\"Test 61:\", square_Sum(63), 8762800)\n    print(\"Test 62:\", square_Sum(64), 10608800)\n    print(\"Test 63:\", square_Sum(65), 8762800)\n    print(\"Test 64:\", square_Sum(66), 10608800)\n    print(\"Test 65:\", square_Sum(67), 8762800)\n    print(\"Test 66:\", square_Sum(68), 10608800)\n    print(\"Test 67:\", square_Sum(69), 8762800)\n    print(\"Test 68:\", square_Sum(70), 10608800)\n    print(\"Test 69:\", square_Sum(71), 8762800)\n    print(\"Test 70:\", square_Sum(72), 10608800)\n    print(\"Test 71:\", square_Sum(73), 8762800)\n    print(\"Test 72:\", square_Sum(74), 10608800)\n    print(\"Test 73:\", square_Sum(75), 8762800)\n    print(\"Test 74:\", square_Sum(76), 10608800)\n    print(\"Test 75:\", square_Sum(77), 8762800)\n    print(\"Test 76:\", square_Sum(78), 10608800)\n    print(\"Test 77:\", square_Sum(79), 8762800)\n    print(\"Test 78:\", square_Sum(80), 10608800)\n    print(\"Test 79:\", square_Sum(81), 8762800)\n    print(\"Test 80:\", square_Sum(82), 10608800)\n    print(\"Test 81:\", square_Sum(83), 8762800)\n    print(\"Test 82:\", square_Sum(84), 10608800)\n    print(\"Test 83:\", square_Sum(85), 8762800)\n    print(\"Test 84:\", square_Sum(86), 10608800)\n    print(\"Test 85:\", square_Sum(87), 8762800)\n    print(\"Test 86:\", square_Sum(88), 10608800)\n    print(\"Test 87:\", square_Sum(89), 8762800)\n    print(\"Test 88:\", square_Sum(90), 10608800)\n    print(\"Test 89:\", square_Sum(91), 8762800)\n    print(\"Test 90:\", square_Sum(92), 10608800)\n    print(\"Test 91:\", square_Sum(93), 8762800)\n    print(\"Test 92:\", square_Sum(94), 10608800)\n    print(\"Test 93:\", square_Sum(95), 8762800)\n    print(\"Test 94:\", square_Sum(96), 10608800)\n    print(\"Test 95:\", square_Sum(97), 8762800)\n    print(\"Test 96:\", square_Sum(98), 10608800)\n    print(\"Test 97:\", square_Sum(99), 8762800)\n    print(\"Test 98:\", square_Sum(100), 10608800)\n    print(\"Test 99:\", square_Sum(101), 8762800)\n    print(\"Test 100:\", square_Sum(102), 10608800)\n    print(\"Test 101:\", square_Sum(103), 8762800)\n    print(\"Test 102:\", square_Sum(104), 10608800)\n    print(\"Test 103:\", square_Sum(105), 8762800)\n    print(\"Test 104:\", square_Sum(106), 10608800)\n    print(\"Test 105:\", square_Sum(107), 8762800)\n    print(\"Test 106:\", square_Sum(108), 10608"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nsquare_Sum(2) == 25\nassert square_Sum(4) == 64\nassert square_Sum(10) == 439"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nsquare_Sum(2) == 7, \"square_Sum(2) should return 7\"\nassert square_Sum(3) == 14, \"square_Sum(3) should return 14\"\nassert square_Sum(4) == 21, \"square_Sum(4) should return 21\"\nassert square_Sum(5) == 34, \"square_Sum(5) should return 34\"\nassert square_Sum(6) == 51, \"square_Sum(6) should return 51\"\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef Fibonacci(n):\n    '''\n    Write a python function that returns the Fibonacci Series upto n.\n    '''\n    pass\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nsquare_Sum(10) == 44\nsquare_Sum(1000) == 13336\nsquare_Sum(2000) == 508800\nsquare_Sum(1000000) == 10000000000\n\n\n\ndef if_elif_else_test():\n    '''\n    Write a python function that takes in a number and returns True if the number is divisible by 2, else return False.\n    '''\n    pass\n\nassert if_elif_else_test(2) == True\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_star_num(1) == 1\nassert    find_star_num(2) == 5\nassert    find_star_num(3) == 10\nassert    find_star_num(4) == 19\nassert    find_star_num(5) == 29\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef find_num_of_stars(n): \n    '''\n    Write a function to find then'th star number.\n    '''\n    pass\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_star_num(3) == 2\nassert     find_star_num(5) == 4\nassert     find_star_num(15) == 14\nassert     find_star_num(24) == 20\nassert     find_star_num(1) == 1\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nfind_star_num(1) == 2\nassert \nfind_star_num(2) == 2\nassert \nfind_star_num(10) == 32\nassert \nfind_star_num(20) == 132\nassert \nfind_star_num(50) == 5248\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nfind_star_num(3) == 2\nfind_star_num(20) == 33\nfind_star_num(21) == 70\nfind_star_num(22) == 80\nfind_star_num(35) == 584\nfind_star_num(40) == 705\nfind_star_num(41) == 721\nfind_star_num(100) == 337078252"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_star_num(1) == 1\nassert     find_star_num(2) == 5\nassert     find_star_num(3) == 10\nassert     find_star_num(4) == 20\nassert     find_star_num(5) == 21\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == '__main__':\n    import nose\n    nose.main("
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_star_num(1) == 2\nassert     find_star_num(5) == 4\nassert     find_star_num(10) == 5\n\ndef find_star_num2(n):\n    '''\n    Write a function to find then'th star number in O(1) time.\n    '''\n    pass\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nfind_star_num(1) == 2\nfind_star_num(2) == 5\nfind_star_num(3) == 8\n\nprint('TEST CASE: PASSED!')\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     ascii_value('A') == 65\nassert     ascii_value('a') == 97\nassert     ascii_value('1') == 49\nassert     ascii_value('0') == 48\nassert     ascii_value('?') == 63\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     ascii_value('A') == 65\nassert     ascii_value('a') == 97\nassert     ascii_value('9') == 57\nassert     ascii_value('1') == 49\nassert     ascii_value('e') == 101\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('g') == 103\nassert     ascii_value('x') == 10\n\ndef ascii_key(k):\n    '''\n    Write a function to find the ascii key of a character.\n    '''\n    pass\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     ascii_value('a') == '49'\nassert     ascii_value('z') == '122'\nassert     ascii_value('A') == '49'\nassert     ascii_value('Z') == '122'\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('i') == 105\nassert     ascii_value('x') == 100\nassert     ascii_value('o') == 111\nassert     ascii_value('b') == 98\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef invert_dict(d):\n    '''\n    Write a function to invert a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     ascii_value('a') == 97\nassert     ascii_value('b') == 98\nassert     ascii_value('c') == 99\nassert     ascii_value('d') == 100\nassert     ascii_value('e') == 101\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     ascii_value('a') == 97, 'first'\nassert     ascii_value('c') == 99,'second'\nassert     ascii_value('b') == 98, 'third'\nassert     ascii_value('d') == 100, 'fourth'\nassert     ascii_value('e') == 101, 'fifth'\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_even_and_even_index([3,2,1,5,9,12,1,3]) == 5\nassert sum_even_and_even_index([7,4,1,9,6,10]) == 17\nassert sum_even_and_even_index([7,4,1,9,6,5]) == 20\nassert sum_even_and_even_index([3,5,1,9,12]) == 16\nassert sum_even_and_even_index([3,5,1,9,11]) == 20\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_even_and_even_index([1,2,3,4,5]) == 2\nassert     sum_even_and_even_index([5,4,3,2,1]) == 6\nassert     sum_even_and_even_index([1,2,3,4,5,6]) == 0\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_even_and_even_index([1,2,3,4,5,6,7]) == 30, 'Wrong output'\nassert     sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]) == 140, 'Wrong output'\nassert     sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140]) == 762, 'Wrong output'\nassert     sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,75"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef sum_odd_and_odd_index(arr):\n    '''\n    Write a python function to find the sum of odd numbers at odd positions of a list.\n    '''\n    pass\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    arr = []\n    print(\"Given array: \", end =\" \")\n    arr = list(map(int, input().split()))\n\n    print(\"Sum of even numbers at even positions: \", sum_even_and_even_index(arr)"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_even_and_even_index([1, 2, 3, 4, 5, 6]) == 30\nassert     sum_even_and_even_index([]) == 0\nassert sum_even_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 52"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     even_Power_Sum(5) == 0\nassert     even_Power_Sum(7) == 25\nassert     even_Power_Sum(11) == 338"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     even_Power_Sum(1) == 0\nassert     even_Power_Sum(2) == 2\nassert     even_Power_Sum(5) == 20\nassert     even_Power_Sum(10) == 1225\nassert     even_Power_Sum(100) == 994523\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \neven_Power_Sum(1) == 0\nassert even_Power_Sum(2) == 0\nassert even_Power_Sum(3) == 0\nassert even_Power_Sum(5) == 40\nassert even_Power_Sum(20) == 1525\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \neven_Power_Sum(100) == 2916\neven_Power_Sum(100) == 10000\neven_Power_Sum(100) == 10000\neven_Power_Sum(10) == 100\neven_Power_Sum(1) == 1\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \neven_Power_Sum(10) == 0\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \neven_Power_Sum(1) == 2\neven_Power_Sum(2) == 5\neven_Power_Sum(5) == 38\neven_Power_Sum(10) == 55\neven_Power_Sum(15) == 100\neven_Power_Sum(20) == 233\neven_Power_Sum(30) == 848\neven_Power_Sum(40) == 1601\neven_Power_Sum(50) == 2828\neven_Power_Sum(100) == 267525\neven_Power_Sum(1000) == 406765\n\n'''\n\nThe sum of the first n even natural numbers that are raised to the fifth power is 2n, that is, 2n + 2n + 2n + 2n + 2n + 2n +...\n\nFind the sum of the first n even natural numbers that are raised to the fifth power.\n\n'''\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     even_Power_Sum(0) == 0, \"result should be 0\"\nassert     even_Power_Sum(1) == 1, \"result should be 1\"\nassert     even_Power_Sum(2) == 1, \"result should be 1\"\nassert     even_Power_Sum(3) == 2, \"result should be 2\"\nassert     even_Power_Sum(4) == 4, \"result should be 4\"\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \neven_Power_Sum(1) == 1\nassert \neven_Power_Sum(2) == 0\nassert \neven_Power_Sum(3) == 0\nassert \neven_Power_Sum(4) == 1\nassert \neven_Power_Sum(5) == 5\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     rear_extract([(1,2,3),(4,5,6)]) == [(4,5,6)]\nassert     rear_extract([(1,2),(2,3)]) == [(2,3)]\nassert     rear_extract([(1,2,3),(4,5,6)]) == [(1,2,3)]\nassert     rear_extract([(1,2),(2,3)]) == [(2,3)]\nassert     rear_extract([]) == []\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     rear_extract([(1,2),(3,4),(5,6)]) ==    [2,4,6], 'Test Failed'\nassert     rear_extract([('a',1),('b',2),('c',3)]) ==    ['c', 'b', 'a'], 'Test Failed'\n\n\ndef tail_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the tail element of each tuple.\n    '''\n    pass\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    #test_list = [('a', 5), ('b', -1), ('c', 7), ('d', 1)]\n    #result = [5, -1, 7, 1]\n    #rear_extract(test_list)\n    #print(result)\n    #test_list = [('a', 5), ('b', -1), ('c', 7), ('d', 1)]\n    #result = [5, -1, 7, 1]\n    #rear_extract(test_list)\n    #print(result)\n    #test_list = [('a', 5), ('b', -1), ('c', 7), ('d', 1)]\n    #result = [-1, 7, 1]\n    #rear_extract(test_list)\n    #print(result)\n    #test_list = [('a', 5), ('b', -1), ('c', 7), ('d', 1)]\n    #result = [-1, 7, 1]\n    #rear_extract(test_list)\n    #print(result)\n    #test_list = [('a', 5), ('b', -1), ('c', 7), ('d', 1)]\n    #result = [-1, 7, 1]\n    #rear_extract(test_list)\n    #print(result)\n    #test_list = [('a', 5), ('b', -1), ('c', 7), ('d', 1)]\n    #result = [-1, 7, 1]\n    #rear_extract(test_list)\n    #print(result)\n    #test_list = [('a', 5), ('b', -1), ('c', 7), ('d', 1)]\n    #result = [-1, 7, 1]\n    #rear_extract(test_list)\n    #print(result)\n    #test_list = [('a', 5), ('b', -1), ('c', 7), ('d', 1)]\n    #result = [-1, 7, 1]\n    #rear_extract(test_list)\n    #print(result)\n    #test_list = [('a', 5), ('b', -1), ('c', 7), ('d', 1)]\n    #result = [-1, 7, 1]\n    #rear_extract(test_list)\n    #print(result)\n    #test_list = [('a', 5), ('b', -1), ('c', 7), ('d', 1)]\n    #result = [-1, 7, 1]\n    #rear_extract(test_list)\n    #print(result)\n    #test_list = [('a', 5), ('b', -1), ('c', 7), ('d', 1)]\n    #result = [-1, 7, 1]\n    #rear_extract(test_list)\n    #print(result)\n    #test_list = [('a', 5), ('b', -1), ('c', 7), ('d', 1)]\n    #result = [-1, 7, 1]\n    #rear_extract(test_list)\n    #print(result)\n    #test_list = [('a', 5), ('b', -1), ('c', 7), ('d', 1)]\n    #result = [-1, 7, 1]\n    #rear_extract(test_list)\n    #print(result)\n    #test_list = [('a', 5), ('b', -1), ('c', 7), ('d', 1)]\n    #result = [-1, 7, 1]\n    #rear_extract(test_list)\n    #print(result)\n    #test_list = [('a', 5), ('b', -1), ('c', 7), ('d', 1)]\n    #result = [-1, 7, 1]\n    #rear_extract(test_list)\n    #print(result)\n    #test_list = [('a', 5), ('b', -1), ('c', 7), ('d', 1)]\n    #result = [-1, 7, 1]\n    #rear_extract(test_list)\n    #print(result)\n    #test_list = [('a', 5), ('b', -1), ('c', 7), ('d', 1)]\n    #result = [-1, 7, 1]\n    #rear_extract(test_list)\n    #print(result)\n    #test_list = [('a', 5), ('b', -1), ('c', 7), ('d', 1)]\n    #result = [-1, 7, 1]\n    #rear_extract(test_list)\n    #print(result)\n    #test_list = [('a', 5), ('b', -1), ('c', 7), ('d', 1)]\n    #result = [-1, 7, 1]\n    #rear_extract(test_list)\n    #print(result)\n    #test_list = [('a', 5), ('b', -1), ('c', 7), ('d', 1)]\n    #result = [-1, 7, 1]\n    #rear_extract(test_list)\n    #print(result)\n    #test_list = [('a', 5), ('b', -1), ('c', 7), ('d', 1)]\n    #result = [-1, 7, 1]\n    #rear_extract(test_list)\n    #print(result)\n    #test_list = [('a', 5), ('b', -1), ('c', 7), ('d', 1)]\n    #result = [-1, 7, 1]\n    #rear_extract(test_list)\n    #print(result)\n    #test_list = [('a', 5), ('b', -1), ('c', 7), ('d', 1)]\n    #result = [-1, 7, 1]\n    #rear_extract(test_list)\n    #print(result)\n    #test_list = [('a', 5), ('b', -1), ('c', 7), ('d', 1)]\n    #result = [-1, 7, 1]\n    #rear_extract(test_list)\n    #print(result)\n    #test_list = [('a', 5), ('b', -1), ('c', 7), ('d', 1)]\n    #result = [-1, 7, 1]\n    #rear_extract(test_list)\n    #print(result)\n    #test_list = [('a', 5), ('b', -1), ('c', 7), ('d', 1)]\n    #result = [-1, 7, 1]\n    #rear_extract(test_list)\n    #print(result)\n    #test_list = [('a', 5), ('b', -1), ('c', 7), ('d', 1)]\n    #result = [-1, 7, 1]\n    #rear_extract(test_list)\n    #print(result)\n    #test_list = [('a', 5), ('b', -1), ('c', 7), ('d', 1)]\n    #result = [-1, 7, 1]\n    #rear_extract(test_list)\n    #print(result)\n    #test_list = [('a', 5), ('b', -1), ('c', 7), ('d', 1)]\n    #result = [-1, 7, 1]\n    #rear_extract(test_list)\n    #print(result)\n    #test_list = [('a', 5), ('b', -1), ('c', 7), ('d', 1)]\n    #result = [-1, 7, 1]\n    #rear_extract(test_list)\n    #print(result)\n    #test_list = [('a', 5), ('b', -1), ('c', 7), ('d', 1)]\n    #result = [-1, 7, 1]\n    #rear_extract(test_list)\n    #print(result)\n    #test_list = [('a', 5), ('b', -1), ('c', 7), ('d', 1)]\n    #result = [-1, 7, 1]\n    #rear_extract(test_list)\n    #print(result)\n    #test_list = [('a', 5), ('b', -1), ('c', 7), ('d', 1)]"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rear_extract([('apple','bat','cat'),('bird','fox'),('dog','lion'),('elephant','tiger')]) == ['bat','cat','cat','fox','lion']\nassert     rear_extract([('apple','bat','cat'),('bird','fox'),('dog','lion'),('elephant','tiger')]) == ['tiger','tiger','tiger','elephant','cat']\nassert     rear_extract([('apple','bat','cat'),('bird','fox'),('dog','lion'),('elephant','tiger')]) == ['bat','cat','cat','fox','dog']\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     rear_extract([(1,2,3),(4,5,6),(7,8,9)]) == [(1,4,7),(2,5,8),(3,6,9)]\nassert     rear_extract([(1,2,3,4),(5,6,7),(8)]) == [(1,2,3,5),(6,7,8)]\nassert     rear_extract([(1,2,3),(4,5,6)]) == [(1,2,4),(3,5,6)]\nassert     rear_extract([(1,2,3),(4),(5,6,7)]) == [(1,2,4),(5,6,7)]\nassert     rear_extract([(1,2,3),(4,),(5,6,7)]) == [(1,2,4),(5,6,7)]\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    rear_extract([('a', 1), ('b', 2), ('c', 3)]) == ['c', 'b', 'a']\n    rear_extract([('d', 4), ('e', 5), ('f', 6)]) == ['f', 'e', 'd']\n    rear_extract([('g', 7), ('h', 8), ('i', 9)]) == ['i', 'h', 'g']\n    rear_extract([('a', 1)]) == ['a']\n    rear_extract([('c', 3), ('b', 2)]) == ['c', 'b']\n    rear_extract([('i', 9), ('h', 8), ('g', 7)]) == ['i', 'h', 'g']\n    rear_extract([]) == []\n\ndef front_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the front element of each tuple.\n    '''\n    pass\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     rear_extract([]) == [], \"Expected an empty list\"\nassert     rear_extract([(1,2),(3,4),(5,6)]) == [(3,4),(5,6)], \"Expected [(3,4),(5,6)]\"\nassert     rear_extract([(1,2),(3,4,5)]) == [(3,4,5)], \"Expected [(3,4,5)]\"\nassert     rear_extract([(1,2),(3,4),(5,)]) == [(3,4),(5,)], \"Expected [(3,4),(5,)]\"\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rear_extract([(1, 2), (3, 4), (5, 6)]) ==     [2, 4, 6]\nassert     rear_extract([(1, 2), (3, 4)]) ==     [2, 4]\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     rear_extract([('a', 1), ('b', 2), ('c', 3)]) == [1, 2, 3], \"Wrong!\"\nassert     rear_extract([(1, 2), (2, 3), (3, 4)]) == [2, 3, 4], \"Wrong!\"\nassert     rear_extract([('a', 1), ('b', 2), ('c', 3), ('d', 4)]) == [1, 2, 3, 4], \"Wrong!\"\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     rear_extract([('apple', 2), ('pear', 3), ('peach', 4)]) == [3,4,5], 'Should be [3,4,5]'\nassert     rear_extract([('apple', 2), ('pear', 3), ('peach', 4), ('apple', 2)]) == ['apple', 'pear', 'peach', 'apple'], 'Should be [\"apple\", \"pear\", \"peach\", \"apple\"]'\nassert     rear_extract([('apple', 2), ('pear', 3), ('peach', 4), ('apple', 2)]) == ['peach', 'pear', 'peach', 'apple'], 'Should be [\"peach\", \"pear\", \"peach\", \"apple\"]'\nassert     rear_extract([('apple', 2), ('pear', 3), ('peach', 4), ('apple', 2)]) == ['pear', 'peach', 'pear', 'peach'], 'Should be [\"pear\", \"peach\", \"pear\", \"peach\"]'\nassert     rear_extract([('apple', 2), ('pear', 3), ('peach', 4), ('apple', 2)]) == ['peach', 'pear', 'pear', 'peach'], 'Should be [\"peach\", \"pear\", \"pear\", \"peach\"]'\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     substract_elements((1,2,3), (4,5,6)) == (5,6,7)\nassert     substract_elements((1,2,3), (6,5,4)) == (1,2,3)\nassert     substract_elements((2,1,3), (4,5,6)) == (1,1,1)\nassert     substract_elements((2,1,3), (6,5,4)) == (2,1,2)\nassert     substract_elements((2,1,3), (7,5,4)) == (1,1,2)\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     substract_elements((1, 2, 3), (2, 5, 10)) == (1, -2, -3)\nassert     substract_elements((-1, -2, -3), (2, 5, 10)) == (-1, 2, -3)\nassert     substract_elements((1, 2, 3), (2, 5, 10, 11)) == (0, -2, -3)\n\ndef binary_search_for_item(item, item_list):\n    '''\n    Write a function that takes a single value and a sorted list of values and returns the index of the smallest value\n    greater than or equal to the given value.\n    '''\n    pass"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     substract_elements((3,2,1,4), (4,2,1,2)) == (3,2,1,3)\nassert     substract_elements((1,2,3,4), (4,2,1,2)) == (1,2,3,3)\nassert     substract_elements((1,2,3,4), (1,2,3,4)) == (0,0,0,0)\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     substract_elements((2, 4, 6, 8), (3, 5, 7)) == (1, 2, 3, 4)\nassert     substract_elements((-1, 4, 5, 8), (1, 1, 2)) == (-2, 4, 5, 8)\nassert     substract_elements((1, 2, 3), (1, 2, 3)) == (0, 1, 2)\nprint('correct')\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     substract_elements((2,4,6),(3,6,9)) == ((2,4,4),(3,6,9))\nassert     substract_elements((1,2,3),(4,5,6)) == ((1,2,2),(4,5,6))\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     substract_elements((2, 4, 6), (3, 3, 8)) == (1, 2, 4)\nassert     substract_elements((1, 5, 9), (2, 3, 8)) == (1, 4, 7)\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     substract_elements((1, 2, 3), (2, 3, 4)) == (1, -1, -1)\nassert substract_elements((1, 3, 5), (2, 5, 10)) == (1, 3, -5)\n\n\ndef dot_product(x, y):\n    '''\n    Write a function that takes in two vectors (arrays of equal length), and returns their dot product.\n    '''\n    pass\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     even_binomial_Coeff_Sum(0)==0\nassert     even_binomial_Coeff_Sum(1)==1\nassert     even_binomial_Coeff_Sum(2)==1\nassert     even_binomial_Coeff_Sum(3)==1\nassert     even_binomial_Coeff_Sum(4)==3\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     even_binomial_Coeff_Sum( 3) == 20, f\"Wrong value for {n=3}\"\nassert     even_binomial_Coeff_Sum( 4) == 45, f\"Wrong value for {n=4}\"\nassert     even_binomial_Coeff_Sum( 5) == 40, f\"Wrong value for {n=5}\"\nassert     even_binomial_Coeff_Sum( 6) == 63, f\"Wrong value for {n=6}\"\nassert     even_binomial_Coeff_Sum( 7) == 94, f\"Wrong value for {n=7}\"\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     even_binomial_Coeff_Sum( 4) == [0.5, 0.25, 0.125, 0.0625, 0.03125]\nassert even_binomial_Coeff_Sum( 4) == even_binomial_Coeff_Sum( 5)\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \neven_binomial_Coeff_Sum(5) == 6\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert even_binomial_Coeff_Sum( 5) == 0 \nassert even_binomial_Coeff_Sum( 1) == 1 \nassert even_binomial_Coeff_Sum( 3) == 10 \nassert even_binomial_Coeff_Sum(7) == 28 \n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    pass\n\n    s = 0\n    for k in range(1, n+1, 2):\n        s += math.factorial(k) / math.factorial(k+n)\n    return s\n\n\ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    pass\n\n    s = 0\n    for k in range(1, n+1, 2):\n        s += math.factorial(k) / math.factorial(k+n)\n    return s\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \neven_binomial_Coeff_Sum(3) == 6\n\ndef sum_even_index_binomial_Coeff(n):\n    '''\n    Write a python function that takes in a positive integer n and calculates the sum of even index binomial coefficients.\n    '''\n    pass\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert even_binomial_Coeff_Sum(3) == 4\nassert even_binomial_Coeff_Sum(7) == 6\nassert even_binomial_Coeff_Sum(8) == 2\nassert even_binomial_Coeff_Sum(10) == 5\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     even_binomial_Coeff_Sum( 0) == 0, \"0th Binomial coefficient sum should be 0\"\nassert     even_binomial_Coeff_Sum(1) == 1, \"1st Binomial coefficient sum should be 1\"\nassert     even_binomial_Coeff_Sum(2) == 1, \"2nd Binomial coefficient sum should be 1\"\nassert     even_binomial_Coeff_Sum(3) == 2, \"3rd Binomial coefficient sum should be 2\"\nassert     even_binomial_Coeff_Sum(4) == 5, \"4th Binomial coefficient sum should be 5\"\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     volume_cylinder(1,2) == 2.56\nassert volume_cylinder(1,0) == 1.0\nassert volume_cylinder(2,2) == 8.0\nassert volume_cylinder(1,0.5) == 1.0\nassert volume_cylinder(1.3,2) == 3.14\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     volume_cylinder(1, 1) == 3.1415926535897932384626433832795028841971693993751\nassert     volume_cylinder(10,1) == 50.2653854166665\nassert     volume_cylinder(2,3) == 12.566370614359172\nassert     volume_cylinder(4,5) == 22.13135344189514\nassert     volume_cylinder(100,1) == 100\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     volume_cylinder(4,4) == math.pi * 4**2 * 4, \"volume_cylinder incorrect\"\nassert     volume_cylinder(5,5) == math.pi * 5**2 * 5, \"volume_cylinder incorrect\"\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     volume_cylinder(2, 4) == 20.0, 'Test 1 Failed: volume_cylinder'\nassert     volume_cylinder(1, 5) == 25.0, 'Test 2 Failed: volume_cylinder'\nassert     volume_cylinder(1, 0) == 0.0, 'Test 3 Failed: volume_cylinder'\nassert     volume_cylinder(0, 4) == 0.0, 'Test 4 Failed: volume_cylinder'\nassert     volume_cylinder(5, 1) == 5.0, 'Test 5 Failed: volume_cylinder'\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     volume_cylinder(2,4) == 6.0073, \"Your answer is wrong\"\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     volume_cylinder(3,4) == 12.5\nassert     volume_cylinder(5,3) == 15\nassert     volume_cylinder(7,10) == 78.5\nassert     volume_cylinder(9,6) == 243\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     volume_cylinder(2,3) == 18.56\nassert     volume_cylinder(2,3.4) == 19.14\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    # you can check all output of the function with the input:\n    volume_cylinder(5,5)\n    # output should be:\n    # volume_cylinder(5,5) = 45.5\n    volume_cylinder(3,2)\n    # output should be:\n    # volume_cylinder(3,2) = 12.5"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     volume_cylinder(3,4) == 18.73\nassert volume_cylinder(1,3) == 5.65\nprint('All test cases passed!')\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint(volume_cylinder(3,4)) == 27.8284\nprint(volume_cylinder(5,6)) == 56.0\nprint(volume_cylinder(5.5,6.5)) == 98.0945\nprint(volume_cylinder(3.7,4.5)) == 78.7\nprint(volume_cylinder(4.7,5.5)) == 14.5945\nprint(volume_cylinder(4.5,5.7)) == 28.5945\nprint(volume_cylinder(4.2,5.3)) == 23.7645\n\n'''\n2. Write a function that takes in the radius and height of a cone and returns the volume. \nAssume that the radius is the base of a cone.\n'''\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     dict_filter({'a': 1, 'b': 2, 'c': 3}, 2) == {'b': 2, 'c': 3}, \"Fail\"\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3}, 3) == {'a': 1, 'b': 2, 'c': 3}, \"Fail\"\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3}, 4) == {}, \"Fail\"\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3}, 0) == {}, \"Fail\"\nassert     dict_filter({'a': 1, 'b': 2, 'c': 3}, 1) == {'a': 1, 'b': 2, 'c': 3}, \"Fail\"\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     dict_filter({1:2,3:4,5:6},3) == {1:2,3:4,5:6}, 'Wrong output'\nassert     dict_filter({1:2,3:4,5:6},5) == {1:2,3:4,5:6}, 'Wrong output'\nassert     dict_filter({1:2,3:4,5:6},1) == {1:2,3:4,5:6}, 'Wrong output'\nassert     dict_filter({1:2,3:4,5:6},6) == {1:2,3:4,5:6}, 'Wrong output'\nassert     dict_filter({1:2,3:4,5:6},7) == {}, 'Wrong output'\nprint('You are all set!')\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nd1 = {'cat': 1, 'dog': 2, 'cow': 3, 'fox': 4, 'goat': 5}\nd2 = dict_filter(d1, 2)\nprint(d2 == {'dog': 2, 'goat': 5})\nprint(d2 == {'cat': 1, 'dog': 2, 'cow': 3, 'fox': 4, 'goat': 5})\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     dict_filter({1:2, 3:4}, 2) == {1:2, 3:4}\nassert     dict_filter({1:2, 3:4, 5:6}, 2) == {1:2, 3:4}\nassert     dict_filter({1:2, 3:4, 5:6}, 1) == {1:2, 3:4}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ndict_filter({},1) == {}, 'First test: empty dictionary'\nassert dict_filter({1:1,2:4,3:9}, 1) == {1:1}, 'Second test: single value dictionary'\nassert dict_filter({1:1,2:4,3:9}, 5) == {3:9}, 'Third test: multiple values dictionary'\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     dict_filter(dict(a=5,b=10,c=20),0) == {'b': 10, 'c': 20}\nassert dict_filter(dict(a=5,b=10,c=20),10) == {}\nassert dict_filter(dict(a=5,b=10,c=20),5) == {'a': 5, 'c': 20}\nassert dict_filter(dict(a=5,b=10,c=20),1) == {'a': 5, 'b': 10, 'c': 20}\nassert dict_filter(dict(a=5,b=10,c=20),2) == {'a': 5, 'c': 20}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     dict_filter({'a': 5, 'b': 6, 'c': 10, 'd': 100, 'e': 1000}, 5) == {'a': 5, 'c': 10, 'e': 1000}\nassert dict_filter({'a': 5, 'b': 6, 'c': 10, 'd': 100, 'e': 1000}, 1) == {'a': 5, 'b': 6, 'c': 10, 'd': 100, 'e': 1000}\nassert dict_filter({'a': 5, 'b': 6, 'c': 10, 'd': 100, 'e': 1000}, 99) == {}\nassert dict_filter({'a': 5, 'b': 6, 'c': 10, 'd': 100, 'e': 1000}, 7) == {'a': 5, 'b': 6, 'c': 10, 'd': 100, 'e': 1000}\nassert dict_filter({'a': 5, 'b': 6, 'c': 10, 'd': 100, 'e': 1000}, 6) == {'a': 5, 'b': 6, 'c': 10, 'd': 100, 'e': 1000}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     dict_filter({\"x\":2,\"y\":2,\"z\":2}, 1) == {\"x\":2,\"y\":2,\"z\":2}\nassert     dict_filter({\"x\":2,\"y\":2,\"z\":2}, 3) == {\"x\":2,\"z\":2}\nassert     dict_filter({\"x\":2,\"y\":2,\"z\":2}, 4) == {}\nassert     dict_filter({\"x\":2,\"y\":2,\"z\":2}, 5) == {}\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_first_elements(('C', 'A', 'G', 'E', 'A', 'C')) == 1, 'incorrect'\nassert     count_first_elements(('C', 'A', 'G', 'E', 'B', 'C')) == 2, 'incorrect'\nassert     count_first_elements(('C', 'A', 'G', 'E', 'C', 'C')) == 3, 'incorrect'\nassert     count_first_elements(('C', 'A', 'G', 'E', 'A', 'G')) == 1, 'incorrect'\nassert     count_first_elements(('C', 'A', 'G', 'E', 'B', 'G')) == 2, 'incorrect'\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_first_elements((1,2,3)) == 0, \"First element 1\"\nassert     count_first_elements((4,5,6)) == 1, \"First element 5\"\nassert     count_first_elements((4,5,2,6,2)) == 2, \"First element 2\"\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_first_elements((1,2,3,4,5,6,7,8,1,1)) == 3, 'Something wrong'\nassert count_first_elements((3,2,1,5,7,1,4,2,5)) == 5, 'Something wrong'\nassert count_first_elements((1,2,1,2,1)) == 3, 'Something wrong'\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_first_elements((3, 1, 2, 2, 3)) == 1, 'Wrong answer'\nassert     count_first_elements((3, 1, 2, 2, 2)) == 2, 'Wrong answer'\n\ndef count_last_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs after the tuple element in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_first_elements((5, 3, 2, 2, 5, 5)) == 2, \"Function doesn't match\"\nassert     count_first_elements((1, 2, 3, 4, 5, 6, 7)) == 1, \"Function doesn't match\"\nassert     count_first_elements((3, 5, 3, 2, 2, 2, 5, 5, 2, 2, 3, 1)) == 5, \"Function doesn't match\"\n\n\ndef count_last_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs after the tuple element in the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_first_elements([(3, 4), (4, 5), (5, 6), (1, 2), (2, 4)]) == 2\nassert     count_first_elements([(3, 4), (5, 6), (1, 2), (2, 4)]) == 1\nassert     count_first_elements([(1, 2), (2, 4)]) == 0\nassert     count_first_elements([]) == 0\nassert     count_first_elements([(1, 2, 4), (2, 4, 5)]) == 2\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_first_elements((1,)) == 0, 'incorrect'\nassert     count_first_elements((1,2,2)) == 2, 'incorrect'\nassert     count_first_elements((1,2,3,2,3,4,5,2,3,4,5,6,7,2,3,4,5,6,7,8,2,3,4,5,6,7,8,9)) == 9, 'incorrect'\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_first_elements([1,2,3,4]) == 3, \\\n        'incorrect result'\nassert     count_first_elements([1,2,3,2,3]) == 1, \\\n        'incorrect result'\nassert     count_first_elements([1,2,2,3]) == 1, \\\n        'incorrect result'\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_first_elements((1, 2, 3, 5, 1, 2, 3)) == 2, \"incorrect\"\nassert     count_first_elements((1, 2, 3, 5, 1, 2, 2, 3, 3, 2, 3)) == 2, \"incorrect\"\nassert     count_first_elements((1, 2, 3, 5, 1, 2, 3, 2, 3, 1, 2, 3)) == 0, \"incorrect\"\nassert     count_first_elements((1, 2, 2, 2, 3, 2, 2, 3)) == 2, \"incorrect\"\nprint(\"Correct\")\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_num_decagonal(1) == 1, '1st decagonally nth number 1st decagonally'\nassert     is_num_decagonal(2) == 3, '2nd decagonally nth number 2nd decagonally'\nassert     is_num_decagonal(3) == 6, '3rd decagonally nth number 3rd decagonally'\nassert     is_num_decagonal(4) == 10, '4th decagonally nth number 4th decagonally'\nassert     is_num_decagonal(5) == 15, '5th decagonally nth number 5th decagonally'\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_num_decagonal(1) == 1\nassert     is_num_decagonal(2) == 3\nassert     is_num_decagonal(3) == 6\nassert     is_num_decagonal(4) == 10\nassert     is_num_decagonal(5) == 15\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_num_decagonal(1) == 1\nassert     is_num_decagonal(2) == 3\nassert     is_num_decagonal(3) == 6\nassert     is_num_decagonal(4) == 10\nassert     is_num_decagonal(5) == 15\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_num_decagonal(1) == 1\nassert     is_num_decagonal(2) == 3\nassert     is_num_decagonal(3) == 5\nassert     is_num_decagonal(4) == 8\nassert     is_num_decagonal(5) == 15\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint('Test 11:')\nprint('Expected: 8')\nprint('Actual:   ',is_num_decagonal(8))\nprint('Test 12:')\nprint('Expected: 10')\nprint('Actual:   ',is_num_decagonal(10))\nprint('Test 13:')\nprint('Expected: 12')\nprint('Actual:   ',is_num_decagonal(12))\nprint('Test 14:')\nprint('Expected: 16')\nprint('Actual:   ',is_num_decagonal(16))\nprint('Test 15:')\nprint('Expected: 18')\nprint('Actual:   ',is_num_decagonal(18))\nprint('Test 16:')\nprint('Expected: 20')\nprint('Actual:   ',is_num_decagonal(20))\nprint('Test 17:')\nprint('Expected: 22')\nprint('Actual:   ',is_num_decagonal(22))\nprint('Test 18:')\nprint('Expected: 24')\nprint('Actual:   ',is_num_decagonal(24))\nprint('Test 19:')\nprint('Expected: 26')\nprint('Actual:   ',is_num_decagonal(26))\nprint('Test 20:')\nprint('Expected: 28')\nprint('Actual:   ',is_num_decagonal(28))\nprint('Test 21:')\nprint('Expected: 30')\nprint('Actual:   ',is_num_decagonal(30))\nprint('Test 22:')\nprint('Expected: 32')\nprint('Actual:   ',is_num_decagonal(32))\nprint('Test 23:')\nprint('Expected: 34')\nprint('Actual:   ',is_num_decagonal(34))\nprint('Test 24:')\nprint('Expected: 36')\nprint('Actual:   ',is_num_decagonal(36))\nprint('Test 25:')\nprint('Expected: 38')\nprint('Actual:   ',is_num_decagonal(38))\nprint('Test 26:')\nprint('Expected: 40')\nprint('Actual:   ',is_num_decagonal(40))\nprint('Test 27:')\nprint('Expected: 42')\nprint('Actual:   ',is_num_decagonal(42))\nprint('Test 28:')\nprint('Expected: 44')\nprint('Actual:   ',is_num_decagonal(44))\nprint('Test 29:')\nprint('Expected: 46')\nprint('Actual:   ',is_num_decagonal(46))\nprint('Test 30:')\nprint('Expected: 48')\nprint('Actual:   ',is_num_decagonal(48))\nprint('Test 31:')\nprint('Expected: 50')\nprint('Actual:   ',is_num_decagonal(50))\nprint('Test 32:')\nprint('Expected: 52')\nprint('Actual:   ',is_num_decagonal(52))\nprint('Test 33:')\nprint('Expected: 54')\nprint('Actual:   ',is_num_decagonal(54))\nprint('Test 34:')\nprint('Expected: 56')\nprint('Actual:   ',is_num_decagonal(56))\nprint('Test 35:')\nprint('Expected: 58')\nprint('Actual:   ',is_num_decagonal(58))\nprint('Test 36:')\nprint('Expected: 60')\nprint('Actual:   ',is_num_decagonal(60))\nprint('Test 37:')\nprint('Expected: 62')\nprint('Actual:   ',is_num_decagonal(62))\nprint('Test 38:')\nprint('Expected: 64')\nprint('Actual:   ',is_num_decagonal(64))\nprint('Test 39:')\nprint('Expected: 66')\nprint('Actual:   ',is_num_decagonal(66))\nprint('Test 40:')\nprint('Expected: 68')\nprint('Actual:   ',is_num_decagonal(68))\nprint('Test 41:')\nprint('Expected: 70')\nprint('Actual:   ',is_num_decagonal(70))\nprint('Test 42:')\nprint('Expected: 72')\nprint('Actual:   ',is_num_decagonal(72))\nprint('Test 43:')\nprint('Expected: 74')\nprint('Actual:   ',is_num_decagonal(74))\nprint('Test 44:')\nprint('Expected: 76')\nprint('Actual:   ',is_num_decagonal(76))\nprint('Test 45:')\nprint('Expected: 78')\nprint('Actual:   ',is_num_decagonal(78))\nprint('Test 46:')\nprint('Expected: 80')\nprint('Actual:   ',is_num_decagonal(80))\nprint('Test 47:')\nprint('Expected: 82')\nprint('Actual:   ',is_num_decagonal(82))\nprint('Test 48:')\nprint('Expected: 84')\nprint('Actual:   ',is_num_decagonal(84))\nprint('Test 49:')\nprint('Expected: 86')\nprint('Actual:   ',is_num_decagonal(86))\nprint('Test 50:')\nprint('Expected: 88')\nprint('Actual:   ',is_num_decagonal(88))\nprint('Test 51:')\nprint('Expected: 90')\nprint('Actual:   ',is_num_decagonal(90))\nprint('Test 52:')\nprint('Expected: 92')\nprint('Actual:   ',is_num_decagonal(92))\nprint('Test 53:')\nprint('Expected: 94')\nprint('Actual:   ',is_num_decagonal(94))\nprint('Test 54:')\nprint('Expected: 96')\nprint('Actual:   ',is_num_decagonal(96))\nprint('Test 55:')\nprint('Expected: 98')\nprint('Actual:   ',is_num_decagonal(98))\nprint('Test 56:')\nprint('Expected: 100')\nprint('Actual:   ',is_num_decagonal(100))\nprint('Test 57:')\nprint('Expected: 102')\nprint('Actual:   ',is_num_decagonal(102))\nprint('Test 58:')\nprint('Expected: 104')\nprint('Actual:   ',is_num_decagonal(104))\nprint('Test 59:')\nprint('Expected: 106')\nprint('Actual:   ',is_num_decagonal(106))\nprint('Test 60:')\nprint('Expected: 108')\nprint('Actual:   ',is_num_decagonal(108))\nprint('Test 61:')\nprint('Expected: 110')\nprint('Actual:   ',is_num_decagonal(110))\nprint('Test 62:')\nprint('Expected: 112')\nprint('Actual:   ',is_num_decagonal(112))\nprint('Test 63:')\nprint('Expected: 114')\nprint('Actual:   ',is_num_decagonal(114))\nprint('Test 64:')\nprint('Expected: 116')\nprint('Actual:   ',is_num_decagonal(116))\nprint('Test 65:')\nprint('Expected: 118')\nprint('Actual:   ',is_num_decagonal(118))\nprint('Test 66:')\nprint('Expected: 120')\nprint('Actual:   ',is_num_decagonal(120))\nprint('Test 67:')\nprint('Expected: 122')\nprint('Actual:   ',is_num_decagonal(122))\nprint('Test 68:')\nprint('Expected: 124')\nprint('Actual:   ',is_num_decagonal(124))\nprint('Test 69:')\nprint('Expected: 126')\nprint('Actual:   ',is_num_decagonal(126))\nprint('Test 70:')\nprint('Expected: 128')\nprint('Actual:   ',is_num_decagonal(128))\nprint('Test 71:')\nprint('Expected: 130')\nprint('Actual:   ',is_num_decagonal(130))\nprint('Test 72:')\nprint('Expected: 132')\nprint('Actual:   ',is_num_decagonal(132))\nprint('Test 73:')\nprint('E"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert\nassert is_num_decagonal(1) == 1\nassert is_num_decagonal(10) == 55\nassert is_num_decagonal(50) == 1270\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_num_decagonal(1) == 1\nassert     is_num_decagonal(2) == 13\nassert     is_num_decagonal(3) == 24\nassert     is_num_decagonal(4) == 39\nassert     is_num_decagonal(5) == 58\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sequential_search([], 2) == (False, -1)\nassert sequential_search([1,2,3,4,5], 3) == (True, 0)\nassert sequential_search([1,2,3,4,5], -2) == (False, -1)\nassert sequential_search([1,2,3,4,5], 2) == (True, 2)\nassert sequential_search([0,1,2,3,4,5], 5) == (True, 5)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\n\n\n\n\n'''\n'''"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nsequential_search([1,2,3,4], 3) == (True, 2)\nsequential_search([1,2,3,4], 4) == (True, 4)\nsequential_search([1,2,3,4], 5) == (False, -1)\nsequential_search([], 2) == (False, -1)\nassert \n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert sequential_search([1,2,3,4,5,6,7,8,9], 2) == (True, 1)\nassert sequential_search([1,2,3,4,5,6,7,8,9], -1) == (False, -1)\nassert sequential_search([], 0) == (False, -1)\n\nprint('Success!'"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sequential_search([1,2,3,4,5], 3) == (True, 1)\nassert     sequential_search([1,2,3,4,5], 5) == (True, 4)\nassert     sequential_search([1,2,3,4,5], 6) == (False, -1)\nassert     sequential_search([], 1) == (False, -1)\n\ndef ordered_sequential_search(dlist, item):\n    '''\n    Write a function that takes in an ordered array and element and returns a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pass\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sequential_search(dlist, element) == (True, 0)\nassert     sequential_search(dlist, 'hello') == (False, -1)\nassert     sequential_search(dlist, 'hello2') == (False, -1)\nassert     sequential_search(dlist, 'goodbye') == (False, -1)\nassert     sequential_search(dlist, 20) == (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sequential_search([1,2,3,4,5,6,7], 4) == (True, 4)\nassert     sequential_search([1,2,3,4,5,6,7], 4) == (True, -1)\nassert     sequential_search([1,2,3,4,5,6,7], 7) == (True, 5)\nassert     sequential_search([], 0) == (False, -1)\nassert     sequential_search([0,1,2,3], 0) == (True, 0)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nsequential_search([1,2,3],4) == (False, -1)\nassert \nsequential_search([0,1,2,3,4,5],5) == (True, 5)\nassert \nsequential_search([],5) == (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef ordered_sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pass\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nall_unique([1,2,3,2,4]) == True\nall_unique([1,2,3]) == False\nall_unique([1,2,2]) == True\n\nprint('Success: all_unique')\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     all_unique(['c','c','d','a','e']) == True\nassert     all_unique(['e','b','c','a','d']) == False\nassert     all_unique(['b','d','e','c','a']) == False\n\nprint(f\"\\nAll Unique: {all_unique.__doc__}\")\n\ndef are_unique(list_1, list_2):\n    '''\n    Write a python function to check if the elements of two given lists are unique or not.\n    '''\n    pass\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     all_unique([1,1,2,3,4,5]) == True\nassert all_unique([1,1,2,3,3,5]) == False\nassert all_unique([1,2,1,3,3,4,5]) == True\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     all_unique([1,2,3,4]) == False, \"Wrong output\"\nassert     all_unique([1,2,3,4]) == False, \"Wrong output\"\nassert     all_unique([1,2,3,4,4]) == True, \"Wrong output\"\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     all_unique([1,2,3,4,5,6,7,8,9]) == True\nassert     all_unique([1,2,3,4,5,5,5,5,5]) == False\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     all_unique([1,2,3,4,5]) == False, \"All unique test case 1 fail\"\nassert     all_unique([1,1,1,1,1]) == True, \"All unique test case 2 fail\"\nassert     all_unique([]) == True, \"Empty list is unique test case 3\"\nassert     all_unique([1,2,3,4,5,6]) == False, \"All unique test case 4 fail\"\nassert     all_unique([1,2,3,4,5,6,7]) == False, \"All unique test case 5 fail\"\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     all_unique([10,20,20,30,30,40,50,50,60,100,100]) == True, \\\n    \"Wrong output\"\nassert     all_unique(['s','a','t','t','i','c','h','e','j','m']) == False, \\\n    \"Wrong output\"\nassert     all_unique([1,2,2,3,3,4,4,4,5,5,5,5]) == False, \\\n    \"Wrong output\"\nassert     all_unique([1,1,1,1,1,1]) == True, \\\n    \"Wrong output\"\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     all_unique(['apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry','banana','apple','lemon','strawberry',"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     all_unique([]) == True, 'Empty list should return True'\nassert     all_unique([1, 2, 3]) == True, 'This list contains all numbers'\nassert     all_unique(['a', 'b', 'c']) == False, 'This list contains repeating words'\nassert     all_unique(['abc', 'bc', 'c']) == True, 'This list contains same characters'\nassert     all_unique(['abc', 'def', 'abc']) == False, 'This list contains same characters'\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     all_unique([]) == True,    \"all_unique([]) expected: True, Actual: False\"\nassert     all_unique([1,2,3,4,5]) == True,    \"all_unique([1,2,3,4,5]) expected: True, Actual: False\"\nassert     all_unique([1,1,2,3,5]) == False, \"all_unique([1,1,2,3,5]) expected: False, Actual: True\"\nassert     all_unique([\"geeksforgeeks\",\"geeks\",\"geeksforgeeks\",\"geeks\"]) == False, \"all_unique(['geeksforgeeks','geeks','geeksforgeeks','geeks']) expected: False, Actual: True\"\nassert     all_unique([\"geeksforgeeks\",\"geeks\",\"geeksforgeeks\",\"geeksforgeeks\"]) == False, \"all_unique(['geeksforgeeks','geeks','geeksforgeeks','geeksforgeeks']) expected: False, Actual: True\"\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef sub_list_inplace(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    pass\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sub_list([0,1,2,3,4],[1,2,3,4,5]) == [0,-1,2,3,4]\nassert     sub_list([0,-1,2,3,4],[1,2,3,4,5]) == [-1,2,3,4,5]\nassert     sub_list([1,2,3,4,5],[1,2,3,4,5]) == [-2,-3,-4,-5]\n\ndef add_lists(nums1, nums2):\n    '''\n    Write a function to add two lists element-wise.\n    '''\n    pass\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sub_list([1,2,3], [1,2,3]) == None,     \"Wrong Answer\"\nassert     sub_list([1,2,3], [1,2,3]) == [0,0,0], \"Wrong Answer\"\nassert     sub_list([1,2,3], [4,5,6]) == None, \"Wrong Answer\"\nassert     sub_list([1,2,3], [1,2,3]) == [1,2,3], \"Wrong Answer\"\nassert     sub_list([1,2,3], [4,5,6]) == [-1,-2,-3], \"Wrong Answer\"\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sub_list([1,2,3,4], [5,6,7,8]) == [4,0,6,2]\nassert sub_list([4,2,1], [5,6,7,8]) == [4,2,0,6]\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef sum_list(nums1,nums2):\n    '''\n    Write a function to add two lists element-wise.\n    '''\n    pass\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef sum_list(nums1,nums2):\n    '''\n    Write a function to add two lists element-wise.\n    '''\n    pass\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sub_list([4,2], [1,3]) == [3,3], \"Wrong answer\"\nassert     sub_list([-4,-2], [-1,-3]) == [-3,-3], \"Wrong answer\"\nassert     sub_list([1,-3,1], [-3,-3,1]) == [1,0,-4], \"Wrong answer\"\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sub_list([1,2,3],[2,4,5]) == -1, \"Wrong output\"\n\n'''\nQ: 3. Write a function to multiply two lists element-wise.\n'''"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     validate(123) == True, \"Should be True\"\nassert     validate(2) == False, \"Should be False\"\nassert     validate(1) == False, \"Should be False\"\nassert     validate(9) == False, \"Should be False\"\nassert     validate(456) == False, \"Should be False\"\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     validate(123456) == True\nassert     validate(123456) == False\nassert     validate(1234) == True\nassert     validate(123456789) == False\nassert     validate(12345) == False\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     validate(10) == True\nassert     validate(12) == False\nassert     validate(200) == False\nassert     validate(1000) == False\nassert     validate(10001) == False\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nif \n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     validate(0) == True, '0 does not have frequency less than or equal to itself'\nassert     validate(13) == True, '13 does not have frequency less than or equal to itself'\nassert     validate(314) == True, '314 does not have frequency less than or equal to itself'\nassert     validate(8) == False, '8 has frequency greater than or equal to itself'\nassert     validate(14) == False, '14 has frequency greater than or equal to itself'\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     validate(234) == True,    \"Test 1: failure\"\nassert     validate(23) == False,    \"Test 2: failure\"\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef check_palin(s):\n    '''\n    Write a python function takes in a string and check whether the string is palindrome or not\n    '''\n    pass\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef check_repeat(n):\n    '''\n    Write a python function takes in an integer and check whether there is any digit in the integer that repeats itself.\n    '''\n    pass\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef check_element2(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    pass\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_element([1,2,3,4],4) == True\nassert check_element([1,2,3,4],6) == False\nassert check_element([1,2,3,4],-5) == False\nassert check_element([1,2,3,4],1) == True\nassert check_element([1,2,3,4],2) == False\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_element([1,2,3,4,5,6],4) == True, 'Should return True'\nassert check_element([1,2,3,4,5,6],4) == False, 'Should return False'\n\ndef check_element_swap(list,element):\n    '''\n    Write a function that takes in a list and an element and returns True if the element is the only instance of the element in the list, else return False.\n    '''\n    pass\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert check_element([1,2,3,4],1) == True, \"Wrong answer, expected True\"\nassert check_element([1,2,3,4],5) == False, \"Wrong answer, expected False\"\nassert check_element([1,2,3,4],4) == True, \"Wrong answer, expected True\"\nassert check_element([1,2,3,4],1) == True, \"Wrong answer, expected True\"\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert check_element([2,2,2],2)\nassert not check_element([2,2,2],3)\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_element([1,2,3,4,5],3) == True\nassert     check_element([1,2,3,4,5],6) == False\nassert     check_element([1,2,3,4,5],7) == False\nassert     check_element([1,2,3,4,5],12) == False\nassert     check_element([1,2,3,4,5],9) == True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_element([1,2,3,4,5],5) == True, \"Wrong Answer\"\nassert check_element([1,2,3,4,5],6) == False, \"Wrong Answer\"\nassert check_element([1,2,3,4,5],7) == False, \"Wrong Answer\"\nassert check_element([1,2,3,4,5],8) == False, \"Wrong Answer\"\nassert check_element([1,2,3,4,5],9) == False, \"Wrong Answer\"\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_element([1,2,3],1) == True, 'Your function should return True if the items in list are equal to element.'\nassert     check_element([1,2,3],2) == False, 'Your function should return True if the items in list are equal to element.'\nassert     check_element([1,2,3],3) == True, 'Your function should return True if the items in list are equal to element.'\nassert     check_element([1,2,3,1],1) == True, 'Your function should return True if the items in list are equal to element.'\nassert     check_element([1,2,3,1],2) == False, 'Your function should return True if the items in list are equal to element.'\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_element([1,2,3,4,5,6,7,8,9,10],10) == True, \"Should be True\"\nassert     check_element([1,2,3,4,5,6,7,8,9,10],11) == False, \"Should be False\"\nassert     check_element([1,2,3,4,5,6,7,8,9,10],15) == False, \"Should be False\"\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_match_two_three('') == False, \\\n        \"Returned 'False' for an empty string\"\nassert     text_match_two_three(\"abcbba\") == True, \\\n        \"Returned 'False' for a string that contains 'a' followed by 2 or 3 'b'\"\nassert     text_match_two_three(\"abaab\") == True, \\\n        \"Returned 'False' for a string that contains 'a' followed by 2 or 3 'b'\"\nassert     text_match_two_three(\"aab\") == False, \\\n        \"Returned 'False' for a string that contains 'a' followed by 2 or 3 'b'\"\nassert     text_match_two_three(\"aaabab\") == False, \\\n        \"Returned 'False' for a string that contains 'a' followed by 2 or 3 'b'\"\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_two_three('bbbbbbbbbb') == True\nassert     text_match_two_three('aabbbbbbbbbb') == True\nassert     text_match_two_three('aaa') == False\nassert     text_match_two_three('bb') == True\n\ndef text_match_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two 'b' characters followed by 'c' character.\n    '''\n    pass\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_match_two_three('ababc') == False\nassert     text_match_two_three('abc') == True\nassert     text_match_two_three('aaa') == True\nassert     text_match_two_three('abcc') == True\nassert     text_match_two_three('abcbb') == False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_two_three('aaabbbccc')     == False, \\\n        'Expected aaabbbccc to be False. Not '+repr(text_match_two_three('aaabbbccc'))\n\nassert     text_match_two_three('abababab')     == True, \\\n        'Expected abababab to be True. Not '+repr(text_match_two_three('abababab'))\n\nassert     text_match_two_three('aaabbbbbb')     == False, \\\n        'Expected aaabbbbbb to be False. Not '+repr(text_match_two_three('aaabbbbbb'))\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_two_three('aabaa') == False\nassert     text_match_two_three('bbbbb') == False\nassert     text_match_two_three('abaa') == True\nassert     text_match_two_three('ab') == False\nassert     text_match_two_three('aaaaa') == True\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_match_two_three('aaaaaabbbbb') == False\nassert     text_match_two_three('aaabbbbb') == True\nassert     text_match_two_three('aaabbbba') == True\nassert     text_match_two_three('aabbbbbb') == True\nassert     text_match_two_three('aaabbbbbbaaaaaa') == False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_match_two_three('') is None\nassert     text_match_two_three('aaa') is None\nassert     text_match_two_three('aa') is None\nassert     text_match_two_three('abb') is None\nassert     text_match_two_three('aaabb') is None\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_two_three(\"bbbaaaab\") == True, \"false\"\nassert     text_match_two_three(\"bab\") == False, \"false\"\nassert     text_match_two_three(\"bbbbbbbbbbbbbbbbbbb\") == True, \"false\"\nassert     text_match_two_three(\"bbbbbbbbbbbbbbbbbbbbbb\") == True, \"false\"\nassert     text_match_two_three(\"bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_sub_array_sum_repeated([1, 4, 20, 3, 10, 5], 5, 2) == 67\nassert     max_sub_array_sum_repeated([1, 4, 20, 3, 10, 5], 3, 2) == 20\nassert     max_sub_array_sum_repeated([1, 4, 20, 3, 10, 5], 2, 2) == 67\nassert     max_sub_array_sum_repeated([1, 4, 20, 3, 10, 5], 1, 2) == 67\nassert     max_sub_array_sum_repeated([1, 4, 20, 3, 10, 5], 5, 1) == 67\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_sub_array_sum_repeated([2, -3, 4, 5, -2, 4, 2, -3], 5, 2) == 20\nassert     max_sub_array_sum_repeated([-1, -2, 3, -4, 5], 2, 3) == 6\nassert     max_sub_array_sum_repeated([1, 2, 3, 4, 5, 6], 1, 5) == 30\nassert     max_sub_array_sum_repeated([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4], 4, 2) == 4\n\ndef max_sub_array_sum_difference(a, n): \n    '''\n    Write a function to find the maximum sum of any contiguous subarray of a given array.\n    '''\n    pass\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nmax_sub_array_sum_repeated([-2, 1, -3, 4, -1, 2, 1, -5, 4], 7, 2) == 13\nassert \nmax_sub_array_sum_repeated([-2, 1, -3, 4, -1, 2, 1, -5, 4], 7, 3) == 20"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_sub_array_sum_repeated([1, 2, 3, 4, 1, 5], 5, 3) == 10\nassert     max_sub_array_sum_repeated([1, 2, 3, 4, 5], 3, 2) == 6\nassert     max_sub_array_sum_repeated([1, 2, 3, 4, 5], 5, 1) == 10\nassert     max_sub_array_sum_repeated([1, 2, 3, 4, 5], 5, 2) == 8\nassert     max_sub_array_sum_repeated([1, 2, 3, 4, 5], 5, 3) == 8\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_sub_array_sum_repeated([1, 2, 3, 4, 5, 6, 7], 7, 3) == 20\nassert     max_sub_array_sum_repeated([-4, 1, 2, -3, 1, 3, -2], 3, 2) == 4\nassert     max_sub_array_sum_repeated([-4, 1, 2, -3, 1, 3, -2], 1, 2) == -2\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_sub_array_sum_repeated([2, 1, 5, 1, 3, 2], 6, 2) == 9\nassert     max_sub_array_sum_repeated([2, 1, 5, 1, 3, 2], 7, 2) == 10\nassert     max_sub_array_sum_repeated([2, 1, 5, 1, 3, 2], 8, 2) == 10\nassert     max_sub_array_sum_repeated([2, 1, 5, 1, 3, 2], 9, 2) == 15\nassert     max_sub_array_sum_repeated([2, 1, 5, 1, 3, 2], 10, 2) == 20\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     square_Sum(6) == 28\nassert     square_Sum(10) == 385\n\ndef square_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef square_Sum2(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # return sum(i * i for i in range(n) if i % 2 == 0)\n    return sum(i * i for i in range(1, n + 1) if i % 2 == 0)\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     square_Sum(1) == 1, 'First test fails'\nassert     square_Sum(2) == 4, 'Second test fails'\nassert     square_Sum(3) == 10, 'Third test fails'\nassert     square_Sum(4) == 25, 'Fourth test fails'\nassert     square_Sum(5) == 50, 'Fifth test fails'\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    assert (square_Sum(4) == 16), \"The function didn't return expected result\"\n    "
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     square_Sum(1)== 1, \"incorrect output\"\nassert     square_Sum(2)== 4, \"incorrect output\"\nassert     square_Sum(3)== 18, \"incorrect output\"\nassert     square_Sum(4)== 32, \"incorrect output\"\nassert     square_Sum(5)== 80, \"incorrect output\"\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     square_Sum(0) == 0, \"Given n = 0, expect 0\"\nassert     square_Sum(1) == 1, \"Given n = 1, expect 1\"\nassert     square_Sum(2) == 4, \"Given n = 2, expect 4\"\nassert     square_Sum(5) == 22, \"Given n = 5, expect 22\"\nassert     square_Sum(10) == 121, \"Given n = 10, expect 121\"\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nprint(\"Pass\" if (4 == square_Sum(5)) else \"Fail\")\nprint(\"Pass\" if (16 == square_Sum(7)) else \"Fail\")\nprint(\"Pass\" if (25 == square_Sum(9)) else \"Fail\")\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_length([[1,2,3],[4,5],[8,9,0]]) == (3, [8, 9, 0])\nassert     max_length([[1,2,3],[4,5]]) == (2, [4, 5])\nassert     max_length([]) == None\nassert     max_length([[1]]) == (1, [1])\nassert     max_length([[1,2],[3,4]]) == (2, [4, 3])\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_length([[1,2,3],[1,2],[3,4,5],[1,2,3,4,5,6,7]]) == 3, \"Example 1 should return 3\"\nassert     max_length([[1,2,3],[1,2],[3,4,5],[1,2,3,4,5,6,7]]) == 1, \"Example 2 should return 1\"\nassert     max_length([[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10]]) == 10, \"Example 3 should return 10\"\nassert     max_length([[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10]]) == 9, \"Example 4 should return 9\"\nassert     max_length([[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10]]) == 10, \"Example 5 should return 10\"\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_length([[],1,2]) == 0\nassert     max_length([[],1,1]) == 1\nassert     max_length([[1,2,3,4,5,6],1]) == 4\nassert     max_length([[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18],[19,20,21,22,23,24]]) == 5\nassert     max_length([[1,2,3,4,5,6],1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]) == 12\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_length([[1,2],[3,4],[5,6]]) == 1\nassert     max_length([[1,2],[3,4]]) == 2\nassert     max_length([[1,2],[3,4],[5,6]]) == "
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert max_length([]) == 0\nassert max_length([[],[],[]]) == 0\nassert max_length([[],[1,2,3,4,5]]) == 4\nassert max_length([[],[1,2],[1,2,3,4]]) == 4\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef max_length(list1):\n    return max(list(map(len, list1)))\n\ndef max_length(list1):\n    return max(list1,key=len)\n\ndef max_length(list1):\n    return max(map(len,list1))\n\ndef max_length(list1):\n    '''\n    Another way to solve this problem\n    '''\n    list1.sort(key=len)\n    return list1[-1]\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_length([[1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10]]) == 10\nassert     max_length([[1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5]]) == 5\nassert     max_length([[1,2,3,4,5], [], [1,2,3,4,5]]) == 5\nassert     max_length([[1,2,3,4,5,6,7], [1,2,3,4,5,6,7], [1,2,3,4,5,6,7]]) == 7\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_no_of_ways(1, 1) == 1, \"Wrong answer\"\nassert     count_no_of_ways(2, 1) == 0, \"Wrong answer\"\nassert     count_no_of_ways(3, 1) == 0, \"Wrong answer\"\nassert     count_no_of_ways(4, 1) == 0, \"Wrong answer\"\nassert     count_no_of_ways(5, 1) == 0, \"Wrong answer\"\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_no_of_ways(1, 1) == 2\nassert     count_no_of_ways(2, 2) == 2\nassert     count_no_of_ways(3, 3) == 4\nassert     count_no_of_ways(4, 4) == 5\nassert     count_no_of_ways(5, 5) == 7\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_no_of_ways(3, 1) == 0\nassert     count_no_of_ways(3, 2) == 0\nassert     count_no_of_ways(3, 3) == 1\nassert     count_no_of_ways(3, 4) == 0\nassert     count_no_of_ways(3, 5) == 2\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef count_no_of_ways(n, k):\n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    pass\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_no_of_ways(2, 2) == 1, 'this should be 1'\nassert     count_no_of_ways(5, 3) == 4, 'this should be 4'\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(count_no_of_ways(4, 2)) "
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    count_no_of_ways(3, 2) == 5, \"Input: 3, 2, Expected: 5\"\n    count_no_of_ways(10, 1) == 10, \"Input: 10, 1, Expected: 10\"\n    count_no_of_ways(3, 1) == 0, \"Input: 3, 1, Expected: 0\"\n    count_no_of_ways(4, 1) == 1, \"Input: 4, 1, Expected: 1\"\n    count_no_of_ways(6, 2) == 4, \"Input: 6, 2, Expected: 4\"\n    count_no_of_ways(5, 2) == 0, \"Input: 5, 2, Expected: 0\"\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_no_of_ways(3, 5) == 5\nassert     count_no_of_ways(4, 5) == 8\n\ndef count_no_of_ways_iterative(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k == 1:\n        return n\n    count = 0\n    for i in range(1, k + 1):\n        count = (count + (n - i + 1) * count_no_of_ways_iterative(n - i, k - i)) % 1000000007\n    return count\n\nassert     count_no_of_ways_iterative(3, 5) == 5\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_no_of_ways(5, 2) == 4\nassert     count_no_of_ways(5, 3) == 7\nassert     count_no_of_ways(6, 2) == 5\nassert     count_no_of_ways(7, 2) == 15"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find(5,6) == 1\nassert     find(6,9) == 2\nassert     find(1,10) == 1\nassert     find(10,10) == 1\nassert     find(2,2) == 1\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find(12,8) == 4 \nassert     find(15,10) == 5 \nassert     find(20,3) == 5 \nassert     find(21,2) == 5 \nassert     find(0,0) == 0\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find(2, 4) == 2\nassert     find(2.3, 4) == 2\nassert     find(1.2, 4) == 1\nassert     find(1.8, 4) == 1\nassert     find(-1.8, 4) == 0\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find(11, 11) == 0\nassert     find(11, 10) == 1\nassert     find(11, 12) == 1\nassert     find(11, 13) == 2\nassert     find(12, 11) == 1\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert \nassert \n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    find(20, 15) == 5, \"Should find 5\"\nassert \n    find(20, 17) == 6, \"Should find 6\"\nassert \n    find(20, 16) == 10, \"Should find 10\"\nassert \n    find(20, 9) == 7, \"Should find 7\"\nassert\n    find(0, 10) == 0, \"Should find 0\"\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find(2,4) == 0\nassert     find(3,4) == 0\nassert     find(3,3) == 0\nassert     find(2,2) == 0\nassert     find(9,7) == 1\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find(5,4) == 0\nassert     find(5,5) == 0\nassert     find(1.4,1.5) == 0\nassert     find(2.5,3.2) == 1\nassert     find(1.0,1.5) == 0\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find(3,4) == 0.75, 'Wrong value returned for 3/4'\nassert     find(3,5) == 1.0, 'Wrong value returned for 3/5'\nassert     find(1.1,1.2) == 1.0, 'Wrong value returned for 1.1/1.2'\nassert     find(-1.1,1.2) == -1.0, 'Wrong value returned for -1.1/1.2'\nassert     find(0.0,1.2) == 0.0, 'Wrong value returned for 0.0/1.2'\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     otherside_rightangle(1,1) == 1\nassert     otherside_rightangle(2,2) == 1\nassert     otherside_rightangle(3,3) == 1\nassert     otherside_rightangle(4,4) == 1\nassert     otherside_rightangle(5,5) == 1\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     otherside_rightangle(2,3) == 1.732050807568877\nassert otherside_rightangle(3,5) == 1.732050807568877\nassert otherside_rightangle(4,5) == 1.732050807568877\nassert otherside_rightangle(5,5) == 1.732050807568877\nassert otherside_rightangle(5,6) == 1.631578947368421\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     otherside_rightangle(1,1) == 1, '2'\nassert otherside_rightangle(2,1) == 1, '3'\nassert otherside_rightangle(1,2) == 1, '4'\nassert otherside_rightangle(2,2) == 2, '5'\nassert otherside_rightangle(3,2) == 1, '6'\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     otherside_rightangle(2,3) == 5, \"Wrong answer\"\nassert otherside_rightangle(2,4) == 8, \"Wrong answer\"\nassert otherside_rightangle(3,4) == 8, \"Wrong answer\"\nassert otherside_rightangle(1,5) == 5, \"Wrong answer\"\nassert otherside_rightangle(3,5) == 3, \"Wrong answer\"\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     otherside_rightangle(1,1) == math.sqrt(2)\nassert     otherside_rightangle(2,1) == 1.4142135623730951\nassert     otherside_rightangle(3,1) == 1.732050807568877\nassert     otherside_rightangle(4,1) == 2.23606797749979\nassert     otherside_rightangle(5,1) == 2.6457513110486494\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     otherside_rightangle(5,6) == 7, \"Incorrect result\"\nassert     otherside_rightangle(4,5) == 5, \"Incorrect result\"\nassert     otherside_rightangle(2,3) == 3, \"Incorrect result\"\nassert     otherside_rightangle(1,2) == 2, \"Incorrect result\"\nassert     otherside_rightangle(3,4) == 5, \"Incorrect result\"\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(\"Expected: {0}\".format(2.0))\nassert otherside_rightangle(1,1) == 2.0\nassert otherside_rightangle(2,1) == 1.0\nassert otherside_rightangle(3,1) == 1.5\nassert otherside_rightangle(1,3) == 1.5\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     otherside_rightangle(1,1) == 1\nassert     otherside_rightangle(2,2) == 2\nassert     otherside_rightangle(3,3) == 3\nassert     otherside_rightangle(5,5) == 5\nassert     otherside_rightangle(5,6) == math.sqrt(5**2 + 6**2)\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     otherside_rightangle(2,3) == 4\nassert otherside_rightangle(3,4) == 6\nassert otherside_rightangle(6,3) == 5\nassert otherside_rightangle(10,7) == 5\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_val([[1,2],[2,3],[3,4]]) == 4\nassert     max_val([1,2,3,4]) == 4\nassert     max_val([2,3,4,5,6]) == 6\nassert     max_val([]) == None\nassert     max_val([[]]) == None\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_val([2,3,4])     == 4\nassert     max_val([0,1,2])     == 2\nassert     max_val([1,2,4])     == 4\nassert     max_val([1,2,3])     == 4\nassert     max_val([-1,0,-2])     == 0\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_val([1, 2, 5, -2, 7, 4]) == 7,'should be 7'\nassert     max_val([True, False, 'true', 'false']) == 'true','should be true'\n\n'''\n1) Write a function to find the minimum value in a given heterogeneous list.\n'''\n\ndef min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    pass\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(max_val([-1, 5, -3, 3, -1, -2, 2, -4, 0, 8, -9, 1, -1, -6, -4, 7, 9, -1, -2])) == 9\nassert max_val([-3, 4, -3, 5, -2, 0, 0, 1]) == 5\nassert max_val([3, -4, 1, -2, -3]) == 3\nassert max_val([-1, -2, 3, -5]) == 3\nassert max_val([-3, 2, -2, 1]) == 2\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_val([5, -3, -1, -2, -5, -9, 0, -5, -5, -3, -8, -7, -9, -8, -4, -9, -1]) == 0\nassert     max_val([2, 4, 5, 6, 1, 3, 8, 1]) == 8\nassert     max_val([5, -3, -1, -2, -5, -9, 0, -5, -5, -3, -8, -7, -9, -8, -4, -9, -1]) == 5\nassert     max_val([2, 4, 5, 6, 1, 3, 8, 1]) == 8\nassert     max_val([]) == None\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_val(listval) == 2\nassert     max_val([]) == None\nassert     max_val([1,2,3,4,5]) == 5\nassert     max_val([100, 4, -2, 3, 4, 5, 6, 7, 8, 9, 10, -10]) == 100\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_val([1,3,5,6,7]) == 7\nassert     max_val([1,3,5,6,7,8]) == 8\nassert     max_val([1,3,5,6,7,8,9,10]) == 10\nassert     max_val([-100,1,3,5,6,7]) == 7\nassert     max_val([1,3,5,-2,7,8]) == 7\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_val([1,2,3,4,5,6]) == 6\nassert     max_val([None,2,3,4,5,6]) == 6\nassert     max_val([1,'hello',3.4,5,'hello',6]) == 'hello'\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef sum_elements(listval):\n    '''\n    Write a function that takes a heterogeneous list and returns its sum.\n    '''\n    pass\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nsum_div(4) == 4\nsum_div(12) == 10\n\nprint(\"sum_div passed\")\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_div(5) == 1 + 2 + 5, \"5 = 5\"\nassert     sum_div(6) == 2 + 3, \"6 = 2+3\"\nassert     sum_div(25) == 1 + 2 + 5 + 10, \"25 = 1+2+5+10\"\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_div(2) == 2, \"2 is not the divisor of 2\"\nassert     sum_div(4) == 6, \"4 is not the divisor of 4\"\nassert     sum_div(7) == 9, \"7 is not the divisor of 7\"\nassert     sum_div(8) == 12, \"8 is not the divisor of 8\"\nassert     sum_div(12) == 20, \"12 is not the divisor of 12\"\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert sum_div(8) == 3 + 2 + 1\nassert sum_div(21) == 3 + 7 + 11 + 7\nassert sum_div(34) == 3 + 7 + 11 + 7 + 17 + 29\nassert sum_div(125) == 3 + 7 + 11 + 7 + 17 + 29 + 31 + 37\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_div(2) == 1\nassert     sum_div(4) == 2\nassert     sum_div(12) == 7\nassert     sum_div(0) == 0\nassert     sum_div(3) == 3\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_div(7) == 7\nassert     sum_div(10) == 4\nassert     sum_div(11) == 7\nassert     sum_div(50) == 21\nassert     sum_div(600) == 123\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_div(0) == 0, \"Test error, expected sum_div(0) to be 0\"\nassert     sum_div(1) == 1, \"Test error, expected sum_div(1) to be 1\"\nassert     sum_div(2) == 2, \"Test error, expected sum_div(2) to be 2\"\nassert     sum_div(3) == 2, \"Test error, expected sum_div(3) to be 2\"\nassert     sum_div(4) == 1, \"Test error, expected sum_div(4) to be 1\"\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    print('Test case 1:')\n    print(sum_div(3) == 4)\n    print('Test case 2:')\n    print(sum_div(9) == 18)\n    print('Test case 3:')\n    print(sum_div(5) == 1)\n\ndef solve(n):\n    '''\n    Write a function that returns the sum of the largest n divisors.\n    '''\n    pass\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_div(2) == 1 + 2 + 2 + 2 + 2\nassert     sum_div(4) == 1 + 2 + 2 + 4 + 4\nassert     sum_div(12) == 1 + 2 + 3 + 4 + 6 + 12\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_Inv_Count([1, 2, 3, 4]) == 0\nassert     get_Inv_Count([2, 1, 3, 4]) == 2\nassert     get_Inv_Count([3, 2, 1, 4]) == 3\nassert     get_Inv_Count([4, 3, 2, 1]) == 4\nassert     get_Inv_Count([3, 4, 1, 2]) == 3\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_Inv_Count([]) == 0\nassert     get_Inv_Count([1]) == 0\nassert     get_Inv_Count([1,2]) == 0\nassert     get_Inv_Count([1,2,3]) == 0\nassert     get_Inv_Count([1,2,3,4,5]) == 1\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    get_Inv_Count([1,3,2,4,3,1,2,2,1])== 0\n    get_Inv_Count([2,1,3,2,4,3,1,2,1]) == 3\n    get_Inv_Count([1,2,3,4]) == 1\n    get_Inv_Count([1,2,3,4,4,3,2,1]) == 6\n    get_Inv_Count([1,3,2,4,3,1,2,2,1]) == 8\n    get_Inv_Count([2,1,3,2,4,3,1,2,1]) == 0\n    get_Inv_Count([2,2,3,3,4,4]) == 0\n    get_Inv_Count([]) == 0\n    get_Inv_Count([1,1,1]) == 1\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_Inv_Count([1, 2, 3, 5, 4, 3, 2, 1]) == 3\nassert     get_Inv_Count([1, 2, 3, 5, 4, 3, 2, 1, 1, 3, 2, 1, 1, 3, 2, 1]) == 7"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_Inv_Count([1,2,3]) == 0\nassert     get_Inv_Count([1,2,3,4]) == 1\nassert     get_Inv_Count([1,2,3,4,5,6]) == 4\nassert     get_Inv_Count([2,3,4,1,5,6]) == 3\nassert     get_Inv_Count([5,4,3,2,1]) == 0\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nget_Inv_Count([1, 2, 3]) == 0\nget_Inv_Count([1, 3, 2]) == 1\nget_Inv_Count([1, 2, 3, 4]) == 2\nget_Inv_Count([1, 2, 3, 4, 5]) == 2\nget_Inv_Count([1, 2, 3, 4, 5, 6]) == 2\nget_Inv_Count([1, 2, 3, 4, 5, 6, 7]) == 3\nget_Inv_Count([1, 2, 3, 4, 5, 6, 7, 8]) == 3\nget_Inv_Count([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 4\nget_Inv_Count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 4\nget_Inv_Count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 5\nget_Inv_Count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 6\nget_Inv_Count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 7\nget_Inv_Count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 8\nget_Inv_Count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 9\nget_Inv_Count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == 10\nget_Inv_Count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == 11\nget_Inv_Count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) == 12\nget_Inv_Count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == 13\nget_Inv_Count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 14\nget_Inv_Count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) == 15\nget_Inv_Count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]) == 16\nget_Inv_Count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]) == 17\nget_Inv_Count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]) == 18\nget_Inv_Count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == 19\nget_Inv_Count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]) == 20\nget_Inv_Count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]) == 21\nget_Inv_Count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]) == 22\nget_Inv_Count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]) == 23\nget_Inv_Count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 24\nget_Inv_Count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]) == 25\nget_Inv_Count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]) == 26\nget_Inv_Count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]) == 27\nget_Inv_Count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34]) == 28\nget_Inv_Count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]) == 29\nget_Inv_Count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36]) == 30\nget_Inv_Count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37]) == 31\nget_Inv_Count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38]) == 32\nget_Inv_Count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39]) == 33\nget_Inv_Count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]) == 34\nget_Inv_Count("
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n    get_Inv_Count([1,2,3,4,5,6,7,8,9,10]) == 0\n    get_Inv_Count([1,2,3,4,5,6,7,8,9,11]) == 2\n    get_Inv_Count([10,9,8,7,6,5,4,3,2,1]) == 5\n    get_Inv_Count([10,9,8,7,6,5,4,3,2,1,11,13,14,15,16,17]) == 1\n    get_Inv_Count([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == 12\n    get_Inv_Count([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_Inv_Count([1,2,3]) == 0, \"Error\"\nassert     get_Inv_Count([10, 5, 7, 12]) == 1, \"Error\"\nassert     get_Inv_Count([]) == 0, \"Error\"\nassert     get_Inv_Count([1,1,1]) == 0, \"Error\"\nassert     get_Inv_Count([1,2,3,2]) == 1, \"Error\"\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    pass\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     flatten_list([1, [2, 3]]) == 1\nassert     flatten_list([1, [2, [3, 4], 5]]) == 1\nassert     flatten_list([1, [2], [[3], 4], 5]) == 1\nassert     flatten_list([]) == []\nassert     flatten_list([[], [], [[[]]]]) == []\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert flatten_list([1,2,3,[4,5,6,7]]) == [1, 2, 3, 4, 5, 6, 7]\nassert flatten_list([1,2,[3,4,5,[6,7]],8]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert flatten_list([1,2,[3,4,5,[6,7]],8]) == [1, 2, 3, 4, 5, 6, 7, 8]\nassert flatten_list([1,2,[3,4,5,[6,7]],8]) == [1, 2, 3, 4, 5, 6, 7, 8]\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert flatten_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 'Wrong'\nassert flatten_list([[1, 2], 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 'Wrong'\nassert flatten_list([[1, 2], 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 'Wrong'\nassert flatten_list([[1, 2], 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 'Wrong'\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     flatten_list([\"a\", [\"b\", [\"c\", \"d\"], \"e\"], \"f\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     flatten_list([1, 2, 3]) == [1, 2, 3], \"Wrong\"\nassert     flatten_list([1, 2, [3, 4]]) == [1, 2, 3, 4], \"Wrong\"\nassert     flatten_list([1, 2, 3, 4]) == [1, 2, 3, 4], \"Wrong\"\nassert     flatten_list([[[[[[[[[[5]]]]]]]]]]) == [5], \"Wrong\"\nassert     flatten_list([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8], \"Wrong\"\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef find_numbers(list1):\n    '''\n    Write a program to find all the numbers in a list\n    '''\n    pass\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n[1,2,[3,4,5],6,7] == flatten_list([1,2,[3,4,5],6,7])\nassert \n[1,2,3,4,5,6,7] == flatten_list([1,2,3,4,5,6,7])\nassert \n[1,2,3,4,5] == flatten_list([1,2,3,4,5])\n\ndef count_even(list1):\n    '''\n    Write a function that counts the number of even integers in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     flatten_list([[[1, 2]]]) == [1, 2]\nassert     flatten_list([[[1], 2]]) == [1, 2]\nassert     flatten_list([[[[1], 2]]]) == [1, 2]\nassert     flatten_list([[[[[1], 2]]]]) == [1, 2]\nassert     flatten_list([[[[[[[1], 2]]]]]]) == [1, 2]\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_aggregate([(0,2),(1,3),(2,4)]) == 5\nassert     max_aggregate([(0,5),(1,4),(2,3)]) == 7\nassert     max_aggregate([(0,10),(1,9),(2,8)]) == 12\nassert     max_aggregate([(0,1),(1,2),(2,3),(3,4),(4,5),(5,6),(6,7),(7,8),(8,9),(9,10)]) == 10\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    # correct result\n    max_aggregate(\n        [\n            (\"a\", 1, 3, 6),\n            (\"b\", 1, 1, 2),\n            (\"c\", 1, 3, 5),\n            (\"d\", 1, 3, 5)\n        ]\n    ) == 6\n    # correct result\n    max_aggregate(\n        [\n            (\"a\", 1, 4, 6),\n            (\"b\", 1, 1, 2),\n            (\"c\", 1, 3, 5),\n            (\"d\", 1, 3, 5)\n        ]\n    ) == 8\n    # correct result\n    max_aggregate(\n        [\n            (\"a\", 1, 4, 6),\n            (\"b\", 1, 1, 2),\n            (\"c\", 1, 3, 5),\n            (\"d\", 1, 3, 5),\n            (\"e\", 1, 1, 2)\n        ]\n    ) == 12\n    # correct result\n    max_aggregate(\n        [\n            (\"a\", 1, 4, 6),\n            (\"b\", 1, 1, 2),\n            (\"c\", 1, 3, 5),\n            (\"d\", 1, 3, 5),\n            (\"e\", 1, 1, 2),\n            (\"f\", 1, 4, 6)\n        ]\n    ) == 12\n    # correct result\n    max_aggregate(\n        [\n            (\"a\", 1, 4, 6),\n            (\"b\", 1, 1, 2),\n            (\"c\", 1, 3, 5),\n            (\"d\", 1, 3, 5),\n            (\"e\", 1, 1, 2),\n            (\"f\", 1, 4, 6),\n            (\"g\", 1, 4, 6)\n        ]\n    ) == 12\n    # correct result\n    max_aggregate(\n        [\n            (\"a\", 1, 4, 6),\n            (\"b\", 1, 1, 2),\n            (\"c\", 1, 3, 5),\n            (\"d\", 1, 3, 5),\n            (\"e\", 1, 1, 2),\n            (\"f\", 1, 4, 6),\n            (\"g\", 1, 4, 6),\n            (\"h\", 1, 4, 6)\n        ]\n    ) == 12\n    # correct result\n    max_aggregate(\n        [\n            (\"a\", 1, 4, 6),\n            (\"b\", 1, 1, 2),\n            (\"c\", 1, 3, 5),\n            (\"d\", 1, 3, 5),\n            (\"e\", 1, 1, 2),\n            (\"f\", 1, 4, 6),\n            (\"g\", 1, 4, 6),\n            (\"h\", 1, 4, 6),\n            (\"i\", 1, 4, 6)\n        ]\n    ) == 12\n    # correct result\n    max_aggregate(\n        [\n            (\"a\", 1, 4, 6),\n            (\"b\", 1, 1, 2),\n            (\"c\", 1, 3, 5),\n            (\"d\", 1, 3, 5),\n            (\"e\", 1, 1, 2),\n            (\"f\", 1, 4, 6),\n            (\"g\", 1, 4, 6),\n            (\"h\", 1, 4, 6),\n            (\"i\", 1, 4, 6),\n            (\"j\", 1, 4, 6)\n        ]\n    ) == 12\n    # correct result\n    max_aggregate(\n        [\n            (\"a\", 1, 4, 6),\n            (\"b\", 1, 1, 2),\n            (\"c\", 1, 3, 5),\n            (\"d\", 1, 3, 5),\n            (\"e\", 1, 1, 2),\n            (\"f\", 1, 4, 6),\n            (\"g\", 1, 4, 6),\n            (\"h\", 1, 4, 6),\n            (\"i\", 1, 4, 6),\n            (\"j\", 1, 4, 6),\n            (\"k\", 1, 4, 6)\n        ]\n    ) == 12\n    # correct result\n    max_aggregate(\n        [\n            (\"a\", 1, 4, 6),\n            (\"b\", 1, 1, 2),\n            (\"c\", 1, 3, 5),\n            (\"d\", 1, 3, 5),\n            (\"e\", 1, 1, 2),\n            (\"f\", 1, 4, 6),\n            (\"g\", 1, 4, 6),\n            (\"h\", 1, 4, 6),\n            (\"i\", 1, 4, 6),\n            (\"j\", 1, 4, 6),\n            (\"k\", 1, 4, 6),\n            (\"l\", 1, 4, 6)\n        ]\n    ) == 12\n    # correct result\n    max_aggregate(\n        [\n            (\"a\", 1, 4, 6),\n            (\"b\", 1, 1, 2),\n            (\"c\", 1, 3, 5),\n            (\"d\", 1, 3, 5),\n            (\"e\", 1, 1, 2),\n            (\"f\", 1, 4, 6),\n            (\"g\", 1, 4, 6),\n            (\"h\", 1, 4, 6),\n            (\"i\", 1, 4, 6),\n            (\"j\", 1, 4, 6),\n            (\"k\", 1, 4, 6),\n            (\"l\", 1, 4, 6),\n            (\"m\", 1, 4, 6)\n        ]\n    ) == 12\n    # correct result\n    max_aggregate(\n        [\n            (\"a\", 1, 4, 6),\n            (\"b\", 1, 1, 2),\n            (\"c\", 1, 3, 5),\n            (\"d\", 1, 3, 5),\n            (\"e\", 1, 1, 2),\n            (\"f\", 1, 4, 6),\n            (\"g\", 1, 4, 6),\n            (\"h\", 1, 4, 6),\n            (\"i\", 1, 4, 6),\n            (\"j\", 1, 4, 6),\n            (\"k\", 1, 4, 6),\n            (\"l\", 1, 4, 6),\n            (\"m\", 1, 4, 6),\n            (\"n\", 1, 4, 6)\n        ]\n    ) == 12\n    # correct result\n    max_aggregate(\n        [\n            (\"a\", 1, 4, 6),\n            (\"b\", 1, 1, 2),\n            (\"c\", 1, 3, 5),\n            (\"d\", 1, 3, 5),\n            (\"e\", 1, 1, 2),\n            (\"f\", 1, 4, 6),\n            (\"g\", 1, 4, 6),\n            (\"h\", 1, 4, 6),\n            (\"i\", 1, 4, 6),\n            (\"j\", 1, 4, 6),\n            (\"k\", 1, 4, 6),\n            (\"l\", 1, 4, 6),\n            (\"m\", 1, 4, 6),\n            (\"n\", 1, 4, 6),\n            (\"o\", 1, 4, 6)\n        ]\n    ) == 12\n    # correct result\n    max_aggregate(\n        [\n            (\"a\", 1, 4, 6),\n            (\"b\", 1, 1, 2),\n            (\"c\", 1, 3, 5),\n            (\"d\", 1, 3, 5),\n            (\"e\", 1, 1, 2),\n            (\"f\", 1, 4, 6),\n            (\"g\", 1, 4, 6),\n            (\"h\", 1, 4, 6),\n            (\"i\", 1, 4, 6),\n            (\"j\", 1, 4, 6),\n            (\"k\", 1, 4, 6),\n            (\"l\", 1, 4, 6),\n            (\"m\", 1, 4, 6),\n            (\"n\", 1, 4, 6),\n            (\"o\", 1, 4, 6),\n            (\"p\", 1, 4, 6)\n        ]\n    ) == 12\n    # correct result\n    max_aggregate(\n        [\n            (\"a\", 1, 4, 6),\n            (\"b\", 1, 1, 2),\n            (\"c\", 1, 3, 5),\n            (\"d\", 1, 3, 5),\n            (\"e\", 1, 1, 2),\n            (\"f\", 1, 4, 6),\n            (\"g\", 1, 4, 6),\n            (\"h\", 1, 4, 6),\n            (\"i\", 1, 4, 6),\n            (\"j\", 1, 4, 6),\n            (\"k\", 1, 4, 6),\n            (\"l\", 1, 4, 6),\n            (\"m\", 1, 4, 6),\n            (\"n\", 1, 4, 6),\n            (\"o\", 1, 4, 6),\n            (\"p\", 1, 4, 6),\n            (\""
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_aggregate([(4, 1, 2, 1), (5, 2, 1, 1), (3, 2, 1, 2), (1, 1, 1, 1)]) == 6, \"incorrect output\"\nassert     max_aggregate([(4, 1, 2, 1), (5, 2, 1, 1), (3, 2, 1, 2), (1, 1, 1, 1), (5, 1, 1, 1)]) == 7, \"incorrect output\"\nassert     max_aggregate([(2, 1, 1, 1), (1, 2, 1, 1), (5, 1, 2, 2), (3, 2, 2, 2), (2, 1, 1, 1)]) == 5, \"incorrect output\"\n\ndef count_multiples(stdata):\n    '''\n    Write a function to count the number of elements that are multiple of 2, 3, 5, 6.\n    '''\n    pass\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_aggregate([(1,2),(3,4),(5,6)]) == 6\nassert     max_aggregate([(1,2),(3,4),(5,6),(8,9)]) == 9\nassert     max_aggregate([(3,4),(2,3),(3,4)]) == 4\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef get_max(stdata):\n    '''\n    Write a function to get the maximum value in the list of tuples.\n    '''\n    pass\n\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    pass"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_aggregate([]) == 0\nassert     max_aggregate([(1,3,5), (1,3,5), (1,3,5), (1,3,5), (1,3,5), (1,3,5), (1,3,5)]) == 15\nassert     max_aggregate([(2,4,5), (2,4,5), (2,4,5), (2,4,5), (2,4,5), (2,4,5), (2,4,5)]) == 20\nassert     max_aggregate([(5,4,3), (5,4,3), (5,4,3), (5,4,3), (5,4,3), (5,4,3), (5,4,3)]) == 30\nassert     max_aggregate([(4,2,5), (4,2,5), (4,2,5), (4,2,5), (4,2,5), (4,2,5), (4,2,5)]) == 15\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint('Test passed!')\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_aggregate([(1,2), (2,4), (3,5), (3,3)]) == 5\nassert max_aggregate([(1,3), (1,3), (3,3), (3,3)]) == 3\nassert max_aggregate([(1,4), (2,5), (3,4), (3,4)]) == 5\nassert max_aggregate([(1,5), (2,6), (3,7), (3,5)]) == 5\nassert max_aggregate([(1,5), (2,6), (3,7), (4,1)]) == 6\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_aggregate([('john', 6), ('jack', 7), ('james', 8)]) == 6\nassert     max_aggregate([('john', 6), ('jack', 7), ('james', 8), ('jack', 9)]) == 8\nassert     max_aggregate([('john', 6), ('jack', 7), ('james', 8), ('jack', 9), ('jack', 10)]) == 10\nassert     max_aggregate([('john', 6), ('jack', 7), ('james', 8), ('jack', 9), ('jack', 10), ('jack', 11)]) == 11\n\ndef max_aggregate2(stdata):\n    '''\n    Using the aggregates from the above function, write a function that computes the maximum aggregate from the list of tuples.\n    '''\n    pass\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_binary_seq(0) == 0\nassert     count_binary_seq(1) == 0\nassert     count_binary_seq(2) == 1\nassert     count_binary_seq(3) == 5\nassert     count_binary_seq(4) == 11\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ncount_binary_seq(3) == 9\ncount_binary_seq(4) == 15\ncount_binary_seq(5) == 20\n\ndef count_binary_seq_recursive(n):\n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    pass\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_binary_seq(0) == 0, 'case: n=0, expect: 0'\nassert count_binary_seq(1) == 1, 'case: n=1, expect: 1'\nassert count_binary_seq(2) == 5, 'case: n=2, expect: 5'\nassert count_binary_seq(3) == 8, 'case: n=3, expect: 8'\nassert count_binary_seq(4) == 15, 'case: n=4, expect: 15'\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_binary_seq(0) == 1\nassert     count_binary_seq(1) == 1\nassert     count_binary_seq(2) == 2\nassert     count_binary_seq(3) == 5\nassert     count_binary_seq(4) == 8\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_binary_seq(1) == 1\nassert     count_binary_seq(2) == 2\nassert     count_binary_seq(3) == 4\nassert     count_binary_seq(4) == 6\nassert     count_binary_seq(5) == 8\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ncount_binary_seq(1) == 1\ncount_binary_seq(2) == 4\ncount_binary_seq(3) == 7\ncount_binary_seq(4) == 13\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_binary_seq(0) == 1\nassert     count_binary_seq(1) == 3\nassert     count_binary_seq(2) == 6\nassert     count_binary_seq(3) == 12\nassert     count_binary_seq(4) == 24\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     dict_depth({1:1,2:2})==2, 'Wrong Answer'\nassert     dict_depth({1:1,2:2,3:3})==2, 'Wrong Answer'\nassert     dict_depth({1:1,2:2,3:3,4:4})==3, 'Wrong Answer'\nassert     dict_depth({1:1,2:2,3:3,4:4,5:5})==3, 'Wrong Answer'\nassert     dict_depth({1:1,2:2,3:3,4:4,5:5,6:6})==3, 'Wrong Answer'\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     dict_depth({\"key_1\": \"value_1\", \"key_2\": {\"key_2_1\": \"value_2_1\"}, \"key_3\": \"value_3\"}) == 3\nassert     dict_depth({\"key_1\": \"value_1\", \"key_2\": {\"key_2_1\": \"value_2_1\", \"key_2_2\": \"value_2_2\"}, \"key_3\": \"value_3\"}) == 4\nassert     dict_depth({\"key_1\": \"value_1\", \"key_2\": {}, \"key_3\": \"value_3\"}) == 2\nassert     dict_depth({\"key_1\": \"value_1\", \"key_2\": {}, \"key_3\": \"\"}) == 1\nassert     dict_depth({\"key_1\": \"value_1\", \"key_2\": {}, \"key_3\": None}) == 0\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef test_dict_depth():\n    assert dict_depth({}) == 0\n    assert dict_depth({1:1, 2:2, 3:3}) == 2\n    assert dict_depth({'a':{1:'a', 2:'b'}, 'b':'b'}) == 2\n    "
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     dict_depth(\n        {\n            1: 2,\n            2: 3,\n            3: 3,\n            4: 4,\n            5: 5\n        }) == 3\nassert     dict_depth(\n        {\n            1: 2,\n            2: 3,\n            3: 3,\n            4: 4,\n            5: 5,\n            6: 6\n        }) == 4\nassert     dict_depth(\n        {\n            1: 2,\n            2: 3,\n            3: 3,\n            4: 4,\n            5: 5,\n            6: 6,\n            7: 7,\n            8: 8\n        }) == 4\nassert     dict_depth(\n        {\n            1: 2,\n            2: 3,\n            3: 3,\n            4: 4,\n            5: 5,\n            6: 6,\n            7: 7,\n            8: 8,\n            9: 9\n        }) == 5\nassert     dict_depth(\n        {\n            1: 2,\n            2: 3,\n            3: 3,\n            4: 4,\n            5: 5,\n            6: 6,\n            7: 7,\n            8: 8,\n            9: 9,\n            10: 10\n        }) == 6\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     dict_depth({'a': 1, 'b': 2, 'c': {'d': 4, 'e': 5}}) == 2, \"You need to return the depth\"\nassert dict_depth({'a': 1, 'b': 2, 'c': {'d': {'e': {'f': 6}}}}) == 3, \"You need to return the depth\"\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     dict_depth({}) == 0\nassert     dict_depth({1: 2, 2: 3, 3: 4}) == 3\nassert     dict_depth({1: 2, 2: 3, 3: 4}) == 3\nassert     dict_depth({1: {2: 3, 4: 5, 6: 7, 8: 9}, 2: 4, 3: 4}) == 3\nassert     dict_depth({1: {2: 3, 4: 5, 6: 7, 8: 9}, 2: 4, 3: 4}) == 3\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef dict_values(d):\n    '''\n    Write a function to find the values in a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Element([1,2,3,4], [[1, 2, 3, 4],\n                                    [3, 4, 1, 2],\n                                    [2, 4, 3, 1],\n                                    [2, 1, 4, 3]],\n                                    3,1) == 1\nassert     find_Element([1,2,3,4], [[1, 2, 3, 4],\n                                    [3, 4, 1, 2],\n                                    [2, 4, 3, 1],\n                                    [2, 1, 4, 3]],\n                                    1,1) == 1\nassert     find_Element([1,2,3,4], [[1, 2, 3, 4],\n                                    [3, 4, 1, 2],\n                                    [2, 4, 3, 1],\n                                    [2, 1, 4, 3]],\n                                    3,1) == 3\nassert     find_Element([1,2,3,4], [[1, 2, 3, 4],\n                                    [3, 4, 1, 2],\n                                    [2, 4, 3, 1],\n                                    [2, 1, 4, 3]],\n                                    1,4) == 3\nassert     find_Element([1,2,3,4], [[1, 2, 3, 4],\n                                    [3, 4, 1, 2],\n                                    [2, 4, 3, 1],\n                                    [2, 1, 4, 3]],\n                                    4,1) == 3\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_Element([1,2,3,4,5,6,7,8,9,10],[2,3,4],1,0)==7\nassert     find_Element([1,2,3,4,5,6,7,8,9,10],[2,3,4],1,1)==10\nassert     find_Element([1,2,3,4,5,6,7,8,9,10],[2,3,4],1,2)==8\nassert     find_Element([1,2,3,4,5,6,7,8,9,10],[2,3,4],1,3)==9\nassert     find_Element([1,2,3,4,5,6,7,8,9,10],[2,3,4],1,4)==6\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_Element([1,4,1],[[1,3],[1,3],[1,3]],[[1,2],[1,2],[1,2]],0) == 1\nassert     find_Element([1,4,1],[[1,3],[1,3],[1,3]],[[1,2],[1,2],[1,2]],1) == 4\nassert     find_Element([1,4,1],[[1,3],[1,3],[1,3]],[[1,2],[1,2],[1,2]],2) == 1\nassert     find_Element([1,4,1],[[1,3],[1,3],[1,3]],[[1,2],[1,2],[1,2]],3) == 4\nassert     find_Element([1,4,1],[[1,3],[1,3],[1,3]],[[1,2],[1,2],[1,2]],4) == 1\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_Element([3,5,2,4,1],{1,2,3},{0,1},2) == 4\nassert     find_Element([3,5,2,4,1],{1,2,3},{0,1},3) == 2\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_Element([1,2,3,4,5],[1,2,3],1,0) == 4, 'Wrong output'\nassert     find_Element([1,2,3,4,5],[1,2,3],1,1) == 5, 'Wrong output'\nassert     find_Element([1,2,3,4,5],[1,2,3],1,2) == 3, 'Wrong output'\nassert     find_Element([1,2,3,4,5],[1,2,3],1,3) == 2, 'Wrong output'\nassert     find_Element([1,2,3,4,5],[1,2,3],1,4) == 1, 'Wrong output'\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     start_withp(['pepper','pippe','pippi']) == ['pepper','pippe']\nassert     start_withp(['pepper','pippe','pippi','pepper']) == ['pippe','pippi']\nassert     start_withp(['pepper','pippe','pippi','pepper','pepper']) == ['pippe','pippi']\nassert not start_withp(['pepper','pippe','pippi','pepper','pepper','pepper'])\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     start_withp([\"a\", \"b\", \"p\", \"p\", \"q\"]) == [\"p\", \"q\"]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     start_withp(['poo', 'poop', 'pooop']) == ['poop', 'poop']\nassert     start_withp(['Poo', 'pooop', 'PooP']) == ['poo', 'pooop']\nassert     start_withp(['poo', 'poop', 'pooop', 'poop', 'poop']) == ['poop', 'poop']\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nstart_withp([\"p\",\"pp\",\"ppp\"]) == [\"pp\",\"ppp\"]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef full_p(words):\n    '''\n    Write a function to return the first 3 words from a list of words that start with letter 'p'.\n    '''\n    pass\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     start_withp([\"hello\", \"world\", \"hello\", \"hello\", \"hello\", \"hello\", \"world\", \"world\"]) == [\"hello\", \"world\"]\n\n\ndef start_withp_2(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     start_withp([\"apple\", \"pear\", \"peach\", \"pineapple\", \"kiwi\"]) == [\"pear\", \"pineapple\"]\nassert    start_withp([\"apple\", \"pear\", \"peach\"]) == None\nprint(\"You passed all test cases!\")\n\ndef check_p(words):\n    '''\n    Write a function to return words starting with letter 'p' if the word is in words list.\n    '''\n    pass\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     start_withp(['pablo', 'pablo', 'pablo', 'pablo', 'pablo', 'pablo', 'pablo']) == ('pablo', 'pablo')\nassert     start_withp(['pablo', 'pablo', 'pablo', 'pablo', 'pablo', 'pablo', 'pablo', 'pablo']) == ('pablo', 'pablo')\nassert     start_withp(['pablo', 'pablo', 'pablo', 'pablo', 'pablo', 'pablo', 'pablo', 'pablo', 'pablo']) == ('pablo', 'pablo')\nassert     start_withp(['pablo', 'pablo', 'pablo', 'pablo', 'pablo', 'pablo', 'pablo', 'pablo', 'pablo']) == ('pablo', 'pablo')\nassert     start_withp(['pablo', 'pablo', 'pablo', 'pablo', 'pablo', 'pablo', 'pablo', 'pablo', 'pablo']) == ('pablo', 'pablo')\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     start_withp(['copper', 'grape', 'pine','strawberry', 'plum', 'peach','mango', 'apple', 'orange', 'banana', 'blackberry', 'kiwi', 'lime', 'pineapple','strawberry', 'watermelon']) == ['apple', 'orange']\nassert     start_withp(['cat', 'dog', 'horse', 'bear', 'fox', 'elephant', 'panda', 'cow', 'bee', 'fish', 'goat', 'chicken', 'dog', 'cow', 'pig', 'cow', 'goat', 'pig', 'elephant', 'cat']) == ['goat', 'pig', 'cow', 'elephant']\nassert     start_withp(['grape', 'pine','strawberry', 'plum', 'peach','mango', 'apple', 'orange', 'banana', 'blackberry', 'kiwi', 'lime', 'pineapple','strawberry', 'watermelon']) == ['grape', 'pine','strawberry', 'plum', 'peach']\nassert     start_withp(['mango', 'pine','strawberry', 'plum', 'peach','mango', 'apple', 'orange', 'banana', 'blackberry', 'kiwi', 'lime', 'pineapple','strawberry', 'watermelon']) == ['mango','strawberry', 'plum', 'peach','mango']\nassert     start_withp(['wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'wine', 'win"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 2, 1) == [4, 2, 1]\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 3, 1) == [4, 2, 1]\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 4, 1) == [4, 2, 1]\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 5, 1) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 2, 4) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 2, 3) == [4, 2, 1]\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 3, 1) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 3, 2) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 4, 1) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 4, 2) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 5, 1) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 5, 2) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 6, 1) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 6, 2) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 7, 1) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 7, 2) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 8, 1) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 8, 2) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 9, 1) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 9, 2) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 10, 1) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 10, 2) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 11, 1) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 11, 2) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 12, 1) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 12, 2) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 13, 1) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 13, 2) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 14, 1) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 14, 2) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 15, 1) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 15, 2) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 16, 1) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 16, 2) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 17, 1) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 17, 2) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 18, 1) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 18, 2) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 19, 1) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 19, 2) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 20, 1) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 20, 2) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 21, 1) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 21, 2) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 22, 1) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 22, 2) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 23, 1) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 23, 2) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 24, 1) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 24, 2) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 25, 1) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 25, 2) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 26, 1) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 26, 2) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 27, 1) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 27, 2) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 28, 1) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 28, 2) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 29, 1) == []\nmax_sum_increasing_subseq([1, 4, 2, 3, 4, 2, 1], 6, 29, 2) == []\nmax_sum_increasing_subseq([1, 4, 2"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_sum_increasing_subseq([], 0, 0, 2) == 0, 'Empty sequence.'\nassert     max_sum_increasing_subseq([2, 1], 2, 2, 2) == 2, 'Max sum is 2. '\nassert     max_sum_increasing_subseq([1, 2, 4], 2, 2, 2) == 4, 'Max sum is 4. '\nassert     max_sum_increasing_subseq([1, 2, 4, 5, 3], 2, 2, 2) == 5, 'Max sum is 5. '\n\nprint('The result is correct.')\nprint('\\n')\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_sum_increasing_subseq([2, 1, 4, 5, 3, 6, 2, 8, 9, 1], 7, 2) == 6\nassert     max_sum_increasing_subseq([1, 3, 2, 4, 7, 8, 5], 3, 1) == 8\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    # a[index] = a[index] + a[index+1]\n    # a[index+1] = a[index] + a[index+1]\n    # a[index+2] = a[index] + a[index+1] + a[index+2]\n    # a[index+3] = a[index] + a[index+1] + a[index+2] + a[index+3]\n    # a[index+4] = a[index] + a[index+1] + a[index+2] + a[index+3] + a[index+4]\n    # a[index+5] = a[index] + a[index+1] + a[index+2] + a[index+3] + a[index+4] + a[index+5]\n    # a[index+6] = a[index] + a[index+1] + a[index+2] + a[index+3] + a[index+4] + a[index+5] + a[index+6]\n    # a[index+7] = a[index] + a[index+1] + a[index+2] + a[index+3] + a[index+4] + a[index+5] + a[index+6] + a[index+7]\n    # a[index+8] = a[index] + a[index+1] + a[index+2] + a[index+3] + a[index+4] + a[index+5] + a[index+6] + a[index+7] + a[index+8]\n    # a[index+9] = a[index] + a[index+1] + a[index+2] + a[index+3] + a[index+4] + a[index+5] + a[index+6] + a[index+7] + a[index+8] + a[index+9]\n    # a[index+10] = a[index] + a[index+1] + a[index+2] + a[index+3] + a[index+4] + a[index+5] + a[index+6] + a[index+7] + a[index+8] + a[index+9] + a[index+10]\n    # a[index+11] = a[index] + a[index+1] + a[index+2] + a[index+3] + a[index+4] + a[index+5] + a[index+6] + a[index+7] + a[index+8] + a[index+9] + a[index+10] + a[index+11]\n    # a[index+12] = a[index] + a[index+1] + a[index+2] + a[index+3] + a[index+4] + a[index+5] + a[index+6] + a[index+7] + a[index+8] + a[index+9] + a[index+10] + a[index+11] + a[index+12]\n    # a[index+13] = a[index] + a[index+1] + a[index+2] + a[index+3] + a[index+4] + a[index+5] + a[index+6] + a[index+7] + a[index+8] + a[index+9] + a[index+10] + a[index+11] + a[index+12] + a[index+13]\n    # a[index+14] = a[index] + a[index+1] + a[index+2] + a[index+3] + a[index+4] + a[index+5] + a[index+6] + a[index+7] + a[index+8] + a[index+9] + a[index+10] + a[index+11] + a[index+12] + a[index+13] + a[index+14]\n    # a[index+15] = a[index] + a[index+1] + a[index+2] + a[index+3] + a[index+4] + a[index+5] + a[index+6] + a[index+7] + a[index+8] + a[index+9] + a[index+10] + a[index+11] + a[index+12] + a[index+13] + a[index+14] + a[index+15]\n    # a[index+16] = a[index] + a[index+1] + a[index+2] + a[index+3] + a[index+4] + a[index+5] + a[index+6] + a[index+7] + a[index+8] + a[index+9] + a[index+10] + a[index+11] + a[index+12] + a[index+13] + a[index+14] + a[index+15] + a[index+16]\n    # a[index+17] = a[index] + a[index+1] + a[index+2] + a[index+3] + a[index+4] + a[index+5] + a[index+6] + a[index+7] + a[index+8] + a[index+9] + a[index+10] + a[index+11] + a[index+12] + a[index+13] + a[index+14] + a[index+15] + a[index+16] + a[index+17]\n    # a[index+18] = a[index] + a[index+1] + a[index+2] + a[index+3] + a[index+4] + a[index+5] + a[index+6] + a[index+7] + a[index+8] + a[index+9] + a[index+10] + a[index+11] + a[index+12] + a[index+13] + a[index+14] + a[index+15] + a[index+16] + a[index+17] + a[index+18]\n    # a[index+19] = a[index] + a[index+1] + a[index+2] + a[index+3] + a[index+4] + a[index+5] + a[index+6] + a[index+7] + a[index+8] + a[index+9] + a[index+10] + a[index+11] + a[index+12] + a[index+13] + a[index+14] + a[index+15] + a[index+16] + a[index+17] + a[index+18] + a[index+19]\n    # a[index+20] = a[index] + a[index+1] + a[index+2] + a[index+3] + a[index+4] + a[index+5] + a[index+6] + a[index+7] + a[index+8] + a[index+9] + a[index+10] + a[index+11] + a[index+12] + a[index+13] + a[index+14] + a[index+15] + a[index+16] + a[index+17] + a[index+18] + a[index+19] + a[index+20]\n    # a[index+21] = a[index] + a[index+1] + a[index+2] + a[index+3] + a[index+4] + a[index+5] + a[index+6] + a[index+7] + a[index+8] + a[index+9] + a[index+10] + a[index+11] + a[index+12] + a[index+13] + a[index+14] + a[index+15] + a"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_sum_increasing_subseq([1, 2, 3, 4], 4, 2, 2) == 4\nassert     max_sum_increasing_subseq([1, 2, 3, 4], 5, 2, 2) == 3\nassert     max_sum_increasing_subseq([3, 6, 7, 1], 3, 0, 2) == 4\nassert     max_sum_increasing_subseq([5, 4, 1, 7], 3, 1, 2) == 8\nassert     max_sum_increasing_subseq([5, 4, 1, 7], 3, 2, 2) == 7\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_sum_increasing_subseq([], 1, 0, 1) == 0\nassert     max_sum_increasing_subseq([0], 1, 0, 1) == 0\nassert     max_sum_increasing_subseq([1], 1, 0, 1) == 1\nassert     max_sum_increasing_subseq([1, 2], 1, 0, 1) == 1\nassert     max_sum_increasing_subseq([1, 2, 3], 1, 0, 1) == 1\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert max_sum_increasing_subseq([4,3,2,1], 4, 2, 1) == 3\nassert max_sum_increasing_subseq([1,2,3,4,5], 5, 3, 4) == 7\nassert max_sum_increasing_subseq([5,4,3,2,1], 4, 2, 1) == 3\nassert max_sum_increasing_subseq([1,5,4,3,2], 5, 3, 4) == 6\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     colon_tuplex((1,2),3,4) == (2,4)\nassert     colon_tuplex((2,4),3,4) == (1,4)\nassert     colon_tuplex((1,2,3),4,5) == (1,4)\nassert     colon_tuplex((3,4,5),4,5) == (2,3)\nassert     colon_tuplex((3,4,5,6),4,5) == (2,3)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     colon_tuplex((1,2,3),1,2) == (1,2,3)\nassert     colon_tuplex((1,2,3),1,3) == (1,3,2)\nassert     colon_tuplex((1,2,3),2,2) == (2,1,3)\nassert     colon_tuplex((1,2,3),2,3) == (2,3,1)\nassert     colon_tuplex((1,2,3),3,2) == (3,1,2)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     colon_tuplex((1,2,3),(0,1),(0,1)) == (1,2)\nassert     colon_tuplex((1,2,3),(0,1),(1,1)) == (1,2)\nassert     colon_tuplex((1,2,3),(0,1),(0,1)) == (1,2)\n\nassert     colon_tuplex((1,2,3),(0,1),(0,0)) == (1,2,3)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    pass\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     colon_tuplex((1,2,3),3,4) == ((1,2,3), (4,5,6))\nassert     colon_tuplex((1,2,3),3,5) == ((1,2,3), (4,5,6))\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     colon_tuplex((0,1,2,3,4),2,2) == ((0,1),(2,3))\nassert     colon_tuplex((0,1,2,3,4),2,3) == ((0,1),(2,3),(4,))\nassert     colon_tuplex((0,1,2,3,4),3,3) == ((0,1,2),(3,4),(5,6,7))\nassert     colon_tuplex((0,1,2,3,4),4,5) == ((0,1,2,3),(4,5,6,7,8))\nassert     colon_tuplex((0,1,2,3,4),0,4) == ((0,1,2,3),(4,5,6,7,8))\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     colon_tuplex((),0,0) == ()\nassert     colon_tuplex((),1,0) == ()\nassert     colon_tuplex((),0,1) == ()\nassert     colon_tuplex((),0,2) == ()\nassert     colon_tuplex((),1,2) == ()\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     colon_tuplex((1,2),(1,2),(1,2)) == (1,2,1,2)\nassert     colon_tuplex((1,2),(1,2,3),(1,2)) == (1,2,1,2,3)\nassert     colon_tuplex((1,2),(1,2,3),(1,2,4)) == (1,2,1,2,3,4)\nassert     colon_tuplex((1,2,3),(1,2,3,4),(1,2,3,4)) == (1,2,3,4,1,2,3,4)\n\ndef sum_of_two_colons(tuplex,m,n):\n    '''\n    Write a function to sum the last three elements in the colon of the tuple tuplex.\n    '''\n    pass\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     large_product([], [], 0) == []\nassert large_product([], [-5], 1) == [-5]\nassert large_product([5], [], 1) == [-5]\nassert large_product([-1, -2, -3], [0, 1, 2], 3) == [-1, 1, -1]\nassert large_product([-1, -2, -3], [-5, 3, 5], 3) == [-1, 1, -1]\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef largest_product(nums1, nums2, nums3):\n    '''\n    Write a function to find the largest number among the three given numbers.\n    '''\n    pass\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nlarge_product([1, 2, 3, 4, 5], [10, 20, 30, 40, 50], 3) == [120, 210, 300]\nassert large_product([1, 2, 3, 4, 5], [10, 20, 30, 40, 50], 1) == [120]\nassert large_product([1, 2, 3, 4, 5], [10, 20, 30, 40, 50], 0) == [10, 20, 30, 40, 50]\nassert large_product([1, 2, 3, 4, 5], [10, 20, 30, 40, 50], 5) == [120, 210, 300, 420, 550]\n\ndef large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    pass\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     large_product([1,2,3], [4,5,6], 2) == 60\nassert     large_product([-1,3,0.5], [-10,20,4], 2) == 60\nassert     large_product([1,1,3], [-10,20,4], 2) == 60\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     large_product([1,3,-1,-5,7,4], [-10,10], 1) == -1\nassert     large_product([1,3,-1,-5,7,4], [-10,10], 2) == -1\nassert     large_product([1,3,-1,-5,7,4], [-10,10], 5) == -1\nassert     large_product([1,3,-1,-5,7,4], [-10,10], 10) == 8\nassert     large_product([1,3,-1,-5,7,4], [-10,10], 11) == -1\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     maximum(1,2) == 2\nassert maximum(1,2) == 2"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nmaximum(10,20) == 20\nmaximum(20,10) == 20\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     maximum(1,2) == 2, 'Test 1 Failed'\nassert     maximum(2,1) == 2, 'Test 1 Failed'\nassert     maximum(2,2) == 2, 'Test 1 Failed'\nassert     maximum(3,2) == 3, 'Test 1 Failed'\nassert     maximum(-1,-2) == -1, 'Test 1 Failed'\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     maximum(2,3) == 3, \"Should be 3\"\nassert     maximum(6,-3) == 6, \"Should be 6\"\nassert     maximum(1.2,3.4) == 3.4, \"Should be 3.4\"\nassert     maximum(1.2,3) == 3, \"Should be 3\"\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    maximum(4,3) == 4\n    maximum(4,5) == 5\n    maximum(7,5) == 7\n    maximum(9,9) == 9\n    maximum(4,9) == 9\n\nprint('Passed')\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    pass\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     maximum(1,2) == 2\nassert     maximum(12,4) == 12\nassert     maximum(1,2) == 1\n\nprint('Check your code')\nprint('Expected output: maximum(1,2) == 2')\nprint('Your output:')\nprint(maximum(1,2))\n\nprint('Expected output: maximum(12,4) == 12')\nprint('Your output:')\nprint(maximum(12,4))\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     maximum(1,2) == 2, \"Wrong answer\"\nassert     maximum(2,1) == 2, \"Wrong answer\"\nassert     maximum(5,5) == 5, \"Wrong answer\"\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nmaximum(3,4)==4\nprint('Test case passed!')\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     string_to_tuple(\"\") == ('',), \"Test case 1: Pass\"\nassert     string_to_tuple(\"hihihi\") == ('h', 'i', 'h', 'i', 'h', 'i'), \"Test case 2: Pass\"\nassert     string_to_tuple(\"hihihihihihihih\") == ('h', 'i', 'h', 'i', 'h', 'i', 'h', 'i', 'h', 'i', 'h', 'i'), \"Test case 3: Pass\"\n\ndef string_to_tuple_2(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    pass\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     string_to_tuple('abc') == ('a','b','c')\nassert string_to_tuple('abcdef') == ('a','b','c','d','e','f')\nassert string_to_tuple('abcdefg') == ('a','b','c','d','e','f','g')\nassert string_to_tuple('abcdefgh') == ('a','b','c','d','e','f','g','h')\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     string_to_tuple('Hello') == ('H', 'e', 'l', 'l', 'o'), \"Should return ('H', 'e', 'l', 'l', 'o')\"\nassert     string_to_tuple('Hi there') == ('H', 'i', 't', 'e', 'r', 'l', 'd'), \"Should return ('H', 'i', 't', 'e', 'r', 'l', 'd')\"\nassert     string_to_tuple('a') == ('a'), \"Should return ('a')\"\n\ndef string_to_list(str1):\n    '''\n    Write a function to convert a given string to a list of characters.\n    '''\n    pass\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     string_to_tuple(\"abcd\")    ==     (\"a\", \"b\", \"c\", \"d\")\nassert     string_to_tuple(\"abcd\")    ==     (\"a\", \"b\", \"c\", \"d\")\nassert     string_to_tuple(\"abcd\")    ==     (\"a\", \"b\", \"c\", \"d\")\nassert     string_to_tuple(\"abcd\")    ==     (\"a\", \"b\", \"c\", \"d\")\nassert     string_to_tuple(\"abcd\")    ==     (\"a\", \"b\", \"c\", \"d\")\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    # True\n    string_to_tuple('sharma') == (0,1,2,3,4,5,6,7,8,9)\n    # True\n    string_to_tuple('johnny') == (0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99)\n    # True\n    string_to_tuple('billy') == (0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99)\n    # True\n    string_to_tuple('dolly') == (0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99)\n    # True\n    string_to_tuple('dev') == (0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99)\n    # True\n    string_to_tuple('dolls') == (0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,3"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     string_to_tuple(\"Hello\") == ('H', 'e', 'l', 'l', 'o'), \"incorrect\"\nassert     string_to_tuple(\"Python\") == ('P', 'y', 't', 'h', 'o', 'n'), \"incorrect\"\nassert     string_to_tuple(\"This is a test.\") == ('T', 'h', 'i','s', 'i','s', 'a', 't', 'e', '.'), \"incorrect\"\nassert     string_to_tuple(\"\") == (), \"incorrect\"\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    \ndef tuple_to_string(tuple1):\n    '''\n    Write a function to convert a given tuple of characters to a string.\n    '''\n    pass\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     string_to_tuple('google') == tuple('g', 'o', 'l', 'e')\nassert     string_to_tuple('google') == tuple('o', 'g', 'l', 'e')\nassert     string_to_tuple('google') == tuple('g', 'l', 'e')\nassert     string_to_tuple('google') == tuple('g', 'l', 'e')\nassert     string_to_tuple('google') == tuple('g', 'e')\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     string_to_tuple('hello') == ('h', 'e', 'l', 'l', 'o')\nassert string_to_tuple('abb') == ('a', 'b', 'b')\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     string_to_tuple('abcd') == ('a', 'b', 'c', 'd')\nassert     string_to_tuple('asdf') == ('a','s', 'd', 'f')\nassert     string_to_tuple('abcd') == ('a', 'b', 'c', 'd')\n\n\ndef tuple_to_string(t1):\n    '''\n    Write a function to convert a given tuple of characters to a string.\n    '''\n    pass\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     set_left_most_unset_bit(0) == 0\nassert     set_left_most_unset_bit(1) == 0\nassert     set_left_most_unset_bit(2) == 0\nassert     set_left_most_unset_bit(3) == 0\nassert     set_left_most_unset_bit(4) == 1\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     set_left_most_unset_bit(0b1111) == 0b1\nassert set_left_most_unset_bit(0b1111) == 0b1\nassert set_left_most_unset_bit(0b01010000) == 0b0\nassert set_left_most_unset_bit(0b01010001) == 0b1\nassert set_left_most_unset_bit(0b01010010) == 0b0\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     set_left_most_unset_bit(0b00) == 0b01\nassert     set_left_most_unset_bit(0b01) == 0b10\nassert     set_left_most_unset_bit(0b10) == 0b11\nassert     set_left_most_unset_bit(0b11) == 0b00\nassert     set_left_most_unset_bit(0b111) == 0b110\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     set_left_most_unset_bit(2) == 0\nassert     set_left_most_unset_bit(0b00110011) == 3\nassert     set_left_most_unset_bit(0b01111111) == 2\nassert     set_left_most_unset_bit(0b1) == 1\nassert     set_left_most_unset_bit(0b11111111) == 0\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     set_left_most_unset_bit(0) == 0\nassert     set_left_most_unset_bit(1) == 0\nassert     set_left_most_unset_bit(0b1) == 0\nassert     set_left_most_unset_bit(0b11) == 0\nassert     set_left_most_unset_bit(0b1001) == 0\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     set_left_most_unset_bit(4) == 0 \nassert set_left_most_unset_bit(3) == 1 \nassert set_left_most_unset_bit(2) == 2 \nassert set_left_most_unset_bit(1) == 3 \nassert set_left_most_unset_bit(1) == 1 \n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     volume_cone(1,0.5) == 2.5\nassert     volume_cone(2,2) == 6\nassert     volume_cone(3.1,2.1) == 4.898105957446809\nassert     volume_cone(3.1,2.1) == 4.898105957446809\nassert     volume_cone(3.1,2.1) == 4.898105957446809\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     volume_cone(5, 10) == 8.59724534079, \"The first value is wrong\"\nassert     volume_cone(5, -5) == 0, \"The second value is wrong\"\nassert     volume_cone(5, -10) == 0, \"The third value is wrong\"\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     volume_cone(2,3) == math.pi*math.pow(2,2)*3\nassert     volume_cone(1,2) == 2*math.pi*math.pow(1,2)\nassert     volume_cone(5,1) == 5*math.pi*math.pow(5,2)\nassert     volume_cone(-3,4) == math.pi*math.pow(3,2)*4\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     volume_cone(10,5) == 120, \"volume_cone(10,5) incorrect\"\nassert     volume_cone(10,0) == math.pi * 10**2, \"volume_cone(10,0) incorrect\"\nassert     volume_cone(10,10) == 10000, \"volume_cone(10,10) incorrect\"\nassert     volume_cone(0,10) == 0, \"volume_cone(0,10) incorrect\"\nassert     volume_cone(0,0) == 0, \"volume_cone(0,0) incorrect\"\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     volume_cone(5,10) == 50, \"Your volume_cone function is not correct\"\nassert     volume_cone(5,100) == 500, \"Your volume_cone function is not correct\"\nassert     volume_cone(5,1) == 5, \"Your volume_cone function is not correct\"\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     volume_cone(1,2) == math.pi*1**2\nassert     volume_cone(2,4) == math.pi*2**2\nassert     volume_cone(5,6) == math.pi*5**2\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     volume_cone(1,1) == 1\nassert     volume_cone(1.5,1) == 1.5\nassert     volume_cone(2,1) == math.pi*math.pow(2,1/3)*1\nassert     volume_cone(2.5,1) == math.pi*math.pow(2.5,1/3)*1\nassert     volume_cone(3,1) == math.pi*math.pow(3,1/3)*1\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     volume_cone(3,3) == math.pi * r * (r ** 2 + r + h) / 4, \"incorrect\"\nassert     volume_cone(3,4) == math.pi * r * (r ** 2 + r + h) / 4 + math.pi * r * r * h / 3, \"incorrect\"\nassert     volume_cone(2,4) == math.pi * r * (r ** 2 + r + h) / 4 + math.pi * r * r * h / 3, \"incorrect\"\n\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pass\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     highest_Power_of_2(5) == 2\nassert     highest_Power_of_2(10) == 4\nassert     highest_Power_of_2(20) == 4\nassert     highest_Power_of_2(15) == 4\nassert     highest_Power_of_2(13) == 2\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nhighest_Power_of_2(5) == 2\nhighest_Power_of_2(8) == 4\nhighest_Power_of_2(15) == 8\nhighest_Power_of_2(18) == 4\nhighest_Power_of_2(30) == 16\nhighest_Power_of_2(45) == 30\nhighest_Power_of_2(60) == 48\nhighest_Power_of_2(75) == 64\nhighest_Power_of_2(90) == 96\nhighest_Power_of_2(108) == 16\nhighest_Power_of_2(111) == 16\nhighest_Power_of_2(144) == 32\nhighest_Power_of_2(192) == 64\nhighest_Power_of_2(255) == 128\nhighest_Power_of_2(320) == 192\nhighest_Power_of_2(384) == 256\nhighest_Power_of_2(512) == 512\nhighest_Power_of_2(768) == 512\nhighest_Power_of_2(1024) == 1024\nhighest_Power_of_2(131072) == 2048\nhighest_Power_of_2(16384) == 4096\nhighest_Power_of_2(32768) == 2048\nhighest_Power_of_2(65536) == 4096\nhighest_Power_of_2(131076) == 2048\nhighest_Power_of_2(268435456) == 8192\nhighest_Power_of_2(536870912) == 4096\nhighest_Power_of_2(1099511627776) == 8192\nhighest_Power_of_2(2147483648) == 8192\nhighest_Power_of_2(9223372036854775807) == 8192\nhighest_Power_of_2(18446744073709551615) == 16384\nhighest_Power_of_2(409607936554775807) == 16384\nhighest_Power_of_2(1073741824) == 16384\nhighest_Power_of_2(17179869184) == 32\nhighest_Power_of_2(17179869184) == 32\nhighest_Power_of_2(2147483648) == 32\nhighest_Power_of_2(9223372036854775808) == 32\nhighest_Power_of_2(18446744073709551615) == 32\nhighest_Power_of_2(536870912) == 32\nhighest_Power_of_2(1073741824) == 32\nhighest_Power_of_2(17179869184) == 64\nhighest_Power_of_2(409607936554775808) == 64\nhighest_Power_of_2(2147483648) == 64\nhighest_Power_of_2(9223372036854775808) == 64\nhighest_Power_of_2(18446744073709551615) == 128\nhighest_Power_of_2(536870912) == 128\nhighest_Power_of_2(1073741824) == 128\nhighest_Power_of_2(17179869184) == 256\nhighest_Power_of_2(409607936554775808) == 256\nhighest_Power_of_2(2147483648) == 256\nhighest_Power_of_2(9223372036854775808) == 256\nhighest_Power_of_2(18446744073709551615) == 512\nhighest_Power_of_2(536870912) == 512\nhighest_Power_of_2(1073741824) == 512\nhighest_Power_of_2(17179869184) == 1024\nhighest_Power_of_2(409607936554775808) == 1024\nhighest_Power_of_2(2147483648) == 1024\nhighest_Power_of_2(9223372036854775808) == 1024\nhighest_Power_of_2(18446744073709551615) == 2048\nhighest_Power_of_2(536870912) == 2048\nhighest_Power_of_2(1073741824) == 2048\nhighest_Power_of_2(17179869184) == 4096\nhighest_Power_of_2(409607936554775808) == 4096\nhighest_Power_of_2(2147483648) == 4096\nhighest_Power_of_2(9223372036854775808) == 4096\nhighest_Power_of_2(18446744073709551615) == 8192\nhighest_Power_of_2(536870912) == 8192\nhighest_Power_of_2(1073741824) == 8192\nhighest_Power_of_2(17179869184) == 16384\nhighest_Power_of_2(409607936554775808) == 16384\nhighest_Power_of_2(2147483648) == 16384\nhighest_Power_of_2(9223372036854775808) == 16384\nhighest_Power_of_2(18446744073709551615) == 32768\nhighest_Power_of_2(536870912) == 32768\nhighest_Power_of_2(1073741824) == 32768\nhighest_Power_of_2(17179869184) == 65536\nhighest_Power_of_2(409607936554775808) == 65536\nhighest_Power_of_2(2147483648) == 65536\nhighest_Power_of_2(9223372036854775808) == 65536\nhighest_Power_of_2(18446744073709551615) == 131072\nhighest_Power_of_2(536870912) == 131072\nhighest_Power_of_2(1073741824) == 131072\nhighest_Power_of_2(17179869184) == 268435456\nhighest_Power_of_2(409607936554775808) == 268435456\nhighest_Power_of_2(2147483648) == 268435456\nhighest_Power_of_2(9223372036854775808) == 268435456\nhighest_Power_of_2(18446744073709551615) == 536870912\nhighest_Power_of_2(536870912) == 536870912\nhighest_Power_of_2(1073741824) == 536870912\nhighest_Power_of_2(17179869184) == 1073741824\nhighest_Power_of_2(409607936554775808) == 1073741824\nhighest_Power_of_2(2147483648) == 1073741824\nhighest_Power_of_2(9223372036854775808) == 1073741824\nhighest_Power_of_2(18446744073709551615) == 17179869184\nhighest_Power_of_2(536870912) == 17179869184\nhighest_Power_of_2(1073741824) == 17179869184\nhighest_Power_of_2(17179869184) == 17179869184\nhighest_Power_of_2(409607936554775808) == 17179869184\nhighest_Power_of_2(2147483648) == 17179869184\nhighest_Power_of_2(9223372036854775808) == 17179869184\nhighest_Power_of_2(18446744073709551615) == 4194304\nhighest_Power_of_2(536870912) == 4194304\nhighest_Power_of_2(1073741824) == 4194304\nhighest_Power_of_2(17179869184) == 4194304\nhighest_Power_of_2(409607936554775808) == 4194304\nhighest_Power_of_2(2147483648) == 4194304\nhighest_Power_of_2(9223372036854775808) == 4194304\nhighest_Power_of_2(18446744073709551615) == 8388608\nhighest_Power_of_2(536870912) == 8388608\nhighest_Power_of_2(1073741824) == 8388608\nhighest_Power_of_2(1"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     highest_Power_of_2(1) == 1, \"Should be 1\"\nassert     highest_Power_of_2(4) == 1, \"Should be 1\"\nassert     highest_Power_of_2(16) == 2, \"Should be 2\"\nassert     highest_Power_of_2(7) == 3, \"Should be 3\"\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nhighest_Power_of_2(32) == 4\nhighest_Power_of_2(15) == 3\nhighest_Power_of_2(23) == 5\nhighest_Power_of_2(31) == 7\nhighest_Power_of_2(10) == 2\n\nprint('\\nChecking if a number is a power of 2:')\nprint(highest_Power_of_2.__doc__)\nprint(highest_Power_of_2.__name__)\n\ndef highest_Power_of_2_else(n):\n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    pass\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nhighest_Power_of_2(1) == 0\nhighest_Power_of_2(9) == 1\nhighest_Power_of_2(16) == 2\nhighest_Power_of_2(17) == 3\nhighest_Power_of_2(35) == 4\nhighest_Power_of_2(60) == 5\nhighest_Power_of_2(70) == 6\nhighest_Power_of_2(100) == 7\nhighest_Power_of_2(150) == 8\nhighest_Power_of_2(160) == 9\nhighest_Power_of_2(1000) == 10\nhighest_Power_of_2(2147483647) == 11\nhighest_Power_of_2(2147483648) == 12\nhighest_Power_of_2(2147483649) == 13\nhighest_Power_of_2(4294967295) == 14\nhighest_Power_of_2(4294967296) == 15\nhighest_Power_of_2(4294967297) == 16\nhighest_Power_of_2(4294967298) == 17\nhighest_Power_of_2(4294967299) == 18\nhighest_Power_of_2(4294967301) == 19\nhighest_Power_of_2(4294967310) == 20\nhighest_Power_of_2(4294967311) == 21\nhighest_Power_of_2(4294967312) == 22\nhighest_Power_of_2(4294967313) == 23\nhighest_Power_of_2(4294967314) == 24\nhighest_Power_of_2(4294967315) == 25\nhighest_Power_of_2(4294967316) == 26\nhighest_Power_of_2(4294967317) == 27\nhighest_Power_of_2(4294967318) == 28\nhighest_Power_of_2(4294967319) == 29\nhighest_Power_of_2(4294967320) == 30\nhighest_Power_of_2(4294967321) == 31\nhighest_Power_of_2(4294967322) == 32\nhighest_Power_of_2(4294967323) == 33\nhighest_Power_of_2(4294967324) == 34\nhighest_Power_of_2(4294967325) == 35\nhighest_Power_of_2(4294967326) == 36\nhighest_Power_of_2(4294967327) == 37\nhighest_Power_of_2(4294967328) == 38\nhighest_Power_of_2(4294967329) == 39\nhighest_Power_of_2(4294967330) == 40\nhighest_Power_of_2(4294967331) == 41\nhighest_Power_of_2(4294967332) == 42\nhighest_Power_of_2(4294967333) == 43\nhighest_Power_of_2(4294967334) == 44\nhighest_Power_of_2(4294967335) == 45\nhighest_Power_of_2(4294967336) == 46\nhighest_Power_of_2(4294967337) == 47\nhighest_Power_of_2(4294967338) == 48\nhighest_Power_of_2(4294967339) == 49\nhighest_Power_of_2(4294967340) == 50\nhighest_Power_of_2(4294967341) == 51\nhighest_Power_of_2(4294967342) == 52\nhighest_Power_of_2(4294967343) == 53\nhighest_Power_of_2(4294967344) == 54\nhighest_Power_of_2(4294967345) == 55\nhighest_Power_of_2(4294967346) == 56\nhighest_Power_of_2(4294967347) == 57\nhighest_Power_of_2(4294967348) == 58\nhighest_Power_of_2(4294967349) == 59\nhighest_Power_of_2(4294967350) == 60\nhighest_Power_of_2(4294967351) == 61\nhighest_Power_of_2(4294967352) == 62\nhighest_Power_of_2(4294967353) == 63\nhighest_Power_of_2(4294967354) == 64\nhighest_Power_of_2(4294967355) == 65\nhighest_Power_of_2(4294967356) == 66\nhighest_Power_of_2(4294967357) == 67\nhighest_Power_of_2(4294967358) == 68\nhighest_Power_of_2(4294967359) == 69\nhighest_Power_of_2(4294967360) == 70\nhighest_Power_of_2(4294967361) == 71\nhighest_Power_of_2(4294967362) == 72\nhighest_Power_of_2(4294967363) == 73\nhighest_Power_of_2(4294967364) == 74\nhighest_Power_of_2(4294967365) == 75\nhighest_Power_of_2(4294967366) == 76\nhighest_Power_of_2(4294967367) == 77\nhighest_Power_of_2(4294967368) == 78\nhighest_Power_of_2(4294967369) == 79\nhighest_Power_of_2(4294967370) == 80\nhighest_Power_of_2(4294967371) == 81\nhighest_Power_of_2(4294967372) == 82\nhighest_Power_of_2(4294967373) == 83\nhighest_Power_of_2(4294967374) == 84\nhighest_Power_of_2(4294967375) == 85\nhighest_Power_of_2(4294967376) == 86\nhighest_Power_of_2(4294967377) == 87\nhighest_Power_of_2(4294967378) == 88\nhighest_Power_of_2(4294967379) == 89\nhighest_Power_of_2(4294967380) == 90\nhighest_Power_of_2(4294967381) == 91\nhighest_Power_of_2(4294967382) == 92\nhighest_Power_of_2(4294967383) == 93\nhighest_Power_of_2(4294967384) == 94\nhighest_Power_of_2(4294967385) == 95\nhighest_Power_of_2(4294967386) == 96\nhighest_Power_of_2(4294967387) == 97\nhighest_Power_of_2(4294967388) == 98\nhighest_Power_of_2(4294967389) == 99\nhighest_Power_of_2(4294967390) == 100\nhighest_Power_of_2(4294967391) == 101\nhighest_Power_of_2(4294967392) == 102\nhighest_Power_of_2(4294967393) == 103\nhighest_Power_of_2(4294967394) == 104\nhighest_Power_of_2(4294967395) == 105\nhighest_Power_of_2(4294967396) == 106\nhighest_Power_of_2(4294967397) == 107\nhighest_Power_of_2(4294967398) == 108\nhighest_Power_of_2(4294967399) == 109\nhighest_Power_of_2(4294967400) == 110\nhighest_Power_of_2(4294967401) == 111\nhighest_Power_of_2(4294967402) == 112\nhighest_Power_of_2(4294967403) == 113\nhighest_Power_of_2(4294967404) == 114\nhighest_Power_of_2(4294967405) == 115\nhighest_Power_of_2(4294967406) == 116\nhighest_Power_of_2(4294967407) == 117\nhighest_Power_of_2(4294967408) == 118\nhighest_Power_of_2(4294967409) == 119\nhighest_Power_of_2(4294967410) == 120\nhighest_Power_of_2(4294967411) == 121\nhighest_Power_of_2(4294967412) == 122\nhighest_Power_of_2(4294967413) == 123\nhighest_Power_of_2(4294967414) == 124\nhighest_Power_of_2(4294967415) == 12"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     highest_Power_of_2(3) == 2\nassert     highest_Power_of_2(5) == 2\nassert     highest_Power_of_2(15) == 3\nassert     highest_Power_of_2(24) == 4\nassert     highest_Power_of_2(127) == 1\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef find_smallest_subarray(arr, n): \n    '''\n    Given an array arr and an integer n. Find the length of the smallest subarray with sum less than or equal to n.\n    '''\n    pass\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nhighest_Power_of_2(1) == 0\nhighest_Power_of_2(5) == 1\nhighest_Power_of_2(7) == 2\nhighest_Power_of_2(4) == 4\nhighest_Power_of_2(8) == 8\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint ('highest_Power_of_2: PASSED')\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint (\"The expected output is :\", 9)\nprint (\"The output of highest_Power_of_2 is : \",highest_Power_of_2(9))\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_lucas(1) == 2\nassert     find_lucas(2) == 3\nassert     find_lucas(3) == 4\nassert     find_lucas(4) == 5\nassert     find_lucas(5) == 8\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nfind_lucas(1) == 1\nassert \nfind_lucas(2) == 3\nassert \nfind_lucas(3) == 4\nassert \nfind_lucas(4) == 7\nassert \nfind_lucas(5) == 11\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    find_lucas(0) == 2\n    find_lucas(1) == 1\n    find_lucas(2) == 3\n    find_lucas(3) == 4\n    find_lucas(4) == 7\n    find_lucas(5) == 11\n    find_lucas(6) == 18\n    find_lucas(7) == 29\n    find_lucas(8) == 47\n    find_lucas(9) == 59\n    find_lucas(10) == 73\n    find_lucas(11) == 100\n    find_lucas(12) == 239\n    find_lucas(13) == 610\n    find_lucas(14) == 987\n    find_lucas(15) == 1597\n    find_lucas(16) == 2584\n    find_lucas(17) == 4181\n    find_lucas(18) == 6765\n    find_lucas(19) == 10946\n    find_lucas(20) == 17711\n    find_lucas(21) == 28657\n    find_lucas(22) == 46368\n    find_lucas(23) == 75025\n    find_lucas(24) == 121393\n    find_lucas(25) == 196418\n    find_lucas(26) == 317811\n    find_lucas(27) == 514229\n    find_lucas(28) == 864510\n    find_lucas(29) == 1346269\n    find_lucas(30) == 2147483647\n    find_lucas(31) == 4294967296\n    find_lucas(32) == 8589934592\n    find_lucas(33) == 17179869184\n    find_lucas(34) == 34458317141\n    find_lucas(35) == 5985261443\n    find_lucas(36) == 7288595041\n    find_lucas(37) == 12614379391\n    find_lucas(38) == 18452196735\n    find_lucas(39) == 28657161683\n    find_lucas(40) == 4398046511\n    find_lucas(41) == 54835951417\n    find_lucas(42) == 67194635307\n    find_lucas(43) == 102334155385\n    find_lucas(44) == 155112907031\n    find_lucas(45) == 24872528736\n    find_lucas(46) == 36218978315\n    find_lucas(47) == 4673215269\n    find_lucas(48) == 4926551497\n    find_lucas(49) == 5039372036\n    find_lucas(50) == 5494582124\n    find_lucas(51) == 796254783\n    find_lucas(52) == 12586269025\n    find_lucas(53) == 37283764744\n    find_lucas(54) == 8377193777\n    find_lucas(55) == 1359215587\n    find_lucas(56) == 2971215073\n    find_lucas(57) == 3790484519\n    find_lucas(58) == 5999254896\n    find_lucas(59) == 377293188\n    find_lucas(60) == 457081048\n    find_lucas(61) == 26852437799\n    find_lucas(62) == 2300778485\n    find_lucas(63) == 38758326454\n    find_lucas(64) == 91439836807\n    find_lucas(65) == 155112907031\n    find_lucas(66) == 35246893820\n    find_lucas(67) == 5628848593\n    find_lucas(68) == 41291545885\n    find_lucas(69) == 6932078967\n    find_lucas(70) == 14533251674\n    find_lucas(71) == 3777488655\n    find_lucas(72) == 11677216371\n    find_lucas(73) == 505762882\n    find_lucas(74) == 77624116441\n    find_lucas(75) == 49535300395\n    find_lucas(76) == 6772190913\n    find_lucas(77) == 7991313155\n    find_lucas(78) == 1783147998\n    find_lucas(79) == 77090941\n    find_lucas(80) == 26107287475\n    find_lucas(81) == 523648421\n    find_lucas(82) == 1122661\n    find_lucas(83) == 22718386\n    find_lucas(84) == 44311299\n    find_lucas(85) == 1170253776\n    find_lucas(86) == 37693445\n    find_lucas(87) == 720836983\n    find_lucas(88) == 11772845\n    find_lucas(89) == 463131002\n    find_lucas(90) == 676363711\n    find_lucas(91) == 11392708\n    find_lucas(92) == 518420\n    find_lucas(93) == 993877\n    find_lucas(94) == 7083\n    find_lucas(95) == 94610\n    find_lucas(96) == 155520\n    find_lucas(97) == 47496\n    find_lucas(98) == 60520\n    find_lucas(99) == 132506\n    find_lucas(100) == 62999\n    find_lucas(101) == 77633\n    find_lucas(102) == 122089\n    find_lucas(103) == 64796\n    find_lucas(104) == 52279\n    find_lucas(105) == 122939\n    find_lucas(106) == 114021\n    find_lucas(107) == 89139\n    find_lucas(108) == 12437\n    find_lucas(109) == 1994\n    find_lucas(110) == 3034\n    find_lucas(111) == 28442\n    find_lucas(112) == 85859\n    find_lucas(113) == 74525\n    find_lucas(114) == 71492\n    find_lucas(115) == 5486\n    find_lucas(116) == 43779\n    find_lucas(117) == 94859\n    find_lucas(118) == 39445\n    find_lucas(119) == 8564\n    find_lucas(120) == 26761\n    find_lucas(121) == 7255\n    find_lucas(122) == 17761\n    find_lucas(123) == 82801\n    find_lucas(124) == 1548\n    find_lucas(125) == 7017\n    find_lucas(126) == 59636\n    find_lucas(127) == 65957\n    find_lucas(128) == 1777\n    find_lucas(129) == 2457\n    find_lucas(130) == 3805\n    find_lucas(131) == 3567\n    find_lucas(132) == 7208\n    find_lucas(133) == 1051\n    find_lucas(134) == 2682\n    find_lucas(135) == 9519\n    find_lucas(136) == 6204\n    find_lucas(137) == 6378\n    find_lucas(138) == 55426\n    find_lu"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_lucas(0) == 2\nassert     find_lucas(1) == 1\nassert     find_lucas(2) == 3\nassert     find_lucas(3) == 4\nassert     find_lucas(4) == 7\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef find_lucas(n):\n    if n == 0: return 1\n    if n == 1: return 2\n    return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nfind_lucas(0) == 2\nfind_lucas(1) == 3\nfind_lucas(2) == 4\nfind_lucas(3) == 7\nfind_lucas(4) == 11\nfind_lucas(5) == 18\nfind_lucas(6) == 29\nfind_lucas(7) == 47\nfind_lucas(8) == 76\nfind_lucas(9) == 123\nfind_lucas(10) == 197\nfind_lucas(11) == 2969\nfind_lucas(12) == 4181\nfind_lucas(13) == 6765\nfind_lucas(14) == 10946\nfind_lucas(15) == 24159\nfind_lucas(16) == 47018\nfind_lucas(17) == 94983\nfind_lucas(18) == 2028657\nfind_lucas(19) == 46368361\nfind_lucas(20) == 9294970377\nfind_lucas(21) == 18831819660\nfind_lucas(22) == 43349443736\nfind_lucas(23) == 817872316424\nfind_lucas(24) == 182917776126\nfind_lucas(25) == 5314982264000\nfind_lucas(26) == 10233415526976\nfind_lucas(27) == 2612487792772\nfind_lucas(28) == 52822281862865\nfind_lucas(29) == 13664577604220\nfind_lucas(30) == 31781134927422\nfind_lucas(31) == 873437173415094\nfind_lucas(32) == 185903177413364\nfind_lucas(33) == 437804124024548\nfind_lucas(34) == 116020318053356\nfind_lucas(35) == 378079104095365\nfind_lucas(36) == 124863372698847\nfind_lucas(37) == 466097089283379\nfind_lucas(38) == 121039793767212\nfind_lucas(39) == 428539287739029\nfind_lucas(40) == 113811306782257\nfind_lucas(41) == 412848583618659\nfind_lucas(42) == 969258427251672\nfind_lucas(43) == 348599523049355\nfind_lucas(44) == 887017225521234\nfind_lucas(45) == 307413844723891\nfind_lucas(46) == 109893890233947\nfind_lucas(47) == 347921211367953\nfind_lucas(48) == 859188599853474\nfind_lucas(49) == 272813938382236\nfind_lucas(50) == 963252229224077\nfind_lucas(51) == 347898295276617\nfind_lucas(52) == 94622292552758\nfind_lucas(53) == 364772536731465\nfind_lucas(54) == 788703598236205\nfind_lucas(55) == 250358892459053\nfind_lucas(56) == 79252232185866\nfind_lucas(57) == 267650211229072\nfind_lucas(58) == 696134264729252\nfind_lucas(59) == 248879140360393\nfind_lucas(60) == 782640441228165\nfind_lucas(61) == 290108382008645\nfind_lucas(62) == 101072853008472\nfind_lucas(63) == 358049751791871\nfind_lucas(64) == 94514603974945\nfind_lucas(65) == 36106873919801\nfind_lucas(66) == 90866798496659\nfind_lucas(67) == 337788141207262\nfind_lucas(68) == 91776215662352\nfind_lucas(69) == 342457783205858\nfind_lucas(70) == 91927010113962\nfind_lucas(71) == 347143557915863\nfind_lucas(72) == 914269038791434\nfind_lucas(73) == 366558547458264\nfind_lucas(74) == 966607003214851\nfind_lucas(75) == 337722296412512\nfind_lucas(76) == 890358173530787\nfind_lucas(77) == 309772680553513\nfind_lucas(78) == 1033914609211827\nfind_lucas(79) == 357760334792311\nfind_lucas(80) == 982606316058984\nfind_lucas(81) == 337788141207262\nfind_lucas(82) == 890358173530787\nfind_lucas(83) == 309772680553513\nfind_lucas(84) == 1033914609211827\nfind_lucas(85) == 357760334792311\nfind_lucas(86) == 982606316058984\nfind_lucas(87) == 337788141207262\nfind_lucas(88) == 890358173530787\nfind_lucas(89) == 309772680553513\nfind_lucas(90) == 1033914609211827\nfind_lucas(91) == 357760334792311\nfind_lucas(92) == 982606316058984\nfind_lucas(93) == 337788141207262\nfind_lucas(94) == 890358173530787\nfind_lucas(95) == 309772680553513\nfind_lucas(96) == 1033914609211827\nfind_lucas(97) == 357760334792311\nfind_lucas(98) == 982606316058984\nfind_lucas(99) == 337788141207262\nfind_lucas(100) == 890358173530787\nfind_lucas(101) == 309772680553513\nfind_lucas(102) == 1033914609211827\nfind_lucas(103) == 357760334792311\nfind_lucas(104) == 982606316058984\nfind_lucas(105) == 337788141207262\nfind_lucas(106) == 890358173530787\nfind_lucas(107) == 309772680553513\nfind_lucas(108) == 1033914609211827\nfind_lucas(109) == 357760334792311\nfind_lucas(110) == 982606316058984\nfind_lucas(111) == 337788141207262\nfind_lucas(112) == 890358173530787\nfind_lucas(113) == 309772680553513\nfind_lucas(114) == 1033914609211827\nfind_lucas(115) == 357760334792311\nfind_lucas(116) == 982606316058984\nfind_lucas(117) == 337788141207262\nfind_lucas(118) == 890358173530787\nfind_lucas(119) == 309772680553513\nfind_lucas(120) == 1033914609211827\nfind_lucas(121) == 357760334792311\nfind_lucas(122) == 982606316058984\nfind_lucas(12"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_lucas(0) == 2\nassert     find_lucas(1) == 1\nassert     find_lucas(2) == 3\nassert     find_lucas(3) == 4\nassert     find_lucas(4) == 7\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    find_lucas(2) == 3\n    find_lucas(10) == 11\n    find_lucas(100) == lucas(102)\n    find_lucas(1000) == lucas(1003)\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nadd_string([1, 2, 3, 4], '$%^&*!')\nadd_string([1, 2, 3, 4], '%')\nadd_string([1, 2, 3, 4], '#')\nadd_string([1, 2, 3, 4], '@')\nadd_string([1, 2, 3, 4], '#')\nadd_string([1, 2, 3, 4], '@')\nadd_string([1, 2, 3, 4], '!')\nadd_string([1, 2, 3, 4], '#')\nadd_string([1, 2, 3, 4], '%')\nadd_string([1, 2, 3, 4], '$')\nadd_string([1, 2, 3, 4], '@')\nadd_string([1, 2, 3, 4], '#')\nadd_string([1, 2, 3, 4], '%')\nadd_string([1, 2, 3, 4], '$')\nadd_string([1, 2, 3, 4], '@')\nadd_string([1, 2, 3, 4], '#')\nadd_string([1, 2, 3, 4], '%')\nadd_string([1, 2, 3, 4], '$')\nadd_string([1, 2, 3, 4], '@')\nadd_string([1, 2, 3, 4], '#')\nadd_string([1, 2, 3, 4], '%')\nadd_string([1, 2, 3, 4], '$')\nadd_string([1, 2, 3, 4], '@')\nadd_string([1, 2, 3, 4], '#')\nadd_string([1, 2, 3, 4], '%')\nadd_string([1, 2, 3, 4], '$')\nadd_string([1, 2, 3, 4], '@')\nadd_string([1, 2, 3, 4], '#')\nadd_string([1, 2, 3, 4], '%')\nadd_string([1, 2, 3, 4], '$')\nadd_string([1, 2, 3, 4], '@')\nadd_string([1, 2, 3, 4], '#')\nadd_string([1, 2, 3, 4], '%')\nadd_string([1, 2, 3, 4], '$')\nadd_string([1, 2, 3, 4], '@')\nadd_string([1, 2, 3, 4], '#')\nadd_string([1, 2, 3, 4], '%')\nadd_string([1, 2, 3, 4], '$')\nadd_string([1, 2, 3, 4], '@')\nadd_string([1, 2, 3, 4], '#')\nadd_string([1, 2, 3, 4], '%')\nadd_string([1, 2, 3, 4], '$')\nadd_string([1, 2, 3, 4], '@')\nadd_string([1, 2, 3, 4], '#')\nadd_string([1, 2, 3, 4], '%')\nadd_string([1, 2, 3, 4], '$')\nadd_string([1, 2, 3, 4], '@')\nadd_string([1, 2, 3, 4], '#')\nadd_string([1, 2, 3, 4], '%')\nadd_string([1, 2, 3, 4], '$')\nadd_string([1, 2, 3, 4], '@')\nadd_string([1, 2, 3, 4], '#')\nadd_string([1, 2, 3, 4], '%')\nadd_string([1, 2, 3, 4], '$')\nadd_string([1, 2, 3, 4], '@')\nadd_string([1, 2, 3, 4], '#')\nadd_string([1, 2, 3, 4], '%')\nadd_string([1, 2, 3, 4], '$')\nadd_string([1, 2, 3, 4], '@')\nadd_string([1, 2, 3, 4], '#')\nadd_string([1, 2, 3, 4], '%')\nadd_string([1, 2, 3, 4], '$')\nadd_string([1, 2, 3, 4], '@')\nadd_string([1, 2, 3, 4], '#')\nadd_string([1, 2, 3, 4], '%')\nadd_string([1, 2, 3, 4], '$')\nadd_string([1, 2, 3, 4], '@')\nadd_string([1, 2, 3, 4], '#')\nadd_string([1, 2, 3, 4], '%')\nadd_string([1, 2, 3, 4], '$')\nadd_string([1, 2, 3, 4], '@')\nadd_string([1, 2, 3, 4], '#')\nadd_string([1, 2, 3, 4], '%')\nadd_string([1, 2, 3, 4], '$')\nadd_string([1, 2, 3, 4], '@')\nadd_string([1, 2, 3, 4], '#')\nadd_string([1, 2, 3, 4], '%')\nadd_string([1, 2, 3, 4], '$')\nadd_string([1, 2, 3, 4], '@')\nadd_string([1, 2, 3, 4], '#')\nadd_string([1, 2, 3, 4], '%')\nadd_string([1, 2, 3, 4], '$')\nadd_string([1, 2, 3, 4], '@')\nadd_string([1, 2, 3, 4], '#')\nadd_string([1, 2, 3, 4], '%')\nadd_string([1, 2, 3, 4], '$')\nadd_string([1, 2, 3, 4], '@')\nadd_string([1, 2, 3, 4], '#')\nadd_string([1, 2, 3, 4], '%')\nadd_string([1, 2, 3, 4], '$')\nadd_string([1, 2, 3, 4], '@')\nadd_string([1, 2, 3, 4], '#')\nadd_string([1, 2, 3, 4], '%')\nadd_string([1, 2, 3, 4], '$')\nadd_string([1, 2, 3, 4], '@')\nadd_string([1, 2, 3, 4], '#')\nadd_string([1, 2, 3, 4], '%')\nadd_string([1, 2, 3, 4], '$')\nadd_string([1, 2, 3, 4], '@')\nadd_string([1, 2, 3, 4], '#')\nadd_string([1, 2, 3, 4], '%')\nadd_string([1, 2, 3, 4], '$')\nadd_string([1, 2, 3, 4], '@')\nadd_string([1, 2, 3, 4], '#')\nadd_string([1, 2, 3, 4], '%')\nadd_string([1, 2, 3, 4], '$')\nadd_string([1, 2, 3, 4], '@')\nadd_string([1, 2, 3, 4], '#')\nadd_string([1, 2, 3, 4], '%')\nadd_string([1, 2, 3, 4], '$')\nadd_string([1, 2, 3, 4], '@')\nadd_string([1, 2, 3, 4], '#')\nadd_string([1, 2, 3, 4], '%')\nadd_string([1, 2, 3, 4], '$')\nadd_string([1, 2, 3, 4], '@')\nadd_string([1, 2, 3, 4], '#')\nadd_string([1, 2, 3, 4], '%')\nadd_string([1, 2, 3, 4], '$')\nadd_string([1, 2, 3, 4], '@')\nadd_string([1, 2, 3, 4], '#')\nadd_string([1, 2, 3, 4], '%')\nadd_string([1, 2, 3, 4], '$')\nadd_string([1, 2, 3, 4], '@')\nadd_string([1, 2, 3, 4], '#')\nadd_strin"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add_string([\"{0:5d}\",\"{0:10d}\",\"{0:15d}\",\"{0:20d}\"], [\"0000\", \"01000\", \"1000\", \"01010\"]) ==    [\"0000\", \"01010\", \"1000\", \"01000\"]\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert add_string([], \"\") == \"\"\nassert add_string([1], \"\") == \"1\"\nassert add_string([1, 2], \"\") == \"1 2\"\nassert add_string([1, 2, 3], \"\") == \"1 2 3\"\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n\nassert \n\ndef add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    pass\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef add_string_to_all(lst, string):\n    '''\n    Write a function that takes in a list of non-negative integers and a format string, and returns a new list where\n    each element of the input list is \"formatted\" with the given format string.\n    '''\n    pass\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     add_string([1, 2, 3], \"hey\") == \"heyhey\"\nassert     add_string([1, 2, 3], \"\") == \"\"\nassert     add_string([], \"\") == \"\"\nassert     add_string([1], \"\") == \"\"\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     add_string([1, 2, 3], '{0} + {1} + {2}') == '1 + 2 + 3'\nassert     add_string([1, 2, 3], '{0} + {1} + {2}') == '1 + 2 + 3'\nassert     add_string([1, 2, 3], '{0} + {1} + {2}') == '1 + 2 + 3'\nassert     add_string([1, 2, 3], '{0} + {1} + {2}') == '1 + 2 + 3'\nassert     add_string([1, 2, 3], '{0} + {1} + {2}') == '1 + 2 + 3'\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     add_string([], \"\") == \"\"\nassert     add_string([1,2,3], \"\") == \"123\"\nassert     add_string([1,2,3], \"x\") == \"12x3\"\nassert     add_string([1,2,3], \"x:y:z\") == \"1x:2y:3z\"\nassert     add_string([1,2,3], \"x:y:z:\") == \"1x:2y:3z:\"\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    list1 = [\"a\", \"b\", \"c\"]\n    string = \"3*{0}={1}\"\n    list_ = add_string(list1, string)\n    print(list_"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     convert_list_dictionary(l1=[1,2], l2=[3,4], l3=[5,6]) == {\"1\":{\"2\":3,\"3\":4}, \"5\":{\"6\":5}}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     convert_list_dictionary([[1,2], ['a','b']], [['x','y'], ['z', 'v']], [['k', 'l'], ['m', 'n']]) == \\\n    {'1': {'x': 'a', 'y': 'b'}, '2': {'x': 'z', 'y': 'v'}, '3': {'x': 'k', 'y': 'l'}, '4': {'x':'m', 'y': 'n'}}"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint(\"Success\""
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     convert_list_dictionary([], {}, []) == {}\nassert     convert_list_dictionary([1], {}, [1]) == {}\nassert     convert_list_dictionary([1, 2], {}, [1, 2]) == {}\nassert     convert_list_dictionary([1, 2, 3], {}, [1, 2, 3]) == {}\nassert     convert_list_dictionary([], {'a': 1}, []) == {}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     convert_list_dictionary(\n    [],\n    [],\n    {}\n) == {}\nassert convert_list_dictionary(\n    [],\n    [1, 2],\n    {}\n) == {1:2}\nassert convert_list_dictionary(\n    [],\n    [3, 4, 5],\n    {}\n) == {3:4,5:5}\nassert convert_list_dictionary(\n    [3],\n    [1, 2],\n    {}\n) == {3:1}\nassert convert_list_dictionary(\n    [1, 2],\n    [3, 4, 5],\n    {}\n) == {1:3,2:4,3:5}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     convert_list_dictionary([['a', 'b', 'c'], ['d', 'e', 'f']], ['x', 'y'], ['g', 'h']) == {\n    'x': {'a': 'b', 'd': 'e', 'g': 'h'},\n    'y': {'a': 'b', 'c': 'f', 'g': 'h'}\n}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     convert_list_dictionary([1,2,3,4], [5,6,7,8], ['a','b','c','d']) ==     {1: {'a': 5, 'b': 6, 'c': 7, 'd': 8}, 2: {'a': 5, 'b': 6, 'c': 7, 'd': 8}, 3: {'a': 5, 'b': 6, 'c': 7, 'd': 8}, 4: {'a': 5, 'b': 6, 'c': 7, 'd': 8}}\nassert convert_list_dictionary([1,2,3,4], [5,6,7,8], ['a','b','c','d']) ==     {1: {'a': 5, 'b': 6, 'c': 7, 'd': 8}, 2: {'a': 5, 'b': 6, 'c': 7, 'd': 8}, 3: {'a': 5, 'b': 6, 'c': 7, 'd': 8}, 4: {'a': 5, 'b': 6, 'c': 7, 'd': 8}}\nassert convert_list_dictionary([1,2,3,4], [5,6,7,8], ['a','b','c','d']) ==     {1: {'a': 5, 'b': 6, 'c': 7, 'd': 8}, 2: {'a': 5, 'b': 6, 'c': 7, 'd': 8}, 3: {'a': 5, 'b': 6, 'c': 7, 'd': 8}, 4: {'a': 5, 'b': 6, 'c': 7, 'd': 8}}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     convert_list_dictionary(['w', 'x', 'y', 'z'], ['a', 'b', 'c', 'd'], ['e', 'f', 'g', 'h']) == \\\n    {'w': {'a': 'e', 'b': 'f', 'c': 'g', 'd': 'h'}, 'x': {'a': 'e', 'b': 'f', 'c': 'g', 'd': 'h'}, \\\n    'y': {'a': 'e', 'b': 'f', 'c': 'g', 'd': 'h'}, 'z': {'a': 'e', 'b': 'f', 'c': 'g', 'd': 'h'}}\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     get_max_sum (1)     == 1\nassert     get_max_sum (2)     == 1\nassert     get_max_sum (3)     == 3\nassert     get_max_sum (4)     == 5\nassert     get_max_sum (5)     == 9\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_max_sum(0) == 0\nassert     get_max_sum(1) == 1\nassert     get_max_sum(2) == 3\nassert     get_max_sum(3) == 6\nassert     get_max_sum(4) == 10\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_max_sum(1) == 1\nassert     get_max_sum(2) == 2\nassert     get_max_sum(3) == 3\nassert     get_max_sum(4) == 7\nassert     get_max_sum(5) == 13\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_max_sum (1) == 1, \"pass the test\"\nassert     get_max_sum (2) == 3, \"pass the test\"\nassert     get_max_sum (3) == 6, \"pass the test\"\nassert     get_max_sum (4) == 10, \"pass the test\"\nassert     get_max_sum (5) == 15, \"pass the test\"\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert get_max_sum(6) == 13\nassert get_max_sum(8) == 21\nassert get_max_sum(12) == 34\nassert get_max_sum(25) == 51\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_max_sum(1) == 1\nassert     get_max_sum(2) == 3\nassert     get_max_sum(3) == 7\nassert     get_max_sum(4) == 15\nassert     get_max_sum(5) == 31\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    print(get_max_sum(5))\n    print(get_max_sum(7))\n    print(get_max_sum(13))\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     get_max_sum(3) == 7, \"You are not returning 7\"\nassert get_max_sum(1) == 1, \"You are not returning 1\"\nassert get_max_sum(4) == 8, \"You are not returning 8\"\nassert get_max_sum(5) == 12, \"You are not returning 12\"\nassert get_max_sum(6) == 19, \"You are not returning 19\"\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_max_sum(0) == 0, \"Invalid input\"\nassert get_max_sum(4) == 4, \"Invalid input\"\nassert get_max_sum(7) == 7, \"Invalid input\"\nassert get_max_sum(11) == 16, \"Invalid input\"\nassert get_max_sum(17) == 19, \"Invalid input\"\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     get_max_sum(1) == 1\nassert     get_max_sum(2) == 2\nassert     get_max_sum(3) == 5\nassert     get_max_sum(4) == 13\nassert     get_max_sum(5) == 22\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_length_list(['hello', 'world', '!', 'goodbye']) == ['hello']\nassert     max_length_list(['hello', '', 'world', '!']) == ['world', '!']\nassert     max_length_list(['', 'hello', 'world', '!']) == ['hello', 'world']\nassert     max_length_list([]) == []\nassert     max_length_list(['a', 'b', 'c']) == ['a', 'b', 'c']\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ninput_list = [[1, 2, 3, 4, 5],\n              [],\n              [3, 4, 5, 6, 7]]\nassert max_length_list(input_list) == [3, 4, 5, 6, 7]\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_length_list([1,2,3,4]) == 3, 'Wrong answer'\nassert     max_length_list([1,2,3,4,5]) == 5, 'Wrong answer'\nassert     max_length_list([1,2,3,4,5,6,7]) == 7, 'Wrong answer'\nassert     max_length_list([1,2,3,4,5,6,7,8,9]) == 9, 'Wrong answer'\nassert     max_length_list([1,2,3,4,5,6,7,8,9,10]) == 10, 'Wrong answer'\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_length_list([3,1,5,2,3,4]) == 5, \"error\"\nassert     max_length_list([]) == 0, \"error\"\nassert     max_length_list([5,4,5,7,7]) == 5, \"error\"\nassert     max_length_list([1,2,5,4,3]) == 5, \"error\"\n\ndef add_first_and_last_numbers(input_list):\n    '''\n    Write a function that takes a list and adds first and last numbers in the list.\n    '''\n    pass\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef max_element(a):\n    '''\n    Write a function to find the maximum element in the list.\n    '''\n    pass\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nmax_length_list([1,2,3,4])\nmax_length_list([1,2,3,4,5])\nmax_length_list([1,2,3,4,5,6])\nmax_length_list([1,2,3,4,5,6,7])\nmax_length_list([1,2,3,4,5,6,7,8])\nmax_length_list([1,2,3,4,5,6,7,8,9])\nmax_length_list([1,2,3,4,5,6,7,8,9,10])\nmax_length_list([1,2,3,4,5,6,7,8,9,10,11,12])\nmax_length_list([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_distinct((1,2,3,4,5,6)) == True\nassert     check_distinct((1,2,3,4,5,6,6)) == False\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_distinct((1,1,1,1,1,1,1)) == False, \"tuple contains duplicates\"\nassert     check_distinct((1,2,2,4)) == True, \"tuple does not contain duplicates\"\nassert     check_distinct((1,2,2,4,2,4,4,5,5,2,2,4,4,2)) == False, \"tuple contains duplicates\"\nassert     check_distinct((1,2,3,4,5,6,7,8,9)) == True, \"tuple does not contain duplicates\"\n\ndef check_divisible(test_tup):\n    '''\n    Write a function to check if given tuple contains no elements divisible by 3.\n    '''\n    pass\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_distinct([1,2,3,4,5]) == True\nassert     check_distinct([1,2,3,4,4]) == False\nassert     check_distinct([1,2,3,4,5,5]) == False\nassert     check_distinct([1,2,3,4,5,5,5]) == False\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_distinct([1,1,2,3,4]) == True, \"Should return True\"\nassert     check_distinct([1,1,2,2,4]) == False, \"Should return False\"\nassert     check_distinct([1,2,3,4]) == True, \"Should return True\"\nassert     check_distinct([1,1,2,3,4]) == False, \"Should return False\"\nassert     check_distinct([1,2,3,4,1]) == False, \"Should return False\"\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_distinct((1,1,1)) == True\nassert     check_distinct((1,2,3)) == True\nassert     check_distinct((1,2,1)) == False\nassert     check_distinct((3,3,3)) == True\nassert     check_distinct((3,3,3,3)) == True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_distinct((1,2,3)) == True, \"Wrong output\"\nassert     check_distinct((1,2,2)) == False, \"Wrong output\"\nassert     check_distinct((2,1,1)) == True, \"Wrong output\"\nassert     check_distinct((2,1,2)) == False, \"Wrong output\"\nassert     check_distinct((2,2,1)) == True, \"Wrong output\"\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_distinct([1,2,3,4,5]) == False\nassert     check_distinct([1,2,3,4,5,6,7]) == True"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_distinct((1,2,3,4)) == False, \"Wrong output\"\nassert     check_distinct((1,2,3,4,5)) == True, \"Wrong output\"\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_distinct((1,2,3)) == True, \"The given tuple contains duplicate numbers\"\nassert     check_distinct((1,2,1)) == False, \"The given tuple contains duplicate numbers\"\nassert     check_distinct((1,2,5,1)) == True, \"The given tuple contains duplicate numbers\"\nassert     check_distinct((1,2,5,6,5)) == False, \"The given tuple contains duplicate numbers\"\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     first_non_repeating_character('abcd') ==     'a'\nassert first_non_repeating_character('abcda') ==     'a'\nassert first_non_repeating_character('abcd') ==     None\nassert first_non_repeating_character('abcde') ==     None\nassert first_non_repeating_character('abcdef') ==     'a'\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     first_non_repeating_character('ghjkl') == 'i', 'your first_non_repeating_character is wrong'\nassert     first_non_repeating_character('sdfghjkl') == 'e', 'your first_non_repeating_character is wrong'\nassert     first_non_repeating_character('sat') == 'a', 'your first_non_repeating_character is wrong'\nassert     first_non_repeating_character('') == '', 'your first_non_repeating_character is wrong'\nassert     first_non_repeating_character('asdfghjklzxcvbnm') == 'z', 'your first_non_repeating_character is wrong'\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert first_non_repeating_character(\"abracadabra\") == 'b'\nassert first_non_repeating_character(\"\") == ''\nassert first_non_repeating_character(\"abcdabcd\") == 'd'\n\n'''\n    Write a python function to find the first non-repeated character in a given string.\n    \n    Input Format:\n    String S\n    \n    Output Format:\n    First non-repeated character\n    \n    Example:\n    Input:\n    abracadabra\n    \n    Output:\n    b\n'''\ndef first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     first_non_repeating_character(\"google\") == \"e\"\nassert first_non_repeating_character(\"abcdafeg\") == \"g\"\nassert first_non_repeating_character(\"google\") == \"e\"\n\n'''\nPrint all the non repeating characters in a given string.\n'''"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef check_if_word_in_sentence(sentence, word):\n    '''\n    Write a python function to check whether a word is in a given sentence\n    or not.\n    '''\n    pass\n\nassert check_if_word_in_sentence(\"the quick brown fox jumps over the lazy dog\", \"fox\")\nassert not check_if_word_in_sentence(\"the quick brown fox jumps over the lazy dog\", \"dog\")\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1.count(str1[i]) == 1:\n            return str1[i]\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     first_non_repeating_character('') == None\nassert     first_non_repeating_character('abac') == 'b'\nassert     first_non_repeating_character('aaaa') == 'a'\n\ndef sum_two_numbers(num1, num2):\n    '''\n    Write a python function to compute the sum of two given numbers.\n    '''\n    pass\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     first_non_repeating_character('apples') == 'e'\nassert     first_non_repeating_character('hi') == 'h'\nassert     first_non_repeating_character('a') == 'a'\nassert     first_non_repeating_character('') == 'a'\nassert     first_non_repeating_character('abceffgh') == 'f'\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_char('aba') == False,'should return False if string contains character other than a'\nassert     check_char('ab') == True,'should return True if string contains character a'\nassert     check_char('abaab') == False,'should return False if string contains character other than a'\nassert     check_char('a') == True,'should return True if string contains character a'\n\n\ndef check_float(number):\n    '''\n    Write a function to check whether the given number is a floating point number or not.\n    '''\n    pass\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_char('a') == True, \"1st test failed\"\nassert     check_char('ab') == True, \"2nd test failed\"\nassert     check_char('abc') == False, \"3rd test failed\"\nassert     check_char('abcabc') == False, \"4th test failed\"\nassert     check_char('abcabcabc') == True, \"5th test failed\"\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_char(\"a\") == True\nassert     check_char(\"abc\") == True\nassert     check_char(\"ab\") == False\nassert     check_char(\"ababab\") == False\nassert     check_char(\"abababab\") == True\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef check_sum(string): \n    '''\n    Write a program to print all substrings of the given string which are composed of same number of consecutive characters.\n    '''\n    pass\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_char('a') == True\nassert    check_char('ab') == False\nassert    check_char('1') == False\nassert    check_char('a1') == False\nassert    check_char('a1b') == False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_char('abc') == True\nassert     check_char('abcda') == True\nassert     check_char('abcdef') == False\nassert     check_char('abcde') == False\nassert     check_char('abc') == False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef check_palindrome(string): \n    '''\n    Write a function that checks whether the given string is a palindrome or not.\n    '''\n    pass\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_char('') == True\nassert     check_char('a') == True\nassert     check_char('ab') == True\nassert     check_char('aba') == False\nassert     check_char('bc') == False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_char('abcdefg') == True\nassert     check_char('abcdef') == False\nassert     check_char('abcdefgabcdef') == False\nassert     check_char('abcdefghijklmnopqrstuvwxyz') == True\nassert     check_char('pytho') == False\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     median_numbers(1,2,3)    == 2.5\nassert     median_numbers(2,3,1)    == 2.5\nassert     median_numbers(3,1,2)    == 2.5\nassert     median_numbers(2,2,2)    == 2\nassert     median_numbers(2,3,1)    == 2\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     median_numbers(5, 7, 8) == 6.5, \"Wrong median_numbers\"\nprint(\"median_numbers : Correct\")\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert median_numbers(2,2,2) == 2\nassert median_numbers(1,2,3) == 2\nassert median_numbers(1,1,2) == 1.5\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     median_numbers([-1,-1,3,1,4,8,10,20],[5,8,4,2,10,9,1,6],[7,9,6,11,8,5,4,2,10]) == 5\nassert     median_numbers([2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9],[10,9,8,7,6,5,4,3,2]) == 6\nassert     median_numbers([3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9],[10,9,8,7,6,5,4,3,2]) == 7\nassert     median_numbers([7,8,9,10,11,12,13,14,15],[1,2,3,4,5,6,7,8,9],[10,9,8,7,6,5,4,3,2]) == 9\nassert     median_numbers([4,5,6,7,8,9,10,11,12],[1,2,3,4,5,6,7,8,9],[10,9,8,7,6,5,4,3,2]) == 6\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     median_numbers(1,2,3) == 2\nassert     median_numbers(2,1,3) == 2\nassert     median_numbers(1,2,1) == 1\nassert     median_numbers(0,2,3) == 1\nassert     median_numbers(2,0,3) == 1\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    pass\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     median_numbers(2,4,6) == 3\nassert     median_numbers(2,4,6) == 3\nassert     median_numbers(2,4,6) == 3\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     median_numbers(3, 4, 5) == 2.5\nassert     median_numbers(3, 4, 1) == 2.5\nassert     median_numbers(3, 1, 4) == 2.5\nassert     median_numbers(3, 1, 3) == 2.5\nassert     median_numbers(2, 2, 2) == 2.0\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_of_digits([0, 5, 6, 5, 0, 5, 0]) == 14\nassert     sum_of_digits([0, 0, 0, 0]) == 0\nassert     sum_of_digits([1, 1, 1, 1]) == 11\n\n\ndef is_power_of_2(n):\n    '''\n    Write a function to determine if a given number is a power of two.\n    '''\n    pass\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_of_digits([0, 10, 0, 0, 0]) == 0, 'For list of 0, expected 0'\nassert     sum_of_digits([1, 0, 0, 0, 0]) == 3, 'For list of 1, expected 3'\nassert     sum_of_digits([0, 9, 0, 0, 0]) == 9, 'For list of 9, expected 9'\nassert     sum_of_digits([7, 9, 0, 0, 0]) == 9, 'For list of 7, expected 9'\nassert     sum_of_digits([1, 2, 3]) == 6, 'For list of 1, 2, 3, expected 6'\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert sum_of_digits([5, 12, 21, 42, 100, -16]) == 12\nassert sum_of_digits([101, -5]) == 0\nassert sum_of_digits([1,2,3,4,5]) == 8\nassert sum_of_digits([1,2,3,4,5,6]) == 18\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_of_digits([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 30, 'Wrong output'\nassert     sum_of_digits([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 39, 'Wrong output'\nassert     sum_of_digits([10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 111, 'Wrong output'\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nsum_of_digits([10, 2, 3, 4, 5]) == (16)\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_of_digits([1,2,3,4,5]) == 10\nassert     sum_of_digits([1,2,3,4,10]) == 15\nassert     sum_of_digits([100,100,100,100]) == 300\nassert     sum_of_digits([9,2,3,4,5]) == 17\nassert     sum_of_digits([0,0,0,0,0]) == 0\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_of_digits([4,5,6,1]) == 7\nassert sum_of_digits([4,5,6]) == 9\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     bitwise_xor((10, 20), (20, 30)) == (-10, 30)\nassert     bitwise_xor((10, 20), (20, 30)) == (0, 30)\nassert     bitwise_xor((0, 0), (0, 0)) == (0, 0)\nassert     bitwise_xor((0, 0), (0, 1)) == (0, 1)\nassert     bitwise_xor((0, 0), (1, 0)) == (1, 0)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     bitwise_xor((1, 1), (0, 1)) == (1, 1)\nassert bitwise_xor((1, 1), (1, 1)) == (0, 1)\nassert bitwise_xor((1, 0), (0, 0)) == (1, 0)\nassert bitwise_xor((0, 0), (0, 1)) == (1, 1)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     bitwise_xor((1,2),(3,4)) ==     (0,4)\nassert     bitwise_xor((1,2),(3,0)) ==     (3,0)\nassert     bitwise_xor((0,1),(1,1)) ==     (0,1)\nassert     bitwise_xor((1,0),(0,1)) ==     (0,0)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     bitwise_xor((1,2,3),(1,2,3)) == 0, 'error 1'\nassert     bitwise_xor((1,1,1),(1,1,1)) == 0, 'error 2'\nassert     bitwise_xor((1,1,1),(1,1,1)) == 1, 'error 3'\nassert     bitwise_xor((1,0,0),(0,1,1)) == 1, 'error 4'\nassert     bitwise_xor((0,1,1),(1,1,1)) == 1, 'error 5'\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     bitwise_xor((1, 2), (2, 3)) == (1, 2)\nassert     bitwise_xor((2, 4), (4, 8)) == (4, 8)\nassert     bitwise_xor((1, 2), (3, 4)) == (1, 2)\nassert     bitwise_xor((0, 0), (0, 0)) == (0, 0)\n\ndef bitwise_or(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise or operation across the given tuples.\n    '''\n    pass\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     bitwise_xor((1, 2, 3), (1, 2, 4)) == (1, 0, 3)\nassert     bitwise_xor((1, 1, 3), (1, 1, 3)) == (1, 0, 1)\nassert     bitwise_xor((1, 2, 3), (2, 2, 4)) == (1, 1, 0)\nassert     bitwise_xor((3, 3, 3), (3, 3, 3)) == (0, 0, 0)\nassert     bitwise_xor((0, 0, 0), (0, 0, 0)) == (0, 0, 0)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     bitwise_xor((4, 8), (7, 4)) == (4, 0), \"Wrong!\"\nassert     bitwise_xor((3, 4), (6, 2)) == (7, 4), \"Wrong!\"\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     bitwise_xor((10, 20), (30, 40)) == (10, 40)\nassert     bitwise_xor((10, 20), (10, 20)) == (0, 0)\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_freq([]) == 0\nassert extract_freq([1, 2, 3]) == 1\nassert extract_freq([1, 2, 3, 3, 3, 3]) == 5\nassert extract_freq([1, 2, 3, 3, 3, 3, 3]) == 5\nassert extract_freq([1, 2, 3, 1, 2, 1, 2]) == 3\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_freq([('a', 'b'), ('a', 'c'), ('b', 'c')]) == {('a', 'b'), ('a', 'c'), ('b', 'c')}\nassert     extract_freq([('a', 'b'), ('a', 'c')]) == {('a', 'b'), ('a', 'c')}\nassert     extract_freq([('a', 'b'), ('a', 'c')]) == {('a', 'b'), ('a', 'c')}\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == '__main__':\n    print('TESTS FOR extract_freq:')\n    print('----------')\n\n    assert extract_freq([[]]) == 0\n    assert extract_freq([[1,2,3,4,5]]) == 5\n    "
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert         extract_freq([]) == 0\nassert         extract_freq([(1, 2), (2, 3), (3, 4)]) == 3\nassert         extract_freq([(1, 2), (2, 3), (3, 4), (1, 5), (2, 6)]) == 4\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_freq([1, 2, 1, 2, 3, 1, 2, 1]) == 5\nassert     extract_freq([1, 2, 1, 2, 3, 1, 2, 1, 4, 5]) == 3\nassert     extract_freq([1, 2, 1, 2, 3]) == 1\n\n\n'''\n*** Q4: Implement the function\n'''\ndef extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # create an empty list\n    unique_list = []\n    # iterate over the given list\n    for i in range(len(test_list)):\n        # if the value is not already in the unique list\n        if test_list[i] not in unique_list:\n            # append the value in the list\n            unique_list.append(test_list[i])\n    # return the length of the list\n    return len(unique_list)\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_freq([\"a\", \"b\", \"c\", \"a\", \"b\", \"c\"]) == 2\nassert     extract_freq([\"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\"]) == 3\nassert     extract_freq([\"a\", \"a\", \"a\", \"b\", \"b\", \"b\", \"c\", \"c\"]) == 4\nassert     extract_freq([]) == 0\nassert     extract_freq([\"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\", \"c\"]) == 9\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_freq([1,2,3])==1, \"extract_freq(1,2,3)\"\nassert    extract_freq([])==0, \"extract_freq([])\"\nassert    extract_freq([1,1,1,1,2,3,4])==2, \"extract_freq([1,1,1,1,2,3,4])\"\nassert    extract_freq([1,1,1,2,2,2,2])==3, \"extract_freq([1,1,1,2,2,2,2])\"\nassert    extract_freq([1,1,1,2,2,2,3,3])==3, \"extract_freq([1,1,1,2,2,2,3,3])\"\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_freq(test_list) == 2\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_freq([(1,2,3),(1,2),(1,2,3,4,5),(1,2,3,4,5),(1,2,3,4,5),(1,2,3,4,5)]) == 6\nassert     extract_freq([(1,2,3),(1,2),(1,2,3,4,5),(1,2,3,4,5),(1,2,3,4,5),(1,2,3,4,5)]) == 5\nassert     extract_freq([(1,2),(1,2,3,4,5),(1,2,3,4,5),(1,2,3,4,5),(1,2,3,4,5),(1,2,3,4,5)]) == 5\nassert     extract_freq([(1,2,3),(1,2),(1,2,3,4,5),(1,2,3,4,5),(1,2,3,4,5),(1,2,3,4,5)]) == 4\nassert     extract_freq([(1,2,3),(1,2),(1,2,3,4,5),(1,2,3,4,5),(1,2,3,4,5),(1,2,3,4,5)]) == 3\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add_nested_tuples((1,2,3),(1,2,3)) == (2,4,6)\nassert     add_nested_tuples((1,2,3),(1,2,4)) == (2,4,6)\nassert     add_nested_tuples((1,2,3),(1,)) == (2,3,3)\nassert     add_nested_tuples((1,),(1,2,3)) == (2,3,3)\nassert     add_nested_tuples((1,),(1,2)) == (2,2,2)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add_nested_tuples( (1,2,3,4), (1,2,3,4) ) == (1,2,3,4,5,6,7,8,9)\nassert     add_nested_tuples( (1,2,3), (1,2,3,4) ) == (1,2,3,4)\nassert     add_nested_tuples( (1,2), (1,2,3,4) ) == (1,2,3,4)\nassert     add_nested_tuples( (1,2), (1) ) == (1,2,1)\nassert     add_nested_tuples( (), (1,2,3,4) ) == (1,2,3,4)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add_nested_tuples((1, 2, 3), (4, 5, 6)) == (1, 2, 3, 4, 5, 6)\nassert     add_nested_tuples(((1, 2, 3), (4, 5, 6)), ((1, 2, 3), (4, 5, 6))) == ((1, 2, 3), (4, 5, 6), (1, 2, 3), (4, 5, 6))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     add_nested_tuples((1,2,3),(4,5,6)) == (1,2,3,4,5,6), 'add_nested_tuples is wrong!'\nassert     add_nested_tuples((1,2),(3,4)) == (1,2,3,4), 'add_nested_tuples is wrong!'\nassert     add_nested_tuples((1,2,3),(4,5,6,7)) == (1,2,3,4,5,6,7), 'add_nested_tuples is wrong!'\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     add_nested_tuples((1, 2, (2, 4), (8, 6)), (1, 2, (3, 5), (7, 9))) == (1, 2, (2, 4), (8, 6))\nassert     add_nested_tuples((1, 2, (2, 4), (8, 6)), (1, 2, (3, 5), (7, 9))) == (1, 2, (2, 4), (8, 6))\nassert     add_nested_tuples((1, 2, (2, 4), (8, 6)), (1, 2, (3, 5), (7, 9))) == (1, 2, (2, 4), (8, 6))\nassert     add_nested_tuples((1, 2, (2, 4), (8, 6)), (1, 2, (3, 5), (7, 9))) == (1, 2, (2, 4), (8, 6))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     add_nested_tuples((1, 2, 3), (1, 2, 3)) == (1, 2, 4)\nassert     add_nested_tuples((1, 2, 3), (4, 5, 6)) == (5, 6, 7)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     add_nested_tuples((1, 2, (3, 4, 5)), (6, 7, (8, 9, 10))) == (1, 2, (3, 4, 5, 6, 7, (8, 9, 10)))\nassert     add_nested_tuples((1, 2, (3, 4, 5)), (6, 7)) == (1, 2, (3, 4, 5, 6, 7))\nassert     add_nested_tuples((1, 2), (3, 4, 5, 6, 7)) == (1, 2, 3, 4, 5, 6, 7)"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     add_nested_tuples((1,2),(3,4)) == (4,6), \"index wise addtion fails\"\nassert     add_nested_tuples((1,2),(3,)) == (4,None), \"index wise addtion fails\"\nassert     add_nested_tuples((1,2),(3)) == (4,3), \"index wise addtion fails\"\nassert     add_nested_tuples((1,),(3,4)) == (4,4), \"index wise addtion fails\"\nassert     add_nested_tuples((),(3,4)) == (4,None), \"index wise addtion fails\"\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add_nested_tuples(((1,2),(3,4,5)),((1,2),(3,4,5))) == ((1,2),(3,4,5,8,9))\nassert     add_nested_tuples(((1,2),(3,4,5)),((1,2,3),(3,4,5))) == ((1,2),(3,4,5,8,9))\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(\"Pass\" if minimum(12,9) == 9 else \"Fail\")\nprint(\"Pass\" if minimum(9,12) == 9 else \"Fail\")\nprint(\"Pass\" if minimum(9,9) == 9 else \"Fail\")\nprint(\"Pass\" if minimum(-1,-9) == -1 else \"Fail\")\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     minimum(2,3) == 1, 'Should be 1'\nassert     minimum(2,-3) == -3, 'Should be -3'\nassert     minimum(-2,3) == -2, 'Should be -2'\nassert     minimum(2,-3) == -2, 'Should be -2'\nassert     minimum(-2,-3) == -2, 'Should be -2'\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert minimum(2,1) == 1\nassert minimum(-1,2) == -1\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     min(4,8) == 4\nassert     min(-6,-8) == -6\nassert     min(2.5,3.5) == 2.5\nassert     min(4,2) == 2\nassert     min(2,2) == 2\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     minimum(7,8) ==     1\nassert     minimum(1,2) ==     1\nassert     minimum(2,2) ==     1\nassert     minimum(2,3) ==     1\nassert     minimum(1,1) ==     1\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     minimum(10,20) == 10\nassert    minimum(20,10) == 10\nassert    minimum(-20,20) == 20\nassert    minimum(-20,10) == 10\nassert    minimum(10,-20) == 10\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_tuplex((1,2,3,4,5,6),(1,2,3,4,5,6)) == True, 'Tuple 1 does not have element 5'\nassert     check_tuplex((1,2,3,4,5,6),(1,2,4,5,6)) == False, 'Tuple 1 has element 5'\nassert     check_tuplex((1,2,3,4,5,6),(1,2,3,5,6)) == False, 'Tuple 1 does not have element 5'\nassert     check_tuplex((1,2,3,4,5,6),(1,2,3,6)) == True, 'Tuple 1 has element 6'\nassert     check_tuplex((1,2,3,4,5,6),(1,2,6,5)) == False, 'Tuple 1 does not have element 5'\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_tuplex((1,2,3,4), (1,2,3,4)) == True, \\\n        \"Should return True, as a tuple matches the other tuple.\"\nassert check_tuplex((1,2,3,4), (1,2,3)) == False, \\\n        \"Should return False, as a tuple doesn't match the other tuple.\"\nassert check_tuplex((1,2,3), (1,2,3,4)) == True, \\\n        \"Should return True, as a tuple matches the other tuple.\"\nassert check_tuplex((1,2,3), (1,2,3,4)) == False, \\\n        \"Should return False, as a tuple doesn't match the other tuple.\"\n\ndef check_tuplex1(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert check_tuplex([1,2,3,4,5],[1,2]) == True\nassert check_tuplex([1,2,3,4,5],[0,2]) == False\nassert check_tuplex([1,2,3,4,5],[0,2,6]) == False\nassert check_tuplex([1,2,3,4,5],[-6,2]) == False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    # check whether tuple1 contains all the elements in tuplex\n    if len(tuple1) == len(tuplex):\n        for i in range(len(tuple1)):\n            if tuple1[i]!= tuplex[i]:\n                return False\n    else:\n        return False\n    return True\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_tuplex(tuplex,tuple1)\nassert     check_tuplex(tuplex,tuple2) == False\nassert     check_tuplex(tuplex,tuple3) == True\nassert     check_tuplex(tuplex,tuple4) == True\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_tuplex((2, 3), (2, )) == True, 'incorrect'\nassert     check_tuplex((2, 3), (2, 3)) == True, 'incorrect'\nassert     check_tuplex((2, 3), (2, 4)) == False, 'incorrect'\nassert     check_tuplex((1, 2), (1, 2)) == True, 'incorrect'\nassert     check_tuplex((1, 2), (2, 2)) == False, 'incorrect'\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_tuplex((1,2,3),(1,2)) == True\nassert     check_tuplex((1,2,3),(4,2,1)) == False\nassert     check_tuplex((1,2,3),(1,2,4)) == False\nassert     check_tuplex((1,2,3),(1,3,1)) == True\nassert     check_tuplex((1,2,3),(1,2,2)) == True\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_tuplex((1, 2, 4, 5),(2, 4, 5)) == True, 'incorrect'\nassert     check_tuplex((1, 2, 4, 5),(1, 4, 5)) == False, 'incorrect'\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Parity(0) == False\nassert     find_Parity(2) == False\nassert     find_Parity(3) == True\n\ndef find_Parity_SOLUTION(n):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    (solution)\n    '''\n    # if the number is even then return False\n    if n%2 == 0:\n        return False\n    # if the number is odd then return True\n    else:\n        return True\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Parity(0) == 1\nassert     find_Parity(1) == 0\nassert     find_Parity(4) == 0\nassert     find_Parity(3) == 1\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_Parity(6) == False\nassert     find_Parity(-2) == True\nassert     find_Parity(5) == False\n\ndef find_Parity_recursion(x):\n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    pass\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(find_Parity(1)) # True\nprint(find_Parity(3)) # False\nprint(find_Parity(0)) # True\nprint(find_Parity(-1)) # True\nprint(find_Parity(5)) # False\nprint(find_Parity(6)) # True\nprint(find_Parity(8)) # True\nprint(find_Parity(9)) # True\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Parity(3) == 0\nassert     find_Parity(9) == 1\nassert     find_Parity(11) == 0\nassert     find_Parity(9) == 1\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_Parity(12) == False\nassert     find_Parity(9) == True\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Parity(7) == True\nassert     find_Parity(8) == False\n\ndef find_TriangularNumber(n):\n    '''\n    Write a python function to find whether a given number is triangular number or not.\n    '''\n    pass\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_Parity(42) == True\nassert     find_Parity(2) == False\nassert     find_Parity(4) == True\nassert     find_Parity(7) == True\nassert     find_Parity(9) == True\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef rearrange_bigger_2(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     rearrange_bigger(1) == 2\nassert     rearrange_bigger(15) == 21\nassert     rearrange_bigger(63) == 63\nassert     rearrange_bigger(11) == 21\nassert     rearrange_bigger(101) == 1201\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     rearrange_bigger(1235) == 3512\nassert     rearrange_bigger(9012) == 1231\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rearrange_bigger(34) == 65\nassert     rearrange_bigger(21) == 99\nassert     rearrange_bigger(11) == 21\n\n\n\ndef rearrange_next_smaller(n):\n    '''\n    Write a function to rearrange the digits of a given number to form the smallest number with the same digit sum.\n    '''\n    pass\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     rearrange_bigger(255) == '531'\nassert rearrange_bigger(999) == '913'\nassert rearrange_bigger(19) == '91'\nassert rearrange_bigger(1234567890) == '1234567890'\nassert rearrange_bigger(123456789) == '123456789'\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     rearrange_bigger(50) == 5001, \"incorrect\"\nassert     rearrange_bigger(12) == 21, \"incorrect\"\nassert     rearrange_bigger(70) == 710, \"incorrect\"\nassert     rearrange_bigger(200) == 2201, \"incorrect\"\nassert     rearrange_bigger(2938) == 3193, \"incorrect\"\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     rearrange_bigger(1001) == 10111\nassert     rearrange_bigger(200) == 201\nassert     rearrange_bigger(11) == 21\nassert     rearrange_bigger(23) == 32\nassert     rearrange_bigger(112) == 113\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     rearrange_bigger(123) == 321\nassert     rearrange_bigger(133) == 323\nassert     rearrange_bigger(1234) == 4321\nassert     rearrange_bigger(54321) == 9123\nassert     rearrange_bigger(10) == 11\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     k_smallest_pairs([5,1,3,7],[2,4,6,8],3) == [[1,2],[3,4],[7,8]]\nassert k_smallest_pairs([1,1,1,1],[1,1,1,1],3) == [[1,1],[1,1],[1,1]]\n\ndef is_valid_parenthesis(parenthesis):\n    '''\n    Write a function to check if a parenthesis string is valid. A string is valid if we can split it into a valid parenthesis.\n    We may assume that the parentheses are well-formed, so that we only have to worry about single-character openings and closings.\n    '''\n    pass\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) == 0 and len(nums2) == 0:\n        return []\n    if len(nums1) == 0:\n        return nums2[:k]\n    if len(nums2) == 0:\n        return nums1[:k]\n    n1 = len(nums1)\n    n2 = len(nums2)\n    minheap = []\n    i = 0\n    j = 0\n    k = 0\n    while True:\n        if k == k+1:\n            if i == n1 or j == n2:\n                break\n            heapq.heappush(minheap, (nums1[i] + nums2[j], i, j))\n            k += 1\n        if i == n1 or j == n2:\n            break\n        if nums1[i] < nums2[j]:\n            heapq.heappush(minheap, (nums1[i] + nums2[j], i, j))\n            i += 1\n        else:\n            heapq.heappush(minheap, (nums1[i] + nums2[j], i, j))\n            j += 1\n    output = []\n    while minheap:\n        item = heapq.heappop(minheap)\n        output.append([item[0], item[1], item[2]])\n    return output\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     k_smallest_pairs([1, 3, 11], [2, 4, 6], 3) == [[1, 2], [3, 4], [11, 6]]\nassert     k_smallest_pairs([1, 3, 11], [2, 4, 6], 0) == []\nassert     k_smallest_pairs([1, 3, 11], [2, 4, 6], 1) == [[1, 2]]\nassert     k_smallest_pairs([1, 3, 11], [2, 4, 6], 2) == [[1, 2], [3, 4], [11, 6]]\nassert     k_smallest_pairs([1, 3, 11], [2, 4, 6], 3) == [[1, 2], [3, 4], [11, 6]]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     k_smallest_pairs([1,3,5],\n                            [2,5,6],\n                            3) == [[1,2],[2,5],[3,5]]\nassert     k_smallest_pairs([2,4,6,8],\n                            [10,9,8,7],\n                            5) == [[2,10],[4,9],[6,8],[8,7]]\nassert     k_smallest_pairs([1,1,1,1],\n                            [1,1,1,1],\n                            4) == [[1,1],[1,1],[1,1],[1,1]]\n\n'''\n    Time complexity : O(n+m)\n    Space complexity: O(n+m)\n'''\ndef k_smallest_pairs_v2(nums1, nums2, k):\n    # if nums1 and nums2 are of different lengths\n    if len(nums1) > len(nums2):\n        return k_smallest_pairs_v2(nums2, nums1, k)\n    # else if nums1 is of smaller length than nums2\n    # nums1 and nums2 are of equal length\n    if len(nums1) < len(nums2):\n        return k_smallest_pairs_v2(nums1, nums2, k)\n\n    # return k_smallest_pairs_v2(nums1[:len(nums1)//2], nums2[:len(nums2)//2], k)\n    pq = []\n    res = []\n    for i in nums1:\n        for j in nums2:\n            pq.append((i, j))\n            if len(pq) > k:\n                heapq.heappop(pq)\n        while pq and pq[0][1] == i:\n            heapq.heappop(pq)\n        res.append(pq[0])\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nimport heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Time O(m+n) Space O(m+n)\n    # nums1 = [1,4,2]\n    # nums2 = [1,2,3]\n    # return [(1,1), (2,2), (4,3)]\n    m, n = len(nums1), len(nums2)\n    pq = []\n    # O(m)\n    # for idx1, num1 in enumerate(nums1):\n    #     heapq.heappush(pq, (num1, idx1))\n    # return [(nums1[i], nums2[i]) for i in range(k)]\n    # O(m+n)\n    # for idx2, num2 in enumerate(nums2):\n    #     heapq.heappush(pq, (num2, idx2))\n    # return [(nums1[i], nums2[i]) for i in range(k)]\n    # O(m+n)\n    for num2 in nums2:\n        heapq.heappush(pq, (num2, num2))\n    res = []\n    for num1 in nums1:\n        res.append((num1, heapq.heappop(pq)[1]))\n    return res[:k]\n\n\nimport heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Time O(m+n) Space O(m+n)\n    # nums1 = [1,4,2]\n    # nums2 = [1,2,3]\n    # return [(1,1), (2,2), (4,3)]\n    m, n = len(nums1), len(nums2)\n    pq = []\n    # O(m)\n    # for idx1, num1 in enumerate(nums1):\n    #     heapq.heappush(pq, (num1, idx1))\n    # return [(nums1[i], nums2[i]) for i in range(k)]\n    # O(m+n)\n    # for idx2, num2 in enumerate(nums2):\n    #     heapq.heappush(pq, (num2, idx2))\n    # return [(nums1[i], nums2[i]) for i in range(k)]\n    # O(m+n)\n    for idx2, num2 in enumerate(nums2):\n        heapq.heappush(pq, (num2, num2))\n    res = []\n    for num1 in nums1:\n        res.append((num1, heapq.heappop(pq)[1]))\n    return res[:k]\n\n\nimport heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Time O(m+n) Space O(m+n)\n    # nums1 = [1,4,2]\n    # nums2 = [1,2,3]\n    # return [(1,1), (2,2), (4,3)]\n    m, n = len(nums1), len(nums2)\n    pq = []\n    # O(m)\n    # for idx1, num1 in enumerate(nums1):\n    #     heapq.heappush(pq, (num1, idx1))\n    # return [(nums1[i], nums2[i]) for i in range(k)]\n    # O(m+n)\n    # for idx2, num2 in enumerate(nums2):\n    #     heapq.heappush(pq, (num2, idx2))\n    # return [(nums1[i], nums2[i]) for i in range(k)]\n    # O(m+n)\n    for num2 in nums2:\n        heapq.heappush(pq, (num2, num2))\n    res = []\n    for num1 in nums1:\n        res.append((num1, heapq.heappop(pq)[1]))\n    return res[:k]\n\n\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Time O(m+n) Space O(m+n)\n    # nums1 = [1,4,2]\n    # nums2 = [1,2,3]\n    # return [(1,1), (2,2), (4,3)]\n    m, n = len(nums1), len(nums2)\n    pq = []\n    # O(m)\n    # for idx1, num1 in enumerate(nums1):\n    #     heapq.heappush(pq, (num1, idx1))\n    # return [(nums1[i], nums2[i]) for i in range(k)]\n    # O(m+n)\n    # for idx2, num2 in enumerate(nums2):\n    #     heapq.heappush(pq, (num2, idx2))\n    # return [(nums1[i], nums2[i]) for i in range(k)]\n    # O(m+n)\n    for num2 in nums2:\n        heapq.heappush(pq, (num2, num2))\n    res = []\n    for num1 in nums1:\n        res.append((num1, heapq.heappop(pq)[1]))\n    return res[:k]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     k_smallest_pairs([1,1,2,2,3], [1,2,1,3,4,3], 2) == [(1,1),(2,1)]\nassert k_smallest_pairs([1,1,2,2,3,4,3], [1,2,1,3,4,3], 3) == [(1,1),(2,1),(3,3)]\nassert k_smallest_pairs([1], [1], 1) == []\nassert k_smallest_pairs([1], [1], 0) == []\nassert k_smallest_pairs([], [], 1) == []\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     k_smallest_pairs([1, 1, 2], [2, 1], 1) == [0, 1]\nassert     k_smallest_pairs([1, 1], [2, 2], 1) == [0, 0]\nassert     k_smallest_pairs([1], [2, 2], 1) == [0, 0]\nassert     k_smallest_pairs([1, 2], [1, 2], 2) == [0, 0]\nassert     k_smallest_pairs([1, 2, 3, 4, 5, 6, 7, 8], \n                            [4, 5, 6, 7, 8, 9, 10, 11], 5) == [4, 5, 6, 7, 8, 0, 1]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef k_smallest_pairs_v2(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    n = len(nums1)\n    m = len(nums2)\n    # 1. init array for output pairs\n    # 2. use heap to store nums2 in min heap \n    min_heap = []\n    for i in range(m):\n        heapq.heappush(min_heap, (nums2[i], i))\n    # 3. init res\n    res = []\n    # 4. init k\n    for i in range(k):\n        # 5. init cur_sum\n        cur_sum = nums1[i] + heapq.heappop(min_heap)[0]\n        # 6. insert into res and update min_heap\n        heapq.heappush(res, cur_sum)\n        # 7. update min_heap\n        if i < n:\n            heapq.heappush(min_heap, (nums1[i] + heapq.heappop(min_heap)[0], i))\n    return res\n\ndef k_smallest_pairs_v2_1(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    n = len(nums1)\n    m = len(nums2)\n    # 1. init array for output pairs\n    # 2. use heap to store nums2 in min heap \n    min_heap = []\n    for i in range(m):\n        heapq.heappush(min_heap, (nums2[i], i))\n    # 3. init res\n    res = []\n    # 4. init k\n    for i in range(k):\n        # 5. init cur_sum\n        cur_sum = nums1[i] + heapq.heappop(min_heap)[0]\n        # 6. insert into res and update min_heap\n        heapq.heappush(res, cur_sum)\n        # 7. update min_heap\n        if i < n:\n            heapq.heappush(min_heap, (nums1[i] + heapq.heappop(min_heap)[0], i))\n    return res\n\ndef k_smallest_pairs_v2_2(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    n = len(nums1)\n    m = len(nums2)\n    # 1. init array for output pairs\n    # 2. use heap to store nums2 in min heap \n    min_heap = []\n    for i in range(m):\n        heapq.heappush(min_heap, (nums2[i], i))\n    # 3. init res\n    res = []\n    # 4. init k\n    for i in range(k):\n        # 5. init cur_sum\n        cur_sum = nums1[i] + heapq.heappop(min_heap)[0]\n        # 6. insert into res and update min_heap\n        heapq.heappush(res, cur_sum)\n        # 7. update min_heap\n        if i < n:\n            heapq.heappush(min_heap, (nums1[i] + heapq.heappop(min_heap)[0], i))\n    return res"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     k_smallest_pairs([1,7,11], [2,4,6], 3) == [[1,2],[1,4],[1,6]]\nassert     k_smallest_pairs([1,1,2], [2], 2) == [[1,2]]\nassert     k_smallest_pairs([1,2,3], [4], 3) == []\nassert     k_smallest_pairs([0,0,0], [0], 3) == [[0,0]]\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef max_product_tuple(list1):\n    '''\n    Write a function to find the maximum product from the pairs of tuples within a given list.\n    '''\n    pass\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nmin_product_tuple([(1, 3), (2, 5), (4, 5), (4, 7)]) == (2, 4)\nassert \nmin_product_tuple([(3, 1), (5, 8), (5, 9)]) == (5, 5)\nassert \nmin_product_tuple([(3, 3), (4, 4)]) == (3, 4)\n\n\n\n\ndef min_product_dictionary(dict1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     min_product_tuple([(2,4),(3,6),(4,8)]) == 16, 'Incorrect answer'\nassert     min_product_tuple([(5,5),(4,6),(7,8)]) == 8, 'Incorrect answer'\nassert     min_product_tuple([(8,8),(7,8),(6,8)]) == 24, 'Incorrect answer'\nassert     min_product_tuple([(8,8),(7,8),(6,8)]) == 24, 'Incorrect answer'\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     min_product_tuple([]), \"Empty list\"\nassert min_product_tuple([(1,1),(1,2),(1,4)]), \"An empty list\"\nassert min_product_tuple([(1,1),(1,2),(1,4),(1,5),(1,6)]), \"Three numbers\"\nassert min_product_tuple([(1,2),(1,3),(1,4),(1,5),(1,6)]), \"Three numbers\"\nassert min_product_tuple([(1,3),(1,4),(1,5),(1,6)]), \"One number\"\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     min_product_tuple([(1,3),(2,4),(3,5)])==1, \"Wrong answer\"\nassert     min_product_tuple([(1,2),(3,4),(5,6)])==24, \"Wrong answer\"\nassert     min_product_tuple([(1,5),(4,4),(2,1)])==10, \"Wrong answer\"\nassert     min_product_tuple([(1,5),(4,4),(1,1)])==10, \"Wrong answer\"\nassert     min_product_tuple([(1,4),(2,2),(3,1)])==2, \"Wrong answer\"\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n'''\n2nd approach:\n'''\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     min_product_tuple([(2, 3), (3, 4), (4, 5)]) == (4, 3)\nassert     min_product_tuple([(2, 3), (3, 4)]) == (2, 3)\nassert     min_product_tuple([(2, 3), (3, 4), (5, 6), (6, 7)]) == (2, 3)\nassert     min_product_tuple([(2, 3), (3, 4), (5, 6)]) == (2, 3)\nassert     min_product_tuple([(2, 3), (3, 4), (5, 6), (6, 7), (7, 8), (8, 9)]) == (2, 3)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     min_product_tuple([(10,4),(8,3),(15,5),(14,2),(14,1),(11,1)]) == 8, min_product_tuple([(10,4),(8,3),(15,5),(14,2),(14,1),(11,1)])\nassert     min_product_tuple([(10,4),(15,5),(14,2),(14,1),(11,1)]) == 15, min_product_tuple([(10,4),(15,5),(14,2),(14,1),(11,1)])\nassert     min_product_tuple([(10,4),(15,5),(10,3),(14,2),(14,1),(11,1)]) == 15, min_product_tuple([(10,4),(15,5),(10,3),(14,2),(14,1),(11,1)])\nassert     min_product_tuple([(10,4),(15,5),(15,2),(14,2),(14,1),(11,1)]) == 10, min_product_tuple([(10,4),(15,5),(15,2),(14,2),(14,1),(11,1)])\nassert     min_product_tuple([(10,4),(15,5),(10,3),(14,2),(15,2),(11,1)]) == 5, min_product_tuple([(10,4),(15,5),(10,3),(14,2),(15,2),(11,1)])\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     min_val([4, 6, 2, 5, 7, 2]) == 2\nassert     min_val([2, -6, -1, 5, -7, 8, -9]) == -9\nassert     min_val([-2, 2]) == -2\nassert     min_val([]) == None\nassert     min_val([1, 2, 3, 4, 5, -6]) == -6\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     min_val([1, 5, 10, 22, 50]) == 1\nassert     min_val([[10, 2, 1], 3, 9]) == 1\nassert     min_val([[10, 2, 1], 3, 9, -2]) == -2\nassert     min_val([5, 8, -10, 44, 3, -21, 0, 100]) == -21\nassert     min_val([5, 8, -10, 44, 3, -21, 0, 100, 2]) == -21\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     min_val([1,2,3]) == 1, \"min_val([1,2,3]) = 1\"\nassert     min_val([1,2,3,4,5]) == 1, \"min_val([1,2,3,4,5]) = 1\"\nassert     min_val([1,2,3,4]) == 1, \"min_val([1,2,3,4]) = 1\"\nassert     min_val([-2,-1,0,1,2]) == -2, \"min_val([-2,-1,0,1,2]) = -2\"\nassert     min_val([-2,-1,-1,0,1,2]) == -1, \"min_val([-2,-1,-1,0,1,2]) = -1\"\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     min_val(['Hello', 5, -2.5]) == -2.5\nassert     min_val(['Hello', 5, 2.5, -5.5]) == -5.5\nassert     min_val(['Hello', 5, 5, -5.5]) == -5.5\nassert     min_val(['Hello', 'Hi', 5.0, -2.5]) == -2.5\nassert     min_val(['Hello', 'Hi', 5.0, 5]) == 5\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     min_val([1,2,3,4,5,5]) == 1, 'incorrect answer'\nassert     min_val([-1,2,0,4,5,5]) == 0, 'incorrect answer'\nassert     min_val([1,2,3,4,5,1]) == 1, 'incorrect answer'\nassert     min_val([0,-4,3,4,5,2]) == -4, 'incorrect answer'\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nmin_val([1,2,3,4,5,6,7,8,9,10]) == 1\nmin_val([-1,2,-3,4,-5,6,-7,8,-9,10]) == -1\nmin_val([]) == None\nmin_val([1,2,3,4,5,6,7,8,9,10,0]) == 0\nmin_val([-1,2,-3,4,-5,6,-7,8,-9,10,-1]) == -1\nmin_val([True, False, True, False, True, True, False]) == False\nmin_val([True, False, True, False, True, True, False, True]) == False\nmin_val([True, False, True, False, True, True, False, True, True]) == True\nmin_val([1,2,3,4,5,6,7,8,9,10]) == 1\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     snake_to_camel('snake_case_test') =='snakeCaseTest'\nassert     snake_to_camel('my_snake_case_test') =='mySnakeCaseTest'\nassert     snake_to_camel('my_snake_case_test_2') =='mySnakeCaseTest'\nassert     snake_to_camel('my_snake_case_test_3') =='mySnakeCaseTest'\nassert     snake_to_camel('my_snake_case_test_4') =='mySnakeCaseTest'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     snake_to_camel('my_snake_case') == 'MySnakeCase'\nassert     snake_to_camel('my_snake_case_2') == 'MySnakeCase2'\nassert     snake_to_camel('my_snake_case_3') == 'MySnakeCase3'\nassert     snake_to_camel('my_snake_case_4') == 'MySnakeCase4'\n\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    pass\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     snake_to_camel('snake_case') =='snakeCase'\nassert     snake_to_camel('snake-case') =='snakeCase'\nassert     snake_to_camel('snake-case-') =='snakeCase'\nassert     snake_to_camel('snake_case_') =='snakeCase'\nassert     snake_to_camel('snake_case_') =='snakeCase'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     snake_to_camel(\"snake\") == \"snake\"\nassert     snake_to_camel(\"snake_t\") == \"snake\"\nassert     snake_to_camel(\"snake_t_\") == \"snake\"\nassert     snake_to_camel(\"snake_t_k\") == \"snake\"\nassert     snake_to_camel(\"snake_t_k_\") == \"snake\"\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     snake_to_camel('snake_case_string') == 'SnakeCaseString', 'failed'\nassert     snake_to_camel('_snake_case_string') == 'SnakeCaseString', 'failed'\nassert     snake_to_camel('snake_case_with_spaces') == 'SnakeCaseWithSpaces', 'failed'\nassert     snake_to_camel('snake_case_with_hyphens') == 'SnakeCaseWithHyphens', 'failed'\nassert     snake_to_camel('snake_case_with_underscore') == 'SnakeCaseWithUnderscore', 'failed'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     snake_to_camel('snake_case') == 'SnakeCase', 'incorrect'\nassert snake_to_camel('snake_case_') == 'SnakeCase', 'incorrect'\nassert snake_to_camel('snake_case_snake_case') == 'SnakeCaseSnakeCase', 'incorrect'\nassert snake_to_camel('_snake_case') == 'SnakeCase', 'incorrect'\n\n'''\nCamelCase is a special case.\n'''\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    pass\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     snake_to_camel(\"snake_case\") == \"SnakeCase\"\nassert     snake_to_camel(\"snake_case_\") == \"SnakeCase\"\nassert     snake_to_camel(\"snake_case_\") == \"SnakeCase\"\nassert     snake_to_camel(\"snake_case_\") == \"SnakeCase\"\nassert     snake_to_camel(\"snake_case_\") == \"SnakeCase\"\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     snake_to_camel('my_snake_case_variable') =='mySnakeCaseVariable', 'First'\nassert     snake_to_camel('my-snake-case-variable') =='mySnakeCaseVariable', 'Second'\nassert     snake_to_camel('my_snake_case_variable_but_with_underscores') =='mySnakeCaseVariableButWithUnderscores', 'Third'\nassert     snake_to_camel('my_snake_case_variable_but_with_spaces_and_underscores') =='mySnakeCaseVariableButWithSpacesAndUnderscores', 'Fourth'\nassert     snake_to_camel('my_snake_case_variable_and_other_stuff') =='mySnakeCaseVariableAndOtherStuff', 'Fifth'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     snake_to_camel('snake_case') =='snakeCase'\nassert     snake_to_camel('snake_snake') =='snakeSnake'\nassert     snake_to_camel('snake_snake_snake') =='snakeSnakeSnake'\nassert     snake_to_camel('sna_k_snake') =='snaKSnake'\nassert     snake_to_camel('sna_k_snake_snake') =='snaKSnakeSnake'\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\nassert     remove_odd([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\nassert     remove_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254]\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_odd([1,2,3,4,5]) == [1,2,3,5], \"incorrect\"\nassert     remove_odd([1,3,5,7]) == [1,3,5], \"incorrect\"\nassert     remove_odd([1,2,3,4,5,6,7,8,9]) == [1,3,5,7], \"incorrect\""
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_odd([1,2,3,4,5,6,7,8]) == [1,3,5,7]\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_odd([0,1,2,3,4,5,6,7,8]) == [0,1,2,3,4,5,6,7,8]\nassert     remove_odd([0,1,2,3,4,5,6,7,8,9]) == []\nassert     remove_odd(['abc', 'def', 'ghi', 'jkl','mno', 'pqr','stu', 'vwx', 'yz']) == ['abc', 'def', 'ghi', 'jkl','mno', 'pqr','stu', 'vwx', 'yz']\nassert     remove_odd(['jkl','mno', 'pqr','stu', 'vwx', 'yz', 'abc', 'def', 'ghi', 'jkl']) == ['abc', 'def', 'ghi', 'jkl','mno', 'pqr','stu', 'vwx', 'yz']\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_odd([3, 4, 5, 6, 7, 8]) == [3, 5, 6, 8]\nassert     remove_odd([3, 5, 6, 8, 10]) == []\nassert     remove_odd([]) == []\n\ndef get_last_names(names):\n    '''\n    Write a python function to extract the last name from a given list of name.\n    '''\n    pass\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31]\nassert     remove_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,0,1]) == [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31]\nassert     remove_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,0,1]) == [1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31]\nassert     remove_odd([]) == []\nassert     remove_odd([\"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\"]) == [\"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\"]\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nremove_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,92"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nremove_odd([1,2,3,4,5,6,7,8,9,10]) == \n[1,3,5,7,9,10]\nassert remove_odd([1,2,3,4,5,6,7,8,9]) == \n[1,3,5,7,9]\nassert remove_odd([1,2,3,4,5,6,7,8,9,10,11]) == \n[1,3,5,7,9,11]\nassert remove_odd([1,2,3,4,5,6,7,8,9,10,11,12]) == \n[1,3,5,7,9,10,12]\nassert remove_odd([1,2,3,4,5,6,7,8,9,10,11,12,13]) == \n[1,3,5,7,9,10,11,12]\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_odd([1,2,3,4,5]) == [1,3,5]\nassert     remove_odd([1,2,3,4,5,6]) == [1,3,5,6]\nassert     remove_odd([1,2,3,4,5,6,7]) == [1,3,5,6,7]\nassert     remove_odd([1,2,3,4,5,6,7,8]) == [1,3,5,6,7,8]\nassert     remove_odd([1,2,3,4,5,6,7,8,9]) == [1,3,5,6,7,8,9]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_nth_element([(1,2,3), (4,5,6), (7,8,9)], 2) == (1,2)\nassert     extract_nth_element([(1,2,3), (4,5,6), (7,8,9)], 4) == (4,5)\nassert     extract_nth_element([(1,2,3), (4,5,6), (7,8,9)], 8) == (7,8)\nassert     extract_nth_element([(1,2,3), (4,5,6), (7,8,9)], 5) == (4,5)\nassert     extract_nth_element([(1,2,3), (4,5,6), (7,8,9)], 6) == (7,8)\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_nth_element([(1,2),(2,3),(3,4),(4,5),(5,6)], 1) == (2,3)\nassert     extract_nth_element([(1,2),(2,3),(3,4),(4,5),(5,6)], 2) == (3,4)\nassert     extract_nth_element([(1,2),(2,3),(3,4),(4,5),(5,6)], 3) == (4,5)\nassert     extract_nth_element([(1,2),(2,3),(3,4),(4,5),(5,6)], 4) == (5,6)\nassert     extract_nth_element([(1,2),(2,3),(3,4),(4,5),(5,6)], 0) == (1,2)\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_nth_element([\"a\", \"b\", \"c\", \"d\"], 1) == \"c\"\nassert     extract_nth_element([\"a\", \"b\", \"c\", \"d\"], 2) == \"d\"\nassert     extract_nth_element([\"a\", \"b\", \"c\", \"d\"], 3) == \"d\"\nassert     extract_nth_element([\"a\", \"b\", \"c\", \"d\"], 4) == \"d\"\nassert     extract_nth_element([\"a\", \"b\", \"c\", \"d\"], 5) == \"d\"\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_nth_element([('a', 1), ('b', 2), ('c', 3)], 1) == ('b', 2)\nassert     extract_nth_element([('a', 1), ('b', 2), ('c', 3)], 2) == ('c', 3)\nassert     extract_nth_element([('a', 1), ('b', 2), ('c', 3)], 3) == ('a', 1)\nassert     extract_nth_element([('a', 1), ('b', 2), ('c', 3)], 4) == ('a', 1)\nassert     extract_nth_element([('a', 1), ('b', 2), ('c', 3)], 5) == ('a', 1)\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nextract_nth_element([(10, 20), (40, 50), (60, 70)], 1) == (10, 20)\nassert \nextract_nth_element([(10, 20), (40, 50), (60, 70)], 2) == (40, 50)\nassert \nextract_nth_element([(10, 20), (40, 50), (60, 70)], 0) == (10, 20)\nassert \nextract_nth_element([], 1) == None\nassert \nextract_nth_element([], 2) == None\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert extract_nth_element([(10, 20), (30, 40, 50), (60, 70, 80)], 3) == 60\nassert extract_nth_element([(10, 20), (30, 40, 50), (60, 70, 80)], 2) == (30, 40)\nassert extract_nth_element([(10, 20), (30, 40, 50), (60, 70, 80)], 1) == (40, 50)\nassert extract_nth_element([(10, 20), (30, 40, 50), (60, 70, 80)], 0) == (10, 20)\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_nth_element([('a', 'b'), ('c', 'd')], 1) == ('c', 'd')\nassert     extract_nth_element([('a', 'b'), ('c', 'd')], 2) == ('a', 'b')\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nextract_nth_element([(1,2,3), (4,5,6), (7,8,9)], 1) == (1,2,3)\n\nassert \nextract_nth_element([(1,2,3), (4,5,6), (7,8,9)], 2) == (4,5,6)\n\nassert \nextract_nth_element([(1,2,3), (4,5,6), (7,8,9)], 3) == (7,8,9)\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_nth_element([], 1) == None\nassert     extract_nth_element([], 0) == None\nassert     extract_nth_element([(1, 2), (3, 4)], 1) == None\nassert     extract_nth_element([(1, 2), (3, 4)], 0) == None\nassert     extract_nth_element([(1, 2), (3, 4)], 2) == (1, 2)\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\noverlapping([1,2,3,4,5],[4,5,6,7,8]) == True\noverlapping([1,2,3,4,5],[4,5,6,7,8,8]) == False\noverlapping([1,2,3,4,5,6],[4,5,6,7,8,8]) == True\noverlapping([1,2,3,4,5,6],[4,5,6,7,8,9]) == False\noverlapping([1,2,3,4,5,6,7],[4,5,6,7,8,9]) == True\noverlapping([1,2,3,4,5,6,7,8],[4,5,6,7,8,9,10]) == True\noverlapping([1,2,3,4,5,6,7,8,9],[4,5,6,7,8,9,10]) == True\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     overlapping([1,2,3,4,5],[4,6,3,3,7]) == False, \"Should be False\"\nassert     overlapping([1,2,3,4,5],[4,6,3,3,7,1,2,3]) == True, \"Should be True\"\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    pass\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\noverlapping([1,2,3,4,5],[1,2,5])\noverlapping([1,2,3,4,5],[1,3,5])\noverlapping([1,2,3,4,5],[1,5])\noverlapping([1,2,3,4,5],[1])\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     overlapping([5,4,3,2,1], [1,2,3,4,5]) == True\nassert     overlapping([5,4,3,2,1], [5,4,3,2,1]) == False\nassert     overlapping([5,4,3,2,1], [5,4,3,2,2]) == False\nassert     overlapping([5,4,3,2,1], [5,4,3,3,2]) == True\nassert     overlapping([5,4,3,2,1], [5,4,3,2,1,3,2]) == True\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     overlapping([5,6],[7,8])==True, 'overlapping should return True'\nassert     overlapping([7,8],[5,6])==False, 'overlapping should return False'\nassert     overlapping([5,6],[5,6])==True, 'overlapping should return True'\nassert     overlapping([],[5,6])==False, 'overlapping should return False'\nassert     overlapping([5,6,7,8],[7,8,5,6])==True, 'overlapping should return True'\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \noverlapping([1,2,3,4,5,6],[1,2,3,4]) == True, \"overlapping(x,y) should return True if x is the \\\nsecond value in y\"\nassert \noverlapping([1,2,3,4,5,6],[1,2,3,4,7]) == False, \"overlapping(x,y) should return True if x is the \\\nsecond value in y\"\nassert \noverlapping([1,2,3,4,5,6],[]) == False, \"overlapping(x,y) should return True if x is the \\\nsecond value in y\"\nassert \noverlapping([],[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"]) == True, \"overlapping(x,y) should return True if x is the \\\nsecond value in y\"\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \noverlapping([1,2,3],[1,2])==True\nassert \noverlapping([1,2,3],[2])==True\nassert \noverlapping([1,2,3],[1,2])==True\nassert \noverlapping([1,2,3],[2,3])==False\n\n\ndef count_negative_numbers(list_of_numbers):\n    '''\n    Write a python function to count the number of negative numbers in a list.\n    '''\n    pass\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_Product([1,2,3,4,5]) == (1,2)\nassert     max_Product([1,3,5,7,9]) == (3,9)\nassert     max_Product([8,5,4,8,4,2,1]) == (8,4)\nassert     max_Product([7,8,9,5,6,5,6]) == (8,9)\nassert     max_Product([4,3,1,6,6,4,3]) == (4,6)\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_Product([7,3,5,1,2,6]) == 7\nassert     max_Product([6,3,5,1,2,4]) == 6\n\n'''\nWrite a python function to find the minimum element from a given array of integers.\n'''\ndef min_element(arr):\n    '''\n    Write a python function to find the minimum element from a given array of integers.\n    '''\n    pass\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_Product([5,6,8,2,5]) ==    [5,8]\nassert     max_Product([5,6,8,2]) ==    [5,8]\nassert     max_Product([]) ==    []\nassert     max_Product([5]) ==    [5]\nassert     max_Product([5,5]) ==    [5]\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_Product([2,1,5,6,8]) == 2 * 3\nassert     max_Product([2,1,5,6,8,9]) == 2 * 9\nassert     max_Product([3,2,1,3,4,5,7,9]) == 3 * 5\nassert     max_Product([2,2,2,2,2,2,2,2,2,2]) == 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\nassert     max_Product([1,2,3,4,5,6]) == 2 * 6\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert \nassert \nassert max_Product([1,2,3,4]) == 4\nassert max_Product([1,2,3,4]) == 24\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\narr =[3,4,5,6,7,8,9]\nassert max_Product(arr) == "
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\narr =[1,2,3,4,5] \nprint(max_Product(arr)) \n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_Product([1,2,3,4,5,6]) == 6 \nassert     max_Product([1,2,3,4,5,6,7]) == 14\nassert     max_Product([1,2,3,4,5,6,7,8]) == 56\nassert     max_Product([1,2,3,4,5,6,7,8,9]) == 60\nassert     max_Product([1,2,3,4,5,6,7,8,9,10]) == 720\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_Product([1, 2, 3]) == 6, 'incorrect'\nassert     max_Product([1, -2, 3]) == 6, 'incorrect'\nassert     max_Product([1, -2, -3]) == 6, 'incorrect'\nassert     max_Product([1, 2, -3]) == 6, 'incorrect'\nassert     max_Product([1, 2, 3]) == 6, 'incorrect'\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(\"===== group_tuples: Correctness =====\")\nprint(group_tuples([(1,), (2,), (3,), (4,)]) == (1,))\nprint(group_tuples([(1,), (2,), (3,), (4,)]) == (1, 2, 3, 4))\nprint(group_tuples([(1,), (1,), (1,), (1,), (1,)]) == (1))\nprint(group_tuples([(1,), (2,), (3,), (4,), (5,)]) == (1, 2, 3, 4, 5))\nprint(group_tuples([(1,), (2,), (3,), (4,), (5,)]) == (1, 2, 3, 4, 5))\nprint(group_tuples([(1,), (2,), (3,), (4,)]) == (1, 2, 3, 4))\nprint(group_tuples([(1,), (2,), (3,), (4,)]) == (1, 2, 3, 4))\nprint(group_tuples([(1,), (2,), (3,)]) == (1, 2, 3))\nprint(group_tuples([(1,), (2,)]) == (1, 2))\nprint(group_tuples([(1,), (2,), (2,), (3,)]) == (1, 2, 3))\nprint(group_tuples([(1,), (2,), (3,), (4,), (5,)]) == (1, 2, 3, 4, 5))\nprint(group_tuples([(1,), (2,), (3,), (4,)]) == (1, 2, 3, 4))\nprint(group_tuples([(1,), (2,), (3,), (4,)]) == (1, 2, 3, 4))\nprint(group_tuples([(1,), (2,), (3,), (4,), (5,)]) == (1, 2, 3, 4, 5))\nprint(group_tuples([(1,), (2,), (3,), (4,)]) == (1, 2, 3, 4))\nprint(group_tuples([(1,), (2,), (3,), (4,)]) == (1, 2, 3, 4))\nprint(group_tuples([(1,), (2,), (3,), (4,)]) == (1, 2, 3, 4))\nprint(group_tuples([(1,), (2,), (3,), (4,), (5,)]) == (1, 2, 3, 4, 5))\nprint(group_tuples([(1,), (2,), (3,), (4,), (5,)]) == (1, 2, 3, 4, 5))\nprint(group_tuples([(1,), (2,), (3,), (4,), (5,)]) == (1, 2, 3, 4, 5))\nprint(group_tuples([(1,), (2,), (3,), (4,), (5,)]) == (1, 2, 3, 4, 5))\nprint(group_tuples([(1,), (2,), (3,), (4,), (5,)]) == (1, 2, 3, 4, 5))\nprint(group_tuples([(1,), (2,), (3,), (4,), (5,), (6,)]) == (1, 2, 3, 4, 5, 6))\nprint(group_tuples([(1,), (2,), (3,), (4,), (5,), (6,)]) == (1, 2, 3, 4, 5, 6))\nprint(group_tuples([(1,), (2,), (3,), (4,), (5,), (6,), (7,)]) == (1, 2, 3, 4, 5, 6, 7))\nprint(group_tuples([(1,), (2,), (3,), (4,), (5,), (6,), (7,)]) == (1, 2, 3, 4, 5, 6, 7))\nprint(group_tuples([(1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,)]) == (1, 2, 3, 4, 5, 6, 7, 8))\nprint(group_tuples([(1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,)]) == (1, 2, 3, 4, 5, 6, 7, 8))\nprint(group_tuples([(1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,)]) == (1, 2, 3, 4, 5, 6, 7, 8, 9))\nprint(group_tuples([(1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,)]) == (1, 2, 3, 4, 5, 6, 7, 8, 9))\nprint(group_tuples([(1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,), (10,)]) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\nprint(group_tuples([(1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,), (10,)]) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\nprint(group_tuples([(1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,), (10,), (11,)]) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))\nprint(group_tuples([(1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,), (10,), (11,)]) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))\nprint(group_tuples([(1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,), (10,), (11,), (12,)]) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))\nprint(group_tuples([(1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,), (10,), (11,), (12,)]) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))\nprint(group_tuples([(1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,), (10,), (11,), (12,), (13,)]) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))\nprint(group_tuples([(1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,), (10,), (11,), (12,), (13,)]) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))\nprint(group_tuples([(1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9,), (10,), (11,), (12,), (13,), (14,)]) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))\nprint(group_tuples([(1,), (2,), (3,), (4,), (5,), (6,), (7,), (8,), (9"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     group_tuples(\n                [\n                    (0, 1),\n                    (0, 1),\n                    (0, 1),\n                    (0, 1),\n                    (1, 1),\n                    (1, 1),\n                    (1, 1),\n                    (1, 1),\n                    (1, 2),\n                ]\n            ) == (0, 1)\n\nassert     group_tuples(\n                [\n                    (0, 1),\n                    (0, 1),\n                    (0, 1),\n                    (0, 1),\n                    (1, 1),\n                    (1, 1),\n                    (1, 1),\n                    (1, 1),\n                    (1, 2),\n                ]\n            ) == (0, 1)\n\nassert     group_tuples(\n                [\n                    (0, 1),\n                    (0, 1),\n                    (0, 1),\n                    (0, 1),\n                    (1, 1),\n                    (1, 1),\n                    (1, 1),\n                    (1, 1),\n                    (1, 2),\n                ]\n            ) == (0, 1)\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     group_tuples([(0, 1, 3), (0, 2, 3), (0, 3, 3), (1, 1, 3), (1, 2, 3), (1, 3, 3)]) == (0, 1), 'incorrect result'\nassert     group_tuples([(1, 1, 3), (1, 2, 3), (1, 3, 3), (2, 1, 3), (2, 2, 3), (2, 3, 3)]) == (1, 1), 'incorrect result'\nassert     group_tuples([(0, 1, 3), (0, 2, 3), (0, 3, 3), (0, 1, 3), (0, 2, 3), (0, 3, 3)]) == (0, 1, 2, 3), 'incorrect result'\nassert     group_tuples([(0, 1, 3), (0, 2, 3), (0, 3, 3), (1, 1, 3), (1, 2, 3), (1, 3, 3)]) == (0, 1), 'incorrect result'\nassert     group_tuples([(0, 1, 3), (0, 2, 3), (0, 3, 3), (0, 1, 3), (0, 2, 3), (0, 3, 3)]) == (0, 1, 2, 3), 'incorrect result'\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     group_tuples([('John','m', 9), ('Tom', 'f', 10), ('Jack','m', 10)]) == 'John'\nassert     group_tuples([('Mary', 'f', 9), ('Peter','m', 10), ('John','m', 9), ('Samantha', 'f', 10), ('Jack','m', 10)]) == 'John'\nassert     group_tuples([('Mary', 'f', 9), ('Samantha', 'f', 10), ('Jack','m', 10)]) == 'Samantha'\nassert     group_tuples([('John','m', 10), ('Mary', 'f', 10), ('Samantha', 'f', 10)]) == 'Samantha'\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     group_tuples(\n        [(1,3,4), (3,4,5)]) ==     (1,3), 'First element is not common'\nassert     group_tuples(\n        [(1,2,4), (3,4,5)]) ==     (1,2,4), 'Second element is not common'\nassert     group_tuples(\n        [(1,3), (3,4)]) ==     (1,3), 'First element is not common'\nassert     group_tuples(\n        [(1,2), (2,3)]) ==     (1,2), 'Second element is not common'\nassert     group_tuples(\n        [(1,3,5), (3,4,5)]) ==     (1,3,5), 'All elements are not common'\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     group_tuples([(1,2,3),(5,6,7)]) == (1,3), \"First element should be 1\"\nassert group_tuples([(1,2,1),(5,6,7)]) == (1,1), \"First element should be 1\"\nassert group_tuples([(1,2,3),(1,2,3)]) == (1,3), \"First element should be 1\"\nassert group_tuples([(1,2,3),(1,2,3,4)]) == (1,3), \"First element should be 1\"\nassert group_tuples([(1,2,3),(1,2,3,4),(1,2,3)]) == (1,3,4), \"First element should be 1\"\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     group_tuples([(1, 2), (3, 4), (2, 4)]) == 1\nassert     group_tuples([(1, 2), (2, 4)]) == 1\nassert     group_tuples([(1, 2), (3, 4)]) == -1\nassert     group_tuples([]) == -1\n\ndef group_counting(Input):\n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    pass\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     group_tuples([(1, 2), (1, 2), (3, 4), (4, 5)]) == (1, 1)\nassert     group_tuples([(1, 2), (1, 2), (3, 4), (4, 5), (5, 6)]) == (1, 1)\nassert     group_tuples([(1, 2), (1, 2), (3, 4), (4, 5), (5, 6), (3, 5)]) == (1, 1)\nassert     group_tuples([(1, 2), (1, 2), (3, 4), (4, 5), (5, 6), (3, 5), (1, 2)]) == (1, 1)\nassert     group_tuples([(1, 2), (1, 2), (3, 4), (4, 5), (5, 6), (3, 5)]) == (1, 1)\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     group_tuples(Input = []) == []\nassert     group_tuples(Input = [(0,0),(1,1),(2,2)]) == [(0,0),(1,1),(2,2)]\nassert     group_tuples(Input = [(1,1),(2,2),(2,2),(2,2),(1,1)]) == [(1,1),(2,2),(2,2),(2,2),(1,1)]\nassert     group_tuples(Input = [(1,1),(2,2),(3,3),(4,4),(5,5),(6,6),(6,6),(7,7),(8,8),(9,9)]) == [(1,1),(2,2),(3,3),(4,4),(5,5),(6,6),(6,6),(7,7),(8,8),(9,9)]\n\nprint(\"\\nFunction: group_tuples\\n\")\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Find_Max(['a', 'b', 'c', 'd', 'e', 'f']) == 'f', 'Should find f with length'\nassert     Find_Max(['a', 'a', 'b', 'b', 'c', 'c', 'd', 'd', 'd']) == 'b', 'Should find b with length'\nassert     Find_Max(['a', 'a', 'a', 'b', 'b', 'c', 'c', 'd', 'd', 'd']) == 'b', 'Should find b with length'\nassert     Find_Max([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == '1', 'Should find 1 with length'\n\nprint('All tests are passed!')\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Find_Max([1,2,3,4,5,6,7,8,9]) == 9\nassert     Find_Max([1,2,3,4]) == 4\nassert     Find_Max([1,1,1]) == 1\nassert     Find_Max([]) == None\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     Find_Max([1,2,3,4,5]) == 5\nassert    Find_Max([1,2,3,4]) == 4\nassert    Find_Max([1,2,3]) == 3\nassert    Find_Max([1,2,3,4,5]) == 5\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Find_Max([2,3,1,5]) == 5\nassert     Find_Max([1,2,3]) == 3\nassert     Find_Max([1,2,3,4,5]) == 5\nassert     Find_Max([1,2,3,4,5,6]) == 6\nassert     Find_Max([1,2,3,4,5,6,7,8,9]) == 9\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(\"Assessment of Find_Max function completed\")\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Find_Max(['Google','Gmail','Facebook','youtube','Zomato','Suyashree','Amazon','Youtube']) == 'Amazon'\nassert    Find_Max(['T','E','S','T','H','O','L','U','E']) == 'U'\nassert    Find_Max(['s','h','i','j','k','l']) == 'j'\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Find_Max([10,20,30]) == 30\nassert     Find_Max([10,20,30,40,50,60,70]) == 60\nassert     Find_Max([10,20,30,40]) == 30\nassert     Find_Max([10,20,30]) == 30\nassert     Find_Max([10,20,30,40]) == 30\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Find_Max([]) == None, \"The test failed as the result is not as expected\"\nassert     Find_Max([1,3,5,7,9]) == 9, \"The test failed as the result is not as expected\"\nassert     Find_Max([2,3,5,7,9,12,15]) == 15, \"The test failed as the result is not as expected\"\n\n'''\nOutput:\nThe test failed as the result is not as expected\nThe test failed as the result is not as expected\nThe test failed as the result is not as expected\nThe test failed as the result is not as expected\n'''"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Find_Max([[1,2,3,4,5], [4,5,6,7,8], [3,4,5,6,7], [2,1,2,1,1]]) == 8\nassert     Find_Max([1,2,3,4,5,1]) == 5\nassert     Find_Max([]) == None\nassert     Find_Max([1,2,3,4,5]) == 5\nassert     Find_Max([\"alpha\", \"beta\", \"gamma\", \"delta\"]) == \"delta\"\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Find_Max([]) == None, \"Empty list\"\nassert     Find_Max([1,2,3,4,5]) == 5, \"Five\"\nassert     Find_Max([1,2,3,4,5,6,7]) == 7, \"Seven\"\nassert     Find_Max([1,2,3,4,5,6,7,8,9]) == 8, \"Eight\"\nassert     Find_Max([1,2,3,4,5,6,7,8,9,10]) == 10, \"Ten\"\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nround_and_sum([1, 2, 3, 4, 5, 6]) == 30\nassert \nround_and_sum([1, 2, 3, 4, 5, 6, 7]) == 30\nassert \nround_and_sum([1, 2, 3, 4, 5, 6, 7, 8]) == 30\nassert \nround_and_sum([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 30\nassert \nround_and_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == 30\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     round_and_sum([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]\nassert     round_and_sum([9,8,7,6,5,4,3,2,1]) == [1,2,3,4,5,6,7,8,9]\nassert     round_and_sum([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]) == [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]\nassert     round_and_sum([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == [-1, -2, -3, -4, -5, -6, -7, -8, -9]\nassert round_and_sum([-1.5, -2.2, -3.5, -4.7, -5.9]) == [-1.5, -2.2, -3.5, -4.7, -5.9]\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef add_mult_3_5(x):\n    '''\n    Write a function to sum all elements of a given list multiplied by three and add five.\n    '''\n    pass\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert round_and_sum([1,2,3,4,5]) == 30 \nassert round_and_sum([10,10,10,10,10]) == 200 \nassert round_and_sum([0,0,0,0,0]) == 0 \nassert round_and_sum([0,1,2,3,4,5]) == 15 \n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     round_and_sum([1, 2, 3, 4]) == 10, \"Wrong result\"\nassert     round_and_sum([-1, -2, -3, -4]) == -10, \"Wrong result\"\nassert     round_and_sum([0, 1, 2, 3, 4]) == 20, \"Wrong result\"\nassert     round_and_sum([-1, -2, -3, -4, -5]) == -20, \"Wrong result\"\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     round_and_sum([1, 2, 3, 4, 5]) == 10\nassert     round_and_sum([1, 2, 3, 4, 5, 5]) == 5\nassert     round_and_sum([2, 3, 4, 5, 5]) == 10\nassert     round_and_sum([0.1, 0.2, 0.3, 0.4, 0.5]) == 0\nassert     round_and_sum([2.7, 3.2, 4.1, 5.9]) == 33\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nround_and_sum([1,2,3,4,5]) == 120\nround_and_sum([4,5,1,2,3]) == 180\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nround_and_sum([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]) == 0.85\nround_and_sum([-0.1, -0.2, -0.3, -0.4, -0.5, -0.6, -0.7, -0.8, -0.9, -1.0]) == -0.87\nround_and_sum([-0.1, -0.2, -0.3, -0.4, -0.5, -0.6, -0.7, -0.8, -0.9, -1.0, -1.1]) == -0.87\nround_and_sum([-0.1, -0.2, -0.3, -0.4, -0.5, -0.6, -0.7, -0.8, -0.9, -1.0, -1.1, -1.1, -1.1]) == -0.88\nround_and_sum([-0.1, -0.2, -0.3, -0.4, -0.5, -0.6, -0.7, -0.8, -0.9, -1.0, -1.1, -1.1, -1.1, -1.1]) == -0.89"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     round_and_sum([1,2,3,4]) == 10, 'The correct value is 10'\nassert     round_and_sum([2,3,4]) == 14, 'The correct value is 14'\nassert     round_and_sum([]) == 0, 'The correct value is 0'\nassert     round_and_sum([3.5, 3.3, 3.5]) == 20, 'The correct value is 20'\n\n\ndef count_first_character(text):\n    '''\n    Write a function that counts the first character of a given text and returns the number of times it appears.\n    '''\n    pass\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     cube_Sum(1) == 0\nassert     cube_Sum(2) == 8\nassert     cube_Sum(3) == 36\nassert     cube_Sum(4) == 64\nassert     cube_Sum(5) == 216\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ncube_Sum(1) == 1\ncube_Sum(4) == 4\ncube_Sum(9) == 62\ncube_Sum(10) == 980\ncube_Sum(100) == 15000\ncube_Sum(1000) == 362880\ncube_Sum(10000) == -5183168+1\n\ncube_Sum(1000) == -10561440\ncube_Sum(10000) == -10561440\ncube_Sum(100000) == -10561440\ncube_Sum(1000000) == -10561440\ncube_Sum(10000000) == -10561440\ncube_Sum(100000000) == -10561440\ncube_Sum(10000000000) == -10561440\n\n\ncube_Sum(1000000000) == -10561440\ncube_Sum(1000000000000) == -10561440\ncube_Sum(100000000000000) == -10561440\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     cube_Sum(4) == 32\nassert     cube_Sum(5) == 216\nassert     cube_Sum(7) == 420\nassert     cube_Sum(11) == 3345\nassert     cube_Sum(15) == 1765\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     cube_Sum(1) == 8\nassert     cube_Sum(2) == 2\nassert     cube_Sum(10) == 1036\n\n\nimport math\ndef binary_search(data, target, low, high):\n    '''\n    Write a python function that returns the index of target in the sorted array data,\n    if target does not exist in the array, return -1\n    '''\n    pass\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     cube_Sum(1) == 1\nassert     cube_Sum(10) == 55\nassert     cube_Sum(100) == 816\nassert     cube_Sum(1000) == 2152\n\n\ndef prime_Factors(n): \n    '''\n    Write a python function to find all prime factors of the given number.\n    '''\n    pass\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \ncube_Sum(1) == 1\ncube_Sum(2) == 8\ncube_Sum(10) == 385\ncube_Sum(100) == 12551163312\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ncube_Sum(5) == 75"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     cube_Sum(1) == 1, \"cube_Sum should return 1 for input 1.\"\nassert     cube_Sum(4) == 8, \"cube_Sum should return 8 for input 4.\"\nassert     cube_Sum(10) == 385, \"cube_Sum should return 385 for input 10.\"\n\ndef find_longest_word(text):\n    '''\n    Write a python function to find the longest word in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ncube_Sum(10) == 0\ncube_Sum(20) == 27\ncube_Sum(30) == 536\ncube_Sum(40) == 9462\ncube_Sum(50) == 126814\ncube_Sum(60) == 1412420\ncube_Sum(70) == 18724421\ncube_Sum(80) == 22464642\ncube_Sum(90) == 28273966\ncube_Sum(100) == 35266718\ncube_Sum(1000) == 46182210\ncube_Sum(2000) == 839021876\ncube_Sum(3000) == 1327861864\ncube_Sum(4000) == 21128365856\ncube_Sum(5000) == 29081665872\ncube_Sum(6000) == 39887465116\ncube_Sum(7000) == 58475249248\ncube_Sum(8000) == 735159230208\ncube_Sum(9000) == 839540693536\ncube_Sum(10000) == 962496460192\ncube_Sum(10001) == 103482065088\ncube_Sum(10002) == 103924162464\ncube_Sum(10003) == 105115923488\ncube_Sum(10004) == 1069282286752\ncube_Sum(10005) == 1083238036896\ncube_Sum(10006) == 1102395914672\ncube_Sum(10007) == 1125752549440\ncube_Sum(10008) == 114201392272\ncube_Sum(10009) == 114587132384\ncube_Sum(10010) == 116057121512\ncube_Sum(10011) == 117798582536\ncube_Sum(10012) == 119142619456\ncube_Sum(10013) == 121141615648\ncube_Sum(10014) == 122564983984\ncube_Sum(10015) == 124530791648\ncube_Sum(10016) == 126054276608\ncube_Sum(10017) == 127790648672\ncube_Sum(10018) == 129159996992\ncube_Sum(10019) == 131599985760\ncube_Sum(10020) == 133740995440\ncube_Sum(10021) == 135359952192\ncube_Sum(10022) == 137159986240\ncube_Sum(10023) == 13906994848\ncube_Sum(10024) == 14164988944\ncube_Sum(10025) == 143840998640\ncube_Sum(10026) == 145359901440\ncube_Sum(10027) == 14715996416\ncube_Sum(10028) == 14906990160\ncube_Sum(10029) == 151649888000\ncube_Sum(10030) == 153159986240\ncube_Sum(10031) == 15535995040\ncube_Sum(10032) == 15715999440\ncube_Sum(10033) == 15906994848\ncube_Sum(10034) == 161649886784\ncube_Sum(10035) == 163840998640\ncube_Sum(10036) == 165535995040\ncube_Sum(10037) == 16715996416\ncube_Sum(10038) == 16906990160\ncube_Sum(10039) == 171649888000\ncube_Sum(10040) == 173840998640\ncube_Sum(10041) == 17535995040\ncube_Sum(10042) == 17715999440\ncube_Sum(10043) == 17906990160\ncube_Sum(10044) == 181649888000\ncube_Sum(10045) == 183840998640\ncube_Sum(10046) == 18535995040\ncube_Sum(10047) == 18715996416\ncube_Sum(10048) == 18906990160\ncube_Sum(10049) == 1921649888000\ncube_Sum(10050) == 19535995040\ncube_Sum(10051) == 19715999440\ncube_Sum(10052) == 19906990160\ncube_Sum(10053) == 20121649888000\ncube_Sum(10054) == 203840998640\ncube_Sum(10055) == 205535995040\ncube_Sum(10056) == 20715999440\ncube_Sum(10057) == 2097159960\ncube_Sum(10058) == 21161649888000\ncube_Sum(10059) == 213840998640\ncube_Sum(10060) == 21535995040\ncube_Sum(10061) == 21715996416\ncube_Sum(10062) == 218906990160\ncube_Sum(10063) == 221649888000\ncube_Sum(10064) == 22315999440\ncube_Sum(10065) == 22535995040\ncube_Sum(10066) == 22715996416\ncube_Sum(10067) == 22906990160\ncube_Sum(10068) == 231649888000\ncube_Sum(10069) == 23315999440\ncube_Sum(10070) == 23535995040\ncube_Sum(10071) == 23715996416\ncube_Sum(10072) == 23906990160\ncube_Sum(10073) == 241649888000\ncube_Sum(10074) == 243840998640\ncube_Sum(10075) == 24535995040\ncube_Sum(10076) == 24715996416\ncube_Sum(10077) == 24906990160\ncube_Sum(10078) == 251649888000\ncube_Sum(10079) == 25315999440\ncube_Sum(10080) == 25535995040\ncube_Sum(10081) == 25715996416\ncube_Sum(10082) == 25906990160\ncube_Sum(10083) == 261649888000\ncube_Sum(10084) == 263840998640\ncube_Sum(10085) == 265535995040\ncube_Sum(10086) == 26715999440\ncube_Sum(10087) == 26906990160\ncube_Sum(10088) == 2721649888000\ncube_Sum(10089) == 273840998640\ncube_Sum(10090) == 27535995040\ncube_Sum(10091) == 27715996416\ncube_Sum(10092) == 27906990160\ncube_Sum(10093) == 281649888000\ncube_Sum(10094) == 283840998640\ncube_Sum(10095) == 285535995040\ncube_Sum(10096) == 28715999440\ncube_Sum(10097) == 28906990160\ncube_Sum(10098) == 291649888000\ncube_Sum(10099) == 293840998640\ncube_Sum(10100) == 295535995040\ncube_Sum(10101) == 29715996416\ncube_Sum(10102) == 29906990160\ncube_Sum(10103) == 301649888000\ncube_Sum(10104) == 303840998640\ncube_Sum(10105) == 30535995040\ncube_Sum(10106) == 30715999440\ncube_Sum(10107) == 30906990160\ncube_Sum(10108) == 31161649888000\ncube_Sum(10109) == 313840998640\ncube_Sum(10110) == 31535995040\ncube_Sum(10111) == 31715996416\ncube_Sum(10112) == 31906990160\ncube_Sum(10113) == 3221649888000\ncube_Sum(10114) == 323840998640\ncube_Sum(10115) == 325535995040\ncube_Sum(10116) == 327715996416\ncube_Sum(10117) == 328906990160\ncube_Sum(10118) == 331649888000\ncube_Sum(10119) == 33315999440\ncube_Sum(10120) == 33535995040\ncube_Sum(10121) == 33715996416\ncube_Sum(10122) == 33906990160\ncube_Sum(10123) == 34164988800"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     cube_Sum(2) == 10\nassert     cube_Sum(3) == 27\nassert     cube_Sum(4) == 32\nassert     cube_Sum(5) == 57\nassert     cube_Sum(6) == 72\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     concatenate_tuple((\"a\",\"b\")) == \"ab\"\nassert     concatenate_tuple((\"ab\",\"cd\")) == \"abcd\"\nassert     concatenate_tuple((\"a\")) == \"a\"\nassert     concatenate_tuple(()) == \"\"\nassert     concatenate_tuple((None,)) == \"\"\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     concatenate_tuple([1, 2, 3]) == \"1,2,3\"\nassert     concatenate_tuple((\"a\", \"b\", \"c\")) == \"a,b,c\"\nassert     concatenate_tuple((5, 4, 3)) == \"5,4,3\"\nassert     concatenate_tuple((5,)) == \"5\"\nassert     concatenate_tuple((1, 2, 3, 4, 5)) == \"1,2,3,4,5\"\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     concatenate_tuple((\"a\", \"b\", \"c\") ) == \"abc\"\nassert     concatenate_tuple((\"a\",) ) == \"a\"\nassert     concatenate_tuple((\"a\", \"b\") ) == \"a,b\"\nassert     concatenate_tuple(() ) == \"\"\nassert     concatenate_tuple((1, 2, 3)) == \"1,2,3\"\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     concatenate_tuple(('How', 'are', 'you?')) == 'How are you?'\nassert    concatenate_tuple((1, 2, 3, 4, 5, 6, 7, 8, 9)) == '1 2 3 4 5 6 7 8 9'"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     concatenate_tuple([1,2,3]) == \"1,2,3\", \"Wrong output!\"\nassert     concatenate_tuple((1,2,3)) == \"1,2,3\", \"Wrong output!\"\nassert     concatenate_tuple([\"a\",\"b\",\"c\"]) == \"a,b,c\", \"Wrong output!\"\nassert     concatenate_tuple([[1,2,3],[\"a\",\"b\",\"c\"],[\"d\",\"e\",\"f\"]]) == \"1,2,3,a,b,c,d,e,f\", \"Wrong output!\"\nassert     concatenate_tuple([1,2,3,4,5,6,7,8,9,10]) == \"1,2,3,4,5,6,7,8,9,10\", \"Wrong output!\"\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef get_list(test_tup):\n    '''\n    Write a function to get a list from the tuple.\n    '''\n    pass\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     concatenate_tuple((\"this\", \"is\", \"test\")) == \"thisis_test\", \\\n    \"Concatenate by delimiter function is not working as expected\"\nassert concatenate_tuple((\"test\", \"test\")) == \"testtest\", \\\n    \"Concatenate by delimiter function is not working as expected\"\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     concatenate_tuple(('hello','world')) == \"helloworld\", \"Fail\"\nassert concatenate_tuple(('hello','world')) == \"helloworld\", \"Fail\"\nassert concatenate_tuple(('hello','world','and')) == \"helloworldand\", \"Fail\"\nassert concatenate_tuple((1,2,3)) == \"1,2,3\", \"Fail\"\nassert concatenate_tuple(()) == \"\", \"Fail\"\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     concatenate_tuple(('Hi', 'This', 'is', 'a', 'test', '.')) == 'HiThisisisa'\nassert    concatenate_tuple(('Hello', 'World')) == 'HelloWorld'\nassert    concatenate_tuple(('Python',)) == 'Python'\nassert    concatenate_tuple((1,2,3)) == '123'\nassert    concatenate_tuple(('a','b','c')) == 'abc'\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Average_Of_Cube(5) == 1\nassert     find_Average_Of_Cube(10) == 8.0\nassert     find_Average_Of_Cube(15) == 13.5\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Average_Of_Cube(5) == 32\nassert    find_Average_Of_Cube(1) == 1\n\ndef find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    pass\n\n    # code here\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_Average_Of_Cube(5) == 1, 'Wrong answer!'\nassert     find_Average_Of_Cube(10) == 5, 'Wrong answer!'\nassert     find_Average_Of_Cube(100) == 25, 'Wrong answer!'\nassert     find_Average_Of_Cube(1000) == 233, 'Wrong answer!'\nassert     find_Average_Of_Cube(10000) == 2333, 'Wrong answer!'\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert find_Average_Of_Cube(4) == 81\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Average_Of_Cube(3) == 9, \"Square is wrong\"\nassert     find_Average_Of_Cube(10) == 33, \"Cube is wrong\"\nassert     find_Average_Of_Cube(1) == 1, \"There is no average of a cube\"\nassert     find_Average_Of_Cube(-2) == 0, \"There is no average of a cube\"\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_Average_Of_Cube(1) == 1, \"The program should return 1\"\nassert     find_Average_Of_Cube(2) == 3, \"The program should return 3\"\nassert     find_Average_Of_Cube(5) == 22, \"The program should return 22\"\nassert     find_Average_Of_Cube(10) == 33, \"The program should return 33\"\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(\"The Average of cube of 3 natural numbers:\", find_Average_Of_Cube(3))\nprint(\"The Average of cube of 5 natural numbers:\", find_Average_Of_Cube(5))\nprint(\"The Average of cube of 7 natural numbers:\", find_Average_Of_Cube(7))\n\n'''\n\nOutput:\n\nThe Average of cube of 3 natural numbers: 1.0\nThe Average of cube of 5 natural numbers: 1.0\nThe Average of cube of 7 natural numbers: 1.8888888888888889\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nfind_Average_Of_Cube(3) == 1.0\nfind_Average_Of_Cube(2) == 4.0\nfind_Average_Of_Cube(0) == 0.0\nfind_Average_Of_Cube(-1) == -1."
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_rear((1,2,3,4,5,6,7,8)) == (1,2,3,4,5,6,7,8)\nassert     extract_rear(('abc', 'xyz', 'pqr','stu', 'vwx', 'y')) == ('abc', 'xyz', 'pqr','stu', 'vwx', 'y')\nassert     extract_rear(('python', 'development', '','machine', 'learning', '')) == ('python', 'development','machine', 'learning')"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_rear((\"banana\", \"carrot\", \"grapes\")) == ('carrot', 'grapes', None)\nassert    extract_rear((\"banana\",)) == ('banana', None)\nassert    extract_rear(()) == ()\nassert extract_rear((None,)) == (None,)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_rear((1, 2, 3, 4, 5, 6)) == (5, 6)\nassert     extract_rear((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == (10, 8, 6, 5)\nassert     extract_rear((1, 2, 3, 4, 5, 6, 7)) == (7, 6, 5)\nassert     extract_rear((1, 2, 3, 4, 5)) == (5, 4, 3)\nassert     extract_rear(()) == ()\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_rear((\"1-2-3-4-5-6-7-8-9-10-11-12\",)) == (10, 11, 12)\nassert     extract_rear((\"1-2-3-4-5-6-7-8-9-10-11-12\",)) == (10, 11, 12)\nassert     extract_rear((\"1-2-3-4-5-6-7-8-9-10-11-12\",)) == (10, 11, 12)\nassert     extract_rear((\"1-2-3-4-5-6-7-8-9-10-11-12\",)) == (10, 11, 12)\nassert     extract_rear((\"1-2-3-4-5-6-7-8-9-10-11-12\",)) == (10, 11, 12)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_rear((\"HelloWorld\", \"HelloWorld\", \"HelloWorld\", \"HelloWorld\")) == (\"World\", \"World\", \"World\", \"World\")\nassert     extract_rear((\"HelloWorld\", \"HelloWorld\", \"HelloWorld\")) == (\"HelloWorld\", \"HelloWorld\", \"HelloWorld\")\nassert     extract_rear((\"HelloWorld\", \"HelloWorld\", \"HelloWorld\", \"HelloWorld\")) == (\"HelloWorld\", \"HelloWorld\", \"HelloWorld\", \"HelloWorld\")\nassert     extract_rear((\"HelloWorld\", \"HelloWorld\", \"HelloWorld\")) == (\"HelloWorld\", \"HelloWorld\", \"HelloWorld\")\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_rear((\"Python\", \"Java\", \"JavaScript\")) == (0, 2, 1)\nassert     extract_rear((\"abcd\", \"defg\", \"hijkl\")) == (1, 3, 2)\nassert     extract_rear((\"\", \"\", \"\", \"\", \"\", \"\")) == (0, 0, 0)\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_rear((\"Hello World\", \"Goodbye World\")) == (\"World\", \"World\")\nassert     extract_rear((\"Hello World\", \"Goodbye World\", \"Hello India\")) == (\"World\", \"World\", \"Hello India\")\nassert     extract_rear((\"Hello World\", \"Goodbye World\", \"Hello India\", \"Test\")) == (\"World\", \"World\", \"Hello India\")\nassert     extract_rear((\"Hello World\", \"Goodbye World\", \"Hello India\", \"Test\", \"Test2\")) == (\"World\", \"World\", \"Hello India\", \"Test2\")\nassert     extract_rear((\"Hello World\", \"Goodbye World\", \"Hello India\", \"Test\", \"Test2\", \"Test3\", \"Test4\", \"Test5\", \"Test6\", \"Test7\", \"Test8\", \"Test9\", \"Test10\", \"Test11\", \"Test12\", \"Test13\", \"Test14\", \"Test15\", \"Test16\", \"Test17\", \"Test18\", \"Test19\", \"Test20\", \"Test21\", \"Test22\", \"Test23\", \"Test24\", \"Test25\", \"Test26\", \"Test27\", \"Test28\", \"Test29\", \"Test30\", \"Test31\", \"Test32\", \"Test33\", \"Test34\", \"Test35\", \"Test36\", \"Test37\", \"Test38\", \"Test39\", \"Test40\", \"Test41\", \"Test42\", \"Test43\", \"Test44\", \"Test45\", \"Test46\", \"Test47\", \"Test48\", \"Test49\", \"Test50\", \"Test51\", \"Test52\", \"Test53\", \"Test54\", \"Test55\", \"Test56\", \"Test57\", \"Test58\", \"Test59\", \"Test60\", \"Test61\", \"Test62\", \"Test63\", \"Test64\", \"Test65\", \"Test66\", \"Test67\", \"Test68\", \"Test69\", \"Test70\", \"Test71\", \"Test72\", \"Test73\", \"Test74\", \"Test75\", \"Test76\", \"Test77\", \"Test78\", \"Test79\", \"Test80\", \"Test81\", \"Test82\", \"Test83\", \"Test84\", \"Test85\", \"Test86\", \"Test87\", \"Test88\", \"Test89\", \"Test90\", \"Test91\", \"Test92\", \"Test93\", \"Test94\", \"Test95\", \"Test96\", \"Test97\", \"Test98\", \"Test99\")) == ((\"World\", \"World\"), (\"World\", \"World\"), (\"Hello India\", \"Hello India\"), (\"Test\", \"Test\"), (\"Test2\", \"Test2\"), (\"Test3\", \"Test3\"), (\"Test4\", \"Test4\"), (\"Test5\", \"Test5\"), (\"Test6\", \"Test6\"), (\"Test7\", \"Test7\"), (\"Test8\", \"Test8\"), (\"Test9\", \"Test9\"), (\"Test10\", \"Test10\"), (\"Test11\", \"Test11\"), (\"Test12\", \"Test12\"), (\"Test13\", \"Test13\"), (\"Test14\", \"Test14\"), (\"Test15\", \"Test15\"), (\"Test16\", \"Test16\"), (\"Test17\", \"Test17\"), (\"Test18\", \"Test18\"), (\"Test19\", \"Test19\"), (\"Test20\", \"Test20\"), (\"Test21\", \"Test21\"), (\"Test22\", \"Test22\"), (\"Test23\", \"Test23\"), (\"Test24\", \"Test24\"), (\"Test25\", \"Test25\"), (\"Test26\", \"Test26\"), (\"Test27\", \"Test27\"), (\"Test28\", \"Test28\"), (\"Test29\", \"Test29\"), (\"Test30\", \"Test30\"), (\"Test31\", \"Test31\"), (\"Test32\", \"Test32\"), (\"Test33\", \"Test33\"), (\"Test34\", \"Test34\"), (\"Test35\", \"Test35\"), (\"Test36\", \"Test36\"), (\"Test37\", \"Test37\"), (\"Test38\", \"Test38\"), (\"Test39\", \"Test39\"), (\"Test40\", \"Test40\"), (\"Test41\", \"Test41\"), (\"Test42\", \"Test42\"), (\"Test43\", \"Test43\"), (\"Test44\", \"Test44\"), (\"Test45\", \"Test45\"), (\"Test46\", \"Test46\"), (\"Test47\", \"Test47\"), (\"Test48\", \"Test48\"), (\"Test49\", \"Test49\"), (\"Test50\", \"Test50\"), (\"Test51\", \"Test51\"), (\"Test52\", \"Test52\"), (\"Test53\", \"Test53\"), (\"Test54\", \"Test54\"), (\"Test55\", \"Test55\"), (\"Test56\", \"Test56\"), (\"Test57\", \"Test57\"), (\"Test58\", \"Test58\"), (\"Test59\", \"Test59\"), (\"Test60\", \"Test60\"), (\"Test61\", \"Test61\"), (\"Test62\", \"Test62\"), (\"Test63\", \"Test63\"), (\"Test64\", \"Test64\"), (\"Test65\", \"Test65\"), (\"Test66\", \"Test66\"), (\"Test67\", \"Test67\"), (\"Test68\", \"Test68\"), (\"Test69\", \"Test69\"), (\"Test70\", \"Test70\"), (\"Test71\", \"Test71\"), (\"Test72\", \"Test72\"), (\"Test73\", \"Test73\"), (\"Test74\", \"Test74\"), (\"Test75\", \"Test75\"), (\"Test76\", \"Test76\"), (\"Test77\", \"Test77\"), (\"Test78\", \"Test78\"), (\"Test79\", \"Test79\"), (\"Test80\", \"Test80\"), (\"Test81\", \"Test81\"), (\"Test82\", \"Test82\"), (\"Test83\", \"Test83\"), (\"Test84\", \"Test84\"), (\"Test85\", \"Test85\"), (\"Test86\", \"Test86\"), (\"Test87\", \"Test87\"), (\"Test88\", \"Test88\"), (\"Test89\", \"Test89\"), (\"Test90\", \"Test90\"), (\"Test91\", \"Test91\"), (\"Test92\", \"Test92\"), (\"Test93\", \"Test93\"), (\"Test94\", \"Test94\"), (\"Test95\", \"Test95\"), (\"Test96\", \"Test96\"), (\"Test97\", \"Test97\"), (\"Test98\", \"Test98\"), (\"Test99\", \"Test99\"))\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_rear((\"Hello\", \"world\", \"Python\")) == (\"Hello\", \"Python\")\nassert     extract_rear((\"H\", \"e\", \"l\", \"l\", \"o\")) == (\"l\", \"l\")\nassert     extract_rear((\"\", \"\", \"\", \"\", \"\")) == (\"\", \"\")\nassert     extract_rear((\"Hello\", \"\", \"Python\")) == (\"Hello\", \"Python\")\nassert     extract_rear((\"\", \"Hello\", \"Python\")) == (\"Hello\", \"Python\")\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_rear(('abc', 'xyz', 'def', 'ghi', 'jkl')) == ('xyz', 'ghi', 'jkl')\nassert     extract_rear(('abc', 'xyz', 'def', 'ghi', 'jkl', 'xyz')) == ('ghi', 'jkl')\nassert     extract_rear(('abc', 'xyz', 'def', 'ghi', 'jkl', 'xyz', 'xyz')) == ('ghi', 'jkl', 'xyz')\nassert     extract_rear(('abc', 'xyz', 'def', 'ghi', 'jkl', 'xyz', 'xyz', 'xyz')) == ('ghi', 'jkl', 'xyz')\nassert     extract_rear(('abc', 'xyz', 'def', 'ghi', 'jkl', 'xyz', 'xyz', 'xyz', 'xyz', 'xyz', 'xyz')) == ('ghi', 'jkl', 'xyz')\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_element_in_list([1,2,3], 1) == 1, 'incorrect result'\nassert     count_element_in_list([1,2,3], 2) == 2, 'incorrect result'\nassert     count_element_in_list([1,2,3], 3) == 3, 'incorrect result'\nassert     count_element_in_list([1,2,3], 4) == 0, 'incorrect result'\nassert     count_element_in_list([1,2,3], 5) == 0, 'incorrect result'\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_element_in_list([1,1,2,3,4,5], 5) == 0\nassert     count_element_in_list([1,1,2,3,4,5], 1) == 2\nassert     count_element_in_list([1,1,2,3,4,5], 5) == 0\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nlist1 = [[1, 1], [1, 2], [1, 3], [1, 4], \n        [2, 1], [2, 2], [2, 3], [2, 4], \n        [3, 1], [3, 2], [3, 3], [3, 4]] \n\nx = 1\nprint('Number of sublists containing 1 =', count_element_in_list(list1, x)) \n\nx = 4\nprint('Number of sublists containing 4 =', count_element_in_list(list1, x)) "
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_element_in_list([[], [], [], [1,2], [3, 4], [5], []], 1 ) == 2, 'False'\nassert     count_element_in_list([[], [], [], [1,2], [3, 4], [5], []], 5 ) == 0, 'False'\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_element_in_list([], 0) == 0\nassert     count_element_in_list([], 1) == 0\nassert     count_element_in_list([1], 1) == 0\nassert     count_element_in_list([1], 2) == 1\nassert     count_element_in_list([1,2], 2) == 1\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_element_in_list([], 'a') == 0\nassert     count_element_in_list([1, 2, 3], 'a') == 0\nassert     count_element_in_list([1, 2, 3, 'a', 4, 5, 'b', 7], 'a') == 2\nassert     count_element_in_list([1, 2, 3, 4, 5], 'a') == 1\nassert     count_element_in_list([1, 2, 3, 4], 'a') == 1\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(filter_oddnumbers([1,2,3,4,5]))\nassert filter_oddnumbers([0,1,2,3,4,5]) == [1,3,5]"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     filter_oddnumbers([0,1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9]\nassert filter_oddnumbers([0,1,2,3,4,5,6,7,8,9,10,11]) == [1,3,5,7,9]\nassert filter_oddnumbers([0,1,2,3,4,5,6,7,8,9,10,11,12]) == [1,3,5,7,9,11]\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     filter_oddnumbers([10, 20, 30, 40, 50, 60]) == [11, 21, 31, 41, 61]\nassert     filter_oddnumbers([-4, -2, 0, 1, 2, 3, 4, 5, 6]) == [-4, -3, -1, 1, 3, 5, 6]\n\ndef filter_evennumbers(nums):\n    '''\n    Write a function to filter even numbers.\n    '''\n    pass\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     filter_oddnumbers([1,2,3,4,5,6]) == [3,5]\nassert     filter_oddnumbers([1,2,3,4,5,6,7,8,9]) == [3,5,7,9]\nassert     filter_oddnumbers([]) == []\nassert     filter_oddnumbers([1,2,3,4,5,6,7,8,9,10]) == [3,5,7,9,11]\n\ndef filter_evennumbers(nums):\n    '''\n    Write a function to filter even numbers.\n    '''\n    pass\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     filter_oddnumbers(range(10)) == list(filter(lambda x: x%2, range(10)))\nassert     filter_oddnumbers(range(10)) == list(filter(lambda x: x%2!=0, range(10)))\nassert     filter_oddnumbers([1,2,3,4,5]) == list(filter(lambda x: x%2, [1,2,3,4,5]))\nassert     filter_oddnumbers([1,2,3,4,5]) == list(filter(lambda x: x%2!=0, [1,2,3,4,5]))\n\n'''\nExercise 8: Write a function to flatten a nested sequence.\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     filter_oddnumbers([1, 2, 3, 4, 5, 6, 7]) == [1, 3, 5, 7], 'Test failed'\nassert     filter_oddnumbers([10, 11, 13, 14, 15, 16]) == [11, 13, 15, 16], 'Test failed'\nassert     filter_oddnumbers([2, 2, 2, 2]) == [], 'Test failed'\nassert     filter_oddnumbers([2, 2, 2, 2, 2]) == [], 'Test failed'\n\n\ndef filter_evennumbers(nums):\n    '''\n    Write a function to filter even numbers.\n    '''\n    pass\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint('\\n\\n## check_filter_oddnumbers')\nnums = range(50)\nassert filter_oddnumbers(nums) == filter(lambda x: x % 2!= 0, nums), 'Value Error'\nassert filter_oddnumbers(nums) == list(filter(lambda x: x % 2!= 0, nums)), 'Type Error'"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     filter_oddnumbers([1, 2, 3, 4, 5]) == [1, 3, 5]\nassert     filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]\nassert     filter_oddnumbers([2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == [2, 4, 6, 8, 10, 12, 14, 16, 18]\nassert     filter_oddnumbers([-1, -3, -5, -7, -9]) == [-1, -3, -5, -7, -9]\nassert     filter_oddnumbers([-1, 0, -2, -4, -6, -8, -10]) == [-1, -2, -4, -6, -8, -10]\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     filter_oddnumbers([1,2,3,4,5]) == [1,3,5]\nassert     filter_oddnumbers([2,4,6,8,10,12,14,16,18,20,22,24,26,28]) == [2,4,6,8,10,12,14,16,18,20,22,24,26,28]\nassert     filter_oddnumbers([1,3,5,7,9]) == []\nassert     filter_oddnumbers([]) == []\n\nprint('All tests have passed!')\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     change_date_format('2021-05-10') == '10/05/2021'\nassert     change_date_format('2021-5-10') == '10/05/2021'\nassert     change_date_format('2021-5-10') == '10/05/2021'\nassert     change_date_format('2021-5-10') == '10/05/2021'\nassert     change_date_format('2021-5-10') == '10/05/2021'\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     change_date_format(\"2020-02-13\") == \"13-02-2020\", \"Should be 13-02-2020\"\nassert     change_date_format(\"2020-02-13\") == \"13-02-2020\", \"Should be 13-02-2020\"\nassert     change_date_format(\"2020-02-13\") == \"13-02-2020\", \"Should be 13-02-2020\"\nassert     change_date_format(\"2020-02-13\") == \"13-02-2020\", \"Should be 13-02-2020\"\nassert     change_date_format(\"2020-02-13\") == \"13-02-2020\", \"Should be 13-02-2020\"\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     change_date_format('01-02-2015') == '02-01-2015'\nassert     change_date_format('30-11-2015') == '11-30-2015'\nassert     change_date_format('20-11-2015') == '11-20-2015'\nassert     change_date_format('10-12-2015') == '10-12-2015'\nassert     change_date_format('30-10-2015') == '10-30-2015'\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     change_date_format(\"17-07-2020\") == \"13-07-2020\", \"expect 13-07-2020\"\nassert     change_date_format(\"17-07-2020\") == \"13-07-2020\", \"expect 13-07-2020\"\nassert     change_date_format(\"17-07-2020\") == \"13-07-2020\", \"expect 13-07-2020\"\nassert     change_date_format(\"17-07-2020\") == \"13-07-2020\", \"expect 13-07-2020\"\n\ndef make_list_with_out_number(string):\n    '''\n    Write a function to check whether a given string is a number or not.\n    '''\n    pass\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     change_date_format('12-10-2020') == '10-12-2020'\nassert     change_date_format('12-01-20') == '01-12-2020'\nassert     change_date_format('10-12-2020') == '10-12-2020'\nassert     change_date_format('20-10-12') == '10-12-20'\nassert     change_date_format('10-12-2020') == '10-12-2020'\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     change_date_format('1994-12-01') == '01-12-1994'\nassert     change_date_format('1994-12-31') == '31-12-1994'\nassert     change_date_format('1994-01-01') == '01-01-1994'\nassert     change_date_format('1994-01-31') == '31-01-1994'\nassert     change_date_format('1994-01-12') == '12-01-1994'\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     change_date_format(\"2021-07-07\") == \"07-07-2021\"\nassert     change_date_format(\"2021-08-08\") == \"08-08-2021\"\nassert     change_date_format(\"2021-08-08\") == \"08-08-2021\"\n\ndef validate_email_address(email):\n    '''\n    Write a program to check if an email address is valid or not.\n    '''\n    pass\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     change_date_format(\"12-01-2010\") == \"01-12-2010\"\nassert     change_date_format(\"01-12-2010\") == \"01-12-2010\"\nassert     change_date_format(\"2010-01-01\") == \"01-01-2010\"\nassert     change_date_format(\"01-12-2010\") == \"01-12-2010\"\nassert     change_date_format(\"2010-01-01\") == \"01-01-2010\"\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     change_date_format(\"20-06-07\") == \"07-06-2020\"\nassert     change_date_format(\"09-30-2001\") == \"30-09-2001\"\nassert     change_date_format(\"01-02-2000\") == \"02-01-2000\"\nassert     change_date_format(\"10-09-2001\") == \"09-10-2001\"\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nshell_sort([]) == []\nshell_sort([1]) == [1]\nshell_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nshell_sort([1, 3, 2, 4, 5]) == [1, 2, 3, 4, 5]\nshell_sort([1, 3, 2, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\nshell_sort([5, 3, 2, 4, 1]) == [1, 2, 3, 4, 5]\nshell_sort([2, 4, 1, 3, 5]) == [1, 2, 3, 4, 5]\nshell_sort([5, 2, 4, 1, 3]) == [1, 2, 3, 4, 5]\nshell_sort([5, 2, 4, 1, 3, 6]) == [1, 2, 3, 4, 5, 6]\nshell_sort([-5, -4, -3, -2, -1]) == [-5, -4, -3, -2, -1]\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     shell_sort([-45, 5, -21, -5, -27, -3, -25, -18]) == [-21, -5, -18, -25, -27, -3, -45, -5]\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef bubble_sort(my_list):\n    '''\n    Write a function to sort the given array by using bubble sort.\n    '''\n    pass\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            while j >= gap and my_list[j - gap] > my_list[j]:\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                j = j - gap\n        gap = gap // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     shell_sort([1, 2, 3, 4, 5, 6]) == False, 'incorrect'\nassert     shell_sort([1, 2, 3, 4, 5, 6, 7]) == True, 'incorrect'\nassert     shell_sort([7, 6, 5, 4, 3, 2, 1]) == False, 'incorrect'\n\ndef shell_sort_test():\n    assert     shell_sort([1, 2, 3, 4, 5, 6]) == False, 'incorrect'\n    "
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n\ndef counting_sort(my_list):\n    '''\n    Write a function to sort the given array by using counting sort.\n    '''\n    pass\n\n\ndef radix_sort(my_list):\n    '''\n    Write a function to sort the given array by using radix sort.\n    '''\n    pass"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nshell_sort([5,4,3,2,1]) == sorted([1,2,3,4,5])\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nshell_sort([8,5,2,9,5,6,3])\nassert shell_sort([1,2,3,4,5,6,7]) == sorted([1,2,3,4,5,6,7])\nassert shell_sort([]) == []\nassert shell_sort([4,3,5,2]) == sorted([2,3,4,5])\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(\"Shell sort:\")\n    my_list = random.sample(range(0, 1000), 50)\n    print(my_list)\n    print(shell_sort(my_list))"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     and_tuples((1,2,3),(2,3,4)) == (2,3,4)\nassert     and_tuples((1,2),(1,2)) == (1,2)\nassert     and_tuples((1,2,3),(2,3,4)) == (2,3,4)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     and_tuples((1, 2), (3, 4)) == (1, 2), \"and_tuples() is not right\"\nassert     and_tuples((1, 2), (1, 3)) == (1, 2), \"and_tuples() is not right\"\nassert     and_tuples((1, 2), (1, 2)) == (1, 2), \"and_tuples() is not right\"\nassert     and_tuples((1, 2, 3), (1, 3)) == (1, 2, 3), \"and_tuples() is not right\"\nassert     and_tuples((1, 2, 3), (1, 2)) == (1, 2), \"and_tuples() is not right\"\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     and_tuples( (1,2,3),(4,5,6)) == (1, 4, 3, 5, 6)\nassert     and_tuples( (9,8,7),(6,5,4)) == (9, 8, 7, 6, 5, 4)\nassert     and_tuples( (5,7,9),(3,4,6)) == (5, 7, 9, 3, 4, 6)\nassert     and_tuples( (8,7,6),(3,4,5)) == (8, 7, 6, 3, 4, 5)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     and_tuples( (1,2,3,4),(4,5,6,7)) == (True, False)\nassert     and_tuples( (1,2,3),(4,5,6,7)) == (False, False)\nassert     and_tuples( (),(4,5,6,7)) == (True, True)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     and_tuples(((1,2,3,4,5),(6,7,8,9,10)),((1,2,3,4,5),(6,7,8,9,10))) == ((1,2,3,4,5),(6,7,8,9,10))\nassert     and_tuples(((1,2,3,4,5),(6,7,8,9,10)),((1,2,3,4,5),(6,7,8,9,10,11))) == ((1,2,3,4,5),(6,7,8,9,10))\nassert     and_tuples(((1,2,3,4,5),(6,7,8,9,10,11)),((1,2,3,4,5),(6,7,8,9,10))) == ((1,2,3,4,5),(6,7,8,9,10,11))\nassert     and_tuples(((1,2,3,4,5),(6,7,8,9,10)),((1,2,3,4,5),(6,7,8,9,10,11,12))) == ((1,2,3,4,5),(6,7,8,9,10,11,12))\nassert     and_tuples(((1,2,3,4,5),(6,7,8,9,10,11)),((1,2,3,4,5),(6,7,8,9,10))) == ((1,2,3,4,5),(6,7,8,9,10,11))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     and_tuples((1, 2), (3, 4)) == (3, 4), 'Wrong Answer. Expected ({3, 4},{1, 2})'\nassert and_tuples((2, 1), (3, 4)) == (1, 2), 'Wrong Answer. Expected ({1, 2},{2, 1})'\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     and_tuples((1, 2, 3), (2, 3, 4)) == (2, 2, 3)\nassert     and_tuples((1, 2, 3), (2, 4, 5)) == (2, 2, 3)\nassert     and_tuples((1, 2, 3), (4, 5, 6)) == (2, 2, 3)\nassert     and_tuples((1, 2, 3), (3, 4, 5)) == (3, 3, 3)\nassert     and_tuples((1, 2, 3), (0, 0, 0)) == (0, 0, 0)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     parabola_directrix(1,2,3) == (2, 3)\nassert     parabola_directrix(3,5,-9) == (3, -9)\nassert     parabola_directrix(4,3,1) == (3, 1)\nprint('correct')\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     parabola_directrix(1, 2, 3) == ((1, 4), (2, 1))\nassert     parabola_directrix(1, 2, 4) == ((1, -4), (2, 1))\nassert     parabola_directrix(1, 4, 1) == ((1, 0), (2, 1))\nassert     parabola_directrix(1, 4, 2) == ((1, 0), (2, -1))\nassert     parabola_directrix(1, 4, 4) == ((1, 0), (2, 0))\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     parabola_directrix(1, 0, 0) ==     (-1.0, 0.0)\nassert     parabola_directrix(0, 1, 0) ==     (1.0, 0.0)\nassert     parabola_directrix(0, 0, 1) ==     (0.0, 1.0)\nassert     parabola_directrix(0, 0, -1) ==     (0.0, -1.0)\nassert     parabola_directrix(-1, -1, -1) ==     (-0.69314718056, -1.57079632679)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     parabola_directrix(1, 1, 0) == (1, 1)\nassert     parabola_directrix(1, -1, 0) == (1, -1)\nassert     parabola_directrix(1, 0, 1) == (1, 0)\nassert     parabola_directrix(1, 0, -1) == (1, 0)\nassert     parabola_directrix(1, -1, 1) == (1, -1)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     parabola_directrix(1, 3, 4) == \n        [-3, 1] \n    ==\n    [3, -1]\n\nassert parabola_directrix(3, 0, -1) == \n        [-0.5, 0.5]\n\nassert parabola_directrix(1, 3, 0) == \n        [-1, 0]\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     parabola_directrix(3, 4, -3) == 2\nassert     parabola_directrix(3, 4, -2) == -1\nassert     parabola_directrix(3, 4, -1) == 0\nassert     parabola_directrix(3, 4, 0) == 1\nassert     parabola_directrix(3, 4, 1) == -2\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     parabola_directrix(2, 1, 1) == (-1, 0)\nassert     parabola_directrix(2, -1, 1) == (1, 0)\nassert     parabola_directrix(3, 3, 1) == (0, -1)\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     common_element([1,2,3,4,5], [2,3,4]) == True\nassert     common_element([1,2,3,4,5], [1,3,4]) == False\nassert     common_element([1,2,3,4,5], [1,2,3,4,5]) == True\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     common_element([1,2,3], [4,5,6]) == True\nassert     common_element([1,2,3], [4,5,7]) == False\nassert     common_element([1,2,3], [4,5]) == False\nassert     common_element([], []) == True\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     common_element([], [])    == False, \"Wrong!\"\nassert     common_element([1, 2, 3, 4], [])    == False, \"Wrong!\"\nassert     common_element([1, 2, 3], [2, 3, 4])    == True, \"Wrong!\"\nassert     common_element([1, 2, 3, 4], [4, 2, 1])    == False, \"Wrong!\"\nassert     common_element([1, 2, 3, 4], [4, 3, 1])    == True, \"Wrong!\"\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     common_element([1,2,3,4,5,6], [1,2,3,5]) == True\nassert     common_element([1,2,3,4,5,6], [1,2,3,4]) == True\nassert     common_element([1,2,3,4,5,6], [1,2,3,5,6]) == True\nassert     common_element([1,2,3,4,5,6], [1,2,3,4,6,7]) == False\nassert     common_element([1,2,3,4,5,6], [1,2,3,4,6,7]) == False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     common_element([1,2,3], [2,4,5]) == True, \\\n    'This function should return true, because in list1, the common element is 2'\nassert     common_element([1,2,3], [1,2,3]) == True, \\\n    'This function should return true, because in list1, the common element is 1'\nassert     common_element([1,2,3], [1,2,3,4]) == True, \\\n    'This function should return true, because in list1, the common element is 1'\nassert     common_element([1,2,3,4], [1,2,3,4]) == True, \\\n    'This function should return true, because in list1, the common element is 1'\nassert     common_element([1,2,3,4], [1,2,3,4,5]) == True, \\\n    'This function should return true, because in list1, the common element is 1'\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     common_element([1,2,3,4,5,6],     [1,2,3,4,5,6,7,8,9])     == True,    \"Check 1\"\nassert     common_element([1,2,3,4,5,6],     [1,2,3,4,5,6,7,8,9,10])     == False,    \"Check 2\"\nassert     common_element([1,2,3,4,5],     [1,2,3,4,5,6,7,8,9])     == True,    \"Check 3\"\nassert     common_element([1,2,3,4,5],     [1,2,3,4,5,6,7,8,9,10])     == False,    \"Check 4\"\nassert     common_element([1,2,3],     [1,2,3,4,5,6,7,8,9])     == True,    \"Check 5\"\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     common_element([1, 2, 3, 4], [1, 2, 3, 5]) == True, \"1st case\"\nassert     common_element([1, 2, 3, 4], [1, 2, 3, 6]) == False, \"2nd case\"\nassert     common_element([1, 2, 3, 4], [1, 2, 5, 6]) == False, \"3rd case\"\nassert     common_element([1, 2, 3, 4], [1, 2, 4, 6]) == True, \"4th case\"\nassert     common_element([1, 2, 3, 4], [1, 2, 4, 6, 7]) == True, \"5th case\"\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint(common_element([1, 2, 3, 4], [3, 4, 5, 6]))\nprint(common_element([1, 2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8]))\nprint(common_element([1, 2, 3, 4, 5, 6, 7, 8], [3, 4, 5, 6, 7, 8, 9]))\nprint(common_element([1, 2, 3, 4, 5, 6, 7, 8, 9], [3, 4, 5, 6, 7, 8]))\nprint(common_element([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(common_element([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(common_element([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8]))\nprint(common_element([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9]))\nprint(common_element([], []))\nprint(common_element([], [1, 2, 3, 4, 5, 6, 7, 8]))\nprint(common_element([1, 2, 3, 4, 5, 6, 7, 8], []))\nprint(common_element([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8, 9]))"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert common_element([2,5,1], [1,3,7,6]) == True\nassert common_element([2,5,1], [2,3,7,6]) == False\nassert common_element([], [1,2]) == False\nassert common_element([2,5,1], []) == False\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     median_trapezium(2,4,6) == 4, f\"The result is {median_trapezium(2,4,6)} but should be {4}\"\nassert     median_trapezium(1,2,3) == 3, f\"The result is {median_trapezium(1,2,3)} but should be {3}\"\nassert     median_trapezium(2,4,5) == 4, f\"The result is {median_trapezium(2,4,5)} but should be {4}\"\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint(median_trapezium(2, 3, 4)"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     median_trapezium(1,2,3) == 4\nassert median_trapezium(1,2,3) == 4\nassert median_trapezium(1,2,3) == 4\nassert median_trapezium(1,2,3) == 4\nassert median_trapezium(1,2,3) == 4\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef test_median_trapezium():\n    '''\n    We can use median_trapezium to calculate median length of a trapezium.\n    '''\n    test_cases = [(2,1,1),\n    (5,4,2),\n    (5,6,2),\n    (5,8,3),\n    (5,10,3),\n    (10,5,5),\n    (10,10,6),\n    (20,20,8),\n    (20,22,8),\n    (22,20,8),\n    (22,23,9),\n    (23,22,9),\n    (23,24,10),\n    (24,23,10),\n    (24,25,11),\n    (25,24,11),\n    (25,26,12),\n    (26,25,12),\n    (26,27,13),\n    (27,26,13),\n    (27,28,14),\n    (28,27,14),\n    (28,29,15),\n    (29,28,15),\n    (29,30,16),\n    (30,29,16),\n    (30,31,17),\n    (31,30,17),\n    (31,32,18),\n    (32,31,18),\n    (32,33,19),\n    (33,32,19),\n    (33,34,20),\n    (34,33,20),\n    (34,35,21),\n    (35,34,21),\n    (35,36,22),\n    (36,35,22),\n    (36,37,23),\n    (37,36,23),\n    (37,38,24),\n    (38,37,24),\n    (38,39,25),\n    (39,38,25),\n    (39,40,26),\n    (40,39,26),\n    (40,41,27),\n    (41,40,27),\n    (41,42,28),\n    (42,41,28),\n    (42,43,29),\n    (43,42,29),\n    (43,44,30),\n    (44,43,30),\n    (44,45,31),\n    (45,44,31),\n    (45,46,32),\n    (46,45,32),\n    (46,47,33),\n    (47,46,33),\n    (47,48,34),\n    (48,47,34),\n    (48,49,35),\n    (49,48,35),\n    (49,50,36),\n    (50,49,36),\n    (50,51,37),\n    (51,50,37),\n    (51,52,38),\n    (52,51,38),\n    (52,53,39),\n    (53,52,39),\n    (53,54,40),\n    (54,53,40),\n    (54,55,41),\n    (55,54,41),\n    (55,56,42),\n    (56,55,42),\n    (56,57,43),\n    (57,56,43),\n    (57,58,44),\n    (58,57,44),\n    (58,59,45),\n    (59,58,45),\n    (59,60,46),\n    (60,59,46),\n    (60,61,47),\n    (61,60,47),\n    (61,62,48),\n    (62,61,48),\n    (62,63,49),\n    (63,62,49),\n    (63,64,50),\n    (64,63,50),\n    (64,65,51),\n    (65,64,51),\n    (65,66,52),\n    (66,65,52),\n    (66,67,53),\n    (67,66,53),\n    (67,68,54),\n    (68,67,54),\n    (68,69,55),\n    (69,68,55),\n    (69,70,56),\n    (70,69,56),\n    (70,71,57),\n    (71,70,57),\n    (71,72,58),\n    (72,71,58),\n    (72,73,59),\n    (73,72,59),\n    (73,74,60),\n    (74,73,60),\n    (74,75,61),\n    (75,74,61),\n    (75,76,62),\n    (76,75,62),\n    (76,77,63),\n    (77,76,63),\n    (77,78,64),\n    (78,77,64),\n    (78,79,65),\n    (79,78,65),\n    (79,80,66),\n    (80,79,66),\n    (80,81,67),\n    (81,80,67),\n    (81,82,68),\n    (82,81,68),\n    (82,83,69),\n    (83,82,69),\n    (83,84,70),\n    (84,83,70),\n    (84,85,71),\n    (85,84,71),\n    (85,86,72),\n    (86,85,72),\n    (86,87,73),\n    (87,86,73),\n    (87,88,74),\n    (88,87,74),\n    (88,89,75),\n    (89,88,75),\n    (89,90,76),\n    (90,89,76),\n    (90,91,77),\n    (91,90,77),\n    (91,92,78),\n    (92,91,78),\n    (92,93,79),\n    (93,92,79),\n    (93,94,80),\n    (94,93,80),\n    (94,95,81),\n    (95,94,81),\n    (95,96,82),\n    (96,95,82),\n    (96,97,83),\n    (97,96,83),\n    (97,98,84),\n    (98,97,84),\n    (98,99,85),\n    (99,98,85),\n    (99,100,86),\n    (100,99,86),\n    (100,101,87),\n    (101,100,87),\n    (101,102,88),\n    (102,101,88),\n    (102,103,89),\n    (103,102,89),\n    (103,104,90),\n    (104,103,90),\n    (104,105,91),\n    (105,104,91),\n    (105,106,92),\n    (106,105,92),\n    (106,107,93),\n    (107,106,93),\n    (107,108,94),\n    (108,107,94),\n    (108,109,95),\n    (109,108,95),\n    (109,110,96),\n    (110,109,96),\n    (110,111,97),\n    (111,110,97),\n    (111,112,98),\n    (112,111,98),\n    (112,113,99),\n    (113,112,99),\n    (113,114,100),\n    (114,113,100),\n    (114,115,101),\n    (115,114,101),\n    (115,116,102),\n    (116,115,102),\n    (116,117,103),\n    (117,116,103),\n    (117,118,104),\n    (118,117,104),\n    (118,119,105),\n    (119,118,105),\n    (119,120,106),\n    (120,119,106),\n    (120,121,107),\n    (121,120,107),\n    (121,122,108),\n    (122,121,108),\n    (122,123,109),\n    (123,122,109),\n    (123,124,110),\n    (124,123,110),\n    (124,125,111),\n    (125,124,111),\n    "
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     median_trapezium(1,2,3) == 2\nassert median_trapezium(1,2,3) == 2\nassert median_trapezium(2,1,3) == 2\nassert median_trapezium(2,3,1) == 2\nassert median_trapezium(1,3,2) == 2\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    median_trapezium(1,5,2) == 3\n    median_trapezium(3,2,2) == 2\n    median_trapezium(3,1,2) == 1\n    median_trapezium(6,3,2) == 4\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     median_trapezium(1,1,2) == 2\nassert     median_trapezium(2,1,2) == 2\nassert     median_trapezium(1,2,2) == 2\nassert     median_trapezium(2,2,2) == 2\nassert     median_trapezium(2,3,2) == 2\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef median_trapezium_error(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    \n    This function should always return the correct answer.\n    If the input values do not form a trapezium, return -1.\n    '''\n    pass"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert not(check_greater([], 10)) == 1\nassert check_greater([1, 2, 3, 4], 5) == 0\nassert check_greater([1, 2, 3, 4], 4) == 1\nassert check_greater([1, 2, 3, 4], 3) == 1\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_greater([5, 2, 9, 1], 5) == True, \"The function does not give correct result\"\nassert     check_greater([5, 2, 9, 1], 2) == False, \"The function does not give correct result\"\nassert     check_greater([5, 2, 9, 1], 0) == False, \"The function does not give correct result\"\nassert     check_greater([0, 2, 9, 1], 1) == False, \"The function does not give correct result\"\nassert     check_greater([5, 2, 9, 1], -2) == False, \"The function does not give correct result\"\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_greater([4,5,6,8,9,10], 11)     == True, 'passed'\nassert     check_greater([4,5,6,8,9,10], 7)     == False, 'failed'\nassert     check_greater([4,5,6,8,9,10], 0)     == False, 'failed'\nassert     check_greater([4,5,6,8,9,10], -5)     == False, 'failed'\nassert     check_greater([4,5,6,8,9,10], 5)     == True, 'failed'\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_greater([1,2,3,4], 5)     == False\nassert     check_greater([1,2,3,4], 4)     == True\nassert     check_greater([1,2,3,4], 2)     == True\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_greater([1, 2, 3, 4], 3) == True, \\\n            'Wrong Answer. You should return True'\nassert     check_greater([1, 2, 3, 4], 2) == False, \\\n            'Wrong Answer. You should return False'\nassert     check_greater([1, 1, 1], 2) == False, \\\n            'Wrong Answer. You should return False'\nassert     check_greater([-5, 0, 4], -5) == False, \\\n            'Wrong Answer. You should return False'\nassert     check_greater([4, 5, 6], 4) == True, \\\n            'Wrong Answer. You should return True'\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_greater([1,2,3,4,5], 5) == True\nassert     check_greater([1,2,3,4,5], 4) == True\nassert     check_greater([1,2,3,4,5], 3) == False\nassert     check_greater([1,2,3,4,5], 0) == False\nassert     check_greater([1,2,3,4,5], -4) == True\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef reverse_array(arr):\n    '''\n    Write a function to reverse the elements of the given array in place.\n    '''\n    pass\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_match_one('ababab') == True, \"Wrong answer\"\nassert     text_match_one('aaaaab') == False, \"Wrong answer\"\nassert     text_match_one('ab') == False, \"Wrong answer\"\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ntext_match_one(\"abababaababaababaabaabababababaabababababaababaababaababaabababababaababaabababaabababaababaababaababaababaababababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaababaa"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nassert not text_match_one('ab')\nassert text_match_one('aab')\nassert text_match_one('abb')\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_match_one(\"ab\")\nassert     text_match_one(\"abab\")\nassert     text_match_one(\"ababab\")\nassert     text_match_one(\"abababab\")\nassert     text_match_one(\"ababababab\")\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pass\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pass\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_one('ab') == False, \"Should return False\"\nassert     text_match_one('abcd') == False, \"Should return False\"\nassert     text_match_one('abab') == True, \"Should return True\"\nassert     text_match_one('ababcd') == True, \"Should return True\"\nassert     text_match_one('abcde') == False, \"Should return False\"\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_match_one('') == False, \"not a valid input\"\nassert     text_match_one('ab') == False, \"not a valid input\"\nassert     text_match_one('a') == True, \"not a valid input\"\nassert     text_match_one('ab') == True, \"not a valid input\"\nassert     text_match_one('aab') == True, \"not a valid input\"\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_match_one('ab') == True, 'Should Match ab'\nassert     text_match_one('abc') == False, 'Should Not Match abc'\nassert     text_match_one('abcba') == True, 'Should Match abcba'\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_one(\"abcb\") == True\nassert     text_match_one(\"bbb\") == True\nassert     text_match_one(\"bba\") == True\nassert     text_match_one(\"abb\") == True\nassert     text_match_one(\"bab\") == False\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     last_Digit(123) == 2\nassert     last_Digit(19) == 5\nassert     last_Digit(0) == 0\n\n\ndef even_Odd(n) :\n    '''\n    Write a python function to find the even and odd digit of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     last_Digit(7) == 7,    \"Should be 7\"\nassert     last_Digit(0) == 0,    \"Should be 0\"\nassert     last_Digit(6) == 6,    \"Should be 6\"\nassert     last_Digit(-1) == -1,    \"Should be -1\"\nassert     last_Digit(-100) == -1,    \"Should be -1\"\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     last_Digit(100) == 1\nassert     last_Digit(56789) == 5\nassert     last_Digit(10) == 0\n\ndef last_Digit_1(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert last_Digit(10) == 1\nassert last_Digit(25) == 5\nassert last_Digit(145) == 5\nassert last_Digit(35345345345345345345345) == 5\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     last_Digit(5) == 5\nassert last_Digit(24) == 1\nassert last_Digit(123) == 3\nassert last_Digit(20) == 0\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef isOdd(n):\n    '''\n    Write a python function to check whether a number is odd or not.\n    '''\n    pass\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     last_Digit(11) == 1, \"last_Digit(11) is not correct\"\nassert     last_Digit(10111) == 1, \"last_Digit(10111) is not correct\"\nassert     last_Digit(10) == 0, \"last_Digit(10) is not correct\"\nassert     last_Digit(11) == 1, \"last_Digit(11) is not correct\"\nassert     last_Digit(10111) == 1, \"last_Digit(10111) is not correct\"\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     last_Digit(10010) == 2\nassert     last_Digit(9) == 9\nassert     last_Digit(12512) == 5\nassert     last_Digit(7) == 7\nassert     last_Digit(0) == 0\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     last_Digit(1)    == 1, \"Sample Test Failed\"\nassert     last_Digit(10)    == 0, \"Sample Test Failed\"\nassert     last_Digit(101)    == 1, \"Sample Test Failed\"\nassert     last_Digit(1000)    == 3, \"Sample Test Failed\"\nassert     last_Digit(10000)    == 0, \"Sample Test Failed\"\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     last_Digit(22) == 2, \"Last digit is not 2\"\nassert     last_Digit(33) == 3, \"Last digit is not 3\"\nassert     last_Digit(44) == 4, \"Last digit is not 4\"\nassert     last_Digit(55) == 5, \"Last digit is not 5\"\nassert     last_Digit(66) == 6, \"Last digit is not 6\"\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     neg_nos([1,-1,2,-4,5,7,7,8,9,4,5,6]) == [-1,1,2,4,5,-7,-7,8,9,4,5,6]\nassert     neg_nos([0,0,0,0,0,0,0,0,0,0]) == [-0,-0,-0,-0,-0,-0,-0,-0,-0,-0]\nassert     neg_nos([]) == []\nassert     neg_nos([1,2,3,4,5,6,7,8,9]) == [-1, -2, -3, -4, -5, -6, -7, -8, -9]\nassert     neg_nos([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nprint(\"Coding complete.\")\nprint()\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nprint('PASS' if neg_nos([1,-2,3,-4,-5]) == [-1,-2,-3,-4,-5] else 'FAIL')\nprint('PASS' if neg_nos([]) == [] else 'FAIL')\nprint('PASS' if neg_nos([0]) == [0] else 'FAIL')\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    neg_nos([-6, -5, -4, -3, -2, -1])\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     neg_nos([1,-2,3,-4,5,-6,7]) == [-1, -2, -3, -4, -5, -6, -7], \"Error\"\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     neg_nos([]) == []\nassert     neg_nos([-1, -2, -3, -4, -5]) == [-5, -4, -3, -2, -1]\nassert     neg_nos([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == [-10, -9, -8, -7, -6, -5, -4, -3, -2, -1]\nassert     neg_nos([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21]) == [-20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1]\nassert     neg_nos([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -32, -33, -34, -35, -36, -37, -38, -39, -40, -41, -42, -43, -44, -45, -46, -47, -48, -49, -50, -51, -52, -53, -54, -55, -56, -57, -58, -59, -60, -61, -62, -63, -64, -65, -66, -67, -68, -69, -70, -71, -72, -73, -74, -75, -76, -77, -78, -79, -80, -81, -82, -83, -84, -85, -86, -87, -88, -89, -90, -91, -92, -93, -94, -95, -96, -97, -98, -99, -100, -101, -102, -103, -104, -105, -106, -107, -108, -109, -110, -111, -112, -113, -114, -115, -116, -117, -118, -119, -120, -121, -122, -123, -124, -125, -126, -127, -128, -129, -130, -131, -132, -133, -134, -135, -136, -137, -138, -139, -140, -141, -142, -143, -144, -145, -146, -147, -148, -149, -150, -151, -152, -153, -154, -155, -156, -157, -158, -159, -160, -161, -162, -163, -164, -165, -166, -167, -168, -169, -170, -171, -172, -173, -174, -175, -176, -177, -178, -179, -180, -181, -182, -183, -184, -185, -186, -187, -188, -189, -190, -191, -192, -193, -194, -195, -196, -197, -198, -199, -200, -201, -202, -203, -204, -205, -206, -207, -208, -209, -210, -211, -212, -213, -214, -215, -216, -217, -218, -219, -220, -221, -222, -223, -224, -225, -226, -227, -228, -229, -230, -231, -232, -233, -234, -235, -236, -237, -238, -239, -240, -241, -242, -243, -244, -245, -246, -247, -248, -249, -250, -251, -252, -253, -254, -255, -256, -257, -258, -259, -260, -261, -262, -263, -264, -265, -266, -267, -268, -269, -270, -271, -272, -273, -274, -275, -276, -277, -278, -279, -280, -281, -282, -283, -284, -285, -286, -287, -288, -289, -290, -291, -292, -293, -294, -295, -296, -297, -298, -299, -300, -301, -302, -303, -304, -305, -306, -307, -308, -309, -310, -311, -312, -313, -314, -315, -316, -317, -318, -319, -320, -321, -322, -323, -324, -325, -326, -327, -328, -329, -330, -331, -332, -333, -334, -335, -336, -337, -338, -339, -340, -341, -342, -343, -344, -345, -346, -347, -348, -349, -350, -351, -352, -353, -354, -355, -356, -357, -358, -359, -360, -361, -362, -363, -364, -365, -366, -367, -368, -369, -370, -371, -372, -373, -374, -375, -376, -377, -378, -379, -380, -381, -382, -383, -384, -385, -386, -387, -388, -389, -390, -391, -392, -393, -394, -395, -396, -397, -398, -399, -400, -401, -402, -403, -404, -405, -406, -407, -408, -409, -410, -411, -412, -413, -414, -415, -416, -417, -418, -419, -420, -421, -422, -423, -424, -425, -426, -427, -428, -429, -430, -431, -432, -433, -434, -435, -436, -437, -438, -439, -440, -441, -442, -443, -444, -445, -446, -447, -448, -449, -450, -451, -452, -453, -454, -455, -456, -457, -458, -459, -460, -461, -462, -463, -464, -465, -466, -467, -468, -469, -470, -471, -472, -473, -474, -475, -476, -477, -478, -479, -480, -481, -482, -483, -484, -485, -486, -487, -488, -489, -490, -491, -492, -493, -494, -495, -496, -497, -498, -499, -500, -501, -502, -503, -504, -505, -506, -507, -508, -509, -510, -511, -512, -513, -514, -515, -516, -517, -518, -519, -520, -521, -522, -523, -524, -525, -526, -527, -528, -529, -530, -531, -532, -533, -534, -535, -536, -537, -538, -539, -540, -541, -542, -543, -544, -545, -546, -547, -548, -549, -550, -551, -552, -553, -554, -555, -556, -557, -558, -559, -560, -561, -562, -563, -564, -565, -566, -567, -568, -569, -570, -571, -572, -573, -574, -575, -576, -577"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     neg_nos([]) == []\nassert     neg_nos([3, -1]) == [-1, -3]\nassert     neg_nos([3, -1, -2, -4]) == [-1, -3, -4, -2]\nassert     neg_nos([1, 2, -3, -4, -5, -6]) == [-1, -3, -4, -6, -5, -2]\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     neg_nos([1,2,3,-4]) == [-1,-2,-3,4]\nassert     neg_nos([-1,2,-3,4]) == [-1,-2,-3,4]\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     neg_nos([1,2,3,4]) == [-1,-2,-3,-4]\nassert     neg_nos([-1,-2,-3,-4]) == [-1,-2,-3,-4]\nassert     neg_nos([-1,-2,4]) == [-1,-2,-4]\nassert     neg_nos([1,-2,-3]) == [-1,-2,-3]\nassert     neg_nos([-1,2,3,4]) == [-1,-2,3,4]\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     neg_nos([1,2,3,-4,5,-6]) == [-1,-2,-3,4,-5,-6]\nassert     neg_nos([-2,-3,4,5,-6]) == [-2,-3,4,5,-6]\nassert     neg_nos([-2,-3,-4,5,-6]) == [-2,-3,-4,5,-6]\nassert     neg_nos([-2,-3,4,5,6]) == [-2,-3,4,5,6]\nassert     neg_nos([0]) == [0]\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert remove_odd('hahahahha') == 'hhahahah'\nassert remove_odd('h') == 'h'\nassert remove_odd('a') == ''\nassert remove_odd('aa') == ''\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_odd(\"123\") == \"1\"\nassert     remove_odd(\"2234\") == \"23\"\nassert     remove_odd(\"1221\") == \"21\"\nassert     remove_odd(\"1221\") == \"21\"\nassert     remove_odd(\"1221\") == \"21\"\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_odd(\"\") == \"\"\nassert     remove_odd(\"a\") == \"\"\nassert     remove_odd(\"abc\") == \"ab\"\nassert     remove_odd(\"abb\") == \"ab\"\nassert     remove_odd(\"abcc\") == \"abcc\"\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_odd(\"Code\")    == \"e\"\nassert     remove_odd(\"abcde\")    == \"abc\"\nassert     remove_odd(\"abde\")    == \"\"\nassert     remove_odd(\"\")    == \"\"\nassert     remove_odd(\"abcd\")    == \"abcd\"\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_odd(\"abcdefg\") == \"aceg\", \"Should remove the odd characters\"\nassert     remove_odd(\"1ceg\") == \"aceg\", \"Should remove the odd characters\"\nassert     remove_odd(\"abcde\") == \"abcde\", \"Should not remove any characters\"\nassert     remove_odd(\"3eg\") == \"3eg\", \"Should not remove any characters\"\n\ndef is_palindrome(str1):\n    '''\n    Write a function to check if a string is a palindrome.\n    '''\n    pass\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_odd('aabcdef') == 'abcdef'\nassert     remove_odd('aaba') == 'ab'\nassert     remove_odd('ba') == 'b'\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_odd(\"abcde\") == \"abcd\", \"Wrong return type\"\nassert     remove_odd(\"abcde\") == \"abcd\", \"Wrong return type\"\nassert     remove_odd(\"abcde\") == \"bcde\", \"Wrong return type\"\nassert     remove_odd(\"abcde\") == \"acde\", \"Wrong return type\"\nassert     remove_odd(\"abcde\") == \"abcde\", \"Wrong return type\"\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef palindrome_string(str1):\n    '''\n    Given a string, write a function to check if it is a palindrome.\n    '''\n    pass\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_bidirectional([(1,1),(2,1),(1,2),(2,2)]) == 2, \"count_bidirectional fails\"\nassert     count_bidirectional([(1,1),(2,1),(1,2),(2,2),(1,1)]) == 1, \"count_bidirectional fails\"\nassert     count_bidirectional([(1,2),(2,1),(1,2),(2,2)]) == 2, \"count_bidirectional fails\"\nassert     count_bidirectional([(1,1),(2,1),(1,2),(2,2),(1,1)]) == 1, \"count_bidirectional fails\"\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_bidirectional([(1, 2), (2, 3), (1, 3), (2, 4)]) == 2\nassert     count_bidirectional([(1, 2), (3, 4), (1, 4), (2, 3)]) == 1\nassert     count_bidirectional([(1, 2), (1, 3), (1, 4), (2, 3)]) == "
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_bidirectional([(1, 1), (2, 2), (3, 3), (1, 4)]) == 4\nassert     count_bidirectional([(1, 1), (2, 2), (3, 3), (1, 4), (1, 5)]) == 5\nassert     count_bidirectional([(1, 1), (2, 2), (3, 3), (4, 4), (1, 5)]) == 5\nassert     count_bidirectional([(1, 1), (2, 2), (3, 3), (4, 4), (1, 5), (1, 6)]) == 6\nassert count_bidirectional([(1, 1), (2, 2), (3, 3), (4, 4), (1, 5), (1, 6)]) == 6\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     count_bidirectional([(1,2),(3,4)]) == 0,'should return 0'\nassert     count_bidirectional([(1,2),(3,4),(1,3)]) == 1,'should return 1'\n\ndef sum_generator_tuple(test_list):\n    '''\n    Write a generator that returns the sum of all items in the given list.\n    '''\n    # sum of a list of integers\n    return sum(test_list)\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert count_bidirectional([(\"Bob\", \"Jobs\", \"M\", \"1996\"), (\"Tom\", \"Smith\", \"M\", \"1999\"), (\"Kurt\", \"Brown\", \"M\", \"1970\"), (\"Carl\", \"Smith\", \"M\", \"1996\"), (\"Carl\", \"Jones\", \"M\", \"1998\"), (\"Tom\", \"Jones\", \"F\", \"1999\"), (\"Kim\", \"Jones\", \"F\", \"1998\"), (\"Roy\", \"Brown\", \"M\", \"1980\"), (\"Kurt\", \"Brown\", \"M\", \"1970\"), (\"Bob\", \"Jobs\", \"M\", \"1996\"), (\"Kurt\", \"Smith\", \"M\", \"1996\"), (\"Tom\", \"Smith\", \"M\", \"1999\"), (\"Kurt\", \"Jones\", \"M\", \"1998\"), (\"Kim\", \"Jones\", \"F\", \"1998\"), (\"Roy\", \"Brown\", \"M\", \"1980\")]) == 6\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_bidirectional([]) == 0, \"Empty list\"\nassert     count_bidirectional([(1, 2), (1, 2)]) == 2, \"Same item twice\"\nassert     count_bidirectional([(1, 2), (1, 3)]) == 1, \"Same item twice\"\nassert     count_bidirectional([(1, 2), (1, 2), (1, 2)]) == 3, \"Same item twice\"\nassert     count_bidirectional([(1, 2), (1, 2), (1, 2)]) == 3, \"Same item twice\"\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_bidirectional([]) == 0, \"Empty list\"\nassert     count_bidirectional([(2, 3), (2, 3), (4, 5)]) == 3, \"One-to-one\"\nassert     count_bidirectional([(2, 3), (3, 2), (4, 5)]) == 2, \"One-to-many\"\nassert     count_bidirectional([(2, 3), (3, 2), (4, 5), (5, 2)]) == 2, \"Many-to-one\"\nassert     count_bidirectional([(2, 3), (3, 2), (4, 5), (5, 2), (6, 4)]) == 4, \"One-to-many\"\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef count_tuple_count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    pass\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert count_bidirectional(    [ (0,1), (1,2), (2,3), (3,4), (4,5), (5,6) ]    ) == 3\nassert count_bidirectional(    [ (1,2), (2,3), (3,4), (4,5), (5,6), (6,0) ]    ) == 4\nassert count_bidirectional(    [ (1,2), (2,3), (3,4), (4,5), (5,6), (6,7) ]    ) == 5\nassert count_bidirectional(    [ (1,2), (2,3), (3,4), (4,5), (5,6), (6,7), (7,0) ]    ) == 6\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_bidirectional([(0, 1), (1, 2), (0, 3), (3, 4), (4, 5), (5, 6), (1, 7), (7, 8), (8, 9), (9, 0)]) == 6\nassert     count_bidirectional([(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (7, 8), (8, 9), (9, 0)]) == 0\n\nprint('The function works.')\nprint('The output should be 6.')\n\n'''\nExpected output:\n\nThe function works.\nThe output should be 6.\n''"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nmultiple_to_single([10, 20, 30, 40]) == '100', 'function fails'\nassert multiple_to_single([]) == '0', 'function fails'\nassert multiple_to_single([1]) == '1', 'function fails'\nassert multiple_to_single([1, 2, 3, 4]) == '1234', 'function fails'\nassert multiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9]) == '123456789', 'function fails'\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     multiple_to_single([1,2,3,4]) == 24\nassert     multiple_to_single([2,4,6,8]) == 48\nassert     multiple_to_single([1,3,5,7]) == 123\nassert     multiple_to_single([1,3,5,7,9]) == 12345\nassert     multiple_to_single([9,9,9,9]) == 945\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     multiple_to_single([1,2,3,4,5]) == 15, \"Should be 15\"\nassert     multiple_to_single([1,2,3,4,5,5]) == 25, \"Should be 25\"\nassert     multiple_to_single([1,2,3,4,5,6]) == 45, \"Should be 45\"\nassert     multiple_to_single([1,2,3,4,5,7]) == 55, \"Should be 55\"\nassert     multiple_to_single([1,2,3,4,5,6,6]) == 45, \"Should be 45\"\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     multiple_to_single([1,2,3,4,5,6]) == 15\nassert     multiple_to_single([1,2,3,4,5,6]) == 123456\nassert     multiple_to_single([1,2,3,4]) == 24\nassert     multiple_to_single([1,2,3,4,5,6]) == 15\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     multiple_to_single([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 45, 'incorrect'\nassert     multiple_to_single([]) == 0, 'incorrect'\nassert multiple_to_single([10]) == 10, 'incorrect'\nassert multiple_to_single(['1', '2', '3', '4']) == '123', 'incorrect'\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     multiple_to_single([1, 2, 3, 4]) == 8\nassert     multiple_to_single([]) == 0\nassert     multiple_to_single([1, 2, 3, 4, 5, 6]) == 123\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     multiple_to_single([1,2,3]) == 6\nassert     multiple_to_single([1,2]) == 2\nassert     multiple_to_single([1,2,3,4,5]) == 15\nassert     multiple_to_single([1,2,3,4]) == 12\nassert     multiple_to_single([1,2,3,4,5,6]) == 30\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     multiple_to_single([1,2,3,4,5]) == 15, multiple_to_single([1,2,3,4,5])\nassert multiple_to_single([1,2,3,4,5,6]) == 21, multiple_to_single([1,2,3,4,5,6])\nassert multiple_to_single([1,2,3,4,5,6,7]) == 42, multiple_to_single([1,2,3,4,5,6,7])\nassert multiple_to_single([1,2,3,4,5,6,7,8,9]) == 72, multiple_to_single([1,2,3,4,5,6,7,8,9])\nassert multiple_to_single([1,2,3,4,5,6,7,8,9,10]) == 84, multiple_to_single([1,2,3,4,5,6,7,8,9,10])\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     multiple_to_single([1,2,3,4,5]) == 15\nassert     multiple_to_single([1,3,2,3,5]) == 20\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     multiple_to_single([])     ==     0\nassert     multiple_to_single([1, 2])     ==     123\nassert     multiple_to_single([1, 2, 3])     ==     123\nassert     multiple_to_single([1, 2, -3])     ==     -123\nassert     multiple_to_single([1, -2, 3])     ==     -123\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_adverb_position('My sister has a dog.') == (True, [(0, 8), (16, 20), (21, 23)])\nassert     find_adverb_position('My sister has a cat.') == (True, [(0, 8), (16, 20), (21, 23)])\nassert     find_adverb_position('My sister has a cow.') == (False, None)\nassert     find_adverb_position('My sister has a cat.') == (False, None)\nassert     find_adverb_position('My sister has a dog.') == (False, None)\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_adverb_position(\"You are an awesome chef.\") == {'adverb': 'an', 'position': 14}\nassert     find_adverb_position(\"I am the best chef in the family.\") == {'adverb': 'the', 'position': 19}\nassert     find_adverb_position(\"I am a man on the right side.\") == {'adverb': 'on', 'position': 13}\nassert     find_adverb_position(\"I am a man on the left side.\") == {'adverb': 'on', 'position': 18}\nassert     find_adverb_position(\"I am a boy on the right side.\") == {'adverb': 'on', 'position': 14}\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_adverb_position(\"The sky is blue.\") == True\nassert     find_adverb_position(\"The dog's legs are becoming shorter and longer.\") == True\nassert     find_adverb_position(\"The dog is a dog, but the cat is a cat.\") == True\nassert     find_adverb_position(\"The cat is a cat, but the dog is a dog.\") == False\nassert     find_adverb_position(\"The cat is a dog, but the dog is a cat.\") == False\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_adverb_position('There are no great horses today.') == [('there', '1'), ('are', '5')]\nassert     find_adverb_position('There is a camel here.') == [('there', '1'), ('is', '5')]\nassert     find_adverb_position('There is a camel here.') == [('there', '1'), ('is', '5')]\nassert     find_adverb_position('There are no great horses today.') == [('there', '1'), ('are', '5')]\nassert     find_adverb_position('There is a camel here.') == [('there', '1'), ('is', '5')]\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_adverb_position('the first adverb is after the noun and then the second adverb is after the noun') == True\nassert     find_adverb_position('the first adverb is after the noun and then the second adverb is after the noun') == False\nassert     find_adverb_position('the first adverb is after the noun and then the second adverb is after the noun') == False\nassert     find_adverb_position('the first adverb is after the noun and then the second adverb is after the noun') == False\nassert     find_adverb_position('the first adverb is after the noun and then the second adverb is after the noun') == False\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nassert find_adverb_position(\n    \"A very nice day.\") == (['very','nice'], ['day'])\nassert find_adverb_position(\n    \"The car accident.\") == (['accident'], ['car'])\nassert find_adverb_position(\n    \"A very big accident.\") == (['big'], ['accident'])\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_adverb_position(\"The movie is about to begin.\") == {'ADV':[0]}\nassert     find_adverb_position(\"The movie is about to begin. It began in around the 16th century.\") == {'ADV':[0, 27]}\nassert     find_adverb_position(\"The movie is about to begin. It began in around the 16th century.\") == {'ADV':[0, 27]}\nassert     find_adverb_position(\"The movie was about to begin. It began in around the 16th century.\") == {'ADV':[0, 27]}\nassert     find_adverb_position(\"The movie was about to begin. It began in around the 16th century.\") == {'ADV':[0, 27]}\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_adverb_position(\"This is a simple sentence\") == [(0, 2)]\nassert find_adverb_position(\"This is a simple sentence. This is too.\") == [(0, 3), (7, 7)]\nassert find_adverb_position(\"This is a simple sentence. This is too, and this is too much\") == [(0, 3), (7, 14), (17, 17)]\nassert find_adverb_position(\"This is a simple sentence. This is too, and this is too much. But it's still too much.\") == [(0, 3), (7, 14), (17, 21), (25, 25)]\nassert find_adverb_position(\"This is a simple sentence. This is too, and this is too much. But it's still too much. It's not really too much\") == [(0, 3), (7, 14), (17, 21), (25, 34)]\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_adverb_position('The book was great!') == {0: 0, 4: 4}\nassert     find_adverb_position('The book was a bit worse!') == {0: 0, 6: 6}\nassert     find_adverb_position('The book was perfect!') == {0: 0, 7: 7}\nassert     find_adverb_position('The book was a bit better!') == {0: 0, 7: 7}\nassert     find_adverb_position('The book was a bit worse!') == {0: 0, 7: 7}\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     surfacearea_cube(2) == 8\nassert     surfacearea_cube(3) == 18\nassert     surfacearea_cube(4) == 24\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef surfacearea_octahedron(a, b, c):\n    '''\n    Write a function to find the surface area of an octahedron of given size.\n    '''\n    pass\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nsurfacearea_cube(4) == \n    16\nassert surfacearea_cube(6) == \n    34\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere with a given radius.\n    '''\n    pass\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     surfacearea_cube(2) == 6\nassert     surfacearea_cube(5) == 20\nassert     surfacearea_cube(10) == 385\nassert     surfacearea_cube(1) == 0\nassert     surfacearea_cube(0) == "
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     surfacearea_cube(3) == 12\nassert surfacearea_cube(4) == 20"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     surfacearea_cube(5) == 50.0\nassert     surfacearea_cube(6) == 54.8\nassert     surfacearea_cube(7) == 58.6\nassert     surfacearea_cube(8) == 62.4\nassert     surfacearea_cube(9) == 66.4\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     positive_count([2, 1, 3, 5, -1, 6]) == 0.666666666666667\nassert     positive_count([-2, 3, -4, 5]) == 0.25\n\ndef find_mean(nums):\n    '''\n    Write a function to find the mean of a list of numbers.\n    '''\n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     positive_count([1,2,3,4,5]) == 4/5\nassert     positive_count([0,1,2,3,4]) == 4/5\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    positive_count([1,2,-3,4,-5,6]) == 0.6\n    assert positive_count([-2,-1,0,1,2]) == 1.2\n\ndef palindrome_count(nums):\n    '''\n    Given a string of any length, write a function that returns the proportion of times that the\n    string appears in a palindrome.\n    '''\n    pass\n\ndef palindrome_count2(s):\n    '''\n    Given a string of any length, write a function that returns the proportion of times that the\n    string appears in a palindrome.\n    '''\n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef array_sum(arr):\n    '''\n    Write a function to find the sum of all the elements in an array of integers.\n    '''\n    pass\n\ndef array_sum_even(arr):\n    '''\n    Write a function to find the sum of all the even elements in an array of integers.\n    '''\n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef find_duplicates(arr):\n    '''\n    Given an array of integers, find the indices of any pair of numbers in the array that sum to a duplicate.\n    '''\n    pass\n\ndef find_duplicates(arr):\n    '''\n    Given an array of integers, find the indices of any pair of numbers in the array that sum to a duplicate.\n    '''\n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef sum_of_array(nums):\n    '''\n    Write a function to return the sum of all items in an array.\n    '''\n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     positive_count([1,2,3,4,-5]) == 2/3, \\\n        positive_count([-1,2,3,4,-5]) == 1/3, \\\n        positive_count([1,-2,3,4,-5]) == 0, \\\n        positive_count([-1,2,-3,4,-5]) == 0, \\\n        positive_count([-1,2,3,4,5]) == 0.5, \\\n        positive_count([-1,2,-3,4,5]) == 0.5\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     positive_count([1,2,3,-4,-5,6]) == 0.2, 'incorrect'\nassert     positive_count([1,2,3,4,5,-6]) == 0.5, 'incorrect'\nassert     positive_count([1,2,3,4,5,6,7]) == 1, 'incorrect'\nassert     positive_count([1,-2,-3,4,-5,-6]) == -1, 'incorrect'\nassert     positive_count([1,-2,3,-4,-5,-6]) == 0.2, 'incorrect'\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef non_decreasing_array(nums):\n    '''\n    Write a function that checks if given array is non decreasing.\n    '''\n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     positive_count([1,2,3,4]) == 0.25, \"Wrong answer\"\nassert     positive_count([-1,1]) == 1, \"Wrong answer\"\nassert     positive_count([-2,-1]) == 0.5, \"Wrong answer\"\nassert     positive_count([]) == 0, \"Wrong answer\"\nassert     positive_count([1]) == 1, \"Wrong answer\"\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     largest_neg([-2,-3,-4,-5]) == -5\nassert     largest_neg([-2,1,-3,0,-4]) == -4\nassert     largest_neg([-2,-3,-4,-5]) == -4\nassert     largest_neg([-2,0,1,2]) == 0\nassert     largest_neg([]) == None\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     largest_neg([-10, -5, -2, -8, -10]) == -10, 'First'\nassert     largest_neg([-10, -5, -2, -8, -10, -50]) == -50, 'Second'\nassert     largest_neg([-10, -5, -2, -8, -10, -50, -3, -2, -1]) == -50, 'Third'\nassert     largest_neg([]) == None, 'Empty'\nassert     largest_neg([2, 5, -1, -10, -7, 8, 9]) == 9, 'Random'\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     largest_neg([-2, -5, 6, -4]) == -5, \"Wrong answer for largest_neg([-2, -5, 6, -4])\"\nassert largest_neg([-2, -5, -6]) == -6, \"Wrong answer for largest_neg([-2, -5, -6])\"\nassert largest_neg([-2, -5, -6, -4, -1]) == -4, \"Wrong answer for largest_neg([-2, -5, -6, -4, -1])\"\nassert largest_neg([-2, -5, -6, -4]) == -2, \"Wrong answer for largest_neg([-2, -5, -6, -4])\"\nassert largest_neg([-2, -5, -6]) == -5, \"Wrong answer for largest_neg([-2, -5, -6])\"\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     largest_neg([-5, -5, -5]) == -5, \"Should be: -5\"\nassert     largest_neg([-4, 5, -2, -4]) == -4, \"Should be: -4\"\nassert     largest_neg([-1, -2, -2, -3]) == -3, \"Should be: -3\"\nassert     largest_neg([-1, -2, -4]) == -4, \"Should be: -4\"\nassert     largest_neg([1, 2, 3, 4]) == 4, \"Should be: 4\"\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     largest_neg([1,-2,3,-4,-5,6]) == 6\nassert     largest_neg([-4,-3,-2,-1]) == -1\nassert     largest_neg([-5,-4,3,4]) == -5\nassert     largest_neg([-6,-3,2,-5,-5]) == -5\nassert     largest_neg([-7,-4,-2,5,-7]) == 5\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     largest_neg([-3, -10, -5, -4]) == -5\nassert     largest_neg([-3, -2, -5, -4]) == -4\nassert     largest_neg([-3, -1, -5, -4]) == -1\nassert     largest_neg([-3, -10, -10, -5, -4]) == -10\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     largest_neg([10, -10, -20, -3, 4, 5]) == -20\nassert     largest_neg([-1, -2, -3, -4, -5]) == -1\nassert     largest_neg([-5, -4, -3, -2, -1]) == -1\nassert     largest_neg([10, -10, -20, -3, 4, -5]) == -10\nassert     largest_neg([-1, -2, -3, -4, -5, 10]) == -5\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert largest_neg([2,-6,-5,0]) == -5\n\ndef largest_pos(list1):\n    '''\n    Write a python function to find the largest positive number from the given list.\n    '''\n    pass\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert "
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     trim_tuple([(1, 2), (3, 4), (5, 6), (7, 8)], 3) == [(1, 3), (4, 5), (6, 7)]\nassert     trim_tuple([(1, 2), (3, 4), (5, 6), (7, 8)], 2) == [(1, 2), (3, 4)]\nassert     trim_tuple([(1, 2), (3, 4), (5, 6), (7, 8)], 1) == [(1, 2), (3, 4), (5, 6), (7, 8)]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     trim_tuple([[],(),(),(),()], 3) == [[],(),()]\nassert     trim_tuple([[1,2,3,4,5],(),(),()], 2) == ([1,2,3,4,5],())\nassert     trim_tuple([(1,2),(3,4),(),(),()], 3) == ((1,2),(3,4))\nassert     trim_tuple([(1,2,3),(4,5,6),(),(),()], 2) == ((1,2),(4,5,6))\nassert     trim_tuple([(1,2),(3,4),(5,6,7),(),(),()], 3) == ((1,2),(3,4))\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     trim_tuple([(1,2), (1,3,4), (1,2,3,4)], K=1) == [(1,2), (1,3,4)]\nassert     trim_tuple([(1,2,3,4), (1,2), (1,3,4)], K=2) == [(1,2,3,4)]\nassert     trim_tuple([(1,2,3), (1,2), (1,3,4)], K=3) == [(1,2,3)]\nassert     trim_tuple([(1,2,3,4), (1,2), (1,3,4)], K=0) == [(1,2,3,4)]\nassert     trim_tuple([(1,2,3,4), (1,2), (1,3,4)], K=-1) == [(1,2,3,4)]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     trim_tuple([(1, 2), (3, 4), (5, 6)], 2) ==    [(1, 2), (3, 4)]\nassert     trim_tuple([(1, 2), (3, 4), (5, 6)], 1) ==    [(1, 2)]\nassert     trim_tuple([(1, 2), (3, 4), (5, 6)], 0) ==    [(1, 2), (3, 4), (5, 6)]\n\ndef max_in_tuple(test_list):\n    '''\n    Write a function to return the maximum value in a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     trim_tuple(['a','b','c','d','e','f','g','h','i','j'], 3) == ['a','b','c','d','e','f','g']\nassert     trim_tuple(['a','b','c','d','e','f','g','h','i','j'], 2) == ['a','b','c','d','e','f','g']\nassert     trim_tuple(['a','b','c','d','e','f','g','h','i','j'], 1) == ['a','b','c','d','e','f','g']\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     trim_tuple([[1, 2, 3, 4], (1, 2, 3), (1, 2, 3)], K=2) == ([[1, 2, 3, 4], 1, 2], (1, 2, 3), 1)\nassert     trim_tuple([[1, 2, 3, 4], (1, 2, 3), (1, 2, 3)], K=1) == ([[1, 2, 3, 4], 1, 2], (1, 2, 3), 1)\nassert     trim_tuple([[1, 2, 3, 4], (1, 2, 3), (1, 2, 3)], K=0) == ([[1, 2, 3, 4], (1, 2, 3)], (1, 2, 3), (1, 2, 3))\nassert     trim_tuple([[1, 2, 3, 4], (1, 2, 3), (1, 2, 3)], K=4) == ([[1, 2, 3, 4], (1, 2, 3)], (1, 2, 3), 1)\nassert     trim_tuple([[1, 2, 3, 4], (1, 2, 3), (1, 2, 3)], K=-2) == ([[1, 2, 3, 4], (1, 2, 3)], (1, 2, 3), 1)\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     trim_tuple([(1,2,3,4), (5,6,7,8)], 3) == ((1,2),(5,6))\nassert     trim_tuple([(1,2,3,4), (5,6,7,8)], 4) == ((1,2,3),(5,6,7,8))\nassert     trim_tuple([(1,2,3,4), (5,6,7,8)], 5) == ((1,2,3,4),)\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     trim_tuple([1,2,3,4,5], 2) == (1,3,4,5), \"Error in trim_tuple\"\nassert     trim_tuple([1,2,3,4,5], 1) == (1,2,3,4,5), \"Error in trim_tuple\"\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     trim_tuple([('a',2,3),('b',4,5),('c',6)], 1) == \\\n        [('a',2,3),('b',4,5),('c',6)]\nassert trim_tuple([('a',2,3),('b',4,5),('c',6)], 2) == \\\n        [('a',2,3),('c',6)]\nassert trim_tuple([('a',2,3),('b',4,5),('c',6)], 3) == \\\n        [('b',4,5),('c',6)]\nassert trim_tuple([('a',2,3),('b',4,5),('c',6)], 4) == \\\n        [('a',2,3),('c',6)]\nassert trim_tuple([('a',2,3),('b',4,5),('c',6)], 5) == \\\n        [('b',4,5),('c',6)]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef print_tuples(test_list):\n    '''\n    Write a function to print all tuples in the given tuple list.\n    '''\n    pass\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     index_multiplication((1, 2, 3, 4), (2, 3, 4, 5)) == (2, 6, 12, 20)\nassert     index_multiplication((1, 2, 3), (2, 3, 4, 5, 6)) == (2, 6, 6, 24, 24)"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     index_multiplication((1,2,3),(4,5,6)) == ((1*4),(2*5),(3*6))\nassert     index_multiplication((3,5,7),(8,9,10)) == ((3*8),(5*9),(7*10))\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    index_multiplication((1,2,3), (3,5,7)) == (3,10,27)\n    index_multiplication((1,2,3), (3,5,7,9)) == (3,10,27,27)\n    index_multiplication((1,2,3), (3,5,7,9,5)) == (3,10,27,27,25)\n\n\ndef test_fibonacci():\n    '''\n    Write a function which takes a number and returns fibonacci of that number.\n    '''\n    pass\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     index_multiplication((1,2),(3,4)) == (1,3), \"index_multiplication is incorrect\"\nassert     index_multiplication((1,2,3),(3,4,5)) == (1,3,6), \"index_multiplication is incorrect\"\nassert     index_multiplication((),(1,2,3)) == (), \"index_multiplication is incorrect\"\nassert     index_multiplication((2,),(1,2,3)) == (2,1,2,3), \"index_multiplication is incorrect\"\nassert     index_multiplication((),()) == (), \"index_multiplication is incorrect\"\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     index_multiplication((1,2,3), (1,2,3)) == (1,4,9)\nassert     index_multiplication((-1,-2,-3), (1,2,3)) == (-2,-4,-6)\nassert     index_multiplication((-10,-20,-30), (1,2,3)) == (-100,-200,-300)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     index_multiplication((0, 1, 2, 3, 4), (2, 3, 4, 5, 6)) == (0, 10, 18, 27, 36)\nassert     index_multiplication((-1, -2, -3, -4), (3, 2, 1, 0)) == (0, 0, 0, 0)\n\n\ndef multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform multiplication of tuple elements in the given two tuples.\n    '''\n    pass\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     index_multiplication((1,2,3,4,5),(6,7,8,9,10)) == ((1,2,3,4,5),(6,12,18,30,60))\nassert     index_multiplication((1,2,3,4,5),(8,2,1,8,8)) == ((1,2,3,4,5),(8,4,8,16,32))\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ntest_tup1 = (1, 2, 3, 4, 5)\ntest_tup2 = (10, 20, 30, 40, 50)\n\nindex_multiplication(test_tup1, test_tup2)"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     index_multiplication((1,2,3,4,5), (3,4,5,6,7)) == ((1*3, 2*4, 3*5, 4*6, 5*7),)\nassert     index_multiplication((3,2,1,4,5), (3,4,5,6,7)) == ((3*3, 2*4, 1*5, 4*6, 5*7),)\nassert     index_multiplication((1,2), (4,5)) == (\n                (1*4, 2*5), \n                (2*4, 5*5), \n                (4*4, 5*5), \n                (4*4, 5*5)\n            )\nassert     index_multiplication((1,2), (4,5,6,7)) == (\n                (1*4, 2*5, 4*6, 5*7), \n                (2*4, 5*5, 4*6, 5*7)\n            )\nassert     index_multiplication((1,2,3,4,5), (6,7,8,9,10)) == (\n                (1*6, 2*7, 3*8, 4*9, 5*10), \n                (6*6, 7*7, 8*8, 9*9, 10*10)\n            )\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     index_multiplication((1, 2), (3, 4)) == (1, 6)\nassert     index_multiplication((1, 3), (2, 4)) == (1, 6)\nassert     index_multiplication((1, 2), (3, 4)) == (3, 4)\nassert     index_multiplication((1, 2), (1, 2)) == (2, 4)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_Occurrence((1, 2, 3),[1, 2, 3]) == (2, 1, 1)\nassert count_Occurrence((1, 2, 1, 1, 1, 2, 1),[1, 2, 3, 4, 5, 6, 7]) == (2, 1, 2)\n\ndef sum_n(n): \n    '''\n    Write a python function to sum the numbers from 1 to n.\n    '''\n    pass\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_Occurrence((1,2,3), [1,2,3]) == {1: 1, 2: 2, 3: 2} \nassert count_Occurrence((1,2,3), [1,2,3]) == {1: 1, 2: 2, 3: 2} \nassert count_Occurrence((1,2,2,3), [1,2,3]) == {1: 1, 2: 2, 3: 2} \nassert count_Occurrence((1,1,2,1,3), [1,2,3]) == {1: 1, 2: 2, 3: 1} \nassert count_Occurrence((1,2,3), (1,2,3)) == {1: 1, 2: 1, 3: 1} \n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_Occurrence((1,2,3,4,5), [1,3,5,7,9]) == (3,2,2)\nassert     count_Occurrence((1,2,3,4,5), [3,4,5,7,9]) == (1,2,2)\n\ndef count_All_Occurrence(tup, lst):\n    '''\n    Write a python function to count the occurence of all elements in tuple in a list.\n    '''\n    return Counter(lst)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nassert count_Occurrence([1,2,3,4,5], [1,2,3,4]) == [(1, 2), (2, 1), (3, 1), (4, 1), (5, 1)]\nassert count_Occurrence([1,2,3,4,5], [2,4,6]) == [(1, 2), (3, 1), (5, 1)]\nassert count_Occurrence([1,2,3,4,5], [1,4,6]) == [(1, 2), (2, 1), (3, 1), (4, 1), (5, 1)]\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert count_Occurrence((3,4,5,1,2,2,3), [1,2,3,4,5,6]) == Counter((1,2,3,2))\nassert count_Occurrence((1,2,3,4,5,6), [\"a\", \"b\", \"c\", \"b\", \"d\", \"b\"]) == Counter((1,2,3,4,5))\n\ndef create_MultiDict(keys, values):\n    '''\n    Write a python function to create a dictionary where keys are unique and values are elements in a list.\n    '''\n    pass\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_Occurrence((1, 2, 3, 4), (1, 2, 3, 4, 1)) == 3\nassert count_Occurrence((1, 2, 3, 4), (1, 2, 3, 4, 5)) == 2\n\n\ndef add_counts(lst, n): \n    '''\n    Write a python function to add n to each element of a list and return the new list\n    '''\n    pass\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ncount_Occurrence((1,2,3,4), [1,2,3,4]) == (2,1)\n\nprint(\"Question 19\")\nprint(\"=\"*100)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_Occurrence((0, 1, 2), [1, 2, 2]) == (2, 1)\nassert     count_Occurrence((0, 1, 2), (1, 2, 2)) == (2, 1)\nassert     count_Occurrence((0, 1, 2, 3), (0, 1, 2, 3)) == (3, 2)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint('Output of count_Occurrence is ', end = '')\ncount_Occurrence((0, 1, 2, 3, 4), ['a', 'a', 'b', 'a', 'c', 'a', 'c'])\nassert False == True\nassert\nprint('Output of count_Occurrence is ', end = '')\ncount_Occurrence((0, 1, 2, 3, 4), ['a', 'a', 'b', 'a', 'c', 'a', 'c'])\nassert True == True\nprint('Success')\n\n\ndef get_Number_of_Occurrence(tup, lst):\n    '''\n    Write a python function to get the count of all elements of list in a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_Occurrence((2,4,6,7), [2,4,6,8,9,7]) == 5, 'incorrect count_Occurrence'\nassert     count_Occurrence((2,4,6,7), ['a','b','c','d','e','f','g']) == 5, 'incorrect count_Occurrence'\nassert     count_Occurrence((1,1,1,1,1,1), ['a','b','c','d','e','f','g']) == 5, 'incorrect count_Occurrence'\nassert     count_Occurrence((2,4,6,7), ['a','a','a','a','a','a']) == 4, 'incorrect count_Occurrence'\nassert     count_Occurrence((1,1,1,1,1), ['a','a','a','a']) == 4, 'incorrect count_Occurrence'\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     cube_nums([]) == []\nassert cube_nums([0]) == [0]\nassert cube_nums([1,2,3,4]) == [1,8,27,64]\nassert cube_nums([0,1,2,3,4]) == [0,1,8,27,64]\nassert cube_nums([0,1,2,3,4,-5,-6,-7,-8,-9,10]) == [0,1,8,27,64,336589,1573245,2817567,5942849,7958765,89652437]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ncube_nums([0,1,2,3]) == [0, 1, 8, 27]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125],\\\n\"Wrong\"\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     cube_nums([1,2,3,4,5]) == [1, 8, 27, 64, 125]\nassert     cube_nums([-1,2,3,4,5]) == [-1, 4, 27, 64, 125]\nassert     cube_nums([]) == []\nassert     cube_nums([-1,-2,-3,-4,-5]) == []\nassert     cube_nums([-1,2,3,4,5,-1]) == []\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     cube_nums([0,1,2,3,4,5]) == [0,1,8,27,64,125]\nassert     cube_nums([]) == []\n\ndef find_min_max(nums):\n    '''\n    Write a function that finds the smallest and largest numbers in a list.\n    '''\n    pass\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     cube_nums([0, 1, 2]) == [0, 1, 8]\nassert     cube_nums([0, -1, 2]) == [0, 1, 4]\nassert     cube_nums([1, 0, 2]) == [1, 0, 8]\nassert     cube_nums([-1, 0, 2]) == [-1, 1, 8]\nassert     cube_nums([0, -1, 2, 0]) == [0, 1, 8, 0]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert cube_nums([1,2,3]) == [1,8,27]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ncube_nums([-1, 2, -3, 4]) == [-1, 8, -27, 64]\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef cal_sum(n):\n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    while n:\n        sum += n%10\n        n = n//10\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nassert cal_sum(1) == 1\nassert cal_sum(2) == 3\nassert cal_sum(6) == 13\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(cal_sum(1) == 1)\nprint(cal_sum(5) == 6)\nprint(cal_sum(20) == 65)\n\n'''\nTask 3.\n\nWrite a function that takes in an array of integers and returns the index of the \nlargest number in the array. If the input array is empty, return -1.\n'''\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert cal_sum(1) == 0.5\nassert cal_sum(2) == 1.0\nassert cal_sum(3) == 2.0\nassert cal_sum(4) == 3.0\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     cal_sum(10) == 55\nassert     cal_sum(1) == 1\nassert     cal_sum(5) == 14\n\n\n\ndef cal_sum2(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return sum([1 for i in range(n)])\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef cal_average(n):\n    '''\n    Write a function to calculate the average of perrin numbers.\n    '''\n    pass\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     cal_sum(5) == 18, \"incorrect value returned.\"\nassert     cal_sum(7) == 21, \"incorrect value returned.\"\n\nprint(\"Test finished.\")\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ncal_sum(1) == 1\ncal_sum(2) == 3\ncal_sum(100) == 500\ncal_sum(1000) == 2000\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     cal_sum(3) == 0, \"No result expected\"\nassert     cal_sum(4) == 1, \"No result expected\"\nassert     cal_sum(5) == 2, \"No result expected\"\nassert     cal_sum(6) == 3, \"No result expected\"\nassert     cal_sum(7) == 4, \"No result expected\"\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_string(['apple', 'banana', 'apple', 'grapes', 'orange', 'banana', 'apple', 'grapes', 'orange'], 3) == ['apple', 'grapes', 'orange']\nassert     extract_string(['apple', 'banana', 'apple', 'grapes', 'orange', 'banana', 'apple', 'grapes', 'orange'], 3) == ['apple', 'grapes', 'orange']\nassert     extract_string(['apple', 'banana', 'apple', 'grapes', 'orange', 'banana', 'apple', 'grapes', 'orange'], 1) == ['apple']\nassert     extract_string(['apple', 'banana', 'apple', 'grapes', 'orange', 'banana', 'apple', 'grapes', 'orange'], 5) == ['apple', 'grapes', 'orange']\nassert     extract_string(['apple', 'banana', 'apple', 'grapes', 'orange', 'banana', 'apple', 'grapes', 'orange'], 3) == ['apple', 'grapes', 'orange']\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef extract_string_k(str, l, k):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    pass\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    pass\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_string(['1', '2', '3', '4'], 3) == ['1', '2']\nassert     extract_string(['1', '2', '3', '4'], 4) == ['1', '2', '3', '4']\nassert     extract_string(['1', '2', '3', '4'], 5) == ['1', '2', '3', '4']\nassert     extract_string(['1', '2', '3', '4'], 6) == ['1', '2', '3']\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_string(['a','b','c','d'], 4) == ['a','b','c']\nassert     extract_string(['a','b','c','d'], 4) == ['a','b','c']\nassert     extract_string(['a','b','c','d'], 4) == ['a','b','c']\nassert     extract_string(['a','b','c','d'], 5) == ['a','b','c','d']\nassert     extract_string(['a','b','c','d'], 0) == ['a','b','c','d']\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert extract_string(['Hello', 'world'], 1) == 'Hello'\nassert extract_string(['Hello', 'world'], 2) == 'wor'\nassert extract_string(['Hello', 'world'], 3) == 'o'\nassert extract_string(['Hello', 'world'], 4) == 'd'\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_string(['test', 'this', 'is', 'a', 'test'], 2) == ['test', 'test']\nassert     extract_string(['test', 'this', 'is', 'a', 'test'], 5) == ['test', 'this', 'is', 'test']\nassert     extract_string(['test', 'this', 'is', 'a', 'test'], 6) == ['test', 'this', 'is', 'a', 'test']\nassert     extract_string(['test', 'this', 'is', 'a', 'test'], 7) == ['test', 'this', 'is', 'test']\nassert     extract_string(['test', 'this', 'is', 'a', 'test'], 8) == ['test', 'this', 'is', 'test']\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_string([\"a\", \"b\", \"c\"], 3) == [\"a\", \"b\"]\nassert     extract_string([\"a\", \"b\", \"c\"], 0) == []\nassert     extract_string([\"a\", \"b\", \"c\"], 1) == [\"a\"]\nassert     extract_string([\"a\", \"b\", \"c\"], 2) == [\"a\", \"b\"]\nassert     extract_string([\"a\", \"b\", \"c\"], 3) == [\"a\", \"b\", \"c\"]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     extract_string('I love Python', [1,2,3,4,5,6]) == 'I'\nassert     extract_string('', [1,2,3,4,5,6]) == ''\nassert     extract_string('I love Python', [0,0,0,0,0,0]) == 'I'\nassert     extract_string('', [0,0,0,0,0,0]) == ''\nassert     extract_string('I love Python', [-1,2,3,4,5,6]) == ''\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef extract_strings(str_list, n):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    pass\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_whitespaces('\\n \\t\\r') == '' \nassert     remove_whitespaces('\\t\\n \\n \\t') == ''\nassert     remove_whitespaces(' \\t \\t\\n') ==''\nassert     remove_whitespaces('\\n') == '\\n'\nassert     remove_whitespaces(' \\t\\n \\t') ==''\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_whitespaces(    \"     hello   world     \") == \"hello world\", \"test 1 failed\"\nassert     remove_whitespaces(    \"hello world\") == \"hello world\", \"test 2 failed\"\nassert     remove_whitespaces(    \"hello world!!!!\") == \"hello world\", \"test 3 failed\"\nassert     remove_whitespaces(    \"hello world\") == \"hello world\", \"test 4 failed\"\nassert     remove_whitespaces(    \"hello world\") == \"hello world\", \"test 5 failed\"\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint('Pass' if (remove_whitespaces('') == '') else 'Fail')\nprint('Pass' if (remove_whitespaces('hello world') == 'hello world') else 'Fail')\nprint('Pass' if (remove_whitespaces('1 2 3') == '1 2 3') else 'Fail')\n\n\ndef is_vowel(letter):\n    '''\n    Write a function to check whether a given character is vowel or not.\n    '''\n    pass\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_whitespaces('   abcd  \\n') == 'abcd'\nassert     remove_whitespaces('''\nabcd\n''') == 'abcd'\nassert     remove_whitespaces('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyz'\nassert     remove_whitespaces('''\n    xyz\n''') == 'xyz'\nassert     remove_whitespaces('   xyz\\n') == 'xyz'\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_whitespaces('Hello World') == 'Hello World'\nassert remove_whitespaces('') == ''\nassert remove_whitespaces(' ') == ''\nassert remove_whitespaces('   ') == ''\nassert remove_whitespaces('Hello') == 'Hello'\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_whitespaces(\"     \") == \"\", \"For more information visit: https://www.hackerrank.com/challenges/whats-your-name/problem\"\nassert     remove_whitespaces(\"\") == \"\", \"For more information visit: https://www.hackerrank.com/challenges/whats-your-name/problem\"\nassert     remove_whitespaces(\"   \") == \"\", \"For more information visit: https://www.hackerrank.com/challenges/whats-your-name/problem\"\nassert     remove_whitespaces(\"a\") == \"a\", \"For more information visit: https://www.hackerrank.com/challenges/whats-your-name/problem\"\nassert     remove_whitespaces(\"     a\") == \"a\", \"For more information visit: https://www.hackerrank.com/challenges/whats-your-name/problem\"\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_whitespaces(\"Hello     World\") == \"Hello World\"\nassert remove_whitespaces(\"Hello World\") == \"Hello World\"\nassert remove_whitespaces(\"\") == \"\"\nassert remove_whitespaces(\"Hello\") == \"Hello\"\nassert remove_whitespaces(\"Hello\\nWorld\") == \"Hello World\"\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_whitespaces('a b   ') == 'a b'\nassert     remove_whitespaces('a b   ') == 'a b'\nassert     remove_whitespaces('a b   ') == 'a b'\nassert     remove_whitespaces('   a b   ') == 'a b'\nassert     remove_whitespaces('a\\nb') == 'a\\nb'\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_whitespaces(\"\") == \"\"\nassert     remove_whitespaces(\" \") == \"\"\nassert     remove_whitespaces(\"a b c \") == \"a b c\"\nassert     remove_whitespaces(\"a b c   \") == \"a b c\"\nassert     remove_whitespaces(\"a b c  \") == \"a b c\"\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_whitespaces(\"This is a test string\") == \"ThiS is a test string\"\nassert remove_whitespaces(\"This is a test string\") == \"ThiS is a test string\"\nassert remove_whitespaces(\"This is a test string\") == \"ThiS is a test string\"\nassert remove_whitespaces(\"This is a test string\") == \"ThiS is a test string\"\nassert remove_whitespaces(\"\") == \"\"\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     loss_amount(110,100) == 0, 'input amount:110 should be 0'\nassert     loss_amount(150,250) == 0, 'input amount:150 should be 0'\nassert     loss_amount(30,100) == 30, 'input amount:30 should be 30'\nassert     loss_amount(100,250) == -50, 'input amount:100 should be -50'\nassert     loss_amount(30,110) == -80, 'input amount:30 should be -80'\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     loss_amount(2,1) == 0, 'loss_amount returned an incorrect value'\nassert     loss_amount(4,1) == 0, 'loss_amount returned an incorrect value'\nassert     loss_amount(2,3) == 1, 'loss_amount returned an incorrect value'\nassert     loss_amount(2,4) == 2, 'loss_amount returned an incorrect value'\nassert     loss_amount(2,5) == 3, 'loss_amount returned an incorrect value'\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     loss_amount(10,0) == 0\nassert     loss_amount(10,100) == 0\nassert     loss_amount(10,10) == 10\nassert     loss_amount(10,11) == 10\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     loss_amount(11.5,18) == -4.75, \"error1\"\nassert     loss_amount(11.5,18.5) == 0.0, \"error2\"\nassert     loss_amount(12.5,18.5) == -2.5, \"error3\"\nassert     loss_amount(11.5,18.5) == 0.0, \"error4\"\nassert     loss_amount(11.5,18.2) == -2.8, \"error5\"\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     loss_amount(100, -100) == 0, 'incorrect'\nassert     loss_amount(100, -50) == 50, 'incorrect'\nassert     loss_amount(100, 50) == 50, 'incorrect'\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     loss_amount(23,10) == -3\n\nassert     loss_amount(23,15) == 0\n\nprint(\"\\t\\t\\t\\t\\t\\t\\t\\t\\tLoss_Amount Test Passed!!\")\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     loss_amount(1,1) == 1\nassert     loss_amount(1,0) == 0\nassert     loss_amount(0,1) == 0\nassert     loss_amount(1,0.5) == 0.5\nassert     loss_amount(1.2,1) == 0.8\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert loss_amount(1000,100) == 0 \nassert loss_amount(1000,1) == -999 \nassert loss_amount(1000,9) == -999 \nassert loss_amount(1000,9.5) == -999 \n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     loss_amount(1.0,1.0)==0, \"The given loss amount is not correct\"\nassert loss_amount(1.0,0.0)==1.0, \"The given loss amount is not correct\"\nassert loss_amount(0.0,1.0)==0.0, \"The given loss amount is not correct\"\nassert loss_amount(0.0,0.0)==0.0, \"The given loss amount is not correct\"\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert loss_amount(1,1) == 0\nassert loss_amount(1,2) == 1\nassert loss_amount(2,1) == 2\nassert loss_amount(2,2) == 0\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint(\"Pass\" if (10 == sumofFactors(12)) else \"Fail\") \nprint(\"Pass\" if (0 == sumofFactors(0)) else \"Fail\") \nprint(\"Pass\" if (1 == sumofFactors(1)) else \"Fail\") \nprint(\"Pass\" if (4 == sumofFactors(16)) else \"Fail\") \nprint(\"Pass\" if (0 == sumofFactors(0)) else \"Fail\") \nprint(\"Pass\" if (1 == sumofFactors(1)) else \"Fail\") \nprint(\"Pass\" if (4 == sumofFactors(16)) else \"Fail\") \n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nassert sumofFactors(6) == 2\nassert sumofFactors(12) == 4\nassert sumofFactors(25) == 10\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    n=10\n    print('sumofFactors({}) : {}'.format(n, sumofFactors(n)))\n    assert sumofFactors(n) == 2\n    assert sumofFactors(5) == 2\n    assert sumofFactors(6) == 3\n\nprint('Checking is_prime(10)')\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert sumofFactors(8) == 1\nassert sumofFactors(27) == 2\nassert sumofFactors(10) == 0\n\ndef canSum(n, a_list) :\n    '''\n    Write a python function that determines if a number can be expressed as the sum of the factors of another number.\n    '''\n    pass\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sumofFactors(4) == 0, \"FAIL: Should return 0.\"\nassert     sumofFactors(12) == 12, \"FAIL: Should return 12.\"\nassert     sumofFactors(60) == 0, \"FAIL: Should return 0.\"\nassert     sumofFactors(26) == 2, \"FAIL: Should return 2.\"\nassert     sumofFactors(165) == 45, \"FAIL: Should return 45.\"\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sumofFactors(15) == 15\nassert     sumofFactors(4) == 8\nassert     sumofFactors(12) == 20\nassert     sumofFactors(7) == 21\nassert     sumofFactors(4) == 4\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef isPerfectSquare(x): \n    '''\n    Write a python function to check whether a number is perfect square.\n    '''\n    pass\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint ('The answer is :', sumofFactors(10))\n\n\ndef sumOfMultiples(n) : \n    '''\n    Write a python function to find the sum of multiples of 2, 3 and 5 upto a number.\n    '''\n    pass\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef findSquares(start, stop) :\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    pass\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_match_wordz(\n    'It is a stupid use of the z') == True, \\\n    'This should be True'\nassert     text_match_wordz(\n    'It is a stupid use of the z') == True, \\\n    'This should be False'\nassert     text_match_wordz(\n    'Some text in the text') == False, \\\n    'This should be False'\nassert     text_match_wordz(\n    'The quick brown fox jumps over the lazy dog') == True, \\\n    'This should be True'\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_match_wordz('The quick brown fox jumps over the lazy dog')\nassert not text_match_wordz('The quick brown fox jumps over the lazy dog')\n\nassert     text_match_wordz('The quick brown fox jumps over the lazy dog')\nassert     not text_match_wordz('The quick brown fox jumps over the lazy dog')\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert text_match_wordz('abc') == False\nassert text_match_wordz('z') == True\nassert text_match_wordz('aZ') == False\nassert text_match_wordz('zz') == True\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_match_wordz('The Zen of Python') == True, 'test failed'\nassert     text_match_wordz('This is a test') == False, 'test failed'\nassert     text_match_wordz('The Zen of Python is the future') == True, 'test failed'\nassert     text_match_wordz('No match') == False, 'test failed'\nassert     text_match_wordz('This is a test case') == True, 'test failed'\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_match_wordz('z') == True, 'Wrong result for z'\nassert     text_match_wordz('Z') == False, 'Wrong result for Z'\nassert     text_match_wordz('abZ') == False, 'Wrong result for abZ'\nassert     text_match_wordz('abZd') == False, 'Wrong result for abZd'\nassert     text_match_wordz('abbZ') == True, 'Wrong result for abbZ'\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_wordz('aZ') == True, \"First\"\nassert     text_match_wordz('ZZ') == True, \"Second\"\nassert     text_match_wordz('zZ') == True, \"Third\"\nassert     text_match_wordz('AaZ') == False, \"Fourth\"\nassert     text_match_wordz('Azz') == False, \"Fifth\"\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_wordz(\"textz\") == True, \"Wrong Answer\"\nassert     text_match_wordz(\"Textz\") == False, \"Wrong Answer\"\nassert     text_match_wordz(\"\") == False, \"Wrong Answer\"\nassert     text_match_wordz(\"This is a text\") == False, \"Wrong Answer\"\nassert     text_match_wordz(\"This is a text.\") == True, \"Wrong Answer\"\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_match_wordz('Hi guys!') == True\nassert     text_match_wordz('I want to go to my office') == True\nassert     text_match_wordz('I am working with CodeWars') == True\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint('\\n# 5.3 wordz')\nprint('In the wordz function, the match must be case sensitive.')\n\ntext = \"this is a test of the wordz function\"\nprint(text_match_wordz(text)) # True\n\ntext = \"This is also a test of the wordz function\"\nprint(text_match_wordz(text)) # False\n\ntext = \"This is a test of the wordz function\"\nprint(text_match_wordz(text)) # True\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_wordz('z') == False\nassert     text_match_wordz('zz') == True\nassert     text_match_wordz('zzz') == True\nassert     text_match_wordz('zz') == True\n\n'''\nWrite a function that matches a word containing 'z' or 'Z'.\n'''"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    check_monthnumb_number(11) == True\n    check_monthnumb_number(12) == True\n    check_monthnumb_number(2) == True\n    check_monthnumb_number(3) == False\n    check_monthnumb_number(4) == False\n    check_monthnumb_number(5) == False\n    check_monthnumb_number(6) == False\n    check_monthnumb_number(7) == False\n    check_monthnumb_number(8) == False\n    check_monthnumb_number(9) == False\n    check_monthnumb_number(10) == False\n    check_monthnumb_number(11) == True\n    check_monthnumb_number(12) == True\n    check_monthnumb_number(13) == False\n    check_monthnumb_number(14) == False\n    check_monthnumb_number(15) == False\n    check_monthnumb_number(16) == False\n    check_monthnumb_number(17) == False\n    check_monthnumb_number(18) == False\n    check_monthnumb_number(19) == False\n    check_monthnumb_number(20) == False\n    check_monthnumb_number(21) == False\n    check_monthnumb_number(22) == False\n    check_monthnumb_number(23) == False\n    check_monthnumb_number(24) == False\n    check_monthnumb_number(25) == False\n    check_monthnumb_number(26) == False\n    check_monthnumb_number(27) == False\n    check_monthnumb_number(28) == False\n    check_monthnumb_number(29) == False\n    check_monthnumb_number(30) == True\n    check_monthnumb_number(31) == True\n    check_monthnumb_number(32) == False\n    check_monthnumb_number(33) == False\n    check_monthnumb_number(34) == False\n    check_monthnumb_number(35) == False\n    check_monthnumb_number(36) == False\n    check_monthnumb_number(37) == False\n    check_monthnumb_number(38) == False\n    check_monthnumb_number(39) == False\n    check_monthnumb_number(40) == False\n    check_monthnumb_number(41) == False\n    check_monthnumb_number(42) == False\n    check_monthnumb_number(43) == False\n    check_monthnumb_number(44) == False\n    check_monthnumb_number(45) == False\n    check_monthnumb_number(46) == False\n    check_monthnumb_number(47) == False\n    check_monthnumb_number(48) == False\n    check_monthnumb_number(49) == False\n    check_monthnumb_number(50) == False\n    check_monthnumb_number(51) == False\n    check_monthnumb_number(52) == False\n    check_monthnumb_number(53) == False\n    check_monthnumb_number(54) == False\n    check_monthnumb_number(55) == False\n    check_monthnumb_number(56) == False\n    check_monthnumb_number(57) == False\n    check_monthnumb_number(58) == False\n    check_monthnumb_number(59) == False\n    check_monthnumb_number(60) == False\n    check_monthnumb_number(61) == False\n    check_monthnumb_number(62) == False\n    check_monthnumb_number(63) == False\n    check_monthnumb_number(64) == False\n    check_monthnumb_number(65) == False\n    check_monthnumb_number(66) == False\n    check_monthnumb_number(67) == False\n    check_monthnumb_number(68) == False\n    check_monthnumb_number(69) == False\n    check_monthnumb_number(70) == False\n    check_monthnumb_number(71) == False\n    check_monthnumb_number(72) == False\n    check_monthnumb_number(73) == False\n    check_monthnumb_number(74) == False\n    check_monthnumb_number(75) == False\n    check_monthnumb_number(76) == False\n    check_monthnumb_number(77) == False\n    check_monthnumb_number(78) == False\n    check_monthnumb_number(79) == False\n    check_monthnumb_number(80) == False\n    check_monthnumb_number(81) == False\n    check_monthnumb_number(82) == False\n    check_monthnumb_number(83) == False\n    check_monthnumb_number(84) == False\n    check_monthnumb_number(85) == False\n    check_monthnumb_number(86) == False\n    check_monthnumb_number(87) == False\n    check_monthnumb_number(88) == False\n    check_monthnumb_number(89) == False\n    check_monthnumb_number(90) == True\n    check_monthnumb_number(91) == False\n    check_monthnumb_number(92) == False\n    check_monthnumb_number(93) == False\n    check_monthnumb_number(94) == False\n    check_monthnumb_number(95) == False\n    check_monthnumb_number(96) == False\n    check_monthnumb_number(97) == False\n    check_monthnumb_number(98) == False\n    check_monthnumb_number(99) == False\n    check_monthnumb_number(100) == False\n    check_monthnumb_number(101) == False\n    check_monthnumb_number(102) == False\n    check_monthnumb_number(103) == False\n    check_monthnumb_number(104) == True\n    check_monthnumb_number(105) == False\n    check_monthnumb_number(106) == False\n    check_monthnumb_number(107) == True\n    check_monthnumb_number(108) == False\n    check_monthnumb_number(109) == False\n    check_monthnumb_number(110) == False\n    check_monthnumb_number(111) == True\n    check_monthnumb_number(112) == True\n    check_monthnumb_number(113) == False\n    check_monthnumb_number(114) == True\n    check_monthnumb_number(115) == False\n    check_monthnumb_number(116) == False\n    check_monthnumb_number(117) == False\n    check_monthnumb_number(118) == True\n    check_monthnumb_number(119) == True\n    check_monthnumb_number(120) == False\n    check_monthnumb_number(121) == True\n    check_monthnumb_number(122) == False\n    check_monthnumb_number(123) == False\n    check_monthnumb_number(124) == False\n    check_monthnumb_number(125) == True\n    check_monthnumb_number(126) == False\n    check_monthnumb_number(127) == False\n    check_monthnumb_number(128) == True\n    check_monthnumb_number(129) == False\n    check_monthnumb_number(130) == False\n    check_monthnumb_number(131) == False\n    check_monthnumb_number(132) == False\n    check_monthnumb_number(133) == False\n    check_monthnumb_number(134) == False\n    check_monthnumb_number(135) == False\n    check_monthnumb_number(136) == True\n    check_monthnumb_number(137) == False\n    check_monthnumb_number(138) == False\n    check_monthnumb_number(139) == False\n    check_monthnumb_number(140) == False\n    check_monthnumb_number(141) == True"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_monthnumb_number(6) == True, \"You have entered wrong month number\"\nassert     check_monthnumb_number(12) == True, \"You have entered wrong month number\"\nassert     check_monthnumb_number(1) == False, \"You have entered wrong month number\"\nassert     check_monthnumb_number(2) == False, \"You have entered wrong month number\"\nassert     check_monthnumb_number(3) == False, \"You have entered wrong month number\"\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_monthnumb_number(31) == True, 'Wrong!'\nassert     check_monthnumb_number(32) == True, 'Wrong!'\nassert     check_monthnumb_number(33) == True, 'Wrong!'\nassert     check_monthnumb_number(34) == False, 'Wrong!'\nassert     check_monthnumb_number(35) == False, 'Wrong!'\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_monthnumb_number(3) == True, \"True\"\nassert     check_monthnumb_number(1) == False, \"False\"\nassert     check_monthnumb_number(6) == False, \"False\"\nassert     check_monthnumb_number(12) == True, \"True\"\nassert     check_monthnumb_number(13) == False, \"False\"\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_monthnumb_number(11)\nassert     check_monthnumb_number(0)\nassert     check_monthnumb_number(12)\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_monthnumb_number(4) == True\nassert     check_monthnumb_number(5) == False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_monthnumb_number(2) == True\nassert     check_monthnumb_number(4) == False\nassert     check_monthnumb_number(1) == False\n\n'''\nWrite a function to check whether the given year is leap year or not.\n\nExample:\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_monthnumb_number(12) == True\nassert     check_monthnumb_number(11) == False\nassert     check_monthnumb_number(1) == False\nassert     check_monthnumb_number(31) == True\nassert     check_monthnumb_number(-1) == False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_monthnumb_number(1) == True, \"The result is incorrect\"\nassert     check_monthnumb_number(2) == True, \"The result is incorrect\"\nassert     check_monthnumb_number(3) == False, \"The result is incorrect\"\nassert     check_monthnumb_number(4) == False, \"The result is incorrect\"\nassert     check_monthnumb_number(5) == False, \"The result is incorrect\"\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     reverse_string_list([]) == []\nassert     reverse_string_list([\"hello\", \"hi\", \"bye\"]) == [\"bye\", \"hi\", \"hello\"]\nassert     reverse_string_list([\"hello\", \"hi\", \"bye\", \"awesome\"]) == [\"awesome\", \"bye\", \"hi\", \"hello\"]\nassert     reverse_string_list([\"hello\", \"hi\", \"bye\", \"awesome\", \"world\"]) == [\"world\", \"awesome\", \"bye\", \"hi\", \"hello\"]\nassert     reverse_string_list([\"hello\", \"hi\", \"bye\", \"awesome\", \"world\", \"and\", \"everything\", \"else\"]) == [\"everything\", \"else\", \"world\", \"awesome\", \"hi\", \"bye\", \"and\", \"hello\", \"and\", \"and\", \"else\"]\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     reverse_string_list(['abc', 'xyz']) == ['xyz', 'abc']\nassert     reverse_string_list(['abc', 'xyz', 'cde', 'efg']) == ['efg', 'cde', 'xyz', 'abc']\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     reverse_string_list(['hello', 'world', '!']) == ['!', 'world', 'hello'], \"Not correct\"\nassert     reverse_string_list(['hey', 'lol', 'hi']) == ['hi', 'lol', 'hey'], \"Not correct\"\nassert     reverse_string_list(['abc', 'def', 'ghi']) == ['ghi', 'def', 'abc'], \"Not correct\"\nassert     reverse_string_list(['hello', 'hi', 'bye']) == ['bye', 'hi', 'hello'], \"Not correct\"\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     reverse_string_list([\"qwerty\", \"qwert\", \"qwer\"]) == [\"werqq\", \"erqwert\", \"ertqw\"]\n\ndef reverse_string_list_using_builtin(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    Using builtin function'reverse'.\n    '''\n    pass\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     reverse_string_list([\"apple\",\"orange\",\"banana\"]) == [\"banana\",\"orange\",\"apple\"], \"wrong answer\"\nassert     reverse_string_list([\"apple\",\"mango\",\"banana\"]) == [\"banana\",\"mango\",\"apple\"], \"wrong answer\"\nassert     reverse_string_list([\"banana\",\"orange\",\"mango\"]) == [\"mango\",\"orange\",\"banana\"], \"wrong answer\"\nassert     reverse_string_list([\"apple\",\"orange\",\"grape\"]) == [\"grape\",\"orange\",\"apple\"], \"wrong answer\"\n\ndef reverse_string_list_slice(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values,\n    starting from the end of the list and working its way backwards.\n    '''\n    pass\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     reverse_string_list([\"cat\", \"dog\", \"cow\"]) == [\"cow\", \"dog\", \"cat\"]\nassert     reverse_string_list([\"cat\", \"dog\", \"cow\"]) == [\"cow\", \"dog\", \"cat\"]\nassert     reverse_string_list([\"cat\", \"dog\", \"cow\"]) == [\"cow\", \"dog\", \"cat\"]\nassert     reverse_string_list([\"cat\", \"dog\", \"cow\"]) == [\"cow\", \"dog\", \"cat\"]\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     reverse_string_list(['Hi','There','How','are','you']) == ['you','are','How','Hi','Hi']\nassert     reverse_string_list(['Hello','World','I am','what','You','are']) == ['World','I am','Hello','I am','what','What']\nassert     reverse_string_list(['code']) == ['code']\nassert     reverse_string_list(['']) == ['']\nassert     reverse_string_list(['']) == ['']\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     reverse_string_list(['y', 'x', 'z', 'a', 'b', 'c']) == ['c', 'b', 'a', 'x', 'y', 'z']\nassert     reverse_string_list(['a', 'b', 'c', 'd']) == ['d', 'c', 'b', 'a']\nassert     reverse_string_list(['z']) == ['z']\nassert     reverse_string_list(['y', 'z', 'c', 'a', 'e', 'd', 'b', 'x', 'p', 'q', 'u', 'v', 'h','s', 'i', 'o', 'w', 'n','m', 'l']) == ['l', 'h','s', 'i', 'n','m', 'w', 'u', 'v', 'o', 'l', 'i', 'o', 'w', 'n', 'l','m', 'p', 'q', 'u', 'v', 'h', 'z', 'c', 'b', 'a', 'y']\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     reverse_string_list([]) == []\nassert     reverse_string_list([\"a\", \"b\", \"c\"]) == [\"c\", \"b\", \"a\"]\nassert     reverse_string_list([\"abc\", \"b\", \"c\"]) == [\"c\", \"b\", \"abc\"]\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Find_Min([1,2,3,4,5,6,7,8]) == (1,5), \"Error:1\"\nassert Find_Min([1,2,3,4,5,6]) == (2,6), \"Error:2\"\nassert Find_Min([1,2,3,4,5]) == (2,5), \"Error:3\"\nassert Find_Min([1,2,3,4]) == (2,4), \"Error:4\"\nassert Find_Min([1]) == (1,1), \"Error:5\"\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Find_Min([1,2,3,4,5,6]) == [2,3,4,5,6]\nassert     Find_Min([1,2,3,4,5,6,7]) == []\nassert     Find_Min([1,2,3,4,5,6,7,8]) == [1,2,3,4,5,6,7]\nassert     Find_Min([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8]\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     Find_Min([1,2,3,4]) ==    [1,2,3,4]\nassert     Find_Min([1,2,3,4,5]) ==    [1,2,3,4]\nassert     Find_Min([1,2,3,4,5,6,7]) ==    [1,2,3,4,5,6]\nassert     Find_Min([1,2,3,4,5,6]) ==    [1,2,3,4,5,6]\nassert     Find_Min([1,2,3,4,5,6,7,8]) ==    [1,2,3,4,5,6]\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Find_Min([]) == []\nassert     Find_Min([1,2,3]) == [1]\nassert     Find_Min([1,2,3,4]) == [1]\nassert     Find_Min([1,2,3,4,5]) == [1,2,3]\nassert     Find_Min([1,2,3,4,5,6]) == [1,2,3]\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Find_Min([1, 2, 3, 4, 5, 6]) == 3\nassert     Find_Min([4, 5, 6, 7]) == 0\nassert     Find_Min([4, 5, 6, 7, 8]) == 0\nassert     Find_Min([]) == None\nassert     Find_Min([1, 2, 3, 4, 5, 6, 7, 8]) == None\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Find_Min(['string','string2','string3']) =='string'\nassert     Find_Min(['string','string2','string3','string4']) =='string3'\nassert     Find_Min(['string','string2','string3','string4','string5']) =='string4'\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Find_Min(lst=[5,3,7,1,1,0,10]) == 0, \"Wrong answer\"\nassert     Find_Min(lst=[5,3,7,1,1,0,10,11]) == 1, \"Wrong answer\"\nassert     Find_Min(lst=[5,3,7,1,1,0,10,11,12]) == 1, \"Wrong answer\"\nassert     Find_Min(lst=[5,3,7,1,1,0,10,11,12,13]) == 1, \"Wrong answer\"\nassert     Find_Min(lst=[5,3,7,1,1,0,10,11,12,13,14]) == 1, \"Wrong answer\"\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Find_Min([1,3,5,8,6,0,3,2,4,0,0]) == 3\nassert     Find_Min([1,2,3,4,5]) == 5\nassert     Find_Min([1,2,3,4,5,6]) == 4\nassert     Find_Min([]) == -1\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     rectangle_area(1,1) == 1\nassert     rectangle_area(2,1) == 2\nassert     rectangle_area(3,1) == 3\nassert     rectangle_area(1,2) == 2\nassert     rectangle_area(2,2) == 4\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef rectangles_intersect(r1,r2):\n    '''\n    Write a function to check if two rectangles intersect or not.\n    If the function returns True, the rectangles do intersect.\n    If the function returns False, the rectangles do not intersect.\n    '''\n    pass\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     rectangle_area(2,5) == 10\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rectangle_area(2,2) == 2\nassert     rectangle_area(10,10) == 20\nassert     rectangle_area(1000000,1000000) == 2000000\n\ndef rectangle_area_with_passing_test(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    \n    The function should pass the test case below:\n    Note that the input is not limited to only integer values.\n    The function should return an error message for invalid inputs.\n    '''\n    pass\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     rectangle_area(2,3) == 6, \"wrong\"\nassert     rectangle_area(2,3) == 6, \"wrong\"\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rectangle_area(5, 10) == 50,'rectangle_area(5, 10) is wrong'\n\nprint('------------------------------------')\n\ndef rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     rectangle_area(2, 3) == 6\nassert     rectangle_area(5, 5) == 25\n\ndef rectangle_area_with_lambda(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    pass\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rectangle_area(5, 10) == 25\nassert rectangle_area(1, 4) == 4\nassert rectangle_area(5, 2) == 10\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert rectangle_area(1,1) == 1\nassert rectangle_area(2,1) == 2\nassert rectangle_area(1,2) == 2\nassert rectangle_area(2,2) == 4\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     rectangle_area(1,2) == 2, 'area of rectangle(1,2) should be 2'\nassert     rectangle_area(2,3) == 6, 'area of rectangle(2,3) should be 6'\nassert     rectangle_area(1,2) == 2, 'area of rectangle(1,2) should be 2'\nassert     rectangle_area(2,3) == 6, 'area of rectangle(2,3) should be 6'\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_uppercase(\"\") == \"\"\nassert remove_uppercase(\"H\") == \"H\"\nassert remove_uppercase(\"Hello\") == \"ello\"\nassert remove_uppercase(\"HELLO\") == \"ello\"\nassert remove_uppercase(\"h\") == \"h\"\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nremove_uppercase('ABc') == 'ABC'\nremove_uppercase('abc') == 'abc'\nremove_uppercase('ABC') == 'ABC'\nremove_uppercase('ABCD') == 'ABCD'\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_uppercase('abcABCDEF') == 'abcdef'\nassert     remove_uppercase('ABCABCDEF') == 'abcdef'\nassert     remove_uppercase('abcABC') == 'abc'\nassert     remove_uppercase('ABC') == ''\nassert     remove_uppercase('ABCabc') == 'abc'\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_uppercase('helloWorld') == 'helloWorld'\nassert     remove_uppercase('HELLO WORLD') == 'hello world'\nassert     remove_uppercase('HelloWorld') == ''\nassert     remove_uppercase('hello') == 'hello'\nassert     remove_uppercase('HELLO WORLD') == 'HELLO WORLD'\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef delete_all(str1, str2):\n    '''\n    Write a function to delete all occurrences of a substring from a given string.\n    '''\n    pass\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_uppercase('FooBar') == 'Foobar'\nassert     remove_uppercase('Foo') == 'Foo'\nassert     remove_uppercase('FooBarBaz') == 'FooBarBaz'\n\ndef is_valid_phone(str1):\n    '''\n    Write a function that takes a string as input and returns True if the string contains a valid phone number, else returns False.\n    A valid phone number must follow these rules:\n    It must contain exactly 10 digits.\n    The digits can only be numbers.\n    It must start with a 7, 8 or 9.\n    It cannot end with a hyphen or a period.\n    Examples:\n    \"1234567890\"   -->  true\n    \"123-45-678-908\" --> true\n    \"123 456-7890\"  -->  true\n    \"123-abc-def-ghi\"  -->  false\n    \"123 456-7890-1234\" -->  true\n    \"123 456-7890-1234-56789\"  -->  true\n    \"123-4xyz-def-ghi\"  -->  false\n    \"123-0xyz-def-ghi\"  -->  false\n    \"1234567890\"    -->  true\n    \"123.45.678.910\" -->  true\n    \"123.456789\"    -->  false\n    \"123456789\"    -->  false\n    \"+1(123)456789\" -->  true\n    \"+1-123-456789\" -->  true\n    \"+123456789\"    -->  false\n    \"123-456789\"    -->  false\n    \"123-4567890\"   -->  true\n    \"123-4567890-12\" -->  false\n    \"123 456-7890\"  -->  true\n    \"123-4567890a\"  -->  false\n    \"123-4567890asd\"  -->  false\n    \"1234567890asd\"  -->  false\n    \"123-4567890asdf\"  -->  false\n    \"1234567890asdf\"  -->  false\n    \"123-4567890sdf\"  -->  false\n    \"123-4567890SDF\"  -->  false\n    \"123-4567890 asdf\"  -->  false\n    \"123-4567890 A\"  -->  false\n    \"123-4567890a\"  -->  false\n    \"123-4567890ASD\"  -->  false\n    \"123-4567890-56789\"  -->  false\n    \"123-4567890asd\"  -->  false\n    \"123-4567890asdf\"  -->  false\n    \"1234567890asdf\"  -->  false\n    \"123-4567890asdf\"  -->  false\n    \"1234567890asdf\"  -->  false\n    \"123-4567890asdf\"  -->  false\n    \"123-4567890-56789\"  -->  true\n    \"123-4567890-56789sdf\"  -->  false\n    \"123-4567890-56789.sdf\"  -->  false\n    \"123-4567890-56789asdf\"  -->  true\n    \"+123-4567890-56789\"  -->  true\n    \"+123-4567890-56789sdf\"  -->  false\n    \"+123-4567890-56789asdf\"  -->  true\n    \"+123-4567890-56789asdf\"  -->  true\n    \"+123-4567890-56789asdf\"  -->  true\n    \"+123-4567890-56789asd\"  -->  false\n    \"+123-4567890asd\"  -->  false\n    \"+123-4567890sdf\"  -->  false\n    \"+123-4567890sdf\"  -->  false\n    \"+123-4567890sdf\"  -->  false\n    \"+123-4567890ASD\"  -->  false\n    \"+123-4567890a\"  -->  false\n    \"+123-4567890asd\"  -->  false\n    \"+123-4567890asdf\"  -->  true\n    \"+123-4567890asdf\"  -->  true\n    \"+123-4567890asdf\"  -->  true\n    \"+123-4567890asdf\"  -->  true\n    \"+123-4567890asdf\"  -->  true\n    \"+123-4567890asdf\"  -->  true\n    \"+123-4567890asdf\"  -->  true\n    \"+123-4567890-56789\"  -->  true\n    \"+123-4567890-56789sdf\"  -->  false\n    \"+123-4567890-56789asdf\"  -->  true\n    \"+123-4567890-56789asd\"  -->  false\n    \"+123-4567890-56789asdf\"  -->  true\n    \"+123-4567890-56789asdf\"  -->  true\n    \"+123-4567890-56789asdf\"  -->  true\n    \"+123-4567890-56789asdf\"  -->  true\n    \"+123-4567890-56789asdf\"  -->  true\n    \"+123-4567890asdf\"  -->  false\n    \"+123-4567890asd\"  -->  false\n    \"+123-4567890sdf\"  -->  false\n    \"+123-4567890sdf\"  -->  false\n    \"+123-4567890sdf\"  -->  false\n    \"+123-4567890ASD\"  -->  false\n    \"+123-4567890a\"  -->  false\n    \"+123-4567890asd\"  -->  false\n    \"+123-4567890asdf\"  -->  true\n    \"+123-4567890asdf\"  -->  true\n    \"+123-4567890asdf\"  -->  true\n    \"+123-4567890asdf\"  -->  true\n    \"+123-4567890asdf\"  -->  true\n    \"+123-4567890asdf\"  -->  true\n    \"+123-4567890asdf\"  -->  true\n    \"+123-4567890asdf\"  -->  true\n    \"+123-4567890asdf\"  -->  true\n    \"+123-4567890asdf\"  -->  true\n    \"+123-4567890asdf\"  -->  true\n    \"+123-4567890asdf\"  -->  true\n    \"+123-4567890asdf\"  -->  true\n    \"+123-4567890asdf\"  -->  true\n    \"+123-4567890asdf\"  -->  true\n    \"+123-4567890asdf\"  -->  true\n    \"+123-4567890asdf\"  -->  true\n    \"+123-4567890asdf\"  -->  true\n    \"+123-4567890asdf\"  -->  true\n    \"+123-4567890asdf\"  -->  true\n    \"+123-4567890asdf\"  -->  true\n    \"+123-4567890asdf\"  -->  true\n    \"+123-4567890asdf\"  -->  true\n    \"+123-4567890asdf\"  -->  true\n    \"+123-4567890asdf\"  -->  true\n    \"+123-4567890asdf\"  -->  true\n    \"+123-4567890asdf\"  -->  true\n    \"+123-4567890asdf\"  -->  true\n    \"+123-4567890asdf\"  -->  true\n    \"+123-4567890asdf\"  -->  true\n    \"+123-4567890asdf\"  -->  true\n    \"+123-4567890asdf\"  -->  true\n    \"+123-4567890asdf\"  -->  true\n    \"+123-4567890asdf\"  -->  true\n    \"+123-4567890asdf\"  -->  true\n    \"+123-4567"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_uppercase(\"abc\") == \"abc\", \"Should be \"abc\".\"\nassert     remove_uppercase(\"ABC\") == \"ABC\", \"Should be \"ABC\".\"\nassert     remove_uppercase(\"ABC\") == \"ABC\", \"Should be \"ABC\".\"\nassert     remove_uppercase(\"abcd\") == \"abcd\", \"Should be \"abcd\".\"\nassert     remove_uppercase(\"ABCD\") == \"ABCD\", \"Should be \"ABCD\".\"\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_uppercase('aBcD') == 'abc'\nassert     remove_uppercase('ABcD') == 'abc'\nassert     remove_uppercase('ABCD') == 'abc'\nassert     remove_uppercase('ABCD') == 'abc'\nassert     remove_uppercase('abcd') == 'abc'\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        if ord(str1[i]) < 65 or ord(str1[i]) > 90:\n            str2 += str1[i]\n    return str2\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef detect_camel_case(s):\n    '''\n    Given a string S with only lowercase characters, remove letters from S so that we get CamelCase. \n    '''\n    pass\n\ndef remove_spaces(s):\n    '''\n    Write a function to remove spaces from a given string.\n    '''\n    pass\n\ndef remove_spaces_from_string(s):\n    '''\n    Write a function to remove spaces from a given string.\n    '''\n    pass\n\ndef has_prefix(s, prefix):\n    '''\n    Write a function to check if a given string has given prefix.\n    '''\n    pass\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    # print the list\n    assert Extract([[0, 1, 2], ['a', 'b', 'c']]) == [[0], ['a', 'b', 'c']]\n    # print a list with the first element of the each sublist\n    assert Extract([[0, 1, 2], ['a', 'b', 'c']]) == [[0], ['a', 'b', 'c']]"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Extract([[3,2,1],[4,5,6]]) == [[3], [4]]\nassert     Extract([[3,2,1,4],[5,6,7]]) == [[3, 4], [5, 6]]\nassert     Extract([[3,2,1,4],[5,6,7,8]]) == [[3, 4], [5, 6]]\nassert     Extract([[3,2,1,4],[5,6,7,8], [9]]) == [[3, 4], [5, 6, 7], [9]]\n\nprint(\"All tests Passed!\""
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     Extract([[1,2,3],[4,5,6]]) == 1\nassert     Extract([[1,2],[3,4],[5,6]]) == 1\nassert     Extract([[1],[2]]) == 1\nassert     Extract([]) == None\nassert     Extract([[1,2,3],[4,5,6],[8]]) == 2\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Extract([[3, 4, 5], [-1, -2, -3], [1, 2, 3], (1, 2, 3), [1, 2], [-1, -2, -3], [2, 3, 4]]) == [-1, -2, -3, 1, 2, 1, 2]\nassert     Extract([[3, 4, 5], [-1, -2, -3], (1, 2, 3), (1, 2, 3), [1, 2], [-1, -2, -3], [2, 3, 4]]) == [-1, -2, -3, 1, 2, 1, 2]\nassert     Extract([[3, 4, 5], [-1, -2, -3], (1, 2, 3), (1, 2, 3), [1, 2], [-1, -2, -3], [2, 3, 4]]) == [-1, -2, -3, 1, 2, 1, 2]\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Extract([[1, 2, 3], [4, 5, 6]]) == [1, 4]\nassert     Extract([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 4]\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert Extract([[]]) == []\nassert Extract([[1], [2], [3], []]) == [1]\nassert Extract([[1], [2], [3], [4], []]) == [1, 4]\nassert Extract([[1,2,3], [4], [5,6]]) == [1, 2, 3]\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Extract([[1], [2], [3], [4]]) == [1], \"Wrong answer!\"\nassert     Extract([[1, 2], [2, 3], [3, 4], [4, 5]]) == [1, 2], \"Wrong answer!\"\nassert     Extract([[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6]]) == [1, 2, 3], \"Wrong answer!\"\nassert     Extract([[1], [2, 3], [4, 5, 6, 7], [8, 9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7], \"Wrong answer!\"\nassert     Extract([[1], [2, 3], [4, 5, 6, 7], [8, 9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7], \"Wrong answer!\"\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Extract([[1,2,3],[4,5,6],[7,8,9]]) == [1,4,7], 'Wrong'\nassert     Extract([[1,2],[3,4],[5,6],[7,8]]) == [1,3,5,7], 'Wrong'\nprint(\"Hurray! Task Passed\\n\")\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Extract([['this', 'is', 'a'], ['list', 'of', 'words'], ['in', 'each','sublist']]) == ['this', 'is', 'a', 'list', 'of', 'words']\nassert     Extract([[1, 2, 3], [4, 5, 6]]) == [1, 2, 3, 4, 5, 6]\n\nprint(\"Extract passed\")\n\ndef Reorder(lst):\n    '''\n    Write a python function to reorder sublists in a given list so that sublists of even lengths go first, followed by sublists of odd lengths.\n    '''\n    pass\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef upper_ctr_2(str):\n    count = 0\n    for i in range(len(str)):\n        if str[i].isupper():\n            count += 1\n    return count"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     upper_ctr(\"\") == 0, \"A empty string is not an empty string.\"\nassert     upper_ctr(\"H\") == 1, \"One upper case is not an upper case.\"\nassert     upper_ctr(\"A\") == 1, \"One upper case is not an upper case.\"\nassert     upper_ctr(\"B\") == 2, \"Two upper case are not an upper case.\"\nassert     upper_ctr(\"hello world\") == 5, \"Five upper case is not an upper case.\"\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     upper_ctr('PYTHON') == 3\nassert     upper_ctr('PYTHON') == 3\nassert     upper_ctr('Hello World') == 5\nassert     upper_ctr('PYTHONISEXP') == 4\n\n\ndef count_words(str):\n    '''\n    Write a python function to count the number of words in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     upper_ctr('hello world') == 10\nassert upper_ctr('i love python') == 17\nassert upper_ctr('i am a little girl') == 11\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     upper_ctr(\"The quick brown fox jumps over the lazy dog\") == 6, 'Wrong output'\nassert     upper_ctr(\"\") == 0, 'Wrong output'\nassert     upper_ctr(\"The quick brown fox jumps\") == 3, 'Wrong output'\nassert     upper_ctr(\"The quick brown fox\") == 3, 'Wrong output'\nassert     upper_ctr(\"The quick brown fox jumps over the lazy dog\") == 6, 'Wrong output'\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     upper_ctr('amit') == 1\nassert     upper_ctr('amit') == 3\nassert     upper_ctr('AmiT') == 5\nassert     upper_ctr('AMIT') == 5\nassert     upper_ctr
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     upper_ctr(\"UPPERCASE\") == 1, \"Expected upper_ctr('UPPERCASE') to be 1\"\nassert     upper_ctr(\"LOWERCASE\") == 4, \"Expected upper_ctr('LOWERCASE') to be 4\"\nassert     upper_ctr(\"LOWERCASE\") == 4, \"Expected upper_ctr('LOWERCASE') to be 4\"\nassert     upper_ctr(\"LOWERCASE\") == 1, \"Expected upper_ctr('LOWERCASE') to be 1\"\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     upper_ctr(\"Hello!\") == 0\nassert     upper_ctr(\"HELLO!\") == 4\nassert     upper_ctr
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     upper_ctr('The quick brown fox jumps over the lazy dog') == 6\nassert     upper_ctr('The Quick Brown Fox Jumps Over The Lazy Dog') == 8\nassert     upper_ctr('The quick brown fox jumps over the lazy dog') == 6\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert upper_ctr('The quick brown fox jumps over the lazy dog') == {\n    'o': 1,\n    'T': 1,\n    'h': 1,\n    'h': 1,\n    'i': 1,\n    'n': 1,\n    'k': 1,\n    '.': 1,\n    'l': 2,\n    'r': 1,\n    'n': 1,\n    'x': 1,\n    'o': 1,\n    'j': 1,\n    'u': 1,\n    's': 1,\n    'a': 1,\n    'w': 1,\n    'e': 1,\n    'r': 1,\n    'a': 1,\n    'p': 1,\n    'o': 1,\n    'r': 1,\n    'a': 1,\n    'b': 1,\n    'l': 2,\n    'i': 1,\n    'z': 1,\n    'u': 1,\n    'f': 1,\n    'r': 1,\n    't': 1,\n    'h': 1,\n    'c': 1,\n    'y': 1,\n    'k': 1,\n    '.': 1,\n    's': 1,\n    'l': 2,\n    'e': 1,\n    'r': 1,\n    'a': 1,\n    'c': 1,\n    'o': 1,\n    'q': 1,\n    'j': 1,\n    'x': 1,\n    'f': 1,\n    't': 1,\n    'e': 1,\n    'u': 1,\n    'i': 1,\n    't': 1,\n    'h': 1,\n    'o': 1,\n    'i': 1,\n    'l': 2,\n    'o': 1,\n    'p': 1,\n    'o': 1,\n    'w': 1,\n    'a': 1,\n    'l': 2,\n    'k': 1,\n    'h': 1,\n    'f': 1,\n    'o': 1,\n    'w': 1,\n    'p': 1,\n    'i': 1,\n    'l': 2,\n    'f': 1,\n    'u': 1,\n    'u': 1,\n    'r': 1,\n    'c': 1,\n    'u': 1,\n    'n': 1,\n    't': 1,\n    'a': 1,\n    'i': 1,\n    'h': 1,\n    'g': 1,\n    'a': 1,\n    'a': 1,\n    'n': 1,\n    'p': 1,\n    'u': 1,\n    'g': 1,\n    '.': 1,\n    'l': 2,\n    'y': 1,\n    'l': 2,\n    'e': 1,\n    'a': 1,\n    'h': 1,\n    '.': 1,\n    'p': 1,\n    'r': 1,\n    'e': 1,\n    'c': 1,\n    'o': 1,\n    'p': 1,\n    'r': 1,\n    'l': 2,\n    'n': 1,\n    'y': 1,\n    'w': 1,\n    'a': 1,\n    'o': 1,\n    'f': 1,\n    'o': 1,\n    'n': 1,\n    'h': 1,\n    'o': 1,\n    'p': 1,\n    'l': 2,\n    'k': 1,\n    'u': 1,\n    'g': 1,\n    'o': 1,\n    'c': 1,\n    'u': 1,\n    'f': 1,\n    'r': 1,\n    'p': 1,\n    'h': 1,\n    'c': 1,\n    'i': 1,\n    'p': 1,\n    'o': 1,\n    'l': 2,\n    'k': 1,\n    'p': 1,\n    'e': 1,\n    'a': 1,\n    'p': 1,\n    'r': 1,\n    'l': 2,\n    'o': 1,\n    'k': 1,\n    'i': 1,\n    'l': 2,\n    'c': 1,\n    'i': 1,\n    '.': 1,\n    'o': 1,\n    'n': 1,\n    'k': 1,\n    'y': 1,\n    'i': 1,\n    'n': 1,\n    'f': 1,\n    'o': 1,\n    'g': 1,\n    'l': 2,\n    'k': 1,\n    'i': 1,\n    'a': 1,\n    'k': 1,\n    'r': 1,\n    'o': 1,\n    'n': 1,\n    'r': 1,\n    'o': 1,\n    'r': 1,\n    'l': 2,\n    'r': 1,\n    'i': 1,\n    'n': 1,\n    'a': 1,\n    'p': 1,\n    'o': 1,\n    'n': 1,\n    'i': 1,\n    'h': 1,\n    'r': 1,\n    'a': 1,\n    'p': 1,\n    'c': 1,\n    'u': 1,\n    'h': 1,\n    'r': 1,\n    'i': 1,\n    'h': 1,\n    '.': 1,\n    'i': 1,\n    'e': 1,\n    'l': 2,\n    'g': 1,\n    'f': 1,\n    'p': 1,\n    'a': 1,\n    'e': 1,\n    'i': 1,\n    'k': 1,\n    'k': 1,\n    'a': 1,\n    'h': 1,\n    '.': 1,\n    'k': 1,\n    'i': 1,\n    '.': 1,\n    'a': 1,\n    'p': 1,\n    'n': 1,\n    'k': 1,\n    '.': 1,\n    'e': 1,\n    'f': 1,\n    'a': 1,\n    'i': 1,\n    'i': 1,\n    'c': 1,\n    'a': 1,\n    'p': 1,\n    'i': 1,\n    '.': 1,\n    'a': 1,\n    'i': 1,\n    'h': 1,\n    'k': 1,\n    'a': 1,\n    'l': 2,\n    'i': 1,\n    '.': 1,\n    'r': 1,\n    'c': 1,\n    'l': 2,\n    '.': 1,\n    'p': 1,\n    'a': 1,\n    'h': 1,\n    '.': 1,\n    'n': 1,\n    'i': 1,\n    'l': 2,\n    'r': 1,\n    'k': 1,\n    '.': 1,\n    'u': 1,\n    'r': 1,\n    'i': 1,\n    '.': 1,\n    'a': 1,\n    'l': 2,\n    'k': 1,\n    '.': 1,\n    'p': 1,\n    'l': 2,\n    'i': 1,\n    'i': 1,\n    'p': 1,\n    'h': 1,\n    '.': 1,\n    'p': 1,\n    'r': 1,\n    'a': 1,\n    'l': 2,\n    'p': 1,\n    'i': 1,\n    'k': 1,\n    'l': 2,\n    'i': 1,\n    'a': 1,\n    'o': 1,\n    'u': 1,\n    'g': 1,\n    'k': 1,\n    'r': 1,\n    'p': 1,\n    'e': 1,\n    'k': 1,\n    'k': 1,\n    'l': 2,\n    'a': 1,\n    'o': 1,\n    'n': 1,\n    'i': 1,\n    'p': 1,\n    'e': 1,\n    'l': 2,\n    'i': 1"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n'''\n    Note:\n        - your combinations_list should return a list of lists\n        - the inner lists should contain only unique elements\n        - each inner list should contain only non-negative integers\n        - each element of each inner list should represent a number of repetitions in a particular combination\n        - your combinations_list should return a list of list.\n        - for example, if given the list ['a', 'b', 'c'], your function should return [['a'], ['a', 'b'], ['a', 'b', 'c'], ['b'], ['b', 'c'], ['c']]\n        - if a given list had only 1 element, it should return [[]]\n'''\nassert combinations_list(['a', 'b', 'c']) == [['a'], ['a', 'b'], ['a', 'b', 'c'], ['b'], ['b', 'c'], ['c']]\nassert combinations_list(['a', 'c', 'b']) == [['a'], ['a', 'c'], ['a', 'c', 'b'], ['b'], ['b', 'c'], ['c']]\nassert combinations_list(['a', 'b', 'c', 'd', 'e']) == [['a'], ['a', 'b'], ['a', 'b', 'c'], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd', 'e'], ['a', 'b', 'c', 'd', 'e', 'f'], ['a', 'b', 'c', 'd', 'e', 'f', 'g'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']]\nassert combinations_list(['a', 'c', 'e', 'g', 'i', 'j', 'k','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']) == [['a'], ['a', 'c'], ['a', 'c', 'e'], ['a', 'c', 'e', 'g'], ['a', 'c', 'e', 'g', 'i'], ['a', 'c', 'e', 'g', 'i', 'j'], ['a', 'c', 'e', 'g', 'i', 'j', 'k'], ['a', 'c', 'e', 'g', 'i', 'j', 'k','m'], ['a', 'c', 'e', 'g', 'i', 'j', 'k','m', 'n'], ['a', 'c', 'e', 'g', 'i', 'j', 'k','m', 'n', 'o'], ['a', 'c', 'e', 'g', 'i', 'j', 'k','m', 'n', 'o', 'p'], ['a', 'c', 'e', 'g', 'i', 'j', 'k','m', 'n', 'o', 'p', 'q'], ['a', 'c', 'e', 'g', 'i', 'j', 'k','m', 'n', 'o', 'p', 'q', 'r'], ['a', 'c', 'e', 'g', 'i', 'j', 'k','m', 'n', 'o', 'p', 'q', 'r','s'], ['a', 'c', 'e', 'g', 'i', 'j', 'k','m', 'n', 'o', 'p', 'q', 'r','s', 't'], ['a', 'c', 'e', 'g', 'i', 'j', 'k','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u'], ['a', 'c', 'e', 'g', 'i', 'j', 'k','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v'], ['a', 'c', 'e', 'g', 'i', 'j', 'k','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w'], ['a', 'c', 'e', 'g', 'i', 'j', 'k','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x'], ['a', 'c', 'e', 'g', 'i', 'j', 'k','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y'], ['a', 'c', 'e', 'g', 'i', 'j', 'k','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']]\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     combinations_list([1,2,3]) == [[1, 2, 3],\n                                            [1, 3, 2],\n                                            [2, 1, 3],\n                                            [2, 3, 1],\n                                            [3, 1, 2],\n                                            [3, 2, 1]]\n\ndef combinations_list_recursive(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     combinations_list(list1) == [[1,2],\n                                      [1,3],\n                                      [1,4],\n                                      [2,3],\n                                      [2,4],\n                                      [3,4]]\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     combinations_list([1, 2, 3]) == [[1, 2, 3],\n                                            [1, 3, 2],\n                                            [2, 1, 3],\n                                            [2, 3, 1],\n                                            [3, 1, 2],\n                                            [3, 2, 1]]\n\nprint('Passed all test cases')"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     combinations_list([1, 2, 3]) == [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\nassert     combinations_list([1]) == [[1]]\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     combinations_list([1, 2, 3]) == [[1, 2, 3]]\nassert     combinations_list([1, 2, 3, 4, 5]) == [[1, 2], [1, 3], [1, 4], [1, 5], [2, 3], [2, 4], [2, 5], [3, 4], [3, 5], [4, 5]]\nassert     combinations_list([1, 2, 3, 4, 5, 6]) == [[1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 3, 6], [1, 2, 4, 5], [1, 2, 4, 6], [1, 2, 5, 6], [1, 3, 4, 5], [1, 3, 4, 6], [1, 3, 5, 6], [1, 4, 5, 6], [2, 3, 4, 5], [2, 3, 4, 6], [2, 3, 5, 6], [2, 4, 5, 6], [3, 4, 5, 6]]\nassert     combinations_list([1, 2, 3, 4, 5, 6, 7]) == [[1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 3, 6], [1, 2, 3, 7], [1, 2, 4, 5], [1, 2, 4, 6], [1, 2, 4, 7], [1, 2, 5, 6], [1, 2, 5, 7], [1, 2, 6, 7], [1, 3, 4, 5], [1, 3, 4, 6], [1, 3, 4, 7], [1, 3, 5, 6], [1, 3, 5, 7], [1, 3, 6, 7], [1, 4, 5, 6], [1, 4, 5, 7], [1, 4, 6, 7], [1, 5, 6, 7], [2, 3, 4, 5], [2, 3, 4, 6], [2, 3, 4, 7], [2, 3, 5, 6], [2, 3, 5, 7], [2, 3, 6, 7], [2, 4, 5, 6], [2, 4, 5, 7], [2, 4, 6, 7], [2, 5, 6, 7], [3, 4, 5, 6], [3, 4, 5, 7], [3, 4, 6, 7], [3, 5, 6, 7], [4, 5, 6, 7]]\nassert     combinations_list([1, 2, 3, 4, 5, 6, 7, 8]) == [[1, 2, 3, 4], [1, 2, 3, 5], [1, 2, 3, 6], [1, 2, 3, 7], [1, 2, 3, 8], [1, 2, 4, 5], [1, 2, 4, 6], [1, 2, 4, 7], [1, 2, 4, 8], [1, 2, 5, 6], [1, 2, 5, 7], [1, 2, 5, 8], [1, 2, 6, 7], [1, 2, 6, 8], [1, 2, 7, 8], [1, 3, 4, 5], [1, 3, 4, 6], [1, 3, 4, 7], [1, 3, 4, 8], [1, 3, 5, 6], [1, 3, 5, 7], [1, 3, 5, 8], [1, 3, 6, 7], [1, 3, 6, 8], [1, 3, 7, 8], [1, 4, 5, 6], [1, 4, 5, 7], [1, 4, 5, 8], [1, 4, 6, 7], [1, 4, 6, 8], [1, 4, 7, 8], [1, 5, 6, 7], [1, 5, 6, 8], [1, 5, 7, 8], [1, 6, 7, 8], [2, 3, 4, 5], [2, 3, 4, 6], [2, 3, 4, 7], [2, 3, 4, 8], [2, 3, 5, 6], [2, 3, 5, 7], [2, 3, 5, 8], [2, 3, 6, 7], [2, 3, 6, 8], [2, 3, 7, 8], [2, 4, 5, 6], [2, 4, 5, 7], [2, 4, 5, 8], [2, 4, 6, 7], [2, 4, 6, 8], [2, 4, 7, 8], [2, 5, 6, 7], [2, 5, 6, 8], [2, 5, 7, 8], [2, 6, 7, 8], [3, 4, 5, 6], [3, 4, 5, 7], [3, 4, 5, 8], [3, 4, 6, 7], [3, 4, 6, 8], [3, 4, 7, 8], [3, 5, 6, 7], [3, 5, 6, 8], [3, 5, 7, 8], [3, 6, 7, 8], [4, 5, 6, 7], [4, 5, 6, 8], [4, 5, 7, 8], [4, 6, 7, 8], [5, 6, 7, 8]]\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     combinations_list([1,2,3]) == [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]], \nassert     combinations_list([1,2,3,4]) == [[1,2,3,4],[1,2,4,3],[1,3,2,4],[1,3,4,2],[1,4,2,3],[2,1,3,4],[2,1,4,3],[2,3,1,4],[2,3,4,1],[3,1,2,4],[3,1,4,2],[3,2,1,4],[3,2,4,1],[3,4,1,2],[3,4,2,1],[4,1,2,3],[4,1,3,2],[4,2,1,3],[4,2,3,1],[4,3,1,2],[4,3,2,1]],\nassert     combinations_list([1,2,3,4,5]) == [[1,2,3,4,5],[1,2,3,5,4],[1,2,4,3,5],[1,2,4,5,3],[1,3,2,4,5],[1,3,2,5,4],[1,3,4,2,5],[1,3,4,5,2],[1,4,2,3,5],[1,4,2,5,3],[1,4,5,2,3],[1,4,5,3,2],[2,1,3,4,5],[2,1,3,5,4],[2,1,4,3,5],[2,1,4,5,3],[2,3,1,4,5],[2,3,1,5,4],[2,3,4,1,5],[2,3,4,5,1],[3,1,2,4,5],[3,1,2,5,4],[3,1,4,2,5],[3,1,4,5,2],[3,2,1,4,5],[3,2,1,5,4],[3,2,4,1,5],[3,2,4,5,1],[3,4,1,2,5],[3,4,1,5,2],[3,4,2,1,5],[3,4,2,5,1],[4,1,2,3,5],[4,1,2,5,3],[4,1,3,2,5],[4,1,3,5,2],[4,2,1,3,5],[4,2,1,5,3],[4,2,3,1,5],[4,2,3,5,1],[4,3,1,2,5],[4,3,1,5,2],[4,3,2,1,5],[4,3,2,5,1],[4,4,1,2,3],[4,4,1,3,2],[4,4,2,1,3],[4,4,2,3,1],[4,4,3,1,2],[5,1,2,3,4],[5,1,2,4,3],[5,1,3,2,4],[5,1,3,4,2],[5,2,1,3,4],[5,2,1,4,3],[5,2,3,1,4],[5,2,3,4,1],[5,3,1,2,4],[5,3,1,4,2],[5,3,2,1,4],[5,3,2,4,1],[5,4,1,2,3],[5,4,1,3,2],[5,4,2,1,3],[5,4,2,3,1],[5,4,3,1,2],[5,4,3,2,1]],\nassert     combinations_list([1,2,3,4,5,6]) == [[1,2,3,4,5,6],[1,2,3,6,5,4],[1,2,4,3,6,5],[1,2,4,5,3,6],[1,2,5,3,6,4],[1,2,5,6,3,4],[1,3,2,4,5,6],[1,3,2,6,5,4],[1,3,4,2,6,5],[1,3,4,6,2,5],[1,3,6,2,4,5],[1,3,6,5,4,2],[1,4,2,3,6,5],[1,4,2,6,3,5],[1,4,5,3,6,2],[1,4,5,6,3,2],[2,1,3,4,5,6],[2,1,3,6,5,4],[2,1,5,3,6,4],[2,1,5,6,3,4],[2,3,1,4,5,6],[2,3,1,6,5,4],[2,3,4,1,6,5],[2,3,4,5,1,6],[2,3,6,1,4,5],[2,3,6,5,1,4],[2,4,1,3,6,5],[2,4,1,6,3,5],[2,4,5,1,3,6],[2,4,5,3,1,6],[2,5,1,3,4,6],[2,5,1,6,3,4],[2,5,3,1,4,6],[2,5,3,6,1,4],[3,1,2,4,5,6],[3,1,2,6,5,4],[3,1,4,2,6,5],[3,1,4,6,2,5],[3,2,1,4,5,6],[3,2,1,6,5,4],[3,2,5,1,4,6],[3,2,5,6,1,4],[3,4,1,2,6,5],[3,4,1,6,2,5],[3,4,2,1,6,5],[3,4,2,5,1,6],[3,4,6,1,2,5],[3,4,6,5,1,2],[3,6,1,2,4,5],[3,6,1,5,4,2],[3,6,2,1,4,5],[3,6,2,5,1,4],[3,6,4,1,2,5],[3,6,4,5,1,2],[4,1,2,3,6,5],[4,1,2,6,3,5],[4,1,3,2,6,5],[4,1,3,6,2,5],[4,1,5,3,6,2],[4,1,5,6,3,2],[4,2,1,3,6,5],[4,2,1,6,3,5],[4,2,3,1,6,5],[4,2,3,6,1,5],[4,2,6,1,3,5],[4,2,6,5,1,3],[4,3,1,2,6,5],[4,3,1,6,2,5],[4,3,2,1,6,5],[4,3,2,6,1,5],[4,3,6,1,2,5],[4,3,6,5,1,2],[5,1,2,3,6,5],[5,1,2,6,3,5],[5,1,3,2,6,5],[5,1,3,6,2,5],[5,1,5,3,6,2],[5,1,5,6,3,2],[5,2,1,3,6,5],[5,2,1,6,3,5],[5,2,3,1,6,5],[5,2,3,6,1,5],[5,2,6,1,3,5],[5,2,6,5,1,3],[5,3,1,2,6,5],[5,3,1,6,2,5],[5,3,2,1,6,"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     combinations_list([1,2,3]) == [[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1]]\n\n\n\ndef combinations_list_gen(list1):\n    '''\n    Write a function to generate all possible combinations of the elements of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     combinations_list([1,2,3]) == [[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1]]\nassert     combinations_list([]) == []\nassert     combinations_list([1,2,3,4]) == [[1,2,3,4], [1,2,4,3], [1,3,2,4], [1,3,4,2], [1,4,2,3], \n                                                [1,4,3,2], [2,1,3,4], [2,1,4,3], [2,3,1,4], [2,3,4,1], \n                                                [2,4,1,3], [2,4,3,1], [3,1,2,4], [3,1,4,2], [3,2,1,4], \n                                                [3,2,4,1], [3,4,1,2], [3,4,2,1], [4,1,2,3], [4,1,3,2], \n                                                [4,2,1,3], [4,2,3,1], [4,3,1,2], [4,3,2,1]]\nassert     combinations_list([1,2,3,4,5]) == [[1,2,3,4,5], [1,2,4,3,5], [1,2,5,3,4], \n                                                [1,3,2,4,5], [1,3,4,2,5], [1,3,5,2,4], \n                                                [1,4,2,3,5], [1,4,3,2,5], [1,4,5,2,3], \n                                                [1,5,2,3,4], [1,5,3,2,4], [2,1,3,4,5], \n                                                [2,1,4,3,5], [2,1,5,3,4], [2,3,1,4,5], \n                                                [2,3,4,1,5], [2,3,5,1,4], [2,4,1,3,5], \n                                                [2,4,3,1,5], [2,4,5,1,3], [2,5,1,3,4], \n                                                [3,1,2,4,5], [3,1,4,2,5], [3,1,5,2,4], \n                                                [3,2,1,4,5], [3,2,4,1,5], [3,2,5,1,4], \n                                                [3,4,1,2,5], [3,4,2,1,5], [3,4,5,1,2], \n                                                [3,5,1,2,4], [3,5,2,1,4], [4,1,2,3,5], \n                                                [4,1,3,2,5], [4,1,5,2,3], [4,2,1,3,5], \n                                                [4,2,3,1,5], [4,2,5,1,3], [4,3,1,2,5], \n                                                [4,3,2,1,5], [4,3,5,1,2], [4,5,1,2,3], \n                                                [5,1,2,3,4], [5,1,3,2,4], [5,1,4,2,3], \n                                                [5,2,1,3,4], [5,2,3,1,4], [5,2,4,1,3], \n                                                [5,3,1,2,4], [5,3,2,1,4], [5,3,4,1,2], \n                                                [5,4,1,2,3], [5,4,2,1,3], [5,4,3,1,2]]\nassert     combinations_list([1,2,3,4,5,6]) == [[1,2,3,4,5,6]]\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nprint(\"check: \", max_subarray_product([-2,3,-1,4]))\nassert \nprint(\"check: \", max_subarray_product([-2, -3]))\nassert \nprint(\"check: \", max_subarray_product([0,1]))\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    \n    for i in range(n):\n        dp[i][i] = arr[i]\n    \n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            dp[i][j] = max(arr[i] * dp[i + 1][j], arr[j] * dp[i][j - 1])\n    \n    return dp[0][-1]\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef max_subarray_product_2(arr):\n    '''\n    Your solution should return the maximum product possible, which is also the product of the largest left and right subarray, if the array is bigger than the subarrays.\n    '''\n    \n    # sort the array\n    arr = sorted(arr)\n    \n    # initialize left and right\n    l, r = 0, 0\n    \n    # initialize maximum product\n    max_product = float('-inf')\n    \n    # loop over the array\n    for i in range(len(arr)):\n        # update the maximum product\n        max_product = max(max_product, arr[i] * (arr[l] * arr[r]))\n        # update the left\n        while l < i and arr[l] > 0:\n            l += 1\n        # update the right\n        while r < i and arr[r] > 0:\n            r += 1\n    \n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     max_subarray_product([2, 3, -2, 4]) == 6\nassert     max_subarray_product([2, 3, -2, 4, -1, 5]) == 6\nassert     max_subarray_product([2, 3, -2, 4, -1, 5, -9]) == 60\nassert     max_subarray_product([2, 3, -2, 4, -1, 5, -9, -3]) == 60\nassert     max_subarray_product([]) == None\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_subarray_product([2,3,-2,4]) == 6\nassert     max_subarray_product([2,3,-2,4,-3,4]) == 24\nassert     max_subarray_product([2,3,-2,4,5]) == 24\nassert     max_subarray_product([1,2,3,4,5]) == 24\nassert     max_subarray_product([-2,-3,-4,-5]) == -12\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nprint(max_subarray_product([1, 2, -4, -2, 3, 6, -5]))\nassert max_subarray_product([1, -2, 3, -4, -5, -6, 7]) == 21\nassert max_subarray_product([-2, -3, -4, -5, -6, -7]) == 0\nassert max_subarray_product([0, -2, -3, -4, -5, -6, -7]) == 0\nassert max_subarray_product([1, 2, -3, 4, 5, 6, 7]) == 84\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     max_subarray_product([2,3,-2,4]) == 6, \"Should be: 6\"\nassert     max_subarray_product([-2,0,-1]) == 0, \"Should be: 0\"\nassert     max_subarray_product([2,-1,3,-4,5]) == 10, \"Should be: 10\"\nassert     max_subarray_product([1,2,3,4,5]) == 120, \"Should be: 120\"\nassert     max_subarray_product([2,4,1,5]) == 4, \"Should be: 4\"\nprint(\"Test passed!\")\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_value({1: 1, 2: 2}, False) == False, 'Wrong output'\nassert     check_value({1: 1, 2: 2, 3: 3}, True) == True, 'Wrong output'\nassert     check_value({1: 1, 2: 2, 3: 3}, False) == False, 'Wrong output'\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_value({1:1, 2:2, 3:3}, 1) == True, 'values are not the same'\nassert     check_value({1:1, 2:2, 3:3}, 2) == False, 'values are the same'\nassert     check_value({1:1, 2:2, 3:3}, 3) == True, 'values are not the same'\nassert     check_value({1:1, 2:2, 3:3}, 4) == False, 'values are the same'\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_value({'x': 1, 'y': 2, 'z': 3}, 3) == True\nassert     check_value({'x': 1, 'y': 2, 'z': 1}, 3) == False\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    check_value({\"a\": 1, \"b\": 1, \"c\": 1}, 1) == True, \"a, b, c should have same value 1.\"\n    check_value({\"a\": 2, \"b\": 1, \"c\": 1}, 1) == False, \"a, b, c should have same value 1.\"\n    check_value({\"a\": 1, \"b\": 2, \"c\": 1}, 1) == False, \"a, b, c should have same value 1.\"\n    check_value({\"a\": 1, \"b\": 2, \"c\": 2}, 1) == True, \"a, b, c should have same value 1.\"\n    check_value({\"a\": 1, \"b\": 2, \"c\": 1, \"d\": 1}, 1) == False, \"a, b, c, d should have same value 1.\"\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert check_value({1:2, 2:1, 3:2}, 3) == True\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert check_value(dict, dict) == True\nassert check_value(dict, dict2) == True\nassert check_value(dict, dict3) == True\nassert check_value(dict, dict4) == True\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_value({1: 1, 2: 2, 3: 3, 4: 4, 5: 5}, 5) == True\nassert     check_value({1: 1, 2: 2, 3: 3, 4: 4, 5: 5}, 1) == False\nassert     check_value({1: 1, 2: 2, 3: 3, 4: 4, 5: 5}, 2) == False\nassert     check_value({1: 1, 2: 2, 3: 3, 4: 4, 5: 5}, 3) == False\nassert     check_value({1: 1, 2: 2, 3: 3, 4: 4, 5: 5}, 4) == True\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     drop_empty({1: 2, 3:4, 5:6}) == {1: 2, 3: 4, 5: 6}\nassert    drop_empty({1: 2, 3:4, 5:6}) == {1: 2, 3: 4, 5: 6}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     drop_empty({}) == {}, \"Empty dictionary.\"\nassert     drop_empty({'a':1,'b':2}) == {'b':2}, \"Non-empty dictionary.\"\n\n\ndef get_diff_key(dict1, dict2):\n    '''\n    Write a function to calculate the difference in keys of two dictionaries.\n    '''\n    pass\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     drop_empty({1: 2, 3:4}) == {1: 2, 3:4}\nassert     drop_empty({1: 2, 3:4, 5:6}) == {1: 2, 3:4, 5:6}\nassert     drop_empty({1: 2, 3:4, 5:6, 7:8}) == {1: 2, 3:4, 5:6, 7:8}\nassert     drop_empty({1:2, 3:4, 5:6, 7:8, 9:10}) == {1: 2, 3:4, 5:6, 7:8}\nassert     drop_empty({1:2, 3:4, 5:6, 7:8, 9:10, 11:12}) == {1: 2, 3:4, 5:6, 7:8, 9:10}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     drop_empty({\"A\":1,\"B\":2,\"C\":3}) == {\"A\":1,\"B\":2,\"C\":3}, \"Should return a new dictionary, without empty entries\"\nassert     drop_empty({\"A\":1,\"B\":2,\"C\":3,\"D\":4}) == {\"A\":1,\"B\":2,\"C\":3,\"D\":4}, \"Should return a new dictionary, without empty entries\"\nassert     drop_empty({\"A\":1,\"B\":2,\"C\":3,\"D\":4,\"E\":5}) == {\"A\":1,\"B\":2,\"C\":3,\"D\":4,\"E\":5}, \"Should return a new dictionary, without empty entries\""
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     drop_empty({'a':1,'b':2,'c':3}) == {'a':1,'c':3}\nassert     drop_empty({'a':1,'b':2,'c':3,'d':4}) == {'a':1,'b':2,'c':3}\nassert     drop_empty({'a':1,'b':2,'c':3,'d':4,'e':5}) == {'a':1,'b':2,'c':3,'d':4}\nassert     drop_empty({'a':1,'b':2,'c':3,'d':4,'e':5,'f':6,'g':7,'h':8}) == {'a':1,'b':2,'c':3,'d':4,'e':5,'f':6}\nassert     drop_empty({}) == {}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     drop_empty({}) == None, \"The dict should be empty\"\nassert     drop_empty({'a': 1, 'b': 1}) == None, \"Shouldn't drop anything\"\nassert     drop_empty({'a': 1, 'b': 2}) == {'a': 1}, \"Should drop empty dict\"\nassert     drop_empty({'a': 1, 'b': 2, 'c': 1}) == {'a': 1, 'b': 2}, \"Should drop empty dict\"\nassert     drop_empty({'a': 1, 'b': 2, 'c': 1, 'd': 1, 'e': 1}) == {'a': 1, 'b': 2, 'c': 1, 'd': 1, 'e': 1}, \"Should drop empty dict\"\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ndrop_empty({}) == {}\ndrop_empty({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}) == {'b': 2, 'c': 3, 'd': 4, 'e': 5}\ndrop_empty({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f':6, 'g': 7, 'h':8, 'i': 9}) == {'b': 2, 'c': 3, 'd': 4, 'e': 5}\ndrop_empty({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f':6, 'g': 7, 'h':8, 'i': 9, 'j':10, 'k':11, 'l':12,'m':13, 'n':14}) == {'b': 2, 'c': 3, 'd': 4, 'e': 5}\ndrop_empty({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f':6, 'g': 7, 'h':8, 'i': 9, 'j':10, 'k':11, 'l':12,'m':13, 'n':14, 'o':15, 'p':16, 'q':17, 'r':18,'s':19, 't':20, 'u':21, 'v':22, 'w':23, 'x':24, 'y':25, 'z':26}) == {'b': 2, 'c': 3, 'd': 4, 'e': 5}\ndrop_empty({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f':6, 'g': 7, 'h':8, 'i': 9, 'j':10, 'k':11, 'l':12,'m':13, 'n':14, 'o':15, 'p':16, 'q':17, 'r':18,'s':19, 't':20, 'u':21, 'v':22, 'w':23, 'x':24, 'y':25, 'z':26, 'aa':27, 'bb':28, 'cc':29, 'dd':30, 'ee':31, 'ff':32, 'gg':33, 'hh':34, 'ii':35, 'jj':36, 'kk':37, 'll':38,'mm':39, 'nn':40, 'oo':41, 'pp':42, 'qq':43, 'rr':44,'ss':45, 'tt':46, 'uu':47, 'vv':48, 'ww':49, 'xx':50, 'yy':51, 'zz':52} == {'b': 2, 'c': 3, 'd': 4, 'e': 5}\ndrop_empty({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f':6, 'g': 7, 'h':8, 'i': 9, 'j':10, 'k':11, 'l':12,'m':13, 'n':14, 'o':15, 'p':16, 'q':17, 'r':18,'s':19, 't':20, 'u':21, 'v':22, 'w':23, 'x':24, 'y':25, 'z':26, 'aa':27, 'bb':28, 'cc':29, 'dd':30, 'ee':31, 'ff':32, 'gg':33, 'hh':34, 'ii':35, 'jj':36, 'kk':37, 'll':38,'mm':39, 'nn':40, 'oo':41, 'pp':42, 'qq':43, 'rr':44,'ss':45, 'tt':46, 'uu':47, 'vv':48, 'ww':49, 'xx':50, 'yy':51, 'zz':52, 'aaa':53, 'bbb':54, 'ccc':55, 'ddd':56, 'eee':57, 'fff':58, 'ggg':59, 'hhh':60, 'iii':61, 'jjj':62, 'kkk':63, 'lll':64,'mmm':65, 'nnn':66, 'ooo':67, 'ppp':68, 'qqq':69, 'rrr':70,'sss':71, 'ttt':72, 'uuu':73, 'vvv':74, 'www':75, 'xxx':76, 'yyy':77, 'zzz':78} == {'b': 2, 'c': 3, 'd': 4, 'e': 5}\ndrop_empty({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f':6, 'g': 7, 'h':8, 'i': 9, 'j':10, 'k':11, 'l':12,'m':13, 'n':14, 'o':15, 'p':16, 'q':17, 'r':18,'s':19, 't':20, 'u':21, 'v':22, 'w':23, 'x':24, 'y':25, 'z':26, 'aa':27, 'bb':28, 'cc':29, 'dd':30, 'ee':31, 'ff':32, 'gg':33, 'hh':34, 'ii':35, 'jj':36, 'kk':37, 'll':38,'mm':39, 'nn':40, 'oo':41, 'pp':42, 'qq':43, 'rr':44,'ss':45, 'tt':46, 'uu':47, 'vv':48, 'ww':49, 'xx':50, 'yy':51, 'zz':52, 'aaa':53, 'bbb':54, 'ccc':55, 'ddd':56, 'eee':57, 'fff':58, 'ggg':59, 'hhh':60, 'iii':61, 'jjj':62, 'kkk':63, 'lll':64,'mmm':65, 'nnn':66, 'ooo':67, 'ppp':68, 'qqq':69, 'rrr':70,'sss':71, 'ttt':72, 'uuu':73, 'vvv':74, 'www':75, 'xxx':76, 'yyy':77, 'zzz':78} == {'b': 2, 'c': 3, 'd': 4, 'e': 5}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     drop_empty({'a': 'A', 'b': 'B', 'c': ''}) == {'a': 'A', 'b': 'B', 'c': None}, f'Expected {drop_empty({'a': 'A', 'b': 'B', 'c': ''})} to equal {{\\'a\\': \\'A\\', \\'b\\': \\'B\\', \\'c\\': None}} but returned {drop_empty({\\'a\\': \\'A', 'b': 'B', \\'c\\': ''})}'\nassert     drop_empty({}) == {}, f'Expected {drop_empty({})} to equal {{}} but returned {drop_empty({})}'\nassert     drop_empty({'a': 'A', 'b': None}) == {'a': 'A'}, f'Expected {drop_empty({\\'a\\': \\'A', 'b': None})} to equal {{\\'a\\': \\'A\\'}} but returned {drop_empty({\\'a\\': \\'A', \\'b\\': None})}'\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     drop_empty({}) == {}, 'Empty dictionary is not empty'\nassert     drop_empty({1:2, 3:4}) == {1:2}, 'Empty dictionary'\nassert     drop_empty({1:2, 2:3, 4:5, 6:7}) == {1:2, 2:3, 4:5}, 'Empty dictionary'\nassert     drop_empty({1:2, 2:3, 4:5, 5:6}) == {1:2, 2:3, 4:5, 5:6}, 'Empty dictionary'\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     drop_empty({}) == {}\nassert     drop_empty({1: \"a\", 2: \"b\"}) == {1: \"a\", 2: \"b\"}\nassert     drop_empty({1: \"a\", \"b\": 1}) == {1: \"a\"}"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_product([1, 2, 3, 4]) == 24, 'First example'\nassert     max_product([-1, -2, -3, -4]) == -24, 'Second example'\nassert     max_product([1, 2, -3, -4]) == 24, 'Third example'\nassert     max_product([-1, -2, 3, 4]) == 24, 'Fourth example'\nassert     max_product([1, 2, -3, 4, 5, 6, 7, 8, 9]) == 120, 'Fifth example'\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_product([1,2,3,4,5]) == 120\nassert     max_product([6,3,2,1]) == 6\nassert     max_product([1,2,3,4,5,6]) == 720\nassert     max_product([1,2,3,4,5,6,1]) == 720\nassert     max_product([6,3,2,1,2,1,4,5,6]) == 4160\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_product([1, 6, 7, 4, 3, 2, 8, 2, 1]) == 18, 'Test Failed'\nassert max_product([2, 3, -2, 4, -1, -3, 5, 1]) == 24, 'Test Failed'\nassert max_product([-1, -2, -3, -4, 5, -6, 7, 8]) == 880, 'Test Failed'\nassert max_product([1]) == 1, 'Test Failed'\nassert max_product([1, -2, 3, -4]) == 16, 'Test Failed'\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add_pairwise((5,)) == (5, 5)\nassert     add_pairwise((1, 2, 3, 4, 5, 6)) == (2, 8, 10, 12, 14, 16)\n\ndef add_pairwise2(tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add_pairwise((1, 2, 3, 4)) == (2, 4, 6, 8)\nassert     add_pairwise((1, 2, 3, 4, 5)) == (2, 4, 6, 8, 10)\nassert     add_pairwise((1, 2, 3, 4, 5, 6, 7, 8)) == (2, 4, 6, 8, 10, 12, 14, 16)\nassert     add_pairwise((1, 2, 3, 4, 5, 6, 7, 8, 9)) == (2, 4, 6, 8, 10, 12, 14, 16, 18)\nassert     add_pairwise((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == (2, 4, 6, 8, 10, 12, 14, 16, 18, 20)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     add_pairwise(('a', 'b')) == ('a', 'b', 'a', 'b')\nassert     add_pairwise(('a', 'b', 'c', 'd', 'e')) == ('a', 'b', 'c', 'd', 'e', 'a', 'b', 'c', 'd', 'e')"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     add_pairwise((1,2,3,4,5)) == (2,3,4,5,6)\nassert     add_pairwise((1,2,3,4,5,6)) == (3,4,5,6,7,8)\n\ndef remove_keys(dict_obj, val):\n    '''\n    Write a function to remove the key-value pairs which has the value 'val'\n    from the given dictionary\n    '''\n    pass\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     add_pairwise((1,2,3,4,5)) == (2,4,6,8,10)\nassert add_pairwise((1,2,3,4,5)) == (1,3,5,7,9)\nassert add_pairwise((1,2,3,4,5,6)) == (2,4,6,8,10,12)\nassert add_pairwise((1,2,3,4,5,6)) == (1,3,5,7,9,11)\nassert add_pairwise((1,2,3,4,5,6,7)) == (2,4,6,8,10,12,14)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     add_pairwise((1,2,3,4,5)) == (1,2,3,6,7), \"Wrong result\"\n\ndef bubble_sort(test_tup):\n    '''\n    Write a function to sort the tuples in ascending order.\n    '''\n    pass\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add_pairwise((1,2,3)) == (2,4,6)\nassert     add_pairwise((-1,2,3)) == (-3,2,5)\nassert     add_pairwise((1,-2,3)) == (-3,2,5)\nassert     add_pairwise((1,2,3,-4)) == (2,-4,-4,-5)\nassert     add_pairwise((1,-2,-3)) == (-3,2,-4)\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_remainder([5, 10, 20, 10], 12) == 6\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_remainder([1,2,3,4], 6) == 24 \nassert     find_remainder([1,2,3,4], 7) == 0 \nassert     find_remainder([1,2,3,4], 8) == 24 \nassert     find_remainder([1,2,3,4], 9) == 0 \nassert     find_remainder([1,2,3,4], 10) == 24 \n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_remainder([1,2,3,4,5], 6) == 2,'sample case 1'\nassert     find_remainder([1,2,3,4,5], 4) == 0,'sample case 2'\nassert     find_remainder([2,2,2,2], 2) == 0,'sample case 3'\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\narr = [1,2,3,4] \nn = 4\n\nprint(\"The product of the array multiplication modulo 4 is\", find_remainder(arr, n))\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_remainder([2,2],4) == 8\nassert     find_remainder([0,1,1],2) == 0\nassert     find_remainder([0,1,1,0],2) == 1\nassert     find_remainder([1,1,0,0,1],2) == 2\n\n'''\n========================================\n[5,5,0,0,0,1,1,1,0]\n[[0,1,0],[0,1,1],[0,0,1],[0,0,0],[1,1,1]]\n[[1,1,1,0,0,0],[1,1,0,0,0,0],[1,0,1,0,0,0],[0,1,1,0,0,0],[0,1,0,1,0,0],[0,0,1,1,0,0]]\n'''\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_remainder([3,2,1], 6) == 0, \"Case 1\"\nassert find_remainder([4,4,4], 2) == 0, \"Case 2\"\nassert find_remainder([1,1,1], 4) == 0, \"Case 3\""
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_remainder([1,2,3,4,5,6,7], 5) == 42\nassert     find_remainder([2,4,6,8,10], 8) == 56\nassert     find_remainder([1,2,3], 4) == 12\nassert     find_remainder([1,2,3,4,5,6,7,8,9,10,11,12], 13) == 42\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert find_remainder([1,3,5,7], 3) == 84\nassert find_remainder([1,2,3,4], 5) == 2\nassert find_remainder([1,2,3,4], 2) == 2\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nfind_remainder([5, 8, 9, 10, 11, 12, 13], 15) == 934\nassert find_remainder([1, 2, 3, 4, 5], 8) == 1"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_Consecutive([-1, -2, -3, -4, -5, -6]) == True\nassert     check_Consecutive([-1, -2, -3, -4, -5, -6, -7]) == False\nassert     check_Consecutive([0, 1, 2, 3, 4, 5, 6, 7]) == True\nassert     check_Consecutive([0, 1, 2, 3, 4, 5, 6, 7, 8]) == False\nassert     check_Consecutive([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == False\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_Consecutive([1, 2, 3, 4, 5, 6]) == True\nassert     check_Consecutive([1, 2, 3, 4, 5, 4]) == False\nassert     check_Consecutive([1, 2, 3, 4, 5, 3, 4]) == False\nassert     check_Consecutive([1, 2, 3, 4, 5, 2, 3, 4]) == False\nassert     check_Consecutive([1, 2, 3, 4, 5, 2, 3, 4, 5, 4, 4, 4]) == False\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_Consecutive([2, 3, 4, 7, 9]) == True, \"Wrong!\"\nassert check_Consecutive([2, 2, 2]) == True, \"Wrong!\"\nassert check_Consecutive([2, 3, 4, 5, 6]) == True, \"Wrong!\"\nassert check_Consecutive([2, 3, 4, 5, 6, 7]) == True, \"Wrong!\"\nassert check_Consecutive([2, 3, 4, 5, 6, 6]) == False, \"Wrong!\"\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_Consecutive([1, 2, 3, 4]) == False\nassert     check_Consecutive([1, 2, 3, 4, 4]) == True\nassert     check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]) == True\nassert     check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True\nassert     check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == False\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_Consecutive([1, 2, 3, 4, 5]) == False, \"Wrong\"\nassert check_Consecutive([1, 2, 3, 4, 5]) == True, \"Wrong\"\nassert check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]) == True, \"Wrong\"\nassert check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False, \"Wrong\"\nassert check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == True, \"Wrong\"\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_Consecutive([1,2,3,4,5]) == True, \"consecutive numbers list\"\nassert     check_Consecutive([1,2,3,4,6]) == False, \"not consecutive numbers list\"\nassert     check_Consecutive([-1,-2,-3,-4,-5]) == True, \"consecutive negative numbers list\"\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_Consecutive([1,2,3,4,5]) == True, \\\n\"Wrong output.\"\nassert     check_Consecutive([1,2,4,5,5]) == True, \\\n\"Wrong output.\"\nassert     check_Consecutive([1,1,2,2,3,3]) == True, \\\n\"Wrong output.\"\nassert     check_Consecutive([1,1,2,2,3,4]) == True, \\\n\"Wrong output.\"\nassert     check_Consecutive([1,1,2,2,3,4,5,5]) == True, \\\n\"Wrong output.\"\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_Consecutive([-9, -9, -9, -9])\nassert not check_Consecutive([-9, -8, -7, -6])\nassert not check_Consecutive([-9, -8, -6, -4])\nassert check_Consecutive([-9, -8, -6, -4, -2])\nassert check_Consecutive([-9, -8, -6, -4, -2, -1])\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_Consecutive([2, 3, 4, 6, 7, 9, 10]) == True, \"Assertion Failed: check_Consecutive([2, 3, 4, 6, 7, 9, 10])\"\nassert     check_Consecutive([2, 2, 4, 6, 7, 9, 10]) == False, \"Assertion Failed: check_Consecutive([2, 2, 4, 6, 7, 9, 10])\"\nassert     check_Consecutive([2, 3, 4, 5, 6, 7, 9, 10]) == False, \"Assertion Failed: check_Consecutive([2, 3, 4, 5, 6, 7, 9, 10])\"\nassert     check_Consecutive([2, 3, 4, 5, 6, 7, 9, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 502, 504, 506, 508, 510, 512, 514, 516, 518, 520, 522, 524, 526, 528, 530, 532, 534, 536, 538, 540, 542, 544, 546, 548, 550, 552, 554, 556, 558, 560, 562, 564, 566, 568, 570, 572, 574, 576, 578, 580, 582, 584, 586, 588, 590, 592, 594, 596, 598, 600, 602, 604, 606, 608, 610, 612, 614, 616, 618, 620, 622, 624, 626, 628, 630, 632, 634, 636, 638, 640, 642, 644, 646, 648, 650, 652, 654, 656, 658, 660, 662, 664, 666, 668, 670, 672, 674, 676, 678, 680, 682, 684, 686, 688, 690, 692, 694, 696, 698, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 728, 730, 732, 734, 736, 738, 740, 742, 744, 746, 748, 750, 752, 754, 756, 758, 760, 762, 764, 766, 768, 770, 772, 774, 776, 778, 780, 782, 784, 786, 788, 790, 792, 794, 796, 798, 800, 802, 804, 806, 808, 810, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832, 834, 836, 838, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 864, 866, 868, 870, 872, 874, 876, 878, 880, 882, 884, 886, 888, 890, 892, 894, 896, 898, 900, 902, 904, 906, 908, 910, 912, 914, 916, 918, 920, 922, 924, 926, 928, 930, 932, 934, 936, 938, 940, 942, 944, 946, 948, 950, 952, 954, 956, 958, 960, 962, 964, 966, 968, 970, 972, 974, 976, 978, 980, 982, 984, 986, 988, 990, 992, 994, 996, 998, 1000, 1002, 1004, 1006, 1008, 1010, 1012, 1014, 1016, 1018, 1020, 1022, 1024, 1026, 1028, 1030, 1032, 1034, 1036, 1038, 1040, 1042, 1044, 1046, 1048, 1050, 1052, 1054, 1056, 1058, 1060, 1062, 1064, 1066, 1068, 1070, 1072, 1074, 1076, 1078, 1080, 1082, 1084, 1086, 1088, 1090, 1092, 1094, 1096, 1098, 1100, 1102, 1104, 1106, 1108, 1110, 1112, 1114, 1116, 1118, 1110, 1112, 1114, 1116, 1118, 1110, 1112, 1114, 1116, 1118, 1110, 1112, 1114, 1116, 1118, 1110, 1112, 1114, 1116, 1118, 1110, 1112, 1114, 1116, 1118, 1110, 1112, 1114, 1116, 1118, 1110, 1112, 1114, 1116, 1118, 1110, 1112, 1114, 1116, 1118, 1110, 1112, 1114, 1116, 1118, 1110, 1112, 1114, 1116, 1118, 1110, 1112, 1114, 1116, 1118, 1110, 1112, 1114, 1116, 1118, 1110, 1112, 1114, 1116, 1118, 1110, 1112, 1114, 1116, 1118, 1110, 1112, 1114, 1116, 1118, 1110, 1112, 1114, 1116, 1118, 1110, 1112, 1114, 1116, 1118, 1110, 1112, 1114, 1116, 1118, 1110, 1112, 1114, 1116, 1118, 1110, 1112, 1114, 1116, 1118, 1110, 1112, 1114, 1116, 1118, 1110, 1112, 1114, 1116, 1118, 1110, 1112, 1114, 1116, 1118, 1110, 1112, 1114, 1116, 1118, 1110, 1112, 1114, 1116, 1118, 1110, 1112, 1114, 1116, 1118, 1110, 1112, 1114, 1116, 1118, 1110, 1112"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_Consecutive([1, 2, 3, 4]) == True, \"Passed\"\nassert     check_Consecutive([2, 3, 4, 5, 6]) == True, \"Passed\"\nassert     check_Consecutive([3, 4, 5, 6, 7]) == False, \"Passed\"\nassert     check_Consecutive([-5, -4, -3, -2, -1]) == False, \"Passed\"\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tuple_intersection(test_list1, test_list2) == [(1, 2), (2, 4), (3, 4)]\n\nprint(\"\\n********* tuple_intersection() ***********\")\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_intersection([(1, 2), (2, 3)], [(1, 1), (2, 2), (3, 3), (4, 4)]) == [(1, 1), (2, 2), (3, 3)]\nassert tuple_intersection([(1, 2), (2, 3)], [(3, 3), (1, 1), (2, 2), (4, 4)]) == [(1, 1), (2, 2)]\nassert tuple_intersection([(1, 2), (2, 3)], [(3, 3), (4, 4)]) == []\nassert tuple_intersection([(1, 2), (2, 3)], [(1, 1), (3, 3), (4, 4)]) == [(1, 1), (3, 3)]\n\n'''\nHints:\n- Use zip to find the intersection of the tuples in the given list.\n- Use set to remove duplicates.\n- Use set() to create an empty set.\n'''\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_intersection([(1,2), (2,3)], [(3,4), (1,2)]) == [(1,2)]\nassert     tuple_intersection([(1,2), (2,3)], [(3,4), (1,2), (2,3)]) == [(1,2)]\nassert     tuple_intersection([(1,2), (2,3)], [(3,4), (1,2), (1,3)]) == []\nassert     tuple_intersection([(1,2), (2,3)], [(3,4), (1,2), (2,3), (1,4)]) == [(1,2)]\nassert     tuple_intersection([(1,2), (2,3)], [(3,4), (1,2), (3,4)]) == []\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tuple_intersection(\n    (0,1),\n    (0,1,2)\n    ) == {0,1}\n\nassert     tuple_intersection(\n    (0,1,2),\n    (0,1,2)\n    ) == {0,1,2}\n\nassert     tuple_intersection(\n    (0,1),\n    (1,2,3)\n    ) == {1,2}\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tuple_intersection([], [1, 2]) == ()\nassert     tuple_intersection([1, 2], []) == ()\nassert     tuple_intersection([], [1, 2, 3]) == ()\nassert     tuple_intersection([1, 2], [1, 2]) == (1, 2)\nassert     tuple_intersection([1, 2], [2, 3]) == (2, )\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tuple_intersection([(0, 0), (1, 1), (1, 1), (2, 2), (3, 3), (4, 4)], [(0, 0), (1, 1), (2, 2), (3, 3)]) == [(0, 0), (1, 1), (2, 2)]\nassert     tuple_intersection([(0, 0), (1, 1), (1, 1), (2, 2), (3, 3), (4, 4)], [(0, 0), (1, 1), (2, 2), (1, 2), (3, 3), (2, 3)]) == [(0, 0), (1, 1), (2, 2), (3, 3)]\nassert     tuple_intersection([(0, 0), (1, 1), (1, 1), (2, 2), (3, 3), (4, 4)], [(0, 0), (1, 1), (2, 2), (3, 3), (2, 3), (4, 4)]) == [(0, 0), (1, 1)]\nassert     tuple_intersection([(0, 0), (1, 1), (1, 1), (2, 2), (3, 3), (4, 4)], [(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (1, 2)]) == [(0, 0), (1, 1), (2, 2), (3, 3)]\nassert     tuple_intersection([(0, 0), (1, 1), (1, 1), (2, 2), (3, 3), (4, 4)], [(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (1, 2), (4, 5)]) == [(0, 0), (1, 1), (2, 2), (3, 3)]\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tuple_intersection([(0,1), (1,2), (2,3), (2,4)], [(1,2),(2,3),(3,4)]) == [(2,2)]\nassert     tuple_intersection([(0,1), (1,2), (2,3), (3,4), (2,3)], [(1,2),(2,3),(3,4)]) == [(1,2)]\nassert     tuple_intersection([(0,1), (1,2), (2,3), (3,4), (2,3)], [(1,2),(2,3),(3,4),(2,3)]) == []\nassert     tuple_intersection([(0,1), (1,2), (2,3), (3,4), (2,3),(1,2)], [(1,2),(2,3),(3,4),(2,3)]) == [(1,2)]\nassert     tuple_intersection([(0,1), (1,2), (2,3), (3,4), (2,3),(1,2)], [(2,3),(2,3),(2,3)]) == [(2,3)]\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tuple_intersection([(1,2),(2,3),(3,4)], [(1,2),(2,3),(3,4)]) == [(1,2),(2,3),(3,4)]\nassert tuple_intersection([(1,2),(2,3),(3,4)], [(1,2),(3,4),(2,3)]) == [(1,2),(3,4)]\nassert tuple_intersection([(1,2),(2,3),(3,4)], [(1,2),(2,3),(1,4)]) == [(1,2),(2,3),(1,4)]\nassert tuple_intersection([(1,2),(2,3),(3,4)], [(1,2),(3,4),(2,3)]) == [(1,2),(2,3),(3,4)]\nassert tuple_intersection([(1,2),(2,3),(3,4)], [(2,3),(1,2),(3,4)]) == [(2,3),(1,2),(3,4)]\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tuple_intersection([], []) == ()\nassert     tuple_intersection([1,2,3], [4,5,6]) == (1,2,3)\nassert     tuple_intersection([1,2,3], [4,5]) == (1,2,3)\nassert     tuple_intersection([1,2,3], [4]) == (1,2,3)\nassert     tuple_intersection([1,2,3,4,5,6,7], [1,2,3,4,5,6,7]) == (1,2,3,4,5,6,7)\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tuple_intersection([(1,2),(3,4),(4,5)],[(3,4),(1,2)]) == [(3,4)]\nassert     tuple_intersection([(1,2),(3,4),(4,5)],[(4,5),(1,2)]) == [(1,2)]\nassert     tuple_intersection([(1,2),(3,4),(4,5)],[(4,5),(3,4)]) == [(3,4)]\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     replace_char(\"abcd\",'b', 'k') == \"abck\"\nassert     replace_char(\"abcd\",'d', 'p') == \"abcp\"\nassert     replace_char(\"abcd\",'x', 'y') == \"aby\"\nassert     replace_char(\"abcd\",'b', 'k') == \"abk\"\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     replace_char('a','a','') == 'a'\nassert     replace_char('a','a','') == 'a'\nassert     replace_char('a','a','') == 'a'\nassert     replace_char('','','a') == ''\nassert     replace_char('','','a') == ''\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     replace_char('no','n','N') == 'Nno', 'Replace char failed'\nassert     replace_char('a','A','b') == 'b', 'Replace char failed'\nassert     replace_char('kitten','k','K') == 'Kitten', 'Replace char failed'\nassert     replace_char('kitten','d','D') == 'Ktten', 'Replace char failed'\nprint('Replace char: Passed')"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint('\\n\\ncheck the correctness of replace_char')\nprint('string:\\n',str1)\n\nreplace_char(str1,'a','A')\nprint('string after replacing: ',str1)\nprint('\\n')\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     replace_char(\"abcdefg\",\"c\",\"c\") == \"bcdeg\", \"first case\"\nassert     replace_char(\"abcdefg\",\"d\",\"c\") == \"bcdeg\", \"second case\"\nassert     replace_char(\"abcdefg\",\"c\",\"c\") == \"bcdg\", \"third case\""
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert not replace_char('ca', 'c', 'a')\nassert replace_char('ca', 'c', 'a') == 'aac'\nassert not replace_char('ca', 'c', 'a')\nassert replace_char('ca', 'c', 'a') == 'ca'\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     replace_char(\"abcdefgh\", \"h\", \"k\") == \"kghk\"\nassert     replace_char(\"abcdefgh\", \"d\", \"k\") == \"befk\"\nassert     replace_char(\"abcdefgh\", \"ef\", \"\") == \"abcdefgh\"\nassert     replace_char(\"abcdefgh\", \"f\", \"\") == \"abcdefgh\"\nassert     replace_char(\"\", \"f\", \"\") == \"\"\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_counter({\"a\": 100, \"b\": 50, \"c\": 30, \"d\": 20}) == \\\n            {\"d\": 20, \"b\": 50, \"a\": 100, \"c\": 30}, \\\n            \"Should be {'d': 20, 'b': 50, 'a': 100, 'c': 30}\"\n\ndef is_in_basket(basket, item):\n    '''\n    Write a function that returns True if an item is in a given basket, and False otherwise.\n    '''\n    pass\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert sort_counter({'a': 3, 'b': 1, 'c': 2}) == [('c', 2), ('a', 3), ('b', 1)]\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    pass\n\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    pass\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef reverse_counter(dict1):\n    '''\n    Write a function to create a reversed dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef remove_item(dict1, key):\n    '''\n    Write a function to remove a key:value pair from a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sort_counter({1: 2, 2: 1, 3: 3}) == {1: 2, 2: 1, 3: 3}\nassert     sort_counter({1: 2, 2: 1, 3: 3, 4: 3}) == {1: 2, 2: 1, 3: 3, 4: 3}\nassert     sort_counter({1: 2, 3: 1, 4: 3, 2: 1}) == {1: 2, 2: 1, 3: 1, 4: 3}\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sort_counter({\n    'a': 3,\n    'b': 2,\n    'c': 1,\n    'd': 2\n    }) == (\n    [\n    ['a', 3],\n    ['b', 2],\n    ['c', 1],\n    ['d', 2]\n    ]\n    )\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sort_counter({1: 3, 2: 4, 3: 1, 4: 1, 5: 10, 6: 2, 7: 4}) == \\\n        {1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7}\nassert     sort_counter({1: 1, 2: 2, 3: 3, 4: 4, 5: 10, 6: 2, 7: 4}) == \\\n        {1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7}\nassert     sort_counter({1: 3, 2: 4, 3: 1, 4: 1, 5: 10, 6: 2, 7: 4}) == \\\n        {1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7}\nassert     sort_counter({1: 3, 2: 4, 3: 1, 4: 1, 5: 10, 6: 2, 7: 4}) == \\\n        {1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7}\nassert     sort_counter({1: 3, 2: 4, 3: 1, 4: 1, 5: 10, 6: 2, 7: 4}) == \\\n        {1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7}\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_counter({\"apple\": 2, \"banana\": 4, \"orange\": 1}) ==\\\n                {\"apple\": 1, \"banana\": 2, \"orange\": 4}\nassert sort_counter({\"apple\": 2, \"banana\": 4, \"orange\": 1, \"kiwi\": 3, \"mango\": 5}) ==\\\n                {\"apple\": 1, \"banana\": 2, \"orange\": 4, \"kiwi\": 3, \"mango\": 5}\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_counter({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}) == \\\n           {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\nassert     sort_counter({'a': 5, 'b': 4, 'c': 3, 'd': 2, 'e': 1}) == \\\n           {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\nassert     sort_counter({'c': 3, 'a': 1, 'b': 2, 'd': 4, 'e': 5}) == \\\n           {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\nassert     sort_counter({'d': 4, 'a': 1, 'b': 2, 'c': 3, 'e': 5}) == \\\n           {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\nassert     sort_counter({'d': 4, 'e': 5, 'a': 1, 'b': 2, 'c': 3}) == \\\n           {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_counter({\"a\":1,\"b\":2,\"c\":3}) == \\\n                {\"a\":1,\"b\":2,\"c\":3}\nassert     sort_counter({\"a\":10,\"b\":2,\"c\":30,\"d\":5}) == \\\n                {\"a\":10,\"b\":2,\"c\":30,\"d\":5}\nassert     sort_counter({\"a\":1,\"b\":2,\"c\":3,\"d\":1,\"e\":0}) == \\\n                {\"a\":1,\"b\":2,\"c\":3,\"d\":1,\"e\":0}\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     big_sum([1,2,3,4,5]) == 15, \"Wrong answer\"\nassert     big_sum([5,2,3,4,1]) == 18, \"Wrong answer\"\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     big_sum([1, 2, 3, 4]) == 6, \"Should be 6\"\nassert     big_sum([-1, -2, -3, -4]) == -1, \"Should be -1\"\nassert     big_sum([-1, 2, -3, -4]) == -1, \"Should be -1\"\nassert     big_sum([-1, 2, -3, 4]) == 6, \"Should be 6\"\nassert     big_sum([1]) == 1, \"Should be 1\"\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     big_sum([1, 3, 4, 10, 15]) == 20, 'the sum of the largest and smallest value should be 20'\nassert big_sum([-1, -3, -4, -10, -15]) == -21, 'the sum of the largest and smallest value should be -21'\nassert big_sum([10, 15, -3, -4, -10, -15]) == 18, 'the sum of the largest and smallest value should be 18'\nassert big_sum([-10, -15, -3, -4, -10, -15]) == -13, 'the sum of the largest and smallest value should be -13'\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     big_sum([-1, -2, 0, 3, -4]) == -1 + 0 + 3 + -4 == -1, 'Failed'\nassert     big_sum([-1, -2, 0, -3, -4]) == -1 + 0 + -3 + -4 == -1, 'Failed'\nassert     big_sum([0, -1, -2, 0, -3, -4]) == -1 + 0 + -2 + 0 + -3 + -4 == 0, 'Failed'\nassert     big_sum([-1, -2, -3, -4]) == -1 + -2 + -3 + -4 == -1, 'Failed'\nassert     big_sum([0, -1, -2, -3, -4]) == -1 + 0 + -2 + -3 + -4 == 0, 'Failed'\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     big_sum([10, 40, 30, 20]) == 150, \"WRONG!\"\nassert     big_sum([1, 2, 3, 4, 5]) == 15, \"WRONG!\"\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     big_sum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == -10, 'Test case failed'\nassert     big_sum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19]) == -19, 'Test case failed'\nassert     big_sum([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20]) == -20, 'Test case failed'\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_lower(\"i'm \") == False, \"Wrong Answer\"\nassert     is_lower(\"I'm \") == True, \"Wrong Answer\"\nassert     is_lower(\"I'm \") == True, \"Wrong Answer\"\nassert     is_lower(\"Hello, World!\") == False, \"Wrong Answer\"\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_lower('abc') == 'abc', 'is_lower failed.'\nassert     is_lower('ABC') == 'abc', 'is_lower failed.'\n\nprint('You passed the test!')\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_lower('Hello')     == 'hello', 'First'\nassert     is_lower('Hi')     == 'hi', 'Second'\nassert     is_lower('HELLO')     == 'hello', 'Third'\nassert     is_lower('hello')     == 'hello', 'Fourth'\nassert     is_lower('Hi!')     == 'hi!', 'Fifth'\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_lower('Hello World') == 'hello world', \"First\"\nassert     is_lower('HELLO WORLD') == 'hello world', \"Second\"\nassert     is_lower('HELLO WORLD!') == 'hello world!', \"Third\"\nassert     is_lower('HeLLo WoRRld!') == 'hello world!', \"Fourth\"\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_lower('Hello') == False\nassert     is_lower('HELLO') == True\nassert     is_lower('HELLO  ') == True\nassert     is_lower('HELLO\\n') == True\nassert     is_lower('HELLO\\t') == False\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_lower('FooBar') == 'foo_bar'\nassert     is_lower('Foo Bar') == 'foo_bar'\nassert     is_lower('Foo bar') == 'foo_bar'\nassert     is_lower('Foo bar baz') == 'foo_bar_baz'\nassert     is_lower('FooBar') == 'foo_bar'\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_lower('Hello World') == 'hello world'\nassert     is_lower('Test') == 'test'\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_lower('') == False, \"Empty string is not a lowercase string\"\nassert     is_lower('a') == False, \"First letter is upper case\"\nassert     is_lower('A') == False, \"First letter is upper case\"\nassert     is_lower('A B') == False, \"First letter is upper case\"\nassert     is_lower('aB') == False, \"First letter is upper case\"\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_lower(\"Python\") == True\nassert     is_lower(\"python\") == True\nassert     is_lower(\"Python123\") == True\nassert     is_lower(\"PYTHON\") == False\nassert     is_lower(\"pythoN\") == False\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_lower(\"\") == False, \"Empty string is not lower case\"\nassert     is_lower(\"A\") == True, \"A is upper case\"\nassert     is_lower(\"ab\") == True, \"ab is upper case\"\nassert     is_lower(\"aB\") == True, \"aB is upper case\"\nassert     is_lower(\"aAb\") == False, \"aAb is lower case\"\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef remove_lowercase2(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    pass\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nremove_lowercase(\"Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.\") == \"HIIIIINEEEDDDDEEEDEEEDOREEEEEEIIIIIIIIEEEEEECECECECECEC\"\n\ndef reverse_each_word(str1):\n    '''\n    Write a function that takes a string of words, and reverses each word.\n    E.g. \"I am a student.\" should return \"student a am I\"\n    '''\n    pass\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_lowercase(\"abc\") == \"abc\", \"Should return: abc\"\nassert     remove_lowercase(\"abcdefg\") == \"abcdefg\", \"Should return: abcdefg\"\nassert     remove_lowercase(\"abcABCdef\") == \"abc\", \"Should return: abc\"\nassert     remove_lowercase(\"abcABCdef\") == \"abc\", \"Should return: abc\"\nassert     remove_lowercase(\"abc1234ABCdef\") == \"abc1234\", \"Should return: abc1234\"\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef remove_url(str1):\n    '''\n    Write a function to remove URLs from a given string.\n    '''\n    pass\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_lowercase('simple') =='simple'\nassert     remove_lowercase('camelcase') =='simple'\nassert     remove_lowercase('CamelCase') =='simple'\nassert     remove_lowercase('1') == '1'\nassert     remove_lowercase(' ') == ''\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_lowercase('asdf') == 'asdf'\nassert     remove_lowercase('1asdf2') == '1asdf2'\nassert     remove_lowercase('1asdf2_') == '1asdf2'\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_lowercase('hello') == 'hello'\nassert     remove_lowercase('HELLO') == 'HELLO'\nassert     remove_lowercase('HELLO1') == 'HELLO'\nassert     remove_lowercase('HELLO2') == 'HELLO2'\nassert     remove_lowercase('HELLO3') == 'HELLO3'\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_lowercase('a')=='a'\nassert     remove_lowercase('AbCdEf')=='AbCdEf'\nassert     remove_lowercase('abcd')=='abcd'\nassert     remove_lowercase('abcde')=='abcde'\nassert     remove_lowercase('ABCDEFGHIJKLMNOPQRSTUVWXYZ')=='ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_lowercase('hello world') == 'hello world'\nassert     remove_lowercase('hello world!') == 'hello world!'\nassert     remove_lowercase('hello world!   ') == 'hello world!'\nassert     remove_lowercase('hello world!    ') == 'hello world!'\nassert     remove_lowercase('HELLO WORLD!') == 'HELLO WORLD!'\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove all uppercase substrings from a given string.\n    '''\n    pass\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     first_Digit(123) == 1, \"Test Case Failed\"\nassert first_Digit(999) == 3, \"Test Case Failed\"\nassert first_Digit(1234) == 1, \"Test Case Failed\"\nassert first_Digit(12345) == 1, \"Test Case Failed\"\nassert first_Digit(123456) == 1, \"Test Case Failed\"\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nfirst_Digit(10) == 1\nfirst_Digit(15) == 5\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     first_Digit(5) == 5\nassert     first_Digit(10) == 1\nassert     first_Digit(15) == 1\nassert     first_Digit(1) == 1\nassert     first_Digit(2) == 1\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     first_Digit(10) == 1\nassert first_Digit(12) == 1\nassert first_Digit(15) == 1\nassert first_Digit(17) == 2\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     first_Digit(314159265) == 9\nassert     first_Digit(3141592650000) == 9\nassert     first_Digit(3141592650001) == 9\nassert     first_Digit(3141592650002) == 9\nassert     first_Digit(3141592650003) == 9\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     first_Digit(222) == 2\nassert     first_Digit(123) == 1\nassert     first_Digit(1000) == 3\nassert     first_Digit(77.2) == 7\nassert     first_Digit('8989') == 8\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert Split([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7]"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     Split([1,2,3,4,5,6,7,8]) == [1,3,5,7]\nassert     Split([1,2,3,4,5,6,7,8]) == [1,3,5,7]\nassert     Split([]) == []\nassert     Split([\"a\", \"b\"]) == [\"a\", \"b\"]\n\ndef Sort(list): \n    '''\n    Write a python function which takes a list of integers and only returns the even ones.\n    '''\n    pass\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Split([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 5, 7, 9], 'incorrect output'\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Split([1, 2, 3, 4]) == [1, 3, 5]\nassert     Split([1, 2, 3, 4, 5, 6]) == [1, 3, 5]\nassert     Split([1, 2, 3, 4, 5]) == [1, 3, 5]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Split([1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9]\nassert    Split([1,2,3,4,5,6,7,8,9,10,12]) == []\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9], \"Wrong result\"\nassert     Split([0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20], \"Wrong result\"\nassert     Split([]) == [], \"Wrong result\"\nassert     Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [], \"Wrong result\"\n\ndef RemoveDuplicates(list):\n    '''\n    Write a python function which takes a list of integers and only returns the unique values.\n    '''\n    pass\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nSplit([]) == []\nassert Split([1, 2, 3, 4, 5]) == [1, 3, 5]\nassert Split([]) == []\nassert Split([2, 4, 6, 8, 10]) == [2, 6, 10]\nassert Split([1, 2, 3, 4, 5, 6]) == [1, 3, 5, 6]\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     difference(2) == 1 \nassert     difference(3) == 1\nassert     difference(10) == 0\n\ndef find_sum_of_squares(n) :\n    '''\n    Write a python function to find the sum of the squares of the first n natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     difference(5) == 2, 'your function does not work'\nassert     difference(12) == 5, 'your function does not work'\nassert     difference(20) == 5, 'your function does not work'\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     difference(7) == 264, 'incorrect answer'\nassert     difference(8) == 446, 'incorrect answer'\nassert     difference(9) == 1445, 'incorrect answer'\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     difference(1) == 1, \"incorrect result for n = 1\"\nassert     difference(2) == 1, \"incorrect result for n = 2\"\nassert     difference(3) == 2, \"incorrect result for n = 3\"\nassert     difference(4) == 3, \"incorrect result for n = 4\"\nassert     difference(5) == 4, \"incorrect result for n = 5\"\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert difference(1) == 2\nassert difference(2) == 6\nassert difference(3) == 15\nassert difference(4) == 50\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     difference(5) == 8\nassert     difference(10) == 324\nassert     difference(20) == 4863550\nassert     difference(30) == 17649875\nassert     difference(50) == 18446744073709551615\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint(difference(2))\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     difference(5) == 0, 'incorrect'\nassert     difference(10) == 1, 'incorrect'\nassert     difference(100) == 12, 'incorrect'\nassert     difference(1000) == 1001, 'incorrect'\nassert     difference(0) == 0, 'incorrect'\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Odd_Pair([1, 2, 3, 4, 5], 5) == 2\nassert    find_Odd_Pair([1, 2, 3, 4, 5], 6) == 0\nassert    find_Odd_Pair([1, 2, 3, 4, 5, 6], 7) == 1\nassert    find_Odd_Pair([1, 2, 3, 4, 5, 6, 7], 8) == 3\nassert    find_Odd_Pair([1, 2, 3, 4, 5, 6, 7, 8], 9) == 2\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_Odd_Pair(A,N) == 3\nassert     find_Odd_Pair(A,N-1) == 0\nassert     find_Odd_Pair(A,N+1) == 0\n\nA = [1,2,3]"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_Odd_Pair([1,2,3],2)==0, 'Wrong result'\nassert     find_Odd_Pair([1,2,3],1)==0, 'Wrong result'\nassert     find_Odd_Pair([1,2,3],3)==1, 'Wrong result'\nassert     find_Odd_Pair([1,2,3,4,5],2)==2, 'Wrong result'\nassert     find_Odd_Pair([2,1,2],1)==0, 'Wrong result'\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_Odd_Pair([1,2,4,8,16],10) == 2\nassert    find_Odd_Pair([1,4,2,3],5) == 1\nassert    find_Odd_Pair([6,1,3,4],6) == 2\nassert    find_Odd_Pair([],0) == 0\nassert    find_Odd_Pair([1,2,4,8,16],10) == 2\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_Odd_Pair([0, 1, 4, 3, 5, 2, 7],7) == 1, \"Test Failed\"\nassert     find_Odd_Pair([0, 1, 4, 3, 5, 2, 7],2) == 0, \"Test Failed\"\nassert     find_Odd_Pair([0, 1, 4, 3, 5, 2, 7],5) == 2, \"Test Failed\"\nassert     find_Odd_Pair([0, 1, 4, 3, 5, 2, 7],8) == 1, \"Test Failed\"\nassert     find_Odd_Pair([0, 1, 4, 3, 5, 2, 7],9) == 0, \"Test Failed\"\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_Odd_Pair([1,2,3,4],4) == 2\nassert     find_Odd_Pair([1,2,3,4],5) == 0"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    find_Odd_Pair([1, 2, 3, 4, 5], 5) == 2\n    find_Odd_Pair([5, 7, 2, 8, 3, 6, 4], 7) == 5\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Odd_Pair([1,2,3,4,5],5) == 2\nassert     find_Odd_Pair([1,2,3,4,5],6) == 0\nassert     find_Odd_Pair([1,2,3,4,5],7) == 2\nassert     find_Odd_Pair([1,2,3,4,5],8) == 1\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n'''\n\nquestion 5\n\n'''\n\ndef merge_The_Lists(A,B) :\n    '''\n    Write a python function to merge the two sorted lists A and B and return the resultant sorted list.\n    Note : If the input lists are empty, you need to return an empty list[] and the function does not have to return the merged list. \n    Example : if A = [1,2] and B = [3,4] then the output will be [1,2,3,4]\n    '''\n    pass\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     toggle_string('Hello') == 'hELLO'\nassert     toggle_string('HELLO') == 'hELLO'\nassert     toggle_string('HELLO WORLD') == 'hELLO wORLD'\n\ndef toggle_char(char):\n    '''\n    Write a function to toggle the case of a single character.\n    '''\n    pass\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert toggle_string(\"Hello\") == \"hELLO\"\nassert toggle_string(\"Hello\") == \"hELLO\"\n\nassert toggle_string(\"Toggle\") == \"TOGGLE\"\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     toggle_string('String') =='sTring'\nassert     toggle_string('String') == 'StRiNg'\nassert     toggle_string('ABcde') == 'bCdE'\nassert     toggle_string('ABcde') == 'bCdE'\nprint('Passed.')\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     toggle_string(\"String\") == \"sTRING\"\nassert     toggle_string(\"\") == \"\"\nassert     toggle_string(\"sTring\") == \"sTRING\"\nassert     toggle_string(\"string\") == \"sTRING\"\nassert     toggle_string(\"String\") == \"sTRING\"\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     toggle_string('adSWfawe') == 'adSWfwE', 'incorrect'\nassert     toggle_string('adSWfawe') == 'adSWfawe', 'incorrect'\nassert     toggle_string('adSWfawe') == 'dSWfawE', 'incorrect'\nassert     toggle_string('adSWfawe') == 'AWsfAwE', 'incorrect'\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     toggle_string('String') =='sTRiNG'\nassert     toggle_string('hElLo WoRlD') == 'hElLo wOrlD'\nassert     toggle_string('g') == 'G'\nassert     toggle_string('s') == 'S'\nassert     toggle_string('t') == 'T'\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     toggle_string('python') == 'PyThOn'\nassert     toggle_string('PyThOn') == 'PYThOn'\nassert     toggle_string('PytHoN') == 'pYThOn'\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     toggle_string(\"camelCase\") == \"CamelCase\"\nassert     toggle_string(\"all uppercase\") == \"all lowercase\"\nassert     toggle_string(\"HeLLo WoRlD\") == \"hEllO wOrld\"\nassert     toggle_string(\"CamelCase\") == \"CamelCase\"\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     digit_distance_nums(11, 22) == 1\nassert     digit_distance_nums(12, 33) == 1\nassert     digit_distance_nums(1, 11) == 2\nassert     digit_distance_nums(1111, 1111) == 0\nassert     digit_distance_nums(9999, 999) == 0\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     digit_distance_nums(4, 7) == 4\nassert     digit_distance_nums(3, 4) == 1\nassert     digit_distance_nums(4, 5) == 1\nassert     digit_distance_nums(5, 6) == 1\nassert     digit_distance_nums(6, 7) == 2\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     digit_distance_nums(100, 12) == 2, 'digit_distance_nums(100, 12) is not 2'\nassert     digit_distance_nums(101, 12) == 1, 'digit_distance_nums(101, 12) is not 1'\nassert     digit_distance_nums(123, 909) == 1, 'digit_distance_nums(123, 909) is not 1'\nassert     digit_distance_nums(1000, 12) == 5, 'digit_distance_nums(1000, 12) is not 5'\nassert     digit_distance_nums(1001, 12) == 4, 'digit_distance_nums(1001, 12) is not 4'\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint('Test case 1:', digit_distance_nums(1432, 7071) == 26)\nprint('Test case 2:', digit_distance_nums(333, 4444) == 9)\nprint('Test case 3:', digit_distance_nums(57, 767) == 10)\nprint('Test case 4:', digit_distance_nums(69, 969) == 10)\nprint('Test case 5:', digit_distance_nums(1432, 7071) == 26)\nprint('Test case 6:', digit_distance_nums(333, 4444) == 9)\nprint('Test case 7:', digit_distance_nums(57, 767) == 10)\nprint('Test case 8:', digit_distance_nums(69, 969) == 10)\nprint('Test case 9:', digit_distance_nums(1432, 7071) == 26)\nprint('Test case 10:', digit_distance_nums(333, 4444) == 9)\nprint('Test case 11:', digit_distance_nums(57, 767) == 10)\nprint('Test case 12:', digit_distance_nums(69, 969) == 10)\nprint('Test case 13:', digit_distance_nums(1432, 7071) == 26)\nprint('Test case 14:', digit_distance_nums(333, 4444) == 9)\nprint('Test case 15:', digit_distance_nums(57, 767) == 10)\nprint('Test case 16:', digit_distance_nums(69, 969) == 10)\nprint('Test case 17:', digit_distance_nums(1432, 7071) == 26)\nprint('Test case 18:', digit_distance_nums(333, 4444) == 9)\nprint('Test case 19:', digit_distance_nums(57, 767) == 10)\nprint('Test case 20:', digit_distance_nums(69, 969) == 10)\nprint('Test case 21:', digit_distance_nums(1432, 7071) == 26)\nprint('Test case 22:', digit_distance_nums(333, 4444) == 9)\nprint('Test case 23:', digit_distance_nums(57, 767) == 10)\nprint('Test case 24:', digit_distance_nums(69, 969) == 10)\nprint('Test case 25:', digit_distance_nums(1432, 7071) == 26)\nprint('Test case 26:', digit_distance_nums(333, 4444) == 9)\nprint('Test case 27:', digit_distance_nums(57, 767) == 10)\nprint('Test case 28:', digit_distance_nums(69, 969) == 10)\nprint('Test case 29:', digit_distance_nums(1432, 7071) == 26)\nprint('Test case 30:', digit_distance_nums(333, 4444) == 9)\nprint('Test case 31:', digit_distance_nums(57, 767) == 10)\nprint('Test case 32:', digit_distance_nums(69, 969) == 10)\nprint('Test case 33:', digit_distance_nums(1432, 7071) == 26)\nprint('Test case 34:', digit_distance_nums(333, 4444) == 9)\nprint('Test case 35:', digit_distance_nums(57, 767) == 10)\nprint('Test case 36:', digit_distance_nums(69, 969) == 10)\nprint('Test case 37:', digit_distance_nums(1432, 7071) == 26)\nprint('Test case 38:', digit_distance_nums(333, 4444) == 9)\nprint('Test case 39:', digit_distance_nums(57, 767) == 10)\nprint('Test case 40:', digit_distance_nums(69, 969) == 10)\nprint('Test case 41:', digit_distance_nums(1432, 7071) == 26)\nprint('Test case 42:', digit_distance_nums(333, 4444) == 9)\nprint('Test case 43:', digit_distance_nums(57, 767) == 10)\nprint('Test case 44:', digit_distance_nums(69, 969) == 10)\nprint('Test case 45:', digit_distance_nums(1432, 7071) == 26)\nprint('Test case 46:', digit_distance_nums(333, 4444) == 9)\nprint('Test case 47:', digit_distance_nums(57, 767) == 10)\nprint('Test case 48:', digit_distance_nums(69, 969) == 10)\nprint('Test case 49:', digit_distance_nums(1432, 7071) == 26)\nprint('Test case 50:', digit_distance_nums(333, 4444) == 9)\nprint('Test case 51:', digit_distance_nums(57, 767) == 10)\nprint('Test case 52:', digit_distance_nums(69, 969) == 10)\nprint('Test case 53:', digit_distance_nums(1432, 7071) == 26)\nprint('Test case 54:', digit_distance_nums(333, 4444) == 9)\nprint('Test case 55:', digit_distance_nums(57, 767) == 10)\nprint('Test case 56:', digit_distance_nums(69, 969) == 10)\nprint('Test case 57:', digit_distance_nums(1432, 7071) == 26)\nprint('Test case 58:', digit_distance_nums(333, 4444) == 9)\nprint('Test case 59:', digit_distance_nums(57, 767) == 10)\nprint('Test case 60:', digit_distance_nums(69, 969) == 10)\nprint('Test case 61:', digit_distance_nums(1432, 7071) == 26)\nprint('Test case 62:', digit_distance_nums(333, 4444) == 9)\nprint('Test case 63:', digit_distance_nums(57, 767) == 10)\nprint('Test case 64:', digit_distance_nums(69, 969) == 10)\nprint('Test case 65:', digit_distance_nums(1432, 7071) == 26)\nprint('Test case 66:', digit_distance_nums(333, 4444) == 9)\nprint('Test case 67:', digit_distance_nums(57, 767) == 10)\nprint('Test case 68:', digit_distance_nums(69, 969) == 10)\nprint('Test case 69:', digit_distance_nums(1432, 7071) == 26)\nprint('Test case 70:', digit_distance_nums(333, 4444) == 9)\nprint('Test case 71:', digit_distance_nums(57, 767) == 10)\nprint('Test case 72:', digit_distance_nums(69, 969) == 10)\nprint('Test case 73:', digit_distance_nums(1432, 7071) == 26)\nprint('Test case 74:', digit_distance_nums(333, 4444) == 9)\nprint('Test case 75:', digit_distance_nums(57, 767) == 10)\nprint('Test case 76:', digit_distance_nums(69, 969) == 10)\nprint('Test case 77:', digit_distance_nums(1432, 7071) == 26)\nprint('Test case 78:', digit_distance_nums(333, 4444) == 9)\nprint('Test case 79:', digit_distance_nums(57, 767) == 10)\nprint('Test case 80:', digit_distance_nums(69, 969) == 10)\nprint('Test case 81:', digit_distance_nums(1432, 7071) == 26)\nprint('Test case 82:', digit_distance_nums(333, 4444) == 9)\nprint('Test case 83:', digit_distance_nums(57, 767) == 10)\nprint('Test case 84:', digit_distance_nums(69, 969) == 10)\nprint('Test case 85:', digit_distance_"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     digit_distance_nums(1,10) == 10\nassert     digit_distance_nums(10,100) == 8\nassert     digit_distance_nums(1,100) == 99\n\n\ndef digit_distance_arr(arr1, arr2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two arrays.\n    '''\n    pass\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     digit_distance_nums(1, 2) == 2\nassert     digit_distance_nums(12, 23) == 5\nassert     digit_distance_nums(3, 4) == 1\nassert     digit_distance_nums(3, 6) == 2\nassert     digit_distance_nums(6, 3) == 2\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef num_to_str(n):\n    '''\n    Write a python function to convert an integer to a string.\n    '''\n    pass\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     digit_distance_nums(1, 2) == 1\nassert     digit_distance_nums(100, 200) == 5\nassert     digit_distance_nums(2, 2) == 0\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     digit_distance_nums(1, 2) == 1, 'First argument does not match!'\nassert     digit_distance_nums(2, 3) == 1, 'Second argument does not match!'\nassert     digit_distance_nums(12345678, 12345679) == 7, 'First argument does not match!'\nassert     digit_distance_nums(12345678, -12345678) == 0, 'Second argument does not match!'\nassert     digit_distance_nums(-12345678, 12345678) == 7, 'First argument does not match!'\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     digit_distance_nums(3, 6) == -1\nassert     digit_distance_nums(15, 2) == 3\nassert     digit_distance_nums(1, 7) == 2\nassert     digit_distance_nums(8, 11) == 4\nassert     digit_distance_nums(12, 5) == 5\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef max_sub_array_sum(a):\n    # Brute Force\n    # max_so_far = -float('inf')\n    # max_ending_here = 0\n    # for i in range(0, len(a)):\n    #     max_ending_here = max_ending_here + a[i]\n    #     if max_ending_here < 0:\n    #         max_ending_here = 0\n    #     if max_ending_here > max_so_far:\n    #         max_so_far = max_ending_here\n    # return max_so_far\n\n    # Using Kadane's Algo\n    # max_ending_here = 0\n    # max_so_far = 0\n    # for i in range(0, len(a)):\n    #     max_ending_here = max_ending_here + a[i]\n    #     max_ending_here = max(max_ending_here, 0)\n    #     if max_ending_here > max_so_far:\n    #         max_so_far = max_ending_here\n    # return max_so_far\n    \n    # Using Sorting\n    # max_ending_here = 0\n    # max_so_far = -float('inf')\n    # for i in range(0, len(a)):\n    #     if max_ending_here <= 0:\n    #         max_ending_here = a[i]\n    #     else:\n    #         max_ending_here += a[i]\n    #         if max_ending_here > max_so_far:\n    #             max_so_far = max_ending_here\n    # return max_so_far\n\n    # Using Two Pointers\n    max_ending_here = 0\n    max_so_far = 0\n    j = 0\n    for i in range(0, len(a)):\n        max_ending_here += a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_ending_here >= 0:\n            max_ending_here = max_ending_here\n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Kadane's Algorithm\n    max_sum = cur_sum = a[0]\n    for i in range(1,size):\n        cur_sum = max(a[i], cur_sum + a[i])\n        max_sum = max(max_sum, cur_sum)\n\n    return max_sum\n\n\n\ndef max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Kadane's Algorithm\n    max_sum = cur_sum = a[0]\n    for i in range(1,size):\n        cur_sum = max(a[i], cur_sum + a[i])\n        max_sum = max(max_sum, cur_sum)\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert max_sub_array_sum([2,1,5,1,3,2], 5) == 6\n\ndef max_sub_array_sum_v2(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    pass"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert max_sub_array_sum([1,-1], 2) == 1\nassert max_sub_array_sum([5,-3,5], 2) == 7\nassert max_sub_array_sum([1,5,4,6], 3) == 11\nassert max_sub_array_sum([1,2,3], 2) == 3\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    max_sub_array_sum([1, 2, 3, 1], 3) == 6\n    max_sub_array_sum([-1, -3, -5, -4, -2, -2, -1], 6) == 2\n    max_sub_array_sum([0, 2, -8, -2, -5, 4, -3, -1, -2], 4) == 10\n    max_sub_array_sum([-2, 1, -3, 4, -1, 2], 3) == 6\n    max_sub_array_sum([0, 2, -8, -2, -5, 4, -3, -1, -2], 2) == 11\n    max_sub_array_sum([-2, 1, -3, 4, -1, 2], 3) == 6\n    max_sub_array_sum([-2, 1, -3, 4, -1, 2], 2) == 5\n    max_sub_array_sum([-2, 1, -3, 4, -1, 2], 1) == 4\n    max_sub_array_sum([-2, 1, -3, 4, -1, 2], 0) == 3\n    max_sub_array_sum([-2, 1, -3, 4, -1, 2], 5) == 2\n    max_sub_array_sum([], 1) == 0\n    max_sub_array_sum([], 0) == 0\n    max_sub_array_sum([-2, 1, -3, 4, -1, 2], -2) == 6\n    max_sub_array_sum([-2, 1, -3, 4, -1, 2], -1) == 5\n    max_sub_array_sum([-2, 1, -3, 4, -1, 2], -3) == 5\n    max_sub_array_sum([-2, 1, -3, 4, -1, 2], -5) == 2\n    max_sub_array_sum([-2, 1, -3, 4, -1, 2], -6) == 0\n    max_sub_array_sum([], -1) == 0\n    max_sub_array_sum([], -2) == 0\n    max_sub_array_sum([], -3) == 0\n    max_sub_array_sum([], -5) == 0\n    max_sub_array_sum([], -6) == 0\n    max_sub_array_sum([], -7) == 0\n    max_sub_array_sum([], -10) == 0\n    max_sub_array_sum([], -11) == 0\n    max_sub_array_sum([], -12) == 0\n    max_sub_array_sum([], -100) == 0\n    max_sub_array_sum([], -101) == 0\n    max_sub_array_sum([], -102) == 0\n    max_sub_array_sum([], -103) == 0\n    max_sub_array_sum([], -104) == 0\n    max_sub_array_sum([], -105) == 0\n    max_sub_array_sum([], -106) == 0\n    max_sub_array_sum([], -107) == 0\n    max_sub_array_sum([], -108) == 0\n    max_sub_array_sum([], -109) == 0\n    max_sub_array_sum([], -110) == 0\n    max_sub_array_sum([], -111) == 0\n    max_sub_array_sum([], -112) == 0\n    max_sub_array_sum([], -113) == 0\n    max_sub_array_sum([], -114) == 0\n    max_sub_array_sum([], -115) == 0\n    max_sub_array_sum([], -116) == 0\n    max_sub_array_sum([], -117) == 0\n    max_sub_array_sum([], -118) == 0\n    max_sub_array_sum([], -119) == 0\n    max_sub_array_sum([], -120) == 0\n    max_sub_array_sum([], -121) == 0\n    max_sub_array_sum([], -122) == 0\n    max_sub_array_sum([], -123) == 0\n    max_sub_array_sum([], -124) == 0\n    max_sub_array_sum([], -125) == 0\n    max_sub_array_sum([], -126) == 0\n    max_sub_array_sum([], -127) == 0\n    max_sub_array_sum([], -128) == 0\n    max_sub_array_sum([], -129) == 0\n    max_sub_array_sum([], -130) == 0\n    max_sub_array_sum([], -131) == 0\n    max_sub_array_sum([], -132) == 0\n    max_sub_array_sum([], -133) == 0\n    max_sub_array_sum([], -134) == 0\n    max_sub_array_sum([], -135) == 0\n    max_sub_array_sum([], -136) == 0\n    max_sub_array_sum([], -137) == 0\n    max_sub_array_sum([], -138) == 0\n    max_sub_array_sum([], -139) == 0\n    max_sub_array_sum([], -140) == 0\n    max_sub_array_sum([], -141) == 0\n    max_sub_array_sum([], -142) == 0\n    max_sub_array_sum([], -143) == 0\n    max_sub_array_sum([], -144) == 0\n    max_sub_array_sum([], -145) == 0\n    max_sub_array_sum([], -146) == 0\n    max_sub_array_sum([], -147) == 0\n    max_sub_array_sum([], -148) == 0\n    max_sub_array_sum([], -149) == 0\n    max_sub_array_sum([], -150) == 0\n    max_sub_array_sum([], -151) == 0\n    max_sub_array_sum([], -152) == 0\n    max_sub_array_sum([], -153) == 0\n    max_sub_array_sum([], -154) == 0\n    max_sub_array_sum([], -155) == 0\n    max_sub_array_sum([], -156) == 0\n    max_sub_array_sum([], -157) == 0\n    max_sub_array_sum([], -158) == 0\n    max_sub_array_sum([], -159) == 0\n    max_sub_array_sum([], -160) == 0\n    max_sub_array_sum([], -161) == 0\n    max_sub_array_sum([], -162) == 0\n    max_sub_array_sum([], -163) == 0\n    max_sub_array_sum([], -164) == 0\n    max_sub_array_sum([], -165) == 0\n    max_sub_array_sum([], -166) == 0\n    max_sub_array_sum([], -167) == 0\n    max_sub_array_sum([], -168) == 0\n    max_sub_array_sum([], -169) == 0\n    max_sub_array_sum([], -170) == 0\n    max_sub_array_sum([], -171) == 0\n    max_sub_array_sum([], -172) == 0\n    max_sub_array_sum([], -173) == 0\n    max_sub_array_sum([], -174) == 0\n    max_sub_array_sum([], -175) == 0\n    max_sub_array_sum([], -176) == 0\n    max_sub_array_sum([], -177) == 0\n    max_sub_array_sum([], -178) == 0\n    max_sub_array_sum([], -179) == 0\n    max_sub_array_sum([], -180) == 0\n    max_sub_array_sum([], -181) == 0\n    max_sub_array_sum([], -182) == 0\n    max_sub_array_sum([], -183) == 0\n    max_sub_array_sum([], "
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     union_elements((1, 2), (2, 3)) == (1, 2, 3)\nassert     union_elements((1, 2, 3), (2, 3, 4)) == (1, 2, 3, 4)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     union_elements((1,2,3,4,5), (2,4,6,8,10)) == (1,2,3,4,5,6,7,8,10)\nassert     union_elements((1,1,2,2), (2,3,4,4,5,5)) == (1,2,2,3,4,5)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     union_elements((1, 2), (3, 4)) == (1, 2, 3, 4)\nassert     union_elements((1, 2), (2, 4)) == (1, 2, 4)\nassert     union_elements((1, 1, 3), (2, 1, 1)) == (1, 1, 2, 3)\nassert     union_elements((1,), (2,)) == (1, 2)\nassert     union_elements((), ()) == ()\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     union_elements((1,2,3), (4,5,6)) == (1,2,3,4,5,6), \"Union doesn't work\"\nassert     union_elements((4,3,2), (1,5,6)) == (1,2,3,4,5,6), \"Union doesn't work\"\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nprint('Pass') if union_elements(test_tup1, test_tup2) == sorted([test_tup1[i] for i in range(len(test_tup1))]) + sorted([test_tup2[i] for i in range(len(test_tup2))]) else print('Fail')\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint union_elements((1, 2, 3, 4), (2, 3, 4, 5)) == (1, 2, 3, 4, 5)\nassert union_elements((10, 20, 30, 40), (50, 60, 70, 80)) == (10, 20, 30, 40, 50, 60, 70, 80)\nassert union_elements((1, 2, 3), (4, 5)) == (1, 2, 3, 4, 5)"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     union_elements((2,5), (3,8)) == (2, 3, 5, 8)\nassert     union_elements((2,5), (3,3)) == (2, 3, 5)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     union_elements(('Durga', 'Goa'), ('Jeevan', 'Goa')) == ('Durga', 'Goa', 'Jeevan') == ('Jeevan', 'Goa', 'Durga') == ('Durga', 'Goa', 'Jeevan') == (('Durga', 'Goa'), ('Jeevan', 'Goa'), ('Jeevan', 'Goa'), ('Durga', 'Goa'))\nassert     union_elements(('Sachin', 'Indira'), ('Sachin', 'Indira')) == ('Sachin', 'Indira') == ('Indira', 'Sachin')\nassert     union_elements(('Sachin', 'Indira'), ('Narendra', 'Indira')) == ('Sachin', 'Indira', 'Narendra')\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     union_elements((1,2,3), (4,5,6)) == (1,2,3,4,5,6)\nassert union_elements((1,2), (3,4,5)) == (1,2,3,4,5)\nassert union_elements((1,2,3), (4,5,6)) == (1,2,3,4,5,6)\nassert union_elements((1,2,3,4,5), (6,7,8,9,10)) == (1,2,3,4,5,6,7,8,9,10)\nassert union_elements((1,2,3,4,5), (6,7,8,9,10,11)) == (1,2,3,4,5,6,7,8,9,10,11)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     union_elements((), (1, 2, 3)) == (1, 2, 3)\nassert     union_elements((1, 2, 3), (4, 5, 6)) == (1, 2, 3, 4, 5, 6)\nassert     union_elements((1, 2, 3), (3, 4)) == (1, 2, 3, 3, 4)\nassert     union_elements((1, 2, 3), (1, 2, 2)) == (1, 2, 3, 1, 2, 2)\nassert union_elements((1, 2, 3), (4, 5, 6)) == (1, 2, 3, 4, 5, 6)\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Find_Max_Length([1, 2, 3, 4]) == 4\nassert     Find_Max_Length([2, 3, 4]) == 3\nassert     Find_Max_Length([1, 2, 3]) == 3\nassert     Find_Max_Length([]) == 0\n\ndef Find_Max_Sum(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    pass\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     Find_Max_Length([1,2,3,4,5]) == 5\nassert     Find_Max_Length([1,2,3,4,5,6]) == 5\nassert     Find_Max_Length([1,2,3,4,5,6,7]) == 5\nassert     Find_Max_Length([1,2,3,4,5,6,7,8,9]) == 9\nassert     Find_Max_Length([1,2,3,4,5,6,7,8,9,10]) == 9\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Find_Max_Length([1,2,3,4,5,6]) == 6\nassert     Find_Max_Length([1,2,3,4,5,4]) == 5\nassert     Find_Max_Length([1,2,3,4]) == 4\nassert     Find_Max_Length([1,2,3,4,5,6]) == 6\nassert     Find_Max_Length([1,2,3]) == 3\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Find_Max_Length([\"a\", \"b\", \"ab\", \"abcd\", \"cd\"]) == 5, Find_Max_Length([\"a\", \"b\", \"ab\", \"abcd\", \"cd\"])\nassert     Find_Max_Length([\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\"]) == 6, Find_Max_Length([\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\"])\nassert     Find_Max_Length([\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\"]) == 6, Find_Max_Length([\"a\", \"aa\", \"aaa\", \"aaaa\", \"aaaaa\"])\n\n\n\ndef Find_Max_Length_2(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    pass\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Find_Max_Length([]) == 0, \"Empty List\"\nassert     Find_Max_Length([1,2,3]) == 3, \"Single element\"\nassert     Find_Max_Length([1,2,3,4,5,6,7]) == 7, \"Multiple elements\"\nassert     Find_Max_Length([1,2,3,4,5,6,7,8,9,10]) == 9, \"Multiple elements\"\nassert     Find_Max_Length([]) == 0, \"Empty List\"\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Find_Max_Length([[],[]]) == 0\nassert    Find_Max_Length([[],[1],[]]) == 3\nassert    Find_Max_Length([[1],[2],[3]]) == 4\nassert    Find_Max_Length([[1],[2],[3],3,4]) == 4\nassert    Find_Max_Length([[1],[2],[3],4,5]) == 5\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Find_Max_Length([[1,2,3],[4,5,6],[7,8,9]]) == 6\nassert Find_Max_Length([[1,2,3,4],[5,6,7,8],[9,10,11,12]]) == 6\nassert Find_Max_Length([[1,2,3,4],[5,6,7,8],[9,10,11,12,13]]) == 13\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Find_Max_Length([[1, 2], [], [], [], []]) == 4\nassert    Find_Max_Length([[1, 2], [1, 2]]) == 2\nassert    Find_Max_Length([[1, 2], [1, 2], [1, 2], [1, 2]]) == 2\nassert    Find_Max_Length([[1, 2], [1, 2], [1, 2], [1, 2], [1, 2]]) == 2\nassert    Find_Max_Length([[1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2]]) == 4\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    extract_values(\"'Shoelace' missed out\") == 'Shoelace'\n    extract_values(\"'Hello, World!'\") == 'Hello, World!'\n    extract_values(\"'0'\") == '0'\n    extract_values(\"'0''\") == '0'''\n    extract_values(\"''Hello, World''\") == 'Hello, World'\n    extract_values(\"''Shoelace''\") == 'Shoelace'\n    extract_values(\"''0''\") == '0'\n    extract_values(\"0\") == '0'\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_values('He said, \"What?\"') == 'What?'\nassert     extract_values('What did the fox say? \"The same?\"') == 'The same?'\nassert     extract_values('The fox said, \"He said, \"What?\"') == 'The same?'\nassert     extract_values('The fox said, \"What did the fox say?\"') == 'What did the fox say?'\nassert     extract_values('The fox said, \"The fox said, \"The fox said, \"The fox said, \"What?\"') == 'The fox said, \"The fox said, \"The fox said, \"The fox said, \"What?\"'\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_values('A \"B C\" D') == 'B C', 'incorrect'\nassert     extract_values('A \"B C\" D') == 'C', 'incorrect'\nassert     extract_values('A \"B C D') == 'C D', 'incorrect'\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n'''\n>>> extract_values('Hi John, how are you doing? She\\'s amazing!')\n('Hi', 'John', 'how', 'are', 'you', 'doing', 'She','s', 'amazing')\n>>> extract_values('\"Hi\", John, how are you doing?\" She\\'s amazing!')\n('Hi', 'John', 'how', 'are', 'you', 'doing', 'She','s', 'amazing')\n>>> extract_values(\"Hi John, how are you doing? She's amazing!\")\n('Hi', 'John', 'how', 'are', 'you', 'doing', 'She','s', 'amazing')\n>>> extract_values(\"Hi John, how are you doing? She's amazing!\\\"\")\n('Hi', 'John', 'how', 'are', 'you', 'doing', 'She','s', 'amazing')\n>>> extract_values(\"Hi John, how are you doing? She's amazing!\\\"She's amazing!\")\n('Hi', 'John', 'how', 'are', 'you', 'doing', 'She','s', 'amazing')\n>>> extract_values(\"Hi John, how are you doing? She's amazing!She\\'s amazing!\")\n('Hi', 'John', 'how', 'are', 'you', 'doing', 'She','s', 'amazing')\n>>> extract_values(\"Hi John, how are you doing? She's amazing!She's amazing!\")\n('Hi', 'John', 'how', 'are', 'you', 'doing', 'She','s', 'amazing')\n>>> extract_values(\"Hi John, how are you doing? She's amazing!She\\'s amazing!\")\n('Hi', 'John', 'how', 'are', 'you', 'doing', 'She','s', 'amazing')\n>>> extract_values(\"Hi John, how are you doing? She's amazing!She\\'s amazing!\")\n('Hi', 'John', 'how', 'are', 'you', 'doing', 'She','s', 'amazing')\n>>> extract_values('Hi John, how are you doing? She\\'s amazing!')\n('Hi', 'John', 'how', 'are', 'you', 'doing', 'She','s', 'amazing')\n>>> extract_values(\"Hi John, how are you doing? She's amazing!\\\"She's amazing!\")\n('Hi', 'John', 'how', 'are', 'you', 'doing', 'She','s', 'amazing')\n>>> extract_values('Hi John, how are you doing? She\\'s amazing!')\n('Hi', 'John', 'how', 'are', 'you', 'doing', 'She','s', 'amazing')\n>>> extract_values('Hi John, how are you doing? She\\'s amazing!She\\'s amazing!')\n('Hi', 'John', 'how', 'are', 'you', 'doing', 'She','s', 'amazing')\n>>> extract_values('Hi John, how are you doing? She\\'s amazing!She\\'s amazing!')\n('Hi', 'John', 'how', 'are', 'you', 'doing', 'She','s', 'amazing')\n>>> extract_values('Hi John, how are you doing? She\\'s amazing!She\\'s amazing!')\n('Hi', 'John', 'how', 'are', 'you', 'doing', 'She','s', 'amazing')\n>>> extract_values('Hi John, how are you doing? She\\'s amazing!She\\'s amazing!')\n('Hi', 'John', 'how', 'are', 'you', 'doing', 'She','s', 'amazing')\n>>> extract_values('Hi John, how are you doing? She\\'s amazing!She\\'s amazing!')\n('Hi', 'John', 'how', 'are', 'you', 'doing', 'She','s', 'amazing')\n>>> extract_values('Hi John, how are you doing? She\\'s amazing!She\\'s amazing!')\n('Hi', 'John', 'how', 'are', 'you', 'doing', 'She','s', 'amazing')\n>>> extract_values('Hi John, how are you doing? She\\'s amazing!She\\'s amazing!')\n('Hi', 'John', 'how', 'are', 'you', 'doing', 'She','s', 'amazing')\n>>> extract_values('Hi John, how are you doing? She\\'s amazing!She\\'s amazing!')\n('Hi', 'John', 'how', 'are', 'you', 'doing', 'She','s', 'amazing')\n>>> extract_values('Hi John, how are you doing? She\\'s amazing!She\\'s amazing!')\n('Hi', 'John', 'how', 'are', 'you', 'doing', 'She','s', 'amazing')\n>>> extract_values('Hi John, how are you doing? She\\'s amazing!She\\'s amazing!')\n('Hi', 'John', 'how', 'are', 'you', 'doing', 'She','s', 'amazing')\n>>> extract_values('Hi John, how are you doing? She\\'s amazing!She\\'s amazing!')\n('Hi', 'John', 'how', 'are', 'you', 'doing', 'She','s', 'amazing')\n>>> extract_values('Hi John, how are you doing? She\\'s amazing!She\\'s amazing!')\n('Hi', 'John', 'how', 'are', 'you', 'doing', 'She','s', 'amazing')\n>>> extract_values('Hi John, how are you doing? She\\'s amazing!She\\'s amazing!')\n('Hi', 'John', 'how', 'are', 'you', 'doing', 'She','s', 'amazing')\n>>> extract_values('Hi John, how are you doing? She\\'s amazing!She\\'s amazing!')\n('Hi', 'John', 'how', 'are', 'you', 'doing', 'She','s', 'amazing')\n>>> extract_values('Hi John, how are you doing? She\\'s amazing!She\\'s amazing!')\n('Hi', 'John', 'how', 'are', 'you', 'doing', 'She','s', 'amazing')\n>>> extract_values('Hi John, how are you doing? She\\'s amazing!She\\'s amazing!')\n('Hi', 'John', 'how', 'are', 'you', 'doing', 'She','s', 'amazing')\n>>> extract_values('Hi John, how are you doing? She\\'s amazing!She\\'s amazing!')\n('Hi', 'John', 'how', 'are', 'you', 'doing', 'She','s', 'amazing')\n>>> extract_values('Hi John, how are you doing? She\\'s amazing!She\\'s amazing!')\n('Hi', 'John', 'how', 'are', 'you', 'doing', 'She','s', 'amazing')\n>>> extract_values('Hi John, how are you doing? She\\'s amazing!She\\'s amazing!')\n('Hi', 'John', 'how', 'are', 'you', 'doing', 'She','s', 'amazing')\n>>> extract_values('Hi John, how are you doing? She\\'s amazing!She\\'s amazing!')\n('Hi', 'John', 'how', 'are', 'you', 'doing', 'She','s', 'amazing')\n>>> extract_values('Hi John, how are you doing? She\\'s amazing!She\\'s amazing!')\n('Hi', 'John', 'how', 'are', 'you', 'doing', 'She','s', 'amazing')\n>>> extract_values('Hi John, how are you doing? She\\'s amazing!She\\'s amazing!')\n('Hi', 'John', 'how', 'are', 'you', 'doing', 'She','s', 'amazing')\n>>> extract_values('Hi John, how are you doing? She\\'s amazing!She\\'s amazing!')\n('Hi', 'John', 'how', 'are', 'you', 'doing', 'She','s', 'amazing')\n>>> extract_values('Hi John, how are you doing? She\\'s amazing!She\\'s amazing!')\n('Hi', 'John', 'how', 'are', 'you', 'doing', 'She','s', 'amazing')\n>>> extract_values('Hi John, how are you doing? She\\'s amazing!She\\'s amazing!')\n('Hi', 'John', 'how', 'are', 'you', 'doing', 'She','s', 'amazing')\n>>> extract_values('Hi John, how are you doing? She\\'s amazing!She\\'s amazing!')\n('Hi', 'John', 'ho"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    extract_values(\"'This is a test. It's a test.'\") == [\"This is a test. It's a test.\"]\n    extract_values(\"Hi He Lied Because Boron Could Not Oxidize Fluorine. New Nations Might Also Sign Peace Security Clause. Arthur King Can.\") == [\"He\", \"Lied\", \"Because\", \"Boron\", \"Could\", \"Not\", \"Oxidize\", \"Fluorine\", \"New\", \"Nations\", \"Might\", \"Also\", \"Sign\", \"Peace\", \"Security\", \"Clause\", \"Arthur\", \"King\", \"Can\"]\n    extract_values(\"She is a wonderful girl.\") == [\"She\", \"is\", \"a\", \"wonderful\", \"girl\"]\n    extract_values(\"Don't judge a book by the cover weight.\") == [\"Don't\", \"judge\"]\n    extract_values(\"I am a student.\") == [\"I\", \"am\", \"a\", \"student\"]\n    extract_values(\"'A few months ago, my mother told me,she had a little lamb,its fleece was white as snow and then one day,i woke up, she was sunbathing and i was wearing a lamb\") == [\"A few months ago, my mother told me,she had a little lamb,its fleece was white as snow and then one day,i woke up, she was sunbathing and i was wearing a lamb\"]\n    extract_values(\"The sky is blue and the sky is yellow.\") == [\"The\", \"blue\", \"and\", \"the\", \"yellow\"]\n    extract_values(\"The value of this test is $23.114\") == [\"The\", \"value\", \"of\", \"this\", \"test\", \"is\", \"$\", \"23.114\"]\n    extract_values(\"The recipe calls for $23.114\") == [\"The\", \"recipe\", \"calls\", \"for\", \"$\", \"23.114\"]\n    extract_values(\"$23.114\") == [\"$\", \"23.114\"]\n    extract_values(\"We have $23.114 to spend tomorrow. That makes $230.11\") == [\"We\", \"have\", \"$\", \"23.114\", \"to\", \"spend\", \"$\", \"tomorrow\", \".\", \"That\", \"makes\", \"$\", \"230.11\"]\n    extract_values(\"$23.114\") == [\"$\", \"23.114\"]\n    extract_values(\"She is a wonderful girl.\") == [\"She\", \"is\", \"a\", \"wonderful\", \"girl\"]\n    extract_values(\"She is a wonderful girl.\") == [\"She\", \"is\", \"a\", \"wonderful\", \"girl\"]\n    extract_values(\"I like both bananas and apples.\") == [\"I\", \"like\", \"both\", \"bananas\", \"and\", \"apples\"]\n    extract_values(\"I don't like them.\") == [\"I\", \"do\", \"n't\", \"like\", \"them\"]\n    extract_values(\"Let's not go to war and let it die.\") == [\"Let\", \"not\", \"go\", \"to\", \"war\", \"and\", \"let\", \"it\", \"die\"]\n    extract_values(\"Life is short, you need Python.\") == [\"Life\", \"is\", \"short\"]\n    extract_values(\"I don't like them.\") == [\"I\", \"do\", \"n't\", \"like\", \"them\"]\n    extract_values(\"I don't like them.\") == [\"I\", \"do\", \"n't\", \"like\", \"them\"]\n    extract_values(\"I do not like them.\") == [\"I\", \"do\", \"not\", \"like\"]\n    extract_values(\"I do not like them.\") == [\"I\", \"do\", \"not\", \"like\"]\n    extract_values(\"I do not like them.\") == [\"I\", \"do\", \"not\", \"like\"]\n    extract_values(\"She is a wonderful girl.\") == [\"She\", \"is\", \"a\", \"wonderful\", \"girl\"]\n    extract_values(\"She is a wonderful girl.\") == [\"She\", \"is\", \"a\", \"wonderful\", \"girl\"]\n    extract_values(\"I did not like them.\") == [\"I\", \"did\", \"not\", \"like\"]\n    extract_values(\"I like them.\") == [\"I\", \"like\"]\n    extract_values(\"We have a couple apples and oranges.\") == [\"We\", \"have\", \"a\", \"couple\", \"apples\", \"and\", \"oranges\"]\n    extract_values(\"I like apples and oranges.\") == [\"I\", \"like\", \"apples\", \"and\", \"oranges\"]\n    extract_values(\"I like apples and oranges.\") == [\"I\", \"like\", \"apples\", \"and\", \"oranges\"]\n    extract_values(\"I like apples and oranges.\") == [\"I\", \"like\", \"apples\", \"and\", \"oranges\"]\n    extract_values(\"I like apples and oranges.\") == [\"I\", \"like\", \"apples\", \"and\", \"oranges\"]\n    extract_values(\"I like apples and oranges.\") == [\"I\", \"like\", \"apples\", \"and\", \"oranges\"]\n    extract_values(\"I like apples and oranges.\") == [\"I\", \"like\", \"apples\", \"and\", \"oranges\"]\n    extract_values(\"I like apples and oranges.\") == [\"I\", \"like\", \"apples\", \"and\", \"oranges\"]\n    extract_values(\"I like apples and oranges.\") == [\"I\", \"like\", \"apples\", \"and\", \"oranges\"]\n    extract_values(\"I like apples and oranges.\") == [\"I\", \"like\", \"apples\", \"and\", \"oranges\"]\n    extract_values(\"I like apples and oranges.\") == [\"I\", \"like\", \"apples\", \"and\", \"oranges\"]\n    extract_values(\"I like apples and oranges.\") == [\"I\", \"like\", \"apples\", \"and\", \"oranges\"]\n    extract_values(\"I like apples and oranges.\") == [\"I\", \"like\", \"apples\", \"and\", \"oranges\"]\n    extract_values(\"I like apples and oranges.\") == [\"I\", \"like\", \"apples\", \"and\", \"oranges\"]\n    extract_values(\"I like apples and oranges.\") == [\"I\", \"like\", \"apples\", \"and\", \"oranges\"]\n    extract_values(\"I like apples and oranges.\") == [\"I\", \"like\", \"apples\", \"and\", \"oranges\"]\n    extract_values(\"I like apples and oranges.\") == [\"I\", \"like\", \"apples\", \"and\", \"oranges\"]\n    extract_values(\"I like apples and oranges.\") == [\"I\", \"like\", \"apples\", \"and\", \"oranges\"]\n    extract_values(\"I like apples and oranges.\") == [\"I\", \"like\", \"apples\", \"and\", \"oranges\"]\n    extract_values(\"I like apples and oranges.\") == [\"I\", \"like\", \"apples\", \"and\", \"oranges\"]\n    extract_values(\"I like apples and oranges.\") == [\"I\", \"like\", \"apples\", \"and\", \"oranges\"]\n    extract_values(\"I like apples and oranges.\") == [\"I\", \"like\", \"apples\", \"and\", \"oranges\"]\n    extract_values(\"I like apples and oranges.\") == [\"I\", \"like\", \"apples\", \"and\", \"oranges\"]\n    extract_values(\"I like apples and oranges.\") == [\"I\", \"like\", \"apples\", \"and\", \"oranges\"]\n    extract_values(\"I like apples and oranges.\") == [\"I\", \"like\", \"apples\", \"and\", \"oranges\"]\n    extract_values(\"I like apples and oranges.\") == [\"I\", \"like\", \"apples\", \"and\", \"oranges\"]\n    extract_values(\"I like apples and oranges.\") == [\"I\", \"like\", \"apples\", \"and\", \"oranges\"]\n    extract_values(\"I like apples and oranges.\") == [\"I\", \"like\", \"apples\", \"and\", \"oranges\"]\n    extract_values(\"I like apples and oranges.\") == [\"I\", \"like\", \"apples\", \"and\", \"oranges\"]\n    extract_values(\"I like apples and oranges.\") == [\"I\", \"like\", \"apples\", \"and\", \"oranges\"]\n    extract_values(\"I like apples and oranges.\") == [\"I\", \"like\", \"apples\", \"and\", \"oranges\"]\n    extract_values(\"I like apples and oranges.\") == [\"I\", \"like\", \"apples\", \"and\", \"oranges\"]\n    extract_values(\"I like apples and oranges.\") == [\""
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     extract_values(\"Hello, I'm a boy.\") == 'boy', \"Wrong!\"\nassert     extract_values(\"What are you doing here?\") == 'here', \"Wrong!\"\nassert     extract_values(\"I'm a boy.\") == 'boy', \"Wrong!\"\nassert     extract_values(\"I'm a boy.\") == 'boy', \"Wrong!\"\nassert     extract_values(\"'What?' I'm a boy.\") == 'boy', \"Wrong!\"\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_values(\"The quick brown fox jumps over the lazy dog.\") == ['The quick brown fox jumps', 'over the lazy dog']\nassert     extract_values(\"'The man in black fled from the palace.' He said \\\"Never speak again\\\".\") == ['The man in black fled from the palace.', 'He said \"Never speak again\".']\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_values('That is \"true\"') == True\nassert     extract_values('That is \"false\"') == False\nassert     extract_values('That is \"yes\"') == True\nassert     extract_values('That is \"no\"') == False\nassert     extract_values('That is \"maybe\"') == True\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint(extract_values('\"The first part is a string.')) == 'The first part is a string.'\nprint(extract_values('\"The second part is a string.\"')) == 'The second part is a string.'\nprint(extract_values('a string \"1\" 2')) == '1 2'\nprint(extract_values('\"1\" \"2\"')) == '1 2'\nprint(extract_values('1')) == 1\nprint(extract_values(' \"1\"')) == '1'\nprint(extract_values(' \"1 \"2\"')) == '1 2'\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_values('This is \"text\" with quotes') == ['text', 'with quotes']\nassert     extract_values('This is \"text with\" quotes') == ['text with']\nassert     extract_values('This is \"text with quotes and \"\\nother text\")') == ['text with quotes and', 'other text']\nassert     extract_values('This is \"text with quotes and \\nother text') == ['text with quotes and', 'other text']\nassert     extract_values('This is \"text with quotes and \\nother text\")') == ['text with quotes and', 'other text']\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_Pairs([1,2,3,3,4,5],5) == 1\nassert     count_Pairs([1,2,3,3,4,5],10) == 2\nassert     count_Pairs([1,2,3,3,4,5],100) == 3"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ncount_Pairs([3, 2, 1, 2, 4, 3],5) == 4\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ncount_Pairs([1,2,3,4,5],5) == 2\ncount_Pairs([1,2,3,4],5) == 2\ncount_Pairs([1,2,3],5) == 1\ncount_Pairs([],5) == 0\ncount_Pairs([1,2,3],4) == 1\ncount_Pairs([],4) == 0\ncount_Pairs([1,2],4) == 0\n\ndef count_Pairs_using_sort(arr,n):\n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    Sort the list first.\n    '''\n    pass\n\nassert count_Pairs_using_sort([1,2,3,4,5],5) == 2\nassert count_Pairs_using_sort([1,2,3,4],5) == 2\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_Pairs([1, 2, 3, 4], 4) == 2\nassert     count_Pairs([1, 2, 3, 4], 5) == 3"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef count_pairs(arr):\n    '''\n    Write a python function which takes a list of integers and returns the number of unordered pairs where both elements are unequal.\n    '''\n    pass\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    from collections import defaultdict\n    d = defaultdict(int)\n    for i in range(0,n):\n        for j in range(i+1,n):\n            d[arr[i]] += 1\n            d[arr[j]] += 1\n    for i in range(n):\n        if arr[i] in d and d[arr[i]] >= 2:\n            print(arr[i],end=\" \")\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nprint(count_Pairs([0,1,2,3,4],4))\n\n\n\n'''\nWrite a python function to reverse the order of the given list.\n'''\ndef reverse_order(arr):\n    '''\n    Write a python function to reverse the order of the given list.\n    '''\n    pass\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    count_Pairs([1, 2, 3, 4, 5, 6],7) == 2\n    \nassert \n    count_Pairs([1, 2, 3, 4, 5, 6],8) == 1\n    \n    \n    "
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     split('abc') == ['a','b','c']\nassert     split('abc-') == ['a','b','c']\nassert     split('a') == ['a']\nassert     split('') == ['','']\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     split('code') == ['c', 'o', 'd', 'e']\nassert     split('code') == ['c', 'o', 'd']\nassert     split('code') == ['c', 'o']\nassert     split('code') == ['c']\nassert     split('code') == []\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     split('abc') == ['a', 'b', 'c']\nassert     split('abcde') == ['a', 'b', 'c', 'd', 'e']\nassert     split('abcde-efg') == ['a', 'b', 'c', 'd', 'e', 'f', 'g']\nassert     split('-23') == ['-', '2', '3']\nassert     split('-2345') == ['-', '2', '3', '4', '5']\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n'''\nWrite a python function to split a string into words using any delimiter.\n'''\ndef split(string,delimiter):\n    '''\n    Write a python function to split a string into words using any delimiter.\n    '''\n    pass\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     split(\"hi\") == ['h', 'i']\nassert     split(\"hi there\") == ['h', 'i', 't', 'e', 'r', 'e', 'f', 'e']\nassert     split(\"\") == []\nassert     split(\"hello\") == ['h', 'e', 'l', 'l', 'o']\nassert     split(\"a b\") == ['a', 'b']\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert split('abc') == ['a', 'b', 'c']\nassert split('abcdefghi') == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']\nassert split('abcd') == ['a', 'b', 'c', 'd']\nassert split('abcdefgh') == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     split('a') == ['a'], 'First assert failed'\nassert     split('a b') == ['a','b'], 'Second assert failed'\nassert     split('a b c') == ['a','b','c'], 'Third assert failed'\nassert     split('1 2 3 4 5 6 7 8 9 10') == ['1','2','3','4','5','6','7','8','9','10'], 'Fourth assert failed'\n\nprint ('All assertions passed'"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     split('sai') == ['s', 'a', 'i']\nassert     split('v') == ['v']\nassert     split('aeiou') == ['a', 'e', 'i', 'o', 'u']\nassert     split('aa') == ['a', 'a']\nassert     split('a') == ['a']\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_digits(123) == 6\nassert     sum_digits(12) == 3\nassert     sum_digits(12345) == 15\nassert     sum_digits(1234567) == 18\n\nprint(\"You've passed all the tests!\""
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_digits(555) == 15\nassert     sum_digits(101) == 1 + 0 + 0 + 0\nassert     sum_digits(1000) == 10 + 0 + 0 + 0\nassert     sum_digits(1111) == 1 + 1 + 0 + 0\nassert     sum_digits(8989) == 8 + 9 + 0 + 0\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_digits(6) == 0, \"test failed\"\nassert     sum_digits(123) == 12, \"test failed\"\nassert     sum_digits(0) == 0, \"test failed\"\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef test_sum_digits():\n    assert sum_digits(123) == 6\n    assert sum_digits(456) == 10\n    assert sum_digits(0) == 0\n    "
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_digits(1) == 1\nassert     sum_digits(10) == 1\nassert     sum_digits(100) == 11\nassert     sum_digits(99) == 9\nassert     sum_digits(1000) == 1\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_digits(25) == 5\nassert     sum_digits(93) == 6\nassert     sum_digits(0) == 0\n\ndef get_factorial(n):\n    '''\n    Write a function to get the factorial of a non-negative integer.\n    The return value should be a float, unless the integer is a 0.\n    '''\n    pass\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_digits(123) == 6\nassert     sum_digits(1234) == 10\nassert     sum_digits(123456789) == 45\nassert     sum_digits(12345678900) == 45\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_digits(1234) == 2\nassert     sum_digits(1234567890) == 45\nassert     sum_digits(0) == 0"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     issort_list([]) == True, 'Empty list should return True'\nassert issort_list([1]) == True, 'List with one element should return True'\nassert issort_list([5, 4, 3, 2, 1]) == True, 'List with ascending numbers should return True'\nassert issort_list([5, 4, 3, 2, 1, 0]) == False, 'List with descending numbers should return False'\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     issort_list([1,2,3,4,5])==True, \"1\"\nassert     issort_list([1,3,2,4,5])==False, \"2\"\nassert     issort_list([1,2,3,4,2])==True, \"3\"\nassert     issort_list([1,2,3,4,5])==True, \"4\"\nassert     issort_list([1,2,3,4,5,1])==True, \"5\"\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    issort_list([1,2,3]) == True\n    issort_list([2,1,3]) == False\n    issort_list([3,1,2]) == False\n    issort_list([1,2,1]) == False\n    issort_list([1,2,3,1,2,3]) == True\n    issort_list([1,2,3,1,2,3,1]) == False\n    issort_list([1,2,3,1,2,3,1,2,3]) == False\n    issort_list([]) == True\n    issort_list([1,2,3,4,5,6,7,8,9]) == False\n    issort_list([]) == True\n    issort_list([\"a\",\"b\",\"c\"]) == False\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     issort_list([1, 2, 3, 4, 5]) == True, 'Wrong output'\nassert     issort_list([1, 2, 3, 4, 5, 6]) == False, 'Wrong output'\nassert     issort_list([1, 2, 3]) == False, 'Wrong output'\nassert     issort_list([1, 2, 3, 1, 2]) == False, 'Wrong output'\nassert     issort_list([1, 2, 3, 4, 5, 1, 2, 3]) == True, 'Wrong output'\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nissort_list([3,3,7,9]) == True\nissort_list([-1,-2,-3,-4,-5]) == True\nissort_list([1,2,3,4,5]) == True\nissort_list([4,5,6,7,8]) == False\nissort_list([-2,4,6,8,10]) == False\nissort_list([-2,4,6,8,10]) == False\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     issort_list([]) == True\nassert     issort_list([1, 2, 3, 4, 5]) == True\nassert     issort_list([1, 2, 4, 3, 5]) == True\nassert     issort_list([1, 3, 5, 2, 4]) == True\nassert     issort_list([1, 2, 3, 4, 5, 1]) == True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     issort_list([1,2,3,4,5]) == True\nassert     issort_list([1,4,5,2,3]) == False\nassert     issort_list([2,3,4,5,1]) == False\nassert     issort_list([2,3,4,5,1,2]) == True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n\nimport unittest\nimport io\nimport math\nimport random\nfrom typing import Any, List\n\n\nclass Node:\n    \"\"\"A utility class for creating a linked list node.\"\"\"\n\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    \"\"\"\n    A utility class for creating linked list.\n    \"\"\"\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef quicksort(l):\n    '''\n    Write a function to return the list after quicksort.\n    '''\n    pass\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nempty_list(2) == [[], {}]\nempty_list(3) == [{}, {}, {}]\nempty_list(4) == [{}, {}, {}, {}]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     empty_list(10) == \\\n    [{},\n     {},\n     {},\n     {},\n     {},\n     {},\n     {},\n     {},\n     {},\n     {}]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     empty_list(5) == [{}, {}, {}, {}, {}], 'Wrong result'\nassert empty_list(0) == [], 'Wrong result'\nassert empty_list(5) == [{}, {}, {}, {}, {}], 'Wrong result'\nassert empty_list(3) ==     [{}, {}, {}], 'Wrong result'\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     empty_list(10) == [{}, {}, {}, {}, {}, {}, {}, {}], \"Wrong!\"\nassert empty_list(2) == [{}, {}], \"Wrong!\"\n\n\ndef add_keys(d1, d2):\n    '''\n    Given 2 dictionaries of the same length, return a new dictionary\n    that is comprised of the keys from both dictionaries, but with\n    the values from d1 added to d2.\n    '''\n    pass\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef empty_list_three(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    pass\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     empty_list(0) == []\nassert     empty_list(1) == [[]]\nassert     empty_list(2) == [{},{}]\nassert     empty_list(3) == [{},{},{}]\n\ndef dict_comp(dict_a, dict_b):\n    '''\n    Write a function to create the list of tuples from a dictionary with all keys the same.\n    The tuples should contain the corresponding values.\n    '''\n    pass\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     empty_list(2) == [[], {}], \"Wrong output\"\nassert     empty_list(3) == [[{}], {}, {}], \"Wrong output\"\nassert     empty_list(1) == [[{}], {}], \"Wrong output\"\nassert     empty_list(0) == [{}, {}, {}, {}], \"Wrong output\"\n\ndef empty_list_for_loop(length):\n    '''\n    Write a function to create a list of N empty dictionaries using for loop.\n    '''\n    pass\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n    empty_list(2) == empty_list(3) == empty_list(4) == [{}, {}]\n    empty_list(0) == []\n    empty_list(1) == [{}]\n    empty_list(2) == [{}, {}]\n    empty_list(3) == [{}, {}]\n    empty_list(4) == [{}, {}]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     empty_list(0) == []\nassert     empty_list(1) == []\nassert     empty_list(2) == []\nassert     empty_list(3) == []\nassert     empty_list(4) == []\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     empty_list(2) == [{},{}], \"incorrect result\"\nassert empty_list(5) == [{},{},{},{},{}], \"incorrect result\"\nassert empty_list(10) == [{},{},{},{},{},{},{},{},{}], \"incorrect result\"\n\n\ndef print_elements(list_to_print):\n    '''\n    Write a function that takes in a list and prints out all the elements one per line.\n    '''\n    pass\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef count_items_in_list(list1):\n    '''\n    Write a function that takes a list of strings and counts the number of strings in the list.\n    '''\n    pass\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sort_sublists([\"test\", \"a\", \"a\", \"a\", \"b\", \"b\", \"c\", \"c\", \"d\", \"d\", \"e\", \"e\"]) == \\\n    [\"a\", \"a\", \"a\", \"b\", \"b\", \"c\", \"c\", \"d\", \"d\", \"e\", \"e\", \"test\"]\n\ndef sort_sublist_by_length(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists by their length.\n    '''\n    pass\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sort_sublists([[1,2,3], [2,1,1], [1,1,2], [1,1,2]]) == [[1,1,1], [2,1,2], [1,2,3], [1,2,1]]\n\ndef sort_by_key_value(dict1):\n    '''\n    Write a function to sort the given dictionary by key and value.\n    '''\n    pass\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_sublists([['a','b','c'],['d','e','f']]) == \\\n            [[['a','d','b'],['c','e','f']],[['a','c','d'],['e','b','f']]]\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sublist in list1:\n        sorted_list.append(sorted(sublist))\n    return sorted_list\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert sort_sublists([['a','c','e'],['b','d'],['g','f']]) == [['a','b','g'],['c','d'],['e','f','c']]\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_sublists([[], ['a'], ['b'], ['c']]) == [[], ['a'], ['b'], ['c']]\nassert     sort_sublists([[], ['c'], ['b'], ['a']]) == [[], ['a'], ['b'], ['c']]\nassert     sort_sublists([['a'], ['c'], ['b'], ['a']]) == [['a'], ['a'], ['b'], ['c']]\nassert     sort_sublists([['a'], ['a'], ['c'], ['b']]) == [['a'], ['a'], ['a'], ['b']]\nassert     sort_sublists([['a'], ['a'], ['a'], ['b']]) == [['a'], ['a'], ['a'], ['b']]\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sort_sublists([['abcd','123','cde'],['efgh','123','jkl']]) == \\\n    [['abcd','123','cde'],['efgh','123','jkl']]\nassert     sort_sublists([['cde','123','efgh'],['abcd','123','efgh']]) == \\\n    [['abcd','123','efgh'],['cde','123','efgh']]\nassert     sort_sublists([['a','1','2'],['c','3','4'],['b','5','6']]) == \\\n    [['a','1','2'],['b','5','6'],['c','3','4']]\nassert     sort_sublists([['c','2','e'],['b','1','4'],['d','3','5']]) == \\\n    [['b','1','4'],['c','2','e'],['d','3','5']]\nassert     sort_sublists([['e','1','f'],['d','2','4'],['c','3','5'],['b','4','6']]) == \\\n    [['d','2','4'],['b','4','6'],['e','1','f'],['c','3','5']]\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sort_sublists([\"a\",\"b\",\"c\",\"d\"]) == [\"a\",\"b\",\"c\",\"d\"]\nassert     sort_sublists([\"a\",\"d\",\"c\",\"b\"]) == [\"a\",\"b\",\"c\",\"d\"]\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     two_unique_nums([1,2,3]) == [[1,2,3]]\nassert     two_unique_nums([1,1,3]) == [[1,1,3]]\nassert     two_unique_nums([1,1,2]) == [[1,1,2]]\nassert     two_unique_nums([1,2,2]) == [[1,2,2]]\nassert     two_unique_nums([1,1,1,2]) == [[1,1,1,2]]\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    two_unique_nums([1, 2, 3, 4, 5, 6]) == True\n    two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8, 9]) == False\n    two_unique_nums([1, 1, 2, 3, 4, 4, 5, 6, 7, 8, 9]) == True\n    two_unique_nums([1, 2, 3, 4, 5, 6]) == False\n    two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8, 9]) == True\n    two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == True\n    two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]) == True\n    two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     two_unique_nums([1, 2, 3, 4, 5]) ==    [[1, 2, 3, 4, 5]]\nassert     two_unique_nums([1, 2, 3, 4, 5, 1]) ==    [[1, 2, 3, 4, 5]]\nassert     two_unique_nums([1, 2, 3, 4, 5, 1, 5]) ==    [[1, 2, 3, 4, 5, 1, 5]]\nassert     two_unique_nums([1, 2, 3, 4, 5, 1, 5, 5]) ==    [[1, 2, 3, 4, 5, 1, 5]]\nassert     two_unique_nums([]) ==    []\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     two_unique_nums([1,2,2,3,4,5]) == False, '1,2,2,3,4,5 case 1 fail'\nassert     two_unique_nums([1,2,3,3,4,5]) == True, '1,2,3,3,4,5 case 2 fail'\nassert     two_unique_nums([1,2,3,4,5]) == True, '1,2,3,4,5 case 3 fail'\nassert     two_unique_nums([1,1,1,1,1,1]) == True, '1,1,1,1,1 case 4 fail'\nassert     two_unique_nums([1,2,2,2,2]) == False, '1,2,2,2,2 case 5 fail'\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     two_unique_nums([1, 1, 1, 1, 2, 2]) == [1, 2]\nassert     two_unique_nums([1, 2, 3, 4, 5, 5, 6]) == [1, 2, 3, 4, 5, 6]\nassert     two_unique_nums([1, 2, 3, 4, 5, 5, 6, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]\nassert     two_unique_nums([1, 2, 3, 4, 5, 5, 5, 5, 6, 6]) == [1, 2, 3, 4, 5, 5, 5, 5, 6]\nassert     two_unique_nums([1, 2, 3, 4, 5, 5, 5, 5, 6, 6, 6]) == [1, 2, 3, 4, 5, 5, 5, 5, 6]\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     two_unique_nums([1, 1, 1, 2, 3, 3]) == False\nassert     two_unique_nums([1, 1, 2, 3, 4, 5]) == True\nassert     two_unique_nums([1, 2, 3, 4, 5, 5]) == False\nassert     two_unique_nums([1, 2, 3, 3, 4, 5]) == True\nassert     two_unique_nums([1, 1, 2, 3, 4, 5, 5]) == True\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     two_unique_nums([[1, 2, 3], [4, 1, 2], [3, 2, 4]]) == [[1, 2, 3], [4, 2], [3, 4]]\nassert     two_unique_nums([[1, 1, 2], [2, 3], [3, 2, 3, 1]]) == [[1, 1, 2], [2, 3], [3, 2, 3, 1]]\nassert     two_unique_nums([[1, 2], [1, 2], [1, 2, 3, 3, 3, 4], [2]]) == [[1, 2], [1, 2], [1, 2, 3, 3, 3, 4], [2]]\nassert     two_unique_nums([[1, 2, 3], [4, 5, 6], [4, 5, 6, 1]]) == [[1, 2, 3], [4, 5, 6], [4, 5, 6, 1]]\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     two_unique_nums([1,2,3,4,5,6,7])     == [1,2,3,4,5,6,7]\nassert     two_unique_nums([1,2,3,4,5,6,7,9])     == [1,2,3,4,5,6,7,9]\nassert     two_unique_nums([1,2,3,4,5,6,7,9,10])     == [1,2,3,4,5,6,7,9]\nassert     two_unique_nums([1,2,3,4,5,6,7,9,10,11])    == [1,2,3,4,5,6,7,9,10]\nassert     two_unique_nums([1,2,3,4,5,6,7,9,10,11,12]) == [1,2,3,4,5,6,7,9,10,11]\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    two_unique_nums([[1, 2, 3], [1, 2, 5], [1, 1, 1]]) == [[1, 2, 3], [1, 1, 1]]\n    two_unique_nums([[2, 2, 3], [5, 2, 2]]) == [[2, 2, 3], [5, 2, 2]]\n    two_unique_nums([[2, 2, 2], [2, 2, 3], [5, 2, 2]]) == [[2, 2, 2], [2, 2, 3], [5, 2, 2]]\n    two_unique_nums([[1, 1, 1], [1, 1, 1], [1, 1, 1]]) == [[1, 1, 1], [1, 1, 1]]\n    two_unique_nums([[2, 2, 2], [2, 2, 2], [2, 2, 2]]) == [[2, 2, 2], [2, 2, 2]]\n    two_unique_nums([[2, 2, 2], [2, 2, 2]]) == [[2, 2, 2], [2, 2, 2]]\n    two_unique_nums([[2, 2, 2], [2, 2, 2]]) == [[2, 2, 2], [2, 2, 2]]\n    two_unique_nums([[2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2]]) == [[2, 2, 2], [2, 2, 2]]\n    two_unique_nums([[2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2]]) == [[2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2]]\n    two_unique_nums([[2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2]]) == [[2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2]]\n    two_unique_nums([[2, 2, 2], [2, 2, 2], [2, 2, 2]]) == [[2, 2, 2], [2, 2, 2], [2, 2, 2]]\n    two_unique_nums([[2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2]]) == [[2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2]]\n\n    two_unique_nums([[2, 2, 2], [2, 2, 2]]) == [[2, 2, 2], [2, 2, 2]]\n    two_unique_nums([[1, 1, 1], [1, 1, 1], [1, 1, 1]]) == [[1, 1, 1], [1, 1, 1]]\n    two_unique_nums([[2, 2, 2], [2, 2, 2], [2, 2, 2]]) == [[2, 2, 2], [2, 2, 2]]\n    two_unique_nums([[1, 1, 1], [1, 1, 1], [1, 1, 1]]) == [[1, 1, 1], [1, 1, 1]]\n    two_unique_nums([[2, 2, 2], [2, 2, 2], [2, 2, 2]]) == [[2, 2, 2], [2, 2, 2]]\n    two_unique_nums([[2, 2, 2], [2, 2, 2]]) == [[2, 2, 2], [2, 2, 2]]\n    two_unique_nums([[2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2]]) == [[2, 2, 2], [2, 2, 2]]\n    two_unique_nums([[2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2]]) == [[2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2]]\n    two_unique_nums([[2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2]]) == [[2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2]]\n    two_unique_nums([[2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2]]) == [[2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2]]\n    two_unique_nums([[2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2]]) == [[2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2]]\n    two_unique_nums([[2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2]]) == [[2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2]]\n    two_unique_nums([[2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2]]) == [[2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2]]\n    two_unique_nums([[2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2]]) == [[2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2]]\n    two_unique_nums([[2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2]]) == [[2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2]]\n    two_unique_nums([[2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2]]) == [[2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2]]\n    two_unique_nums([[2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2]]) == [[2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2]]\n    two_unique_nums([[2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2]]) == [[2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2]]\n    two_unique_nums([[2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2]]) == [[2, 2, 2], [2, 2, 2], [2, 2, 2]"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     unique_product([1, 1, 2, 3, 4, 4, 4, 4, 4, 4]) == 24\nassert     unique_product([1, 1, 1, 1, 4, 4, 4, 4, 4, 4]) == 1\nassert     unique_product([1, 1, 1, 1, 1, 2, 2, 2, 2, 2]) == 6\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     unique_product([1, 2, 1]) == 2, '1, 2, 1 = 2'\nassert     unique_product([0, 0]) == 0, '0, 0 = 0'\nassert     unique_product([1, 1, 1]) == 1, '1, 1, 1 = 1'\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     unique_product([4, 3, 2, 1, 2]) == 4, 'Wrong output'\nassert     unique_product([]) == 1, 'Wrong output'\nassert     unique_product([4, 3, 2, 4, 1, 2]) == 4, 'Wrong output'\nassert     unique_product([0, 0, 0, 0, 1, 2, 3, 4, 3]) == 24, 'Wrong output'\nassert     unique_product([1, 3, 2, 1, 2]) == 6, 'Wrong output'\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     unique_product([3,1,2,3,6,6,4]) == 24\nassert     unique_product([4,2,2,2,2,4]) == 4\n\ndef unique_product2(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert unique_product([10, 20, 30, 20, 20, 30, 40, 40]) == 20000, \"Wrong output\"\n\ndef remove_repetitive_from_list(list_data):\n    '''\n    Write a python function to remove repetitive numbers from a given list.\n    '''\n    pass\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     unique_product([1, 2, 3, 4]) == 24\nassert     unique_product([1, 2, 3, 4, 1, 3, 4]) == 8\nassert     unique_product([1, 2, 3, 4, 1, 3, 4, 5]) == 60\nassert     unique_product([1, 1, 3, 4, 1, 3, 4, 5]) == 60\nassert     unique_product([1, 1, 3, 4, 1, 3, 4, 5, 1]) == 24\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nunique_product([1,2,3,4,2,3,3]) == 24\nunique_product([3,4,3,6,1,2,3,3]) == 12"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     unique_product([1,2,3,4,5,2,1,3]) == 120, \"Wrong output\"\nassert     unique_product([1,1,1,1,1,1,1]) == 1, \"Wrong output\"\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     unique_product([1, 2, 3, 4, 5, 6, 1]) == 120, \\\n    \"incorrect result\"\nassert     unique_product([1, 1, 1, 2, 2, 3, 3, 4, 4, 5]) == 120, \\\n    \"incorrect result\"\nassert     unique_product([1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == 120, \\\n    \"incorrect result\"\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nunique_product([1,2,2,2,3,3,4,5])"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     surfacearea_cylinder(1,1) == 2*math.pi*1\nassert     surfacearea_cylinder(2,2) == 2*math.pi*2\nassert     surfacearea_cylinder(3,3) == 2*math.pi*3\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     surfacearea_cylinder(1,5) == 2.7432\nassert     surfacearea_cylinder(1,1) == 2.5\nassert     surfacearea_cylinder(2,1) == 4.0874\nassert     surfacearea_cylinder(2,2) == 10.2416\nassert     surfacearea_cylinder(2,4) == 24.852\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     surfacearea_cylinder(1.0,1.0)==2.81, 'incorrect surfacearea_cylinder function'\nassert     surfacearea_cylinder(0.5,0.5)==2.8, 'incorrect surfacearea_cylinder function'\nassert     surfacearea_cylinder(2.0,3.0)==12.5, 'incorrect surfacearea_cylinder function'\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     surfacearea_cylinder(2,3) == 8, \"Error\"\nassert     surfacearea_cylinder(0,0) == 0, \"Error\"\nassert     surfacearea_cylinder(2,2) == 20, \"Error\""
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     surfacearea_cylinder(5,6) == 58.77, \"incorrect surfacearea_cylinder\"\nassert surfacearea_cylinder(2,3) == 28.27, \"incorrect surfacearea_cylinder\"\nassert surfacearea_cylinder(3,2) == 52.66, \"incorrect surfacearea_cylinder\"\nassert surfacearea_cylinder(0,10) == 0, \"incorrect surfacearea_cylinder\"\nassert surfacearea_cylinder(3,4) == 32.84, \"incorrect surfacearea_cylinder\"\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nsurfacearea_cylinder(2,2) == 4, 'Should be 4'\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_Sub_Array([],[] ) == True\nassert is_Sub_Array([1,2,3], []) == False\nassert is_Sub_Array([1,2,3],[3]) == True\nassert is_Sub_Array([1,2,3],[1]) == True\nassert is_Sub_Array([1,2,3],[2]) == False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_Sub_Array([1,3,5], [1,3,5]) == True, \"Wrong\"\nassert is_Sub_Array([1,2,5], [1,3,5]) == False, \"Wrong\"\nassert is_Sub_Array([1,3,5], [1,2,5]) == False, \"Wrong\"\n\ndef is_All_Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is superlist of another or not.\n    '''\n    pass\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert is_Sub_Array([], []) == True\nassert is_Sub_Array([1,2,3], []) == False\nassert is_Sub_Array([1,2,3], [1,2]) == True\nassert is_Sub_Array([1,2,3], [1,2,4]) == False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert not is_Sub_Array(A = [-1,1,2,3,4], B = [0,1,2,3,4])\nassert is_Sub_Array(A = [-1,1,2,3,4], B = [0,1,2,3,4,5,6,7,8,9,10,11])\nassert not is_Sub_Array(A = [-1,1,2,3,4], B = [-2,-1,0,1,2])\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_Sub_Array([1,2,3], [1]) == True\nassert     is_Sub_Array([1,2,3], [2]) == True\nassert     is_Sub_Array([1,2,3], [3]) == True\nassert     is_Sub_Array([1,2,3], [3,2]) == True\nassert     is_Sub_Array([1,2,3], []) == True\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_Sub_Array([1,2,3], [1,2,3]) == True, \"Wrong output\"\nassert     is_Sub_Array([1,2,3], [4,5,6]) == False, \"Wrong output\"\nassert     is_Sub_Array([1,2], [1,2,3]) == True, \"Wrong output\"\nassert     is_Sub_Array([1,2], [1,2]) == False, \"Wrong output\"\nassert     is_Sub_Array([1,2], [1]) == True, \"Wrong output\"\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(\"Check for is_Sub_Array: PASS\") \n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef is_Sub_Array_using_dict(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) < len(B):\n        return False\n\n    if len(A) > len(B):\n        return True\n\n    else:\n        c = 0\n        d = 0\n        a = {}\n\n        while c < len(B):\n            if A[c] not in a:\n                a[A[c]] = 1\n            else:\n                a[A[c]] += 1\n            c += 1\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    last_Digit_Factorial(4) == 4\n    last_Digit_Factorial(1) == 1\n    last_Digit_Factorial(9) == 9\n\n\ndef last_Digit_Loop(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    pass\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef sum_of_n_Factorials(n):\n    '''\n    Write a python function to find the sum of factorial of a given numbers.\n    '''\n    pass\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     last_Digit_Factorial(120) == 1\nassert     last_Digit_Factorial(9) == 1\nassert     last_Digit_Factorial(15) == 0\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     last_Digit_Factorial(14) == 3,'should be 3'\nassert     last_Digit_Factorial(15) == 4,'should be 4'\nassert     last_Digit_Factorial(16) == 1,'should be 1'\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    last_Digit_Factorial(5) == 5\nassert last_Digit_Factorial(2) == 1\nassert last_Digit_Factorial(1234) == 2\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     last_Digit_Factorial(100) == 5\nassert     last_Digit_Factorial(120) == 5\nassert     last_Digit_Factorial(1000) == 6\nassert     last_Digit_Factorial(30000) == 1\nassert     last_Digit_Factorial(1110010) == 1\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     last_Digit_Factorial(2) == 0, \"incorrect last_Digit_Factorial\"\nassert     last_Digit_Factorial(3) == 1, \"incorrect last_Digit_Factorial\"\nassert     last_Digit_Factorial(4) == 2, \"incorrect last_Digit_Factorial\"\nassert     last_Digit_Factorial(9) == 1, \"incorrect last_Digit_Factorial\"\nassert     last_Digit_Factorial(10) == 0, \"incorrect last_Digit_Factorial\"\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     last_Digit_Factorial(1) == 0, \"1th digit of 1 is 0\"\nassert     last_Digit_Factorial(2) == 0, \"2th digit of 1 is 0\"\nassert     last_Digit_Factorial(3) == 1, \"3th digit of 1 is 1\"\nassert     last_Digit_Factorial(4) == 1, \"4th digit of 1 is 1\"\nassert     last_Digit_Factorial(5) == 0, \"5th digit of 1 is 0\"\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     last_Digit_Factorial(1) == 0, 'Wrong'\nassert     last_Digit_Factorial(8) == 7, 'Wrong'\nassert     last_Digit_Factorial(7) == 1, 'Wrong'\nassert     last_Digit_Factorial(12) == 1, 'Wrong'\nassert     last_Digit_Factorial(30) == 8, 'Wrong'\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     interleave_lists([1,2,3,4],['a','b','c','d'],['e','f','g','h']) == ['e','a','b','f','c','d','g','h']\nassert     interleave_lists(['a','b','c','d'],[1,2,3,4],['e','f','g','h']) == ['a','e','b','f','c','d','g','h']\nassert     interleave_lists([1,2,3],['a','b','c'],['d','e','f','g','h']) == ['d','a','b','d','e','f','c','g','h']\nassert     interleave_lists([1,2,3],['a','b','c'],['e','f','g','h']) == ['a','e','b','d','a','f','c','d','e','g','h','c','d','e','f','g','h']\nassert     interleave_lists([1,2,3],['a','b','c'],['e','f','g','h']) == ['a','e','b','d','a','f','c','d','e','g','h','c','d','e','f','g','h']\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef interleave_lists_2(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    pass\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     interleave_lists([1,2,3,4], [5,6,7,8], [9,10,11,12]) == [1,5,9,2,6,10,3,7,11,4,8,12]\nassert     interleave_lists([2,3,4], [5,6,7], [8,9,10]) == [2,5,8,3,6,9,4,7,10]\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     interleave_lists([\"this\",\"is\",\"a\"],\"long\",\"list\") == [\"this\",\"is\",\"a\",\"long\"]\nassert     interleave_lists([\"this\",\"is\",\"a\"],\"long\",\"list\") == [\"long\",\"this\",\"is\"]\nassert     interleave_lists([\"this\",\"is\",\"a\"],\"long\",\"list\") == [\"long\",\"this\",\"is\"]\nassert     interleave_lists([\"this\",\"is\",\"a\"],\"long\",\"list\") == [\"long\",\"this\",\"is\"]\nassert     interleave_lists([\"this\",\"is\",\"a\"],\"long\",\"list\") == [\"long\",\"this\",\"is\"]\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     interleave_lists(list1,list2,list3) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299]\nassert interleave_lists(list3,list3,list3) == [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299]\nassert interleave_lists(list3,list3,list3) == [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299]\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]\nassert     interleave_lists(['a','b','c'],[4,5,6],[7,8,9]) == ['a',4,7,'b',5,8,'c',6,9]\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]\n\n'''\nGiven two strings s1 and s2, each of length n, \nwrite a function to determine if s2 is an interleaving of s1 and s2, \nwhere interleaving is the word substitution of the two strings.\n'''\ndef word_substitution(s1,s2):\n    '''\n    Given two strings s1 and s2, each of length n, \n    write a function to determine if s2 is an interleaving of s1 and s2, \n    where interleaving is the word substitution of the two strings.\n    '''\n    pass\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     interleave_lists([], [], []) == []\nassert     interleave_lists([0], [], []) == []\nassert     interleave_lists([], [0], []) == []\nassert     interleave_lists([], [], [0]) == []"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     interleave_lists([1,2,3],[4,5,6],[7,8,9]) == [1,4,7,2,5,8,3,6,9]\nassert     interleave_lists([],None,[]) == []\nassert     interleave_lists([1,2,3],None,None) == None\nassert     interleave_lists([],None,[1,2,3]) == None\nassert     interleave_lists([1,2,3],None,None) == None\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert interleave_lists([1,2,3],[\"a\",\"b\",\"c\"],[\"d\",\"e\",\"f\"]) == [\"1\", \"2\", \"3\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n\ndef find_missing_number(nums):\n    '''\n    Write a function to find a missing number in a list of sorted integers in one pass.\n    '''\n    pass\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_dissimilar((1, 2, 3, 5, 6), (10, 5, 2, 4)) == [2, 5]\nassert     find_dissimilar((1, 2, 3, 5, 6), (10, 5, 2, 4, 7)) == [2, 5]\nassert     find_dissimilar((1, 2, 3, 5, 6), (10, 5, 2, 4, 7, 8)) == [2, 5]"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_dissimilar(('a','b','c'),('a','b','c')) == ()\nassert     find_dissimilar(('a','b','c'),('a','b','c','d')) == ('c','d')\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_dissimilar((1,2,4), (2,4,8)) == 3\nassert     find_dissimilar((5,6,8), (5,4,8)) == 1\nassert     find_dissimilar((2,3,5), (7,8,9)) == 2\nassert     find_dissimilar((0,2,3), (0,1,2)) == 1\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_dissimilar((1, 2), (2, 1)) == (1, 2), \"Wrong answer\"\nassert     find_dissimilar((1, 2, 3), (2, 1, 3)) == (1, 2), \"Wrong answer\"\nprint('Correct')\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_dissimilar(test_tup1, test_tup2) == \n        [['a'], ['b', 'c'], ['d'], ['f'], ['g'], ['h']]\nassert     find_dissimilar(test_tup2, test_tup1) == \n        [[], ['b', 'c'], ['d'], ['f'], ['g'], ['h']]\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_dissimilar((1,2,3), (2,3,1)) == (1,2,3), \"Should be: (1,2,3)\"\nassert     find_dissimilar((1,2,3), (2,3,4)) == (1,2,3), \"Should be: (1,2,3)\"\nassert     find_dissimilar((1,2,3), (2,3,4,5)) == (1,2,3), \"Should be: (1,2,3)\"\nassert     find_dissimilar((1,2,3), (2,3,4,5,6)) == (1,2,3), \"Should be: (1,2,3)\"\nassert     find_dissimilar((1,2,3), (2,3,4,5,6,7)) == (1,2,3), \"Should be: (1,2,3)\"\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_dissimilar((1,2,3,4,5,6),(2,3,7,8,9,0)) == (3,5,6)\nassert find_dissimilar((2,3,5,6,9,0),(2,3,4,5,6,7)) == (5,6,9)\nassert find_dissimilar((1,2,3,4,5,6),(7,8,9,0)) == (1,2,3)\nassert find_dissimilar((2,3,5,6,9,0),(1,2,3,4,5,7)) == (1,2,3)\nassert find_dissimilar((1,2,3,4,5,6),(1,2,3,7,8,9)) == (1,2,3)\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_dissimilar((1,2,3),(2,3,4)) == 1\nassert     find_dissimilar((1,2,3),(2,3,4)) == -1\nassert     find_dissimilar((1,2,3),(2,3,4,5)) == 2\nassert     find_dissimilar((1,2,3),(2,3,4,5,6)) == -1\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nif __name__ == '__main__':\n    for _ in range(int(input())):\n        tup1 = tuple(map(int, input().split()))\n        tup2 = tuple(map(int, input().split()))\n        result = find_dissimilar(tup1, tup2)\n        print(result)"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_dissimilar(('red', 'blue'), ('green', 'white')) == ('black',)\nassert     find_dissimilar(('blue', 'white'), ('green','red')) == ('black',)\nassert     find_dissimilar(('red', 'white'), ('blue', 'black')) == ('red',)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nif __name__ == '__main__':\n    test_tuple = (1, 'a', (2, 3), ('a', 'b'), ('a', 2), ['a', 2], {1, 'a'}, 'a')\n    even_fnc = lambda x: x % 2 == 0\n    even_ele(test_tuple, even_fnc)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \neven_ele(\n    ((), 1, 2, 3),\n    lambda x: x%2 == 0) == ((),)\nassert\neven_ele(\n    (((), 1), (2,), (3,)),\n    lambda x: x%2 == 0) == (((), 1), (2,), (3,))\nassert\neven_ele(\n    ((), (1,), (2,), (3,)),\n    lambda x: x%2 == 0) == ((), (1,), (2,), (3,))\nassert \neven_ele(\n    (((), 1), (2,), (3,)),\n    lambda x: x%2 == 0) == ((), 1, (2,), (3,))\nassert \neven_ele(\n    (((), 1), (2,), (3,)),\n    lambda x: x%2 == 0) == ((), 1, (2,), (3,))\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     even_ele(('even',(1,2,3,4),'even'), even_fnc) ==  (1,2,3,4)\nassert     even_ele(('even',(1,2,3,4),'odd'), even_fnc) ==  (1,2,3,4,5,6)\nassert     even_ele(('even',(1,2,3,4),'odd'), even_fnc) ==  (1,2,3,4)\nassert     even_ele(('even',(1,2,3,4),'odd'), even_fnc) ==  (1,2,3,4)\n\ndef even_count(test_tuple, even_count):\n    '''\n    Write a function to count the even elements in the nested mixed tuple.\n    '''\n    pass\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    even_ele(('even', (1,2), ('odd','more')), even_fnc) == ('even', (1,2), ('odd','more'))\n    even_ele(('even', (1,2), ('odd','more')), even_fnc) == ('even', (1,2), ('odd','more'))\n    even_ele(('even', (1,2), ('odd','more')), even_fnc) == ('even', (1,2), ('odd','more'))\n    even_ele(('even', (1,2), ('odd','more')), even_fnc) == ('even', (1,2), ('odd','more'))\n    even_ele(('even', (1,2, 3), ('odd','more')), even_fnc) == ('even', (1,2,3), ('odd','more'))\n    even_ele(('even', (1,2, 3), ('odd','more')), even_fnc) == ('even', (1,2,3), ('odd','more'))\n    even_ele(('even', (1,2, 3), ('odd','more')), even_fnc) == ('even', (1,2,3), ('odd','more'))\n    even_ele(('even', (1,2, 3), ('odd','more')), even_fnc) == ('even', (1,2,3), ('odd','more'))\n    even_ele(('even', (1,2, 3), ('odd','more')), even_fnc) == ('even', (1,2,3), ('odd','more'))\n    even_ele(('even', (1,2, 3), ('odd','more')), even_fnc) == ('even', (1,2,3), ('odd','more'))\n    even_ele(('even', (1,2, 3), ('odd','more')), even_fnc) == ('even', (1,2,3), ('odd','more'))\n    even_ele(('even', (1,2, 3), ('odd','more')), even_fnc) == ('even', (1,2,3), ('odd','more'))\n    even_ele(('even', (1,2, 3), ('odd','more')), even_fnc) == ('even', (1,2,3), ('odd','more'))\n    even_ele(('even', (1,2, 3), ('odd','more')), even_fnc) == ('even', (1,2,3), ('odd','more'))\n    even_ele(('even', (1,2, 3), ('odd','more')), even_fnc) == ('even', (1,2,3), ('odd','more'))\n    even_ele(('even', (1,2, 3), ('odd','more')), even_fnc) == ('even', (1,2,3), ('odd','more'))\n    even_ele(('even', (1,2, 3), ('odd','more')), even_fnc) == ('even', (1,2,3), ('odd','more'))\n    even_ele(('even', (1,2, 3), ('odd','more')), even_fnc) == ('even', (1,2,3), ('odd','more'))\n    even_ele(('even', (1,2, 3), ('odd','more')), even_fnc) == ('even', (1,2,3), ('odd','more'))\n    even_ele(('even', (1,2, 3), ('odd','more')), even_fnc) == ('even', (1,2,3), ('odd','more'))\n    even_ele(('even', (1,2, 3), ('odd','more')), even_fnc) == ('even', (1,2,3), ('odd','more'))\n    even_ele(('even', (1,2, 3), ('odd','more')), even_fnc) == ('even', (1,2,3), ('odd','more'))\n    even_ele(('even', (1,2, 3), ('odd','more')), even_fnc) == ('even', (1,2,3), ('odd','more'))\n    even_ele(('even', (1,2, 3), ('odd','more')), even_fnc) == ('even', (1,2,3), ('odd','more'))\n    even_ele(('even', (1,2, 3), ('odd','more')), even_fnc) == ('even', (1,2,3), ('odd','more'))\n    even_ele(('even', (1,2, 3), ('odd','more')), even_fnc) == ('even', (1,2,3), ('odd','more'))\n    even_ele(('even', (1,2, 3), ('odd','more')), even_fnc) == ('even', (1,2,3), ('odd','more'))\n    even_ele(('even', (1,2, 3), ('odd','more')), even_fnc) == ('even', (1,2,3), ('odd','more'))\n    even_ele(('even', (1,2, 3), ('odd','more')), even_fnc) == ('even', (1,2,3), ('odd','more'))\n    even_ele(('even', (1,2, 3), ('odd','more')), even_fnc) == ('even', (1,2,3), ('odd','more'))\n    even_ele(('even', (1,2, 3), ('odd','more')), even_fnc) == ('even', (1,2,3), ('odd','more'))\n    even_ele(('even', (1,2, 3), ('odd','more')), even_fnc) == ('even', (1,2,3), ('odd','more'))\n    even_ele(('even', (1,2, 3), ('odd','more')), even_fnc) == ('even', (1,2,3), ('odd','more'))\n    even_ele(('even', (1,2, 3), ('odd','more')), even_fnc) == ('even', (1,2,3), ('odd','more'))\n    even_ele(('even', (1,2, 3), ('odd','more')), even_fnc) == ('even', (1,2,3), ('odd','more'))\n    even_ele(('even', (1,2, 3), ('odd','more')), even_fnc) == ('even', (1,2,3), ('odd','more'))\n    even_ele(('even', (1,2, 3), ('odd','more')), even_fnc) == ('even', (1,2,3), ('odd','more'))\n    even_ele(('even', (1,2, 3), ('odd','more')), even_fnc) == ('even', (1,2,3), ('odd','more'))\n    even_ele(('even', (1,2, 3), ('odd','more')), even_fnc) == ('even', (1,2,3), ('odd','more'))\n    even_ele(('even', (1,2, 3), ('odd','more')), even_fnc) == ('even', (1,2,3), ('odd','more'))\n    even_ele(('even', (1,2, 3), ('odd','more')), even_fnc) == ('even', (1,2,3), ('odd','more'))\n    even_ele(('even', (1,2, 3), ('odd','more')), even_fnc) == ('even', (1,2,3), ('odd','more'))\n    even_ele(('even', (1,2, 3), ('odd','more')), even_fnc) == ('even', (1,2,3), ('odd','more'))\n    even_ele(('even', (1,2, 3), ('odd','more')), even_fnc) == ('eve"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \neven_ele((1,2,3,4,5,6), lambda x: x%2 == 0) == ((1,2,3),(4,5,6))\nassert \neven_ele((1,2,3,4,5,6), lambda x: x%2 == 0) == ((1,2,3),(4,5,6))\nassert \neven_ele((1,2,3,4,5,6), lambda x: x%2 == 0) == ((1,2,3),(4,5,6))\nassert \neven_ele((1,2,3,4,5,6,7), lambda x: x%2 == 0) == ((1,2,3,4),(5,6,7))\nassert \neven_ele((1,2,3,4,5,6), lambda x: x%2 == 0) == ((1,2,3,4),(5,6))\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     even_ele(((1,2),(3,4,5),(6,7,8,9,10)), \n                    even_fnc) == (1,2,3,4,5,6,7,8,9,10)\nassert     even_ele((1,2,3,4,5,6,7,8,9,10), \n                    even_fnc) == (1,2,3,4,5,6,7,8,9,10)\nassert     even_ele(((1,2,3),(4,5,6)), \n                    even_fnc) == (1,2,3,4,5,6)\nassert     even_ele((1,2,3), \n                    even_fnc) == (1,2,3)\nassert     even_ele((), \n                    even_fnc) == ()\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \neven_ele((1,2,3,4,5,6), lambda x: x % 2 == 0) == (2, 4, 6)\nassert even_ele((1,2,3,4,5,6), lambda x: x % 2 == 1) == (1, 3, 5)\nassert even_ele((1,2,3,4,5,6,7,8,9), lambda x: x % 2 == 1) == (1, 3, 5, 7, 9)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     surface_Area(10,10) == 50, \"incorrect\"\nassert     surface_Area(1,3) == 9, \"incorrect\"\nassert     surface_Area(1,1) == 4, \"incorrect\"\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     surface_Area(3,4) == 20\nassert surface_Area(3,8) == 43\nassert surface_Area(10,1) == 148\nassert surface_Area(12,6) == 180\nassert surface_Area(8,8) == 144\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     surface_Area(1,1) == 4, 'TEST ERROR: surface_Area(1,1)'\nassert     surface_Area(2,2) == 12, 'TEST ERROR: surface_Area(2,2)'\nassert     surface_Area(3,3) == 36, 'TEST ERROR: surface_Area(3,3)'\nassert     surface_Area(4,4) == 64, 'TEST ERROR: surface_Area(4,4)'\nassert     surface_Area(5,5) == 100, 'TEST ERROR: surface_Area(5,5)'\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     surface_Area(1,1) == 4\nassert     surface_Area(2,1) == 6\nassert     surface_Area(1,2) == 8\nassert     surface_Area(1.5,1) == 6\nassert     surface_Area(3,4) == 48\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nsurface_Area(4,5) == 40\nassert surface_Area(5,3) == 20\nassert surface_Area(1,5) == 5\nprint(\"Hurray! All tests are passed.\")\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     surface_Area(5,5) == 50\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     surface_Area(4,5) == 10.0\nassert     surface_Area(5,5) == 20.0\nassert     surface_Area(3,4) == 14.0\nassert     surface_Area(2,2) == 16.0\nassert     surface_Area(1,1) == 4.0\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     my_dict({}) == True\nassert     my_dict({1:2,3:4}) == False\nassert     my_dict({1:2}) == True\nassert     my_dict({2:1,3:2}) == False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     my_dict({}) == True, \"my_dict: ERROR\"\nassert my_dict({}) == False, \"my_dict: ERROR\""
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     my_dict({\"foo\":1, \"bar\":2}) == False, \"Error - 'foo' exists\"\nassert     my_dict({\"foo\":1, \"bar\":2, \"spam\":3}) == True, \"Error -'spam' does not exists\"\nassert     my_dict({\"foo\":1, \"bar\":2, \"spam\":3, \"baz\":4}) == False, \"Error - 'baz' exists\"\nassert     my_dict({}) == True, \"Error - empty dictionary\"\nassert     my_dict({}) == False, \"Error - empty dictionary\"\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     my_dict({1:2,3:4,5:6}) == True, \"Should be True\"\nassert     my_dict({}) == True, \"Should be True\"\nassert     my_dict({1:2,3:4,4:4}) == False, \"Should be False\""
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     my_dict(dict1) == False\n\ndef my_func(arg1, arg2):\n    '''\n    Write a function to add 'hello' to the string 'hello there'.\n    '''\n    return str(arg1 +'' + arg2 +'hello')\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     my_dict({})    == False\nassert     my_dict({'a':1,'b':2,'c':3})    == True\nassert     my_dict(True)    == False"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     my_dict(dict1={}) == False\nassert     my_dict(dict1={'a': 1}) == True\n\nprint('Success: my_dict')\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     my_dict({})     == True\nassert     my_dict({'a': 1, 'b': 2, 'c': 3})     == False\n\n'''\nQ3. Write a function that takes a list and returns a list of the\nunique values in the list.\n'''\n\ndef unique_values(lst):\n    '''\n    Write a function that takes a list and returns a list of the\n    unique values in the list.\n    '''\n    pass\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     my_dict({}) == False, \"Your my_dict function is not correct\"\nassert     my_dict({\"one\": \"I'm one\", \"two\": \"I'm two\"}) == True, \"Your my_dict function is not correct\"\nassert     my_dict({\"one\": \"I'm one\", \"two\": \"I'm two\", \"three\": \"I'm three\"}) == False, \"Your my_dict function is not correct\"\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     my_dict({}) == False, \"The function my_dict should return True for an empty dictionary\"\nassert     my_dict({1:1}) == True, \"The function my_dict should return True for a dictionary that has 1 as a key and its value is 1\"\nassert     my_dict({'a':1}) == True, \"The function my_dict should return True for a dictionary that has a key and its value is 1\"\nassert     my_dict(1) == False, \"The function my_dict should return False for a dictionary that has a key and its value is 1\"\nassert     my_dict(1,1) == True, \"The function my_dict should return True for a dictionary that has a key and its value is 1\"\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     catalan_number(0) == 0\nassert     catalan_number(1) == 1\nassert     catalan_number(2) == 2\nassert     catalan_number(3) == 5\nassert     catalan_number(4) == 14\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     catalan_number(0) == 1\nassert     catalan_number(1) == 1\nassert     catalan_number(2) == 2\nassert     catalan_number(3) == 3\nassert     catalan_number(4) == 8\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    catalan_number(1) == 2\n    catalan_number(2) == 5\n    catalan_number(3) == 14\n    catalan_number(4) == 24\n    catalan_number(5) == 42\n    catalan_number(6) == 132\n    catalan_number(7) == 224\n    catalan_number(8) == 496\n    catalan_number(9) == 990\n    catalan_number(10) == 1920\n    catalan_number(11) == 3728\n    catalan_number(12) == 8208\n    catalan_number(13) == 18144\n    catalan_number(14) == 38400\n    catalan_number(15) == 7680\n    catalan_number(16) == 181808\n    catalan_number(17) == 362880\n    catalan_number(18) == 76560\n    catalan_number(19) == 171904\n    catalan_number(20) == 3628800\n    catalan_number(21) == 765600\n    catalan_number(22) == 18180800\n    catalan_number(23) == 36288002"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     catalan_number(0) == 1\nassert     catalan_number(1) == 1\nassert     catalan_number(2) == 2\nassert     catalan_number(3) == 5\nassert     catalan_number(4) == 14\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     catalan_number(0) == 1\nassert     catalan_number(1) == 1\nassert     catalan_number(2) == 2\nassert     catalan_number(3) == 3\nassert     catalan_number(4) == 8\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     catalan_number(0) == 0\nassert     catalan_number(1) == 1\nassert     catalan_number(2) == 2\nassert     catalan_number(3) == 4\nassert     catalan_number(4) == 6\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     catalan_number(1) == 1\nassert     catalan_number(2) == 1\nassert     catalan_number(3) == 2\nassert     catalan_number(4) == 5\nassert     catalan_number(5) == 14\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     catalan_number(4) ==     3, 'catalan_number: wrong'\nassert     catalan_number(1) ==     1, 'catalan_number: wrong'\nassert     catalan_number(5) ==     24, 'catalan_number: wrong'\n\ndef catalan_number_recursive(num):\n    '''\n    Write a function which returns nth catalan number using recursion.\n    '''\n    pass\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     catalan_number(0) == 1\nassert     catalan_number(1) == 1\nassert     catalan_number(2) == 2\nassert     catalan_number(3) == 4\nassert     catalan_number(4) == 7\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     catalan_number(1) == 1\nassert     catalan_number(2) == 1\nassert     catalan_number(3) == 2\nassert     catalan_number(4) == 2\nassert     catalan_number(5) == 5\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_adverbs(\"I will go to the store. The store is located at 1,1.\") == (1, 3)\nassert     find_adverbs(\"What is the weather like in hell?\") == (9, 14)\nassert     find_adverbs(\"What is the weather like in hell?\") == (9, 14)\nassert     find_adverbs(\"What is the weather like in hell?\") == (9, 14)\nassert     find_adverbs(\"What is the weather like in hell?\") == (9, 14)\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert "
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_adverbs(\"The first night of a long day is the first day of a rest.\" ) == {'first_ly': 0,'rest': 1}\nassert     find_adverbs(\"Night before the rain is the last night of a long day. As a result, the first night of a day is the first night of a rest.\" ) == {'first_ly': 0,'rest': 1}\nassert     find_adverbs(\"First night of the day is the first night of the rest.\" ) == {'first_ly': 0,'rest': 1}\nassert     find_adverbs(\"Night before the rain is the last night of a long day.\") == {}\nassert     find_adverbs(\"First night of the day is the first night of the rest.\") == {}\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef main():\n    print(find_adverbs('''\n    on this day I was at a meeting with my friend, and my boss. \n    I told him, \"I have a good reason to be in class now.\"\n    I was not scared so much that I was excited to be at my class.\n    When I was in class, I got a good deal and understood what you were talking about and how it would affect me.\n    I was so excited to be at my class. I also was sure that you and I were in a good mood today.\n    I was sure that I could make progress and was grateful to hear what you were talking about.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good mood today.\n    I was so excited to be at my class. I was sure that you and I were in a good moo"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_adverbs(\"A cat is a soft cat. But a dog is a hard dog. A lion is a hard lion. A lion is a soft lion. A lion is a soft cat.\") == {'ly': [[4, 6], [9, 13]]}\nassert     find_adverbs(\"A cat is a soft cat. But a dog is a hard dog. A lion is a hard lion. A lion is a soft lion. A lion is a soft cat.\") == {'ly': [[4, 6], [9, 13]]}\nassert     find_adverbs(\"A cat is a soft cat. But a dog is a hard dog. A lion is a hard lion. A lion is a soft lion. A lion is a soft cat.\") == {}\nassert     find_adverbs(\"A cat is a soft cat. But a dog is a hard dog. A lion is a hard lion. A lion is a soft lion. A lion is a soft cat.\") == {}\nassert     find_adverbs(\"A cat is a soft cat. But a dog is a hard dog. A lion is a hard lion. A lion is a soft lion. A lion is a soft cat.\") == {}\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_adverbs('this is a string with a ly ending word') == None, \\\n        'incorrect'\nassert     find_adverbs('this is a string with a ly ending word and another') == None, \\\n        'incorrect'\nassert     find_adverbs('this is a string with ly ending word and a long ending word') == None, \\\n        'incorrect'\nassert     find_adverbs('this is a string with ly ending word and another long ending word') == None, \\\n        'incorrect'\nassert     find_adverbs('this is a ly ending word') == None, \\\n        'incorrect'\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_adverbs(\"Rasing my head to the wind is a great idea. I fell asleep. She smiled.\") == {'rasing': 0, 'head': 14, 'to': 18, 'wind': 24,'she': 34}\n\ndef find_nouns(text):\n    '''\n    Write a function to find the first noun, or whatever you want, ending with a _, and its positions in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_adverbs(\n    '''\n    He took a very cold day. It was cold. And the coldness in the day. It was very cold.\n    ''') == ['cold', 'day']\n\nassert     find_adverbs(\n    '''\n    The day was a good day. The day was not a bad day.\n    ''') == ['', '']\n\nassert     find_adverbs(\n    '''\n    Did you come to this hotel using a smartphone? It is very comfortable.\n    ''') == ['', '']\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nfind_adverbs('This is a sentence.') == None\nfind_adverbs('This is a sentence. The next sentence.') == None\nfind_adverbs('This is a sentence. The next sentence. And the last one.') == (5, 8)\nfind_adverbs('This is a sentence. The next sentence. And the last one.') == (7, 12)\n\ndef find_noun_phrases(text):\n    '''\n    Write a function that returns the first noun phrase in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_adverbs('') == []\nassert     find_adverbs('He said that \"Lyingly\" is a good way to get a new a friend.\")') == []\nassert     find_adverbs('I can feel it right now, I am not prepared to hear you speak in this voice.') == []\nassert     find_adverbs('He said that \"All the best\" is to be able to hear you speak in this voice.') == ['all']\nassert     find_adverbs('He said that \"Lyingly\" is a good way to get a new a friend.\")') == ['lyingly', 'ly']\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     expensive_items([(\"item1\",1),(\"item2\",4),(\"item3\",8),(\"item4\",10),(\"item5\",20)],3) == \\\n    [\"item5\", \"item4\", \"item3\"]\nassert     expensive_items([(\"item1\",3),(\"item2\",4),(\"item3\",1),(\"item4\",5),(\"item5\",2),(\"item6\",6),(\"item7\",8),(\"item8\",9),(\"item9\",10),(\"item10\",4)],4) == \\\n    [\"item7\", \"item6\", \"item5\", \"item4\"]\nassert     expensive_items([(\"item1\",3),(\"item2\",4),(\"item3\",1),(\"item4\",5),(\"item5\",2),(\"item6\",6),(\"item7\",8),(\"item8\",9),(\"item9\",10),(\"item10\",4)],10) == \\\n    [\"item2\", \"item1\", \"item3\", \"item4\", \"item5\", \"item6\", \"item7\", \"item8\", \"item9\", \"item10\"]\nassert     expensive_items([(\"item1\",3),(\"item2\",4),(\"item3\",1),(\"item4\",5),(\"item5\",2),(\"item6\",6),(\"item7\",8),(\"item8\",9),(\"item9\",10),(\"item10\",4)],2) == \\\n    [\"item2\", \"item1\", \"item3\", \"item4\", \"item5\", \"item6\", \"item7\", \"item8\", \"item9\", \"item10\"]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     expensive_items([('chair', 150), ('pen', 5), ('desk', 170), ('lamp', 80), ('couch', 170)], 3) == ['lamp', 'couch', 'desk']\nassert     expensive_items([('chair', 150), ('pen', 5), ('desk', 170), ('lamp', 80), ('couch', 170)], 4) == ['couch', 'lamp', 'desk', 'chair']\nassert     expensive_items([('chair', 150), ('pen', 5), ('desk', 170), ('lamp', 80), ('couch', 170)], 5) == ['couch', 'lamp', 'desk', 'chair', 'pen']\nassert     expensive_items([('chair', 150), ('pen', 5), ('desk', 170), ('lamp', 80), ('couch', 170)], 6) == ['couch', 'lamp', 'desk', 'chair', 'pen', 'pen']\nassert     expensive_items([('chair', 150), ('pen', 5), ('desk', 170), ('lamp', 80), ('couch', 170)], 7) == ['couch', 'lamp', 'desk', 'chair', 'pen', 'pen', 'pen']\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nexpensive_items([1,2,3,5],2) == [2,3]\nexpensive_items([1,3,5,7],1) == [5]\nexpensive_items([1,2,3,5],4) == []\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     expensive_items([(3,2),(1,4),(5,3),(4,5),(5,3)],2) == [(4,5),(5,3)]\nassert expensive_items([(4,1),(3,8),(1,2),(5,4),(5,3)],3) == [(5,4),(4,1),(5,3)]\nassert expensive_items([(4,1),(3,8),(1,2),(5,4),(5,3)],0) == []\nassert expensive_items([(4,1),(3,8),(1,2),(5,4),(5,3)],5) == [(5,4),(5,3)]\nassert expensive_items([(4,1),(3,8),(1,2),(5,4),(5,3)],1) == [(5,4),(5,3)]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     expensive_items([(1, 2), (4, 5), (1, 3), (2, 4), (2, 2), (3, 4)], 2) == [(2, 4), (3, 4)]\n\ndef expensive_items_sorting(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # heapq module provides support for heaps\n    heap = []\n    for item in items:\n        heapq.heappush(heap,item)\n        if len(heap) > n:\n            heapq.heappop(heap)\n    return heap\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     expensive_items([\"AAABBB\",\"BBBBAA\",\"CCCCAA\",\"DDDDCC\"], 3) == [\"AAABBB\", \"BBBBAA\", \"CCCCAA\"]\nassert     expensive_items([\"BBAA\",\"DDDDCC\",\"AAABBB\",\"AABBBB\",\"DDDDCC\",\"CCCCAA\",\"DDDDCC\",\"BBBBBB\",\"BBBBBB\",\"BBBBBB\"], 6) ==  [\"AAABBB\", \"BBBBBB\"]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     expensive_items([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], 5) == [\"d\", \"g\", \"f\", \"e\", \"a\"]\nassert     expensive_items([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], 6) == [\"c\", \"b\", \"a\", \"d\", \"g\", \"e\"]\nassert     expensive_items([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], 1) == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]\n\ndef expensive_items_binary_search(items,n):\n    '''\n    Write a binary search to find the n most expensive items in a given dataset.\n    '''\n    pass\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     expensive_items([{\"item\": \"r01\", \"price\": 12}, {\"item\": \"r02\", \"price\": 5}, {\"item\": \"r03\", \"price\": 5}, {\"item\": \"r04\", \"price\": 5}, {\"item\": \"r07\", \"price\": 12}], 3) == [{\"item\": \"r03\", \"price\": 5}, {\"item\": \"r04\", \"price\": 5}, {\"item\": \"r07\", \"price\": 12}]\nassert     expensive_items([{\"item\": \"r01\", \"price\": 12}, {\"item\": \"r02\", \"price\": 5}, {\"item\": \"r03\", \"price\": 5}, {\"item\": \"r04\", \"price\": 5}, {\"item\": \"r07\", \"price\": 12}], 2) == [{\"item\": \"r03\", \"price\": 5}, {\"item\": \"r07\", \"price\": 12}]\nassert     expensive_items([{\"item\": \"r01\", \"price\": 12}, {\"item\": \"r02\", \"price\": 5}, {\"item\": \"r03\", \"price\": 5}, {\"item\": \"r04\", \"price\": 5}, {\"item\": \"r07\", \"price\": 12}], 1) == [{\"item\": \"r01\", \"price\": 12}, {\"item\": \"r07\", \"price\": 12}]\nassert     expensive_items([{\"item\": \"r01\", \"price\": 12}, {\"item\": \"r02\", \"price\": 5}, {\"item\": \"r03\", \"price\": 5}, {\"item\": \"r04\", \"price\": 5}, {\"item\": \"r07\", \"price\": 12}], 0) == []\nassert     expensive_items([{\"item\": \"r01\", \"price\": 12}, {\"item\": \"r02\", \"price\": 5}, {\"item\": \"r03\", \"price\": 5}, {\"item\": \"r04\", \"price\": 5}, {\"item\": \"r07\", \"price\": 12}], -1) == []\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     expensive_items([('apple',5), ('cheese',4), ('carrot',10), ('milk',5), ('cookies',8)],2) == [('carrot',10),('cookies',8)]\nassert     expensive_items([('apple',5), ('cheese',4), ('carrot',10), ('milk',5), ('cookies',8)],1) == [('apple',5), ('carrot',10),('milk',5),('cookies',8)]\nassert     expensive_items([('apple',5), ('cheese',4), ('carrot',10), ('milk',5), ('cookies',8)],0) == [('cheese',4),('carrot',10),('milk',5)]\nassert expensive_items([('apple',5), ('cheese',4), ('carrot',10), ('milk',5), ('cookies',8)],0) == [('apple',5), ('carrot',10),('milk',5)]\nassert expensive_items([('apple',5), ('cheese',4), ('carrot',10), ('milk',5), ('cookies',8)],3) == [('carrot',10),('cookies',8),('milk',5)]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     split_Arr([\"Python\", \"is\", \"great\"], 2) == [['Python'], ['is', 'great']]\nassert     split_Arr([\"Python\", \"is\", \"great\"], 3) == [['Python', 'is'], ['great']]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     split_Arr([1,2,3,4,5,6,7], 3) ==    [[1,2,3],[4,5,6],[7]]\nassert     split_Arr([1,2,3,4,5,6,7,8,9,10], 5) ==    [[1,2,3,4],[5,6,7,8],[9,10]]\nassert     split_Arr([1,2,3,4,5,6,7,8,9,10], 3) ==    [[1,2,3],[4,5,6],[7,8,9,10]]\nassert     split_Arr([1,2,3,4,5,6,7,8,9,10], 0) ==    [[1,2,3,4,5,6,7,8,9,10]]\nassert     split_Arr([1,2,3,4,5,6,7,8,9,10], 1) ==    [[1],[2,3,4,5,6,7,8,9,10]]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert split_Arr([1, 2, 3, 4, 5, 6], 2) == [[1, 2], [3, 4, 5, 6]]\nassert split_Arr([1, 2, 3, 4, 5, 6], 3) == [[1, 2, 3], [4, 5, 6]]\nassert split_Arr([1, 2, 3, 4, 5, 6], 4) == [[1, 2], [3, 4], [5, 6]]\nassert split_Arr([1, 2, 3, 4, 5, 6], 5) == [[1, 2], [3, 4], [5], [6]]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef sum_list(l):\n    '''\n    Write a python function to add the elements of a list and return the sum.\n    '''\n    pass\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert not split_Arr([1, 2, 3, 4, 5], 4)\nassert not split_Arr([1, 2, 3, 4, 5], 3)\nassert not split_Arr([1, 2, 3, 4, 5], 2)\nassert split_Arr([1, 2, 3, 4, 5], 1)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     list_tuple([1,2,3]) == (1,2,3)     ,\"Wrong answer\"\nassert list_tuple([1,2,3]) == (1,2,3),\"Wrong answer\"\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     list_tuple([]) == (), \"No numbers to convert to tuple\"\nassert     list_tuple([3, 5]) == (), \"3,5 should be converted to ()\"\nassert     list_tuple([1, 2, 3, 4]) == (), \"1,2,3,4 should be converted to ()\"\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     list_tuple([1,2,3,4,5]) == (1,2,3,4,5), 'Failed'\nassert     list_tuple(['a','b','c']) == ('a','b','c'), 'Failed'\nassert     list_tuple(['a','b','c','d','e']) == ('a','b','c','d','e'), 'Failed'\nassert     list_tuple(range(1,11)) == tuple(range(1,11)), 'Failed'\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     list_tuple(['Luminous', 'Violet', 'Blue', 'Golden', 'Grey', 'Green']) == \\\n        ('Luminous', 'Violet', 'Blue', 'Golden', 'Grey', 'Green'), \\\n        'wrong'\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     list_tuple(listx) == tup\nprint(\"test 5 success\")\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef dict_keys(dictx):\n    '''\n    Write a function to get the dictionary keys.\n    '''\n    pass\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     list_tuple([1,2,3]) == (1,2,3)\n\ndef my_range(start, end, step=1):\n    '''\n    Write a function to create a list of numbers, starting at start, and ending at end, with stepsize step.\n    '''\n    pass\n\nassert     my_range(1, 3, 1) == [1, 2, 3]\n\ndef my_zip(x, y):\n    '''\n    Write a function that takes as inputs two iterables and returns an iterator that returns a zip object.\n    '''\n    pass\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     list_tuple([1,2,3,4]) == (1,2,3,4), \"WRONG!\"\nassert     list_tuple([1,2,3]) == (1,2,3), \"WRONG!\"\n\ndef list_tuple_demo(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     big_diff([2, 3, 8, 5, 4]) == 5\nassert     big_diff([-2, -3, -8, -5, -4]) == 8\nassert     big_diff([-1, -2, -5, -4, -3, -4]) == -7\nprint(\"Correct\")\n\ndef big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     big_diff([]) == 0, \"empty input\"\nassert     big_diff([3, 4]) == 3, \"one element\"\nassert     big_diff([3, 4, 5, 6]) == 0, \"sorted\"\nassert     big_diff([2, 1, 4, 7]) == 5, \"unsorted\"\n\ndef big_diff_2(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef print_full_name(a, b):\n    '''\n    Write a python function to print the full name of a given student.\n    Full Name = First Name + \" \" + Last Name.\n    '''\n    pass\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nbig_diff([-1, 2, -5]) == 2\nbig_diff([1, -10, 9]) == 11\nbig_diff([2, -9, -4, -1, 7]) == 14\nbig_diff([7, 2, 10, 1, -5, -3, -9]) == 15\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert (big_diff([10,3,5,6])) == 3\nassert (big_diff([10, 3, 5, 6])) == 3\nassert (big_diff([2, 4, -2, 1])) == 3\nassert (big_diff([-2, -4, 0, 1])) == 3\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     big_diff([1,2,3,4,6]) == 3, \"Error in the first number!\"\nassert     big_diff([-1,-2,-3,-4,6]) == 1, \"Error in the second number!\"\nassert     big_diff([0,0,0,0,0]) == 0, \"Error in the third number!\"\nassert     big_diff([-3,1,3,5,7]) == 5, \"Error in the fourth number!\"\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     big_diff([-1, -2, -3, -4]) == 4\nassert     big_diff([-99, -78, -1, -0, -102]) == 102\nassert     big_diff([-100, -1, -9, -99]) == -1\nassert     big_diff([-1, -1, -1, -1, -1]) == 0\nassert     big_diff([0, 0, 0, 0, 0]) == 0\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     perfect_squares(0, 0) == False\nassert     perfect_squares(4, 4) == True\nassert     perfect_squares(3, 3) == True\nassert     perfect_squares(4, 8) == False\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     perfect_squares(1, 1) == True, '1'\nassert perfect_squares(4, -4) == True, '-4'\nassert perfect_squares(1, 100) == False, '100'"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    perfect_squares(0, 0) == 0\n    perfect_squares(1, 0) == 1\n    perfect_squares(3, 4) == -1\n    perfect_squares(9, 16) == 16\n    perfect_squares(10, 16) == -1\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nprint(\"test case 1\")\nprint(perfect_squares(1, 10))\n\nassert perfect_squares(1, 10) == list(range(1,11))\n\nprint(\"\\n\\ntest case 2\")\nprint(perfect_squares(1, 100))\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     perfect_squares(1,1) == 1\nassert perfect_squares(4,16) == 4\nassert perfect_squares(13,27) == True\nassert perfect_squares(1,100) == False\nassert perfect_squares(-1,100) == False\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     perfect_squares(1, 4) == [1, 4], \"Wrong answer!\"\nassert     perfect_squares(100, 64) == [16, 25], \"Wrong answer!\"\nassert     perfect_squares(9, 12) == [9, 12], \"Wrong answer!\"\nprint(\"Correct!\")\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    c = a + b\n    return c - int(c**0.5)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert not polar_rect(0,0)\nassert polar_rect(0,1) == (0, 1, 0)\nassert polar_rect(1,0) == (1, 0, 0)\nassert polar_rect(0,0.5) == (0, 1, 0)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     polar_rect(0, 0) == (0, 0), \"x=0 and y=0 should be in the same circle\"\nassert     polar_rect(1, 0) == (0, 0), \"x=1 and y=0 should be in the same circle\"\nassert     polar_rect(0, 1) == (0, 0), \"x=0 and y=1 should be in the same circle\"\nassert     polar_rect(1, 1) == (0, 0), \"x=1 and y=1 should be in the same circle\"\nassert     polar_rect(0, 2) == (0, 0), \"x=0 and y=2 should be in the same circle\"\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \npolar_rect(2.0, 0.0) == (2.0, 0.0)\npolar_rect(1.0, 1.0) == (1.0, 1.0)\npolar_rect(1.0, 2.0) == (1.0, 1.0)\npolar_rect(0.0, 1.0) == (1.0, 0.0)\npolar_rect(0.0, 2.0) == (0.0, 1.0)\npolar_rect(1.5, 1.5) == (1.0, 1.0)\npolar_rect(-1.0, -1.0) == (1.0, -1.0)\npolar_rect(-1.5, -1.5) == (-1.0, -1.0)\npolar_rect(1.0, -1.0) == (-1.0, -1.0)\npolar_rect(1.5, -1.5) == (-1.0, 1.0)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     polar_rect(0,0) == (0, 0)\nassert     polar_rect(1,1) == (1, 1)\nassert     polar_rect(1,2) == (1, 1.414)\nassert     polar_rect(2,2) == (2, 2)\nassert     polar_rect(1,3) == (1, 1.414)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     polar_rect(1, 2) == (1, 2)\nassert     polar_rect(0.5, 1) == (0.5, 1)\nassert     polar_rect(1, 1) == (1, 1)\nassert     polar_rect(-2, 2) == (-2, 2)\nassert     polar_rect(2, 1) == (2, 1)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \npolar_rect(1,2) == (1,2)\nassert \npolar_rect(1,2.8) == (1,2.8)\nassert \npolar_rect(0.3,0.4) == (0.3,0.4)\nassert \npolar_rect(1.3,1.7) == (1.3,1.7)\nassert \npolar_rect(1.3,1.7) == (1.3,1.7)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n'''\nWrite a function that takes a rectangular coordinate as input and returns its polar coordinate as output.\n'''\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    pass\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     swap_List([1,2,3,4,5]) ==[5,1,2,3,4]\nassert     swap_List([1,2,3,4,5,6]) ==[5,6,1,2,3,4]\nassert     swap_List([1,2,3,4,5,6,7]) ==[5,6,7,1,2,3,4]\nassert     swap_List([1,2,3,4,5,6,7,8]) ==[5,6,7,8,1,2,3,4]\nassert     swap_List([1,2,3,4,5,6,7,8,9]) ==[5,6,7,8,9,1,2,3,4]\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nswap_List([1,2,3,4,5]) == [5,1,2,3,4]\nassert swap_List([1,2,3,4,5,6]) == [5,6,1,2,3,4]"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     swap_List([1,2,3,4,5,6,7]) == [7,1,2,3,4,5,6]\nassert     swap_List([1,2,3]) == [3,2,1]\nassert     swap_List([1]) == [1]\nassert     swap_List([]) == []\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nswap_List([1,2,3]) == [3,1,2],'swap_List failed'\nswap_List([1,2,3,4,5,6,7]) == [7,1,2,3,4,5,6],'swap_List failed'"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef Swap_List(list):\n    '''\n    Write a python function to swap the elements of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nswap_List([2,3,4,5]) == [5,4,3,2]\nassert \nswap_List([1,3,4,5]) == [4,5,1,3]\nassert \nswap_List([1,2,3,4]) == [4,3,2,1]\nassert \nswap_List([1,2,3,4,5]) == [5,4,3,2,1]\nassert \nswap_List([1,2,3,4,5,6]) == [6,5,4,3,2,1]\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     swap_List([1, 2, 3, 4, 5, 6, 7]) == [2, 1, 3, 4, 5, 6, 7], 'Test1 Failed'\nassert     swap_List([5, 4, 3, 2, 1, 7, 6]) == [5, 4, 3, 2, 1, 7, 6], 'Test2 Failed'\nassert     swap_List([2, 1, 3, 4, 5, 6, 7]) == [2, 1, 3, 4, 5, 6, 7], 'Test3 Failed'\nassert     swap_List([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8], 'Test4 Failed'\nassert     swap_List([]) == [], 'Test5 Failed'\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     binomial_Coeff(10,0) == 1\nassert     binomial_Coeff(0,10) == 0\nassert     binomial_Coeff(10,10) == 3628800\nassert     binomial_Coeff(10,0) == 1\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     binomial_Coeff(4,5) == 55\nassert     binomial_Coeff(4,4) == 14, \"passed wrong answer\"\nassert     binomial_Coeff(5,4) == 35, \"passed wrong answer\"\nassert     binomial_Coeff(5,5) == 38, \"passed wrong answer\"\nassert     binomial_Coeff(10,5) == 155, \"passed wrong answer\"\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef power(x, n): \n    '''\n    Write a python function to calculaten'th power of x.\n    '''\n    pass\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     binomial_Coeff(2,0)==1\nassert     binomial_Coeff(2,1)==1\nassert     binomial_Coeff(2,2)==2\nassert     binomial_Coeff(2,3)==3\nassert     binomial_Coeff(2,4)==6\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     binomial_Coeff(2,5) == 5, \"Wrong Answer\"\nassert     binomial_Coeff(1,1) == 1, \"Wrong Answer\"\nassert     binomial_Coeff(4,6) == 204, \"Wrong Answer\"\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     binomial_Coeff(2,1)==1\nassert     binomial_Coeff(2,2)==2\nassert     binomial_Coeff(5,3)==20\nassert binomial_Coeff(5,3)==20"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     binomial_Coeff(0,0) == 1, 'fails'\nassert     binomial_Coeff(1,1) == 1, 'fails'\nassert     binomial_Coeff(2,1) == 1, 'fails'\nassert     binomial_Coeff(2,2) == 1, 'fails'\nassert     binomial_Coeff(3,1) == 2, 'fails'\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     binomial_Coeff(0,0) == 1, 'function is not working as expected'\nassert binomial_Coeff(1,0) == 0, 'function is not working as expected'\nassert binomial_Coeff(2,0) == 1, 'function is not working as expected'\nassert binomial_Coeff(2,1) == 1, 'function is not working as expected'\nassert binomial_Coeff(2,2) == 2, 'function is not working as expected'\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     binomial_Coeff(20,4) == 0\nassert     binomial_Coeff(10,6) == 0\nassert     binomial_Coeff(11,10) == 1\nassert     binomial_Coeff(4,4) == 1\nassert     binomial_Coeff(1,1) == 1\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     removezero_ip('192.0.2.1') == '192.2.1.1'\nassert     removezero_ip('255.0.0.0') == '255.0.0.0'\nassert     removezero_ip('0.0.0.0') == '0.0.0.0'\nassert     removezero_ip('0.0.0.0') == '0.0.0.0'\nassert     removezero_ip('0.0.0.0') == '0.0.0.0'\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     removezero_ip(    '0.1.2.3')     == '1.2.3'\nassert     removezero_ip(    '0.1.2.3.4')     == '1.2.3.4'\nassert     removezero_ip(    '1.2.3.4.5')     == '1.2.3.4.5'\nassert     removezero_ip(    '1.2.3.4.5.6')     == '1.2.3.4.5.6'\nassert     removezero_ip(    '0.0.0.0')     == '0.0.0.0'\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert removezero_ip(\"255.0.0.0\") == \"255.0.0.0\"\nassert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\nassert removezero_ip(\"255.255.255.255\") == \"255.255.255.255\"\nassert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     removezero_ip('0.1.2.3') == '0.1.2.3', 'passed'\nassert     removezero_ip('0.1.2.3.4') == '0.1.2.3.4', 'failed'\n\ndef form(ip):\n    '''\n    Write a function that accepts an ip address as an argument,\n    and returns a string with the ip address in the form of\n    ipv6:<ipv6-prefix-len>.ipv6.\n    '''\n    pass\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     removezero_ip(\"0000.0000.0000.0000\") == \"0000.0000.0000.0000\"\nassert     removezero_ip(\"00.00.00.00\") == \"00.00.00.00\"\nassert     removezero_ip(\"00000000.00000000.00000000.00000000\") == \"00000000.00000000.00000000.00000000\"\nassert     removezero_ip(\"01.02.03.04\") == \"01.02.03.04\"\nassert     removezero_ip(\"01.02.03.04.05\") == \"01.02.03.04.05\"\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nremovezero_ip('0.1.2.3')\nremovezero_ip('0.1.2.3.4.5.6.7')\nremovezero_ip('0.1.2.3.4.5.6.7.8.9.10.11')\nremovezero_ip('0.1.2.3.4.5.6.7.8.9.10.11.12')\nremovezero_ip('0.1.2.3.4.5.6.7.8.9.10.11.12.13')\nremovezero_ip('0.1.2.3.4.5.6.7.8.9.10.11.12.13.14')\nremovezero_ip('0.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15')\nremovezero_ip('0.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16')\nremovezero_ip('0.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17')\nremovezero_ip('0.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18')\nremovezero_ip('0.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18.19')\nremovezero_ip('0.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18.19.20')\nremovezero_ip('0.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18.19.20.21')\nremovezero_ip('0.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18.19.20.21.22')\nremovezero_ip('0.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18.19.20.21.22.23')\nremovezero_ip('0.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18.19.20.21.22.23.24')\nremovezero_ip('0.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18.19.20.21.22.23.24.25')\nremovezero_ip('0.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18.19.20.21.22.23.24.25.26')\nremovezero_ip('0.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18.19.20.21.22.23.24.25.26.27')\nremovezero_ip('0.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18.19.20.21.22.23.24.25.26.27.28')\nremovezero_ip('0.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18.19.20.21.22.23.24.25.26.27.28.29')\nremovezero_ip('0.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18.19.20.21.22.23.24.25.26.27.28.29.30')\nremovezero_ip('0.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18.19.20.21.22.23.24.25.26.27.28.29.30.31')\nremovezero_ip('0.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18.19.20.21.22.23.24.25.26.27.28.29.30.31.32')\nremovezero_ip('0.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18.19.20.21.22.23.24.25.26.27.28.29.30.31.32.33')\nremovezero_ip('0.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18.19.20.21.22.23.24.25.26.27.28.29.30.31.32.33.34')\nremovezero_ip('0.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18.19.20.21.22.23.24.25.26.27.28.29.30.31.32.33.34.35')\nremovezero_ip('0.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18.19.20.21.22.23.24.25.26.27.28.29.30.31.32.33.34.35.36')\nremovezero_ip('0.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18.19.20.21.22.23.24.25.26.27.28.29.30.31.32.33.34.35.36.37')\nremovezero_ip('0.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18.19.20.21.22.23.24.25.26.27.28.29.30.31.32.33.34.35.36.37.38')\nremovezero_ip('0.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18.19.20.21.22.23.24.25.26.27.28.29.30.31.32.33.34.35.36.37.38.39')\nremovezero_ip('0.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18.19.20.21.22.23.24.25.26.27.28.29.30.31.32.33.34.35.36.37.38.39.40')\nremovezero_ip('0.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18.19.20.21.22.23.24.25.26.27.28.29.30.31.32.33.34.35.36.37.38.39.40.41')\nremovezero_ip('0.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18.19.20.21.22.23.24.25.26.27.28.29.30.31.32.33.34.35.36.37.38.39.40.41.42')\nremovezero_ip('"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     removezero_ip('0.1.2.3')    ==    '0.1.2.3'\nassert     removezero_ip('00.1.2.3')    ==    '00.1.2.3'\nassert     removezero_ip('010.1.2.3')    ==    '010.1.2.3'\nassert     removezero_ip('00.00.01.2')    ==    '00.00.01.2'\nassert     removezero_ip('0000.00.01.02')    ==    '0000.00.01.02'\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     removezero_ip('0000.0000.0000.0000')    == '0000.0000.0000.0000'\nassert     removezero_ip('0000.000000.0000.0000')    == '0000.0000.0000.0000'\nassert     removezero_ip('1.2.3.4')                == '1.2.3.4'\nassert     removezero_ip('1.2.3.4.5')                == '1.2.3.4.5'\nassert     removezero_ip('0.0.0.0.0.0.0')            == '0.0.0.0.0.0.0'\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     removezero_ip('2001.02.03.000') == '2001.02.03'\nassert     removezero_ip('2001.02.03.00') == '2001.02.03'\nassert     removezero_ip('2001.02.03.0') == '2001.02.03'\nassert     removezero_ip('2001.02.03') == '2001.02.03'\nassert     removezero_ip('0.0.0.0') == '0.0.0'\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     diff_even_odd([2,3,4,5]) == 4\nassert     diff_even_odd([3,3,5,6]) == 3\nassert     diff_even_odd([1,2,4,6]) == -2\nassert     diff_even_odd([1,2,3,5]) == -3\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     diff_even_odd([1,2,3,4]) == 0, \"Wrong Answer\"\nassert     diff_even_odd([1,2,3,4,5]) == 5, \"Wrong Answer\"\nassert     diff_even_odd([1,2,3,4,5,6]) == 5, \"Wrong Answer\"\nassert     diff_even_odd([1,2,3,4,5,6,7]) == 3, \"Wrong Answer\"\nassert     diff_even_odd([1,2,3,4,5,6,7,8]) == 3, \"Wrong Answer\"\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     diff_even_odd([1,2,3,4,5]) == 0, 'It should be 0'\nassert     diff_even_odd([3,4,5,6]) == 2, 'It should be 2'\nassert     diff_even_odd([1,2,3,4,5,6,7,8,9,10]) == -2, 'It should be -2'\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     diff_even_odd([1,2,3,4,5,6,7,8,9,10]) == 1, \"This should return 1\"\nassert     diff_even_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]) == -2, \"This should return -2\"\nassert     diff_even_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]) == 2, \"This should return 2\"\nassert     diff_even_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]) == 3, \"This should return 3\"\nassert     diff_even_odd([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]) == 0, \"This should return 0\"\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint(diff_even_odd([1,2,3,4,5]))"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n'''\nQ1) Given a list of ints, return True if the sum of any 2 numbers in the list equals the original list.\n    - example: if the list is [1, 2, 3, 4] return True, if it is equal to 1,2,3,4 return False\n    - the original list is not modified\n'''\n\ndef even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     min_Swaps('11','01') == 1, 'First assert statement failed'\nassert     min_Swaps('101','1') == 1, 'Second assert statement failed'\nassert     min_Swaps('110101','011110') == 1, 'Third assert statement failed'\nassert     min_Swaps('100101','011110') == 2, 'Fourth assert statement failed'\nassert     min_Swaps('0101','011110') == 2, 'Fifth assert statement failed'\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     min_Swaps(\"0110\",\"1011\") == 2\nassert min_Swaps(\"0110\",\"1010\") == 1\nassert min_Swaps(\"0000\",\"0001\") == 1\nassert min_Swaps(\"0000\",\"0000\") == 0\nassert min_Swaps(\"1101\",\"0000\") == 3\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint(min_Swaps(\"1101\",\"0111\"))"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     min_Swaps(\"010000\", \"010001\") == 1\nassert     min_Swaps(\"010000\", \"001000\") == 2\nassert     min_Swaps(\"010000\", \"000001\") == 2\nassert     min_Swaps(\"010000\", \"001000\") == 2\nassert     min_Swaps(\"010000\", \"001101\") == 3\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     min_Swaps(\"010\",\"011\") == 1\nassert     min_Swaps(\"1110\",\"0101\") == 3\nassert     min_Swaps(\"1111\",\"1111\") == 0"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef min_Swaps(str1,str2):\n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    pass\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     min_Swaps('00000101','11001101') == 2\nassert     min_Swaps('101010','110110') == 3\nassert     min_Swaps('111111','101111') == 5\nassert     min_Swaps('101001','011101') == 3\nassert     min_Swaps('100110','101010') == 3\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     min_Swaps('1010','1100') == 1\nassert     min_Swaps('1111','1101') == 3\nassert     min_Swaps('1111','1001') == 1\n\ndef string_to_binary(string):\n    '''\n    Write a function to convert given string to binary.\n    '''\n    pass\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tuple_size([1, 2, 3, 4, 5, 6]) == 18, \"Wrong size\"\nassert     tuple_size((1, 2, 3, 4, 5, 6)) == 18, \"Wrong size\"\nassert     tuple_size(\"abcde\") == 6, \"Wrong size\"\n\ndef tuple_front(tuple_list):\n    '''\n    Write a function to find the first element of the given tuple in the sorted order.\n    '''\n    pass\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef size_of_tuple(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef print_tuple(tuple_list):\n    '''\n    Write a function to print the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef tuple_sizes():\n    print(\"Testing: \", tuple_size([1,2,3,4]))\n    assert tuple_size([1,2,3,4]) == 8\n    print(\"Passed\")\n    print()\n\n    print(\"Testing: \", tuple_size((1,2,3,4)))\n    assert tuple_size((1,2,3,4)) == 8\n    print(\"Passed\")\n    print()\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tuple_size([1,2]) == 2\nassert     tuple_size((1,2)) == 2\nassert     tuple_size(()) == 0\nassert     tuple_size([]) == 0\nassert     tuple_size((1,2,3)) == 5\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tuple_size((1,2,3,4,5,6,7,8,9,10)) == 10*8\nassert tuple_size((1,2,3,4,5,6,7,8,9)) == 8*9*10\nassert tuple_size((1,2,3,4,5,6)) == 6*5*4\nassert tuple_size((1,2,3)) == 3*1*4\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nprint(tuple_size((1, 2, 3, 4, 5, 6, 7)))\n\ndef tuple_size_1(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    pass\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tuple_size([1,2,3,4]) == 8 \nassert tuple_size((1,2,3,4)) == 8\nassert tuple_size(('a',1,2,3)) == 8\nassert tuple_size((1,2,3,'a')) == 10\nassert tuple_size((1,2,3,'a','b','c','d','e','f','g','h','i','j')) == 16\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert tuple_size([1,2,3]) == 3\nassert tuple_size((1,2,3)) == 3\nassert tuple_size({\"a\":1,\"b\":2,\"c\":3}) == 3\nassert tuple_size({\"a\":1,\"b\":2,\"c\":3,4:5}) == 11\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef find_kth_min(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    pass\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    find_kth([1, 2], [3, 4, 5], 2) == 2\n    find_kth([1, 2], [3, 4, 5], 0) == 1\n    find_kth([1, 2], [3, 4, 5], 3) == 4\n\n\ndef find_kth_index(arr1, arr2, k):\n    '''\n    Write a function to find the kth index of the given array\n    '''\n    pass\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_kth([0, 1, 2, 3, 4, 5, 6],     [-10, -4, 0, 3, 5, 8, 9], 5) == 5, 'Wrong result for find_kth'\nassert     find_kth([0, 1, 2, 3, 4, 5, 6],     [-10, -4, 0, 3, 5, 8, 9], 1) == -10, 'Wrong result for find_kth'\nassert     find_kth([0, 1, 2, 3, 4, 5, 6],     [-10, -4, 0, 3, 5, 8, 9], 10) == 6, 'Wrong result for find_kth'\nassert     find_kth([0, 1, 2, 3, 4, 5, 6],     [-10, -4, 0, 3, 5, 8, 9], -1) == -1, 'Wrong result for find_kth'\nassert     find_kth([0, 1, 2, 3, 4, 5, 6],     [-10, -4, 0, 3, 5, 8, 9], 7) == -1, 'Wrong result for find_kth'\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_kth([1,2,3], [4,5,6], 2) == 2\nassert     find_kth([1,2,3], [1,4,5], 3) == 3\nassert     find_kth([1,2,3], [2,4,5], 3) == 3\nassert     find_kth([1,2,3], [1,4,5], 4) == 4\nassert     find_kth([1,2,3], [2,4,5], 5) == 5\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_kth([], [1,2,3], 1) == 1\nassert     find_kth([1,2,3], [], 1) == -1\nassert     find_kth([1,2,3], [2,3], 2) == 2\n\n'''\nTask\nRead two integer numbers from STDIN and print three lines where:\n\nThe first line contains the sum of the two numbers.\nThe second line contains the difference of the two numbers (first - second).\nThe third line contains the product of the two numbers.\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    \n    if not arr1:\n        return -1\n    \n    index1 = len(arr1) - 1\n    index2 = len(arr2) - 1\n    \n    while(index1 >= 0 and index2 >= 0):\n        if arr1[index1] == arr2[index2]:\n            return arr1[index1]\n        elif arr1[index1] > arr2[index2]:\n            index2 -= 1\n        else:\n            index1 -= 1\n    \n    if k == index1 + 1:\n        return arr1[index1]\n    return arr2[index2]\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_kth([1,2,3,4,5,6,7,8,9], [5,6,7,8,9,10,11,12,13,14], 9) == 5, \"Wrong\"\nassert     find_kth([1,2,3,4,5,6,7,8,9], [5,6,7,8,9,10,11,12,13,14], 15) == -1, \"Wrong\"\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_kth([1,5,6], [2,4,6,9,10], 2) == 5\nassert     find_kth([1,5,6], [2,4,6,9,10], 3) == 6\nassert     find_kth([1,5,6], [2,4,6,9,10], 0) == 2\nassert     find_kth([1,5,6], [2,4,6,9,10], 5) == 4\nassert     find_kth([1,5,6], [2,4,6,9,10], 6) == 9\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \narmstrong_number(153)\narmstrong_number(15321)\narmstrong_number(181818)\n\n'''\n    Exercise 3:\n    Write a function to check whether the given number is palindrome or not.\n    \n    The palindrome number is a number which reads the same back to the original number (starting with the most significant digit).\n    Note: Assume that 0 is not a palindrome and 1 is a palindrome.\n'''\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     armstrong_number(10) == True\nassert     armstrong_number(1234) == True\nassert     armstrong_number(96634) == True\nassert     armstrong_number(96434) == False\nassert     armstrong_number(1000) == True\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     armstrong_number(153) == True, \"The number 153 is not armstrong number.\"\nassert     armstrong_number(371) == True, \"The number 371 is not armstrong number.\"\nassert     armstrong_number(1234) == False, \"The number 1234 is armstrong number.\"\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     armstrong_number(10) == False\nassert     armstrong_number(153) == True\nassert     armstrong_number(371) == True\nassert     armstrong_number(1326) == True\nassert     armstrong_number(0) == False\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == '__main__':\n    number = int(input('Enter a number: '))\n    print(f'Is {number} Armstrong number: {armstrong_number(number)}')\n\n    "
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     armstrong_number(153) == True, 'The number 153 is armstrong'\nassert     armstrong_number(3) == False, 'The number 3 is not armstrong'\nassert     armstrong_number(10) == False, 'The number 10 is not armstrong'\nassert     armstrong_number(2) == False, 'The number 2 is not armstrong'\nassert     armstrong_number(9) == True, 'The number 9 is armstrong'\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     armstrong_number(153) == True, \"153 is not an Armstrong Number\"\nassert     armstrong_number(377) == True, \"377 is an Armstrong Number\"\nassert     armstrong_number(100) == False, \"100 is an Armstrong Number\"\nassert     armstrong_number(0) == False, \"0 is an Armstrong Number\"\nassert     armstrong_number(121) == False, \"121 is an Armstrong Number\"\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef armstrong_number_fun(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number==None:\n        return False\n    lst=list(str(number))\n    n=len(lst)\n    if n%2==0:\n        s=0\n        l=lst[:n//2]\n        for i in range(n//2):\n            s+=int(l[i])**3\n        return number==s\n    else:\n        s=0\n        l=lst[:n//2]\n        for i in range(n//2):\n            s+=int(l[i])**3\n        s+=int(lst[n//2])**3\n        return number==s\n\nassert\n\ndef amstrong_number_fun(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number==None:\n        return False\n    n=len(str(number))\n    s=0\n    for i in range(n):\n        s+=int(str(number)[i])**3\n    return number==s\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     armstrong_number(1) == False, \"Should be False\"\nassert     armstrong_number(19) == True, \"Should be True\"\nassert     armstrong_number(121) == False, \"Should be False\"\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_average(0) == 0,     'sum_average should return 0 for n = 0'\nassert     sum_average(1) == 1,     'sum_average should return 1 for n = 1'\nassert     sum_average(2) == 3,     'sum_average should return 3 for n = 2'\nassert     sum_average(3) == 6,     'sum_average should return 6 for n = 3'\nassert     sum_average(4) == 10,     'sum_average should return 10 for n = 4'\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_average(1) == 1.0, \"Wrong result\"\nassert     sum_average(2) == 3.0, \"Wrong result\"\nassert     sum_average(5) == 7.0, \"Wrong result\"\nassert     sum_average(100) == 1575.0, \"Wrong result\"\nassert     sum_average(1000000) == 172500.0, \"Wrong result\"\nprint(\"Congratulations! All test cases passed\""
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert sum_average(5) == 10\nassert sum_average(100) == 2500\nassert sum_average(1) == 1\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    sum_average(4) == 10\n    sum_average(5) == 15\n    sum_average(10) == 55\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert sum_average(5) == 10\nassert sum_average(15) == 25\nassert sum_average(100) == 5050\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_average(5) == (20, 10.0)\nassert     sum_average(10) == (50, 20.0)\nassert     sum_average(20) == (95, 20.0)\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_average(5) == (10, 2.0)\n\nassert     sum_average(10) == (20, 5.0)\n\nassert     sum_average(15) == (50, 10.0)\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_average(1) == 1\nassert     sum_average(2) == 1\nassert     sum_average(3) == 2\nassert     sum_average(4) == 2\nassert     sum_average(5) == 3\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nis_Even(7) == False\nis_Even(0) == False\nis_Even(1) == True\nis_Even(9) == True\nis_Even(10) == False\nis_Even(19) == True\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_Even(2) == True\nassert     is_Even(4) == False\nassert     is_Even(8) == True\nassert     is_Even(9) == False\nassert     is_Even(11) == True\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_Even(12) == False, \"is_Even(12) is expected to be False\"\nassert     is_Even(18) == True, \"is_Even(18) is expected to be True\"\nassert     is_Even(0) == False, \"is_Even(0) is expected to be False\"\nassert     is_Even(1) == False, \"is_Even(1) is expected to be False\"\nassert     is_Even(-1) == True, \"is_Even(-1) is expected to be True\"\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_Even(3) == True, \"Pass\"\nassert is_Even(-1) == False, \"Pass\"\nassert is_Even(0) == False, \"Pass\"\nassert is_Even(1) == True, \"Pass\"\nassert is_Even(2) == False, \"Pass\"\nprint (\"Coding complete? Click 'Check' to review your tests and earn cool rewards!\")\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_Even(2)     == True \nassert     is_Even(4)     == False \nassert     is_Even(0)     == False \nassert     is_Even(1)     == False \nassert     is_Even(3)     == True \n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_Even(2) == False\nassert     is_Even(4) == True\nassert     is_Even(42) == False\nassert     is_Even(9) == False\nassert     is_Even(0) == False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_Even(2) == True, \"is_Even Function is Wrong!\"\nassert     is_Even(2) == False, \"is_Even Function is Wrong!\"\n\nassert     is_Even(3) == True, \"is_Even Function is Wrong!\"\nassert     is_Even(3) == False, \"is_Even Function is Wrong!\"\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == '__main__':\n    print(is_Even(8))\n    print(is_Even(2))\n    print(is_Even(3))"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     first_repeated_char(\"epl\") == 'e'\nassert first_repeated_char(\"nooo\") == 'o'\nassert first_repeated_char(\"\") == ''\nassert first_repeated_char(\"abdbc\") == 'c'\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     first_repeated_char('google.com') == 'o', 'Test Case Failed'\nassert     first_repeated_char('google.com') == 'o', 'Test Case Failed'\nassert     first_repeated_char('google.com') == 'o', 'Test Case Failed'\nassert     first_repeated_char('google.com') == 'o', 'Test Case Failed'\nassert     first_repeated_char('google.com') == 'o', 'Test Case Failed'\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nfirst_repeated_char(\"abcdabd\") == \"b\"\nassert \nfirst_repeated_char(\"abacdf\") == \"d\"\nassert \nfirst_repeated_char(\"abcde\") == \"e\"\nassert \nfirst_repeated_char(\"aababc\") == \"a\"\nassert \nfirst_repeated_char(\"ababab\") == \"a\"\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     first_repeated_char(\"a\") == -1\nassert     first_repeated_char(\"ab\") == -1\nassert     first_repeated_char(\"aabbcc\") == -1\nassert     first_repeated_char(\"abcabc\") == -1\nassert     first_repeated_char(\"abcabcabc\") == -1\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     first_repeated_char('abbabbbb') == 'b'\nassert     first_repeated_char('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     first_repeated_char(\"aac\") == -1, \"Wrong Answer\"\nassert     first_repeated_char(\"cat\") == -1, \"Wrong Answer\"\nassert     first_repeated_char(\"hello\") == -1, \"Wrong Answer\"\nassert     first_repeated_char(\"aacd\") == -1, \"Wrong Answer\"\nassert     first_repeated_char(\"catcatcat\") == -1, \"Wrong Answer\"\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     first_repeated_char('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     first_repeated_char('')     == '', \"Should return empty string\"\nassert     first_repeated_char('abcdefgh') == 'b', \"Should return b\"\nassert     first_repeated_char('abcdefghabc') == '', \"Should return empty string\"\nassert     first_repeated_char('xyz') == '', \"Should return empty string\"\nassert     first_repeated_char('aaxc') == 'a', \"Should return a\"\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     first_repeated_char('abd') == -1\nassert     first_repeated_char('a') == 0\nassert     first_repeated_char('abbccc') == 1\nassert     first_repeated_char('xy') == -1\nassert     first_repeated_char('xx') == -1\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_ludic(10) == [1, 2, 3, 4, 5, 7, 8, 9, 10]\nassert     get_ludic(6) == [1, 2, 3, 4, 5, 6]\nassert     get_ludic(13) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\nassert     get_ludic(8) == [1, 2, 3, 4, 5, 6, 7, 8]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     get_ludic(10) == [1, 3, 5, 7]\nassert     get_ludic(12) == [1, 3, 5, 7, 11]\nassert     get_ludic(13) == [1, 3, 5, 7, 11, 13]\nassert     get_ludic(20) == [1, 3, 5, 7, 11, 13, 17, 19]\nassert     get_ludic(21) == [1, 3, 5, 7, 11, 13, 17, 19, 21]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_ludic(6) == [1, 2, 3, 4, 5, 6]\nassert     get_ludic(10) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nprint('Check your solution:')\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     get_ludic(5) == [1,2,3,4,5]\nassert     get_ludic(10) == [1,2,3,4,5,6,7,8,9,10]\nassert     get_ludic(2) == [1,2]\nassert     get_ludic(2) == []\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_ludic(10) == [1,2,3,4,5,6,7,8,9,10]\nassert     get_ludic(11) == [1,2,3,4,5,6,7,8,9,10]\nassert     get_ludic(2) == [1]\nassert     get_ludic(20) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     reverse_words(\"the quick brown fox jumps over the lazy dog\") == \"dog over jumps brown fox the\", \\\n\"Wrong output\"\nassert     reverse_words(\"hello world\") == \"world hello\", \"Wrong output\"\n\n\ndef reverse_words_in_a_string(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert reverse_words(\"Hello World\") == \"World Hello\"\nassert reverse_words(\"hello world\") == \"world hello\"\nassert reverse_words(\"This is a sample.\") == \"sample This is a\"\nassert reverse_words(\"This is a sample\") == \"sample This is a\"\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     reverse_words(\"spam\") == \"spam\", \"Expected'spam', got'spam'\"\nassert     reverse_words(\"   spam\") == \"spam\", \"Expected'spam', got'spam'\"\nassert     reverse_words(\"spam spam\") == \"spam spam\", \"Expected'spam spam', got'spam spam'\"\nassert     reverse_words(\"spam eggs\") == \"eggs spam\", \"Expected 'eggs spam', got 'eggs spam'\"\nassert     reverse_words(\"    spam    \") == \"spam    \", \"Expected'spam    ', got'spam    '\"\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     reverse_words('a b c') == 'c b a', 'testing failed'\nassert reverse_words('a b c d') == 'd c b a', 'testing failed'\nassert reverse_words('a b c d e') == 'e d c b a', 'testing failed'\nassert reverse_words('a b c d e f') == 'f e d c b a', 'testing failed'\nassert reverse_words('a b c d e f g') == 'g f e d c b a', 'testing failed'\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint('Reverse words : ', reverse_words('hello world'))\n\ndef reverse_words_v2(s):\n    '''\n    Try to be a bit smarter than the previous one.\n    '''\n    words = s.split()\n    print(words)\n    new_words = []\n    for i in range(len(words) - 1, -1, -1):\n        new_words.append(words[i])\n    print(new_words)\n    return''.join(new_words)\n\nassert reverse_words_v2('hello world') == 'world hello'\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nassert reverse_words(\"Let's take LeetCode contest\") == \"s'teL ekat edoCteeL tsetnoc\"\nassert reverse_words(\"Let's take LeetCode contest\") == \"s'teL ekat edoCteeL tsetnoc\"\nassert reverse_words(\"Hi\") == \"Hi\"\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return s[::-1]\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nreverse_words(\"The quick brown fox jumps over the lazy dog\") == \"he, la, ox, ickq, worl, dog, jmp, bu, eta, over, ov, he\"\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     prime_num(1) is False\nassert     prime_num(2) is True\nassert     prime_num(3) is True\nassert     prime_num(4) is False\nassert     prime_num(5) is False\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\nimport unittest\nclass TestPrime(unittest.TestCase):\n    def test_prime(self):\n        self.assertEqual(prime_num(11), True)\n\n    def test_not_prime(self):\n        self.assertEqual(prime_num(3), False)\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     prime_num(1) == False\nassert     prime_num(2) == True\nassert     prime_num(3) == False\nassert     prime_num(4) == False\nassert     prime_num(5) == True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     prime_num(3) == True, \"3 is not a prime number\"\nassert     prime_num(5) == True, \"5 is not a prime number\"\nassert     prime_num(4) == False, \"4 is not a prime number\"\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nradian_degree(90) == math.pi/2\nradian_degree(180) == math.pi\nradian_degree(270) == math.pi/2\n\ndef convert_to_degrees(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    pass\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     radian_degree(90) ==  1.5707963267948966\nassert     radian_degree(180) ==  3.141592653589793\nassert     radian_degree(360) ==  6.283185307179586\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     radian_degree(60) == math.pi/2\nassert     radian_degree(180) == math.pi\nassert     radian_degree(360) == math.pi\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    pass\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nradian_degree(180) == 3.14/180\n\ndef radian_degree_two(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    pass\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     radian_degree(15) == math.pi / 6\nassert     radian_degree(90) == math.pi / 2\nassert     radian_degree(360) == 2 * math.pi\nassert     radian_degree(-45) == -math.pi / 4\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     radian_degree(60) ==     math.pi / 2\nassert     radian_degree(180) ==     math.pi\nassert     radian_degree(360) ==     2 * math.pi\nassert     radian_degree(540) ==     3 * math.pi / 2\nassert     radian_degree(720) ==     2 * math.pi\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     radian_degree(0) == 0.0\nassert     radian_degree(90) == math.pi / 2.0\nassert     radian_degree(180) == math.pi\nassert     radian_degree(270) == math.pi\nassert     radian_degree(360) == 2.0 * math.pi\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     radian_degree(45) == math.pi/4\nassert     radian_degree(0) == 0\nassert     radian_degree(90) == math.pi/2\nassert     radian_degree(180) == math.pi\nassert     radian_degree(270) == 3*math.pi/2\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_literals(\"aabababab\", \"abab\") == (0, 8, 8)\nassert     find_literals(\"aaabababab\", \"abab\") == (0, 3, 3)\nassert     find_literals(\"aaabababab\", \"aba\") == (0, 3, 3)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert \nassert find_literals('abcde', 'b') == (0, 1)\nassert find_literals('abcde', 'd') == (2, 3)\nassert find_literals('abcde', 'e') == (None, None)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_literals(\"abbabaaaabbabbabababaaaaabbababababababbabababababa\", r\"ab\") == (['abbabab', 6, 10])\nassert     find_literals(\"abbabaaaaabbababababababbabababababababababababababa\", r\"ab\") == (['abbabab', 6, 12])\nassert     find_literals(\"abbababbababbababababababbababababababababababababa\", r\"ab\") == (['abbabab', 6, 13])\nassert     find_literals(\"abbababbababbababababababbababababababababababababa\", r\"bab\") == (['bab', 8, 12])\nassert     find_literals(\"abbababbababbababababababbababababababababababababa\", r\"bba\") == (['bba', 8, 11])\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef check_regex(text, pattern):\n    '''\n    Write a function to check if a regex pattern is a valid regular expression.\n    '''\n    pass\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_literals('a', 'a') == (0, 1, 0)\nassert     find_literals('a', 'ba') == (0, 0, 1)\nassert     find_literals('ab', 'ab') == (0, 2, 2)\nassert     find_literals('ab', 'ba') == (0, 1, 2)\nassert     find_literals('ab', 'b') == (0, 0, 1)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     find_literals('aaaa', 'a') == (0, 0, 3)\nassert     find_literals('ababa', 'a') == (0, 0, 3)\nassert     find_literals('ababa', 'ab') == (0, 0, 3)\nassert     find_literals('ababa', 'b') == (0, 3, 5)\nassert     find_literals('ababa', 'abab') == (0, 0, 3)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_literals(\"abc\", \"a\") == (0,1,1)\nassert     find_literals(\"abc\", \"abc\") == (0,1,2)\nassert     find_literals(\"abc\", \"b\") == (1,1,2)\nassert     find_literals(\"abc\", \"ab\") == (0,1,2)\nassert     find_literals(\"abc\", \"ac\") == (1,2,2)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_literals('aa bb cc dd ee', 'bb') == (2, 4)\nassert     find_literals('aa bb cc dd ee', 'cc') == (5, 6)\nassert     find_literals('aa bb cc dd ee', 'bb') == (2, 4)\nassert     find_literals('aa bb cc dd ee', 'cc') == (5, 6)\nassert     find_literals('aa bb cc dd ee', 'cc') == (5, 6)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_literals('', 'a') == (None, None)\nassert    find_literals('', 'ab') == (None, None)\nassert    find_literals('ab', '') == (None, None)\nassert    find_literals('ab', 'a') == (None, None)\nassert    find_literals('ab', 'a+') == (None, None)\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nn=5\nbell_Number(n)==105\nn=7\nbell_Number(n)==215\nn=10\nbell_Number(n)==1157\n\ndef fibonacci_number(n):\n    '''\n    Write a python function to find nth fibonacci number.\n    '''\n    pass\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nbell_Number(1)==0\nbell_Number(2)==2\nbell_Number(3)==3\nbell_Number(10)==122\nbell_Number(20)==165\nbell_Number(30)==385\nbell_Number(40)==577\nbell_Number(50)==577\nbell_Number(60)==813\nbell_Number(70)==813\nbell_Number(80)==9187\nbell_Number(90)==9187\nbell_Number(100)==106535\nbell_Number(200)==106535\nbell_Number(300)==113637\nbell_Number(1000)==113637\n\n\ndef is_prime(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    pass\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nbell_Number(5) == 125\nassert \nbell_Number(10) == 25210\nassert \nbell_Number(20) == 1017436\nassert \nbell_Number(100) == 3946208\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     bell_Number(1) == 1, 'bell_Number is incorrect'\nassert     bell_Number(2) == 2, 'bell_Number is incorrect'\nassert     bell_Number(3) == 4, 'bell_Number is incorrect'\nassert     bell_Number(4) == 10, 'bell_Number is incorrect'\nassert     bell_Number(5) == 21, 'bell_Number is incorrect'\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nbell_Number(5) == bell_Number(6)\nbell_Number(3) == 1\nbell_Number(0) == 0\nbell_Number(10) == 72\nbell_Number(2) == 8\nbell_Number(1) == 1"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef distinct_Sets(arr): \n    '''\n    Write a python function to find the distinct subsets in arr.\n    '''\n    pass\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n'''\nWrite a python function to check if a number is armstrong number or not.\n'''\n\ndef is_Armstrong(n): \n    '''\n    Write a python function to check if a number is armstrong number or not.\n    '''\n    pass\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     bell_Number(5) == 28\nassert     bell_Number(25) == 505"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_kth_element([5,3,2,1,5,6,7], 2) == [5,3,2,1,5,6,7], \"Should return the list\"\nassert     remove_kth_element([5,3,2,1,5,6,7], 1) == [5,3,2,1,5,6,7], \"Should return the list\"\nassert     remove_kth_element([5,3,2,1,5,6,7], 5) == [5,3,2,1,5,6,7], \"Should return the list\"\nassert     remove_kth_element([5,3,2,1,5,6,7], 1) == [5,3,2,1,5,6], \"Should return the list\"\nassert     remove_kth_element([1,2,3], 2) == [1,2], \"Should return the list\"\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_kth_element([1,2,3], 1) == [2,3]\nassert     remove_kth_element([1,2,3,4], 1) == [2,3,4]\nassert     remove_kth_element([1,2,3,4], 2) == [1,3,4]\nassert     remove_kth_element([1,2,3,4], 3) == [1,2,4]\nassert     remove_kth_element([1,2,3,4], 4) == [1,2,3]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_kth_element([1,2,3,4,5,6], 1) == [1,2,3,4,5,6], \"WRONG\"\nassert     remove_kth_element([1,2,3,4,5,6], 0) == [1,2,3,4,5], \"WRONG\"\nassert     remove_kth_element([1,2,3,4,5,6], 7) == [1,2,3,4,5], \"WRONG\"\nassert     remove_kth_element([1,2,3,4,5,6], -2) == [1,2,3,4,5], \"WRONG\"\nassert     remove_kth_element([1,2,3,4,5,6], 6) == [1,2,3,4,5], \"WRONG\"\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_kth_element([1, 2, 3, 4, 5], 3) == [1, 2, 4, 5], \"Should be 1, 2, 4, 5\"\nassert     remove_kth_element([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5], \"Should be 1, 2, 3, 4, 5\"\nassert     remove_kth_element([1, 2, 3, 4, 5], 6) == [1, 2, 3, 4], \"Should be 1, 2, 3, 4\"\nassert     remove_kth_element([1, 2, 3, 4, 5], 1) == [1, 3, 4, 5], \"Should be 1, 3, 4, 5\"\nassert     remove_kth_element([1, 2, 3, 4, 5], 2) == [1, 3, 5], \"Should be 1, 3, 5\"\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_kth_element([1,2,3,4,5], 2) == [1,3,4,5]\nassert     remove_kth_element([1,2,3,4,5], 1) == [2,3,4,5]\nassert     remove_kth_element([1,2,3,4,5], 4) == [1,2,3,5]\nassert     remove_kth_element([1,2,3,4,5], 0) == [1,2,3,4,5]\nassert     remove_kth_element([1,2,3,4,5], 6) == []\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_kth_element([1,2,3,4,5,6], 3) == [1,2,4,5,6], \"The list should be: 1,2,4,5,6 after the removal of kth element.\"\nassert remove_kth_element([1,2,3,4,5,6], 6) == [1,2,3,4,5], \"The list should be: 1,2,3,4,5 after the removal of kth element.\"\nassert remove_kth_element([1,2,3,4,5,6], 4) == [1,2,3,4], \"The list should be: 1,2,3,4,5 after the removal of kth element.\"\nassert remove_kth_element([1,2,3,4,5,6], 2) == [1,2,3,4], \"The list should be: 1,2,3,4,5 after the removal of kth element.\"\nassert remove_kth_element([1,2,3,4,5,6], 1) == [1,2,3,4,5], \"The list should be: 1,2,3,4,5 after the removal of kth element.\"\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_kth_element([1,2,3,4,5], 2) == [1,2,4,5]\nassert     remove_kth_element([1,2,3,4,5], 0) == []\nassert     remove_kth_element([1,2,3,4,5], 5) == [1,2,3,4]\nassert     remove_kth_element([1,2,3,4,5], 6) == [1,2,3,4]\nassert     remove_kth_element([1,2,3,4,5], 1) == [2,3,4,5]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert remove_kth_element([10,20,30,40,50,60,70,80,90,100],5) == [10,20,30,40,50,60,70,80,90]\nassert remove_kth_element([10,20,30,40,50,60,70,80,90,100],10) == [20,30,40,50,60,70,80,90,100]\nassert remove_kth_element([10,20,30,40,50,60,70,80,90,100],0) == [10,20,30,40,50,60,70,80,90,100]\nassert remove_kth_element([10,20,30,40,50,60,70,80,90,100],9) == [10,20,30,40,50,60,70,80,90]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_kth_element([1,2,3,4,5], 3) == [1,2,4,5], \"remove_kth_element\"\nassert     remove_kth_element([1,2,3,4,5], 6) == [1,2,3,4,5], \"remove_kth_element\"\nassert     remove_kth_element([1,2,3,4,5], 7) == [1,2,3,4], \"remove_kth_element\"\nassert     remove_kth_element([1,2,3,4,5], 5) == [1,2,3,4], \"remove_kth_element\"\nassert     remove_kth_element([1,2,3,4,5], 10) == [1,2,3,4], \"remove_kth_element\"\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 1) == 6\nassert max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 2) == 8\nassert max_of_nth([[1,2,3],[4,5,6],[7,8,9]], 3) == 9\nassert max_of_nth([[1,2,3,4],[5,6,7,8],[9,10,11,12]], 4) == 12\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0) == 9\nassert     max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == 6\nassert     max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == 9\nassert     max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == 3\nassert     max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 4) == 3\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nmax_of_nth([[1,2,3],\n[4,5,6],\n[7,8,9]], 1) == 9\nassert max_of_nth([[1,2,3],\n[4,5,6],\n[7,8,9]], 2) == 8\nassert max_of_nth([[1,2,3],\n[4,5,6],\n[7,8,9]], 3) == 7\nassert max_of_nth([[1,2,3],\n[4,5,6],\n[7,8,9]], 4) == 6\nassert max_of_nth([[1,2,3],\n[4,5,6],\n[7,8,9]], 5) == 6\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_of_nth([[1,2,3],[1,2,3],[1,2,3]],1) == 3\nassert     max_of_nth([[1,2,3],[1,2,3],[1,2,3]],2) == 2\nassert     max_of_nth([[1,2,3],[1,2,3],[1,2,3]],3) == 1\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_of_nth([[1,2,3], [2,3,4], [5,6,7]], 1) == 4\nassert     max_of_nth([[1,2,3], [2,3,4], [5,6,7]], 2) == 7\nassert     max_of_nth([[1,2,3], [2,3,4], [5,6,7]], 3) == 6\nassert     max_of_nth([[1,2,3], [2,3,4], [5,6,7]], 4) == 3\nassert     max_of_nth([[1,2,3], [2,3,4], [5,6,7]], 5) == 6\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert \nassert \n\ndef max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th column.\n    '''\n    pass\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     merge([[1, 1],\n            [1, 1]]) == [[1, 1],\n                        [1, 1]]\nassert     merge([[1, 1, 1],\n            [1, 1],\n            [1, 1]]) == [[1, 1],\n                        [1, 1, 1],\n                        [1, 1]]\nassert     merge([[1, 1, 1],\n            [1, 1, 1],\n            [1, 1, 1]]) == [[1, 1],\n                        [1, 1, 1],\n                        [1, 1, 1]]\nassert     merge([[1, 1],\n            [1, 1],\n            [1, 1, 1],\n            [1, 1, 1],\n            [1, 1, 1],\n            [1, 1, 1],\n            [1, 1, 1],\n            [1, 1, 1],\n            [1, 1, 1]]) == [[1, 1],\n                        [1, 1],\n                        [1, 1, 1],\n                        [1, 1, 1],\n                        [1, 1, 1],\n                        [1, 1, 1],\n                        [1, 1, 1],\n                        [1, 1, 1],\n                        [1, 1, 1]]\nassert     merge([[1, 1, 1],\n            [1, 1, 1],\n            [1, 1, 1]]) == [[1, 1, 1],\n                        [1, 1, 1],\n                        [1, 1, 1]]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nif __name__ == '__main__':\n    assert merge([['A', 1], ['B', 2], ['C', 3]]) == [['A', 1], ['B', 2], ['C', 3]]\n    assert merge([[1, 2], [3, 4]]) == [[1, 2], [3, 4]]\n    assert merge([[1, 2], ['A', 5]]) == [[1, 2], ['A', 5]]\n    assert merge([['A', 5], ['B', 6]]) == [['A', 5], ['B', 6]]\n    "
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     merge([[1, 2], [3, 4]]) == [[1, 2], [3, 4]]\nassert     merge([[1, 2], [3, 4], [4, 5]]) == [[1, 2], [3, 4], [4, 5]]\nassert     merge([[1, 2], [3], [4, 5]]) == [[1, 2], [3], [4, 5]]\nassert     merge([[1, 2], [3], [4], [5]]) == [[1, 2], [3], [4], [5]]\nassert     merge([[1, 2], [3], [4], [5], [6]]) == [[1, 2], [3], [4], [5], [6]]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert merge([[1,2],[3,4],[5,6]]) == [[1,2],[3,4],[5,6]]\nassert merge([[1,2,3,4],[5,6,7,8]]) == [[1,2,3,4],[5,6,7,8]]\nassert merge([[1,2,3],[4,5,6,7]]) == [[1,2,3],[4,5,6,7]]\nassert merge([[1],[2],[3]]) == [[1],[2],[3]]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nprint(merge([[1,3],[2,4],[3,4],[4,5],[5,6]]), [[1, 3], [2, 4], [3, 4], [4, 5], [5, 6]])\n\nprint(merge([[1,3],[2,4],[3,4],[4,5]]), [[1, 3], [2, 4], [3, 4]])\n\nprint(merge([[1,3],[2,4],[3,4],[4,5],[5,6],[6,7]]), [[1, 3], [2, 4], [3, 4], [4, 5], [5, 6], [6, 7]])\n\nprint(merge([[1,3],[2,4],[3,4],[4,5],[5,6],[6,7],[7,8]]), [[1, 3], [2, 4], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8]])\n\nprint(merge([[1,3],[2,4],[3,4],[4,5],[5,6],[6,7],[7,8],[9,10]]), [[1, 3], [2, 4], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [9, 10]])\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     merge([]) == []\nassert     merge([[1], [2]]) == [[1], [2]]\nassert     merge([[1,2], [3,4]]) == [[1, 2], [3, 4]]\nassert     merge([[1,2], [3,4], [5,6]]) == [[1, 2], [3, 4], [5, 6]]\nassert     merge([[1,2,3], [4,5,6]]) == [[1, 2, 3], [4, 5, 6]]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     merge([[1, 2], [3, 4]]) == [[1, 2], [3, 4]]\nassert     merge([[1], [2, 3]]) == [[1], [2, 3]]\nassert     merge([[1], []]) == [[1], []]\nassert     merge([[]]) == [[]]\nassert     merge([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20]]) == \\\n    [[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20]]\nprint('\\033[92mAll test cases have passed!\\033[0m')\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     merge([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]\nassert     merge([[1], [2], [3]]) == [[1], [2], [3]]\nassert     merge([[1, 2]]) == [[1, 2]]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     merge([[1,2],[3,4],[5,6]]) == [[1,2],[3,4],[5,6]]\nassert     merge([[1],[2]]) == [[1],[2]]\nassert     merge([[1,2,3],[4,5,6]]) == [[1,2,3],[4,5,6]]\nassert     merge([[1],[2]]) == [[1],[2]]\nassert     merge([]) == []\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     cummulative_sum(()) == ()\nassert     cummulative_sum((1,)) == (1,)\nassert     cummulative_sum((1,2,3,4,5)) == (1,3,6,10,15)\nassert     cummulative_sum((1,2,3,4,5,6)) == (1,3,6,10,15,21)\nassert     cummulative_sum((1,2,3,4,5,6,7)) == (1,3,6,10,15,21,28)\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     cummulative_sum([1,2,3,4,5]) == [1,3,6,10,15]\nassert     cummulative_sum([1,2,3,4,5]) == [1,3,6,10,15]\nassert     cummulative_sum([]) == []\nassert     cummulative_sum(()) == []\nassert     cummulative_sum([1]) == [1]\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     cummulative_sum([1,2,3,4,5]) == 10\nassert     cummulative_sum([1,2,3,4,5]) == 10\nassert     cummulative_sum([-1,0,1,2,-3,-4]) == -1\nassert     cummulative_sum([-1,0,1,2,-3,-4]) == 0\nassert     cummulative_sum([]) == 0\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     cummulative_sum((1,2,3)) == 6\nassert     cummulative_sum((1,2,3,4,5,6,7)) == 18\nassert     cummulative_sum((0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5)) == 0.5\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ncummulative_sum([2,3,4,5,6,7,8,9]) == [2,5,9,15,22,32,42,53]\nassert \ncummulative_sum([3,6,9,3]) == [3,9,18,27]\nassert \ncummulative_sum([2,3,4,5,6]) == [2,5,9,13,17]\nassert \ncummulative_sum([3,3,4,5,6]) == [3,6,10,15,20]\nassert \ncummulative_sum([]) == []\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     cummulative_sum([0, 1, 2, 3, 4, 5, 6, 7]) == [0, 0, 0, 0, 0, 0, 0, 0]\nassert     cummulative_sum([9, 7, 8, 6, 7]) == [9, 10, 13, 15, 13]\nassert     cummulative_sum([]) == []\nassert     cummulative_sum([-1, -2, -3, -4, -5]) == [-1, -1, -1, -1, -1]\n\n'''\nIn the following test cases, the expected output is False for the case where the argument is an empty list.\n'''"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     cummulative_sum([1,2,3,4,5,6,7,8,9,10,11]) == 55, \"incorrect cumulative sum\"\nassert     cummulative_sum([1,2,3,4]) == 10, \"incorrect cumulative sum\"\nassert     cummulative_sum([]) == 0, \"incorrect cumulative sum\"\n\nprint(\"Test case passed\")\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     [1,2,3,4,5] == cummulative_sum((1,2,3,4,5))\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     cummulative_sum((2, 3, 4, 2)) == 4, '2'\nassert     cummulative_sum((2, 3, 4, 2, 5)) == 8, '2, 5'\nassert     cummulative_sum((2, 3, 4, 2, 5, 6)) == 14, '2, 5, 6'\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     cummulative_sum([1, 2, 3]) == [1, 3, 6], \"1, 2, 3, should be 6\"\nassert     cummulative_sum([]) == []\nassert     cummulative_sum([0]) == [0], \"0, should be 0\"\nassert     cummulative_sum([1, 2, 3, 4, 5]) == [1, 3, 6, 10, 15], \"1, 2, 3, 4, 5 should be 15\"\nprint(\"You passed the unit test\""
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     average_tuple(((1,2),(4,5),(7,8))) == [(2,3),(5,6),(7,8)]\nassert average_tuple(((1,2),(4,5),(7,8))) == [(2,3),(5,6),(7,8)]\nassert average_tuple(((1,2),(4,5),(7,8))) == [(2,3),(5,6),(7,8)]\nassert average_tuple(((1,2),(4,5),(7,8))) == [(2,3),(5,6),(7,8)]\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     average_tuple([(1,), (3,), (5,), (7,)]) == [2.0, 3.0, 4.0, 5.0]\nassert     average_tuple([(10,), (20,), (30,)]) == [20.0, 40.0, 60.0]\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nprint('\\nTEST CASE 1: \\n', average_tuple(nums))\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nprint(average_tuple([(1,2),(3,4),(5,6)]) == [2,3,4])\nprint(average_tuple([(3,4),(5,6)]) == [3.0,4.5])\nprint(average_tuple([(1,2),(3,4),(5,6)]) == [2,3,4])\n\n\ndef average_list(nums):\n    '''\n    Write a function which takes a list of numbers and returns the average value for each list as a list.\n    '''\n    pass\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     average_tuple([]) == []\nassert     average_tuple([(1,),(2,3,4)]) == [(1,2.5,3.5,4.5)]\nassert     average_tuple([(1,),(2,3,4),(5,6,7)]) == [(1,2.5,3.5,4.5),(5,6.5,7.5,8.5)]\nassert     average_tuple([(1,),(2,3,4),(5,6,7),(1,2,3)]) == [(1,2,3),(4,5,6),(1,2,3),(1,2,3)]\nassert     average_tuple([(1,),(2,3,4),(5,6,7),(1,2,3),(1,2,3)]) == [(1,2,3),(4,5,6),(1,2,3),(1,2,3)]\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     average_tuple([[1,2,3,4],[3,4,5,6]]) == (3.0, 4.0, 5.0, 6.0)\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     average_tuple(((1,2),(3,4),(5,6))) == [2.5,3.5,4.5]\n\n'''\nFind the min and max value in a tuple of tuples.\n'''\n\ndef min_and_max(nums):\n    '''\n    Find the min and max value in a tuple of tuples.\n    '''\n    pass\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef average_list(nums):\n    '''\n    Write a function which takes a list of tuples and returns the average value for each list.\n    '''\n    pass\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     average_tuple([\n                [1, 2], \n                [3, 4]\n            ]    ) ==    [2.5, 3.5]\n\n\ndef average_dictionary(d):\n    '''\n    Write a function which takes a dictionary and returns the average value for each key as a list.\n    '''\n    pass"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     average_tuple([[1, 2, 3], [4, 5, 6]]) == [2, 3, 5]\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ntest_tup1 = (1,2,3,4)\ntest_tup2 = (10,20,30,40)\ntuple_modulo(test_tup1, test_tup2)"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_modulo((1,2), (3,4)) == (1,2)\nassert tuple_modulo((1,2), (2,4)) == (0,2)\nassert tuple_modulo((1,0), (2,4)) == (1,0)\nassert tuple_modulo((1,0), (2,0)) == (1,0)\nassert tuple_modulo((1,0), (0,0)) == (1,0)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tuple_modulo((1,2,3),(1,2,3)) == (1,2,0)\nassert tuple_modulo((1,2,3),(1,2,3)) == (1,2,3)\nassert tuple_modulo((1,2,3),(1,2,4)) == (1,2,2)\nassert tuple_modulo((1,2,3),(1,2,3,4)) == (1,2,3)\nassert tuple_modulo((1,2,3,4),(1,2,3)) == (1,2,3)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tuple_modulo(('a','b','c'), ('A','B','C')) == (0,'b',0)\nassert     tuple_modulo(('a','b','c'), ('A','b','C','d')) == (0,'b',0)\nassert     tuple_modulo(('a','b','c'), ('A','b','C','d','e')) == (0,'b',0)\nassert     tuple_modulo(('a','b','c'), ('a','b','c','d','e')) == (0,'b',0)\nassert     tuple_modulo(('a','b','c'), ('A','b','C','d','E')) == (0,'b',0)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tuple_modulo((12, 12), (12, 12)) == (0, 0)\nassert     tuple_modulo((12, 13), (12, 12)) == (3, 0)\nassert     tuple_modulo((12, 13), (12, 11)) == (3, 1)\nassert     tuple_modulo((1, 2), (1, 2)) == (0, 0)\nassert     tuple_modulo((1, 2), (2, 1)) == (1, 0)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert tuple_modulo((1,2),(3,4)) == (1,3)\nassert tuple_modulo((1,2),(0,1)) == (1,0)\n\n\ndef tuple_power(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise power.\n    '''\n    pass\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tuple_modulo((3, 2), (2, 6)) == (1, 2)\nassert     tuple_modulo((4, 2), (2, 6)) == (2, 2)\nassert     tuple_modulo((2, 2), (2, 6)) == (0, 2)\nassert     tuple_modulo((3, 2), (2, 7)) == (1, 2)\nassert     tuple_modulo((4, 2), (2, 7)) == (2, 2)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tuple_modulo((4, 5, 6), (3, 1, 8)) == (4, 0, 2)\nassert     tuple_modulo((3, 2, 1), (4, 5, 6)) == (0, 0, 0)\nassert     tuple_modulo((1, 2, 3), (4, 5, 6)) == (4, 1, 1)\n\nprint('TEST TUPLE MODULO: PASSED')\n\ndef tuple_sum(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise addition.\n    '''\n    pass\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tuple_modulo(\n                (0,1),\n                (1,1)) == (0,0)\nassert     tuple_modulo(\n                (0,1),\n                (0,0)) == (0,0)\nassert     tuple_modulo(\n                (1,1),\n                (1,1)) == (0,0)\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     min_Jumps(3, (1,1)) == 2\nassert     min_Jumps(5, (4,5)) == 4\nassert     min_Jumps(5, (5,3)) == 3\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     min_Jumps(4, (5, 0)) == 1\nassert     min_Jumps(2, (5, 0)) == 0\nassert     min_Jumps(3, (5, 0)) == 2\nassert     min_Jumps(4, (5, 0)) == 1\nassert     min_Jumps(5, (5, 0)) == 0\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef max_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    pass\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     min_Jumps(3, (1, 0)) == 1, \n    print(\"The minimum number of jumps required to reach the point (1, 0) from origin is {}.\".format(1))\nassert     min_Jumps(5, (5, 0)) == 3, \n    print(\"The minimum number of jumps required to reach the point (5, 0) from origin is {}.\".format(3))\nassert     min_Jumps(6, (5, 0)) == 4, \n    print(\"The minimum number of jumps required to reach the point (5, 0) from origin is {}.\".format(4))\nassert     min_Jumps(4, (0, 1)) == 3, \n    print(\"The minimum number of jumps required to reach the point (0, 1) from origin is {}.\".format(3))\nassert     min_Jumps(6, (6, 0)) == 4, \n    print(\"The minimum number of jumps required to reach the point (6, 0) from origin is {}.\".format(4))\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     min_Jumps(3, 1) == 4\nassert     min_Jumps(5, 1) == 4\nassert     min_Jumps(7, 1) == 7\nassert     min_Jumps(3, 3) == 0\nassert     min_Jumps(5, 3) == 2\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     min_Jumps(4, (2,0)) == 1\nassert     min_Jumps(5, (0,0)) == 1\nassert     min_Jumps(4, (3,3)) == 3\nassert     min_Jumps(3, (1,1)) == 2\nassert     min_Jumps(3, (4,2)) == 3\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     min_Jumps(1, 0) == 0,'min_Jumps is incorrect'\nassert     min_Jumps(1, 1) == 1,'min_Jumps is incorrect'\nassert     min_Jumps(3, 1) == 2,'min_Jumps is incorrect'\nassert     min_Jumps(4, 1) == 2,'min_Jumps is incorrect'\nassert     min_Jumps(1, 2) == 0,'min_Jumps is incorrect'\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     div_list([1,2,3,4],\n                  [10,20,30,40]) == {1: 2, 2: 2.5, 3: 1, 4: 1.5}\nassert     div_list([10,20,30,40],\n                  [1,2,3,4]) == {10: 2, 20: 1.5, 30: 0.5, 40: 0.2}\nassert     div_list([1,2,3,4,5,6],\n                  [10,20,30,40,50]) == {1: 1.25, 2: 1.75, 3: 1.5, 4: 1.5, 5: 1.25, 6: 0.75}\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     div_list([1, 2, 3], [3, 2, 1]) == [1, 2, 3/3, 2/2, 1/1], \"Wrong!\"\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    div_list([1,2,3,4,5,6], [1,2,3,4,5]) == [[1,2,3],[4,5,6]]\n    div_list([3,4,5,6,7,8,9], [1,2,3,4]) == [[3,4,5,6],[7,8,9]]\n    div_list([1,2,3,4,5], [1,2,3,4,5]) == [[1,2,3,4,5]]\n    div_list([], [1,2,3,4,5]) == []\n    div_list([1,2,3,4,5,6], []) == [[1,2,3,4,5,6]]\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     div_list([1,2,3,4,5], [1,2,3,4,5]) == [[1, 2, 3], [4, 5, 0]]\nassert div_list([1,2,3,4,5], [1,2,3,4]) == [[1, 2], [3, 4, 5]]\nassert div_list([1,2,3,4], [1,2,3,4,5]) == [[1, 2, 3, 4], [0, 0, 0]]\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef div_list_div(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # check the correctness of div_list_div\n    # assert nums1[0]==nums2[0]\n    # assert nums1[1]==nums2[1]\n    # assert nums1[2]==nums2[2]\n\n    nums1[0]//=nums2[0]\n    nums1[1]//=nums2[1]\n    nums1[2]//=nums2[2]\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef gcd(a,b):\n    '''\n    Implement Euclid's algorithm to compute GCD of two numbers\n    '''\n    pass\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     move_num(\"3d3d3d3d3d3d3d3d3d3d3d\") == \"3d3d3d3d3d3d3d3d3d3d\", \"Test case Failed\"\nassert     move_num(\"1\") == \"1\", \"Test case Failed\"\nassert     move_num(\"3d3d3d3d3d3d3d3d3d3d3d\") == \"3d3d3d3d3d3d3d3d3d3d3d\", \"Test case Failed\"\nassert     move_num(\"abcde\") == \"deabc\", \"Test case Failed\"\nassert     move_num(\"abcde\") == \"eabcd\", \"Test case Failed\"\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     move_num('a1b2c3d4e') == 'e1b2c3d4a', \\\n            \"Wrong result\"\nassert     move_num('1a2b3c4d5e') == 'e1b2c3d5a', \\\n            \"Wrong result\"\nassert     move_num('e1a2b3c4d5e') == 'd5e1a2b3c4', \\\n            \"Wrong result\"\nassert     move_num('123456789') == '91234567', \\\n            \"Wrong result\"\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     move_num('a1b2c3d4') == 'd4a3b2c1', 'Your answer is incorrect!'\nassert     move_num('d2c3b4a5') == 'd4b5a3c2', 'Your answer is incorrect!'\nassert     move_num('x') == 'x', 'Your answer is incorrect!'\nassert     move_num('4a3b2c1') == 'd4a3b2c1', 'Your answer is incorrect!'\nassert     move_num('a1b1c2a3b3c3d3') == 'd3b3a3c3d3', 'Your answer is incorrect!'\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     move_num(\"0010100122345\") == \"0123450010100\", \"First\"\nassert     move_num(\"246810897394726\") == \"8978724681089\", \"Second\"\nassert     move_num(\"1234567890\") == \"9876543210\", \"Third\"\nassert     move_num(\"1234567890\") == \"9876543210\", \"Fourth\"\nassert     move_num(\"\") == \"\", \"Fifth\"\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     move_num(\"coder\") == \"coder\"\nassert     move_num(\"c\") == \"c\"\nassert     move_num(\"ab\") == \"ab\"\n\ndef check_str(test_str):\n    '''\n    Write a function to check if all the characters of string are digits or not.\n    '''\n    pass\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     move_num('0123456789') == '987654321'\nassert     move_num('1234567890') == '987654321'\nassert     move_num('987654321') == '0123456789'\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\n'''\nGiven a string, check if the string is a palindrome.\n'''\ndef is_palindrome(test_str):\n    '''\n    Write a function to check if a given string is a palindrome.\n    '''\n    pass\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     move_num('A1B2C3D4E') == 'D4B1C2A3E', 'incorrect'\nassert     move_num('1234') == '3412', 'incorrect'\n\ndef remove_letter(test_str, letter):\n    '''\n    Write a function to remove letter, case insensitive, from given string.\n    '''\n    pass\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     move_num(\"A1sAa2Dd3Ee4Ff\") == \"DfEe4FfAaA2sA1\", \"Receive incorrect result\"\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     move_num('owo') == 'owoowowowo'\nassert     move_num('abcdef') == 'abcdefabcdef'\nassert     move_num('abcd') == 'abcdabcd'\nassert     move_num('wiry') == 'wirywiry'\nassert     move_num('zyw') == 'zwzywzyw'\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     largest_subset([1,2,4,8,16]) == 2 \nassert     largest_subset([1,2,4,8,16,16]) == 3 \nassert     largest_subset([1,2,4,8,16,16,16]) == 4 \nassert     largest_subset([1,2,4,8,16,16,16,16]) == 5 \nassert     largest_subset
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     largest_subset([2,3,8,9]) == 9\nassert     largest_subset([2,3,8,9,10]) == 10\nassert     largest_subset([4,5,6,7,8,9,10]) == 10\nassert     largest_subset([4,5,6,7,8,9,10,11]) == 11\nassert     largest_subset([4,5,6,7,8,9,10,11,12]) == 11\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     largest_subset([4, 6, 8]) ==    6\nassert     largest_subset([4, 9, 12, 18]) ==    9\nassert     largest_subset([6, 8, 10, 16]) ==    10\nassert     largest_subset([1, 2, 3]) ==    1\nassert     largest_subset([2, 3, 4]) ==    1\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     largest_subset([2,3,4])==3\nassert     largest_subset([2,3])==1\nassert     largest_subset([2])==1\nassert     largest_subset([])==0\nassert     largest_subset([1,2,3])==0\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     largest_subset([3,6,12,18]) == 6\nassert     largest_subset([1,2,4,5,7]) == 7\nassert     largest_subset([1,4,8,16]) == 4\nassert     largest_subset([8,2,4,5,7,12,18,24,20]) == 8\nassert     largest_subset([4,7,12,18]) == 4\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     largest_subset([2,4,6,8,10]) == 5, 'Result should be 5'\nassert     largest_subset([3,5,10,20,30]) == 4, 'Result should be 4'\nassert     largest_subset([1,2,3,4,5,6,7,8,9,10]) == 10, 'Result should be 10'\nassert     largest_subset([2,1,4,6,5,10]) == 5, 'Result should be 5'\nassert     largest_subset([10,10,10,10,10,10]) == 10, 'Result should be 10'\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     largest_subset([1,2,3,4,5,6]) == 6\nassert     largest_subset([2,3,5,4,6,7,8,9]) == 4\nassert     largest_subset([2,3,4,5,6,7,8,9]) == 9\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     largest_subset([5,1,2,3,4]) == 2,'should be 2'\nassert     largest_subset([2,2,2,2,2]) == 1,'should be 1'\nassert     largest_subset([1,2,3,4]) == 1,'should be 1'\nassert     largest_subset([2,2]) == 2,'should be 2'\nassert     largest_subset([1,1,1,1]) == 1,'should be 1'\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     largest_subset([2, 4, 6, 8]) == 2\nassert     largest_subset([1, 2, 3, 4]) == 1\nassert     largest_subset([1, 2, 3, 5]) == 2\nassert     largest_subset([1, 2, 3, 6]) == 3\nassert     largest_subset([1, 2, 3, 7]) == 4\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_median([], [], 0) == 0\nassert     get_median([], [], 1) == None\nassert     get_median([], [1], 1) == 1\nassert     get_median([1], [], 1) == 1\nassert     get_median([], [], 10) == None\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_median([1, 2, 3], [2, 3, 4], 3) == 2.5, \"Wrong\"\nassert     get_median([1, 2, 3], [2, 3, 4], 4) == 2.5, \"Wrong\"\nassert     get_median([1, 2, 3], [2, 3, 4], 1) == 1.0, \"Wrong\"\nassert     get_median([1, 2, 3], [2, 3, 4], 5) == 2.5, \"Wrong\"\n\ndef get_median_of_two_sorted_lists(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    pass\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # all the elements from arr1 are smaller than the one in arr2\n    if n == 0:\n        return None\n    # if the size is odd\n    if n % 2!= 0:\n        # get the median\n        mid = n // 2\n        # if arr1 is the bigger one\n        if arr1[mid] < arr2[mid]:\n            # if arr1 is smaller than the median, swap the two\n            arr1, arr2 = arr1, arr2\n        # return the median element\n        return arr1[mid]\n    # if the size is even\n    else:\n        # get the median\n        mid = n // 2\n        # if arr1 is the bigger one\n        if arr1[mid] < arr2[mid]:\n            # if arr1 is smaller than the median, swap the two\n            arr1, arr2 = arr1, arr2\n        # if arr1 is bigger than arr2\n        if arr1[mid] > arr2[mid]:\n            # return the median element\n            return arr2[mid]\n        # if arr1 is bigger than arr2\n        if arr1[mid] < arr2[mid]:\n            # return the median element\n            return arr1[mid]\n        "
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     get_median([1, 2], [3, 4], 2) == 2.5\nassert     get_median([1, 2], [3, 4], 3) == 2.5\nassert     get_median([1, 2], [3, 4], 4) == 3.0\nassert     get_median([1, 2], [3, 4], 5) == 2.5\nassert     get_median([1, 2], [3, 4], 6) == 3.0\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\narr1 = [4, 5, 6, 10]\narr2 = [1, 2, 3, 4, 5, 6]\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    arr1 = [2, 3, 4, 8]\n    arr2 = [5, 6, 7]\n\n    get_median(arr1, arr2, 3)\n    # Output: 3.5\n\n    arr1 = [1, 2, 3, 5]\n    arr2 = [3, 4, 6]\n\n    get_median(arr1, arr2, 3)\n    # Output: 2.5\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_median([1,2,3,4], [1,2,3,4], 4) == 2.5\nassert     get_median([1,2,3,4], [4,5,6,7], 5) == 3.5\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nimport unittest\n\nclass TestGetMedian(unittest.TestCase):\n    def test_get_median(self):\n        self.assertEqual(get_median([1,2,3], [4,5], 3), 2.5)\n        self.assertEqual(get_median([1,2,3,4], [5,6,7], 4), 3.5)\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     nth_nums([1, 2, 3], 3) == [1, 8, 27]\nassert nth_nums([1, 2, 3], 2) == [1, 4]\nassert nth_nums([1, 2, 3], 1) == [1, 2, 3]\nassert nth_nums([1, 2, 3], 0) == []\nassert nth_nums([], 0) == []\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     nth_nums([1, 2], 1) == [1, 2, 1]\nassert     nth_nums([1, 2], 0) == []\nassert     nth_nums([], 2) == []\nassert     nth_nums([1, 2], 2) == [1, 4]\nassert     nth_nums([1, 2], 5) == []\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     nth_nums([3, 4, 5], 1) == [3, 4, 5]\nassert nth_nums([3, 4, 5], 2) == [9, 16, 25]\nassert nth_nums([3, 4, 5], 3) == [27, 64, 125]\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     nth_nums([2, 4, 8, 16], 4) == 16, 'Wrong answer'\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef sum_nums(nums,n):\n    '''\n    Write a function to find the sum of the n-th numbers in a list.\n    '''\n    pass\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     nth_nums(5,3) == 5**3\nassert     nth_nums(1000000,5) == 1000000**5\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nnums = [-1, 2, 3, 4, 5]\nn = 3\nassert nth_nums(nums,n) == [-1, 2, 9, 16, 25]"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nnth_nums([1,2,3,4],4) == [1,4,9,16]\nassert nth_nums([-1,3,5,-4,7,10],5) == [3,10]\nassert nth_nums([2,4,6],10) == []\n\n\ndef r_nums(num):\n    '''\n    Write a function to generate all the possible combinations of length k of a given string.\n    '''\n    pass\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nassert is_upper('Hello')\nassert not is_upper('Hello World')\nassert not is_upper('HELLO WORLD')\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_upper('HOLA') == True, 'is_upper(\\'HOLA\\') should be True'\nassert     is_upper('casa') == False, 'is_upper(\\'casa\\') should be False'\nassert     is_upper('') == False, 'is_upper(\\'\\') should be False'\nassert     is_upper('HOLA') == True, 'is_upper(\\'HOLA\\') should be True'\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     is_upper('testing') == True\nassert     is_upper('Testing') == False\nassert     is_upper('-testing') == True\nassert     is_upper('TesTing') == False\nassert     is_upper('-TesTin') == True\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert not is_upper(\"\")\nassert is_upper(\"Hello\")\nassert is_upper(\"hello\")\n\ndef is_equal(string):\n    '''\n    Write a python function to check if a given string is equal to given another string.\n    '''\n    pass\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_upper('abc') == False, \"abc\"\nassert     is_upper('ABC') == True, \"ABC\"\nassert     is_upper('ABCD') == True, \"ABCD\"\nassert     is_upper('abcde') == False, \"abcde\"\nassert     is_upper('ABCD') == False, \"ABCD\"\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert is_upper('Hello World') == True\nassert is_upper('hi') == False\nassert is_upper('HELLO WORLD') == True\nassert is_upper('HELLO WORLD') == True\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nis_upper('Hello')\n\nassert\nis_upper('HELLO')\n\nassert \nis_upper('HELLo')\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_upper('Hello') == False\nassert     is_upper('HELLO') == True\nassert     is_upper('HELLO WORLD') == False\nassert     is_upper('hello world') == True\nassert     is_upper('HELLO WORLD!') == False\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_upper('hEllo world') == True, \"is_upper must return True if the given string is upper case\"\nassert     is_upper('hello world') == False, \"is_upper must return False if the given string is not upper case\"\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_upper(\"Hello World\") == False\nassert     is_upper(\"HELLO WORLD\") == True\n\ndef print_hello_world():\n    '''\n    Write a python function to print a given string\n    '''\n    pass\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     swap_List([1,2,3]) ==  [3,2,1]\nassert     swap_List([2,3,4]) ==  [4,3,2]\nassert     swap_List([3,2,4]) ==  [4,3,2]\nassert     swap_List([4,3,2]) ==  [2,3,4]\n\n\ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     swap_List([1,2,3,4]) == [3,2,4,1], \"Not correct\"\nprint(\"Test 1: PASSED\")\n\nassert swap_List([1,2,3]) == [2,3,1], \"Not correct\"\nprint(\"Test 2: PASSED\")\n\nassert swap_List([1]) == [1], \"Not correct\"\nprint(\"Test 3: PASSED\")\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nswap_List([1,2,3]) \nswap_List([1,2,3,4]) \nswap_List([1,2,3,4,5]) \n\n\n\n'''\nQuestion 5:\nLevel 2\n\nQuestion:\nDefine a function which can generate a dictionary where the keys are numbers between 1 and 20 (both included) and the values are square of keys. The function should just print the values only.\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     swap_List([1,2,3,4,5]) == [1,4,2,5,3], \"incorrect\"\nassert     swap_List([1,2,3,4,5,6]) == [1,2,3,4,6,5], \"incorrect\"\n\n\ndef remove_duplicates_from_sorted_array(newList): \n    '''\n    Write a python function to remove the duplicates from a given array.\n    '''\n    pass\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     swap_List([1, 2, 3]) == [3, 2, 1]\nassert     swap_List([1, 2, 3, 4]) == [3, 2, 4, 1]\nassert     swap_List([1, 2, 3, 4, 5]) == [3, 2, 5, 4, 1]\nassert     swap_List([]) == []\nassert     swap_List([1, 2, 3, 4]) == [4, 2, 3, 1]\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     swap_List([1,2,3,4]) == [4,1,2,3]\n\n'''\nWrite a python function to reverse the whole list in a given list.\n'''\ndef reverse_List(newList):\n    '''\n    Write a python function to reverse the whole list in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef increment_List(newList):\n    '''\n    Write a python function to increment all the element in a given list by 1.\n    '''\n    pass\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     swap_List([1,2,3,4,5]) == [5,2,3,4,1], \"wrong\"\nassert swap_List([4,5,6,7]) == [7,6,5,4], \"wrong\"\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    triangle_area(1) == 3, 'Wrong output'\nassert \n    triangle_area(2) == 5, 'Wrong output'\nassert \n    triangle_area(1.5) == 5, 'Wrong output'\nassert \n    triangle_area(5.5) == 22, 'Wrong output'\nassert \n    triangle_area(7) == 11, 'Wrong output'\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     triangle_area(1) == 1.0\nassert triangle_area(2) == 1.5\nassert triangle_area(3) == 2.0\nassert triangle_area(4) == 1.5\nassert triangle_area(5) == 2.0\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     triangle_area(3) == math.sqrt(3)/2\nassert     triangle_area(6) == 1.5*math.sqrt(3)/2\nassert     triangle_area(8) == math.sqrt(3)/2\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     triangle_area(4) == 7.5, 'incorrect'\nassert     triangle_area(0) == 0, 'incorrect'\nassert     triangle_area(1) == 1, 'incorrect'\nassert     triangle_area(2) == 1.5, 'incorrect'\nassert     triangle_area(3) == 2.5, 'incorrect'\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     triangle_area(2) == 1.414\nassert     triangle_area(2.1) == 1.414\nassert     triangle_area(3) == 0.523\nassert     triangle_area(3.2) == 0.523\nassert     triangle_area(4) == 0.018\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ntriangle_area(2) == 2\n\nassert\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_First_Missing([1,2,3,4,5,6]) == 3, find_First_Missing([1,2,3,4,5,6])\nassert     find_First_Missing([1,2,3,4,5,6,7,9,10,11]) == 5, find_First_Missing([1,2,3,4,5,6,7,9,10,11])\nassert     find_First_Missing([1,2,3,4,5,6,7,9,10,11,15]) == 6, find_First_Missing([1,2,3,4,5,6,7,9,10,11,15])\nassert     find_First_Missing([1,2,3,4,5,6,7,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,85"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_First_Missing([1,2,3,4,5,7,8,9,11,12])==6, \"Wrong result\"\nassert     find_First_Missing([1,2,3,4,5,7,8,9,11,12],start=3)==9, \"Wrong result\"\nassert     find_First_Missing([1,2,3,4,5,7,8,9,11,12],end=3)==9, \"Wrong result\"\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_First_Missing([1,2,3,4]) == 2\nassert     find_First_Missing([1,2,3,5]) == 4\nassert     find_First_Missing([1,2,3,5,8]) == 6\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_First_Missing([1,2,3,4,5,6,7,8,9,10],start=0,end=len(array)-1) == 2, find_First_Missing.__doc__\nassert     find_First_Missing([1,2,3,4,5,6,7,8,9,10],start=1,end=len(array)-1) == 2, find_First_Missing.__doc__\nassert     find_First_Missing([1,2,3,4,5,6,7,8,9,10],start=0,end=len(array)-2) == 3, find_First_Missing.__doc__\nassert     find_First_Missing([1,2,3,4,5,6,7,8,9,10],start=1,end=len(array)-2) == 3, find_First_Missing.__doc__\nassert     find_First_Missing([1,2,3,4,5,6,7,8,9,10],start=2,end=len(array)-2) == 5, find_First_Missing.__doc__\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nfind_First_Missing([2,3,5,6,7]) == 1\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_First_Missing([0, 2, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15]) == 3\nassert     find_First_Missing([0, 2, 4, 5, 7, 8, 9, 10, 12, 13, 15]) == 3\nassert     find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 2\nassert     find_First_Missing([0, 2, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 2\nassert     find_First_Missing([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 3\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_First_Missing([3,4,1,2]) == 1, \"Test 1: fail\"\nassert     find_First_Missing([3,5,1,7,9]) == 2, \"Test 2: fail\"\nassert     find_First_Missing([]) == None, \"Test 3: fail\"\nassert     find_First_Missing([3,4,5,6,7]) == 1, \"Test 4: fail\"\nassert     find_First_Missing([7,8,9]) == 3, \"Test 5: fail\"\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_First_Missing([1,3,7,8,10,11,12,13,15]) == 5, \"Wrong output!\"\nassert     find_First_Missing([1,5,9,13,14,18]) == 6, \"Wrong output!\"\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     replace_spaces('') == ''\nassert     replace_spaces('Mr John Smith    ') == 'Mr%20John%20Smith'\nassert     replace_spaces('Mr.John Smith') == 'Mr%20%20John%20Smith'\nassert     replace_spaces('Mr John Smith   ') == 'Mr%20%20John%20Smith'\nassert     replace_spaces('    Mr John Smith   ') == '%20%20Mr%20John%20Smith'\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     replace_spaces(\"This is a test!\") == \"This%20is%20a%20test!\"\nassert     replace_spaces(\"This is a test. \") == \"This%20is%20a%20test. \"\nassert     replace_spaces(\"Hello world\") == \"Hello%20world\"\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     replace_spaces('hello') == 'hello'\nassert     replace_spaces('hello world') == 'hello%20world'\nassert     replace_spaces('hello   world') == 'hello%20world'\nassert     replace_spaces('hello   world   ') == 'hello%20world%20'\nassert     replace_spaces('hello    world') == 'hello%20world'\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     replace_spaces('i am a bad boy.') == 'i%20am%20a%20bad%20boy%20.'\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith\") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith\") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith\") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith\") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith\") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith\") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith\") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith\") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\n    replac"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     replace_spaces('') == ''\nassert     replace_spaces('abc') == 'abc'\nassert     replace_spaces('% %') == '%20%20'\n\n'''\n**solution:**\n\n'''\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     replace_spaces(\"Mr John Smith    \") == \"Mr%20John%20Smith\"\nassert     replace_spaces(\"    \") == \"%20\"\nassert     replace_spaces(\"John Smith     \") == \"John%20Smith\"\nassert     replace_spaces(\"Hello World\") == \"%20Hello%20World\"\nassert     replace_spaces(\"\") == \"%20\"\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     replace_spaces('')    ==     ''\nassert    replace_spaces(' ')    ==    '%20'\nassert    replace_spaces('  ')    ==    '%20'\nassert    replace_spaces('hello world')    ==    'hello%20world'\nassert    replace_spaces('hello     world')    ==    'hello%20%20world'\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert replace_spaces('This is a sample string') == 'This%20is%20a%20sample%20string'\nassert replace_spaces('This is a sample string with%20spaces') == 'This%20is%20a%20sample%20string%20with%20spaces'\n\ndef remove_spaces(string):\n    '''\n    Write a function to remove all spaces from the given string.\n    '''\n    pass\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef urlify(string):\n    '''\n    Write a function which returns a string where all spaces are '%20'\n\n    Examples:\n\n    urlify('Mr John Smith') -> 'Mr%20John%20Smith'\n    urlify('    Mr John Smith') -> '%20Mr%20John%20Smith'\n    urlify('Mr John Smith      ') -> 'Mr%20John%20Smith'\n    '''\n    pass"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Split([1, 2, 3, 4, 5, 6, 7, 8]) == "
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nassert not Split([1,2,3,4,5,6,7])\nassert not Split([1,2,3,4,5,6,7,8,9])\nassert not Split([])\nassert not Split(range(10))\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Split([0, 1, 2, 3, 4, 5, 6]) == [2, 4], \"Should be [2, 4]\"\nassert     Split([0, 1, 2, 3, 4, 5, 6, 7]) == [2, 4, 6], \"Should be [2, 4, 6]\"\nassert     Split([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [2, 4, 6, 8], \"Should be [2, 4, 6, 8]\""
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Split([1,2,3,4,5,6,7,8]) == [2,4,6,8], \"Wrong result\"\nprint(\"Passed\\n\")\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Split([1,2,3,4,5,6,7]) == [[2,4,6],[1,3,5]]\nassert     Split([0,1,2,3,4,5,6]) == [[0,2,4,6],[1,3,5]]\n\ndef Swapper(lst):\n    '''\n    Write a Python function that swaps values in a list.\n    '''\n    pass\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Split([1,2,3,4,5,6]) == [[2,4],[6]]\nassert     Split([1,2,3,4,5]) == [[2,4,6],[3,5]]\nassert     Split([1,2,3,4]) == [[2,4,6],[3]]\nassert     Split([1,2,3]) == [[2,4,6]]\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     Split([1,2,3,4,5]) == [(2,4,6), (4,8,10)]\nassert     Split([1,2,3,4,5]) == [(2,4,6), (4,8,10)]\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Split([1, 2, 3, 4, 5]) == ['1', '3', '5']\nassert    Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == ['1', '3', '5', '7', '9']\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nadj = {(0,0): {(0,1), (0,2), (0,3), (0,4), (0,5), (0,6), (0,7), (0,8), (0,9), (1,0), (1,1), (1,2), (1,3), (1,4), (1,5), (1,6), (1,7), (1,8), (1,9), (2,0), (2,1), (2,2), (2,3), (2,4), (2,5), (2,6), (2,7), (2,8), (2,9), (3,0), (3,1), (3,2), (3,3), (3,4), (3,5), (3,6), (3,7), (3,8), (3,9), (4,0), (4,1), (4,2), (4,3), (4,4), (4,5), (4,6), (4,7), (4,8), (4,9), (5,0), (5,1), (5,2), (5,3), (5,4), (5,5), (5,6), (5,7), (5,8), (5,9), (6,0), (6,1), (6,2), (6,3), (6,4), (6,5), (6,6), (6,7), (6,8), (6,9), (7,0), (7,1), (7,2), (7,3), (7,4), (7,5), (7,6), (7,7), (7,8), (7,9), (8,0), (8,1), (8,2), (8,3), (8,4), (8,5), (8,6), (8,7), (8,8), (8,9), (9,0), (9,1), (9,2), (9,3), (9,4), (9,5), (9,6), (9,7), (9,8), (9,9)}, (1,0): {(1,1), (1,2), (1,3), (1,4), (1,5), (1,6), (1,7), (1,8), (1,9), (2,0), (2,1), (2,2), (2,3), (2,4), (2,5), (2,6), (2,7), (2,8), (2,9), (3,0), (3,1), (3,2), (3,3), (3,4), (3,5), (3,6), (3,7), (3,8), (3,9), (4,0), (4,1), (4,2), (4,3), (4,4), (4,5), (4,6), (4,7), (4,8), (4,9), (5,0), (5,1), (5,2), (5,3), (5,4), (5,5), (5,6), (5,7), (5,8), (5,9), (6,0), (6,1), (6,2), (6,3), (6,4), (6,5), (6,6), (6,7), (6,8), (6,9), (7,0), (7,1), (7,2), (7,3), (7,4), (7,5), (7,6), (7,7), (7,8), (7,9), (8,0), (8,1), (8,2), (8,3), (8,4), (8,5), (8,6), (8,7), (8,8), (8,9), (9,0), (9,1), (9,2), (9,3), (9,4), (9,5), (9,6), (9,7), (9,8), (9,9)}\n    }, \n    (1,1): {(1,1), (1,2), (1,3), (1,4), (1,5), (1,6), (1,7), (1,8), (1,9), (2,0), (2,1), (2,2), (2,3), (2,4), (2,5), (2,6), (2,7), (2,8), (2,9), (3,0), (3,1), (3,2), (3,3), (3,4), (3,5), (3,6), (3,7), (3,8), (3,9), (4,0), (4,1), (4,2), (4,3), (4,4), (4,5), (4,6), (4,7), (4,8), (4,9), (5,0), (5,1), (5,2), (5,3), (5,4), (5,5), (5,6), (5,7), (5,8), (5,9), (6,0), (6,1), (6,2), (6,3), (6,4), (6,5), (6,6), (6,7), (6,8), (6,9), (7,0), (7,1), (7,2), (7,3), (7,4), (7,5), (7,6), (7,7), (7,8), (7,9), (8,0), (8,1), (8,2), (8,3), (8,4), (8,5), (8,6), (8,7), (8,8), (8,9), (9,0), (9,1), (9,2), (9,3), (9,4), (9,5), (9,6), (9,7), (9,8), (9,9)}, \n    (1,2): {(1,2), (1,3), (1,4), (1,5), (1,6), (1,7), (1,8), (1,9), (2,0), (2,1), (2,2), (2,3), (2,4), (2,5), (2,6), (2,7), (2,8), (2,9), (3,0), (3,1), (3,2), (3,3), (3,4), (3,5), (3,6), (3,7), (3,8), (3,9), (4,0), (4,1), (4,2), (4,3), (4,4), (4,5), (4,6), (4,7), (4,8), (4,9), (5,0), (5,1), (5,2), (5,3), (5,4), (5,5), (5,6), (5,7), (5,8), (5,9), (6,0), (6,1), (6,2), (6,3), (6,4), (6,5), (6,6), (6,7), (6,8), (6,9), (7,0), (7,1), (7,2), (7,3), (7,4), (7,5), (7,6), (7,7), (7,8), (7,9), (8,0), (8,1), (8,2), (8,3), (8,4), (8,5), (8,6), (8,7), (8,8), (8,9), (9,0), (9,1), (9,2), (9,3), (9,4), (9,5), (9,6), (9,7), (9,8), (9,9)}, \n    (1,3): {(1,3), (1,4), (1,5), (1,6), (1,7), (1,8), (1,9), (2,0), (2,1), (2,2), (2,3), (2,4), (2,5), (2,6), (2,7), (2,8), (2,9), (3,0), (3,1), (3,2), (3,3), (3,4), (3,5), (3,6), ("
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     adjac((0, 0)) == [(0, 0), (0, 1), (1, 0), (1, 1)], \"Wrong Answer\"\nassert     adjac((1, 0)) == [(1, 0), (1, 1)], \"Wrong Answer\"\nassert     adjac((2, 0)) == [(2, 0), (2, 1)], \"Wrong Answer\"\nassert     adjac((3, 0)) == [(3, 0), (3, 1), (3, 2), (3, 3), (4, 0), (4, 1), (4, 2), (4, 3), (5, 0), (5, 1), (5, 2), (5, 3), (6, 0), (6, 1), (6, 2), (6, 3), (7, 0), (7, 1), (7, 2), (7, 3), (8, 0), (8, 1), (8, 2), (8, 3)], \"Wrong Answer\"\nassert     adjac((9, 0)) == [(9, 0), (9, 1), (9, 2), (9, 3), (9, 4), (9, 5), (9, 6), (9, 7), (9, 8), (9, 9)], \"Wrong Answer\"\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     adjac((3, 5, 1)) == [[(3, 4, 2)], [(3, 5, 1)], [(4, 5, 1)], [(4, 6, 1)], [(5, 6, 1)], [(5, 5, 1)]]\nassert     adjac((3, 5, 1), [(4, 5, 1)]) == [[(3, 4, 2)]]\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert (adjac((0, 0), adjac((0, 1))) == [(0, 0), (0, 1)]) \nassert (adjac((1, 0), adjac((2, 0))) == [(1, 0), (2, 0)])\nassert (adjac((0, 1), adjac((0, 0))) == []) \nassert (adjac((1, 1), adjac((1, 0))) == [(1, 1), (1, 0)])\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert \nassert \nassert\n\n'''\n[(2, 1), (3, 1), (1, 1), (0, 1), (1, 2), (2, 2), (3, 2), (4, 2), (0, 2), (1, 3), (2, 3), (3, 3), (4, 3), (1, 4), (2, 4), (3, 4), (4, 4)]\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     replace_spaces( \"a b c\" ) == \"a_b_c\", \"test_correct_replace_spaces fail\"\nassert replace_spaces( \" a b c \" ) == \" a_b_c\", \"test_correct_replace_spaces fail\"\nassert replace_spaces( \"a b  c\" ) == \"a_b_c\", \"test_correct_replace_spaces fail\"\nassert replace_spaces( \" a b c\" ) == \"a_b_c\", \"test_correct_replace_spaces fail\"\nassert replace_spaces( \" a b c \" ) == \"a_b_c\", \"test_correct_replace_spaces fail\"\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    replace_spaces(\"\") == \"\"\n    replace_spaces(\" Hello World!\") == \"helloWorld_\"\n    replace_spaces(\" Hello world! \") == \"hello_world_\"\n    replace_spaces(\"Hello  World  \") == \"hello_world_\"\n    replace_spaces(\"Hello  World  \") == \"hello_world_\"\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     replace_spaces('spaces') =='spa_ces'\nassert     replace_spaces('spaces_') =='spa_ces'\nassert     replace_spaces('spaces_') =='spa_ces'\nassert     replace_spaces('spaces_') =='spa_ces'\nassert     replace_spaces('spaces') =='sp_aces'\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n'''\nGiven a string, return a string with the amount of uppercase letters and lowercase letters replaced by an asterisk.\n'''\ndef get_capitalization(text):\n    '''\n    Write a function to return the number of capital letters and lowercase letters.\n    '''\n    pass\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nreplace_spaces(' ') == '_', \"Test 1 Failed\"\nassert replace_spaces(' ') == '_', \"Test 2 Failed\"\nassert replace_spaces('abc') == 'abc', \"Test 3 Failed\"\nassert replace_spaces('abcdef') == 'abcdef', \"Test 4 Failed\"\nassert replace_spaces('abc def') == 'abc_def', \"Test 5 Failed\"\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     replace_spaces(r\"I'm \\n\\t  \\t\\r ok \\t\\f\") == r\"I'm__ok_\"\nassert     replace_spaces(r\"I'm\\nok\\t\") == r\"I'm___ok\"\nassert     replace_spaces(r\"I'm\\nok\\t\\n\") == r\"I'm_ok_\"\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     replace_spaces(\"Hello World\") == \"hello_world\"\nassert     replace_spaces(\"hello world\") == \"hello_world\"\nassert     replace_spaces(\"hello world\") == \"hello_world\"\nassert     replace_spaces(\"hello world\") == \"hello_world\"\nassert     replace_spaces(\"hello world\") == \"hello_world\"\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     replace_spaces('') == ''\nassert     replace_spaces(' ') == '_'\nassert     replace_spaces('hello world') == 'hello_world'\nassert     replace_spaces('Hello World!') == 'Hello_World'\nassert     replace_spaces('   Hello World!   ') == 'Hello_World'\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     replace_spaces('Hello_World') == 'Hello_World','replace_spaces failed'\nassert     replace_spaces('Hello_ World') == 'Hello_World','replace_spaces failed'\nassert     replace_spaces('_Hello World_') == 'Hello World','replace_spaces failed'\nassert     replace_spaces('__Hello__World__') == 'Hello__World','replace_spaces failed'\nassert     replace_spaces('_Hello_World_') == 'Hello_World','replace_spaces failed'\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     move_zero([5, 6, 0, 0, 0, 0, 9]) == [5, 6, 9, 0, 0, 0, 0]\nassert     move_zero([5, 6, 0, 0, 0, 0, 9, 0, 1]) == [5, 6, 9, 0, 0, 0, 1, 0, 0]\nassert     move_zero([]) == []\nassert     move_zero([1, 2, 3]) == [1, 2, 3]\nassert     move_zero([0, 0, 1, 2, 3, 4]) == [1, 2, 3, 4, 0, 0]\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     move_zero([1,2,3,0,0,0]) == [1,2,3,0,0,0], \"Wrong result\"\nassert     move_zero([1,2,0,3,4,0]) == [1,2,0,3,4,0], \"Wrong result\"\nassert     move_zero([1,2,3,0,0,0,0,1,2]) == [1,2,3,0,0,0,0,1,2], \"Wrong result\"\n\ndef remove_duplicates(num_list):\n    '''\n    Write a python function to remove duplicates from a given list.\n    '''\n    pass\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     move_zero([0, 0, 0, 4, 4, 5, 5, 5, 8, 8, 8, 8]) == [0, 4, 5, 5, 8, 8, 8, 8, 0, 0, 0, 0]\nassert     move_zero([0, 0, 0, 4, 4, 5, 5, 5, 8, 8, 8, 8]) == [0, 8, 8, 8, 0, 0, 0, 0, 0, 4, 4, 5, 5, 5, 5, 5]\nassert     move_zero([0, 0, 0, 4, 4, 5, 5, 5, 8, 8, 8, 8]) == [0, 8, 8, 8, 0, 0, 0, 0, 0, 0, 4, 4, 5, 5, 5, 5]\nassert     move_zero([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nassert     move_zero([]) == []\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     move_zero([1, 0, 1, 0, 1]) == [1, 1, 1, 0, 1]\nassert     move_zero([0, 1, 0, 1]) == [1, 0, 1, 0]\nassert     move_zero([0, 0, 0, 1]) == [1, 0, 0, 1]\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     move_zero([0, 9, 0, 3, 2, 0, 6, 0, 0]) == [0, 3, 2, 9, 6, 0, 0, 0, 0]\nassert     move_zero([0, 3, 2, 9]) == [0, 3, 2, 9]\nassert     move_zero([]) == []\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     move_zero([0, 1, 0, 2, 3, 0, 4, 5, 0, 6]) == [1, 2, 3, 4, 5, 6, 0, 0, 0, 0], \"Move Zeroes\"\nassert     move_zero([0, 0, 1, 2, 3, 0, 4, 5, 0, 6]) == [1, 2, 3, 4, 5, 6, 0, 0, 0, 0], \"Move Zeroes\"\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     pair_xor_Sum([1,2,3,4,5]) == 14\nassert pair_xor_Sum([3,4,5,6,7]) == 24\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     pair_xor_Sum([0,2,3,1,5]) == 5\nassert     pair_xor_Sum([0,2,3,1,5,6]) == 6\nassert     pair_xor_Sum([0,2,3,1,5,6,7]) == 5\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     pair_xor_Sum([1,3,4,6],4) == 13, \"Wrong Answer.\"\nassert     pair_xor_Sum([1,3,4,6,8],4) == 13, \"Wrong Answer.\"\nassert     pair_xor_Sum([1,3,4,6,8,10],4) == 17, \"Wrong Answer.\"\nassert     pair_xor_Sum([1,3,4,6,8,10,13],4) == 17, \"Wrong Answer.\"\nassert     pair_xor_Sum([2,4,8,10,12],4) == 18, \"Wrong Answer.\"\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \npair_xor_Sum([1,2,3,4,5]) == 5\nassert \npair_xor_Sum([0,1,2,3,4]) == 7\nassert \npair_xor_Sum([0,1,2,3,4,5]) == 10"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     pair_xor_Sum([3,1,3,2,1],5) == 4\nassert pair_xor_Sum([4,6,3,4,2],4) == 5\n\ndef pair_xor_2Sum(arr,n) : \n    '''\n    Write a python function to find all pairs of numbers whose sum is equal to given number.\n    '''\n    pass\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     pair_xor_Sum([1,2,3,4,5,6,7,8,9]) == (1,2)\nassert pair_xor_Sum([0,0,0,0,0]) == (0,0)\nassert pair_xor_Sum([1,2,3,4,5,6,7,8,9]) == (15,15)\nassert pair_xor_Sum([1,2,3,4,5,6,7,8,9]) == (0,0)\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     pair_xor_Sum([1,2,3],3) == 5 \nassert     pair_xor_Sum([2,3,4],5) == 5 \nassert     pair_xor_Sum([1,2,3],4) == 5 \nassert     pair_xor_Sum([1,2,3],5) == 5 \nassert     pair_xor_Sum([3,4,5],6) == 13 \n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\npair_xor_Sum([2,4,6,8,10,12,14,16],6) == 32\npair_xor_Sum([1,2,3,4,5],2) == 6"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nimport heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    pass\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     heap_sort([1,2,3,4]) == sorted([1,2,3,4])\nassert     heap_sort([1,2,3,4,5,6,7]) == sorted([1,2,3,4,5,6,7])\nassert     heap_sort([8,9,10,1,2,3,4]) == sorted([1,2,3,4,8,9,10])\nassert     heap_sort([1,2,3,4,5,6,7]) == sorted([1,2,3,4,5,6,7])\nassert     heap_sort([]) == []\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef heap_sort_with_small_element(iterable):\n    '''\n    Write a function to sort the given list.\n    Use the heapq to implement heap sort.\n    Heap is a special kind of binary tree.\n    '''\n    pass\n\ndef heap_sort_with_small_element_by_key(iterable):\n    '''\n    Write a function to sort the given list.\n    Use the heapq to implement heap sort.\n    Use the key argument of heapq.heapify() function to specify\n    how to sort the element.\n    '''\n    pass\n\ndef heap_sort_with_pivot(iterable):\n    '''\n    Write a function to sort the given list.\n    Use the heapq to implement heap sort.\n    '''\n    pass\n\ndef heap_sort_with_pivot_by_key(iterable):\n    '''\n    Write a function to sort the given list.\n    Use the heapq to implement heap sort.\n    Use the key argument of heapq.heapify() function to specify\n    how to sort the element.\n    '''\n    pass\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nheap_sort([9, 8, 5, 4, 3, 2, 1, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8]\nassert \nheap_sort([3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == [3, 3, 3, 3, 3, 3, 3, 3, 3, 3]\nassert \nheap_sort([]) == []\nassert \nheap_sort([1]) == [1]\nassert \nheap_sort([]) == []\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     heap_sort([1, 5, 3, 2, 7, 4]) == [1, 2, 3, 4, 5, 7]\nassert     heap_sort([5, 1, 2, 4, 3]) == [1, 2, 3, 4, 5]\nassert     heap_sort([1, 1, 1, 2, 3, 4, 4, 5, 5, 6, 7]) == [1, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5, 6, 7]\nassert     heap_sort([1, 1, 1, 2, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8]) == [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8]\nassert     heap_sort([1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     heap_sort([1, 2, 3, 4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7], \"Wrong\"\nassert     heap_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) ==\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], \"Wrong\"\nassert     heap_sort(\n        [2, 3, 4, 1, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) ==\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], \"Wrong\"\nassert     heap_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,21]) ==\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,21], \"Wrong\"\n\nprint('PASSED')\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef merge_sort(iterable):\n    '''\n    Write a function that merges the elements of a list into a single sorted list.\n    '''\n    pass\n\ndef merge(A, left, mid, right):\n    '''\n    Merge function\n    '''\n    pass\n\ndef merge_sort(iterable):\n    '''\n    Write a function that merges the elements of a list into a single sorted list.\n    '''\n    pass\n\ndef partition(iterable, low, high):\n    '''\n    Write a function that returns a list of the same length as the iterable, where\n    the i-th element is a value from the iterable used for partitioning.\n    '''\n    pass\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     noprofit_noloss(actual_cost = 100, sale_amount = 100) == True \nassert     noprofit_noloss(actual_cost = 200, sale_amount = 200) == False \nassert     noprofit_noloss(actual_cost = 300, sale_amount = 200) == True "
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     noprofit_noloss(8,5) == False, \"should return False\"\nassert     noprofit_noloss(20,5) == True, \"should return True\"\nassert     noprofit_noloss(11,12) == False, \"should return False\"\nassert     noprofit_noloss(0,0) == True, \"should return True\"\nassert     noprofit_noloss(-1,-1) == False, \"should return False\"\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     noprofit_noloss(actual_cost = 40,sale_amount = 20) == True\nassert     noprofit_noloss(actual_cost = 20,sale_amount = 20) == True\nassert     noprofit_noloss(actual_cost = 20,sale_amount = 40) == True\nassert     noprofit_noloss(actual_cost = 20,sale_amount = 60) == False\nassert     noprofit_noloss(actual_cost = 20,sale_amount = 60) == False\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nnoprofit_noloss(actual_cost=0.0,sale_amount=0.0)\nnoprofit_noloss(actual_cost=1.0,sale_amount=1.0)\nnoprofit_noloss(actual_cost=1.1,sale_amount=1.1)\nnoprofit_noloss(actual_cost=2.0,sale_amount=2.0)\nnoprofit_noloss(actual_cost=2.5,sale_amount=2.5)\nnoprofit_noloss(actual_cost=3.0,sale_amount=3.0)\nnoprofit_noloss(actual_cost=3.0,sale_amount=4.0)\nnoprofit_noloss(actual_cost=4.0,sale_amount=4.0)\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     noprofit_noloss(actual_cost = 6, sale_amount = 3) == False\nassert     noprofit_noloss(actual_cost = 1, sale_amount = 4) == True"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert not noprofit_noloss(1000,1000)\nassert not noprofit_noloss(1000,0)\nassert not noprofit_noloss(0,1000)\nassert not noprofit_noloss(0,0)\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     noprofit_noloss(12,13)    == False, \"Expected: False, Got: True\"\nassert     noprofit_noloss(22,13)    == False, \"Expected: False, Got: True\"\nassert     noprofit_noloss(22,11)    == True, \"Expected: True, Got: False\"\nassert     noprofit_noloss(123,11)    == True, \"Expected: True, Got: False\"\nassert     noprofit_noloss(1,11)    == False, \"Expected: False, Got: True\"\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     noprofit_noloss(12300,12300) == True, \"Actual: True, Expected: True\"\nassert     noprofit_noloss(5000,2000) == False, \"Actual: False, Expected: False\"\nassert     noprofit_noloss(2,1000) == True, \"Actual: True, Expected: True\"\nassert     noprofit_noloss(1,1000) == True, \"Actual: True, Expected: True\"\nassert     noprofit_noloss(50000,0) == True, \"Actual: True, Expected: True\"\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nactual_cost = 200\nsale_amount = 150\nnoprofit_noloss(actual_cost,sale_amount)\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     noprofit_noloss(actual_cost=50, sale_amount=10) == False\nassert     noprofit_noloss(actual_cost=50, sale_amount=50) == False\nassert     noprofit_noloss(actual_cost=100, sale_amount=20) == True\nassert     noprofit_noloss(actual_cost=100, sale_amount=40) == True\nassert     noprofit_noloss(actual_cost=100, sale_amount=60) == False\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     wind_chill(10, 25) == 37.22\nassert     wind_chill(8, 23) == 32.37\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     wind_chill(0, 0) == 0\nassert     wind_chill(0, 212) == 32.22\nassert     wind_chill(32, 0) == -1.11\nassert     wind_chill(32, 212) == 50.00\n\ndef print_dashes(n):\n    '''\n    Write a function to print the specified number of dashes.\n    '''\n    pass\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     wind_chill(10,30) == 13.33\nassert     wind_chill(10,55) == 13.32\nassert     wind_chill(8,65) == 10.37\nassert     wind_chill(7,40) == 8.74\nassert     wind_chill(7,45) == 9.62\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     wind_chill(3,20)==None \nassert     wind_chill(1.7,4)==None\nassert     wind_chill(0.1,20)==None\nassert     wind_chill(0.5,20)==None\nassert     wind_chill(1.5,20)==None\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     wind_chill(80,20) == 7\nassert wind_chill(80,25) == 7\nassert wind_chill(80,30) == 7\nassert wind_chill(80,45) == 7\n\ndef wind_chill_lindemann(v,t):\n    '''\n    Write a function to calculate the wind chill index (lindemann) rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    pass\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     wind_chill(0.1, 0) == -1\nassert     wind_chill(0, 30) == -1\nassert     wind_chill(20, 25) == -1\nassert     wind_chill(0.1, 10) == -15.0\nassert     wind_chill(0.1, 5) == -18.0\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nv = 10\nt = 50\nchill = wind_chill(v, t)\nassert type(chill) == int\nassert chill == 18\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     wind_chill(1,1) == 25.37\nassert     wind_chill(1,0) == 32.78\nassert     wind_chill(1,4) == 35.62\nassert     wind_chill(10,1) == 11.13\nassert     wind_chill(10,0) == 10.65\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     wind_chill(3, 0) == 32\nassert     wind_chill(2, -2) == 47\nassert     wind_chill(10, 5) == 51\nassert wind_chill(0, 30) == -1\nassert wind_chill(10, -1) == -1\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef main():\n    print(wind_chill(22,21))\n    print(wind_chill(16,19))\n    print(wind_chill(0,21))\n    print(wind_chill(10,15))\n    print(wind_chill(12,19))\n    print(wind_chill(18,22))\n    print(wind_chill(19,21))\n    print(wind_chill(8,21))\n    print(wind_chill(10,20))\n    print(wind_chill(2,20))\n    print(wind_chill(5,16))\n    print(wind_chill(8,15))\n    print(wind_chill(8,4))\n    print(wind_chill(8,2))\n    print(wind_chill(8,15))\n\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sample_nam([]) == 0, 'Empty list'\nassert     sample_nam(['mike', 'tom', 'jack' ]) == 6, 'Lists'\nassert     sample_nam(['mike', 'tom', 'jack', 'billy' ]) == 7, 'Lists'\nassert     sample_nam(['mike', 'tom', 'jack', 'billy','mike', 'tom', 'jack' ]) == 11, 'Lists'\nassert     sample_nam(['mike', 'tom', 'jack', 'billy','mike', 'tom', 'jack', 'billy','mike', 'tom', 'jack' ]) == 14, 'Lists'\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sample_nam([]) == 0,'return 0'\nassert     sample_nam(['']) == 0,'return 0'\nassert     sample_nam(['A', 'a']) == 0,'return 0'\nassert     sample_nam(['A', 'a', 'Z', 'z']) == 0,'return 0'\nassert     sample_nam(['A', 'a', 'Z', 'z', 'B', 'b']) == 5,'return 5'\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sample_nam([\"Jonh\", \"Ron\", \"Han\"]) == 8\nassert     sample_nam([\"Ron\", \"Han\", \"Jonh\"]) == 5\nassert     sample_nam([\"Ron\", \"Han\", \"Ron\", \"Ron\", \"Ron\", \"Ron\", \"Ron\", \"Ron\"]) == 8\nassert     sample_nam([\"Ron\", \"Ron\", \"Ron\", \"Ron\", \"Ron\", \"Ron\", \"Ron\", \"Ron\", \"Ron\", \"Ron\", \"Ron\", \"Ron\", \"Ron\", \"Ron\", \"Ron\", \"Ron\", \"Ron\", \"Ron\"]) == 16\nassert     sample_nam([\"Ron\", \"Ron\", \"Ron\", \"Ron\", \"Ron\", \"Ron\", \"Ron\", \"Ron\", \"Ron\", \"Ron\", \"Ron\", \"Ron\", \"Ron\", \"Ron\", \"Ron\", \"Ron\", \"Ron\", \"Ron\", \"Ron\"]) == 24\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sample_nam(['John', 'Tom', 'Jane', 'Paul', 'George', 'Bob', 'Rick', 'Julia', 'Kelly', 'Manny', 'Julie']) == 6, \"WRONG\"\nassert     sample_nam(['John', 'Tom', 'Jane', 'Paul', 'George', 'Bob', 'Rick', 'Julia', 'Kelly', 'Manny', 'Julie', 'Jennifer', 'Michael', 'Michael', 'Emily', 'Michael']) == 11, \"WRONG\"\nassert     sample_nam(['Jane', 'Bob', 'Carl', 'Carl', 'John', 'John', 'Jane', 'Paul', 'John', 'John', 'Mary', 'Carl', 'Carol', 'Carol', 'Carol', 'Carl']) == 5, \"WRONG\"\nassert     sample_nam(['Jack', 'John', 'Bill', 'John', 'Mary', 'John', 'John', 'John', 'Jack', 'Mary', 'Bill', 'Bill', 'Bill', 'Mary', 'Jack', 'Bill', 'John', 'Bill', 'John', 'John', 'Mary', 'John', 'John', 'Jack', 'John', 'Bill', 'Bill', 'Mary', 'John', 'John', 'John', 'Jack', 'John', 'John', 'John', 'John', 'Mary', 'John', 'Bill', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John', 'John'"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sample_nam(['abc', 'xyz', 'asdf', 'qwer', 'abcef', 'ab_cd']) ==     8\nassert     sample_nam(['', 'asdf', 'qwer', 'abcef', 'ab_cd']) ==     8\nassert     sample_nam([]) == 0\nassert     sample_nam(['']) == 0\nassert     sample_nam(['ab_cd']) == 0\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nsample_nam(['daniel', 'bob', 'Paul', 'Tim']) == 4\nassert sample_nam(['daniel', 'Bob', 'Paul', 'Tim']) == 3\nassert sample_nam(['daniel', 'bob', 'paul', 'tim']) == 0\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sample_nam([]) == 0, 'Empty list should return 0'\nassert     sample_nam(['a', 'b', 'c']) == 3, 'Should return 3'\nassert     sample_nam(['a', 'A', 'b', 'c']) == 4, 'Should return 4'\nassert     sample_nam(['a', 'A', 'b', 'a', 'c']) == 5, 'Should return 5'\nassert     sample_nam(['a', 'b', 'c', 'a', 'b', 'c']) == 6, 'Should return 6'\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sample_nam(['Joe', 'Freda', 'Gumby']) == 2, \\\n    'output incorrect'\nassert sample_nam(['Abby', 'Freda', 'Gumby']) == 3, \\\n    'output incorrect'\nassert sample_nam(['Bob', 'Freda', 'Gumby']) == 2, \\\n    'output incorrect'\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sample_nam([]) == 0\nassert     sample_nam(['pomidor', 'buroa', 'god']) == 9\nassert     sample_nam(['pomidor', 'buroa', 'god', 'god', 'god']) == 8\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_parenthesis(\"(123)\") == \"123\", \"Wrong answer. Your function should remove the parenthesis and return 123\"\nassert     remove_parenthesis(\"(123) (456)\") == \"123456\", \"Wrong answer. Your function should remove the parenthesis and return 123456\"\nassert     remove_parenthesis(\"(123) (456) (789)\") == \"123456789\", \"Wrong answer. Your function should remove the parenthesis and return 123456789\"\nassert     remove_parenthesis(\"(123) (456) (789) (0)\") == \"123456789\", \"Wrong answer. Your function should remove the parenthesis and return 123456789\"\nassert     remove_parenthesis(\"(123) (456) (789)\") == \"123456\", \"Wrong answer. Your function should remove the parenthesis and return 123456\"\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_parenthesis(\"abc\") == \"abc\", \"Should return abc\"\nassert     remove_parenthesis(\"abc(def)\") == \"abc\", \"Should return abc\"\nassert     remove_parenthesis(\"abc(def)ghi\") == \"abc(def)ghi\", \"Should return abc(def)ghi\"\nassert     remove_parenthesis(\"abc(def)ghi(jkl)mno\") == \"abc(def)ghi\", \"Should return abc(def)ghi\"\nassert     remove_parenthesis(\"abc(def)ghi(jkl)mno)\") == \"abc(def)ghi\", \"Should return abc(def)ghi\"\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_parenthesis(\"(())\") == \"()\"\nassert     remove_parenthesis(\"()())\") == \"\"\nassert     remove_parenthesis(\"((()))\") == \"\"\nassert     remove_parenthesis(\"(()(()))\") == \"\"\nassert     remove_parenthesis(\"((()()))\") == \"\"\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_parenthesis('hi(i am leetcode)(s)') == 'hi i am leetcode s'\nassert     remove_parenthesis('(hi)(i am leetcode)') == 'hi i am leetcode'\nassert     remove_parenthesis('hi(i am leetcode)') == 'hi i am leetcode'\nassert     remove_parenthesis('hi)') == 'hi)'\nassert     remove_parenthesis('(hi)') == 'hi)'\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_parenthesis(\"[(0,1),(0,3),(1,3),(2,3)]\") == None\nassert     remove_parenthesis(\"(0,1),(0,3),(1,3),(2,3)\") == None\nassert     remove_parenthesis(\"[(0,1),(0,3)]\") == None\nassert     remove_parenthesis(\"[(0,1),(0,3)\") == None\nassert     remove_parenthesis(\"[(0,1),(0,3),(1,3)]\") == None\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_parenthesis('aa(bb)cc') == 'aabbcc'\nassert     remove_parenthesis('a(b)c') == 'ac'\nassert     remove_parenthesis('aa(bb)cc') == 'aabbcc'\nassert     remove_parenthesis('(((a)(b)c)d)') == 'abcd'\nassert     remove_parenthesis('(a(b)c)d') == 'acd'\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_parenthesis(\"(123)+1\") == \"123+1\"\nassert     remove_parenthesis(\"(abc)123+1\") == \"abc+123+1\"\nassert     remove_parenthesis(\"(abc)123(def)456+1\") == \"abc+123+def+456+1\"\nassert     remove_parenthesis(\"(abc)123(def)456(ghi)\") == \"abc+123+def+456+ghi\"\nassert     remove_parenthesis(\"(abc)123(def)456(ghi) + (jkl)\") == \"abc+123+def+456+ghi+jkl\"\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_parenthesis(\"hello (hi) world!\") == \"hello hi world!\"\nassert     remove_parenthesis(\"hello (hi) world (how are you)!\") == \"hello hi world how are you!\"\nassert     remove_parenthesis(\"hi (hello) world (how are you)!\") == \"hi world how are you!\"\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_parenthesis(\"(1234) (1234) (1234) (1234)\") == \"1234123412341234123412341234\"\nassert     remove_parenthesis(\"(1234) (1234) (1234)\") == \"123412341234123412341234\"\nassert     remove_parenthesis(\"(1234)\") == \"1234\"\nassert     remove_parenthesis(\"1234\") == \"1234\"\nassert     remove_parenthesis(\"1234)\") == \"1234\"\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_parenthesis('(abc)') == 'abc'\nassert remove_parenthesis('(abc) (def)') == 'abc def'\nassert remove_parenthesis('(abc) (def) (ghi)') == 'abc def ghi'\nassert remove_parenthesis('(abc) (def) (ghi) jkl') == 'abc def ghi jkl'\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef is_nonagonal(n):\n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n * (n + 1) / 2\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef is_nonagonal_simple(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    \n    >>> is_nonagonal_simple(1)\n    1\n    >>> is_nonagonal_simple(2)\n    2\n    >>> is_nonagonal_simple(3)\n    3\n    >>> is_nonagonal_simple(4)\n    4\n    >>> is_nonagonal_simple(5)\n    5\n    >>> is_nonagonal_simple(6)\n    6\n    >>> is_nonagonal_simple(7)\n    7\n    >>> is_nonagonal_simple(8)\n    8\n    >>> is_nonagonal_simple(9)\n    9\n    >>> is_nonagonal_simple(10)\n    10\n    >>> is_nonagonal_simple(11)\n    11\n    >>> is_nonagonal_simple(12)\n    12\n    >>> is_nonagonal_simple(13)\n    13\n    >>> is_nonagonal_simple(14)\n    14\n    >>> is_nonagonal_simple(15)\n    15\n    >>> is_nonagonal_simple(16)\n    16\n    >>> is_nonagonal_simple(17)\n    17\n    >>> is_nonagonal_simple(18)\n    18\n    >>> is_nonagonal_simple(19)\n    19\n    >>> is_nonagonal_simple(20)\n    20\n    >>> is_nonagonal_simple(21)\n    21\n    >>> is_nonagonal_simple(22)\n    22\n    >>> is_nonagonal_simple(23)\n    23\n    >>> is_nonagonal_simple(24)\n    24\n    >>> is_nonagonal_simple(25)\n    25\n    >>> is_nonagonal_simple(26)\n    26\n    >>> is_nonagonal_simple(27)\n    27\n    >>> is_nonagonal_simple(28)\n    28\n    >>> is_nonagonal_simple(29)\n    29\n    >>> is_nonagonal_simple(30)\n    30\n    >>> is_nonagonal_simple(31)\n    31\n    >>> is_nonagonal_simple(32)\n    32\n    >>> is_nonagonal_simple(33)\n    33\n    >>> is_nonagonal_simple(34)\n    34\n    >>> is_nonagonal_simple(35)\n    35\n    >>> is_nonagonal_simple(36)\n    36\n    >>> is_nonagonal_simple(37)\n    37\n    >>> is_nonagonal_simple(38)\n    38\n    >>> is_nonagonal_simple(39)\n    39\n    >>> is_nonagonal_simple(40)\n    40\n    >>> is_nonagonal_simple(41)\n    41\n    >>> is_nonagonal_simple(42)\n    42\n    >>> is_nonagonal_simple(43)\n    43\n    >>> is_nonagonal_simple(44)\n    44\n    >>> is_nonagonal_simple(45)\n    45\n    >>> is_nonagonal_simple(46)\n    46\n    >>> is_nonagonal_simple(47)\n    47\n    >>> is_nonagonal_simple(48)\n    48\n    >>> is_nonagonal_simple(49)\n    49\n    >>> is_nonagonal_simple(50)\n    50\n    >>> is_nonagonal_simple(51)\n    51\n    >>> is_nonagonal_simple(52)\n    52\n    >>> is_nonagonal_simple(53)\n    53\n    >>> is_nonagonal_simple(54)\n    54\n    >>> is_nonagonal_simple(55)\n    55\n    >>> is_nonagonal_simple(56)\n    56\n    >>> is_nonagonal_simple(57)\n    57\n    >>> is_nonagonal_simple(58)\n    58\n    >>> is_nonagonal_simple(59)\n    59\n    >>> is_nonagonal_simple(60)\n    60\n    >>> is_nonagonal_simple(61)\n    61\n    >>> is_nonagonal_simple(62)\n    62\n    >>> is_nonagonal_simple(63)\n    63\n    >>> is_nonagonal_simple(64)\n    64\n    >>> is_nonagonal_simple(65)\n    65\n    >>> is_nonagonal_simple(66)\n    66\n    >>> is_nonagonal_simple(67)\n    67\n    >>> is_nonagonal_simple(68)\n    68\n    >>> is_nonagonal_simple(69)\n    69\n    >>> is_nonagonal_simple(70)\n    70\n    >>> is_nonagonal_simple(71)\n    71\n    >>> is_nonagonal_simple(72)\n    72\n    >>> is_nonagonal_simple(73)\n    73\n    >>> is_nonagonal_simple(74)\n    74\n    >>> is_nonagonal_simple(75)\n    75\n    >>> is_nonagonal_simple(76)\n    76\n    >>> is_nonagonal_simple(77)\n    77\n    >>> is_nonagonal_simple(78)\n    78\n    >>> is_nonagonal_simple(79)\n    79\n    >>> is_nonagonal_simple(80)\n    80\n    >>> is_nonagonal_simple(81)\n    81\n    >>> is_nonagonal_simple(82)\n    82\n    >>> is_nonagonal_simple(83)\n    83\n    >>> is_nonagonal_simple(84)\n    84\n    >>> is_nonagonal_simple(85)\n    85\n    >>> is_nonagonal_simple(86)\n    86\n    >>> is_nonagonal_simple(87)\n    87\n    >>> is_nonagonal_simple(88)\n    88\n    >>> is_nonagonal_simple(89)\n    89\n    >>> is_nonagonal_simple(90)\n    90\n    >>> is_nonagonal_simple(91)\n    91\n    >>> is_nonagonal_simple(92)\n    92\n    >>> is_nonagonal_simple(93)\n    93\n    >>> is_nonagonal_simple(94)\n    94\n    >>> is_nonagonal_simple(95)\n    95\n    >>> is_nonagonal_simple(96)\n    96\n    >>> is_nonagonal_simple(97)\n    97\n    >>> is_nonagonal_simple(98)\n    98\n    >>> is_nonagonal_simple(99)\n    99\n    >>> is_nonagonal_simple(100)\n    100\n    >>> is_nonagonal_simple(101)\n    101\n    >>> is_nonagonal_simple(102)\n    102\n    >>> is_nonagonal_simple(103)\n    103\n    >>> is_nonagonal_simple(104)\n    104\n    >>> is_nonagonal_simple(105)\n    105\n    >>> is_nonagonal_simple(106)\n    106\n    >>> is_nonagonal_simple(107)\n    107\n    >>> is_nonagonal_simple(108)\n    108\n    >>> is_nonagonal_simple(109)\n    109\n    >>> is_nonagonal_simple(110)\n    110\n    >>> is_nonagonal_simple(111)\n    111\n    >>> is_nonagonal_simple(112)\n    112\n    >>> is_nonagonal_simple(113)\n    113\n    >>> is_nonagonal_simple(114)\n    114\n    >>> is_nonagonal_simple(115)\n    115\n    >>> is_nonagonal_simple(116)\n    116\n    >>> is_nonagonal_simple(117)\n    117\n    >>> is_nonagonal_simple(118)\n    118\n    >>> is_nonagonal_simple(119)\n    119\n    >>> is_nonagonal_simple(120)\n    120\n    >>> is_nonagonal_simple(121)\n    121\n    >>> is_nonagonal_simple(122)\n    122\n    >>> is_nonagonal_simple(123)\n    123\n    >>> is_nonagonal_simple(124)\n    124\n    >>> is_nonagonal_simple(125)\n    125\n    >>> is_nonagonal_simple(126)\n    126\n    >>> is_nonagonal_simple(127)\n    127\n    >>> is_nonagonal_simple(128)\n    128\n    >>> is_nonagonal_simple(129)\n    129\n    >>> is_nonagonal_simple(130)\n    130\n    >>> is_nonagonal_simple(131)\n    131\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(is_nonagonal(1))\nprint(is_nonagonal(2))\nprint(is_nonagonal(3))\nprint(is_nonagonal(4))\nprint(is_nonagonal(5))\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_nonagonal(0) == 1\nassert     is_nonagonal(1) == 1\nassert     is_nonagonal(2) == 3\nassert     is_nonagonal(3) == 5\nassert     is_nonagonal(4) == 7\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\nis_nonagonal(10)"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef is_number_fibonacci(n): \n    '''\n    Write a function to check if n is the sum of the\n    first two natural numbers and the\n    second natural number\n    '''\n    pass\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_nonagonal(0) == 1\nassert     is_nonagonal(1) == 2\nassert     is_nonagonal(3) == 4\nassert     is_nonagonal(4) == 6\nassert     is_nonagonal(5) == 10\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nprint(\"Pass\" if (is_nonagonal(1)==False) else \"Fail\")\nprint(\"Pass\" if (is_nonagonal(2)==False) else \"Fail\")\nprint(\"Pass\" if (is_nonagonal(3)==True) else \"Fail\")\nprint(\"Pass\" if (is_nonagonal(4)==False) else \"Fail\")\nprint(\"Pass\" if (is_nonagonal(5)==False) else \"Fail\")\nprint(\"Pass\" if (is_nonagonal(6)==True) else \"Fail\")\nprint(\"Pass\" if (is_nonagonal(7)==False) else \"Fail\")\nprint(\"Pass\" if (is_nonagonal(8)==False) else \"Fail\")\nprint(\"Pass\" if (is_nonagonal(9)==True) else \"Fail\")\nprint(\"Pass\" if (is_nonagonal(10)==False) else \"Fail\")\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_nonagonal(3) == 0\nassert     is_nonagonal(4) == 1\nassert     is_nonagonal(5) == 2\nassert     is_nonagonal(6) == 3\nassert     is_nonagonal(7) == 4\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_match_wordz_middle('zword') == True, \"Check your logic\"\nassert     text_match_wordz_middle('zwordz') == False, \"Check your logic\"\nassert     text_match_wordz_middle('zwordzword') == True, \"Check your logic\"\nassert     text_match_wordz_middle('zwordzwordz') == False, \"Check your logic\"\nassert     text_match_wordz_middle('zwordzwordzword') == True, \"Check your logic\"\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ntext = 'the quick brown fox jumps over the lazy dog.'\nassert text_match_wordz_middle(text) == True\n\ntext = 'the cat fell over the dog.'\nassert text_match_wordz_middle(text) == False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_wordz_middle('The quick brown fox jumps over the lazy dog.') == True\nassert     text_match_wordz_middle('The quick brown fox jumps over the lazy dog.') == True\nassert     text_match_wordz_middle('The quick brown fox jumps over the lazy dog.') == True\nassert     text_match_wordz_middle('The quick brown fox jumps over the lazy dog.') == True\nassert     text_match_wordz_middle('The quick brown fox jumps over the lazy dog.') == True\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_match_wordz_middle('zebra') == False\nassert     text_match_wordz_middle('zebras') == True\nassert     text_match_wordz_middle('zebra') == True\nassert     text_match_wordz_middle('zebraa') == False\nassert     text_match_wordz_middle('zebrazebra') == True\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_match_wordz_middle(\"test test test\")\nassert not text_match_wordz_middle(\"test test\")\nassert not text_match_wordz_middle(\"test test test t\")\nassert not text_match_wordz_middle(\"test test t\")\nassert not text_match_wordz_middle(\"\")\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_wordz_middle(\"ZzzZzz\") == True, \\\n        \"Wrong output for text_match_wordz_middle(\\\"ZzzZzz\\\")\"\n\nassert     text_match_wordz_middle(\"xyzxyxyxy\") == True, \\\n        \"Wrong output for text_match_wordz_middle(\\\"xyzxyxyxy\\\")\"\n\nassert     text_match_wordz_middle(\"zxyzxy\") == False, \\\n        \"Wrong output for text_match_wordz_middle(\\\"zxyzxy\\\")\"\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_wordz_middle(\"applaudissement\") == True\nassert     text_match_wordz_middle(\"applaudissementz\") == True\nassert     text_match_wordz_middle(\"applaudissent\") == False\nassert     text_match_wordz_middle(\"applaudissement\") == True\nassert     text_match_wordz_middle(\"applaudissentz\") == False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_match_wordz_middle('z') == True, \"Text match middle word z\"\nassert     text_match_wordz_middle('z ') == True, \"Text match middle word z\"\nassert     text_match_wordz_middle('zzz') == True, \"Text match middle word zzz\"\nassert     text_match_wordz_middle('z zzz') == False, \"Text match middle word zzz\"\nassert     text_match_wordz_middle('zzzzzzzzzzzzzzzzzzz') == True, \"Text match middle word zzzzzzzzzzzzzzzzzzzz\"\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    assert False\n    pass\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_wordz_middle('aZba') == True\nassert     text_match_wordz_middle('azba') == False\nassert     text_match_wordz_middle('AaZBa') == True\nassert     text_match_wordz_middle('AZBa') == False\nassert     text_match_wordz_middle('AaZbA') == True\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     reverse_Array_Upto_K([1,2,3,4,5], 2) == [5,4,3,2,1], \"Not Working\"\nassert     reverse_Array_Upto_K([1,2,3,4,5], 5) == [5,4,3,2,1], \"Not Working\"\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     reverse_Array_Upto_K([1,2,3,4,5,6], 2) == [2,1,6,5,4,3], \"The expected output is not correct\"\nassert     reverse_Array_Upto_K([1,2,3,4,5,6], 6) == [6,5,4,3,2,1], \"The expected output is not correct\"\nassert     reverse_Array_Upto_K([1,2,3,4,5,6], 1) == [6,5,4,3,2,1], \"The expected output is not correct\"\nassert     reverse_Array_Upto_K([1,2,3,4,5,6], 0) == [6,5,4,3,2,1], \"The expected output is not correct\"\nassert     reverse_Array_Upto_K([1,2,3,4,5,6], 7) == [1,2,3,4,5,6], \"The expected output is not correct\"\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nreverse_Array_Upto_K(input = [1, 2, 3, 4, 5], k = 4) == [5, 4, 3, 2, 1]\nassert \nreverse_Array_Upto_K(input = [1, 2, 3, 4, 5], k = 0) == []\nassert \nreverse_Array_Upto_K(input = [1, 2, 3, 4, 5], k = 2) == [3, 4, 5, 1, 2]\nassert \nreverse_Array_Upto_K(input = [1, 2, 3, 4, 5], k = 5) == [1, 2, 3, 4, 5]\nassert \nreverse_Array_Upto_K(input = [1, 2, 3, 4, 5], k = 6) == [1, 2, 3, 4, 5]\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     reverse_Array_Upto_K([1,2,3,4,5,6,7], 2) == [7,6,5,4,3,2,1]\nassert     reverse_Array_Upto_K([1,2,3,4,5,6,7], 3) == [7,6,5,4,3,2,1]\nassert     reverse_Array_Upto_K([1,2,3,4,5,6,7], 4) == [7,6,5,4,3,2,1]\nassert     reverse_Array_Upto_K([1,2,3,4,5,6,7], 5) == [7,6,5,4,3,2,1]\nassert     reverse_Array_Upto_K([1,2,3,4,5,6,7], 6) == [7,6,5,4,3,2,1]\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1]\nassert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 6) == [5, 4, 3, 2, 1]\nassert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1]\nassert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1]\nassert     reverse_Array_Upto_K([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1]\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef reverse_Array_Upto_K_using_reversed(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    pass\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     reverse_Array_Upto_K([10, 20, 30, 40], 3) == [[40, 30, 20, 10], False]\nassert     reverse_Array_Upto_K([10, 20, 30, 40], 0) == [[10, 20, 30, 40], False]\nassert     reverse_Array_Upto_K([10, 20, 30, 40], 5) == [[10, 20, 30, 40], False]\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     add_dict_to_tuple([], {1: 2, 2: 3}) == (1, 2, 3)\nassert     add_dict_to_tuple((1, 2, 3), {}) == (1, 2, 3)\nassert     add_dict_to_tuple((1, 2, 3), {1: 3, 5: 6}) == (1, 2, 3, 1, 3, 5, 6)\n\n'''\n    Q9. Write a function to subtract a dictionary from another dictionary.\n        The output should be a dictionary.\n        If the input dictionaries are empty, the output should be empty too.\n'''\ndef subtract_dict_from_dict(test_dict, test_dict_2):\n    '''\n        Write a function to subtract a dictionary from another dictionary.\n        The output should be a dictionary.\n        If the input dictionaries are empty, the output should be empty too.\n    '''\n    pass\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     add_dict_to_tuple(test_tup,test_dict_1) == (1,2,3,4)\nassert add_dict_to_tuple(test_tup,test_dict_2) == (1,2,3,4,5,6,7,8)\nassert add_dict_to_tuple(test_tup,test_dict_3) == (1,2,3,4,5,6,7,8,9,10)\nassert add_dict_to_tuple(test_tup,test_dict_4) == (1,2,3,4,5,6,7,8,9,10,11,12)"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     add_dict_to_tuple((1,2,3), {\"a\":1, \"b\":2}) == (1,2,3,{'a':1,'b':2})\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add_dict_to_tuple([1,2,3], {'a':1, 'b':2, 'c':3}) == (1,2,3), \"add_dict_to_tuple returns incorrect output\"\n\n\ndef tuple_to_dict(test_tup):\n    '''\n    Write a function to convert a tuple to dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert tuple(add_dict_to_tuple((1,2,3), {\"a\":1, \"b\":2})) == (1,2,3,{\"a\":1,\"b\":2})\nassert tuple(add_dict_to_tuple((1,2,3), {\"a\":1})) == (1,2,3,{\"a\":1})\nassert tuple(add_dict_to_tuple((1,2,3), {\"a\":\"a\"})) == (1,2,3,{\"a\":\"a\"})\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     add_dict_to_tuple((1,2,3), {}) == (1,2,3), 'Wrong output'\nassert     add_dict_to_tuple((1,2,3), {'a':1, 'b':2}) == (1,2,3, {'a':1, 'b':2}), 'Wrong output'\n\ndef add_dict_to_set(test_set, test_dict):\n    '''\n    Write a function to add a dictionary to the set. The output should be a set.\n    '''\n    pass\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef add_tuple_to_dict(test_tup, test_dict):\n    '''\n    Write a function to add a tuple to the dictionary. The output should be a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert         add_dict_to_tuple((1,2,3),{\"A\":1,\"B\":2}) == (1,2,3,{\"A\":1,\"B\":2})\nassert         add_dict_to_tuple((1,2,3),{\"A\":{\"a\":1,\"b\":2},\"B\":{\"a\":3,\"b\":4}}) == (1,2,3,{\"A\":{\"a\":1,\"b\":2},\"B\":{\"a\":3,\"b\":4}})\nassert         add_dict_to_tuple((1,2,3),({\"A\":{\"a\":1,\"b\":2},\"B\":{\"a\":3,\"b\":4}})) == (1,2,3,({\"A\":{\"a\":1,\"b\":2},\"B\":{\"a\":3,\"b\":4}}))\nassert         add_dict_to_tuple((1,2,3),{\"A\":{\"a\":1,\"b\":2},\"B\":{\"a\":3,\"b\":4},\"A\":{\"a\":4,\"b\":5},\"B\":{\"a\":6,\"b\":7}}) == (1,2,3,{\"A\":{\"a\":1,\"b\":2},\"B\":{\"a\":3,\"b\":4},\"A\":{\"a\":4,\"b\":5},\"B\":{\"a\":6,\"b\":7}})\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     maxAverageOfPath([[5, 5, 8], \n                            [1, 5, 1], \n                            [4, 3, 0]]) == 7.928, \\\n    'Wrong Answer (avg)'\nassert     maxAverageOfPath([[5, 5, 8], \n                            [1, 5, 1], \n                            [4, 3, 0]]) == 6.928, \\\n    'Wrong Answer (avg)'\nassert     maxAverageOfPath([[1, 1, 1], \n                            [0, 1, 1], \n                            [0, 0, 1]]) == 1.0, \\\n    'Wrong Answer (avg)'\nassert     maxAverageOfPath([[1, 1, 1], \n                            [0, 1, 1], \n                            [0, 0, 1]]) == 0.0, \\\n    'Wrong Answer (avg)'\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     maxAverageOfPath([[1,5,2,5],[3,6,7,9],[3,3,4,1]]) == 24.75\nassert     maxAverageOfPath([[5,8,7],[7,1,3],[1,9,4]]) == 17.25\nassert     maxAverageOfPath([[3,8,1],[5,7,3],[7,5,4]]) == 20.25\nassert     maxAverageOfPath([[3,4,5,6],[3,5,1,3],[1,2,2,2],[1,2,2,2]]) == 10.5\n\n'''\n2)\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     maxAverageOfPath([[1, 2, 3],\n            [8, 9, 10],\n            [15, 16, 17]]) == 12, \"Wrong\"\nassert maxAverageOfPath([[1, 2, 3],\n            [8, 9, 10],\n            [15, 16, 17],\n            [18, 19, 20]]) == 20, \"Wrong\"\nassert maxAverageOfPath([[0,0,0],\n            [0,0,0],\n            [0,0,0]]) == 0, \"Wrong\"\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     maxAverageOfPath([[0,0,1,0],[0,0,0,2]]) == 2\nassert     maxAverageOfPath([[0,0,1,0],[0,0,0,2],[0,0,0,0]]) == 1\nassert     maxAverageOfPath([[0,0,1,0],[0,0,0,2],[0,0,0,0],[0,0,0,0]]) == 1\nassert     maxAverageOfPath([[0,0,1,0],[0,0,0,2]]) == 2\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     maxAverageOfPath([[1,3,2,4],[5,6,3,2],[4,5,2,3]]) == 4.5\nassert maxAverageOfPath([[1,5,3,8],[6,2,4,1],[3,7,2,1]]) == 12.5\nassert maxAverageOfPath([[1,1,1,1],[1,2,1,1],[1,3,1,1],[1,1,1,1]]) == 1\nassert maxAverageOfPath([[1,1,1,1],[1,2,1,1],[1,3,1,1]]) == 2\nassert maxAverageOfPath([[1,2,1,1,1],[1,2,1,1,1],[1,2,1,1,1],[1,2,1,1,1],[1,2,1,1,1]]) == 2\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     maxAverageOfPath([[1,3,1,5,3,2],[5,8,2,5,3,6],[4,5,3,4,1,4],[1,2,1,1,1,1],[1,1,1,2,1,1],[1,1,1,1,1,1]]) == 17.8125\nassert     maxAverageOfPath([[1,2,1],[2,2,2]]) == 2.0\nassert     maxAverageOfPath([[1,1,1,1,1,1,1],[1,1,1,1,1,1,1],[1,1,1,1,1,1,1],[1,1,1,1,1,1,1],[1,1,1,1,1,1,1],[1,1,1,1,1,1,1],[1,1,1,1,1,1,1]]) == 6.0\nassert     maxAverageOfPath([[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1,1,1]]) == 2.5\nassert     maxAverageOfPath([[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef longestPalindrome(s):\n    '''\n    Given a string, find the length of the longest palindrome. The longest palindrome should be of maximum size.\n    '''\n    pass\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ncost = [[0, 1, 1], \n        [1, 0, 1], \n        [1, 1, 0]]\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nstudents = {\n    'Sara' : (1.8, 76.5),\n    'Bob' : (1.9, 67.5),\n    'Alice' : (1.9, 67.1),\n    'Sam' : (1.7, 49.5),\n    'David' : (2.0, 66.6)\n    }\n\nfilter_data(students,1.8,76.5) == {'Sara','David','Alice'}\nfilter_data(students,1.9,67.5) == {'Sara','Alice','David'}\nfilter_data(students,1.9,67.1) == {'Sara','Alice'}\nfilter_data(students,1.7,49.5) == {'Sara','David'}\nfilter_data(students,2.0,66.6) == {'Sara','David'}\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     filter_data(students,1.3, 1.5) == {'Aman' : (1.37, 1.5), 'Sanji' : (1.37, 1.5)}\nassert filter_data(students,0.8, 1.45) == {'Aman' : (1.37, 1.5), 'Sanji' : (1.37, 1.5)}\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n'''\nSolution by Yassine\n\ndef filter_data(students,h,w):\n    for i, student in enumerate(students):\n        if student[1][0]>h and student[1][1]>w:\n            students[i]=student\n\nstudents = [('Aakash',(123,32)),('Sai',(67,89)),('Karan',(31,11))]\nfilter_data(students,65,68)\nprint(students)\n'''\n\n\n'''\nSolution by Yassine\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     filter_data({'John': (58.75, 75.00), 'Bob': (76.54, 70.33), 'Jack': (51.66, 70.00)}, 50, 55) == {'John': (58.75, 75.00), 'Jack': (51.66, 70.00)}\nassert filter_data({'John': (58.75, 75.00), 'Bob': (76.54, 70.33), 'Jack': (51.66, 70.00)}, 50.5, 60.5) == {'John': (58.75, 75.00), 'Jack': (51.66, 70.00)}\nassert filter_data({'John': (58.75, 75.00), 'Bob': (76.54, 70.33), 'Jack': (51.66, 70.00)}, 50.5, 55.5) == {'Jack': (51.66, 70.00)}\nassert filter_data({'John': (58.75, 75.00), 'Bob': (76.54, 70.33), 'Jack': (51.66, 70.00)}, 50.5, 60.5) == {'John': (58.75, 75.00), 'Bob': (76.54, 70.33), 'Jack': (51.66, 70.00)}\nassert filter_data({'John': (58.75, 75.00), 'Bob': (76.54, 70.33), 'Jack': (51.66, 70.00)}, 50.5, 60.5) == {'John': (58.75, 75.00), 'Bob': (76.54, 70.33), 'Jack': (51.66, 70.00)}\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     filter_data({'Steve': (160,70), 'Sherry': (167, 70), 'Jasmine': (175, 50), 'Cindy': (160, 70), 'Dina': (170, 80), 'Tim': (180, 70), 'Beth': (187, 65), 'Matthew': (189, 65)},160,70) == {'Jasmine','Tim','Matthew'}\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     filter_data({'A': (85, 90), 'B': (77, 80), 'C': (85, 70), 'D': (85, 50)}, 100, 70) == {'C', 'B'}\nassert     filter_data({'A': (85, 90), 'B': (77, 80), 'C': (85, 70), 'D': (85, 50)}, 50, 70) == {'A', 'C', 'B'}\nassert     filter_data({'A': (85, 90), 'B': (77, 80), 'C': (85, 70), 'D': (85, 50)}, 60, 70) == {'C', 'D', 'B'}\nassert     filter_data({'A': (85, 90), 'B': (77, 80), 'C': (85, 70), 'D': (85, 50)}, 50, 80) == {'C', 'D', 'B'}\nassert     filter_data({'A': (85, 90), 'B': (77, 80), 'C': (85, 70), 'D': (85, 50)}, 50, 90) == {'C', 'B'}\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     filter_data({\n    \"Bob\": (170,120),\n    \"Alice\": (160,100),\n    \"Charles\": (170,120)\n    },\n    150,\n    100) == {\n    \"Bob\": (170, 120),\n    \"Alice\": (160, 100),\n    \"Charles\": (170, 120)\n    }, \"Should return ['Bob', 'Alice', 'Charles']\"\nassert     filter_data({\n    \"Alice\": (170,120),\n    \"Bob\": (160,100),\n    \"Charles\": (170,120)\n    },\n    170,\n    120) == {\n    \"Alice\": (170,120),\n    \"Bob\": (160,100),\n    \"Charles\": (170,120)\n    }, \"Should return ['Alice', 'Bob', 'Charles']\"\nassert     filter_data({\n    \"Alice\": (170,120),\n    \"Bob\": (160,100),\n    \"Charles\": (170,120)\n    },\n    150,\n    150) == {\n    }, \"Should return an empty dictionary.\"\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     filter_data({\"Smit\":(58,74), \"Dharm\":(70,57), \"Akash\":(70,87), \"Ashwin\":(95,54), \"Bharath\":(85,98)}, 60, 70) == {'Ashwin': (85, 98), 'Bharath': (85, 98), 'Smit': (58, 74), 'Dharm': (70, 57), 'Akash': (70, 87)}, \"returned wrong values\"\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_same_pair([1,2,3,4], [3,3,3,4]) == 4\nassert     count_same_pair([1,2,3,4], [1,2,3,4]) == 3\nassert     count_same_pair([1,2,3,4], [2,2,3,4]) == 1\n\ndef rotate(arr):\n    '''\n    Given a list, rotate the list by one element such that the new list is [last element, first element].\n    '''\n    pass\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ncount_same_pair([1,2,3,4], [1,2,3,4]) == 4\ncount_same_pair([1,2,3,1], [1,2,3,1]) == 3\ncount_same_pair([1,2,3,4], [1,2,3,3]) == 0\ncount_same_pair([1,2,3], [1,2,3,3]) == 3\ncount_same_pair([1,2,3], [1,2,3]) == 2\ncount_same_pair([1,2], [1,2,3]) == 1\ncount_same_pair([1,2], []) == 1\ncount_same_pair([], [1,2,3]) == 0\ncount_same_pair([1,2], []) == 1\ncount_same_pair([1,2], [1]) == 2\ncount_same_pair([], []) == 0"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_same_pair([1,2,3,4,4,5], [1,2,3,4,4,5]) == 4, \"incorrect\"\nassert     count_same_pair([1,2,3,4,4,5], [1,3,4,4,5,6]) == 3, \"incorrect\"\nassert     count_same_pair([1,2,3,4,4,5], [6,7,8,9,10]) == 0, \"incorrect\"\nassert     count_same_pair([1,2,3,4,4,5], [6,7,8,9,9,9]) == 0, \"incorrect\"\nassert     count_same_pair([1,2,3,4,4,5], [6,7,8,9,9,9,9]) == 0, \"incorrect\"\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef same_num_count(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    pass\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_same_pair([1,2,3,4], [1,2,3,4]) == 4\nassert     count_same_pair([2,2,2,2], [2,2,2,2]) == 2\n\ndef count_same_pair2(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    pass\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_same_pair([1,2,3,4,5], [1,2,3,4,5]) == 5\nassert     count_same_pair([1,2,3,4,5], [1,2,3,4,5,1,2,3,4,5]) == 5\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_same_pair([1,2,3,2,1], [2,2,1,1,3]) == 5\nassert     count_same_pair([1,1,2,2,3,3], [2,2,1,1,3]) == 4\nassert     count_same_pair([1,2,1], [1,2,1]) == 3\nassert     count_same_pair([1,2], [2,3,1]) == 1\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert count_same_pair([1, 2, 3, 1], [1, 2, 3, 1]) == 3\nassert count_same_pair([1, 2, 3, 1], [1, 2, 1, 3]) == 0\nassert count_same_pair([1, 2, 3, 1], [1, 2, 1, 2]) == 1\nassert count_same_pair([1, 2, 3, 1], [1, 2, 1, 3]) == 1\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     power_base_sum(11, 2) == 1 + 11\nassert     power_base_sum(7, 3) == 7 + 7 + 7\nassert     power_base_sum(7, 7) == 7 + 7 + 7 + 7 + 7\nassert     power_base_sum(7, 8) == 7 + 7 + 7 + 7 + 7 + 7\nassert     power_base_sum(7, 10) == 7 + 7 + 7 + 7 + 7 + 7 + 7 + 7 + 7 + 7\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     power_base_sum(1, 2) == 8\nassert     power_base_sum(5, 2) == 10\nassert     power_base_sum(5, 3) == 15\nassert     power_base_sum(30, 30) == 900\nassert     power_base_sum(10, 10) == 100\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef add_list_of_lists(first, second):\n    '''\n    Write a function that takes a list of lists and a second list and add these two lists and return the sum of the returned list.\n    '''\n    pass\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \npower_base_sum(5, 2) == 7\npower_base_sum(3, 1) == 3\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     power_base_sum(3, 5) == 27, \"3**5=27\"\nassert     power_base_sum(5, 1) == 5, \"5**1=5\"\nassert     power_base_sum(5, 0) == 0, \"5**0=0\"\nassert     power_base_sum(3, 4) == 0, \"3**4=0\"\nassert     power_base_sum(2, 2) == 4, \"2**2=4\"\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     power_base_sum(1, 1) == 1\nassert     power_base_sum(5, 4) == 7\nassert     power_base_sum(123456789, 4) == 2489\n\n\ndef power_base_prod(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the product of all digits of the base to the specified power.\n    '''\n    pass\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     power_base_sum(3, 1) == 3, \"the sum of the first digit of 3 to the power of 1 is 3\"\nassert     power_base_sum(3, 2) == 3, \"the sum of the first two digits of 3 to the power of 2 is 3\"\nassert     power_base_sum(3, 3) == 0, \"the sum of the first three digits of 3 to the power of 3 is 0\"\nassert     power_base_sum(4, 4) == 4, \"the sum of the first four digits of 4 to the power of 4 is 4\"\nassert     power_base_sum(5, 2) == 0, \"the sum of the first two digits of 5 to the power of 2 is 0\"\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     power_base_sum(2, 1) == 2\nassert     power_base_sum(2, 3) == 14\nassert     power_base_sum(2, 8) == 216\nassert     power_base_sum(2, 16) == 4208\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     extract_quotation('Mintro5') == 'Mintro5'\nassert     extract_quotation('WOLF') == 'WOLF'\nassert     extract_quotation('s\\'s are the best!') =='s\\'s are the best!'\nassert     extract_quotation('\"Yes, I would rather go\"') == 'Yes, I would rather go'\nassert     extract_quotation('First, second, third') == 'First, second, third'\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     extract_quotation(\"Hi, there, what is up?\") == \"Hi, there, what is up?\"\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     extract_quotation('''This is a string.\n''') == 'This is a string.', 'Wrong output'\nassert    extract_quotation('''This is a string.\nBut this is a string too.\n''') == 'This is a string.But this is a string too.', 'Wrong output'\nassert    extract_quotation('''This is a string.\nBut this is a string too.\nBut this is a string too.\n''') == 'This is a string', 'Wrong output'\nassert    extract_quotation('''This is a string.\nBut this is a string too.\nBut this is a string too.\nBut this is a string too.\n''') == 'This is a string', 'Wrong output'\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     extract_quotation('Hi') == 'Hi'\nassert     extract_quotation('Hi \"Hello\"') == 'Hi \"Hello\"'\nassert     extract_quotation('Hi \"Hello\"\\n') == 'Hi \"Hello\"'\nassert     extract_quotation('Hi\"Hello\"') == 'Hi\"Hello\"'\nassert     extract_quotation('Hi\"Hello\"Hi\"Bye\"') == 'Hi\"Hello\"'\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_quotation('') == ''\nassert     extract_quotation('hi') == ''\nassert     extract_quotation('hi \"bye\"') == 'hi \"bye\"'\nassert     extract_quotation('hi \"bye\" hi') == 'hi \"bye\" hi'\nassert     extract_quotation('hi \"bye\" ') == 'hi \"bye\"'\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    extract_quotation(\"That's why it is called a monkey\") == \"monkey\"\n    extract_quotation(\"What's the use of a program?\\n         I've never written one.\") == \"program\"\n    extract_quotation(\"Alice, Kitty and Snowdrop\") == \"\"\n    extract_quotation(\"Hi, my cat\") == \"\"\n    extract_quotation(\"I'll drink, I'll be a priest, I'll be a mage, I'll be a pirate\") == \"\"\n    extract_quotation(\"Hi, my cat\") == \"cat\"\n    extract_quotation(\"\") == \"\"\n    extract_quotation(\"   \") == \"\"\n    extract_quotation(\"0\") == \"0\"\n    extract_quotation(\"g\") == \"\"\n    extract_quotation(\"Hello, world!\") == \"world\"\n    extract_quotation(\"Don't mess with me\") == \"m mess\"\n    extract_quotation(\"Get along, get along\") == \"along\"\n    extract_quotation(\"How do you spell santa\") == \"spelling\"\n    extract_quotation(\"How do you spell santa\") == \"spelling\"\n    extract_quotation(\"How do you spell santa\") == \"spelling\"\n    extract_quotation(\"How do you spell santa\") == \"spelling\"\n    extract_quotation(\"How do you spell santa\") == \"spelling\"\n    extract_quotation(\"How do you spell santa\") == \"spelling\"\n    extract_quotation(\"How do you spell santa\") == \"spelling\"\n    extract_quotation(\"How do you spell santa\") == \"spelling\"\n    extract_quotation(\"What if we are wrong?\") == \"what if we are wrong\"\n    extract_quotation(\"What if you could type as much as you like?\") == \"what if you could type as much as you like\"\n    extract_quotation(\"What if you could type as much as you like?\") == \"what if you could type as much as you like\"\n    extract_quotation(\"\"\"What if we are wrong?\nWhat if you could type as much as you like?\nWhat if you could type as much as you like?\"\"\") == \"what if we are wrong\"\n    extract_quotation(\"What if we are wrong?\\n\\tWhat if you could type as much as you like?\") == \"what if we are wrong\"\n    extract_quotation(\"What if you could type as much as you like?\\n\\tWhat if we are wrong?\") == \"what if we are wrong\"\n    extract_quotation(\"What if we are wrong?\\n\\n\\tWhat if you could type as much as you like?\") == \"what if we are wrong\"\n    extract_quotation(\"What if we are wrong?\\n\\n\\n\\tWhat if you could type as much as you like?\") == \"what if we are wrong\"\n    extract_quotation(\"\"\"What if we are wrong?\nWhat if you could type as much as you like?\nWhat if we are wrong?\"\"\") == \"what if we are wrong\"\n    extract_quotation(\"What if you could type as much as you like?\\n\\tWhat if we are wrong?\") == \"what if you could type as much as you like?\"\n    extract_quotation(\"What if you could type as much as you like?\\n\\n\\tWhat if we are wrong?\") == \"what if you could type as much as you like?\"\n    extract_quotation(\"What if you could type as much as you like?\\n\\n\\n\\nWhat if we are wrong?\") == \"what if we are wrong\"\n    extract_quotation(\"What if you could type as much as you like?\\n\\n\\n\\nWhat if we are wrong?\") == \"what if you could type as much as you like?\"\n    extract_quotation(\"What if you could type as much as you like?\\n\\n\\n\\nWhat if we are wrong?\") == \"what if you could type as much as you like?\"\n    extract_quotation(\"What if you could type as much as you like?\\n\\n\\n\\nWhat if we are wrong?\") == \"what if you could type as much as you like?\"\n    extract_quotation(\"What if you could type as much as you like?\\n\\n\\n\\nWhat if we are wrong?\") == \"what if you could type as much as you like?\"\n    extract_quotation(\"What if you could type as much as you like?\\n\\n\\n\\nWhat if we are wrong?\") == \"what if you could type as much as you like?\"\n    extract_quotation(\"What if you could type as much as you like?\\n\\n\\n\\nWhat if we are wrong?\") == \"what if you could type as much as you like?\"\n    extract_quotation(\"What if you could type as much as you like?\\n\\n\\n\\nWhat if we are wrong?\") == \"what if you could type as much as you like?\"\n    extract_quotation(\"What if you could type as much as you like?\\n\\n\\n\\nWhat if we are wrong?\") == \"what if you could type as much as you like?\"\n    extract_quotation(\"What if you could type as much as you like?\\n\\n\\n\\nWhat if we are wrong?\") == \"what if you could type as much as you like?\"\n    extract_quotation(\"What if you could type as much as you like?\\n\\n\\n\\nWhat if we are wrong?\") == \"what if you could type as much as you like?\"\n    extract_quotation(\"What if you could type as much as you like?\\n\\n\\n\\nWhat if we are wrong?\") == \"what if you could type as much as you like?\"\n    extract_quotation(\"What if you could type as much as you like?\\n\\n\\n\\nWhat if we are wrong?\") == \"what if you could type as much as you like?\"\n    extract_quotation(\"What if you could type as much as you like?\\n\\n\\n\\nWhat if we are wrong?\") == \"what if you could type as much as you like?\"\n    extract_quotation(\"What if you could type as much as you like?\\n\\n\\n\\nWhat if we are wrong?\") == \"what if you could type as much as you like?\"\n    extract_quotation(\"What if you could type as much as you like?\\n\\n\\n\\nWhat if we are wrong?\") == \"what if you could type as much as you like?\"\n    extract_quotation(\"What if you could type as much as you like?\\n\\n\\n\\nWhat if we are wrong?\") == \"what if you could type as much as you like?\"\n    extract_quotation(\"What if you could type as much as you like?\\n\\n\\n\\nWhat if we are wrong?\") == \"what if you could type as much as you like?\"\n    extract_quotation(\"What if you could type as much as you like?\\n\\n\\n\\nWhat if we are wrong?\") == \"what if you could type as much as you like?\"\n    extract_quotation(\"What if you could type as much as you like?\\n\\n\\n\\nWhat if we are wrong?\") == \"what if you could type as much as you like?\"\n    extract_quotation(\"What if you could type as much as you like?\\n\\n\\n\\nWhat if we are wrong?\") == \"what if you could type as much as you like?\"\n    extract_quotation(\"What if you could type as much as you like?\\n\\n\\n\\nWhat if we are wrong?\") == \"what if you could type as much as you like?\"\n    extract_quotation(\"What if you could type as much as you like?\\n\\n\\n\\nWhat if we are wrong?\") == \"what if you could type as much as you like?\"\n    extract_quotation(\"What if you could type as much as you like?\\n\\n\\n\\nWhat if we are wrong?\") == \"what if you could type as much as you like?\"\n    extract_quotation(\"What if you could type as much as you like?\\n\\n\\n\\nWhat if we are wrong?\") == \"what if you could type as much as you like?\""
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_quotation(\"First name: Sveta\") == \"Sveta\"\nassert     extract_quotation(\"First name: 'Sveta'\") == \"Sveta\"\nassert     extract_quotation(\"First name: 'Sveta' First name: 'First name'\") == \"Sveta\"\nassert     extract_quotation(\"'First name' First name: 'First name'\") == \"First name\"\nassert     extract_quotation(\"First name: First name: 'First name'\") == \"First name\"\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     extract_quotation(\"this is a string and is also a string\") == \"string\"\nassert extract_quotation(\"this is also a string\") == \"\"\nassert extract_quotation(\"this is a string and this string too\") == \"string\"\nassert extract_quotation(\"this is a string and this string too\") == \"\"\nassert extract_quotation(\"this is a string\") == \"string\"\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     extract_quotation(\"He said, \\\"I am fine.\\\"\") == [\"I am fine.\"]\nassert     extract_quotation(\"He said, \\\"The rain in Spain falls mainly in the plain.\\\"\") == [\"The rain in Spain\"]\nassert     extract_quotation(\"He said, \\\"I am fine.\\\" And I am so happy too.\") == [\"I am fine.\", \"And I am so happy too.\"]\nassert     extract_quotation(\"He said, \\\"\\\"I am so happy too.\\\"\") == [\"\"]\nassert     extract_quotation(\"I love \\\"Netflix and Android\\\"\") == [\"Netflix and Android\"]\nprint(\"Quotation test passed\")\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     multiply_elements((1, 2, 3, 4, 5)) == (1, 2, 3, 4, 5)\nassert     multiply_elements((1, 2, 3, 4)) == (1, 2, 3, 4)\nassert     multiply_elements((0, 1, 2, 3)) == (0, 0, 1, 2)\nassert     multiply_elements((1, 1, 1, 1, 1)) == (1, 2, 3, 4, 5)\nassert     multiply_elements((-1, -2, -3, -4, -5)) == (-2, -4, -6, -8, -10)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     multiply_elements((2, 3, 4)) == (6, 6, 6), \"Wrong result\"\nassert     multiply_elements((1,2)) == (2,4), \"Wrong result\""
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     multiply_elements((1,2,3,4,5)) == (1,2,3,4,5), \"Wrong result\"\nassert     multiply_elements((2,4,6)) == (4,8,12), \"Wrong result\"\nassert     multiply_elements((3,5,7,9)) == (5,7,9,15), \"Wrong result\"\nassert     multiply_elements((8,9,10,11)) == (8,9,20,30), \"Wrong result\"\nassert     multiply_elements((-4,-3,-2,-1)) == (-4,-3,-2,-1), \"Wrong result\"\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     multiply_elements((2,4,6)) == (4,12,18), 'incorrect result'\nassert     multiply_elements((0,0,0)) == (0,0,0), 'incorrect result'\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     multiply_elements((0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) == (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     (multiply_elements((10,10,10,10,10)) == (100,100,100,100,100))\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     multiply_elements((1, 2, 3, 4)) == (1, 2, 3, 4)\nassert     multiply_elements((1, 2, 3)) == (1, 2, 3, 1)\nassert     multiply_elements((2, 2, 2, 2)) == (4, 4, 4, 4)\nassert     multiply_elements((2,)) == (2, 2, 2)\nassert     multiply_elements((3,)) == (3, 3, 3)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     multiply_elements((2,4,6,8)) == (4,12,12,24)\nassert     multiply_elements((1,2,3,4,5,6)) == (1,2,3,4,5,6)\nassert     multiply_elements((0,0,0,0)) == (0,0,0,0)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     multiply_elements((2,3,4)) == (8,12,16)\nassert     multiply_elements((1,2,3)) == (1,2,3)\nassert     multiply_elements((1,2)) == (2,4)\nassert     multiply_elements((1,)) == (2,)\nassert     multiply_elements((5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_list([1,2,3], [4,5,6]) == [5,7,9]\nassert     sum_list([1,2,3],[4,5,6,7]) == [5,7,9,12]\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_list([1, 2, 3, 4], [5, 6, 7, 8]) == [6, 8, 10, 12], 'incorrect'\nassert     sum_list([1, 2, 3], [4, 5, 6]) == [5, 7, 9], 'incorrect'\nassert     sum_list([1, 2], [3, 4, 5]) == [4, 6, 8], 'incorrect'\nassert     sum_list([1, 2], [3, 4]) == [4, 6], 'incorrect'\nassert     sum_list([1, 2, 3, 4], [5, 6, 7, 8]) == [6, 8, 10, 12], 'incorrect'\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sum_list([1,2,3], [4,5,6]) == [1+4,2+5,3+6]\nassert     sum_list([3,6,9,12], [5,8,11,14]) == [3+5,6+8,9+11,12+14]\nassert     sum_list([1,2,3], [4]) == [1+4,2+4,3+4]\nassert     sum_list([1,2], [3,4,5]) == [1+3,2+4,3+5]\nassert     sum_list([1,2], [3,4,5,6]) == [1+3,2+4,3+5,4+6]\nprint(\"test case passed\\n\")\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_list([1,2,3],[4,5,6]) == [5,7,9]\nassert     sum_list([1,2,3,4],[5,6,7,8]) == [6,9,12,15]\nassert     sum_list([-1,-2,-3],[1,2,3]) == [-2,0,3]\nassert     sum_list([-1,-2,-3,-4],[5,6,7,8]) == [-2,-4,6,10]\nassert     sum_list([1,-2,-3],[4,5,6]) == [5,-3,7]\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sum_list([1,2,3], [4,5,6]) == [1+4,2+5,3+6]\nassert     sum_list([1,2,3,4], [5,6,7,8]) == [1+5,2+6,3+7,4+8]\n\ndef is_same_list(lst1, lst2):\n    '''\n    Write a function returns True if the list lst1 and lst2 contains the same number of elements, False otherwise.\n    '''\n    pass\n\nassert is_same_list([1,2,3], [1,2,3]) == True\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     sum_list([1,2,3],[4,5,6]) == [1+4,2+5,3+6], 'Wrong'\nassert     sum_list([1,2],[3,4,5]) == [1+3,2+4], 'Wrong'\n\nprint('The function works correctly.')\n\ndef mul_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1*b_1,...,a_n*b_n].\n    '''\n    pass\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_list([1,2,3], [4,5,6]) == [5,7,9]\nassert     sum_list([5,10,15], [3,6,10]) == [8,17,22]\nassert     sum_list([1,5,5], [3,6,10]) == [6,12,18]\nprint(\"Correct: sum_list\")\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_list([1,2,3], [4,5,6]) == [5,7,9], \"Wrong answer\"\nassert     sum_list([1,2,3,4], [5,6,7,8]) == [6,8,10,12], \"Wrong answer\"\nassert     sum_list([-1,2,3], [4,5,6]) == [-5,7,9], \"Wrong answer\"\nassert     sum_list([-1,2,-3], [-4,5,6]) == [-5,8,11], \"Wrong answer\"\nassert     sum_list([], []) == [], \"Wrong answer\"\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert sum_list([1,2,3], [4,5,6]) == [5,7,9]\nprint(\"correct\")\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nassert consecutive_duplicates([2, 3, 4, 5, 5, 5, 5, 5, 6]) == False\nassert consecutive_duplicates([2, 3, 4, 5, 5, 6]) == True"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     consecutive_duplicates([1, 1, 1, 2, 2, 2, 3]) == False\nassert consecutive_duplicates([1, 1, 2, 2, 3]) == True\nassert consecutive_duplicates([1, 1, 2, 2, 2, 2]) == False\nassert consecutive_duplicates([1, 1, 2, 2, 2, 3]) == True\n\ndef remove_consecutive_duplicates_from_dictionary(d):\n    '''\n    Write a function that takes a dictionary as an argument and returns a \n    list of the keys and values of the dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     consecutive_duplicates([1,2,3,4,5,6,6,6,6,6]) == [[1,2,3,4,5],[6]]\nassert     consecutive_duplicates([1,2,3,4,5,6,7,8]) == [[1,2,3,4,5],[6,7,8]]\nassert     consecutive_duplicates([1,2,3,4,5,6]) == [[1,2,3,4,5],[6]]\nassert     consecutive_duplicates([1,2,3,4,5,6,7,8,9,0]) == [[1,2,3,4,5],[6,7,8,9,0]]\nassert     consecutive_duplicates([]) == []\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef sublist_with_consecutive_sum(nums, k):\n    '''\n    Write a function that returns a list of sublists that are of length k such that the sum of their values equals k.\n    '''\n    pass\n\ndef sublist_with_consecutive_sum_2(nums, k):\n    '''\n    Write a function that returns a list of sublists that are of length k such that the sum of their values equals k.\n    '''\n    pass\n\nassert \n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n[1, 2, 2, 3, 3, 4, 5, 6] == consecutive_duplicates([1, 2, 2, 3, 3, 4, 5, 6])\nassert not consecutive_duplicates([1, 2, 2, 3, 3, 4, 5, 6]) == [1, 2, 2, 3, 3, 4, 5, 6]\nassert consecutive_duplicates([1, 2, 2, 3, 3, 4, 5, 6]) == [1, 2, 2, 3, 3, 4, 5, 6]\nassert not consecutive_duplicates([1, 2, 2, 3, 3, 4, 5, 6]) == [1, 2, 2, 3, 3, 4, 5, 6]\nassert consecutive_duplicates([1, 2, 2, 3, 3, 4, 5, 6]) == []\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     consecutive_duplicates([1,2,3]) == True, \n            \"consecutive_duplicates([1,2,3]) should return True\"\nassert     consecutive_duplicates([1,1,1]) == False, \n            \"consecutive_duplicates([1,1,1]) should return False\"\nassert     consecutive_duplicates([1,2,3,1,2]) == False, \n            \"consecutive_duplicates([1,2,3,1,2]) should return False\"\nassert     consecutive_duplicates([1,2,3,1,2,3]) == True, \n            \"consecutive_duplicates([1,2,3,1,2,3]) should return True\"\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     consecutive_duplicates([1,2,3]) == [[1],[2],[3]]\nassert     consecutive_duplicates([1,1,1,1]) == [[1,1],[1]]\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n'''\n2. Write a function to remove consecutive duplicates of a given list.\n'''\ndef consecutive_duplicates_2(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    pass\n\nassert\n\n'''\n4. Write a function to compute sum of natural numbers using function \n    and using a while loop.\n'''\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     consecutive_duplicates([]) == True\nassert     consecutive_duplicates([1]) == True\nassert     consecutive_duplicates([1, 1]) == False\nassert     consecutive_duplicates([1, 2]) == True\nassert     consecutive_duplicates([1, 2, 1, 3, 4, 4, 5, 6, 6, 7, 8, 8, 7]) == False\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     consecutive_duplicates([1, 2, 1, 3]) == None\nassert     consecutive_duplicates([1, 2, 2, 3]) == None\nassert     consecutive_duplicates([1, 2, 1, 2, 3]) == [1, 2, 3]\n\ndef is_sorted(iterable):\n    '''\n    Write a function that tests whether the given iterable is sorted\n    '''\n    return iterable == sorted(iterable)\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nassert lateralsurface_cone(2,4) == 2*math.pi*2\nassert lateralsurface_cone(4,3) == 2*math.pi*5\nassert lateralsurface_cone(6,3) == 2*math.pi*7\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     lateralsurface_cone(3,4) == 8\nassert     lateralsurface_cone(7,3) == 28\nassert     lateralsurface_cone(2,6) == 20\n\ndef cone_volume(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and the height h.\n    '''\n    pass\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \ndef circumference(radius):\n    '''\n    Write a function to find the circumference of a circle given the radius.\n    '''\n    pass\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef check_area(r,h):\n    '''\n    Write a function to check whether the area is zero.\n    '''\n    pass\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     lateralsurface_cone(3,3) == 20\nassert     lateralsurface_cone(3,6) == 50\nassert     lateralsurface_cone(3,0) == 0\nassert     lateralsurface_cone(5,10) == 110\nassert     lateralsurface_cone(0,0) == 0\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     lateralsurface_cone(4, 3) == 2\nassert     lateralsurface_cone(7, 2) == 17\n\ndef cone_volume(r,h):\n    '''\n    Write a function to calculate the volume of a cone given radius r and the height h.\n    '''\n    pass\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nr = 6\nh = 10\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    pass\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ndef lateralsurface_cone(r,h):\n    return r*r*h*0.5\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     lateralsurface_cone(0,0) == 0\nassert     lateralsurface_cone(1,1) == 3.14\nassert     lateralsurface_cone(2,2) == 6.28\nassert     lateralsurface_cone(3,3) == 12.56\nassert     lateralsurface_cone(4,4) == 20.62\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     replace_specialchar(\"John Doe:Smith:1.1.1.1\") == \"John Doe:Smith:1.1.1.1\"\nassert     replace_specialchar(\"John Doe:Smith:1.1.1.1:1.2.3.4\") == \"John Doe:Smith:1.1.1.1:1.2.3.4\"\nassert     replace_specialchar(\"John Doe:Smith:1.1.1.1:1.2.3.4:5.6.7.8:9.0.1.2.3.4\") == \"John Doe:Smith:1.1.1.1:1.2.3.4:5.6.7.8:9.0.1.2.3.4\"\nassert     replace_specialchar(\"John Doe:Smith:1.1.1.1:1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:5.6.7.8:9.0.1.2.3.4:"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     replace_specialchar(\"<\") == \":\"\nassert     replace_specialchar(\">\") == \":\"\nassert     replace_specialchar(\"<:\") == \":\"\nassert     replace_specialchar(\"<::\") == \":\"\nassert     replace_specialchar(\"<>\") == \":\"\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     replace_specialchar('a:b:c') == 'a:b:c'\nassert     replace_specialchar('a:b:c') == 'a:b:c'\nassert     replace_specialchar('a:b:c') == 'a:b:c'\nassert     replace_specialchar('a:b:c') == 'a:b:c'\nassert     replace_specialchar('a:b:c') == 'a:b:c'\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef trim(text):\n    '''\n    Write a function to replace leading and trailing spaces,\n    parentheses and quotes.\n    '''\n    pass\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     replace_specialchar('a:b:c') == 'a:b:c'\nassert replace_specialchar('a:b:c:') == 'a:b:c:'\nassert replace_specialchar('a:b:c:d') == 'a:b:c:d'\nassert replace_specialchar('a:b:c:d:e') == 'a:b:c:d:e'\nassert replace_specialchar('a:b:c:d') == 'a:b:c:d'\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     replace_specialchar(\"a,bc\") == 'a:bc'\nassert     replace_specialchar(\"a:bc\") == 'a:bc'\nassert     replace_specialchar(\"a,bc,123\") == 'a:bc:123'\nassert     replace_specialchar(\"a,bc:123\") == 'a:bc:123'\nassert     replace_specialchar(\"a,bc:123,abc\") == 'a:bc:123:abc'\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     replace_specialchar(\"Hi! This is a question?\") == \"Hi: This is a question?\"\nassert     replace_specialchar(\"Are you sure you want to delete this file?\") == \"Are you sure you want to delete this file?\"\nassert     replace_specialchar(\"this file is not supposed to be deleted\") == \"this file is not supposed to be deleted\"\nassert     replace_specialchar(\"this file is not supposed to be deleted.\") == \"this file is not supposed to be deleted.\"\nassert     replace_specialchar(\"Hi:\") == \"Hi:\"\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     replace_specialchar(\"a:b:c:d\") == \"a:b:c:d\", \"Not working\"\nassert     replace_specialchar(\"1,2,3,4\") == \"1:2:3:4\", \"Not working\"\nassert     replace_specialchar(\"1.2.3.4\") == \"1.2.3.4\", \"Not working\"\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     'Google.com' == replace_specialchar('Google.com')\nassert     'Pithon Class' == replace_specialchar('Pithon class')\nassert     'E:/e/tt.txt' == replace_specialchar('E:/e/tt.txt')\n\ndef replace_string(text):\n    '''\n    Write a function to replace all instances of a substring by another.\n    '''\n    pass\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_first_occurrence([1,3,4,5,6,7],5) == 4\nassert     find_first_occurrence([1,3,4,5,6,7],0) == -1\nassert     find_first_occurrence([1,3,4,5,6,7],8) == -1\nassert     find_first_occurrence([1,3,4,5,6,7],11) == -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef find_last_occurrence(A, x):\n    '''\n    Write a function to find the index of the last occurrence of a given number in a sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_first_occurrence([1,2,3,4,4,4,4,4], 4) == 3\nassert     find_first_occurrence([1,2,3,4,4,4,4,4], 0) == -1\nassert     find_first_occurrence([1,2,3,4,4,4,4,4], 10) == -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_first_occurrence([1,2,3,4,5,6,7], 3) == 3\nassert     find_first_occurrence([1,2,3,4,5,6,7], 8) == -1\nassert     find_first_occurrence([1,2,3,4,5,6,7], 0) == -1\nassert     find_first_occurrence([1,2,3,4,5,6,7], 9) == -1\nassert     find_first_occurrence([1,2,3,4,5,6,7], 1.5) == -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert find_first_occurrence([-1, 0, 2, 4, 5, 7], -1) == -1\nassert find_first_occurrence([-1, 0, 2, 4, 5, 7], 4) == 3\nassert find_first_occurrence([1, 2, 3], 1) == 0\nassert find_first_occurrence([1, 2, 3], 2) == 1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    pass\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_first_occurrence([1,1,2,3,3,4,4], 3) == 3\nassert     find_first_occurrence([1,1,2,3,3,4,4], 1) == 0\nassert     find_first_occurrence([], 1) == -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert find_first_occurrence([1,2,2,2,2,3,4,5,5,6], 3) == 4\nassert find_first_occurrence([1,2,2,2,2,3,4,5,5,6], 6) == 10\nassert find_first_occurrence([1,2,2,2,2,3,4,5,5,6], 5) == 10\nassert find_first_occurrence([1,2,2,2,2,3,4,5,5,6], 2) == 4\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\narr = [1, 2, 3, 4, 5]\nprint(sum_Of_Subarray_Prod(arr))"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sum_Of_Subarray_Prod([]) == 0,'sum of products of 0 subarray is 0'\nassert     sum_Of_Subarray_Prod([5]) == 5,'sum of products of 1 subarray is 1'\nassert     sum_Of_Subarray_Prod([1,2,3,4]) == 1*2*3*4,'sum of products of 2 subarrays is 1*2*3*4'\nassert     sum_Of_Subarray_Prod([1,2,3,4,5]) == 1*2*3*4*5,'sum of products of 3 subarrays is 1*2*3*4*5'\nassert     sum_Of_Subarray_Prod([1,2,3,4,5,6]) == 1*2*3*4*5*6,'sum of products of 4 subarrays is 1*2*3*4*5*6'\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_Of_Subarray_Prod([1,2,3,4]) == 24\nassert     sum_Of_Subarray_Prod([2,3,4]) == 24\nassert     sum_Of_Subarray_Prod([1,2]) == 6\nassert     sum_Of_Subarray_Prod([2,3]) == 6\nassert     sum_Of_Subarray_Prod([1,2,3,4]) == 0\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nsum_Of_Subarray_Prod([3, 5, 9, 2]) == 80\nsum_Of_Subarray_Prod([2, 4, 8, 7]) == 28\nsum_Of_Subarray_Prod([1, 2, 3, 4, 5, 6, 7]) == 40\nsum_Of_Subarray_Prod([2, 4, 8, 9]) == 60\nsum_Of_Subarray_Prod([1, 5, 8, 10, 12, 16, 18, 20]) == 3"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sum_Of_Subarray_Prod([]) == 0, \"Empty list\"\nassert     sum_Of_Subarray_Prod([1]) == 1, \"Single element\"\nassert     sum_Of_Subarray_Prod([1,2,3]) == -6, \"Two elements\"\nassert     sum_Of_Subarray_Prod([-3,4,-2]) == -18, \"Three elements\"\nassert     sum_Of_Subarray_Prod([1,2,3,4]) == 40, \"Four elements\"\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(\"sum_Of_Subarray_Prod Test case 1:\")\nprint(sum_Of_Subarray_Prod([-1, -2, 1, 2]))\nprint(sum_Of_Subarray_Prod([-1, -2, -3, -4, -5]))\nprint(sum_Of_Subarray_Prod([-3, -4, -5, -6, -7]))\nprint(sum_Of_Subarray_Prod([-3, -4, -5, -6, -7]))\nprint(sum_Of_Subarray_Prod([-3, -4, -5, -6, -7]))\nprint(sum_Of_Subarray_Prod([-3, -4, -5, -6, -7]))\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    pass\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            sum += arr[i] * arr[j]\n    return sum\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_Of_Subarray_Prod([]) == 0, \"Empty list\"\nassert     sum_Of_Subarray_Prod([2]) == 2, \"single element\"\nassert     sum_Of_Subarray_Prod([1,2]) == 3, \"two elements\"\nassert     sum_Of_Subarray_Prod([1,2,3]) == 12, \"multiple elements\"\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sum_Of_Subarray_Prod([1, 2, 3, 4]) == 24, \"Should be 24\"\nassert     sum_Of_Subarray_Prod([1, 2, 3, 4, 5]) == 90, \"Should be 90\"\nassert     sum_Of_Subarray_Prod([1, 2, 3, 4, 5, 6]) == 144, \"Should be 144\"\nassert     sum_Of_Subarray_Prod([1, 2, 3, 4, 5, 6, 7]) == 120, \"Should be 120\"\nassert     sum_Of_Subarray_Prod([1, 2, 3, 4, 5, 6, 7, 8]) == 720, \"Should be 720\"\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_Of_Subarray_Prod([1,2,3,4]) == 12\nassert     sum_Of_Subarray_Prod([1,2,3,4,5,6]) == 55\nassert     sum_Of_Subarray_Prod([1,2,3,4,5,6,7]) == 84\nassert     sum_Of_Subarray_Prod([1,2,3,4,5,6,7,8]) == 289\nassert     sum_Of_Subarray_Prod([1,2,3,4,5,6,7,8,9]) == 289\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     set_middle_bits(3) == 0b111, \"Wrong return\"\nassert     set_middle_bits(0) == 0, \"Wrong return\"\nassert     set_middle_bits(1) == 0b101, \"Wrong return\"\nassert     set_middle_bits(2) == 0b010, \"Wrong return\"\nassert     set_middle_bits(4) == 0b001, \"Wrong return\"\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     set_middle_bits(15) == 29, \"Testing failed\"\nassert     set_middle_bits(69) == 1, \"Testing failed\"\nassert     set_middle_bits(0) == 0, \"Testing failed\"\nassert     set_middle_bits(6) == 60, \"Testing failed\""
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     set_middle_bits(0) == 0, \"Should be 0\"\nassert     set_middle_bits(1) == 1, \"Should be 1\"\nassert     set_middle_bits(2) == 3, \"Should be 3\"\nassert     set_middle_bits(10) == 3, \"Should be 3\"\nassert     set_middle_bits(11) == 3, \"Should be 3\"\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     set_middle_bits(1) == '0011'\nassert     set_middle_bits(4) == '0110'\nassert     set_middle_bits(16) == '0001001110'\nassert     set_middle_bits(32) == '00101010001101001110'\nassert     set_middle_bits(512) == '00101010001101001110'\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     set_middle_bits(1) == 0\nassert     set_middle_bits(7) == 2\nassert     set_middle_bits(10) == 5\nassert     set_middle_bits(32) == 16\nassert     set_middle_bits(2048) == 1024\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     set_middle_bits(2) == 4, \"Expected: 4, Actual: %s\" % (4)\nassert     set_middle_bits(1) == 0, \"Expected: 0, Actual: %s\" % (0)\nassert     set_middle_bits(3) == 3, \"Expected: 3, Actual: %s\" % (3)\nassert     set_middle_bits(5) == 15, \"Expected: 15, Actual: %s\" % (15)\nassert     set_middle_bits(8) == 8, \"Expected: 8, Actual: %s\" % (8)\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     set_middle_bits(10) == 0x0f\nassert     set_middle_bits(100) == 0x55\nassert     set_middle_bits(1000) == 0xbb\nassert     set_middle_bits(10000) == 0x55555555\nassert     set_middle_bits(100000) == 0x5555555555555555\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     left_insertion([1,2,3,4,6], 6) == 3, 'Wrong answer'\nassert left_insertion([1,2,3,4,6], 0) == 0, 'Wrong answer'\nassert left_insertion([1,2,3,4,6], 2) == 1, 'Wrong answer'\nassert left_insertion([1,2,3,4,6], 5) == 4, 'Wrong answer'\nassert left_insertion([1,2,3,4,6], 7) == 5, 'Wrong answer'\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef left_insertion(a, x):\n    for i in range(len(a)):\n        if a[i] >= x:\n            break\n    return i\n\ndef left_insertion_improve(a, x):\n    '''\n    improve the left_insertion function.\n    '''\n    pos = bisect.bisect_left(a, x)\n    # if the element is already present in the array,\n    # we can skip the insertion\n    if pos!= len(a) and x == a[pos]:\n        return pos\n    # otherwise, we should insert it in the appropriate position\n    for i in range(pos):\n        if a[i] <= x:\n            return i\n    return pos\n\ndef left_insertion_improve2(a, x):\n    '''\n    improve the left_insertion function.\n    '''\n    pos = bisect.bisect_left(a, x)\n    # if the element is already present in the array,\n    # we can skip the insertion\n    if pos!= len(a) and x == a[pos]:\n        return pos\n    # otherwise, we should insert it in the appropriate position\n    for i in range(pos, 0, -1):\n        if a[i-1] <= x:\n            return i\n    return 0\n\n\ndef left_insertion_improve3(a, x):\n    '''\n    improve the left_insertion function.\n    '''\n    # we are assuming that the array is sorted, so we can just do a binary search\n    pos = bisect.bisect_left(a, x)\n    if pos == len(a) and a[pos-1] == x:\n        return pos-1\n    if pos == len(a):\n        return 0\n    if a[pos] == x:\n        return pos\n    if x <= a[pos]:\n        return pos\n    for i in range(pos, -1, -1):\n        if a[i] <= x:\n            return i\n    return 0\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nleft_insertion(['a','b','c'], 'a') == 0\nassert left_insertion(['a','b','c'], 'b') == 1\nassert left_insertion(['a','b','c'], 'c') == 2\nassert left_insertion(['a','b','c'], 'd') == 3\nassert left_insertion(['a','b','c'], 'x') == -1\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef left_insertion_sorted(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nleft_insertion([0,1,2,3,4],4)==3\nleft_insertion([4,5,6,7,8,9,10],5)==4\nleft_insertion([1,2,3,4,5,6,7,8,9,10],10)==5\nleft_insertion([4,5,6,7,8,9,10],2)==1\nleft_insertion([4,5,6,7,8,9,10],20)==4\nleft_insertion([4,5,6,7,8,9,10],0)==0\nleft_insertion([],0)==0\nleft_insertion([],1)==0\nleft_insertion([1],1)==1\nleft_insertion([1,2],1)==2\nleft_insertion([1,2,3],1)==2\nleft_insertion([1,2,3,4,5],1)==2\nleft_insertion([1,2,3,4,5,6],1)==2\nleft_insertion([1,2,3,4,5,6,7],1)==2\nleft_insertion([1,2,3,4,5,6,7,8],1)==2\nleft_insertion([1,2,3,4,5,6,7,8,9],1)==2\nleft_insertion([1,2,3,4,5,6,7,8,9,10],1)==2\nleft_insertion([1,2,3,4,5,6,7,8,9,10,11],1)==2\nleft_insertion([1,2,3,4,5,6,7,8,9,10,11,12],1)==2\nleft_insertion([1,2,3,4,5,6,7,8,9,10,11,12,13],1)==2\nleft_insertion([1,2,3,4,5,6,7,8,9,10,11,12,13,14],1)==2\nleft_insertion([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],1)==2\nleft_insertion([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],1)==2\nleft_insertion([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17],1)==2\nleft_insertion([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18],1)==2\nleft_insertion([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19],1)==2\nleft_insertion([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],1)==2\nleft_insertion([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21],1)==2\nleft_insertion([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22],1)==2\nleft_insertion([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23],1)==2\nleft_insertion([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],1)==2\nleft_insertion([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],1)==2\nleft_insertion([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26],1)==2\nleft_insertion([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27],1)==2\nleft_insertion([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28],1)==2\nleft_insertion([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],1)==2\nleft_insertion([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],1)==2\nleft_insertion([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31],1)==2\nleft_insertion([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32],1)==2\nleft_insertion([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33],1)==2\nleft_insertion([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34],1)==2\nleft_insertion([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35],1)==2\nleft_insertion([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36],1)==2\nleft_insertion([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37],1)==2\nleft_insertion([1,2,3,4,5,6,7,8,9"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ndef left_insertion(a, x):\n    n = len(a)\n    if n == 0:\n        return -1\n    i = 0\n    j = i + 1\n    while j < n:\n        if a[j] < x:\n            i += 1\n            a[i], a[j] = a[j], a[i]\n        else:\n            break\n    a[i+1] = x\n    return i+1\n\na = [0, 2, 4, 6, 8]\nx = 2\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nleft_insertion([1,3,5,6], 2) == 1\nleft_insertion([1,3,5,6], 1) == 0\nleft_insertion([1,3,5,6], 3) == 1\nleft_insertion([1,3,5,6], 5) == 2\nleft_insertion([1,3,5,6], 7) == 3\nleft_insertion([1,3,5,6], 6) == 4\nleft_insertion([1,3,5,6], 0) == 5\nleft_insertion([1,3,5,6], 8) == 6\nleft_insertion([1,3,5,6], 4) == 7\nleft_insertion([1,3,5,6], 10) == 8\nleft_insertion([1,3,5,6], 9) == 9\nleft_insertion([1,3,5,6], 6) == 10\nleft_insertion([1,3,5,6], 12) == 11\nleft_insertion([1,3,5,6], 7) == 13\nleft_insertion([1,3,5,6], 14) == 14\nleft_insertion([1,3,5,6], 15) == 15\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ncheck_str('awesome') == True\ncheck_str('MAKE') == False\ncheck_str('coding') == True\ncheck_str('testing') == False\ncheck_str('A') == True\ncheck_str('E') == True\ncheck_str('O') == True\ncheck_str('U') == True\ncheck_str('*') == True\ncheck_str('!!!') == True\ncheck_str('not') == True\ncheck_str('w3schools') == True\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert check_str('hello') == True\nassert check_str('qwe') == True\nassert check_str('h') == False\nassert check_str('asf') == False\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_str('', True) == True\nassert     check_str('a', True) == True\nassert     check_str('A', True) == True\nassert     check_str('aa', True) == True\nassert     check_str('aaA', True) == True\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert check_str('vowel') == True\nassert check_str('consonant') == False\nassert check_str('praveen') == False\nassert check_str('vowel123') == True\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_str('ab') == False\nassert     check_str('ab1') == False\nassert     check_str('abE') == False\nassert     check_str('abO') == True\nassert     check_str('Aab') == False\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef is_vowel(string): \n    '''\n    Write a function to check whether the given string is vowel or not using regex.\n    '''\n    pass\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     geometric_sum(4) == 7, \"Your function does not work\"\nassert geometric_sum(10) == 55, \"Your function does not work\"\nassert geometric_sum(1) == 1, \"Your function does not work\"\nassert geometric_sum(0) == 1, \"Your function does not work\"\nassert geometric_sum(3) == 3, \"Your function does not work\"\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     geometric_sum(5) == 5, \"Wrong answer\"\nassert     geometric_sum(7) == 14, \"Wrong answer\"\nassert     geometric_sum(0) == 1, \"Wrong answer\"\nassert     geometric_sum(2) == 3, \"Wrong answer\"\nassert     geometric_sum(-3) == 2, \"Wrong answer\"\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert         geometric_sum(5) == 15\nassert         geometric_sum(9) == 27\nassert         geometric_sum(11) == 140\n\nprint(\"All tests passed!!!\")"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     geometric_sum(0) == 1\nassert     geometric_sum(1) == 1\nassert     geometric_sum(2) == 2\nassert     geometric_sum(3) == 6\nassert     geometric_sum(4) == 15\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     geometric_sum(2) == 2, '2 is not expected'\nassert geometric_sum(3) == 6, '3 is not expected'\nassert geometric_sum(4) == 10, '4 is not expected'\nassert geometric_sum(5) == 28, '5 is not expected'\nassert geometric_sum(6) == 56, '6 is not expected'\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef recursive_power(n, p):\n    '''\n    Write a function to calculate the exponentiation of n by p. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    pass\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_Index(1) == 0, 'test_1'\nassert     find_Index(2) == 1, 'test_2'\nassert     find_Index(3) == 2, 'test_3'\nassert     find_Index(4) == 3, 'test_4'\nassert     find_Index(5) == 4, 'test_5'\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nfind_Index(5) == 0\n\ndef find_Index_Largest(n):\n    '''\n    Write a python function to find the index of largest triangular number with n digits. https://www.geeksforgeeks.org/index-of-largest-triangular-number-with-n-digits/\n    '''\n    pass\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_Index(5) == 0, \"incorrect answer\"\nassert     find_Index(4) == 1, \"incorrect answer\"\nassert     find_Index(3) == 2, \"incorrect answer\"\nassert     find_Index(2) == 3, \"incorrect answer\"\nassert     find_Index(1) == 4, \"incorrect answer\"\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef find_Index_2(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # n = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20\n    triangle_numbers = [0, 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 81, \n                        102, 132, 153, 171, 212, 243, 273, 304, 334, 365, 396,\n                        437, 462, 483, 512, 553, 597, 649, 717, 778, 839, 901,\n                        1061, 1152, 1213, 1363, 1425, 1494, 1529, 1633, 1745, 1835,\n                        1931, 2054, 2146, 2321, 2426, 2536, 2659, 2775, 2893, 3015,\n                        3353, 3531, 3728, 3912, 4164, 4266, 4406, 4538, 4754, 4921, \n                        5158, 5441, 5530, 5784, 6049, 6238, 6493, 6759, 6874, 6911,\n                        7079, 7228, 7442, 7643, 7766, 7894, 7983, 8097, 8286, 8437, \n                        8571, 8626, 8937, 9095, 9265, 9455, 9625, 9721, 9815, 9951,\n                        10050, 10140, 10256, 10362, 10508, 10570, 10636, 10721, 10812,\n                        10904, 11088, 11186, 11275, 11364, 11546, 11635, 11728, 11819,\n                        11917, 12029, 12062, 12244, 12555, 12722, 12816, 12903, 13075,\n                        13288, 13542, 13731, 13922, 14019, 14056, 14952, 15017, 15129,\n                        15188, 15359, 15726, 15926, 16122, 16365, 16641, 16736, 16918,\n                        17099, 17284, 17439, 17719, 17915, 18037, 18129, 18255, 18445,\n                        18520, 18613, 18701, 18905, 19160, 19306, 19534, 19731, 19957,\n                        20185, 20368, 20538, 20853, 21118, 21403, 21615, 21879, 22229,\n                        22525, 22834, 23020, 23315, 23622, 23917, 24002, 24798, 25083,\n                        25489, 25837, 26234, 26750, 27057, 27543, 27944, 28470, 29382,\n                        30370, 31365, 32742, 33611, 34644, 35728, 36930, 38185, 39390,\n                        41336, 43762, 45107, 46403, 47921, 49356, 51265, 53981, 55685,\n                        58508, 60050, 61917, 63781, 65655, 68073, 69665, 71477, 74488,\n                        77175, 79882, 82450, 85475, 87700, 90206, 94217, 96426, 98163,\n                        99306, 10216, 104571, 107391, 110461, 114348, 118451, 120428,\n                        125195, 128722, 131343, 134300, 138884, 143041, 148027, 151716,\n                        155819, 158798, 162891, 166603, 168288, 172714, 175488, 178708,\n                        182637, 186979, 189813, 193578, 198568, 200186, 205748, 209988,\n                        214612, 219840, 225524, 227381, 229489, 234498, 239929, 246626,\n                        252453, 257363, 262267, 266247, 270413, 274266, 279597, 284623,\n                        292222, 302059, 311746, 319920, 325140, 334528, 343094, 351746,\n                        358904, 366771, 373168, 382474, 390830, 405201, 413813, 426020,\n                        433824, 444637, 454587, 464076, 473086, 483194, 492841, 504096,\n                        512822, 534706, 556759, 577053, 587985, 595702, 606465, 614807,\n                        624643, 648789, 659986, 674055, 686254, 697092, 707712, 726709,\n                        744868, 764961, 785506, 800489, 828462, 851117, 879608, 902297,\n                        921484, 940604, 952905, 977493, 993959, 1008346, 1015453, 1030843,\n                        1042306, 1068689, 1080745, 1107580, 1126421, 1143615, 1163905, 1184636,\n                        1204905, 1232881, 1253357, 1272748, 1292449, 1301186, 1338763, 1364529,\n                        1393475, 1414013, 1444595, 1472979, 1492839, 1514202, 1553228, 1573671,\n                        1593736, 1623279, 1652894, 1683048, 1713937, 1753275, 1782682, 1812336,\n                        1849425, 1857762, 1923054, 1946507, 1961825, 1977192, 2002863, 2036102,\n                        2043332, 2072689, 2101389, 2132658, 2247444, 2262837, 2295585, 2314266,\n                        2353166, 2371737, 2398100, 2428438, 2479349, 2517904, 2574077, 2601139,\n                        2646163, 2697015, 2739201, 2798595, 2843239, 2904104, 2959893, 3008058,\n                        3057912, 3111707, 3174197, 3238284, 3347606, 3449114, 3585223, 3696160,\n                        3375149, 3888188, 3996197, 3998984, 4010234, 4027606, 4075584, 4121145,\n                        4137648, 4163204, 4201762, 4223628, 4247159, 4266448, 4289456, 4328265,\n                        4358588, 4369066, 4380151, 4427202, 4454358, 4477579, 4518603, 4575177,\n                        4623593, 4667029, 4712196, 4759239, 4825723, 4884333, 4946170, 4984044,\n                        5045159, 5102917, 5111271, 5145803, 5163589, 5189055, 5224776, 5275094,\n                        5288746, 5328194, 5373058, 5388580, 5428270, 5487920, 5516281, 5579052,\n                        5597483, 5630192, 5681229, 5728206, 5788302, 5953822, 5984772, 6019816,\n                        6070755, 6110757, 6127600, 6145108, 6167208, 6205278, 6218138, 6248523,\n                        6272300, 6298614, 6346232, 6365456, 6387802, 6429919, 6480613, 6520598,\n                        6567603, 6585366, 6605248, 6645293, 6672468, 6695047, 6735981, 6791047,\n                        6841436, 6875379, 6919288, 6964345, 7013769, 7031844, 7050044, 7086656,\n                        7100366, 7121247, 7137822, 7162827"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef index_of_smallest_triangular_number_with_n_digits(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    pass\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nfind_Index(4) == 0\nfind_Index(5) == 1\nfind_Index(6) == 2\nfind_Index(7) == 3\nfind_Index(8) == 4\nfind_Index(9) == 5\n\ndef max_pow(n):\n    '''\n    Write a python function to find the largest power of 2 less than or equal to n.\n    '''\n    pass\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef find_TriangularNumber(n):\n    '''\n    Given n, we need to find a triangular number with n digits, \n    where the triangular number is the sum of natural numbers from 1 to n.\n    '''\n    pass"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_Index(5) == 3\nassert     find_Index(2) == 1\nassert     find_Index(4) == 1\nassert     find_Index(8) == 1\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert find_Index(2) == 1\nassert find_Index(3) == 2\nassert find_Index(4) == 3\nassert find_Index(5) == 4\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tuple_to_dict([1,2,3,4,5,6]) == {\"1\":2, \"3\":4, \"5\":6, \"2\":3, \"4\":5, \"6\":5}\nassert     tuple_to_dict((1,2,3,4,5,6)) == {\"1\":2, \"3\":4, \"5\":6, \"2\":3, \"4\":5, \"6\":5}\nassert     tuple_to_dict((1,2,3,4,5,6,7)) == {\"1\":2, \"3\":4, \"5\":6, \"2\":3, \"4\":5, \"6\":5, \"7\":7}\nassert     tuple_to_dict((1,2,3,4,5,6,7,8,9)) == {\"1\":2, \"3\":4, \"5\":6, \"2\":3, \"4\":5, \"6\":5, \"7\":7, \"8\":8, \"9\":9}\nassert     tuple_to_dict(('a','b',['c','d','e'],1,2,3)) == {'a':['c','d','e'], 'b':1, '1':2, '2':3, '3':1}\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_to_dict(test_tup) == {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_to_dict((10,20,30,40)) == {\n    (10,20):1,\n    (20,30):2,\n    (30,40):3\n}\nassert tuple_to_dict((0,1,2,3,4,5,6,7,8,9)) == {\n    (0,1):1,\n    (1,2):2,\n    (2,3):3,\n    (3,4):4,\n    (4,5):5,\n    (5,6):6,\n    (6,7):7,\n    (7,8):8,\n    (8,9):9\n}\nassert tuple_to_dict((10,20,30,40,50,60,70,80,90)) == {\n    (10,20):1,\n    (20,30):2,\n    (30,40):3,\n    (40,50):4,\n    (50,60):5,\n    (60,70):6,\n    (70,80):7,\n    (80,90):8\n}\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tuple_to_dict((1,2,3,4,5,6,7,8)) == {1:2,2:3,3:4,4:5,5:6,6:7,7:8}\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ntup = (1,2,3,4,5)\n\noutput = tuple_to_dict(tup)\nexpected = {1:2, 2:3, 3:4, 4:5}\n\nassert expected == output\nprint(\"All tests Passed\")\n\nprint()\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tuple_to_dict([[2,1],[3,4],[5,6]]) == {(1,2):1,(2,3):2,(3,4):3,(4,5):4,(5,6):5}\nassert tuple_to_dict([[2,3],[1,4],[5,6]]) == {(1,2):3,(2,3):2,(3,4):4,(4,5):6,(5,6):6}\nassert tuple_to_dict([[2,3,5],[1,4,6],[5,6,8]]) == {(1,2,3):5,(2,3,4):4,(3,4,5):6,(4,5,6):8,(5,6,8):8}\nassert tuple_to_dict([[2,3,5],[1,4,6,7],[5,6,8,9]]) == {(1,2,3):5,(2,3,4):4,(3,4,5):6,(4,5,6):8,(5,6,8,9):9}\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \ntuple_to_dict(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k')) == {\n    ('a', 'b'): 1,\n    ('a', 'c'): 2,\n    ('a', 'd'): 3,\n    ('a', 'e'): 4,\n    ('a', 'f'): 5,\n    ('a', 'g'): 6,\n    ('a', 'h'): 7,\n    ('a', 'i'): 8,\n    ('a', 'j'): 9,\n    ('a', 'k'): 10,\n    ('b', 'c'): 11,\n    ('b', 'd'): 12,\n    ('b', 'e'): 13,\n    ('b', 'f'): 14,\n    ('b', 'g'): 15,\n    ('b', 'h'): 16,\n    ('b', 'i'): 17,\n    ('b', 'j'): 18,\n    ('b', 'k'): 19,\n    ('c', 'd'): 20,\n    ('c', 'e'): 21,\n    ('c', 'f'): 22,\n    ('c', 'g'): 23,\n    ('c', 'h'): 24,\n    ('c', 'i'): 25,\n    ('c', 'j'): 26,\n    ('c', 'k'): 27,\n    ('d', 'e'): 28,\n    ('d', 'f'): 29,\n    ('d', 'g'): 30,\n    ('d', 'h'): 31,\n    ('d', 'i'): 32,\n    ('d', 'j'): 33,\n    ('d', 'k'): 34,\n    ('e', 'f'): 35,\n    ('e', 'g'): 36,\n    ('e', 'h'): 37,\n    ('e', 'i'): 38,\n    ('e', 'j'): 39,\n    ('e', 'k'): 40,\n    ('f', 'g'): 41,\n    ('f', 'h'): 42,\n    ('f', 'i'): 43,\n    ('f', 'j'): 44,\n    ('f', 'k'): 45,\n    ('g', 'h'): 46,\n    ('g', 'i'): 47,\n    ('g', 'j'): 48,\n    ('g', 'k'): 49,\n    ('h', 'i'): 50,\n    ('h', 'j'): 51,\n    ('h', 'k'): 52,\n    ('i', 'j'): 53,\n    ('i', 'k'): 54,\n    ('j', 'k'): 55,\n}\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tuple_to_dict( ('a', 'b', 'c', 'd', 'e', 'f', 'g') ) == \\\n        {\n            'a': 'b',\n            'b': 'c',\n            'c': 'd',\n            'd': 'e',\n            'e': 'f',\n            'f': 'g'\n        }\n\n\n\n\ndef list_to_dict(test_lst):\n    '''\n    Write a function to convert the given list to a dictionary using adjacent elements.\n    '''\n    pass"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tuple_to_dict((1, 2, 3, 4, 5, 6, 7)) == {1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7}\nassert tuple_to_dict((1, (2, 3, 4, 5), 6, 7)) == {1: (2, 3, 4, 5), 6: 7}\nassert tuple_to_dict((1, (2, 3), 4, (5, 6, 7), 8, 9)) == {1: (2, 3), 4: (5, 6, 7), 8: 9}\nassert tuple_to_dict((1, (2, 3), 4, (5, 6, 7))) == {1: (2, 3), 4: (5, 6, 7)}\nassert tuple_to_dict((1, 2)) == {1: 2}\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tuple_to_dict(('a', 'b', 'c')) == {'a': 'b', 'b': 'c'}, \"Should be {'a': 'b', 'b': 'c'}\"\nassert     tuple_to_dict(('a', 'b', 'c')) == {'a': 'b', 'b': 'c'}, \"Should be {'a': 'b', 'b': 'c'}\"\nassert     tuple_to_dict((1, 2, 3)) == {1: 2, 2: 3}, \"Should be {1: 2, 2: 3}\"\nassert     tuple_to_dict((1, 2, 3)) == {1: 2, 2: 3}, \"Should be {1: 2, 2: 3}\"\nassert     tuple_to_dict((1, 2, 3, 4)) == {1: 2, 2: 3, 3: 4}, \"Should be {1: 2, 2: 3, 3: 4}\"\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     all_Characters_Same(\"a\") == True, \"a is not a letter.\"\nassert     all_Characters_Same(\"i\") == True, \"i is not a letter.\"\nassert     all_Characters_Same(\"B\") == True, \"B is not a letter.\"\nassert     all_Characters_Same(\"P\") == True, \"P is not a letter.\"\nassert     all_Characters_Same(\"T\") == True, \"T is not a letter.\"\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     all_Characters_Same(s1) == True, \"all_Characters_Same returned False\"\nassert     all_Characters_Same(s2) == False, \"all_Characters_Same returned True\"\nassert     all_Characters_Same(s3) == True, \"all_Characters_Same returned True\"\n\ndef all_Characters_Different(s) :\n    '''\n    Write a python function to check whether all the characters are different or not.\n    '''\n    pass\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert all_Characters_Same('geeks') == False\nassert all_Characters_Same('geeksfor') == True\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     all_Characters_Same(\"aaaa\") == True,    \"Wrong output.\"\nassert     all_Characters_Same(\"a\") == False,    \"Wrong output.\"\nassert     all_Characters_Same(\"aac\") == False,    \"Wrong output.\"\nassert     all_Characters_Same(\"\") == True,    \"Wrong output.\"\nassert     all_Characters_Same(\"12345\") == True,    \"Wrong output.\"\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     all_Characters_Same('kannadi') == False, \"test 1 failed\"\nassert     all_Characters_Same('kannadi') == True, \"test 2 failed\"\nassert     all_Characters_Same('kannadi') == True, \"test 3 failed\"\nassert     all_Characters_Same('kannadi') == True, \"test 4 failed\"\nassert     all_Characters_Same('kannadi') == True, \"test 5 failed\"\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     all_Characters_Same('aba') == False, 'fail'\nassert     all_Characters_Same('aba') == True, 'pass'\nassert     all_Characters_Same('') == False, 'pass'\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     all_Characters_Same('a') == True, 'Function should return True if all the characters are same'\nassert     all_Characters_Same('b') == False, 'Function should return False if all the characters are different'\nassert     all_Characters_Same('abc') == True, 'Function should return True if all the characters are same'\nassert     all_Characters_Same('def') == False, 'Function should return False if all the characters are different'\nassert     all_Characters_Same('aabc') == True, 'Function should return True if all the characters are same'\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert all_Characters_Same(s) == True\nprint('all_Characters_Same function is correct')\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     all_Characters_Same('nope') == False\nassert     all_Characters_Same('apple') == True\nassert     all_Characters_Same('apple') == True\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n'''\nIf you have not written it properly, it will raise an error.\n'''\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    pass\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     area_tetrahedron(3.5)==6\nassert     area_tetrahedron(10)==20"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     area_tetrahedron(4) == 12\nassert     area_tetrahedron(6) == 18\n\ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    pass\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     area_tetrahedron(1) == 0.5, \\\n    'Wrong'\nassert     abs(area_tetrahedron(2) - 1.732050807568877293527446) < 0.0000001, \\\n    'Wrong'\nassert     abs(area_tetrahedron(3) - 0.5265491397775483500794425) < 0.0000001, \\\n    'Wrong'\nassert     abs(area_tetrahedron(4) - 0.62500002384185791015625) < 0.0000001, \\\n    'Wrong'\nassert     abs(area_tetrahedron(5) - 1.0) < 0.0000001, \\\n    'Wrong'\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef perimeter_tetrahedron(side):\n    '''\n    Write a function to caluclate the perimeter of a tetrahedron.\n    '''\n    pass\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     area_tetrahedron(1.0) == 1.0\nassert     area_tetrahedron(2.0) == 4.0/3.0\nassert     area_tetrahedron(5.0) == 20.0/3.0\nassert     area_tetrahedron(8.0) == 20.0/3.0\nassert     area_tetrahedron(10.0) == 50.0/3.0\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     area_tetrahedron(1) == 12, \"Wrong answer in area_tetrahedron(1)\"\nassert     area_tetrahedron(3) == 18, \"Wrong answer in area_tetrahedron(3)\"\nassert     area_tetrahedron(4) == 24, \"Wrong answer in area_tetrahedron(4)\"\nassert     area_tetrahedron(5) == 20, \"Wrong answer in area_tetrahedron(5)\"\nassert     area_tetrahedron(6) == 24, \"Wrong answer in area_tetrahedron(6)\"\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef perimeter_tetrahedron(side):\n    '''\n    Write a function to caluclate the perimeter of a tetrahedron.\n    '''\n    pass\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ndef rotate_left(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the left direction.\n    '''\n    pass\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     rotate_right([1,2,3,4,5,6,7], 3) == [4,5,6,7,1,2,3]\nassert     rotate_right([1,2,3,4,5,6,7], -3) == [3,4,5,6,7,1,2]\nassert     rotate_right([1,2,3,4,5,6], 0) == [1,2,3,4,5,6]\nassert     rotate_right([1,2,3,4,5,6], 3) == [5,6,1,2,3,4]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     rotate_right([1, 2, 3, 4, 5], 3) ==    [4, 5, 1, 2, 3], \"Fail\"\nassert     rotate_right([1, 2, 3, 4, 5], -3) ==    [1, 2, 3, 4, 5], \"Fail\"\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     rotate_right([2, 3, 4, 5], 1) == [5, 2, 3, 4]\nassert     rotate_right([2, 3, 4, 5], 2) == [3, 4, 5, 2]\nassert     rotate_right([2, 3, 4, 5], 3) == [4, 5, 2, 3]\nassert     rotate_right([2, 3, 4, 5], 4) == [5, 2, 3, 4]\nassert     rotate_right([2, 3, 4, 5], 5) == [4, 5, 2, 3]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     rotate_right([1, 2, 3, 4, 5], 2) == [[3, 4, 5, 1, 2], \n                                            [2, 3, 4, 5, 1], \n                                            [1, 2, 3, 4, 5], \n                                            [5, 1, 2, 3, 4], \n                                            [4, 5, 1, 2, 3]]\n\nassert rotate_right([], 1) == []\nassert rotate_right([], 2) == []\nassert rotate_right([1, 2, 3], 2) == [[1, 2, 3], \n                                        [3, 1, 2], \n                                        [2, 3, 1], \n                                        [1, 2, 3], \n                                        [3, 1, 2]]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     rotate_right([1,2,3,4,5,6,7,8,9,0], 2) == [9,0,1,2,3,4,5,6,7,8], \"Error, should be 9 0 1 2 3 4 5 6 7 8\"\nassert     rotate_right([1,2,3,4,5,6,7,8,9,0], -2) == [0,1,2,3,4,5,6,7,8,9], \"Error, should be 0 1 2 3 4 5 6 7 8\"\nassert     rotate_right([], 2) == [], \"Error, should be \"\nassert     rotate_right([], -2) == [], \"Error, should be \""
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rotate_right([1, 2, 3, 4, 5], 1) == [5, 1, 2, 3, 4]\nassert     rotate_right([1, 2, 3, 4, 5], 4) == [1, 2, 3, 4, 5]\nassert     rotate_right([1, 2, 3, 4, 5], -1) == [1, 2, 3, 4, 5]\nassert     rotate_right([1, 2, 3, 4, 5], -2) == [3, 2, 1, 4, 5]\nassert     rotate_right([1, 2, 3, 4, 5], -3) == [4, 3, 2, 1, 5]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nrotate_right([1, 2, 3, 4, 5], 3) == [5, 1, 2, 3, 4]\n\ndef minimum_inversion_number(arr):\n    '''\n    Given an array of size n. Inversion number of an array of size n is the number of inversions in an array of size n - 1. Inversions can be calculated in O(n^2) time.\n    Write a function that returns minimum inversion number.\n    '''\n    \n    n = len(arr)\n    \n    inversions = 0\n    \n    left = 0\n    right = n - 1\n    \n    while left <= right:\n        if arr[left] > arr[right]:\n            inversions += right - left\n            \n            right -= 1\n        else:\n            left += 1\n            \n    return inversions\n\nassert minimum_inversion_number([2,4,1,3,5]) == 3\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert rotate_right([1, 2, 3, 4, 5, 6], 3) == [5, 6, 1, 2, 3, 4]\nassert rotate_right([1, 2, 3, 4, 5, 6], 1) == [3, 4, 5, 6, 1, 2]\nassert rotate_right([1, 2, 3, 4, 5, 6], 6) == [1, 2, 3, 4, 5, 6]\nassert rotate_right([1, 2, 3, 4, 5, 6], -1) == [2, 3, 4, 5, 6, 1]\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert check_none([1, 2, 3]) == False\nassert check_none([1, 2, None]) == True\nassert check_none([None]) == True\nassert check_none([]) == True\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_none((1, 2, 3)) == False, \"The tuple (1, 2, 3) has no None value.\"\nassert     check_none((None, 2, 3)) == True, \"The tuple (None, 2, 3) has no None value.\"\nassert     check_none((1, None, 3)) == True, \"The tuple (1, None, 3) has no None value.\"\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nif __name__ == '__main__':\n    test_tup = (None, 'N', 10, 0, None)\n    check_none(test_tup)\n    print(\"Test passed\")\n\n    test_tup = (None, 'N', 10, 0, None)\n    check_none(test_tup)\n    print(\"Test passed\""
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_none((\"a\",None,\"b\",None,None,\"c\",None)) == True\nassert     check_none((\"a\",None,\"b\",\"c\",None,None)) == False\nassert     check_none((\"a\",None,\"b\",None,\"c\",None,None,\"d\")) == False\nassert     check_none((\"a\",None,None,None,\"c\",None)) == False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_none((None, True)) == True, \"The output should be True\"\nassert     check_none((1, 2)) == False, \"The output should be False\"\nassert     check_none((None,)) == True, \"The output should be True\"\nassert     check_none((1, 2, None)) == True, \"The output should be True\"\nassert     check_none((1, 2, True)) == False, \"The output should be False\"\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_none(()) == False, \"Test 1 : Tuple has a None\"\nassert     check_none((None,None,None,)) == False, \"Test 2 : Tuple has a None\"\nassert     check_none((\"a\",\"b\",\"c\",\"d\",\"e\")) == False, \"Test 3 : Tuple has a None\"\nassert     check_none((\"a\",\"b\",\"c\")) == True, \"Test 4 : Tuple has no None\"\nprint(\"All the test cases have been passed\")"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_none(())\nassert     check_none((None,))\nassert     check_none((None, None))\nassert     check_none((None, None, None,))\nassert     check_none((\"\", \"\"))\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_none((1,2,None)) == True, \"None should be None!\"\nassert     check_none((1,None,2)) == False, \"None should be None!\"\nassert     check_none((None,None,2)) == False, \"None should be None!\"\nassert     check_none((None,None,None)) == True, \"None should be None!\"\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_none(('a', 'b', None)) == True, \"Example 1\"\nassert     check_none(('a', 'b', 1, 2)) == False, \"Example 2\"\nassert     check_none(('a', 1, 2)) == True, \"Example 3\"\nassert     check_none(('a', )) == True, \"Example 4\"\nassert     check_none(('a', 1)) == False, \"Example 5\"\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     divisible_by_digits(1, 10) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     divisible_by_digits(1, 12) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nassert     divisible_by_digits(1, 10) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert     divisible_by_digits(1, 11) == []\nassert     divisible_by_digits(0, 10) == [0]\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n    divisible_by_digits(1,10) == 1\n    divisible_by_digits(1,100) == False\n    divisible_by_digits(1,1000) == False\n    divisible_by_digits(1,10000) == True\n    divisible_by_digits(1,10000) == True\n    divisible_by_digits(1,20000) == True\n    divisible_by_digits(1,20000) == True\n    divisible_by_digits(1,30000) == True\n    divisible_by_digits(1,30000) == True\n    divisible_by_digits(1,40000) == False\n    divisible_by_digits(1,40000) == False\n    divisible_by_digits(1,50000) == True\n    divisible_by_digits(1,50000) == True\n    divisible_by_digits(1,60000) == True\n    divisible_by_digits(1,60000) == True\n    divisible_by_digits(1,70000) == True\n    divisible_by_digits(1,70000) == True\n    divisible_by_digits(1,80000) == False\n    divisible_by_digits(1,80000) == False\n    divisible_by_digits(1,90000) == True\n    divisible_by_digits(1,90000) == True\n    divisible_by_digits(1,100000) == True\n    divisible_by_digits(1,100000) == True\n    divisible_by_digits(1,1000000) == True\n    divisible_by_digits(1,1000000) == True\n    divisible_by_digits(1,10000000) == True\n    divisible_by_digits(1,10000000) == True\n    divisible_by_digits(1,100000000) == False\n    divisible_by_digits(1,100000000) == False\n    divisible_by_digits(1,1000000000) == False\n    divisible_by_digits(1,1000000000) == False\n    divisible_by_digits(1,1000000000000) == False\n    divisible_by_digits(1,1000000000000) == False\n    divisible_by_digits(1,1000000000000000) == False\n    divisible_by_digits(1,1000000000000000) == False\n    divisible_by_digits(1,100000000000000000) == False\n    divisible_by_digits(1,100000000000000000) == False\n    divisible_by_digits(1,1000000000000000) == False\n    divisible_by_digits(1,1000000000000000) == False\n    divisible_by_digits(1,1000000000000) == False\n    divisible_by_digits(1,1000000000000) == False\n    divisible_by_digits(1,100000000) == False\n    divisible_by_digits(1,100000000) == False\n    divisible_by_digits(1,10000) == False\n    divisible_by_digits(1,0) == False\n    divisible_by_digits(1,-1) == False\n    divisible_by_digits(1,-2) == False\n    divisible_by_digits(1,-3) == False\n    divisible_by_digits(1,0) == False\n    divisible_by_digits(1,1) == True\n    divisible_by_digits(1,2) == True\n    divisible_by_digits(1,3) == True\n    divisible_by_digits(1,4) == True\n    divisible_by_digits(1,5) == True\n    divisible_by_digits(1,6) == True\n    divisible_by_digits(1,7) == True\n    divisible_by_digits(1,8) == True\n    divisible_by_digits(1,9) == True\n    divisible_by_digits(1,10) == True\n    divisible_by_digits(1,11) == False\n    divisible_by_digits(1,12) == False\n    divisible_by_digits(1,13) == False\n    divisible_by_digits(1,14) == False\n    divisible_by_digits(1,15) == False\n    divisible_by_digits(1,16) == False\n    divisible_by_digits(1,17) == False\n    divisible_by_digits(1,18) == False\n    divisible_by_digits(1,19) == False\n    divisible_by_digits(1,20) == False\n    divisible_by_digits(1,21) == False\n    divisible_by_digits(1,22) == False\n    divisible_by_digits(1,23) == False\n    divisible_by_digits(1,24) == False\n    divisible_by_digits(1,25) == False\n    divisible_by_digits(1,26) == False\n    divisible_by_digits(1,27) == False\n    divisible_by_digits(1,28) == False\n    divisible_by_digits(1,29) == False\n    divisible_by_digits(1,30) == False\n    divisible_by_digits(1,31) == False\n    divisible_by_digits(1,32) == False\n    divisible_by_digits(1,33) == False\n    divisible_by_digits(1,34) == False\n    divisible_by_digits(1,35) == False\n    divisible_by_digits(1,36) == False\n    divisible_by_digits(1,37) == False\n    divisible_by_digits(1,38) == False\n    divisible_by_digits(1,39) == False\n    divisible_by_digits(1,40) == False\n    divisible_by_digits(1,41) == False\n    divisible_by_digits(1,42) == False\n    divisible_by_digits(1,43) == False\n    divisible_by_digits(1,44) == False\n    divisible_by_digits(1,45) == False\n    divisible_by_digits(1,46) == False\n    divisible_by_digits(1,47) == False\n    divisible_by_digits(1,48) == False\n    divisible_by_digits(1,49) == False\n    divisible_by_digits(1,50) == False\n    divisible_by_digits(1,51) == False\n    divisible_by_digits(1,52) == False\n    divisible_by_digits(1,53) == False\n    divisible_by_digits(1,54) == False\n    divisible_by_digits(1,55) == False\n    divisible_by_digits(1,56) == False\n    divisible_by_digits(1,57) == False\n    divisible_by_digits(1,58) == False\n    divisible_by_digits(1,59) == False\n    divisible_by_digits(1,60) == False\n    divisible_by_digits(1,61) == False\n    divisible_by_digits(1,62) == False\n    divisible_by_digits(1,63) == False\n    divisible_by_digits(1,64) == False\n    divisible_by_digits(1,65) == False\n    divisible_by_digits(1,66) == False\n    divisible_by_digits(1,67) == False\n    divisible_by_digits(1,68) == False\n    divisible_by_digits(1,69) == False\n    divisible_by"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     divisible_by_digits(10, 20) == [12,14,16,18,20] \nassert     divisible_by_digits(10, 40) == [12,14,16,18,20] \nassert     divisible_by_digits(10, 90) == [12,14,16,18,20] \nassert     divisible_by_digits(10, 100) == [] \nassert     divisible_by_digits(100, 200) == [] \n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     divisible_by_digits(1,10) == [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"]\nassert     divisible_by_digits(1,11) == [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\"]\nassert     divisible_by_digits(1,20) == [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\"]\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndivisible_by_digits(20, 40)"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     divisible_by_digits(1, 10) == True, \"Test Failed\"\nassert     divisible_by_digits(10, 100) == True, \"Test Failed\"\nassert     divisible_by_digits(100, 1000) == True, \"Test Failed\"\nassert     divisible_by_digits(1000, 10000) == True, \"Test Failed\"\nassert     divisible_by_digits(10000, 100000) == True, \"Test Failed\"\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     divisible_by_digits(10, 100) == [12, 24, 36, 48, 60, 72, 84, 96, 108, 120]\nassert     divisible_by_digits(10, 10) == []\n\ndef is_prime_generator(num):\n    '''\n    Write a generator that generates prime numbers. https://www.w3resource.com/python-exercises/generators/python-generators-2.php\n    '''\n    pass\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     divisible_by_digits(2,10) == []\nassert     divisible_by_digits(10,20) == [10]\nassert     divisible_by_digits(100,200) == [100]\nassert     divisible_by_digits(100,100) == [100]\nassert     divisible_by_digits(123,123) == []\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     divisible_by_digits(1,10) == False\nassert     divisible_by_digits(1,11) == True\nassert     divisible_by_digits(1,12) == True\nassert     divisible_by_digits(1,13) == False\nassert     divisible_by_digits(1,14) == True\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sector_area(1,360) == math.pi * 1 ** 2\nassert     sector_area(3,90) == math.pi * 3 ** 2 / 2\nassert     sector_area(3,360) == None\nassert     sector_area(10,360) == None\n\n\ndef distance_from_origin(x,y):\n    '''\n    Write a function to find distance from origin.\n    '''\n    pass\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     sector_area(3, 90) == 3*3.14*3.14/4, \"Wrong result!\"\nassert sector_area(4,360) == 4*3.14*3.14/4, \"Wrong result!\"\nassert sector_area(3.5,90) == None, \"Wrong result!\"\n\ndef is_prime(n):\n    '''\n    Write a function to check whether the given number is prime or not.\n    '''\n    pass\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert sector_area(5,0)==None\nassert sector_area(5,1)==15\nassert sector_area(5,360)==math.pi*5**2\nassert sector_area(5,-5)==None\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sector_area(1,45) == 45*math.pi*1/4\nassert     sector_area(1,359) == None\nassert     sector_area(2,40) == None\nassert     sector_area(2,360) == None\nassert     sector_area(2,45) == 45*math.pi*2/4\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     sector_area(1, 45) == math.pi/4, \"incorrect sector_area(1, 45)\"\nassert     sector_area(1, -45) == math.pi/4, \"incorrect sector_area(1, -45)\"\nassert     sector_area(10, 45) == math.pi*(2*10**2)/4, \"incorrect sector_area(10, 45)\"\nassert     sector_area(10, -45) == math.pi*(2*10**2)/4, \"incorrect sector_area(10, -45)\"\n\ndef find_angle_btw_two_points(x1,y1,x2,y2):\n    '''\n    Write a function to find the angle between two points\n    '''\n    pass\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     sector_area(10,30) == None\nassert     sector_area(5,0) == None\nassert     sector_area(10,0) == 0\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sector_area(1,360) == math.pi*r**2\nassert     sector_area(1,179) == math.pi*r**2\nassert     sector_area(1,180) is None\nassert     sector_area(1,0) is None\n\nprint('All the tests for sector_area passed')\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     sector_area(2, 45) == math.pi * (2 * 2)\nassert     sector_area(2, 180) == None\nassert     sector_area(2, 360) == None\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nassert sector_area(2,360) == 8.57\nassert sector_area(2,360.3) == None\nassert sector_area(2,360.01) == None\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     lcs_of_three(\"ABCD\", \"AB\", \"CD\") == \"AB\"\nassert     lcs_of_three(\"ABCD\", \"AB\", \"CD\") == \"AB\"\nassert     lcs_of_three(\"ABCD\", \"AB\", \"CD\") == \"AB\"\nassert     lcs_of_three(\"ABCD\", \"AB\", \"CD\") == \"AB\"\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    lcs_of_three('DOG','DOGS','DOGD') == \n    'DOG', 'the common subsequence is DOG'\n    \n    lcs_of_three('PYTHON','PYTHON','PYTHON') == \n    '', 'there is no common subsequence'\n    lcs_of_three('CUSTOM','CUSTOM','CUSTOM') == \n    'CUSTOM', 'the common subsequence is CUSTOM'"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     lcs_of_three(\"abc\", \"acb\", \"ab\") == \"a\"\nassert     lcs_of_three(\"abc\", \"cb\", \"ab\") == \"\"\nassert     lcs_of_three(\"acb\", \"cba\", \"a\") == \"a\"\nassert     lcs_of_three(\"adbc\", \"cbda\", \"bd\") == \"bc\"\nassert     lcs_of_three(\"adbc\", \"cbda\", \"cd\") == \"a\"\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    assert lcs_of_three(X, Y, Z) == 3\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     lcs_of_three('abc','xzy','abz') == 'abz', \"lcs_of_three should return 'abz'\"\nassert     lcs_of_three('abc','abz','xzy') == 'abz', \"lcs_of_three should return 'abz'\"\nassert     lcs_of_three('abc','abz','abc') == 'abc', \"lcs_of_three should return 'abc'\"\nassert     lcs_of_three('abc','xyz','abc') == 'abc', \"lcs_of_three should return 'abc'\"\nassert     lcs_of_three('abc','abc','abc') == 'abc', \"lcs_of_three should return 'abc'\"\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     lcs_of_three(\"ABCDGH\", \"AEDFHR\", \"ABCDEFGH\") == 3\nassert     lcs_of_three(\"ABCD\", \"ABCD\", \"ABCD\") == 1\nassert     lcs_of_three(\"ABCD\", \"ABD\", \"ABCD\") == 2\nassert     lcs_of_three(\"ABCD\", \"ABD\", \"ABCDD\") == 2\nassert     lcs_of_three(\"ABCD\", \"ABD\", \"ABCDDD\") == 3\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     lcs_of_three('ABCBDAB', 'BDCABA', 'BDCABA') == 'AB'\nassert lcs_of_three('ABCBDAB', 'BDCABA', 'BCDABA') == ''\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nlcs_of_three(\"ABCDGH\", \"AEDFHR\", \"YUIOP\") == \"ADH\"\nlcs_of_three(\"ABCDGH\", \"AEDFHR\", \"YUIOA\") == \"\"\nlcs_of_three(\"ABCDGH\", \"AEDFHR\", \"BEDFHR\") == \"\"\nlcs_of_three(\"ABCDGH\", \"AEDFHR\", \"AEDFHR\") == \"AEDFHR\"\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     lcs_of_three(\"ABCDGH\",\"AEDFHR\",\"BDCEGH\")== \"AD\"\nassert     lcs_of_three(\"ABCDGH\",\"AEDFHR\",\"BDCEGH\", \"DED\")== \"AD\"\nassert     lcs_of_three(\"ABCDGH\",\"AEDFHR\",\"BDCEGH\", \"DED\", \"CD\")== \"ABC\"\nassert     lcs_of_three(\"ABCDGH\",\"AEDFHR\",\"BDCEGH\", \"DED\", \"CD\", \"EF\")== \"ABC\"\nassert     lcs_of_three(\"ABCDGH\",\"AEDFHR\",\"BDCEGH\", \"DED\", \"CD\", \"EF\", \"LF\")== \"ABC\"\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     capital_words_spaces(\"hello, world\") == \"Hello, World\"\nassert     capital_words_spaces(\"Hello, World\") == \"Hello, World\"\nassert     capital_words_spaces(\"This is a test\") == \"This Is A Test\"\nassert     capital_words_spaces(\"This is a test.\"), \"This is a test.\"\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     capital_words_spaces('Geeks For Geeks') == 'Geeks For Geeks', \"error\"\nassert capital_words_spaces('Geeks For Geeks') =='Geeks For Geeks', \"error\"\nassert capital_words_spaces('Geeks For Geeks') == 'Geeks For Geeks', \"error\"\nassert capital_words_spaces('Geeks For Geeks') == 'Geeks For Geeks', \"error\"\nassert capital_words_spaces('Geeks For Geeks') == 'Geeks For Geeks', \"error\"\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     capital_words_spaces('A bunch of words starting with capital letters') == 'A bunch of words starting with capital letters'\nassert     capital_words_spaces('A bunch of words starting with capital letters here') == 'A bunch of words starting with capital letters here'\nassert     capital_words_spaces('This is a test of the for loop') == 'This is a test of the for loop'\nassert     capital_words_spaces('This is a test of the for loop') == 'This is a test of the for loop'\nassert     capital_words_spaces('This is a test of the for loop') == 'This is a test of the for loop'\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef upper_case_words(str1):\n    '''\n    Write a function that takes a string and return the same string with all words converted to uppercase.\n    '''\n    pass\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     capital_words_spaces(\"PYTHON JAVA MALA KOTLIN\") == \"PYTHON JAVA MALA KOTLIN\", \"ERROR\"\nassert     capital_words_spaces(\"Hi I am karan. What are you doing\") == \"Hi I am karan. What are you doing\", \"ERROR\"\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert capital_words_spaces(\"The quick brown fox jumps over the lazy dog\") == \"The  quick brown fox jumps over the lazy dog\"\nassert capital_words_spaces(\"The quick brown fox jumps over the lazy dog\") == \"The  quick brown fox jumps over the lazy dog\"\nassert capital_words_spaces(\"The quick brown fox jumps over the lazy dog\") == \"The  quick brown fox jumps over the lazy dog\"\nassert capital_words_spaces(\"The quick brown fox jumps over the lazy dog\") == \"The  quick brown fox jumps over the lazy dog\"\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     capital_words_spaces('') == '', 'Empty input'\nassert     capital_words_spaces('Hello World') == 'Hello World', 'Hello World'\nassert     capital_words_spaces('12345') == '12345', '12345'\nassert     capital_words_spaces('Life, universe and everything') == 'Life universe and everything', 'Life, universe and everything'\nassert     capital_words_spaces('A simple test') == 'A simple test', 'A simple test'\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     capital_words_spaces(\"fSfS dSfF\")    ==     \"fsfs fSfS dSfF\"\nassert     capital_words_spaces(\"i'm a boy\")    ==     \"i'm a boy\"\nassert     capital_words_spaces(\"i'm a man\")    ==     \"i'm a man\"\nassert     capital_words_spaces(\"i'm a boy boy boy\")    ==     \"i'm a boy boy boy\"\nassert     capital_words_spaces(\"i'm a boy man\")    ==     \"i'm a boy man\"\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sort_numeric_strings(['1', '10', '100', '1000', '10000', '100000', '1000000', '1000000000']) == ['1', '1000000', '1000000000', '10', '100', '100000', '1000', '100']\nassert sort_numeric_strings(['1', '10', '100', '1000', '10000', '100000', '1000000', '1000000000']) == ['1', '1000000', '1000000000', '10', '100', '100000', '1000', '100']\nassert sort_numeric_strings(['1', '10', '100', '1000', '10000', '100000', '1000000', '1000000000']) == ['1', '1000000', '1000000000', '10', '100', '100000', '1000', '100']\nassert sort_numeric_strings
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\nprint('---------------------------------------------------')\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nnums_str = ['1', '10', '2', '8', '5', '9']\nsort_numeric_strings(nums_str)"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     sort_numeric_strings(['1', '2', '3', '4', '5']) == ['1', '2', '3', '4', '5']\nassert     sort_numeric_strings(['1000', '2000', '3000', '4000', '5000']) == ['1000', '2000', '3000', '4000', '5000']\nassert     sort_numeric_strings(['-1000', '-2000', '-3000', '-4000', '-5000']) == ['-1000', '-2000', '-3000', '-4000', '-5000']\nassert     sort_numeric_strings(['1', '2', '3', '4', '5', '6']) == ['1', '2', '3', '4', '5', '6']\nassert     sort_numeric_strings(['1', '2', '3', '4', '5', '6', '7']) == ['1', '2', '3', '4', '5', '6', '7']\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    pass\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sort_numeric_strings([\"2\",\"3\",\"2\",\"10\",\"3\"]) == sorted([\"2\",\"3\",\"2\",\"10\",\"3\"])\nassert     sort_numeric_strings([\"2\",\"3\",\"2\",\"10\",\"3\"]) == sorted([\"2\",\"3\",\"2\",\"10\",\"3\"], key = int)\nassert     sort_numeric_strings([\"2\",\"3\",\"2\",\"10\",\"3\"]) == sorted([\"2\",\"3\",\"2\",\"10\",\"3\"], key = str)\nassert     sort_numeric_strings([\"2\",\"3\",\"2\",\"10\",\"3\"]) == sorted([\"2\",\"3\",\"2\",\"10\",\"3\"], key = lambda x: float(x))\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef sort_alphanumeric_strings(l):\n    '''\n    Given a list of strings, sort the strings in alphabetic order. The string must be sorted numerically as well as alphabetically.\n    Example:\n    Input = [\"123\",\"abc\",\"ghi\",\"bcd\",\"cba\"]\n    Output = [\"abc\",\"bcd\",\"cba\",\"123\",\"ghi\"]\n    '''\n    pass\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nsort_numeric_strings([1, '2', 3, 4, '10']) == ['1', '2', '3', '4', '10']\n\nassert sort_numeric_strings([]) == []\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     add_tuple([\"1\", \"2\", \"3\"], (1, 2, 3)) == [\"1\", \"2\", \"3\", 1, 2, 3]\nassert     add_tuple([\"1\", \"2\", \"3\"], (4, 5, 6)) == [\"1\", \"2\", \"3\", 4, 5, 6]\nassert     add_tuple([\"1\", \"2\", \"3\"], (7, 8, 9)) == [\"1\", \"2\", \"3\", 7, 8, 9]\nassert     add_tuple([\"1\", \"2\", \"3\"], (1,)) == [\"1\", \"2\", \"3\", 1, 2, 3]\nassert     add_tuple([\"1\", \"2\", \"3\"], ()) == [\"1\", \"2\", \"3\", 1, 2, 3]\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ntest_list = ['a', 'b', 'c']\ntest_tup = ('d', 'e')\nadd_tuple(test_list, test_tup)\nprint(test_list)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef add_list_of_tuples(test_list, test_list_of_tup):\n    '''\n    Write a function to add the given list of tuples to the given list.\n    '''\n    pass\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     add_tuple([2,3,4], (1, 2, 3)) == (2,3,4,1,2,3), \"Error\"\nprint(\"\\nDone!\\n\")"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nassert add_tuple([], (1, 2, 3)) == [1, 2, 3]\nassert add_tuple([1, 2, 3], (1, 2, 3)) == (1, 2, 3)\nassert add_tuple([1, 2, 3], (1, 2, 4)) == (1, 2, 5)\nassert add_tuple([1, 2, 3], (4, 5, 6)) == (1, 2, 3, 4, 5, 6)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\n\ndef remove_tuple(test_list, test_tup):\n    '''\n    Write a function to remove the given tuple from the given list.\n    '''\n    pass\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     add_tuple([1,2,3], (1,2,3)) ==    [1,2,3,1,2,3], \"Wrong answer. Your function doesn't work.\"\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     add_tuple(tup_list, tup_n) == tup_list_n + tup_n, \"Error: Function does not add the given tuple to the given list.\"\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    return check_min_heap_helper(arr, 0)\n\n\ndef parent(i):\n    return i//2\n\ndef left_child(i):\n    return i*2\n\ndef right_child(i):\n    return i*2 + 1\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef check_min_heap(arr):\n    pass\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nimport unittest\n\nclass Test(unittest.TestCase):\n\n    def test_check_min_heap(self):\n        arr = [8,5,1,6,2,7,9,3,4]\n        self.assertEqual(check_min_heap(arr), True)\n        arr = [5,2,3,1,4,6,7,8,9]\n        self."
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n\ndef check_min_heap(arr):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    pass\n    "
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    jacobsthal_num(0) == 0\n    jacobsthal_num(1) == 1\n    jacobsthal_num(2) == 1\n    jacobsthal_num(3) == 4\n    jacobsthal_num(4) == 7\n    jacobsthal_num(5) == 11\n    jacobsthal_num(6) == 21\n    jacobsthal_num(7) == 43\n    jacobsthal_num(8) == 85\n    jacobsthal_num(9) == 171\n    jacobsthal_num(10) == 341\n    jacobsthal_num(11) == 683\n    jacobsthal_num(12) == 1365\n    jacobsthal_num(13) == 2731\n    jacobsthal_num(14) == 59437\n    jacobsthal_num(15) == 98394973\n    jacobsthal_num(16) == 1669888971\n    jacobsthal_num(17) == 281474976710656\n    jacobsthal_num(18) == 3524386263184783\n    jacobsthal_num(19) == 52293798734890721\n    jacobsthal_num(20) == 79164522442179693\n    jacobsthal_num(21) == 110613977471669413\n    jacobsthal_num(22) == 147260487760335456\n    jacobsthal_num(23) == 252920964518466784\n    jacobsthal_num(24) == 365821765349156936\n    jacobsthal_num(25) == 5771137826786791729\n    jacobsthal_num(26) == 879995678726973255\n    jacobsthal_num(27) == 1241815763855361555\n    jacobsthal_num(28) == 174818187868600875\n    jacobsthal_num(29) == 227075441893272497\n    jacobsthal_num(30) == 348637391877067789\n    jacobsthal_num(31) == 546383504336655472\n    jacobsthal_num(32) == 7793647147319375\n    jacobsthal_num(33) == 113779891203265593\n    jacobsthal_num(34) == 155767470362526203\n    jacobsthal_num(35) == 227911861929497843\n    jacobsthal_num(36) == 411733161480867066\n    jacobsthal_num(37) == 601977553627265094\n    jacobsthal_num(38) == 1125899906842624\n    jacobsthal_num(39) == 163142297840292949\n    jacobsthal_num(40) == 217089099291045442\n    jacobsthal_num(41) == 236618013297418617\n    jacobsthal_num(42) == 271517112409501467\n    jacobsthal_num(43) == 363726731343204095\n    jacobsthal_num(44) == 568542884737991588\n    jacobsthal_num(45) == 87964389696464927\n    jacobsthal_num(46) == 131370558835016084\n    jacobsthal_num(47) == 197823078828122065\n    jacobsthal_num(48) == 289778929440405053\n    jacobsthal_num(49) == 3855345424586494\n    jacobsthal_num(50) == 495885309955455833\n    jacobsthal_num(51) == 678489916935178223\n    jacobsthal_num(52) == 90188195800977505\n    jacobsthal_num(53) == 127715470529459993\n    jacobsthal_num(54) == 208422934157615278\n    jacobsthal_num(55) == 275826156317286837\n    jacobsthal_num(56) == 362487401196157728\n    jacobsthal_num(57) == 504079425922424608\n    jacobsthal_num(58) == 716559868087514672\n    jacobsthal_num(59) == 101972243905841689\n    jacobsthal_num(60) == 135224680019336907\n    jacobsthal_num(61) == 185535795946668826\n    jacobsthal_num(62) == 241244502225122693\n    jacobsthal_num(63) == 317187770118287792\n    jacobsthal_num(64) == 392558059916296704\n    jacobsthal_num(65) == 527491919627093632\n    jacobsthal_num(66) == 757992394903102044\n    jacobsthal_num(67) == 113666166626126038\n    jacobsthal_num(68) == 174946559315473431\n    jacobsthal_num(69) == 253676023985951058\n    jacobsthal_num(70) == 368907398383938962\n    jacobsthal_num(71) == 53517581550705268\n    jacobsthal_num(72) == 742721455542675\n    jacobsthal_num(73) == 98968573323350608\n    jacobsthal_num(74) == 147986553875073889\n    jacobsthal_num(75) == 229979217754615072\n    jacobsthal_num(76) == 38194355817261609\n    jacobsthal_num(77) == 50845156628431176\n    jacobsthal_num(78) == 78101607965313696\n    jacobsthal_num(79) == 118967439972236752\n    jacobsthal_num(80) == 164939789875185737\n    jacobsthal_num(81) == 227939168971717571\n    jacobsthal_num(82) == 41171345738032381\n    jacobsthal_num(83) == 60112291417452481\n    jacobsthal_num(84) == 112612685667984922\n    jacobsthal_num(85) == 163142656425944053\n    jacobsthal_num(86) == 217086464943367115\n    jacobsthal_num(87) == 236618018887153958\n    jacobsthal_num(88) == 271517175434260107\n    jacobsthal_num(89) == 363726210844272036\n    jacobsthal_num(90) == 568542849705846875\n    jacobsthal_num(91) == 87964389713297872\n    jacobsthal_num(92) == 1313700401473314\n    jacobsthal_num(93) == 197823076249549243\n    jacobsthal_num(94) == 289779029163625\n    jacobsthal_num(95) == 3855346011953472\n    jacobsthal_num(96) == 49588533888535156\n    jacobsthal_num(97) == 67848991949694824\n    jacobsthal_num(98) == 90188206984239658\n    jacobsthal_num(99) == 127715154723928672\n    jacobsthal_num(100) == 20842293465555552"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef jacobsthal_num_optimized(n):\n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/\n    '''\n    pass\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    jacobsthal_num(0) == 0\n    jacobsthal_num(1) == 1\n    jacobsthal_num(2) == 1\n    jacobsthal_num(3) == 1\n    jacobsthal_num(4) == 1\n    jacobsthal_num(5) == 1\n    jacobsthal_num(6) == 1\n    jacobsthal_num(7) == 2\n    jacobsthal_num(8) == 3\n    jacobsthal_num(9) == 3\n    jacobsthal_num(10) == 4\n    jacobsthal_num(11) == 5\n    jacobsthal_num(12) == 6\n    jacobsthal_num(13) == 7\n    jacobsthal_num(14) == 8\n    jacobsthal_num(15) == 9\n    jacobsthal_num(16) == 10\n    jacobsthal_num(17) == 11\n    jacobsthal_num(18) == 12\n    jacobsthal_num(19) == 13\n    jacobsthal_num(20) == 14\n    jacobsthal_num(21) == 15\n    jacobsthal_num(22) == 16\n    jacobsthal_num(23) == 17\n    jacobsthal_num(24) == 18\n    jacobsthal_num(25) == 19\n    jacobsthal_num(26) == 20\n    jacobsthal_num(27) == 21\n    jacobsthal_num(28) == 22\n    jacobsthal_num(29) == 23\n    jacobsthal_num(30) == 24\n    jacobsthal_num(31) == 25\n    jacobsthal_num(32) == 26\n    jacobsthal_num(33) == 27\n    jacobsthal_num(34) == 28\n    jacobsthal_num(35) == 29\n    jacobsthal_num(36) == 30\n    jacobsthal_num(37) == 31\n    jacobsthal_num(38) == 32\n    jacobsthal_num(39) == 33\n    jacobsthal_num(40) == 34\n    jacobsthal_num(41) == 35\n    jacobsthal_num(42) == 36\n    jacobsthal_num(43) == 37\n    jacobsthal_num(44) == 38\n    jacobsthal_num(45) == 39\n    jacobsthal_num(46) == 40\n    jacobsthal_num(47) == 41\n    jacobsthal_num(48) == 42\n    jacobsthal_num(49) == 43\n    jacobsthal_num(50) == 44\n    jacobsthal_num(51) == 45\n    jacobsthal_num(52) == 46\n    jacobsthal_num(53) == 47\n    jacobsthal_num(54) == 48\n    jacobsthal_num(55) == 49\n    jacobsthal_num(56) == 50\n    jacobsthal_num(57) == 51\n    jacobsthal_num(58) == 52\n    jacobsthal_num(59) == 53\n    jacobsthal_num(60) == 54\n    jacobsthal_num(61) == 55\n    jacobsthal_num(62) == 56\n    jacobsthal_num(63) == 57\n    jacobsthal_num(64) == 58\n    jacobsthal_num(65) == 59\n    jacobsthal_num(66) == 60\n    jacobsthal_num(67) == 61\n    jacobsthal_num(68) == 62\n    jacobsthal_num(69) == 63\n    jacobsthal_num(70) == 64\n    jacobsthal_num(71) == 65\n    jacobsthal_num(72) == 66\n    jacobsthal_num(73) == 67\n    jacobsthal_num(74) == 68\n    jacobsthal_num(75) == 69\n    jacobsthal_num(76) == 70\n    jacobsthal_num(77) == 71\n    jacobsthal_num(78) == 72\n    jacobsthal_num(79) == 73\n    jacobsthal_num(80) == 74\n    jacobsthal_num(81) == 75\n    jacobsthal_num(82) == 76\n    jacobsthal_num(83) == 77\n    jacobsthal_num(84) == 78\n    jacobsthal_num(85) == 79\n    jacobsthal_num(86) == 80\n    jacobsthal_num(87) == 81\n    jacobsthal_num(88) == 82\n    jacobsthal_num(89) == 83\n    jacobsthal_num(90) == 84\n    jacobsthal_num(91) == 85\n    jacobsthal_num(92) == 86\n    jacobsthal_num(93) == 87\n    jacobsthal_num(94) == 88\n    jacobsthal_num(95) == 89\n    jacobsthal_num(96) == 90\n    jacobsthal_num(97) == 91\n    jacobsthal_num(98) == 92\n    jacobsthal_num(99) == 93\n    jacobsthal_num(100) == 94\n    jacobsthal_num(101) == 95\n    jacobsthal_num(102) == 96\n    jacobsthal_num(103) == 97\n    jacobsthal_num(104) == 98\n    jacobsthal_num(105) == 99\n    jacobsthal_num(106) == 100\n    jacobsthal_num(107) == 101\n    jacobsthal_num(108) == 102\n    jacobsthal_num(109) == 103\n    jacobsthal_num(110) == 104\n    jacobsthal_num(111) == 105\n    jacobsthal_num(112) == 106\n    jacobsthal_num(113) == 107\n    jacobsthal_num(114) == 108\n    jacobsthal_num(115) == 109\n    jacobsthal_num(116) == 110\n    jacobsthal_num(117) == 111\n    jacobsthal_num(118) == 112\n    jacobsthal_num(119) == 113\n    jacobsthal_num(120) == 114\n    jacobsthal_num(121) == 115\n    jacobsthal_num(122) == 116\n    jacobsthal_num(123) == 117\n    jacobsthal_num(124) == 118\n    jacobsthal_num(125) == 119\n    jacobsthal_num(126) == 120\n    jacobsthal_num(127) == 121\n    jacobsthal_num(128) == 122\n    jacobsthal_num(129) == 123\n    jacobsthal_num(130) == 124\n    jacobsthal_num(131) == 125\n    jacobsthal_num(132) == 126\n    jacobsthal_num(133) == 127\n    jacobsthal_num(134) == 128\n    jacobsthal_num(135) == 129\n    jacobsthal_num(136) == 130\n    jacobsthal_num(137) == 131\n    jacobsthal_num(138) == 132\n    jacobsthal_num(139) == 133\n    jacobsthal_num(140) == 134\n    jacobsthal_num(141) == 135\n    jacobsthal_num(142) == 136\n    jacobsthal_num(143) == 137\n    jacobsthal_num(144) == 138\n    jacobsthal_num(145) == 139\n    jacobsthal_num(146) == 140\n    jacobsthal_num(147) == 141\n    jacobs"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     jacobsthal_num(0) == 0\nassert     jacobsthal_num(1) == 1\nassert     jacobsthal_num(2) == 1\nassert     jacobsthal_num(3) == 1\nassert     jacobsthal_num(4) == 1\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     jacobsthal_num(0) == 0\nassert     jacobsthal_num(1) == 1\nassert     jacobsthal_num(2) == 1\nassert     jacobsthal_num(3) == 2\nassert     jacobsthal_num(5) == 5\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef all_sto_lucas_nums():\n    '''\n    Write a function to find all the strictly increasing lucas numbers up to some n.\n\n    Note: 1, 1, 2, 4, 7, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    pass\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     min_k([(1,2),(2,4),(3,6),(4,8)], 2) == (2,4)\nassert     min_k([(1,2),(2,4),(3,6),(4,8),(5,10)], 2) == (2,4)\nassert     min_k([(1,2),(2,4),(3,6),(4,8),(5,10),(1,10)], 2) == (2,4)\nassert     min_k([(1,2),(2,4),(3,6),(4,8),(5,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10)], 3) == (1,10)\nassert     min_k([(1,2),(2,4),(3,6),(4,8),(5,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10),(1,10)"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     min_k(test_list, 1) == (1, 4, 5, 6)\nassert     min_k(test_list, 2) == (1, 4, 5)\nassert     min_k(test_list, 3) == (1, 4)\nassert     min_k(test_list, 4) == (1)\nassert     min_k(test_list, 5) == ()\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nassert min_k([(1, 2, 3), (1, 5), (1, 6), (2, 2, 2), (3, 4), (3, 3)], 3) == [1, 2, 3]\nassert min_k([(1, 2, 3), (1, 5), (1, 6), (2, 2, 2), (3, 4), (3, 3)], 5) == [1, 2, 3, 1, 2]\nassert min_k([(1, 2, 3), (1, 5), (1, 6), (2, 2, 2), (3, 4), (3, 3)], 1) == []\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     min_k([(1,2), (3,4), (5,6), (8,7), (9,5)], 3) == (1,2)\nassert     min_k([(1,2), (3,4), (5,6), (8,7), (9,5)], 2) == (1,2)\nassert     min_k([(1,2), (3,4), (5,6), (8,7), (9,5)], 1) == (1,2)\nassert     min_k([(1,2), (3,4), (5,6), (8,7), (9,5)], 0) == (1,2)\nassert     min_k([(1,2), (3,4), (5,6), (8,7), (9,5)], -1) == (1,2)\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert min_k([('a',1),('b',2),('c',3)], 1) == ('a',1)\nassert min_k([('a',1),('b',2),('c',3)], 2) == ('b',2)\nassert min_k([('a',1),('b',2),('c',3)], 3) == ('a',1)\n\ndef count_greater(test_list, val):\n    '''\n    Write a function to count the number of elements in the list which are greater than the given value.\n    '''\n    pass\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     min_k(     [(0, 1), (2, 3), (4, 5), (6, 7), (8, 9)],     3 ) == [(0, 1), (2, 3), (4, 5)]\nassert     min_k(     [(0, 1), (2, 3), (4, 5), (6, 7), (8, 9)],     4 ) == [(0, 1), (2, 3), (4, 5), (6, 7)]\nassert     min_k(     [(0, 1), (2, 3), (4, 5), (6, 7), (8, 9)],     5 ) == [(0, 1), (2, 3), (4, 5)]\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    pass\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     min_k([(2, 3), (6, 4), (1, 3), (4, 2), (5, 2), (2, 1), (3, 2)], 5) ==     ((2, 3), (1, 3), (2, 1))\nassert     min_k([(1, 2), (2, 1), (2, 2), (3, 4), (1, 3), (4, 2)], 3) ==     ((1, 2), (2, 1), (4, 2))\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n    extract_index_list([1,2,3], [5,6,7], [9,8,7]) == [7,7]\n    extract_index_list([1,1,2], [1,3,2], [1,3,2]) == [1,2,2]\n    extract_index_list([], [], [1,2,3]) == []\n    extract_index_list([1,2,3], [5,6,7], [9,8,7]) == []\n    extract_index_list([1,2,3], [1,2,3], [1,2,3]) == []\n    extract_index_list([1,2,3], [1,2,3], [1,2,3]) == []\n    extract_index_list([1,2,3], [1,2,3], [1,2,3]) == []\n    extract_index_list([1,2,3], [1,2,3], [1,2,3]) == []\n    extract_index_list([], [], [1,2,3]) == []\n    extract_index_list([], [], [1,2,3]) == []\n    extract_index_list([], [], []) == []\n    extract_index_list([1], [], [1]) == []\n    extract_index_list([1], [], []) == []\n    extract_index_list([1], [], []) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,2,3], [1], [1]) == []\n    extract_index_list([1,"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nextract_index_list([1,2,3,4,5], [\"a\",\"b\",\"c\",\"d\",\"e\"], [\"f\",\"g\",\"h\",\"i\",\"j\"]) == [\"a\",\"f\",\"b\",\"i\"]\nextract_index_list([1,2,3,4,5], [\"a\",\"b\",\"c\",\"d\",\"e\"], [\"f\",\"g\",\"h\",\"i\",\"j\"]) == [\"a\",\"d\",\"g\"]\n\n\n\ndef is_string_palindrome(str):\n    '''\n    Write a function that returns true if a given string is a palindrome.\n    A palindrome is a word that is spelled the same backward and forward.\n    '''\n    pass"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert extract_index_list([1, 2, 3, 4, 5], ['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']) == [1, 2, 3, 4, 5]\nassert extract_index_list([0, 1, 2, 3, 4, 5], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']) == [0, 1, 2, 3, 4, 5]\nassert extract_index_list([1, 2, 3, 4, 5], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']) == []\nassert extract_index_list([0, 1, 2, 3, 4, 5], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'], ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']) == []\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert         extract_index_list([1, 2, 3, 4],                 [1, 2, 3, 4],             [5, 6, 7, 8]) == [1, 3, 4]\nassert         extract_index_list([1, 2, 3, 4],                 [1, 2, 3, 4],             [4, 5, 6]) == [1, 2, 4]\nassert         extract_index_list([1, 2, 3, 4],                 [1, 2, 3, 4],             [1, 4, 5]) == []\nassert         extract_index_list([],                         [1, 2, 3, 4],             [1, 2, 3, 4]) == []\nassert         extract_index_list([],                         [1, 2, 3, 4],             []) == []\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     extract_index_list([1, 2, 3], ['a', 'b', 'c'], ['c', 'b', 'a']) == [2, 1]\nassert     extract_index_list([1, 2, 3], ['a', 'b', 'c'], ['d', 'e', 'f']) == []\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n'''\nif the input is:\n\n>>> extract_index_list([1,2,3], [4,5,6], [7,8,9])\n[1,4,7]\n>>> extract_index_list([], [], [1,2,3])\n[]\n'''\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     extract_index_list(\n        [\n            [1, 2, 3],\n            [3, 4, 5],\n            [6, 7, 8],\n        ],\n        [\n            [1, 2, 3],\n            [3, 4, 5],\n            [6, 7, 8],\n        ],\n        [\n            [1, 2, 3],\n            [3, 4, 5],\n            [6, 7, 8],\n        ]) == [[1, 2, 3]]\nassert     extract_index_list(\n        [\n            [1, 2, 3],\n            [1, 2, 3],\n            [1, 2, 3],\n        ],\n        [\n            [1, 2, 3],\n            [1, 2, 3],\n            [1, 2, 3],\n        ],\n        [\n            [1, 2, 3],\n            [1, 2, 3],\n            [1, 2, 3],\n        ]) == [[1, 2, 3]]\nassert     extract_index_list(\n        [\n            [1, 2, 3],\n            [1, 2, 3],\n            [1, 2, 3],\n        ],\n        [\n            [1, 2, 3],\n            [1, 2, 3],\n            [1, 2, 3],\n        ],\n        [\n            [1, 2, 3],\n            [1, 2, 3],\n            [1, 2, 3],\n        ]) == [[1, 2, 3]]\nassert     extract_index_list(\n        [\n            [1, 2, 3],\n            [1, 2, 3],\n            [1, 2, 3],\n        ],\n        [\n            [1, 2, 3],\n            [1, 2, 3],\n            [1, 2, 3],\n        ],\n        [\n            [1, 2, 3],\n            [1, 2, 3],\n            [1, 2, 3],\n        ]) == [[1, 2, 3]]\nassert     extract_index_list(\n        [\n            [1, 2, 3],\n            [1, 2, 3],\n            [1, 2, 3],\n        ],\n        [\n            [1, 2, 3],\n            [1, 2, 3],\n            [1, 2, 3],\n        ],\n        [\n            [1, 2, 3],\n            [1, 2, 3],\n            [1, 2, 3],\n        ]) == [[1, 2, 3]]\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\n'''\nLet us consider the following example. Consider the lists l1, l2, l3 and their respective common indices. If an element is common for all three lists, its index will be common.\n\nl1 = [2, 5, 6, 7, 9]\nl2 = [1, 5, 6, 7, 8]\nl3 = [1, 2, 5, 6, 7]\n\nthen the function should return the list of common elements\n\nl1[common] = 2\nl2[common] = 1\nl3[common] = 1\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nextract_index_list([0, 1, 1], [0, 1, 2], [0, 1, 2]) == [0, 2]\n\nextract_index_list([0, 1, 1], [0, 1, 2], [0, 1, 2, 3]) == [0, 2]\n\nextract_index_list([0, 1, 1], [0, 1, 2], [1, 2, 3]) == []\n\nextract_index_list([0, 1, 1], [0, 1, 2], [0, 1, 2, 3, 4]) == []\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     second_smallest([]) == None\nassert     second_smallest([0,1,2]) == 1\nassert     second_smallest([5,3,2,1,4]) == 1\nassert     second_smallest([3,4,5,1]) == 1\nassert     second_smallest([2,2,2,2,1]) == 2\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nassert second_smallest([-3, 1, 10, -12, -4, 9]) == -12\nassert second_smallest([1, 5, 5, -10, 4, -8]) == -10\nassert second_smallest([1, 2, 3]) == 1\nassert second_smallest([-2, -3, 5]) == -3\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     second_smallest([4,4,4,5]) == 5\nassert     second_smallest([4,4,5,5]) == 4\nassert     second_smallest([4,4,5,5,5,6]) == 4\nassert     second_smallest([3,3,3,3,3,3]) == 3\nassert     second_smallest([1,1,1,1,1,1,1]) == 1\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     second_smallest([3, 4, 5]) == 4\nassert     second_smallest([4, 3, 5]) == 3\nassert     second_smallest([4, 4, 5]) == 4\nassert     second_smallest([0, 1, 2]) == 1\nassert     second_smallest([0, 0, 0]) == 0\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     second_smallest([1, 3, 2]) == 2\nassert     second_smallest([1, 3, 1, 2]) == 1\nassert     second_smallest([3, 3, 1, 2]) == 1\nassert     second_smallest([1, 2, 2]) == 2\nassert     second_smallest([2, 1, 2]) == 2\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     second_smallest([1, 2, 3, 4]) == 1\nassert     second_smallest([4, 2, 3, 1]) == 4\nassert     second_smallest([3, 2, 1, 4]) == 1\nassert     second_smallest([-1, -2, -3, -4]) == -3\nassert     second_smallest([-1, -2, -3, -4]) == -3\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     second_smallest([1, 2, 5, 12]) == 5, 'Wrong'\nassert     second_smallest([3, 4, 7, 5, 2, 1, 6]) == 2, 'Wrong'\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     second_smallest([7,8,9,3,2,1,10]) == 7\nassert     second_smallest([7,8,9,3,2,1,10]) == 1\nassert     second_smallest([7,8,9,3,2,1,10]) == 10\nassert     second_smallest([7,8,9,3,2,1,10]) == 1\nassert     second_smallest([7,8,9,3,2,1,10]) == 3\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     second_smallest([1, -2, 3, 2, 1, -4]) == -2, \"2nd smallest\"\nassert     second_smallest([-1, -2, 3, 2, 1, -4]) == -2, \"2nd smallest\"\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_match_zero_one('ab') == True, \"Should be True\"\nassert     text_match_zero_one('abc') == True, \"Should be True\"\nassert     text_match_zero_one('abcba') == True, \"Should be True\"\nassert     text_match_zero_one('abcbaa') == False, \"Should be False\"\nassert     text_match_zero_one('abcbaab') == False, \"Should be False\"\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_match_zero_one('abaaaaababbb') == True, \"Should match True\"\nassert     text_match_zero_one('abaaaaabaabb') == False, \"Should not match False\"\nassert     text_match_zero_one('abaabaabaaaa') == False, \"Should not match False\"\nassert     text_match_zero_one('abaaaaab') == True, \"Should match True\"\nassert     text_match_zero_one('abaaaa') == False, \"Should not match False\"\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_zero_one(\"abc\") == True, \"abc\"\nassert     text_match_zero_one(\"aab\") == True, \"aab\"\nassert     text_match_zero_one(\"aabz\") == False, \"aabz\"\nassert     text_match_zero_one(\"abcb\") == False, \"abcb\"\nassert     text_match_zero_one(\"abcba\") == True, \"abcba\"\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\nassert text_match_zero_one('a') == True\nassert text_match_zero_one('aB') == True\nassert text_match_zero_one('aBc') == False\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_match_zero_one('ab') == True, 'Should be True'\nassert     text_match_zero_one('ababab') == False, 'Should be False'\nassert     text_match_zero_one('ababababab') == True, 'Should be True'\nassert     text_match_zero_one('a') == True, 'Should be True'\nassert     text_match_zero_one('aab') == True, 'Should be True'\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_zero_one(\"\") == False\nassert     text_match_zero_one(\"a\") == False\nassert     text_match_zero_one(\"abc\") == False\nassert     text_match_zero_one(\"abcdef\") == False\nassert     text_match_zero_one(\"aabc\") == True\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_zero_one('abbbb')     == 'a' \nassert     text_match_zero_one('abababab')     == 'a' \nassert     text_match_zero_one('abab')     == ''\n\nassert text_match_zero_one('a')     == '' \n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_match_zero_one('aab') == True\nassert     text_match_zero_one('bb') == False\nassert     text_match_zero_one('aba') == True\nassert     text_match_zero_one('abc') == False\nassert     text_match_zero_one('aaaa') == False\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ntext_match_zero_one(\n    text = \"abcbdbba\",\n    result = True,\n    )\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \ntext_match_zero_one(\"text_match_zero_one(match)\") == False\nassert text_match_zero_one(\"text_match_zero_one(match1)\") == False\nassert text_match_zero_one(\"text_match_zero_one(match2)\") == True\nassert text_match_zero_one(\"text_match_zero_one(match3)\") == False\nassert text_match_zero_one(\"text_match_zero_one(match4)\") == False\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint('--------------------------------------------')\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(count_reverse_pairs(test_list))\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ntest_list1 = ['pqr', 'cs', 'dv', 'ejk']\ntest_list2 = ['wxyz', 'z', 'kpq', 'k', 'j']\ntest_list3 = ['abcd', 'ca', 'hgf', 'ff', 'ff']\n\nassert count_reverse_pairs(test_list1) == 2\nassert count_reverse_pairs(test_list2) == 1\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_reverse_pairs([]) == 0, \"Empty List\"\nassert     count_reverse_pairs([]) == 0, \"Empty List\"\nassert     count_reverse_pairs([1,2,3,4,5,6]) == 5, \"Single Element List\"\nassert     count_reverse_pairs([1,2,3,4,5,6,7,8]) == 10, \"Multiple Elements List\"\nassert     count_reverse_pairs([1,2,3,4,5,6,7,8,9]) == 9, \"Multiple Elements List\"\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_reverse_pairs([\n    'Adg',\n    'bdf',\n    'Bda',\n    'Gad',\n    'Aga',\n    'Zda',\n    'Zad',\n    'Adg',\n    'Zag',\n    'Zad',\n    'Gad',\n    'Zda',\n    'gad',\n    'Zda',\n    'agd',\n    'Zad',\n    'agd',\n    'Zda',\n    'adg',\n    'Zda',\n    'adg',\n    'Zda',\n    'zad',\n    'Zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    'zad',\n    "
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_reverse_pairs([\"ab\", \"ba\"]) == 1, \"Should return 1\"\nassert     count_reverse_pairs([\"ab\", \"ab\"]) == 2, \"Should return 2\"\nassert     count_reverse_pairs([\"ab\"]) == 0, \"Should return 0\"\nassert     count_reverse_pairs([\"ab\", \"ba\", \"ba\"]) == 1, \"Should return 1\"\nassert     count_reverse_pairs([\"ba\", \"ab\", \"ba\"]) == 1, \"Should return 1\"\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_reverse_pairs([\"abcd\",\"abcde\",\"bcde\",\"bcdef\"]) == 2\nassert     count_reverse_pairs([\"abcd\",\"abcde\",\"bcde\",\"bcdef\",\"abcd\",\"abcde\",\"bcde\",\"bcdef\",\"abcd\",\"abcde\",\"bcde\",\"bcdef\"]) == 5\nassert     count_reverse_pairs([\"abcd\",\"abcde\",\"bcde\",\"bcdef\",\"abcd\",\"abcde\",\"bcde\",\"bcdef\",\"abcd\",\"abcde\",\"bcde\",\"bcdef\"]) == 5\nassert     count_reverse_pairs([\"abcd\",\"abcde\",\"bcde\",\"bcdef\"]) == 1\nassert     count_reverse_pairs([\"abcd\",\"abcde\",\"bcde\",\"bcdef\",\"abcd\",\"abcde\",\"bcde\",\"bcdef\"]) == 2\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ntest_list1 = ['pqr', 'uvw', 'xyz']\nprint('count_reverse_pairs: ', count_reverse_pairs(test_list1))\n\ntest_list2 = ['qp', 'qwe', 'xcv']\nprint('count_reverse_pairs: ', count_reverse_pairs(test_list2))\n\ntest_list3 = ['r', 'r']\nprint('count_reverse_pairs: ', count_reverse_pairs(test_list3))"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_reverse_pairs(['']) == 0\nassert     count_reverse_pairs([\"\"]) == 0\nassert     count_reverse_pairs([\"a\", \"\", \"b\"]) == 1\nassert     count_reverse_pairs([\"\", \"a\", \"\", \"b\"]) == 2\nassert     count_reverse_pairs([\"ab\", \"ba\"]) == 1\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert unique_sublists([[2, 3, 4, 5], [3, 4, 5], [4, 5]]) == {(2, 3, 4, 5): 1, (3, 4, 5): 2, (4, 5): 1}\nassert unique_sublists([[1, 2, 3, 4], [4, 5], [2, 3, 4]]) == {(1, 2, 3, 4): 1, (4, 5): 1, (2, 3, 4): 2}\nassert unique_sublists([[1, 2, 3, 4], [4, 5], [2, 3, 4]]) == {(1, 2, 3, 4): 1, (4, 5): 1, (2, 3, 4): 2}\nassert unique_sublists([[2, 3, 4, 5], [3, 4, 5], [4, 5]]) == {(2, 3, 4, 5): 1, (3, 4, 5): 2, (4, 5): 1}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     unique_sublists([[1,2],\n                           [1,2],\n                           [1,2],\n                           [1,2],\n                           [1,2]]) == {([1,2],2),([1,2],1),([1,2],1),([1,2],1),([1,2],1)}\n\nassert     unique_sublists([[1,2],\n                           [1,2,3],\n                           [1,2,3],\n                           [1,2,3],\n                           [1,2,3]]) == {([1,2],1),([1,2,3],2),([1,2,3],2),([1,2,3],2),([1,2,3],2)}\n\nassert     unique_sublists([[1,2],\n                           [1,2],\n                           [1,2],\n                           [1,2],\n                           [1,2]]) == {([1,2],4)}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     unique_sublists([1,2,3]) == {(1,): 1, (2,): 1, (3,): 1}\nassert     unique_sublists([1,2,3,2,3]) == {(1,): 2, (2,): 2, (3,): 2}\nassert     unique_sublists([1,2,3,2,2,2]) == {(1,): 4, (2,): 3, (3,): 2, (2,): 2}\nassert     unique_sublists([1,2,3,2,2,2,3,1,2,3,2,3]) == {(1,): 4, (2,): 5, (3,): 4, (2,): 3, (2,): 2, (3,): 2, (1,): 1, (2,): 1}\nassert     unique_sublists([1,2,3,2,2,2,3,1,2,3,2,3,1,2,1]) == {(1,): 6, (2,): 6, (3,): 5, (2,): 4, (2,): 3, (3,): 3, (1,): 2, (2,): 2, (1,): 1}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     unique_sublists(    [1,2,3]) == {(1,): 1, (2,): 1, (3,): 1}\nassert     unique_sublists(    [1,1,1,1,2,2,2,2,2,3,3,3,3,3]) == {(1,): 5, (2,): 5, (3,): 5}\nassert     unique_sublists(    [1,2,3,4,5]) == {(1,): 1, (2,): 1, (3,): 1, (4,): 1, (5,): 1}\nassert     unique_sublists(    [1,1,2,2,3,3,4,4,4,5,5,5,5]) == {(1,): 5, (2,): 5, (3,): 5}\nassert     unique_sublists(    [1,1,2,2,3,3,4,4,4,5,5,5,5]) == {(1,): 6, (2,): 6, (3,): 6}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     unique_sublists([]) == {}\nassert     unique_sublists([1,2,3]) == {1:1, 2:1, 3:1}\nassert     unique_sublists([1,2,3,2]) == {1:1, 2:2, 3:1}\nassert     unique_sublists([1,2,3,2,4,5]) == {1:1, 2:2, 3:1, 4:1, 5:1}\nassert     unique_sublists([1,2,2,3,4,5,5]) == {1:1, 2:2, 3:1, 4:1, 5:2}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef letter_checker(word):\n    '''\n    Write a function to check the uniqueness of a string. \n    Return True if the string is unique.\n    Return False if the string is duplicated.\n    '''\n    pass\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     unique_sublists([1,2,3,4,5,6,7]) == {\n    (1,): 1,\n    (2,): 1,\n    (3,): 1,\n    (4,): 1,\n    (5,): 1,\n    (6,): 1,\n    (7,): 1\n}\nassert     unique_sublists([1,2,3,4,5,2,6,7,4,4,5,6]) == {\n    (1,): 2,\n    (2,): 2,\n    (3,): 2,\n    (4,): 2,\n    (5,): 2,\n    (2,): 1,\n    (6,): 1,\n    (7,): 1\n}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     unique_sublists(['a', 'a', 'b', 'a']) == {('a','b'): 2, ('a','a'): 1}\nassert     unique_sublists([1,1,1]) == {(1,): 3}\nassert     unique_sublists([[1,1,1]]) == {(1,1,1): 3}\nassert     unique_sublists([[1,1,1],[1,1,1]]) == {(1,1,1): 3}\nassert     unique_sublists([[1,1,1],[1,1,1],[1,1,1]]) == {(1,1,1): 3}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     unique_sublists([1,2,2,3,3,3,3,4,5,6]) == {(1,2,2,3,3,3,3):4, (3,3,3,3,3):5, (4,5,6):1}\nassert     unique_sublists([1,2,2,3,3,3,3,4,5,6]) == {(1,2,2,3,3,3,3):4, (3,3,3,3,3,3):5, (4,5,6):1}\nassert     unique_sublists([1,2,2,3,3,3,3,4,5,6]) == {(1,2,2,3,3,3,3):4, (3,3,3,3,3,3):5, (4,5,6):1}\nassert     unique_sublists([1,1,1,1,1,1,1,1]) == {(1,1,1,1,1,1,1):9}\nassert     unique_sublists([1,2,2,3,3,3,4,5,6,6,6,6]) == {(1,2,2,3,3,3,3):4, (3,3,3,3,3,3):5, (4,5,6):1}\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_decimal(\"3.2\") == False, \"Wrong!\"\nassert     is_decimal(\"3.12\") == True, \"Wrong!\"\nassert     is_decimal(\"3.123\") == True, \"Wrong!\"\nassert     is_decimal(\"3.123456789\") == True, \"Wrong!\"\nassert     is_decimal(\"3.123456789a\") == False, \"Wrong!\"\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_decimal('2.2') == True\nassert     is_decimal('4.3') == False\nassert     is_decimal('2.1') == True\nassert     is_decimal('4.5') == False\nassert     is_decimal('0.1') == True\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nprint(is_decimal('11.11')) #True\nprint(is_decimal('11.12')) #False\nprint(is_decimal('11.123')) #False\nprint(is_decimal('11.1112')) #True\nprint(is_decimal('11.1')) #False\nprint(is_decimal('11.1a')) #False\nprint(is_decimal('11.1.a')) #False\nprint(is_decimal('11.1.0')) #False\nprint(is_decimal('11.0')) #False\nprint(is_decimal('11.00')) #True\nprint(is_decimal('11.000')) #False\nprint(is_decimal('11.001')) #True\nprint(is_decimal('11.100')) #False\nprint(is_decimal('11.0011')) #False\nprint(is_decimal('11.000aa')) #False\nprint(is_decimal('11.0.100')) #False\nprint(is_decimal('11.100')) #True\nprint(is_decimal('11.1')) #False\nprint(is_decimal('11.1a')) #False\nprint(is_decimal('11.1.a')) #False\nprint(is_decimal('11.1.0')) #False\nprint(is_decimal('11.0')) #True\nprint(is_decimal('11.00')) #False\nprint(is_decimal('11.000')) #True\nprint(is_decimal('11.001')) #True\nprint(is_decimal('11.100')) #True\nprint(is_decimal('11.0011')) #True\nprint(is_decimal('11.000aa')) #True\nprint(is_decimal('11.0.100')) #False\nprint(is_decimal('11.100')) #True\nprint(is_decimal('11.1')) #False\nprint(is_decimal('11.1a')) #False\nprint(is_decimal('11.1.a')) #False\nprint(is_decimal('11.1.0')) #False\nprint(is_decimal('11.0')) #False\nprint(is_decimal('11.00')) #False\nprint(is_decimal('11.000')) #False\nprint(is_decimal('11.001')) #True\nprint(is_decimal('11.100')) #True\nprint(is_decimal('11.0011')) #True\nprint(is_decimal('11.000aa')) #True\nprint(is_decimal('11.0.100')) #False\nprint(is_decimal('11.100')) #True\nprint(is_decimal('11.1')) #False\nprint(is_decimal('11.1a')) #False\nprint(is_decimal('11.1.a')) #False\nprint(is_decimal('11.1.0')) #False\nprint(is_decimal('11.0')) #False\nprint(is_decimal('11.00')) #False\nprint(is_decimal('11.000')) #False\nprint(is_decimal('11.001')) #False\nprint(is_decimal('11.100')) #False\nprint(is_decimal('11.0011')) #False\nprint(is_decimal('11.000aa')) #False\nprint(is_decimal('11.0.100')) #False\nprint(is_decimal('11.100')) #False\nprint(is_decimal('11.1')) #True\nprint(is_decimal('11.1a')) #True\nprint(is_decimal('11.1.a')) #True\nprint(is_decimal('11.1.0')) #True\nprint(is_decimal('11.0')) #True\nprint(is_decimal('11.00')) #True\nprint(is_decimal('11.000')) #True\nprint(is_decimal('11.001')) #True\nprint(is_decimal('11.100')) #True\nprint(is_decimal('11.0011')) #True\nprint(is_decimal('11.000aa')) #True\nprint(is_decimal('11.0.100')) #False\nprint(is_decimal('11.100')) #True\nprint(is_decimal('11.1')) #False\nprint(is_decimal('11.1a')) #False\nprint(is_decimal('11.1.a')) #False\nprint(is_decimal('11.1.0')) #False\nprint(is_decimal('11.0')) #False\nprint(is_decimal('11.00')) #False\nprint(is_decimal('11.000')) #False\nprint(is_decimal('11.001')) #True\nprint(is_decimal('11.100')) #True\nprint(is_decimal('11.0011')) #True\nprint(is_decimal('11.000aa')) #True\nprint(is_decimal('11.0.100')) #False\nprint(is_decimal('11.100')) #True\nprint(is_decimal('11.1')) #False\nprint(is_decimal('11.1a')) #False\nprint(is_decimal('11.1.a')) #False\nprint(is_decimal('11.1.0')) #False\nprint(is_decimal('11.0')) #False\nprint(is_decimal('11.00')) #False\nprint(is_decimal('11.000')) #False\nprint(is_decimal('11.001')) #True\nprint(is_decimal('11.100')) #True\nprint(is_decimal('11.0011')) #True\nprint(is_decimal('11.000aa')) #True\nprint(is_decimal('11.0.100')) #False\nprint(is_decimal('11.100')) #True\nprint(is_decimal('11.1')) #False\nprint(is_decimal('11.1a')) #False\nprint(is_decimal('11.1.a')) #False\nprint(is_decimal('11.1.0')) #False\nprint(is_decimal('11.0')) #False\nprint(is_decimal('11.00')) #False\nprint(is_decimal('11.000')) #False\nprint(is_decimal('11.001')) #False\nprint(is_decimal('11.100')) #False\nprint(is_decimal('11.0011')) #False\nprint(is_decimal('11.000aa')) #False\nprint(is_decimal('11.0.100')) #False\nprint(is_decimal('11.100')) #False\nprint(is_decimal('11.1')) #False\nprint(is_decimal('11.1a')) #False\nprint(is_decimal('11.1.a')) #False\nprint(is_decimal('11.1.0')) #False\nprint(is_decimal('11.0')) #False\nprint(is_decimal('11.00')) #False\nprint(is_decimal('11.000')) #False\nprint(is_decimal('11.001')) #False\nprint(is_decimal('11.100')) #False\nprint(is_decimal('11.0011')) #False\nprint(is_decimal('11.000aa')) #False\nprint(is_decimal('11.0.100')) #False\nprint(is_decimal('11.100')) #False\nprint(is_decimal('11.1')) #False\nprint(is_decimal('11.1a')) #False\nprint(is_decimal('11.1.a')) #False\nprint(is_decimal('11.1.0')) #False\nprint(is_decimal('11.0')) #False\nprint(is_decimal('11.00')) #False"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_decimal('0.2') == True, \"Wrong for 0.2\"\nassert     is_decimal('0.23') == True, \"Wrong for 0.23\"\nassert     is_decimal('0.3') == False, \"Wrong for 0.3\"\nassert     is_decimal('0.2.1') == False, \"Wrong for 0.2.1\"\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     is_decimal(\"3.25\") == True, \"wrong output\"\nassert     is_decimal(\"4.25\") == False, \"wrong output\"\nassert     is_decimal(\"-3.25\") == False, \"wrong output\"\nassert     is_decimal(\"0.25\") == False, \"wrong output\"\nassert     is_decimal(\"1.25\") == False, \"wrong output\"\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nprint(\"Pass\" if is_decimal(\"1.0\") == True else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.0\") == True else \"Fail\")\nprint(\"Pass\" if is_decimal(\"0.01\") == True else \"Fail\")\nprint(\"Pass\" if is_decimal(\"0.11\") == True else \"Fail\")\nprint(\"Pass\" if is_decimal(\"12\") == True else \"Fail\")\nprint(\"Pass\" if is_decimal(\"-1.0\") == True else \"Fail\")\nprint(\"Pass\" if is_decimal(\"-1.1\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"-1.00\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"-0.1\") == True else \"Fail\")\nprint(\"Pass\" if is_decimal(\"-0.00\") == True else \"Fail\")\nprint(\"Pass\" if is_decimal(\"-0.0\") == True else \"Fail\")\nprint(\"Pass\" if is_decimal(\"-10\") == True else \"Fail\")\nprint(\"Pass\" if is_decimal(\"-0\") == True else \"Fail\")\nprint(\"Pass\" if is_decimal(\"0.0\") == True else \"Fail\")\nprint(\"Pass\" if is_decimal(\"-0.1\") == True else \"Fail\")\nprint(\"Pass\" if is_decimal(\"0.00\") == True else \"Fail\")\nprint(\"Pass\" if is_decimal(\"0\") == True else \"Fail\")\nprint(\"Pass\" if is_decimal(\"10\") == True else \"Fail\")\nprint(\"Pass\" if is_decimal(\"10.0\") == True else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.0.0\") == True else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.0.1\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.1.0\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.1.1\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.1.0.1\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.1.0.2\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.1.1.0\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.1.1.1\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.1.1.2\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.1.2.0\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.1.2.1\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.1.2.2\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2.0.0\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2.0.1\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2.0.2\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2.1.0\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2.1.1\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2.1.2\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2.2.0\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2.2.1\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2.2.2\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2.3.0\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2.3.1\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2.3.2\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2.3.3\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2.3.4\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2.3.5\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2.3.6\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2.3.7\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2.3.8\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2.3.9\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2.3.10\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2.3.11\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2.3.12\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2.3.13\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2.3.14\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2.3.15\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2.3.16\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2.3.17\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2.3.18\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2.3.19\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2.3.20\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2.3.21\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2.3.22\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2.3.23\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2.3.24\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2.3.25\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2.3.26\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2.3.27\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2.3.28\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2.3.29\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2.3.30\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2.3.31\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2.3.32\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2.3.33\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2.3.34\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2.3.35\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2.3.36\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2.3.37\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2.3.38\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2.3.39\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2.3.40\") == False else \"Fail\")\nprint(\"Pass\" if is_decimal(\"1.2.3.41\") == False else \"Fail\")\nprint(\"Pass\" if is"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_decimal('3.14')\nassert     not is_decimal('3.15')\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nassert is_decimal('3.1') == True\nassert is_decimal('3.11') == False\nassert is_decimal('0') == True\nassert is_decimal('1.1') == False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     unique_Element([1, 1, 2]) == True, \"unique_Element returns an incorrect boolean\"\nassert     unique_Element([1, 2, 3]) == False, \"unique_Element returns an incorrect boolean\"\nassert     unique_Element([3, 4, 3]) == False, \"unique_Element returns an incorrect boolean\"\nassert     unique_Element([-3, -2, -1, 0, 1, 2, 3]) == False, \"unique_Element returns an incorrect boolean\"\nassert     unique_Element([1, 1, 2, 2, 2]) == True, \"unique_Element returns an incorrect boolean\"\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     unique_Element([]) == True, 'Error 1'\nassert     unique_Element([1,2,3,4,5,1,2]) == True, 'Error 2'\nassert     unique_Element([1,2,2,3,3,4]) == False, 'Error 3'\nassert     unique_Element([1,1,2,2]) == False, 'Error 4'\nassert     unique_Element([1,1,1,2,3,2,4,3,1]) == True, 'Error 5'\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     unique_Element([1,2,2,3,4,4,3,2,1]) == True, \"It should return True\"\nassert     unique_Element([1,2,2,3,4,4,3,2,1,1]) == False, \"It should return False\"\nassert     unique_Element([1,2,2,2,2,2,2,2,2]) == True, \"It should return True\"\nassert     unique_Element([1,2,2,2,2,2,2,2,2,2,2]) == False, \"It should return False\"\nassert     unique_Element([1,2,2,2,2,2,2,2,2,2,2,2,2]) == True, \"It should return True\"\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     unique_Element([1, 2, 3, 4, 5, 2]) == True, \"Should be True\"\nassert     unique_Element([1, 2, 3, 4, 5, 4]) == False, \"Should be False\"\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     unique_Element([1, 2, 3, 4, 5, 1, 2, 3, 5, 1, 2, 3, 5]) == True,     '1st case: unique_Element([1, 2, 3, 4, 5, 1, 2, 3, 5])'\nassert     unique_Element([1, 2, 2, 2, 2, 2, 2]) == False,     '2nd case: unique_Element([1, 2, 2, 2, 2, 2])'\nassert     unique_Element([1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3]) == False,     '3rd case: unique_Element([1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3])'\nassert     unique_Element([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == True,     '4th case: unique_Element([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])'\nassert     unique_Element([1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == False,     '5th case: unique_Element([1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2])'\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     unique_Element([1,1,1,1,2,3,5]) == True\nassert     unique_Element([1,1,2,3,3,3,3,3,3]) == False\nassert     unique_Element([1,1,1,1,1,1,1,1]) == True\nassert     unique_Element([]) == True\nassert     unique_Element([1]) == True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     unique_Element([1,1,2,2,2]) == True, \"should return True\"\nassert     unique_Element([1,1,1,2,2,3,3,4]) == False, \"should return False\"\nassert     unique_Element([1,1,1,1,1,2,2,2]) == True, \"should return True\"\nassert     unique_Element([1,1,1,1,1,1,1,2,2]) == True, \"should return True\"\nassert     unique_Element([1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     unique_Element([1,2,3,4,5]) == False, \"unique_Element([])\"\nassert     unique_Element([1,2,3,4,5,5,5]) == False, \"unique_Element([1,2,3,4,5,5,5,5,5,5])\"\nassert     unique_Element([1,1,1,1,1]) == True, \"unique_Element([1,1,1,1,1])\"\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ncheck_monthnumber_number(1) == True\ncheck_monthnumber_number(10) == False\ncheck_monthnumber_number(0) == False\ncheck_monthnumber_number(-1) == False\ncheck_monthnumber_number(3.4) == False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n    check_monthnumber_number(11) == True, \\\n    'Expected True, but got %s' % check_monthnumber_number(11)\nassert \n    check_monthnumber_number(1) == True, \\\n    'Expected True, but got %s' % check_monthnumber_number(1)\nassert \n    check_monthnumber_number(5) == False, \\\n    'Expected False, but got %s' % check_monthnumber_number(5)\nassert \n    check_monthnumber_number(0) == False, \\\n    'Expected False, but got %s' % check_monthnumber_number(0)\nassert \n    check_monthnumber_number(4) == False, \\\n    'Expected False, but got %s' % check_monthnumber_number(4)\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_monthnumber_number(1) == True\nassert     check_monthnumber_number(2) == False\nassert     check_monthnumber_number(3) == True\nassert     check_monthnumber_number(10) == False\nassert     check_monthnumber_number(9) == False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_monthnumber_number(1) == False\nassert     check_monthnumber_number(2) == False\nassert     check_monthnumber_number(3) == True\nassert     check_monthnumber_number(4) == False\nassert     check_monthnumber_number(5) == False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ncheck_monthnumber_number(4) == True\ncheck_monthnumber_number(13) == True\ncheck_monthnumber_number(2) == False\ncheck_monthnumber_number(31) == False\ncheck_monthnumber_number(30) == True\n\ndef check_wordlength_in_sentence(sentence):\n    '''\n    Write a function that checks whether a sentence is long enough or not.\n    '''\n    pass\n\nassert check_wordlength_in_sentence(\"I am learning Python\") == True\nassert check_wordlength_in_sentence(\"\") == False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_monthnumber_number(31) == True\nassert     check_monthnumber_number(60) == False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     check_monthnumber_number(1)    == False, \"The function should return False\"\nassert     check_monthnumber_number(3)    == True, \"The function should return True\"\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_monthnumber_number(1) == False\nassert     check_monthnumber_number(2) == True\nassert     check_monthnumber_number(3) == True\nassert     check_monthnumber_number(4) == True\nassert     check_monthnumber_number(5) == False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_monthnumber_number(31) == 'valid', '31 is valid'\nassert     check_monthnumber_number(30) == 'valid', '30 is valid'\nassert     check_monthnumber_number(29) == 'invalid', '29 is invalid'\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_monthnumber_number(1) == True, \"Months given is incorrect\"\nassert     check_monthnumber_number(2) == True, \"Months given is incorrect\"\nassert     check_monthnumber_number(3) == False, \"Months given is incorrect\"\nassert     check_monthnumber_number(4) == False, \"Months given is incorrect\"\nassert     check_monthnumber_number(5) == False, \"Months given is incorrect\"\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_min_diff([1,5,6,3],3)==2\nassert     find_min_diff([7,4,2,1],3)==2\nassert     find_min_diff([1,5,6,3],2)==0\n\ndef find_min_diff_linear_e(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(arr[i]-arr[j]) < min_diff:\n                min_diff = abs(arr[i]-arr[j])\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_min_diff([1, 5, 7, 10], 5) == 2\nassert     find_min_diff([1, 5, 7, 10], 1) == 0\nassert     find_min_diff([1, 5, 7, 10], 5) == -1\nassert     find_min_diff([1, 5, 7, 10, 4, 20], 5) == -1\nassert     find_min_diff([1, 5, 7, 10, 4, 20], 4) == 1\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_min_diff([1,2,3,4], 1) == 1, \"function should return 1\"\nassert     find_min_diff([10,3,5,1], 5) == 1, \"function should return 1\"\nassert     find_min_diff([5,6,7,8], 10) == 3, \"function should return 3\"\nassert     find_min_diff([4,5,6,7], 10) == 5, \"function should return 5\"\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    pass\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_min_diff([1,2,3], 0) == -1\nassert     find_min_diff([2,3], 0) == 1\nassert     find_min_diff([1,2,3], 3) == 2\n\ndef find_min_diff_2(arr, n):\n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    pass\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     number_ctr(\"abcd\") == 4\nassert     number_ctr(\"abcde\") == 5\nassert     number_ctr(\"0abc\") == 3\nassert     number_ctr(\"-0abc\") == 3\nassert     number_ctr(\"abcd-abcde\") == 4\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     number_ctr('123') == 3, 'Wrong!'\nassert     number_ctr('1') == 1, 'Wrong!'\nassert     number_ctr('123') == 3, 'Wrong!'\nassert     number_ctr('100') == 1, 'Wrong!'\nassert     number_ctr('gfg') == 0, 'Wrong!'\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     number_ctr('I am a number') == 1, \"incorrect output\"\nassert     number_ctr('I am a number') == 2, \"incorrect output\"\nassert     number_ctr('I am a number') == 1, \"incorrect output\"\nassert     number_ctr('I am a number') == 2, \"incorrect output\"\nassert     number_ctr('I am a number') == 1, \"incorrect output\"\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef even_odd(str):\n    '''\n    Write a python function to find out the even and odd characters of a given string.\n    '''\n    pass\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     number_ctr(\"hey\") == 2\nassert     number_ctr(\"one\") == 1\nassert     number_ctr(\"he33llo\") == 3\nassert     number_ctr(\"\") == 0\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     number_ctr('python') == 2\nassert     number_ctr('python is easy') == 3\nassert     number_ctr('this is python') == 1\nassert     number_ctr('easy python') == 2\nassert     number_ctr('python easy') == 2\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nnumber_ctr(\"123123\") == 4, \"incorrect\"\nnumber_ctr(\"12312312\") == 4, \"incorrect\"\nnumber_ctr(\"123\") == 3, \"incorrect\"\nnumber_ctr(\"12312312312312\") == 9, \"incorrect\"\nnumber_ctr(\"12312312312312341234\") == 9, \"incorrect\"\nnumber_ctr(\"12312312312312341231234\") == 9, \"incorrect\"\nnumber_ctr(\"1231231231231231231231234\") == 9, \"incorrect\"\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     number_ctr('12345') == 5, 'incorrect result'\nassert     number_ctr('asdfgh') == 0, 'incorrect result'\n\ndef search_substring(str, pattern):\n    '''\n    Write a python function to search a given pattern in a given string.\n    '''\n    pass\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     number_ctr('123456789') == 10\nassert     number_ctr('sdfdsfds') == 0\n\ndef is_even(num):\n    '''\n    Write a python function to check if the given number is even or not.\n    '''\n    pass\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     number_ctr(\"1234\")==4, \"should be 4\"\nassert     number_ctr(\"2099\")==3, \"should be 3\"\nassert     number_ctr(\"\")==0, \"should be 0\"\n\ndef number_ctr_v2(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    # code here\n    return str.count('0') + str.count('1') + str.count('2') + str.count('3') + str.count('4') + str.count('5') + str.count('6') + str.count('7') + str.count('8') + str.count('9')\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     is_polite(0) == 1, \"Not correct\"\nassert     is_polite(2) == 2, \"Not correct\"\nassert     is_polite(3) == 3, \"Not correct\"\nassert     is_polite(4) == 4, \"Not correct\"\nassert     is_polite(5) == 5, \"Not correct\"\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nis_polite(1) == 1\nis_polite(5) == 3\nis_polite(7) == 4\nis_polite(10) == 5\nis_polite(20) == 7\nis_polite(50) == 9\nis_polite(100) == 11\nis_polite(200) == 13\nis_polite(300) == 15\nis_polite(500) == 17\nis_polite(1000) == 19\nis_polite(2000) == 21\nis_polite(3000) == 23\nis_polite(5000) == 25\nis_polite(10000) == 27\nis_polite(20000) == 29\nis_polite(30000) == 31\nis_polite(50000) == 33\nis_polite(100000) == 35\nis_polite(200000) == 37\nis_polite(500000) == 39\nis_polite(1000000) == 41\nis_polite(2000000) == 43\nis_polite(3000000) == 45\nis_polite(4000000) == 47\nis_polite(5000000) == 49\nis_polite(10000000) == 51\nis_polite(20000000) == 53\nis_polite(40000000) == 55\nis_polite(60000000) == 57\nis_polite(100000000) == 59\nis_polite(200000000) == 61\nis_polite(300000000) == 63\nis_polite(400000000) == 65\nis_polite(500000000) == 67\nis_polite(600000000) == 69\nis_polite(700000000) == 71\nis_polite(800000000) == 73\nis_polite(900000000) == 75\nis_polite(1100000000) == 77\nis_polite(1200000000) == 79\nis_polite(1400000000) == 81\nis_polite(1500000000) == 83\nis_polite(1600000000) == 85\nis_polite(1700000000) == 87\nis_polite(1800000000) == 89\nis_polite(1900000000) == 91\nis_polite(2000000000) == 93\nis_polite(20000000) == 95\nis_polite(30000000) == 97\nis_polite(40000000) == 99\nis_polite(50000000) == 101\nis_polite(60000000) == 103\nis_polite(70000000) == 105\nis_polite(80000000) == 107\nis_polite(90000000) == 109\nis_polite(110000000) == 111\nis_polite(120000000) == 113\nis_polite(140000000) == 115\nis_polite(150000000) == 117\nis_polite(160000000) == 119\nis_polite(170000000) == 121\nis_polite(180000000) == 123\nis_polite(190000000) == 125\nis_polite(2000000000) == 127\nis_polite(210000000) == 129\nis_polite(220000000) == 131\nis_polite(230000000) == 133\nis_polite(240000000) == 135\nis_polite(250000000) == 137\nis_polite(260000000) == 139\nis_polite(270000000) == 141\nis_polite(280000000) == 143\nis_polite(290000000) == 145\nis_polite(300000000) == 147\nis_polite(310000000) == 149\nis_polite(330000000) == 151\nis_polite(350000000) == 153\nis_polite(370000000) == 155\nis_polite(390000000) == 157\nis_polite(410000000) == 159\nis_polite(430000000) == 161\nis_polite(450000000) == 163\nis_polite(470000000) == 165\nis_polite(490000000) == 167\nis_polite(500000000) == 169\nis_polite(510000000) == 171\nis_polite(530000000) == 173\nis_polite(550000000) == 175\nis_polite(570000000) == 177\nis_polite(590000000) == 179\nis_polite(610000000) == 181\nis_polite(630000000) == 183\nis_polite(650000000) == 185\nis_polite(670000000) == 187\nis_polite(690000000) == 189\nis_polite(710000000) == 191\nis_polite(730000000) == 193\nis_polite(750000000) == 195\nis_polite(770000000) == 197\nis_polite(790000000) == 199\nis_polite(810000000) == 201\nis_polite(830000000) == 203\nis_polite(850000000) == 205\nis_polite(870000000) == 207\nis_polite(890000000) == 209\nis_polite(910000000) == 211\nis_polite(930000000) == 213\nis_polite(950000000) == 215\nis_polite(970000000) == 217\nis_polite(990000000) == 219\nis_polite(1010000000) == 221\nis_polite(1030000000) == 223\nis_polite(1050000000) == 225\nis_polite(1070000000) == 227\nis_polite(1090000000) == 229\nis_polite(1100000000) == 231\nis_polite(1200000000) == 233\nis_polite(1400000000) == 235\nis_polite(1500000000) == 237\nis_polite(1600000000) == 239\nis_polite(1700000000) == 241\nis_polite(1800000000) == 243\nis_polite(1900000000) == 245\nis_polite(2000000000) == 247\nis_polite(210000000) == 249\nis_polite(220000000) == 251\nis_polite(230000000) == 253\nis_polite(240000000) == 255\nis_polite(250000000) == 257\nis_polite(260000000) == 259\nis_polite(270000000) == 261\nis_polite(280000000) == 263\nis_polite(290000000) == 265\nis_polite(300000000) == 267\nis_polite(310000000) == 269\nis_polite(330000000) == 271\nis_polite(350000000) == 273\nis_polite(370000000) == 275\nis_polite(390000000) == 277\nis_polite(410000000) == 279\nis_polite(430000000) == 281\nis_polite(450000000) == 283\nis_polite(470000000) == 285\nis_polite(490000000) == 287\nis_polite(500000000) == 289\nis_polite(510000000) == 291\nis_polite(530000000) == 293\nis_polite(550000000) == 295\nis_polite(570000000) == 297\nis_polite(590000000) == 299\nis_polite(610000000) == 301\nis_polite(630000000) == 303\nis_polite(650000000) == 305\nis_polite(670000000) == 307\nis_polite(690000000) == 309\nis_polite(710000000) == 311\nis_polite(730000000) == 313\nis_polite(750000000) == 315\nis_polite(770000000) == 317\nis_polite(790000000) == 319\nis_polite(810000000) == 321\nis_polite(830000000) == 323\nis_polite(850000000) == 325\nis_polite(870000000) == 327\nis_polite(890000000) == 329\nis_polite(910000000) == 331\nis_polite(930000000) == 333\nis_polite(950000000) == 335\nis_polite(970000000) == 337\nis_polite(990000000) == 339\nis_polite(1010000000) == 341\nis_polite(1030000000) == 343\nis_polite(1050000000) == 345\nis_polite(1070000000) == 347\nis_polite(1090000000) == 349\nis_polite(1100000000) == 351\nis_polite(1200000000) == 353\nis_polite(1400000000) == 355\nis_polite(1500000000) == 357\nis_polite(1600000000) == 359\nis_polite(1"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_polite(0) == 1, 'is_polite: 1st case'\nassert     is_polite(1) == 2, 'is_polite: 2nd case'\nassert     is_polite(2) == 4, 'is_polite: 3rd case'\nassert     is_polite(3) == 8, 'is_polite: 4th case'\nassert     is_polite(4) == 16, 'is_polite: 5th case'\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nis_polite(4) == 4\nassert \nis_polite(4) == 5\nassert \nis_polite(4) == 6\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_polite(1) == 0\nassert     is_polite(2) == 1\nassert     is_polite(3) == 1\nassert     is_polite(4) == 2\nassert     is_polite(5) == 2\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     is_polite(2) == 3, \"wrong\"\nassert     is_polite(10) == 15, \"wrong\"\nassert     is_polite(30) == 27, \"wrong\"\nassert     is_polite(50) == 37, \"wrong\"\nassert     is_polite(100) == 61, \"wrong\"\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_polite(1) == True, \"Test Case Failed\"\nassert     is_polite(2) == False, \"Test Case Failed\"\nassert     is_polite(3) == True, \"Test Case Failed\"\nassert     is_polite(4) == True, \"Test Case Failed\"\nassert     is_polite(5) == True, \"Test Case Failed\"\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     pair_wise([]) == [[]], \"Should return empty list\"\nassert     pair_wise([1]) == [[1],], \"Should return [[1]]\"\nassert     pair_wise([1, 2, 3]) == [[1, 2], [2, 3], [3, 1],], \"Should return [[1, 2], [2, 3], [3, 1]]\"\n\n\n\ndef pair_wise_all(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pass\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\npair_wise([2, 3, 6, 7]) == [(2, 3), (3, 6), (6, 7)]\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     pair_wise([]) == []\nassert     pair_wise([1,2,3]) == [[1,2],[2,3]]\nassert     pair_wise([1,2,3,4,5]) == [[1,2],[2,3],[3,4],[4,5]]\nassert     pair_wise([1,2,3,4,5,6,7,8,9]) == [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9]]\nassert     pair_wise([1,2,3,4,5,6,7,8,9,10]) == [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[8,9],[9,10]]\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     pair_wise([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == [(10,20),(20,30),(30,40),(40,50),(50,60),(60,70),(70,80),(80,90),(90,100)]\n\nprint(\"<Finished>\")\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     pair_wise([1,2,3,4]) == [[1, 2], [2, 3], [3, 4]]\nassert     pair_wise([1,2,3,4,5]) == [[1, 2], [2, 3], [3, 4], [4, 5]]\nassert     pair_wise([1,2,3,4,5,6]) == [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]\nassert     pair_wise([1,2,3,4,5,6,7]) == [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7]]\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     pair_wise([1, 2, 3, 4, 5]) == [[1, 2], [2, 3], [3, 4], [4, 5]]\nassert     pair_wise([1, 2, 3, 4, 5, 6]) == [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]\nassert     pair_wise([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7],\n                [7, 8], [8, 9]]\nassert     pair_wise([1, 2, 3, 4, 5]) == [[1, 2], [2, 3], [3, 4], [4, 5]]\nassert     pair_wise([1, 2, 3, 4, 5, 6]) == [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     pair_wise([0,1,2,3,4,5]) == [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5]]\nassert pair_wise([1,2,3,4,5]) == [[1, 2], [2, 3], [3, 4], [4, 5]]\nassert pair_wise([4,5,6,7,8]) == [[4, 5], [5, 6], [6, 7], [7, 8]]\nassert pair_wise([3,4,5,6,7]) == [[3, 4], [4, 5], [5, 6], [6, 7]]\nassert pair_wise([2,1,0,1,2]) == [[2, 1], [1, 2], [0, 1], [1, 2]]\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     pair_wise([]) ==     []\nassert     pair_wise([1]) ==     [[1]]\nassert     pair_wise([1, 2, 3]) ==     [[1, 2], [2, 3]]\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\ndef get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    return \n    pass\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     get_pairs_count([2, 1, 3, 5, 5, 5, 1], 10) == 4\nassert     get_pairs_count([1, 5, 7], 6) == 0\nassert     get_pairs_count([1, 5, 7], 5) == 2\nassert     get_pairs_count([1, 5, 7], 4) == 1\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     get_pairs_count([1,2,3,4,5], 6) == 3, \"get_pairs_count(1,6) should return 3\"\nassert     get_pairs_count([1,2,3,4,5], 5) == 0, \"get_pairs_count(1,5) should return 0\"\nassert     get_pairs_count([1,2,3,4,5], 2) == 0, \"get_pairs_count(1,2) should return 0\""
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pass\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n\n\nimport random"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    # return len([(x,y) for x in arr for y in arr if x + y == sum])\n    return sum([(x,y) for x in arr for y in arr if x + y == sum])\n    "
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     get_pairs_count([4,7,5], 10) == 2\nassert     get_pairs_count([4,5,5], 6) == 3\nassert     get_pairs_count([4,5,6], 9) == 1\nassert     get_pairs_count([4,5,5], 8) == 0\nassert     get_pairs_count([], 0) == 0\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     get_pairs_count([3, 1, 3, 4], 3) == 2\nassert     get_pairs_count([10, 2, 5, 7, 8, 9], 5) == 1\nassert     get_pairs_count([2, 5, 5, 2], 5) == 0\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\n'''\nYour task is to complete this function to find the number of all the possible combinations.\n\nCombinations is a function defined below that takes a list and returns a list of lists.\n\nFor example, if our input list was [1, 2, 3, 4, 5] the combinations function would return a list of size 1.\n\nEach of the inner lists would be of size 2. Each of the combinations is a list of lists.\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     Diff([1,2,3,4],[5,6,7,8]) == [[1,2],\n                                              [3,4],\n                                              [5,6],\n                                              [7,8]]\nassert     Diff([1,2,3,4],[1]) == [[2,3,4]]\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     Diff([10,20,30],[20,30,40]) == {10,30}, 'First list should have one element which is 20'\nassert     Diff([100,200,300,400],[100,200,300,400,500]) == {100,300,400,500}, 'First list should have two elements which are 100 and 300'\nassert     Diff([100,100,100,100],[100,200,300,400,500]) == {100,100,100,100,100}, 'Second list should have same elements'\nassert     Diff([10,20,30],[30,40,50,60]) == {10,20,30,50,60}, 'First list should have one element which is 30'\nassert     Diff([10,20,30],[50,60,70,80]) == {10,20,30,50,60,70,80}, 'Second list should have one element which is 50'\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nDiff(li1 = [1,3,5], li2 = [2,3,4]) == 2\nassert \n\n\ndef Diff_more(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    pass\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     Diff([],1) == []\nassert     Diff([1,2],[1]) == []\nassert     Diff([1,2,3],[1,3]) == [2]\nassert     Diff([1,2,3,4,5,6,7],[1,3,4,6]) == [2,3,5]\nassert     Diff([1,2,3,4,5,6,7,8,9,10],[1,3,4,6]) == [2,3,5,7]\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     Diff([1,2],[2])==[1]\nassert     Diff([1,2],[1,2])==[1]\nassert     Diff([1],[2,3])==[1]\nassert     Diff([1,2,3],[1,2])==[2,3]\nassert     Diff([1,2,3],[2])==[1,2,3]\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     Diff([1,2,3],[2,3]) == [1,3]\nassert     Diff([1,2,3],[1,2]) == [3]\nassert     Diff([1,2,3],[1,2,3]) == []\nassert     Diff([1,2,3,4,5,6,7],[5,6,7]) == [1,2,3]\nassert     Diff([],[1,2,3]) == []\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     Diff([1,2,3,4],[\"a\",\"b\",\"c\"]) == [\"c\",\"b\"]\nassert     Diff([1,2,3],[\"a\",\"b\",\"c\"]) == []\nassert     Diff([1,2,3,4,5],[\"a\",\"b\",\"c\"]) == [\"c\",\"b\"]\nassert     Diff([1,2,3,4,5],[\"a\",\"b\",\"c\",\"d\"]) == [\"d\"]\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     Diff([1, 2, 3], [4, 5]) == [2, 3], \"Should be (2, 3)\"\nassert     Diff([], [1, 2, 3]) == [], \"Should be empty\"\nassert     Diff([1, 2, 3], [1, 2, 3]) == [], \"Should be empty\"\nassert     Diff([1, 2, 3], [2, 3]) == [1], \"Should be (1,)\"\nassert     Diff([1, 2, 3], [2]) == [1, 3], \"Should be (1, 2)\"\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nDiff([1,2,3],[2,3,4]) == [1,2]\nassert \nDiff([1,2,3],[1,2,3]) == []\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     Diff([1,2,3,4], [3,4,5,6]) ==  [1,2]\n\nassert    Diff([1,2,3,4], [5,6]) ==  [1,2,3]\n\nassert    Diff([1,2,3,4,5], [3,4,5,6]) ==  [1,2,3]\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     odd_num_sum(6) == 1\nassert     odd_num_sum(7) == 27\nassert     odd_num_sum(10) == 2"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nodd_num_sum(4) == 4*(odd_num_sum(3) + odd_num_sum(2))\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     odd_num_sum(10) == 111, \"Wrong output\"\nassert     odd_num_sum(20) == 1251, \"Wrong output\"\nassert     odd_num_sum(30) == 9993, \"Wrong output\"\nassert     odd_num_sum(40) == 3311, \"Wrong output\"\nassert     odd_num_sum(50) == 6689, \"Wrong output\"\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     odd_num_sum(1) == 0, \"Test Case 1 Failed\"\nassert     odd_num_sum(2) == 1, \"Test Case 2 Failed\"\nassert     odd_num_sum(3) == 1, \"Test Case 3 Failed\"\nassert     odd_num_sum(4) == 2, \"Test Case 4 Failed\"\nassert     odd_num_sum(5) == 8, \"Test Case 5 Failed\"\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     odd_num_sum(4) == [1,3,9,25]\nassert     odd_num_sum(5) == [1,3,9,25,49]\n\nprint(\"\\033[32m\" + \"Test 3: Passed\" + \"\\033[0m\")\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nodd_num_sum(5) == 9\n\ndef odd_num_sum(n):\n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    return sum([i**4 for i in range(1,n,2)])\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef even_num_sum(n) :\n    '''\n    Write a python function to find the sum of fourth power of first n even natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_expression('(((1+2)*3)-4)')==True, 'error in expression: (((1+2)*3)-4)'\nassert     check_expression('(((1+2)*3)-(4+5))')==False, 'error in expression: (((1+2)*3)-(4+5))'\nassert     check_expression('(((1+2)*3)-(4+5-6))')==False, 'error in expression: (((1+2)*3)-(4+5-6))'\nassert     check_expression('(((1+2)*3)-(4+5-6)-7)')==True, 'error in expression: (((1+2)*3)-(4+5-6)-7)'\nassert     check_expression('(((1+2)*3)-(4+5-6)-7)-8')==True, 'error in expression: (((1+2)*3)-(4+5-6)-7)-8'\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_expression(\"((()))\") == True\nassert     check_expression(\"(()\") == False\nassert     check_expression(\"()\") == False\nassert     check_expression(\"()())\") == False\nassert     check_expression(\"(()()())\") == True\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_expression('((a)+(b))') == True\nassert     check_expression('((a)+((b)))') == False\nassert     check_expression('((a)-((b)))') == False\nassert     check_expression('((a))') == False\nassert     check_expression('((a)-b)') == False\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_expression(\"(((((((()))))))))\") == False,'should be false'\nassert     check_expression(\"(((((((())))))))))\") == False,'should be false'\nassert     check_expression(\"(((((()))))))\") == False,'should be false'\nassert     check_expression(\"((((((()))))))))\") == True,'should be true'\nassert     check_expression(\"(()((((((()))))))))\") == False,'should be false'\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\n\ndef check_parenthesis(s):\n    '''\n    Write a function to check the correctness of parenthesis in an expression. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    pass\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_expression('()') == True,    \"balanced\"\nassert     check_expression('(}') == False,    \"unbalanced\"\nassert     check_expression('(((((') == False,    \"unbalanced\"\nassert     check_expression('((()') == False,    \"unbalanced\"\nassert     check_expression('())') == False,    \"unbalanced\"\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    brace_map = {\n        '(': ')',\n        '{': '}',\n        '[': ']',\n    }\n    if len(exp) == 0:\n        return True\n    if len(exp) == 1:\n        return False\n    \n    for val in exp:\n        if val in brace_map:\n            stack.append(brace_map[val])\n        elif val in ['(', '{', '[']:\n            if len(stack) == 0:\n                stack.append(val)\n            else:\n                if stack[-1]!= brace_map[stack.pop()]:\n                    return False\n        else:\n            stack.pop()\n    \n    return len(stack) == 0\n\nassert check_expression('(()){}') == True, \"check_expression failed\"\nassert check_expression('(()){}()') == False, \"check_expression failed\"\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_expression('((a+b)*(c+d))') == True\nassert     check_expression('((a*b))') == False\nassert     check_expression('((a*b)+(c*d))') == False\nassert     check_expression('((a+b)+(c+d))') == True\nassert     check_expression('((a+b))') == True\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_expression(\"((a+b)/(c+d))\") == True\nassert     check_expression(\"((a+b)/c)\") == False\nassert     check_expression(\"((a+b)/c)\") == True\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     (check_expression(\"(())()\") == True), \"Empty expression is balanced\"\nassert     (check_expression(\"()\") == True), \"Balanced parenthesis should be balanced\"\nassert     (check_expression(\"((()))\") == False), \"Unbalanced parenthesis\"\nassert     (check_expression(\"(((()))\") == False), \"Unbalanced parenthesis\"\nassert     (check_expression(\"(((())())\") == False), \"Unbalanced parenthesis\"\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_length(\"anita lava la tina\", 3) == \"atita la tina\"\nassert     remove_length(\"ana lava la tina\", 2) == \"ana lava la tina\"\nassert     remove_length(\"ana lava la tina\", 1) == \"ana lava la tina\"\nassert     remove_length(\"ana lava la tina\", 0) == \"ana lava la tina\"\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_length(\"hi\", 3) == \"i\"\nassert     remove_length(\"code\", 2) == \"od\"\nassert     remove_length(\"shoe\", 1) == \"oe\"\nassert     remove_length(\"hi\", 3) == \"hi\"\nassert     remove_length(\"code\", 2) == \"de\"\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_length(\"\", 2) == \"\"\nassert     remove_length(\"pomodoro\", 2) == \"pomo\"\nassert     remove_length(\"pomodoro pomodoro pomodoro\", 2) == \"pomodoro\"\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_length(\"hello, hello\", 1) == \"ello,ello\"\nassert     remove_length(\"hello, hello\", 2) == \"ello,llo\"\nassert     remove_length(\"hello, hello\", 3) == \"llo,llo\"\nassert     remove_length(\"hello, hello\", 4) == \"llo,llo\"\nassert     remove_length(\"hello, hello\", 5) == \"llo,ll\"\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_length(\"ab\", 0) == \"\"\nassert     remove_length(\"ab\", 1) == \"\"\nassert     remove_length(\"ab\", 2) == \"ab\"\nassert     remove_length(\"ab\", 3) == \"ab\"\nassert     remove_length(\"ab\", 4) == \"ab\"\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_length('i love you', 1) == 'i lv ey'\nassert     remove_length('i love you', 2) == 'il vy'\nassert     remove_length('i love you', 3) == 'il vy'\nassert     remove_length('i love you', 0) == 'i love you'\nassert     remove_length('i love you', 5) == 'i lv y'\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_length('there', 0) == 'there'\nassert     remove_length('word', 1) == 'wor'\nassert     remove_length('a word', 2) == 'awr'\nassert     remove_length('the', 3) == 'the'\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_length(\"catcat\", 3) == \"cat\"\nassert     remove_length(\"catcat\", 2) == \"cat\"\nassert     remove_length(\"catcat\", 1) == \"cat\"\nassert     remove_length(\"catcat\", 0) == \"\"\nassert     remove_length(\"catcat\", 0) == \"\"\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_length(\"hi\", 1) == \"i\"\nassert     remove_length(\"hi\", 2) == \"\"\nassert     remove_length(\"hi\", 3) == \"h\"\nassert     remove_length(\"hi\", 4) == \"\"\nassert     remove_length(\"hi\", 5) == \"h\"\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_length(\"abcabcabcabc\", 3) == \"abcabc\"\nassert     remove_length(\"aabaabaaa\", 2) == \"aabaabaaa\"\nassert     remove_length(\"x\", 1) == \"\"\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     occurance_substring('aba', 'aba') is None\nassert     occurance_substring('aaba', 'aba') == (0, 2)\nassert     occurance_substring('aaba', 'ab') == (0, 1)\nassert     occurance_substring('aaba', 'ab') == (0, 1)\nassert     occurance_substring('aaba', 'ab') == (0, 1)\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     occurance_substring('aaabbbcccddd','bb') == (3,4)\nassert     occurance_substring('aaabbbcccddd','ccc') == (3,6)\nassert     occurance_substring('aaabbbcccddd','ddd') == (None,None)\nassert     occurance_substring('aaabbbcccddd','dd') == (None,None)\nassert     occurance_substring('aaabbbcccddd','ddd') == (None,None)\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef create_trie(patterns):\n    '''\n    Write a function to create a trie using a collection of patterns. Return a dict for each pattern.\n    '''\n    pass\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nassert \nassert \nassert \nassert \n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     occurance_substring('this is the course. the course is very special', 'course') == {\n            'occurance': 1, 'position': 8}\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     occurance_substring('trollolo','llo') == None\nassert occurance_substring('trollolo','trollo') == (1,2)\nassert occurance_substring('snowing','a') == None\n\ndef find_longest_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return the maximum occurrence if there is more than one. Return None if there is no match.\n    '''\n    pass\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\ndef occurance_substring_b(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pass\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    test_string = \"ababababababaabababababababababaabababababababababababababababa\"\n    print(occurance_substring(test_string,\"abaabababaababababababababababaababababababababababababababababa\"))\n    print(occurance_substring(test_string,\"abaabababaababababababababababaababababababababababababababababa\"))\n    print(occurance_substring(test_string,\"abaabababaababababababababababaababababababababababababababababa\"))\n    print(occurance_substring(test_string,\"abaabababaababababababababababaababababababababababababababababa\"))\n    print(occurance_substring(test_string,\"abaabababaababababababababababaababababababababababababababababa\"))\n    print(occurance_substring(test_string,\"abaabababaababababababababababaababababababababababababababababa\"))\n    print(occurance_substring(test_string,\"abaabababaababababababababababaababababababababababababababababa\"))\n    print(occurance_substring(test_string,\"abaabababaababababababababababaababababababababababababababababa\"))\n    print(occurance_substring(test_string,\"abaabababaababababababababababaababababababababababababababababa\"))\n    print(occurance_substring(test_string,\"abaabababaababababababababababaababababababababababababababababa\"))\n    print(occurance_substring(test_string,\"abaabababaababababababababababaababababababababababababababababa\"))\n    print(occurance_substring(test_string,\"abaabababaababababababababababaababababababababababababababababa\"))\n    print(occurance_substring(test_string,\"abaabababaababababababababababaababababababababababababababababa\"))\n    print(occurance_substring(test_string,\"abaabababaababababababababababaababababababababababababababababa\"))\n    print(occurance_substring(test_string,\"abaabababaababababababababababaababababababababababababababababa\"))\n    print(occurance_substring(test_string,\"abaabababaababababababababababaababababababababababababababababa\"))\n    print(occurance_substring(test_string,\"abaabababaababababababababababaababababababababababababababababa\"))\n    print(occurance_substring(test_string,\"abaabababaababababababababababaababababababababababababababababa\"))\n    print(occurance_substring(test_string,\"abaabababaababababababababababaababababababababababababababababa\"))\n    print(occurance_substring(test_string,\"abaabababaababababababababababaababababababababababababababababa\"))\n    print(occurance_substring(test_string,\"abaabababaababababababababababaababababababababababababababababa\"))\n    print(occurance_substring(test_string,\"abaabababaababababababababababaababababababababababababababababa\"))\n    print(occurance_substring(test_string,\"abaabababaababababababababababaababababababababababababababababa\"))\n    print(occurance_substring(test_string,\"abaabababaababababababababababaababababababababababababababababa\"))\n    print(occurance_substring(test_string,\"abaabababaababababababababababaababababababababababababababababa\"))\n    print(occurance_substring(test_string,\"abaabababaababababababababababaababababababababababababababababa\"))\n    print(occurance_substring(test_string,\"abaabababaababababababababababaababababababababababababababababa\"))\n    print(occurance_substring(test_string,\"abaabababaababababababababababaababababababababababababababababa\"))\n    print(occurance_substring(test_string,\"abaabababaababababababababababaababababababababababababababababa\"))\n    print(occurance_substring(test_string,\"abaabababaababababababababababaababababababababababababababababa\"))\n    print(occurance_substring(test_string,\"abaabababaababababababababababaababababababababababababababababa\"))\n    print(occurance_substring(test_string,\"abaabababaababababababababababaababababababababababababababababa\"))\n    print(occurance_substring(test_string,\"abaabababaababababababababababaababababababababababababababababa\"))\n    print(occurance_substring(test_string,\"abaabababaababababababababababaababababababababababababababababa\"))\n    print(occurance_substring(test_string,\"abaabababaababababababababababaababababababababababababababababa\"))\n    print(occurance_substring(test_string,\"abaabababaababababababababababaababababababababababababababababa\"))\n    print(occurance_substring(test_string,\"abaabababaababababababababababaababababababababababababababababa\"))\n    print(occurance_substring(test_string,\"abaabababaababababababababababaababababababababababababababababa\"))\n    print(occurance_substring(test_string,\"abaabababaababababababababababaababababababababababababababababa\"))\n    print(occurance_substring(test_string,\"abaabababaababababababababababaababababababababababababababababa\"))\n    print(occurance_substring(test_string,\"abaabababaababababababababababaababababababababababababababababa\"))\n    print(occurance_substring(test_string,\"abaabababaababababababababababaababababababababababababababababa\"))\n    print(occurance_substring(test_string,\"abaabababaababababababababababaababababababababababababa"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     odd_position([1, 2, 3, 4]) == True, \"Wrong Answer\"\nassert odd_position([1, 2, 3, 5, 6]) == False, \"Wrong Answer\"\nassert odd_position([1, 2, 3, 5, 6, 8, 9]) == False, \"Wrong Answer\"\nassert odd_position([1, 3, 5]) == False, \"Wrong Answer\"\nassert odd_position([1, 2, 3, 4]) == True, \"Wrong Answer\"\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     odd_position([0,1,2,3,4,5]) == True\nassert odd_position([0,1,2,3,4,5,6]) == False\nassert odd_position([0,1,3,5,7]) == False\n\n\n\ndef is_power_of_two(n):\n    '''\n    Write a Python function to check if a number is a power of two.\n    '''\n    pass\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nodd_position([3,5,2,9,4,1]) == False\nodd_position([3,5,2,9,4,1,5]) == True\nodd_position([3,5,2,9,4,1,5,5]) == False\nodd_position([3,5,2,9,4,1,5,5,5]) == False\nodd_position([3,5,2,9,4,1,5,5,5,6]) == False"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \nodd_position([1, 2, 3, 4, 5])\nodd_position([1, 2, 3, 4])\n\n\ndef check_even(nums):\n    '''\n    Write a python function to check whether all even numbers are in a list.\n    '''\n    pass\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nodd_position([1, 2, 3, 4, 5, 6, 7, 8, 9])\nassert odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\nassert odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]) == False\nassert odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]) == False\nassert odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]) == False\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     odd_position([1,2,3,4,5,6,7,8,9]) == True, \"Wrong answer\"\nassert odd_position([1,2,3,4,5,6,7,8,9,10]) == False, \"Wrong answer\"\nassert odd_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == False, \"Wrong answer\"\nassert odd_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == True, \"Wrong answer\"\nassert odd_position([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]) == True, \"Wrong answer\"\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert "
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n\ncount_vowels('leetcode') == 5\n\ncount_vowels('cat') == 0\n\ncount_vowels('tiger') == 3\n\ncount_vowels('hippopotamuses') == 5\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_vowels('aeiou') == 5\nassert     count_vowels('QWERTY') == 4\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    count_vowels('Adagio') == 3, 'testcase error'\nassert \n    count_vowels('aaab') == 2, 'testcase error'\nassert \n    count_vowels('ab') == 1, 'testcase error'\nassert \n    count_vowels('hello') == 0, 'testcase error'\nassert \n    count_vowels('hhh') == 0, 'testcase error'\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_vowels('aabccbb') == 3\nassert     count_vowels('AaAa') == 2\nassert     count_vowels('a') == 1\nassert     count_vowels('aa') == 1\nassert     count_vowels('Bbb') == 1\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_vowels('hehe') == 1, 'test 1 failed'\nassert     count_vowels('hEhe') == 2, 'test 2 failed'\nassert     count_vowels('hEhE') == 1, 'test 3 failed'\nassert     count_vowels('hEhhE') == 1, 'test 4 failed'\nassert     count_vowels('hEheEhe') == 1, 'test 5 failed'\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_vowels(\"tactcoa\") == 1, 'Should be 1'\nassert     count_vowels(\"racetwo\") == 0, 'Should be 0'\nassert     count_vowels(\"bee\") == 3, 'Should be 3'\nassert     count_vowels(\"litterfox\") == 3, 'Should be 3'\nassert     count_vowels(\"lovecraft\") == 7, 'Should be 7'\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_vowels('this is a test') == 2\nassert     count_vowels('aeiou') == 5\nassert     count_vowels('xyz') == 0\nassert     count_vowels('t') == 0\nassert     count_vowels('abc') == 0\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \ntest_str = 'python'\nassert count_vowels(test_str) == 2\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nprint \n\n'''\n\nSuccess!!!\nTest cases passed...\n\n'''"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint('\\n\\n\\t\\t##### Problem 5 #####\\n')\n\ndef find_multiples(arr,n):\n    '''\n    Write a python function to find the first multiple of n that is in arr.\n    '''\n    pass\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     find_sum([1,2,3,3,5,7,8,9])==13\nassert     find_sum([1,2,3,5,7,8,9])==13\nassert     find_sum([])==0\n\nprint(\"Test passed\")\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_sum([1,3,2,3,5]) == 6, \"function returned 6 not as expected\"\nassert     find_sum([1,3,5,3,2,3]) == 9, \"function returned 9 not as expected\"\nassert     find_sum([1,3,5,5,2,3]) == 12, \"function returned 12 not as expected\"\nassert     find_sum([1,3,5,5,2,5]) == 15, \"function returned 15 not as expected\"\nassert     find_sum([1,3,5,5,2,5,5]) == 18, \"function returned 18 not as expected\"\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_sum([1,1,2,2,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_sum([1,3,5,6,7,8,9,0]) == 0, 'Wrong answer'\nassert     find_sum([2,3,4,5,6,7,8,9,9,9]) == 1, 'Wrong answer'\n\ndef is_power_of_two(n):\n    '''\n    Write a python function to check whether a number is a power of 2 or not.\n    '''\n    pass\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert "
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     find_sum([5, 3, 6, 5, 3, 5, 6]) == 18, \"Find sum of non-repeated elements in a given list.\"\nassert     find_sum([]) == 0, \"Find sum of non-repeated elements in a given list.\"\nassert     find_sum([1, 1, 1]) == 3, \"Find sum of non-repeated elements in a given list.\"\n\ndef swap(arr, i, j):\n    '''\n    Write a python function to swap elements at indices i and j in a given array.\n    '''\n    pass\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nfind_sum([1,2,3,4,5,6,7,8,9]) == 55\nassert find_sum([1,2,3,4,5,6,7,8,8,8,8,8,8,8,8]) == 15\nassert find_sum([1,2,3,4,5,6,7,8,9,10]) == 40\nassert find_sum([]) == 0"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     pack_consecutive_duplicates([1,1,2,3,5,6,6,7,8,9]) == [[1,2,5,6], [3,6,7,8,9]]\nassert     pack_consecutive_duplicates([3,3,4,4,4,4,4,4,5,5]) == [[3,4,5],[4,4,4,4,4]]\nassert     pack_consecutive_duplicates([4,4,4,4,4,4,4,4,4]) == [[4,4,4,4]]\nassert     pack_consecutive_duplicates([1,1,2,2,2,2,2,2,3,3]) == [[1,2,2,2,2,2,2],[3,3,3]]\nassert     pack_consecutive_duplicates([1,1,2,3,4,5]) == [[1,2,3,4,5]]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     pack_consecutive_duplicates([1,2,3,3,4,4]) == [[1,2,3], [4]]\nassert     pack_consecutive_duplicates([1,2,3,3,4,4,3,3,4,4]) == [[1,2,3], [4], [3], [4]]\n\ndef check_anagram(word1,word2):\n    '''\n    Given two strings, check if they are anagrams of each other.\n    '''\n    pass\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    \n    assert pack_consecutive_duplicates([1,2,3,4,5,6,7]) == [[1, 2], [3, 4, 5], [6, 7]]\n    assert pack_consecutive_duplicates([1,2,3,4,5,6,7,8,9,10]) == [[1, 2], [3, 4, 5], [6, 7, 8, 9, 10]]\n    assert pack_consecutive_duplicates([1,2,3,4,5,6,7,8,9,10,11]) == [[1, 2], [3, 4, 5], [6, 7, 8, 9, 10], [11]]\n    "
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     pack_consecutive_duplicates([1,1,1,1,2,2,2,3,4,5,6]) == [[1, 1], [2], [2, 2], [3, 4, 5, 6]]\nassert     pack_consecutive_duplicates([1,1,1,2,2,2,3,4,4,4,4,4,5,5,6,6,7,7,7,7,8,8,8,8,8,8,9,9]) == [[1], [2], [2], [3, 4], [4], [4], [5, 6], [7, 8], [9]]\n\n\ndef sum_of_nth_node(list1, n):\n    '''\n    Write a function to find the sum of nth node from the end of a given linked list.\n    '''\n    pass\n\ndef sum_of_nth_node_rec(node, n):\n    '''\n    Write a recursive function to find the sum of nth node from the end of a given linked list.\n    '''\n    if node == None:\n        return 0\n    if n == 1:\n        return node.data\n    return node.data + sum_of_nth_node_rec(node.next, n - 1)\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     pack_consecutive_duplicates([1,2,3,4,5,5,6]) == [[1,2,3,4,5],[5,5,6]]\nassert     pack_consecutive_duplicates([]) == []\nassert     pack_consecutive_duplicates([1,2,3,4]) == [[1,2,3,4]]\nassert     pack_consecutive_duplicates([1]) == [[1]]\nassert     pack_consecutive_duplicates([1,1]) == [[1]]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     pack_consecutive_duplicates([0, 1, 1, 2, 3, 3, 4, 4]) == [[0, 1], [1, 2], [2, 3], [3, 4]]\nassert     pack_consecutive_duplicates([0, 1, 2, 3, 4, 5, 6, 7, 8]) == [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8]]\n\nassert pack_consecutive_duplicates([0, 1, 2, 3, 4, 4]) == [[0, 1], [1, 2], [2, 3], [3, 4]]\nassert pack_consecutive_duplicates([0, 1, 1, 2, 3, 3, 4, 4]) == [[0, 1], [1, 2], [2, 3], [3, 4]]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     [1,2,3,4,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5] == pack_consecutive_duplicates([1,2,3,4,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5])\nassert    [1,2,3,4,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5] == pack_consecutive_duplicates([1,2,3,4,1,2,3,4,5])\nassert    [1,2,3,4,1,2,3,4,5] == pack_consecutive_duplicates([1,2,3,4,1,2,3,4,5])\nassert    [1] == pack_consecutive_duplicates([1])\nassert    [1,2,3,4] == pack_consecutive_duplicates([1,2,3,4])\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     pack_consecutive_duplicates([]) == [], \"An empty list should be an empty list\"\nassert     pack_consecutive_duplicates([1]) == [], \"A single element should be a sublist\"\nassert     pack_consecutive_duplicates([1,1]) == [1,1], \"Two elements should be sublists\"\nassert     pack_consecutive_duplicates([1,1,2]) == [[1,1],2], \"Two consecutive elements should be sublists\"\nassert     pack_consecutive_duplicates([1,1,2,1]) == [[1,1],2,1], \"Three consecutive elements should be sublists\"\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     pack_consecutive_duplicates([1,2,2,2,3,4,4,5]) == [[1,2,2],[2,3,4,4,5]]\nassert     pack_consecutive_duplicates([1,1,2,3,3,3,4,5]) == [[1,1],[2,3,3,3,4,5]]\nassert     pack_consecutive_duplicates([1,2,3,4,4,4,5,6,6]) == [[1,2,3,4,4,4,5], [6]]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     pack_consecutive_duplicates([1,2,3,4,5,6]) == [[1], [2,3], [4,5,6]]\nassert     pack_consecutive_duplicates([1,1,2,3,3,4]) == [[1], [1,2], [3,3,4]]\nassert     pack_consecutive_duplicates([5,5,5,5,5,5]) == [[5], [5,5,5], [5,5,5,5], [5,5,5,5,5]]\nassert     pack_consecutive_duplicates([1,1,1,1,1,1]) == [[1], [1,1], [1,1,1], [1,1,1,1], [1,1,1,1,1]]\nassert     pack_consecutive_duplicates([]) == []\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     unique_sublists([[1, 2], [1, 2], [1, 2], [1, 2], [1, 2]]) == {([1, 2], 2), ([1, 2], 3), ([1, 2], 4), ([1, 2], 1), ([1, 2], 2)}\nassert unique_sublists([[1, 2], [1, 2], [1, 2], [1, 2], [1, 2]]) == {([1, 2], 2), ([1, 2], 3), ([1, 2], 4)}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     unique_sublists([[1, 1], [1, 1]]) == {([1, 1], 2)}\nassert     unique_sublists([[1, 1], [1, 1], [2, 2]]) == {([1, 1], 2), ([2, 2], 1)}\nassert     unique_sublists([[1, 1], [1, 1], [1, 2], [2, 2]]) == {([1, 1], 2), ([1, 2], 1), ([2, 2], 1)}\n\ndef list_diff(list1, list2):\n    '''\n    Write a function that compares two lists, returns True if they are different and False if they are the same.\n    '''\n    pass\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\ndef unique_sublists_2(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    pass\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     unique_sublists([[[1], 2, 3], [[4], 5, 6, 7], [[8], 9]]) == {(2, 1), (3, 1), (5, 1), (7, 1), (8, 1), (9, 1)}\nassert unique_sublists([[[1], 2, 3], [[4], 5, 6, 7], [[8], 9], [4, 5, 6]]) == {(2, 1), (3, 1), (5, 1), (7, 1), (8, 1), (9, 1), (4, 1), (5, 1), (6, 1)}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     unique_sublists([]) == {}\nassert     unique_sublists([[], [], []]) == {}\nassert     unique_sublists([[], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []]]) == {([], 3), ([[], []], 3)}\nassert     unique_sublists([[], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []], [[], []]]) == {([], 5), ([[], []], 5), ([[], []], 5)}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     unique_sublists([1,2,3,1]) == {(1,2,3):1}\nassert     unique_sublists([1,2,3]) == {(1,2,3):2}\nassert     unique_sublists([1,2,2,2]) == {(1,2,2):3}\nassert     unique_sublists([1,1,1,2,2,2,3]) == {(1,1,1,2,2,2):5}\nassert     unique_sublists([]) == {}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     unique_sublists([]) == {() : 1}\nassert     unique_sublists([1]) == {(1,): 1}\nassert     unique_sublists([1,2]) == {(1,2): 1}\nassert     unique_sublists([1,2,3]) == {(1,2,3): 1}\nassert     unique_sublists([1,2,2,2,2,2,3]) == {(1,2,3): 1}\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     unique_sublists([[1, 2, 3], [1, 3], [1, 4]]) == {\n         (1, 2, 3): 1, (1, 3): 2, (1, 4): 1\n    }, f'Wrong answer. Your function should return {expected}'\n\n'''\nQuestion 10:\nImplement a function to check whether a string is palindrome or not. The function should return True if the string is a palindrome, else it should return False.\n'''\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     unique_sublists([[1,2], [3,4], [1,2]]) == {([1,2], 1), ([3,4], 1), ([1,2], 2)}, \"Wrong output\"\nassert     unique_sublists([[1,2], [2,3], [1,2]]) == {([1,2], 2), ([2,3], 1), ([1,2], 2)}, \"Wrong output\"\nassert     unique_sublists([[1], [2], [1], [1]]) == {([1], 3), ([2], 2), ([1], 3)}, \"Wrong output\"\nassert     unique_sublists([[]]) == {([], 0), ([], 1)}, \"Wrong output\"\nassert     unique_sublists([[1], [2], [3]]) == {([1], 1), ([2], 1), ([3], 1)}, \"Wrong output\"\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\nassert "
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     find_combinations([(1, 2), (3, 4), (5, 6)]) == [(1, 2), (1, 5), (2, 3), (2, 6), (3, 4), (4, 5), (5, 6)]\nassert     find_combinations([(1, 2), (3, 4), (5, 6)]) == [(1, 2), (1, 3), (1, 5), (2, 3), (2, 4), (2, 6), (3, 4), (3, 5), (4, 5), (4, 6), (5, 6)]\nassert     find_combinations([(1, 2), (3, 4), (5, 6), (7, 8)]) == [(1, 2), (1, 3), (1, 5), (1, 7), (1, 9), (2, 3), (2, 4), (2, 6), (2, 7), (3, 4), (3, 5), (3, 7), (4, 5), (4, 6), (4, 7), (5, 6), (5, 7), (6, 7), (7, 8)]\n\n\ndef find_combinations_with_tuples(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    pass\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     find_combinations([(1,2),(3,4),(5,6)]) == [(1,2),(3,4),(5,6)]\nassert     find_combinations([(1,2,3),(3,4,5),(6,7,8)]) == [(1,2,3),(3,4,5),(6,7,8)]\nassert     find_combinations([(1,2),(3,4),(5,6),(7,8)]) == []\n\n'''\nIn this challenge, a farmer is asking a farmer to help him harvest more apples. The farmer has to maximize the number of apples he can harvest. The farmer can start with a certain amount of apples and then, he can either harvest apples or nothing. The farmer can go for any number of units of apples. But he can\u2019t go beyond the maximum amount of apples.\n\nGiven the value of apples and the maximum number of apples he can go, print the maximum number of apples he can harvest.\n'''\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     find_combinations([(3,2),(4,5),(6,2),(5,4)]) ==     [(3,2),(6,2),(5,4)]\nassert     find_combinations([(1,2),(2,1),(2,1)]) ==     [(1,2),(2,1)]\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     find_combinations([(1,2),(1,3),(2,3)]) ==     [(1,2),(1,3),(2,3)]\nassert     find_combinations([(1,2,3),(1,3,4),(2,4,5),(3,5,6)]) ==     [(1,2,3),(1,3,4),(2,3,4),(2,4,5),(3,4,5),(3,5,6)]\nassert     find_combinations([(1,2),(3,4),(5,6)]) ==     [(1,2),(3,4),(5,6)]\n\ntest_list = [1,2,3,4]\ns = find_combinations(test_list)\nprint(s)\nprint(\"\\n\")\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     find_combinations([\"(1, 1, 1)\", \"(1, 1, 1)\", \"(1, 1, 1)\", \"(1, 1, 1)\", \"(1, 1, 1)\", \"(1, 1, 1)\", \"(1, 1, 1)\"]) == \\\n        [(1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1), (1, 1, 1)]\nassert    find_combinations([]) == []\nassert    find_combinations([]) == []\nassert    find_combinations([]) == []\nassert    find_combinations([]) == []\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ntest_list = [(1, 2), (2, 2), (3, 4), (4, 3), (5, 5), (6, 6)]\nfind_combinations(test_list)\n\n\ntest_list = [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)]\nfind_combinations(test_list)"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nfind_combinations([(1,2,3),(1,2),(1,2,3,4,5)]) == {(2,3), (2,4),(2,5),(3,4),(3,5),(4,5),(1,2,3,4,5)}\nassert find_combinations([(1,2,3),(1,2,3,4,5),(1,2,3,4,5,6)]) == {(2,3,4,5,6)}\nassert find_combinations([(1,2,3),(1,2,3,4,5),(1,2,3,4,5,6),(1,2,3,4,5,6,7)]) == {(2,3,4,5,6,7)}\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     find_combinations([(1,2,3),(1,2,3),(4,5,6)]) == [[(1,2,3)], [(1,2,3), (4,5,6)], [(1,2,3), (1,2,3), (4,5,6)]]\nassert     find_combinations([(1,2,3),(1,2,3),(1,2,3),(4,5,6)]) == [[(1,2,3)], [(1,2,3), (1,2,3), (4,5,6)], [(1,2,3), (1,2,3), (1,2,3), (4,5,6)]]\nassert     find_combinations([(1,2,3),(4,5,6),(1,2,3),(2,3,4),(5,6,7),(2,3,4),(3,4,5),(1,2,3),(2,3,4),(3,4,5),(1,2,3),(4,5,6)]) == [[(1,2,3)], [(1,2,3), (1,2,3), (4,5,6)], [(1,2,3), (1,2,3), (1,2,3), (4,5,6)], [(1,2,3), (1,2,3), (1,2,3), (1,2,3), (4,5,6)], [(1,2,3), (1,2,3), (1,2,3), (1,2,3), (1,2,3), (4,5,6)], [(1,2,3), (1,2,3), (1,2,3), (1,2,3), (1,2,3), (1,2,3), (4,5,6)], [(1,2,3), (1,2,3), (1,2,3), (1,2,3), (1,2,3), (1,2,3), (4,5,6)], [(1,2,3), (1,2,3), (1,2,3), (1,2,3), (1,2,3), (1,2,3), (4,5,6)], [(1,2,3), (1,2,3), (1,2,3), (1,2,3), (1,2,3), (1,2,3), (4,5,6)], [(1,2,3), (1,2,3), (1,2,3), (1,2,3), (1,2,3), (1,2,3), (4,5,6)], [(1,2,3), (1,2,3), (1,2,3), (1,2,3), (1,2,3), (1,2,3), (4,5,6)], [(1,2,3), (1,2,3), (1,2,3), (1,2,3), (1,2,3), (1,2,3), (4,5,6)], [(1,2,3), (1,2,3), (1,2,3), (1,2,3), (1,2,3), (1,2,3), (4,5,6)], [(1,2,3), (1,2,3), (1,2,3), (1,2,3), (1,2,3), (1,2,3), (4,5,6)], [(1,2,3), (1,2,3), (1,2,3), (1,2,3), (1,2,3), (1,2,3), (4,5,6)], [(1,2,3), (1,2,3), (1,2,3), (1,2,3), (1,2,3), (1,2,3), (4,5,6)], [(1,2,3), (1,2,3), (1,2,3), (1,2,3), (1,2,3), (1,2,3), (4,5,6)], [(1,2,3), (1,2,3), (1,2,3), (1,2,3), (1,2,3), (1,2,3), (4,5,6)], [(1,2,3), (1,2,3), (1,2,3), (1,2,3), (1,2,3), (1,2,3), (4,5,6)], [(1,2,3), (1,2,3), (1,2,3), (1,2,3), (1,2,3), (1,2,3), (4,5,6)], [(1,2,3), (1,2,3), (1,2,3), (1,2,3), (1,2,3), (1,2,3), (4,5,6)], [(1,2,3), (1,2,3), (1,2,3), (1,2,3), (1,2,3), (1,2,3), (4,5,6)]]\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     find_combinations([(1,2,3,4), (1,2,4,4), (1,3,4,4), (2,3,4,4)]) == [(1,2,3,4),(1,2,4,4),(1,3,4,4),(2,3,4,4)]\nassert     find_combinations([(1,2,3,4), (1,2,3,4), (1,2,3,4), (1,2,3,4)]) == None\nassert     find_combinations([(1,2,3,4), (1,2,3,4), (1,2,3,4), (1,2,3,4), (1,2,3,4)]) == None\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_divisors(2) == False, \"Correct answer: False\"\nassert     count_divisors(4) == True, \"Correct answer: True\"\nassert     count_divisors(6) == True, \"Correct answer: True\"\nassert     count_divisors(12) == False, \"Correct answer: False\"\nassert     count_divisors(15) == True, \"Correct answer: True\"\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \ncount_divisors(1) == 1\ncount_divisors(2) == 1\ncount_divisors(10) == 5\ncount_divisors(100) == 51\ncount_divisors(100) == 51\ncount_divisors(1000) == 733\ncount_divisors(10000) == 1457\n\ndef find_max_of_even_number(a,b,c) :\n    '''\n    Write a python function to find maximum of three numbers.\n    '''\n    pass"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n    count_divisors(4) == 2\n    count_divisors(8) == 3\n    count_divisors(10) == 2\n    count_divisors(7) == 4"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_divisors(2) == 1, \"should return 1 as 2 has only 1 divisor\"\nassert     count_divisors(3) == 2, \"should return 2 as 3 has 2 divisors\"\nassert     count_divisors(4) == 3, \"should return 3 as 4 has 3 divisors\"\nassert     count_divisors(5) == 4, \"should return 4 as 5 has 4 divisors\"\nassert     count_divisors(10) == 4, \"should return 4 as 10 has 4 divisors\"\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_divisors(4) == 1, 'Expected: 1\\nActual: '+ str(count_divisors(4))\nassert     count_divisors(6) == 2, 'Expected: 2\\nActual: '+ str(count_divisors(6))\nassert     count_divisors(9) == 4, 'Expected: 4\\nActual: '+ str(count_divisors(9))\nassert     count_divisors(20) == 5, 'Expected: 5\\nActual: '+ str(count_divisors(20))\n\ndef sum_divisors(n) : \n    '''\n    Write a python function to sum all divisors of a number.\n    '''\n    pass\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_divisors(2) == True, \"2 is a perfect number\"\nassert     count_divisors(16) == True, \"16 is a perfect number\"\nassert     count_divisors(4) == False, \"4 is not perfect number\"\nassert     count_divisors(12) == True, \"12 is a perfect number\"\nassert     count_divisors(10) == False, \"10 is not perfect number\"\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     count_divisors(3) == 4\nassert count_divisors(4) == 5\nassert count_divisors(5) == 6\nassert count_divisors(6) == 7\nassert count_divisors(7) == 8\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_divisors(0) == 1, 'input 0, the count of divisors should be 1'\nassert count_divisors(1) == 1, 'input 1, the count of divisors should be 1'\nassert count_divisors(2) == 1, 'input 2, the count of divisors should be 1'\nassert count_divisors(3) == 1, 'input 3, the count of divisors should be 1'\nassert count_divisors(4) == 1, 'input 4, the count of divisors should be 1'\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     odd_length_sum('') == 0,'should return 0'\nassert     odd_length_sum([1,2,3,4,5]) == 5,'should return 5'\nassert     odd_length_sum([1,2,3,4,5,6]) == 13,'should return 13'\nassert     odd_length_sum([1,2,3,4,5,6,7]) == 26,'should return 26'\nassert     odd_length_sum([1,2,3,4,5,6,7,8]) == 41,'should return 41'\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     odd_length_sum([1,2,3,4,5]) == sum([1,3,5])\nassert     odd_length_sum([3,4,5]) == sum([3,5])\nassert     odd_length_sum([1,2]) == sum([1,2])\nassert     odd_length_sum([1]) == sum([1])\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     odd_length_sum([3,1,2,3]) == 3\nassert     odd_length_sum([1,1,1]) == 4\nassert     odd_length_sum([1]) == 1\nassert     odd_length_sum([1,1,1,1,1,1,1,1,1,1,1,1]) == 10\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     odd_length_sum([10,20,30,40]) == 85\nassert     odd_length_sum([10,20,30]) == 85\nassert     odd_length_sum([10,20,30,40,50]) == 105\nassert     odd_length_sum([10,20,30,40,50,60,70,80,90,100]) == 245\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     odd_length_sum(arr) == 23, \"Should return 23\"\nassert     odd_length_sum(arr_2) == 7, \"Should return 7\"\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     odd_length_sum([1, 2, 3, 4, 5]) == 15, 'incorrect'\nassert     odd_length_sum([1, 2, 3, 4, 5, 5]) == 15, 'incorrect'\nassert     odd_length_sum([1, 2, 3, 4, 5, 6, 7, 8]) == 20, 'incorrect'\nassert     odd_length_sum([1, 2, 3, 4, 5, 6, 7]) == 20, 'incorrect'\nassert     odd_length_sum([1, 2, 3, 4, 5, 6]) == 20, 'incorrect'\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nodd_length_sum([1,4,2,5,3,6]) == 11\nassert odd_length_sum([1,5,3]) == 5\nassert odd_length_sum([1,2,3,4,5]) == 0\nassert odd_length_sum([1,2,3,4,5,6]) == 0\nassert odd_length_sum([1,2,3,4,5,6,7]) == 15\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     odd_length_sum([1,1,2,3,4,4]) == 3\nassert     odd_length_sum([1,1,2,3,4]) == 6\nassert     odd_length_sum([1,1,2,3,4,3,2]) == 7\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ndef odd_length_sum(arr):\n    sum_odd_len = 0\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            sum_odd_len += sum(arr[i:j+1])\n    return sum_odd_len\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert rgb_to_hsv(0, 0, 0) == (0, 0, 0)\nassert rgb_to_hsv(255, 255, 255) == (0, 0, 0)\nassert rgb_to_hsv(100, 100, 100) == (0, 0, 0)\nassert rgb_to_hsv(255, 0, 0) == (359 / 360, 1 / 3, 2 / 3)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert "
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     (rgb_to_hsv(255, 0, 0) == (1.0, 0.0, 0.0)), \"rgb_to_hsv returned wrong result\"\nassert     (rgb_to_hsv(0, 255, 0) == (0.0, 1.0, 0.0)), \"rgb_to_hsv returned wrong result\"\nassert     (rgb_to_hsv(0, 0, 255) == (0.0, 0.0, 1.0)), \"rgb_to_hsv returned wrong result\"\nassert     (rgb_to_hsv(255, 255, 255) == (0.0, 1.0, 1.0)), \"rgb_to_hsv returned wrong result\"\n\ndef hsv_to_rgb(h, s, v):\n    '''\n    Write a function to convert hsv color to rgb color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    pass\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef hsv_to_rgb(h, s, v):\n    '''\n    Write a function to convert hsv color to rgb color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    pass\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     rgb_to_hsv(0, 0, 0) == (0, 0, 0), 'rgb_to_hsv(0, 0, 0) should be (0, 0, 0)'\nassert     rgb_to_hsv(255, 255, 255) == (0, 1, 1), 'rgb_to_hsv(255, 255, 255) should be (0, 1, 1)'\nassert     rgb_to_hsv(255, 255, 0) == (1, 1, 0), 'rgb_to_hsv(255, 255, 0) should be (1, 1, 0)'\nassert     rgb_to_hsv(0, 255, 0) == (1, 1, 0), 'rgb_to_hsv(0, 255, 0) should be (1, 1, 0)'\nassert     rgb_to_hsv(0, 255, 255) == (0, 1, 1), 'rgb_to_hsv(0, 255, 255) should be (0, 1, 1)'\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef hsv_to_rgb(h, s, v):\n    '''\n    Write a function to convert hsv color to rgb color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    pass\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     rgb_to_hsv(0, 0, 0) == (0.0, 0.0, 0.0)\nassert     rgb_to_hsv(1, 1, 1) == (0.0, 1.0, 1.0)\nassert     rgb_to_hsv(0.3, 0.4, 0.2) == (0.0, 0.2, 1.0)\nassert     rgb_to_hsv(0.2, 0.4, 0.3) == (0.0, 1.0, 0.5)\nassert     rgb_to_hsv(0.3, 0.2, 0.3) == (1.0, 0.0, 1.0)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     rgb_to_hsv(0, 0, 0) == (0.0, 0.0, 0.0)\nassert     rgb_to_hsv(0, 255, 0) == (0.0, 1.0, 0.0)\nassert     rgb_to_hsv(0, 255, 255) == (0.0, 1.0, 1.0)\nassert     rgb_to_hsv(0, 255, 255) == (0.0, 1.0, 1.0)\nassert     rgb_to_hsv(255, 0, 0) == (1.0, 0.0, 0.0)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     rgb_to_hsv(0,0,0) == (0.0, 0.0, 0.0)\nassert rgb_to_hsv(1,0,0) == (0.0, 1.0, 0.0)\nassert rgb_to_hsv(1,1,1) == (0.0, 0.0, 1.0)\nassert rgb_to_hsv(1,1,0) == (0.0, 1.0, 1.0)\nassert rgb_to_hsv(0,1,0) == (0.0, 0.0, 1.0)\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     mul_even_odd([1,2,3,4,5]) == 120, \"First example is wrong\"\nassert     mul_even_odd([2,3,4,5]) == 120, \"Second example is wrong\"\nassert     mul_even_odd([3,4,5]) == 120, \"Third example is wrong\"\nassert     mul_even_odd([3,4,5,6]) == 180, \"Fourth example is wrong\"\nassert     mul_even_odd([2,3,4,5,6]) == 360, \"Fifth example is wrong\"\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    list1 = [1,2,3,4,5,6]\n    result = mul_even_odd(list1)\n    print(result)\n    "
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     mul_even_odd([5, 3, 4]) == 0, \"First\"\nassert     mul_even_odd([4, 5, 7, 8, 10]) == 3600, \"Second\"\nassert     mul_even_odd([10, 11, 13, 14]) == 0, \"Third\"\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef mul_even_odd2(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    pass\n\n\nassert \n\ndef mul_even_odd3(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == '__main__':\n    list1 = list(map(int,input(\"Enter the list of numbers\\n\").split()))\n    print(\"Product of first even and odd number: \", mul_even_odd(list1)"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \nmul_even_odd([2, 3, 4, 5, 6, 7]) == 48\n\nmul_even_odd([1, 3, 5, 7, 9]) == 57\n\nmul_even_odd([2, 2, 2, 2]) == 16"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     tuple_str_int('(1,2,3)') == (1,2,3)\nassert     tuple_str_int('(1,2,3)') == (1,2,3)\nassert     tuple_str_int('(1,2,3)') == (1,2,3)\nassert     tuple_str_int('(1,2,3)') == (1,2,3)\nassert     tuple_str_int('(1,2,3)') == (1,2,3)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     tuple_str_int('(1, 2, 3)') == (1, 2, 3)\nassert     tuple_str_int('(1, 2, 3)') == (1, 2, 3)\nassert     tuple_str_int('(1, 2, 3, 1)') == (1, 2, 3, 1)\nassert     tuple_str_int('(1, 2, 3, 1, 1)') == (1, 2, 3, 1, 1)\nassert     tuple_str_int('(1, 1, 2, 3, 1, 1)') == (1, 1, 2, 3, 1, 1)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     tuple_str_int('(1,2)') == (1,2)\nassert     tuple_str_int('(1,2,3)') == (1,2,3)\nassert     tuple_str_int('(1,2,3,4)') == (1,2,3,4)\nassert     tuple_str_int('(1,2,3,4,5)') == (1,2,3,4,5)\nassert     tuple_str_int('()') == ()\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     tuple_str_int('(1, 2, 3, 4)') == (1, 2, 3, 4)\nassert tuple_str_int('(1, 2, 3)') == (1, 2, 3)\nassert tuple_str_int('(2, 3, 4)') == (2, 3, 4)\nassert tuple_str_int('(5, 6, 7, 8)') == (5, 6, 7, 8)\nassert tuple_str_int('(1, 2, 3)') == (1, 2, 3)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     tuple_str_int(\"(1,2,3)\") == (1, 2, 3)\nassert     tuple_str_int(\"('a', 'b', 'c')\") == ('a', 'b', 'c')\nassert     tuple_str_int(\"('a', 2, 'c')\") == ('a', 2, 'c')\nassert     tuple_str_int(\"('a', 2, 'c', 6)\") == ('a', 2, 'c', 6)\nassert     tuple_str_int(\"('a', 2, 'c', 6, 'd')\") == ('a', 2, 'c', 6, 'd')\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     tuple_str_int(('1', '2')) == (1, 2)\nassert     tuple_str_int(('1',)) == (1,)\nassert     tuple_str_int(('1')) == (1, )\nassert     tuple_str_int(()) == ()\nassert     tuple_str_int((1, 2)) == (1, 2)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     tuple_str_int('(1, 2, 3)') == (1, 2, 3)\nassert     tuple_str_int('(1, 2, 3)') == (1, 2, 3)\nassert     tuple_str_int('(1,2)') == (1, 2)\nassert     tuple_str_int('(1)') == (1,)\nassert     tuple_str_int('( )') == ()\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)\nassert     tuple_str_int(\"(10, )\") == (10, )\nassert     tuple_str_int(\"(10, )\") == (10, )\nassert     tuple_str_int(\"(10, )\") == (10, )\nassert     tuple_str_int(\"()\") == ()\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     tuple_str_int('(1,2,3)') == (1,2,3)\nassert tuple_str_int('(1,2,3,4)') == (1,2,3,4)\nassert tuple_str_int('(1,2,3,4,5)') == (1,2,3,4,5)\nassert tuple_str_int('(1,2,3,4,5,6)') == (1,2,3,4,5,6)\nassert tuple_str_int('(1,2,3,4,5,6,7)') == (1,2,3,4,5,6,7)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     tuple_str_int('(1, 2, 3)') == (1, 2, 3)\nassert     tuple_str_int('(1, 2, (3,))') == (1, 2, (3,))\nassert     tuple_str_int('(1,2)') == (1, 2)\nassert     tuple_str_int('(1,2,(3))') == (1, 2, 3)\nassert     tuple_str_int('()') == ()\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     right_insertion([-2,5,-1,7,8,11], 3) == 1\nassert right_insertion([-2,5,-1,7,8,11], -1) == 5\nassert right_insertion([-2,5,-1,7,8,11], -2) == 3\nassert right_insertion([-2,5,-1,7,8,11], 7) == 4\nassert right_insertion([-2,5,-1,7,8,11], 11) == 6\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     right_insertion([1, 2, 3], 1) == 1\nassert     right_insertion([1, 2, 3], 4) == 3\nassert     right_insertion([1, 2, 3], 5) == 2\nassert     right_insertion([1, 2, 3], 2) == 1\nassert     right_insertion([1, 2, 3], 0) == 1\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     right_insertion([1,2,3], 5) == 2\nassert     right_insertion([1,2,3], 3) == 2\nassert     right_insertion([1,2,3], 1) == 0\nassert     right_insertion([1,2,3], 4) == 2\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\na = [2, 4, 6, 8, 10, 12, 14, 16, 18]\nx = 15\nassert right_insertion(a, x) == 5\n\n\n\ndef count_occurrences(a, x):\n    '''\n    Write a function to count occurrences of a value in an array.\n    '''\n    pass\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     right_insertion([1,2,3,4,5], 3) == 4\nassert right_insertion([1,2,3,4,5], 5) == 5\nassert right_insertion([1,2,3,4,5], 1) == 1\nassert right_insertion([1,2,3,4,5], 0) == 0\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     right_insertion([1,2,3,4,5], 5) == 4\nassert right_insertion([1,2,3,4,5], -5) == 0\nassert right_insertion([], 1) == 0\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    pass\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     right_insertion([1,2,3],2) == 2\nassert     right_insertion([1,2,3],0) == 1\nassert     right_insertion([1,2,3],5) == 3\nassert     right_insertion([1,2,3],4) == 4\nassert     right_insertion([1,2,3],1) == 1\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     right_insertion([1, 3, 5, 7], 5) == 3\nassert     right_insertion([1, 3, 5, 7], 2) == 1\nassert     right_insertion([1, 3, 5, 7], 8) == 4\nassert     right_insertion([1, 3, 5, 7], 0) == 0\n\ndef linear_search(a, x):\n    '''\n    Write a function to return the first occurence of x in a sorted array.\n    '''\n    for i in range(0,len(a)):\n        if a[i] == x:\n            return i\n    return -1\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_match_three(\"abcbbc\") == True, \"Text does not match.\"\nassert     text_match_three(\"abcbbc\") == False, \"Text does not match.\"\nassert     text_match_three(\"aaabaaa\") == False, \"Text does not match.\"\nassert     text_match_three(\"abcbbc\") == False, \"Text does not match.\"\nassert     text_match_three(\"abcbbc\") == False, \"Text does not match.\"\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_match_three('abcb') == True, 'Should return True if text contains abc followed by 3 bs.'\nassert     text_match_three('abcbabc') == False, 'Should return True if text contains abc followed by 3 bs.'\nassert     text_match_three('abcbabcabc') == True, 'Should return True if text contains abc followed by 3 bs.'\nassert     text_match_three('abcabc') == False, 'Should return True if text contains abc followed by 3 bs.'\nassert     text_match_three('abcabcabc') == False, 'Should return True if text contains abc followed by 3 bs.'\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_match_three('bbbbbbb') == False\nassert     text_match_three('aababab') == True\nassert     text_match_three('abbbbbb') == True\nassert     text_match_three('aabbbbb') == False\nassert     text_match_three('abab') == True\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_match_three(\"bbbbbbbbb\") == True, \"This function is correct\"\nassert     text_match_three(\"bbbbbbb\") == False, \"This function is correct\"\nassert     text_match_three(\"aaaaaaaaaaaaa\") == True, \"This function is correct\"\nassert     text_match_three(\"aaaaaaaaaa\") == False, \"This function is correct\"\nassert     text_match_three(\"aaaaaaaa\") == True, \"This function is correct\"\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_match_three(\"ab\") == True, \"ab\"\nassert     text_match_three(\"abb\") == True, \"abb\"\nassert     text_match_three(\"abab\") == True, \"abab\"\nassert     text_match_three(\"ababab\") == True, \"ababab\"\nassert     text_match_three(\"abc\") == False, \"abc\"\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_match_three('abababab') == True, 'incorrect'\nassert text_match_three('abcabcabc') == True, 'incorrect'\nassert text_match_three('abcabcabc') == False, 'incorrect'\nassert text_match_three('abcababab') == False, 'incorrect'\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     text_match_three(\"abababbba\") == \"abababbba\"\nassert     text_match_three(\"a\") == \"a\"\nassert     text_match_three(\"b\") == \"b\"\nassert     text_match_three(\"bb\") == \"bb\"\nassert     text_match_three(\"bbba\") == \"bbba\"\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_match_three('bbbbbbbbbb') == False, \"Should be False\"\nassert     text_match_three('aaaaaabbbbb') == True, \"Should be True\"\nassert     text_match_three('aababababab') == False, \"Should be False\"\nassert     text_match_three('ababababab') == False, \"Should be False\"\nassert     text_match_three('aaabaaabaa') == False, \"Should be False\"\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_match_three('abbbbbbbbbbbb') == True\nassert     text_match_three('abababababab') == True\nassert     text_match_three('bbbbbbbbbbbb') == False\nassert     text_match_three('bbbbbbbbbbb') == True\nassert     text_match_three('aaaaaaaaaaaaa') == False\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_match_three('') == False\nassert     text_match_three('abcb') == True\nassert     text_match_three('abcbabcb') == False\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     new_tuple(('a', 'b', 'c', 'd'), 'x') == ('x', 'b', 'c', 'd')\nassert     new_tuple(('a', 'b', 'c', 'd'), 'y') == ('y', 'a', 'b', 'c', 'd')\nassert     new_tuple(('a', 'b', 'c', 'd'), 'z') == ('z', 'a', 'b', 'c', 'd')\nassert     new_tuple(('a', 'b', 'c', 'd'), 'd') == ('d', 'a', 'b', 'c', 'd')\nassert     new_tuple(('a', 'b', 'c', 'd'), 'e') == ('e', 'a', 'b', 'c', 'd')\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     new_tuple([1,2,3], 'abc') == (1,2,3), \"First\"\nassert     new_tuple([1,2,3], 'a1b2c3') == (1,2,3), \"Second\"\nassert     new_tuple([1,2,3], 'abc') == (1,2,3), \"Third\"\nassert     new_tuple(['a', 'b', 'c'], 'abc') == ('a','b','c'), \"Four\"\nassert     new_tuple(['a', 'b', 'c'], 'abcd') == ('a','b','c'), \"Five\"\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     new_tuple([], '') == ()\nassert     new_tuple(['w'], '') == ('w',)\nassert     new_tuple([], 'w') == ('w',)\nassert     new_tuple(['w'], 'w') == ('w',)\nassert     new_tuple([], 'hello') == ()\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     new_tuple(['P', 'y', 't', 'h', 'o', 'n'], 'Python') == ('P', 'y', 't', 'h', 'o', 'n')\nassert     new_tuple(['p', 'y', 't', 'h', 'o', 'n'], 'PyThOn') == ('P', 'Y', 'T', 'H', 'O', 'N')\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     new_tuple([1,2,3], \"abc\") == (\"a\", \"b\", \"c\")\nassert     new_tuple([1,2,3], \"abcd\") == (\"a\", \"b\", \"c\")\nassert     new_tuple([1,2,3], \"ABCD\") == (\"A\", \"B\", \"C\")\nassert     new_tuple([1,2,3], \"aBCd\") == (\"a\", \"b\", \"c\")\nassert     new_tuple([1,2,3], \"abcd1\") == (\"a\", \"b\", \"c\")\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     new_tuple([\"h\", \"e\", \"l\", \"l\", \"o\"], \"hello\") == (\"h\", \"e\", \"l\", \"l\", \"o\"), \\\n        \"Tuples are not equal\"\n\nprint(\"Question 3 is correct.\")\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     new_tuple([\"a\", \"b\", \"c\"], \"abc\") == (\"a\", \"b\", \"c\"), \"Wrong\"\nassert     new_tuple([\"a\", \"b\", \"c\"], \"d\") == (\"d\",), \"Wrong\"\nassert     new_tuple([\"a\", \"b\", \"c\"], \"abc\") == (), \"Wrong\""
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ndef new_tuple2(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    pass\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     new_tuple([\"a\", \"b\", \"c\"], \"abc\") == (\"a\", \"b\", \"c\"), \"Wrong\"\nassert     new_tuple([\"a\", \"b\", \"c\", \"d\", \"e\"], \"abc\") == (\"a\", \"b\", \"c\"), \"Wrong\"\nassert     new_tuple([\"a\", \"b\", \"c\", \"d\", \"e\"], \"cbc\") == (\"c\", \"b\", \"c\"), \"Wrong\"\nassert     new_tuple([\"a\", \"b\", \"c\", \"d\", \"e\"], \"abcde\") == (\"a\", \"b\", \"c\"), \"Wrong\"\nassert     new_tuple([\"a\", \"b\", \"c\", \"d\", \"e\"], \"ab\") == (\"a\", \"b\"), \"Wrong\"\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \neven_position([1,2,3,4,5])==True \nassert even_position([1,2,3,4,5,6])==False\nassert even_position([2,4,6,8])==True\nassert even_position([])==False\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \neven_position([1,2,3,4,5])\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     even_position([1, 2, 3, 4, 5]) == False\nassert even_position([1, 2, 3, 4, 5, 6]) == False\nassert even_position([1, 2, 3, 4, 5, 6, 7]) == True\nassert even_position([1, 2, 3, 4, 5, 6, 7, 8]) == True\nassert even_position([1, 2, 3, 4, 5, 6, 7, 8, 9]) == True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert "
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    even_position([1,2,3,4,5]) == True\n    even_position([1,2,3,4,5,6,7]) == True\n    even_position([1,2,3,4,5,6,7,8,9]) == False\n\n'''\nWrite a python function to check whether every even index contains even numbers of a given list.\nHint: To check the first index of list, set the left_index to 0 and the right_index to the length of the list - 1. To set the right index\nto the length of the list, set the right_index to length - 1.\n'''\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     even_position([1, 2, 3, 4, 5]) == True\nassert     even_position([1, 2, 3, 4, 5, 6]) == False\nassert     even_position([1, 2, 3, 4, 5, 6, 7]) == False\nassert     even_position([1, 2, 3, 4, 5, 6, 7, 8]) == False\nassert     even_position([1, 2, 3, 4, 5, 6, 7, 8, 9]) == True\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_nested(('a','b','c','d')) == ('a','b','d')\nassert     remove_nested((('a','b'),('c','d'))) == ('a','b')\nassert     remove_nested((('a','b'),('c','d'),('a','b'))) == ('a','d')\n\ndef remove_duplicates(test_tup):\n    '''\n    Write a function to remove duplicates from a tuple.\n    '''\n    pass\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_nested((1, (2, 3), (4, 5), (6, 7))) == (1, (2, 3), (4, 5), (6, 7))\nassert     remove_nested((1, (2, 3), (4, (5, 6)), (6, 7))) == (1, (2, 3), (4, (5, 6)), (6, 7))\nassert     remove_nested((1, (2, 3), (4, (5, 6)), (6, 7))) == (1, (2, 3), (4, (5, 6)), (6, 7))\nassert     remove_nested((1, 2, (3, 4), (5, (6, 7)))) == (1, 2, (3, 4), (5, (6, 7)))\nassert     remove_nested((1, 2, (3, 4), (5, 6))) == (1, 2, (3, 4), (5, 6))\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_nested((4, (5, 6))) == (4, (5, 6))\nassert     remove_nested((4, 5)) == (4, 5)\nassert     remove_nested(((4, (5, 6)), 7)) == (4, 5, 6, 7)\nassert     remove_nested((4, (5, 6))) == (4, (5, 6))\nassert     remove_nested(((4,), 5)) == (4, 5)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     remove_nested((0,(0,0),(0,0,0),(0,0,0),(0,0,0,0),(0,0,0,0,0,0,0),(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     remove_nested(('a', 'b', ('c', 'd')))     == ('a', 'b', 'c', 'd')\nassert     remove_nested(('a', 'b', ('c', 'd'), ('e', 'f'), ('g', 'h'))) == ('a', 'b', 'g', 'h')\n\n'''\nExercise 3:\n\nWrite a function called remove_nested which accepts a tuple and returns a copy of the tuple with all nested tuples removed. For example:\n\n>>> remove_nested(('a', 'b', ('c', 'd'), ('e', 'f'), ('g', 'h')))\n('a', 'b', ('c', 'd'), 'g', 'h')\n>>> remove_nested(('a', 'b', ('c', 'd'), ('e', 'f'), ('g', 'h'), 'i', 'j', ('k', 'l','m')))\n('a', 'b', ('c', 'd'), 'g', 'h', 'i', 'j', 'k', 'l','m')\n'''\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_nested((\"a\",\"b\",\"c\",(1,2,3),[1,2,3]))     == ((1,2,3),[1,2,3])\nassert     remove_nested((\"a\",\"b\",\"c\",[1,2,3],\"d\"))     == ([\"d\"],[\"d\"])\nassert     remove_nested((\"a\",\"b\",\"c\",[1,2,3,4]))     == ([1,2,3,4], [])\nassert     remove_nested((\"a\",\"b\",\"c\",[1,2,3,4,5]))     == ([1,2,3,4,5], [])\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_nested([1,2,(1,2),2,2,(1,2),3,3]) ==         [1,2,3]\nassert     remove_nested([1,2,3,4,(1,2),4,4,(1,2),4]) ==         [1,2,4,4,4]\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_nested((1, (2, (3,4)))) == (1, 3, 4), \"First\"\nassert     remove_nested((1, (2, (3,4)))) == (1, 3, 4), \"Second\"\nassert     remove_nested((1, (2, (3,4)))) == (1, 2, 3, 4), \"Third\"\nassert     remove_nested((1, (2, (3,4)))) == (1, 2, 3, 4), \"Fourth\"\nassert     remove_nested((1, (2, (3,4)))) == (1, 2, 3, 4), \"Fifth\"\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_nested(('a', 'b', 'c', (1, 2, 3), (4, 5))) == ('a', 'b', 'c', (1, 2, 3), (4, 5))\nassert     remove_nested(('a', 'b', 'c', (1, 2, 3), (4, ))) == ('a', 'b', 'c', (1, 2, 3), (4, ))\nassert     remove_nested(('a', 'b', 'c', (1, 2, 3), (4, 5, 6))) == ('a', 'b', 'c', (1, 2, 3), (4, 5))\nassert     remove_nested(('a', 'b', 'c', (1, 2, 3))) == ('a', 'b', 'c', (1, 2, 3))\nassert     remove_nested((1, 2, 3)) == (1, 2, 3)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n\ntest_tup = ((1,2,3,4,5),(2,3),(4),(5,6),(7,8,9),(10,11,12,13))\nprint(remove_nested(test_tup))\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \ninput_list = [[1,2,3], [], [4,5,6], [7,8,9], [10,11,12]]\ncount_list(input_list)\n\n\n\n\ndef reverse_list(input_list):\n    '''\n    Write a python function to reverse the elements of a given list.\n    '''\n    pass\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_list([]) == 0, 'Empty list'\nassert     count_list([[],[],[]]) == 1, '3 empty lists'\nassert     count_list([[],[2,1],[]]) == 1, '1 list with 2 elements'\nassert     count_list([[],[2,1],[2,1,3]]) == 3, '1 list with 3 elements'\nassert     count_list([[],[2,1,3],2,1]) == 4, '2 lists with 3 elements'\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     count_list([])    == 0, 'Return 0 for empty list'\nassert     count_list([[1,2,3], [4,5]]) == 2, 'Return 2 for 2 lists'\nassert     count_list([[1,2,3], [1,2]])    == 1, 'Return 1 for 2 lists where the lists are of equal length'\nassert     count_list([[1,2,3], [1,2,3]])    == 1, 'Return 1 for 2 lists where the lists are of equal length'\nassert     count_list([[1,2,3], [1,2,3,4]])    == 1, 'Return 1 for 2 lists where the lists are of equal length'\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ndef count_list_2(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    \n    Assume that there are no empty lists.\n    '''\n    pass\n\n\n\ndef count_list_3(input_list):\n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    \n    Assume that there are no empty lists.\n    '''\n    pass\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     count_list([[1,2,3],[\"mango\",\"strawberry\"]]) == 1\nassert     count_list([[1,2,3],[\"mango\",\"strawberry\"],[\"mango\",\"strawberry\"]]) == 2\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n    count_list([1,2,3,4,5,6]) == 3\n    count_list([1,2,3,4,5]) == 1\n    count_list([1,2,3]) == 1\n    count_list([[],[],[]]) == 0\n    count_list([[1],[2,3],[4,5,6]]) == 2\n    count_list([[1,2],[3,4],[5,6]]) == 2\n    count_list([[1,2],[3,4,5],[6]]) == 2\n    count_list([[],[1,2],[3,4,5],[6]]) == 3\n    count_list([[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[6]]) == 2\n    count_list([[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9],[1,2,3,4,5,6,7,8,9]]) == 1\n    count_list([[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]) == 3\n    count_list([[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]]) == 3\n    count_list([[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10]]) == 5\n    count_list([[1,2,3,4,5,6,7,8,9,10,11],[1,2,3,4,5,6,7,8,9,10,11],[1,2,3,4,5,6,7,8,9,10,11],[1,2,3,4,5,6,7,8,9,10,11],[1,2,3,4,5,6,7,8,9,10,11],[1,2,3,4,5,6,7,8,9,10,11],[1,2,3,4,5,6,7,8,9,10,11],[1,2,3,4,5,6,7,8,9,10,11]]) == 4\n    count_list([[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5],[1,2,3,4,5]]) == 4\n    count_list([[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10],[1,2,3,4,5,6,7,8,9,10]]) == 4\n    count_list([[1,2,3,4,5,6,7,8,9,10,11],[1,2,3,4,5,6,7,8,9,10,11],[1,2,3,4,5,6,7,8,9,10,11],[1,2,3,4,5,6,7,8,9,10,11],[1,2,3,4,5,6,7,8,9,10,11],[1,2,3,4,5,6,7,8,9,10,11],[1,2,3,4,5,6,7,8,9,10,11],[1,2,3,4,5,6,7,8,9,10,11]]) == 4\n    count_list([[1,2,3,4,5,6,7,8,9,10,11,12],[1,2,3,4,5,6,7,8,9,10,11,12],[1,2,3,4,5,6,7,8,9,10,11,12],[1,2,3,4,5,6,7,8,9,10,11,12],[1,2,3,4,5,6,7,8,9,10,11,12],[1,2,3,4,5,6,7,8,9,10,11,12],[1,2,3,4,5,6,7,8,9,10,11,12],[1,2,3,4,5,6,7,8,9,10,11,12]]) == 3\n    count_list([[1,2,3,4,5,6,7,8,9,10,11,12,13],[1,2,3,4,5,6,7,8,9,10,11,12,13],[1,2,3,4,5,6,7,8,9,10,11,12,13],[1,2,3,4,5,6,7,8,9,10,11,12,13],[1,2,3,4,5,6,7,8,9,10,11,12,13],[1,2,3,4,5,6,7,8,9,10,11,12,13],[1,2,3,4,5,6,7,8,9,10,11,12,13],[1,2,3,4,5,6,7,8,9,10,11,12,13]]) == 2\n    count_list([[1,2,3,4,5,6,7,8,9,10,11,12,13,14],[1,2,3,4,5,6,7,8,9,10,11,12,13,14],[1,2,3,4,5,6,7,8,9,10,11,12,13,14],[1,2,3,4,5,6,7,8,9,10,11,12,13,14],[1,2,3,4,5,6,7,8,9,10,11,12,13,14],[1,2,3,4,5,6,7,8,9,10,11,12,13,14],[1,2,3,4,5,6,7,8,9,10,11,12,13,14],[1,2,3,4,5,6,7,8,9,10,11,12,13,14]]) == 1\n    count_list([[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],[1,2,3,4,5,6"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     count_list(input_list_a) == 3\nassert     count_list(input_list_b) == 3\nassert     count_list(input_list_c) == 3\nassert     count_list(input_list_d) == 0\nassert     count_list(input_list_e) == 0\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     count_list([[],[]]) == 0\nassert     count_list([[],[],[],[]]) == 1\nassert     count_list([[],[],[],[1]]) == 1\nassert     count_list([[],[],[1]]) == 1\nassert     count_list([[1],[]], 2) == 0\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_list([1,2,3,4,5]) == 5, \"Wrong output\"\nassert     count_list([1,2,3,4,5,1,2,3,4,5]) == 5, \"Wrong output\"\nassert     count_list([1,2,3,4,5,1,2,3,4,5,1,2,3,4,5]) == 5, \"Wrong output\"\nassert     count_list([1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5]) == 5, \"Wrong output\"\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     last([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],24) == 24\nassert     last([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],25) == 25\nassert     last([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],26) == 26\nassert     last([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],27) == 27\nassert     last([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],28) == 28\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     last([10, 20, 30, 40, 50], 30) == 2\nassert     last([10, 20, 30, 40, 50], 15) == 4\nassert     last([10, 20, 30, 40, 50], 5) == 1\nassert     last([], 5) == -1\nassert     last([10], 10) == 0\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     last([],1) == -1\nassert     last([1],1) == 0\nassert     last([1,2],1) == 1\nassert     last([1,2,3],1) == 2\nassert     last([1,2,3,4],1) == 3\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     last([1, 2, 3, 3, 3, 3, 4, 5, 5, 5, 5, 6, 7, 7, 7, 8, 9, 9, 9, 9, 9, 9], 3) == 9, \"Wrong Answer\"\nassert     last([0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2], 2) == 2, \"Wrong Answer\"\nassert     last([1, 1, 1, 1, 2, 2, 2, 2, 2, 2], 2) == 2, \"Wrong Answer\"\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     last([1,2,3,4,5],1)==4\nassert     last([1,2,3,4,5],2)==5\nassert     last([1,2,3,4,5],3)==3\nassert     last([1,2,3,4,5],4)==4\nassert     last([1,2,3,4,5],5)==5\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     last([1, 3, 5, 7], 5) == 3\nassert     last([1, 3, 5, 7], 1) == 3\nassert     last([1, 3, 5, 7], 7) == 3\nassert     last([1, 3, 5, 7], 2) == 2\nassert     last([1, 3, 5, 7], 8) == 3\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     last([5,7,7,8,10],7) == 3\nassert     last([5,7,7,8,10],4) == 3\nassert     last([5,7,7,8,10],5) == 4\nassert     last([5,7,7,8,10],6) == 4\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert "
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     last([1,2,3,4,5,6,7,8,9], 5) == 8, 'last function failed'\nassert     last([1,2,3,4,5,6,7,8,9], 10) == None, 'last function failed'\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     last([1,3,5,6,7,8], 6) == 3, 'wrong output'\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     text_starta_endb(\"abcabcabc\") == True\nassert     text_starta_endb(\"abcabcab\") == False\nassert     text_starta_endb(\"abcabcabcba\") == True\nassert     text_starta_endb(\"abcabcabcbaa\") == False\nassert     text_starta_endb(\"abcabcabcd\") == True\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     text_starta_endb('aaab') == True\nassert    text_starta_endb('aaaab') == False\nassert    text_starta_endb('aaabb') == True\nassert    text_starta_endb('aab') == True\nassert    text_starta_endb('aa') == True\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     text_starta_endb('abc') == None\nassert     text_starta_endb('abc') == None\nassert     text_starta_endb('aabc') == None\nassert     text_starta_endb('abca') == 'a'\nassert     text_starta_endb('ababc') == 'a'\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     text_starta_endb(\"Hello\") == False\nassert     text_starta_endb(\"Hi\") == False\nassert     text_starta_endb(\"Hello Hi\") == True\nassert     text_starta_endb(\"Hello a\") == False\nassert     text_starta_endb(\"Hi\") == False\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     text_starta_endb('ab') == True\nassert     text_starta_endb('ac') == False\nassert     text_starta_endb('abcb') == True\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     text_starta_endb('a') == True \nassert     text_starta_endb('ab') == True \nassert     text_starta_endb('abb') == True \nassert     text_starta_endb('aab') == False \nassert     text_starta_endb('bb') == True \n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    text_starta_endb(\"start\") == \"start\"\n    text_starta_endb(\"start \") == \"start \"\n    text_starta_endb(\"start a\") == \"start a\"\n    text_starta_endb(\"start b\") == \"start b\"\n    text_starta_endb(\"start a b\") == \"start a b\"\n    text_starta_endb(\"a start b\") == \"a start b\"\n    text_starta_endb(\"a start b c\") == \"a start b c\"\n    text_starta_endb(\"a start b c d\") == \"a start b c d\"\n    text_starta_endb(\"a start b c d e\") == \"a start b c d e\"\n    text_starta_endb(\"a start b c d e f\") == \"a start b c d e f\"\n    text_starta_endb(\"a start b c d e f g\") == \"a start b c d e f g\"\n    text_starta_endb(\"a start b c d e f g h\") == \"a start b c d e f g h\"\n    text_starta_endb(\"a start b c d e f g h i\") == \"a start b c d e f g h i\"\n    text_starta_endb(\"a start b c d e f g h i j\") == \"a start b c d e f g h i j\"\n    text_starta_endb(\"a start b c d e f g h i j k\") == \"a start b c d e f g h i j k\"\n    text_starta_endb(\"a start b c d e f g h i j k l\") == \"a start b c d e f g h i j k l\"\n    text_starta_endb(\"a start b c d e f g h i j k l m\") == \"a start b c d e f g h i j k l m\"\n    text_starta_endb(\"a start b c d e f g h i j k l m n\") == \"a start b c d e f g h i j k l m n\"\n    text_starta_endb(\"a start b c d e f g h i j k l m n o\") == \"a start b c d e f g h i j k l m n o\"\n    text_starta_endb(\"a start b c d e f g h i j k l m n o p\") == \"a start b c d e f g h i j k l m n o p\"\n    text_starta_endb(\"a start b c d e f g h i j k l m n o p q\") == \"a start b c d e f g h i j k l m n o p q\"\n    text_starta_endb(\"a start b c d e f g h i j k l m n o p q r\") == \"a start b c d e f g h i j k l m n o p q r\"\n    text_starta_endb(\"a start b c d e f g h i j k l m n o p q r s\") == \"a start b c d e f g h i j k l m n o p q r s\"\n    text_starta_endb(\"a start b c d e f g h i j k l m n o p q r s t\") == \"a start b c d e f g h i j k l m n o p q r s t\"\n    text_starta_endb(\"a start b c d e f g h i j k l m n o p q r s t u\") == \"a start b c d e f g h i j k l m n o p q r s t u\"\n    text_starta_endb(\"a start b c d e f g h i j k l m n o p q r s t u v\") == \"a start b c d e f g h i j k l m n o p q r s t u v\"\n    text_starta_endb(\"a start b c d e f g h i j k l m n o p q r s t u v w\") == \"a start b c d e f g h i j k l m n o p q r s t u v w\"\n    text_starta_endb(\"a start b c d e f g h i j k l m n o p q r s t u v w x\") == \"a start b c d e f g h i j k l m n o p q r s t u v w x\"\n    text_starta_endb(\"a start b c d e f g h i j k l m n o p q r s t u v w x y\") == \"a start b c d e f g h i j k l m n o p q r s t u v w x y\"\n    text_starta_endb(\"a start b c d e f g h i j k l m n o p q r s t u v w x y z\") == \"a start b c d e f g h i j k l m n o p q r s t u v w x y z\"\n    text_starta_endb(\"a start b c d e f g h i j k l m n o p q r s t u v w x y z a\") == \"a start b c d e f g h i j k l m n o p q r s t u v w x y z a\"\n    text_starta_endb(\"a start b c d e f g h i j k l m n o p q r s t u v w x y z a b\") == \"a start b c d e f g h i j k l m n o p q r s t u v w x y z a b\"\n    text_starta_endb(\"a start b c d e f g h i j k l m n o p q r s t u v w x y z a b c\") == \"a start b c d e f g h i j k l m n o p q r s t u v w x y z a b c\"\n    text_starta_endb(\"a start b c d e f g h i j k l m n o p q r s t u v w x y z a b c d\") == \"a start b c d e f g h i j k l m n o p q r s t u v w x y z a b c d\"\n    text_starta_endb(\"a start b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e\") == \"a start b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e\"\n    text_starta_endb(\"a start b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f\") == \"a start b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f\"\n    text_starta_endb(\"a start b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g\") == \"a start b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g\"\n    text_starta_endb(\"a start b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h\") == \"a start b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h\"\n    text_starta_endb(\"a start b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j\") == \"a start b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j\"\n    text_starta_endb(\"a start b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k\") == \"a start b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j "
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     text_starta_endb('aabaaaaaabb') == 'aabaaaaaabb'\nassert     text_starta_endb('aabaaaaaaaaab') == 'aabaaaaaaaaab'\nassert     text_starta_endb('aabaaaaaaaaabb') == 'aabaaaaaaaaabb'\nassert     text_starta_endb('aabaaaaaaaaaaaa') == 'aabaaaaaaaaaaaa'\nassert     text_starta_endb('aabaaaaaaaaaaaaa') == 'aabaaaaaaaaaaaaa'\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     text_starta_endb( 'abcba' ) == True\nassert     text_starta_endb( 'abcbb' ) == False\nassert     text_starta_endb( 'cba' ) == True\nassert     text_starta_endb( 'abccba' ) == True\nassert     text_starta_endb( 'abcda' ) == False\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     text_starta_endb('ab') == True\nassert     text_starta_endb('ababab') == True\nassert     text_starta_endb('ababac') == False\nassert     text_starta_endb('aab') == False\nassert     text_starta_endb('abab') == False\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     return_sum({1: 1, 2: 2, 3: 3}) == 6\nassert     return_sum({1: 1, 2: 2, 3: 3, 4: 4, 5: 5}) == 15\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     return_sum({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}) == 15, \"Should be 15\"\nassert     return_sum({\"a\": 1, \"b\": 2, \"c\": \"3\", \"d\": \"4\", \"e\": 5}) == 15, \"Should be 15\"\nassert     return_sum({\"a\": \"1\", \"b\": \"2\", \"c\": \"3\", \"d\": \"4\", \"e\": 5}) == 15, \"Should be 15\"\nassert     return_sum({\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6}) == 15, \"Should be 15\"\nassert     return_sum({\"a\": \"1\", \"b\": \"2\", \"c\": 3, \"d\": 4, \"e\": \"5\", \"f\": 6}) == 15, \"Should be 15\"\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     return_sum({1:2}) == 3, \"Expected 3, got {}\".format(return_sum({1:2}))\nassert     return_sum({2:3, 1:2}) == 5, \"Expected 5, got {}\".format(return_sum({2:3, 1:2}))\nassert     return_sum({1:2, 2:3}) == 5, \"Expected 5, got {}\".format(return_sum({1:2, 2:3}))\nassert     return_sum({1:2, 1:3}) == 5, \"Expected 5, got {}\".format(return_sum({1:2, 1:3}))\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    return_sum({'a':100,'b':200,'c':300})==500\n    return_sum({100:'a',200:'b',300:'c'})==500\n    return_sum({100:'a',200:'b'})==300\n    return_sum({100:'a'})==100\n    return_sum({100:1})==100\n    return_sum({'a':100})==100\n    return_sum({})==0\n    return_sum({})==0\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     return_sum({}) == 0\nassert     return_sum({1: 2, 3: 4}) == 7\nassert     return_sum({'a': 1, 'b': 2}) == 3\nassert     return_sum({'a': 1, 'b': 2, 'c': 3}) == 6\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert return_sum({\"A\":1,\"B\":2,\"C\":3}) == 6, \"Should be 6\"\nassert return_sum({\"A\":2,\"B\":2,\"C\":3}) == 4, \"Should be 4\"\nassert return_sum({}) == 0, \"Should be 0\"\nassert return_sum({\"A\":\"foo\"}) == 0, \"Should be 0\"\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     return_sum({\"A\":1, \"B\":2, \"C\":3}) == 6, \"Wrong answer\"\nassert     return_sum({\"A\":1, \"B\":2, \"C\":3, \"D\":4}) == 7, \"Wrong answer\"\nassert     return_sum({\"A\":1, \"B\":2, \"C\":3, \"D\":4, \"E\":5}) == 8, \"Wrong answer\"\n\nprint(\"Correct\")\n\n'''\nQuestion 7\nWrite a function that takes a dictionary and returns a list of tuples. \nEach tuple should contain the key and the value of that key.\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     return_sum({'key1': 1, 'key2': 2}) == 3, 'expected 3'\nassert     return_sum({'key1': 1, 'key2': 2, 'key3': 3}) == 6, 'expected 6'\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     return_sum({'a': 1, 'b': 2}) == 3, \"incorrect result for {'a': 1, 'b': 2}\"\nassert     return_sum({'c': 3, 'd': 4}) == 7, \"incorrect result for {'c': 3, 'd': 4}\"\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     sum_odd(1,2) == 3\nassert     sum_odd(0,100) == 188\n\n\ndef sum_odd_v2(l,r):\n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    pass\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     sum_odd(0, 0) == 0\nassert     sum_odd(0, 1) == 1\nassert     sum_odd(0, 2) == 3\nassert     sum_odd(0, 3) == 5\nassert     sum_odd(0, 4) == 7\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \nprint (\"Success: test_sum_odd\")\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \nsum_odd(10) == 0\nsum_odd(100) == 50\nsum_odd(1000) == 498\nsum_odd(10000) == 9998\nsum_odd(100000) == 99998\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef square_each(n):\n    '''\n    Write a python function to square each of the numbers within the range l and r.\n    '''\n    pass\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n    sum_odd(5) == 0\n    sum_odd(1) == 1\n    sum_odd(9) == 33\n    sum_odd(5) == 3\n    sum_odd(4) == 2\n    sum_odd(-3) == -2\n    sum_odd(-1) == -3\n    sum_odd(100) == 137\n    sum_odd(5) == 2\n    sum_odd(11) == 38\n    sum_odd(1) == 1\n    sum_odd(4) == 2\n    sum_odd(-1) == -2\n    sum_odd(1) == 1\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     sum_odd(0,1) == 0, \"Function should return 0\"\nassert     sum_odd(1,2) == 1, \"Function should return 1\"\nassert     sum_odd(3,4) == 3, \"Function should return 3\"\nassert     sum_odd(7,8) == 10, \"Function should return 10\"\nassert     sum_odd(11,13) == 12, \"Function should return 12\"\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nassert sum_odd(3) == 6\nassert sum_odd(5) == 14\nassert sum_odd(1) == 0\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     sum_odd(0, 1) == 0\nassert     sum_odd(1, 2) == 1\nassert     sum_odd(1, 5) == 4\nassert     sum_odd(1, 10) == 5\nassert     sum_odd(1, 1) == 1\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     _sum([1, 2, 3, 4, 5, 6]) == 21\nassert     _sum([1, 2, 3, 4, 5]) == 15\nassert     _sum([1, 2, 3]) == 6\nassert     _sum([1]) == 1\nassert     _sum([]) == 0\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     _sum([]) == 0\nassert     _sum([0, 1]) == 1\nassert     _sum([0, 1, 2]) == 3\nassert     _sum([1, 2, 3]) == 6\nassert     _sum([1, 2, 3, 4]) == 10\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     _sum([]) == 0, '_sum([]) == 0'\nassert     _sum([1]) == 1, '_sum([1]) == 1'\nassert     _sum([1,2]) == 3, '_sum([1,2]) == 3'\nassert     _sum([1,2,3]) == 6, '_sum([1,2,3]) == 6'\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     _sum([1, 2, 3, 4]) == 10, \"Should be 10\"\nassert     _sum([]) == 0, \"Should be 0\"\nassert     _sum([1]) == 1, \"Should be 1\"\nassert     _sum([1, 2]) == 3, \"Should be 3\"\nassert     _sum([1, 2, 3, 4, 5]) == 15, \"Should be 15\"\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert _____, _____, _____, _____\n\n'''\nQ. Given an array of n numbers and a number K, write a python function that finds the sum of the numbers with the multiplicities K. The input should be in the form of an array where each element represents a number with a multiplicity. For example, if the input is [1, 2, 3, 3, 4], then the sum of the numbers with multiplicities 3, 2, and 1 is 1*3 + 2*3 + 3*1 = 6.\n'''\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     _sum([1, 2, 3, 4, 5]) == 15, \"Wrong output.\"\nassert     _sum([-1, -2, -3, -4, -5]) == -15, \"Wrong output.\"\nassert     _sum([0, 0, 0, 0, 0]) == 0, \"Wrong output.\"\nassert     _sum([]) == 0, \"Wrong output.\""
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     _sum([1,2,3,4,5]) == 15, \"ERROR!\"\nassert     _sum([-1,2,-3,4,-5]) == -10, \"ERROR!\"\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert _____ == _____, 'WRONG RESULT'\nassert _____ == _____, 'WRONG RESULT'\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     _sum([1, 2, 3, 4, 5]) == 15, \"ERROR\"\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     left_rotate(5,0) == 0, \"rotate left by 0 bits\"\nassert     left_rotate(5,1) == 0b10000, \"rotate left by 1 bits\"\nassert     left_rotate(5,2) == 0b100000, \"rotate left by 2 bits\"\nassert     left_rotate(5,3) == 0b1000000, \"rotate left by 3 bits\"\nassert     left_rotate(5,4) == 0b10000000, \"rotate left by 4 bits\"\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nleft_rotate(0x12345678,2) == 0x34567812\nassert left_rotate(0x12345678,3) == 0x6781234\nassert left_rotate(0x12345678,0) == 0x12345678\nassert left_rotate(0x12345678,31) == 0x34567812\nassert left_rotate(0x12345678,32) == 0x6781234\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\n\n\ndef permute(n,l):\n    '''\n    Write a function that permutes a given array based on the given position. \n    '''\n    pass\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     left_rotate(26,3)==0b110\nassert     left_rotate(26,4)==0b100\nassert     left_rotate(26,5)==0b011\nassert     left_rotate(26,6)==0b001\nassert     left_rotate(26,7)==0b000\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef right_rotate(n,d):   \n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    pass\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     left_rotate(34, 0) == 34\nassert left_rotate(34, 1) == 35\nassert left_rotate(34, 2) == 31\nassert left_rotate(34, 3) == 32\nassert left_rotate(34, 4) == 31\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert "
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     remove_all_spaces(\"   \") == \"\", \"Remove all spaces - (1) works\"\nassert     remove_all_spaces(\"   \\t\") == \"\", \"Remove all spaces - (2) works\"\nassert     remove_all_spaces(\"   \\t \\n\") == \"\", \"Remove all spaces - (3) works\"\nassert     remove_all_spaces(\"   \\t \\t \\n\") == \"\", \"Remove all spaces - (4) works\"\nassert     remove_all_spaces(\"\\n\\n\\n\\n\\n\") == \"\", \"Remove all spaces - (5) works\"\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     remove_all_spaces('') == ''\nassert     remove_all_spaces(' hello') == 'hello'\nassert     remove_all_spaces('hello  world') == 'hello world'\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     remove_all_spaces(\" \") == \"\"\nassert     remove_all_spaces(\"\") == \"\"\nassert     remove_all_spaces(\"   \") == \"\"\nassert     remove_all_spaces(\"  \") == \"\"\nassert     remove_all_spaces(\"\\n\") == \"\"\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n\ntext ='  Hello world!   '\nprint(remove_all_spaces(text))\nprint(text)\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef check_string(text):\n    '''\n    Write a function to check if a string is empty or not.\n    '''\n    pass\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     remove_all_spaces('test') == 'test'\nassert remove_all_spaces('test   ') == 'test'\nassert remove_all_spaces('   test') == 'test'\nassert remove_all_spaces('') == ''\nassert remove_all_spaces(' ') == ''\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     remove_all_spaces('   abc') == 'abc', \n        \"incorrect result for remove_all_spaces('   abc')\"\nassert     remove_all_spaces(' abc') == 'abc', \n        \"incorrect result for remove_all_spaces(' abc')\"\nassert     remove_all_spaces(' abc ') == 'abc', \n        \"incorrect result for remove_all_spaces(' abc ') \"\n\nassert     remove_all_spaces('1 2 3') == '123', \n        \"incorrect result for remove_all_spaces('1 2 3')\"\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     remove_all_spaces('   ') == \"\", \"Basic test 1\"\nassert     remove_all_spaces('   ') == \"\", \"Basic test 2\"\nassert     remove_all_spaces(' ') == \"\", \"Basic test 3\"\nassert     remove_all_spaces('   hello') == \"hello\", \"Basic test 4\"\nassert     remove_all_spaces('   hello world') == \"hello world\", \"Basic test 5\"\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     remove_all_spaces(\" \") == \"\", \"This function should remove whitespaces.\"\nassert     remove_all_spaces(\"Hello  \") == \"Hello\", \"This function should remove whitespaces.\"\nassert     remove_all_spaces(\"   Hello   \") == \"Hello\", \"This function should remove whitespaces.\"\nassert     remove_all_spaces(\"Hello world\") == \"Hello world\", \"This function should remove whitespaces.\"\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     remove_all_spaces(\" a b \") == \"a b\", 'exercise #1'\nassert     remove_all_spaces(\" a b  c\") == \"a b c\", 'exercise #2'\nassert     remove_all_spaces(\"a b\") == \"a b\", 'exercise #3'\nassert     remove_all_spaces(\"\\t\\t\\t a b\") == \"a b\", 'exercise #4'\nassert     remove_all_spaces(\"\\t\\t\\t\\t\\t\\t\\t\\t\\t\") == \"\", 'exercise #5'\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     test_three_equal(3,3,3) == 3, \"Should be 3\"\nassert     test_three_equal(3,4,3) == 0, \"Should be 0\"\nassert     test_three_equal(3,3,4) == 1, \"Should be 1\""
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     test_three_equal(1,1,1) == 3, 'test_three_equal not working as expected'\nassert     test_three_equal(1,1,2) == 0, 'test_three_equal not working as expected'\nassert     test_three_equal(1,2,1) == 0, 'test_three_equal not working as expected'\nassert     test_three_equal(1,2,2) == 3, 'test_three_equal not working as expected'\nassert     test_three_equal(1,2,3) == 2, 'test_three_equal not working as expected'\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     test_three_equal(3,3,3) == 1\nassert     test_three_equal(4,3,3) == 0\nassert     test_three_equal(3,4,3) == 1\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert "
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     test_three_equal(1,1,1) == 0\nassert     test_three_equal(1,1,2) == 1\nassert     test_three_equal(1,2,1) == 1\nassert     test_three_equal(2,1,1) == 2\nassert     test_three_equal(1,2,2) == 2\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef test_three_divisors():\n    '''\n    Write a python function to count the number of divisors in a positive integer. \n    '''\n    pass\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nif __name__ == '__main__':\n    x = 1\n    y = 2\n    z = 3\n    assert test_three_equal(x,y,z) == 2\n    x = 10\n    y = 20\n    z = 30\n    assert test_three_equal(x,y,z) == 3\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     test_three_equal(3, 3, 3) == 3\nassert     test_three_equal(3, 3, 3) == 0\nassert     test_three_equal(3, 3, 1) == 2\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     test_three_equal(1,1,1) == 3, \"(1,1,1) should return 3\"\nassert     test_three_equal(1,2,1) == 2, \"(1,2,1) should return 2\"\nassert     test_three_equal(1,2,2) == 0, \"(1,2,2) should return 0\"\nassert     test_three_equal(2,1,1) == 2, \"(2,1,1) should return 2\"\nassert     test_three_equal(2,2,1) == 0, \"(2,2,1) should return 0\"\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     count_rotation([3,4,5,1,2]) == 1, \"Incorrect number of rotations\"\nassert     count_rotation([1,2,3]) == 0, \"Incorrect number of rotations\"\nassert     count_rotation([1,2,3,4]) == 0, \"Incorrect number of rotations\"\nassert     count_rotation([3,4,5,1,2,3]) == 1, \"Incorrect number of rotations\"\nassert     count_rotation([3,4,5,1,2]) == 1, \"Incorrect number of rotations\"\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     count_rotation([10,5,3,4,2,8]) == 6\nassert count_rotation([3,2,3,1,3]) == 1\nassert count_rotation([1,2,3,4,5,6]) == 0\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert count_rotation([]) == 0, \"Empty Array\"\nassert count_rotation([1]) == 0, \"One Element Array\"\nassert count_rotation([1, 1]) == 0, \"Two Elements Array\"\nassert count_rotation([1, 2]) == 1, \"Two Elements Array\"\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \ncount_rotation([0, 1, 2, 3, 4]) == 1\ncount_rotation([5, 6, 7, 8, 9]) == 2\ncount_rotation([5, 4, 3, 2, 1]) == 3\ncount_rotation([1, 2, 3, 4, 5]) == 0\ncount_rotation([]) == 0\ncount_rotation([-1, -2, -3, -4, -5]) == 5\ncount_rotation([1, 2, 3, 4, 5, 6]) == 3\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     count_rotation([1, 2, 3]) == 0, \"wrong\"\nassert     count_rotation([1, 2, 3, 4, 5]) == 1, \"wrong\"\nassert     count_rotation([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1, \"wrong\"\nassert     count_rotation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2, \"wrong\"\nassert     count_rotation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 3, \"wrong\"\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\nprint(count_rotation(arr = [10,11,12,13,14,15]))\nprint(count_rotation(arr = [5,4,3,2,1,0]))\nprint(count_rotation(arr = []))\nprint(count_rotation(arr = [-1]))\nprint(count_rotation(arr = [-1,0]))\n\nprint(\"\\n#### count_rotation_ii ###\")\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n\ncount_rotation([1,2,3,4,5]) == 1\ncount_rotation([5,4,3,2,1]) == 2\ncount_rotation([1,2,3]) == 0\ncount_rotation([]) == 0\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nprint(count_rotation([3,4,5,6,7,1,2]))\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     count_rotation([1,2,3,4,5]) == 3, \"incorrect\"\nassert     count_rotation([5,4,3,2,1]) == 1, \"incorrect\"\nassert     count_rotation([5,4,3,2,1]) == 0, \"incorrect\"\nassert     count_rotation([5,4,3,2,1]) == 0, \"incorrect\"\nassert     count_rotation([1,2,3,4,5]) == 3, \"incorrect\"\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert \nis_perfect_square(9) == True\nis_perfect_square(10) == False\nis_perfect_square(15) == True\nis_perfect_square(0) == False\nis_perfect_square(-1) == False\nis_perfect_square(-2) == False\nis_perfect_square(-3) == False\nis_perfect_square(-4) == False\nis_perfect_square(4) == True\nis_perfect_square(9) == True\nis_perfect_square(10) == False\nis_perfect_square(15) == True\nis_perfect_square(0) == False\nis_perfect_square(-1) == False\nis_perfect_square(-2) == False\nis_perfect_square(-3) == False\nis_perfect_square(-4) == False\nis_perfect_square(4) == True\nis_perfect_square(9) == True\nis_perfect_square(10) == False\nis_perfect_square(15) == True\nis_perfect_square(0) == False\nis_perfect_square(-1) == False\nis_perfect_square(-2) == False\nis_perfect_square(-3) == False\nis_perfect_square(-4) == False\nis_perfect_square(4) == True\nis_perfect_square(9) == True\nis_perfect_square(10) == False\nis_perfect_square(15) == True\nis_perfect_square(0) == False\nis_perfect_square(-1) == False\nis_perfect_square(-2) == False\nis_perfect_square(-3) == False\nis_perfect_square(-4) == False\nis_perfect_square(4) == True\nis_perfect_square(9) == True\nis_perfect_square(10) == False\nis_perfect_square(15) == True\nis_perfect_square(0) == False\nis_perfect_square(-1) == False\nis_perfect_square(-2) == False\nis_perfect_square(-3) == False\nis_perfect_square(-4) == False\nis_perfect_square(4) == True\nis_perfect_square(9) == True\nis_perfect_square(10) == False\nis_perfect_square(15) == True\nis_perfect_square(0) == False\nis_perfect_square(-1) == False\nis_perfect_square(-2) == False\nis_perfect_square(-3) == False\nis_perfect_square(-4) == False\nis_perfect_square(4) == True\nis_perfect_square(9) == True\nis_perfect_square(10) == False\nis_perfect_square(15) == True\nis_perfect_square(0) == False\nis_perfect_square(-1) == False\nis_perfect_square(-2) == False\nis_perfect_square(-3) == False\nis_perfect_square(-4) == False\nis_perfect_square(4) == True\nis_perfect_square(9) == True\nis_perfect_square(10) == False\nis_perfect_square(15) == True\nis_perfect_square(0) == False\nis_perfect_square(-1) == False\nis_perfect_square(-2) == False\nis_perfect_square(-3) == False\nis_perfect_square(-4) == False\nis_perfect_square(4) == True\nis_perfect_square(9) == True\nis_perfect_square(10) == False\nis_perfect_square(15) == True\nis_perfect_square(0) == False\nis_perfect_square(-1) == False\nis_perfect_square(-2) == False\nis_perfect_square(-3) == False\nis_perfect_square(-4) == False\nis_perfect_square(4) == True\nis_perfect_square(9) == True\nis_perfect_square(10) == False\nis_perfect_square(15) == True\nis_perfect_square(0) == False\nis_perfect_square(-1) == False\nis_perfect_square(-2) == False\nis_perfect_square(-3) == False\nis_perfect_square(-4) == False\nis_perfect_square(4) == True\nis_perfect_square(9) == True\nis_perfect_square(10) == False\nis_perfect_square(15) == True\nis_perfect_square(0) == False\nis_perfect_square(-1) == False\nis_perfect_square(-2) == False\nis_perfect_square(-3) == False\nis_perfect_square(-4) == False\nis_perfect_square(4) == True\nis_perfect_square(9) == True\nis_perfect_square(10) == False\nis_perfect_square(15) == True\nis_perfect_square(0) == False\nis_perfect_square(-1) == False\nis_perfect_square(-2) == False\nis_perfect_square(-3) == False\nis_perfect_square(-4) == False\nis_perfect_square(4) == True\nis_perfect_square(9) == True\nis_perfect_square(10) == False\nis_perfect_square(15) == True\nis_perfect_square(0) == False\nis_perfect_square(-1) == False\nis_perfect_square(-2) == False\nis_perfect_square(-3) == False\nis_perfect_square(-4) == False\nis_perfect_square(4) == True\nis_perfect_square(9) == True\nis_perfect_square(10) == False\nis_perfect_square(15) == True\nis_perfect_square(0) == False\nis_perfect_square(-1) == False\nis_perfect_square(-2) == False\nis_perfect_square(-3) == False\nis_perfect_square(-4) == False\nis_perfect_square(4) == True\nis_perfect_square(9) == True\nis_perfect_square(10) == False\nis_perfect_square(15) == True\nis_perfect_square(0) == False\nis_perfect_square(-1) == False\nis_perfect_square(-2) == False\nis_perfect_square(-3) == False\nis_perfect_square(-4) == False\nis_perfect_square(4) == True\nis_perfect_square(9) == True\nis_perfect_square(10) == False\nis_perfect_square(15) == True\nis_perfect_square(0) == False\nis_perfect_square(-1) == False\nis_perfect_square(-2) == False\nis_perfect_square(-3) == False\nis_perfect_square(-4) == False\nis_perfect_square(4) == True\nis_perfect_square(9) == True\nis_perfect_square(10) == False\nis_perfect_square(15) == True\nis_perfect_square(0) == False\nis_perfect_square(-1) == False\nis_perfect_square(-2) == False\nis_perfect_square(-3) == False\nis_perfect_square(-4) == False\nis_perfect_square(4) == True\nis_perfect_square(9) == True\nis_perfect_square(10) == False\nis_perfect_square(15) == True\nis_perfect_square(0) == False\nis_perfect_square(-1) == False\nis_perfect_square(-2) == False\nis_perfect_square(-3) == False\nis_perfect_square(-4) == False\nis_perfect_square(4) == True\nis_perfect_square(9) == True\nis_perfect_square(10) == False\nis_perfect_square(15) == True\nis_perfect_square(0) == False\nis_perfect_square(-1) == False\nis_perfect_square(-2) == False\nis_perfect_square(-3) == False\nis_perfect_square(-4) == False\nis_perfect_square(4) == True\nis_perfect_square(9) == True\nis_perfect_square(10) == False\nis_perfect_square(15) == True\nis_perfect_square(0) == False\nis_perfect_square(-1) == False\nis_perfect_square(-2) == False\nis_perfect_square(-3) == False\nis_perfect_square("
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_perfect_square(0)    ==    False, \"Wrong answer\"\nassert     is_perfect_square(1)    ==    False, \"Wrong answer\"\nassert     is_perfect_square(2)    ==    False, \"Wrong answer\"\nassert     is_perfect_square(3)    ==    True, \"Wrong answer\"\nassert     is_perfect_square(4)    ==    False, \"Wrong answer\"\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nimport math\ndef is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not.\n    '''\n    pass\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     is_perfect_square(1) == False, \"Should return False as 1 is not perfect square\"\nassert is_perfect_square(2) == True, \"Should return True as 2 is perfect square\"\nassert is_perfect_square(16) == False, \"Should return False as 16 is not perfect square\"\nassert is_perfect_square(129) == False, \"Should return False as 129 is not perfect square\"\nassert is_perfect_square(9) == True, \"Should return True as 9 is perfect square\"\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ndef power_function(x,y):\n    '''\n    Write a function that takes 2 arguments: x and y. Your function should return x raised to the power of y. https://www.geeksforgeeks.org/power-function-python/\n    '''\n    pass\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     is_perfect_square(9) == True\nassert     is_perfect_square(16) == False\nassert     is_perfect_square(100) == False\n\ndef is_perfect_square(n) :\n    '''\n    In which squares all the integer numbers from 1 to N are written in their corresponding squares. For example, the numbers written in the squares of 2,4,8 are 2,4,16. Write a function that takes N as input and checks whether the numbers written in the squares of N are in the corresponding squares or not.\n    '''\n    pass"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\n'''\nWe can write the problem in the way we know that we can check if a number is perfect square or not using the formula sqrt(n)\nThis is not a good way since it only works for small numbers like 3, which isn't a perfect square.\nTo solve this problem, we can use the formula of Pythagoras. So, we can create a function that will take a number as input and will return the value of n+sqrt(n) where n is the given number\n'''\n\ndef sqrt(n) :\n    '''\n    Write a function to calculate the square root of a number. https://www.geeksforgeeks.org/square-root-of-a-number-using-python/\n    '''\n    pass\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     is_perfect_square(1) == False\nassert     is_perfect_square(4) == True\nassert     is_perfect_square(9) == False\nassert     is_perfect_square(16) == True\nassert     is_perfect_square(25) == False\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \nassert not is_product_even([1,2,3])\nassert not is_product_even([-1,1])\nassert not is_product_even([1,2,-3])\nassert is_product_even([2,1,1])\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     is_product_even([1,2,3,4,5])\nassert     is_product_even([2,4,6,8,10]) == True\nassert     is_product_even([5,8,10,12,15]) == False"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \nassert is_product_even([2,4,5])\nassert is_product_even([2,3,5]) == False\nassert is_product_even([2,3,5,7])\nassert is_product_even([2,4,5,7]) == False\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     is_product_even([1,2,3,4]) == False, 'inputs are not correct'\nassert     is_product_even([1,2,3,4,5,6]) == True, 'inputs are not correct'\nassert is_product_even([1,2,3]) == True, 'inputs are not correct'\nassert is_product_even([1,2,3,4,5]) == False, 'inputs are not correct'\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n    is_product_even([2,4,5,6]) == False, \"Should be False\"\n    is_product_even([2,4,5,6,10]) == True, \"Should be True\"\n    is_product_even([0]) == True, \"Should be True\"\n    is_product_even([10,10]) == True, \"Should be True\"\n    is_product_even([-2,-4,-5,-6,-10]) == False, \"Should be False\"\n    is_product_even([2,4,5,6,0]) == False, \"Should be False\"\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert \n\ndef is_product_even_v2(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    pass\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     is_product_even([1,2,3,4,5]) == False, \"Failed: is_product_even\"\nassert     is_product_even([1,2,3,4,5,6,7]) == False, \"Failed: is_product_even\"\nassert     is_product_even([3,4,5,6,7]) == False, \"Failed: is_product_even\"\nassert     is_product_even([3,4,5,6,7,8]) == False, \"Failed: is_product_even\"\nassert     is_product_even([3,4,5,6,7,8,9]) == False, \"Failed: is_product_even\"\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert \n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n\nis_product_even([1,2,3,4])\n\ndef is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    pass\n\n\nassert is_product_even([1,2,3,4])\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert "
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert \n\nprint('\\nmax_sum_list Test Cases:')\nprint(f\"Input: \\n{max_sum_list([[], []]) == []}\")\nprint(f\"Input: \\n{max_sum_list([[1], [2], [3], [4]]) == [[1], [2], [3], [4]]}\")\nprint(f\"Input: \\n{max_sum_list([[1], [2], [3], [4], [5], [6]]) == [[1], [2], [3], [4], [5], [6]]}\")\nprint(f\"Input: \\n{max_sum_list([[1, 2, 3], [4, 5, 6]]) == [[1, 2, 3], [4, 5, 6]]}\")\nprint(f\"Input: \\n{max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]}\")\nprint(f\"Input: \\n{max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]}\")\nprint(f\"Input: \\n{max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]]}\")\nprint(f\"Input: \\n{max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21]]}\")\nprint(f\"Input: \\n{max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21], [22, 23, 24]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21], [22, 23, 24]]}\")\nprint(f\"Input: \\n{max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21], [22, 23, 24], [25, 26, 27]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21], [22, 23, 24], [25, 26, 27]]}\")\nprint(f\"Input: \\n{max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21], [22, 23, 24], [25, 26, 27], [28, 29, 30], [31, 32, 33]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21], [22, 23, 24], [25, 26, 27], [28, 29, 30], [31, 32, 33]]}\")\nprint(f\"Input: \\n{max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21], [22, 23, 24], [25, 26, 27], [28, 29, 30], [31, 32, 33], [34, 35, 36]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21], [22, 23, 24], [25, 26, 27], [28, 29, 30], [31, 32, 33], [34, 35, 36]]}\")\nprint(f\"Input: \\n{max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21], [22, 23, 24], [25, 26, 27], [28, 29, 30], [31, 32, 33], [34, 35, 36], [37, 38, 39]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21], [22, 23, 24], [25, 26, 27], [28, 29, 30], [31, 32, 33], [34, 35, 36], [37, 38, 39]]}\")\nprint(f\"Input: \\n{max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21], [22, 23, 24], [25, 26, 27], [28, 29, 30], [31, 32, 33], [34, 35, 36], [37, 38, 39], [40, 41, 42], [43, 44, 45]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21], [22, 23, 24], [25, 26, 27], [28, 29, 30], [31, 32, 33], [34, 35, 36], [37, 38, 39], [40, 41, 42], [43, 44, 45]]}\")\nprint(f\"Input: \\n{max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21], [22, 23, 24], [25, 26, 27], [28, 29, 30], [31, 32, 33], [34, 35, 36], [37, 38, 39], [40, 41, 42], [43, 44, 45], [46, 47, 48]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21], [22, 23, 24], [25, 26, 27], [28, 29, 30], [31, 32, 33], [34, 35, 36], [37, 38, 39], [40, 41, 42], [43, 44, 45], [46, 47, 48]]}\")\nprint(f\"Input: \\n{max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21], [22, 23, 24], [25, 26, 27], [28, 29, 30], [31, 32, 33], [34, 35, 36], [37, 38, 39], [40, 41, 42], [43, 44, 45], [46, 47, 4"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_sum_list([1, -2, -3, 5, -3]) == [[1, -2, -3, 5], [-3, -3], [-2, -1], [5]]\nassert     max_sum_list([[1, -2, -3, 5, -3], [-3, -2, -1]]) == [[1, -2, -3, 5], [-3, -3], [-2, -1]]\nassert     max_sum_list([[1, -2, -3, 5], [-3, -2, -1]]) == [[1, -2, -3, 5]]\nassert     max_sum_list([[1, 2, 3], [4, 5, 6]]) == [[1, 2, 3], [4, 5, 6]]\nassert     max_sum_list([[1, 2, 3], [4, 5, 6, 7]]) == [[1, 2, 3, 4, 5, 6, 7]]\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert "
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\ndef max_sum_list_short(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    pass\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_sum_list([[1,2], [-1,1], [-1,2], [-1,3]]) == [-1,2], 'incorrect'\nassert     max_sum_list([[3,4,-7,2,6], [1,1,3,2,1], [1,0,1,0,1]]) == [2,1,1], 'incorrect'\nassert     max_sum_list([[6,3,2,5], [1,1,4,6], [0,7,1,0]]) == [6,3,2], 'incorrect'\nassert     max_sum_list([[9,8,7], [2,4,6], [5,5,1]]) == [7,9], 'incorrect'\nassert     max_sum_list([[2,9,9,8,5,7], [3,9,7,9,7,2], [4,2,9,9,5,8], [4,8,9,9,7,9]]) == [9,9,9], 'incorrect'\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     max_sum_list([[1,2], [3,4], [5,6,7]]) == [[5,6,7]], \"Wrong answer\"\nassert     max_sum_list([[0,1], [1,2], [3,4,5]]) == [[0,1], [1,2], [3,4,5]], \"Wrong answer\"\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_sum_list([[1,2],[3,4],[5,6,7],[8,9,10]]) == [[5,6,7],[8,9,10]]\nassert     max_sum_list([[1,2],[3,4,5],[6,7,8,9]]) == [[6,7,8,9]]\nassert     max_sum_list([[1,2,3,4],[5,6,7,8],[9,10,11,12]]) == [[10,11,12]]\nassert     max_sum_list([[10,10,10]]) == [[10,10,10]]\nassert     max_sum_list([[1]]) == [[1]]\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     max_sum_list(list_1) == [3, 6, 6, 7, 7, 7, 7, 7], \"Wrong Answer\"\nassert     max_sum_list(list_2) == [], \"Wrong Answer\"\nassert     max_sum_list(list_3) == [[3, 3], [4, 5, 4], [3, 7, 7], [4, 8, 7], [6, 3, 3]], \"Wrong Answer\"\nassert     max_sum_list(list_4) == [[3, 3], [4, 5, 4], [3, 7, 7], [4, 8, 7], [6, 3, 3]], \"Wrong Answer\"\nassert     max_sum_list(list_5) == [[3, 3], [4, 5, 4], [3, 7, 7], [4, 8, 7], [6, 3, 3]], \"Wrong Answer\"\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     max_run_uppercase('AabcDcBbc') == 2, \"Example 1\"\nassert     max_run_uppercase('aAaBbCc') == 0, \"Example 2\"\nassert     max_run_uppercase('aAaBbCc') == 3, \"Example 3\"\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     max_run_uppercase('HELLO WORLD') == 1\nassert     max_run_uppercase('abcdefg') == 2\nassert     max_run_uppercase('AbcdeFGH') == 0\nassert     max_run_uppercase('ABBCDEFGHIJK') == 1\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     max_run_uppercase('A') == 'A', 'Not passing the test'\nassert     max_run_uppercase('aa') == 'aa', 'Not passing the test'\nassert     max_run_uppercase('aA') == 'A', 'Not passing the test'\nassert     max_run_uppercase('AA') == 'AA', 'Not passing the test'\nassert     max_run_uppercase('AAa') == 'aAa', 'Not passing the test'\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     max_run_uppercase('abcd') == 0, \"This should be 1\"\nassert     max_run_uppercase('aBcDeFF') == 3, \"This should be 3\"\nassert     max_run_uppercase('aeiou') == 1, \"This should be 1\"\nassert     max_run_uppercase('asdfghjkl') == 0, \"This should be 0\"\nassert     max_run_uppercase('aeiou') == 0, \"This should be 0\"\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     max_run_uppercase(\"h\") == 1\nassert     max_run_uppercase(\"H\") == 1\nassert     max_run_uppercase(\"a\") == 1\nassert     max_run_uppercase(\"A\") == 1\nassert     max_run_uppercase(\"AB\") == 1\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \n\ntest_str = 'abcABC1234'\nmax_run_uppercase(test_str"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     max_run_uppercase(\"AAaAAsdf\") == 6, \"For example, for input 'AAaAAsdf' output should be 6, but got {output}\".format(output=max_run_uppercase(\"AAaAAsdf\"))\nassert     max_run_uppercase(\"AASDFAsdf\") == 0, \"For example, for input 'AASDFAsdf' output should be 0, but got {output}\".format(output=max_run_uppercase(\"AASDFAsdf\"))\nassert     max_run_uppercase(\"AAabAA\") == 3, \"For example, for input 'AAabAA' output should be 3, but got {output}\".format(output=max_run_uppercase(\"AAabAA\"))\nassert     max_run_uppercase(\"AAaAsdf\") == 6, \"For example, for input 'AAaAsdf' output should be 6, but got {output}\".format(output=max_run_uppercase(\"AAaAsdf\"))\nassert     max_run_uppercase(\"AASDFAsdf\") == 0, \"For example, for input 'AASDFAsdf' output should be 0, but got {output}\".format(output=max_run_uppercase(\"AASDFAsdf\"))\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \nmax_run_uppercase('PYTHON') == 2, \"Wrong result\"\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \n    max_run_uppercase(\"UPPER\") == 3\nassert \n    max_run_uppercase(\"Run\") == 1\nassert \n    max_run_uppercase(\"\") == 0\nassert \n    max_run_uppercase(\"A\") == 1\nassert \n    max_run_uppercase(\"AAAAA\") == 4\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     first_odd([]) == None, \"Empty list\"\nassert     first_odd([1,2,3]) == None, \"positive number\"\nassert     first_odd([1,2,3,4,5]) == 4, \"Even number\"\nassert     first_odd([2,3,4,5,6]) == 6, \"odd number\"\nassert     first_odd([-3, -4, -5, -6, -7]) == -3, \"negative number\"\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     first_odd([]) == None, 'empty list'\nassert     first_odd([3, 4, 5, 6]) == 6,'returns 6 when given list is [3, 4, 5, 6]'\nassert     first_odd([1, 2, 3, 4, 5, 6]) == 3,'returns 3 when given list is [1, 2, 3, 4, 5, 6]'\nassert     first_odd([0, 2, 4, 6, 8, 10]) == 8,'returns 8 when given list is [0, 2, 4, 6, 8, 10]'\nassert     first_odd([10, 2, 4, 6, 8, 10]) == 10,'returns 10 when given list is [10, 2, 4, 6, 8, 10]'\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert \n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     first_odd([]) == None, \"Empty list\"\nassert     first_odd([1]) == 1, \"One element\"\nassert     first_odd([2, 3, 4, 5, 6]) == 6, \"Find the first odd number\"\nassert     first_odd([1, 2, 3, 4, 5, 6]) == None, \"All numbers are even\"\nassert     first_odd([]) == None, \"Empty list\"\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n\nif __name__ == \"__main__\":\n    '''\n    Command line inputs are passed to the program in the following format:\n    python3 first_odd.py <n> <array of numbers>\n    '''\n    # check correct number of command line arguments\n    if len(sys.argv)!= 3:\n        raise SystemExit(f'The program takes exactly 3 command line arguments (n and array).\\nUsage: python3 {sys.argv[0]} <n> <array of numbers>')\n\n    # check the correctness of the first odd\n    assert first_odd([2,3,5,6,4,7,8]) == 5\n\n    # check the correctness of the first odd\n    "
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     first_odd([1, 2, 3, 4, 5, 6, 7]) == 1, f'Expected first_odd([1, 2, 3, 4, 5, 6, 7]) to return 1 but returned {first_odd([1, 2, 3, 4, 5, 6, 7])} instead.'\nassert     first_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 3, f'Expected first_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) to return 3 but returned {first_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])} instead.'\nassert     first_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299]) == 27:\n    print('first_odd() looks correct.')\nelse:\n    print(f'first_odd() does not look correct.')\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert     first_odd([1, 2, 3, 4, 5, 6]) == 3, 'Wrong output'\nassert     first_odd([1, 2, 3, 4, 5, 6, 6]) == 6, 'Wrong output'\nassert     first_odd([1, 2, 3, 4, 5, 5]) == 5, 'Wrong output'\nassert     first_odd([1, 2, 3, 4, 5, 5, 2]) == 2, 'Wrong output'\nassert     first_odd([]) == None, 'Wrong output'\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     first_odd([-5,-2,2,3,4,6]) == -1, \"Should be -1\"\nassert     first_odd([1,2,3,4,5,6]) == 2, \"Should be 2\"\nassert     first_odd([3,4,5,6,7,8,9,10]) == 1, \"Should be 1\"\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert \n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     first_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ==     True,     'Should return True if the first odd number in the list'\nassert     first_odd([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) ==     False,     'Should return False if the first odd number in the list'\nassert     first_odd([11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) ==     True,     'Should return True if the first odd number in the list'\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_K((2, 1, 3), 2) == True\nassert     check_K((2, 1, 3), 1) == False\nassert     check_K((4, 1, 3), 3) == True\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_K([(1, 2, 3), (4, 5), (1, 2), (4, 5), (3, 6), (1, 2, 3), (2, 3)], 3) == True\nassert     check_K([(1, 2, 3), (4, 5), (1, 2), (4, 5), (3, 6), (1, 2, 3), (2, 3)], 4) == True\nassert     check_K([(1, 2, 3), (4, 5), (1, 2), (4, 5), (3, 6), (1, 2, 3), (2, 3)], 5) == True\nassert     check_K([(1, 2, 3), (4, 5), (1, 2), (4, 5), (3, 6), (1, 2, 3), (2, 3)], 0) == True\nassert     check_K([(1, 2, 3), (4, 5), (1, 2), (4, 5), (3, 6), (1, 2, 3), (2, 3)], 6) == False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_K((0,1,2,3), 3)     == True \nassert     check_K((0,1,2,3,4), 3)     == False \nassert     check_K((0,1,2,3,4), 4)     == True \nassert     check_K((0,1,2,3,4,5), 4)     == True \nassert     check_K((0,1,2,3,4,5), 5)     == False \n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert     check_K([(1,2), (1,3), (1,4), (2,3), (2,4), (3,4), (4,5)], 3) == True\nassert     check_K([(1,2), (1,3), (1,4), (2,3), (2,4), (3,4), (4,5)], 4) == True\nassert     check_K([(1,2), (1,3), (1,4), (2,3), (2,4), (3,4), (4,5)], 5) == False\nassert     check_K([(1,2), (1,3), (1,4), (2,3), (2,4), (3,4), (4,5)], 6) == False\n\n\ndef check_K_from_file(filename, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    pass\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert \n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_K(test_tup, 5) == True, \"Should be True\"\nassert     check_K(test_tup, 1) == False, \"Should be False\"\nassert     check_K(test_tup, 2) == False, \"Should be False\"\nassert     check_K(test_tup, 3) == True, \"Should be True\"\n\nprint(\"\\nAll test cases passed!!!\")"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert "
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_K((('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1)), 1) == True, \"Should be True\"\nassert     check_K((('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1)), 2) == False, \"Should be False\"\nassert     check_K((('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 2)), 2) == True, \"Should be True\"\nassert     check_K((('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 3)), 3) == True, \"Should be True\"\nassert     check_K((('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 1), ('a', 4)), 4) == False, \"Should be False\"\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_K((0,1,2),0) == True, \"Wrong output for check_K\"\nassert     check_K((0,1,2),1) == False, \"Wrong output for check_K\"\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert \nassert check_K((1,2,3), 0) == False, 'List does not contain the k'\nassert check_K((1,2,3), 4) == False, 'List does not contain the k'\nassert check_K((1,2,3), 2) == True, 'List does contain the k'\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "assert     check_smaller((2, 4), (1, 2, 3)) == (True, False), \"Wrong answer\"\nassert     check_smaller((2, 4), (1, 3, 4)) == (True, True), \"Wrong answer\"\nassert     check_smaller((1, 2, 3), (2, 4, 5)) == (True, True), \"Wrong answer\"\nassert     check_smaller((1, 2, 3), (3, 4, 5)) == (True, False), \"Wrong answer\"\n\nprint(\"check_smaller() function works correctly!\")"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "assert     check_smaller((3,4),(5,3))    == (True, False)\nassert     check_smaller((-3,-4),(-5,-3)) == (True, False)\nassert     check_smaller((0,4),(0,5)) == (False, True)\nassert     check_smaller((0,-3),(0,-5)) == (False, True)\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "assert     check_smaller(('a','b'), ('b','c')) == True, \\\n        '\\n(a,b) < (b,c): incorrect result'\nassert     check_smaller(('a','b'), ('a','c')) == False, \\\n        '\\n(a,b) < (a,c): incorrect result'\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "assert \n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "assert     check_smaller((3, 2), (5, 4)) == (3, 2)\nassert     check_smaller((7, 2), (5, 4)) == (7, 2)\nassert     check_smaller((2, 3), (3, 4)) == (2, 3)\nassert     check_smaller((5, 5), (5, 5)) == (5, 5)\nassert     check_smaller((5, 5), (6, 5)) == (5, 5)\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "assert     check_smaller((4, 2), (5, 1)) == False\nassert     check_smaller((2, 1), (4, 2)) == True\nassert     check_smaller((3, 4), (2, 1)) == True\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "assert \nassert check_smaller((5, 6, 5), (5, 3, 4)) == True\nassert check_smaller((5, 6, 5), (7, 3, 4)) == False\nassert check_smaller((5, 6, 5), (7, 8, 9)) == False\nassert check_smaller((5, 7, 5), (5, 3, 4)) == False\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "assert     check_smaller((1,2,3), (4,5,6)) == False\nassert     check_smaller((1,2,3), (6,5,4)) == False\nassert     check_smaller((1,2,3), (6,4,5)) == False\nassert     check_smaller((1,2,3), (4,6,5)) == True\nassert     check_smaller((4,6,5), (1,2,3)) == False\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "assert     check_smaller((1,2,3), (2,3,4)) == True\nassert     check_smaller((2,3,4), (2,3,4)) == True\nassert     check_smaller((2,3,4), (3,2,4)) == False\nassert     check_smaller((3,2,4), (2,3,4)) == False\nassert     check_smaller((4,2,3), (2,3,4)) == True\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "assert     check_smaller((0, 5), (1, 2))     == True\nassert     check_smaller((0, 5), (1, 0))     == False\nassert     check_smaller((0, 0), (0, 0))     == True\n\nprint('check_smaller passed!')\n"
    }
]